uint64_t sub_1000026A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_1000026DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100006BFC(v2 + *(int *)(a1 + 24), a2);
}

uint64_t sub_1000026EC(__int128 *a1)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  if (!sub_100063D6C(2, 17, 0, 0))
    return v2;
  v3 = v2;
  return swift_getOpaqueTypeMetadata2(0, &v3, &opaque type descriptor for <<opaque return type of WidgetConfiguration._containerBackgroundRemovable(_:)>>, 0);
}

uint64_t sub_100002750(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v2 = *a1;
  v1 = a1[1];
  if (sub_100063D6C(2, 17, 0, 0))
  {
    v4[0] = v2;
    v4[1] = v1;
    return swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of WidgetConfiguration._containerBackgroundRemovable(_:)>>, 1);
  }
  return v1;
}

uint64_t sub_1000027AC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000027EC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_100002830()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008BA38;
  if (!qword_10008BA38)
  {
    v1 = sub_1000027EC(&qword_10008BA30);
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticConfiguration<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10008BA38);
  }
  return result;
}

void type metadata accessor for CLAccuracyAuthorization(uint64_t a1)
{
  sub_100006DC8(a1, &qword_10008BA40, (uint64_t)&unk_1000817A0);
}

__n128 initializeWithTake for ColorSchemeSpecificImageSet(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_100006DC8(a1, &qword_10008BA48, (uint64_t)&unk_100081818);
}

char *sub_1000028B4(char *a1, char **a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  void *v57;
  void *v58;
  id v59;
  id v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  id v68;
  id v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  id v80;
  id v81;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v12[(v5 + 16) & ~(unint64_t)v5];
    swift_retain(v12);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v13 = *a2;
      if (*a2 == (char *)1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        v29 = a2[1];
        *(_QWORD *)a1 = v13;
        *((_QWORD *)a1 + 1) = v29;
        v30 = v13;
        v31 = v29;
      }
      v32 = a2[3];
      *((_QWORD *)a1 + 2) = a2[2];
      *((_QWORD *)a1 + 3) = v32;
      *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
      a1[36] = *((_BYTE *)a2 + 36);
      v33 = a2[6];
      *((_QWORD *)a1 + 5) = a2[5];
      *((_QWORD *)a1 + 6) = v33;
      a1[56] = *((_BYTE *)a2 + 56);
      v34 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
      v35 = &a1[v34];
      v36 = (char *)a2 + v34;
      v37 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
      v38 = *(_QWORD *)(v37 - 8);
      v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v33);
      if (v39(v36, 1, v37))
      {
        v40 = sub_1000027AC(&qword_10008BA68);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        v53 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v35, v36, v53);
        v54 = *(int *)(v37 + 20);
        v55 = &v35[v54];
        v56 = &v36[v54];
        v57 = *(void **)&v36[v54];
        if (v57 == (void *)1)
        {
          *(_OWORD *)v55 = *(_OWORD *)v56;
        }
        else
        {
          v79 = (void *)*((_QWORD *)v56 + 1);
          *(_QWORD *)v55 = v57;
          *((_QWORD *)v55 + 1) = v79;
          v80 = v57;
          v81 = v79;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      }
      v64 = a1;
      v65 = a3;
      v66 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v8;
      v9 = a2[3];
      *((_QWORD *)a1 + 2) = a2[2];
      *((_QWORD *)a1 + 3) = v9;
      v10 = a2[5];
      *((_QWORD *)a1 + 4) = a2[4];
      *((_QWORD *)a1 + 5) = v10;
      a1[48] = *((_BYTE *)a2 + 48);
      v11 = a2[7];
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      if (v11 == (char *)1)
      {
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
      }
      else
      {
        v20 = a2[8];
        *((_QWORD *)a1 + 7) = v11;
        *((_QWORD *)a1 + 8) = v20;
        v21 = v11;
        v22 = v20;
      }
      *((_DWORD *)a1 + 18) = *((_DWORD *)a2 + 18);
      a1[76] = *((_BYTE *)a2 + 76);
      v23 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
      v24 = &a1[v23];
      v25 = (char *)a2 + v23;
      v26 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
      v27 = *((_QWORD *)v26 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v27 + 48))(v25, 1, v26))
      {
        v28 = sub_1000027AC(&qword_10008BA60);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        v48 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v24, v25, v48);
        v49 = v26[5];
        v50 = &v24[v49];
        v51 = &v25[v49];
        v52 = *(void **)&v25[v49];
        if (v52 == (void *)1)
        {
          *(_OWORD *)v50 = *(_OWORD *)v51;
        }
        else
        {
          v67 = (void *)*((_QWORD *)v51 + 1);
          *(_QWORD *)v50 = v52;
          *((_QWORD *)v50 + 1) = v67;
          v68 = v52;
          v69 = v67;
        }
        v70 = v26[6];
        v71 = &v24[v70];
        v72 = &v25[v70];
        *(_OWORD *)v71 = *(_OWORD *)v72;
        v71[16] = v72[16];
        v73 = v26[7];
        v74 = &v24[v73];
        v75 = &v25[v73];
        v76 = type metadata accessor for URL(0);
        v77 = *(_QWORD *)(v76 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
        {
          v78 = sub_1000027AC(&qword_10008BA58);
          memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v74, v75, v76);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v74, 0, 1, v76);
        }
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v27 + 56))(v24, 0, 1, v26);
      }
      v64 = a1;
      v65 = a3;
      v66 = 1;
    }
    else
    {
      *(_QWORD *)a1 = *a2;
      a1[8] = *((_BYTE *)a2 + 8);
      v14 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
      v15 = &a1[v14];
      v16 = (char *)a2 + v14;
      v17 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
      v18 = *((_QWORD *)v17 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
      {
        v19 = sub_1000027AC(&qword_10008BA50);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        v41 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v15, v16, v41);
        v42 = v17[5];
        v43 = *(_QWORD *)&v16[v42];
        *(_QWORD *)&v15[v42] = v43;
        v44 = v17[6];
        v45 = &v15[v44];
        v46 = &v16[v44];
        v47 = *(void **)&v16[v44];
        swift_bridgeObjectRetain(v43);
        if (v47 == (void *)1)
        {
          *(_OWORD *)v45 = *(_OWORD *)v46;
        }
        else
        {
          v58 = (void *)*((_QWORD *)v46 + 1);
          *(_QWORD *)v45 = v47;
          *((_QWORD *)v45 + 1) = v58;
          v59 = v47;
          v60 = v58;
        }
        v61 = v17[7];
        v62 = &v15[v61];
        v63 = &v16[v61];
        *(_QWORD *)v62 = *(_QWORD *)v63;
        v62[8] = v63[8];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
      }
      v64 = a1;
      v65 = a3;
      v66 = 0;
    }
    swift_storeEnumTagMultiPayload(v64, v65, v66);
  }
  return a1;
}

void sub_100002D80(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      if (*(_QWORD *)a1 != 1)
      {

      }
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
      v4 = a1 + *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
      v8 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8))
      {
        v9 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v4, v9);
        v7 = *(int *)(v8 + 20);
LABEL_10:
        v10 = (id *)(v4 + v7);
        if (*v10 != (id)1)
        {

        }
      }
      break;
    case 1:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      v11 = *(void **)(a1 + 56);
      if (v11 != (void *)1)
      {

      }
      v12 = a1 + *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
      v13 = type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
      {
        v14 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
        v15 = (id *)(v12 + *(int *)(v13 + 20));
        if (*v15 != (id)1)
        {

        }
        v16 = v12 + *(int *)(v13 + 28);
        v17 = type metadata accessor for URL(0);
        v18 = *(_QWORD *)(v17 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
          (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      }
      break;
    case 0:
      v4 = a1 + *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
      v5 = type metadata accessor for NearbyEntryContent.ResolvedContent(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
      {
        v6 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
        swift_bridgeObjectRelease(*(_QWORD *)(v4 + *(int *)(v5 + 20)));
        v7 = *(int *)(v5 + 24);
        goto LABEL_10;
      }
      break;
  }
}

uint64_t sub_100002FB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int *v27;
  uint64_t v28;
  uint64_t *v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, int *);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void *v60;
  id v61;
  id v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  id v74;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  v7 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    v12 = *(void **)a2;
    if (*(_QWORD *)a2 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      v30 = *(void **)(a2 + 8);
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v30;
      v31 = v12;
      v32 = v30;
    }
    v33 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v33;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
    v34 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v34;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    v35 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
    v25 = (char *)(a1 + v35);
    v26 = (char *)(a2 + v35);
    v27 = (int *)type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
    v28 = *((_QWORD *)v27 - 1);
    v36 = *(unsigned int (**)(char *, uint64_t, int *))(v28 + 48);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    if (v36(v26, 1, v27))
    {
      v29 = &qword_10008BA68;
      goto LABEL_15;
    }
    v49 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v25, v26, v49);
    v50 = v27[5];
    v51 = &v25[v50];
    v52 = &v26[v50];
    v53 = *(void **)&v26[v50];
    if (v53 == (void *)1)
    {
      *(_OWORD *)v51 = *(_OWORD *)v52;
    }
    else
    {
      v72 = (void *)*((_QWORD *)v52 + 1);
      *(_QWORD *)v51 = v53;
      *((_QWORD *)v51 + 1) = v72;
      v73 = v53;
      v74 = v72;
    }
LABEL_30:
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v28 + 56))(v25, 0, 1, v27);
    goto LABEL_31;
  }
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v8 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v8;
    v9 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v9;
    v10 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v10;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    v11 = *(void **)(a2 + 56);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if (v11 == (void *)1)
    {
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    }
    else
    {
      v21 = *(void **)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v11;
      *(_QWORD *)(a1 + 64) = v21;
      v22 = v11;
      v23 = v21;
    }
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
    v24 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
    v25 = (char *)(a1 + v24);
    v26 = (char *)(a2 + v24);
    v27 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
    v28 = *((_QWORD *)v27 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v28 + 48))(v26, 1, v27))
    {
      v29 = &qword_10008BA60;
LABEL_15:
      v18 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(v29) - 8) + 64);
      v19 = v25;
      v20 = v26;
      goto LABEL_16;
    }
    v44 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v25, v26, v44);
    v45 = v27[5];
    v46 = &v25[v45];
    v47 = &v26[v45];
    v48 = *(void **)&v26[v45];
    if (v48 == (void *)1)
    {
      *(_OWORD *)v46 = *(_OWORD *)v47;
    }
    else
    {
      v60 = (void *)*((_QWORD *)v47 + 1);
      *(_QWORD *)v46 = v48;
      *((_QWORD *)v46 + 1) = v60;
      v61 = v48;
      v62 = v60;
    }
    v63 = v27[6];
    v64 = &v25[v63];
    v65 = &v26[v63];
    *(_OWORD *)v64 = *(_OWORD *)v65;
    v64[16] = v65[16];
    v66 = v27[7];
    v67 = &v25[v66];
    v68 = &v26[v66];
    v69 = type metadata accessor for URL(0);
    v70 = *(_QWORD *)(v69 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
    {
      v71 = sub_1000027AC(&qword_10008BA58);
      memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v67, v68, v69);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
    }
    goto LABEL_30;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v13 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v17 = *((_QWORD *)v16 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA50) - 8) + 64);
    v19 = v14;
    v20 = v15;
LABEL_16:
    memcpy(v19, v20, v18);
    goto LABEL_31;
  }
  v37 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v14, v15, v37);
  v38 = v16[5];
  v39 = *(_QWORD *)&v15[v38];
  *(_QWORD *)&v14[v38] = v39;
  v40 = v16[6];
  v41 = &v14[v40];
  v42 = &v15[v40];
  v43 = *(void **)&v15[v40];
  swift_bridgeObjectRetain(v39);
  if (v43 == (void *)1)
  {
    *(_OWORD *)v41 = *(_OWORD *)v42;
  }
  else
  {
    v54 = (void *)*((_QWORD *)v42 + 1);
    *(_QWORD *)v41 = v43;
    *((_QWORD *)v41 + 1) = v54;
    v55 = v43;
    v56 = v54;
  }
  v57 = v16[7];
  v58 = &v14[v57];
  v59 = &v15[v57];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  v58[8] = v59[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
LABEL_31:
  swift_storeEnumTagMultiPayload(a1, a3, v7);
  return a1;
}

uint64_t sub_100003408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  void *v22;
  id v23;
  id v24;
  int v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t v30;
  uint64_t *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, int *);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  void *v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void *v64;
  id v65;
  id v66;
  uint64_t v67;
  char *v68;
  char *v69;
  __int128 v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  id v78;
  id v79;

  if (a1 != a2)
  {
    sub_1000038A8(a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v7 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v12 = *(void **)a2;
      if (*(_QWORD *)a2 == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        *(_QWORD *)a1 = v12;
        v32 = *(void **)(a2 + 8);
        *(_QWORD *)(a1 + 8) = v32;
        v33 = v12;
        v34 = v32;
      }
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v35 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v35;
      v36 = *(_DWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
      *(_DWORD *)(a1 + 32) = v36;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      v37 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 48) = v37;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      v38 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
      v27 = (char *)(a1 + v38);
      v28 = (char *)(a2 + v38);
      v29 = (int *)type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
      v30 = *((_QWORD *)v29 - 1);
      v39 = *(unsigned int (**)(char *, uint64_t, int *))(v30 + 48);
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v37);
      if (v39(v28, 1, v29))
      {
        v31 = &qword_10008BA68;
        goto LABEL_16;
      }
      v52 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v27, v28, v52);
      v53 = v29[5];
      v54 = &v27[v53];
      v55 = &v28[v53];
      v56 = *(void **)&v28[v53];
      if (v56 == (void *)1)
      {
        *(_OWORD *)v54 = *(_OWORD *)v55;
      }
      else
      {
        *(_QWORD *)v54 = v56;
        v77 = (void *)*((_QWORD *)v55 + 1);
        *((_QWORD *)v54 + 1) = v77;
        v78 = v56;
        v79 = v77;
      }
    }
    else
    {
      if ((_DWORD)EnumCaseMultiPayload != 1)
      {
        v13 = *(void **)a2;
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
        *(_QWORD *)a1 = v13;
        v14 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
        v15 = (char *)(a1 + v14);
        v16 = (char *)(a2 + v14);
        v17 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
        v18 = *((_QWORD *)v17 - 1);
        if (!(*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
        {
          v40 = type metadata accessor for TimelineProviderContext(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v15, v16, v40);
          v41 = v17[5];
          v42 = *(_QWORD *)&v16[v41];
          *(_QWORD *)&v15[v41] = v42;
          v43 = v17[6];
          v44 = &v15[v43];
          v45 = &v16[v43];
          v46 = *(void **)&v16[v43];
          swift_bridgeObjectRetain(v42);
          if (v46 == (void *)1)
          {
            *(_OWORD *)v44 = *(_OWORD *)v45;
          }
          else
          {
            *(_QWORD *)v44 = v46;
            v57 = (void *)*((_QWORD *)v45 + 1);
            *((_QWORD *)v44 + 1) = v57;
            v58 = v46;
            v59 = v57;
          }
          v60 = v17[7];
          v61 = &v15[v60];
          v62 = &v16[v60];
          v63 = *(_QWORD *)v62;
          v61[8] = v62[8];
          *(_QWORD *)v61 = v63;
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
          goto LABEL_32;
        }
        v19 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA50) - 8) + 64);
        v20 = v15;
        v21 = v16;
        goto LABEL_17;
      }
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v9 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v10 = *(_QWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v10;
      v11 = *(void **)(a2 + 56);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      if (v11 == (void *)1)
      {
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      }
      else
      {
        *(_QWORD *)(a1 + 56) = v11;
        v22 = *(void **)(a2 + 64);
        *(_QWORD *)(a1 + 64) = v22;
        v23 = v11;
        v24 = v22;
      }
      v25 = *(_DWORD *)(a2 + 72);
      *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
      *(_DWORD *)(a1 + 72) = v25;
      v26 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
      v27 = (char *)(a1 + v26);
      v28 = (char *)(a2 + v26);
      v29 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
      v30 = *((_QWORD *)v29 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v28, 1, v29))
      {
        v31 = &qword_10008BA60;
LABEL_16:
        v19 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(v31) - 8) + 64);
        v20 = v27;
        v21 = v28;
LABEL_17:
        memcpy(v20, v21, v19);
LABEL_32:
        swift_storeEnumTagMultiPayload(a1, a3, v7);
        return a1;
      }
      v47 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v27, v28, v47);
      v48 = v29[5];
      v49 = &v27[v48];
      v50 = &v28[v48];
      v51 = *(void **)&v28[v48];
      if (v51 == (void *)1)
      {
        *(_OWORD *)v49 = *(_OWORD *)v50;
      }
      else
      {
        *(_QWORD *)v49 = v51;
        v64 = (void *)*((_QWORD *)v50 + 1);
        *((_QWORD *)v49 + 1) = v64;
        v65 = v51;
        v66 = v64;
      }
      v67 = v29[6];
      v68 = &v27[v67];
      v69 = &v28[v67];
      v70 = *(_OWORD *)v69;
      v68[16] = v69[16];
      *(_OWORD *)v68 = v70;
      v71 = v29[7];
      v72 = &v27[v71];
      v73 = &v28[v71];
      v74 = type metadata accessor for URL(0);
      v75 = *(_QWORD *)(v74 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
      {
        v76 = sub_1000027AC(&qword_10008BA58);
        memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v72, v73, v74);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
      }
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v30 + 56))(v27, 0, 1, v29);
    goto LABEL_32;
  }
  return a1;
}

uint64_t sub_1000038A8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for GeneralMapsTimelineEntryContent(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008BAE0, (uint64_t)&nominal type descriptor for GeneralMapsTimelineEntryContent);
}

uint64_t sub_1000038F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  v7 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v18;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    v19 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
    v20 = (char *)(a1 + v19);
    v21 = (char *)(a2 + v19);
    v22 = (int *)type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
    v23 = *((_QWORD *)v22 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
    {
      v24 = &qword_10008BA68;
LABEL_9:
      v15 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(v24) - 8) + 64);
      v16 = v20;
      v17 = v21;
      goto LABEL_10;
    }
    v36 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v20, v21, v36);
    *(_OWORD *)&v20[v22[5]] = *(_OWORD *)&v21[v22[5]];
LABEL_15:
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
    goto LABEL_18;
  }
  if ((_DWORD)EnumCaseMultiPayload != 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    v25 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
    v20 = (char *)(a1 + v25);
    v21 = (char *)(a2 + v25);
    v22 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
    v23 = *((_QWORD *)v22 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
    {
      v24 = &qword_10008BA50;
      goto LABEL_9;
    }
    v37 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v20, v21, v37);
    *(_QWORD *)&v20[v22[5]] = *(_QWORD *)&v21[v22[5]];
    *(_OWORD *)&v20[v22[6]] = *(_OWORD *)&v21[v22[6]];
    v38 = v22[7];
    v39 = &v20[v38];
    v40 = &v21[v38];
    v39[8] = v40[8];
    *(_QWORD *)v39 = *(_QWORD *)v40;
    goto LABEL_15;
  }
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v10 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v14 = *((_QWORD *)v13 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v14 + 48))(v12, 1, v13))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA60) - 8) + 64);
    v16 = v11;
    v17 = v12;
LABEL_10:
    memcpy(v16, v17, v15);
    goto LABEL_18;
  }
  v26 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v11, v12, v26);
  *(_OWORD *)&v11[v13[5]] = *(_OWORD *)&v12[v13[5]];
  v27 = v13[6];
  v28 = &v11[v27];
  v29 = &v12[v27];
  *(_OWORD *)v28 = *(_OWORD *)v29;
  v28[16] = v29[16];
  v30 = v13[7];
  v31 = &v11[v30];
  v32 = &v12[v30];
  v33 = type metadata accessor for URL(0);
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    v35 = sub_1000027AC(&qword_10008BA58);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v31, v32, v33);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
LABEL_18:
  swift_storeEnumTagMultiPayload(a1, a3, v7);
  return a1;
}

uint64_t sub_100003C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;

  if (a1 != a2)
  {
    sub_1000038A8(a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v7 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v18 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v18;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      v19 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
      v20 = (char *)(a1 + v19);
      v21 = (char *)(a2 + v19);
      v22 = (int *)type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
      v23 = *((_QWORD *)v22 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
      {
        v24 = &qword_10008BA68;
LABEL_10:
        v15 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(v24) - 8) + 64);
        v16 = v20;
        v17 = v21;
LABEL_11:
        memcpy(v16, v17, v15);
LABEL_19:
        swift_storeEnumTagMultiPayload(a1, a3, v7);
        return a1;
      }
      v36 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v20, v21, v36);
      *(_OWORD *)&v20[v22[5]] = *(_OWORD *)&v21[v22[5]];
    }
    else
    {
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        v9 = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 40) = v9;
        *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
        *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
        v10 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
        v11 = (char *)(a1 + v10);
        v12 = (char *)(a2 + v10);
        v13 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
        v14 = *((_QWORD *)v13 - 1);
        if (!(*(unsigned int (**)(char *, uint64_t, int *))(v14 + 48))(v12, 1, v13))
        {
          v26 = type metadata accessor for TimelineProviderContext(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v11, v12, v26);
          *(_OWORD *)&v11[v13[5]] = *(_OWORD *)&v12[v13[5]];
          v27 = v13[6];
          v28 = &v11[v27];
          v29 = &v12[v27];
          *(_OWORD *)v28 = *(_OWORD *)v29;
          v28[16] = v29[16];
          v30 = v13[7];
          v31 = &v11[v30];
          v32 = &v12[v30];
          v33 = type metadata accessor for URL(0);
          v34 = *(_QWORD *)(v33 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
          {
            v35 = sub_1000027AC(&qword_10008BA58);
            memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v31, v32, v33);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
          }
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
          goto LABEL_19;
        }
        v15 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA60) - 8) + 64);
        v16 = v11;
        v17 = v12;
        goto LABEL_11;
      }
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      v25 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
      v20 = (char *)(a1 + v25);
      v21 = (char *)(a2 + v25);
      v22 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
      v23 = *((_QWORD *)v22 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
      {
        v24 = &qword_10008BA50;
        goto LABEL_10;
      }
      v37 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v20, v21, v37);
      *(_QWORD *)&v20[v22[5]] = *(_QWORD *)&v21[v22[5]];
      *(_OWORD *)&v20[v22[6]] = *(_OWORD *)&v21[v22[6]];
      v38 = v22[7];
      v39 = &v20[v38];
      v40 = &v21[v38];
      v39[8] = v40[8];
      *(_QWORD *)v39 = *(_QWORD *)v40;
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
    goto LABEL_19;
  }
  return a1;
}

uint64_t sub_100003FD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_100003FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_100003FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_100004000(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  result = type metadata accessor for NearbyEntryContent(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for SuggestedDestinationEntryContent(319);
    if (v4 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for NavigationETAEntryContent(319);
      if (v5 <= 0x3F)
      {
        v6[2] = *(_QWORD *)(result - 8) + 64;
        swift_initEnumMetadataMultiPayload(a1, 256, 3, v6);
        return 0;
      }
    }
  }
  return result;
}

uint64_t *sub_10000409C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t EnumCaseMultiPayload;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  char *v23;
  int *v24;
  unsigned int (**v25)(const void *, uint64_t, int *);
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, int *);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void *v60;
  void *v61;
  id v62;
  id v63;
  uint64_t v64;
  char *v65;
  char *v66;
  unsigned int (*v67)(const void *, uint64_t, int *);
  void *v68;
  id v69;
  id v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  id v80;
  id v81;
  char *v82;
  int *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v91;
  char *v92;
  unsigned int (**v93)(const void *, uint64_t, int *);
  char *v94;
  char *__dst;
  char *__dsta;
  char *__dstb;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
    return a1;
  }
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (_OWORD *)((char *)a1 + v8);
  v10 = (void **)((char *)a2 + v8);
  v11 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000027AC(&qword_10008BB18);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_37;
  }
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v11);
  v16 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    v21 = *v10;
    v98 = v12;
    if (*v10 == (void *)1)
    {
      *v9 = *(_OWORD *)v10;
    }
    else
    {
      v35 = v10[1];
      *(_QWORD *)v9 = v21;
      *((_QWORD *)v9 + 1) = v35;
      v36 = v21;
      v37 = v35;
    }
    v38 = v10[3];
    *((_QWORD *)v9 + 2) = v10[2];
    *((_QWORD *)v9 + 3) = v38;
    *((_DWORD *)v9 + 8) = *((_DWORD *)v10 + 8);
    *((_BYTE *)v9 + 36) = *((_BYTE *)v10 + 36);
    v39 = v10[6];
    *((_QWORD *)v9 + 5) = v10[5];
    *((_QWORD *)v9 + 6) = v39;
    *((_BYTE *)v9 + 56) = *((_BYTE *)v10 + 56);
    v40 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
    v92 = (char *)v10 + v40;
    __dstb = (char *)v9 + v40;
    v24 = (int *)type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
    v41 = *((_QWORD *)v24 - 1);
    v42 = *(unsigned int (**)(char *, uint64_t, int *))(v41 + 48);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v39);
    if (v42(v92, 1, v24))
    {
      v43 = sub_1000027AC(&qword_10008BA68);
      memcpy(__dstb, v92, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      v12 = v98;
      v16 = 2;
      goto LABEL_36;
    }
    v56 = type metadata accessor for TimelineProviderContext(0);
    v45 = __dstb;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(__dstb, v92, v56);
    v57 = v24[5];
    v58 = &__dstb[v57];
    v59 = &v92[v57];
    v60 = *(void **)&v92[v57];
    v12 = v98;
    if (v60 == (void *)1)
    {
      *(_OWORD *)v58 = *(_OWORD *)v59;
    }
    else
    {
      v79 = (void *)*((_QWORD *)v59 + 1);
      *(_QWORD *)v58 = v60;
      *((_QWORD *)v58 + 1) = v79;
      v80 = v60;
      v81 = v79;
    }
    v16 = 2;
    v67 = *(unsigned int (**)(const void *, uint64_t, int *))(v41 + 56);
    goto LABEL_32;
  }
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v17 = v10[1];
    *(_QWORD *)v9 = *v10;
    *((_QWORD *)v9 + 1) = v17;
    v18 = v10[3];
    *((_QWORD *)v9 + 2) = v10[2];
    *((_QWORD *)v9 + 3) = v18;
    v19 = v10[5];
    *((_QWORD *)v9 + 4) = v10[4];
    *((_QWORD *)v9 + 5) = v19;
    *((_BYTE *)v9 + 48) = *((_BYTE *)v10 + 48);
    v20 = v10[7];
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    if (v20 == (void *)1)
    {
      *(_OWORD *)((char *)v9 + 56) = *(_OWORD *)(v10 + 7);
    }
    else
    {
      v27 = v10[8];
      *((_QWORD *)v9 + 7) = v20;
      *((_QWORD *)v9 + 8) = v27;
      v28 = v20;
      v29 = v27;
    }
    *((_DWORD *)v9 + 18) = *((_DWORD *)v10 + 18);
    *((_BYTE *)v9 + 76) = *((_BYTE *)v10 + 76);
    v30 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
    __dsta = (char *)v9 + v30;
    v31 = (char *)v10 + v30;
    v32 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
    v33 = *((_QWORD *)v32 - 1);
    v16 = 1;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
    {
      v34 = sub_1000027AC(&qword_10008BA60);
      memcpy(__dsta, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      goto LABEL_36;
    }
    v51 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(__dsta, v31, v51);
    v52 = v32[5];
    v53 = &__dsta[v52];
    v54 = &v31[v52];
    v55 = *(void **)&v31[v52];
    v100 = v12;
    if (v55 == (void *)1)
    {
      *(_OWORD *)v53 = *(_OWORD *)v54;
    }
    else
    {
      v68 = (void *)*((_QWORD *)v54 + 1);
      *(_QWORD *)v53 = v55;
      *((_QWORD *)v53 + 1) = v68;
      v69 = v55;
      v70 = v68;
    }
    v71 = v32[6];
    v72 = &__dsta[v71];
    v73 = &v31[v71];
    *(_OWORD *)v72 = *(_OWORD *)v73;
    v72[16] = v73[16];
    v74 = v32[7];
    v94 = &__dsta[v74];
    v75 = &v31[v74];
    v76 = type metadata accessor for URL(0);
    v77 = *(_QWORD *)(v76 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
    {
      v78 = sub_1000027AC(&qword_10008BA58);
      memcpy(v94, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v94, v75, v76);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v94, 0, 1, v76);
    }
    v12 = v100;
    v16 = 1;
    v67 = *(unsigned int (**)(const void *, uint64_t, int *))(v33 + 56);
    v82 = __dsta;
    v83 = v32;
LABEL_35:
    ((void (*)(char *, _QWORD, uint64_t, int *))v67)(v82, 0, 1, v83);
    goto LABEL_36;
  }
  *(_QWORD *)v9 = *v10;
  *((_BYTE *)v9 + 8) = *((_BYTE *)v10 + 8);
  v22 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  __dst = (char *)v9 + v22;
  v23 = (char *)v10 + v22;
  v24 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v25 = (unsigned int (**)(const void *, uint64_t, int *))*((_QWORD *)v24 - 1);
  if (!v25[6](v23, 1, v24))
  {
    v93 = v25;
    v101 = v16;
    v99 = v12;
    v44 = type metadata accessor for TimelineProviderContext(0);
    v45 = __dst;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(__dst, v23, v44);
    v46 = v24[5];
    v47 = *(_QWORD *)&v23[v46];
    *(_QWORD *)&__dst[v46] = v47;
    v48 = v24[6];
    v91 = &__dst[v48];
    v49 = &v23[v48];
    v50 = *(void **)&v23[v48];
    swift_bridgeObjectRetain(v47);
    if (v50 == (void *)1)
    {
      *(_OWORD *)v91 = *(_OWORD *)v49;
    }
    else
    {
      v61 = (void *)*((_QWORD *)v49 + 1);
      *(_QWORD *)v91 = v50;
      *((_QWORD *)v91 + 1) = v61;
      v62 = v50;
      v63 = v61;
    }
    v12 = v99;
    v16 = v101;
    v64 = v24[7];
    v65 = &__dst[v64];
    v66 = &v23[v64];
    *(_QWORD *)v65 = *(_QWORD *)v66;
    v65[8] = v66[8];
    v67 = v93[7];
LABEL_32:
    v82 = v45;
    v83 = v24;
    goto LABEL_35;
  }
  v26 = sub_1000027AC(&qword_10008BA50);
  memcpy(__dst, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
LABEL_36:
  swift_storeEnumTagMultiPayload(v9, v11, v16);
  (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_37:
  v84 = *(int *)(a3 + 24);
  v85 = (char *)a1 + v84;
  v86 = (char *)a2 + v84;
  v87 = type metadata accessor for TimelineEntryRelevance(0);
  v88 = *(_QWORD *)(v87 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
  {
    v89 = sub_1000027AC(&qword_10008BB20);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v85, v86, v87);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v85, 0, 1, v87);
  }
  return a1;
}

uint64_t sub_1000046D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
    goto LABEL_2;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v5, v6);
  if (EnumCaseMultiPayload == 2)
  {
    if (*(_QWORD *)v5 != 1)
    {

    }
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + 48));
    v12 = v5 + *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
    v16 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v12, 1, v16))
    {
      v17 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v12, v17);
      v15 = *(int *)(v16 + 20);
LABEL_14:
      v18 = (id *)(v12 + v15);
      if (*v18 != (id)1)
      {

      }
    }
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      if (EnumCaseMultiPayload)
        goto LABEL_2;
      v12 = v5 + *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
      v13 = type metadata accessor for NearbyEntryContent.ResolvedContent(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
        goto LABEL_2;
      v14 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
      swift_bridgeObjectRelease(*(_QWORD *)(v12 + *(int *)(v13 + 20)));
      v15 = *(int *)(v13 + 24);
      goto LABEL_14;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));
    v19 = *(void **)(v5 + 56);
    if (v19 != (void *)1)
    {

    }
    v20 = v5 + *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
    v21 = type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
    {
      v22 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v20, v22);
      v23 = (id *)(v20 + *(int *)(v21 + 20));
      if (*v23 != (id)1)
      {

      }
      v24 = v20 + *(int *)(v21 + 28);
      v25 = type metadata accessor for URL(0);
      v26 = *(_QWORD *)(v25 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
  }
LABEL_2:
  v7 = a1 + *(int *)(a2 + 24);
  v8 = type metadata accessor for TimelineEntryRelevance(0);
  v9 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  return result;
}

uint64_t sub_1000049AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t EnumCaseMultiPayload;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  char *v21;
  int *v22;
  unsigned int (**v23)(const void *, uint64_t, int *);
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  void *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, int *);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  void *v59;
  void *v60;
  id v61;
  id v62;
  uint64_t v63;
  char *v64;
  char *v65;
  unsigned int (*v66)(const void *, uint64_t, int *);
  void *v67;
  id v68;
  id v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  id v79;
  id v80;
  char *v81;
  int *v82;
  uint64_t v83;
  void *v84;
  const void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v90;
  unsigned int (**v91)(const void *, uint64_t, int *);
  char *v92;
  uint64_t v93;
  char *__dst;
  char *__dsta;
  char *__dstb;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_OWORD *)(a1 + v7);
  v9 = (void **)(a2 + v7);
  v10 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_1000027AC(&qword_10008BB18);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    goto LABEL_35;
  }
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
  v14 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    v19 = *v9;
    v97 = v11;
    v93 = a3;
    if (*v9 == (void *)1)
    {
      *v8 = *(_OWORD *)v9;
    }
    else
    {
      v33 = v9[1];
      *(_QWORD *)v8 = v19;
      *((_QWORD *)v8 + 1) = v33;
      v34 = v19;
      v35 = v33;
    }
    v36 = v9[3];
    *((_QWORD *)v8 + 2) = v9[2];
    *((_QWORD *)v8 + 3) = v36;
    *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
    *((_BYTE *)v8 + 36) = *((_BYTE *)v9 + 36);
    v37 = v9[6];
    *((_QWORD *)v8 + 5) = v9[5];
    *((_QWORD *)v8 + 6) = v37;
    *((_BYTE *)v8 + 56) = *((_BYTE *)v9 + 56);
    v38 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
    __dstb = (char *)v8 + v38;
    v39 = (char *)v9 + v38;
    v22 = (int *)type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
    v40 = *((_QWORD *)v22 - 1);
    v41 = *(unsigned int (**)(char *, uint64_t, int *))(v40 + 48);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v37);
    if (v41(v39, 1, v22))
    {
      v42 = sub_1000027AC(&qword_10008BA68);
      memcpy(__dstb, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      v11 = v97;
      v14 = 2;
      a3 = v93;
      goto LABEL_34;
    }
    v55 = type metadata accessor for TimelineProviderContext(0);
    v44 = __dstb;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(__dstb, v39, v55);
    v56 = v22[5];
    v57 = &__dstb[v56];
    v58 = &v39[v56];
    v59 = *(void **)&v39[v56];
    v11 = v97;
    a3 = v93;
    if (v59 == (void *)1)
    {
      *(_OWORD *)v57 = *(_OWORD *)v58;
    }
    else
    {
      v78 = (void *)*((_QWORD *)v58 + 1);
      *(_QWORD *)v57 = v59;
      *((_QWORD *)v57 + 1) = v78;
      v79 = v59;
      v80 = v78;
    }
    v14 = 2;
    v66 = *(unsigned int (**)(const void *, uint64_t, int *))(v40 + 56);
    goto LABEL_30;
  }
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v15 = v9[1];
    *(_QWORD *)v8 = *v9;
    *((_QWORD *)v8 + 1) = v15;
    v16 = v9[3];
    *((_QWORD *)v8 + 2) = v9[2];
    *((_QWORD *)v8 + 3) = v16;
    v17 = v9[5];
    *((_QWORD *)v8 + 4) = v9[4];
    *((_QWORD *)v8 + 5) = v17;
    *((_BYTE *)v8 + 48) = *((_BYTE *)v9 + 48);
    v18 = v9[7];
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    if (v18 == (void *)1)
    {
      *(_OWORD *)((char *)v8 + 56) = *(_OWORD *)(v9 + 7);
    }
    else
    {
      v25 = v9[8];
      *((_QWORD *)v8 + 7) = v18;
      *((_QWORD *)v8 + 8) = v25;
      v26 = v18;
      v27 = v25;
    }
    *((_DWORD *)v8 + 18) = *((_DWORD *)v9 + 18);
    *((_BYTE *)v8 + 76) = *((_BYTE *)v9 + 76);
    v28 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
    __dsta = (char *)v8 + v28;
    v29 = (char *)v9 + v28;
    v30 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
    v31 = *((_QWORD *)v30 - 1);
    v14 = 1;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
    {
      v32 = sub_1000027AC(&qword_10008BA60);
      memcpy(__dsta, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      goto LABEL_34;
    }
    v50 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(__dsta, v29, v50);
    v51 = v30[5];
    v52 = &__dsta[v51];
    v53 = &v29[v51];
    v54 = *(void **)&v29[v51];
    v99 = v11;
    if (v54 == (void *)1)
    {
      *(_OWORD *)v52 = *(_OWORD *)v53;
    }
    else
    {
      v67 = (void *)*((_QWORD *)v53 + 1);
      *(_QWORD *)v52 = v54;
      *((_QWORD *)v52 + 1) = v67;
      v68 = v54;
      v69 = v67;
    }
    v70 = v30[6];
    v71 = &__dsta[v70];
    v72 = &v29[v70];
    *(_OWORD *)v71 = *(_OWORD *)v72;
    v71[16] = v72[16];
    v73 = v30[7];
    v92 = &__dsta[v73];
    v74 = &v29[v73];
    v75 = type metadata accessor for URL(0);
    v76 = *(_QWORD *)(v75 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
    {
      v77 = sub_1000027AC(&qword_10008BA58);
      memcpy(v92, v74, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v92, v74, v75);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v92, 0, 1, v75);
    }
    v11 = v99;
    v14 = 1;
    v66 = *(unsigned int (**)(const void *, uint64_t, int *))(v31 + 56);
    v81 = __dsta;
    v82 = v30;
LABEL_33:
    ((void (*)(char *, _QWORD, uint64_t, int *))v66)(v81, 0, 1, v82);
    goto LABEL_34;
  }
  *(_QWORD *)v8 = *v9;
  *((_BYTE *)v8 + 8) = *((_BYTE *)v9 + 8);
  v20 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  __dst = (char *)v8 + v20;
  v21 = (char *)v9 + v20;
  v22 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v23 = (unsigned int (**)(const void *, uint64_t, int *))*((_QWORD *)v22 - 1);
  if (!v23[6](v21, 1, v22))
  {
    v91 = v23;
    v100 = v14;
    v98 = v11;
    v43 = type metadata accessor for TimelineProviderContext(0);
    v44 = __dst;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(__dst, v21, v43);
    v45 = v22[5];
    v46 = *(_QWORD *)&v21[v45];
    *(_QWORD *)&__dst[v45] = v46;
    v47 = v22[6];
    v90 = &__dst[v47];
    v48 = &v21[v47];
    v49 = *(void **)&v21[v47];
    swift_bridgeObjectRetain(v46);
    if (v49 == (void *)1)
    {
      *(_OWORD *)v90 = *(_OWORD *)v48;
    }
    else
    {
      v60 = (void *)*((_QWORD *)v48 + 1);
      *(_QWORD *)v90 = v49;
      *((_QWORD *)v90 + 1) = v60;
      v61 = v49;
      v62 = v60;
    }
    v11 = v98;
    v14 = v100;
    v63 = v22[7];
    v64 = &__dst[v63];
    v65 = &v21[v63];
    *(_QWORD *)v64 = *(_QWORD *)v65;
    v64[8] = v65[8];
    v66 = v91[7];
LABEL_30:
    v81 = v44;
    v82 = v22;
    goto LABEL_33;
  }
  v24 = sub_1000027AC(&qword_10008BA50);
  memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
LABEL_34:
  swift_storeEnumTagMultiPayload(v8, v10, v14);
  (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_35:
  v83 = *(int *)(a3 + 24);
  v84 = (void *)(a1 + v83);
  v85 = (const void *)(a2 + v83);
  v86 = type metadata accessor for TimelineEntryRelevance(0);
  v87 = *(_QWORD *)(v86 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86))
  {
    v88 = sub_1000027AC(&qword_10008BB20);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v87 + 16))(v84, v85, v86);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
  }
  return a1;
}

uint64_t sub_100004FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  int v37;
  uint64_t v38;
  char *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned int (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  void *v78;
  void *v79;
  id v80;
  id v81;
  int v82;
  uint64_t v83;
  char *v84;
  char *v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  id v90;
  id v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int (*v99)(char *, uint64_t, uint64_t);
  uint64_t v100;
  void *v101;
  id v102;
  id v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  void *v108;
  id v109;
  id v110;
  uint64_t v111;
  char *v112;
  char *v113;
  __int128 v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  id v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  void *v139;
  uint64_t v140;
  void *v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t (*v145)(void *, uint64_t, uint64_t);
  int v146;
  int v147;
  uint64_t v148;
  void *v150;
  id v151;
  id v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  void *v157;
  id v158;
  id v159;
  uint64_t v160;
  char *v161;
  char *v162;
  __int128 v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  id v170;
  id v171;
  char *v172;
  void (**v173)(void *, _QWORD, uint64_t, uint64_t);
  char *v174;
  uint64_t v175;
  char *__dst;
  char *__dsta;
  char *__dstb;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  char *v186;
  char *v187;
  char *v188;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
      v16 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v27 = *(void **)v9;
        v179 = a3;
        v185 = 2;
        v175 = a2;
        if (*(_QWORD *)v9 == 1)
        {
          *(_OWORD *)v8 = *(_OWORD *)v9;
        }
        else
        {
          *(_QWORD *)v8 = v27;
          v43 = *(void **)(v9 + 8);
          *(_QWORD *)(v8 + 8) = v43;
          v44 = v27;
          v45 = v43;
        }
        *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
        v46 = *(_QWORD *)(v9 + 24);
        *(_QWORD *)(v8 + 24) = v46;
        v47 = *(_DWORD *)(v9 + 32);
        *(_BYTE *)(v8 + 36) = *(_BYTE *)(v9 + 36);
        *(_DWORD *)(v8 + 32) = v47;
        *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
        v48 = *(_QWORD *)(v9 + 48);
        *(_QWORD *)(v8 + 48) = v48;
        *(_BYTE *)(v8 + 56) = *(_BYTE *)(v9 + 56);
        v49 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
        __dstb = (char *)(v8 + v49);
        v50 = (char *)(v9 + v49);
        v51 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
        v52 = *(_QWORD **)(v51 - 8);
        v53 = (unsigned int (*)(char *, uint64_t, uint64_t))v52[6];
        swift_bridgeObjectRetain(v46);
        swift_bridgeObjectRetain(v48);
        if (v53(v50, 1, v51))
        {
          v54 = sub_1000027AC(&qword_10008BA68);
          memcpy(__dstb, v50, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
          a3 = v179;
          v16 = 2;
          a2 = v175;
          goto LABEL_57;
        }
        v173 = (void (**)(void *, _QWORD, uint64_t, uint64_t))v52;
        v74 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(__dstb, v50, v74);
        v75 = *(int *)(v51 + 20);
        v76 = &__dstb[v75];
        v77 = &v50[v75];
        v78 = *(void **)&v50[v75];
        if (v78 == (void *)1)
        {
          *(_OWORD *)v76 = *(_OWORD *)v77;
        }
        else
        {
          *(_QWORD *)v76 = v78;
          v120 = v51;
          v121 = (void *)*((_QWORD *)v77 + 1);
          *((_QWORD *)v76 + 1) = v121;
          v122 = v78;
          v123 = v121;
          v51 = v120;
        }
        a3 = v179;
        a2 = v175;
        v173[7](__dstb, 0, 1, v51);
      }
      else
      {
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          *(_QWORD *)v8 = *(_QWORD *)v9;
          v17 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)(v8 + 8) = v17;
          *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
          v18 = *(_QWORD *)(v9 + 24);
          *(_QWORD *)(v8 + 24) = v18;
          *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
          v19 = *(_QWORD *)(v9 + 40);
          *(_BYTE *)(v8 + 48) = *(_BYTE *)(v9 + 48);
          *(_QWORD *)(v8 + 40) = v19;
          v20 = *(void **)(v9 + 56);
          swift_bridgeObjectRetain(v17);
          swift_bridgeObjectRetain(v18);
          if (v20 == (void *)1)
          {
            *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
          }
          else
          {
            *(_QWORD *)(v8 + 56) = v20;
            v34 = *(void **)(v9 + 64);
            *(_QWORD *)(v8 + 64) = v34;
            v35 = v20;
            v36 = v34;
          }
          v16 = 1;
          v37 = *(_DWORD *)(v9 + 72);
          *(_BYTE *)(v8 + 76) = *(_BYTE *)(v9 + 76);
          *(_DWORD *)(v8 + 72) = v37;
          v38 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
          __dsta = (char *)(v8 + v38);
          v39 = (char *)(v9 + v38);
          v40 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
          v41 = *((_QWORD *)v40 - 1);
          if ((*(unsigned int (**)(char *, uint64_t, int *))(v41 + 48))(v39, 1, v40))
          {
            v42 = sub_1000027AC(&qword_10008BA60);
            memcpy(__dsta, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
          }
          else
          {
            v69 = type metadata accessor for TimelineProviderContext(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(__dsta, v39, v69);
            v70 = v40[5];
            v71 = &__dsta[v70];
            v72 = &v39[v70];
            v73 = *(void **)&v39[v70];
            v182 = a3;
            if (v73 == (void *)1)
            {
              *(_OWORD *)v71 = *(_OWORD *)v72;
            }
            else
            {
              *(_QWORD *)v71 = v73;
              v108 = (void *)*((_QWORD *)v72 + 1);
              *((_QWORD *)v71 + 1) = v108;
              v109 = v73;
              v110 = v108;
            }
            v111 = v40[6];
            v112 = &__dsta[v111];
            v113 = &v39[v111];
            v114 = *(_OWORD *)v113;
            v112[16] = v113[16];
            *(_OWORD *)v112 = v114;
            v115 = v40[7];
            v174 = &__dsta[v115];
            v116 = &v39[v115];
            v117 = type metadata accessor for URL(0);
            v118 = *(_QWORD *)(v117 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48))(v116, 1, v117))
            {
              v119 = sub_1000027AC(&qword_10008BA58);
              memcpy(v174, v116, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v118 + 16))(v174, v116, v117);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v118 + 56))(v174, 0, 1, v117);
            }
            a3 = v182;
            v16 = 1;
            (*(void (**)(char *, _QWORD, uint64_t, int *))(v41 + 56))(__dsta, 0, 1, v40);
          }
          goto LABEL_57;
        }
        v28 = *(void **)v9;
        *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
        *(_QWORD *)v8 = v28;
        v29 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
        __dst = (char *)(v8 + v29);
        v30 = (char *)(v9 + v29);
        v31 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
        v32 = *((_QWORD *)v31 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v32 + 48))(v30, 1, v31))
        {
          v33 = sub_1000027AC(&qword_10008BA50);
          memcpy(__dst, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
LABEL_57:
          swift_storeEnumTagMultiPayload(v8, v10, v16);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
          goto LABEL_58;
        }
        v185 = v16;
        v181 = a3;
        v63 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(__dst, v30, v63);
        v64 = v31[5];
        v65 = *(_QWORD *)&v30[v64];
        *(_QWORD *)&__dst[v64] = v65;
        v66 = v31[6];
        v172 = &__dst[v66];
        v67 = &v30[v66];
        v68 = *(void **)&v30[v66];
        swift_bridgeObjectRetain(v65);
        if (v68 == (void *)1)
        {
          *(_OWORD *)v172 = *(_OWORD *)v67;
        }
        else
        {
          *(_QWORD *)v172 = v68;
          v101 = (void *)*((_QWORD *)v67 + 1);
          *((_QWORD *)v172 + 1) = v101;
          v102 = v68;
          v103 = v101;
        }
        a3 = v181;
        v104 = v31[7];
        v105 = &__dst[v104];
        v106 = &v30[v104];
        v107 = *(_QWORD *)v106;
        v105[8] = v106[8];
        *(_QWORD *)v105 = v107;
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v32 + 56))(__dst, 0, 1, v31);
      }
      v16 = v185;
      goto LABEL_57;
    }
LABEL_9:
    v21 = sub_1000027AC(&qword_10008BB18);
    memcpy((void *)v8, (const void *)v9, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_58;
  }
  if (v14)
  {
    sub_1000038A8(v8);
    goto LABEL_9;
  }
  if (a1 != a2)
  {
    sub_1000038A8(v8);
    v22 = swift_getEnumCaseMultiPayload(v9, v10);
    if (v22 == 2)
    {
      v55 = *(void **)v9;
      v180 = a3;
      if (*(_QWORD *)v9 == 1)
      {
        *(_OWORD *)v8 = *(_OWORD *)v9;
      }
      else
      {
        *(_QWORD *)v8 = v55;
        v89 = *(void **)(v9 + 8);
        *(_QWORD *)(v8 + 8) = v89;
        v90 = v55;
        v91 = v89;
      }
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
      v92 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v8 + 24) = v92;
      v93 = *(_DWORD *)(v9 + 32);
      *(_BYTE *)(v8 + 36) = *(_BYTE *)(v9 + 36);
      *(_DWORD *)(v8 + 32) = v93;
      *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
      v94 = *(_QWORD *)(v9 + 48);
      *(_QWORD *)(v8 + 48) = v94;
      *(_BYTE *)(v8 + 56) = *(_BYTE *)(v9 + 56);
      v95 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
      v186 = (char *)(v8 + v95);
      v96 = (char *)(v9 + v95);
      v97 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
      v98 = *(_QWORD *)(v97 - 8);
      v99 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48);
      swift_bridgeObjectRetain(v92);
      swift_bridgeObjectRetain(v94);
      if (v99(v96, 1, v97))
      {
        v100 = sub_1000027AC(&qword_10008BA68);
        memcpy(v186, v96, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
        a3 = v180;
      }
      else
      {
        v135 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v135 - 8) + 16))(v186, v96, v135);
        v136 = *(int *)(v97 + 20);
        v137 = &v186[v136];
        v138 = &v96[v136];
        v139 = *(void **)&v96[v136];
        a3 = v180;
        if (v139 == (void *)1)
        {
          *(_OWORD *)v137 = *(_OWORD *)v138;
        }
        else
        {
          *(_QWORD *)v137 = v139;
          v169 = (void *)*((_QWORD *)v138 + 1);
          *((_QWORD *)v137 + 1) = v169;
          v170 = v139;
          v171 = v169;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v186, 0, 1, v97);
      }
      swift_storeEnumTagMultiPayload(v8, v10, 2);
    }
    else if (v22 == 1)
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      v23 = *(_QWORD *)(v9 + 8);
      *(_QWORD *)(v8 + 8) = v23;
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
      v24 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v8 + 24) = v24;
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
      v25 = *(_QWORD *)(v9 + 40);
      *(_BYTE *)(v8 + 48) = *(_BYTE *)(v9 + 48);
      *(_QWORD *)(v8 + 40) = v25;
      v26 = *(void **)(v9 + 56);
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v24);
      if (v26 == (void *)1)
      {
        *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
      }
      else
      {
        *(_QWORD *)(v8 + 56) = v26;
        v79 = *(void **)(v9 + 64);
        *(_QWORD *)(v8 + 64) = v79;
        v80 = v26;
        v81 = v79;
      }
      v82 = *(_DWORD *)(v9 + 72);
      *(_BYTE *)(v8 + 76) = *(_BYTE *)(v9 + 76);
      *(_DWORD *)(v8 + 72) = v82;
      v83 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
      v84 = (char *)(v8 + v83);
      v85 = (char *)(v9 + v83);
      v86 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
      v87 = *((_QWORD *)v86 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v87 + 48))(v85, 1, v86))
      {
        v88 = sub_1000027AC(&qword_10008BA60);
        memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
      }
      else
      {
        v130 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v130 - 8) + 16))(v84, v85, v130);
        v131 = v86[5];
        v132 = &v84[v131];
        v133 = &v85[v131];
        v134 = *(void **)&v85[v131];
        v184 = a3;
        if (v134 == (void *)1)
        {
          *(_OWORD *)v132 = *(_OWORD *)v133;
        }
        else
        {
          *(_QWORD *)v132 = v134;
          v157 = (void *)*((_QWORD *)v133 + 1);
          *((_QWORD *)v132 + 1) = v157;
          v158 = v134;
          v159 = v157;
        }
        v160 = v86[6];
        v161 = &v84[v160];
        v162 = &v85[v160];
        v163 = *(_OWORD *)v162;
        v161[16] = v162[16];
        *(_OWORD *)v161 = v163;
        v164 = v86[7];
        v188 = &v84[v164];
        v165 = &v85[v164];
        v166 = type metadata accessor for URL(0);
        v167 = *(_QWORD *)(v166 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v167 + 48))(v165, 1, v166))
        {
          v168 = sub_1000027AC(&qword_10008BA58);
          memcpy(v188, v165, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v167 + 16))(v188, v165, v166);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v167 + 56))(v188, 0, 1, v166);
        }
        a3 = v184;
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v87 + 56))(v84, 0, 1, v86);
      }
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      v56 = *(void **)v9;
      *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
      *(_QWORD *)v8 = v56;
      v57 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
      v58 = (char *)(v8 + v57);
      v59 = (char *)(v9 + v57);
      v60 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
      v61 = *((_QWORD *)v60 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v61 + 48))(v59, 1, v60))
      {
        v62 = sub_1000027AC(&qword_10008BA50);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        v183 = a3;
        v124 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v124 - 8) + 16))(v58, v59, v124);
        v125 = v60[5];
        v126 = *(_QWORD *)&v59[v125];
        *(_QWORD *)&v58[v125] = v126;
        v127 = v60[6];
        v187 = &v58[v127];
        v128 = &v59[v127];
        v129 = *(void **)&v59[v127];
        swift_bridgeObjectRetain(v126);
        if (v129 == (void *)1)
        {
          *(_OWORD *)v187 = *(_OWORD *)v128;
        }
        else
        {
          *(_QWORD *)v187 = v129;
          v150 = (void *)*((_QWORD *)v128 + 1);
          *((_QWORD *)v187 + 1) = v150;
          v151 = v129;
          v152 = v150;
        }
        a3 = v183;
        v153 = v60[7];
        v154 = &v58[v153];
        v155 = &v59[v153];
        v156 = *(_QWORD *)v155;
        v154[8] = v155[8];
        *(_QWORD *)v154 = v156;
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v61 + 56))(v58, 0, 1, v60);
      }
      swift_storeEnumTagMultiPayload(v8, v10, 0);
    }
  }
LABEL_58:
  v140 = *(int *)(a3 + 24);
  v141 = (void *)(a1 + v140);
  v142 = (void *)(a2 + v140);
  v143 = type metadata accessor for TimelineEntryRelevance(0);
  v144 = *(_QWORD *)(v143 - 8);
  v145 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v144 + 48);
  v146 = v145(v141, 1, v143);
  v147 = v145(v142, 1, v143);
  if (!v146)
  {
    if (!v147)
    {
      (*(void (**)(void *, void *, uint64_t))(v144 + 24))(v141, v142, v143);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v144 + 8))(v141, v143);
    goto LABEL_63;
  }
  if (v147)
  {
LABEL_63:
    v148 = sub_1000027AC(&qword_10008BB20);
    memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v144 + 16))(v141, v142, v143);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v144 + 56))(v141, 0, 1, v143);
  return a1;
}

uint64_t sub_100005B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t EnumCaseMultiPayload;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *__dst;
  unsigned int v56;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_1000027AC(&qword_10008BB18);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    goto LABEL_19;
  }
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
  v14 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload != 2)
  {
    if ((_DWORD)EnumCaseMultiPayload == 1)
    {
      v15 = v9[1];
      *v8 = *v9;
      v8[1] = v15;
      v16 = *((_QWORD *)v9 + 5);
      *((_QWORD *)v8 + 4) = *((_QWORD *)v9 + 4);
      *((_QWORD *)v8 + 5) = v16;
      *((_BYTE *)v8 + 48) = *((_BYTE *)v9 + 48);
      *(_OWORD *)((char *)v8 + 56) = *(_OWORD *)((char *)v9 + 56);
      *((_BYTE *)v8 + 76) = *((_BYTE *)v9 + 76);
      *((_DWORD *)v8 + 18) = *((_DWORD *)v9 + 18);
      v17 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
      __dst = (char *)v8 + v17;
      v18 = (char *)v9 + v17;
      v19 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
      v20 = *((_QWORD *)v19 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
      {
        v21 = sub_1000027AC(&qword_10008BA60);
        memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        v53 = v20;
        v31 = type metadata accessor for TimelineProviderContext(0);
        v32 = __dst;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(__dst, v18, v31);
        *(_OWORD *)&__dst[v19[5]] = *(_OWORD *)&v18[v19[5]];
        v33 = v19[6];
        v34 = &__dst[v33];
        v35 = &v18[v33];
        *(_OWORD *)v34 = *(_OWORD *)v35;
        v34[16] = v35[16];
        v36 = v19[7];
        v54 = &__dst[v36];
        v37 = &v18[v36];
        v38 = type metadata accessor for URL(0);
        v52 = *(_QWORD *)(v38 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v37, 1, v38))
        {
          v39 = sub_1000027AC(&qword_10008BA58);
          memcpy(v54, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v54, v37, v38);
          v32 = __dst;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v54, 0, 1, v38);
        }
        v14 = 1;
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v53 + 56))(v32, 0, 1, v19);
      }
      goto LABEL_18;
    }
    v56 = EnumCaseMultiPayload;
    *(_QWORD *)v8 = *(_QWORD *)v9;
    *((_BYTE *)v8 + 8) = *((_BYTE *)v9 + 8);
    v29 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
    v24 = (char *)v8 + v29;
    v25 = (char *)v9 + v29;
    v26 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
    v27 = *((_QWORD *)v26 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v27 + 48))(v25, 1, v26))
    {
      v28 = &qword_10008BA50;
      goto LABEL_11;
    }
    v41 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v24, v25, v41);
    *(_QWORD *)&v24[v26[5]] = *(_QWORD *)&v25[v26[5]];
    *(_OWORD *)&v24[v26[6]] = *(_OWORD *)&v25[v26[6]];
    v42 = v26[7];
    v43 = &v24[v42];
    v44 = &v25[v42];
    v43[8] = v44[8];
    *(_QWORD *)v43 = *(_QWORD *)v44;
LABEL_16:
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v27 + 56))(v24, 0, 1, v26);
    goto LABEL_17;
  }
  v56 = 2;
  v22 = v9[1];
  *v8 = *v9;
  v8[1] = v22;
  *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
  *((_BYTE *)v8 + 36) = *((_BYTE *)v9 + 36);
  *(_OWORD *)((char *)v8 + 40) = *(_OWORD *)((char *)v9 + 40);
  *((_BYTE *)v8 + 56) = *((_BYTE *)v9 + 56);
  v23 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v24 = (char *)v8 + v23;
  v25 = (char *)v9 + v23;
  v26 = (int *)type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v27 = *((_QWORD *)v26 - 1);
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(v27 + 48))(v25, 1, v26))
  {
    v40 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v24, v25, v40);
    *(_OWORD *)&v24[v26[5]] = *(_OWORD *)&v25[v26[5]];
    goto LABEL_16;
  }
  v28 = &qword_10008BA68;
LABEL_11:
  v30 = sub_1000027AC(v28);
  memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
LABEL_17:
  v14 = v56;
LABEL_18:
  swift_storeEnumTagMultiPayload(v8, v10, v14);
  (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_19:
  v45 = *(int *)(a3 + 24);
  v46 = (void *)(a1 + v45);
  v47 = (const void *)(a2 + v45);
  v48 = type metadata accessor for TimelineEntryRelevance(0);
  v49 = *(_QWORD *)(v48 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
  {
    v50 = sub_1000027AC(&qword_10008BB20);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v49 + 32))(v46, v47, v48);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
  }
  return a1;
}

uint64_t sub_100006038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t EnumCaseMultiPayload;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(void *, uint64_t, uint64_t);
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *__dst;
  unsigned int v99;
  char *v100;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
      v16 = EnumCaseMultiPayload;
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v99 = 2;
        v34 = *(_OWORD *)(v9 + 16);
        *(_OWORD *)v8 = *(_OWORD *)v9;
        *(_OWORD *)(v8 + 16) = v34;
        *(_DWORD *)(v8 + 32) = *(_DWORD *)(v9 + 32);
        *(_BYTE *)(v8 + 36) = *(_BYTE *)(v9 + 36);
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
        *(_BYTE *)(v8 + 56) = *(_BYTE *)(v9 + 56);
        v35 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
        v36 = (char *)(v8 + v35);
        v37 = (char *)(v9 + v35);
        v38 = (int *)type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
        v39 = *((_QWORD *)v38 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v39 + 48))(v37, 1, v38))
        {
          v40 = &qword_10008BA68;
LABEL_19:
          v42 = sub_1000027AC(v40);
          memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
LABEL_29:
          v16 = v99;
LABEL_30:
          swift_storeEnumTagMultiPayload(v8, v10, v16);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
          goto LABEL_31;
        }
        v65 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v36, v37, v65);
        *(_OWORD *)&v36[v38[5]] = *(_OWORD *)&v37[v38[5]];
      }
      else
      {
        if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          v17 = *(_OWORD *)(v9 + 16);
          *(_OWORD *)v8 = *(_OWORD *)v9;
          *(_OWORD *)(v8 + 16) = v17;
          v18 = *(_QWORD *)(v9 + 40);
          *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
          *(_QWORD *)(v8 + 40) = v18;
          *(_BYTE *)(v8 + 48) = *(_BYTE *)(v9 + 48);
          *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
          *(_BYTE *)(v8 + 76) = *(_BYTE *)(v9 + 76);
          *(_DWORD *)(v8 + 72) = *(_DWORD *)(v9 + 72);
          v19 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
          __dst = (char *)(v8 + v19);
          v20 = (char *)(v9 + v19);
          v21 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
          v22 = *((_QWORD *)v21 - 1);
          if ((*(unsigned int (**)(char *, uint64_t, int *))(v22 + 48))(v20, 1, v21))
          {
            v23 = sub_1000027AC(&qword_10008BA60);
            memcpy(__dst, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
          }
          else
          {
            v96 = v22;
            v43 = type metadata accessor for TimelineProviderContext(0);
            v44 = __dst;
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(__dst, v20, v43);
            *(_OWORD *)&__dst[v21[5]] = *(_OWORD *)&v20[v21[5]];
            v45 = v21[6];
            v46 = &__dst[v45];
            v47 = &v20[v45];
            *(_OWORD *)v46 = *(_OWORD *)v47;
            v46[16] = v47[16];
            v48 = v21[7];
            v95 = &__dst[v48];
            v49 = &v20[v48];
            v50 = type metadata accessor for URL(0);
            v94 = *(_QWORD *)(v50 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v49, 1, v50))
            {
              v51 = sub_1000027AC(&qword_10008BA58);
              memcpy(v95, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v95, v49, v50);
              v44 = __dst;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v95, 0, 1, v50);
            }
            v16 = 1;
            (*(void (**)(char *, _QWORD, uint64_t, int *))(v96 + 56))(v44, 0, 1, v21);
          }
          goto LABEL_30;
        }
        v99 = EnumCaseMultiPayload;
        *(_QWORD *)v8 = *(_QWORD *)v9;
        *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
        v41 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
        v36 = (char *)(v8 + v41);
        v37 = (char *)(v9 + v41);
        v38 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
        v39 = *((_QWORD *)v38 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v39 + 48))(v37, 1, v38))
        {
          v40 = &qword_10008BA50;
          goto LABEL_19;
        }
        v66 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v36, v37, v66);
        *(_QWORD *)&v36[v38[5]] = *(_QWORD *)&v37[v38[5]];
        *(_OWORD *)&v36[v38[6]] = *(_OWORD *)&v37[v38[6]];
        v67 = v38[7];
        v68 = &v36[v67];
        v69 = &v37[v67];
        v68[8] = v69[8];
        *(_QWORD *)v68 = *(_QWORD *)v69;
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v39 + 56))(v36, 0, 1, v38);
      goto LABEL_29;
    }
LABEL_9:
    v24 = sub_1000027AC(&qword_10008BB18);
    memcpy((void *)v8, (const void *)v9, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_31;
  }
  if (v14)
  {
    sub_1000038A8(v8);
    goto LABEL_9;
  }
  if (a1 != a2)
  {
    sub_1000038A8(v8);
    v25 = swift_getEnumCaseMultiPayload(v9, v10);
    if (v25 == 2)
    {
      v52 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_OWORD *)(v8 + 16) = v52;
      *(_DWORD *)(v8 + 32) = *(_DWORD *)(v9 + 32);
      *(_BYTE *)(v8 + 36) = *(_BYTE *)(v9 + 36);
      *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
      *(_BYTE *)(v8 + 56) = *(_BYTE *)(v9 + 56);
      v53 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
      v54 = (char *)(v8 + v53);
      v55 = (char *)(v9 + v53);
      v56 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
      v57 = *(_QWORD *)(v56 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
      {
        v58 = sub_1000027AC(&qword_10008BA68);
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
      }
      else
      {
        v89 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 32))(v54, v55, v89);
        *(_OWORD *)&v54[*(int *)(v56 + 20)] = *(_OWORD *)&v55[*(int *)(v56 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
      }
      swift_storeEnumTagMultiPayload(v8, v10, 2);
    }
    else if (v25 == 1)
    {
      v26 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_OWORD *)(v8 + 16) = v26;
      v27 = *(_QWORD *)(v9 + 40);
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
      *(_QWORD *)(v8 + 40) = v27;
      *(_BYTE *)(v8 + 48) = *(_BYTE *)(v9 + 48);
      *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
      *(_BYTE *)(v8 + 76) = *(_BYTE *)(v9 + 76);
      *(_DWORD *)(v8 + 72) = *(_DWORD *)(v9 + 72);
      v28 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
      v29 = (char *)(v8 + v28);
      v30 = (char *)(v9 + v28);
      v31 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
      v32 = *((_QWORD *)v31 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v32 + 48))(v30, 1, v31))
      {
        v33 = sub_1000027AC(&qword_10008BA60);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        v97 = v32;
        v80 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 32))(v29, v30, v80);
        *(_OWORD *)&v29[v31[5]] = *(_OWORD *)&v30[v31[5]];
        v81 = v31[6];
        v82 = &v29[v81];
        v83 = &v30[v81];
        *(_OWORD *)v82 = *(_OWORD *)v83;
        v82[16] = v83[16];
        v84 = v31[7];
        v100 = &v29[v84];
        v85 = &v30[v84];
        v86 = type metadata accessor for URL(0);
        v87 = *(_QWORD *)(v86 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86))
        {
          v88 = sub_1000027AC(&qword_10008BA58);
          memcpy(v100, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v100, v85, v86);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v100, 0, 1, v86);
        }
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v97 + 56))(v29, 0, 1, v31);
      }
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
      v59 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
      v60 = (char *)(v8 + v59);
      v61 = (char *)(v9 + v59);
      v62 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
      v63 = *((_QWORD *)v62 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v63 + 48))(v61, 1, v62))
      {
        v64 = sub_1000027AC(&qword_10008BA50);
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
      }
      else
      {
        v90 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 32))(v60, v61, v90);
        *(_QWORD *)&v60[v62[5]] = *(_QWORD *)&v61[v62[5]];
        *(_OWORD *)&v60[v62[6]] = *(_OWORD *)&v61[v62[6]];
        v91 = v62[7];
        v92 = &v60[v91];
        v93 = &v61[v91];
        v92[8] = v93[8];
        *(_QWORD *)v92 = *(_QWORD *)v93;
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v63 + 56))(v60, 0, 1, v62);
      }
      swift_storeEnumTagMultiPayload(v8, v10, 0);
    }
  }
LABEL_31:
  v70 = *(int *)(a3 + 24);
  v71 = (void *)(a1 + v70);
  v72 = (void *)(a2 + v70);
  v73 = type metadata accessor for TimelineEntryRelevance(0);
  v74 = *(_QWORD *)(v73 - 8);
  v75 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v74 + 48);
  v76 = v75(v71, 1, v73);
  v77 = v75(v72, 1, v73);
  if (!v76)
  {
    if (!v77)
    {
      (*(void (**)(void *, void *, uint64_t))(v74 + 40))(v71, v72, v73);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v74 + 8))(v71, v73);
    goto LABEL_36;
  }
  if (v77)
  {
LABEL_36:
    v78 = sub_1000027AC(&qword_10008BB20);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v74 + 32))(v71, v72, v73);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
  return a1;
}

uint64_t sub_1000068E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000068F4);
}

uint64_t sub_1000068F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_1000027AC(&qword_10008BB18);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_1000027AC(&qword_10008BB20);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100006994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000069A0);
}

uint64_t sub_1000069A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_1000027AC(&qword_10008BB18);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_1000027AC(&qword_10008BB20);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for GeneralMapsTimelineEntry(uint64_t a1)
{
  return sub_100006A5C(a1, (uint64_t *)&unk_10008BB80, (uint64_t)&nominal type descriptor for GeneralMapsTimelineEntry);
}

uint64_t sub_100006A5C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

void sub_100006A90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100006B50(319, &qword_10008BB90, type metadata accessor for GeneralMapsTimelineEntryContent);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100006B50(319, (unint64_t *)&unk_10008BB98, (uint64_t (*)(uint64_t))&type metadata accessor for TimelineEntryRelevance);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

void sub_100006B50(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

BOOL sub_100006B9C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *sub_100006BB0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_100006BC0(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL sub_100006BCC(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

_DWORD *sub_100006BE0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_100006BF0(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

uint64_t sub_100006BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000027AC(&qword_10008BB20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for GeneralMapsState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 sub_100006C74(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100006C80(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100006CA0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for MKMapRect(uint64_t a1)
{
  sub_100006DC8(a1, &qword_10008BBD0, (uint64_t)&unk_100081898);
}

void type metadata accessor for GEOURLOptions_MapType(uint64_t a1)
{
  sub_100006DC8(a1, &qword_10008BBD8, (uint64_t)&unk_1000818C0);
}

void type metadata accessor for GEOTransportType(uint64_t a1)
{
  sub_100006DC8(a1, &qword_10008BBE0, (uint64_t)&unk_1000818E0);
}

void type metadata accessor for MapsSuggestionsEntryType(uint64_t a1)
{
  sub_100006DC8(a1, &qword_10008BBE8, (uint64_t)&unk_100081900);
}

void type metadata accessor for GEOUserPreferredTransportType(uint64_t a1)
{
  sub_100006DC8(a1, &qword_10008BC50, (uint64_t)&unk_100081920);
}

void type metadata accessor for MKMapSize(uint64_t a1)
{
  sub_100006DC8(a1, &qword_10008BC58, (uint64_t)&unk_100081998);
}

uint64_t sub_100006D44(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100006D64(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for MKMapPoint(uint64_t a1)
{
  sub_100006DC8(a1, &qword_10008BC60, (uint64_t)&unk_100081A18);
}

void type metadata accessor for MKMapType(uint64_t a1)
{
  sub_100006DC8(a1, &qword_10008BC68, (uint64_t)&unk_100081A40);
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_100006DC8(a1, (unint64_t *)&unk_10008BC70, (uint64_t)&unk_100081AB8);
}

void sub_100006DC8(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

unint64_t sub_100006E24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  id v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000027AC(&qword_10008BF50);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = *(v6 - 1);
    v9 = v7;
    result = sub_10005CC3C((uint64_t)v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = 8 * result;
    *(_QWORD *)(v4[6] + v12) = v8;
    *(_QWORD *)(v4[7] + v12) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100006F2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  __int128 v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000027AC(&qword_10008C0E8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_OWORD *)(a1 + 40);
  while (1)
  {
    v13 = *v6;
    v7 = *((id *)v6 - 1);
    swift_retain(*((_QWORD *)&v13 + 1));
    result = sub_10005CCE4((uint64_t)v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v7;
    *(_OWORD *)(v4[7] + 16 * result) = v13;
    v10 = v4[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v4[2] = v12;
    v6 = (_OWORD *)((char *)v6 + 24);
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100007048(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000027AC(&qword_10008C0F0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100016550(v7, (uint64_t)v16, &qword_10008C0F8);
    result = sub_10005CD30((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_100016594(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id sub_1000071E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id result;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char v47;
  unint64_t v48;

  v4 = *(void **)(v1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 8);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 16);
  v7 = *(void **)(v1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 24);
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 32);
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 40);
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 48);
  v3 = v1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state;
  v13 = *(void **)(v1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 56);
  v12 = (_QWORD *)(v1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 56);
  v11 = v13;
  v14 = *(_QWORD *)(v3 + 64);
  v15 = *(_QWORD *)(v3 + 72);
  v16 = *(_BYTE *)(v3 + 80);
  if (v10)
  {
    v17 = v4;
    v18 = v5;
    v19 = v6;
    v20 = v7;
    v21 = v8;
    v22 = v9;
    v48 = v10;
    v23 = v11;
    v24 = v14;
    v25 = v15;
    v47 = v16;
  }
  else
  {
    v46 = v4;
    v45 = v5;
    v43 = v8;
    v44 = v6;
    v41 = v9;
    v42 = v7;
    v26 = v11;
    v27 = *(_QWORD *)(v3 + 64);
    v28 = *(_QWORD *)(v3 + 72);
    v29 = sub_100006E24((uint64_t)&_swiftEmptyArrayStorage);
    v39 = *(_QWORD *)(v3 + 8);
    v40 = *(_QWORD *)v3;
    v37 = *(void **)(v3 + 24);
    v38 = *(_QWORD *)(v3 + 16);
    v35 = *(_QWORD *)(v3 + 40);
    v36 = *(_QWORD *)(v3 + 32);
    v30 = *(_QWORD *)(v3 + 64);
    v33 = *(void **)(v3 + 56);
    v34 = *(_QWORD *)(v3 + 48);
    v31 = *(_QWORD *)(v3 + 72);
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_QWORD *)(v3 + 48) = v29;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = 0;
    v47 = 2;
    *(_BYTE *)(v3 + 80) = 2;
    v48 = v29;
    swift_bridgeObjectRetain(v29);
    sub_100014F38(v40, v39, v38, v37, v36, v35, v34, v33, v30, v31);
    v15 = v28;
    v14 = v27;
    v11 = v26;
    v10 = 0;
    v9 = v41;
    v7 = v42;
    v8 = v43;
    v6 = v44;
    v5 = v45;
    v4 = v46;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
  }
  result = sub_100015BCC(v4, v5, v6, v7, v8, v9, v10, v11, v14, v15);
  *(_QWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = v18;
  *(_DWORD *)(a1 + 16) = v19;
  *(_QWORD *)(a1 + 24) = v20;
  *(_QWORD *)(a1 + 32) = v21;
  *(_QWORD *)(a1 + 40) = v22;
  *(_QWORD *)(a1 + 48) = v48;
  *(_QWORD *)(a1 + 56) = v23;
  *(_QWORD *)(a1 + 64) = v24;
  *(_QWORD *)(a1 + 72) = v25;
  *(_BYTE *)(a1 + 80) = v47;
  return result;
}

id sub_1000073AC()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)GEOLocationShifter), "init");
  qword_10008BDA0 = (uint64_t)result;
  return result;
}

BOOL sub_1000073DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_1000073F4()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100007438()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100007460(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void *sub_1000074A0()
{
  void *result;

  result = (void *)sub_100014AAC((uint64_t)&_swiftEmptyArrayStorage);
  off_10008BDA8 = result;
  return result;
}

NSObject *sub_1000074C4(void *a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  id v6;
  uint64_t v7;
  char *v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  NSObject *v20;
  NSObject *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  Class isa;
  NSObject *v33;
  objc_class *v34;
  uint64_t v35;
  void *v36;
  NSObject *v37;
  NSObject *result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  os_log_type_t v55;
  uint8_t *v56;
  NSObject *v57;
  char v58[112];
  _QWORD aBlock[5];
  uint64_t v60;
  objc_super v61;

  *(_QWORD *)&v1[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_suggestionsEngine] = 0;
  v3 = OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_suggestionsNetworkRequester;
  v4 = objc_allocWithZone((Class)MapsSuggestionsRealNetworkRequester);
  v5 = v1;
  v6 = objc_msgSend(v4, "init");
  *(_QWORD *)&v1[v3] = v6;
  v7 = OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_collectorGroup;
  *(_QWORD *)&v5[v7] = dispatch_group_create();
  v8 = &v5[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state];
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *(_OWORD *)v8 = 0u;
  v8[80] = 0;
  v5[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_cancelled] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingNearbyCategoriesCancellation] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingNavigationRouteCancellation] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingLocationShiftCancellation] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_isolationQueue] = a1;
  v9 = objc_allocWithZone((Class)type metadata accessor for GeneralMapsLocationUpdater());
  v10 = a1;
  sub_10001E480(v10);
  *(_QWORD *)&v5[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_locationUpdater] = v11;
  v12 = (void *)objc_opt_self(MapsSuggestionsPredictor);
  v13 = v6;
  v14 = objc_msgSend(v12, "sharedPredictor");
  v15 = objc_msgSend(objc_allocWithZone((Class)MapsSuggestionsETARequirements), "initWithMaxAge:maxDistance:minAccuracy:", 1.79769313e308, 1.79769313e308, 0.0);
  v16 = objc_msgSend(objc_allocWithZone((Class)MapsSuggestionsETARequester), "initWithNetworkRequester:transportModePredictor:requirements:", v13, v14, v15);

  *(_QWORD *)&v5[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_transportModePredictor] = v16;
  v61.receiver = v5;
  v61.super_class = (Class)type metadata accessor for GeneralMapsStateCollector();
  v17 = objc_msgSendSuper2(&v61, "init");
  v18 = objc_allocWithZone((Class)MapsSuggestionsBlockFilter);
  aBlock[4] = sub_100007AEC;
  v60 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000147B4;
  aBlock[3] = &unk_100081BC0;
  v19 = _Block_copy(aBlock);
  v20 = v17;
  v21 = objc_msgSend(v18, "initWithBlock:", v19);
  _Block_release(v19);
  swift_release(v60);
  v22 = objc_msgSend((id)objc_opt_self(MapsSuggestionsEngineBuilder), "forDevice");
  v23 = objc_msgSend(v22, "withoutTracker");

  v24 = objc_msgSend(v23, "withLocationUpdater:", *(Class *)((char *)&v20->isa + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_locationUpdater));
  v25 = sub_1000027AC(&qword_10008BEF0);
  inited = swift_initStackObject(v25, v58);
  *(_OWORD *)(inited + 16) = xmmword_10006A2F0;
  aBlock[0] = objc_msgSend(objc_allocWithZone((Class)MapsSuggestionsShortcutFilter), "init");
  v27 = sub_100014FA8(0, &qword_10008BEF8, MapsSuggestionsShortcutFilter_ptr);
  v28 = sub_10001481C(&qword_10008BF00, &qword_10008BEF8, MapsSuggestionsShortcutFilter_ptr);
  AnyHashable.init<A>(_:)(aBlock, v27, v28);
  aBlock[0] = objc_msgSend(objc_allocWithZone((Class)MapsSuggestionsZeroWeightFilter), "init");
  v29 = sub_100014FA8(0, &qword_10008BF08, MapsSuggestionsZeroWeightFilter_ptr);
  v30 = sub_10001481C(&qword_10008BF10, &qword_10008BF08, MapsSuggestionsZeroWeightFilter_ptr);
  AnyHashable.init<A>(_:)(aBlock, v29, v30);
  v31 = sub_100014C0C(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 2, &type metadata for AnyHashable);
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v31);
  v33 = objc_msgSend(v24, "withPreFilters:", isa);

  v34 = (objc_class *)-[NSObject build](v33, "build");
  if (!v34)
  {
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v50 = type metadata accessor for Logger(0);
    v51 = sub_100014D70(v50, (uint64_t)qword_100090B98);
    v44 = Logger.logObject.getter(v51, v52, v53, v54);
    v55 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v44, v55))
    {
      v57 = v44;
      v44 = v10;
      v10 = v33;
      v33 = v20;
      v37 = v21;
      goto LABEL_14;
    }
    v56 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, v55, "GeneralMapsStateCollector: could not build suggestions engine", v56, 2u);
    swift_slowDealloc(v56, -1, -1);
    goto LABEL_11;
  }
  v35 = OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_suggestionsEngine;
  v36 = *(Class *)((char *)&v20->isa + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_suggestionsEngine);
  *(Class *)((char *)&v20->isa + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_suggestionsEngine) = v34;
  v37 = v34;

  result = *(NSObject **)((char *)&v20->isa + v35);
  if (result)
  {
    -[NSObject addAdditionalFilter:forSink:](result, "addAdditionalFilter:forSink:", v21, v20);
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v39 = type metadata accessor for Logger(0);
    v40 = sub_100014D70(v39, (uint64_t)qword_100090B98);
    v44 = Logger.logObject.getter(v40, v41, v42, v43);
    v48 = static os_log_type_t.debug.getter(v44, v45, v46, v47);
    if (!os_log_type_enabled(v44, v48))
    {

      v57 = v10;
      v44 = v33;
      v10 = v20;
      v33 = v21;
      goto LABEL_14;
    }
    v49 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, v48, "GeneralMapsStateCollector: Created MSgEngine", v49, 2u);
    swift_slowDealloc(v49, -1, -1);

LABEL_11:
    v57 = v21;
    v37 = v20;
LABEL_14:

    return v20;
  }
  __break(1u);
  return result;
}

BOOL sub_100007AEC(void *a1)
{
  unint64_t v2;
  BOOL v3;
  id v4;
  double v5;
  _BOOL8 result;

  v2 = (unint64_t)objc_msgSend(a1, "type");
  v3 = v2 > 0x18 || ((1 << v2) & 0x18BF93E) == 0;
  result = 0;
  if (!v3)
  {
    v4 = objc_msgSend(a1, "geoMapItem");

    if (v4)
    {
      if ((objc_msgSend(a1, "BOOLeanForKey:is:", CFSTR("MapsSuggestionsIsNotADestinationKey"), 1) & 1) == 0
        && (objc_msgSend(a1, "hasExpired") & 1) == 0
        && (objc_msgSend(a1, "BOOLeanForKey:is:", CFSTR("MapsSuggestionsAlreadyThereKey"), 1) & 1) == 0)
      {
        if (objc_msgSend(a1, "type") != (id)1)
          return 1;
        objc_msgSend(a1, "weight");
        if (v5 != 0.0)
          return 1;
      }
    }
  }
  return result;
}

void sub_100007BE8(char *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint8_t *v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  void *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  _QWORD aBlock[5];
  _QWORD *v69;

  v4 = v3;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v65 = *(_QWORD *)(v8 - 8);
  v66 = v8;
  __chkstk_darwin(v8);
  v64 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v62 = *(_QWORD *)(v10 - 8);
  v63 = v10;
  __chkstk_darwin(v10);
  v61 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v58 = v13;
  v59 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchPredicate(0, v14);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_100014D70(v19, (uint64_t)qword_100090B98);
  v24 = Logger.logObject.getter(v20, v21, v22, v23);
  v28 = static os_log_type_t.debug.getter(v24, v25, v26, v27);
  if (os_log_type_enabled(v24, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    v57 = v4;
    v30 = a1;
    v31 = a2;
    v32 = a3;
    v33 = v29;
    *(_WORD *)v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v28, "GeneralMapsStateCollector: collect BEGIN", v29, 2u);
    v34 = v33;
    a3 = v32;
    a2 = v31;
    a1 = v30;
    v4 = v57;
    swift_slowDealloc(v34, -1, -1);
  }

  v35 = *(void **)&v4[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_isolationQueue];
  *v18 = v35;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  v36 = v35;
  LOBYTE(v35) = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
  if ((v35 & 1) != 0)
  {
    v37 = v36;
    sub_10000BF94();
    v39 = v59;
    v38 = v60;
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v59, a1, v60);
    v40 = *(unsigned __int8 *)(v12 + 80);
    v41 = (v40 + 24) & ~v40;
    v42 = swift_allocObject(&unk_100082170, v41 + v58, v40 | 7);
    *(_QWORD *)(v42 + 16) = v4;
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v42 + v41, v39, v38);
    v43 = v4;
    sub_1000082F4(a1, (uint64_t)sub_100015B3C, v42);
    swift_release(v42);
    sub_10000A918(v44, v45);
    v46 = (_QWORD *)swift_allocObject(&unk_100082198, 40, 7);
    v46[2] = a2;
    v46[3] = a3;
    v46[4] = v43;
    aBlock[4] = sub_100015BC0;
    v69 = v46;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100052B78;
    aBlock[3] = &unk_1000821B0;
    v47 = _Block_copy(aBlock);
    v48 = v43;
    swift_retain(a3);
    v49 = v61;
    static DispatchQoS.unspecified.getter(v50);
    v67 = &_swiftEmptyArrayStorage;
    v51 = sub_1000150DC();
    v52 = sub_1000027AC((uint64_t *)&unk_10008BF70);
    v53 = sub_100015124();
    v54 = v64;
    v55 = v66;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v67, v52, v53, v66, v51);
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v49, v54, v37, v47);
    _Block_release(v47);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v54, v55);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v49, v63);
    swift_release(v69);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100007FF4(void (*a1)(_BYTE *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  _BYTE v14[88];

  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100014D70(v2, (uint64_t)qword_100090B98);
  v7 = Logger.logObject.getter(v3, v4, v5, v6);
  v11 = static os_log_type_t.debug.getter(v7, v8, v9, v10);
  if (os_log_type_enabled(v7, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v11, "GeneralMapsStateCollector: collect END", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  sub_1000071E0((uint64_t)v14);
  a1(v14);
  return sub_100014EC4((uint64_t)v14);
}

void sub_1000080FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  id v17;
  uint64_t v18;
  __n128 v19;
  __n128 v20;
  uint64_t v21;
  __n128 v22;
  __n128 v23;
  uint64_t v24;
  __n128 v25;
  __n128 v26;
  uint64_t v27;

  v3 = v2;
  v4 = type metadata accessor for DispatchPredicate(0, a2);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100014D70(v8, (uint64_t)qword_100090B98);
  v13 = Logger.logObject.getter(v9, v10, v11, v12);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "GeneralMapsStateCollector: cancelling state collection", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = *(void **)(v3 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_isolationQueue);
  *v7 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v16 & 1) != 0)
  {
    *(_BYTE *)(v3 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_cancelled) = 1;
    v18 = *(_QWORD *)(v3
                    + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingNearbyCategoriesCancellation);
    if (v18)
    {
      v19 = swift_retain(*(_QWORD *)(v3
                                   + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingNearbyCategoriesCancellation));
      v20.n128_f64[0] = dispatch thunk of DispatchWorkItem.perform()(v19);
      dispatch thunk of DispatchWorkItem.cancel()(v20);
      swift_release(v18);
    }
    v21 = *(_QWORD *)(v3
                    + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingNavigationRouteCancellation);
    if (v21)
    {
      v22 = swift_retain(*(_QWORD *)(v3
                                   + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingNavigationRouteCancellation));
      v23.n128_f64[0] = dispatch thunk of DispatchWorkItem.perform()(v22);
      dispatch thunk of DispatchWorkItem.cancel()(v23);
      swift_release(v21);
    }
    v24 = *(_QWORD *)(v3
                    + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingLocationShiftCancellation);
    if (v24)
    {
      v25 = swift_retain(*(_QWORD *)(v3
                                   + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingLocationShiftCancellation));
      v26.n128_f64[0] = dispatch thunk of DispatchWorkItem.perform()(v25);
      dispatch thunk of DispatchWorkItem.cancel()(v26);
      swift_release(v24);
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000082F4(char *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  void *v41;
  uint64_t v42;
  void (*v43)();
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, char *, uint64_t);
  void (**v54)();
  id v55;
  __n128 v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;

  v59 = a2;
  v60 = a3;
  v5 = type metadata accessor for Date(0);
  v61 = *(_QWORD *)(v5 - 8);
  v6 = *(_QWORD *)(v61 + 64);
  v7 = __chkstk_darwin(v5);
  v62 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v57 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v57 - v11;
  v14 = type metadata accessor for DispatchPredicate(0, v13);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(void **)&v3[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_isolationQueue];
  *v17 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if ((v3[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_cancelled] & 1) != 0)
  {
    if (qword_10008B9F0 == -1)
    {
LABEL_4:
      v20 = type metadata accessor for Logger(0);
      v21 = sub_100014D70(v20, (uint64_t)qword_100090B98);
      v25 = Logger.logObject.getter(v21, v22, v23, v24);
      v26 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "GeneralMapsStateCollector: skipped collectLocation (state collection cancelled)", v27, 2u);
        swift_slowDealloc(v27, -1, -1);
      }

      return;
    }
LABEL_13:
    swift_once(&qword_10008B9F0, sub_100035150);
    goto LABEL_4;
  }
  v28 = v3;
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v58 = a1;
  v29 = v5;
  v30 = type metadata accessor for Logger(0);
  v31 = sub_100014D70(v30, (uint64_t)qword_100090B98);
  v35 = Logger.logObject.getter(v31, v32, v33, v34);
  v39 = static os_log_type_t.debug.getter(v35, v36, v37, v38);
  if (os_log_type_enabled(v35, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v39, "GeneralMapsStateCollector: collectLocation BEGIN", v40, 2u);
    swift_slowDealloc(v40, -1, -1);
  }

  v41 = v28;
  dispatch_group_enter(*(dispatch_group_t *)&v28[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_collectorGroup]);
  Date.init()(v42);
  v43 = (void (*)())swift_allocObject(&unk_100082120, 40, 7);
  v44 = v60;
  *((_QWORD *)v43 + 2) = v59;
  *((_QWORD *)v43 + 3) = v44;
  *((_QWORD *)v43 + 4) = v28;
  v59 = *(_QWORD *)&v28[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_locationUpdater];
  v45 = v61;
  v46 = *(void (**)(char *, char *, uint64_t))(v61 + 16);
  v46(v10, v12, v29);
  v46(v62, v58, v29);
  v47 = *(unsigned __int8 *)(v45 + 80);
  v48 = (v47 + 24) & ~v47;
  v49 = (v6 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  v58 = v12;
  v50 = (v47 + v49 + 16) & ~v47;
  v51 = swift_allocObject(&unk_100082148, v50 + v6, v47 | 7);
  *(_QWORD *)(v51 + 16) = v41;
  v52 = v51 + v48;
  v53 = *(void (**)(uint64_t, char *, uint64_t))(v45 + 32);
  v53(v52, v10, v29);
  v54 = (void (**)())(v51 + v49);
  *v54 = sub_100015964;
  v54[1] = v43;
  v53(v51 + v50, v62, v29);
  v55 = v41;
  swift_retain(v44);
  swift_retain(v43);
  sub_10001E8C4((uint64_t)sub_100015A44, v51);
  swift_release(v43);
  v56 = swift_release(v51);
  (*(void (**)(char *, uint64_t, __n128))(v45 + 8))(v58, v29, v56);
}

void sub_1000086EC(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void), uint64_t a7, void *a8)
{
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  _BYTE *v38;
  double v39;
  void (*v40)(_BYTE *, uint64_t);
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  os_log_type_t v86;
  int v87;
  _BOOL4 v88;
  void (*v89)(void);
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  double v98;
  void (*v99)(_BYTE *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  double v119;
  void (*v120)(_BYTE *, uint64_t);
  _BYTE v121[12];
  int v122;
  void (*v123)(void);
  id v124;
  _BYTE *v125;
  void *v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  double v135;
  _DWORD v136[4];
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned __int8 v144;
  uint64_t v145;
  _BYTE v146[16];

  v124 = a8;
  v129 = a7;
  v130 = a5;
  v126 = a2;
  v128 = type metadata accessor for Date(0);
  v131 = *(_QWORD *)(v128 - 8);
  v12 = __chkstk_darwin(v128);
  v14 = &v121[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __chkstk_darwin(v12);
  v127 = &v121[-v16];
  v17 = __chkstk_darwin(v15);
  v125 = &v121[-v18];
  __chkstk_darwin(v17);
  v20 = &v121[-v19];
  v22 = type metadata accessor for DispatchPredicate(0, v21);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = &v121[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = *(void **)(a4 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_isolationQueue);
  *v25 = v26;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v23 + 104))(v25, enum case for DispatchPredicate.onQueue(_:), v22);
  v27 = v26;
  LOBYTE(v26) = _dispatchPreconditionTest(_:)(v25);
  (*(void (**)(_QWORD *, uint64_t))(v23 + 8))(v25, v22);
  if ((v26 & 1) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if ((*(_BYTE *)(a4 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_cancelled) & 1) != 0)
  {
    if (qword_10008B9F0 == -1)
    {
LABEL_4:
      v28 = type metadata accessor for Logger(0);
      sub_100014D70(v28, (uint64_t)qword_100090B98);
      v29 = v131;
      v30 = v128;
      v31 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v131 + 16))(v14, v130, v128);
      v35 = Logger.logObject.getter(v31, v32, v33, v34);
      v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v37 = 134349056;
        v38 = v127;
        Date.init()(v37);
        v39 = Date.timeIntervalSince(_:)(v14);
        v40 = *(void (**)(_BYTE *, uint64_t))(v29 + 8);
        v40(v38, v30);
        v135 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v37 + 4);
        v40(v14, v30);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "GeneralMapsStateCollector: collectLocation END (state collection cancelled, %{public}f seconds elapsed)", v37, 0xCu);
        swift_slowDealloc(v37, -1, -1);
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t))(v29 + 8))(v14, v30);
      }

      a6();
      return;
    }
LABEL_29:
    swift_once(&qword_10008B9F0, sub_100035150);
    goto LABEL_4;
  }
  if (a1)
  {
    v41 = a1;
    if (objc_msgSend(v41, "referenceFrame") == 2
      || (v42 = (void *)objc_opt_self(GEOLocationShifter),
          !objc_msgSend(v42, "isLocationShiftRequiredForCoordinate:", GEOLocationCoordinate2DFromCLLocationCoordinate2D(objc_msgSend(v41, "coordinate")))))
    {
      v123 = a6;
      v124 = v41;
      sub_1000071E0((uint64_t)&v135);
      v122 = v144;
      v55 = v142;
      v54 = v143;
      v57 = v140;
      v56 = v141;
      v58 = v138;
      v59 = v139;
      v60 = v137;
      v61 = v136[2];
      sub_10001565C((uint64_t)&v135, (uint64_t)&v145, &qword_10008BF28);
      sub_100015938((id *)&v145);
      v62 = a4 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state;
      v63 = *(_QWORD *)(a4 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state);
      v64 = *(_QWORD *)(a4 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 8);
      v65 = *(_QWORD *)(a4 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 16);
      v66 = *(void **)(a4 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 24);
      v67 = *(_QWORD *)(a4 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 32);
      v68 = *(_QWORD *)(a4 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 40);
      v69 = *(_QWORD *)(a4 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 48);
      v70 = *(void **)(a4 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 56);
      v71 = *(_QWORD *)(a4 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 64);
      v72 = *(_QWORD *)(a4 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 72);
      v73 = v126;
      *(_QWORD *)v62 = a1;
      *(_QWORD *)(v62 + 8) = v73;
      *(_QWORD *)(v62 + 16) = v61;
      *(_QWORD *)(v62 + 24) = v60;
      *(_QWORD *)(v62 + 32) = v58;
      *(_QWORD *)(v62 + 40) = v59;
      *(_QWORD *)(v62 + 48) = v57;
      *(_QWORD *)(v62 + 56) = v56;
      *(_QWORD *)(v62 + 64) = v55;
      *(_QWORD *)(v62 + 72) = v54;
      *(_BYTE *)(v62 + 80) = v122;
      sub_100014F38(v63, v64, v65, v66, v67, v68, v69, v70, v71, v72);
      if (qword_10008B9F0 != -1)
        swift_once(&qword_10008B9F0, sub_100035150);
      v74 = type metadata accessor for Logger(0);
      sub_100014D70(v74, (uint64_t)qword_100090B98);
      v75 = v131;
      v76 = v125;
      v77 = v128;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v131 + 16))(v125, v130, v128);
      v78 = v124;
      v82 = Logger.logObject.getter(v78, v79, v80, v81);
      v86 = static os_log_type_t.debug.getter(v82, v83, v84, v85);
      v87 = v86;
      v88 = os_log_type_enabled(v82, v86);
      v89 = v123;
      if (v88)
      {
        v90 = swift_slowAlloc(22, -1);
        v91 = swift_slowAlloc(32, -1);
        v130 = v91;
        *(_DWORD *)v90 = 136380931;
        LODWORD(v124) = v87;
        v132 = (uint64_t)v78;
        v133 = v126;
        v134 = v91;
        v92 = v78;
        v93 = String.init<A>(reflecting:)(&v132, &type metadata for GeneralMapsLocationUpdater.LocationInfo);
        v95 = v94;
        v132 = sub_1000523F0(v93, v94, &v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v90 + 4);

        v96 = swift_bridgeObjectRelease(v95);
        *(_WORD *)(v90 + 12) = 2050;
        v97 = v127;
        Date.init()(v96);
        v98 = Date.timeIntervalSince(_:)(v76);
        v99 = *(void (**)(_BYTE *, uint64_t))(v75 + 8);
        v99(v97, v77);
        v132 = *(_QWORD *)&v98;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v90 + 14);
        v99(v76, v77);
        _os_log_impl((void *)&_mh_execute_header, v82, (os_log_type_t)v124, "GeneralMapsStateCollector: collectLocation END (location: %{private}s, %{public}f seconds elapsed)", (uint8_t *)v90, 0x16u);
        v100 = v130;
        swift_arrayDestroy(v130, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v100, -1, -1);
        v101 = v90;
        v89 = v123;
        swift_slowDealloc(v101, -1, -1);
      }
      else
      {

        (*(void (**)(_BYTE *, uint64_t))(v75 + 8))(v76, v77);
      }

      v89();
    }
    else
    {
      if (qword_10008B9F0 != -1)
        swift_once(&qword_10008B9F0, sub_100035150);
      v43 = type metadata accessor for Logger(0);
      v44 = sub_100014D70(v43, (uint64_t)qword_100090B98);
      v48 = Logger.logObject.getter(v44, v45, v46, v47);
      v52 = static os_log_type_t.debug.getter(v48, v49, v50, v51);
      if (os_log_type_enabled(v48, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, v52, "GeneralMapsStateCollector: collectLocation will shift location", v53, 2u);
        swift_slowDealloc(v53, -1, -1);
      }

      sub_100009034((uint64_t)v124, v41, v126, v130, a6, v129);
    }
  }
  else
  {
    v123 = a6;
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v102 = type metadata accessor for Logger(0);
    sub_100014D70(v102, (uint64_t)qword_100090B98);
    v103 = v131;
    v104 = v128;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v131 + 16))(v20, v130, v128);
    swift_errorRetain(a3);
    v105 = swift_errorRetain(a3);
    v109 = Logger.logObject.getter(v105, v106, v107, v108);
    v110 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v109, v110))
    {
      v111 = swift_slowAlloc(22, -1);
      v112 = swift_slowAlloc(32, -1);
      v135 = *(double *)&v112;
      *(_DWORD *)v111 = 136446466;
      v145 = a3;
      swift_errorRetain(a3);
      v113 = sub_1000027AC(&qword_10008BF38);
      v114 = String.init<A>(reflecting:)(&v145, v113);
      v116 = v115;
      v145 = sub_1000523F0(v114, v115, (uint64_t *)&v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146, v111 + 4);
      swift_bridgeObjectRelease(v116);
      swift_errorRelease(a3);
      v117 = swift_errorRelease(a3);
      *(_WORD *)(v111 + 12) = 2050;
      v118 = v127;
      Date.init()(v117);
      v119 = Date.timeIntervalSince(_:)(v20);
      v120 = *(void (**)(_BYTE *, uint64_t))(v131 + 8);
      v120(v118, v104);
      v145 = *(_QWORD *)&v119;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146, v111 + 14);
      v120(v20, v104);
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "GeneralMapsStateCollector: collectLocation END (no location; error: %{public}s, %{public}f seconds elapsed)",
        (uint8_t *)v111,
        0x16u);
      swift_arrayDestroy(v112, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v112, -1, -1);
      swift_slowDealloc(v111, -1, -1);
    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      (*(void (**)(_BYTE *, uint64_t))(v103 + 8))(v20, v104);
    }

    v123();
  }
}

void sub_100009034(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  char *v6;
  double v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  id v48;
  id v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  _QWORD *v56;
  id v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  void *v62;
  _QWORD *v63;
  id v64;
  id v65;
  const void *v66;
  uint64_t v67;
  void (*v68)(uint64_t, char *, uint64_t);
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  id v71;
  void *v72;
  char *v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void **aBlock;
  uint64_t v83;
  void *v84;
  void *v85;
  void *v86;
  _QWORD *v87;

  v10 = v6;
  v79 = a4;
  v80 = a6;
  v72 = a3;
  v74 = a1;
  v76 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v78 = v14;
  v73 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchPredicate(0, v18);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (uint64_t *)((char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = *(void **)&v10[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_isolationQueue];
  *v22 = v23;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v20 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v19);
  v75 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)(v22);
  (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(v22, v19);
  if ((v23 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v24 = swift_allocObject(&unk_100081E00, 24, 7);
  swift_unknownObjectWeakInit(v24 + 16, v10);
  v25 = (_QWORD *)swift_allocObject(&unk_100081FE0, 40, 7);
  v25[2] = v24;
  v25[3] = a5;
  v77 = a5;
  v26 = v80;
  v25[4] = v80;
  v86 = sub_1000156FC;
  v87 = v25;
  aBlock = _NSConcreteStackBlock;
  v9 = 1107296256;
  v83 = 1107296256;
  v84 = sub_100052B78;
  v85 = &unk_100081FF8;
  v27 = _Block_copy(&aBlock);
  v81 = &_swiftEmptyArrayStorage;
  v28 = sub_1000150DC();
  swift_retain(v24);
  swift_retain(v26);
  v29 = sub_1000027AC((uint64_t *)&unk_10008BF70);
  v30 = sub_100015124();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v81, v29, v30, v15, v28);
  v31 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  v32 = DispatchWorkItem.init(flags:block:)(v17, v27);
  v33 = v87;
  swift_release(v24);
  swift_release(v33);
  v34 = *(_QWORD *)&v10[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingLocationShiftCancellation];
  *(_QWORD *)&v10[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingLocationShiftCancellation] = v32;
  swift_release(v34);
  v7 = GEOLocationCoordinate2DFromCLLocationCoordinate2D(objc_msgSend(a2, "coordinate"));
  v8 = v35;
  a5 = v10;
  if (qword_10008B960 != -1)
LABEL_5:
    swift_once(&qword_10008B960, sub_1000073AC);
  v71 = (id)qword_10008BDA0;
  objc_msgSend(a2, "horizontalAccuracy");
  v37 = v36;
  v70 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v38 = v73;
  v39 = v76;
  v70(v73, v79, v76);
  v40 = *(unsigned __int8 *)(v13 + 80);
  v41 = (v40 + 40) & ~v40;
  v69 = v40 | 7;
  v42 = (v78 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  v43 = (char *)swift_allocObject(&unk_100082030, v42 + 16, v40 | 7);
  *((_QWORD *)v43 + 2) = a5;
  *((_QWORD *)v43 + 3) = a2;
  *((_QWORD *)v43 + 4) = v72;
  v44 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v44(&v43[v41], v38, v39);
  v68 = (void (*)(uint64_t, char *, uint64_t))v44;
  v45 = &v43[v42];
  v46 = v80;
  *(_QWORD *)v45 = v77;
  *((_QWORD *)v45 + 1) = v46;
  v86 = sub_1000157A4;
  v87 = v43;
  aBlock = _NSConcreteStackBlock;
  v83 = v9;
  v84 = sub_100009EC4;
  v85 = &unk_100082048;
  v72 = _Block_copy(&aBlock);
  v47 = v87;
  swift_retain(v46);
  v48 = a5;
  v49 = a2;
  swift_release(v47);
  v50 = v70;
  v70(v38, v74, v39);
  v51 = (v40 + 24) & ~v40;
  v52 = v51 + v78;
  v53 = v69;
  v54 = swift_allocObject(&unk_100082080, v51 + v78, v69);
  *(_QWORD *)(v54 + 16) = v48;
  v44((char *)(v54 + v51), v38, v39);
  v86 = sub_10001581C;
  v87 = (_QWORD *)v54;
  aBlock = _NSConcreteStackBlock;
  v83 = v9;
  v84 = sub_100052B78;
  v85 = &unk_100082098;
  v55 = _Block_copy(&aBlock);
  v56 = v87;
  v57 = v48;
  swift_release(v56);
  v50(v38, v79, v39);
  v58 = (v52 + 7) & 0xFFFFFFFFFFFFFFF8;
  v59 = swift_allocObject(&unk_1000820D0, v58 + 16, v53);
  *(_QWORD *)(v59 + 16) = v57;
  v68(v59 + v51, v38, v39);
  v60 = (_QWORD *)(v59 + v58);
  v61 = v80;
  *v60 = v77;
  v60[1] = v61;
  v86 = sub_1000158E0;
  v87 = (_QWORD *)v59;
  aBlock = _NSConcreteStackBlock;
  v83 = v9;
  v84 = sub_10000A4E4;
  v85 = &unk_1000820E8;
  v62 = _Block_copy(&aBlock);
  v63 = v87;
  swift_retain(v61);
  v64 = v57;
  swift_release(v63);
  v65 = v71;
  v66 = v72;
  objc_msgSend(v71, "shiftCoordinate:accuracy:withCompletionHandler:mustGoToNetworkCallback:errorHandler:callbackQueue:", v72, v55, v62, v75, v7, v8, v37);
  _Block_release(v62);
  _Block_release(v55);
  _Block_release(v66);

}

uint64_t sub_1000095E0(uint64_t a1, uint64_t (*a2)(char *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  char *Strong;
  uint64_t v13;
  _BYTE v15[24];

  v3 = a1 + 16;
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100014D70(v4, (uint64_t)qword_100090B98);
  v9 = Logger.logObject.getter(v5, v6, v7, v8);
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "GeneralMapsStateCollector: collectLocation END (shiftLocation cancelled)", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  swift_beginAccess(v3, v15, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v13 = *(_QWORD *)&Strong[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingLocationShiftCancellation];
    *(_QWORD *)&Strong[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingLocationShiftCancellation] = 0;

    Strong = (char *)swift_release(v13);
  }
  return a2(Strong);
}

void sub_10000970C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6, double a7, double a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  objc_class *v45;
  Class isa;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  double v95;
  void (*v96)(char *, uint64_t);
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(void);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  double v127;
  id v128;
  _BYTE v129[64];
  int v130;
  uint64_t v131;
  int v132;
  double v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  id v141;

  v119 = a4;
  v120 = a3;
  v14 = type metadata accessor for Date(0);
  v121 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v107 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v122 = (char *)&v107 - v18;
  v20 = type metadata accessor for DispatchPredicate(0, v19);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char **)((char *)&v107 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = *(void **)(a1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_isolationQueue);
  *v23 = v24;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v21 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v20);
  v25 = v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)(v23);
  (*(void (**)(_QWORD *, uint64_t))(v21 + 8))(v23, v20);
  if ((v24 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    swift_once(&qword_10008B9F0, sub_100035150);
LABEL_6:
    v73 = type metadata accessor for Logger(0);
    sub_100014D70(v73, (uint64_t)qword_100090B98);
    v74 = v121;
    v75 = v122;
    v76 = v118;
    (*(void (**)(char *, uint64_t, uint64_t))(v121 + 16))(v122, v119, v118);
    v77 = v114;
    v81 = Logger.logObject.getter(v77, v78, v79, v80);
    v85 = static os_log_type_t.debug.getter(v81, v82, v83, v84);
    if (os_log_type_enabled(v81, v85))
    {
      v86 = swift_slowAlloc(22, -1);
      v87 = swift_slowAlloc(32, -1);
      v125 = v87;
      *(_DWORD *)v86 = 136380931;
      v123 = (uint64_t)v77;
      v124 = v120;
      v88 = v77;
      v89 = String.init<A>(reflecting:)(&v123, &type metadata for GeneralMapsLocationUpdater.LocationInfo);
      v91 = v90;
      v123 = sub_1000523F0(v89, v90, &v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &v124, v86 + 4);

      v92 = swift_bridgeObjectRelease(v91);
      *(_WORD *)(v86 + 12) = 2050;
      v93 = v107;
      Date.init()(v92);
      v94 = v122;
      v95 = Date.timeIntervalSince(_:)(v122);
      v96 = *(void (**)(char *, uint64_t))(v121 + 8);
      v97 = v93;
      v98 = v118;
      v96(v97, v118);
      v123 = *(_QWORD *)&v95;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &v124, v86 + 14);
      v96(v94, v98);
      _os_log_impl((void *)&_mh_execute_header, v81, v85, "GeneralMapsStateCollector: collectLocation END (shifted location: %{private}s, %{public}f seconds elapsed)", (uint8_t *)v86, 0x16u);
      swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v87, -1, -1);
      swift_slowDealloc(v86, -1, -1);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v76);
    }

    v117();
    swift_release(v115);
    return;
  }
  v26 = OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingLocationShiftCancellation;
  v27 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingLocationShiftCancellation);
  if (v27)
  {
    v113 = a7;
    v114 = *(id *)&a8;
    v107 = v17;
    v118 = v14;
    v116 = a6;
    v117 = a5;
    v28 = swift_retain(v27);
    v115 = v29;
    dispatch thunk of DispatchWorkItem.cancel()(v28);
    v30 = *(_QWORD *)(a1 + v26);
    *(_QWORD *)(a1 + v26) = 0;
    swift_release(v30);
    objc_msgSend(a2, "clientLocation");
    v31 = v126;
    v32 = *(_QWORD *)v129;
    v33 = *(_QWORD *)&v129[8];
    v34 = *(_QWORD *)&v129[16];
    v35 = *(_QWORD *)&v129[24];
    v36 = *(_QWORD *)&v129[32];
    v37 = *(_QWORD *)&v129[48];
    v108 = *(_QWORD *)&v129[56];
    v38 = v130;
    v39 = v131;
    v40 = v132;
    v110 = v135;
    v109 = v136;
    v112 = v138;
    v111 = v139;
    v41 = v140;
    objc_msgSend(a2, "rawCourse");
    v43 = v42;
    v44 = a2;
    v45 = (objc_class *)objc_msgSend(v44, "coarseMetaData");
    isa = v45;
    if (v45)
    {
      v47 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v45);
      v49 = v48;

      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100015610(v47, v49);
    }
    v50 = objc_allocWithZone((Class)CLLocation);
    v126 = v31;
    v127 = v113;
    v128 = v114;
    *(_QWORD *)v129 = v32;
    *(_QWORD *)&v129[8] = v33;
    *(_QWORD *)&v129[16] = v34;
    *(_QWORD *)&v129[24] = v35;
    *(_QWORD *)&v129[32] = v36;
    *(_QWORD *)&v129[40] = v43;
    *(_QWORD *)&v129[48] = v37;
    *(_QWORD *)&v129[56] = v108;
    v130 = v38;
    v131 = v39;
    v132 = v40;
    v133 = v113;
    v134 = v114;
    v135 = v110;
    v136 = v109;
    v137 = 2;
    v138 = v112;
    v139 = v111;
    v140 = v41;
    v51 = objc_msgSend(v50, "initWithClientLocation:coarseMetaData:", &v126, isa);

    v52 = v51;
    v114 = v52;
    sub_1000071E0((uint64_t)&v126);
    LODWORD(v113) = v129[60];
    v53 = *(_QWORD *)&v129[52];
    v54 = *(_QWORD *)&v129[44];
    v55 = *(_QWORD *)&v129[36];
    v56 = *(_QWORD *)&v129[28];
    v57 = *(_QWORD *)&v129[20];
    v58 = *(_QWORD *)&v129[12];
    v59 = *(_QWORD *)&v129[4];
    v60 = HIDWORD(v128);
    sub_10001565C((uint64_t)&v126, (uint64_t)&v141, &qword_10008BF28);
    sub_100015938(&v141);
    v61 = a1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state;
    v62 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state);
    v63 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 8);
    v64 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 16);
    v65 = *(void **)(a1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 24);
    v66 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 32);
    v67 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 40);
    v68 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 48);
    v69 = *(void **)(a1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 56);
    v70 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 64);
    v71 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 72);
    v72 = v120;
    *(_QWORD *)v61 = v52;
    *(_QWORD *)(v61 + 8) = v72;
    *(_QWORD *)(v61 + 16) = v60;
    *(_QWORD *)(v61 + 24) = v59;
    *(_QWORD *)(v61 + 32) = v58;
    *(_QWORD *)(v61 + 40) = v57;
    *(_QWORD *)(v61 + 48) = v56;
    *(_QWORD *)(v61 + 56) = v55;
    *(_QWORD *)(v61 + 64) = v54;
    *(_QWORD *)(v61 + 72) = v53;
    *(_BYTE *)(v61 + 80) = LOBYTE(v113);
    sub_100014F38(v62, v63, v64, v65, v66, v67, v68, v69, v70, v71);
    if (qword_10008B9F0 == -1)
      goto LABEL_6;
    goto LABEL_16;
  }
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v99 = type metadata accessor for Logger(0);
  v100 = sub_100014D70(v99, (uint64_t)qword_100090B98);
  v104 = Logger.logObject.getter(v100, v101, v102, v103);
  v105 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v104, v105))
  {
    v106 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v106 = 0;
    _os_log_impl((void *)&_mh_execute_header, v104, v105, "GeneralMapsStateCollector: collectLocation was cancelled just before completion", v106, 2u);
    swift_slowDealloc(v106, -1, -1);
  }

}

uint64_t sub_100009EC4(uint64_t a1, double a2, double a3, double a4)
{
  void (*v7)(double, double, double);
  uint64_t v8;

  v7 = *(void (**)(double, double, double))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  swift_retain(v8);
  v7(a2, a3, a4);
  return swift_release(v8);
}

void sub_100009F18(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;

  v3 = type metadata accessor for DispatchPredicate(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(a1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_isolationQueue);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
    sub_10000A538();
  else
    __break(1u);
}

void sub_100009FE0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  double v39;
  void (*v40)(_BYTE *, uint64_t);
  os_log_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _BYTE v56[12];
  int v57;
  os_log_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(void);
  uint64_t v62;
  uint64_t v63;

  v60 = a5;
  v61 = a4;
  v59 = a3;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v56[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v56[-v12];
  v15 = type metadata accessor for DispatchPredicate(0, v14);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v56[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = *(void **)(a2 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_isolationQueue);
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  v20 = v19;
  v21 = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v22 = OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingLocationShiftCancellation;
  v21 = *(_QWORD *)(a2 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingLocationShiftCancellation);
  if (v21)
  {
    v23 = swift_retain(*(_QWORD *)(a2
                                 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingLocationShiftCancellation));
    dispatch thunk of DispatchWorkItem.cancel()(v23);
    v24 = *(_QWORD *)(a2 + v22);
    *(_QWORD *)(a2 + v22) = 0;
    swift_release(v24);
    if (qword_10008B9F0 == -1)
    {
LABEL_4:
      v25 = type metadata accessor for Logger(0);
      sub_100014D70(v25, (uint64_t)qword_100090B98);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v13, v59, v7);
      swift_errorRetain(a1);
      v26 = swift_errorRetain(a1);
      v30 = Logger.logObject.getter(v26, v27, v28, v29);
      v31 = static os_log_type_t.error.getter();
      v32 = v31;
      if (os_log_type_enabled(v30, v31))
      {
        v33 = swift_slowAlloc(22, -1);
        v59 = swift_slowAlloc(32, -1);
        v62 = a1;
        v63 = v59;
        *(_DWORD *)v33 = 136446466;
        v58 = v30;
        swift_errorRetain(a1);
        v34 = sub_1000027AC(&qword_10008BF38);
        v57 = v32;
        v35 = String.init<A>(reflecting:)(&v62, v34);
        v37 = v36;
        v62 = sub_1000523F0(v35, v36, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v33 + 4);
        swift_bridgeObjectRelease(v37);
        swift_errorRelease(a1);
        v38 = swift_errorRelease(a1);
        *(_WORD *)(v33 + 12) = 2050;
        Date.init()(v38);
        v39 = Date.timeIntervalSince(_:)(v13);
        v40 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
        v40(v11, v7);
        v62 = *(_QWORD *)&v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v33 + 14);
        v40(v13, v7);
        v41 = v58;
        _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v57, "GeneralMapsStateCollector: collectLocation END (location shift error: %{public}s, %{public}f seconds elapsed)", (uint8_t *)v33, 0x16u);
        v42 = v59;
        swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v42, -1, -1);
        swift_slowDealloc(v33, -1, -1);

      }
      else
      {
        swift_errorRelease(a1);
        swift_errorRelease(a1);
        (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);

      }
      v61();
      swift_release(v21);
      return;
    }
LABEL_15:
    swift_once(&qword_10008B9F0, sub_100035150);
    goto LABEL_4;
  }
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v43 = type metadata accessor for Logger(0);
  sub_100014D70(v43, (uint64_t)qword_100090B98);
  swift_errorRetain(a1);
  v44 = swift_errorRetain(a1);
  v48 = Logger.logObject.getter(v44, v45, v46, v47);
  v49 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc(12, -1);
    v51 = swift_slowAlloc(32, -1);
    v62 = a1;
    v63 = v51;
    *(_DWORD *)v50 = 136446210;
    swift_errorRetain(a1);
    v52 = sub_1000027AC(&qword_10008BF38);
    v53 = String.init<A>(reflecting:)(&v62, v52);
    v55 = v54;
    v62 = sub_1000523F0(v53, v54, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v50 + 4);
    swift_bridgeObjectRelease(v55);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "GeneralMapsStateCollector: collectLocation was cancelled prior to error delivery (error: %{public}s)", v50, 0xCu);
    swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v50, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

}

void sub_10000A4E4(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

void sub_10000A538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  double (*v28)(char *, uint64_t);
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  id v46;
  double v47;
  uint64_t v48;

  v1 = type metadata accessor for DispatchTime(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v46 - v6;
  v9 = type metadata accessor for DispatchPredicate(0, v8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (id *)((char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)(v0 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_isolationQueue);
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  v46 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    swift_once(&qword_10008B9F0, sub_100035150);
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingLocationShiftCancellation);
  if (v14)
  {
    swift_retain(*(_QWORD *)(v0
                           + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingLocationShiftCancellation));
    v16 = Date.timeIntervalSinceNow.getter(v15) + -10.0;
    if (v16 <= 0.0)
    {
      if (qword_10008B9F0 != -1)
        swift_once(&qword_10008B9F0, sub_100035150);
      v38 = type metadata accessor for Logger(0);
      v39 = sub_100014D70(v38, (uint64_t)qword_100090B98);
      v43 = Logger.logObject.getter(v39, v40, v41, v42);
      v44 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "GeneralMapsStateCollector: could not schedule shiftLocation cancellation", v45, 2u);
        swift_slowDealloc(v45, -1, -1);
      }

      swift_release(v14);
    }
    else
    {
      if (qword_10008B9F0 != -1)
        swift_once(&qword_10008B9F0, sub_100035150);
      v17 = type metadata accessor for Logger(0);
      v18 = sub_100014D70(v17, (uint64_t)qword_100090B98);
      v22 = Logger.logObject.getter(v18, v19, v20, v21);
      v26 = static os_log_type_t.debug.getter(v22, v23, v24, v25);
      if (os_log_type_enabled(v22, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v27 = 134349056;
        v47 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v27 + 4);
        _os_log_impl((void *)&_mh_execute_header, v22, v26, "GeneralMapsStateCollector: scheduled shiftLocation cancellation in %{public}f seconds", v27, 0xCu);
        swift_slowDealloc(v27, -1, -1);
      }

      static DispatchTime.now()();
      + infix(_:_:)(v5, v16);
      v28 = *(double (**)(char *, uint64_t))(v2 + 8);
      v29.n128_f64[0] = v28(v5, v1);
      OS_dispatch_queue.asyncAfter(deadline:execute:)(v7, v14, v29);
      swift_release(v14);
      v28(v7, v1);
    }
    return;
  }
  if (qword_10008B9F0 != -1)
    goto LABEL_19;
LABEL_10:
  v30 = type metadata accessor for Logger(0);
  v31 = sub_100014D70(v30, (uint64_t)qword_100090B98);
  v35 = Logger.logObject.getter(v31, v32, v33, v34);
  v36 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "GeneralMapsStateCollector: shiftLocation completed before cancellation was scheduled", v37, 2u);
    swift_slowDealloc(v37, -1, -1);
  }

}

void sub_10000A918(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  void *v29;
  id v30;
  void *v31;
  NSObject *v32;
  uint64_t v33;

  v3 = v2;
  v4 = type metadata accessor for DispatchPredicate(0, a2);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v3 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_isolationQueue);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    swift_once(&qword_10008B9F0, sub_100035150);
LABEL_4:
    v10 = type metadata accessor for Logger(0);
    v11 = sub_100014D70(v10, (uint64_t)qword_100090B98);
    v15 = Logger.logObject.getter(v11, v12, v13, v14);
    v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "GeneralMapsStateCollector: skipped collectNavigationRoute (state collection cancelled)", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }
    goto LABEL_14;
  }
  if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_cancelled) & 1) != 0)
  {
    if (qword_10008B9F0 == -1)
      goto LABEL_4;
    goto LABEL_17;
  }
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_100014D70(v18, (uint64_t)qword_100090B98);
  v23 = Logger.logObject.getter(v19, v20, v21, v22);
  v27 = static os_log_type_t.debug.getter(v23, v24, v25, v26);
  if (os_log_type_enabled(v23, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v27, "GeneralMapsStateCollector: collectNavigationRoute BEGIN", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }

  dispatch_group_enter(*(dispatch_group_t *)(v3
                                           + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_collectorGroup));
  sub_10000ABB8();
  v29 = (void *)objc_opt_self(MNNavigationService);
  v30 = objc_msgSend(v29, "sharedService");
  if (v30)
  {
    v31 = v30;
    objc_msgSend(v30, "registerObserver:", v3);

  }
  v32 = objc_msgSend(v29, "sharedService");
  if (v32)
  {
    v15 = v32;
    -[NSObject openForClient:](v32, "openForClient:", v3);
LABEL_14:

  }
}

uint64_t sub_10000ABB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t (*v33)(char *, uint64_t);
  uint64_t result;
  uint64_t v35;
  __n128 v36;
  __n128 v37;
  uint64_t v38;
  void *v39;
  uint64_t aBlock;
  _QWORD v41[4];
  uint64_t v42;

  v1 = v0;
  v2 = type metadata accessor for DispatchTime(0);
  v38 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v38 - v6;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100014D70(v11, (uint64_t)qword_100090B98);
  v16 = Logger.logObject.getter(v12, v13, v14, v15);
  v20 = static os_log_type_t.debug.getter(v16, v17, v18, v19);
  if (os_log_type_enabled(v16, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v21 = 134349056;
    aBlock = 0x4014000000000000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v41, v21 + 4);
    _os_log_impl((void *)&_mh_execute_header, v16, v20, "GeneralMapsStateCollector: scheduled collectNavigationRoute cancellation in %{public}f seconds", v21, 0xCu);
    swift_slowDealloc(v21, -1, -1);
  }

  v22 = swift_allocObject(&unk_100081E00, 24, 7);
  swift_unknownObjectWeakInit(v22 + 16, v1);
  v41[3] = sub_1000156C8;
  v42 = v22;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v41[0] = 1107296256;
  v41[1] = sub_100052B78;
  v41[2] = &unk_100081FA8;
  v23 = _Block_copy(&aBlock);
  v39 = &_swiftEmptyArrayStorage;
  v24 = sub_1000150DC();
  swift_retain(v22);
  v25 = sub_1000027AC((uint64_t *)&unk_10008BF70);
  v26 = sub_100015124();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v25, v26, v8, v24);
  v27 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v28 = DispatchWorkItem.init(flags:block:)(v10, v23);
  v29 = v42;
  swift_release(v22);
  swift_release(v29);
  v30 = OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingNavigationRouteCancellation;
  v31 = *(_QWORD *)(v1
                  + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingNavigationRouteCancellation);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingNavigationRouteCancellation) = v28;
  v32 = swift_release(v31);
  static DispatchTime.now()(v32);
  + infix(_:_:)(v5, 5.0);
  v33 = *(uint64_t (**)(char *, uint64_t))(v38 + 8);
  result = v33(v5, v2);
  v35 = *(_QWORD *)(v1 + v30);
  if (v35)
  {
    v36 = swift_retain(v35);
    OS_dispatch_queue.asyncAfter(deadline:execute:)(v7, v35, v36);
    v37 = swift_release(v35);
    return ((uint64_t (*)(char *, uint64_t, __n128))v33)(v7, v2, v37);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10000AED8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  char *Strong;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _BYTE v15[24];

  v1 = a1 + 16;
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100014D70(v2, (uint64_t)qword_100090B98);
  v7 = Logger.logObject.getter(v3, v4, v5, v6);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "GeneralMapsStateCollector: running fetchNavigationRoute because nav service did not respond in time", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  swift_beginAccess(v1, v15, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v11 = *(_QWORD *)&Strong[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingNavigationRouteCancellation];
    *(_QWORD *)&Strong[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingNavigationRouteCancellation] = 0;

    swift_release(v11);
  }
  swift_beginAccess(v1, &v14, 0, 0);
  v12 = swift_unknownObjectWeakLoadStrong(v1);
  if (v12)
  {
    v13 = (void *)v12;
    sub_10000B018();

  }
}

void sub_10000B018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  id v20;
  void *v21;
  NSObject *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  uint8_t *v47;
  id v48;
  uint64_t v49;
  int v50;
  Class isa;
  id v52;
  void *v53;
  NSObject *v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  os_log_type_t v81;
  uint8_t *v82;
  NSObject *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  NSObject *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  NSObject *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  os_log_type_t v112;
  int v113;
  uint64_t v114;
  unsigned int v115;
  NSObject *v116;
  id v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  void *v121;
  NSObject *v122;
  id v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  id v131;
  NSObject *v132;
  id v133;
  NSObject *v134;
  id v135;
  uint64_t v136;
  NSObject *v137;
  _QWORD v138[2];
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD v144[3];
  unsigned __int8 v145;
  _QWORD v146[2];
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  _BYTE v152[24];
  _BYTE v153[16];
  id v154;

  v1 = v0;
  sub_1000027AC(&qword_10008C028);
  __chkstk_darwin();
  v3 = (char *)&v125 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (_QWORD *)type metadata accessor for DispatchPredicate(0, v4);
  v6 = *(v5 - 1);
  __chkstk_darwin();
  v8 = (uint64_t *)((char *)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_isolationQueue);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, _QWORD *))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_52:
    swift_once(&qword_10008B9F0, sub_100035150);
LABEL_5:
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100014D70(v12, (uint64_t)qword_100090B98);
    v17 = Logger.logObject.getter(v13, v14, v15, v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "GeneralMapsStateCollector: collectNavigationRoute END (state collection cancelled)", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    objc_msgSend(v5, "unregisterObserver:", v1);
    if (!objc_msgSend(v5, "isOpenForClient:", v1))
      goto LABEL_9;
LABEL_8:
    objc_msgSend(v5, "closeForClient:", v1);
LABEL_9:
    dispatch_group_leave(*(dispatch_group_t *)(v1
                                             + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_collectorGroup));

    return;
  }
  v11 = objc_msgSend((id)objc_opt_self(MNNavigationService), "sharedService");
  if (v11)
  {
    v5 = v11;
    if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_cancelled) & 1) != 0)
    {
      if (qword_10008B9F0 == -1)
        goto LABEL_5;
      goto LABEL_52;
    }
    if (objc_msgSend(v11, "isOpenForClient:", v1))
    {
      if (!objc_msgSend(v5, "isInNavigatingState")
        || (v20 = objc_msgSend(v5, "route")) == 0)
      {
        if (qword_10008B9F0 != -1)
          swift_once(&qword_10008B9F0, sub_100035150);
        v37 = type metadata accessor for Logger(0);
        v38 = sub_100014D70(v37, (uint64_t)qword_100090B98);
        v42 = Logger.logObject.getter(v38, v39, v40, v41);
        v46 = static os_log_type_t.debug.getter(v42, v43, v44, v45);
        if (os_log_type_enabled(v42, v46))
        {
          v47 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v47 = 0;
          _os_log_impl((void *)&_mh_execute_header, v42, v46, "GeneralMapsStateCollector: collectNavigationRoute END (not navigating)", v47, 2u);
          swift_slowDealloc(v47, -1, -1);
        }
        goto LABEL_25;
      }
      v21 = v20;
      v22 = objc_msgSend(v5, "batteryChargeInfoForRoute:", v20);
      v23 = objc_msgSend(v5, "displayETAInfoForRoute:", v21);
      if (v23)
      {
        v135 = v23;
        v24 = objc_msgSend(v5, "remainingDistanceInfoForRoute:", v21);
        if (v24)
        {
          v25 = v24;
          v26 = objc_msgSend(v5, "upcomingStop");
          v27 = objc_msgSend(v26, "timezone");

          v132 = v22;
          if (v27)
          {
            static TimeZone._unconditionallyBridgeFromObjectiveC(_:)(v27);

            v28 = type metadata accessor for TimeZone(0);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v3, 0, 1, v28);
          }
          else
          {
            v28 = type metadata accessor for TimeZone(0);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v3, 1, 1, v28);
          }
          LODWORD(v131) = objc_msgSend(v21, "transportType");
          type metadata accessor for TimeZone(0);
          v49 = *(_QWORD *)(v28 - 8);
          v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48))(v3, 1, v28);
          v134 = v132;
          v133 = v135;
          v48 = v25;
          isa = 0;
          if (v50 != 1)
          {
            isa = TimeZone._bridgeToObjectiveC()().super.isa;
            (*(void (**)(char *, uint64_t))(v49 + 8))(v3, v28);
          }
          v52 = objc_allocWithZone((Class)GuidanceETA);
          v53 = v133;
          v54 = v134;
          v55 = objc_msgSend(v52, "initWithDisplayETA:remainingDistance:batteryChargeInfo:destinationTimeZone:transportType:", v133, v48, v134, isa, v131);

          if (v55)
          {
            v135 = v48;
            v131 = v21;
            sub_1000071E0((uint64_t)v138);
            LODWORD(v130) = v145;
            *(_QWORD *)&v129 = v144[1];
            v128 = v144[2];
            v127 = v143;
            v56 = v141;
            v126 = v142;
            v57 = v140;
            v132 = v55;
            v58 = v139;
            v59 = v138[0];
            v60 = v138[1];
            sub_10001565C((uint64_t)v144, (uint64_t)&v154, &qword_10008C030);
            sub_100015938(&v154);
            v61 = v1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state;
            v62 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state);
            v63 = *(_QWORD *)(v1
                            + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                            + 8);
            v64 = *(_QWORD *)(v1
                            + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                            + 16);
            v65 = *(void **)(v1
                           + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                           + 24);
            v66 = *(_QWORD *)(v1
                            + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                            + 32);
            v67 = *(_QWORD *)(v1
                            + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                            + 40);
            v68 = *(_QWORD *)(v1
                            + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                            + 48);
            v69 = *(void **)(v1
                           + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                           + 56);
            v70 = *(_QWORD *)(v1
                            + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                            + 64);
            v71 = *(_QWORD *)(v1
                            + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                            + 72);
            *(_QWORD *)v61 = v59;
            *(_QWORD *)(v61 + 8) = v60;
            *(_QWORD *)(v61 + 16) = v58;
            *(_QWORD *)(v61 + 24) = v57;
            v72 = v126;
            *(_QWORD *)(v61 + 32) = v56;
            *(_QWORD *)(v61 + 40) = v72;
            *(_QWORD *)(v61 + 48) = v127;
            *(_QWORD *)(v61 + 56) = v21;
            *(_QWORD *)(v61 + 64) = v129;
            *(_QWORD *)(v61 + 72) = v128;
            *(_BYTE *)(v61 + 80) = v130;
            sub_100014F38(v62, v63, v64, v65, v66, v67, v68, v69, v70, v71);
            v73 = -[NSObject etaDateStringWithAMPMSymbol:allowTimeZone:](v132, "etaDateStringWithAMPMSymbol:allowTimeZone:", 1, 0);
            if (v73)
            {
              v74 = v73;
              v128 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
              v127 = v75;

            }
            else
            {
              v128 = 0;
              v127 = 0;
            }
            sub_1000071E0((uint64_t)v146);
            LODWORD(v130) = v152[16];
            v84 = v151;
            v129 = v150;
            v85 = v148;
            v86 = v149;
            v87 = v147;
            v89 = v146[0];
            v88 = v146[1];
            sub_10001565C((uint64_t)v152, (uint64_t)v153, &qword_10008BF80);
            sub_1000156A0((uint64_t)v153);
            v90 = *(_QWORD *)v61;
            v91 = *(_QWORD *)(v61 + 8);
            v92 = *(_QWORD *)(v61 + 16);
            v93 = *(void **)(v61 + 24);
            v94 = *(_QWORD *)(v61 + 32);
            v95 = *(_QWORD *)(v61 + 40);
            v96 = *(_QWORD *)(v61 + 48);
            v97 = *(void **)(v61 + 56);
            v98 = *(_QWORD *)(v61 + 64);
            v99 = *(_QWORD *)(v61 + 72);
            *(_QWORD *)v61 = v89;
            *(_QWORD *)(v61 + 8) = v88;
            *(_QWORD *)(v61 + 16) = v87;
            *(_QWORD *)(v61 + 24) = v85;
            *(_QWORD *)(v61 + 32) = v86;
            *(_OWORD *)(v61 + 40) = v129;
            v100 = v128;
            *(_QWORD *)(v61 + 56) = v84;
            *(_QWORD *)(v61 + 64) = v100;
            *(_QWORD *)(v61 + 72) = v127;
            *(_BYTE *)(v61 + 80) = v130;
            sub_100014F38(v90, v91, v92, v93, v94, v95, v96, v97, v98, v99);
            if (qword_10008B9F0 != -1)
              swift_once(&qword_10008B9F0, sub_100035150);
            v101 = type metadata accessor for Logger(0);
            sub_100014D70(v101, (uint64_t)qword_100090B98);
            v102 = v131;
            v103 = v132;
            v104 = v102;
            v42 = v103;
            v108 = Logger.logObject.getter(v42, v105, v106, v107);
            v112 = static os_log_type_t.debug.getter(v108, v109, v110, v111);
            v113 = v112;
            if (os_log_type_enabled(v108, v112))
            {
              v114 = swift_slowAlloc(18, -1);
              v132 = swift_slowAlloc(32, -1);
              v137 = v132;
              *(_DWORD *)v114 = 67174915;
              LODWORD(v131) = v113;
              v115 = objc_msgSend(v104, "expectedTime");

              LODWORD(v136) = v115 / 0x3C;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, (char *)&v136 + 4, v114 + 4);

              *(_WORD *)(v114 + 8) = 2081;
              v130 = v114 + 10;
              v116 = v42;
              v117 = -[NSObject description](v116, "description");
              v118 = static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
              *(_QWORD *)&v129 = v108;
              v120 = v119;

              v136 = sub_1000523F0(v118, v120, (uint64_t *)&v137);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v130);

              swift_bridgeObjectRelease(v120);
              v121 = (void *)v129;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)v129, (os_log_type_t)v131, "GeneralMapsStateCollector: collectNavigationRoute END (route with expected travel time: %{private}u mins, ETA %{private}s)", (uint8_t *)v114, 0x12u);
              v122 = v132;
              swift_arrayDestroy(v132, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v122, -1, -1);
              swift_slowDealloc(v114, -1, -1);

            }
            else
            {

            }
            v123 = v135;
            v124 = v133;
            sub_10000BC14();

LABEL_25:
            goto LABEL_42;
          }

          v22 = v132;
        }
        else
        {
          v48 = v135;
        }

      }
      if (qword_10008B9F0 != -1)
        swift_once(&qword_10008B9F0, sub_100035150);
      v76 = type metadata accessor for Logger(0);
      sub_100014D70(v76, (uint64_t)qword_100090B98);
      v77 = v21;
      v34 = Logger.logObject.getter(v77, v78, v79, v80);
      v81 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v81))
      {
        v82 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v82 = 67174657;
        LODWORD(v146[0]) = -[NSObject expectedTime](v77, "expectedTime") / 0x3C;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v146, (char *)v146 + 4, v82 + 4);

        _os_log_impl((void *)&_mh_execute_header, v34, v81, "GeneralMapsStateCollector: collectNavigationRoute END (route with expected travel time: %{private}u mins, but no ETA available)", v82, 8u);
        swift_slowDealloc(v82, -1, -1);
        v83 = v77;
      }
      else
      {

        v83 = v22;
        v22 = v77;
        v34 = v77;
      }

    }
    else
    {
      if (qword_10008B9F0 != -1)
        swift_once(&qword_10008B9F0, sub_100035150);
      v29 = type metadata accessor for Logger(0);
      v30 = sub_100014D70(v29, (uint64_t)qword_100090B98);
      v34 = Logger.logObject.getter(v30, v31, v32, v33);
      v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "GeneralMapsStateCollector: collectNavigationRoute END (nav service was closed for client)", v36, 2u);
        swift_slowDealloc(v36, -1, -1);
      }
    }

LABEL_42:
    objc_msgSend(v5, "unregisterObserver:", v1);
    if ((objc_msgSend(v5, "isOpenForClient:", v1) & 1) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  __break(1u);
}

void sub_10000BC14()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[5];
  uint64_t v20;

  v1 = v0;
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100014D70(v2, (uint64_t)qword_100090B98);
  v7 = Logger.logObject.getter(v3, v4, v5, v6);
  v11 = static os_log_type_t.debug.getter(v7, v8, v9, v10);
  if (os_log_type_enabled(v7, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v11, "GeneralMapsStateCollector: collectShareETAAvailability BEGIN", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  dispatch_group_enter(*(dispatch_group_t *)&v1[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_collectorGroup]);
  v13 = objc_msgSend((id)objc_opt_self(MSPSharedTripService), "sharedInstance");
  if (v13)
  {
    v14 = v13;
    v15 = swift_allocObject(&unk_100081F68, 24, 7);
    *(_QWORD *)(v15 + 16) = v1;
    v19[4] = sub_100015654;
    v20 = v15;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 1107296256;
    v19[2] = sub_10000BF44;
    v19[3] = &unk_100081F80;
    v16 = _Block_copy(v19);
    v17 = v20;
    v18 = v1;
    swift_release(v17);
    objc_msgSend(v14, "performBlockAfterInitialSync:", v16);
    _Block_release(v16);

  }
  else
  {
    __break(1u);
  }
}

void sub_10000BDB4(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  int v30;
  __int128 v31;
  unsigned int v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v3 = MSPSharedTripSharingAvailable();
  sub_1000071E0((uint64_t)&v31);
  v4 = v37;
  v6 = v34;
  v5 = v35;
  v7 = v32;
  v8 = a2 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state;
  v9 = *(_QWORD *)(a2 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state);
  v10 = *(_QWORD *)(a2 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 8);
  v11 = *(_QWORD *)(a2 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 16);
  v12 = *(void **)(a2 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 24);
  v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 32);
  v14 = *(_QWORD *)(a2 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 40);
  v15 = *(_QWORD *)(a2 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 48);
  v16 = *(void **)(a2 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 56);
  v17 = *(_QWORD *)(a2 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 64);
  v18 = *(_QWORD *)(a2 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 72);
  *(_OWORD *)v8 = v31;
  *(_QWORD *)(v8 + 16) = v7;
  *(_OWORD *)(v8 + 24) = v33;
  *(_QWORD *)(v8 + 40) = v6;
  *(_QWORD *)(v8 + 48) = v5;
  *(_OWORD *)(v8 + 56) = v36;
  *(_QWORD *)(v8 + 72) = v4;
  *(_BYTE *)(v8 + 80) = v3;
  sub_100014F38(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_100014D70(v19, (uint64_t)qword_100090B98);
  v24 = Logger.logObject.getter(v20, v21, v22, v23);
  v28 = static os_log_type_t.debug.getter(v24, v25, v26, v27);
  if (os_log_type_enabled(v24, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v29 = 67240192;
    v30 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v29 + 4);
    _os_log_impl((void *)&_mh_execute_header, v24, v28, "GeneralMapsStateCollector: collectShareETAAvailability END (available: %{BOOL,public}d)", v29, 8u);
    swift_slowDealloc(v29, -1, -1);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a2
                                           + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_collectorGroup));
}

void sub_10000BF44(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

void sub_10000BF94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  const char *v19;
  id v20;
  NSString v21;
  id v22;
  id v23;
  NSString v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  int v32;
  uint8_t *v33;
  __CFString *v34;
  __CFString *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  __CFString *v55;
  __CFString *v56;
  __CFString *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  _QWORD v66[7];
  __int128 v67;
  uint64_t v68;
  char v69;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchPredicate(0, v5);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v0 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_isolationQueue);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_29:
    swift_once(&qword_10008B9F0, sub_100035150);
LABEL_4:
    v12 = sub_100014D70(v1, (uint64_t)qword_100090B98);
    v16 = Logger.logObject.getter(v12, v13, v14, v15);
    v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      v19 = "GeneralMapsStateCollector: skipped collectMapsActivityMapType (state collection cancelled)";
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v16, v17, v19, v18, 2u);
      swift_slowDealloc(v18, -1, -1);
      goto LABEL_20;
    }
    goto LABEL_20;
  }
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_cancelled) & 1) != 0)
  {
    if (qword_10008B9F0 == -1)
      goto LABEL_4;
    goto LABEL_29;
  }
  v20 = objc_allocWithZone((Class)NSUserDefaults);
  v21 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend(v20, "initWithSuiteName:", v21);

  if (!v22)
  {
    if (qword_10008B9F0 == -1)
      goto LABEL_17;
    goto LABEL_32;
  }
  v23 = v22;
  v24 = String._bridgeToObjectiveC()();
  v25 = (uint64_t)objc_msgSend(v23, "integerForKey:", v24);

  if (v25 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v25 > 0x7FFFFFFF)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_once(&qword_10008B9F0, sub_100035150);
LABEL_17:
    v36 = sub_100014D70(v1, (uint64_t)qword_100090B98);
    v16 = Logger.logObject.getter(v36, v37, v38, v39);
    v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      v19 = "GeneralMapsStateCollector: collectMapsActivityMapType found no MapsLastActivityMapType in defaults";
      goto LABEL_19;
    }
LABEL_20:

    return;
  }
  if ((v25 - 1) > 1)
  {
    sub_1000071E0((uint64_t)v66);
    v40 = v69;
    v41 = v68;
    v43 = v66[5];
    v42 = v66[6];
    v44 = v0 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state;
    v45 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state);
    v46 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 8);
    v47 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 16);
    v48 = *(void **)(v0 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 24);
    v49 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 32);
    v50 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 40);
    v51 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 48);
    v52 = *(void **)(v0 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 56);
    v53 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 64);
    v54 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 72);
    *(_OWORD *)v44 = *(_OWORD *)v66;
    *(_QWORD *)(v44 + 16) = v25;
    *(_OWORD *)(v44 + 24) = *(_OWORD *)&v66[3];
    *(_QWORD *)(v44 + 40) = v43;
    *(_QWORD *)(v44 + 48) = v42;
    *(_OWORD *)(v44 + 56) = v67;
    *(_QWORD *)(v44 + 72) = v41;
    *(_BYTE *)(v44 + 80) = v40;
    sub_100014F38(v45, v46, v47, v48, v49, v50, v51, v52, v53, v54);

    return;
  }
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v26 = sub_100014D70(v1, (uint64_t)qword_100090B98);
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v26, v1);
  v31 = Logger.logObject.getter(v27, v28, v29, v30);
  v32 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v31, (os_log_type_t)v32))
  {

LABEL_27:
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return;
  }
  v64 = v32;
  v33 = (uint8_t *)swift_slowAlloc(12, -1);
  v63 = swift_slowAlloc(32, -1);
  v66[0] = v63;
  *(_DWORD *)v33 = 136446210;
  if ((_DWORD)v25 == 2)
  {
    v34 = CFSTR("Hybrid");
    v55 = CFSTR("Hybrid");
  }
  else if ((_DWORD)v25 == 1)
  {
    v34 = CFSTR("Satellite");
    v35 = CFSTR("Satellite");
  }
  else
  {
    v34 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v25));
  }
  v56 = v34;
  if (v56)
  {
    v57 = v56;
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
    v60 = v59;

    v65 = sub_1000523F0(v58, v60, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66, v33 + 4);
    swift_bridgeObjectRelease(v60);
    _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v64, "%{public}s map type not supported in Maps widget", v33, 0xCu);
    v61 = v63;
    swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1, -1);
    swift_slowDealloc(v33, -1, -1);

    goto LABEL_27;
  }
  __break(1u);
}

void sub_10000C504(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSString v25;
  NSObject *v26;
  NSString v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  Class isa;
  id v34;
  id v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint8_t *v47;
  uint8_t *v48;
  NSObject *v49;
  NSObject *v50;
  _QWORD *v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  _QWORD *v69;
  NSObject *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint8_t *v76;
  os_log_type_t v77;
  uint64_t v78;
  uint8_t *v79;
  _QWORD *v80;
  NSObject *v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint8_t *v107;
  unint64_t v108;
  uint64_t v109;
  _BYTE v110[88];
  NSObject *v111;
  uint64_t v112;
  unsigned int v113;
  _QWORD v114[7];
  unsigned __int8 v115;
  id v116;
  _BYTE v117[16];
  uint64_t v118;

  v3 = v2;
  v4 = type metadata accessor for DispatchPredicate(0, a2);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v3 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_isolationQueue);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_50:
    swift_once(&qword_10008B9F0, sub_100035150);
LABEL_4:
    v10 = type metadata accessor for Logger(0);
    v11 = sub_100014D70(v10, (uint64_t)qword_100090B98);
    v15 = Logger.logObject.getter(v11, v12, v13, v14);
    v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      v18 = "GeneralMapsStateCollector: skipped collectMapsActivityCamera (state collection cancelled)";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v15, v16, v18, v17, 2u);
      swift_slowDealloc(v17, -1, -1);
      goto LABEL_12;
    }
    goto LABEL_12;
  }
  if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_cancelled) & 1) != 0)
  {
    if (qword_10008B9F0 == -1)
      goto LABEL_4;
    goto LABEL_50;
  }
  sub_1000071E0((uint64_t)v110);
  sub_100014EC4((uint64_t)v110);
  sub_10001565C((uint64_t)v110, (uint64_t)v117, &qword_10008BF28);
  sub_10001565C((uint64_t)v117, (uint64_t)&v118, &qword_10008BF28);
  if (!v118)
  {
    v24 = objc_allocWithZone((Class)NSUserDefaults);
    v25 = String._bridgeToObjectiveC()();
    v26 = objc_msgSend(v24, "initWithSuiteName:", v25);

    if (!v26
      || (v15 = v26,
          v27 = String._bridgeToObjectiveC()(),
          v28 = -[NSObject dataForKey:](v15, "dataForKey:", v27),
          v15,
          v27,
          !v28))
    {
      if (qword_10008B9F0 != -1)
        swift_once(&qword_10008B9F0, sub_100035150);
      v54 = type metadata accessor for Logger(0);
      v55 = sub_100014D70(v54, (uint64_t)qword_100090B98);
      v15 = Logger.logObject.getter(v55, v56, v57, v58);
      v59 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v15, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v60 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v59, "GeneralMapsStateCollector: collectMapsActivityCamera found no MapsLastActivityCamera in defaults", v60, 2u);
        swift_slowDealloc(v60, -1, -1);

      }
      else
      {

        v15 = v26;
      }
      goto LABEL_12;
    }
    v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v31 = v30;

    v32 = objc_allocWithZone((Class)GEOURLCamera);
    sub_1000155CC(v29, v31);
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100015610(v29, v31);
    v34 = objc_msgSend(v32, "initWithData:", isa);

    if (v34)
    {
      v35 = v34;
      if (objc_msgSend(v35, "hasLatitude")
        && objc_msgSend(v35, "hasLongitude")
        && objc_msgSend(v35, "hasAltitude"))
      {
        objc_msgSend(v35, "latitude");
        v37 = v36;
        objc_msgSend(v35, "longitude");
        if (v38 >= -180.0 && v38 <= 180.0 && v37 >= -90.0 && v37 <= 90.0)
        {
          if (qword_10008B9F0 != -1)
            swift_once(&qword_10008B9F0, sub_100035150);
          v109 = v29;
          v39 = type metadata accessor for Logger(0);
          sub_100014D70(v39, (uint64_t)qword_100090B98);
          v40 = v35;
          v44 = Logger.logObject.getter(v40, v41, v42, v43);
          v45 = static os_log_type_t.info.getter();
          v46 = os_log_type_enabled(v44, v45);
          v108 = v31;
          if (v46)
          {
            v47 = (uint8_t *)swift_slowAlloc(12, -1);
            v106 = (_QWORD *)swift_slowAlloc(8, -1);
            v107 = v47;
            *(_DWORD *)v47 = 138477827;
            v48 = v47 + 4;
            v111 = v40;
            v49 = v40;
            v50 = v40;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v48);
            v51 = v106;
            *v106 = v34;

            v40 = v49;
            v52 = v107;
            _os_log_impl((void *)&_mh_execute_header, v44, v45, "GeneralMapsStateCollector: collectMapsActivityCamera found valid camera (%{private}@)", v107, 0xCu);
            v53 = sub_1000027AC(&qword_10008C020);
            swift_arrayDestroy(v51, 1, v53);
            swift_slowDealloc(v51, -1, -1);
            swift_slowDealloc(v52, -1, -1);
          }
          else
          {

            v44 = v40;
          }

          v107 = v40;
          sub_1000071E0((uint64_t)&v111);
          LODWORD(v106) = v115;
          v84 = v114[4];
          v105 = v114[5];
          v104 = v114[6];
          v85 = v114[2];
          v86 = v114[3];
          v87 = v114[1];
          v88 = v113;
          v89 = v111;
          v90 = v112;
          sub_10001565C((uint64_t)v114, (uint64_t)&v116, &qword_10008C000);
          sub_100015938(&v116);
          v91 = v3 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state;
          v92 = *(_QWORD *)(v3 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state);
          v93 = *(_QWORD *)(v3
                          + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                          + 8);
          v94 = *(_QWORD *)(v3
                          + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                          + 16);
          v95 = *(void **)(v3
                         + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                         + 24);
          v96 = *(_QWORD *)(v3
                          + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                          + 32);
          v97 = *(_QWORD *)(v3
                          + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                          + 40);
          v98 = *(_QWORD *)(v3
                          + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                          + 48);
          v99 = *(void **)(v3
                         + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                         + 56);
          v100 = *(_QWORD *)(v3
                           + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                           + 64);
          v101 = *(_QWORD *)(v3
                           + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                           + 72);
          *(_QWORD *)v91 = v89;
          *(_QWORD *)(v91 + 8) = v90;
          *(_QWORD *)(v91 + 16) = v88;
          *(_QWORD *)(v91 + 24) = v34;
          *(_QWORD *)(v91 + 32) = v87;
          *(_QWORD *)(v91 + 40) = v85;
          *(_QWORD *)(v91 + 48) = v86;
          *(_QWORD *)(v91 + 56) = v84;
          v102 = v104;
          *(_QWORD *)(v91 + 64) = v105;
          *(_QWORD *)(v91 + 72) = v102;
          *(_BYTE *)(v91 + 80) = (_BYTE)v106;
          sub_100014F38(v92, v93, v94, v95, v96, v97, v98, v99, v100, v101);

          sub_100015610(v109, v108);
          v15 = v107;

          goto LABEL_12;
        }
        if (qword_10008B9F0 != -1)
          swift_once(&qword_10008B9F0, sub_100035150);
        v72 = type metadata accessor for Logger(0);
        sub_100014D70(v72, (uint64_t)qword_100090B98);
        v62 = v35;
        v76 = (uint8_t *)Logger.logObject.getter(v62, v73, v74, v75);
        v77 = static os_log_type_t.error.getter();
        if (os_log_type_enabled((os_log_t)v76, v77))
        {
          v107 = v76;
          v78 = swift_slowAlloc(12, -1);
          v109 = v29;
          v79 = (uint8_t *)v78;
          v80 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v79 = 138477827;
          v111 = v62;
          v81 = v62;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v79 + 4);
          *v80 = v34;

          v82 = v107;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v107, v77, "GeneralMapsStateCollector: collectMapsActivityCamera camera (%{private}@) invalid coordinate", v79, 0xCu);
          v83 = sub_1000027AC(&qword_10008C020);
          swift_arrayDestroy(v80, 1, v83);
          swift_slowDealloc(v80, -1, -1);
          swift_slowDealloc(v79, -1, -1);

          sub_100015610(v109, v31);
          goto LABEL_12;
        }

        sub_100015610(v29, v31);
LABEL_39:

        v15 = v62;
        goto LABEL_12;
      }

    }
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v61 = type metadata accessor for Logger(0);
    sub_100014D70(v61, (uint64_t)qword_100090B98);
    v62 = v34;
    v66 = Logger.logObject.getter(v62, v63, v64, v65);
    v67 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v66, v67))
    {
      v109 = v29;
      v108 = v31;
      v68 = (uint8_t *)swift_slowAlloc(12, -1);
      v69 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v68 = 138477827;
      if (v34)
      {
        v111 = v62;
        v70 = v62;
      }
      else
      {
        v111 = 0;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v68 + 4);
      *v69 = v34;

      _os_log_impl((void *)&_mh_execute_header, v66, v67, "GeneralMapsStateCollector: collectMapsActivityCamera camera (%{private}@) missing data", v68, 0xCu);
      v71 = sub_1000027AC(&qword_10008C020);
      swift_arrayDestroy(v69, 1, v71);
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v68, -1, -1);

      sub_100015610(v109, v108);
      goto LABEL_12;
    }

    sub_100015610(v29, v31);
    goto LABEL_39;
  }
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_100014D70(v19, (uint64_t)qword_100090B98);
  v15 = Logger.logObject.getter(v20, v21, v22, v23);
  v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    v18 = "GeneralMapsStateCollector: collectMapsActivityCamera had location info";
    goto LABEL_11;
  }
LABEL_12:

}

void sub_10000CFC0(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  id v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  id v59;
  id v60;
  id v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  id v71;
  char v72;
  void *v73;
  id v74;
  double v75;
  double v76;
  double v77;
  id v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  char *v86;
  uint64_t v87;
  id v88;
  void *v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  id v95;
  int *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  char *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void **v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  double Double;
  char *v130;
  double v131;
  _QWORD *v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  id v138;
  double v139;
  double v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  void **v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  NSObject *v166;
  os_log_type_t v167;
  _BOOL4 v168;
  uint64_t v169;
  void *v170;
  uint8_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  NSObject *v179;
  os_log_type_t v180;
  uint8_t *v181;
  void **v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  int *v187;
  NSString v188;
  id v189;
  int v190;
  uint64_t v191;
  char *v192;
  NSString v193;
  void **v194;
  uint64_t Integer;
  char *v196;
  char v197;
  uint64_t v198;
  void (*v199)(char *, uint64_t);
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  NSObject *v205;
  os_log_type_t v206;
  _BOOL4 v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char v214;
  uint64_t v215;
  char *v216;
  Class isa;
  NSString v218;
  NSString v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  NSObject *v225;
  os_log_type_t v226;
  uint64_t v227;
  uint8_t *v228;
  uint8_t *v229;
  id v230;
  uint64_t v231;
  char *v232;
  void *v233;
  id v234;
  void *v235;
  _QWORD *v236;
  void (*v237)(char *, char *, uint64_t);
  char *v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  void *v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  id v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  NSObject *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  os_log_type_t v259;
  uint64_t v260;
  char *v261;
  double v262;
  void (*v263)(char *, uint64_t);
  uint64_t v264;
  uint64_t v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  os_log_type_t v272;
  uint8_t *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  NSObject *v284;
  uint64_t v285;
  void **v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  void **v290;
  __CFString *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  uint64_t v301;
  __CFString *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  NSObject *v307;
  os_log_type_t v308;
  _BOOL4 v309;
  uint8_t *v310;
  const char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  _BOOL4 v316;
  __CFString *v317;
  __CFString *v318;
  __CFString *v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  __CFString *v323;
  __CFString *v324;
  __CFString *v325;
  __CFString *v326;
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  NSObject *v336;
  os_log_type_t v337;
  uint64_t v338;
  int *v339;
  uint64_t *v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t *v344;
  uint64_t v345;
  unint64_t v346;
  void **v347;
  __CFString *v348;
  __CFString *v349;
  __CFString *v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  __CFString *v354;
  __CFString *v355;
  __CFString *v356;
  __CFString *v357;
  uint64_t v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  char *v364;
  char *v365;
  id v366;
  uint64_t v367;
  uint64_t v368;
  char *v369;
  void *v370;
  uint64_t v371;
  char *v372;
  uint64_t v373;
  void **v374;
  void **v375;
  char *v376;
  uint64_t v377;
  uint64_t v378;
  char *v379;
  char *v380;
  char *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  char *v386;
  int *v387;
  uint64_t v388;
  char *v389;
  uint64_t v390;
  char *v391;
  uint64_t v392;
  _QWORD *v393;
  uint64_t v394;
  uint64_t v395;
  void **v396;
  void **v397;
  _QWORD v398[4];
  _BYTE v399[16];
  int v400;
  _QWORD v401[11];
  _BYTE v402[24];
  uint64_t v403;
  _DWORD v404[22];
  void **aBlock;
  uint64_t v406;
  uint64_t (*v407)(uint64_t, uint64_t, void *);
  void *v408;
  double (*v409)(uint64_t, uint64_t);
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  char *v414;
  unsigned __int8 v415;
  id v416;
  _BYTE v417[16];
  uint64_t v418;
  id v419[2];

  v2 = v1;
  v377 = a1;
  v3 = type metadata accessor for Calendar(0);
  v382 = *(_QWORD *)(v3 - 8);
  v383 = v3;
  __chkstk_darwin(v3);
  v386 = (char *)&v363 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000027AC(&qword_10008BF20);
  __chkstk_darwin(v5);
  v381 = (char *)&v363 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v384 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v363 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v372 = (char *)&v363 - v12;
  __chkstk_darwin(v11);
  v369 = (char *)&v363 - v13;
  v387 = (int *)type metadata accessor for GeneralMapsStateCollector.NearbyCategorySnapshot(0);
  v375 = (void **)*((_QWORD *)v387 - 1);
  v14 = __chkstk_darwin(v387);
  v371 = (uint64_t)&v363 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v368 = (uint64_t)&v363 - v17;
  v18 = __chkstk_darwin(v16);
  v367 = (uint64_t)&v363 - v19;
  v20 = __chkstk_darwin(v18);
  v374 = (void **)((char *)&v363 - v21);
  __chkstk_darwin(v20);
  v378 = (uint64_t)&v363 - v22;
  v23 = type metadata accessor for Date(0);
  v393 = *(_QWORD **)(v23 - 8);
  v24 = __chkstk_darwin(v23);
  v379 = (char *)&v363 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v389 = (char *)&v363 - v27;
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v363 - v29;
  v31 = __chkstk_darwin(v28);
  v376 = (char *)&v363 - v32;
  v373 = v33;
  __chkstk_darwin(v31);
  v391 = (char *)&v363 - v34;
  v36 = type metadata accessor for DispatchPredicate(0, v35);
  v37 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v39 = (uint64_t *)((char *)&v363 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = *(void **)&v2[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_isolationQueue];
  *v39 = v40;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v37 + 104))(v39, enum case for DispatchPredicate.onQueue(_:), v36);
  v41 = v40;
  LOBYTE(v40) = _dispatchPreconditionTest(_:)(v39);
  (*(void (**)(_QWORD *, uint64_t))(v37 + 8))(v39, v36);
  if ((v40 & 1) == 0)
  {
    __break(1u);
LABEL_153:
    swift_once(&qword_10008B9F0, sub_100035150);
LABEL_4:
    v42 = sub_100014D70(v7, (uint64_t)qword_100090B98);
    v46 = Logger.logObject.getter(v42, v43, v44, v45);
    v47 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "GeneralMapsStateCollector: skipped collectNearbyCategories (state collection cancelled)", v48, 2u);
      swift_slowDealloc(v48, -1, -1);
    }
    goto LABEL_6;
  }
  if ((v2[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_cancelled] & 1) != 0)
  {
    if (qword_10008B9F0 == -1)
      goto LABEL_4;
    goto LABEL_153;
  }
  v49 = objc_msgSend((id)objc_opt_self(GEOMapService), "sharedService");
  if (!v49)
  {
    __break(1u);
    goto LABEL_158;
  }
  v50 = v49;
  v365 = v10;
  v385 = v30;
  v392 = v23;
  v388 = v7;
  v51 = objc_msgSend(v49, "defaultTraits");

  if (!v51)
  {
LABEL_158:
    __break(1u);
    goto LABEL_159;
  }
  v390 = swift_allocObject(&unk_100081EA0, 17, 7);
  objc_msgSend(v51, "setIsWidgetRequest:", 1);
  sub_1000071E0((uint64_t)v399);
  sub_100014EC4((uint64_t)v399);
  if ((v400 - 1) < 3)
    v52 = (v400 + 1);
  else
    v52 = 1;
  objc_msgSend(v51, "setMode:", v52);
  sub_1000071E0((uint64_t)v401);
  sub_10001565C((uint64_t)v401, (uint64_t)v417, &qword_10008BF28);
  v370 = (void *)v401[0];
  v54 = (void *)v401[3];
  v53 = v401[4];
  v55 = v401[5];
  v56 = v401[6];
  v57 = (void *)v401[7];
  v58 = v401[9];
  sub_10001565C((uint64_t)v417, (uint64_t)&v418, &qword_10008BF28);
  v380 = v2;
  if (v418)
  {
    swift_bridgeObjectRelease(v56);

    swift_bridgeObjectRelease(v53);
    swift_bridgeObjectRelease(v55);

    swift_bridgeObjectRelease(v58);
    v59 = objc_allocWithZone((Class)GEOLocation);
    v60 = v370;
    v61 = objc_msgSend(v59, "initWithCLLocation:", v370);
    objc_msgSend(v51, "setDeviceLocation:", v61);

    objc_msgSend(v60, "coordinate");
    v64 = MKMapRectMakeWithRadialDistance(v62, v63, 5000.0);
    v67 = nullsub_1(v64, v65, v66);
    v71 = objc_msgSend(objc_allocWithZone((Class)GEOMapRegion), "initWithMapRect:", v67, v68, v69, v70);
    objc_msgSend(v51, "setMapRegion:", v71);

    v72 = 0;
    goto LABEL_16;
  }
  v73 = v51;
  sub_100014EC4((uint64_t)v401);
  sub_1000071E0((uint64_t)v402);
  sub_10001565C((uint64_t)&v403, (uint64_t)&v416, &qword_10008C000);
  sub_100015464(&v416);
  sub_100014EC4((uint64_t)v402);
  sub_10001565C((uint64_t)&v416, (uint64_t)v419, &qword_10008C000);
  v74 = v419[0];
  if (v419[0])
  {
    objc_msgSend(v419[0], "latitude");
    v76 = v75;
    objc_msgSend(v74, "longitude");
    v78 = objc_msgSend(objc_allocWithZone((Class)GEOLocation), "initWithLatitude:longitude:", v76, v77);
    objc_msgSend(v51, "setDeviceLocation:", v78);

    v79 = sub_10002CF5C();
    v82 = nullsub_1(v79, v80, v81);
    v60 = objc_msgSend(objc_allocWithZone((Class)GEOMapRegion), "initWithMapRect:", v82, v83, v84, v85);
    objc_msgSend(v51, "setMapRegion:", v60);
    sub_100015938(&v416);
    v72 = 1;
LABEL_16:
    v86 = (char *)(v390 + 16);

    *v86 = v72;
    Date.init()(v87);
    v88 = objc_msgSend((id)objc_opt_self(GEOCountryConfiguration), "sharedConfiguration");
    if (v88)
    {
      v89 = v88;
      v90 = objc_msgSend(v88, "countryCode");

      if (v90)
      {
        v364 = v86;
        v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
        v93 = v92;

        v366 = v51;
        v94 = objc_msgSend(v51, "deviceLocation");
        if (v94)
        {
          v95 = v94;
          v96 = v387;
          v97 = swift_allocBox(v387);
          v99 = v98;
          v100 = GEOGetUserPreferredTransportType();
          sub_1000071E0((uint64_t)v404);
          sub_100014EC4((uint64_t)v404);
          v101 = v404[4];
          v102 = v391;
          v391 = (char *)v393[4];
          ((void (*)(uint64_t, char *, uint64_t))v391)(v99, v102, v392);
          v103 = (uint64_t *)(v99 + v96[5]);
          *v103 = v91;
          v103[1] = v93;
          v104 = v96[6];
          *(_QWORD *)(v99 + v104) = v95;
          v105 = v96[7];
          *(_DWORD *)(v99 + v105) = v100;
          v106 = v96[8];
          *(_DWORD *)(v99 + v106) = v101;
          v107 = v96[9];
          v363 = v99;
          *(_QWORD *)(v99 + v107) = 0;
          if (qword_10008B968 != -1)
            swift_once(&qword_10008B968, sub_1000074A0);
          v108 = v364;
          v109 = *v364;
          swift_beginAccess(&off_10008BDA8, &aBlock, 32, 0);
          v110 = off_10008BDA8;
          v111 = *((_QWORD *)off_10008BDA8 + 2);
          v370 = (void *)v97;
          if (v111 && (v112 = v97, v113 = sub_10005CC88(v109), (v114 & 1) != 0))
          {
            v115 = v110[7];
            v116 = (uint64_t)v374;
            sub_100015374(v115 + (_QWORD)v375[9] * v113, (uint64_t)v374);
            v117 = v116;
            v118 = v378;
            sub_1000153B8(v117, v378);
            swift_endAccess(&aBlock);
            v119 = *(void ***)(v118 + v387[9]);
            if (v119)
            {
              if (*(_DWORD *)(v363 + v105) == *(_DWORD *)(v118 + v387[7]))
              {
                v120 = v392;
                v121 = v393;
                if (*(_DWORD *)(v363 + v106) == *(_DWORD *)(v118 + v387[8]))
                {
                  v122 = v363;
                  v123 = v118;
                  v124 = MapsConfig_GeneralMapsWidgetNearbyCategoryCacheMaxAgeTimeInterval;
                  v125 = off_10008F118;
                  v375 = v119;
                  swift_bridgeObjectRetain(v119);
                  v126 = v125;
                  v127 = v123;
                  v128 = v122;
                  Double = GEOConfigGetDouble(v124, v126);
                  v130 = v376;
                  ((void (*)(char *, uint64_t, uint64_t))v121[2])(v376, v122, v120);
                  v131 = Date.timeIntervalSince(_:)(v127);
                  ((void (*)(char *, uint64_t))v121[1])(v130, v120);
                  if (v131 >= Double)
                  {
                    swift_bridgeObjectRelease(v375);
                    if (qword_10008B9F0 != -1)
                      swift_once(&qword_10008B9F0, sub_100035150);
                    v303 = sub_100014D70(v388, (uint64_t)qword_100090B98);
                    v307 = Logger.logObject.getter(v303, v304, v305, v306);
                    v308 = static os_log_type_t.info.getter();
                    v309 = os_log_type_enabled(v307, v308);
                    v186 = (uint64_t)v381;
                    if (!v309)
                      goto LABEL_106;
                    v310 = (uint8_t *)swift_slowAlloc(2, -1);
                    *(_WORD *)v310 = 0;
                    v311 = "GeneralMapsStateCollector: collectNearbyCategories will not use cache: snapshot has expired";
LABEL_105:
                    _os_log_impl((void *)&_mh_execute_header, v307, v308, v311, v310, 2u);
                    swift_slowDealloc(v310, -1, -1);
LABEL_106:

                    sub_1000153FC(v378);
LABEL_45:
                    v187 = (int *)objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
                    v188 = String._bridgeToObjectiveC()();
                    v189 = objc_msgSend(v187, "objectForKey:", v188);

                    if (v189)
                    {
                      _bridgeAnyObjectToAny(_:)(v398, v189);
                      swift_unknownObjectRelease(v189);
                    }
                    else
                    {
                      memset(v398, 0, sizeof(v398));
                    }
                    sub_10001565C((uint64_t)v398, (uint64_t)&aBlock, &qword_10008BF30);
                    if (v408)
                    {
                      v190 = swift_dynamicCast(v186, &aBlock, (char *)&type metadata for Any + 8, v120, 6);
                      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v121[7])(v186, v190 ^ 1u, 1, v120);
                      v191 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v121[6])(v186, 1, v120);
                      if ((_DWORD)v191 != 1)
                      {
                        v192 = v385;
                        ((void (*)(char *, uint64_t, uint64_t))v391)(v385, v186, v120);
LABEL_53:
                        v193 = String._bridgeToObjectiveC()();
                        v194 = (void **)objc_msgSend(v187, "integerForKey:", v193);

                        v397 = v194;
                        Integer = GEOConfigGetInteger(MapsConfig_GeneralMapsWidgetMaximumNearbyCategoryRequestsPerDay, off_10008F158);
                        v196 = v386;
                        ((void (*)(void))static Calendar.current.getter)();
                        v197 = Calendar.isDateInToday(_:)(v192);
                        v198 = v383;
                        v199 = *(void (**)(char *, uint64_t))(v382 + 8);
                        v199(v196, v383);
                        if ((v197 & 1) != 0 && (uint64_t)v397 >= Integer)
                        {
                          v200 = v393;
                          if (qword_10008B9F0 != -1)
                            swift_once(&qword_10008B9F0, sub_100035150);
                          v201 = sub_100014D70(v388, (uint64_t)qword_100090B98);
                          v205 = Logger.logObject.getter(v201, v202, v203, v204);
                          v206 = static os_log_type_t.info.getter();
                          v207 = os_log_type_enabled(v205, v206);
                          v208 = v390;
                          if (v207)
                          {
                            v209 = swift_slowAlloc(22, -1);
                            *(_DWORD *)v209 = 134349312;
                            swift_beginAccess(&v397, &aBlock, 0, 0);
                            v398[0] = v397;
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(v398, &v398[1], v209 + 4);
                            *(_WORD *)(v209 + 12) = 2050;
                            v398[0] = Integer;
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(v398, &v398[1], v209 + 14);
                            _os_log_impl((void *)&_mh_execute_header, v205, v206, "GeneralMapsStateCollector: collectNearbyCategories will not fetch categories: already issued %{public}ld requests (of daily maximum: %{public}ld)", (uint8_t *)v209, 0x16u);
                            swift_slowDealloc(v209, -1, -1);
                          }

                          ((void (*)(char *, uint64_t))v200[1])(v385, v392);
                          v210 = v208;
LABEL_78:
                          swift_release(v210);
                          v266 = v370;
LABEL_79:
                          swift_release(v266);
                          return;
                        }
                        dispatch_group_enter(*(dispatch_group_t *)&v380[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_collectorGroup]);
                        v212 = Date.init()(v211);
                        v213 = v386;
                        static Calendar.current.getter(v212);
                        v214 = Calendar.isDateInToday(_:)(v385);
                        v199(v213, v198);
                        if ((v214 & 1) != 0)
                        {
                          v215 = (uint64_t)v397 + 1;
                          v216 = v379;
                          if (!__OFADD__(v397, 1))
                            goto LABEL_65;
                          __break(1u);
                        }
                        v215 = 1;
                        v216 = v379;
LABEL_65:
                        v397 = (void **)v215;
                        isa = Date._bridgeToObjectiveC()().super.isa;
                        v218 = String._bridgeToObjectiveC()();
                        objc_msgSend(v187, "setObject:forKey:", isa, v218);

                        v219 = String._bridgeToObjectiveC()();
                        objc_msgSend(v187, "setInteger:forKey:", v215, v219);

                        if (qword_10008B9F0 != -1)
                          swift_once(&qword_10008B9F0, sub_100035150);
                        v220 = v388;
                        v221 = sub_100014D70(v388, (uint64_t)qword_100090B98);
                        v225 = Logger.logObject.getter(v221, v222, v223, v224);
                        v226 = static os_log_type_t.info.getter();
                        if (os_log_type_enabled(v225, v226))
                        {
                          v227 = v221;
                          v228 = (uint8_t *)swift_slowAlloc(12, -1);
                          *(_DWORD *)v228 = 134349056;
                          swift_beginAccess(&v397, v398, 0, 0);
                          aBlock = v397;
                          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v406, v228 + 4);
                          _os_log_impl((void *)&_mh_execute_header, v225, v226, "GeneralMapsStateCollector: collectNearbyCategories BEGIN (daily request number %{public}ld)", v228, 0xCu);
                          v229 = v228;
                          v221 = v227;
                          swift_slowDealloc(v229, -1, -1);
                        }

                        v230 = objc_msgSend((id)objc_opt_self(MKMapService), "sharedService");
                        v231 = v392;
                        v232 = v389;
                        if (v230)
                        {
                          v233 = v230;
                          v234 = objc_msgSend(v230, "ticketForCategoryListWithTraits:isFromNoQueryState:", v366, 0);

                          v235 = v380;
                          sub_10001022C(v377, (uint64_t)v234);
                          if (v234)
                          {
                            v236 = v393;
                            v237 = (void (*)(char *, char *, uint64_t))v393[2];
                            v387 = v187;
                            v238 = v376;
                            v237(v376, v232, v231);
                            v239 = *((unsigned __int8 *)v236 + 80);
                            v386 = (char *)v221;
                            v240 = (v239 + 24) & ~v239;
                            v241 = (v373 + v240 + 7) & 0xFFFFFFFFFFFFFFF8;
                            v242 = (v241 + 15) & 0xFFFFFFFFFFFFFFF8;
                            v243 = swift_allocObject(&unk_100081EC8, v242 + 8, v239 | 7);
                            *(_QWORD *)(v243 + 16) = v235;
                            ((void (*)(uint64_t, char *, uint64_t))v391)(v243 + v240, v238, v392);
                            v244 = v370;
                            *(_QWORD *)(v243 + v241) = v370;
                            v232 = v389;
                            v245 = v390;
                            *(_QWORD *)(v243 + v242) = v390;
                            v231 = v392;
                            v409 = sub_100015304;
                            v410 = v243;
                            aBlock = _NSConcreteStackBlock;
                            v406 = 1107296256;
                            v407 = sub_1000101A8;
                            v408 = &unk_100081EE0;
                            v246 = _Block_copy(&aBlock);
                            v247 = v410;
                            v187 = v387;
                            swift_retain(v244);
                            v248 = v245;
                            v220 = v388;
                            swift_retain(v248);
                            swift_unknownObjectRetain(v234);
                            v249 = v235;
                            v250 = v247;
                            v221 = (uint64_t)v386;
                            objc_msgSend(v234, "submitWithHandler:networkActivity:", v246, 0, swift_release(v250).n128_f64[0]);
                            swift_unknownObjectRelease(v234);
                            _Block_release(v246);
                          }
                          v216 = v379;
                        }
                        else
                        {
                          sub_10001022C(v377, 0);
                          v234 = 0;
                        }
                        (*(void (**)(char *, uint64_t, uint64_t))(v384 + 16))(v365, v221, v220);
                        v251 = ((uint64_t (*)(char *, char *, uint64_t))v393[2])(v216, v232, v231);
                        v255 = Logger.logObject.getter(v251, v252, v253, v254);
                        v259 = static os_log_type_t.debug.getter(v255, v256, v257, v258);
                        if (os_log_type_enabled(v255, v259))
                        {
                          v260 = swift_slowAlloc(22, -1);
                          *(_DWORD *)v260 = 134349312;
                          v261 = v376;
                          Date.init()(v260);
                          v262 = Date.timeIntervalSince(_:)(v216);
                          v263 = (void (*)(char *, uint64_t))v393[1];
                          v263(v261, v392);
                          aBlock = *(void ***)&v262;
                          v231 = v392;
                          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v406, v260 + 4);
                          v263(v216, v231);
                          *(_WORD *)(v260 + 12) = 2050;
                          swift_beginAccess(&v397, &aBlock, 0, 0);
                          v396 = v397;
                          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v396, &v397, v260 + 14);
                          _os_log_impl((void *)&_mh_execute_header, v255, v259, "GeneralMapsStateCollector: collectNearbyCategories blocked caller for %{public}f seconds, request %{public}ld", (uint8_t *)v260, 0x16u);
                          v264 = v260;
                          v232 = v389;
                          swift_slowDealloc(v264, -1, -1);
                          swift_unknownObjectRelease(v234);

                        }
                        else
                        {

                          v263 = (void (*)(char *, uint64_t))v393[1];
                          v263(v216, v231);
                          swift_unknownObjectRelease(v234);
                        }
                        v265 = v390;
                        (*(void (**)(char *, uint64_t))(v384 + 8))(v365, v388);
                        v263(v232, v231);
                        v263(v385, v231);
                        v210 = v265;
                        goto LABEL_78;
                      }
                    }
                    else
                    {
                      sub_100015590((uint64_t)&aBlock, &qword_10008BF30);
                      v191 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v121[7])(v186, 1, 1, v120);
                    }
                    v192 = v385;
                    Date.init()(v191);
                    sub_100015590(v186, &qword_10008BF20);
                    goto LABEL_53;
                  }
                  v132 = (_QWORD *)(v127 + v387[5]);
                  if (*v103 == *v132 && v103[1] == v132[1] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    v133 = GEOConfigGetDouble(MapsConfig_GeneralMapsWidgetNearbyCategoryCacheMaxDistanceInMeters, off_10008F128);
                    objc_msgSend(*(id *)(v122 + v104), "coordinate");
                    v135 = v134;
                    v137 = v136;
                    v138 = objc_msgSend(*(id *)(v127 + v387[6]), "coordinate");
                    if (j__GEOCalculateDistance(v138, v135, v137, v139, v140) < v133)
                    {
                      v141 = (uint64_t)v375;
                      swift_bridgeObjectRetain(v375);
                      v142 = v380;
                      sub_1000071E0((uint64_t)&aBlock);
                      LODWORD(v393) = v415;
                      v143 = v412;
                      v391 = v414;
                      v392 = v413;
                      v145 = v410;
                      v144 = v411;
                      v146 = v408;
                      v147 = v407;
                      v148 = aBlock;
                      v149 = v406;
                      sub_10001565C((uint64_t)&v409, (uint64_t)v398, &qword_10008BFF8);
                      sub_10001543C(v398);
                      v150 = &v142[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state];
                      v151 = *(_QWORD *)&v142[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state];
                      v152 = *(_QWORD *)&v142[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                                            + 8];
                      v153 = *(_QWORD *)&v142[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                                            + 16];
                      v154 = *(void **)&v142[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                                           + 24];
                      v155 = *(_QWORD *)&v142[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                                            + 32];
                      v156 = *(_QWORD *)&v142[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                                            + 40];
                      v157 = *(_QWORD *)&v142[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                                            + 48];
                      v158 = *(void **)&v142[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                                           + 56];
                      v159 = *(_QWORD *)&v142[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                                            + 64];
                      v160 = *(_QWORD *)&v142[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state
                                            + 72];
                      *(_QWORD *)v150 = v148;
                      *((_QWORD *)v150 + 1) = v149;
                      *((_QWORD *)v150 + 2) = v147;
                      *((_QWORD *)v150 + 3) = v146;
                      *((_QWORD *)v150 + 4) = v141;
                      *((_QWORD *)v150 + 5) = v145;
                      *((_QWORD *)v150 + 6) = v144;
                      *((_QWORD *)v150 + 7) = v143;
                      v161 = v391;
                      *((_QWORD *)v150 + 8) = v392;
                      *((_QWORD *)v150 + 9) = v161;
                      v150[80] = (char)v393;
                      sub_100014F38(v151, v152, v153, v154, v155, v156, v157, v158, v159, v160);
                      if (qword_10008B9F0 != -1)
                        swift_once(&qword_10008B9F0, sub_100035150);
                      sub_100014D70(v388, (uint64_t)qword_100090B98);
                      v162 = swift_bridgeObjectRetain(v141);
                      v166 = Logger.logObject.getter(v162, v163, v164, v165);
                      v167 = static os_log_type_t.info.getter();
                      v168 = os_log_type_enabled(v166, v167);
                      v169 = v390;
                      v170 = v370;
                      if (v168)
                      {
                        v171 = (uint8_t *)swift_slowAlloc(12, -1);
                        *(_DWORD *)v171 = 134349056;
                        v172 = v141;
                        if ((unint64_t)v141 >> 62)
                        {
                          if (v141 >= 0)
                            v141 &= 0xFFFFFFFFFFFFFF8uLL;
                          swift_bridgeObjectRetain(v375);
                          v173 = _CocoaArrayWrapper.endIndex.getter(v141);
                          swift_bridgeObjectRelease(v375);
                          v172 = (uint64_t)v375;
                        }
                        else
                        {
                          v173 = *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10);
                        }
                        swift_bridgeObjectRelease(v172);
                        v394 = v173;
                        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v394, &v395, v171 + 4);
                        swift_bridgeObjectRelease(v172);
                        _os_log_impl((void *)&_mh_execute_header, v166, v167, "GeneralMapsStateCollector: collectNearbyCategories will use %{public}ld categories from cache", v171, 0xCu);
                        swift_slowDealloc(v171, -1, -1);

                      }
                      else
                      {

                        swift_bridgeObjectRelease_n(v141, 2);
                      }
                      sub_1000153FC(v378);
                      swift_release(v169);
                      v266 = v170;
                      goto LABEL_79;
                    }
                    swift_bridgeObjectRelease(v375);
                    if (qword_10008B9F0 != -1)
                      swift_once(&qword_10008B9F0, sub_100035150);
                    v312 = sub_100014D70(v388, (uint64_t)qword_100090B98);
                    v307 = Logger.logObject.getter(v312, v313, v314, v315);
                    v308 = static os_log_type_t.info.getter();
                    v316 = os_log_type_enabled(v307, v308);
                    v186 = (uint64_t)v381;
                    if (!v316)
                      goto LABEL_106;
                    v310 = (uint8_t *)swift_slowAlloc(2, -1);
                    *(_WORD *)v310 = 0;
                    v311 = "GeneralMapsStateCollector: collectNearbyCategories will not use cache: location has changed";
                    goto LABEL_105;
                  }
                  swift_bridgeObjectRelease(v375);
                  if (qword_10008B9F0 != -1)
                    swift_once(&qword_10008B9F0, sub_100035150);
                  sub_100014D70(v388, (uint64_t)qword_100090B98);
                  v330 = v378;
                  v331 = v367;
                  sub_100015374(v378, v367);
                  v332 = swift_retain_n(v112, 2);
                  v336 = Logger.logObject.getter(v332, v333, v334, v335);
                  v337 = static os_log_type_t.info.getter();
                  if (!os_log_type_enabled(v336, v337))
                  {
                    swift_release_n(v112, 2);

                    sub_1000153FC(v331);
                    v362 = v330;
                    goto LABEL_150;
                  }
                  v338 = swift_slowAlloc(22, -1);
                  v375 = (void **)swift_slowAlloc(64, -1);
                  aBlock = v375;
                  *(_DWORD *)v338 = 136380931;
                  v339 = v387;
                  v340 = (uint64_t *)(v331 + v387[5]);
                  v341 = v331;
                  v342 = *v340;
                  v343 = v340[1];
                  swift_bridgeObjectRetain(v343);
                  v398[0] = sub_1000523F0(v342, v343, (uint64_t *)&aBlock);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(v398, &v398[1], v338 + 4);
                  swift_bridgeObjectRelease(v343);
                  sub_1000153FC(v341);
                  *(_WORD *)(v338 + 12) = 2081;
                  swift_beginAccess(v128, &v394, 0, 0);
                  v344 = (uint64_t *)(v128 + v339[5]);
                  v345 = *v344;
                  v346 = v344[1];
                  swift_bridgeObjectRetain(v346);
                  v398[0] = sub_1000523F0(v345, v346, (uint64_t *)&aBlock);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(v398, &v398[1], v338 + 14);
                  swift_release_n(v370, 2);
                  swift_bridgeObjectRelease(v346);
                  _os_log_impl((void *)&_mh_execute_header, v336, v337, "GeneralMapsStateCollector: collectNearbyCategories will not use cache: country code has changed (%{private}s -> %{private}s)", (uint8_t *)v338, 0x16u);
                  v347 = v375;
                  swift_arrayDestroy(v375, 2, (char *)&type metadata for Any + 8);
                  v121 = v393;
                  swift_slowDealloc(v347, -1, -1);
                  swift_slowDealloc(v338, -1, -1);

LABEL_149:
                  v362 = v378;
LABEL_150:
                  sub_1000153FC(v362);
                  v120 = v392;
                  goto LABEL_44;
                }
                if (qword_10008B9F0 != -1)
                  swift_once(&qword_10008B9F0, sub_100035150);
                v274 = v388;
                v292 = sub_100014D70(v388, (uint64_t)qword_100090B98);
                v276 = v384;
                v277 = v369;
                (*(void (**)(char *, uint64_t, uint64_t))(v384 + 16))(v369, v292, v274);
                v278 = v368;
                sub_100015374(v118, v368);
                v279 = v370;
                v293 = swift_retain_n(v370, 2);
                v284 = Logger.logObject.getter(v293, v294, v295, v296);
                LODWORD(v375) = static os_log_type_t.info.getter();
                if (os_log_type_enabled(v284, (os_log_type_t)v375))
                {
                  v297 = swift_slowAlloc(22, -1);
                  v374 = (void **)swift_slowAlloc(64, -1);
                  aBlock = v374;
                  *(_DWORD *)v297 = 136380931;
                  v298 = *(unsigned int *)(v278 + v387[8]);
                  v299 = v278;
                  v300 = v369;
                  v301 = v363;
                  switch((int)v298)
                  {
                    case 0:
                      v302 = CFSTR("Standard");
                      goto LABEL_137;
                    case 1:
                      v302 = CFSTR("Satellite");
                      goto LABEL_137;
                    case 2:
                      v302 = CFSTR("Hybrid");
                      goto LABEL_137;
                    case 3:
                      v302 = CFSTR("Transit");
                      goto LABEL_137;
                    case 4:
                      v302 = CFSTR("Driving");
LABEL_137:
                      v348 = v302;
                      break;
                    default:
                      v302 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v298));
                      v300 = v369;
                      v301 = v363;
                      break;
                  }
                  v349 = v302;
                  if (v349)
                  {
                    v350 = v349;
                    v351 = static String._unconditionallyBridgeFromObjectiveC(_:)(v349);
                    v353 = v352;

                    v398[0] = sub_1000523F0(v351, v353, (uint64_t *)&aBlock);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(v398, &v398[1], v297 + 4);
                    swift_bridgeObjectRelease(v353);
                    sub_1000153FC(v299);
                    *(_WORD *)(v297 + 12) = 2081;
                    swift_beginAccess(v301, &v394, 0, 0);
                    switch(*(_DWORD *)(v301 + v387[8]))
                    {
                      case 0:
                        v354 = CFSTR("Standard");
                        goto LABEL_146;
                      case 1:
                        v354 = CFSTR("Satellite");
                        goto LABEL_146;
                      case 2:
                        v354 = CFSTR("Hybrid");
                        goto LABEL_146;
                      case 3:
                        v354 = CFSTR("Transit");
                        goto LABEL_146;
                      case 4:
                        v354 = CFSTR("Driving");
LABEL_146:
                        v355 = v354;
                        break;
                      default:
                        v354 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), *(unsigned int *)(v301 + v387[8])));
                        break;
                    }
                    v121 = v393;
                    v356 = v354;
                    if (v356)
                    {
                      v357 = v356;
                      v358 = static String._unconditionallyBridgeFromObjectiveC(_:)(v356);
                      v360 = v359;

                      v398[0] = sub_1000523F0(v358, v360, (uint64_t *)&aBlock);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(v398, &v398[1], v297 + 14);
                      swift_release_n(v370, 2);
                      swift_bridgeObjectRelease(v360);
                      _os_log_impl((void *)&_mh_execute_header, v284, (os_log_type_t)v375, "GeneralMapsStateCollector: collectNearbyCategories will not use cache: map type has changed (%{private}s -> %{private}s)", (uint8_t *)v297, 0x16u);
                      v361 = (uint64_t)v374;
                      swift_arrayDestroy(v374, 2, (char *)&type metadata for Any + 8);
                      swift_slowDealloc(v361, -1, -1);
                      swift_slowDealloc(v297, -1, -1);

                      (*(void (**)(char *, uint64_t))(v384 + 8))(v300, v388);
                      goto LABEL_149;
                    }
LABEL_165:
                    swift_release(v370);
                    __break(1u);
                    JUMPOUT(0x10000F1E0);
                  }
LABEL_164:
                  swift_release(v370);
                  __break(1u);
                  goto LABEL_165;
                }
LABEL_96:
                swift_release_n(v279, 2);

                sub_1000153FC(v278);
                (*(void (**)(char *, uint64_t))(v276 + 8))(v277, v274);
                sub_1000153FC(v378);
LABEL_44:
                v186 = (uint64_t)v381;
                goto LABEL_45;
              }
              v274 = v388;
              v120 = v392;
              v121 = v393;
              if (qword_10008B9F0 != -1)
                swift_once(&qword_10008B9F0, sub_100035150);
              v275 = sub_100014D70(v274, (uint64_t)qword_100090B98);
              v276 = v384;
              v277 = v372;
              (*(void (**)(char *, uint64_t, uint64_t))(v384 + 16))(v372, v275, v274);
              v278 = v371;
              sub_100015374(v118, v371);
              v279 = v370;
              v280 = swift_retain_n(v370, 2);
              v284 = Logger.logObject.getter(v280, v281, v282, v283);
              LODWORD(v375) = static os_log_type_t.info.getter();
              if (!os_log_type_enabled(v284, (os_log_type_t)v375))
                goto LABEL_96;
              v285 = swift_slowAlloc(22, -1);
              v286 = (void **)swift_slowAlloc(64, -1);
              aBlock = v286;
              *(_DWORD *)v285 = 136380931;
              v287 = *(unsigned int *)(v278 + v387[7]);
              v288 = v278;
              v289 = v363;
              switch((int)v287)
              {
                case 0:
                  v290 = v286;
                  v291 = CFSTR("PREFERRED_TRANSPORT_TYPE_NONE");
                  goto LABEL_113;
                case 1:
                  v290 = v286;
                  v291 = CFSTR("PREFERRED_TRANSPORT_TYPE_DRIVING");
                  goto LABEL_113;
                case 2:
                  v290 = v286;
                  v291 = CFSTR("PREFERRED_TRANSPORT_TYPE_WALKING");
                  goto LABEL_113;
                case 3:
                  v290 = v286;
                  v291 = CFSTR("PREFERRED_TRANSPORT_TYPE_TRANSIT");
                  goto LABEL_113;
                case 4:
                  v290 = v286;
                  v291 = CFSTR("PREFERRED_TRANSPORT_TYPE_RIDESHARE");
                  goto LABEL_113;
                case 5:
                  v290 = v286;
                  v291 = CFSTR("PREFERRED_TRANSPORT_TYPE_CYCLING");
LABEL_113:
                  v317 = v291;
                  break;
                default:
                  v290 = v286;
                  v291 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v287));
                  v289 = v363;
                  break;
              }
              v318 = v291;
              if (v318)
              {
                v319 = v318;
                v320 = static String._unconditionallyBridgeFromObjectiveC(_:)(v318);
                v322 = v321;

                v398[0] = sub_1000523F0(v320, v322, (uint64_t *)&aBlock);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(v398, &v398[1], v285 + 4);
                swift_bridgeObjectRelease(v322);
                sub_1000153FC(v288);
                *(_WORD *)(v285 + 12) = 2081;
                swift_beginAccess(v289, &v394, 0, 0);
                v121 = v393;
                switch(*(_DWORD *)(v289 + v387[7]))
                {
                  case 0:
                    v323 = CFSTR("PREFERRED_TRANSPORT_TYPE_NONE");
                    goto LABEL_123;
                  case 1:
                    v323 = CFSTR("PREFERRED_TRANSPORT_TYPE_DRIVING");
                    goto LABEL_123;
                  case 2:
                    v323 = CFSTR("PREFERRED_TRANSPORT_TYPE_WALKING");
                    goto LABEL_123;
                  case 3:
                    v323 = CFSTR("PREFERRED_TRANSPORT_TYPE_TRANSIT");
                    goto LABEL_123;
                  case 4:
                    v323 = CFSTR("PREFERRED_TRANSPORT_TYPE_RIDESHARE");
                    goto LABEL_123;
                  case 5:
                    v323 = CFSTR("PREFERRED_TRANSPORT_TYPE_CYCLING");
LABEL_123:
                    v324 = v323;
                    break;
                  default:
                    v323 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), *(unsigned int *)(v289 + v387[7])));
                    v121 = v393;
                    break;
                }
                v325 = v323;
                if (v325)
                {
                  v326 = v325;
                  v327 = static String._unconditionallyBridgeFromObjectiveC(_:)(v325);
                  v329 = v328;

                  v398[0] = sub_1000523F0(v327, v329, (uint64_t *)&aBlock);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(v398, &v398[1], v285 + 14);
                  swift_release_n(v370, 2);
                  swift_bridgeObjectRelease(v329);
                  _os_log_impl((void *)&_mh_execute_header, v284, (os_log_type_t)v375, "GeneralMapsStateCollector: collectNearbyCategories will not use cache: preferred transport type has changed (%{private}s -> %{private}s)", (uint8_t *)v285, 0x16u);
                  swift_arrayDestroy(v290, 2, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v290, -1, -1);
                  swift_slowDealloc(v285, -1, -1);

                  (*(void (**)(char *, uint64_t))(v384 + 8))(v372, v388);
                  goto LABEL_149;
                }
                goto LABEL_163;
              }
LABEL_162:
              swift_release(v370);
              __break(1u);
LABEL_163:
              swift_release(v370);
              __break(1u);
              goto LABEL_164;
            }
            sub_1000153FC(v118);
          }
          else
          {
            swift_endAccess(&aBlock);
          }
          v174 = v390;
          if (qword_10008B9F0 != -1)
            swift_once(&qword_10008B9F0, sub_100035150);
          sub_100014D70(v388, (uint64_t)qword_100090B98);
          v175 = swift_retain_n(v174, 2);
          v179 = Logger.logObject.getter(v175, v176, v177, v178);
          v180 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v179, v180))
          {
            v181 = (uint8_t *)swift_slowAlloc(12, -1);
            v182 = (void **)swift_slowAlloc(32, -1);
            aBlock = v182;
            *(_DWORD *)v181 = 136446210;
            swift_beginAccess(v108, &v394, 0, 0);
            LOBYTE(v398[0]) = *(_BYTE *)(v174 + 16);
            v183 = String.init<A>(describing:)(v398, &type metadata for GeneralMapsStateCollector.NearbyCategoryCacheDomain);
            v185 = v184;
            v398[0] = sub_1000523F0(v183, v184, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v398, &v398[1], v181 + 4);
            swift_release_n(v174, 2);
            swift_bridgeObjectRelease(v185);
            _os_log_impl((void *)&_mh_execute_header, v179, v180, "GeneralMapsStateCollector: collectNearbyCategories will not use cache: no cached categories found for domain %{public}s", v181, 0xCu);
            swift_arrayDestroy(v182, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v182, -1, -1);
            swift_slowDealloc(v181, -1, -1);

          }
          else
          {

            swift_release_n(v174, 2);
          }
          v120 = v392;
          v121 = v393;
          goto LABEL_44;
        }
LABEL_161:
        __break(1u);
        goto LABEL_162;
      }
LABEL_160:
      __break(1u);
      goto LABEL_161;
    }
LABEL_159:
    __break(1u);
    goto LABEL_160;
  }
  v267 = v390;
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v268 = sub_100014D70(v388, (uint64_t)qword_100090B98);
  v46 = Logger.logObject.getter(v268, v269, v270, v271);
  v272 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v46, v272))
  {
    v273 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v273 = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, v272, "GeneralMapsStateCollector: collectNearbyCategories had no location or region to work with", v273, 2u);
    swift_slowDealloc(v273, -1, -1);
    swift_release(v267);

LABEL_6:
    return;
  }
  swift_release(v267);

}

double sub_10000F238(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  double result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _QWORD aBlock[5];
  char *v47;

  v36 = a5;
  v37 = a6;
  v35 = a2;
  v41 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v40 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v10 - 8);
  v43 = v10;
  __chkstk_darwin(v10);
  v38 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = *(_QWORD *)&a3[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_isolationQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a4, v12);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 40) & ~v16;
  v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = (char *)swift_allocObject(&unk_100081F18, v19 + 8, v16 | 7);
  *((_QWORD *)v20 + 2) = a3;
  *((_QWORD *)v20 + 3) = a1;
  v21 = v35;
  *((_QWORD *)v20 + 4) = v35;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v20[v17], v15, v12);
  v23 = v36;
  v22 = v37;
  *(_QWORD *)&v20[v18] = v36;
  *(_QWORD *)&v20[v19] = v22;
  aBlock[4] = sub_10001553C;
  v47 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100052B78;
  aBlock[3] = &unk_100081F30;
  v24 = _Block_copy(aBlock);
  v25 = a3;
  swift_bridgeObjectRetain(a1);
  swift_errorRetain(v21);
  swift_retain(v23);
  swift_retain(v22);
  v26 = v38;
  static DispatchQoS.unspecified.getter(v27);
  v45 = &_swiftEmptyArrayStorage;
  v28 = sub_1000150DC();
  v29 = sub_1000027AC((uint64_t *)&unk_10008BF70);
  v30 = sub_100015124();
  v32 = v40;
  v31 = v41;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v29, v30, v41, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v26, v32, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v31);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v26, v43);
  *(_QWORD *)&result = swift_release(v47).n128_u64[0];
  return result;
}

void sub_10000F4D4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  double v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  os_log_type_t v95;
  uint8_t *v96;
  NSObject *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  double v101;
  void (*v102)(char *, uint64_t);
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  os_log_type_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  double v121;
  void (*v122)(char *, uint64_t);
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  _BYTE *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  double v138;
  _BYTE v139[16];
  char v140[24];
  char v141[24];
  uint64_t v142;
  _BYTE v143[16];
  uint64_t v144[2];
  unsigned int v145;
  uint64_t v146;
  _QWORD v147[6];
  unsigned __int8 v148;
  uint64_t v149;

  v134 = a4;
  v11 = sub_1000027AC(&qword_10008C008);
  __chkstk_darwin(v11);
  v13 = (char *)&v123 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = type metadata accessor for Date(0);
  v136 = *(_QWORD *)(v135 - 8);
  v14 = __chkstk_darwin(v135);
  v16 = (char *)&v123 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v133 = (char *)&v123 - v18;
  v19 = __chkstk_darwin(v17);
  v131 = (char *)&v123 - v20;
  __chkstk_darwin(v19);
  v22 = (char *)&v123 - v21;
  v23 = type metadata accessor for GeneralMapsStateCollector.NearbyCategorySnapshot(0);
  v24 = swift_projectBox(a5);
  v25 = OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingNearbyCategoriesCancellation;
  v26 = *(uint64_t *)((char *)&a1->isa
                   + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingNearbyCategoriesCancellation);
  if (v26)
  {
    v27 = swift_retain(v26);
    v137 = a1;
    v132 = v28;
    dispatch thunk of DispatchWorkItem.cancel()(v27);
    v29 = *(uint64_t *)((char *)&v137->isa + v25);
    *(Class *)((char *)&v137->isa + v25) = 0;
    swift_release(v29);
    if (a2 && (v30 = (uint64_t)sub_1000272A8(a2)) != 0)
    {
      v31 = v30;
      v32 = (unint64_t)v30 >> 62;
      if ((unint64_t)v30 >> 62)
      {
        if (v30 < 0)
          v104 = v30;
        else
          v104 = v30 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v30);
        v105 = _CocoaArrayWrapper.endIndex.getter(v104);
        swift_bridgeObjectRelease(v31);
        if (v105)
          goto LABEL_6;
      }
      else if (*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_6:
        v124 = v32;
        v130 = (_BYTE *)(a6 + 16);
        swift_bridgeObjectRetain(v31);
        v33 = v137;
        sub_1000071E0((uint64_t)v144);
        v129 = v148;
        v128 = v147[4];
        v127 = v147[5];
        v126 = v147[3];
        v34 = v147[1];
        v125 = v147[2];
        v35 = v146;
        v36 = v145;
        v38 = v144[0];
        v37 = v144[1];
        sub_10001565C((uint64_t)v147, (uint64_t)&v149, &qword_10008BFF8);
        sub_10001543C(&v149);
        v39 = (char *)v33 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state;
        v40 = *(uint64_t *)((char *)&v33->isa
                         + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state);
        v41 = *(uint64_t *)((char *)&v33[1].isa
                         + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state);
        v42 = *(uint64_t *)((char *)&v33[2].isa
                         + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state);
        v43 = *(Class *)((char *)&v33[3].isa
                       + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state);
        v44 = *(uint64_t *)((char *)&v33[4].isa
                         + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state);
        v45 = *(uint64_t *)((char *)&v33[5].isa
                         + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state);
        v46 = *(uint64_t *)((char *)&v33[6].isa
                         + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state);
        v47 = *(Class *)((char *)&v33[7].isa
                       + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state);
        v48 = *(uint64_t *)((char *)&v33[8].isa
                         + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state);
        v49 = *(uint64_t *)((char *)&v33[9].isa
                         + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state);
        *(_QWORD *)v39 = v38;
        *((_QWORD *)v39 + 1) = v37;
        *((_QWORD *)v39 + 2) = v36;
        *((_QWORD *)v39 + 3) = v35;
        *((_QWORD *)v39 + 4) = v31;
        *((_QWORD *)v39 + 5) = v34;
        v50 = v126;
        *((_QWORD *)v39 + 6) = v125;
        *((_QWORD *)v39 + 7) = v50;
        v51 = v127;
        *((_QWORD *)v39 + 8) = v128;
        *((_QWORD *)v39 + 9) = v51;
        v39[80] = v129;
        sub_100014F38(v40, v41, v42, v43, v44, v45, v46, v47, v48, v49);
        swift_beginAccess(v24, &v142, 1, 0);
        v52 = *(int *)(v23 + 36);
        v53 = *(_QWORD *)(v24 + v52);
        *(_QWORD *)(v24 + v52) = v31;
        swift_bridgeObjectRetain(v31);
        swift_bridgeObjectRelease(v53);
        if (qword_10008B968 != -1)
          swift_once(&qword_10008B968, sub_1000074A0);
        v54 = v130;
        swift_beginAccess(v130, v141, 0, 0);
        LOBYTE(v54) = *v54;
        swift_beginAccess(v24, v140, 0, 0);
        sub_100015374(v24, (uint64_t)v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v13, 0, 1, v23);
        swift_beginAccess(&off_10008BDA8, &v138, 33, 0);
        sub_10000FFE0((uint64_t)v13, (char)v54);
        swift_endAccess(&v138);
        v55 = v135;
        v56 = v131;
        if (qword_10008B9F0 != -1)
          swift_once(&qword_10008B9F0, sub_100035150);
        v57 = type metadata accessor for Logger(0);
        sub_100014D70(v57, (uint64_t)qword_100090B98);
        v58 = v136;
        (*(void (**)(char *, uint64_t, uint64_t))(v136 + 16))(v56, v134, v55);
        v59 = swift_bridgeObjectRetain(v31);
        v63 = Logger.logObject.getter(v59, v60, v61, v62);
        v67 = static os_log_type_t.debug.getter(v63, v64, v65, v66);
        if (os_log_type_enabled(v63, v67))
        {
          v68 = swift_slowAlloc(22, -1);
          *(_DWORD *)v68 = 134349312;
          if (v124)
          {
            if (v31 < 0)
              v98 = v31;
            else
              v98 = v31 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v31);
            v69 = _CocoaArrayWrapper.endIndex.getter(v98);
            swift_bridgeObjectRelease(v31);
          }
          else
          {
            v69 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease(v31);
          v138 = *(double *)&v69;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139, v68 + 4);
          v99 = swift_bridgeObjectRelease(v31);
          *(_WORD *)(v68 + 12) = 2050;
          v100 = v133;
          Date.init()(v99);
          v101 = Date.timeIntervalSince(_:)(v56);
          v102 = *(void (**)(char *, uint64_t))(v58 + 8);
          v102(v100, v55);
          v138 = v101;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139, v68 + 14);
          v102(v56, v55);
          _os_log_impl((void *)&_mh_execute_header, v63, v67, "GeneralMapsStateCollector: collectNearbyCategories END (%{public}ld categories, %{public}f seconds elapsed)", (uint8_t *)v68, 0x16u);
          swift_slowDealloc(v68, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(v31, 2);
          (*(void (**)(char *, uint64_t))(v58 + 8))(v56, v55);
        }
        v103 = v137;

        v97 = *(NSObject **)((char *)&v103->isa
                           + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_collectorGroup);
        goto LABEL_32;
      }
      swift_bridgeObjectRelease(v31);
      if (qword_10008B9F0 != -1)
        swift_once(&qword_10008B9F0, sub_100035150);
      v106 = type metadata accessor for Logger(0);
      sub_100014D70(v106, (uint64_t)qword_100090B98);
      v107 = v136;
      v108 = v135;
      (*(void (**)(char *, uint64_t, uint64_t))(v136 + 16))(v16, v134, v135);
      swift_errorRetain(a3);
      v109 = swift_errorRetain(a3);
      v77 = Logger.logObject.getter(v109, v110, v111, v112);
      v113 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v77, v113))
      {
        swift_errorRelease(a3);
        swift_errorRelease(a3);
        (*(void (**)(char *, uint64_t))(v107 + 8))(v16, v108);
        goto LABEL_24;
      }
      v79 = swift_slowAlloc(22, -1);
      v114 = swift_slowAlloc(32, -1);
      v144[0] = v114;
      *(_DWORD *)v79 = 136446466;
      v142 = a3;
      swift_errorRetain(a3);
      v115 = sub_1000027AC(&qword_10008BF38);
      v116 = String.init<A>(reflecting:)(&v142, v115);
      v118 = v117;
      v142 = sub_1000523F0(v116, v117, v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v143, v79 + 4);
      swift_bridgeObjectRelease(v118);
      swift_errorRelease(a3);
      v119 = swift_errorRelease(a3);
      *(_WORD *)(v79 + 12) = 2050;
      v120 = v133;
      Date.init()(v119);
      v121 = Date.timeIntervalSince(_:)(v16);
      v122 = *(void (**)(char *, uint64_t))(v136 + 8);
      v122(v120, v108);
      v142 = *(_QWORD *)&v121;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v143, v79 + 14);
      v122(v16, v108);
      _os_log_impl((void *)&_mh_execute_header, v77, v113, "GeneralMapsStateCollector: collectNearbyCategories END (no categories; error: %{public}s, %{public}f seconds elapsed)",
        (uint8_t *)v79,
        0x16u);
      swift_arrayDestroy(v114, 1, (char *)&type metadata for Any + 8);
      v89 = v114;
    }
    else
    {
      if (qword_10008B9F0 != -1)
        swift_once(&qword_10008B9F0, sub_100035150);
      v70 = type metadata accessor for Logger(0);
      sub_100014D70(v70, (uint64_t)qword_100090B98);
      v71 = v136;
      v72 = v135;
      (*(void (**)(char *, uint64_t, uint64_t))(v136 + 16))(v22, v134, v135);
      swift_errorRetain(a3);
      v73 = swift_errorRetain(a3);
      v77 = Logger.logObject.getter(v73, v74, v75, v76);
      v78 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v77, v78))
      {
        swift_errorRelease(a3);
        swift_errorRelease(a3);
        (*(void (**)(char *, uint64_t))(v71 + 8))(v22, v72);
        goto LABEL_24;
      }
      v79 = swift_slowAlloc(22, -1);
      v80 = swift_slowAlloc(32, -1);
      v144[0] = v80;
      *(_DWORD *)v79 = 136446466;
      v142 = a3;
      swift_errorRetain(a3);
      v81 = sub_1000027AC(&qword_10008BF38);
      v82 = String.init<A>(reflecting:)(&v142, v81);
      v84 = v83;
      v142 = sub_1000523F0(v82, v83, v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v143, v79 + 4);
      swift_bridgeObjectRelease(v84);
      swift_errorRelease(a3);
      v85 = swift_errorRelease(a3);
      *(_WORD *)(v79 + 12) = 2050;
      v86 = v133;
      Date.init()(v85);
      v87 = Date.timeIntervalSince(_:)(v22);
      v88 = *(void (**)(char *, uint64_t))(v136 + 8);
      v88(v86, v72);
      v142 = *(_QWORD *)&v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v143, v79 + 14);
      v88(v22, v72);
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "GeneralMapsStateCollector: collectNearbyCategories END (unexpected category type; error: %{public}s, %{public}f "
        "seconds elapsed)",
        (uint8_t *)v79,
        0x16u);
      swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
      v89 = v80;
    }
    swift_slowDealloc(v89, -1, -1);
    swift_slowDealloc(v79, -1, -1);
LABEL_24:

    v97 = *(NSObject **)((char *)&v137->isa
                       + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_collectorGroup);
LABEL_32:
    dispatch_group_leave(v97);
    swift_release(v132);
    return;
  }
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v90 = type metadata accessor for Logger(0);
  v91 = sub_100014D70(v90, (uint64_t)qword_100090B98);
  v137 = Logger.logObject.getter(v91, v92, v93, v94);
  v95 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v137, v95))
  {
    v96 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v96 = 0;
    _os_log_impl((void *)&_mh_execute_header, v137, v95, "GeneralMapsStateCollector: collectNearbyCategories was cancelled just before completion", v96, 2u);
    swift_slowDealloc(v96, -1, -1);
  }

}

uint64_t sub_10000FFE0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v3 = v2;
  v5 = a2 & 1;
  v6 = sub_1000027AC(&qword_10008C008);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for GeneralMapsStateCollector.NearbyCategorySnapshot(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_100015590(a1, &qword_10008C008);
    v13 = sub_10005CC88(v5);
    if ((v14 & 1) != 0)
    {
      v15 = v13;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
      v17 = *v3;
      v24 = *v3;
      *v3 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_10002C428();
        v17 = v24;
      }
      sub_1000153B8(*(_QWORD *)(v17 + 56) + *(_QWORD *)(v10 + 72) * v15, (uint64_t)v8);
      sub_10002BA5C(v15, v17);
      v18 = *v3;
      *v3 = v17;
      swift_bridgeObjectRelease(v18);
      v19 = 0;
    }
    else
    {
      v19 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v19, 1, v9);
    return sub_100015590((uint64_t)v8, &qword_10008C008);
  }
  else
  {
    sub_1000153B8(a1, (uint64_t)v12);
    v20 = swift_isUniquelyReferenced_nonNull_native(*v3);
    v24 = *v3;
    *v3 = 0x8000000000000000;
    sub_10002BDEC((uint64_t)v12, v5, v20);
    v21 = *v3;
    *v3 = v24;
    return swift_bridgeObjectRelease(v21);
  }
}

uint64_t sub_1000101A8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  uint64_t v6;
  id v7;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (a2)
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, (char *)&type metadata for Any + 8);
  else
    v6 = 0;
  swift_retain(v4);
  v7 = a3;
  v5(v6, a3);
  swift_release(v4);

  return swift_bridgeObjectRelease(v6);
}

void sub_10001022C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  __n128 v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void **aBlock;
  _QWORD v61[4];
  uint64_t v62;

  v3 = v2;
  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v56 - v11;
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v56 = v7;
    v57 = v6;
    v16 = swift_allocObject(&unk_100081E00, 24, 7);
    v58 = a1;
    v17 = v16;
    swift_unknownObjectWeakInit(v16 + 16, v3);
    v18 = swift_allocObject(&unk_100081E50, 32, 7);
    *(_QWORD *)(v18 + 16) = a2;
    *(_QWORD *)(v18 + 24) = v17;
    v61[3] = sub_100015210;
    v62 = v18;
    aBlock = _NSConcreteStackBlock;
    v61[0] = 1107296256;
    v61[1] = sub_100052B78;
    v61[2] = &unk_100081E68;
    v19 = _Block_copy(&aBlock);
    v59 = &_swiftEmptyArrayStorage;
    v20 = sub_1000150DC();
    swift_unknownObjectRetain_n(a2, 2);
    swift_retain(v17);
    v21 = sub_1000027AC((uint64_t *)&unk_10008BF70);
    v22 = sub_100015124();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v21, v22, v13, v20);
    v23 = type metadata accessor for DispatchWorkItem(0);
    swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    v24 = DispatchWorkItem.init(flags:block:)(v15, v19);
    v25 = v62;
    swift_release(v17);
    swift_release(v25);
    v26 = OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingNearbyCategoriesCancellation;
    v27 = *(_QWORD *)(v3
                    + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingNearbyCategoriesCancellation);
    *(_QWORD *)(v3 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingNearbyCategoriesCancellation) = v24;
    swift_release(v27);
    v29 = Date.timeIntervalSinceNow.getter(v28) + -10.0;
    if (v29 <= 0.0)
    {
      if (qword_10008B9F0 != -1)
        swift_once(&qword_10008B9F0, sub_100035150);
      v48 = type metadata accessor for Logger(0);
      v49 = sub_100014D70(v48, (uint64_t)qword_100090B98);
      v53 = Logger.logObject.getter(v49, v50, v51, v52);
      v54 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v53, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v55 = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "GeneralMapsStateCollector: could not schedule collectNearbyCategories cancellation", v55, 2u);
        swift_slowDealloc(v55, -1, -1);
        swift_unknownObjectRelease(a2);

      }
      else
      {

        swift_unknownObjectRelease(a2);
      }
    }
    else
    {
      if (qword_10008B9F0 != -1)
        swift_once(&qword_10008B9F0, sub_100035150);
      v30 = type metadata accessor for Logger(0);
      v31 = sub_100014D70(v30, (uint64_t)qword_100090B98);
      v35 = Logger.logObject.getter(v31, v32, v33, v34);
      v39 = static os_log_type_t.debug.getter(v35, v36, v37, v38);
      if (os_log_type_enabled(v35, v39))
      {
        v40 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v40 = 134349056;
        aBlock = *(void ***)&v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v61, v40 + 4);
        _os_log_impl((void *)&_mh_execute_header, v35, v39, "GeneralMapsStateCollector: scheduled collectNearbyCategories cancellation in %{public}f seconds", v40, 0xCu);
        swift_slowDealloc(v40, -1, -1);
      }

      static DispatchTime.now()(v41);
      + infix(_:_:)(v10, v29);
      v42 = *(void (**)(char *, uint64_t))(v56 + 8);
      v43 = v10;
      v44 = v57;
      v42(v43, v57);
      v45 = *(_QWORD *)(v3 + v26);
      if (v45)
      {
        v46 = swift_retain(v45);
        OS_dispatch_queue.asyncAfter(deadline:execute:)(v12, v45, v46);
        swift_unknownObjectRelease(a2);
        v47 = swift_release(v45);
        ((void (*)(char *, uint64_t, __n128))v42)(v12, v44, v47);
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void sub_100010664(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  char *Strong;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  _BYTE v18[24];

  v3 = a2 + 16;
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100014D70(v4, (uint64_t)qword_100090B98);
  v9 = Logger.logObject.getter(v5, v6, v7, v8);
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "GeneralMapsStateCollector: collectNearbyCategories END (cancelled)", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  objc_msgSend(a1, "cancel");
  swift_beginAccess(v3, v18, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v13 = *(_QWORD *)&Strong[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingNearbyCategoriesCancellation];
    *(_QWORD *)&Strong[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingNearbyCategoriesCancellation] = 0;

    swift_release(v13);
  }
  swift_beginAccess(v3, &v17, 0, 0);
  v14 = swift_unknownObjectWeakLoadStrong(v3);
  if (v14)
  {
    v15 = (void *)v14;
    v16 = objc_retain(*(id *)(v14
                                        + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_collectorGroup));

    dispatch_group_leave(v16);
  }
}

void sub_1000107DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;

  v3 = v2;
  v4 = type metadata accessor for DispatchPredicate(0, a2);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v3 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_isolationQueue);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_cancelled) & 1) != 0)
  {
    if (qword_10008B9F0 == -1)
    {
LABEL_4:
      v10 = type metadata accessor for Logger(0);
      v11 = sub_100014D70(v10, (uint64_t)qword_100090B98);
      v15 = Logger.logObject.getter(v11, v12, v13, v14);
      v16 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "GeneralMapsStateCollector: skipped collectSuggestions (state collection cancelled)", v17, 2u);
        swift_slowDealloc(v17, -1, -1);
      }

      return;
    }
LABEL_13:
    swift_once(&qword_10008B9F0, sub_100035150);
    goto LABEL_4;
  }
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_100014D70(v18, (uint64_t)qword_100090B98);
  v23 = Logger.logObject.getter(v19, v20, v21, v22);
  v27 = static os_log_type_t.debug.getter(v23, v24, v25, v26);
  if (os_log_type_enabled(v23, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v27, "GeneralMapsStateCollector: collectSuggestions BEGIN", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }

  dispatch_group_enter(*(dispatch_group_t *)(v3
                                           + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_collectorGroup));
  sub_100010B30();
}

void sub_100010B30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  _QWORD v18[5];
  uint64_t v19;

  v1 = v0;
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100014D70(v2, (uint64_t)qword_100090B98);
  v7 = Logger.logObject.getter(v3, v4, v5, v6);
  v11 = static os_log_type_t.debug.getter(v7, v8, v9, v10);
  if (os_log_type_enabled(v7, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v11, "GeneralMapsStateCollector: fetchSuggestionEntries", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = *(void **)(v1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_suggestionsEngine);
  if (v13)
  {
    v14 = swift_allocObject(&unk_100081E00, 24, 7);
    swift_unknownObjectWeakInit(v14 + 16, v1);
    v18[4] = sub_1000151DC;
    v19 = v14;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 1107296256;
    v18[2] = sub_1000110F0;
    v18[3] = &unk_100081E18;
    v15 = _Block_copy(v18);
    v16 = v19;
    v17 = v13;
    objc_msgSend(v17, "oneShotTopSuggestionsForSink:count:transportType:callback:onQueue:", v1, 3, 4, v15, *(_QWORD *)(v1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_isolationQueue), swift_release(v16).n128_f64[0]);
    _Block_release(v15);

  }
  else
  {
    __break(1u);
  }
}

void sub_100010CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  void *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t Strong;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[5];
  char v67;
  _QWORD v68[2];

  v4 = a3 + 16;
  if (a1 && !a2)
  {
    v21 = qword_10008B9F0;
    swift_bridgeObjectRetain(a1);
    if (v21 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v22 = type metadata accessor for Logger(0);
    sub_100014D70(v22, (uint64_t)qword_100090B98);
    v23 = swift_bridgeObjectRetain_n(a1, 2);
    v27 = Logger.logObject.getter(v23, v24, v25, v26);
    v31 = static os_log_type_t.debug.getter(v27, v28, v29, v30);
    if (os_log_type_enabled(v27, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v32 = 134349056;
      if ((unint64_t)a1 >> 62)
      {
        if (a1 >= 0)
          v54 = a1 & 0xFFFFFFFFFFFFFF8;
        else
          v54 = a1;
        swift_bridgeObjectRetain(a1);
        v33 = _CocoaArrayWrapper.endIndex.getter(v54);
        swift_bridgeObjectRelease(a1);
      }
      else
      {
        v33 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(a1);
      v61 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v32 + 4);
      swift_bridgeObjectRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v27, v31, "GeneralMapsStateCollector: fetchSuggestionEntries received %{public}ld entries", v32, 0xCu);
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a1, 2);
    }
    swift_beginAccess(v4, &v59, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v4);
    if (Strong)
    {
      v35 = (char *)Strong;
      sub_1000071E0((uint64_t)&v61);
      v57 = v67;
      v36 = v66[2];
      v55 = v66[4];
      v56 = v66[3];
      v37 = v66[1];
      v38 = v64;
      v39 = v65;
      v40 = v63;
      v41 = v61;
      v42 = v62;
      sub_10001565C((uint64_t)v66, (uint64_t)v68, &qword_10008BF90);
      sub_10001543C(v68);
      v43 = &v35[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state];
      v44 = *(_QWORD *)&v35[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state];
      v45 = *(_QWORD *)&v35[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 8];
      v46 = *(_QWORD *)&v35[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 16];
      v47 = *(void **)&v35[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 24];
      v48 = *(_QWORD *)&v35[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 32];
      v49 = *(_QWORD *)&v35[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 40];
      v50 = *(_QWORD *)&v35[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 48];
      v51 = *(void **)&v35[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 56];
      v52 = *(_QWORD *)&v35[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 64];
      v53 = *(_QWORD *)&v35[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 72];
      *(_QWORD *)v43 = v41;
      *((_QWORD *)v43 + 1) = v42;
      *((_QWORD *)v43 + 2) = v40;
      *((_QWORD *)v43 + 3) = v38;
      *((_QWORD *)v43 + 4) = v39;
      *((_QWORD *)v43 + 5) = a1;
      *((_QWORD *)v43 + 6) = v37;
      *((_QWORD *)v43 + 7) = v36;
      *((_QWORD *)v43 + 8) = v56;
      *((_QWORD *)v43 + 9) = v55;
      v43[80] = v57;
      sub_100014F38(v44, v45, v46, v47, v48, v49, v50, v51, v52, v53);

    }
    else
    {
      swift_bridgeObjectRelease(a1);
    }
    v18 = (uint64_t *)&v58;
  }
  else
  {
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v5 = type metadata accessor for Logger(0);
    sub_100014D70(v5, (uint64_t)qword_100090B98);
    swift_errorRetain(a2);
    v6 = swift_errorRetain(a2);
    v10 = Logger.logObject.getter(v6, v7, v8, v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v61 = v13;
      *(_DWORD *)v12 = 136446210;
      v59 = a2;
      swift_errorRetain(a2);
      v14 = sub_1000027AC(&qword_10008BF38);
      v15 = String.init<A>(reflecting:)(&v59, v14);
      v17 = v16;
      v59 = sub_1000523F0(v15, v16, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v12 + 4);
      swift_bridgeObjectRelease(v17);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "GeneralMapsStateCollector: fetchSuggestionEntries error: %{public}s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    v18 = &v61;
  }
  swift_beginAccess(v4, v18, 0, 0);
  v19 = (void *)swift_unknownObjectWeakLoadStrong(v4);
  if (v19)
  {
    sub_10001117C();

  }
}

uint64_t sub_1000110F0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  uint64_t v7;
  id v8;

  v4 = a2;
  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v7 = sub_100014FA8(0, &qword_10008BF58, MapsSuggestionsEntry_ptr);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }
  swift_retain(v5);
  v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  return swift_bridgeObjectRelease(v4);
}

void sub_10001117C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char **v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  void *v30;
  NSObject *v31;
  _QWORD *v32;
  void *v33;
  _QWORD *v34;
  void *v35;
  _QWORD *v36;
  id v37;
  id v38;
  id v39;
  NSObject *v40;
  __n128 v41;
  _QWORD *v42;
  id v43;
  id v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  id v51;
  uint64_t v52;
  const void *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void *v58;
  id v59;
  NSObject *v60;
  id v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  __n128 v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  void **v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  NSObject *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  dispatch_group_t v107;
  void *v108;
  unint64_t v109;
  void *v110;
  void **aBlock;
  uint64_t v112;
  void *v113;
  void *v114;
  void *v115;
  _QWORD *v116;
  _BYTE v117[40];
  unint64_t v118;

  v99 = type metadata accessor for DispatchWorkItemFlags(0);
  v98 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v97 = (char *)&v89 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for DispatchQoS(0);
  v95 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v94 = (char *)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchPredicate(0, v3);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v108 = v0;
  v8 = *(void **)&v0[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_isolationQueue];
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v93 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
    goto LABEL_30;
  if (qword_10008B9F0 != -1)
    goto LABEL_31;
  while (1)
  {
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100014D70(v9, (uint64_t)qword_100090B98);
    v14 = Logger.logObject.getter(v10, v11, v12, v13);
    v18 = static os_log_type_t.debug.getter(v14, v15, v16, v17);
    if (os_log_type_enabled(v14, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v18, "GeneralMapsStateCollector: finalizeSuggestionEntries", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    sub_1000071E0((uint64_t)v117);
    v20 = v118;
    swift_bridgeObjectRetain(v118);
    v21 = sub_100014EC4((uint64_t)v117);
    v25 = &selRef_timestamp;
    if (!v20)
      break;
    v100 = v20;
    v92 = v20 & 0xFFFFFFFFFFFFFF8;
    if (v20 >> 62)
    {
      v80 = v100;
      if (v100 >= 0)
        v81 = v20 & 0xFFFFFFFFFFFFFF8;
      else
        v81 = v100;
      swift_bridgeObjectRetain(v100);
      v82 = _CocoaArrayWrapper.endIndex.getter(v81);
      swift_bridgeObjectRelease(v80);
      v90 = (void **)v82;
      if (v82 <= 0)
      {
LABEL_38:
        v21 = swift_bridgeObjectRelease(v100);
        break;
      }
      v27 = v100;
      swift_bridgeObjectRetain(v100);
      v26 = _CocoaArrayWrapper.endIndex.getter(v81);
      if (!v26)
      {
LABEL_24:
        swift_bridgeObjectRelease(v27);
        v70 = swift_bridgeObjectRetain(v27);
        v74 = Logger.logObject.getter(v70, v71, v72, v73);
        v78 = static os_log_type_t.debug.getter(v74, v75, v76, v77);
        if (os_log_type_enabled(v74, v78))
        {
          v79 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v79 = 134349056;
          swift_bridgeObjectRelease(v27);
          aBlock = v90;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v112, v79 + 4);
          swift_bridgeObjectRelease(v27);
          _os_log_impl((void *)&_mh_execute_header, v74, v78, "GeneralMapsStateCollector: collectSuggestions END (%{public}ld entries)", v79, 0xCu);
          swift_slowDealloc(v79, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v27, 2);
        }
        v25 = &selRef_timestamp;
        goto LABEL_42;
      }
    }
    else
    {
      v26 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v26)
        goto LABEL_38;
      v27 = v100;
      swift_bridgeObjectRetain(v100);
      v90 = (void **)v26;
    }
    v91 = v10;
    v106 = 0;
    v28 = 0;
    v107 = *(dispatch_group_t *)((char *)v108
                               + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_collectorGroup);
    v103 = *(_QWORD *)((char *)v108
                     + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_suggestionsNetworkRequester);
    v105 = v27 & 0xC000000000000001;
    v104 = v26;
    while (1)
    {
      if (v105)
      {
        v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28, v27);
      }
      else
      {
        if (v28 >= *(_QWORD *)(v92 + 16))
          goto LABEL_29;
        v29 = *(id *)(v27 + 8 * v28 + 32);
      }
      v30 = v29;
      if (__OFADD__(v28, 1))
        break;
      v109 = v28 + 1;
      dispatch_group_enter(v107);
      v31 = dispatch_group_create();
      dispatch_group_enter(v31);
      v32 = (_QWORD *)swift_allocObject(&unk_100081C98, 40, 7);
      v33 = v108;
      v32[2] = v30;
      v32[3] = v33;
      v32[4] = v31;
      v34 = (_QWORD *)swift_allocObject(&unk_100081CC0, 48, 7);
      v34[2] = v33;
      v34[3] = v30;
      v34[4] = sub_100015064;
      v34[5] = v32;
      v115 = sub_100015074;
      v116 = v34;
      aBlock = _NSConcreteStackBlock;
      v112 = 1107296256;
      v113 = sub_1000122FC;
      v114 = &unk_100081CD8;
      v35 = _Block_copy(&aBlock);
      v36 = v116;
      v37 = v30;
      v38 = v33;
      v39 = v37;
      v40 = v31;
      swift_retain(v32);
      swift_retain(v34);
      v41 = swift_release(v36);
      LODWORD(v31) = GEOMapItemFromMapsSuggestionsEntry(v39, v103, 1, v35, v41);
      _Block_release(v35);
      if (!(_DWORD)v31)
      {
        v42 = (_QWORD *)swift_allocObject(&unk_100081D60, 48, 7);
        v42[2] = v38;
        v42[3] = v39;
        v42[4] = sub_100015064;
        v42[5] = v32;
        v115 = sub_100015174;
        v116 = v42;
        aBlock = _NSConcreteStackBlock;
        v112 = 1107296256;
        v113 = sub_100052B78;
        v114 = &unk_100081D78;
        v101 = _Block_copy(&aBlock);
        v43 = v38;
        v44 = v39;
        swift_retain(v32);
        v102 = v40;
        v45 = v94;
        static DispatchQoS.unspecified.getter(v46);
        v110 = &_swiftEmptyArrayStorage;
        v47 = sub_1000150DC();
        v48 = sub_1000027AC((uint64_t *)&unk_10008BF70);
        v49 = sub_100015124();
        v50 = v97;
        v51 = v39;
        v52 = v99;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v110, v48, v49, v99, v47);
        v53 = v101;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v45, v50, v101);
        _Block_release(v53);
        v54 = v50;
        v27 = v100;
        v55 = v52;
        v39 = v51;
        (*(void (**)(char *, uint64_t))(v98 + 8))(v54, v55);
        v56 = v45;
        v40 = v102;
        (*(void (**)(char *, uint64_t))(v95 + 8))(v56, v96);
        swift_release(v116);
      }
      if (!(v106 & 1 | ((sub_100012638() & 1) == 0))
        && (objc_msgSend(v39, "BOOLeanForKey:is:", CFSTR("MapsSuggestionsRoutingNotAvailableKey"), 1) & 1) == 0
        && objc_msgSend(v39, "containsKey:", CFSTR("MapsSuggestionsNeedsETATrackingKey"))
        && objc_msgSend(v39, "BOOLeanForKey:", CFSTR("MapsSuggestionsNeedsETATrackingKey")))
      {
        dispatch_group_enter(v107);
        v57 = swift_allocObject(&unk_100081D10, 32, 7);
        *(_QWORD *)(v57 + 16) = v38;
        *(_QWORD *)(v57 + 24) = v39;
        v115 = sub_1000150AC;
        v116 = (_QWORD *)v57;
        aBlock = _NSConcreteStackBlock;
        v112 = 1107296256;
        v113 = sub_100052B78;
        v114 = &unk_100081D28;
        v58 = _Block_copy(&aBlock);
        v59 = v38;
        v60 = v40;
        v61 = v39;
        v62 = v94;
        static DispatchQoS.unspecified.getter(v61);
        v110 = &_swiftEmptyArrayStorage;
        v63 = sub_1000150DC();
        v64 = sub_1000027AC((uint64_t *)&unk_10008BF70);
        v65 = sub_100015124();
        v66 = v97;
        v67 = v99;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v110, v64, v65, v99, v63);
        OS_dispatch_group.notify(qos:flags:queue:execute:)(v62, v66, v93, v58);
        _Block_release(v58);

        swift_release(v32);
        v68 = swift_release(v34);
        v69 = v66;
        v27 = v100;
        (*(void (**)(char *, uint64_t, __n128))(v98 + 8))(v69, v67, v68);
        (*(void (**)(char *, uint64_t))(v95 + 8))(v62, v96);
        swift_release(v116);
        v106 = 1;
        v28 = v109;
        if (v109 == v104)
          goto LABEL_24;
      }
      else
      {

        swift_release(v34);
        swift_release(v32);
        ++v28;
        if (v109 == v104)
          goto LABEL_24;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    swift_once(&qword_10008B9F0, sub_100035150);
  }
  v83 = Logger.logObject.getter(v21, v22, v23, v24);
  v87 = static os_log_type_t.debug.getter(v83, v84, v85, v86);
  if (os_log_type_enabled(v83, v87))
  {
    v88 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v88 = 0;
    _os_log_impl((void *)&_mh_execute_header, v83, v87, "GeneralMapsStateCollector: collectSuggestions END (no entries)", v88, 2u);
    swift_slowDealloc(v88, -1, -1);
  }

LABEL_42:
  dispatch_group_leave(*(dispatch_group_t *)&v25[443][(_QWORD)v108]);
}

void sub_100011B34(uint64_t a1, id a2, uint64_t a3, NSObject *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __CFString *v21;
  unint64_t v22;
  uint64_t v23;
  __CFString *v24;
  __CFString *v25;
  __CFString *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v7 = type metadata accessor for Logger(0);
    sub_100014D70(v7, (uint64_t)qword_100090B98);
    swift_errorRetain(a1);
    v8 = swift_errorRetain(a1);
    v12 = Logger.logObject.getter(v8, v9, v10, v11);
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v45 = v15;
      *(_DWORD *)v14 = 136446210;
      v47 = a1;
      swift_errorRetain(a1);
      v16 = sub_1000027AC(&qword_10008BF88);
      v17 = String.init<A>(reflecting:)(&v47, v16);
      v19 = v18;
      v47 = sub_1000523F0(v17, v18, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v14 + 4);
      swift_bridgeObjectRelease(v19);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "GeneralMapsStateCollector: could not determine transport type: %{public}s", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  if (!objc_msgSend(a2, "containsKey:", CFSTR("MapsSuggestionsTransportTypeKey")))
  {
    v22 = 0xE700000000000000;
    v23 = 0x6E776F6E6B6E75;
    goto LABEL_24;
  }
  v20 = (uint64_t)objc_msgSend(a2, "integerForKey:", CFSTR("MapsSuggestionsTransportTypeKey"));
  if (v20 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v20 > 0x7FFFFFFF)
  {
LABEL_31:
    __break(1u);
    JUMPOUT(0x100011FF8);
  }
  switch((int)v20)
  {
    case 0:
      v21 = CFSTR("AUTOMOBILE");
      goto LABEL_20;
    case 1:
      v21 = CFSTR("TRANSIT");
      goto LABEL_20;
    case 2:
      v21 = CFSTR("WALKING");
      goto LABEL_20;
    case 3:
      v21 = CFSTR("BICYCLE");
      goto LABEL_20;
    case 4:
      v21 = CFSTR("UNKNOWN_TRANSPORT_TYPE");
      goto LABEL_20;
    case 5:
      v21 = CFSTR("FERRY");
      goto LABEL_20;
    case 6:
      v21 = CFSTR("RIDESHARE");
LABEL_20:
      v24 = v21;
      break;
    default:
      v21 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v20));
      break;
  }
  v25 = v21;
  if (v25)
  {
    v26 = v25;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v22 = v27;

  }
  else
  {
    v23 = 0;
    v22 = 0;
  }
LABEL_24:
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v28 = type metadata accessor for Logger(0);
  sub_100014D70(v28, (uint64_t)qword_100090B98);
  v29 = swift_bridgeObjectRetain(v22);
  v33 = Logger.logObject.getter(v29, v30, v31, v32);
  v37 = static os_log_type_t.debug.getter(v33, v34, v35, v36);
  if (os_log_type_enabled(v33, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc(12, -1);
    v39 = swift_slowAlloc(32, -1);
    v46 = v22;
    v47 = v39;
    *(_DWORD *)v38 = 136315138;
    v45 = v23;
    swift_bridgeObjectRetain(v22);
    v40 = sub_1000027AC(&qword_10008BF80);
    v41 = String.init<A>(reflecting:)(&v45, v40);
    v43 = v42;
    v45 = sub_1000523F0(v41, v42, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v38 + 4);
    swift_bridgeObjectRelease_n(v22, 2);
    swift_bridgeObjectRelease(v43);
    _os_log_impl((void *)&_mh_execute_header, v33, v37, "GeneralMapsStateCollector: determineTransportType complete, determined=%s", v38, 0xCu);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v22, 2);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a3
                                           + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_collectorGroup));
  dispatch_group_leave(a4);
}

double sub_100012014(uint64_t a1, uint64_t a2, char *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  void *v19;
  char *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double result;
  uint64_t v27;
  void *v28;
  _QWORD aBlock[5];
  _QWORD *v30;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)&a3[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_isolationQueue];
  v18 = (_QWORD *)swift_allocObject(&unk_100081DB0, 48, 7);
  v18[2] = a3;
  v18[3] = a4;
  v18[4] = a5;
  v18[5] = a6;
  aBlock[4] = sub_1000165A4;
  v30 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100052B78;
  aBlock[3] = &unk_100081DC8;
  v19 = _Block_copy(aBlock);
  v20 = a3;
  v21 = a4;
  swift_retain(a6);
  static DispatchQoS.unspecified.getter(v22);
  v28 = &_swiftEmptyArrayStorage;
  v23 = sub_1000150DC();
  v24 = sub_1000027AC((uint64_t *)&unk_10008BF70);
  v25 = sub_100015124();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v24, v25, v10, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v13, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  *(_QWORD *)&result = swift_release(v30).n128_u64[0];
  return result;
}

uint64_t sub_1000121EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t result;

  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_100014D70(v7, (uint64_t)qword_100090B98);
  v12 = Logger.logObject.getter(v8, v9, v10, v11);
  v16 = static os_log_type_t.debug.getter(v12, v13, v14, v15);
  if (os_log_type_enabled(v12, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v16, "GeneralMapsStateCollector: GEOMapItemFromMapsSuggestionsEntry complete", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  result = sub_100012300(a2, (uint64_t)a3, a4);
  if ((result & 1) == 0)
    return a3(0);
  return result;
}

BOOL sub_100012300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  char v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  double v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD aBlock[5];
  uint64_t v43;
  _QWORD v44[11];
  _BYTE v45[16];
  uint64_t v46[3];

  v7 = type metadata accessor for DispatchPredicate(0, a2);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v3 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_isolationQueue);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v12 = v11;
  v13 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_10008B9F0, sub_100035150);
    goto LABEL_5;
  }
  v40 = a3;
  v14 = a2;
  v41 = a1;
  sub_1000071E0((uint64_t)v44);
  sub_10001565C((uint64_t)v44, (uint64_t)v45, &qword_10008BF28);
  v15 = (void *)v44[0];
  v16 = (void *)v44[3];
  v17 = v44[4];
  v18 = v44[5];
  v19 = v44[6];
  v20 = (void *)v44[7];
  v21 = v44[9];
  sub_10001565C((uint64_t)v45, (uint64_t)v46, &qword_10008BF28);
  if (v46[0])
  {
    swift_bridgeObjectRelease(v19);

    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v18);

    swift_bridgeObjectRelease(v21);
    v22 = *(void **)(v3 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_transportModePredictor);
    v23 = swift_allocObject(&unk_100081C48, 32, 7);
    v24 = v40;
    *(_QWORD *)(v23 + 16) = v14;
    *(_QWORD *)(v23 + 24) = v24;
    aBlock[4] = sub_10001500C;
    v43 = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000125D8;
    aBlock[3] = &unk_100081C60;
    v25 = _Block_copy(aBlock);
    v26 = v43;
    swift_retain(v24);
    *(_QWORD *)&v27 = swift_release(v26).n128_u64[0];
    LODWORD(v24) = objc_msgSend(v22, "transportTypeFromLocation:toEntry:completion:", v15, v41, v25, v27);

    _Block_release(v25);
    return (_DWORD)v24 == 1;
  }
  sub_100014EC4((uint64_t)v44);
  if (qword_10008B9F0 != -1)
    goto LABEL_9;
LABEL_5:
  v29 = type metadata accessor for Logger(0);
  v30 = sub_100014D70(v29, (uint64_t)qword_100090B98);
  v34 = Logger.logObject.getter(v30, v31, v32, v33);
  v38 = static os_log_type_t.debug.getter(v34, v35, v36, v37);
  if (os_log_type_enabled(v34, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v38, "GeneralMapsStateCollector: determineTransportType had no origin location", v39, 2u);
    swift_slowDealloc(v39, -1, -1);
  }

  return 0;
}

void sub_1000125D8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_100012638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t Integer;
  uint64_t v15;
  id v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  char *v49;
  int v50;
  uint64_t v51;
  NSString v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  char *v67;
  _OWORD v68[2];
  uint64_t v69;
  _QWORD v70[3];
  uint64_t v71;
  char v72;
  _BYTE v73[16];
  uint64_t v74[3];

  v0 = type metadata accessor for Calendar(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v66 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000027AC(&qword_10008BF20);
  __chkstk_darwin(v4);
  v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v67 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10008B9F8 != -1)
    swift_once(&qword_10008B9F8, sub_1000394FC);
  v10 = qword_100090BB0;
  KeyPath = swift_getKeyPath(&unk_10006A348);
  v12 = swift_getKeyPath(&unk_10006A370);
  static Published.subscript.getter(&v71, v10, KeyPath, v12);
  swift_release(KeyPath);
  swift_release(v12);
  if ((v72 & 1) != 0 || v71)
  {
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100014D70(v19, (uint64_t)qword_100090B98);
    v24 = Logger.logObject.getter(v20, v21, v22, v23);
    v28 = static os_log_type_t.debug.getter(v24, v25, v26, v27);
    if (!os_log_type_enabled(v24, v28))
      goto LABEL_22;
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    v30 = "GeneralMapsStateCollector: canFetchRoutesForSuggestions location is not precise";
    goto LABEL_21;
  }
  sub_1000071E0((uint64_t)&v71);
  sub_10001565C((uint64_t)&v71, (uint64_t)v73, &qword_10008BF28);
  sub_10001565C((uint64_t)v73, (uint64_t)v74, &qword_10008BF28);
  v13 = v74[0];
  sub_100014EC4((uint64_t)&v71);
  if (!v13)
  {
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_100014D70(v31, (uint64_t)qword_100090B98);
    v24 = Logger.logObject.getter(v32, v33, v34, v35);
    v28 = static os_log_type_t.debug.getter(v24, v36, v37, v38);
    if (!os_log_type_enabled(v24, v28))
      goto LABEL_22;
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    v30 = "GeneralMapsStateCollector: canFetchRoutesForSuggestions no location";
    goto LABEL_21;
  }
  Integer = GEOConfigGetInteger(MapsConfig_GeneralMapsWidgetMaximumSuggestionsRoutingRequestsPerDay, off_10008F138);
  if (Integer <= 0)
  {
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v39 = type metadata accessor for Logger(0);
    v40 = sub_100014D70(v39, (uint64_t)qword_100090B98);
    v24 = Logger.logObject.getter(v40, v41, v42, v43);
    v28 = static os_log_type_t.debug.getter(v24, v44, v45, v46);
    if (!os_log_type_enabled(v24, v28))
      goto LABEL_22;
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    v30 = "GeneralMapsStateCollector: canFetchRoutesForSuggestions routing requests not allowed";
LABEL_21:
    _os_log_impl((void *)&_mh_execute_header, v24, v28, v30, v29, 2u);
    swift_slowDealloc(v29, -1, -1);
LABEL_22:

    return 0;
  }
  v15 = Integer;
  v16 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(v16, "objectForKey:", v17);

  if (v18)
  {
    _bridgeAnyObjectToAny(_:)(v68, v18);
    swift_unknownObjectRelease(v18);
  }
  else
  {
    memset(v68, 0, sizeof(v68));
  }
  v48 = v8;
  sub_10001565C((uint64_t)v68, (uint64_t)&v69, &qword_10008BF30);
  v49 = v67;
  if (!v70[2])
  {
    sub_100015590((uint64_t)&v69, &qword_10008BF30);
    v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v6, 1, 1, v7);
    goto LABEL_29;
  }
  v50 = swift_dynamicCast(v6, &v69, (char *)&type metadata for Any + 8, v7, 6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v6, v50 ^ 1u, 1, v7);
  v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48))(v6, 1, v7);
  if ((_DWORD)v51 == 1)
  {
LABEL_29:
    Date.init()(v51);
    sub_100015590((uint64_t)v6, &qword_10008BF20);
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v49, v6, v7);
LABEL_30:
  v52 = String._bridgeToObjectiveC()();
  v53 = objc_msgSend(v16, "integerForKey:", v52);

  static Calendar.current.getter(v54);
  LOBYTE(v52) = Calendar.isDateInToday(_:)(v49);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if ((v52 & 1) != 0 && (uint64_t)v53 >= v15)
  {
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v55 = type metadata accessor for Logger(0);
    v56 = sub_100014D70(v55, (uint64_t)qword_100090B98);
    v60 = Logger.logObject.getter(v56, v57, v58, v59);
    v64 = static os_log_type_t.debug.getter(v60, v61, v62, v63);
    if (os_log_type_enabled(v60, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v65 = 134217984;
      v69 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v65 + 4);
      _os_log_impl((void *)&_mh_execute_header, v60, v64, "GeneralMapsStateCollector: canFetchRoutesForSuggestions already fetched the maximum number of routes for today (%ld)", v65, 0xCu);
      swift_slowDealloc(v65, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v7);
    return 0;
  }

  (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v7);
  return 1;
}

void sub_100012CB4(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  id v22;
  char v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint8_t *v44;
  uint64_t v45;
  id v46;
  NSString v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  os_log_type_t v63;
  uint8_t *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  NSString v68;
  id v69;
  void **v70;
  uint64_t v71;
  char v72;
  BOOL v73;
  uint64_t v74;
  Class isa;
  NSString v76;
  NSString v77;
  uint64_t BOOL;
  uint64_t v79;
  id v80;
  uint64_t v81;
  id v82;
  char *v83;
  uint64_t v84;
  NSObject *v85;
  double v86;
  double v87;
  id v88;
  id v89;
  id v90;
  void *v91;
  id v92;
  uint64_t v93;
  id v94;
  void (*v95)(char *, char *, uint64_t);
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  id v107;
  char *v108;
  id v109;
  double v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  os_log_type_t v121;
  uint64_t v122;
  double v123;
  void (*v124)(char *, uint64_t);
  id v125;
  id v126;
  uint64_t v127;
  id v128;
  char *v129;
  char *v130;
  void **v131;
  NSObject *v132;
  _QWORD *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  id v138;
  id v139;
  char *v140;
  void **aBlock;
  _QWORD v142[2];
  void *v143;
  void (*v144)(void *, uint64_t);
  uint64_t v145;
  _OWORD v146[2];
  _QWORD v147[10];
  char v148[8];
  uint64_t v149;

  v2 = v1;
  v133 = (_QWORD *)type metadata accessor for Calendar(0);
  v132 = *(v133 - 1);
  __chkstk_darwin(v133);
  v131 = (void **)((char *)&v127 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_1000027AC(&qword_10008BF20);
  __chkstk_darwin(v5);
  v7 = (char *)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = type metadata accessor for Date(0);
  v137 = *(_QWORD *)(v136 - 8);
  v8 = *(_QWORD *)(v137 + 64);
  v9 = __chkstk_darwin(v136);
  v130 = (char *)&v127 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v127 - v11;
  v13 = __chkstk_darwin(v10);
  v135 = (char *)&v127 - v14;
  __chkstk_darwin(v13);
  v140 = (char *)&v127 - v15;
  v17 = type metadata accessor for DispatchPredicate(0, v16);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (uint64_t *)((char *)&v127 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = *(void **)&v2[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_isolationQueue];
  *v20 = v21;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  v22 = v21;
  v23 = _dispatchPreconditionTest(_:)(v20);
  (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v20, v17);
  if ((v23 & 1) != 0)
  {
    v139 = a1;
    v129 = v12;
    v134 = v2;
    sub_1000071E0((uint64_t)v147);
    sub_10001565C((uint64_t)v147, (uint64_t)v148, &qword_10008BF28);
    v138 = (id)v147[0];
    v24 = (void *)v147[3];
    v25 = v147[4];
    v27 = v147[5];
    v26 = v147[6];
    v28 = (void *)v147[7];
    v29 = v147[9];
    sub_10001565C((uint64_t)v148, (uint64_t)&v149, &qword_10008BF28);
    if (v149)
    {
      swift_bridgeObjectRelease(v26);

      swift_bridgeObjectRelease(v25);
      swift_bridgeObjectRelease(v27);

      swift_bridgeObjectRelease(v29);
      v30 = objc_msgSend(v139, "MKMapItem");
      if (v30)
      {
        v128 = v30;
        if (qword_10008B9F0 == -1)
          goto LABEL_5;
        goto LABEL_45;
      }
      v57 = v138;
      if (qword_10008B9F0 != -1)
        swift_once(&qword_10008B9F0, sub_100035150);
      v58 = type metadata accessor for Logger(0);
      v59 = sub_100014D70(v58, (uint64_t)qword_100090B98);
      v54 = Logger.logObject.getter(v59, v60, v61, v62);
      v63 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v54, v63))
      {

        return;
      }
      v64 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v63, "GeneralMapsStateCollector: fetchRouteForSuggestion had no map item", v64, 2u);
      swift_slowDealloc(v64, -1, -1);

    }
    else
    {
      sub_100014EC4((uint64_t)v147);
      if (qword_10008B9F0 != -1)
        swift_once(&qword_10008B9F0, sub_100035150);
      v49 = type metadata accessor for Logger(0);
      v50 = sub_100014D70(v49, (uint64_t)qword_100090B98);
      v54 = Logger.logObject.getter(v50, v51, v52, v53);
      v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v54, v55))
      {
        v56 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v56 = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "GeneralMapsStateCollector: fetchRouteForSuggestion had no origin location", v56, 2u);
        swift_slowDealloc(v56, -1, -1);
      }
    }

    return;
  }
  __break(1u);
LABEL_45:
  swift_once(&qword_10008B9F0, sub_100035150);
LABEL_5:
  v31 = type metadata accessor for Logger(0);
  v127 = sub_100014D70(v31, (uint64_t)qword_100090B98);
  v35 = Logger.logObject.getter(v127, v32, v33, v34);
  v39 = static os_log_type_t.debug.getter(v35, v36, v37, v38);
  v40 = os_log_type_enabled(v35, v39);
  v41 = v136;
  v42 = v135;
  v43 = v134;
  if (v40)
  {
    v44 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v39, "GeneralMapsStateCollector: fetchRouteForSuggestion BEGIN", v44, 2u);
    swift_slowDealloc(v44, -1, -1);
  }

  dispatch_group_enter(*(dispatch_group_t *)&v43[OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_collectorGroup]);
  Date.init()(v45);
  v46 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v47 = String._bridgeToObjectiveC()();
  v48 = objc_msgSend(v46, "objectForKey:", v47);

  if (v48)
  {
    _bridgeAnyObjectToAny(_:)(v146, v48);
    swift_unknownObjectRelease(v48);
  }
  else
  {
    memset(v146, 0, sizeof(v146));
  }
  sub_10001565C((uint64_t)v146, (uint64_t)&aBlock, &qword_10008BF30);
  if (v143)
  {
    v65 = swift_dynamicCast(v7, &aBlock, (char *)&type metadata for Any + 8, v41, 6);
    v66 = v137;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v7, v65 ^ 1u, 1, v41);
    v67 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48))(v7, 1, v41);
    if ((_DWORD)v67 != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v42, v7, v41);
      goto LABEL_24;
    }
  }
  else
  {
    sub_100015590((uint64_t)&aBlock, &qword_10008BF30);
    v67 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v137 + 56))(v7, 1, 1, v41);
  }
  Date.init()(v67);
  sub_100015590((uint64_t)v7, &qword_10008BF20);
LABEL_24:
  v68 = String._bridgeToObjectiveC()();
  v69 = objc_msgSend(v46, "integerForKey:", v68);

  v70 = v131;
  static Calendar.current.getter(v71);
  v72 = Calendar.isDateInToday(_:)(v42);
  ((void (*)(void **, _QWORD *))v132[1].isa)(v70, v133);
  if ((v72 & 1) == 0)
  {
LABEL_28:
    v74 = 1;
    goto LABEL_29;
  }
  v73 = __OFADD__(v69, 1);
  v74 = (uint64_t)v69 + 1;
  if (v73)
  {
    __break(1u);
    goto LABEL_28;
  }
LABEL_29:
  isa = Date._bridgeToObjectiveC()().super.isa;
  v76 = String._bridgeToObjectiveC()();
  objc_msgSend(v46, "setObject:forKey:", isa, v76);

  v77 = String._bridgeToObjectiveC()();
  v133 = v46;
  objc_msgSend(v46, "setInteger:forKey:", v74, v77);

  BOOL = GEOConfigGetBOOL(MapsConfig_GeneralMapsWidgetDirectionsRequestUseBackgroundURL, off_10008F148);
  v79 = GEOTransportTypeFromUserPreference();
  v80 = v139;
  if (!objc_msgSend(v139, "containsKey:", CFSTR("MapsSuggestionsTransportTypeKey")))
  {
LABEL_33:
    v82 = v138;
    v83 = v134;
    goto LABEL_34;
  }
  v81 = (uint64_t)objc_msgSend(v80, "integerForKey:", CFSTR("MapsSuggestionsTransportTypeKey"));
  v82 = v138;
  v83 = v134;
  if (v81 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v79 = v81;
  if (v81 > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_33;
  }
LABEL_34:
  v131 = (void **)v74;
  if (v79 > 5)
    v84 = 1;
  else
    v84 = qword_10006A478[(int)v79];
  v85 = objc_msgSend(objc_allocWithZone((Class)MKDirectionsRequest), "init");
  objc_msgSend(v82, "coordinate");
  v88 = objc_msgSend(objc_allocWithZone((Class)MKPlacemark), "initWithCoordinate:", v86, v87);
  v89 = objc_msgSend(objc_allocWithZone((Class)MKMapItem), "initWithPlacemark:", v88);

  -[NSObject setSource:](v85, "setSource:", v89);
  -[NSObject setDestination:](v85, "setDestination:", v128);
  -[NSObject setTransportType:](v85, "setTransportType:", v84);
  -[NSObject _setUseBackgroundURL:](v85, "_setUseBackgroundURL:", BOOL);
  v134 = (char *)objc_msgSend(objc_allocWithZone((Class)MKDirections), "initWithRequest:", v85);
  v90 = objc_msgSend((id)objc_opt_self(GEOMapService), "sharedService");
  if (!v90)
    goto LABEL_47;
  v91 = v90;
  v132 = v85;
  v92 = objc_msgSend(v90, "defaultTraits");

  v93 = v137;
  if (!v92)
  {
LABEL_48:
    __break(1u);
    return;
  }
  objc_msgSend(v92, "setIsWidgetRequest:", 1);
  v94 = objc_msgSend(objc_allocWithZone((Class)GEOLocation), "initWithCLLocation:", v82);
  objc_msgSend(v92, "setDeviceLocation:", v94);

  objc_msgSend(v92, "addTransportType:", v79);
  v95 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
  v96 = v129;
  v97 = v140;
  v95(v129, v140, v41);
  v98 = *(unsigned __int8 *)(v93 + 80);
  v99 = (v98 + 32) & ~v98;
  v100 = swift_allocObject(&unk_100081BF8, v99 + v8, v98 | 7);
  *(_QWORD *)(v100 + 16) = v83;
  v101 = v83;
  v102 = v139;
  *(_QWORD *)(v100 + 24) = v139;
  v103 = v100 + v99;
  v104 = v136;
  (*(void (**)(uint64_t, char *, uint64_t))(v93 + 32))(v103, v96, v136);
  v144 = sub_100014E74;
  v145 = v100;
  aBlock = _NSConcreteStackBlock;
  v142[0] = 1107296256;
  v142[1] = sub_1000122FC;
  v143 = &unk_100081C10;
  v105 = _Block_copy(&aBlock);
  v106 = v145;
  v107 = v92;
  v108 = v101;
  v109 = v102;
  *(_QWORD *)&v110 = swift_release(v106).n128_u64[0];
  v111 = v134;
  objc_msgSend(v134, "_calculateDirectionsWithTraits:completionHandler:", v107, v105, v110);
  _Block_release(v105);
  v139 = v107;

  v112 = v130;
  v113 = ((uint64_t (*)(char *, char *, uint64_t))v95)(v130, v97, v104);
  v117 = Logger.logObject.getter(v113, v114, v115, v116);
  v121 = static os_log_type_t.debug.getter(v117, v118, v119, v120);
  if (os_log_type_enabled(v117, v121))
  {
    v122 = swift_slowAlloc(22, -1);
    *(_DWORD *)v122 = 134349312;
    Date.init()(v122);
    v123 = Date.timeIntervalSince(_:)(v112);
    v124 = *(void (**)(char *, uint64_t))(v93 + 8);
    v124(v96, v104);
    aBlock = *(void ***)&v123;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v142, v122 + 4);
    v124(v112, v104);
    *(_WORD *)(v122 + 12) = 2050;
    aBlock = v131;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v142, v122 + 14);
    _os_log_impl((void *)&_mh_execute_header, v117, v121, "GeneralMapsStateCollector: fetchRouteForSuggestion blocked caller for %{public}f seconds, request %{public}ld", (uint8_t *)v122, 0x16u);
    swift_slowDealloc(v122, -1, -1);

    v125 = v139;
    v126 = v133;
  }
  else
  {

    v124 = *(void (**)(char *, uint64_t))(v93 + 8);
    v124(v112, v104);
    v117 = v132;
    v126 = v138;
    v111 = (char *)v139;
    v125 = v128;
  }

  v124(v135, v104);
  v124(v140, v104);
}

void sub_1000139C8(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  os_log_type_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  double v73;
  void (*v74)(_BYTE *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  double v92;
  void (*v93)(_BYTE *, uint64_t);
  _BYTE v94[4];
  int v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105[2];
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 v114;

  v103 = a3;
  v9 = type metadata accessor for DispatchPredicate(0, a2);
  v100 = *(_QWORD *)(v9 - 8);
  v101 = v9;
  __chkstk_darwin(v9);
  v11 = &v94[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v102 = &v94[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __chkstk_darwin(v14);
  v18 = &v94[-v17];
  __chkstk_darwin(v16);
  v20 = &v94[-v19];
  if (!a1)
    goto LABEL_23;
  v21 = objc_msgSend(a1, "routes");
  v22 = sub_100014FA8(0, &qword_10008BF40, MKRoute_ptr);
  v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

  if (!((unint64_t)v23 >> 62))
  {
    if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_22:
    swift_bridgeObjectRelease(v23);
    goto LABEL_23;
  }
  if (v23 < 0)
    v75 = v23;
  else
    v75 = v23 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v23);
  v76 = _CocoaArrayWrapper.endIndex.getter(v75);
  swift_bridgeObjectRelease(v23);
  if (!v76)
    goto LABEL_22;
LABEL_4:
  v99 = a4;
  if ((v23 & 0xC000000000000001) != 0)
  {
    v24 = v18;
    v18 = (_BYTE *)v12;
    v25 = v13;
    v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v23);
  }
  else
  {
    if (!*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_31;
    }
    v24 = v18;
    v18 = (_BYTE *)v12;
    v25 = v13;
    v26 = *(id *)(v23 + 32);
  }
  v27 = v26;
  v98 = v24;
  swift_bridgeObjectRelease(v23);
  v28 = objc_msgSend(v27, "_geoComposedRoute");

  v13 = v25;
  v12 = (uint64_t)v18;
  v29 = v99;
  if (!v28)
  {
LABEL_23:
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v77 = type metadata accessor for Logger(0);
    sub_100014D70(v77, (uint64_t)qword_100090B98);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v20, a5, v12);
    swift_errorRetain(a2);
    v78 = swift_errorRetain(a2);
    v65 = Logger.logObject.getter(v78, v79, v80, v81);
    v82 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v82))
    {
      v83 = swift_slowAlloc(22, -1);
      v84 = swift_slowAlloc(32, -1);
      v101 = v13;
      v85 = v84;
      v104 = a2;
      v105[0] = v84;
      *(_DWORD *)v83 = 136446466;
      swift_errorRetain(a2);
      v86 = sub_1000027AC(&qword_10008BF38);
      v87 = String.init<A>(reflecting:)(&v104, v86);
      v89 = v88;
      v104 = sub_1000523F0(v87, v88, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v83 + 4);
      swift_bridgeObjectRelease(v89);
      swift_errorRelease(a2);
      v90 = swift_errorRelease(a2);
      *(_WORD *)(v83 + 12) = 2050;
      v91 = v102;
      Date.init()(v90);
      v92 = Date.timeIntervalSince(_:)(v20);
      v93 = *(void (**)(_BYTE *, uint64_t))(v101 + 8);
      v93(v91, v12);
      v104 = *(_QWORD *)&v92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v83 + 14);
      v93(v20, v12);
      _os_log_impl((void *)&_mh_execute_header, v65, v82, "GeneralMapsStateCollector: fetchRouteForSuggestion END (error: %{public}s, %{public}f seconds elapsed)", (uint8_t *)v83, 0x16u);
      swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v85, -1, -1);
      swift_slowDealloc(v83, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v20, v12);
    }
    goto LABEL_28;
  }
  v30 = sub_100014FA8(0, (unint64_t *)&qword_10008BF48, OS_dispatch_queue_ptr);
  *v11 = static OS_dispatch_queue.main.getter(v30);
  v32 = v100;
  v31 = v101;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v100 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v101);
  v33 = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, uint64_t))(v32 + 8))(v11, v31);
  if ((v33 & 1) == 0)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_once(&qword_10008B9F0, sub_100035150);
LABEL_15:
    v58 = type metadata accessor for Logger(0);
    sub_100014D70(v58, (uint64_t)qword_100090B98);
    v59 = v101;
    v60 = v98;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v101 + 16))(v98, v100, v12);
    v61 = v18;
    v65 = Logger.logObject.getter(v61, v62, v63, v64);
    v69 = static os_log_type_t.debug.getter(v65, v66, v67, v68);
    if (os_log_type_enabled(v65, v69))
    {
      v70 = swift_slowAlloc(18, -1);
      *(_DWORD *)v70 = 67174913;
      LODWORD(v104) = objc_msgSend(v61, "expectedTime") / 0x3C;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, (char *)&v104 + 4, v70 + 4);

      *(_WORD *)(v70 + 8) = 2050;
      v71 = v102;
      Date.init()(v72);
      v73 = Date.timeIntervalSince(_:)(v60);
      v74 = *(void (**)(_BYTE *, uint64_t))(v59 + 8);
      v74(v71, v12);
      v104 = *(_QWORD *)&v73;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v70 + 10);
      v74(v60, v12);
      _os_log_impl((void *)&_mh_execute_header, v65, v69, "GeneralMapsStateCollector: fetchRouteForSuggestion END (route with expected travel time: %{private}u mins, %{public}f seconds elapsed)", (uint8_t *)v70, 0x12u);
      swift_slowDealloc(v70, -1, -1);

    }
    else
    {

      (*(void (**)(_BYTE *, uint64_t))(v59 + 8))(v60, v12);
    }
LABEL_28:

    dispatch_group_leave(*(dispatch_group_t *)(v103
                                             + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_collectorGroup));
    return;
  }
  v100 = a5;
  v101 = v13;
  v34 = v29;
  v18 = v28;
  sub_1000071E0((uint64_t)v105);
  v35 = v105[0];
  v36 = v105[1];
  v37 = v106;
  v38 = v107;
  v39 = v108;
  v41 = v109;
  v40 = v110;
  v99 = v111;
  v97 = v112;
  v96 = v113;
  v95 = v114;
  if ((v110 & 0xC000000000000001) == 0)
    goto LABEL_14;
  if (v110 >= 0)
    v40 = v110 & 0xFFFFFFFFFFFFFF8;
  v42 = __CocoaDictionary.count.getter(v40);
  if (!__OFADD__(v42, 1))
  {
    v40 = sub_10001485C(v40, v42 + 1);
LABEL_14:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v40);
    v104 = v40;
    sub_10002BF08((uint64_t)v18, v34, isUniquelyReferenced_nonNull_native);
    v44 = v104;

    swift_bridgeObjectRelease(0x8000000000000000);
    v45 = v103 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state;
    v46 = *(_QWORD *)(v103 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state);
    v47 = *(_QWORD *)(v103 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 8);
    v48 = *(_QWORD *)(v103 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 16);
    v49 = *(void **)(v103 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 24);
    v50 = *(_QWORD *)(v103 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 32);
    v51 = *(_QWORD *)(v103 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 40);
    v52 = *(_QWORD *)(v103 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 48);
    v53 = *(void **)(v103 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 56);
    v54 = *(_QWORD *)(v103 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 64);
    v55 = *(_QWORD *)(v103 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector____lazy_storage___state + 72);
    *(_QWORD *)v45 = v35;
    *(_QWORD *)(v45 + 8) = v36;
    *(_QWORD *)(v45 + 16) = v37;
    *(_QWORD *)(v45 + 24) = v38;
    *(_QWORD *)(v45 + 32) = v39;
    *(_QWORD *)(v45 + 40) = v41;
    v56 = v99;
    *(_QWORD *)(v45 + 48) = v44;
    *(_QWORD *)(v45 + 56) = v56;
    v57 = v96;
    *(_QWORD *)(v45 + 64) = v97;
    *(_QWORD *)(v45 + 72) = v57;
    *(_BYTE *)(v45 + 80) = v95;
    sub_100014F38(v46, v47, v48, v49, v50, v51, v52, v53, v54, v55);
    if (qword_10008B9F0 == -1)
      goto LABEL_15;
    goto LABEL_32;
  }
  __break(1u);
}

void sub_100014130(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void sub_1000141A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSObject *oslog;

  v1 = OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingNavigationRouteCancellation;
  v2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingNavigationRouteCancellation);
  if (v2)
  {
    v4 = swift_retain(*(_QWORD *)(a1
                                + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_pendingNavigationRouteCancellation));
    dispatch thunk of DispatchWorkItem.cancel()(v4);
    v5 = *(_QWORD *)(a1 + v1);
    *(_QWORD *)(a1 + v1) = 0;
    swift_release(v5);
    sub_10000B018();
    swift_release(v2);
  }
  else
  {
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100014D70(v6, (uint64_t)qword_100090B98);
    oslog = Logger.logObject.getter(v7, v8, v9, v10);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v11, "GeneralMapsStateCollector: collectNavigationRoute was cancelled just before nav service callback", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

  }
}

id sub_100014340()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GeneralMapsStateCollector();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for GeneralMapsStateCollector()
{
  return objc_opt_self(_TtC17GeneralMapsWidget25GeneralMapsStateCollector);
}

uint64_t destroy for GeneralMapsState(uint64_t a1)
{

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
}

uint64_t initializeWithCopy for GeneralMapsState(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v5;
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  v10 = *(void **)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v9;
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v11;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v12 = v3;
  v13 = v6;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v14 = v10;
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t assignWithCopy for GeneralMapsState(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v7 = *(void **)(a1 + 24);
  v8 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  v9 = v8;

  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v12);
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(void **)(a1 + 56);
  v17 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v17;
  v18 = v17;

  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v19 = *(_QWORD *)(a2 + 72);
  v20 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

__n128 initializeWithTake for GeneralMapsState(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for GeneralMapsState(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);

  v5 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v6 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v6);
  v7 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);

  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeneralMapsState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 81))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeneralMapsState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 81) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GeneralMapsState()
{
  return &type metadata for GeneralMapsState;
}

uint64_t sub_1000147B4(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t (*v4)(void);
  id v5;

  v4 = *(uint64_t (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  LOBYTE(v4) = v4();
  swift_release(v3);

  return v4 & 1;
}

double sub_100014804(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_100014814(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001481C(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_100014FA8(255, a2, a3);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }
  return result;
}

Swift::Int sub_10001485C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_1000027AC(&qword_10008BF50);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_100014FA8(0, &qword_10008BF58, MapsSuggestionsEntry_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_100014FA8(0, (unint64_t *)&unk_10008BF60, GEOComposedRoute_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_10002B1A8(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()();
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

unint64_t sub_100014AAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t result;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  v2 = sub_1000027AC(&qword_10008C010);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    sub_1000027AC(&qword_10008C018);
    v7 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v6);
    v8 = (uint64_t)&v5[*(int *)(v2 + 48)];
    v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v10 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      sub_100016550(v9, (uint64_t)v5, &qword_10008C010);
      v11 = *v5;
      result = sub_10005CC88(*v5);
      if ((v13 & 1) != 0)
        break;
      v14 = result;
      *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v7[6] + result) = v11;
      v15 = v7[7];
      v16 = type metadata accessor for GeneralMapsStateCollector.NearbyCategorySnapshot(0);
      result = sub_1000153B8(v8, v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v14);
      v17 = v7[2];
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
        goto LABEL_10;
      v7[2] = v19;
      v9 += v10;
      if (!--v6)
        return (unint64_t)v7;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

Swift::Int sub_100014C0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _BYTE v20[40];
  _OWORD v21[2];
  uint64_t v22;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1000027AC(&qword_10008BF18);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      sub_100014D88(v6 + 40 * v4, (uint64_t)v21);
      result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v3 + 40));
      v8 = ~(-1 << *(_BYTE *)(v3 + 32));
      v9 = result & v8;
      v10 = (result & (unint64_t)v8) >> 6;
      v11 = *(_QWORD *)(v5 + 8 * v10);
      v12 = 1 << (result & v8);
      if ((v12 & v11) != 0)
      {
        while (1)
        {
          sub_100014D88(*(_QWORD *)(v3 + 48) + 40 * v9, (uint64_t)v20);
          v13 = static AnyHashable.== infix(_:_:)(v20, v21);
          result = sub_100014DC4((uint64_t)v20);
          if ((v13 & 1) != 0)
            break;
          v9 = (v9 + 1) & v8;
          v10 = v9 >> 6;
          v11 = *(_QWORD *)(v5 + 8 * (v9 >> 6));
          v12 = 1 << v9;
          if ((v11 & (1 << v9)) == 0)
            goto LABEL_8;
        }
        sub_100014DC4((uint64_t)v21);
      }
      else
      {
LABEL_8:
        *(_QWORD *)(v5 + 8 * v10) = v12 | v11;
        v14 = *(_QWORD *)(v3 + 48) + 40 * v9;
        v15 = v21[0];
        v16 = v21[1];
        *(_QWORD *)(v14 + 32) = v22;
        *(_OWORD *)v14 = v15;
        *(_OWORD *)(v14 + 16) = v16;
        v17 = *(_QWORD *)(v3 + 16);
        v18 = __OFADD__(v17, 1);
        v19 = v17 + 1;
        if (v18)
        {
          __break(1u);
          return result;
        }
        *(_QWORD *)(v3 + 16) = v19;
      }
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_100014D70(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_100014D88(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_100014DC4(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_100014DF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100014E74(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  sub_1000139C8(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), v2 + ((v5 + 32) & ~v5));
}

uint64_t sub_100014EC4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v2 = *(void **)a1;
  v4 = *(void **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(void **)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 72);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);

  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t sub_100014F38(uint64_t result, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  void *v14;

  if (a7)
  {
    v14 = (void *)result;
    swift_bridgeObjectRelease(a7);

    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a6);

    return swift_bridgeObjectRelease(a10);
  }
  return result;
}

uint64_t sub_100014FA8(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100014FE8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001500C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 16))(a2);
}

uint64_t sub_100015030()
{
  id *v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_100015064(uint64_t a1)
{
  uint64_t v1;

  sub_100011B34(a1, *(id *)(v1 + 16), *(_QWORD *)(v1 + 24), *(NSObject **)(v1 + 32));
}

double sub_100015074(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100012014(a1, a2, *(char **)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_100015080()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000150AC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_100012CB4(*(void **)(v0 + 24));
  dispatch_group_leave(*(dispatch_group_t *)(v1
                                           + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_collectorGroup));
}

unint64_t sub_1000150DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C7F0;
  if (!qword_10008C7F0)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_10008C7F0);
  }
  return result;
}

unint64_t sub_100015124()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C800[0];
  if (!qword_10008C800[0])
  {
    v1 = sub_1000027EC((uint64_t *)&unk_10008BF70);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, qword_10008C800);
  }
  return result;
}

uint64_t sub_100015174()
{
  uint64_t v0;

  return sub_1000121EC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(_QWORD))(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100015184()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000151B8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000151DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100010CD0(a1, a2, v2);
}

uint64_t sub_1000151E4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100015210()
{
  uint64_t v0;

  sub_100010664(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t type metadata accessor for GeneralMapsStateCollector.NearbyCategorySnapshot(uint64_t a1)
{
  uint64_t result;

  result = qword_10008C098;
  if (!qword_10008C098)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GeneralMapsStateCollector.NearbyCategorySnapshot);
  return result;
}

uint64_t sub_100015254()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100015264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

double sub_100015304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10000F238(a1, a2, *(char **)(v2 + 16), v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100015374(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GeneralMapsStateCollector.NearbyCategorySnapshot(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000153B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GeneralMapsStateCollector.NearbyCategorySnapshot(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000153FC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for GeneralMapsStateCollector.NearbyCategorySnapshot(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_10001543C(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

id *sub_100015464(id *a1)
{
  id v2;

  v2 = *a1;
  return a1;
}

uint64_t sub_10001548C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_errorRelease(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

void sub_10001553C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10000F4D4(*(NSObject **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100015590(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1000027AC(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

double sub_1000155CC(uint64_t a1, unint64_t a2)
{
  double result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(a1);
  }
  *(_QWORD *)&result = swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL).n128_u64[0];
  return result;
}

uint64_t sub_100015610(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void sub_100015654(uint64_t a1)
{
  uint64_t v1;

  sub_10000BDB4(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10001565C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000027AC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000156A0(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

void sub_1000156C8()
{
  uint64_t v0;

  sub_10000AED8(v0);
}

uint64_t sub_1000156D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000156FC()
{
  uint64_t v0;

  return sub_1000095E0(*(_QWORD *)(v0 + 16), *(uint64_t (**)(char *))(v0 + 24));
}

uint64_t sub_100015708()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

void sub_1000157A4(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_10000970C(*(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), v2 + v6, *(void (**)(void))v7, *(_QWORD *)(v7 + 8), a1, a2);
}

void sub_10001581C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  sub_100009F18(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_10001584C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

void sub_1000158E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_100009FE0(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(void (**)(void))v5, *(_QWORD *)(v5 + 8));
}

id *sub_100015938(id *a1)
{

  return a1;
}

void sub_100015964()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  (*(void (**)(void))(v0 + 16))();
  dispatch_group_leave(*(dispatch_group_t *)(v1
                                           + OBJC_IVAR____TtC17GeneralMapsWidget25GeneralMapsStateCollector_collectorGroup));
}

uint64_t sub_100015998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v3 + v7 + 16) & ~v3;
  v9 = v8 + v5;

  v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  v10(v0 + v8, v1);
  return swift_deallocObject(v0, v9, v6);
}

void sub_100015A44(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1000086EC(a1, a2, a3, *(_QWORD *)(v3 + 16), v3 + v9, *(void (**)(void))(v3 + v10), *(_QWORD *)(v3 + v10 + 8), (void *)(v3 + ((v8 + v10 + 16) & ~v8)));
}

uint64_t sub_100015AC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100015B3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 24) & ~v2);
  sub_10000C504(v1, v4);
  sub_10000CFC0(v3);
  sub_1000107DC(v5, v6);
}

uint64_t sub_100015B94()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100015BC0()
{
  uint64_t v0;

  return sub_100007FF4(*(void (**)(_BYTE *))(v0 + 16));
}

id sub_100015BCC(id result, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  void *v14;
  id v15;
  id v16;

  if (a7)
  {
    v14 = result;
    swift_bridgeObjectRetain(a10);
    v15 = v14;
    v16 = a4;
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a7);
    return a8;
  }
  return result;
}

uint64_t sub_100015C48()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  void *v16;
  _QWORD aBlock[5];
  uint64_t v18;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin();
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_allocObject(&unk_1000821E8, 24, 7);
  *(_QWORD *)(v9 + 16) = v0;
  aBlock[4] = sub_100015E20;
  v18 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100052B78;
  aBlock[3] = &unk_100082200;
  v10 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  v16 = &_swiftEmptyArrayStorage;
  v11 = sub_1000150DC();
  v12 = sub_1000027AC((uint64_t *)&unk_10008BF70);
  v13 = sub_100015124();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v18);
}

uint64_t sub_100015DFC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100015E20()
{
  uint64_t v0;

  sub_1000141A4(*(_QWORD *)(v0 + 16));
}

_BYTE *initializeBufferWithCopyOfBuffer for GeneralMapsStateCollector.NearbyCategoryCacheDomain(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for GeneralMapsStateCollector.NearbyCategoryCacheDomain(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for GeneralMapsStateCollector.NearbyCategoryCacheDomain(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100015F10 + 4 * byte_10006A305[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100015F44 + 4 * byte_10006A300[v4]))();
}

uint64_t sub_100015F44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100015F4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100015F54);
  return result;
}

uint64_t sub_100015F60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100015F68);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100015F6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100015F74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100015F80(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100015F88(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GeneralMapsStateCollector.NearbyCategoryCacheDomain()
{
  return &type metadata for GeneralMapsStateCollector.NearbyCategoryCacheDomain;
}

uint64_t *sub_100015FA4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = *(void **)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = (uint64_t)v13;
    v14 = a3[8];
    *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
    *(_DWORD *)((char *)a1 + v14) = *(_DWORD *)((char *)a2 + v14);
    v15 = a3[9];
    v16 = *(uint64_t *)((char *)a2 + v15);
    *(uint64_t *)((char *)a1 + v15) = v16;
    swift_bridgeObjectRetain(v12);
    v17 = v13;
    swift_bridgeObjectRetain(v16);
  }
  return a1;
}

uint64_t sub_10001606C(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9]));
}

uint64_t sub_1000160CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = *(void **)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v12;
  v13 = a3[8];
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  *(_DWORD *)(a1 + v13) = *(_DWORD *)(a2 + v13);
  v14 = a3[9];
  v15 = *(_QWORD *)(a2 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  swift_bridgeObjectRetain(v11);
  v16 = v12;
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t sub_100016168(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = *(void **)(a2 + v12);
  v14 = *(void **)(a1 + v12);
  *(_QWORD *)(a1 + v12) = v13;
  v15 = v13;

  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  v16 = a3[9];
  v17 = *(_QWORD *)(a1 + v16);
  v18 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(a1 + v16) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v17);
  return a1;
}

uint64_t sub_100016230(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  *(_DWORD *)(a1 + v8) = *(_DWORD *)(a2 + v8);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000162B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = *(void **)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);

  v15 = a3[8];
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  *(_DWORD *)(a1 + v15) = *(_DWORD *)(a2 + v15);
  v16 = a3[9];
  v17 = *(_QWORD *)(a1 + v16);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  swift_bridgeObjectRelease(v17);
  return a1;
}

uint64_t sub_10001635C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100016368);
}

uint64_t sub_100016368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000163E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000163F4);
}

uint64_t sub_1000163F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100016470(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10006A3D8;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[4] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[5] = &unk_10006A3F0;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_10001650C()
{
  unint64_t result;

  result = qword_10008C0E0;
  if (!qword_10008C0E0)
  {
    result = swift_getWitnessTable(&unk_10006A448, &type metadata for GeneralMapsStateCollector.NearbyCategoryCacheDomain);
    atomic_store(result, (unint64_t *)&qword_10008C0E0);
  }
  return result;
}

uint64_t sub_100016550(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000027AC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

_OWORD *sub_100016594(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

_QWORD *sub_10001663C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
    v8 = (char *)v4 + v7;
    v9 = (char *)a2 + v7;
    v10 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
    v11 = *((_QWORD *)v10 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_1000027AC(&qword_10008BA50);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v14 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v8, v9, v14);
      v15 = v10[5];
      v16 = *(_QWORD *)&v9[v15];
      *(_QWORD *)&v8[v15] = v16;
      v17 = v10[6];
      v18 = &v8[v17];
      v19 = &v9[v17];
      v20 = *(void **)&v9[v17];
      swift_bridgeObjectRetain(v16);
      if (v20 == (void *)1)
      {
        *(_OWORD *)v18 = *(_OWORD *)v19;
      }
      else
      {
        v21 = (void *)*((_QWORD *)v19 + 1);
        *(_QWORD *)v18 = v20;
        *((_QWORD *)v18 + 1) = v21;
        v22 = v20;
        v23 = v21;
      }
      v24 = v10[7];
      v25 = &v8[v24];
      v26 = &v9[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v26[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
    }
    v27 = *(int *)(a3 + 20);
    v28 = (_QWORD *)((char *)v4 + v27);
    v29 = (uint64_t *)((char *)a2 + v27);
    v30 = sub_1000027AC(&qword_10008C160);
    if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
    {
      v31 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v28, v29, v31);
      v32 = v28;
      v33 = v30;
      v34 = 1;
    }
    else
    {
      v35 = *v29;
      *v28 = *v29;
      swift_retain(v35);
      v32 = v28;
      v33 = v30;
      v34 = 0;
    }
    swift_storeEnumTagMultiPayload(v32, v33, v34);
  }
  return v4;
}

uint64_t sub_100016834(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a1 + *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  v5 = type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + *(int *)(v5 + 20)));
    v7 = (id *)(v4 + *(int *)(v5 + 24));
    if (*v7 != (id)1)
    {

    }
  }
  v8 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v9 = sub_1000027AC(&qword_10008C160);
  if (swift_getEnumCaseMultiPayload(v8, v9) != 1)
    return swift_release(*v8);
  v10 = type metadata accessor for WidgetFamily(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
}

uint64_t sub_100016930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_1000027AC(&qword_10008BA50);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v7, v8, v12);
    v13 = v9[5];
    v14 = *(_QWORD *)&v8[v13];
    *(_QWORD *)&v7[v13] = v14;
    v15 = v9[6];
    v16 = &v7[v15];
    v17 = &v8[v15];
    v18 = *(void **)&v8[v15];
    swift_bridgeObjectRetain(v14);
    if (v18 == (void *)1)
    {
      *(_OWORD *)v16 = *(_OWORD *)v17;
    }
    else
    {
      v19 = (void *)*((_QWORD *)v17 + 1);
      *(_QWORD *)v16 = v18;
      *((_QWORD *)v16 + 1) = v19;
      v20 = v18;
      v21 = v19;
    }
    v22 = v9[7];
    v23 = &v7[v22];
    v24 = &v8[v22];
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  v25 = *(int *)(a3 + 20);
  v26 = (uint64_t *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v28 = sub_1000027AC(&qword_10008C160);
  if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
  {
    v29 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
    v30 = v26;
    v31 = v28;
    v32 = 1;
  }
  else
  {
    v33 = *v27;
    *v26 = *v27;
    swift_retain(v33);
    v30 = v26;
    v31 = v28;
    v32 = 0;
  }
  swift_storeEnumTagMultiPayload(v30, v31, v32);
  return a1;
}

uint64_t sub_100016AFC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  v8 = (char *)(a1 + v7);
  v9 = (char *)a2 + v7;
  v10 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_10001B54C((uint64_t)v8, type metadata accessor for NearbyEntryContent.ResolvedContent);
LABEL_7:
      v22 = sub_1000027AC(&qword_10008BA50);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      if ((uint64_t *)a1 == a2)
        return a1;
      goto LABEL_20;
    }
    v23 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 24))(v8, v9, v23);
    v24 = v10[5];
    v25 = *(_QWORD *)&v9[v24];
    v26 = *(_QWORD *)&v8[v24];
    *(_QWORD *)&v8[v24] = v25;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRelease(v26);
    v27 = v10[6];
    v28 = &v8[v27];
    v29 = &v9[v27];
    v30 = *(void **)&v8[v27];
    v31 = *(void **)&v9[v27];
    if (v30 == (void *)1)
    {
      if (v31 != (void *)1)
      {
        *(_QWORD *)v28 = v31;
        v32 = (void *)*((_QWORD *)v29 + 1);
        *((_QWORD *)v28 + 1) = v32;
        v33 = v31;
        v34 = v32;
        goto LABEL_19;
      }
    }
    else
    {
      if (v31 != (void *)1)
      {
        *(_QWORD *)v28 = v31;
        v42 = v31;

        v43 = (void *)*((_QWORD *)v28 + 1);
        v44 = (void *)*((_QWORD *)v29 + 1);
        *((_QWORD *)v28 + 1) = v44;
        v45 = v44;

LABEL_19:
        v46 = v10[7];
        v47 = &v8[v46];
        v48 = &v9[v46];
        v49 = *(_QWORD *)v48;
        v47[8] = v48[8];
        *(_QWORD *)v47 = v49;
        if ((uint64_t *)a1 == a2)
          return a1;
        goto LABEL_20;
      }
      sub_100016DF4((id *)v28);
    }
    *(_OWORD *)v28 = *(_OWORD *)v29;
    goto LABEL_19;
  }
  if (v14)
    goto LABEL_7;
  v15 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v8, v9, v15);
  v16 = v10[5];
  v17 = *(_QWORD *)&v9[v16];
  *(_QWORD *)&v8[v16] = v17;
  v18 = v10[6];
  v19 = &v8[v18];
  v20 = &v9[v18];
  v21 = *(void **)&v9[v18];
  swift_bridgeObjectRetain(v17);
  if (v21 == (void *)1)
  {
    *(_OWORD *)v19 = *(_OWORD *)v20;
  }
  else
  {
    *(_QWORD *)v19 = v21;
    v35 = (void *)*((_QWORD *)v20 + 1);
    *((_QWORD *)v19 + 1) = v35;
    v36 = v21;
    v37 = v35;
  }
  v38 = v10[7];
  v39 = &v8[v38];
  v40 = &v9[v38];
  v41 = *(_QWORD *)v40;
  v39[8] = v40[8];
  *(_QWORD *)v39 = v41;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
  if ((uint64_t *)a1 != a2)
  {
LABEL_20:
    v50 = *(int *)(a3 + 20);
    v51 = (uint64_t *)(a1 + v50);
    v52 = (uint64_t *)((char *)a2 + v50);
    sub_100015590(a1 + v50, &qword_10008C160);
    v53 = sub_1000027AC(&qword_10008C160);
    if (swift_getEnumCaseMultiPayload(v52, v53) == 1)
    {
      v54 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v51, v52, v54);
      v55 = v51;
      v56 = v53;
      v57 = 1;
    }
    else
    {
      v58 = *v52;
      *v51 = *v52;
      swift_retain(v58);
      v55 = v51;
      v56 = v53;
      v57 = 0;
    }
    swift_storeEnumTagMultiPayload(v55, v56, v57);
  }
  return a1;
}

id *sub_100016DF4(id *a1)
{
  destroy for ColorSchemeSpecificImageSet(a1);
  return a1;
}

uint64_t sub_100016E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_1000027AC(&qword_10008BA50);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v7, v8, v12);
    *(_QWORD *)&v7[v9[5]] = *(_QWORD *)&v8[v9[5]];
    *(_OWORD *)&v7[v9[6]] = *(_OWORD *)&v8[v9[6]];
    v13 = v9[7];
    v14 = &v7[v13];
    v15 = &v8[v13];
    v14[8] = v15[8];
    *(_QWORD *)v14 = *(_QWORD *)v15;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  v16 = *(int *)(a3 + 20);
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = sub_1000027AC(&qword_10008C160);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload(v17, v19, 1);
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100016FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, int *);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id *v29;
  char *v30;
  void *v31;
  id v32;
  uint64_t v33;
  char *v34;
  char *v35;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(char *, uint64_t, int *))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      v14 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v7, v8, v14);
      *(_QWORD *)&v7[v9[5]] = *(_QWORD *)&v8[v9[5]];
      *(_OWORD *)&v7[v9[6]] = *(_OWORD *)&v8[v9[6]];
      v15 = v9[7];
      v16 = &v7[v15];
      v17 = &v8[v15];
      v16[8] = v17[8];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
      if (a1 == a2)
        return a1;
      goto LABEL_8;
    }
LABEL_7:
    v18 = sub_1000027AC(&qword_10008BA50);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    if (a1 == a2)
      return a1;
    goto LABEL_8;
  }
  if (v13)
  {
    sub_10001B54C((uint64_t)v7, type metadata accessor for NearbyEntryContent.ResolvedContent);
    goto LABEL_7;
  }
  v25 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v7, v8, v25);
  v26 = v9[5];
  v27 = *(_QWORD *)&v7[v26];
  *(_QWORD *)&v7[v26] = *(_QWORD *)&v8[v26];
  swift_bridgeObjectRelease(v27);
  v28 = v9[6];
  v29 = (id *)&v7[v28];
  v30 = &v8[v28];
  v31 = *(void **)&v7[v28];
  if (v31 == (void *)1)
    goto LABEL_15;
  if (*(_QWORD *)v30 == 1)
  {
    sub_100016DF4(v29);
LABEL_15:
    *(_OWORD *)v29 = *(_OWORD *)v30;
    goto LABEL_17;
  }
  *v29 = *(id *)v30;

  v32 = v29[1];
  v29[1] = (id)*((_QWORD *)v30 + 1);

LABEL_17:
  v33 = v9[7];
  v34 = &v7[v33];
  v35 = &v8[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v34[8] = v35[8];
  if (a1 == a2)
    return a1;
LABEL_8:
  v19 = *(int *)(a3 + 20);
  v20 = (void *)(a1 + v19);
  v21 = (const void *)(a2 + v19);
  sub_100015590(a1 + v19, &qword_10008C160);
  v22 = sub_1000027AC(&qword_10008C160);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v23 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
    swift_storeEnumTagMultiPayload(v20, v22, 1);
  }
  else
  {
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100017250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001725C);
}

uint64_t sub_10001725C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for NearbyEntryContent(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_1000027AC(&qword_10008C168);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1000172D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000172E0);
}

uint64_t sub_1000172E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for NearbyEntryContent(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_1000027AC(&qword_10008C168);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for NearbyWidgetView(uint64_t a1)
{
  return sub_100006A5C(a1, (uint64_t *)&unk_10008C1C8, (uint64_t)&nominal type descriptor for NearbyWidgetView);
}

void sub_100017374(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for NearbyEntryContent(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001B658(319, (unint64_t *)&qword_10008C1D8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

uint64_t sub_100017408(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006C77C, 1);
}

uint64_t sub_100017418@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[3];

  v33 = a1;
  v37 = a2;
  sub_1000027AC(&qword_10008C6D8);
  __chkstk_darwin();
  v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Image.ResizingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000027AC(&qword_10008C6E0);
  __chkstk_darwin();
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000027AC(&qword_10008C6E8);
  v35 = *(_QWORD *)(v10 - 8);
  v36 = v10;
  __chkstk_darwin();
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_1000027AC(&qword_10008C6F0);
  __chkstk_darwin();
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = enum case for Image.TemplateRenderingMode.original(_:);
  v16 = type metadata accessor for Image.TemplateRenderingMode(0);
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 104))(v9, v15, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v9, 0, 1, v16);
  v18 = Image.renderingMode(_:)(v9, v33);
  sub_100015590((uint64_t)v9, &qword_10008C6E0);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
  v19 = Image.resizable(capInsets:resizingMode:)(v7, v18, 0.0, 0.0, 0.0, 0.0);
  swift_release(v18);
  v20 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  static WidgetAccentedRenderingMode.desaturated.getter(v20);
  v21 = type metadata accessor for WidgetAccentedRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v3, 0, 1, v21);
  Image.widgetAccentedRenderingMode(_:)(v3, v19);
  swift_release(v19);
  sub_100015590((uint64_t)v3, &qword_10008C6D8);
  if (qword_10008B978 != -1)
    swift_once(&qword_10008B978, sub_1000182E4);
  v22 = qword_100090B38;
  v23 = static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)(v38, v22, 0, v22, 0, v23, v24);
  v26 = v35;
  v25 = v36;
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v14, v12, v36);
  v27 = v34;
  v28 = &v14[*(int *)(v34 + 36)];
  v29 = v38[1];
  *(_OWORD *)v28 = v38[0];
  *((_OWORD *)v28 + 1) = v29;
  *((_OWORD *)v28 + 2) = v38[2];
  (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v25);
  v30 = sub_10001D8C8();
  View.accessibility(identifier:)(0x754279627261654ELL, 0xEC0000006E6F7474, v27, v30);
  return sub_100015590((uint64_t)v14, &qword_10008C6F0);
}

uint64_t sub_100017774@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100017418(*v1, a1);
}

uint64_t sub_10001777C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];

  v48 = a1;
  v45 = sub_1000027AC(&qword_10008C688);
  ((void (*)(void))__chkstk_darwin)();
  v2 = (char *)&v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_1000027AC(&qword_10008C690);
  ((void (*)(void))__chkstk_darwin)();
  v47 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = ((uint64_t (*)(void))__chkstk_darwin)();
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v43 - v9;
  v11 = type metadata accessor for NearbyButtonAction(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_1000027AC(&qword_10008C698);
  v14 = *(_QWORD *)(v44 - 8);
  v15 = __chkstk_darwin(v44);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v43 - v18;
  v20 = type metadata accessor for NearbyButtonContent(0);
  sub_10001B33C(v49 + *(int *)(v20 + 24), (uint64_t)v13, type metadata accessor for NearbyButtonAction);
  LODWORD(v11) = swift_getEnumCaseMultiPayload(v13, v11);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v13, v4);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
  if ((_DWORD)v11 == 1)
    Link.init(sensitiveUrl:label:)(v8, sub_100017B14, 0, &type metadata for Color, &protocol witness table for Color);
  else
    Link.init(destination:label:)(v8, sub_10001D9F0, 0, &type metadata for Color, &protocol witness table for Color);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  v21 = v44;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v19, v17, v44);
  v22 = type metadata accessor for NearbyButtonActionLink(0);
  v23 = v49;
  v24 = *(_QWORD *)(v49 + *(int *)(v22 + 20));
  v25 = swift_retain(v24);
  v26 = static Alignment.center.getter(v25);
  v28 = v27;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v2, v19, v21);
  v29 = v46;
  v30 = (uint64_t *)&v2[*(int *)(v45 + 36)];
  *v30 = v26;
  v30[1] = v28;
  v31 = v47;
  sub_100016550((uint64_t)v2, (uint64_t)&v47[*(int *)(v29 + 36)], &qword_10008C688);
  *v31 = v24;
  sub_100015590((uint64_t)v2, &qword_10008C688);
  v32 = *(_QWORD *)(v23 + 24);
  v50[0] = *(_QWORD *)(v23 + 16);
  v50[1] = v32;
  v33 = sub_10001D720();
  swift_bridgeObjectRetain(v32);
  v34 = Text.init<A>(_:)(v50, &type metadata for String, v33);
  v36 = v35;
  v38 = v37;
  v40 = v39 & 1;
  v41 = sub_10001D764();
  View.accessibility(label:)(v34, v36, v40, v38, v29, v41);
  sub_10001D86C(v34, v36, v40);
  swift_bridgeObjectRelease(v38);
  sub_100015590((uint64_t)v31, &qword_10008C690);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v19, v21);
}

uint64_t sub_100017B14@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static Color.clear.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100017B3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = type metadata accessor for NearbyButtonAction(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NearbyButtonContent(0);
  sub_10001B33C(v1 + *(int *)(v6 + 24), (uint64_t)v5, type metadata accessor for NearbyButtonAction);
  v7 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, v5, v7);
}

uint64_t sub_100017BDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t OpaqueTypeConformance2;
  uint64_t v40;
  _QWORD v41[2];
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v3 = sub_1000027AC(&qword_10008BA58);
  __chkstk_darwin(v3);
  v47 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for ContainerBackgroundPlacement(0);
  v44 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000027AC(&qword_10008BA50);
  __chkstk_darwin(v7);
  v9 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for NearbyEntryContent(0);
  __chkstk_darwin(v10);
  v12 = (char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_1000027AC(&qword_10008C530);
  v43 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v42 = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static Alignment.center.getter(v14);
  v16 = v15;
  v18 = v17;
  v19 = *(unsigned __int8 *)(v1 + 8);
  v48 = a1;
  if (v19 == 2)
    goto LABEL_4;
  v20 = *(_QWORD *)v1;
  sub_10001B33C(v1, (uint64_t)v12, type metadata accessor for NearbyEntryContent);
  sub_10001565C((uint64_t)&v12[*(int *)(v10 + 20)], (uint64_t)v9, &qword_10008BA50);
  v21 = type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v9, 1, v21);
  if ((_DWORD)result != 1)
  {
    v23 = &v9[*(int *)(v21 + 28)];
    v24 = *(_QWORD *)v23;
    v25 = v23[8];
    v15 = sub_10001B54C((uint64_t)v9, type metadata accessor for NearbyEntryContent.ResolvedContent);
    if ((v25 & 1) == 0)
    {
      v26 = v19 & 1;
      goto LABEL_6;
    }
LABEL_4:
    v20 = 0;
    v24 = 0;
    v26 = 2;
LABEL_6:
    v49 = v16;
    v50 = v18;
    v51 = v20;
    v52 = v26;
    v54 = 0;
    v55 = 0;
    v53 = v24;
    v27 = static ContainerBackgroundPlacement.widget.getter(v15);
    v41[1] = v41;
    __chkstk_darwin(v27);
    v29 = static Alignment.center.getter(v28);
    v31 = v30;
    v32 = sub_1000027AC(&qword_10008C538);
    v33 = sub_1000027AC(&qword_10008C468);
    v34 = sub_10001D82C(&qword_10008C540, &qword_10008C538, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v35 = sub_10001D82C(&qword_10008C478, &qword_10008C468, (uint64_t)&unk_10006A990);
    v36 = v42;
    View.containerBackground<A>(for:alignment:content:)(v6, v29, v31, sub_10001CEE8, &v41[-4], v32, v33, v34, v35);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v6, v46);
    v37 = type metadata accessor for URL(0);
    v38 = (uint64_t)v47;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v47, 1, 1, v37);
    v49 = v32;
    v50 = v33;
    v51 = v34;
    v52 = v35;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v49, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
    v40 = v45;
    View.widgetURL(_:)(v38, v45, OpaqueTypeConformance2);
    sub_100015590(v38, &qword_10008BA58);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v36, v40);
  }
  __break(1u);
  return result;
}

uint64_t sub_100017F8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t result;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;

  v35 = a2;
  v3 = sub_1000027AC(&qword_10008C480);
  __chkstk_darwin(v3);
  v34 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000027AC(&qword_10008C278);
  __chkstk_darwin(v5);
  v7 = (char **)((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_1000027AC(&qword_10008BA50);
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NearbyEntryContent(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v34 - v15;
  v17 = (int *)sub_1000027AC(&qword_10008C468);
  __chkstk_darwin(v17);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = v16;
  sub_10001B33C(a1, (uint64_t)v16, type metadata accessor for NearbyEntryContent);
  LODWORD(v16) = *(unsigned __int8 *)(a1 + 8);
  sub_10001B33C(a1, (uint64_t)v14, type metadata accessor for NearbyEntryContent);
  if ((_DWORD)v16 == 2)
  {
    sub_10001B54C((uint64_t)v14, type metadata accessor for NearbyEntryContent);
    v21 = 0;
LABEL_5:
    v25 = (uint64_t)v20;
    v26 = v34;
    v27 = v35;
    v28 = v21 & 1;
    *v7 = swift_getKeyPath(&unk_10006A518);
    v29 = sub_1000027AC(&qword_10008C240);
    swift_storeEnumTagMultiPayload(v7, v29, 0);
    *v26 = swift_getKeyPath(&unk_10006A698);
    v30 = sub_1000027AC(&qword_10008C488);
    swift_storeEnumTagMultiPayload(v26, v30, 0);
    KeyPath = swift_getKeyPath(&unk_10006A6C8);
    v32 = (uint64_t *)&v19[v17[10]];
    *v32 = KeyPath;
    v33 = sub_1000027AC(&qword_10008C490);
    swift_storeEnumTagMultiPayload(v32, v33, 0);
    sub_10001565C((uint64_t)v7, (uint64_t)v19, &qword_10008C278);
    sub_10001565C((uint64_t)v26, (uint64_t)&v19[v17[9]], &qword_10008C480);
    sub_10001CDDC(v25, (uint64_t)&v19[v17[11]], type metadata accessor for NearbyEntryContent);
    v19[v17[12]] = v28;
    return sub_10001565C((uint64_t)v19, v27, &qword_10008C468);
  }
  sub_100016550((uint64_t)&v14[*(int *)(v11 + 20)], (uint64_t)v10, &qword_10008BA50);
  v22 = type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v10, 1, v22);
  if ((_DWORD)result != 1)
  {
    sub_10001B54C((uint64_t)v14, type metadata accessor for NearbyEntryContent);
    v24 = v10[*(int *)(v22 + 28) + 8];
    sub_10001B54C((uint64_t)v10, type metadata accessor for NearbyEntryContent.ResolvedContent);
    v21 = v24 ^ 1;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void sub_1000182D4()
{
  qword_100090B30 = 0x4030000000000000;
}

void sub_1000182E4()
{
  qword_100090B38 = 0x4049000000000000;
}

void sub_1000182F4()
{
  qword_100090B40 = 0x402E000000000000;
}

uint64_t sub_100018304@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void **v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t OpaqueTypeConformance2;
  uint64_t v80;
  uint64_t result;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  void **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  _QWORD v108[4];
  _QWORD *v109;

  v93 = a1;
  v2 = sub_1000027AC(&qword_10008BA58);
  __chkstk_darwin(v2);
  v92 = (char *)&v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for ContainerBackgroundPlacement(0);
  v86 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v85 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_1000027AC(&qword_10008C548);
  __chkstk_darwin(v88);
  v84 = (uint64_t *)((char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v91 = sub_1000027AC(&qword_10008C550);
  v90 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v89 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorScheme(0);
  v106 = *(_QWORD *)(v7 - 8);
  v107 = (uint64_t *)v7;
  v8 = __chkstk_darwin(v7);
  v101 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v105 = (uint64_t)&v82 - v10;
  v11 = sub_1000027AC(&qword_10008C458);
  __chkstk_darwin(v11);
  v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for NearbyButtonActionLink(0);
  v103 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v100 = (uint64_t)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v96 = (uint64_t)&v82 - v18;
  __chkstk_darwin(v17);
  v99 = (uint64_t)&v82 - v19;
  v20 = type metadata accessor for NearbyButtonContent(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v104 = (void **)((char *)&v82 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22);
  v102 = (uint64_t)&v82 - v24;
  v25 = sub_1000027AC(&qword_10008BA50);
  __chkstk_darwin(v25);
  v27 = (char *)&v82 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for NearbyEntryContent(0);
  __chkstk_darwin(v28);
  v30 = (char *)&v82 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = &_swiftEmptyArrayStorage;
  v31 = type metadata accessor for NearbyMediumWidgetView(0);
  sub_10001B33C(v1 + *(int *)(v31 + 20), (uint64_t)v30, type metadata accessor for NearbyEntryContent);
  sub_10001565C((uint64_t)&v30[*(int *)(v28 + 20)], (uint64_t)v27, &qword_10008BA50);
  v32 = type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v27, 1, v32) == 1)
  {
    __break(1u);
LABEL_24:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "GeneralMapsWidget/ColorSchemeSpecificImageSet.swift", 51, 2, 24, 0);
    __break(1u);
  }
  else
  {
    v33 = *(_QWORD *)&v27[*(int *)(v32 + 20)];
    swift_bridgeObjectRetain(v33);
    sub_10001B54C((uint64_t)v27, type metadata accessor for NearbyEntryContent.ResolvedContent);
    v34 = *(_QWORD *)(v33 + 16);
    if (v34)
    {
      v35 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
      v83 = v33;
      v36 = v33 + v35;
      v98 = enum case for ColorScheme.light(_:);
      v94 = enum case for ColorScheme.dark(_:);
      v97 = *(_QWORD *)(v21 + 72);
      v95 = v1;
      v37 = v102;
      while (1)
      {
        sub_10001B33C(v36, v37, type metadata accessor for NearbyButtonContent);
        if (v109[2] > 1uLL)
          break;
        v38 = v14;
        v39 = v13;
        v40 = v104;
        sub_10001B33C(v37, (uint64_t)v104, type metadata accessor for NearbyButtonContent);
        v41 = v105;
        sub_100052044(v105);
        v43 = *v40;
        v42 = v40[1];
        v44 = v106;
        v45 = v101;
        v46 = v41;
        v47 = v107;
        (*(void (**)(char *, uint64_t, uint64_t *))(v106 + 16))(v101, v46, v107);
        v48 = (*(uint64_t (**)(char *, uint64_t *))(v44 + 88))(v45, v47);
        if (v48 == v98)
        {
          v42 = v43;
          v13 = v39;
          v14 = v38;
        }
        else
        {
          v13 = v39;
          v14 = v38;
          if (v48 != v94)
            goto LABEL_24;
        }
        if (v42)
        {
          v49 = (uint64_t)v104;
          v50 = v96;
          sub_10001B33C((uint64_t)v104, v96, type metadata accessor for NearbyButtonContent);
          v51 = Image.init(uiImage:)(v42);
          (*(void (**)(uint64_t, uint64_t *))(v106 + 8))(v105, v107);
          sub_10001B54C(v49, type metadata accessor for NearbyButtonContent);
          *(_QWORD *)(v50 + *(int *)(v14 + 20)) = v51;
          sub_10001CDDC(v50, (uint64_t)v13, type metadata accessor for NearbyButtonActionLink);
          v52 = 0;
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t *))(v106 + 8))(v105, v107);
          sub_10001B54C((uint64_t)v104, type metadata accessor for NearbyButtonContent);
          v52 = 1;
        }
        v53 = v103;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v103 + 56))(v13, v52, 1, v14);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v13, 1, v14) == 1)
        {
          v37 = v102;
          sub_10001B54C(v102, type metadata accessor for NearbyButtonContent);
          sub_100015590((uint64_t)v13, &qword_10008C458);
        }
        else
        {
          v54 = v99;
          sub_10001CDDC((uint64_t)v13, v99, type metadata accessor for NearbyButtonActionLink);
          sub_10001B33C(v54, v100, type metadata accessor for NearbyButtonActionLink);
          v55 = (unint64_t)v109;
          if ((swift_isUniquelyReferenced_nonNull_native(v109) & 1) == 0)
            v55 = sub_10005C3D0(0, *(_QWORD *)(v55 + 16) + 1, 1, v55);
          v57 = *(_QWORD *)(v55 + 16);
          v56 = *(_QWORD *)(v55 + 24);
          v37 = v102;
          if (v57 >= v56 >> 1)
            v55 = sub_10005C3D0(v56 > 1, v57 + 1, 1, v55);
          *(_QWORD *)(v55 + 16) = v57 + 1;
          sub_10001CDDC(v100, v55+ ((*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80))+ *(_QWORD *)(v103 + 72) * v57, type metadata accessor for NearbyButtonActionLink);
          v109 = (_QWORD *)v55;
          sub_10001B54C(v99, type metadata accessor for NearbyButtonActionLink);
          sub_10001B54C(v37, type metadata accessor for NearbyButtonContent);
          v1 = v95;
        }
        v36 += v97;
        if (!--v34)
          goto LABEL_21;
      }
      sub_10001B54C(v37, type metadata accessor for NearbyButtonContent);
LABEL_21:
      v58 = v83;
    }
    else
    {
      v58 = v33;
    }
    swift_bridgeObjectRelease(v58);
    v60 = static Alignment.center.getter(v59);
    v61 = (uint64_t)v84;
    *v84 = v60;
    *(_QWORD *)(v61 + 8) = v62;
    v63 = sub_1000027AC(&qword_10008C558);
    v64 = sub_100018C08(&v109, v1, v61 + *(int *)(v63 + 44));
    v65 = v85;
    v66 = static ContainerBackgroundPlacement.widget.getter(v64);
    v107 = &v82;
    __chkstk_darwin(v66);
    v68 = static Alignment.center.getter(v67);
    v70 = v69;
    v71 = sub_1000027AC(&qword_10008C468);
    v72 = sub_10001D82C(&qword_10008C560, &qword_10008C548, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v73 = sub_10001D82C(&qword_10008C478, &qword_10008C468, (uint64_t)&unk_10006A990);
    v74 = v89;
    v75 = v70;
    v76 = v88;
    View.containerBackground<A>(for:alignment:content:)(v65, v68, v75, sub_10001CEF0, &v82 - 4, v88, v71, v72, v73);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v65, v87);
    sub_100015590(v61, &qword_10008C548);
    v77 = type metadata accessor for URL(0);
    v78 = (uint64_t)v92;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v92, 1, 1, v77);
    v108[0] = v76;
    v108[1] = v71;
    v108[2] = v72;
    v108[3] = v73;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v108, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
    v80 = v91;
    View.widgetURL(_:)(v78, v91, OpaqueTypeConformance2);
    sub_100015590(v78, &qword_10008BA58);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v74, v80);
    return swift_bridgeObjectRelease(v109);
  }
  return result;
}

uint64_t sub_100018C08@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  double *v37;
  uint64_t v38;

  v6 = sub_1000027AC(&qword_10008BA50);
  __chkstk_darwin(v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NearbyEntryContent(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000027AC(&qword_10008C568);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v38 - v17;
  if (*(_QWORD *)(*a1 + 16))
  {
    *(_QWORD *)v18 = static HorizontalAlignment.center.getter(v16);
    *((_QWORD *)v18 + 1) = 0;
    v18[16] = 1;
    v19 = sub_1000027AC(&qword_10008C580);
    sub_100018F78(a1, (uint64_t)&v18[*(int *)(v19 + 44)]);
    v20 = sub_1000027AC(&qword_10008C570);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 0, 1, v20);
  }
  else
  {
    v21 = sub_1000027AC(&qword_10008C570);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v18, 1, 1, v21);
  }
  v22 = a2 + *(int *)(type metadata accessor for NearbyMediumWidgetView(0) + 20);
  v23 = *(unsigned __int8 *)(v22 + 8);
  v24 = 0.0;
  if (v23 == 2)
    goto LABEL_7;
  v25 = *(_QWORD *)v22;
  sub_10001B33C(v22, (uint64_t)v11, type metadata accessor for NearbyEntryContent);
  sub_10001565C((uint64_t)&v11[*(int *)(v9 + 20)], (uint64_t)v8, &qword_10008BA50);
  v26 = type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v8, 1, v26);
  if ((_DWORD)result != 1)
  {
    v28 = &v8[*(int *)(v26 + 28)];
    v29 = *(_QWORD *)v28;
    v30 = v28[8];
    sub_10001B54C((uint64_t)v8, type metadata accessor for NearbyEntryContent.ResolvedContent);
    if ((v30 & 1) == 0)
    {
      if (qword_10008B970 != -1)
        swift_once(&qword_10008B970, sub_1000182D4);
      v33 = *(double *)&qword_100090B30;
      if (qword_10008B978 != -1)
        swift_once(&qword_10008B978, sub_1000182E4);
      v31 = v23 & 1;
      v34 = *(double *)&qword_100090B38;
      v35 = v33 + *(double *)&qword_100090B38;
      if (qword_10008B980 != -1)
      {
        swift_once(&qword_10008B980, sub_1000182F4);
        v34 = *(double *)&qword_100090B38;
      }
      v24 = sub_10002CE54(0.0, v35 + *(double *)&qword_100090B40 + v34 + *(double *)&qword_100090B30, 0.0, 0.0);
      v32 = v36;
      goto LABEL_15;
    }
LABEL_7:
    v25 = 0;
    v29 = 0;
    v31 = 2;
    v32 = 0;
LABEL_15:
    sub_100016550((uint64_t)v18, (uint64_t)v15, &qword_10008C568);
    sub_100016550((uint64_t)v15, a3, &qword_10008C568);
    v37 = (double *)(a3 + *(int *)(sub_1000027AC(&qword_10008C578) + 48));
    *(_QWORD *)v37 = v25;
    *((_QWORD *)v37 + 1) = v31;
    *((_QWORD *)v37 + 2) = v29;
    v37[3] = v24;
    *((_QWORD *)v37 + 4) = v32;
    sub_100015590((uint64_t)v18, &qword_10008C568);
    return sub_100015590((uint64_t)v15, &qword_10008C568);
  }
  __break(1u);
  return result;
}

uint64_t sub_100018F78@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = sub_1000027AC(&qword_10008C588);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v14 - v9;
  *(_QWORD *)v10 = static VerticalAlignment.center.getter(v8);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 1;
  v11 = sub_1000027AC(&qword_10008C590);
  sub_100019088(a1, (uint64_t)&v10[*(int *)(v11 + 44)]);
  sub_100016550((uint64_t)v10, (uint64_t)v7, &qword_10008C588);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = 0x3FF0000000000000;
  v12 = sub_1000027AC(&qword_10008C598);
  sub_100016550((uint64_t)v7, a2 + *(int *)(v12 + 48), &qword_10008C588);
  sub_100015590((uint64_t)v10, &qword_10008C588);
  return sub_100015590((uint64_t)v7, &qword_10008C588);
}

uint64_t sub_100019088@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v4 = sub_1000027AC(&qword_10008C5A0);
  v5 = __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v9 = (char *)&v20 - v8;
  if (qword_10008B970 != -1)
    swift_once(&qword_10008B970, sub_1000182D4);
  v10 = qword_100090B30;
  *v7 = swift_getKeyPath(&unk_10006A698);
  v11 = sub_1000027AC(&qword_10008C488);
  v12 = swift_storeEnumTagMultiPayload(v7, v11, 0);
  *(_QWORD *)((char *)v7 + *(int *)(v4 + 36)) = v10;
  v13 = (char *)v7 + *(int *)(v4 + 40);
  *(_QWORD *)v13 = static HorizontalAlignment.center.getter(v12);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  v14 = *(int *)(sub_1000027AC(&qword_10008C5A8) + 44);
  if (qword_10008B980 != -1)
    swift_once(&qword_10008B980, sub_1000182F4);
  v15 = &v13[v14];
  v16 = qword_100090B40;
  *(_QWORD *)v15 = static VerticalAlignment.center.getter();
  *((_QWORD *)v15 + 1) = v16;
  v15[16] = 0;
  v17 = sub_1000027AC(&qword_10008C5B0);
  sub_100019280(a1, &v15[*(int *)(v17 + 44)]);
  sub_10001565C((uint64_t)v7, (uint64_t)v9, &qword_10008C5A0);
  sub_100016550((uint64_t)v9, (uint64_t)v7, &qword_10008C5A0);
  sub_100016550((uint64_t)v7, a2, &qword_10008C5A0);
  v18 = a2 + *(int *)(sub_1000027AC(&qword_10008C5B8) + 48);
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  *(_QWORD *)(v18 + 16) = 0x3FF0000000000000;
  sub_100015590((uint64_t)v9, &qword_10008C5A0);
  return sub_100015590((uint64_t)v7, &qword_10008C5A0);
}

uint64_t sub_100019280@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  char *v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;

  v21 = a1;
  v22 = a2;
  v3 = sub_1000027AC(&qword_10008C5C0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v20 - v8;
  v23 = *a1;
  swift_bridgeObjectRetain(v23);
  v10 = sub_1000027AC(&qword_10008C5C8);
  v11 = type metadata accessor for URL(0);
  v12 = type metadata accessor for NearbyButtonActionLink(0);
  v13 = sub_10001D82C(&qword_10008C5D0, &qword_10008C5C8, (uint64_t)&protocol conformance descriptor for [A]);
  v14 = sub_10001B41C(&qword_10008C5D8, type metadata accessor for NearbyButtonActionLink, (uint64_t)&unk_10006A770);
  v15 = sub_10001B41C(&qword_10008C5E0, type metadata accessor for NearbyButtonActionLink, (uint64_t)&unk_10006A738);
  ForEach<>.init(_:content:)(&v23, sub_100019450, 0, v10, v11, v12, v13, v14, v15);
  LOBYTE(v14) = *(_QWORD *)(*v21 + 16) != 1;
  v16 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v16(v7, v9, v3);
  v17 = v22;
  v16(v22, v7, v3);
  v17[*(int *)(sub_1000027AC(&qword_10008C5E8) + 48)] = v14;
  v18 = *(void (**)(char *, uint64_t))(v4 + 8);
  v18(v9, v3);
  return ((uint64_t (*)(char *, uint64_t))v18)(v7, v3);
}

uint64_t sub_100019450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001B33C(a1, a2, type metadata accessor for NearbyButtonActionLink);
}

uint64_t sub_100019474@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  char *v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t OpaqueTypeConformance2;
  uint64_t v81;
  uint64_t result;
  uint64_t v83;
  uint64_t *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  _QWORD v108[5];

  v93 = a1;
  v2 = sub_1000027AC(&qword_10008BA58);
  __chkstk_darwin(v2);
  v92 = (char *)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for ContainerBackgroundPlacement(0);
  v86 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v85 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_1000027AC(&qword_10008C448);
  __chkstk_darwin(v88);
  v84 = (uint64_t *)((char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v91 = sub_1000027AC(&qword_10008C450);
  v90 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v89 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorScheme(0);
  v106 = *(_QWORD *)(v7 - 8);
  v107 = (uint64_t *)v7;
  v8 = __chkstk_darwin(v7);
  v102 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v105 = (uint64_t)&v83 - v10;
  v11 = type metadata accessor for NearbyButtonContent(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (void **)((char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_1000027AC(&qword_10008C458);
  __chkstk_darwin(v15);
  v17 = (char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for NearbyButtonActionLink(0);
  v103 = *(_QWORD *)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v101 = (uint64_t)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v96 = (uint64_t)&v83 - v22;
  __chkstk_darwin(v21);
  v100 = (uint64_t)&v83 - v23;
  v24 = sub_1000027AC(&qword_10008BA50);
  __chkstk_darwin(v24);
  v26 = (char *)&v83 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for NearbyEntryContent(0);
  __chkstk_darwin(v27);
  v29 = (char *)&v83 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = swift_allocObject(&unk_100082308, 24, 7);
  *(_QWORD *)(v95 + 16) = &_swiftEmptyArrayStorage;
  v30 = type metadata accessor for NearbyLargeWidgetView(0);
  sub_10001B33C(v1 + *(int *)(v30 + 20), (uint64_t)v29, type metadata accessor for NearbyEntryContent);
  sub_10001565C((uint64_t)&v29[*(int *)(v27 + 20)], (uint64_t)v26, &qword_10008BA50);
  v31 = type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v26, 1, v31) == 1)
  {
    __break(1u);
LABEL_22:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "GeneralMapsWidget/ColorSchemeSpecificImageSet.swift", 51, 2, 24, 0);
    __break(1u);
  }
  else
  {
    v32 = *(_QWORD *)&v26[*(int *)(v31 + 20)];
    swift_bridgeObjectRetain(v32);
    sub_10001B54C((uint64_t)v26, type metadata accessor for NearbyEntryContent.ResolvedContent);
    v33 = *(_QWORD *)(v32 + 16);
    if (v33)
    {
      v34 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v83 = v32;
      v35 = v32 + v34;
      v98 = enum case for ColorScheme.light(_:);
      v94 = enum case for ColorScheme.dark(_:);
      v97 = *(_QWORD *)(v12 + 72);
      v36 = type metadata accessor for NearbyButtonContent;
      v99 = v18;
      do
      {
        v104 = v33;
        v37 = v17;
        v38 = v36;
        sub_10001B33C(v35, (uint64_t)v14, v36);
        v39 = v105;
        sub_100052044(v105);
        v40 = *v14;
        v41 = v14[1];
        v42 = (uint64_t)v14;
        v43 = v106;
        v44 = v102;
        v45 = v39;
        v46 = v107;
        (*(void (**)(char *, uint64_t, uint64_t *))(v106 + 16))(v102, v45, v107);
        v47 = (*(uint64_t (**)(char *, uint64_t *))(v43 + 88))(v44, v46);
        if (v47 == v98)
        {
          v41 = v40;
          v17 = v37;
        }
        else
        {
          v17 = v37;
          if (v47 != v94)
            goto LABEL_22;
        }
        v14 = (void **)v42;
        v36 = v38;
        if (v41)
        {
          v48 = v96;
          sub_10001B33C(v42, v96, v38);
          v49 = Image.init(uiImage:)(v41);
          (*(void (**)(uint64_t, uint64_t *))(v106 + 8))(v105, v107);
          sub_10001B54C(v42, v38);
          v50 = v99;
          *(_QWORD *)(v48 + *(int *)(v99 + 20)) = v49;
          sub_10001CDDC(v48, (uint64_t)v17, type metadata accessor for NearbyButtonActionLink);
          v51 = 0;
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t *))(v106 + 8))(v105, v107);
          sub_10001B54C(v42, v38);
          v51 = 1;
          v50 = v99;
        }
        v52 = v103;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v103 + 56))(v17, v51, 1, v50);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v17, 1, v50) == 1)
        {
          sub_100015590((uint64_t)v17, &qword_10008C458);
        }
        else
        {
          v53 = v100;
          sub_10001CDDC((uint64_t)v17, v100, type metadata accessor for NearbyButtonActionLink);
          sub_10001B33C(v53, v101, type metadata accessor for NearbyButtonActionLink);
          v54 = v95;
          v55 = *(_QWORD *)(v95 + 16);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v55);
          *(_QWORD *)(v54 + 16) = v55;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v55 = sub_10005C3D0(0, *(_QWORD *)(v55 + 16) + 1, 1, v55);
            *(_QWORD *)(v95 + 16) = v55;
          }
          v58 = *(_QWORD *)(v55 + 16);
          v57 = *(_QWORD *)(v55 + 24);
          if (v58 >= v57 >> 1)
          {
            v55 = sub_10005C3D0(v57 > 1, v58 + 1, 1, v55);
            *(_QWORD *)(v95 + 16) = v55;
          }
          *(_QWORD *)(v55 + 16) = v58 + 1;
          sub_10001CDDC(v101, v55+ ((*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80))+ *(_QWORD *)(v103 + 72) * v58, type metadata accessor for NearbyButtonActionLink);
          sub_10001B54C(v100, type metadata accessor for NearbyButtonActionLink);
        }
        v35 += v97;
        v33 = v104 - 1;
      }
      while (v104 != 1);
      v59 = v83;
    }
    else
    {
      v59 = v32;
    }
    swift_bridgeObjectRelease(v59);
    v61 = static Alignment.center.getter(v60);
    v62 = (uint64_t)v84;
    *v84 = v61;
    *(_QWORD *)(v62 + 8) = v63;
    v64 = sub_1000027AC(&qword_10008C460);
    v65 = sub_100019D18(v95, v1, v62 + *(int *)(v64 + 44));
    v66 = v85;
    v67 = static ContainerBackgroundPlacement.widget.getter(v65);
    v107 = &v83;
    __chkstk_darwin(v67);
    v69 = static Alignment.center.getter(v68);
    v71 = v70;
    v72 = sub_1000027AC(&qword_10008C468);
    v73 = sub_10001D82C(&qword_10008C470, &qword_10008C448, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v74 = sub_10001D82C(&qword_10008C478, &qword_10008C468, (uint64_t)&unk_10006A990);
    v75 = v89;
    v76 = v71;
    v77 = v88;
    View.containerBackground<A>(for:alignment:content:)(v66, v69, v76, sub_10001CDBC, &v83 - 4, v88, v72, v73, v74);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v66, v87);
    sub_100015590(v62, &qword_10008C448);
    v78 = type metadata accessor for URL(0);
    v79 = (uint64_t)v92;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v92, 1, 1, v78);
    v108[0] = v77;
    v108[1] = v72;
    v108[2] = v73;
    v108[3] = v74;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v108, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
    v81 = v91;
    View.widgetURL(_:)(v79, v91, OpaqueTypeConformance2);
    sub_100015590(v79, &qword_10008BA58);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v75, v81);
    return swift_release(v95);
  }
  return result;
}

uint64_t sub_100019D18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  double *v36;
  char v38[24];

  v6 = sub_1000027AC(&qword_10008BA50);
  __chkstk_darwin(v6);
  v8 = &v38[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for NearbyEntryContent(0);
  __chkstk_darwin(v9);
  v11 = &v38[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = sub_1000027AC(&qword_10008C498);
  v13 = __chkstk_darwin(v12);
  v15 = &v38[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v13);
  v17 = &v38[-v16 - 8];
  v18 = swift_beginAccess(a1 + 16, v38, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16))
  {
    *(_QWORD *)v17 = static HorizontalAlignment.center.getter(v18);
    *((_QWORD *)v17 + 1) = 0;
    v17[16] = 1;
    v19 = sub_1000027AC(&qword_10008C4B0);
    sub_10001A068(a1, (uint64_t)&v17[*(int *)(v19 + 44)]);
    v20 = sub_1000027AC(&qword_10008C4A0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v17, 0, 1, v20);
  }
  else
  {
    v21 = sub_1000027AC(&qword_10008C4A0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v17, 1, 1, v21);
  }
  v22 = a2 + *(int *)(type metadata accessor for NearbyLargeWidgetView(0) + 20);
  v23 = *(unsigned __int8 *)(v22 + 8);
  v24 = 0.0;
  if (v23 == 2)
    goto LABEL_7;
  v25 = *(_QWORD *)v22;
  sub_10001B33C(v22, (uint64_t)v11, type metadata accessor for NearbyEntryContent);
  sub_10001565C((uint64_t)&v11[*(int *)(v9 + 20)], (uint64_t)v8, &qword_10008BA50);
  v26 = type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v8, 1, v26);
  if ((_DWORD)result != 1)
  {
    v28 = &v8[*(int *)(v26 + 28)];
    v29 = *(_QWORD *)v28;
    v30 = v28[8];
    sub_10001B54C((uint64_t)v8, type metadata accessor for NearbyEntryContent.ResolvedContent);
    if ((v30 & 1) == 0)
    {
      if (qword_10008B970 != -1)
        swift_once(&qword_10008B970, sub_1000182D4);
      v31 = v23 & 1;
      v33 = *(double *)&qword_100090B30;
      v34 = *(double *)&qword_100090B30;
      if (qword_10008B978 != -1)
      {
        swift_once(&qword_10008B978, sub_1000182E4);
        v34 = *(double *)&qword_100090B30;
      }
      v24 = sub_10002CE54(0.0, 0.0, v33 + *(double *)&qword_100090B38 + v34, 0.0);
      v32 = v35;
      goto LABEL_13;
    }
LABEL_7:
    v25 = 0;
    v29 = 0;
    v31 = 2;
    v32 = 0;
LABEL_13:
    sub_100016550((uint64_t)v17, (uint64_t)v15, &qword_10008C498);
    sub_100016550((uint64_t)v15, a3, &qword_10008C498);
    v36 = (double *)(a3 + *(int *)(sub_1000027AC(&qword_10008C4A8) + 48));
    *(_QWORD *)v36 = v25;
    *((_QWORD *)v36 + 1) = v31;
    *((_QWORD *)v36 + 2) = v29;
    v36[3] = v24;
    *((_QWORD *)v36 + 4) = v32;
    sub_100015590((uint64_t)v17, &qword_10008C498);
    return sub_100015590((uint64_t)v15, &qword_10008C498);
  }
  __break(1u);
  return result;
}

uint64_t sub_10001A068@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v4 = sub_1000027AC(&qword_10008C4B8);
  v5 = __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v9 = (char *)&v17 - v8;
  if (qword_10008B970 != -1)
    swift_once(&qword_10008B970, sub_1000182D4);
  v10 = qword_100090B30;
  *v7 = swift_getKeyPath(&unk_10006A698);
  v11 = sub_1000027AC(&qword_10008C488);
  v12 = swift_storeEnumTagMultiPayload(v7, v11, 0);
  *(_QWORD *)((char *)v7 + *(int *)(v4 + 36)) = v10;
  v13 = (char *)v7 + *(int *)(v4 + 40);
  *(_QWORD *)v13 = static VerticalAlignment.center.getter(v12);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  v14 = sub_1000027AC(&qword_10008C4C0);
  sub_10001A204(a1, &v13[*(int *)(v14 + 44)]);
  sub_10001565C((uint64_t)v7, (uint64_t)v9, &qword_10008C4B8);
  sub_100016550((uint64_t)v9, (uint64_t)v7, &qword_10008C4B8);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = 0x3FF0000000000000;
  v15 = sub_1000027AC(&qword_10008C4C8);
  sub_100016550((uint64_t)v7, a2 + *(int *)(v15 + 48), &qword_10008C4B8);
  sub_100015590((uint64_t)v9, &qword_10008C4B8);
  return sub_100015590((uint64_t)v7, &qword_10008C4B8);
}

uint64_t sub_10001A204@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _QWORD v35[3];
  _BYTE v36[24];

  v33 = a2;
  v3 = sub_1000027AC(&qword_10008C4D0);
  v4 = __chkstk_darwin(v3);
  v34 = (uint64_t)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v31 - v6;
  v8 = sub_1000027AC(&qword_10008C4D8);
  v31 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v32 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v31 - v11;
  swift_beginAccess(a1 + 16, v36, 0, 0);
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
  v35[0] = 0;
  v35[1] = v13;
  KeyPath = swift_getKeyPath(&unk_10006A700);
  swift_retain(a1);
  v15 = sub_1000027AC(&qword_10008C4E0);
  v16 = sub_1000027AC(&qword_10008C4E8);
  v17 = sub_10001CE38();
  v18 = sub_10001D82C(&qword_10008C500, &qword_10008C4E8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  ForEach<>.init(_:id:content:)(v35, KeyPath, sub_10001CE30, a1, v15, v16, v17, &protocol witness table for Int, v18);
  swift_beginAccess(a1 + 16, v35, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) == 1)
  {
    v19 = sub_1000027AC(&qword_10008C518);
    v20 = sub_10001D82C(&qword_10008C520, &qword_10008C518, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    ForEach<>.init(_:content:)(0, 3, sub_10001A674, 0, v19, v20);
    v21 = sub_1000027AC(&qword_10008C508);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v7, 0, 1, v21);
  }
  else
  {
    v22 = sub_1000027AC(&qword_10008C508);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v7, 1, 1, v22);
  }
  v24 = v31;
  v23 = v32;
  v25 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
  v25(v32, v12, v8);
  v26 = v34;
  sub_100016550((uint64_t)v7, v34, &qword_10008C4D0);
  v27 = v33;
  v25(v33, v23, v8);
  v28 = sub_1000027AC(&qword_10008C510);
  sub_100016550(v26, (uint64_t)&v27[*(int *)(v28 + 48)], &qword_10008C4D0);
  sub_100015590((uint64_t)v7, &qword_10008C4D0);
  v29 = *(void (**)(char *, uint64_t))(v24 + 8);
  v29(v12, v8);
  sub_100015590(v26, &qword_10008C4D0);
  return ((uint64_t (*)(char *, uint64_t))v29)(v23, v8);
}

uint64_t sub_10001A518@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  _BYTE v21[24];

  v6 = type metadata accessor for NearbyButtonActionLink(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v8);
  v12 = &v21[-v11 - 8];
  v13 = *a1;
  result = swift_beginAccess(a2 + 16, v21, 0, 0);
  if ((v13 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v15 = *(_QWORD *)(a2 + 16);
  v16 = *(_QWORD *)(v15 + 16);
  if (v13 >= v16)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  sub_10001B33C(v15+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v13, (uint64_t)v12, type metadata accessor for NearbyButtonActionLink);
  v17 = v13 >= v16 - 1;
  v18 = !v17;
  sub_10001B33C((uint64_t)v12, (uint64_t)v10, type metadata accessor for NearbyButtonActionLink);
  sub_10001B33C((uint64_t)v10, a3, type metadata accessor for NearbyButtonActionLink);
  v19 = a3 + *(int *)(sub_1000027AC(&qword_10008C528) + 48);
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = v18;
  *(_BYTE *)(v19 + 9) = v17;
  sub_10001B54C((uint64_t)v12, type metadata accessor for NearbyButtonActionLink);
  return sub_10001B54C((uint64_t)v10, type metadata accessor for NearbyButtonActionLink);
}

void sub_10001A674(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t sub_10001A684@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;

  v37 = a3;
  v5 = sub_1000027AC(&qword_10008C480);
  __chkstk_darwin(v5);
  v36 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000027AC(&qword_10008C278);
  __chkstk_darwin(v7);
  v9 = (char **)((char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_1000027AC(&qword_10008BA50);
  __chkstk_darwin(v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for NearbyEntryContent(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v36 - v17;
  v19 = (int *)sub_1000027AC(&qword_10008C468);
  __chkstk_darwin(v19);
  v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1 + *(int *)(a2(0) + 20);
  v23 = (uint64_t)v18;
  sub_10001B33C(v22, (uint64_t)v18, type metadata accessor for NearbyEntryContent);
  LODWORD(v18) = *(unsigned __int8 *)(v22 + 8);
  sub_10001B33C(v22, (uint64_t)v16, type metadata accessor for NearbyEntryContent);
  if ((_DWORD)v18 == 2)
  {
    sub_10001B54C((uint64_t)v16, type metadata accessor for NearbyEntryContent);
    v24 = 0;
LABEL_5:
    v28 = v36;
    v29 = v37;
    v30 = v24 & 1;
    *v9 = swift_getKeyPath(&unk_10006A518);
    v31 = sub_1000027AC(&qword_10008C240);
    swift_storeEnumTagMultiPayload(v9, v31, 0);
    *v28 = swift_getKeyPath(&unk_10006A698);
    v32 = sub_1000027AC(&qword_10008C488);
    swift_storeEnumTagMultiPayload(v28, v32, 0);
    KeyPath = swift_getKeyPath(&unk_10006A6C8);
    v34 = (uint64_t *)&v21[v19[10]];
    *v34 = KeyPath;
    v35 = sub_1000027AC(&qword_10008C490);
    swift_storeEnumTagMultiPayload(v34, v35, 0);
    sub_10001565C((uint64_t)v9, (uint64_t)v21, &qword_10008C278);
    sub_10001565C((uint64_t)v28, (uint64_t)&v21[v19[9]], &qword_10008C480);
    sub_10001CDDC(v23, (uint64_t)&v21[v19[11]], type metadata accessor for NearbyEntryContent);
    v21[v19[12]] = v30;
    return sub_10001565C((uint64_t)v21, v29, &qword_10008C468);
  }
  sub_100016550((uint64_t)&v16[*(int *)(v13 + 20)], (uint64_t)v12, &qword_10008BA50);
  v25 = type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v12, 1, v25);
  if ((_DWORD)result != 1)
  {
    sub_10001B54C((uint64_t)v16, type metadata accessor for NearbyEntryContent);
    v27 = v12[*(int *)(v25 + 28) + 8];
    sub_10001B54C((uint64_t)v12, type metadata accessor for NearbyEntryContent.ResolvedContent);
    v24 = v27 ^ 1;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_10001A9D8()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_10001A9F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t result;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v70 = a1;
  v59 = sub_1000027AC(&qword_10008C208);
  __chkstk_darwin(v59);
  v60 = (uint64_t)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_1000027AC(&qword_10008C210);
  __chkstk_darwin(v72);
  v62 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for NearbyLargeWidgetView(0);
  __chkstk_darwin(v58);
  v63 = (uint64_t *)((char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for NearbyEntryContent(0);
  __chkstk_darwin(v5);
  v64 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for NearbyMediumWidgetView(0);
  __chkstk_darwin(v67);
  v61 = (uint64_t *)((char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v74 = sub_1000027AC(&qword_10008C218);
  __chkstk_darwin(v74);
  v68 = (uint64_t)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_1000027AC(&qword_10008C220);
  __chkstk_darwin(v69);
  v66 = (uint64_t)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_1000027AC(&qword_10008C228);
  __chkstk_darwin(v65);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_1000027AC(&qword_10008C230);
  __chkstk_darwin(v71);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_1000027AC(&qword_10008C238);
  __chkstk_darwin(v73);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for NearbySmallWidgetView(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for WidgetFamily(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NearbyWidgetView(0);
  sub_100052074((uint64_t)v22);
  v23 = (*(uint64_t (**)(char *, uint64_t))(v20 + 88))(v22, v19);
  if (v23 == enum case for WidgetFamily.systemSmall(_:))
  {
    sub_10001B33C(v1, (uint64_t)v18, type metadata accessor for NearbyEntryContent);
    sub_10001B33C((uint64_t)v18, (uint64_t)v11, type metadata accessor for NearbySmallWidgetView);
    swift_storeEnumTagMultiPayload(v11, v65, 0);
    v24 = sub_10001B41C(&qword_10008C258, type metadata accessor for NearbySmallWidgetView, (uint64_t)&unk_10006A5F8);
    sub_10001B41C(&qword_10008C260, type metadata accessor for NearbyMediumWidgetView, (uint64_t)&unk_10006A5A8);
    _ConditionalContent<>.init(storage:)(v11, v16, v67, v24);
    v25 = v66;
    sub_100016550((uint64_t)v13, v66, &qword_10008C230);
    swift_storeEnumTagMultiPayload(v25, v69, 0);
    v26 = sub_10001B380();
    sub_10001B45C();
    _ConditionalContent<>.init(storage:)(v25, v71, v72, v26);
    sub_100015590((uint64_t)v13, &qword_10008C230);
    v27 = v68;
    sub_100016550((uint64_t)v15, v68, &qword_10008C238);
    swift_storeEnumTagMultiPayload(v27, v74, 0);
    v28 = sub_10001B4E0();
    _ConditionalContent<>.init(storage:)(v27, v73, &type metadata for Never, v28);
    sub_100015590((uint64_t)v15, &qword_10008C238);
    v29 = (uint64_t)v18;
    v30 = type metadata accessor for NearbySmallWidgetView;
    return sub_10001B54C(v29, v30);
  }
  v56 = v16;
  v57 = v15;
  v31 = v65;
  v32 = v66;
  v33 = v67;
  v34 = v68;
  if (v23 == enum case for WidgetFamily.systemMedium(_:))
  {
    v35 = v64;
    sub_10001B33C(v1, v64, type metadata accessor for NearbyEntryContent);
    KeyPath = swift_getKeyPath(&unk_10006A518);
    v37 = (uint64_t)v61;
    *v61 = KeyPath;
    v38 = sub_1000027AC(&qword_10008C240);
    swift_storeEnumTagMultiPayload(v37, v38, 0);
    sub_10001CDDC(v35, v37 + *(int *)(v33 + 20), type metadata accessor for NearbyEntryContent);
    sub_10001B33C(v37, (uint64_t)v11, type metadata accessor for NearbyMediumWidgetView);
    swift_storeEnumTagMultiPayload(v11, v31, 1);
    v39 = sub_10001B41C(&qword_10008C258, type metadata accessor for NearbySmallWidgetView, (uint64_t)&unk_10006A5F8);
    sub_10001B41C(&qword_10008C260, type metadata accessor for NearbyMediumWidgetView, (uint64_t)&unk_10006A5A8);
    _ConditionalContent<>.init(storage:)(v11, v56, v33, v39);
    sub_100016550((uint64_t)v13, v32, &qword_10008C230);
    swift_storeEnumTagMultiPayload(v32, v69, 0);
    v40 = sub_10001B380();
    sub_10001B45C();
    v41 = (uint64_t)v57;
    _ConditionalContent<>.init(storage:)(v32, v71, v72, v40);
    sub_100015590((uint64_t)v13, &qword_10008C230);
    sub_100016550(v41, v34, &qword_10008C238);
    swift_storeEnumTagMultiPayload(v34, v74, 0);
    v42 = sub_10001B4E0();
    _ConditionalContent<>.init(storage:)(v34, v73, &type metadata for Never, v42);
    sub_100015590(v41, &qword_10008C238);
    v29 = v37;
    v30 = type metadata accessor for NearbyMediumWidgetView;
    return sub_10001B54C(v29, v30);
  }
  if (v23 == enum case for WidgetFamily.systemLarge(_:))
  {
    v43 = v66;
    v44 = v64;
    sub_10001B33C(v1, v64, type metadata accessor for NearbyEntryContent);
    v45 = swift_getKeyPath(&unk_10006A518);
    v46 = (uint64_t)v63;
    *v63 = v45;
    v47 = sub_1000027AC(&qword_10008C240);
    swift_storeEnumTagMultiPayload(v46, v47, 0);
    v48 = v58;
    sub_10001CDDC(v44, v46 + *(int *)(v58 + 20), type metadata accessor for NearbyEntryContent);
    v49 = v60;
    sub_10001B33C(v46, v60, type metadata accessor for NearbyLargeWidgetView);
    swift_storeEnumTagMultiPayload(v49, v59, 0);
    v50 = sub_10001B41C(&qword_10008C248, type metadata accessor for NearbyLargeWidgetView, (uint64_t)&unk_10006A648);
    v51 = (uint64_t)v62;
    _ConditionalContent<>.init(storage:)(v49, v48, &type metadata for Never, v50);
    sub_100016550(v51, v43, &qword_10008C210);
    swift_storeEnumTagMultiPayload(v43, v69, 1);
    v52 = sub_10001B380();
    sub_10001B45C();
    v53 = (uint64_t)v57;
    _ConditionalContent<>.init(storage:)(v43, v71, v72, v52);
    sub_100015590(v51, &qword_10008C210);
    sub_100016550(v53, v34, &qword_10008C238);
    swift_storeEnumTagMultiPayload(v34, v74, 0);
    v54 = sub_10001B4E0();
    _ConditionalContent<>.init(storage:)(v34, v73, &type metadata for Never, v54);
    sub_100015590(v53, &qword_10008C238);
    v29 = v46;
    v30 = type metadata accessor for NearbyLargeWidgetView;
    return sub_10001B54C(v29, v30);
  }
  if (v23 == enum case for WidgetFamily.systemExtraLarge(_:)
    || v23 == enum case for WidgetFamily.accessoryCircular(_:)
    || v23 == enum case for WidgetFamily.accessoryRectangular(_:)
    || v23 == enum case for WidgetFamily.accessoryInline(_:))
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, 0x8000000100079690, "GeneralMapsWidget/NearbyWidgetViews.swift", 41, 2, 206, 0);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "GeneralMapsWidget/NearbyWidgetViews.swift", 41, 2, 208, 0);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for NearbyLargeWidgetView(uint64_t a1)
{
  return sub_100006A5C(a1, (uint64_t *)&unk_10008C2D8, (uint64_t)&nominal type descriptor for NearbyLargeWidgetView);
}

uint64_t type metadata accessor for NearbyMediumWidgetView(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008C370, (uint64_t)&nominal type descriptor for NearbyMediumWidgetView);
}

uint64_t type metadata accessor for NearbySmallWidgetView(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008C400, (uint64_t)&nominal type descriptor for NearbySmallWidgetView);
}

uint64_t sub_10001B33C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_10001B380()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C250;
  if (!qword_10008C250)
  {
    v1 = sub_1000027EC(&qword_10008C230);
    sub_10001B41C(&qword_10008C258, type metadata accessor for NearbySmallWidgetView, (uint64_t)&unk_10006A5F8);
    sub_10001B41C(&qword_10008C260, type metadata accessor for NearbyMediumWidgetView, (uint64_t)&unk_10006A5A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008C250);
  }
  return result;
}

uint64_t sub_10001B41C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001B45C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C268;
  if (!qword_10008C268)
  {
    v1 = sub_1000027EC(&qword_10008C210);
    sub_10001B41C(&qword_10008C248, type metadata accessor for NearbyLargeWidgetView, (uint64_t)&unk_10006A648);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008C268);
  }
  return result;
}

unint64_t sub_10001B4E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C270;
  if (!qword_10008C270)
  {
    v1 = sub_1000027EC(&qword_10008C238);
    sub_10001B380();
    sub_10001B45C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008C270);
  }
  return result;
}

uint64_t sub_10001B54C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10001B5A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001B5AC);
}

uint64_t sub_10001B5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001B5BC);
}

void sub_10001B5C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_10001B658(319, (unint64_t *)&unk_10008C2E8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for NearbyEntryContent(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_10001B658(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Environment.Content(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

_QWORD *sub_10001B6A4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  char *v34;
  char *v35;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_1000027AC(&qword_10008C240);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *(_QWORD *)v15 = *(_QWORD *)((char *)a2 + v14);
    v15[8] = *((_BYTE *)a2 + v14 + 8);
    v17 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
    v18 = &v15[v17];
    v19 = &v16[v17];
    v20 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
    v21 = *((_QWORD *)v20 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
    {
      v22 = sub_1000027AC(&qword_10008BA50);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v23 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v18, v19, v23);
      v24 = v20[5];
      v25 = *(_QWORD *)&v19[v24];
      *(_QWORD *)&v18[v24] = v25;
      v26 = v20[6];
      v27 = &v18[v26];
      v28 = &v19[v26];
      v29 = *(void **)&v19[v26];
      swift_bridgeObjectRetain(v25);
      if (v29 == (void *)1)
      {
        *(_OWORD *)v27 = *(_OWORD *)v28;
      }
      else
      {
        v30 = (void *)*((_QWORD *)v28 + 1);
        *(_QWORD *)v27 = v29;
        *((_QWORD *)v27 + 1) = v30;
        v31 = v29;
        v32 = v30;
      }
      v33 = v20[7];
      v34 = &v18[v33];
      v35 = &v19[v33];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[8] = v35[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v21 + 56))(v18, 0, 1, v20);
    }
  }
  return a1;
}

void sub_10001B894(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;

  v4 = sub_1000027AC(&qword_10008C240);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (char *)a1 + *(int *)(a2 + 20);
  v7 = &v6[*(int *)(type metadata accessor for NearbyEntryContent(0) + 20)];
  v8 = type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    v9 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
    swift_bridgeObjectRelease(*(_QWORD *)&v7[*(int *)(v8 + 20)]);
    v10 = (id *)&v7[*(int *)(v8 + 24)];
    if (*v10 != (id)1)
    {

    }
  }
}

_QWORD *sub_10001B98C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  char *v32;
  char *v33;

  v6 = sub_1000027AC(&qword_10008C240);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)((char *)a2 + v12);
  v13[8] = *((_BYTE *)a2 + v12 + 8);
  v15 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  v16 = &v13[v15];
  v17 = &v14[v15];
  v18 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v19 = *((_QWORD *)v18 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
  {
    v20 = sub_1000027AC(&qword_10008BA50);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v16, v17, v21);
    v22 = v18[5];
    v23 = *(_QWORD *)&v17[v22];
    *(_QWORD *)&v16[v22] = v23;
    v24 = v18[6];
    v25 = &v16[v24];
    v26 = &v17[v24];
    v27 = *(void **)&v17[v24];
    swift_bridgeObjectRetain(v23);
    if (v27 == (void *)1)
    {
      *(_OWORD *)v25 = *(_OWORD *)v26;
    }
    else
    {
      v28 = (void *)*((_QWORD *)v26 + 1);
      *(_QWORD *)v25 = v27;
      *((_QWORD *)v25 + 1) = v28;
      v29 = v27;
      v30 = v28;
    }
    v31 = v18[7];
    v32 = &v16[v31];
    v33 = &v17[v31];
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v32[8] = v33[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v19 + 56))(v16, 0, 1, v18);
  }
  return a1;
}

uint64_t *sub_10001BB50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, int *);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  id v51;
  void *v52;
  void *v53;
  id v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;

  if (a1 != a2)
  {
    sub_100015590((uint64_t)a1, &qword_10008C240);
    v6 = sub_1000027AC(&qword_10008C240);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(uint64_t *)((char *)a2 + v12);
  v13[8] = v14[8];
  *(_QWORD *)v13 = v15;
  v16 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  v17 = &v13[v16];
  v18 = &v14[v16];
  v19 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v20 = *((_QWORD *)v19 - 1);
  v21 = *(uint64_t (**)(char *, uint64_t, int *))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (v23)
    {
      sub_10001B54C((uint64_t)v17, type metadata accessor for NearbyEntryContent.ResolvedContent);
      goto LABEL_12;
    }
    v32 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 24))(v17, v18, v32);
    v33 = v19[5];
    v34 = *(_QWORD *)&v18[v33];
    v35 = *(_QWORD *)&v17[v33];
    *(_QWORD *)&v17[v33] = v34;
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRelease(v35);
    v36 = v19[6];
    v37 = &v17[v36];
    v38 = &v18[v36];
    v39 = *(void **)&v17[v36];
    v40 = *(void **)&v18[v36];
    if (v39 == (void *)1)
    {
      if (v40 != (void *)1)
      {
        *(_QWORD *)v37 = v40;
        v41 = (void *)*((_QWORD *)v38 + 1);
        *((_QWORD *)v37 + 1) = v41;
        v42 = v40;
        v43 = v41;
LABEL_22:
        v55 = v19[7];
        v56 = &v17[v55];
        v57 = &v18[v55];
        v58 = *(_QWORD *)v57;
        v56[8] = v57[8];
        *(_QWORD *)v56 = v58;
        return a1;
      }
    }
    else
    {
      if (v40 != (void *)1)
      {
        *(_QWORD *)v37 = v40;
        v51 = v40;

        v52 = (void *)*((_QWORD *)v37 + 1);
        v53 = (void *)*((_QWORD *)v38 + 1);
        *((_QWORD *)v37 + 1) = v53;
        v54 = v53;

        goto LABEL_22;
      }
      sub_100016DF4((id *)v37);
    }
    *(_OWORD *)v37 = *(_OWORD *)v38;
    goto LABEL_22;
  }
  if (v23)
  {
LABEL_12:
    v31 = sub_1000027AC(&qword_10008BA50);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    return a1;
  }
  v24 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v17, v18, v24);
  v25 = v19[5];
  v26 = *(_QWORD *)&v18[v25];
  *(_QWORD *)&v17[v25] = v26;
  v27 = v19[6];
  v28 = &v17[v27];
  v29 = &v18[v27];
  v30 = *(void **)&v18[v27];
  swift_bridgeObjectRetain(v26);
  if (v30 == (void *)1)
  {
    *(_OWORD *)v28 = *(_OWORD *)v29;
  }
  else
  {
    *(_QWORD *)v28 = v30;
    v44 = (void *)*((_QWORD *)v29 + 1);
    *((_QWORD *)v28 + 1) = v44;
    v45 = v30;
    v46 = v44;
  }
  v47 = v19[7];
  v48 = &v17[v47];
  v49 = &v18[v47];
  v50 = *(_QWORD *)v49;
  v48[8] = v49[8];
  *(_QWORD *)v48 = v50;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

char *sub_10001BE30(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v6 = sub_1000027AC(&qword_10008C240);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_QWORD *)v9 = *(_QWORD *)&a2[v8];
  v9[8] = a2[v8 + 8];
  v11 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  v12 = &v9[v11];
  v13 = &v10[v11];
  v14 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000027AC(&qword_10008BA50);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v12, v13, v17);
    *(_QWORD *)&v12[v14[5]] = *(_QWORD *)&v13[v14[5]];
    *(_OWORD *)&v12[v14[6]] = *(_OWORD *)&v13[v14[6]];
    v18 = v14[7];
    v19 = &v12[v18];
    v20 = &v13[v18];
    v19[8] = v20[8];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

char *sub_10001BFBC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  char *v34;
  char *v35;

  if (a1 != a2)
  {
    sub_100015590((uint64_t)a1, &qword_10008C240);
    v6 = sub_1000027AC(&qword_10008C240);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_QWORD *)v9 = *(_QWORD *)&a2[v8];
  v9[8] = a2[v8 + 8];
  v11 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  v12 = &v9[v11];
  v13 = &v10[v11];
  v14 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (v18)
    {
      sub_10001B54C((uint64_t)v12, type metadata accessor for NearbyEntryContent.ResolvedContent);
      goto LABEL_10;
    }
    v25 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v12, v13, v25);
    v26 = v14[5];
    v27 = *(_QWORD *)&v12[v26];
    *(_QWORD *)&v12[v26] = *(_QWORD *)&v13[v26];
    swift_bridgeObjectRelease(v27);
    v28 = v14[6];
    v29 = &v12[v28];
    v30 = &v13[v28];
    v31 = *(void **)&v12[v28];
    if (v31 != (void *)1)
    {
      if (*(_QWORD *)v30 != 1)
      {
        *(_QWORD *)v29 = *(_QWORD *)v30;

        v32 = (void *)*((_QWORD *)v29 + 1);
        *((_QWORD *)v29 + 1) = *((_QWORD *)v30 + 1);

        goto LABEL_17;
      }
      sub_100016DF4((id *)v29);
    }
    *(_OWORD *)v29 = *(_OWORD *)v30;
LABEL_17:
    v33 = v14[7];
    v34 = &v12[v33];
    v35 = &v13[v33];
    *(_QWORD *)v34 = *(_QWORD *)v35;
    v34[8] = v35[8];
    return a1;
  }
  if (v18)
  {
LABEL_10:
    v23 = sub_1000027AC(&qword_10008BA50);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  v19 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v12, v13, v19);
  *(_QWORD *)&v12[v14[5]] = *(_QWORD *)&v13[v14[5]];
  *(_OWORD *)&v12[v14[6]] = *(_OWORD *)&v13[v14[6]];
  v20 = v14[7];
  v21 = &v12[v20];
  v22 = &v13[v20];
  v21[8] = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t sub_10001C238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001C244);
}

uint64_t sub_10001C248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_1000027AC(&qword_10008C278);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for NearbyEntryContent(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10001C2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001C2CC);
}

uint64_t sub_10001C2D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_1000027AC(&qword_10008C278);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for NearbyEntryContent(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_10001C350(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  char *v24;
  char *v25;

  v4 = type metadata accessor for NearbyEntryContent(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v12);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v6 = *(int *)(v4 + 20);
    v7 = (char *)(a1 + v6);
    v8 = (char *)a2 + v6;
    v9 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
    v10 = *((_QWORD *)v9 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
    {
      v11 = sub_1000027AC(&qword_10008BA50);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      v13 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v7, v8, v13);
      v14 = v9[5];
      v15 = *(_QWORD *)&v8[v14];
      *(_QWORD *)&v7[v14] = v15;
      v16 = v9[6];
      v17 = &v7[v16];
      v18 = &v8[v16];
      v19 = *(void **)&v8[v16];
      swift_bridgeObjectRetain(v15);
      if (v19 == (void *)1)
      {
        *(_OWORD *)v17 = *(_OWORD *)v18;
      }
      else
      {
        v20 = (void *)*((_QWORD *)v18 + 1);
        *(_QWORD *)v17 = v19;
        *((_QWORD *)v17 + 1) = v20;
        v21 = v19;
        v22 = v20;
      }
      v23 = v9[7];
      v24 = &v7[v23];
      v25 = &v8[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v25[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return a1;
}

void sub_10001C4C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id *v4;

  v1 = a1 + *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  v2 = type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2))
  {
    v3 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v1, v3);
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + *(int *)(v2 + 20)));
    v4 = (id *)(v1 + *(int *)(v2 + 24));
    if (*v4 != (id)1)
    {

    }
  }
}

uint64_t sub_10001C564(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  char *v21;
  char *v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  v5 = (char *)(a1 + v4);
  v6 = (char *)(a2 + v4);
  v7 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v8 = *((_QWORD *)v7 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    v9 = sub_1000027AC(&qword_10008BA50);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v5, v6, v10);
    v11 = v7[5];
    v12 = *(_QWORD *)&v6[v11];
    *(_QWORD *)&v5[v11] = v12;
    v13 = v7[6];
    v14 = &v5[v13];
    v15 = &v6[v13];
    v16 = *(void **)&v6[v13];
    swift_bridgeObjectRetain(v12);
    if (v16 == (void *)1)
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
    }
    else
    {
      v17 = (void *)*((_QWORD *)v15 + 1);
      *(_QWORD *)v14 = v16;
      *((_QWORD *)v14 + 1) = v17;
      v18 = v16;
      v19 = v17;
    }
    v20 = v7[7];
    v21 = &v5[v20];
    v22 = &v6[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_10001C6A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, int *);
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  v6 = (char *)(a1 + v5);
  v7 = (char *)a2 + v5;
  v8 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v9 = *((_QWORD *)v8 - 1);
  v10 = *(uint64_t (**)(char *, uint64_t, int *))(v9 + 48);
  v11 = v10(v6, 1, v8);
  v12 = v10(v7, 1, v8);
  if (!v11)
  {
    if (v12)
    {
      sub_10001B54C((uint64_t)v6, type metadata accessor for NearbyEntryContent.ResolvedContent);
      goto LABEL_7;
    }
    v21 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v6, v7, v21);
    v22 = v8[5];
    v23 = *(_QWORD *)&v7[v22];
    v24 = *(_QWORD *)&v6[v22];
    *(_QWORD *)&v6[v22] = v23;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRelease(v24);
    v25 = v8[6];
    v26 = &v6[v25];
    v27 = &v7[v25];
    v28 = *(void **)&v6[v25];
    v29 = *(void **)&v7[v25];
    if (v28 == (void *)1)
    {
      if (v29 != (void *)1)
      {
        *(_QWORD *)v26 = v29;
        v30 = (void *)*((_QWORD *)v27 + 1);
        *((_QWORD *)v26 + 1) = v30;
        v31 = v29;
        v32 = v30;
LABEL_17:
        v44 = v8[7];
        v45 = &v6[v44];
        v46 = &v7[v44];
        v47 = *(_QWORD *)v46;
        v45[8] = v46[8];
        *(_QWORD *)v45 = v47;
        return a1;
      }
    }
    else
    {
      if (v29 != (void *)1)
      {
        *(_QWORD *)v26 = v29;
        v40 = v29;

        v41 = (void *)*((_QWORD *)v26 + 1);
        v42 = (void *)*((_QWORD *)v27 + 1);
        *((_QWORD *)v26 + 1) = v42;
        v43 = v42;

        goto LABEL_17;
      }
      sub_100016DF4((id *)v26);
    }
    *(_OWORD *)v26 = *(_OWORD *)v27;
    goto LABEL_17;
  }
  if (v12)
  {
LABEL_7:
    v20 = sub_1000027AC(&qword_10008BA50);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  v13 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v6, v7, v13);
  v14 = v8[5];
  v15 = *(_QWORD *)&v7[v14];
  *(_QWORD *)&v6[v14] = v15;
  v16 = v8[6];
  v17 = &v6[v16];
  v18 = &v7[v16];
  v19 = *(void **)&v7[v16];
  swift_bridgeObjectRetain(v15);
  if (v19 == (void *)1)
  {
    *(_OWORD *)v17 = *(_OWORD *)v18;
  }
  else
  {
    *(_QWORD *)v17 = v19;
    v33 = (void *)*((_QWORD *)v18 + 1);
    *((_QWORD *)v17 + 1) = v33;
    v34 = v19;
    v35 = v33;
  }
  v36 = v8[7];
  v37 = &v6[v36];
  v38 = &v7[v36];
  v39 = *(_QWORD *)v38;
  v37[8] = v38[8];
  *(_QWORD *)v37 = v39;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v9 + 56))(v6, 0, 1, v8);
  return a1;
}

uint64_t sub_10001C8F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  v5 = (char *)(a1 + v4);
  v6 = (char *)(a2 + v4);
  v7 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v8 = *((_QWORD *)v7 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    v9 = sub_1000027AC(&qword_10008BA50);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v5, v6, v10);
    *(_QWORD *)&v5[v7[5]] = *(_QWORD *)&v6[v7[5]];
    *(_OWORD *)&v5[v7[6]] = *(_OWORD *)&v6[v7[6]];
    v11 = v7[7];
    v12 = &v5[v11];
    v13 = &v6[v11];
    v12[8] = v13[8];
    *(_QWORD *)v12 = *(_QWORD *)v13;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_10001CA00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t (*v9)(char *, uint64_t, int *);
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  char *v27;
  char *v28;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  v5 = (char *)(a1 + v4);
  v6 = (char *)(a2 + v4);
  v7 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(uint64_t (**)(char *, uint64_t, int *))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (v11)
    {
      sub_10001B54C((uint64_t)v5, type metadata accessor for NearbyEntryContent.ResolvedContent);
      goto LABEL_6;
    }
    v18 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v5, v6, v18);
    v19 = v7[5];
    v20 = *(_QWORD *)&v5[v19];
    *(_QWORD *)&v5[v19] = *(_QWORD *)&v6[v19];
    swift_bridgeObjectRelease(v20);
    v21 = v7[6];
    v22 = &v5[v21];
    v23 = &v6[v21];
    v24 = *(void **)&v5[v21];
    if (v24 != (void *)1)
    {
      if (*(_QWORD *)v23 != 1)
      {
        *(_QWORD *)v22 = *(_QWORD *)v23;

        v25 = (void *)*((_QWORD *)v22 + 1);
        *((_QWORD *)v22 + 1) = *((_QWORD *)v23 + 1);

        goto LABEL_13;
      }
      sub_100016DF4((id *)v22);
    }
    *(_OWORD *)v22 = *(_OWORD *)v23;
LABEL_13:
    v26 = v7[7];
    v27 = &v5[v26];
    v28 = &v6[v26];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    return a1;
  }
  if (v11)
  {
LABEL_6:
    v16 = sub_1000027AC(&qword_10008BA50);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  v12 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v5, v6, v12);
  *(_QWORD *)&v5[v7[5]] = *(_QWORD *)&v6[v7[5]];
  *(_OWORD *)&v5[v7[6]] = *(_OWORD *)&v6[v7[6]];
  v13 = v7[7];
  v14 = &v5[v13];
  v15 = &v6[v13];
  v14[8] = v15[8];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t sub_10001CBE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001CBF4);
}

uint64_t sub_10001CBF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NearbyEntryContent(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10001CC30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001CC3C);
}

uint64_t sub_10001CC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NearbyEntryContent(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_10001CC7C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for NearbyEntryContent(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_10001CCE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C438;
  if (!qword_10008C438)
  {
    v1 = sub_1000027EC(&qword_10008C440);
    sub_10001B4E0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008C438);
  }
  return result;
}

uint64_t sub_10001CD54(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006C824, 1);
}

uint64_t sub_10001CD64(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006C7FC, 1);
}

uint64_t sub_10001CD74(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006C7D4, 1);
}

uint64_t type metadata accessor for NearbyButtonActionLink(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008C648, (uint64_t)&nominal type descriptor for NearbyButtonActionLink);
}

uint64_t sub_10001CD98()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001CDBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10001A684(*(_QWORD *)(v1 + 16), type metadata accessor for NearbyLargeWidgetView, a1);
}

uint64_t sub_10001CDDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10001CE30@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10001A518(a1, v2, a2);
}

unint64_t sub_10001CE38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C4F0;
  if (!qword_10008C4F0)
  {
    v1 = sub_1000027EC(&qword_10008C4E0);
    sub_10001CEA4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10008C4F0);
  }
  return result;
}

unint64_t sub_10001CEA4()
{
  unint64_t result;

  result = qword_10008C4F8;
  if (!qword_10008C4F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10008C4F8);
  }
  return result;
}

uint64_t sub_10001CEE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100017F8C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10001CEF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10001A684(*(_QWORD *)(v1 + 16), type metadata accessor for NearbyMediumWidgetView, a1);
}

char *sub_10001CF10(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
  }
  else
  {
    v7 = a1;
    v9 = a2[1];
    v8 = a2[2];
    *((_QWORD *)a1 + 1) = v9;
    *((_QWORD *)a1 + 2) = v8;
    v10 = a2[3];
    *((_QWORD *)a1 + 3) = v10;
    v11 = *(int *)(type metadata accessor for NearbyButtonContent(0) + 24);
    v12 = &v7[v11];
    v13 = (uint64_t)a2 + v11;
    v14 = type metadata accessor for NearbyButtonAction(0);
    v15 = v4;
    v16 = v9;
    swift_bridgeObjectRetain(v10);
    v17 = swift_getEnumCaseMultiPayload(v13, v14) == 1;
    v18 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v12, v13, v18);
    swift_storeEnumTagMultiPayload(v12, v14, v17);
    v19 = *(int *)(a3 + 20);
    v4 = *(char **)((char *)a2 + v19);
    *(_QWORD *)&v7[v19] = v4;
  }
  swift_retain(v4);
  return v7;
}

uint64_t sub_10001D018(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(type metadata accessor for NearbyButtonContent(0) + 24);
  type metadata accessor for NearbyButtonAction(0);
  v5 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

_QWORD *sub_10001D094(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(void **)a2;
  v7 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v7;
  v8 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v8;
  v9 = *(int *)(type metadata accessor for NearbyButtonContent(0) + 24);
  v10 = (char *)a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for NearbyButtonAction(0);
  v13 = v6;
  v14 = v7;
  swift_bridgeObjectRetain(v8);
  v15 = swift_getEnumCaseMultiPayload(v11, v12) == 1;
  v16 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v10, v11, v16);
  swift_storeEnumTagMultiPayload(v10, v12, v15);
  v17 = *(int *)(a3 + 20);
  v18 = *(_QWORD *)(a2 + v17);
  *(_QWORD *)((char *)a1 + v17) = v18;
  swift_retain(v18);
  return a1;
}

uint64_t sub_10001D170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  v9 = *(void **)(a1 + 8);
  v10 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v10;
  v11 = v10;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = type metadata accessor for NearbyButtonContent(0);
  if (a1 != a2)
  {
    v15 = *(int *)(v14 + 24);
    v16 = a2 + v15;
    v17 = a1 + v15;
    sub_10001B54C(a1 + v15, type metadata accessor for NearbyButtonAction);
    v18 = type metadata accessor for NearbyButtonAction(0);
    v19 = swift_getEnumCaseMultiPayload(v16, v18) == 1;
    v20 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v16, v20);
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = *(int *)(a3 + 20);
  v22 = *(_QWORD *)(a2 + v21);
  v23 = *(_QWORD *)(a1 + v21);
  *(_QWORD *)(a1 + v21) = v22;
  swift_retain(v22);
  swift_release(v23);
  return a1;
}

_OWORD *sub_10001D290(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(type metadata accessor for NearbyButtonContent(0) + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for NearbyButtonAction(0);
  v11 = swift_getEnumCaseMultiPayload(v9, v10) == 1;
  v12 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v8, v9, v12);
  swift_storeEnumTagMultiPayload(v8, v10, v11);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void **sub_10001D348(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *a1;
  *a1 = *a2;

  v7 = a1[1];
  a1[1] = a2[1];

  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = type metadata accessor for NearbyButtonContent(0);
  if (a1 != a2)
  {
    v11 = *(int *)(v10 + 24);
    v12 = (char *)a2 + v11;
    v13 = (char *)a1 + v11;
    sub_10001B54C((uint64_t)a1 + v11, type metadata accessor for NearbyButtonAction);
    v14 = type metadata accessor for NearbyButtonAction(0);
    v15 = swift_getEnumCaseMultiPayload(v12, v14) == 1;
    v16 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v12, v16);
    swift_storeEnumTagMultiPayload(v13, v14, v15);
  }
  v17 = *(int *)(a3 + 20);
  v18 = *(uint64_t *)((char *)a1 + v17);
  *(void **)((char *)a1 + v17) = *(void **)((char *)a2 + v17);
  swift_release(v18);
  return a1;
}

uint64_t sub_10001D448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001D454);
}

uint64_t sub_10001D454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for NearbyButtonContent(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10001D4D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001D4DC);
}

uint64_t sub_10001D4DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for NearbyButtonContent(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_10001D554(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for NearbyButtonContent(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10001D5C8(uint64_t a1)
{
  return sub_10001D600(a1, &qword_10008C450, &qword_10008C448, &qword_10008C470);
}

uint64_t sub_10001D5E4(uint64_t a1)
{
  return sub_10001D600(a1, &qword_10008C530, &qword_10008C538, &qword_10008C540);
}

uint64_t sub_10001D600(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_1000027EC(a2);
  v9 = sub_1000027EC(a3);
  v10 = sub_1000027EC(&qword_10008C468);
  v11 = sub_10001D82C(a4, a3, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v12 = sub_10001D82C(&qword_10008C478, &qword_10008C468, (uint64_t)&unk_10006A990);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
  v9 = v6;
  v10 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
}

uint64_t sub_10001D6C8(uint64_t a1)
{
  return sub_10001D600(a1, &qword_10008C550, &qword_10008C548, &qword_10008C560);
}

uint64_t sub_10001D6E4()
{
  return sub_10001B41C(&qword_10008C680, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
}

uint64_t sub_10001D710(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006C868, 1);
}

unint64_t sub_10001D720()
{
  unint64_t result;

  result = qword_10008C6A0;
  if (!qword_10008C6A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10008C6A0);
  }
  return result;
}

unint64_t sub_10001D764()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C6A8;
  if (!qword_10008C6A8)
  {
    v1 = sub_1000027EC(&qword_10008C690);
    sub_10001D7E8();
    sub_10001D82C(&qword_10008C6B8, &qword_10008C688, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008C6A8);
  }
  return result;
}

unint64_t sub_10001D7E8()
{
  unint64_t result;

  result = qword_10008C6B0;
  if (!qword_10008C6B0)
  {
    result = swift_getWitnessTable(&unk_10006A7CC, &type metadata for NearbyButtonActionLink.IconImage);
    atomic_store(result, (unint64_t *)&qword_10008C6B0);
  }
  return result;
}

uint64_t sub_10001D82C(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000027EC(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001D86C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

ValueMetadata *type metadata accessor for NearbyButtonActionLink.IconImage()
{
  return &type metadata for NearbyButtonActionLink.IconImage;
}

uint64_t sub_10001D88C()
{
  return sub_10001D96C(&qword_10008C6C0, &qword_10008C6C8, (void (*)(void))sub_10001D764);
}

uint64_t sub_10001D8B8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006C890, 1);
}

unint64_t sub_10001D8C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C6F8;
  if (!qword_10008C6F8)
  {
    v1 = sub_1000027EC(&qword_10008C6F0);
    swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of Image.widgetAccentedRenderingMode(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008C6F8);
  }
  return result;
}

uint64_t sub_10001D940()
{
  return sub_10001D96C(&qword_10008C700, &qword_10008C708, (void (*)(void))sub_10001D8C8);
}

uint64_t sub_10001D96C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000027EC(a2);
    a3();
    sub_10001B41C(&qword_10008C6D0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ColorSchemeSpecificImageSet(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for ColorSchemeSpecificImageSet(id *a1)
{

}

uint64_t assignWithCopy for ColorSchemeSpecificImageSet(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  return a1;
}

uint64_t assignWithTake for ColorSchemeSpecificImageSet(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for ColorSchemeSpecificImageSet(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ColorSchemeSpecificImageSet(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ColorSchemeSpecificImageSet()
{
  return &type metadata for ColorSchemeSpecificImageSet;
}

uint64_t sub_10001DB9C()
{
  void *v0;
  uint64_t result;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;

  result = (uint64_t)objc_msgSend(v0, "destination");
  if (result)
  {
    v2 = (void *)result;
    v3 = objc_msgSend((id)result, "mapItemStorage");

    if (v3)
    {
      v4 = objc_msgSend(objc_allocWithZone((Class)MKMapItem), "initWithGeoMapItem:isPlaceHolderPlace:", v3, 0);
      if (v4)
      {
        v5 = v4;
        v6 = objc_msgSend(v4, "_styleAttributes");
        v7 = sub_10001E1F0((uint64_t)v6, 3);

        return (uint64_t)v7;
      }

    }
    return 1;
  }
  __break(1u);
  return result;
}

id sub_10001DC7C()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  NSString v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  double v28;
  double v29;
  void (*v30)(char *, uint64_t);
  id v31;
  uint64_t v33;
  uint64_t v34;

  v1 = v0;
  v2 = type metadata accessor for LayoutDirection(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v33 - v7;
  v9 = sub_1000027AC(&qword_10008C710);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v11 = swift_getKeyPath(&unk_10006A840);
  v12 = sub_1000027AC(&qword_10008C718);
  swift_storeEnumTagMultiPayload(v11, v12, 0);
  if (objc_msgSend(v0, "type") != (id)24)
    goto LABEL_7;
  v13 = objc_msgSend(v0, "dataForKey:", CFSTR("MapsSuggestionsContactAsDataKey"));
  if (v13)
  {
    v14 = v13;
    v34 = v3;
    v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v17 = v16;

    sub_100014FA8(0, &qword_10008C720, NSKeyedUnarchiver_ptr);
    v18 = sub_100014FA8(0, &qword_10008C728, CNContact_ptr);
    v25 = (id)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v18, v15, v17, v18);
    sub_100015610(v15, v17);
    v3 = v34;
    if (v25)
      goto LABEL_9;
  }
  v19 = objc_msgSend(v1, "stringForKey:", CFSTR("MapsSuggestionsContactLikelyAppleIDKey"), v33);
  v20 = v19;
  if (v19)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v22);
  }
  v25 = objc_msgSend((id)objc_opt_self(CNContact), "contactWithDisplayName:emailOrPhoneNumber:", 0, v20);

  if (v25)
  {
LABEL_9:
    v26 = v25;
    v27 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
    objc_msgSend(v27, "scale");
    v29 = v28;

    sub_1000522DC((uint64_t)v8);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for LayoutDirection.rightToLeft(_:), v2);
    LOBYTE(v27) = static LayoutDirection.== infix(_:_:)(v8, v6);
    v30 = *(void (**)(char *, uint64_t))(v3 + 8);
    v30(v6, v2);
    v30(v8, v2);
    v24 = objc_msgSend(v26, "avatarImageWithSize:scale:rightToLeft:", v27 & 1, 128.0, 128.0, v29);

    sub_10001E404((uint64_t)v11);
    v31 = v24;
  }
  else
  {
LABEL_7:
    v23 = objc_msgSend(v1, "styleAttributes");
    v24 = sub_10001E1F0((uint64_t)v23, 3);

    sub_10001E404((uint64_t)v11);
  }
  return v24;
}

uint64_t sub_10001E0B0(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for LayoutDirection(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.layoutDirection.setter(v3);
}

void sub_10001E12C()
{
  NSString v0;
  id v1;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v0);

  if (v1)
    qword_100090B48 = (uint64_t)v1;
  else
    __break(1u);
}

id sub_10001E1A0()
{
  if (qword_10008B988 != -1)
    swift_once(&qword_10008B988, sub_10001E12C);
  qword_100090B50 = qword_100090B48;
  *(_QWORD *)algn_100090B58 = qword_100090B48;
  return (id)qword_100090B48;
}

id sub_10001E1F0(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  double v6;
  double v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  double v12;
  double v13;
  void *v14;
  id v15;

  v4 = (void *)objc_opt_self(UIScreen);
  v5 = objc_msgSend(v4, "mainScreen");
  objc_msgSend(v5, "scale");
  v7 = v6;

  if (!a1
    || (v8 = objc_msgSend((id)objc_opt_self(MKIconManager), "imageForStyle:size:forScale:format:nightMode:", a1, a2, 0, 0, v7)) == 0)
  {
    v9 = (void *)objc_opt_self(MKIconManager);
    v10 = objc_msgSend((id)objc_opt_self(GEOFeatureStyleAttributes), "markerStyleAttributes");
    v8 = objc_msgSend(v9, "imageForStyle:size:forScale:format:nightMode:", v10, a2, 0, 0, v7);

  }
  v11 = objc_msgSend(v4, "mainScreen");
  objc_msgSend(v11, "scale");
  v13 = v12;

  if (!a1
    || !objc_msgSend((id)objc_opt_self(MKIconManager), "imageForStyle:size:forScale:format:nightMode:", a1, a2, 0, 1, v13))
  {
    v14 = (void *)objc_opt_self(MKIconManager);
    v15 = objc_msgSend((id)objc_opt_self(GEOFeatureStyleAttributes), "markerStyleAttributes");
    objc_msgSend(v14, "imageForStyle:size:forScale:format:nightMode:", v15, a2, 0, 1, v13);

  }
  return v8;
}

uint64_t sub_10001E3E0()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_10001E404(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000027AC(&qword_10008C710);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001E448()
{
  uint64_t result;

  result = Color.init(_:bundle:)(0xD000000000000012, 0x8000000100079760, 0);
  qword_100090B60 = result;
  return result;
}

void sub_10001E480(void *a1)
{
  char *v1;
  NSString v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  char *v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  objc_super v17;

  *(_QWORD *)&v1[OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_location] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_error] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_locationManager] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_waitForLocationGroup] = 0;
  v3 = String._bridgeToObjectiveC()();
  v17.receiver = v1;
  v17.super_class = (Class)type metadata accessor for GeneralMapsLocationUpdater();
  v4 = objc_msgSendSuper2(&v17, "initWithName:queue:", v3, a1);

  v5 = qword_10008B9F8;
  v6 = v4;
  if (v5 != -1)
    swift_once(&qword_10008B9F8, sub_1000394FC);
  v7 = *(_QWORD *)(qword_100090BB0
                 + OBJC_IVAR____TtC17GeneralMapsWidget28LocationAuthorizationMonitor_bundleIdentifier
                 + 8);
  v8 = objc_allocWithZone((Class)CLLocationManager);
  v9 = (char *)v6;
  swift_bridgeObjectRetain(v7);
  v10 = a1;
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  v12 = objc_msgSend(v8, "initWithEffectiveBundleIdentifier:delegate:onQueue:", v11, v9, v10);

  v13 = OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_locationManager;
  v14 = *(void **)&v9[OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_locationManager];
  *(_QWORD *)&v9[OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_locationManager] = v12;

  v15 = *(void **)&v9[v13];
  if (v15)
  {
    v16 = v15;
    objc_msgSend(v16, "setDesiredAccuracy:", kCLLocationAccuracyHundredMeters);

  }
  else
  {
    __break(1u);
  }
}

id sub_10001E63C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  objc_class *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD aBlock[5];
  uint64_t v28;
  objc_super v29;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)&v1[OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_locationManager];
  if (v11)
  {
    v25 = v8;
    v12 = v11;
    v24 = v3;
    v13 = v12;
    v14 = objc_msgSend(v1, "dispatchQueue");
    v15 = swift_allocObject(&unk_100082540, 24, 7);
    *(_QWORD *)(v15 + 16) = v13;
    aBlock[4] = sub_1000203B4;
    v28 = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100052B78;
    aBlock[3] = &unk_100082558;
    v16 = _Block_copy(aBlock);
    v17 = v13;
    static DispatchQoS.unspecified.getter(v17);
    v26 = &_swiftEmptyArrayStorage;
    v18 = sub_1000150DC();
    v19 = sub_1000027AC((uint64_t *)&unk_10008BF70);
    v20 = sub_100015124();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v19, v20, v2, v18);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v5, v16);
    _Block_release(v16);

    (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v25);
    swift_release(v28);
  }
  v21 = (objc_class *)type metadata accessor for GeneralMapsLocationUpdater();
  v29.receiver = v1;
  v29.super_class = v21;
  return objc_msgSendSuper2(&v29, "dealloc");
}

double sub_10001E8C4(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  _QWORD *v15;
  void *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double result;
  uint64_t v23;
  void *v24;
  _QWORD aBlock[5];
  _QWORD *v26;

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend(v3, "dispatchQueue");
  v15 = (_QWORD *)swift_allocObject(&unk_1000824A0, 40, 7);
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  aBlock[4] = sub_10001FFE8;
  v26 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100052B78;
  aBlock[3] = &unk_1000824B8;
  v16 = _Block_copy(aBlock);
  v17 = v3;
  swift_retain(a2);
  static DispatchQoS.unspecified.getter(v18);
  v24 = &_swiftEmptyArrayStorage;
  v19 = sub_1000150DC();
  v20 = sub_1000027AC((uint64_t *)&unk_10008BF70);
  v21 = sub_100015124();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v20, v21, v6, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  *(_QWORD *)&result = swift_release(v26).n128_u64[0];
  return result;
}

void sub_10001EAA4(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  void *v17;
  dispatch_group_t v18;
  void *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  void *v32;
  id v33;
  id v34;
  _QWORD *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  _QWORD aBlock[5];
  _QWORD *v45;

  v3 = v2;
  v40 = a1;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate(0, v11);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v15 = objc_msgSend(v3, "dispatchQueue");
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  v16 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once(&qword_10008B9F0, sub_100035150);
    goto LABEL_5;
  }
  v13 = OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_waitForLocationGroup;
  v17 = *(void **)&v3[OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_waitForLocationGroup];
  if (v17)
  {
LABEL_9:
    v33 = v17;
    v34 = objc_msgSend(v3, "dispatchQueue");
    v35 = (_QWORD *)swift_allocObject(&unk_100082450, 40, 7);
    v35[2] = v40;
    v35[3] = a2;
    v35[4] = v3;
    aBlock[4] = sub_10001FF98;
    v45 = v35;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100052B78;
    aBlock[3] = &unk_100082468;
    v36 = _Block_copy(aBlock);
    swift_retain(a2);
    static DispatchQoS.unspecified.getter(v3);
    v43 = &_swiftEmptyArrayStorage;
    v37 = sub_1000150DC();
    v38 = sub_1000027AC((uint64_t *)&unk_10008BF70);
    v39 = sub_100015124();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v38, v39, v5, v37);
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v10, v7, v34, v36);
    _Block_release(v36);

    (*(void (**)(char *, uint64_t))(v42 + 8))(v7, v5);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v41);
    swift_release(v45);
    return;
  }
  v18 = dispatch_group_create();
  v19 = *(void **)&v3[v13];
  *(_QWORD *)&v3[v13] = v18;

  v20 = *(NSObject **)&v3[v13];
  if (!v20)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  dispatch_group_enter(v20);
  if (qword_10008B9F0 != -1)
    goto LABEL_11;
LABEL_5:
  v21 = type metadata accessor for Logger(0);
  v22 = sub_100014D70(v21, (uint64_t)qword_100090B98);
  v26 = Logger.logObject.getter(v22, v23, v24, v25);
  v30 = static os_log_type_t.debug.getter(v26, v27, v28, v29);
  if (os_log_type_enabled(v26, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v30, "GeneralMapsLocationUpdater: singleLocationUpdate BEGIN", v31, 2u);
    swift_slowDealloc(v31, -1, -1);
  }

  v32 = *(void **)&v3[OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_locationManager];
  if (!v32)
    goto LABEL_13;
  objc_msgSend(v32, "requestLocation");
  v17 = *(void **)&v3[v13];
  if (v17)
    goto LABEL_9;
LABEL_14:
  __break(1u);
}

void sub_10001EE38(void (*a1)(id, uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v8 = sub_10001EEB4((uint64_t)a1, a2);
  v6 = v5;
  v7 = *(_QWORD *)(a3 + OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_error);
  swift_errorRetain(v7);
  a1(v8, v6, v7);
  swift_errorRelease(v7);

}

void *sub_10001EEB4(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  void *result;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;

  v3 = type metadata accessor for DispatchPredicate(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v6 = objc_msgSend(v2, "dispatchQueue");
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v7 = _dispatchPreconditionTest(_:)(v6);
  result = (void *)(*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    v9 = *(void **)&v2[OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_location];
    if (!v9)
      return sub_10001EFE4();
    v10 = *(void **)&v2[OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_locationManager];
    if (v10)
    {
      v11 = v9;
      v12 = objc_msgSend(v10, "accuracyAuthorization");
      v13 = (void *)qword_10008C730;
      qword_10008C730 = (uint64_t)v9;
      qword_10008C738 = (uint64_t)v12;
      v14 = v11;

      return v9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_10001EFE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  id v15;
  double v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (void *)__chkstk_darwin(v3);
  v8 = (char *)&v64 - v7;
  v9 = qword_10008C730;
  if (!qword_10008C730)
  {
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_100014D70(v31, (uint64_t)qword_100090B98);
    v13 = Logger.logObject.getter(v32, v33, v34, v35);
    v36 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v36, "GeneralMapsLocationUpdater: previousLocationInfo: no previous location data available", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }
    goto LABEL_26;
  }
  v10 = OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_locationManager;
  v11 = *(void **)(v0 + OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_locationManager);
  if (v11)
  {
    v12 = qword_10008C738;
    v13 = (id)qword_10008C730;
    if (objc_msgSend(v11, "authorizationStatus") - 3 > 1)
    {
      if (qword_10008B9F0 != -1)
        swift_once(&qword_10008B9F0, sub_100035150);
      v38 = type metadata accessor for Logger(0);
      v39 = sub_100014D70(v38, (uint64_t)qword_100090B98);
      v43 = Logger.logObject.getter(v39, v40, v41, v42);
      v44 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v45 = 0;
        v46 = "GeneralMapsLocationUpdater: previousLocationInfo: previous location authorization revoked";
LABEL_23:
        _os_log_impl((void *)&_mh_execute_header, v43, v44, v46, v45, 2u);
        v52 = v45;
LABEL_24:
        swift_slowDealloc(v52, -1, -1);

        return 0;
      }
LABEL_25:

      goto LABEL_26;
    }
    result = *(void **)(v0 + v10);
    if (result)
    {
      v14 = objc_msgSend(result, "accuracyAuthorization");
      if ((id)v12 == v14)
      {
        Date.init()(v14);
        v15 = -[NSObject timestamp](v13, "timestamp");
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        v16 = Date.timeIntervalSince(_:)(v5);
        v17 = *(void (**)(char *, uint64_t))(v2 + 8);
        v17(v5, v1);
        v17(v8, v1);
        if (v16 < 3600.0)
        {
          if (qword_10008B9F0 != -1)
            swift_once(&qword_10008B9F0, sub_100035150);
          v18 = type metadata accessor for Logger(0);
          sub_100014D70(v18, (uint64_t)qword_100090B98);
          v19 = v13;
          v23 = Logger.logObject.getter(v19, v20, v21, v22);
          v24 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v23, v24))
          {
            v25 = (uint8_t *)swift_slowAlloc(12, -1);
            v26 = swift_slowAlloc(32, -1);
            v66 = v12;
            v67 = v26;
            *(_DWORD *)v25 = 136380675;
            v65 = v19;
            v27 = v19;
            v28 = String.init<A>(reflecting:)(&v65, &type metadata for GeneralMapsLocationUpdater.LocationInfo);
            v30 = v29;
            v65 = sub_1000523F0(v28, v29, &v67);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v25 + 4);

            swift_bridgeObjectRelease(v30);
            _os_log_impl((void *)&_mh_execute_header, v23, v24, "GeneralMapsLocationUpdater: previousLocationInfo: using previous location (%{private}s)", v25, 0xCu);
            swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v26, -1, -1);
            swift_slowDealloc(v25, -1, -1);

          }
          else
          {

          }
          return (void *)v9;
        }
        if (qword_10008B9F0 != -1)
          swift_once(&qword_10008B9F0, sub_100035150);
        v53 = type metadata accessor for Logger(0);
        sub_100014D70(v53, (uint64_t)qword_100090B98);
        v13 = v13;
        v43 = Logger.logObject.getter(v13, v54, v55, v56);
        v57 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v43, v57))
        {
          v58 = (uint8_t *)swift_slowAlloc(12, -1);
          v59 = swift_slowAlloc(32, -1);
          v65 = v59;
          *(_DWORD *)v58 = 136446210;
          v60 = -[NSObject timestamp](v13, "timestamp");
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v61 = String.init<A>(reflecting:)(v8, v1);
          v63 = v62;
          v67 = sub_1000523F0(v61, v62, (uint64_t *)&v65);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v58 + 4);

          swift_bridgeObjectRelease(v63);
          _os_log_impl((void *)&_mh_execute_header, v43, v57, "GeneralMapsLocationUpdater: previousLocationInfo: previous location is too old (%{public}s)", v58, 0xCu);
          swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v59, -1, -1);
          v52 = v58;
          goto LABEL_24;
        }

LABEL_26:
        return 0;
      }
      if (qword_10008B9F0 != -1)
        swift_once(&qword_10008B9F0, sub_100035150);
      v47 = type metadata accessor for Logger(0);
      v48 = sub_100014D70(v47, (uint64_t)qword_100090B98);
      v43 = Logger.logObject.getter(v48, v49, v50, v51);
      v44 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v45 = 0;
        v46 = "GeneralMapsLocationUpdater: previousLocationInfo: previous location accuracy authorization changed";
        goto LABEL_23;
      }
      goto LABEL_25;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10001F638()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  void *v17;
  _QWORD aBlock[5];
  uint64_t v19;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(v0, "dispatchQueue");
  v10 = swift_allocObject(&unk_1000824F0, 24, 7);
  *(_QWORD *)(v10 + 16) = v0;
  aBlock[4] = sub_10002036C;
  v19 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100052B78;
  aBlock[3] = &unk_100082508;
  v11 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  v17 = &_swiftEmptyArrayStorage;
  v12 = sub_1000150DC();
  v13 = sub_1000027AC((uint64_t *)&unk_10008BF70);
  v14 = sub_100015124();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v1, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v19);
}

void sub_10001F838(void *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  void *v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_log_type_t v49;
  uint8_t *v50;
  void *v51;
  uint8_t *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0, a2);
  v7 = *(id *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint8_t **)((char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v9 = objc_msgSend(v3, "dispatchQueue");
  (*((void (**)(_QWORD *, _QWORD, uint64_t))v7 + 13))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v10 = _dispatchPreconditionTest(_:)(v9);
  (*((void (**)(_QWORD *, uint64_t))v7 + 1))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  v6 = OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_waitForLocationGroup;
  v11 = *(void **)&v3[OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_waitForLocationGroup];
  if (v11)
  {
    v7 = v11;
    objc_msgSend(v3, "considerMyAllowanceAsLimited:", objc_msgSend(a1, "accuracyAuthorization") != 0);
    if (!((unint64_t)a2 >> 62))
    {
      v12 = *(char **)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a2);
      if (v12)
        goto LABEL_5;
      goto LABEL_24;
    }
LABEL_20:
    if (a2 < 0)
      v43 = a2;
    else
      v43 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v12 = (char *)_CocoaArrayWrapper.endIndex.getter(v43);
    if (v12)
    {
LABEL_5:
      v13 = v12 - 1;
      if (__OFSUB__(v12, 1))
      {
        __break(1u);
      }
      else if ((a2 & 0xC000000000000001) == 0)
      {
        if (((unint64_t)v13 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if ((unint64_t)v13 < *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v14 = (char *)*(id *)(a2 + 8 * (_QWORD)v13 + 32);
          goto LABEL_10;
        }
        __break(1u);
        goto LABEL_34;
      }
      v14 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a2);
LABEL_10:
      v12 = v14;
      swift_bridgeObjectRelease(a2);
      if (qword_10008B9F0 == -1)
      {
LABEL_11:
        v15 = type metadata accessor for Logger(0);
        sub_100014D70(v15, (uint64_t)qword_100090B98);
        v16 = v12;
        v20 = Logger.logObject.getter(v16, v17, v18, v19);
        v24 = static os_log_type_t.debug.getter(v20, v21, v22, v23);
        if (os_log_type_enabled(v20, v24))
        {
          v25 = (uint8_t *)swift_slowAlloc(12, -1);
          v26 = swift_slowAlloc(32, -1);
          v53 = v7;
          v54 = (uint64_t)v16;
          v27 = v26;
          v55 = v26;
          *(_DWORD *)v25 = 136380675;
          v52 = v25 + 4;
          v28 = sub_10001FF30();
          v29 = v16;
          v30 = String.init<A>(reflecting:)(&v54, v28);
          v32 = v31;
          v54 = sub_1000523F0(v30, v31, &v55);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v52);

          swift_bridgeObjectRelease(v32);
          _os_log_impl((void *)&_mh_execute_header, v20, v24, "GeneralMapsLocationUpdater: singleLocationUpdate END (location: %{private}s)", v25, 0xCu);
          swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
          v33 = v27;
          v7 = v53;
          swift_slowDealloc(v33, -1, -1);
          swift_slowDealloc(v25, -1, -1);

        }
        else
        {

        }
        v41 = *(void **)&v3[OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_location];
        *(_QWORD *)&v3[OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_location] = v16;
        v42 = v16;

        objc_msgSend(v3, "considerMyNewLocation:", v42);
LABEL_28:

        v51 = *(void **)&v3[v6];
        *(_QWORD *)&v3[v6] = 0;

        dispatch_group_leave((dispatch_group_t)v7);
        goto LABEL_29;
      }
LABEL_34:
      swift_once(&qword_10008B9F0, sub_100035150);
      goto LABEL_11;
    }
LABEL_24:
    swift_bridgeObjectRelease(a2);
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v44 = type metadata accessor for Logger(0);
    v45 = sub_100014D70(v44, (uint64_t)qword_100090B98);
    v42 = Logger.logObject.getter(v45, v46, v47, v48);
    v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v49, "GeneralMapsLocationUpdater: singleLocationUpdate END (no location)", v50, 2u);
      swift_slowDealloc(v50, -1, -1);
    }
    goto LABEL_28;
  }
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v34 = type metadata accessor for Logger(0);
  v35 = sub_100014D70(v34, (uint64_t)qword_100090B98);
  v7 = (id)Logger.logObject.getter(v35, v36, v37, v38);
  v39 = static os_log_type_t.error.getter();
  if (os_log_type_enabled((os_log_t)v7, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v7, v39, "GeneralMapsLocationUpdater: locationManager:didUpdateLocations: was called when not expected", v40, 2u);
    swift_slowDealloc(v40, -1, -1);
  }
LABEL_29:

}

uint64_t type metadata accessor for GeneralMapsLocationUpdater()
{
  return objc_opt_self(_TtC17GeneralMapsWidget26GeneralMapsLocationUpdater);
}

unint64_t sub_10001FF30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C7E8;
  if (!qword_10008C7E8)
  {
    v1 = objc_opt_self(CLLocation);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10008C7E8);
  }
  return result;
}

uint64_t sub_10001FF6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

void sub_10001FF98()
{
  uint64_t v0;

  sub_10001EE38(*(void (**)(id, uint64_t, uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

double sub_10001FFA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_10001FFB4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001FFBC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10001FFE8()
{
  uint64_t v0;

  sub_10001EAA4(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_100020010(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  char v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;

  v4 = v2;
  v6 = type metadata accessor for DispatchPredicate(0, a2);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = ((char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9->isa = (Class)objc_msgSend(v4, "dispatchQueue");
  (*(void (**)(NSObject *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v10 = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(NSObject *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v3 = OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_waitForLocationGroup;
  v11 = *(void **)&v4[OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_waitForLocationGroup];
  if (v11)
  {
    v12 = qword_10008B9F0;
    v9 = v11;
    if (v12 == -1)
    {
LABEL_4:
      v13 = type metadata accessor for Logger(0);
      sub_100014D70(v13, (uint64_t)qword_100090B98);
      swift_errorRetain(a1);
      v14 = swift_errorRetain(a1);
      v18 = Logger.logObject.getter(v14, v15, v16, v17);
      v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(12, -1);
        v21 = swift_slowAlloc(32, -1);
        v37 = a1;
        v38 = v21;
        *(_DWORD *)v20 = 136446210;
        v36 = v20 + 4;
        swift_errorRetain(a1);
        v22 = sub_1000027AC(&qword_10008BF88);
        v23 = String.init<A>(reflecting:)(&v37, v22);
        v25 = v24;
        v37 = sub_1000523F0(v23, v24, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v36);
        swift_bridgeObjectRelease(v25);
        swift_errorRelease(a1);
        swift_errorRelease(a1);
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "GeneralMapsLocationUpdater: singleLocationUpdate END (error: %{public}s)", v20, 0xCu);
        swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v21, -1, -1);
        swift_slowDealloc(v20, -1, -1);
      }
      else
      {
        swift_errorRelease(a1);
        swift_errorRelease(a1);
      }

      v33 = *(_QWORD *)&v4[OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_error];
      *(_QWORD *)&v4[OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_error] = a1;
      swift_errorRetain(a1);
      swift_errorRelease(v33);
      v34 = *(void **)&v4[v3];
      *(_QWORD *)&v4[v3] = 0;

      dispatch_group_leave(v9);
      goto LABEL_12;
    }
LABEL_14:
    swift_once(&qword_10008B9F0, sub_100035150);
    goto LABEL_4;
  }
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v26 = type metadata accessor for Logger(0);
  v27 = sub_100014D70(v26, (uint64_t)qword_100090B98);
  v9 = Logger.logObject.getter(v27, v28, v29, v30);
  v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v31, "GeneralMapsLocationUpdater: locationManager:didFailWithError: was called when not expected", v32, 2u);
    swift_slowDealloc(v32, -1, -1);
  }
LABEL_12:

}

char *sub_10002036C()
{
  uint64_t v0;
  char *result;

  result = *(char **)(v0 + 16);
  if (*(_QWORD *)&result[OBJC_IVAR____TtC17GeneralMapsWidget26GeneralMapsLocationUpdater_location])
    return (char *)objc_msgSend(result, "considerMyNewLocation:");
  return result;
}

uint64_t sub_100020390()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000203B4()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "stopUpdatingLocation");
}

_QWORD *initializeBufferWithCopyOfBuffer for GeneralMapsLocationUpdater.LocationInfo(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  return a1;
}

void destroy for GeneralMapsLocationUpdater.LocationInfo(id *a1)
{

}

uint64_t assignWithCopy for GeneralMapsLocationUpdater.LocationInfo(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for GeneralMapsLocationUpdater.LocationInfo(uint64_t a1, _QWORD *a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for GeneralMapsLocationUpdater.LocationInfo(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeneralMapsLocationUpdater.LocationInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GeneralMapsLocationUpdater.LocationInfo()
{
  return &type metadata for GeneralMapsLocationUpdater.LocationInfo;
}

uint64_t sub_100020530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

void sub_100020538(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[5];

  sub_10001B658(319, (unint64_t *)&unk_10008C2E8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001B658(319, &qword_10008C888, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001B658(319, &qword_10008C890, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        v8 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          v10[4] = &unk_10006A968;
          swift_initStructMetadata(a1, 0, 5, v10, a1 + 32);
        }
      }
    }
  }
}

uint64_t *sub_100020630(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t *, uint64_t *, uint64_t);
  char v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;

  v57 = type metadata accessor for ColorScheme(0);
  v6 = *(_QWORD *)(v57 - 8);
  if (*(_QWORD *)(v6 + 64) <= 8uLL)
    v7 = 8;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for WidgetRenderingMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 & 0xF8 | 7;
  v59 = v8;
  v60 = v7 + v11 + 1;
  v58 = v9;
  v12 = *(_QWORD *)(v9 + 64);
  if (v12 <= 8)
    v12 = 8;
  v61 = v12;
  v13 = v12 + 1;
  v14 = type metadata accessor for RedactionReasons(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v17 = v16 & 0xF8 | 7;
  v18 = *(_QWORD *)(v15 + 64);
  if (v18 <= 8)
    v18 = 8;
  v63 = v13;
  v64 = v18;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_DWORD *)(v20 + 80);
  v22 = v16 | v10 | *(_DWORD *)(v6 + 80);
  v23 = v22 & 0xF8 | v21;
  if (*(_QWORD *)(v20 + 64) + ((v18 + 1 + v21 + ((v13 + v17 + (v60 & ~v11)) & ~v17)) & ~v21) + 1 > 0x18
    || ((v22 | *(_DWORD *)(v20 + 80)) & 0x100000) != 0
    || v23 > 7)
  {
    v26 = *a2;
    *a1 = *a2;
    v27 = (uint64_t *)(v26 + (((v23 | 7) + 16) & ~(unint64_t)(v23 | 7)));
    swift_retain(v26);
  }
  else
  {
    v28 = *((unsigned __int8 *)a2 + v7);
    v29 = a2;
    v56 = *(_QWORD *)(v19 - 8);
    if (v28 >= 2)
    {
      if (v7 <= 3)
        v30 = v7;
      else
        v30 = 4;
      __asm { BR              X12 }
    }
    v31 = v61;
    v32 = v17;
    v53 = v14;
    v54 = *(_QWORD *)(v14 - 8);
    v55 = v18 + 1;
    v62 = *(_QWORD *)(v20 + 64);
    v33 = ~v11;
    if (v28 == 1)
    {
      v34 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
      v27 = a1;
      v34(a1, v29, v57);
      v35 = 1;
    }
    else
    {
      v36 = *v29;
      v27 = a1;
      *a1 = *v29;
      swift_retain(v36);
      v35 = 0;
    }
    *((_BYTE *)v27 + v7) = v35;
    v37 = (_QWORD *)(((unint64_t)v27 + v60) & v33);
    v38 = (uint64_t *)(((unint64_t)v29 + v60) & v33);
    v39 = *((unsigned __int8 *)v38 + v31);
    if (v39 >= 2)
    {
      if (v31 <= 3)
        v40 = v31;
      else
        v40 = 4;
      __asm { BR              X12 }
    }
    v41 = ~v32;
    if (v39 == 1)
    {
      (*(void (**)(unint64_t, uint64_t *, uint64_t))(v58 + 16))(((unint64_t)v27 + v60) & v33, v38, v59);
      v42 = 1;
    }
    else
    {
      v43 = *v38;
      *v37 = *v38;
      swift_retain(v43);
      v42 = 0;
    }
    *((_BYTE *)v37 + v31) = v42;
    v44 = (_QWORD *)(((unint64_t)v37 + v63 + v32) & v41);
    v45 = (uint64_t *)(((unint64_t)v38 + v63 + v32) & v41);
    v46 = *((unsigned __int8 *)v45 + v64);
    if (v46 >= 2)
    {
      if (v64 <= 3)
        v47 = v64;
      else
        v47 = 4;
      __asm { BR              X12 }
    }
    v48 = ~v21;
    if (v46 == 1)
    {
      (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v54 + 16))(v44, v45, v53);
      v49 = 1;
    }
    else
    {
      v50 = *v45;
      *v44 = *v45;
      swift_retain(v50);
      v49 = 0;
    }
    *((_BYTE *)v44 + v64) = v49;
    v51 = ((unint64_t)v44 + v55 + v21) & v48;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v56 + 16))(v51, ((unint64_t)v45 + v55 + v21) & v48, v19);
    *(_BYTE *)(v51 + v62) = *(_BYTE *)((((unint64_t)v45 + v55 + v21) & v48) + v62);
  }
  return v27;
}

uint64_t sub_100020A54(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;

  v4 = type metadata accessor for ColorScheme(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)a1 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
    (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(a1, v4);
  else
    swift_release(*a1);
  v9 = type metadata accessor for WidgetRenderingMode(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80) & 0xF8 | 7;
  v12 = (_QWORD *)(((unint64_t)a1 + v6 + v11 + 1) & ~v11);
  if (*(_QWORD *)(v10 + 64) <= 8uLL)
    v13 = 8;
  else
    v13 = *(_QWORD *)(v10 + 64);
  v14 = *((unsigned __int8 *)v12 + v13);
  if (v14 >= 2)
  {
    if (v13 <= 3)
      v15 = v13;
    else
      v15 = 4;
    __asm { BR              X13 }
  }
  if (v14 == 1)
    (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  else
    swift_release(*v12);
  v16 = type metadata accessor for RedactionReasons(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_DWORD *)(v17 + 80) & 0xF8 | 7;
  v19 = (_QWORD *)(((unint64_t)v12 + v13 + v18 + 1) & ~v18);
  if (*(_QWORD *)(v17 + 64) <= 8uLL)
    v20 = 8;
  else
    v20 = *(_QWORD *)(v17 + 64);
  v21 = *((unsigned __int8 *)v19 + v20);
  if (v21 >= 2)
  {
    if (v20 <= 3)
      v22 = v20;
    else
      v22 = 4;
    __asm { BR              X13 }
  }
  if (v21 == 1)
    (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v19, v16);
  else
    swift_release(*v19);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)v19 + v20 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t *sub_100020D00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;

  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    v11 = 1;
  }
  else
  {
    v12 = *a2;
    *a1 = *a2;
    swift_retain(v12);
    v11 = 0;
  }
  *((_BYTE *)a1 + v8) = v11;
  v13 = type metadata accessor for WidgetRenderingMode(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  v16 = v8 + v15 + 1;
  v17 = (_QWORD *)(((unint64_t)a1 + v16) & ~v15);
  v18 = (uint64_t *)(((unint64_t)a2 + v16) & ~v15);
  if (*(_QWORD *)(v14 + 64) <= 8uLL)
    v19 = 8;
  else
    v19 = *(_QWORD *)(v14 + 64);
  v20 = *((unsigned __int8 *)v18 + v19);
  if (v20 >= 2)
  {
    if (v19 <= 3)
      v21 = v19;
    else
      v21 = 4;
    __asm { BR              X13 }
  }
  if (v20 == 1)
  {
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v14 + 16))(v17, v18, v13);
    v22 = 1;
  }
  else
  {
    v23 = *v18;
    *v17 = *v18;
    swift_retain(v23);
    v22 = 0;
  }
  *((_BYTE *)v17 + v19) = v22;
  v24 = v19 + 1;
  v25 = type metadata accessor for RedactionReasons(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(_DWORD *)(v26 + 80) & 0xF8 | 7;
  v28 = (_QWORD *)(((unint64_t)v17 + v24 + v27) & ~v27);
  v29 = (uint64_t *)(((unint64_t)v18 + v24 + v27) & ~v27);
  if (*(_QWORD *)(v26 + 64) <= 8uLL)
    v30 = 8;
  else
    v30 = *(_QWORD *)(v26 + 64);
  v31 = *((unsigned __int8 *)v29 + v30);
  if (v31 >= 2)
  {
    if (v30 <= 3)
      v32 = v30;
    else
      v32 = 4;
    __asm { BR              X13 }
  }
  if (v31 == 1)
  {
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v26 + 16))(v28, v29, v25);
    v33 = 1;
  }
  else
  {
    v34 = *v29;
    *v28 = *v29;
    swift_retain(v34);
    v33 = 0;
  }
  *((_BYTE *)v28 + v30) = v33;
  v35 = v30 + 1;
  v36 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v37 = *(unsigned __int8 *)(v36 + 80);
  v38 = v35 + v37;
  v39 = ((unint64_t)v28 + v38) & ~v37;
  v40 = ((unint64_t)v29 + v38) & ~v37;
  (*(void (**)(unint64_t, unint64_t))(v36 + 16))(v39, v40);
  *(_BYTE *)(v39 + *(_QWORD *)(v36 + 64)) = *(_BYTE *)(v40 + *(_QWORD *)(v36 + 64));
  return a1;
}

uint64_t *sub_100021028(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;

  if (a1 != a2)
  {
    v6 = type metadata accessor for ColorScheme(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v7 + 64) <= 8uLL)
      v8 = 8;
    else
      v8 = *(_QWORD *)(v7 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
      (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(a1, v6);
    else
      swift_release(*a1);
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      *((_BYTE *)a1 + v8) = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      *((_BYTE *)a1 + v8) = 0;
      swift_retain(v13);
    }
  }
  v14 = type metadata accessor for ColorScheme(0);
  v15 = 8;
  if (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) <= 8uLL)
    v16 = 8;
  else
    v16 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64);
  v17 = type metadata accessor for WidgetRenderingMode(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_DWORD *)(v18 + 80) & 0xF8 | 7;
  v20 = v16 + v19 + 1;
  v21 = (uint64_t *)(((unint64_t)a1 + v20) & ~v19);
  v22 = (uint64_t *)(((unint64_t)a2 + v20) & ~v19);
  if (*(_QWORD *)(v18 + 64) > 8uLL)
    v15 = *(_QWORD *)(v18 + 64);
  if (v21 != v22)
  {
    v23 = v17;
    v24 = *((unsigned __int8 *)v21 + v15);
    if (v24 >= 2)
    {
      if (v15 <= 3)
        v25 = v15;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    if (v24 == 1)
      (*(void (**)(uint64_t *, uint64_t))(v18 + 8))(v21, v17);
    else
      swift_release(*v21);
    v26 = *((unsigned __int8 *)v22 + v15);
    if (v26 >= 2)
    {
      if (v15 <= 3)
        v27 = v15;
      else
        v27 = 4;
      __asm { BR              X12 }
    }
    if (v26 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v18 + 16))(v21, v22, v23);
      *((_BYTE *)v21 + v15) = 1;
    }
    else
    {
      v28 = *v22;
      *v21 = *v22;
      *((_BYTE *)v21 + v15) = 0;
      swift_retain(v28);
    }
  }
  v29 = type metadata accessor for RedactionReasons(0);
  v31 = *(_QWORD *)(v29 - 8);
  v32 = *(_DWORD *)(v31 + 80) & 0xF8 | 7;
  v33 = v15 + v32 + 1;
  v34 = (uint64_t *)(((unint64_t)v21 + v33) & ~v32);
  v35 = (uint64_t *)(((unint64_t)v22 + v33) & ~v32);
  if (*(_QWORD *)(v31 + 64) <= 8uLL)
    v36 = 8;
  else
    v36 = *(_QWORD *)(v31 + 64);
  if (v34 != v35)
  {
    v37 = v29;
    v38 = *((unsigned __int8 *)v34 + v36);
    if (v38 >= 2)
    {
      if (v36 <= 3)
        v39 = v36;
      else
        v39 = 4;
      __asm { BR              X12 }
    }
    if (v38 == 1)
      (*(void (**)(uint64_t *, uint64_t))(v31 + 8))(v34, v29);
    else
      swift_release(*v34);
    v40 = *((unsigned __int8 *)v35 + v36);
    if (v40 >= 2)
    {
      if (v36 <= 3)
        v41 = v36;
      else
        v41 = 4;
      __asm { BR              X12 }
    }
    if (v40 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v31 + 16))(v34, v35, v37);
      *((_BYTE *)v34 + v36) = 1;
    }
    else
    {
      v42 = *v35;
      *v34 = *v35;
      *((_BYTE *)v34 + v36) = 0;
      v30 = swift_retain(v42);
    }
  }
  v43 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v44 = *(unsigned __int8 *)(v43 + 80);
  v45 = v36 + v44 + 1;
  v46 = ((unint64_t)v34 + v45) & ~v44;
  v47 = ((unint64_t)v35 + v45) & ~v44;
  (*(void (**)(unint64_t, unint64_t, __n128))(v43 + 24))(v46, v47, v30);
  *(_BYTE *)(v46 + *(_QWORD *)(v43 + 64)) = *(_BYTE *)(v47 + *(_QWORD *)(v43 + 64));
  return a1;
}

_QWORD *sub_10002156C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;

  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
    v11 = 1;
  }
  else
  {
    v11 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v8) = v11;
  v12 = type metadata accessor for WidgetRenderingMode(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_DWORD *)(v13 + 80) & 0xF8 | 7;
  v15 = v8 + v14 + 1;
  v16 = (_QWORD *)(((unint64_t)a1 + v15) & ~v14);
  v17 = (_QWORD *)(((unint64_t)a2 + v15) & ~v14);
  if (*(_QWORD *)(v13 + 64) <= 8uLL)
    v18 = 8;
  else
    v18 = *(_QWORD *)(v13 + 64);
  v19 = *((unsigned __int8 *)v17 + v18);
  if (v19 >= 2)
  {
    if (v18 <= 3)
      v20 = v18;
    else
      v20 = 4;
    __asm { BR              X13 }
  }
  if (v19 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v13 + 32))(v16, v17, v12);
    v21 = 1;
  }
  else
  {
    v21 = 0;
    *v16 = *v17;
  }
  *((_BYTE *)v16 + v18) = v21;
  v22 = v18 + 1;
  v23 = type metadata accessor for RedactionReasons(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(_DWORD *)(v24 + 80) & 0xF8 | 7;
  v26 = (_QWORD *)(((unint64_t)v16 + v22 + v25) & ~v25);
  v27 = (_QWORD *)(((unint64_t)v17 + v22 + v25) & ~v25);
  if (*(_QWORD *)(v24 + 64) <= 8uLL)
    v28 = 8;
  else
    v28 = *(_QWORD *)(v24 + 64);
  v29 = *((unsigned __int8 *)v27 + v28);
  if (v29 >= 2)
  {
    if (v28 <= 3)
      v30 = v28;
    else
      v30 = 4;
    __asm { BR              X13 }
  }
  if (v29 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v24 + 32))(v26, v27, v23);
    v31 = 1;
  }
  else
  {
    v31 = 0;
    *v26 = *v27;
  }
  *((_BYTE *)v26 + v28) = v31;
  v32 = v28 + 1;
  v33 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v34 = *(unsigned __int8 *)(v33 + 80);
  v35 = v32 + v34;
  v36 = ((unint64_t)v26 + v35) & ~v34;
  v37 = ((unint64_t)v27 + v35) & ~v34;
  (*(void (**)(unint64_t, unint64_t))(v33 + 32))(v36, v37);
  *(_BYTE *)(v36 + *(_QWORD *)(v33 + 64)) = *(_BYTE *)(v37 + *(_QWORD *)(v33 + 64));
  return a1;
}

_QWORD *sub_100021888(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;

  if (a1 != a2)
  {
    v6 = type metadata accessor for ColorScheme(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v7 + 64) <= 8uLL)
      v8 = 8;
    else
      v8 = *(_QWORD *)(v7 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v6);
    else
      swift_release(*a1);
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
      v13 = 1;
    }
    else
    {
      v13 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v8) = v13;
  }
  v14 = type metadata accessor for ColorScheme(0);
  v15 = 8;
  if (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) <= 8uLL)
    v16 = 8;
  else
    v16 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64);
  v17 = type metadata accessor for WidgetRenderingMode(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_DWORD *)(v18 + 80) & 0xF8 | 7;
  v20 = v16 + v19 + 1;
  v21 = (_QWORD *)(((unint64_t)a1 + v20) & ~v19);
  v22 = (_QWORD *)(((unint64_t)a2 + v20) & ~v19);
  if (*(_QWORD *)(v18 + 64) > 8uLL)
    v15 = *(_QWORD *)(v18 + 64);
  if (v21 != v22)
  {
    v23 = v17;
    v24 = *((unsigned __int8 *)v21 + v15);
    if (v24 >= 2)
    {
      if (v15 <= 3)
        v25 = v15;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    if (v24 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v21, v17);
    else
      swift_release(*v21);
    v26 = *((unsigned __int8 *)v22 + v15);
    if (v26 >= 2)
    {
      if (v15 <= 3)
        v27 = v15;
      else
        v27 = 4;
      __asm { BR              X12 }
    }
    if (v26 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v18 + 32))(v21, v22, v23);
      v28 = 1;
    }
    else
    {
      v28 = 0;
      *v21 = *v22;
    }
    *((_BYTE *)v21 + v15) = v28;
  }
  v29 = type metadata accessor for RedactionReasons(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(_DWORD *)(v30 + 80) & 0xF8 | 7;
  v32 = v15 + v31 + 1;
  v33 = (_QWORD *)(((unint64_t)v21 + v32) & ~v31);
  v34 = (_QWORD *)(((unint64_t)v22 + v32) & ~v31);
  if (*(_QWORD *)(v30 + 64) <= 8uLL)
    v35 = 8;
  else
    v35 = *(_QWORD *)(v30 + 64);
  if (v33 != v34)
  {
    v36 = v29;
    v37 = *((unsigned __int8 *)v33 + v35);
    if (v37 >= 2)
    {
      if (v35 <= 3)
        v38 = v35;
      else
        v38 = 4;
      __asm { BR              X12 }
    }
    if (v37 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v30 + 8))(v33, v29);
    else
      swift_release(*v33);
    v39 = *((unsigned __int8 *)v34 + v35);
    if (v39 >= 2)
    {
      if (v35 <= 3)
        v40 = v35;
      else
        v40 = 4;
      __asm { BR              X12 }
    }
    if (v39 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v30 + 32))(v33, v34, v36);
      v41 = 1;
    }
    else
    {
      v41 = 0;
      *v33 = *v34;
    }
    *((_BYTE *)v33 + v35) = v41;
  }
  v42 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v43 = *(unsigned __int8 *)(v42 + 80);
  v44 = v35 + v43 + 1;
  v45 = ((unint64_t)v33 + v44) & ~v43;
  v46 = ((unint64_t)v34 + v44) & ~v43;
  (*(void (**)(unint64_t, unint64_t))(v42 + 40))(v45, v46);
  *(_BYTE *)(v45 + *(_QWORD *)(v42 + 64)) = *(_BYTE *)(v46 + *(_QWORD *)(v42 + 64));
  return a1;
}

uint64_t sub_100021DC0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;

  v6 = type metadata accessor for ColorScheme(0);
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) <= 8uLL)
    v7 = 8;
  else
    v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v8 = *(_QWORD *)(type metadata accessor for WidgetRenderingMode(0) - 8);
  if (*(_QWORD *)(v8 + 64) <= 8uLL)
    v9 = 8;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(type metadata accessor for RedactionReasons(0) - 8);
  if (*(_QWORD *)(v10 + 64) <= 8uLL)
    v11 = 8;
  else
    v11 = *(_QWORD *)(v10 + 64);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(_DWORD *)(v12 + 84);
  if (v13 <= 0xFE)
    v14 = 254;
  else
    v14 = *(_DWORD *)(v12 + 84);
  if (!a2)
    return 0;
  v15 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v16 = v7 + v15 + 1;
  v17 = v9 + 1;
  v18 = *(_DWORD *)(v10 + 80) & 0xF8 | 7;
  v19 = *(unsigned __int8 *)(v12 + 80);
  v20 = v11 + v19 + 1;
  if (a2 <= v14)
    goto LABEL_33;
  v21 = *(_QWORD *)(v12 + 64) + ((v20 + ((v17 + v18 + (v16 & ~v15)) & ~v18)) & ~v19) + 1;
  v22 = 8 * v21;
  if (v21 <= 3)
  {
    v25 = ((a2 - v14 + ~(-1 << v22)) >> v22) + 1;
    if (HIWORD(v25))
    {
      v23 = *(_DWORD *)(a1 + v21);
      if (!v23)
        goto LABEL_33;
      goto LABEL_24;
    }
    if (v25 > 0xFF)
    {
      v23 = *(unsigned __int16 *)(a1 + v21);
      if (!*(_WORD *)(a1 + v21))
        goto LABEL_33;
      goto LABEL_24;
    }
    if (v25 < 2)
    {
LABEL_33:
      if (v13 > 0xFE)
        return (*(uint64_t (**)(uint64_t))(v12 + 48))((v20 + ((((v16 + a1) & ~v15) + v17 + v18) & ~v18)) & ~v19);
      v28 = *(unsigned __int8 *)(a1 + v7);
      if (v28 >= 2)
        return (v28 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v23 = *(unsigned __int8 *)(a1 + v21);
  if (!*(_BYTE *)(a1 + v21))
    goto LABEL_33;
LABEL_24:
  v26 = (v23 - 1) << v22;
  if (v21 > 3)
    v26 = 0;
  if ((_DWORD)v21)
  {
    if (v21 <= 3)
      v27 = v21;
    else
      v27 = 4;
    __asm { BR              X12 }
  }
  return v14 + v26 + 1;
}

void sub_100021FF8(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;

  v8 = type metadata accessor for ColorScheme(0);
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) <= 8uLL)
    v9 = 8;
  else
    v9 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v10 = *(_QWORD *)(type metadata accessor for WidgetRenderingMode(0) - 8);
  if (*(_QWORD *)(v10 + 64) <= 8uLL)
    v11 = 8;
  else
    v11 = *(_QWORD *)(v10 + 64);
  v12 = *(_QWORD *)(type metadata accessor for RedactionReasons(0) - 8);
  if (*(_QWORD *)(v12 + 64) <= 8uLL)
    v13 = 8;
  else
    v13 = *(_QWORD *)(v12 + 64);
  v14 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v14 + 84) <= 0xFEu)
    v15 = 254;
  else
    v15 = *(_DWORD *)(v14 + 84);
  v16 = *(_DWORD *)(v10 + 80) & 0xF8 | 7;
  v17 = *(_DWORD *)(v12 + 80) & 0xF8 | 7;
  v18 = *(_QWORD *)(v14 + 64)
      + ((v13 + *(unsigned __int8 *)(v14 + 80) + 1 + ((v11 + 1 + v17 + ((v9 + 1 + v16) & ~v16)) & ~v17)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
      + 1;
  if (a3 <= v15)
  {
    v19 = 0;
  }
  else if (v18 <= 3)
  {
    v21 = ((a3 - v15 + ~(-1 << (8 * v18))) >> (8 * v18)) + 1;
    if (HIWORD(v21))
    {
      v19 = &dword_100000004;
    }
    else if (v21 >= 0x100)
    {
      v19 = 2;
    }
    else
    {
      v19 = v21 > 1;
    }
  }
  else
  {
    v19 = &_mh_execute_header.magic + 1;
  }
  if (v15 < a2)
  {
    v20 = ~v15 + a2;
    if (v18 < 4)
    {
      if ((_DWORD)v18)
      {
        v22 = v20 & ~(-1 << (8 * v18));
        bzero(a1, v18);
        if ((_DWORD)v18 == 3)
        {
          *(_WORD *)a1 = v22;
          a1[2] = BYTE2(v22);
        }
        else if ((_DWORD)v18 == 2)
        {
          *(_WORD *)a1 = v22;
        }
        else
        {
          *a1 = v22;
        }
      }
    }
    else
    {
      bzero(a1, v18);
      *(_DWORD *)a1 = v20;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X0 }
}

void sub_1000222FC()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x1000222E4);
}

void sub_10002230C()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x1000222E4);
}

void sub_100022314()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x1000222E4);
}

uint64_t type metadata accessor for MapSnapshotImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000234B0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MapSnapshotImage);
}

uint64_t sub_10002232C(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10006CA1C, 1);
}

uint64_t sub_100022360(char a1)
{
  NSBundle v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if ((a1 & 0xFE) == 2)
    return 0;
  if ((a1 & 1) != 0)
  {
    if (qword_10008BA00 != -1)
      swift_once(&qword_10008BA00, sub_100045C88);
    v2.super.isa = (Class)qword_100090BC0;
    v3 = 0xD000000000000030;
    v4 = 0xD000000000000044;
    v8 = 0x80000001000799E0;
    v5 = 0x8000000100079980;
    v7 = 0x80000001000799C0;
    v6 = 0xD000000000000017;
  }
  else
  {
    if (qword_10008BA00 != -1)
      swift_once(&qword_10008BA00, sub_100045C88);
    v2.super.isa = (Class)qword_100090BC0;
    v3 = 0xD000000000000033;
    v4 = 0xD000000000000047;
    v8 = 0x8000000100079930;
    v5 = 0x80000001000798F0;
    v6 = 7364941;
    v7 = 0xE300000000000000;
  }
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v3, (Swift::String_optional)0, v2, *(Swift::String *)&v6, *(Swift::String *)&v4)._countAndFlagsBits;
}

uint64_t sub_100022490@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  *a2 = static Alignment.center.getter(a3);
  a2[1] = v6;
  v7 = sub_1000027AC(&qword_10008C898);
  return sub_1000224E0(v3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)a2 + *(int *)(v7 + 44));
}

uint64_t sub_1000224E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char v53;
  void (*v54)(_QWORD, _QWORD, _QWORD);
  void (*v55)(_QWORD, _QWORD);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t AssociatedConformanceWitness;
  void *v63;
  void *v64;
  void *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  int v71;
  void *v72;
  id v73;
  void (*v74)(uint64_t, uint64_t);
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t KeyPath;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t result;
  void (*v93)(char *, uint64_t, uint64_t);
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t AssociatedTypeWitness;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  _QWORD *v156;
  void (*v157)(_QWORD, _QWORD, _QWORD);
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD v165[2];

  v163 = a4;
  v164 = type metadata accessor for PlaceholderBackgroundView(0);
  v7 = __chkstk_darwin(v164);
  v154 = (uint64_t *)((char *)&v129 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v155 = (uint64_t)&v129 - v9;
  v161 = sub_1000027AC(&qword_10008C8A0);
  __chkstk_darwin(v161);
  v162 = (uint64_t)&v129 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000027AC(&qword_10008C6D8);
  __chkstk_darwin(v11);
  v130 = (char *)&v129 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_1000027AC(&qword_10008C6E8);
  v135 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v144 = (char *)&v129 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_1000027AC(&qword_10008C8A8);
  __chkstk_darwin(v131);
  v134 = (char *)&v129 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_1000027AC(&qword_10008C8B0);
  __chkstk_darwin(v132);
  v133 = (uint64_t)&v129 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_1000027AC(&qword_10008C8B8);
  __chkstk_darwin(v137);
  v138 = (char *)&v129 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = sub_1000027AC(&qword_10008C8C0);
  v17 = __chkstk_darwin(v160);
  v140 = (char *)&v129 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v139 = (char *)&v129 - v20;
  __chkstk_darwin(v19);
  v141 = (char *)&v129 - v21;
  v145 = type metadata accessor for ColorScheme(0);
  v148 = *(_QWORD *)(v145 - 8);
  v22 = __chkstk_darwin(v145);
  v158 = (char *)&v129 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v142 = (char *)&v129 - v25;
  __chkstk_darwin(v24);
  v143 = (uint64_t)&v129 - v26;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &unk_10006C294, &unk_10006C2A4);
  v147 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v146 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v150 = (char *)&v129 - v27;
  v28 = type metadata accessor for WidgetRenderingMode(0);
  v156 = *(_QWORD **)(v28 - 8);
  v157 = (void (*)(_QWORD, _QWORD, _QWORD))v28;
  v29 = __chkstk_darwin(v28);
  v31 = (char *)&v129 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v33 = (char *)&v129 - v32;
  v34 = type metadata accessor for RedactionReasons(0);
  v149 = *(_QWORD *)(v34 - 8);
  v35 = __chkstk_darwin(v34);
  v37 = (char *)&v129 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v39 = (char *)&v129 - v38;
  v152 = a3;
  v153 = a2;
  v41 = type metadata accessor for MapSnapshotImage(0, a2, a3, v40);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = __chkstk_darwin(v41);
  v45 = (char *)&v129 - v44;
  v129 = *(int *)(v43 + 48);
  LODWORD(a3) = *(unsigned __int8 *)(a1 + v129);
  v46 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v159 = a1;
  v46(v45, a1, v41);
  if ((_DWORD)a3 == 2)
  {
    v47 = sub_10005233C((uint64_t)v39);
    static RedactionReasons.privacy.getter(v47);
    v48 = sub_10001B41C(&qword_10008C900, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
    v49 = dispatch thunk of SetAlgebra.isSuperset(of:)(v37, v34, v48);
    v50 = *(void (**)(char *, uint64_t))(v149 + 8);
    v50(v37, v34);
    v50(v39, v34);
  }
  else
  {
    v49 = 0;
  }
  (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v41);
  v51 = v159;
  v52 = sub_100052310((uint64_t)v33);
  static WidgetRenderingMode.accented.getter(v52);
  v53 = static WidgetRenderingMode.== infix(_:_:)(v33, v31);
  v54 = v157;
  v55 = (void (*)(_QWORD, _QWORD))v156[1];
  v55(v31, v157);
  v55(v33, v54);
  v56 = (uint64_t)v158;
  if ((v49 & 1) != 0)
    goto LABEL_13;
  v58 = v152;
  v57 = v153;
  v59 = v150;
  (*(void (**)(uint64_t, uint64_t))(v152 + 24))(v153, v152);
  v60 = AssociatedTypeWitness;
  v61 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v146 + 8))(v59, v147);
LABEL_13:
    KeyPath = swift_getKeyPath(&unk_10006A9E0);
    v87 = (uint64_t)v154;
    *v154 = KeyPath;
    v88 = sub_1000027AC(&qword_10008C488);
    swift_storeEnumTagMultiPayload(v87, v88, 0);
    v89 = v155;
    sub_100023124(v87, v155);
    v90 = v162;
    sub_100023168(v89, v162);
    swift_storeEnumTagMultiPayload(v90, v161, 1);
    v91 = sub_1000231AC();
    sub_10001B41C(&qword_10008C8F8, type metadata accessor for PlaceholderBackgroundView, (uint64_t)&unk_10006B088);
    _ConditionalContent<>.init(storage:)(v90, v160, v164, v91);
    return sub_10002336C(v89);
  }
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v58, v57, v60, &unk_10006C294, &unk_10006C29C);
  v63 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(v60, AssociatedConformanceWitness);
  v65 = v64;
  (*(void (**)(char *, uint64_t))(v61 + 8))(v59, v60);
  if (v63 == (void *)1)
    goto LABEL_13;
  v66 = v53;
  v67 = v143;
  sub_100052044(v143);
  v68 = v148;
  v69 = v142;
  v70 = v145;
  v157 = *(void (**)(_QWORD, _QWORD, _QWORD))(v148 + 16);
  v157(v142, v67, v145);
  v71 = (*(uint64_t (**)(char *, uint64_t))(v68 + 88))(v69, v70);
  v72 = v63;
  if (v71 == enum case for ColorScheme.light(_:) || (v72 = v65, v71 == enum case for ColorScheme.dark(_:)))
  {
    v73 = v72;

    v74 = *(void (**)(uint64_t, uint64_t))(v148 + 8);
    v74(v67, v70);
    if (!v72)
      goto LABEL_13;
    v75 = v73;
    v76 = Image.init(uiImage:)(v75);
    v77 = (uint64_t)v130;
    static WidgetAccentedRenderingMode.fullColor.getter();
    v78 = type metadata accessor for WidgetAccentedRenderingMode(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v77, 0, 1, v78);
    Image.widgetAccentedRenderingMode(_:)(v77, v76);
    swift_release(v76);
    sub_100015590(v77, &qword_10008C6D8);
    v156 = v75;
    if ((v66 & 1) != 0)
    {
      v79 = v56;
      v80 = v56;
      v81 = v145;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v148 + 104))(v79, enum case for ColorScheme.dark(_:), v145);
      v82 = 1.0;
      v83 = 0xBFB999999999999ALL;
      v84 = (uint64_t)v138;
      v85 = v131;
    }
    else
    {
      sub_100052044(v56);
      v83 = 0;
      v82 = 0.0;
      v84 = (uint64_t)v138;
      v85 = v131;
      v80 = v56;
      v81 = v145;
    }
    v93 = (void (*)(char *, uint64_t, uint64_t))v157;
    v94 = 0xD000000000000014;
    v95 = swift_getKeyPath(&unk_10006AA10);
    v96 = (uint64_t)v134;
    v97 = (uint64_t *)&v134[*(int *)(v85 + 36)];
    v98 = sub_1000027AC(&qword_10008C8F0);
    v93((char *)v97 + *(int *)(v98 + 28), v80, v81);
    *v97 = v95;
    v99 = v135;
    v100 = v144;
    v101 = v136;
    (*(void (**)(uint64_t, char *, uint64_t))(v135 + 16))(v96, v144, v136);
    v74(v80, v81);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v100, v101);
    v102 = v133;
    sub_100016550(v96, v133, &qword_10008C8A8);
    *(double *)(v102 + *(int *)(v132 + 36)) = v82;
    sub_100015590(v96, &qword_10008C8A8);
    sub_100016550(v102, v84, &qword_10008C8B0);
    v103 = v137;
    *(_QWORD *)(v84 + *(int *)(v137 + 36)) = v83;
    sub_100015590(v102, &qword_10008C8B0);
    v104 = v129;
    v105 = *(unsigned __int8 *)(v51 + v129);
    if (v105 == 3)
    {
      v94 = 0xD000000000000018;
      v107 = 0x8000000100079880;
      v106 = (uint64_t)v141;
    }
    else
    {
      v106 = (uint64_t)v141;
      if (v105 == 2)
      {
        v94 = 0xD000000000000023;
        v108 = "SuggestionDestinationWidgetMapImage";
      }
      else
      {
        v108 = "NearbyWidgetMapImage";
      }
      v107 = (unint64_t)(v108 - 32) | 0x8000000000000000;
    }
    v109 = sub_100023274(&qword_10008C8D0, &qword_10008C8B8, (void (*)(void))sub_100023250);
    v110 = (uint64_t)v140;
    View.accessibilityIdentifier(_:)(v94, v107, v103, v109);
    swift_bridgeObjectRelease(v107);
    sub_100015590(v84, &qword_10008C8B8);
    v111 = *(_BYTE *)(v51 + v104);
    v165[0] = sub_100022360(v111);
    v165[1] = v112;
    v113 = sub_10001D720();
    v114 = Text.init<A>(_:)(v165, &type metadata for String, v113);
    v116 = v115;
    v118 = v117;
    v120 = v119 & 1;
    v121 = sub_100022360(v111);
    v123 = v122;
    swift_bridgeObjectRelease(v122);
    v124 = HIBYTE(v123) & 0xF;
    if ((v123 & 0x2000000000000000) == 0)
      v124 = v121 & 0xFFFFFFFFFFFFLL;
    v125 = (uint64_t)v139;
    v126 = v160;
    ModifiedContent<>.accessibilityLabel(_:isEnabled:)(v114, v116, v120, v118, v124 != 0, v160);
    sub_10001D86C(v114, v116, v120);
    swift_bridgeObjectRelease(v118);
    sub_100015590(v110, &qword_10008C8C0);
    sub_100023468(v125, v106);
    v127 = v162;
    sub_100016550(v106, v162, &qword_10008C8C0);
    swift_storeEnumTagMultiPayload(v127, v161, 0);
    v128 = sub_1000231AC();
    sub_10001B41C(&qword_10008C8F8, type metadata accessor for PlaceholderBackgroundView, (uint64_t)&unk_10006B088);
    _ConditionalContent<>.init(storage:)(v127, v126, v164, v128);

    return sub_100015590(v106, &qword_10008C8C0);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "GeneralMapsWidget/ColorSchemeSpecificImageSet.swift", 51, 2, 24, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_100023124(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PlaceholderBackgroundView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100023168(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PlaceholderBackgroundView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000231AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C8C8;
  if (!qword_10008C8C8)
  {
    v1 = sub_1000027EC(&qword_10008C8C0);
    sub_100023274(&qword_10008C8D0, &qword_10008C8B8, (void (*)(void))sub_100023250);
    sub_10001B41C(&qword_10008C6D0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008C8C8);
  }
  return result;
}

uint64_t sub_100023250()
{
  return sub_100023274(&qword_10008C8D8, &qword_10008C8B0, (void (*)(void))sub_1000232DC);
}

uint64_t sub_100023274(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000027EC(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000232DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C8E0;
  if (!qword_10008C8E0)
  {
    v1 = sub_1000027EC(&qword_10008C8A8);
    swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of Image.widgetAccentedRenderingMode(_:)>>, 1);
    sub_10001D82C(&qword_10008C8E8, &qword_10008C8F0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008C8E0);
  }
  return result;
}

uint64_t sub_10002336C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PlaceholderBackgroundView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000233A8()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1000233C8()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1000233E8(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for ColorScheme(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.colorScheme.setter(v3);
}

uint64_t sub_100023468(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000027AC(&qword_10008C8C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000234B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t getEnumTagSinglePayload for MapSnapshotImageType(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
  {
    v6 = *a1;
    if (v6 >= 2)
    {
      v7 = (v6 + 2147483646) & 0x7FFFFFFF;
      result = v7 - 1;
      if (v7 > 1)
        return result;
    }
    return 0;
  }
  v2 = a2 + 3;
  if (a2 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if (v2 >> 8 < 0xFF)
    v3 = 1;
  if (v2 >= 0x100)
    v4 = v3;
  else
    v4 = 0;
  return ((uint64_t (*)(void))((char *)&loc_10002352C + 4 * byte_10006A93A[v4]))();
}

uint64_t storeEnumTagSinglePayload for MapSnapshotImageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 3;
  if (a3 + 3 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFD)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000235D8 + 4 * byte_10006A944[v5]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10002360C + 4 * byte_10006A93F[v5]))();
}

uint64_t sub_10002360C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100023614(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002361CLL);
  return result;
}

uint64_t sub_100023628(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100023630);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100023634(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002363C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100023648(unsigned __int8 *a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *a1;
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

_BYTE *sub_100023664(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 1;
  return result;
}

ValueMetadata *type metadata accessor for MapSnapshotImageType()
{
  return &type metadata for MapSnapshotImageType;
}

uint64_t sub_10002368C()
{
  return sub_10001D82C(&qword_10008C908, &qword_10008C910, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

uint64_t sub_1000236B8(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = *v5;
    __chkstk_darwin();
    v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v22 = 32;
    v23 = a2;
    do
    {
      if (a2 == 1)
        v24 = 0;
      else
        v24 = *(_DWORD *)(TupleTypeMetadata + v22);
      v26 = *v5++;
      v25 = v26;
      v27 = *a1++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(&v8[v24], v27);
      v22 += 16;
      --v23;
    }
    while (v23);
    return TupleView.init(_:)(v8, TupleTypeMetadata);
  }
  __chkstk_darwin();
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - (char *)v5) < 0x20)
      goto LABEL_9;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (__int128 *)(v5 + 2);
    v13 = v10 + 16;
    v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != a2)
    {
LABEL_9:
      v16 = a2 - v11;
      v17 = v11;
      v18 = &v10[8 * v11];
      v19 = &v5[v17];
      do
      {
        v20 = *v19++;
        *(_QWORD *)v18 = v20;
        v18 += 8;
        --v16;
      }
      while (v16);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata(0, a2);
  __chkstk_darwin();
  v8 = (char *)&v29 - v21;
  if (a2)
    goto LABEL_12;
  return TupleView.init(_:)(v8, TupleTypeMetadata);
}

uint64_t sub_10002386C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  void (*v32)(char *, uint64_t);
  uint64_t v34;
  uint64_t WitnessTable;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;

  v38 = a1;
  v43 = a2;
  v3 = sub_1000027AC(&qword_10008C9B8);
  __chkstk_darwin(v3);
  v42 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000027EC(&qword_10008C9C0);
  v37 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for ModifiedContent(255, v37, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v5, v6, 0, 0);
  v8 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v8);
  v9 = type metadata accessor for ZStack(0, v8, WitnessTable);
  v39 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - v10;
  v12 = type metadata accessor for ModifiedContent(0, v9, &type metadata for _PaddingLayout);
  v40 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v34 - v13;
  v15 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v9);
  v47 = v15;
  v48 = &protocol witness table for _PaddingLayout;
  v36 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  v17 = type metadata accessor for ContentSizeCategoryLimiter(0, v12, v36, v16);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v34 - v22;
  v24 = *(_QWORD *)(v38 + 24);
  v44 = v37;
  v45 = v24;
  v46 = v41;
  v26 = static Alignment.center.getter(v25);
  ZStack.init(alignment:content:)(v26);
  if (qword_10008B9A8 != -1)
    swift_once(&qword_10008B9A8, sub_100024634);
  View.padding(_:)(v9, v15, *(double *)&qword_10008C918);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v9);
  v27 = enum case for ContentSizeCategory.extraExtraExtraLarge(_:);
  v28 = type metadata accessor for ContentSizeCategory(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = (uint64_t)v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 104))(v42, v27, v28);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v30, 0, 1, v28);
  sub_1000244E0(v30, v12, v36, (uint64_t)v21);
  sub_100015590(v30, &qword_10008C9B8);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v14, v12);
  swift_getWitnessTable(&unk_10006ABF0, v17);
  v31 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v31(v23, v21, v17);
  v32 = *(void (**)(char *, uint64_t))(v18 + 8);
  v32(v21, v17);
  v31(v43, v23, v17);
  return ((uint64_t (*)(char *, uint64_t))v32)(v23, v17);
}

uint64_t sub_100023BD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  id v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  void (*v60)(char *, uint64_t, __n128);
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t WitnessTable;
  uint64_t v73;
  char *v74;
  void (*v75)(char *, uint64_t, uint64_t);
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD v106[2];
  uint64_t v107[4];

  v98 = a3;
  v102 = a4;
  v97 = a2;
  v103 = type metadata accessor for ModifiedContent(0, a2, &type metadata for _PaddingLayout);
  v99 = *(_QWORD *)(v103 - 8);
  v5 = __chkstk_darwin(v103);
  v101 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v100 = (char *)&v79 - v7;
  v85 = sub_1000027AC(&qword_10008C9D8);
  __chkstk_darwin(v85);
  v87 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_1000027AC(&qword_10008C9E0);
  v9 = __chkstk_darwin(v93);
  v86 = (uint64_t)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v88 = (uint64_t)&v79 - v11;
  v91 = sub_1000027AC(&qword_10008C9E8);
  __chkstk_darwin(v91);
  v92 = (uint64_t)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for _ForegroundLayerLevel(0);
  __chkstk_darwin(v13);
  v84 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for ColorScheme(0);
  v82 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v81 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_1000027AC(&qword_10008C9F0);
  v16 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v18 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_1000027AC(&qword_10008C9F8);
  __chkstk_darwin(v80);
  v20 = (char *)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_1000027AC(&qword_10008CA00);
  __chkstk_darwin(v90);
  v22 = (char *)&v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for WidgetRenderingMode(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v79 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v29 = (char *)&v79 - v28;
  v94 = sub_1000027AC(&qword_10008C9C0);
  v30 = __chkstk_darwin(v94);
  v95 = (uint64_t)&v79 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v33 = (char *)&v79 - v32;
  v96 = a1;
  v34 = sub_100052310((uint64_t)v29);
  static WidgetRenderingMode.accented.getter(v34);
  LOBYTE(a1) = static WidgetRenderingMode.== infix(_:_:)(v29, v27);
  v35 = *(void (**)(char *, uint64_t))(v24 + 8);
  v35(v27, v23);
  v35(v29, v23);
  if ((a1 & 1) != 0)
  {
    v36 = objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
    v37 = Color.init(_:)(v36);
    v107[0] = v37;
    ShapeStyle._fillingContainerShape()(&type metadata for Color, &protocol witness table for Color);
    swift_release(v37);
    v38 = v82;
    v39 = v81;
    v40 = v83;
    (*(void (**)(char *, _QWORD, uint64_t))(v82 + 104))(v81, enum case for ColorScheme.dark(_:), v83);
    KeyPath = swift_getKeyPath(&unk_10006AB90);
    v42 = (uint64_t *)&v20[*(int *)(v80 + 36)];
    v43 = sub_1000027AC(&qword_10008C8F0);
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))((char *)v42 + *(int *)(v43 + 28), v39, v40);
    *v42 = KeyPath;
    v44 = v89;
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v20, v18, v89);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
    v45 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v44);
    v46 = v84;
    static _ForegroundLayerLevel.secondary.getter(v45);
    v47 = v90;
    _ForegroundLayerLevelViewModifier.init(level:)(v46);
    sub_10001565C((uint64_t)v20, (uint64_t)v22, &qword_10008C9F8);
    v48 = v92;
    sub_100016550((uint64_t)v22, v92, &qword_10008CA00);
    swift_storeEnumTagMultiPayload(v48, v91, 0);
    v49 = sub_100023274(&qword_10008CA08, &qword_10008CA00, (void (*)(void))sub_100025B64);
    sub_100023274(&qword_10008CA18, &qword_10008C9E0, (void (*)(void))sub_100025C04);
    _ConditionalContent<>.init(storage:)(v48, v47, v93, v49);
    sub_100015590((uint64_t)v22, &qword_10008CA00);
    v51 = (uint64_t)v33;
  }
  else
  {
    v52 = v89;
    v53 = v90;
    v54 = v91;
    v84 = v33;
    v56 = v92;
    v55 = v93;
    if (qword_10008B9B0 != -1)
      swift_once(&qword_10008B9B0, sub_10002554C);
    v107[0] = qword_10008C920;
    ShapeStyle._fillingContainerShape()(&type metadata for Color, &protocol witness table for Color);
    v57 = (uint64_t)v87;
    if (qword_10008B9B8 != -1)
      swift_once(&qword_10008B9B8, sub_100025584);
    v58 = qword_10008C928;
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 16))(v57, v18, v52);
    v59 = (uint64_t *)(v57 + *(int *)(v85 + 36));
    *v59 = v58;
    v59[1] = 0x4000000000000000;
    v59[2] = 0;
    v59[3] = 0;
    v60 = *(void (**)(char *, uint64_t, __n128))(v16 + 8);
    v61 = swift_retain(v58);
    v60(v18, v52, v61);
    if (qword_10008B9C0 != -1)
      swift_once(&qword_10008B9C0, sub_1000255C4);
    v62 = qword_10008C930;
    v63 = v86;
    sub_100016550(v57, v86, &qword_10008C9D8);
    v64 = v63 + *(int *)(v55 + 36);
    *(_QWORD *)v64 = v62;
    *(_OWORD *)(v64 + 8) = xmmword_10006AA60;
    *(_QWORD *)(v64 + 24) = 0x3FF8000000000000;
    swift_retain(v62);
    sub_100015590(v57, &qword_10008C9D8);
    v65 = v88;
    sub_10001565C(v63, v88, &qword_10008C9E0);
    sub_100016550(v65, v56, &qword_10008C9E0);
    swift_storeEnumTagMultiPayload(v56, v54, 1);
    v66 = sub_100023274(&qword_10008CA08, &qword_10008CA00, (void (*)(void))sub_100025B64);
    sub_100023274(&qword_10008CA18, &qword_10008C9E0, (void (*)(void))sub_100025C04);
    v51 = (uint64_t)v84;
    _ConditionalContent<>.init(storage:)(v56, v53, v55, v66);
    sub_100015590(v65, &qword_10008C9E0);
  }
  v68 = v97;
  v67 = v98;
  v69 = type metadata accessor for PlatterView(0, v97, v98, v50);
  v70 = (uint64_t)v101;
  View.padding(_:)(v68, v67, *(double *)(v96 + *(int *)(v69 + 36)));
  v107[2] = v67;
  v107[3] = (uint64_t)&protocol witness table for _PaddingLayout;
  v71 = v103;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v103);
  v73 = v99;
  v74 = v100;
  v75 = *(void (**)(char *, uint64_t, uint64_t))(v99 + 16);
  v75(v100, v70, v71);
  v76 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
  v76(v70, v71);
  v77 = v95;
  sub_100016550(v51, v95, &qword_10008C9C0);
  v107[0] = v77;
  v75((char *)v70, (uint64_t)v74, v71);
  v107[1] = v70;
  v106[0] = v94;
  v106[1] = v71;
  v104 = sub_100025C94();
  v105 = WitnessTable;
  sub_1000236B8(v107, 2uLL, (uint64_t)v106);
  v76((uint64_t)v74, v71);
  sub_100015590(v51, &qword_10008C9C0);
  v76(v70, v71);
  return sub_100015590(v77, &qword_10008C9C0);
}

uint64_t sub_1000244E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v5 = v4;
  v10 = sub_1000027AC(&qword_10008C9C8);
  v11 = __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v11);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000027AC(&qword_10008C9B8);
  __chkstk_darwin(v17);
  v19 = (char *)&v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100016550(a1, (uint64_t)v19, &qword_10008C9B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v5, a2);
  sub_100025A6C(v13);
  return sub_100025AB0((uint64_t)v19, (uint64_t)v13, (uint64_t)v16, a2, a3, a4);
}

void sub_100024624()
{
  qword_100090B68 = 0x4022000000000000;
}

void sub_100024634()
{
  qword_10008C918 = 0x4020000000000000;
}

uint64_t sub_100024644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

void sub_10002464C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_100027018(319, &qword_10008C888, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 0, 3, v6, a1 + 32);
    }
  }
}

uint64_t *sub_1000246F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;

  v6 = type metadata accessor for WidgetRenderingMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = v11 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v12 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v10 + 80)) & 0x100000) != 0
    || (((v8 & 0xFFFFFFFFFFFFFFF8) + v11 + 16) & ~v11) + *(_QWORD *)(v10 + 64) > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + (((v12 | 7) + 16) & ~(unint64_t)(v12 | 7)));
    swift_retain(v15);
  }
  else
  {
    v16 = *((unsigned __int8 *)a2 + v8);
    if (v16 >= 2)
    {
      if (v8 <= 3)
        v17 = v8;
      else
        v17 = 4;
      __asm { BR              X13 }
    }
    v18 = v8 + 1;
    if (v16 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      v19 = 1;
    }
    else
    {
      v20 = *a2;
      *a1 = *a2;
      swift_retain(v20);
      v19 = 0;
    }
    *((_BYTE *)a1 + v8) = v19;
    v21 = (_QWORD *)(((unint64_t)a1 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)(((unint64_t)a2 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v21 = *v22;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)v21 + v11 + 8) & ~v11, ((unint64_t)v22 + v11 + 8) & ~v11, v9);
  }
  return a1;
}

uint64_t sub_1000248CC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v4 = type metadata accessor for WidgetRenderingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)a1 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
    (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(a1, v4);
  else
    swift_release(*a1);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((((unint64_t)a1 + v6 + 8) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t *sub_1000249CC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = type metadata accessor for WidgetRenderingMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    v11 = 1;
  }
  else
  {
    v12 = *a2;
    *a1 = *a2;
    swift_retain(v12);
    v11 = 0;
  }
  *((_BYTE *)a1 + v8) = v11;
  v13 = (_QWORD *)(((unint64_t)a1 + v8 + 8) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)a2 + v8 + 8) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 16))(((unint64_t)v13 + *(unsigned __int8 *)(v15 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), ((unint64_t)v14 + *(unsigned __int8 *)(v15 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

uint64_t *sub_100024B04(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v6 = type metadata accessor for WidgetRenderingMode(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v7 + 64) <= 8uLL)
      v8 = 8;
    else
      v8 = *(_QWORD *)(v7 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
      (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(a1, v6);
    else
      swift_release(*a1);
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      *((_BYTE *)a1 + v8) = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      *((_BYTE *)a1 + v8) = 0;
      swift_retain(v13);
    }
  }
  v14 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for WidgetRenderingMode(0) - 8) + 64);
  if (v14 <= 8)
    v14 = 8;
  v15 = v14 + 8;
  v16 = (_QWORD *)(((unint64_t)a1 + v15) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)a2 + v15) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 24))(((unint64_t)v16 + *(unsigned __int8 *)(v18 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), ((unint64_t)v17 + *(unsigned __int8 *)(v18 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

_QWORD *sub_100024D38(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = type metadata accessor for WidgetRenderingMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
    v11 = 1;
  }
  else
  {
    v11 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v8) = v11;
  v12 = (_QWORD *)(((unint64_t)a1 + v8 + 8) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)a2 + v8 + 8) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v14 + 32))(((unint64_t)v12 + *(unsigned __int8 *)(v14 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), ((unint64_t)v13 + *(unsigned __int8 *)(v14 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  return a1;
}

_QWORD *sub_100024E6C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v6 = type metadata accessor for WidgetRenderingMode(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v7 + 64) <= 8uLL)
      v8 = 8;
    else
      v8 = *(_QWORD *)(v7 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v6);
    else
      swift_release(*a1);
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
      v13 = 1;
    }
    else
    {
      v13 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v8) = v13;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for WidgetRenderingMode(0) - 8) + 64);
  if (v14 <= 8)
    v14 = 8;
  v15 = v14 + 8;
  v16 = (_QWORD *)(((unint64_t)a1 + v15) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)a2 + v15) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 40))(((unint64_t)v16 + *(unsigned __int8 *)(v18 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), ((unint64_t)v17 + *(unsigned __int8 *)(v18 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

uint64_t sub_10002509C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v14;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;

  v6 = type metadata accessor for WidgetRenderingMode(0);
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) <= 8uLL)
    v7 = 8;
  else
    v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= 0xFE)
    v10 = 254;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v8 + 80);
  if (a2 <= v10)
    goto LABEL_27;
  v12 = (((v7 & 0xFFFFFFFFFFFFFFF8) + v11 + 16) & ~v11) + *(_QWORD *)(v8 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v16 = ((a2 - v10 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v16))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v16 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v16 < 2)
    {
LABEL_27:
      if (v9 > 0xFE)
        return (*(uint64_t (**)(unint64_t))(v8 + 48))((((a1 + v7 + 8) & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & ~v11);
      v19 = *(unsigned __int8 *)(a1 + v7);
      if (v19 >= 2)
        return (v19 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_27;
LABEL_18:
  v17 = (v14 - 1) << v13;
  if (v12 > 3)
    v17 = 0;
  if ((_DWORD)v12)
  {
    if (v12 <= 3)
      v18 = v12;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  return v10 + v17 + 1;
}

void sub_100025248(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;

  v8 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for WidgetRenderingMode(0) - 8) + 64);
  if (v8 <= 8)
    v8 = 8;
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v9 + 84) <= 0xFEu)
    v10 = 254;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = (((v8 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(_QWORD *)(v9 + 64);
  if (a3 <= v10)
  {
    v12 = 0;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = &dword_100000004;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = &_mh_execute_header.magic + 1;
  }
  if (v10 < a2)
  {
    v13 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if ((_DWORD)v11 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

void sub_1000254D0()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x1000254BCLL);
}

void sub_1000254E0()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x1000254BCLL);
}

void sub_1000254E8()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x1000254BCLL);
}

uint64_t type metadata accessor for PlatterView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000234B0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatterView);
}

uint64_t sub_100025500(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10006CAE8, 1);
}

uint64_t type metadata accessor for ContentSizeCategoryLimiter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000234B0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContentSizeCategoryLimiter);
}

uint64_t sub_100025540@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100023BD4(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10002554C()
{
  uint64_t result;

  result = Color.init(_:bundle:)(0xD000000000000011, 0x8000000100079A50, 0);
  qword_10008C920 = result;
  return result;
}

uint64_t sub_100025584()
{
  uint64_t result;

  result = Color.init(_:bundle:)(0x5372657474616C70, 0xED0000776F646168, 0);
  qword_10008C928 = result;
  return result;
}

uint64_t sub_1000255C4()
{
  uint64_t result;

  result = Color.init(_:bundle:)(0xD000000000000013, 0x8000000100079A30, 0);
  qword_10008C930 = result;
  return result;
}

uint64_t sub_1000255FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v6 = sub_1000027AC(&qword_10008C9B8);
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ContentSizeCategory(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v30 - v14;
  sub_100016550(v3, (uint64_t)v8, &qword_10008C9B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_100015590((uint64_t)v8, &qword_10008C9B8);
  }
  else
  {
    v31 = a2;
    v16 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v16(v15, v8, v9);
    v30 = a1;
    v17 = sub_100052368((uint64_t)v13);
    v18 = static ContentSizeCategory.allCases.getter(v17);
    v19 = sub_100025D44((uint64_t)v13, v18);
    v21 = v20;
    v22 = swift_bridgeObjectRelease(v18);
    if ((v21 & 1) != 0)
      v23 = 0;
    else
      v23 = v19;
    v24 = static ContentSizeCategory.allCases.getter(v22);
    v25 = sub_100025D44((uint64_t)v15, v24);
    v27 = v26;
    swift_bridgeObjectRelease(v24);
    if ((v27 & 1) != 0)
      v25 = 0;
    v28 = *(void (**)(char *, uint64_t))(v10 + 8);
    v28(v13, v9);
    if (v25 < v23)
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v16)(v31, v15, v9);
    v28(v15, v9);
    a2 = v31;
  }
  return sub_100052368(a2);
}

uint64_t sub_1000257E8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a2;
  v4 = type metadata accessor for ContentSizeCategory(0);
  v27 = *(_QWORD *)(v4 - 8);
  v28 = v4;
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v5);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000027EC(&qword_10008CAC0);
  v13 = type metadata accessor for ModifiedContent(0, v8, v12);
  v26 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v26 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v2 + *(int *)(a1 + 40), v8);
  KeyPath = swift_getKeyPath(&unk_10006AB60);
  sub_1000255FC(a1, (uint64_t)v7);
  v20 = *(_QWORD *)(a1 + 24);
  View.environment<A>(_:_:)(KeyPath, v7, v8, v20);
  swift_release(KeyPath);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v28);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v21 = sub_1000271A8(&qword_10008CAC8, &qword_10008CAC0);
  v30 = v20;
  v31 = v21;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v22 = v26;
  v23 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  v23(v18, v16, v13);
  v24 = *(void (**)(char *, uint64_t))(v22 + 8);
  v24(v16, v13);
  v23(v29, v18, v13);
  return ((uint64_t (*)(char *, uint64_t))v24)(v18, v13);
}

uint64_t sub_1000259F0(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.sizeCategory.setter(v3);
}

uint64_t sub_100025A6C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  *a1 = swift_getKeyPath(&unk_10006AB60);
  v2 = sub_1000027AC(&qword_10008C9D0);
  return swift_storeEnumTagMultiPayload(a1, v2, 0);
}

uint64_t sub_100025AB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;

  sub_10001565C(a1, a6, &qword_10008C9B8);
  v12 = type metadata accessor for ContentSizeCategoryLimiter(0, a4, a5, v11);
  sub_10001565C(a2, a6 + *(int *)(v12 + 36), &qword_10008C9C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6 + *(int *)(v12 + 40), a3, a4);
}

uint64_t sub_100025B40()
{
  return EnvironmentValues.sizeCategory.getter();
}

unint64_t sub_100025B64()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10008CA10;
  if (!qword_10008CA10)
  {
    v1 = sub_1000027EC(&qword_10008C9F8);
    v2[0] = &type metadata for Color;
    v2[1] = &protocol witness table for Color;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of ShapeStyle._fillingContainerShape()>>, 1);
    sub_1000271A8(&qword_10008C8E8, &qword_10008C8F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008CA10);
  }
  return result;
}

unint64_t sub_100025C04()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10008CA20;
  if (!qword_10008CA20)
  {
    v1 = sub_1000027EC(&qword_10008C9D8);
    v2[0] = &type metadata for Color;
    v2[1] = &protocol witness table for Color;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of ShapeStyle._fillingContainerShape()>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008CA20);
  }
  return result;
}

unint64_t sub_100025C94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008CA28[0];
  if (!qword_10008CA28[0])
  {
    v1 = sub_1000027EC(&qword_10008C9C0);
    sub_100023274(&qword_10008CA08, &qword_10008CA00, (void (*)(void))sub_100025B64);
    sub_100023274(&qword_10008CA18, &qword_10008C9E0, (void (*)(void))sub_100025C04);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, qword_10008CA28);
  }
  return result;
}

uint64_t sub_100025D44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v5 = type metadata accessor for ContentSizeCategory(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = a2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v8 = *(_QWORD *)(v6 + 72);
  v9 = sub_1000271E8();
  v10 = 0;
  while ((dispatch thunk of static Equatable.== infix(_:_:)(v7, a1, v5, v9) & 1) == 0)
  {
    ++v10;
    v7 += v8;
    if (v2 == v10)
      return 0;
  }
  return v10;
}

void sub_100025E00(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_100027018(319, &qword_10008CAB0, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100027018(319, &qword_10008CAB8, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v6 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 0, 3, v8, a1 + 32);
      }
    }
  }
}

uint64_t *sub_100025ED4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v29;

  v6 = type metadata accessor for ContentSizeCategory(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_DWORD *)(v7 + 80);
  if (*(_DWORD *)(v7 + 84))
    v10 = *(_QWORD *)(v7 + 64);
  else
    v10 = v8 + 1;
  v11 = v9 & 0xF8 | 7;
  v12 = v10 + v11;
  if (v8 <= 8)
    v13 = 8;
  else
    v13 = *(_QWORD *)(v7 + 64);
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v16 = (*(_DWORD *)(v14 + 80) | v9) & 0x100000;
  if ((v15 | v11) != 7 || v16 != 0 || ((v13 + 1 + v15 + ((v10 + v11) & ~v11)) & ~v15) + *(_QWORD *)(v14 + 64) > 0x18)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + (((v15 | v11) + 16) & ~(v15 | v11)));
    swift_retain(v19);
  }
  else
  {
    v20 = v6;
    v29 = *(_QWORD *)(a3 + 16);
    v21 = ~v11;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      memcpy(a1, a2, v10);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v20);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v20);
    }
    v22 = (_QWORD *)(((unint64_t)a1 + v12) & v21);
    v23 = (uint64_t *)(((unint64_t)a2 + v12) & v21);
    v24 = *((unsigned __int8 *)v23 + v13);
    if (v24 >= 2)
    {
      if (v13 <= 3)
        v25 = v13;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    if (v24 == 1)
    {
      (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v7 + 16))(v22, v23, v20);
      v26 = 1;
    }
    else
    {
      v27 = *v23;
      *v22 = *v23;
      swift_retain(v27);
      v26 = 0;
    }
    *((_BYTE *)v22 + v13) = v26;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 16))(((unint64_t)v22 + v13 + v15 + 1) & ~v15, ((unint64_t)v23 + v13 + v15 + 1) & ~v15, v29);
  }
  return a1;
}

uint64_t sub_100026100(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v4 = type metadata accessor for ContentSizeCategory(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = *(_QWORD *)(v5 + 64);
  v8 = v6 + a1;
  if (!*(_DWORD *)(v5 + 84))
    ++v8;
  v7 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  v9 = (_QWORD *)((v8 + v7) & ~v7);
  if (v6 <= 8)
    v10 = 8;
  else
    v10 = *(_QWORD *)(v5 + 64);
  v11 = *((unsigned __int8 *)v9 + v10);
  if (v11 >= 2)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X12 }
  }
  if (v11 == 1)
    (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v9, v4);
  else
    swift_release(*v9);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)v9 + v10 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

void *sub_10002624C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for ContentSizeCategory(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
    if (v8)
      v10 = *(_QWORD *)(v7 + 64);
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
  }
  if (v8)
    v11 = v9;
  else
    v11 = v9 + 1;
  v12 = *(_DWORD *)(v7 + 80) & 0xF8 | 7;
  v13 = v11 + v12;
  v14 = (_QWORD *)(((unint64_t)a1 + v13) & ~v12);
  v15 = (uint64_t *)(((unint64_t)a2 + v13) & ~v12);
  if (v9 <= 8)
    v9 = 8;
  v16 = *((unsigned __int8 *)v15 + v9);
  if (v16 >= 2)
  {
    if (v9 <= 3)
      v17 = v9;
    else
      v17 = 4;
    __asm { BR              X12 }
  }
  if (v16 == 1)
  {
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v7 + 16))(v14, v15, v6);
    v18 = 1;
  }
  else
  {
    v19 = *v15;
    *v14 = *v15;
    swift_retain(v19);
    v18 = 0;
  }
  *((_BYTE *)v14 + v9) = v18;
  v20 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v20 + 16))(((unint64_t)v14 + v9 + *(unsigned __int8 *)(v20 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80), ((unint64_t)v15 + v9 + *(unsigned __int8 *)(v20 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  return a1;
}

void *sub_100026410(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  __n128 v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for ContentSizeCategory(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v12 = *(_QWORD *)(v7 + 64);
  else
    v12 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(a1, a2, v12);
LABEL_10:
  v13 = *(_QWORD *)(v7 + 64);
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = v13 + 1;
  v15 = *(_DWORD *)(v7 + 80) & 0xF8 | 7;
  v16 = v14 + v15;
  v17 = (uint64_t *)(((unint64_t)a1 + v16) & ~v15);
  v18 = (uint64_t *)(((unint64_t)a2 + v16) & ~v15);
  if (v13 <= 8)
    v19 = 8;
  else
    v19 = *(_QWORD *)(v7 + 64);
  if (v17 != v18)
  {
    v20 = *((unsigned __int8 *)v17 + v19);
    if (v20 >= 2)
    {
      if (v19 <= 3)
        v21 = v19;
      else
        v21 = 4;
      __asm { BR              X12 }
    }
    if (v20 == 1)
      (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v17, v6);
    else
      swift_release(*v17);
    v22 = *((unsigned __int8 *)v18 + v19);
    if (v22 >= 2)
    {
      if (v19 <= 3)
        v23 = v19;
      else
        v23 = 4;
      __asm { BR              X12 }
    }
    if (v22 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v17, v18, v6);
      *((_BYTE *)v17 + v19) = 1;
    }
    else
    {
      v24 = *v18;
      *v17 = *v18;
      *((_BYTE *)v17 + v19) = 0;
      v11 = swift_retain(v24);
    }
  }
  v25 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t, __n128))(v25 + 24))(((unint64_t)v17 + v19 + *(unsigned __int8 *)(v25 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80), ((unint64_t)v18 + v19 + *(unsigned __int8 *)(v25 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80), v11);
  return a1;
}

void *sub_1000266B0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v6 = type metadata accessor for ContentSizeCategory(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
    if (v8)
      v10 = *(_QWORD *)(v7 + 64);
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
  }
  if (v8)
    v11 = v9;
  else
    v11 = v9 + 1;
  v12 = *(_DWORD *)(v7 + 80) & 0xF8 | 7;
  v13 = v11 + v12;
  v14 = (_QWORD *)(((unint64_t)a1 + v13) & ~v12);
  v15 = (_QWORD *)(((unint64_t)a2 + v13) & ~v12);
  if (v9 <= 8)
    v9 = 8;
  v16 = *((unsigned __int8 *)v15 + v9);
  if (v16 >= 2)
  {
    if (v9 <= 3)
      v17 = v9;
    else
      v17 = 4;
    __asm { BR              X12 }
  }
  if (v16 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(v14, v15, v6);
    v18 = 1;
  }
  else
  {
    v18 = 0;
    *v14 = *v15;
  }
  *((_BYTE *)v14 + v9) = v18;
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v19 + 32))(((unint64_t)v14 + v9 + *(unsigned __int8 *)(v19 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), ((unint64_t)v15 + v9 + *(unsigned __int8 *)(v19 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  return a1;
}

void *sub_100026870(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v6 = type metadata accessor for ContentSizeCategory(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v11 = *(_QWORD *)(v7 + 64);
  else
    v11 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(a1, a2, v11);
LABEL_10:
  v12 = *(_QWORD *)(v7 + 64);
  if (*(_DWORD *)(v7 + 84))
    v13 = *(_QWORD *)(v7 + 64);
  else
    v13 = v12 + 1;
  v14 = *(_DWORD *)(v7 + 80) & 0xF8 | 7;
  v15 = v13 + v14;
  v16 = (_QWORD *)(((unint64_t)a1 + v15) & ~v14);
  v17 = (_QWORD *)(((unint64_t)a2 + v15) & ~v14);
  if (v12 <= 8)
    v18 = 8;
  else
    v18 = *(_QWORD *)(v7 + 64);
  if (v16 != v17)
  {
    v19 = *((unsigned __int8 *)v16 + v18);
    if (v19 >= 2)
    {
      if (v18 <= 3)
        v20 = v18;
      else
        v20 = 4;
      __asm { BR              X12 }
    }
    if (v19 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v16, v6);
    else
      swift_release(*v16);
    v21 = *((unsigned __int8 *)v17 + v18);
    if (v21 >= 2)
    {
      if (v18 <= 3)
        v22 = v18;
      else
        v22 = 4;
      __asm { BR              X12 }
    }
    if (v21 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(v16, v17, v6);
      v23 = 1;
    }
    else
    {
      v23 = 0;
      *v16 = *v17;
    }
    *((_BYTE *)v16 + v18) = v23;
  }
  v24 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v24 + 40))(((unint64_t)v16 + v18 + *(unsigned __int8 *)(v24 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80), ((unint64_t)v17 + v18 + *(unsigned __int8 *)(v24 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  return a1;
}

uint64_t sub_100026B0C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v6 = *(_QWORD *)(type metadata accessor for ContentSizeCategory(0) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = v7 - 1;
  else
    v8 = 0;
  v9 = *(_QWORD *)(v6 + 64);
  if (v9 <= 8)
    v10 = 8;
  else
    v10 = *(_QWORD *)(v6 + 64);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (v8 <= *(_DWORD *)(v11 + 84))
    v12 = *(_DWORD *)(v11 + 84);
  else
    v12 = v8;
  if (v12 <= 0xFE)
    v13 = 254;
  else
    v13 = v12;
  if (!v7)
    ++v9;
  if (!a2)
    return 0;
  v14 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  v15 = v9 + v14;
  v16 = *(unsigned __int8 *)(v11 + 80);
  v17 = v10 + v16 + 1;
  if (a2 > v13)
  {
    v18 = ((v17 + (v15 & ~v14)) & ~v16) + *(_QWORD *)(v11 + 64);
    v19 = 8 * v18;
    if (v18 > 3)
      goto LABEL_18;
    v21 = ((a2 - v13 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v21))
    {
      v20 = *(_DWORD *)(a1 + v18);
      if (!v20)
        goto LABEL_34;
      goto LABEL_25;
    }
    if (v21 > 0xFF)
    {
      v20 = *(unsigned __int16 *)(a1 + v18);
      if (!*(_WORD *)(a1 + v18))
        goto LABEL_34;
      goto LABEL_25;
    }
    if (v21 >= 2)
    {
LABEL_18:
      v20 = *(unsigned __int8 *)(a1 + v18);
      if (!*(_BYTE *)(a1 + v18))
        goto LABEL_34;
LABEL_25:
      v22 = (v20 - 1) << v19;
      if (v18 > 3)
        v22 = 0;
      if ((_DWORD)v18)
      {
        if (v18 <= 3)
          v23 = ((v17 + (v15 & ~(*(_DWORD *)(v6 + 80) & 0xF8 | 7))) & ~(_DWORD)v16) + *(_DWORD *)(v11 + 64);
        else
          v23 = 4;
        __asm { BR              X12 }
      }
      return v13 + v22 + 1;
    }
  }
LABEL_34:
  if (v8 == v13)
  {
    if (v7 < 2)
      return 0;
    v26 = (*(uint64_t (**)(uint64_t))(v6 + 48))(a1);
    if (v26 >= 2)
      return v26 - 1;
    else
      return 0;
  }
  else
  {
    v24 = (v15 + a1) & ~v14;
    if (v12 > 0xFE)
    {
      return (*(uint64_t (**)(uint64_t, _QWORD))(v11 + 48))((v17 + v24) & ~v16, *(unsigned int *)(v11 + 84));
    }
    else
    {
      v25 = *(unsigned __int8 *)(v24 + v10);
      if (v25 >= 2)
        return (v25 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
}

void sub_100026D1C(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  size_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;

  v8 = 0;
  v9 = *(_QWORD *)(type metadata accessor for ContentSizeCategory(0) - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  v12 = *(_QWORD *)(v9 + 64);
  if (v12 <= 8)
    v13 = 8;
  else
    v13 = *(_QWORD *)(v9 + 64);
  v14 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (v11 <= *(_DWORD *)(v14 + 84))
    v15 = *(_DWORD *)(v14 + 84);
  else
    v15 = v11;
  if (v15 <= 0xFE)
    v16 = 254;
  else
    v16 = v15;
  if (!v10)
    ++v12;
  v17 = ((v13
        + 1
        + *(unsigned __int8 *)(v14 + 80)
        + ((v12 + (*(_DWORD *)(v9 + 80) & 0xF8 | 7)) & ~(*(_DWORD *)(v9 + 80) & 0xF8 | 7))) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
      + *(_QWORD *)(v14 + 64);
  if (a3 > v16)
  {
    if (v17 > 3)
    {
      v8 = &_mh_execute_header.magic + 1;
      if (v16 >= a2)
LABEL_31:
        __asm { BR              X7 }
LABEL_24:
      v19 = ~v16 + a2;
      if (v17 < 4)
      {
        if ((_DWORD)v17)
        {
          v20 = v19 & ~(-1 << (8 * v17));
          bzero(a1, v17);
          if ((_DWORD)v17 == 3)
          {
            *(_WORD *)a1 = v20;
            a1[2] = BYTE2(v20);
          }
          else if ((_DWORD)v17 == 2)
          {
            *(_WORD *)a1 = v20;
          }
          else
          {
            *a1 = v20;
          }
        }
      }
      else
      {
        bzero(a1, v17);
        *(_DWORD *)a1 = v19;
      }
      __asm { BR              X10 }
    }
    v18 = ((a3 - v16 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
    if (HIWORD(v18))
    {
      v8 = &dword_100000004;
      if (v16 >= a2)
        goto LABEL_31;
      goto LABEL_24;
    }
    if (v18 >= 0x100)
      v8 = 2;
    else
      v8 = v18 > 1;
  }
  if (v16 >= a2)
    goto LABEL_31;
  goto LABEL_24;
}

void sub_100026F74()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_100026F7C()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_100026FEC()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
}

void sub_100026FF4()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_100027004()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_10002700C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void sub_100027018(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_100027070(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *a1;
  v2 = sub_1000027EC(&qword_10008C9C0);
  v3 = type metadata accessor for ModifiedContent(255, v1, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v2, v3, 0, 0);
  v5 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v5);
  v7 = type metadata accessor for ZStack(255, v5, WitnessTable);
  v8 = type metadata accessor for ModifiedContent(255, v7, &type metadata for _PaddingLayout);
  swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v7);
  v9 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
  v11 = type metadata accessor for ContentSizeCategoryLimiter(255, v8, v9, v10);
  return swift_getWitnessTable(&unk_10006ABF0, v11);
}

uint64_t sub_100027174(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10006CB1C, 1);
}

uint64_t sub_1000271A8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1000027EC(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000271E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008CAD0;
  if (!qword_10008CAD0)
  {
    v1 = type metadata accessor for ContentSizeCategory(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentSizeCategory, v1);
    atomic_store(result, (unint64_t *)&qword_10008CAD0);
  }
  return result;
}

uint64_t sub_100027230(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = sub_1000027EC(&qword_10008CAC0);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_1000271A8(&qword_10008CAC8, &qword_10008CAC0);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

_QWORD *sub_1000272A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v9;
  _BYTE v10[32];
  _QWORD *v11;

  v11 = &_swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v2);
  if (!v2)
    return v11;
  for (i = a1 + 32; ; i += 32)
  {
    sub_10002ACB0(i, (uint64_t)v10);
    v4 = sub_100014FA8(0, &qword_10008CD08, GEOSearchCategory_ptr);
    if (!swift_dynamicCast(&v9, v10, (char *)&type metadata for Any + 8, v4, 6))
      break;
    v5 = v9;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    v6 = v11[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
    v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v5);
    specialized ContiguousArray._endMutation()(v7);
    if (!--v2)
      return v11;
  }
  v9 = 0;
  swift_release(v11);

  return 0;
}

_QWORD *sub_1000273C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v9;
  _BYTE v10[32];
  _QWORD *v11;

  v11 = &_swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v2);
  if (!v2)
    return v11;
  for (i = a1 + 32; ; i += 32)
  {
    sub_10002ACB0(i, (uint64_t)v10);
    v4 = type metadata accessor for MapSnapshotter.Context(0);
    if (!swift_dynamicCast(&v9, v10, (char *)&type metadata for Any + 8, v4, 6))
      break;
    v5 = v9;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    v6 = v11[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
    v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v5);
    specialized ContiguousArray._endMutation()(v7);
    if (!--v2)
      return v11;
  }
  v9 = 0;
  swift_release(v11);

  return 0;
}

uint64_t sub_1000274B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[5];
  _QWORD *v36;

  v31 = a3;
  v29 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v7 - 8);
  v33 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000027AC(&qword_10008BF20);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100014FA8(0, (unint64_t *)&qword_10008BF48, OS_dispatch_queue_ptr);
  v15 = (void *)static OS_dispatch_queue.main.getter(v14);
  sub_100016550(a1, (uint64_t)v13, &qword_10008BF20);
  v16 = *(unsigned __int8 *)(v11 + 80);
  v17 = (v16 + 40) & ~v16;
  v18 = (_QWORD *)swift_allocObject(&unk_100082958, v17 + v12, v16 | 7);
  v19 = v29;
  v20 = v30;
  v18[2] = v30;
  v18[3] = v19;
  v21 = v31;
  v18[4] = v31;
  sub_10002CD30((uint64_t)v13, (uint64_t)v18 + v17);
  aBlock[4] = sub_10002CD78;
  v36 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100052B78;
  aBlock[3] = &unk_100082970;
  v22 = _Block_copy(aBlock);
  v23 = v36;
  swift_retain(v20);
  swift_retain(v21);
  v24 = swift_release(v23);
  static DispatchQoS.unspecified.getter(v24);
  aBlock[0] = &_swiftEmptyArrayStorage;
  v25 = sub_10001B41C((unint64_t *)&qword_10008C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_1000027AC((uint64_t *)&unk_10008BF70);
  v27 = sub_100015124();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v26, v27, v4, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v9, v33);
}

void *sub_100027738(uint64_t *a1, uint64_t (*a2)(uint64_t *), uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char **v16;
  char *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  void *result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[3];
  uint64_t v43;
  uint64_t v44;

  v8 = sub_1000027AC(&qword_10008BF20);
  __chkstk_darwin(v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1[3] == 1)
  {
    v15 = swift_allocObject(&unk_1000829A8, 32, 7);
    *(_QWORD *)(v15 + 16) = a2;
    *(_QWORD *)(v15 + 24) = a3;
    v16 = (char **)(a1 + 9);
    swift_beginAccess(a1 + 9, v42, 33, 0);
    v17 = (char *)a1[9];
    swift_retain(a3);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    a1[9] = (uint64_t)v17;
    v41 = a4;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v17 = sub_10005C3E4(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
      *v16 = v17;
    }
    v20 = *((_QWORD *)v17 + 2);
    v19 = *((_QWORD *)v17 + 3);
    if (v20 >= v19 >> 1)
    {
      v17 = sub_10005C3E4((char *)(v19 > 1), v20 + 1, 1, v17);
      *v16 = v17;
    }
    *((_QWORD *)v17 + 2) = v20 + 1;
    v21 = &v17[16 * v20];
    *((_QWORD *)v21 + 4) = sub_10002CDB0;
    *((_QWORD *)v21 + 5) = v15;
    v22 = *v16;
    result = (void *)swift_endAccess(v42);
    if (*((_QWORD *)v22 + 2) == 1)
    {
      sub_100016550(v41, (uint64_t)v10, &qword_10008BF20);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
      {
        sub_100015590((uint64_t)v10, &qword_10008BF20);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
        sub_100027AE0();
        (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      }
      return sub_1000284E8();
    }
  }
  else
  {
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v24 = type metadata accessor for Logger(0);
    sub_100014D70(v24, (uint64_t)qword_100090B98);
    v25 = swift_retain_n(a1, 2);
    v29 = Logger.logObject.getter(v25, v26, v27, v28);
    v33 = static os_log_type_t.debug.getter(v29, v30, v31, v32);
    if (os_log_type_enabled(v29, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v42[0] = v35;
      *(_DWORD *)v34 = 136446210;
      v43 = *a1;
      v36 = sub_1000027AC(&qword_10008CCC8);
      v37 = String.init<A>(describing:)(&v43, v36);
      v39 = v38;
      v43 = sub_1000523F0(v37, v38, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v34 + 4);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v29, v33, "%{public}s: using previously-generated snapshot", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

      swift_release_n(a1, 2);
    }
    return (void *)a2(a1);
  }
  return result;
}

void sub_100027AE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  double v64;
  uint64_t aBlock[5];
  uint64_t v66;

  v1 = v0;
  v2 = type metadata accessor for DispatchTime(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v59 - v7;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = Date.timeIntervalSinceNow.getter(v10) + -5.0;
  if (v13 <= 0.0)
  {
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v32 = type metadata accessor for Logger(0);
    sub_100014D70(v32, (uint64_t)qword_100090B98);
    v33 = swift_retain_n(v0, 2);
    v37 = Logger.logObject.getter(v33, v34, v35, v36);
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      *(_DWORD *)v39 = 136446210;
      v64 = *(double *)v1;
      aBlock[0] = v40;
      v41 = sub_1000027AC(&qword_10008CCC8);
      v42 = String.init<A>(describing:)(&v64, v41);
      v44 = v43;
      v64 = COERCE_DOUBLE(sub_1000523F0(v42, v43, aBlock));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, aBlock, v39 + 4);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "%{public}s: could not schedule snapshot cancellation", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {

      swift_release_n(v1, 2);
    }
  }
  else
  {
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v62 = v3;
    v63 = v8;
    v14 = type metadata accessor for Logger(0);
    sub_100014D70(v14, (uint64_t)qword_100090B98);
    v15 = swift_retain_n(v0, 2);
    v19 = Logger.logObject.getter(v15, v16, v17, v18);
    v23 = static os_log_type_t.debug.getter(v19, v20, v21, v22);
    if (os_log_type_enabled(v19, v23))
    {
      v24 = swift_slowAlloc(22, -1);
      v25 = swift_slowAlloc(32, -1);
      v61 = v2;
      v26 = v25;
      *(_DWORD *)v24 = 136446466;
      v60 = v24 + 4;
      v64 = *(double *)v1;
      aBlock[0] = v25;
      v27 = sub_1000027AC(&qword_10008CCC8);
      v28 = String.init<A>(describing:)(&v64, v27);
      v30 = v29;
      v64 = COERCE_DOUBLE(sub_1000523F0(v28, v29, aBlock));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, aBlock, v60);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v24 + 12) = 2050;
      v64 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, aBlock, v24 + 14);
      _os_log_impl((void *)&_mh_execute_header, v19, v23, "%{public}s: scheduled snapshot cancellation in %{public}f seconds", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      v31 = v26;
      v2 = v61;
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

      swift_release_n(v1, 2);
    }
    v45 = swift_allocObject(&unk_100082908, 24, 7);
    swift_weakInit(v45 + 16, v1);
    aBlock[4] = (uint64_t)sub_10002CC80;
    v66 = v45;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100052B78;
    aBlock[3] = (uint64_t)&unk_100082920;
    v46 = _Block_copy(aBlock);
    v64 = COERCE_DOUBLE(&_swiftEmptyArrayStorage);
    v47 = sub_10001B41C((unint64_t *)&qword_10008C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    swift_retain(v45);
    v48 = sub_1000027AC((uint64_t *)&unk_10008BF70);
    v49 = sub_100015124();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v64, v48, v49, v9, v47);
    v50 = type metadata accessor for DispatchWorkItem(0);
    swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
    v51 = DispatchWorkItem.init(flags:block:)(v12, v46);
    v52 = v66;
    swift_release(v45);
    swift_release(v52);
    v53 = *(_QWORD *)(v1 + 64);
    *(_QWORD *)(v1 + 64) = v51;
    swift_release(v53);
    sub_100014FA8(0, (unint64_t *)&qword_10008BF48, OS_dispatch_queue_ptr);
    v54 = (void *)static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    v55 = v63;
    + infix(_:_:)(v6, v13);
    v56 = *(void (**)(char *, uint64_t))(v62 + 8);
    v56(v6, v2);
    v57 = *(_QWORD *)(v1 + 64);
    if (v57)
    {
      v58 = swift_retain(v57);
      OS_dispatch_queue.asyncAfter(deadline:execute:)(v55, v57, v58);

      swift_release(v57);
      v56(v55, v2);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_100028084(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v4 = result;
    sub_1000280D8(result, v3);
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_1000280D8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  char **p_type;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t *, uint64_t *);
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char **v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char v46[24];

  v3 = v2;
  v4 = (_QWORD *)type metadata accessor for DispatchPredicate(0, a2);
  p_type = (char **)*(v4 - 1);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess(v2 + 7, v46, 0, 0);
  v8 = v2[7];
  v9 = qword_10008B9F0;
  swift_bridgeObjectRetain(v8);
  if (v9 != -1)
    goto LABEL_29;
  while (1)
  {
    v10 = type metadata accessor for Logger(0);
    sub_100014D70(v10, (uint64_t)qword_100090B98);
    swift_bridgeObjectRetain_n(v8, 2);
    v11 = swift_retain_n(v3, 2);
    v15 = Logger.logObject.getter(v11, v12, v13, v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(22, -1);
      v42 = p_type;
      v18 = v17;
      v19 = swift_slowAlloc(32, -1);
      *(_DWORD *)v18 = 136446466;
      v44 = *v3;
      v45 = v19;
      v20 = sub_1000027AC(&qword_10008CCC8);
      v43 = v4;
      v21 = String.init<A>(describing:)(&v44, v20);
      v23 = v22;
      v44 = sub_1000523F0(v21, v22, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v18 + 4);
      swift_release_n(v3, 2);
      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v18 + 12) = 2050;
      v24 = *(_QWORD *)(v8 + 16);
      swift_bridgeObjectRelease(v8);
      v44 = v24;
      v4 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v18 + 14);
      swift_bridgeObjectRelease(v8);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s: will cancel %{public}ld snapshots", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      v25 = v18;
      p_type = v42;
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

      swift_release_n(v3, 2);
      swift_bridgeObjectRelease_n(v8, 2);
    }
    sub_100014FA8(0, (unint64_t *)&qword_10008BF48, OS_dispatch_queue_ptr);
    *v7 = static OS_dispatch_queue.main.getter();
    ((void (*)(_QWORD *, _QWORD, id))p_type[13])(v7, enum case for DispatchPredicate.onQueue(_:), v4);
    v26 = _dispatchPreconditionTest(_:)(v7);
    result = ((uint64_t (*)(_QWORD *, id))p_type[1])(v7, v4);
    if ((v26 & 1) == 0)
      break;
    v28 = 0;
    v7 = (_QWORD *)(v8 + 64);
    v29 = 1 << *(_BYTE *)(v8 + 32);
    v30 = -1;
    if (v29 < 64)
      v30 = ~(-1 << v29);
    v31 = v30 & *(_QWORD *)(v8 + 64);
    v3 = (uint64_t *)((unint64_t)(v29 + 63) >> 6);
    p_type = &stru_100089FF0.type;
    while (1)
    {
      if (v31)
      {
        v32 = __clz(__rbit64(v31));
        v31 &= v31 - 1;
        v33 = v32 | (v28 << 6);
        goto LABEL_10;
      }
      v38 = v28 + 1;
      if (__OFADD__(v28, 1))
      {
        __break(1u);
        goto LABEL_28;
      }
      if (v38 >= (uint64_t)v3)
        return swift_release(v8);
      v39 = v7[v38];
      ++v28;
      if (!v39)
      {
        v28 = v38 + 1;
        if (v38 + 1 >= (uint64_t)v3)
          return swift_release(v8);
        v39 = v7[v28];
        if (!v39)
        {
          v28 = v38 + 2;
          if (v38 + 2 >= (uint64_t)v3)
            return swift_release(v8);
          v39 = v7[v28];
          if (!v39)
            break;
        }
      }
LABEL_25:
      v31 = (v39 - 1) & v39;
      v33 = __clz(__rbit64(v39)) + (v28 << 6);
LABEL_10:
      v34 = *(void **)(*(_QWORD *)(v8 + 48) + 8 * v33);
      v35 = *(_QWORD *)(v8 + 56) + 16 * v33;
      v37 = *(void (**)(uint64_t *, uint64_t *))v35;
      v36 = *(_QWORD *)(v35 + 8);
      v4 = v34;
      objc_msgSend(v4, "cancel", swift_retain(v36).n128_f64[0]);
      v44 = 0;
      v45 = 0;
      v37(&v45, &v44);

      swift_release(v36);
    }
    v40 = v38 + 3;
    if (v40 >= (uint64_t)v3)
      return swift_release(v8);
    v39 = v7[v40];
    if (v39)
    {
      v28 = v40;
      goto LABEL_25;
    }
    while (1)
    {
      v28 = v40 + 1;
      if (__OFADD__(v40, 1))
        break;
      if (v28 >= (uint64_t)v3)
        return swift_release(v8);
      v39 = v7[v28];
      ++v40;
      if (v39)
        goto LABEL_25;
    }
LABEL_28:
    __break(1u);
LABEL_29:
    swift_once(&qword_10008B9F0, sub_100035150);
  }
  __break(1u);
  return result;
}

void *sub_1000284E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  char v35;
  void *result;
  uint64_t v37;
  id v38;
  uint64_t v39;
  id v40;
  id v41;
  char *v42;
  uint64_t v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t aBlock[5];
  uint64_t v72;
  id v73;
  uint64_t v74;

  v1 = v0;
  v70 = type metadata accessor for DispatchWorkItemFlags(0);
  v65 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v69 = (char *)&v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v67 = *(_QWORD *)(v3 - 8);
  v68 = v3;
  __chkstk_darwin(v3);
  v66 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v64 - 8);
  v6 = __chkstk_darwin(v64);
  v62 = v7;
  v63 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v59 - v8;
  v11 = type metadata accessor for DispatchPredicate(0, v10);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v15 = type metadata accessor for Logger(0);
  sub_100014D70(v15, (uint64_t)qword_100090B98);
  v16 = swift_retain_n(v0, 2);
  v20 = Logger.logObject.getter(v16, v17, v18, v19);
  v24 = static os_log_type_t.debug.getter(v20, v21, v22, v23);
  if (os_log_type_enabled(v20, v24))
  {
    v59 = v5;
    v25 = swift_slowAlloc(12, -1);
    v61 = v9;
    v26 = (uint8_t *)v25;
    v27 = swift_slowAlloc(32, -1);
    v60 = v11;
    v28 = v27;
    aBlock[0] = v27;
    *(_DWORD *)v26 = 136446210;
    v73 = *(id *)v1;
    v29 = sub_1000027AC(&qword_10008CCC8);
    v30 = String.init<A>(describing:)(&v73, v29);
    v32 = v31;
    v73 = (id)sub_1000523F0(v30, v31, aBlock);
    v5 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v26 + 4);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v32);
    _os_log_impl((void *)&_mh_execute_header, v20, v24, "%{public}s: generateSnapshot BEGIN", v26, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    v33 = v28;
    v11 = v60;
    swift_slowDealloc(v33, -1, -1);
    v34 = v26;
    v9 = v61;
    swift_slowDealloc(v34, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
  sub_100014FA8(0, (unint64_t *)&qword_10008BF48, OS_dispatch_queue_ptr);
  *v14 = ((uint64_t (*)(void))static OS_dispatch_queue.main.getter)();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  v35 = _dispatchPreconditionTest(_:)(v14);
  result = (void *)(*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v35 & 1) != 0)
  {
    v37 = v5;
    Date.init()(result);
    result = *(void **)(v1 + 16);
    if (result)
    {
      v38 = objc_msgSend(result, "copy");
      _bridgeAnyObjectToAny(_:)(aBlock, v38);
      swift_unknownObjectRelease(v38);
      v39 = sub_100014FA8(0, &qword_10008CD00, MKMapSnapshotOptions_ptr);
      swift_dynamicCast(&v73, aBlock, (char *)&type metadata for Any + 8, v39, 7);
      v40 = v73;
      objc_msgSend(v73, "_setAllowsSimultaneousLightDarkSnapshots:", 1);
      v41 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithUserInterfaceStyle:", 0);
      objc_msgSend(v40, "setTraitCollection:", v41);

      v42 = (char *)objc_msgSend(objc_allocWithZone((Class)MKMapSnapshotter), "initWithOptions:", v40);
      v61 = v42;

      swift_retain(v1);
      sub_100028F68(v42, (uint64_t)sub_10002CB8C, v1);
      v43 = swift_release(v1);
      v60 = *(_QWORD *)(v1 + 40);
      v44 = (void *)static OS_dispatch_queue.main.getter(v43);
      v45 = v63;
      v46 = v64;
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v63, v9, v64);
      v47 = *(unsigned __int8 *)(v5 + 80);
      v48 = (v47 + 24) & ~v47;
      v49 = swift_allocObject(&unk_1000828B8, v48 + v62, v47 | 7);
      *(_QWORD *)(v49 + 16) = v1;
      (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v49 + v48, v45, v46);
      aBlock[4] = (uint64_t)sub_10002CC2C;
      v72 = v49;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100052B78;
      aBlock[3] = (uint64_t)&unk_1000828D0;
      v50 = _Block_copy(aBlock);
      swift_retain(v1);
      v51 = v66;
      static DispatchQoS.unspecified.getter(v52);
      v73 = &_swiftEmptyArrayStorage;
      v53 = v9;
      v54 = sub_10001B41C((unint64_t *)&qword_10008C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v55 = sub_1000027AC((uint64_t *)&unk_10008BF70);
      v56 = sub_100015124();
      v58 = v69;
      v57 = v70;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v73, v55, v56, v70, v54);
      OS_dispatch_group.notify(qos:flags:queue:execute:)(v51, v58, v44, v50);
      _Block_release(v50);

      (*(void (**)(char *, uint64_t))(v65 + 8))(v58, v57);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v51, v68);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v53, v46);
      return (void *)swift_release(v72);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100028AE4(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  double v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  void (*v53)(uint64_t *, __n128);
  __n128 v54;
  uint64_t v56;
  uint64_t v57;
  id v58;
  char *v59;
  id v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65[3];

  v60 = a2;
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v59 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v56 - v7;
  v9 = a1[8];
  if (v9)
  {
    v10 = swift_retain(a1[8]);
    dispatch thunk of DispatchWorkItem.cancel()(v10);
    swift_release(v9);
  }
  v11 = (void *)a1[6];
  if (v11)
  {
    v12 = objc_msgSend(v11, "image");
    v13 = objc_msgSend(v12, "imageAsset");

  }
  else
  {
    v13 = 0;
  }
  v14 = (void *)objc_opt_self(UITraitCollection);
  v15 = objc_msgSend(v14, "traitCollectionWithUserInterfaceStyle:", 1);
  v16 = objc_msgSend(v14, "traitCollectionWithUserInterfaceStyle:", 2);
  if (v13)
  {
    v17 = objc_msgSend(v13, "imageWithTraitCollection:", v15);
    v18 = objc_msgSend(v13, "imageWithTraitCollection:", v16);
  }
  else
  {
    v18 = 0;
    v17 = 0;
  }
  v19 = (void *)a1[3];
  v20 = (void *)a1[4];
  a1[3] = (uint64_t)v17;
  a1[4] = (uint64_t)v18;
  v62 = v18;
  v61 = v17;
  sub_10002ACEC(v19, v20);
  objc_msgSend(v13, "unregisterImageWithTraitCollection:", v15);
  objc_msgSend(v13, "unregisterImageWithTraitCollection:", v16);
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v21 = type metadata accessor for Logger(0);
  sub_100014D70(v21, (uint64_t)qword_100090B98);
  v22 = v4;
  (*(void (**)(char *, id, uint64_t))(v4 + 16))(v8, v60, v3);
  v23 = swift_retain_n(a1, 2);
  v27 = Logger.logObject.getter(v23, v24, v25, v26);
  v31 = static os_log_type_t.debug.getter(v27, v28, v29, v30);
  v32 = os_log_type_enabled(v27, v31);
  v63 = v16;
  if (v32)
  {
    v33 = swift_slowAlloc(22, -1);
    v60 = v15;
    v34 = v33;
    v35 = swift_slowAlloc(32, -1);
    v57 = v35;
    *(_DWORD *)v34 = 136446466;
    v64 = *a1;
    v65[0] = v35;
    v36 = sub_1000027AC(&qword_10008CCC8);
    v37 = String.init<A>(describing:)(&v64, v36);
    v58 = v13;
    v38 = v3;
    v40 = v39;
    v64 = sub_1000523F0(v37, v39, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v34 + 4);
    swift_release_n(a1, 2);
    v41 = swift_bridgeObjectRelease(v40);
    *(_WORD *)(v34 + 12) = 2050;
    v42 = v59;
    Date.init()(v41);
    v43 = Date.timeIntervalSince(_:)(v8);
    v44 = *(void (**)(char *, uint64_t))(v22 + 8);
    v44(v42, v38);
    v64 = *(_QWORD *)&v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v34 + 14);
    v45 = v38;
    v13 = v58;
    v44(v8, v45);
    _os_log_impl((void *)&_mh_execute_header, v27, v31, "%{public}s: generateSnapshot END (%{public}f seconds elapsed)", (uint8_t *)v34, 0x16u);
    v46 = v57;
    swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    v47 = v34;
    v15 = v60;
    swift_slowDealloc(v47, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v3);
  }

  v48 = a1 + 9;
  swift_beginAccess(a1 + 9, v65, 1, 0);
  v49 = a1[9];
  v50 = *(_QWORD *)(v49 + 16);
  if (v50)
  {
    swift_bridgeObjectRetain(a1[9]);
    v51 = (uint64_t *)(v49 + 40);
    do
    {
      v53 = (void (*)(uint64_t *, __n128))*(v51 - 1);
      v52 = *v51;
      v64 = (uint64_t)a1;
      v54 = swift_retain(v52);
      v53(&v64, v54);
      swift_release(v52);
      v51 += 2;
      --v50;
    }
    while (v50);
    swift_bridgeObjectRelease(v49);
    v49 = *v48;
  }
  *v48 = (uint64_t)&_swiftEmptyArrayStorage;

  return swift_bridgeObjectRelease(v49);
}

void sub_100028F68(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  _QWORD aBlock[5];
  _QWORD *v17;
  uint64_t v18;

  v4 = v3;
  dispatch_group_enter(*(dispatch_group_t *)(v4 + 40));
  v8 = (_QWORD *)swift_allocObject(&unk_100082840, 48, 7);
  v8[2] = v4;
  v8[3] = a1;
  v8[4] = a2;
  v8[5] = a3;
  v9 = swift_allocObject(&unk_100082868, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_10002AD50;
  *(_QWORD *)(v9 + 24) = v8;
  swift_beginAccess(v4 + 56, aBlock, 33, 0);
  v10 = a1;
  swift_retain(v4);
  swift_retain(a3);
  swift_retain(v8);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v4 + 56));
  v18 = *(_QWORD *)(v4 + 56);
  *(_QWORD *)(v4 + 56) = 0x8000000000000000;
  sub_10002C068((uint64_t)sub_10002AD80, v9, v10, isUniquelyReferenced_nonNull_native);
  v12 = *(_QWORD *)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v18;

  swift_bridgeObjectRelease(v12);
  swift_endAccess(aBlock);
  sub_100014FA8(0, (unint64_t *)&qword_10008BF48, OS_dispatch_queue_ptr);
  v13 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = sub_10002AD50;
  v17 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100014130;
  aBlock[3] = &unk_100082880;
  v14 = _Block_copy(aBlock);
  v15 = v17;
  swift_retain(v8);
  swift_release(v15);
  objc_msgSend(v10, "startWithQueue:completionHandler:", v13, v14);
  _Block_release(v14);
  swift_release(v8);

}

void sub_100029128(void *a1, uint64_t a2, dispatch_group_t *a3, void *a4, void (*a5)(id))
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*isa)(void);
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34[3];

  swift_beginAccess(a3 + 7, v34, 33, 0);
  v10 = a4;
  v11 = sub_10002ADA8((uint64_t)v10);
  v13 = v12;
  swift_endAccess(v34);

  sub_10002C998(v11, v13);
  if (a1)
  {
    isa = (void (*)(void))(*a3)[39].isa;
    v15 = a1;
    isa();
    a5(v15);
    dispatch_group_leave(a3[5]);

  }
  else
  {
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v16 = type metadata accessor for Logger(0);
    sub_100014D70(v16, (uint64_t)qword_100090B98);
    swift_retain(a3);
    swift_errorRetain(a2);
    swift_retain(a3);
    v17 = swift_errorRetain(a2);
    v21 = Logger.logObject.getter(v17, v18, v19, v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(22, -1);
      v24 = swift_slowAlloc(64, -1);
      *(_DWORD *)v23 = 136446466;
      v33 = (uint64_t)*a3;
      v34[0] = v24;
      v25 = sub_1000027AC(&qword_10008CCC8);
      v26 = String.init<A>(describing:)(&v33, v25);
      v28 = v27;
      v33 = sub_1000523F0(v26, v27, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v23 + 4);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease(v28);
      *(_WORD *)(v23 + 12) = 2082;
      v33 = a2;
      swift_errorRetain(a2);
      v29 = sub_1000027AC(&qword_10008BF38);
      v30 = String.init<A>(reflecting:)(&v33, v29);
      v32 = v31;
      v33 = sub_1000523F0(v30, v31, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v23 + 14);
      swift_bridgeObjectRelease(v32);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: error: %{public}s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      swift_release_n(a3, 2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    dispatch_group_leave(a3[5]);
  }
}

uint64_t sub_100029404()
{
  uint64_t v0;

  sub_10002ACEC(*(void **)(v0 + 24), *(void **)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  return v0;
}

uint64_t sub_100029450()
{
  uint64_t v0;

  sub_100029404();
  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t type metadata accessor for MapSnapshotter()
{
  return objc_opt_self(_TtC17GeneralMapsWidget14MapSnapshotter);
}

BOOL sub_100029490(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  _QWORD v8[4];

  sub_100016550(a1, (uint64_t)v8, &qword_10008BF30);
  if (v8[3])
  {
    v2 = type metadata accessor for MapSnapshotter.Context(0);
    if ((swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, v2, 6) & 1) != 0)
    {
      v3 = v7;
      if ((static UUID.== infix(_:_:)(v1+ OBJC_IVAR____TtCC17GeneralMapsWidget14MapSnapshotterP33_D3522C9343D4C44065DB06BAD982882A7Context_identifier, &v7[OBJC_IVAR____TtCC17GeneralMapsWidget14MapSnapshotterP33_D3522C9343D4C44065DB06BAD982882A7Context_identifier]) & 1) != 0)
      {
        v4 = type metadata accessor for WidgetFamily(0);
        v5 = sub_10001B41C(&qword_10008CCE0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
        dispatch thunk of RawRepresentable.rawValue.getter(v8, v4, v5);
        dispatch thunk of RawRepresentable.rawValue.getter(&v7, v4, v5);

        return v8[0] == (_QWORD)v7;
      }

    }
  }
  else
  {
    sub_100015590((uint64_t)v8, &qword_10008BF30);
  }
  return 0;
}

id sub_100029754()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapSnapshotter.Context(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000297F0()
{
  return type metadata accessor for MapSnapshotter.Context(0);
}

uint64_t type metadata accessor for MapSnapshotter.Context(uint64_t a1)
{
  uint64_t result;

  result = qword_10008CCB8;
  if (!qword_10008CCB8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MapSnapshotter.Context);
  return result;
}

uint64_t sub_100029834(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  result = type metadata accessor for UUID(319, a2);
  if (v4 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for WidgetFamily(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(result - 8) + 64;
      result = swift_updateClassMetadata2(a1, 256, 2, v6, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

id sub_1000298BC()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(NSMapTable), "strongToWeakObjectsMapTable");
  qword_10008CAD8 = (uint64_t)result;
  return result;
}

id sub_1000298F4(void (*a1)(char *, char *, _QWORD *), uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  objc_class *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  os_log_t v65;
  uint64_t v66;
  char *v67;
  _QWORD *v68;
  uint64_t v70;
  _QWORD *v71;
  int v72;
  os_log_t v73;
  char *v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  objc_super v82;

  v77 = a2;
  v78 = type metadata accessor for WidgetFamily(0);
  v75 = *(_QWORD **)(v78 - 8);
  v3 = __chkstk_darwin(v78);
  v76 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v70 - v5;
  v7 = sub_1000027AC(&qword_10008CD10);
  __chkstk_darwin(v7);
  v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)type metadata accessor for UUID(0, v10);
  v12 = *(v11 - 1);
  v13 = __chkstk_darwin(v11);
  v74 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v70 - v16;
  __chkstk_darwin(v15);
  v79 = (char *)&v70 - v18;
  v20 = type metadata accessor for DispatchPredicate(0, v19);
  v21 = *(_QWORD **)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100014FA8(0, (unint64_t *)&qword_10008BF48, OS_dispatch_queue_ptr);
  *(_QWORD *)v23 = static OS_dispatch_queue.main.getter(v24);
  ((void (*)(char *, _QWORD, uint64_t))v21[13])(v23, enum case for DispatchPredicate.onQueue(_:), v20);
  v25 = _dispatchPreconditionTest(_:)(v23);
  ((void (*)(char *, uint64_t))v21[1])(v23, v20);
  if ((v25 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    swift_once(&qword_10008B9C8, sub_1000298BC);
    goto LABEL_5;
  }
  sub_100016550((uint64_t)a1, (uint64_t)v9, &qword_10008CD10);
  if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v12 + 48))(v9, 1, v11) == 1)
  {
    sub_100015590((uint64_t)v9, &qword_10008CD10);
    return 0;
  }
  v21 = v11;
  v27 = v79;
  (*(void (**)(char *, char *, _QWORD *))(v12 + 32))(v79, v9, v11);
  a1 = *(void (**)(char *, char *, _QWORD *))(v12 + 16);
  a1(v17, v27, v11);
  v28 = v75;
  v9 = (char *)v75[2];
  v29 = v78;
  ((void (*)(char *, uint64_t, uint64_t))v9)(v6, v77, v78);
  v30 = (objc_class *)type metadata accessor for MapSnapshotter.Context(0);
  v31 = (char *)objc_allocWithZone(v30);
  a1(&v31[OBJC_IVAR____TtCC17GeneralMapsWidget14MapSnapshotterP33_D3522C9343D4C44065DB06BAD982882A7Context_identifier], v17, v21);
  ((void (*)(char *, char *, uint64_t))v9)(&v31[OBJC_IVAR____TtCC17GeneralMapsWidget14MapSnapshotterP33_D3522C9343D4C44065DB06BAD982882A7Context_family], v6, v29);
  v82.receiver = v31;
  v82.super_class = v30;
  v25 = (uint64_t)objc_msgSendSuper2(&v82, "init");
  v11 = (_QWORD *)v28[1];
  ((void (*)(char *, uint64_t))v11)(v6, v29);
  v23 = *(char **)(v12 + 8);
  ((void (*)(char *, _QWORD *))v23)(v17, v21);
  if (qword_10008B9C8 != -1)
    goto LABEL_15;
LABEL_5:
  v26 = objc_msgSend((id)qword_10008CAD8, "objectForKey:", v25);
  v32 = v76;
  if (v26)
  {
    v75 = (_QWORD *)v25;
    v33 = v79;
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v34 = type metadata accessor for Logger(0);
    sub_100014D70(v34, (uint64_t)qword_100090B98);
    v35 = v78;
    ((void (*)(char *, uint64_t, uint64_t))v9)(v32, v77, v78);
    v36 = v74;
    v37 = ((uint64_t (*)(char *, char *, _QWORD *))a1)(v74, v33, v21);
    v41 = Logger.logObject.getter(v37, v38, v39, v40);
    v45 = static os_log_type_t.debug.getter(v41, v42, v43, v44);
    v46 = v45;
    if (os_log_type_enabled(v41, v45))
    {
      v47 = v32;
      v48 = swift_slowAlloc(32, -1);
      v77 = swift_slowAlloc(96, -1);
      v81 = v77;
      *(_DWORD *)v48 = 136446722;
      v73 = v41;
      v80 = sub_1000027AC(&qword_10008CCC8);
      v49 = sub_1000027AC(&qword_10008CCD0);
      v71 = v21;
      v50 = String.init<A>(describing:)(&v80, v49);
      v52 = v51;
      v80 = sub_1000523F0(v50, v51, &v81);
      v72 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v48 + 4);
      swift_bridgeObjectRelease(v52);
      *(_WORD *)(v48 + 12) = 2082;
      v53 = sub_10001B41C((unint64_t *)&qword_10008CCD8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
      v54 = v78;
      v55 = dispatch thunk of CustomStringConvertible.description.getter(v78, v53);
      v57 = v56;
      v80 = sub_1000523F0(v55, v56, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v48 + 14);
      swift_bridgeObjectRelease(v57);
      ((void (*)(char *, uint64_t))v11)(v47, v54);
      *(_WORD *)(v48 + 22) = 2082;
      v58 = v33;
      v59 = sub_10001B41C(&qword_10008CD18, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v60 = v74;
      v61 = v71;
      v62 = dispatch thunk of CustomStringConvertible.description.getter(v71, v59);
      v64 = v63;
      v80 = sub_1000523F0(v62, v63, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v48 + 24);
      swift_bridgeObjectRelease(v64);
      ((void (*)(char *, _QWORD *))v23)(v60, v61);
      v65 = v73;
      _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v72, "%{public}s: using existing snapshotter for %{public}s: %{public}s", (uint8_t *)v48, 0x20u);
      v66 = v77;
      swift_arrayDestroy(v77, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v48, -1, -1);

      v67 = v58;
      v68 = v61;
    }
    else
    {

      ((void (*)(char *, _QWORD *))v23)(v36, v21);
      ((void (*)(char *, uint64_t))v11)(v32, v35);

      v67 = v33;
      v68 = v21;
    }
    ((void (*)(char *, _QWORD *))v23)(v67, v68);
  }
  else
  {
    ((void (*)(char *, _QWORD *))v23)(v79, v21);

  }
  return v26;
}

uint64_t sub_100029F24(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void (*v54)(_BYTE *, uint64_t);
  uint64_t v55;
  _BYTE *v56;
  void (*v57)(char *, _BYTE *, uint64_t);
  _BYTE *v58;
  void (*v59)(char *, _BYTE *, uint64_t);
  objc_class *v60;
  char *v61;
  id v62;
  _BYTE v63[12];
  int v64;
  uint64_t v65;
  void (*v66)(char *, _BYTE *, uint64_t);
  void (*v67)(char *, _BYTE *, uint64_t);
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  objc_super v77;

  v73 = a3;
  v71 = a1;
  v74 = type metadata accessor for WidgetFamily(0);
  v68 = *(_QWORD *)(v74 - 8);
  v4 = __chkstk_darwin(v74);
  v70 = &v63[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v7 = &v63[-v6];
  v8 = sub_1000027AC(&qword_10008CD10);
  __chkstk_darwin(v8);
  v10 = &v63[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for UUID(0, v11);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v69 = &v63[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __chkstk_darwin(v14);
  v18 = &v63[-v17];
  __chkstk_darwin(v16);
  v72 = &v63[-v19];
  v21 = type metadata accessor for DispatchPredicate(0, v20);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = &v63[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = sub_100014FA8(0, (unint64_t *)&qword_10008BF48, OS_dispatch_queue_ptr);
  *v24 = static OS_dispatch_queue.main.getter(v25);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v22 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v21);
  v26 = _dispatchPreconditionTest(_:)(v24);
  (*(void (**)(_QWORD *, uint64_t))(v22 + 8))(v24, v21);
  if ((v26 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_once(&qword_10008B9F0, sub_100035150);
    goto LABEL_5;
  }
  sub_100016550(a2, (uint64_t)v10, &qword_10008CD10);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) == 1)
    return sub_100015590((uint64_t)v10, &qword_10008CD10);
  v24 = v72;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 32))(v72, v10, v12);
  if (qword_10008B9F0 != -1)
    goto LABEL_12;
LABEL_5:
  v28 = type metadata accessor for Logger(0);
  sub_100014D70(v28, (uint64_t)qword_100090B98);
  v29 = v68;
  v30 = v74;
  v67 = *(void (**)(char *, _BYTE *, uint64_t))(v68 + 16);
  v67(v7, v73, v74);
  v66 = *(void (**)(char *, _BYTE *, uint64_t))(v13 + 16);
  v31 = ((uint64_t (*)(_BYTE *, _QWORD *, uint64_t))v66)(v18, v24, v12);
  v35 = Logger.logObject.getter(v31, v32, v33, v34);
  v39 = static os_log_type_t.debug.getter(v35, v36, v37, v38);
  v40 = v39;
  if (os_log_type_enabled(v35, v39))
  {
    v41 = swift_slowAlloc(32, -1);
    v65 = swift_slowAlloc(96, -1);
    v76 = v65;
    *(_DWORD *)v41 = 136446722;
    v64 = v40;
    v75 = sub_1000027AC(&qword_10008CCC8);
    v42 = sub_1000027AC(&qword_10008CCD0);
    v43 = String.init<A>(describing:)(&v75, v42);
    v45 = v44;
    v75 = sub_1000523F0(v43, v44, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v41 + 4);
    swift_bridgeObjectRelease(v45);
    *(_WORD *)(v41 + 12) = 2082;
    v46 = sub_10001B41C((unint64_t *)&qword_10008CCD8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v47 = dispatch thunk of CustomStringConvertible.description.getter(v74, v46);
    v49 = v48;
    v75 = sub_1000523F0(v47, v48, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v41 + 14);
    swift_bridgeObjectRelease(v49);
    v68 = *(_QWORD *)(v29 + 8);
    ((void (*)(char *, uint64_t))v68)(v7, v74);
    *(_WORD *)(v41 + 22) = 2082;
    v30 = v74;
    v50 = sub_10001B41C(&qword_10008CD18, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v51 = dispatch thunk of CustomStringConvertible.description.getter(v12, v50);
    v53 = v52;
    v75 = sub_1000523F0(v51, v52, &v76);
    v24 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v41 + 24);
    swift_bridgeObjectRelease(v53);
    v54 = *(void (**)(_BYTE *, uint64_t))(v13 + 8);
    v54(v18, v12);
    _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v64, "%{public}s: storing snapshotter for %{public}s: %{public}s", (uint8_t *)v41, 0x20u);
    v55 = v65;
    swift_arrayDestroy(v65, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v41, -1, -1);
  }
  else
  {
    v68 = *(_QWORD *)(v29 + 8);
    ((void (*)(char *, uint64_t))v68)(v7, v30);
    v54 = *(void (**)(_BYTE *, uint64_t))(v13 + 8);
    v54(v18, v12);
  }

  v56 = v69;
  v57 = v66;
  v66(v69, v24, v12);
  v58 = v70;
  v59 = v67;
  v67(v70, v73, v30);
  v60 = (objc_class *)type metadata accessor for MapSnapshotter.Context(0);
  v61 = (char *)objc_allocWithZone(v60);
  v57(&v61[OBJC_IVAR____TtCC17GeneralMapsWidget14MapSnapshotterP33_D3522C9343D4C44065DB06BAD982882A7Context_identifier], v56, v12);
  v59(&v61[OBJC_IVAR____TtCC17GeneralMapsWidget14MapSnapshotterP33_D3522C9343D4C44065DB06BAD982882A7Context_family], v58, v30);
  v77.receiver = v61;
  v77.super_class = v60;
  v62 = objc_msgSendSuper2(&v77, "init");
  ((void (*)(_BYTE *, uint64_t))v68)(v58, v30);
  v54(v56, v12);
  if (qword_10008B9C8 != -1)
    swift_once(&qword_10008B9C8, sub_1000298BC);
  objc_msgSend((id)qword_10008CAD8, "setObject:forKey:", v71, v62);

  return ((uint64_t (*)(_QWORD *, uint64_t))v54)(v24, v12);
}

uint64_t sub_10002A51C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  id v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23[2];

  v3 = v2;
  v5 = type metadata accessor for DispatchPredicate(0, a2);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100014FA8(0, (unint64_t *)&qword_10008BF48, OS_dispatch_queue_ptr);
  *v8 = static OS_dispatch_queue.main.getter(v9);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v10 & 1) != 0)
  {
    if (qword_10008B9C8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_10008B9C8, sub_1000298BC);
LABEL_3:
  v11 = objc_msgSend((id)qword_10008CAD8, "keyEnumerator");
  v12 = objc_msgSend(v11, "allObjects");

  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, (char *)&type metadata for Any + 8);
  v14 = sub_1000273C0(v13);
  result = swift_bridgeObjectRelease(v13);
  if (!v14)
    return result;
  __chkstk_darwin(result);
  v23[-2] = a1;
  v16 = (uint64_t)sub_10002A840((uint64_t (*)(id *))sub_10002A824, &v23[-4], (unint64_t)v14);
  v17 = v16;
  if ((unint64_t)v16 >> 62)
  {
    if (v16 < 0)
      v22 = v16;
    else
      v22 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    result = _CocoaArrayWrapper.endIndex.getter(v22);
    v18 = result;
    if (result)
      goto LABEL_6;
  }
  else
  {
    v18 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v16);
    if (v18)
    {
LABEL_6:
      if (v18 < 1)
      {
        __break(1u);
        return result;
      }
      v19 = 0;
      do
      {
        if ((v17 & 0xC000000000000001) != 0)
          v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v17);
        else
          v20 = *(id *)(v17 + 8 * v19 + 32);
        v21 = v20;
        ++v19;
        v23[0] = (uint64_t)v20;
        sub_10002A9E4(v23, v3, a1);

      }
      while (v18 != v19);
    }
  }
  return swift_bridgeObjectRelease_n(v17, 2);
}

BOOL sub_10002A77C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v0 = type metadata accessor for WidgetFamily(0);
  v1 = sub_10001B41C(&qword_10008CCE0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(&v4, v0, v1);
  dispatch thunk of RawRepresentable.rawValue.getter(&v3, v0, v1);
  return v4 == v3;
}

BOOL sub_10002A824()
{
  return sub_10002A77C();
}

void *sub_10002A840(uint64_t (*a1)(id *), void *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  unint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  uint64_t (*v15)(id *);
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  _QWORD *v26;

  v4 = a3;
  v26 = &_swiftEmptyArrayStorage;
  if (a3 >> 62)
    goto LABEL_18;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      v8 = 0;
      v23 = v4 & 0xFFFFFFFFFFFFFF8;
      v24 = v4 & 0xC000000000000001;
      v22 = v4;
      while (v24)
      {
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v4);
LABEL_9:
        v10 = v9;
        v11 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_17;
        v25 = v9;
        v12 = a2;
        v13 = a1(&v25);
        if (v3)
        {
          swift_bridgeObjectRelease(v4);

          swift_release(v26);
          return v12;
        }
        if ((v13 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v14 = v7;
          v15 = a1;
          v16 = a2;
          v17 = v26[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
          v18 = v17;
          a2 = v16;
          a1 = v15;
          v7 = v14;
          v4 = v22;
          v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v10);
          specialized ContiguousArray._endMutation()(v19);
        }
        else
        {

        }
        ++v8;
        if (v11 == v7)
        {
          v12 = v26;
          goto LABEL_23;
        }
      }
      if (v8 < *(_QWORD *)(v23 + 16))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      if (v4 < 0)
        v20 = v4;
      else
        v20 = v4 & 0xFFFFFFFFFFFFFF8;
      v7 = _CocoaArrayWrapper.endIndex.getter(v20);
      if (!v7)
        goto LABEL_22;
    }
    v9 = *(id *)(v4 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_22:
  v12 = &_swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v4);
  return v12;
}

id sub_10002A9E4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for WidgetFamily(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v11 = type metadata accessor for Logger(0);
  sub_100014D70(v11, (uint64_t)qword_100090B98);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  v16 = Logger.logObject.getter(v12, v13, v14, v15);
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(22, -1);
    v29 = swift_slowAlloc(64, -1);
    v34 = v29;
    *(_DWORD *)v18 = 136446466;
    v32 = sub_1000027AC(&qword_10008CCC8);
    v19 = sub_1000027AC(&qword_10008CCD0);
    v30 = v10;
    v20 = String.init<A>(describing:)(&v32, v19);
    v31 = v3;
    v22 = v21;
    v32 = sub_1000523F0(v20, v21, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v18 + 4);
    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v18 + 12) = 2082;
    v23 = sub_10001B41C((unint64_t *)&qword_10008CCD8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v6, v23);
    v26 = v25;
    v32 = sub_1000523F0(v24, v25, &v34);
    v10 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v18 + 14);
    swift_bridgeObjectRelease(v26);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s: removing snapshotter for %{public}s", (uint8_t *)v18, 0x16u);
    v27 = v29;
    swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  if (qword_10008B9C8 != -1)
    swift_once(&qword_10008B9C8, sub_1000298BC);
  return objc_msgSend((id)qword_10008CAD8, "removeObjectForKey:", v10);
}

uint64_t sub_10002ACB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_10002ACEC(void *a1, void *a2)
{
  if (a1 != (void *)1)
  {

  }
}

uint64_t sub_10002AD1C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_10002AD50(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_100029128(a1, a2, *(dispatch_group_t **)(v2 + 16), *(void **)(v2 + 24), *(void (**)(id))(v2 + 32));
}

uint64_t sub_10002AD5C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002AD80(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, *a2);
}

uint64_t sub_10002ADA8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  v5 = sub_10005CCE4(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10002C7DC();
    v8 = v12;
  }

  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v5);
  sub_10002BC3C(v5, v8);
  v10 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v10);
  return v9;
}

void sub_10002AE7C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  Swift::UInt v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  uint64_t v41[9];

  v3 = v2;
  v6 = type metadata accessor for GeneralMapsStateCollector.NearbyCategorySnapshot(0);
  v39 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_1000027AC(&qword_10008C018);
  v40 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (*(_QWORD *)(v9 + 16))
  {
    v36 = v3;
    v12 = 0;
    v13 = *(_QWORD *)(v9 + 64);
    v38 = (_QWORD *)(v9 + 64);
    v14 = 1 << *(_BYTE *)(v9 + 32);
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v16 = v15 & v13;
    v37 = (unint64_t)(v14 + 63) >> 6;
    v17 = v10 + 64;
    while (1)
    {
      if (v16)
      {
        v19 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v20 = v19 | (v12 << 6);
      }
      else
      {
        v21 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v21 >= v37)
          goto LABEL_36;
        v22 = v38[v21];
        ++v12;
        if (!v22)
        {
          v12 = v21 + 1;
          if (v21 + 1 >= v37)
            goto LABEL_36;
          v22 = v38[v12];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v37)
            {
LABEL_36:
              if ((v40 & 1) == 0)
              {
                swift_release(v9);
                v3 = v36;
                goto LABEL_43;
              }
              v35 = 1 << *(_BYTE *)(v9 + 32);
              if (v35 >= 64)
                bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v38 = -1 << v35;
              v3 = v36;
              *(_QWORD *)(v9 + 16) = 0;
              break;
            }
            v22 = v38[v23];
            if (!v22)
            {
              while (1)
              {
                v12 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v12 >= v37)
                  goto LABEL_36;
                v22 = v38[v12];
                ++v23;
                if (v22)
                  goto LABEL_23;
              }
            }
            v12 = v23;
          }
        }
LABEL_23:
        v16 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v12 << 6);
      }
      v24 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 48) + v20);
      v25 = *(_QWORD *)(v39 + 72);
      v26 = *(_QWORD *)(v9 + 56) + v25 * v20;
      if ((v40 & 1) != 0)
        sub_1000153B8(v26, (uint64_t)v8);
      else
        sub_100015374(v26, (uint64_t)v8);
      Hasher.init(_seed:)(v41, *(_QWORD *)(v11 + 40));
      Hasher._combine(_:)(v24);
      v27 = Hasher._finalize()();
      v28 = -1 << *(_BYTE *)(v11 + 32);
      v29 = v27 & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v17 + 8 * (v29 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v17 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v17 + 8 * v30);
        }
        while (v34 == -1);
        v18 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_BYTE *)(*(_QWORD *)(v11 + 48) + v18) = v24;
      sub_1000153B8((uint64_t)v8, *(_QWORD *)(v11 + 56) + v25 * v18);
      ++*(_QWORD *)(v11 + 16);
    }
  }
  swift_release(v9);
LABEL_43:
  *v3 = v11;
}

void sub_10002B1A8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000027AC(&qword_10008BF50);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v3;
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v38 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v37;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v38 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      v34 = v32;
      v35 = v33;
    }
    v15 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_10002B478(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  int64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t *v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000027AC(&qword_10008C0E8);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v10 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v11 = ~(-1 << v9);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v9 + 63) >> 6;
    v14 = v7 + 64;
    swift_retain(v5);
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v21 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v22 = v21 | (v15 << 6);
      }
      else
      {
        v23 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v23 >= v13)
          goto LABEL_36;
        v24 = v10[v23];
        ++v15;
        if (!v24)
        {
          v15 = v23 + 1;
          if (v23 + 1 >= v13)
            goto LABEL_36;
          v24 = v10[v15];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v13)
            {
LABEL_36:
              swift_release(v5);
              if ((a2 & 1) == 0)
              {
                swift_release(v5);
                v3 = v33;
                goto LABEL_43;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v10 = -1 << v32;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v24 = v10[v25];
            if (!v24)
            {
              while (1)
              {
                v15 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_45;
                if (v15 >= v13)
                  goto LABEL_36;
                v24 = v10[v15];
                ++v25;
                if (v24)
                  goto LABEL_33;
              }
            }
            v15 = v25;
          }
        }
LABEL_33:
        v12 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v15 << 6);
      }
      v30 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v22);
      v34 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v22);
      if ((a2 & 1) == 0)
      {
        v31 = v30;
        swift_retain(*((_QWORD *)&v34 + 1));
      }
      v16 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
      v17 = -1 << *(_BYTE *)(v8 + 32);
      v18 = v16 & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v28 = v19 == v27;
          if (v19 == v27)
            v19 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v19);
        }
        while (v29 == -1);
        v20 = __clz(__rbit64(~v29)) + (v19 << 6);
      }
      *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v20) = v30;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v20) = v34;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_43:
  *v3 = v8;
}

void sub_10002B748(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000027AC(&qword_10008C0F0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_25;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v21 >= v12)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v12)
        goto LABEL_37;
      v23 = *(_QWORD *)(v37 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_46;
            if (v14 >= v12)
              goto LABEL_37;
            v23 = *(_QWORD *)(v37 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_24;
          }
        }
        v14 = v24;
      }
    }
LABEL_24:
    v11 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_25:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v41 = *(_QWORD *)(v25 + 32);
      v39 = v26;
      v40 = v27;
      sub_100016594((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v20), v38);
    }
    else
    {
      sub_100014D88(v25, (uint64_t)&v39);
      sub_10002ACB0(*(_QWORD *)(v5 + 56) + 32 * v20, (uint64_t)v38);
    }
    v28 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v8 + 48) + 40 * v15;
    v17 = v39;
    v18 = v40;
    *(_QWORD *)(v16 + 32) = v41;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    sub_100016594(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release(v5);
  *v3 = v8;
}

unint64_t sub_10002BA5C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v6);
        Hasher.init(_seed:)(v28, *(_QWORD *)(a2 + 40));
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_BYTE *)(v11 + v3);
        v13 = (_BYTE *)(v11 + v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        v15 = type metadata accessor for GeneralMapsStateCollector.NearbyCategorySnapshot(0);
        v16 = *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72);
        v17 = v16 * v3;
        result = v14 + v16 * v3;
        v18 = v16 * v6;
        v19 = v14 + v16 * v6;
        v20 = v19 + v16;
        if (v17 < v18 || result >= v20)
        {
          result = swift_arrayInitWithTakeFrontToBack(result, v19, 1, v15);
        }
        else
        {
          v3 = v6;
          if (v17 == v18)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront(result);
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_10002BC3C(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(a2 + 48);
            v17 = (_QWORD *)(v16 + 8 * v3);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1)
              *v17 = *v18;
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_OWORD *)(v19 + 16 * v3);
            v21 = (_OWORD *)(v19 + 16 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 1))
            {
              *v20 = *v21;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v24 = *v22;
    v23 = (-1 << a1) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

uint64_t sub_10002BDEC(uint64_t a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  char v7;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v7 = a2 & 1;
  v8 = (_QWORD *)*v3;
  v10 = sub_10005CC88(a2 & 1);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = v17
            + *(_QWORD *)(*(_QWORD *)(type metadata accessor for GeneralMapsStateCollector.NearbyCategorySnapshot(0)
                                    - 8)
                        + 72)
            * v10;
        return sub_10002CDD4(a1, v18);
      }
      return sub_10002C328(v10, v7, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10002C428();
      goto LABEL_7;
    }
    sub_10002AE7C(v13, a3 & 1);
    v20 = sub_10005CC88(v7);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_10002C328(v10, v7, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for GeneralMapsStateCollector.NearbyCategoryCacheDomain);
  __break(1u);
  return result;
}

void sub_10002BF08(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_10005CC3C((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_10002C638();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_10002B1A8(v12, a3 & 1);
  v17 = sub_10005CC3C((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_100014FA8(0, &qword_10008BF58, MapsSuggestionsEntry_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

id sub_10002C068(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  id result;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v5 = v4;
  v9 = *v4;
  v11 = sub_10005CCE4((uint64_t)a3);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v15 = v10;
  v16 = *(_QWORD *)(v9 + 24);
  if (v16 >= v14 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v16 >= v14 && (a4 & 1) == 0)
  {
    sub_10002C7DC();
LABEL_7:
    v17 = (_QWORD *)*v5;
    if ((v15 & 1) != 0)
    {
LABEL_8:
      v18 = (_QWORD *)(v17[7] + 16 * v11);
      result = (id)swift_release(v18[1]);
      *v18 = a1;
      v18[1] = a2;
      return result;
    }
LABEL_11:
    v17[(v11 >> 6) + 8] |= 1 << v11;
    *(_QWORD *)(v17[6] + 8 * v11) = a3;
    v22 = (_QWORD *)(v17[7] + 16 * v11);
    *v22 = a1;
    v22[1] = a2;
    v23 = v17[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v17[2] = v25;
      return a3;
    }
    goto LABEL_14;
  }
  sub_10002B478(v14, a4 & 1);
  v20 = sub_10005CCE4((uint64_t)a3);
  if ((v15 & 1) == (v21 & 1))
  {
    v11 = v20;
    v17 = (_QWORD *)*v5;
    if ((v15 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v26 = sub_100014FA8(0, &qword_10008CCF8, MKMapSnapshotter_ptr);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v26);
  __break(1u);
  return result;
}

double sub_10002C1D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_10002C1E8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_OWORD *sub_10002C1F0(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_10005CD30(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_10002CE18(v17);
        return sub_100016594(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10002C9A8();
      goto LABEL_7;
    }
    sub_10002B748(v13, a3 & 1);
    v19 = sub_10005CD30(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100014D88(a2, (uint64_t)v21);
      return sub_10002C3B0(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

uint64_t sub_10002C328(unint64_t a1, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2 & 1;
  v7 = a4[7];
  v8 = type metadata accessor for GeneralMapsStateCollector.NearbyCategorySnapshot(0);
  result = sub_1000153B8(a3, v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

_OWORD *sub_10002C3B0(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_100016594(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

void sub_10002C428()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v1 = v0;
  v2 = type metadata accessor for GeneralMapsStateCollector.NearbyCategorySnapshot(0);
  v25 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000027AC(&qword_10008C018);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    swift_release(v5);
LABEL_28:
    *v1 = v7;
    return;
  }
  v24 = v1;
  v8 = (void *)(v6 + 64);
  v9 = v5 + 64;
  v10 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v10)
    memmove(v8, (const void *)(v5 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v9 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_26;
      v22 = *(_QWORD *)(v9 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v19 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v18);
    v20 = *(_QWORD *)(v25 + 72) * v18;
    sub_100015374(*(_QWORD *)(v5 + 56) + v20, (uint64_t)v4);
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v18) = v19;
    sub_1000153B8((uint64_t)v4, *(_QWORD *)(v7 + 56) + v20);
  }
  v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_26:
    swift_release(v5);
    v1 = v24;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v9 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v9 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_10002C638()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  sub_1000027AC(&qword_10008BF50);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    v20 = v18;
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10002C7DC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  __int128 v23;

  v1 = v0;
  sub_1000027AC(&qword_10008C0E8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v23 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v23;
    v19 = v17;
    swift_retain(*((_QWORD *)&v23 + 1));
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_10002C998(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

void *sub_10002C9A8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  sub_1000027AC(&qword_10008C0F0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_100014D88(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_10002ACB0(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = sub_100016594(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_10002CB8C(void *a1)
{
  uint64_t v1;
  id v2;
  id v3;

  v3 = *(id *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = a1;
  v2 = a1;

}

uint64_t sub_10002CBB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10002CC2C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  return sub_100028AE4(*(uint64_t **)(v0 + 16), (void *)(v0 + ((v1 + 24) & ~v1)));
}

uint64_t sub_10002CC5C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002CC80()
{
  uint64_t v0;

  return sub_100028084(v0);
}

uint64_t sub_10002CC88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(sub_1000027AC(&qword_10008BF20) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 40) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10002CD30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000027AC(&qword_10008BF20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_10002CD78()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000027AC(&qword_10008BF20) - 8) + 80);
  return sub_100027738(*(uint64_t **)(v0 + 16), *(uint64_t (**)(uint64_t *))(v0 + 24), *(_QWORD *)(v0 + 32), v0 + ((v1 + 40) & ~v1));
}

uint64_t sub_10002CDB0(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_10002CDD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GeneralMapsStateCollector.NearbyCategorySnapshot(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002CE18(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

double sub_10002CE54(double a1, double a2, double a3, double a4)
{
  double v4;
  void *v5;
  id v6;
  double v7;
  double v8;
  id v9;

  v4 = (a2 - a4) * 0.5;
  v5 = (void *)objc_opt_self(UIScreen);
  v6 = objc_msgSend(v5, "mainScreen");
  objc_msgSend(v6, "scale");
  v8 = v7;

  v9 = objc_msgSend(v5, "mainScreen");
  objc_msgSend(v9, "scale");

  return 1.0 / v8 * round(v4 / (1.0 / v8));
}

uint64_t sub_10002CF24()
{
  uint64_t result;

  result = Color.init(_:bundle:)(0xD000000000000011, 0x8000000100079C00, 0);
  qword_100090B70 = result;
  return result;
}

double sub_10002CF5C()
{
  void *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  objc_msgSend(v0, "altitude");
  v2 = v1;
  if (objc_msgSend(v0, "hasPitch"))
  {
    objc_msgSend(v0, "altitude");
    v4 = v3;
    objc_msgSend(v0, "pitch");
    v6 = sub_10002D020(v5);
    v2 = v4 / cos(v6);
  }
  objc_msgSend(v0, "latitude");
  v8 = v7;
  objc_msgSend(v0, "longitude");
  v10 = v9;
  v11 = sub_10002D020(30.0);
  v12 = v2 * tan(v11 * 0.5);
  return MKMapRectMakeWithRadialDistance(v8, v10, v12);
}

double sub_10002D020(double a1)
{
  return a1 * 0.0174532925;
}

void sub_10002D030()
{
  qword_10008CD20 = 0x4061C00000000000;
}

void sub_10002D044()
{
  qword_10008CD28 = 0x4052400000000000;
}

void sub_10002D058()
{
  uint64_t v0;
  __n128 v1;
  __n128 v2;
  __n128 v3;
  __n128 v4;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v0 = MKDefaultCoordinateRegion();
  v7 = v2.n128_f64[0] < -180.0 || v2.n128_f64[0] > 180.0 || v1.n128_f64[0] < -90.0 || v1.n128_f64[0] > 90.0;
  if (v7 || v3.n128_f64[0] < 0.0 || v3.n128_f64[0] > 180.0 || v4.n128_f64[0] < 0.0 || v4.n128_f64[0] > 360.0)
  {
    v1.n128_u64[0] = MKCoordinateRegionWorld[0];
    v2.n128_u64[0] = MKCoordinateRegionWorld[1];
    v3.n128_u64[0] = MKCoordinateRegionWorld[2];
    v4.n128_u64[0] = MKCoordinateRegionWorld[3];
  }
  *(_QWORD *)&xmmword_100090B78 = MKMapRectForCoordinateRegion(v0, v1, v2, v3, v4);
  *((_QWORD *)&xmmword_100090B78 + 1) = v8;
  qword_100090B88 = v9;
  unk_100090B90 = v10;
}

void sub_10002D110(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  uint64_t v34;
  Class isa;
  void *v36;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  void (*v56)(char *, uint64_t);
  void *v57;
  void *v58;
  void *v59;
  id v60;
  void *v61;
  id v62;
  double v63;
  double v64;
  void *v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  void *v72;
  id v73;
  uint64_t v74;

  v7 = v6;
  v69 = a5;
  v73 = a4;
  v12 = type metadata accessor for WidgetFamily(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v69 - v17;
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  *(_BYTE *)(v7 + 96) = 1;
  *(_QWORD *)(v7 + 104) = a2;
  *(_OWORD *)(v7 + 16) = xmmword_10006ACC0;
  *(_QWORD *)(v7 + 32) = 0;
  v19 = a2;
  *(_QWORD *)(v7 + 40) = dispatch_group_create();
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = sub_100006F2C((uint64_t)&_swiftEmptyArrayStorage);
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 72) = &_swiftEmptyArrayStorage;
  v20 = objc_allocWithZone((Class)MKMapSnapshotOptions);
  swift_retain_n(v7, 2);
  v21 = objc_msgSend(v20, "init");
  v22 = *(void **)(v7 + 16);
  *(_QWORD *)(v7 + 16) = v21;
  swift_release(v7);

  v23 = *(void **)(v7 + 16);
  if (!v23)
  {
    __break(1u);
    goto LABEL_23;
  }
  v70 = v13;
  v71 = v19;
  v72 = a3;
  objc_msgSend(v23, "_setShowsAppleLogo:", 0);
  v24 = *(void **)(v7 + 16);
  if (!v24)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v25 = v24;
  v26 = a1;
  objc_msgSend(v25, "setSize:", TimelineProviderContext.displaySize.getter(v25));

  v27 = *(void **)(v7 + 16);
  if (!v27)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v28 = sub_1000027AC(&qword_10008CF18);
  v29 = swift_allocObject(v28, 40, 7);
  *(_OWORD *)(v29 + 16) = xmmword_10006ACD0;
  v30 = objc_opt_self(MKMapSnapshotCustomFeatureAnnotation);
  v31 = v27;
  v32 = (void *)v30;
  v33 = v72;
  *(_QWORD *)(v29 + 32) = objc_msgSend(v32, "customFeatureAnnotationForMapItem:styleAttributes:suppressLabel:", v72, v73, 1);
  v74 = v29;
  specialized Array._endMutation()();
  v34 = v74;
  sub_1000027AC(&qword_10008CF20);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v34);
  objc_msgSend(v31, "_setCustomFeatureAnnotations:", isa);

  v36 = *(void **)(v7 + 16);
  if (!v36)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  objc_msgSend(v36, "_setSearchResultsType:", 1);
  v37 = v26;
  if (a6)
  {
    v38 = *(void **)(v7 + 16);
    if (v38)
    {
      v39 = a6;
      v40 = v38;
      v41 = objc_msgSend(v39, "destination");
      if (v41)
      {
        v42 = v41;
        objc_msgSend(v41, "coordinate");
        v44 = v43;
        v46 = v45;
        v48 = v47;

        v49 = nullsub_1(v44, v46, v48);
        v50 = CLLocationCoordinate2DFromGEOLocationCoordinate2D(v49);
        sub_10002D9E0(v50, v51, v26, v39);
        objc_msgSend(v40, "setMapRect:");

        TimelineProviderContext.family.getter(v52);
        v53 = v70;
        (*(void (**)(char *, _QWORD, uint64_t))(v70 + 104))(v16, enum case for WidgetFamily.systemSmall(_:), v12);
        v54 = sub_10002DE2C();
        v55 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v16, v12, v54);
        v56 = *(void (**)(char *, uint64_t))(v53 + 8);
        v56(v16, v12);
        v56(v18, v12);
        v57 = v72;
        if ((v55 & 1) == 0)
        {
          v58 = *(void **)(v7 + 16);
          if (!v58)
          {
LABEL_30:
            __break(1u);
            goto LABEL_31;
          }
          objc_msgSend(v58, "_setComposedRouteForRouteLine:", v39);
        }
        v59 = *(void **)(v7 + 16);
        if (v59)
        {
          v60 = v59;
          objc_msgSend(v60, "setMapType:", objc_msgSend(v39, "mapType"));

LABEL_21:
          swift_release(v7);
          v68 = type metadata accessor for TimelineProviderContext(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 8))(v37, v68);
          return;
        }
        goto LABEL_28;
      }
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v61 = *(void **)(v7 + 16);
  if (!v61)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v62 = v61;
  objc_msgSend(v33, "_coordinate");
  sub_10002DC28(v63, v64);
  objc_msgSend(v62, "setMapRect:");

  if ((v69 & 0x100000000) != 0)
  {

    goto LABEL_21;
  }
  v65 = *(void **)(v7 + 16);
  if (v65)
  {
    if ((_DWORD)v69 == 1)
      v66 = 104;
    else
      v66 = 0;
    v67 = v65;
    objc_msgSend(v67, "setMapType:", v66);

    goto LABEL_21;
  }
LABEL_31:
  __break(1u);
}

void sub_10002D5E4(void *a1)
{
  uint64_t v1;
  void *v2;
  id v4;
  id v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  _BOOL4 v18;
  CGPoint v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;

  v2 = *(void **)(v1 + 104);
  if (v2 && *(_BYTE *)(v1 + 96) == 1)
  {
    v4 = v2;
    v5 = objc_msgSend(a1, "image");
    objc_msgSend(v5, "size");
    v7 = v6;
    v9 = v8;

    if (qword_10008BA08 != -1)
      swift_once(&qword_10008BA08, sub_10004C2CC);
    v20.origin.x = 0.0;
    v20.origin.y = 0.0;
    v20.size.width = v7;
    v20.size.height = v9;
    v21 = CGRectInset(v20, -*(double *)&qword_100090BC8, -*(double *)&qword_100090BC8);
    x = v21.origin.x;
    y = v21.origin.y;
    width = v21.size.width;
    height = v21.size.height;
    objc_msgSend(v4, "coordinate");
    objc_msgSend(a1, "pointForCoordinate:");
    v15 = v14;
    v17 = v16;
    v22.origin.x = x;
    v22.origin.y = y;
    v22.size.width = width;
    v22.size.height = height;
    v19.x = v15;
    v19.y = v17;
    v18 = CGRectContainsPoint(v22, v19);

    if (v18)
    {
      *(CGFloat *)(v1 + 80) = v15;
      *(CGFloat *)(v1 + 88) = v17;
      *(_BYTE *)(v1 + 96) = 0;
    }
  }
}

void sub_10002D724()
{
  uint64_t v0;

}

uint64_t sub_10002D72C()
{
  uint64_t v0;

  v0 = sub_100029404();

  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t type metadata accessor for SuggestedDestinationSnapshotter()
{
  return objc_opt_self(_TtC17GeneralMapsWidget31SuggestedDestinationSnapshotter);
}

void sub_10002D780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  double v6;
  _QWORD v10[2];

  v0 = type metadata accessor for WidgetFamily(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TimelineProviderContext.family.getter(v2);
  v5 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v4, v0);
  if ((_DWORD)v5 == enum case for WidgetFamily.systemSmall(_:))
  {
    if (qword_10008B9E0 != -1)
      swift_once(&qword_10008B9E0, sub_10002D044);
  }
  else if ((_DWORD)v5 == enum case for WidgetFamily.systemMedium(_:))
  {
    v6 = TimelineProviderContext.displaySize.getter(v5) * 0.5;
    if (qword_10008B9A8 != -1)
    {
      *(double *)&v10[1] = v6;
      swift_once(&qword_10008B9A8, sub_100024634);
    }
  }
  else if ((_DWORD)v5 == enum case for WidgetFamily.systemLarge(_:))
  {
    if (qword_10008B9D8 != -1)
      swift_once(&qword_10008B9D8, sub_10002D030);
  }
  else
  {
    if ((_DWORD)v5 == enum case for WidgetFamily.systemExtraLarge(_:)
      || (_DWORD)v5 == enum case for WidgetFamily.accessoryCircular(_:)
      || (_DWORD)v5 == enum case for WidgetFamily.accessoryRectangular(_:)
      || (_DWORD)v5 == enum case for WidgetFamily.accessoryInline(_:))
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, 0x8000000100079690, "GeneralMapsWidget/SuggestedDestinationSnapshotter.swift", 55, 2, 96, 0);
    }
    else
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "GeneralMapsWidget/SuggestedDestinationSnapshotter.swift", 55, 2, 98, 0);
    }
    __break(1u);
  }
}

uint64_t sub_10002D9E0(double a1, double a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  id v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t result;
  uint64_t v33;

  v7 = type metadata accessor for WidgetFamily(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  TimelineProviderContext.family.getter(v9);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v11, v7);
  if (v12 == enum case for WidgetFamily.systemSmall(_:))
  {
    v14 = MKMapRectMakeWithRadialDistance(a1, a2, 50.0);
    v16 = v15;
    v18 = v17;
    v20 = v19;
LABEL_9:
    v26 = TimelineProviderContext.displaySize.getter(v13);
    v28 = v27;
    sub_10002D780();
    return _MKMapRectThatFits(v14, v16, v18, v20, v26, v28);
  }
  if (v12 == enum case for WidgetFamily.systemMedium(_:) || v12 == enum case for WidgetFamily.systemLarge(_:))
  {
    v22 = objc_msgSend(a4, "boundingMapRegion");
    v14 = GEOMapRectForMapRegion();
    v16 = v23;
    v18 = v24;
    v20 = v25;

    goto LABEL_9;
  }
  if (v12 == enum case for WidgetFamily.systemExtraLarge(_:)
    || v12 == enum case for WidgetFamily.accessoryCircular(_:)
    || v12 == enum case for WidgetFamily.accessoryRectangular(_:)
    || v12 == enum case for WidgetFamily.accessoryInline(_:))
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, 0x8000000100079690, "GeneralMapsWidget/SuggestedDestinationSnapshotter.swift", 55, 2, 63, 0);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "GeneralMapsWidget/SuggestedDestinationSnapshotter.swift", 55, 2, 65, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10002DC28(double a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  uint64_t result;
  uint64_t v27;

  v4 = type metadata accessor for WidgetFamily(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  TimelineProviderContext.family.getter(v6);
  v9 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v8, v4);
  if (v9 == enum case for WidgetFamily.systemSmall(_:) || v9 == enum case for WidgetFamily.systemMedium(_:))
  {
    v11 = 50.0;
LABEL_9:
    v12 = MKMapRectMakeWithRadialDistance(a1, a2, v11);
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v20 = TimelineProviderContext.displaySize.getter(v19);
    v22 = v21;
    sub_10002D780();
    return _MKMapRectThatFits(v12, v14, v16, v18, v20, v22);
  }
  if (v9 == enum case for WidgetFamily.systemLarge(_:))
  {
    v11 = 100.0;
    goto LABEL_9;
  }
  if (v9 == enum case for WidgetFamily.systemExtraLarge(_:)
    || v9 == enum case for WidgetFamily.accessoryCircular(_:)
    || v9 == enum case for WidgetFamily.accessoryRectangular(_:)
    || v9 == enum case for WidgetFamily.accessoryInline(_:))
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, 0x8000000100079690, "GeneralMapsWidget/SuggestedDestinationSnapshotter.swift", 55, 2, 79, 0);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "GeneralMapsWidget/SuggestedDestinationSnapshotter.swift", 55, 2, 81, 0);
  }
  __break(1u);
  return result;
}

unint64_t sub_10002DE2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008CF28;
  if (!qword_10008CF28)
  {
    v1 = type metadata accessor for WidgetFamily(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for WidgetFamily, v1);
    atomic_store(result, (unint64_t *)&qword_10008CF28);
  }
  return result;
}

uint64_t *sub_10002DE74(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  void *v58;
  void *v59;
  id v60;
  id v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v73;
  id v74;
  id v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  id v85;
  id v86;
  char *v87;
  unsigned int (*v88)(char *, uint64_t, uint64_t);
  char *v89;
  char *v90;
  void *v91;
  uint64_t v92;
  char *__dst;
  char *__dsta;
  char *__dstb;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;

  v4 = *(_QWORD *)(sub_1000027AC(&qword_10008CF30) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
    return a1;
  }
  v6 = type metadata accessor for GeneralMapsTimelineEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(v4 + 64));
    return a1;
  }
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
  v10 = *(int *)(v6 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v13);
    v99 = EnumCaseMultiPayload;
    if (EnumCaseMultiPayload == 2)
    {
      v21 = *(void **)v12;
      v97 = v14;
      if (*(_QWORD *)v12 == 1)
      {
        *(_OWORD *)v11 = *(_OWORD *)v12;
      }
      else
      {
        v35 = (void *)*((_QWORD *)v12 + 1);
        *(_QWORD *)v11 = v21;
        *((_QWORD *)v11 + 1) = v35;
        v36 = v21;
        v37 = v35;
      }
      v38 = *((_QWORD *)v12 + 3);
      *((_QWORD *)v11 + 2) = *((_QWORD *)v12 + 2);
      *((_QWORD *)v11 + 3) = v38;
      *((_DWORD *)v11 + 8) = *((_DWORD *)v12 + 8);
      v11[36] = v12[36];
      v39 = *((_QWORD *)v12 + 6);
      *((_QWORD *)v11 + 5) = *((_QWORD *)v12 + 5);
      *((_QWORD *)v11 + 6) = v39;
      v11[56] = v12[56];
      v40 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
      v90 = &v12[v40];
      __dstb = &v11[v40];
      v41 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
      v42 = *(_QWORD *)(v41 - 8);
      v88 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v39);
      if (!v88(v90, 1, v41))
      {
        v54 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(__dstb, v90, v54);
        v55 = *(int *)(v41 + 20);
        v56 = &__dstb[v55];
        v57 = &v90[v55];
        v58 = *(void **)&v90[v55];
        v14 = v97;
        if (v58 == (void *)1)
        {
          *(_OWORD *)v56 = *(_OWORD *)v57;
        }
        else
        {
          v84 = (void *)*((_QWORD *)v57 + 1);
          *(_QWORD *)v56 = v58;
          *((_QWORD *)v56 + 1) = v84;
          v85 = v58;
          v86 = v84;
        }
        v65 = 2;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(__dstb, 0, 1, v41);
        goto LABEL_30;
      }
      v43 = sub_1000027AC(&qword_10008BA68);
      memcpy(__dstb, v90, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      v14 = v97;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v96 = v14;
      v17 = *((_QWORD *)v12 + 1);
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *((_QWORD *)v11 + 1) = v17;
      v18 = *((_QWORD *)v12 + 3);
      *((_QWORD *)v11 + 2) = *((_QWORD *)v12 + 2);
      *((_QWORD *)v11 + 3) = v18;
      v19 = *((_QWORD *)v12 + 5);
      *((_QWORD *)v11 + 4) = *((_QWORD *)v12 + 4);
      *((_QWORD *)v11 + 5) = v19;
      v11[48] = v12[48];
      v20 = (void *)*((_QWORD *)v12 + 7);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      if (v20 == (void *)1)
      {
        *(_OWORD *)(v11 + 56) = *(_OWORD *)(v12 + 56);
      }
      else
      {
        v27 = (void *)*((_QWORD *)v12 + 8);
        *((_QWORD *)v11 + 7) = v20;
        *((_QWORD *)v11 + 8) = v27;
        v28 = v20;
        v29 = v27;
      }
      *((_DWORD *)v11 + 18) = *((_DWORD *)v12 + 18);
      v11[76] = v12[76];
      v30 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
      __dsta = &v11[v30];
      v31 = &v12[v30];
      v32 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
      v33 = *((_QWORD *)v32 - 1);
      if (!(*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
      {
        v92 = v33;
        v49 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(__dsta, v31, v49);
        v50 = v32[5];
        v51 = &__dsta[v50];
        v52 = &v31[v50];
        v53 = *(void **)&v31[v50];
        if (v53 == (void *)1)
        {
          *(_OWORD *)v51 = *(_OWORD *)v52;
        }
        else
        {
          v73 = (void *)*((_QWORD *)v52 + 1);
          *(_QWORD *)v51 = v53;
          *((_QWORD *)v51 + 1) = v73;
          v74 = v53;
          v75 = v73;
        }
        v76 = v32[6];
        v77 = &__dsta[v76];
        v78 = &v31[v76];
        *(_OWORD *)v77 = *(_OWORD *)v78;
        v77[16] = v78[16];
        v79 = v32[7];
        v89 = &__dsta[v79];
        v80 = &v31[v79];
        v81 = type metadata accessor for URL(0);
        v82 = *(_QWORD *)(v81 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
        {
          v83 = sub_1000027AC(&qword_10008BA58);
          memcpy(v89, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v89, v80, v81);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v89, 0, 1, v81);
        }
        v14 = v96;
        v65 = v99;
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v92 + 56))(__dsta, 0, 1, v32);
        goto LABEL_30;
      }
      v34 = sub_1000027AC(&qword_10008BA60);
      memcpy(__dsta, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      v11[8] = v12[8];
      v22 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
      __dst = &v11[v22];
      v23 = &v12[v22];
      v24 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
      v25 = *((_QWORD *)v24 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v25 + 48))(v23, 1, v24))
      {
        v26 = sub_1000027AC(&qword_10008BA50);
        memcpy(__dst, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        v98 = v14;
        v44 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(__dst, v23, v44);
        v45 = v24[5];
        v46 = *(_QWORD *)&v23[v45];
        *(_QWORD *)&__dst[v45] = v46;
        v47 = v24[6];
        v87 = &__dst[v47];
        v48 = &v23[v47];
        v91 = *(void **)&v23[v47];
        swift_bridgeObjectRetain(v46);
        if (v91 == (void *)1)
        {
          *(_OWORD *)v87 = *(_OWORD *)v48;
        }
        else
        {
          v59 = (void *)*((_QWORD *)v48 + 1);
          *(_QWORD *)v87 = v91;
          *((_QWORD *)v87 + 1) = v59;
          v60 = v91;
          v61 = v59;
        }
        v14 = v98;
        v62 = v24[7];
        v63 = &__dst[v62];
        v64 = &v23[v62];
        *(_QWORD *)v63 = *(_QWORD *)v64;
        v63[8] = v64[8];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v25 + 56))(__dst, 0, 1, v24);
      }
    }
    v65 = v99;
LABEL_30:
    swift_storeEnumTagMultiPayload(v11, v13, v65);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    goto LABEL_31;
  }
  v15 = sub_1000027AC(&qword_10008BB18);
  memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
LABEL_31:
  v66 = *(int *)(v6 + 24);
  v67 = (char *)a1 + v66;
  v68 = (char *)a2 + v66;
  v69 = type metadata accessor for TimelineEntryRelevance(0);
  v70 = *(_QWORD *)(v69 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
  {
    v71 = sub_1000027AC(&qword_10008BB20);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v67, v68, v69);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_10002E520(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = type metadata accessor for GeneralMapsTimelineEntry(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
  if (!(_DWORD)result)
  {
    v4 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
    v5 = a1 + *(int *)(v2 + 20);
    v6 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
      goto LABEL_3;
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v5, v6);
    if (EnumCaseMultiPayload == 2)
    {
      if (*(_QWORD *)v5 != 1)
      {

      }
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 48));
      v11 = v5 + *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
      v15 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v11, 1, v15))
        goto LABEL_3;
      v16 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v11, v16);
      v14 = *(int *)(v15 + 20);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));
        v18 = *(void **)(v5 + 56);
        if (v18 != (void *)1)
        {

        }
        v19 = v5 + *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
        v20 = type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20))
        {
          v21 = type metadata accessor for TimelineProviderContext(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v19, v21);
          v22 = (id *)(v19 + *(int *)(v20 + 20));
          if (*v22 != (id)1)
          {

          }
          v23 = v19 + *(int *)(v20 + 28);
          v24 = type metadata accessor for URL(0);
          v25 = *(_QWORD *)(v24 - 8);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
            (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
        }
        goto LABEL_3;
      }
      if (EnumCaseMultiPayload
        || (v11 = v5 + *(int *)(type metadata accessor for NearbyEntryContent(0) + 20),
            v12 = type metadata accessor for NearbyEntryContent.ResolvedContent(0),
            (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12)))
      {
LABEL_3:
        v7 = a1 + *(int *)(v2 + 24);
        v8 = type metadata accessor for TimelineEntryRelevance(0);
        v9 = *(_QWORD *)(v8 - 8);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
        if (!(_DWORD)result)
          return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
        return result;
      }
      v13 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
      swift_bridgeObjectRelease(*(_QWORD *)(v11 + *(int *)(v12 + 20)));
      v14 = *(int *)(v12 + 24);
    }
    v17 = (id *)(v11 + v14);
    if (*v17 != (id)1)
    {

    }
    goto LABEL_3;
  }
  return result;
}

char *sub_10002E818(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  void *v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v71;
  id v72;
  id v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  id v83;
  id v84;
  char *v85;
  char *v86;
  char *v87;
  unsigned int (*v88)(char *, uint64_t, uint64_t);
  void *v89;
  uint64_t v90;
  char *__dst;
  char *__dsta;
  char *__dstb;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;

  v4 = type metadata accessor for GeneralMapsTimelineEntry(0);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    v6 = sub_1000027AC(&qword_10008CF30);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    return a1;
  }
  v7 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  v8 = *(int *)(v4 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v11);
    v97 = EnumCaseMultiPayload;
    if (EnumCaseMultiPayload == 2)
    {
      v19 = *(void **)v10;
      v95 = v12;
      if (*(_QWORD *)v10 == 1)
      {
        *(_OWORD *)v9 = *(_OWORD *)v10;
      }
      else
      {
        v33 = (void *)*((_QWORD *)v10 + 1);
        *(_QWORD *)v9 = v19;
        *((_QWORD *)v9 + 1) = v33;
        v34 = v19;
        v35 = v33;
      }
      v36 = *((_QWORD *)v10 + 3);
      *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
      *((_QWORD *)v9 + 3) = v36;
      *((_DWORD *)v9 + 8) = *((_DWORD *)v10 + 8);
      v9[36] = v10[36];
      v37 = *((_QWORD *)v10 + 6);
      *((_QWORD *)v9 + 5) = *((_QWORD *)v10 + 5);
      *((_QWORD *)v9 + 6) = v37;
      v9[56] = v10[56];
      v38 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
      v86 = &v9[v38];
      __dstb = &v10[v38];
      v39 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
      v40 = *(_QWORD *)(v39 - 8);
      v88 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v37);
      if (!v88(__dstb, 1, v39))
      {
        v52 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v86, __dstb, v52);
        v53 = *(int *)(v39 + 20);
        v54 = &v86[v53];
        v55 = &__dstb[v53];
        v56 = *(void **)&__dstb[v53];
        v12 = v95;
        if (v56 == (void *)1)
        {
          *(_OWORD *)v54 = *(_OWORD *)v55;
        }
        else
        {
          v82 = (void *)*((_QWORD *)v55 + 1);
          *(_QWORD *)v54 = v56;
          *((_QWORD *)v54 + 1) = v82;
          v83 = v56;
          v84 = v82;
        }
        v63 = 2;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v86, 0, 1, v39);
        goto LABEL_28;
      }
      v41 = sub_1000027AC(&qword_10008BA68);
      memcpy(v86, __dstb, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      v12 = v95;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v94 = v12;
      v15 = *((_QWORD *)v10 + 1);
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *((_QWORD *)v9 + 1) = v15;
      v16 = *((_QWORD *)v10 + 3);
      *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
      *((_QWORD *)v9 + 3) = v16;
      v17 = *((_QWORD *)v10 + 5);
      *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
      *((_QWORD *)v9 + 5) = v17;
      v9[48] = v10[48];
      v18 = (void *)*((_QWORD *)v10 + 7);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      if (v18 == (void *)1)
      {
        *(_OWORD *)(v9 + 56) = *(_OWORD *)(v10 + 56);
      }
      else
      {
        v25 = (void *)*((_QWORD *)v10 + 8);
        *((_QWORD *)v9 + 7) = v18;
        *((_QWORD *)v9 + 8) = v25;
        v26 = v18;
        v27 = v25;
      }
      *((_DWORD *)v9 + 18) = *((_DWORD *)v10 + 18);
      v9[76] = v10[76];
      v28 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
      __dsta = &v9[v28];
      v29 = &v10[v28];
      v30 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
      v31 = *((_QWORD *)v30 - 1);
      if (!(*(unsigned int (**)(char *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
      {
        v90 = v31;
        v47 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(__dsta, v29, v47);
        v48 = v30[5];
        v49 = &__dsta[v48];
        v50 = &v29[v48];
        v51 = *(void **)&v29[v48];
        if (v51 == (void *)1)
        {
          *(_OWORD *)v49 = *(_OWORD *)v50;
        }
        else
        {
          v71 = (void *)*((_QWORD *)v50 + 1);
          *(_QWORD *)v49 = v51;
          *((_QWORD *)v49 + 1) = v71;
          v72 = v51;
          v73 = v71;
        }
        v74 = v30[6];
        v75 = &__dsta[v74];
        v76 = &v29[v74];
        *(_OWORD *)v75 = *(_OWORD *)v76;
        v75[16] = v76[16];
        v77 = v30[7];
        v87 = &__dsta[v77];
        v78 = &v29[v77];
        v79 = type metadata accessor for URL(0);
        v80 = *(_QWORD *)(v79 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
        {
          v81 = sub_1000027AC(&qword_10008BA58);
          memcpy(v87, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v87, v78, v79);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v87, 0, 1, v79);
        }
        v12 = v94;
        v63 = v97;
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v90 + 56))(__dsta, 0, 1, v30);
        goto LABEL_28;
      }
      v32 = sub_1000027AC(&qword_10008BA60);
      memcpy(__dsta, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      v9[8] = v10[8];
      v20 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
      __dst = &v9[v20];
      v21 = &v10[v20];
      v22 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
      v23 = *((_QWORD *)v22 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
      {
        v24 = sub_1000027AC(&qword_10008BA50);
        memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        v96 = v12;
        v42 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(__dst, v21, v42);
        v43 = v22[5];
        v44 = *(_QWORD *)&v21[v43];
        *(_QWORD *)&__dst[v43] = v44;
        v45 = v22[6];
        v85 = &__dst[v45];
        v46 = &v21[v45];
        v89 = *(void **)&v21[v45];
        swift_bridgeObjectRetain(v44);
        if (v89 == (void *)1)
        {
          *(_OWORD *)v85 = *(_OWORD *)v46;
        }
        else
        {
          v57 = (void *)*((_QWORD *)v46 + 1);
          *(_QWORD *)v85 = v89;
          *((_QWORD *)v85 + 1) = v57;
          v58 = v89;
          v59 = v57;
        }
        v12 = v96;
        v60 = v22[7];
        v61 = &__dst[v60];
        v62 = &v21[v60];
        *(_QWORD *)v61 = *(_QWORD *)v62;
        v61[8] = v62[8];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v23 + 56))(__dst, 0, 1, v22);
      }
    }
    v63 = v97;
LABEL_28:
    swift_storeEnumTagMultiPayload(v9, v11, v63);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    goto LABEL_29;
  }
  v13 = sub_1000027AC(&qword_10008BB18);
  memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
LABEL_29:
  v64 = *(int *)(v4 + 24);
  v65 = &a1[v64];
  v66 = &a2[v64];
  v67 = type metadata accessor for TimelineEntryRelevance(0);
  v68 = *(_QWORD *)(v67 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
  {
    v69 = sub_1000027AC(&qword_10008BB20);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v65, v66, v67);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t sub_10002EEA0(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t EnumCaseMultiPayload;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  char *v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  id v52;
  id v53;
  int v54;
  uint64_t v55;
  char *v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  id v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  char *v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  void *v91;
  void *v92;
  id v93;
  id v94;
  int v95;
  uint64_t v96;
  char *v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  id v102;
  id v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  id v113;
  id v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v127;
  id v128;
  id v129;
  uint64_t v130;
  char *v131;
  char *v132;
  __int128 v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  id v140;
  id v141;
  void *v142;
  void *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  int *v147;
  unsigned int (**v148)(const void *, uint64_t, int *);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  void *v164;
  void *v165;
  id v166;
  id v167;
  int v168;
  uint64_t v169;
  char *v170;
  char *v171;
  int *v172;
  unsigned int (**v173)(const void *, uint64_t, int *);
  uint64_t v174;
  void *v175;
  id v176;
  id v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  id v187;
  id v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  void *v193;
  id v194;
  id v195;
  uint64_t v196;
  char *v197;
  char *v198;
  __int128 v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  id v206;
  id v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  void *v223;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t (*v228)(void *, uint64_t, uint64_t);
  int v229;
  int v230;
  void *v231;
  id v232;
  id v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  void *v238;
  id v239;
  id v240;
  uint64_t v241;
  char *v242;
  char *v243;
  __int128 v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  id v251;
  id v252;
  char *v253;
  void *v254;
  uint64_t v255;
  char *__src;
  char *__srca;
  char *__srcb;
  unsigned int (*v259)(char *, uint64_t, uint64_t);
  uint64_t v260;
  void *v261;
  uint64_t v262;
  char *__dst;
  char *__dsta;
  char *__dstb;
  char *__dstc;
  char *__dstd;
  void *v268;
  void *v269;
  char *v270;
  char *v271;
  unsigned int (*v272)(char *, uint64_t, uint64_t);
  unsigned int (*v273)(char *, uint64_t, uint64_t);
  void *v274;
  char *v275;
  unsigned int (**v276)(const void *, uint64_t, int *);
  unsigned int v277;
  unsigned int v278;
  char *v279;
  unsigned int (**v280)(const void *, uint64_t, int *);
  char *v281;

  v4 = type metadata accessor for GeneralMapsTimelineEntry(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6((uint64_t)a2, 1, v4);
  if (!v7)
  {
    if (v8)
    {
      sub_10001B54C(a1, type metadata accessor for GeneralMapsTimelineEntry);
      goto LABEL_7;
    }
    v18 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(a1, a2, v18);
    v19 = *(int *)(v4 + 20);
    v20 = (char *)(a1 + v19);
    v21 = &a2[v19];
    v22 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
    v25 = v24(v20, 1, v22);
    v26 = v24(v21, 1, v22);
    if (v25)
    {
      if (!v26)
      {
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v21, v22);
        v28 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 2)
        {
          v70 = *(void **)v21;
          v260 = v23;
          if (*(_QWORD *)v21 == 1)
          {
            *(_OWORD *)v20 = *(_OWORD *)v21;
          }
          else
          {
            *(_QWORD *)v20 = v70;
            v101 = (void *)*((_QWORD *)v21 + 1);
            *((_QWORD *)v20 + 1) = v101;
            v102 = v70;
            v103 = v101;
          }
          *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
          v104 = *((_QWORD *)v21 + 3);
          *((_QWORD *)v20 + 3) = v104;
          v105 = *((_DWORD *)v21 + 8);
          v20[36] = v21[36];
          *((_DWORD *)v20 + 8) = v105;
          *((_QWORD *)v20 + 5) = *((_QWORD *)v21 + 5);
          v106 = *((_QWORD *)v21 + 6);
          *((_QWORD *)v20 + 6) = v106;
          v20[56] = v21[56];
          v107 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
          __dstc = &v20[v107];
          v108 = &v21[v107];
          v109 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
          v110 = *(_QWORD *)(v109 - 8);
          v272 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48);
          swift_bridgeObjectRetain(v104);
          swift_bridgeObjectRetain(v106);
          if (v272(v108, 1, v109))
          {
            v111 = sub_1000027AC(&qword_10008BA68);
            memcpy(__dstc, v108, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
            v28 = 2;
            v23 = v260;
          }
          else
          {
            v160 = type metadata accessor for TimelineProviderContext(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v160 - 8) + 16))(__dstc, v108, v160);
            v161 = *(int *)(v109 + 20);
            v162 = &__dstc[v161];
            v163 = &v108[v161];
            v164 = *(void **)&v108[v161];
            v28 = 2;
            v23 = v260;
            if (v164 == (void *)1)
            {
              *(_OWORD *)v162 = *(_OWORD *)v163;
            }
            else
            {
              *(_QWORD *)v162 = v164;
              v274 = (void *)v109;
              v205 = (void *)*((_QWORD *)v163 + 1);
              *((_QWORD *)v162 + 1) = v205;
              v206 = v164;
              v207 = v205;
              v109 = (uint64_t)v274;
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v110 + 56))(__dstc, 0, 1, v109);
          }
        }
        else if ((_DWORD)EnumCaseMultiPayload == 1)
        {
          *(_QWORD *)v20 = *(_QWORD *)v21;
          v29 = *((_QWORD *)v21 + 1);
          *((_QWORD *)v20 + 1) = v29;
          *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
          v30 = *((_QWORD *)v21 + 3);
          *((_QWORD *)v20 + 3) = v30;
          *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
          v31 = *((_QWORD *)v21 + 5);
          v20[48] = v21[48];
          *((_QWORD *)v20 + 5) = v31;
          v32 = (void *)*((_QWORD *)v21 + 7);
          swift_bridgeObjectRetain(v29);
          swift_bridgeObjectRetain(v30);
          if (v32 == (void *)1)
          {
            *(_OWORD *)(v20 + 56) = *(_OWORD *)(v21 + 56);
          }
          else
          {
            *((_QWORD *)v20 + 7) = v32;
            v92 = (void *)*((_QWORD *)v21 + 8);
            *((_QWORD *)v20 + 8) = v92;
            v93 = v32;
            v94 = v92;
          }
          v95 = *((_DWORD *)v21 + 18);
          v20[76] = v21[76];
          *((_DWORD *)v20 + 18) = v95;
          v96 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
          v271 = &v20[v96];
          v97 = &v21[v96];
          v98 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
          v99 = *((_QWORD *)v98 - 1);
          v28 = 1;
          if ((*(unsigned int (**)(char *, uint64_t, int *))(v99 + 48))(v97, 1, v98))
          {
            v100 = sub_1000027AC(&qword_10008BA60);
            memcpy(v271, v97, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
          }
          else
          {
            v255 = v99;
            v155 = type metadata accessor for TimelineProviderContext(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v155 - 8) + 16))(v271, v97, v155);
            v156 = v98[5];
            v157 = &v271[v156];
            v158 = &v97[v156];
            v159 = *(void **)&v97[v156];
            if (v159 == (void *)1)
            {
              *(_OWORD *)v157 = *(_OWORD *)v158;
            }
            else
            {
              *(_QWORD *)v157 = v159;
              v193 = (void *)*((_QWORD *)v158 + 1);
              *((_QWORD *)v157 + 1) = v193;
              v194 = v159;
              v195 = v193;
            }
            v196 = v98[6];
            v197 = &v271[v196];
            v198 = &v97[v196];
            v199 = *(_OWORD *)v198;
            v197[16] = v198[16];
            *(_OWORD *)v197 = v199;
            v200 = v98[7];
            __dstd = &v271[v200];
            v201 = &v97[v200];
            v202 = type metadata accessor for URL(0);
            v203 = *(_QWORD *)(v202 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v203 + 48))(v201, 1, v202))
            {
              v204 = sub_1000027AC(&qword_10008BA58);
              memcpy(__dstd, v201, *(_QWORD *)(*(_QWORD *)(v204 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v203 + 16))(__dstd, v201, v202);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v203 + 56))(__dstd, 0, 1, v202);
            }
            v28 = 1;
            (*(void (**)(char *, _QWORD, uint64_t, int *))(v255 + 56))(v271, 0, 1, v98);
          }
        }
        else
        {
          v71 = *(void **)v21;
          v20[8] = v21[8];
          *(_QWORD *)v20 = v71;
          v72 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
          v270 = &v20[v72];
          v73 = &v21[v72];
          v74 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
          v75 = *((_QWORD *)v74 - 1);
          if ((*(unsigned int (**)(char *, uint64_t, int *))(v75 + 48))(v73, 1, v74))
          {
            v76 = sub_1000027AC(&qword_10008BA50);
            memcpy(v270, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
          }
          else
          {
            v278 = v28;
            v150 = type metadata accessor for TimelineProviderContext(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v150 - 8) + 16))(v270, v73, v150);
            v151 = v74[5];
            v152 = *(_QWORD *)&v73[v151];
            *(_QWORD *)&v270[v151] = v152;
            v153 = v74[6];
            v154 = &v73[v153];
            v254 = *(void **)&v73[v153];
            __srcb = &v270[v153];
            swift_bridgeObjectRetain(v152);
            if (v254 == (void *)1)
            {
              *(_OWORD *)__srcb = *(_OWORD *)v154;
            }
            else
            {
              *(_QWORD *)__srcb = v254;
              v186 = (void *)*((_QWORD *)v154 + 1);
              *((_QWORD *)__srcb + 1) = v186;
              v187 = v254;
              v188 = v186;
            }
            v189 = v74[7];
            v190 = &v270[v189];
            v191 = &v73[v189];
            v192 = *(_QWORD *)v191;
            v190[8] = v191[8];
            *(_QWORD *)v190 = v192;
            (*(void (**)(char *, _QWORD, uint64_t, int *))(v75 + 56))(v270, 0, 1, v74);
            v28 = v278;
          }
        }
        swift_storeEnumTagMultiPayload(v20, v22, v28);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
        goto LABEL_102;
      }
    }
    else
    {
      if (!v26)
      {
        if ((char *)a1 != a2)
        {
          sub_10001B54C((uint64_t)v20, type metadata accessor for GeneralMapsTimelineEntryContent);
          v46 = swift_getEnumCaseMultiPayload(v21, v22);
          if (v46 == 2)
          {
            v142 = *(void **)v21;
            if (*(_QWORD *)v21 == 1)
            {
              *(_OWORD *)v20 = *(_OWORD *)v21;
            }
            else
            {
              *(_QWORD *)v20 = v142;
              v175 = (void *)*((_QWORD *)v21 + 1);
              *((_QWORD *)v20 + 1) = v175;
              v176 = v142;
              v177 = v175;
            }
            *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
            v178 = *((_QWORD *)v21 + 3);
            *((_QWORD *)v20 + 3) = v178;
            v179 = *((_DWORD *)v21 + 8);
            v20[36] = v21[36];
            *((_DWORD *)v20 + 8) = v179;
            *((_QWORD *)v20 + 5) = *((_QWORD *)v21 + 5);
            v180 = *((_QWORD *)v21 + 6);
            *((_QWORD *)v20 + 6) = v180;
            v20[56] = v21[56];
            v181 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
            v279 = &v20[v181];
            v182 = &v21[v181];
            v183 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
            v184 = *(_QWORD *)(v183 - 8);
            v273 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v184 + 48);
            swift_bridgeObjectRetain(v178);
            swift_bridgeObjectRetain(v180);
            if (v273(v182, 1, v183))
            {
              v185 = sub_1000027AC(&qword_10008BA68);
              memcpy(v279, v182, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
            }
            else
            {
              v219 = type metadata accessor for TimelineProviderContext(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v219 - 8) + 16))(v279, v182, v219);
              v220 = *(int *)(v183 + 20);
              v221 = &v279[v220];
              v222 = &v182[v220];
              v223 = *(void **)&v182[v220];
              if (v223 == (void *)1)
              {
                *(_OWORD *)v221 = *(_OWORD *)v222;
              }
              else
              {
                *(_QWORD *)v221 = v223;
                v250 = (void *)*((_QWORD *)v222 + 1);
                *((_QWORD *)v221 + 1) = v250;
                v251 = v223;
                v252 = v250;
              }
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v184 + 56))(v279, 0, 1, v183);
            }
            swift_storeEnumTagMultiPayload(v20, v22, 2);
          }
          else if (v46 == 1)
          {
            *(_QWORD *)v20 = *(_QWORD *)v21;
            v47 = *((_QWORD *)v21 + 1);
            *((_QWORD *)v20 + 1) = v47;
            *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
            v48 = *((_QWORD *)v21 + 3);
            *((_QWORD *)v20 + 3) = v48;
            *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
            v49 = *((_QWORD *)v21 + 5);
            v20[48] = v21[48];
            *((_QWORD *)v20 + 5) = v49;
            v50 = (void *)*((_QWORD *)v21 + 7);
            swift_bridgeObjectRetain(v47);
            swift_bridgeObjectRetain(v48);
            if (v50 == (void *)1)
            {
              *(_OWORD *)(v20 + 56) = *(_OWORD *)(v21 + 56);
            }
            else
            {
              *((_QWORD *)v20 + 7) = v50;
              v165 = (void *)*((_QWORD *)v21 + 8);
              *((_QWORD *)v20 + 8) = v165;
              v166 = v50;
              v167 = v165;
            }
            v168 = *((_DWORD *)v21 + 18);
            v20[76] = v21[76];
            *((_DWORD *)v20 + 18) = v168;
            v169 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
            v170 = &v20[v169];
            v171 = &v21[v169];
            v172 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
            v173 = (unsigned int (**)(const void *, uint64_t, int *))*((_QWORD *)v172 - 1);
            if (v173[6](v171, 1, v172))
            {
              v174 = sub_1000027AC(&qword_10008BA60);
              memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v174 - 8) + 64));
            }
            else
            {
              v214 = type metadata accessor for TimelineProviderContext(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v214 - 8) + 16))(v170, v171, v214);
              v215 = v172[5];
              v216 = &v170[v215];
              v217 = &v171[v215];
              v218 = *(void **)&v171[v215];
              v276 = v173;
              if (v218 == (void *)1)
              {
                *(_OWORD *)v216 = *(_OWORD *)v217;
              }
              else
              {
                *(_QWORD *)v216 = v218;
                v238 = (void *)*((_QWORD *)v217 + 1);
                *((_QWORD *)v216 + 1) = v238;
                v239 = v218;
                v240 = v238;
              }
              v241 = v172[6];
              v242 = &v170[v241];
              v243 = &v171[v241];
              v244 = *(_OWORD *)v243;
              v242[16] = v243[16];
              *(_OWORD *)v242 = v244;
              v245 = v172[7];
              v281 = &v170[v245];
              v246 = &v171[v245];
              v247 = type metadata accessor for URL(0);
              v248 = *(_QWORD *)(v247 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v248 + 48))(v246, 1, v247))
              {
                v249 = sub_1000027AC(&qword_10008BA58);
                memcpy(v281, v246, *(_QWORD *)(*(_QWORD *)(v249 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v248 + 16))(v281, v246, v247);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v248 + 56))(v281, 0, 1, v247);
              }
              ((void (*)(char *, _QWORD, uint64_t, int *))v276[7])(v170, 0, 1, v172);
            }
            swift_storeEnumTagMultiPayload(v20, v22, 1);
          }
          else
          {
            v143 = *(void **)v21;
            v20[8] = v21[8];
            *(_QWORD *)v20 = v143;
            v144 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
            v145 = &v20[v144];
            v146 = &v21[v144];
            v147 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
            v148 = (unsigned int (**)(const void *, uint64_t, int *))*((_QWORD *)v147 - 1);
            if (v148[6](v146, 1, v147))
            {
              v149 = sub_1000027AC(&qword_10008BA50);
              memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
            }
            else
            {
              v280 = v148;
              v208 = type metadata accessor for TimelineProviderContext(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v208 - 8) + 16))(v145, v146, v208);
              v209 = v147[5];
              v210 = *(_QWORD *)&v146[v209];
              *(_QWORD *)&v145[v209] = v210;
              v211 = v147[6];
              v275 = &v145[v211];
              v212 = &v146[v211];
              v213 = *(void **)&v146[v211];
              swift_bridgeObjectRetain(v210);
              if (v213 == (void *)1)
              {
                *(_OWORD *)v275 = *(_OWORD *)v212;
              }
              else
              {
                *(_QWORD *)v275 = v213;
                v231 = (void *)*((_QWORD *)v212 + 1);
                *((_QWORD *)v275 + 1) = v231;
                v232 = v213;
                v233 = v231;
              }
              v234 = v147[7];
              v235 = &v145[v234];
              v236 = &v146[v234];
              v237 = *(_QWORD *)v236;
              v235[8] = v236[8];
              *(_QWORD *)v235 = v237;
              ((void (*)(char *, _QWORD, uint64_t, int *))v280[7])(v145, 0, 1, v147);
            }
            swift_storeEnumTagMultiPayload(v20, v22, 0);
          }
        }
        goto LABEL_102;
      }
      sub_10001B54C((uint64_t)v20, type metadata accessor for GeneralMapsTimelineEntryContent);
    }
    v38 = sub_1000027AC(&qword_10008BB18);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
LABEL_102:
    v224 = *(int *)(v4 + 24);
    v225 = (void *)(a1 + v224);
    a2 += v224;
    v226 = type metadata accessor for TimelineEntryRelevance(0);
    v227 = *(_QWORD *)(v226 - 8);
    v228 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v227 + 48);
    v229 = v228(v225, 1, v226);
    v230 = v228(a2, 1, v226);
    if (v229)
    {
      if (!v230)
      {
        (*(void (**)(void *, char *, uint64_t))(v227 + 16))(v225, a2, v226);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v227 + 56))(v225, 0, 1, v226);
        return a1;
      }
    }
    else
    {
      if (!v230)
      {
        (*(void (**)(void *, char *, uint64_t))(v227 + 24))(v225, a2, v226);
        return a1;
      }
      (*(void (**)(void *, uint64_t))(v227 + 8))(v225, v226);
    }
    v16 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BB20) - 8) + 64);
    v17 = v225;
    goto LABEL_8;
  }
  if (v8)
  {
LABEL_7:
    v16 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008CF30) - 8) + 64);
    v17 = (void *)a1;
LABEL_8:
    memcpy(v17, a2, v16);
    return a1;
  }
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
  v10 = *(int *)(v4 + 20);
  v11 = (char *)(a1 + v10);
  v12 = &a2[v10];
  v13 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
  v14 = *(void **)(v13 - 8);
  if (!(*((unsigned int (**)(char *, uint64_t, uint64_t))v14 + 6))(v12, 1, v13))
  {
    v33 = swift_getEnumCaseMultiPayload(v12, v13);
    v277 = v33;
    if (v33 == 2)
    {
      v39 = *(void **)v12;
      v269 = v14;
      if (*(_QWORD *)v12 == 1)
      {
        *(_OWORD *)v11 = *(_OWORD *)v12;
      }
      else
      {
        *(_QWORD *)v11 = v39;
        v60 = (void *)*((_QWORD *)v12 + 1);
        *((_QWORD *)v11 + 1) = v60;
        v61 = v39;
        v62 = v60;
      }
      *((_QWORD *)v11 + 2) = *((_QWORD *)v12 + 2);
      v63 = *((_QWORD *)v12 + 3);
      *((_QWORD *)v11 + 3) = v63;
      v64 = *((_DWORD *)v12 + 8);
      v11[36] = v12[36];
      *((_DWORD *)v11 + 8) = v64;
      *((_QWORD *)v11 + 5) = *((_QWORD *)v12 + 5);
      v65 = *((_QWORD *)v12 + 6);
      *((_QWORD *)v11 + 6) = v65;
      v11[56] = v12[56];
      v66 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
      __src = &v11[v66];
      __dstb = &v12[v66];
      v67 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
      v68 = *(_QWORD *)(v67 - 8);
      v259 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48);
      swift_bridgeObjectRetain(v63);
      swift_bridgeObjectRetain(v65);
      if (!v259(__dstb, 1, v67))
      {
        v87 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 16))(__src, __dstb, v87);
        v88 = *(int *)(v67 + 20);
        v89 = &__src[v88];
        v90 = &__dstb[v88];
        v91 = *(void **)&__dstb[v88];
        v14 = v269;
        if (v91 == (void *)1)
        {
          *(_OWORD *)v89 = *(_OWORD *)v90;
        }
        else
        {
          *(_QWORD *)v89 = v91;
          v139 = (void *)*((_QWORD *)v90 + 1);
          *((_QWORD *)v89 + 1) = v139;
          v140 = v91;
          v141 = v139;
        }
        v119 = 2;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(__src, 0, 1, v67);
        goto LABEL_57;
      }
      v69 = sub_1000027AC(&qword_10008BA68);
      memcpy(__src, __dstb, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    }
    else
    {
      if (v33 == 1)
      {
        v268 = v14;
        *(_QWORD *)v11 = *(_QWORD *)v12;
        v34 = *((_QWORD *)v12 + 1);
        *((_QWORD *)v11 + 1) = v34;
        *((_QWORD *)v11 + 2) = *((_QWORD *)v12 + 2);
        v35 = *((_QWORD *)v12 + 3);
        *((_QWORD *)v11 + 3) = v35;
        *((_QWORD *)v11 + 4) = *((_QWORD *)v12 + 4);
        v36 = *((_QWORD *)v12 + 5);
        v11[48] = v12[48];
        *((_QWORD *)v11 + 5) = v36;
        v37 = (void *)*((_QWORD *)v12 + 7);
        swift_bridgeObjectRetain(v34);
        swift_bridgeObjectRetain(v35);
        if (v37 == (void *)1)
        {
          *(_OWORD *)(v11 + 56) = *(_OWORD *)(v12 + 56);
        }
        else
        {
          *((_QWORD *)v11 + 7) = v37;
          v51 = (void *)*((_QWORD *)v12 + 8);
          *((_QWORD *)v11 + 8) = v51;
          v52 = v37;
          v53 = v51;
        }
        v54 = *((_DWORD *)v12 + 18);
        v11[76] = v12[76];
        *((_DWORD *)v11 + 18) = v54;
        v55 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
        __dsta = &v11[v55];
        v56 = &v12[v55];
        v57 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
        v58 = *((_QWORD *)v57 - 1);
        if (!(*(unsigned int (**)(char *, uint64_t, int *))(v58 + 48))(v56, 1, v57))
        {
          v262 = v58;
          v82 = type metadata accessor for TimelineProviderContext(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(__dsta, v56, v82);
          v83 = v57[5];
          v84 = &__dsta[v83];
          v85 = &v56[v83];
          v86 = *(void **)&v56[v83];
          if (v86 == (void *)1)
          {
            *(_OWORD *)v84 = *(_OWORD *)v85;
          }
          else
          {
            *(_QWORD *)v84 = v86;
            v127 = (void *)*((_QWORD *)v85 + 1);
            *((_QWORD *)v84 + 1) = v127;
            v128 = v86;
            v129 = v127;
          }
          v130 = v57[6];
          v131 = &__dsta[v130];
          v132 = &v56[v130];
          v133 = *(_OWORD *)v132;
          v131[16] = v132[16];
          *(_OWORD *)v131 = v133;
          v134 = v57[7];
          __srca = &__dsta[v134];
          v135 = &v56[v134];
          v136 = type metadata accessor for URL(0);
          v137 = *(_QWORD *)(v136 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v137 + 48))(v135, 1, v136))
          {
            v138 = sub_1000027AC(&qword_10008BA58);
            memcpy(__srca, v135, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v137 + 16))(__srca, v135, v136);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v137 + 56))(__srca, 0, 1, v136);
          }
          v14 = v268;
          v119 = v277;
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v262 + 56))(__dsta, 0, 1, v57);
          goto LABEL_57;
        }
        v59 = sub_1000027AC(&qword_10008BA60);
        memcpy(__dsta, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
LABEL_56:
        v119 = v277;
LABEL_57:
        swift_storeEnumTagMultiPayload(v11, v13, v119);
        (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v14 + 7))(v11, 0, 1, v13);
        goto LABEL_58;
      }
      v40 = *(void **)v12;
      v11[8] = v12[8];
      *(_QWORD *)v11 = v40;
      v41 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
      __dst = &v11[v41];
      v42 = &v12[v41];
      v43 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
      v44 = *((_QWORD *)v43 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v44 + 48))(v42, 1, v43))
      {
        v45 = sub_1000027AC(&qword_10008BA50);
        memcpy(__dst, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        goto LABEL_56;
      }
      v269 = v14;
      v77 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(__dst, v42, v77);
      v78 = v43[5];
      v79 = *(_QWORD *)&v42[v78];
      *(_QWORD *)&__dst[v78] = v79;
      v80 = v43[6];
      v253 = &__dst[v80];
      v81 = &v42[v80];
      v261 = *(void **)&v42[v80];
      swift_bridgeObjectRetain(v79);
      if (v261 == (void *)1)
      {
        *(_OWORD *)v253 = *(_OWORD *)v81;
      }
      else
      {
        *(_QWORD *)v253 = v261;
        v112 = (void *)*((_QWORD *)v81 + 1);
        *((_QWORD *)v253 + 1) = v112;
        v113 = v261;
        v114 = v112;
      }
      v115 = v43[7];
      v116 = &__dst[v115];
      v117 = &v42[v115];
      v118 = *(_QWORD *)v117;
      v116[8] = v117[8];
      *(_QWORD *)v116 = v118;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v44 + 56))(__dst, 0, 1, v43);
    }
    v14 = v269;
    goto LABEL_56;
  }
  v15 = sub_1000027AC(&qword_10008BB18);
  memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
LABEL_58:
  v120 = *(int *)(v4 + 24);
  v121 = (void *)(a1 + v120);
  v122 = &a2[v120];
  v123 = type metadata accessor for TimelineEntryRelevance(0);
  v124 = *(_QWORD *)(v123 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v122, 1, v123))
  {
    v125 = sub_1000027AC(&qword_10008BB20);
    memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v124 + 16))(v121, v122, v123);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v124 + 56))(v121, 0, 1, v123);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

char *sub_1000300F0(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int EnumCaseMultiPayload;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  size_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(void);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unsigned int v61;

  v4 = type metadata accessor for GeneralMapsTimelineEntry(0);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    v6 = sub_1000027AC(&qword_10008CF30);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    return a1;
  }
  v7 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
  v8 = *(int *)(v4 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v11);
    v61 = EnumCaseMultiPayload;
    if (EnumCaseMultiPayload == 2)
    {
      v24 = *((_OWORD *)v10 + 1);
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *((_OWORD *)v9 + 1) = v24;
      *((_DWORD *)v9 + 8) = *((_DWORD *)v10 + 8);
      v9[36] = v10[36];
      *(_OWORD *)(v9 + 40) = *(_OWORD *)(v10 + 40);
      v9[56] = v10[56];
      v25 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
      v59 = &v9[v25];
      v26 = &v10[v25];
      v27 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
      v28 = *(_QWORD *)(v27 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        v42 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v59, v26, v42);
        *(_OWORD *)&v59[*(int *)(v27 + 20)] = *(_OWORD *)&v26[*(int *)(v27 + 20)];
        v43 = *(void (**)(void))(v28 + 56);
        goto LABEL_21;
      }
      v21 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA68) - 8) + 64);
      v22 = v59;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v15 = *((_OWORD *)v10 + 1);
        *(_OWORD *)v9 = *(_OWORD *)v10;
        *((_OWORD *)v9 + 1) = v15;
        v16 = *((_QWORD *)v10 + 5);
        *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
        *((_QWORD *)v9 + 5) = v16;
        v9[48] = v10[48];
        *(_OWORD *)(v9 + 56) = *(_OWORD *)(v10 + 56);
        v9[76] = v10[76];
        *((_DWORD *)v9 + 18) = *((_DWORD *)v10 + 18);
        v17 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
        v58 = &v9[v17];
        v18 = &v10[v17];
        v19 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
        v20 = *((_QWORD *)v19 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA60) - 8) + 64);
          v22 = v58;
          v23 = v18;
LABEL_14:
          memcpy(v22, v23, v21);
LABEL_22:
          swift_storeEnumTagMultiPayload(v9, v11, v61);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
          goto LABEL_23;
        }
        v32 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v58, v18, v32);
        *(_OWORD *)&v58[v19[5]] = *(_OWORD *)&v18[v19[5]];
        v33 = v19[6];
        v34 = &v58[v33];
        v35 = &v18[v33];
        *(_OWORD *)v34 = *(_OWORD *)v35;
        v34[16] = v35[16];
        v36 = v19[7];
        v57 = &v58[v36];
        v37 = &v18[v36];
        v38 = type metadata accessor for URL(0);
        v55 = *(_QWORD *)(v38 - 8);
        v56 = v37;
        v39 = v37;
        v40 = v38;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v39, 1, v38))
        {
          v41 = sub_1000027AC(&qword_10008BA58);
          memcpy(v57, v56, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v57, v56, v40);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v57, 0, 1, v40);
        }
        v43 = *(void (**)(void))(v20 + 56);
LABEL_21:
        v43();
        goto LABEL_22;
      }
      *(_QWORD *)v9 = *(_QWORD *)v10;
      v9[8] = v10[8];
      v29 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
      v30 = &v9[v29];
      v26 = &v10[v29];
      v31 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
      v60 = *((_QWORD *)v31 - 1);
      if (!(*(unsigned int (**)(char *, uint64_t, int *))(v60 + 48))(v26, 1, v31))
      {
        v44 = type metadata accessor for TimelineProviderContext(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v30, v26, v44);
        *(_QWORD *)&v30[v31[5]] = *(_QWORD *)&v26[v31[5]];
        *(_OWORD *)&v30[v31[6]] = *(_OWORD *)&v26[v31[6]];
        v45 = v31[7];
        v46 = &v30[v45];
        v47 = &v26[v45];
        v46[8] = v47[8];
        *(_QWORD *)v46 = *(_QWORD *)v47;
        v43 = *(void (**)(void))(v60 + 56);
        goto LABEL_21;
      }
      v21 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA50) - 8) + 64);
      v22 = v30;
    }
    v23 = v26;
    goto LABEL_14;
  }
  v13 = sub_1000027AC(&qword_10008BB18);
  memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
LABEL_23:
  v48 = *(int *)(v4 + 24);
  v49 = &a1[v48];
  v50 = &a2[v48];
  v51 = type metadata accessor for TimelineEntryRelevance(0);
  v52 = *(_QWORD *)(v51 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
  {
    v53 = sub_1000027AC(&qword_10008BB20);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v49, v50, v51);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t sub_100030618(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t EnumCaseMultiPayload;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int *v41;
  uint64_t v42;
  size_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  int *v54;
  int v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(void);
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  int *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t (*v129)(void *, uint64_t, uint64_t);
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *__dst;
  char *__dsta;
  char *__dstb;
  void *__dstc;
  unsigned int v158;
  unsigned int v159;
  char *v160;

  v4 = type metadata accessor for GeneralMapsTimelineEntry(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6((uint64_t)a2, 1, v4);
  if (!v7)
  {
    if (v8)
    {
      sub_10001B54C(a1, type metadata accessor for GeneralMapsTimelineEntry);
      goto LABEL_7;
    }
    v18 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(a1, a2, v18);
    v19 = *(int *)(v4 + 20);
    v20 = (_OWORD *)(a1 + v19);
    v21 = &a2[v19];
    v22 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
    v25 = v24((char *)v20, 1, v22);
    v26 = v24(v21, 1, v22);
    if (v25)
    {
      if (!v26)
      {
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v21, v22);
        v28 = EnumCaseMultiPayload;
        if ((_DWORD)EnumCaseMultiPayload == 2)
        {
          v159 = 2;
          v64 = *((_OWORD *)v21 + 1);
          *v20 = *(_OWORD *)v21;
          v20[1] = v64;
          *((_DWORD *)v20 + 8) = *((_DWORD *)v21 + 8);
          *((_BYTE *)v20 + 36) = v21[36];
          *(_OWORD *)((char *)v20 + 40) = *(_OWORD *)(v21 + 40);
          *((_BYTE *)v20 + 56) = v21[56];
          v65 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
          v66 = (char *)v20 + v65;
          v67 = &v21[v65];
          v68 = (int *)type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
          v69 = *((_QWORD *)v68 - 1);
          if ((*(unsigned int (**)(char *, uint64_t, int *))(v69 + 48))(v67, 1, v68))
          {
            v70 = &qword_10008BA68;
LABEL_37:
            v72 = sub_1000027AC(v70);
            memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
LABEL_59:
            v28 = v159;
LABEL_60:
            swift_storeEnumTagMultiPayload(v20, v22, v28);
            (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
            goto LABEL_61;
          }
          v120 = type metadata accessor for TimelineProviderContext(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v120 - 8) + 32))(v66, v67, v120);
          *(_OWORD *)&v66[v68[5]] = *(_OWORD *)&v67[v68[5]];
        }
        else
        {
          if ((_DWORD)EnumCaseMultiPayload == 1)
          {
            v29 = *((_OWORD *)v21 + 1);
            *v20 = *(_OWORD *)v21;
            v20[1] = v29;
            v30 = *((_QWORD *)v21 + 5);
            *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
            *((_QWORD *)v20 + 5) = v30;
            *((_BYTE *)v20 + 48) = v21[48];
            *(_OWORD *)((char *)v20 + 56) = *(_OWORD *)(v21 + 56);
            *((_BYTE *)v20 + 76) = v21[76];
            *((_DWORD *)v20 + 18) = *((_DWORD *)v21 + 18);
            v31 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
            __dst = (char *)v20 + v31;
            v32 = &v21[v31];
            v33 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
            v34 = *((_QWORD *)v33 - 1);
            if ((*(unsigned int (**)(char *, uint64_t, int *))(v34 + 48))(v32, 1, v33))
            {
              v35 = sub_1000027AC(&qword_10008BA60);
              memcpy(__dst, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
            }
            else
            {
              v149 = v34;
              v98 = type metadata accessor for TimelineProviderContext(0);
              v99 = __dst;
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v98 - 8) + 32))(__dst, v32, v98);
              *(_OWORD *)&__dst[v33[5]] = *(_OWORD *)&v32[v33[5]];
              v100 = v33[6];
              v101 = &__dst[v100];
              v102 = &v32[v100];
              *(_OWORD *)v101 = *(_OWORD *)v102;
              v101[16] = v102[16];
              v103 = v33[7];
              v152 = &__dst[v103];
              v104 = &v32[v103];
              v105 = type metadata accessor for URL(0);
              v147 = *(_QWORD *)(v105 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48))(v104, 1, v105))
              {
                v106 = sub_1000027AC(&qword_10008BA58);
                memcpy(v152, v104, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v147 + 32))(v152, v104, v105);
                v99 = __dst;
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v147 + 56))(v152, 0, 1, v105);
              }
              v28 = 1;
              (*(void (**)(char *, _QWORD, uint64_t, int *))(v149 + 56))(v99, 0, 1, v33);
            }
            goto LABEL_60;
          }
          v159 = EnumCaseMultiPayload;
          *(_QWORD *)v20 = *(_QWORD *)v21;
          *((_BYTE *)v20 + 8) = v21[8];
          v71 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
          v66 = (char *)v20 + v71;
          v67 = &v21[v71];
          v68 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
          v69 = *((_QWORD *)v68 - 1);
          if ((*(unsigned int (**)(char *, uint64_t, int *))(v69 + 48))(v67, 1, v68))
          {
            v70 = &qword_10008BA50;
            goto LABEL_37;
          }
          v121 = type metadata accessor for TimelineProviderContext(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v121 - 8) + 32))(v66, v67, v121);
          *(_QWORD *)&v66[v68[5]] = *(_QWORD *)&v67[v68[5]];
          *(_OWORD *)&v66[v68[6]] = *(_OWORD *)&v67[v68[6]];
          v122 = v68[7];
          v123 = &v66[v122];
          v124 = &v67[v122];
          v123[8] = v124[8];
          *(_QWORD *)v123 = *(_QWORD *)v124;
        }
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v69 + 56))(v66, 0, 1, v68);
        goto LABEL_59;
      }
    }
    else
    {
      if (!v26)
      {
        if ((char *)a1 != a2)
        {
          sub_10001B54C((uint64_t)v20, type metadata accessor for GeneralMapsTimelineEntryContent);
          v55 = swift_getEnumCaseMultiPayload(v21, v22);
          if (v55 == 2)
          {
            v107 = *((_OWORD *)v21 + 1);
            *v20 = *(_OWORD *)v21;
            v20[1] = v107;
            *((_DWORD *)v20 + 8) = *((_DWORD *)v21 + 8);
            *((_BYTE *)v20 + 36) = v21[36];
            *(_OWORD *)((char *)v20 + 40) = *(_OWORD *)(v21 + 40);
            *((_BYTE *)v20 + 56) = v21[56];
            v108 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
            v109 = (char *)v20 + v108;
            v110 = &v21[v108];
            v111 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
            v112 = *(_QWORD *)(v111 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v110, 1, v111))
            {
              v113 = sub_1000027AC(&qword_10008BA68);
              memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
            }
            else
            {
              v141 = type metadata accessor for TimelineProviderContext(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 32))(v109, v110, v141);
              *(_OWORD *)&v109[*(int *)(v111 + 20)] = *(_OWORD *)&v110[*(int *)(v111 + 20)];
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
            }
            swift_storeEnumTagMultiPayload(v20, v22, 2);
          }
          else if (v55 == 1)
          {
            v56 = *((_OWORD *)v21 + 1);
            *v20 = *(_OWORD *)v21;
            v20[1] = v56;
            v57 = *((_QWORD *)v21 + 5);
            *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
            *((_QWORD *)v20 + 5) = v57;
            *((_BYTE *)v20 + 48) = v21[48];
            *(_OWORD *)((char *)v20 + 56) = *(_OWORD *)(v21 + 56);
            *((_BYTE *)v20 + 76) = v21[76];
            *((_DWORD *)v20 + 18) = *((_DWORD *)v21 + 18);
            v58 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
            v59 = (char *)v20 + v58;
            v60 = &v21[v58];
            v61 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
            v62 = *((_QWORD *)v61 - 1);
            if ((*(unsigned int (**)(char *, uint64_t, int *))(v62 + 48))(v60, 1, v61))
            {
              v63 = sub_1000027AC(&qword_10008BA60);
              memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
            }
            else
            {
              v153 = v62;
              v132 = type metadata accessor for TimelineProviderContext(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v132 - 8) + 32))(v59, v60, v132);
              *(_OWORD *)&v59[v61[5]] = *(_OWORD *)&v60[v61[5]];
              v133 = v61[6];
              v134 = &v59[v133];
              v135 = &v60[v133];
              *(_OWORD *)v134 = *(_OWORD *)v135;
              v134[16] = v135[16];
              v136 = v61[7];
              v160 = &v59[v136];
              v137 = &v60[v136];
              v138 = type metadata accessor for URL(0);
              v139 = *(_QWORD *)(v138 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v139 + 48))(v137, 1, v138))
              {
                v140 = sub_1000027AC(&qword_10008BA58);
                memcpy(v160, v137, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v139 + 32))(v160, v137, v138);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v160, 0, 1, v138);
              }
              (*(void (**)(char *, _QWORD, uint64_t, int *))(v153 + 56))(v59, 0, 1, v61);
            }
            swift_storeEnumTagMultiPayload(v20, v22, 1);
          }
          else
          {
            *(_QWORD *)v20 = *(_QWORD *)v21;
            *((_BYTE *)v20 + 8) = v21[8];
            v114 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
            v115 = (char *)v20 + v114;
            v116 = &v21[v114];
            v117 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
            v118 = *((_QWORD *)v117 - 1);
            if ((*(unsigned int (**)(char *, uint64_t, int *))(v118 + 48))(v116, 1, v117))
            {
              v119 = sub_1000027AC(&qword_10008BA50);
              memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
            }
            else
            {
              v142 = type metadata accessor for TimelineProviderContext(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v142 - 8) + 32))(v115, v116, v142);
              *(_QWORD *)&v115[v117[5]] = *(_QWORD *)&v116[v117[5]];
              *(_OWORD *)&v115[v117[6]] = *(_OWORD *)&v116[v117[6]];
              v143 = v117[7];
              v144 = &v115[v143];
              v145 = &v116[v143];
              v144[8] = v145[8];
              *(_QWORD *)v144 = *(_QWORD *)v145;
              (*(void (**)(char *, _QWORD, uint64_t, int *))(v118 + 56))(v115, 0, 1, v117);
            }
            swift_storeEnumTagMultiPayload(v20, v22, 0);
          }
        }
        goto LABEL_61;
      }
      sub_10001B54C((uint64_t)v20, type metadata accessor for GeneralMapsTimelineEntryContent);
    }
    v46 = sub_1000027AC(&qword_10008BB18);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
LABEL_61:
    v125 = *(int *)(v4 + 24);
    v126 = (void *)(a1 + v125);
    a2 += v125;
    v127 = type metadata accessor for TimelineEntryRelevance(0);
    v128 = *(_QWORD *)(v127 - 8);
    v129 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v128 + 48);
    v130 = v129(v126, 1, v127);
    v131 = v129(a2, 1, v127);
    if (v130)
    {
      if (!v131)
      {
        (*(void (**)(void *, char *, uint64_t))(v128 + 32))(v126, a2, v127);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v128 + 56))(v126, 0, 1, v127);
        return a1;
      }
    }
    else
    {
      if (!v131)
      {
        (*(void (**)(void *, char *, uint64_t))(v128 + 40))(v126, a2, v127);
        return a1;
      }
      (*(void (**)(void *, uint64_t))(v128 + 8))(v126, v127);
    }
    v16 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BB20) - 8) + 64);
    v17 = v126;
    goto LABEL_8;
  }
  if (v8)
  {
LABEL_7:
    v16 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008CF30) - 8) + 64);
    v17 = (void *)a1;
LABEL_8:
    memcpy(v17, a2, v16);
    return a1;
  }
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
  v10 = *(int *)(v4 + 20);
  v11 = (_OWORD *)(a1 + v10);
  v12 = &a2[v10];
  v13 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v36 = swift_getEnumCaseMultiPayload(v12, v13);
    v158 = v36;
    if (v36 == 2)
    {
      v47 = *((_OWORD *)v12 + 1);
      *v11 = *(_OWORD *)v12;
      v11[1] = v47;
      *((_DWORD *)v11 + 8) = *((_DWORD *)v12 + 8);
      *((_BYTE *)v11 + 36) = v12[36];
      *(_OWORD *)((char *)v11 + 40) = *(_OWORD *)(v12 + 40);
      *((_BYTE *)v11 + 56) = v12[56];
      v48 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
      __dstb = (char *)v11 + v48;
      v49 = &v12[v48];
      v50 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
      v51 = *(_QWORD *)(v50 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
      {
        v43 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA68) - 8) + 64);
        v44 = __dstb;
LABEL_26:
        v45 = v49;
LABEL_27:
        memcpy(v44, v45, v43);
LABEL_43:
        v90 = v158;
LABEL_44:
        swift_storeEnumTagMultiPayload(v11, v13, v90);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
        goto LABEL_45;
      }
      v84 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 32))(__dstb, v49, v84);
      *(_OWORD *)&__dstb[*(int *)(v50 + 20)] = *(_OWORD *)&v49[*(int *)(v50 + 20)];
      v85 = *(void (**)(void))(v51 + 56);
    }
    else
    {
      if (v36 == 1)
      {
        v37 = *((_OWORD *)v12 + 1);
        *v11 = *(_OWORD *)v12;
        v11[1] = v37;
        v38 = *((_QWORD *)v12 + 5);
        *((_QWORD *)v11 + 4) = *((_QWORD *)v12 + 4);
        *((_QWORD *)v11 + 5) = v38;
        *((_BYTE *)v11 + 48) = v12[48];
        *(_OWORD *)((char *)v11 + 56) = *(_OWORD *)(v12 + 56);
        *((_BYTE *)v11 + 76) = v12[76];
        *((_DWORD *)v11 + 18) = *((_DWORD *)v12 + 18);
        v39 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
        __dsta = (char *)v11 + v39;
        v40 = &v12[v39];
        v41 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
        v42 = *((_QWORD *)v41 - 1);
        if (!(*(unsigned int (**)(char *, uint64_t, int *))(v42 + 48))(v40, 1, v41))
        {
          v151 = v42;
          v73 = type metadata accessor for TimelineProviderContext(0);
          v74 = __dsta;
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(__dsta, v40, v73);
          *(_OWORD *)&__dsta[v41[5]] = *(_OWORD *)&v40[v41[5]];
          v75 = v41[6];
          v76 = &__dsta[v75];
          v77 = &v40[v75];
          *(_OWORD *)v76 = *(_OWORD *)v77;
          v76[16] = v77[16];
          v78 = v41[7];
          v150 = &__dsta[v78];
          v79 = &v40[v78];
          v80 = type metadata accessor for URL(0);
          v146 = *(_QWORD *)(v80 - 8);
          v148 = v79;
          v81 = v79;
          v82 = v80;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48))(v81, 1, v80))
          {
            v83 = sub_1000027AC(&qword_10008BA58);
            memcpy(v150, v148, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v146 + 32))(v150, v148, v82);
            v74 = __dsta;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v150, 0, 1, v82);
          }
          v90 = v158;
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v151 + 56))(v74, 0, 1, v41);
          goto LABEL_44;
        }
        v43 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA60) - 8) + 64);
        v44 = __dsta;
        v45 = v40;
        goto LABEL_27;
      }
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *((_BYTE *)v11 + 8) = v12[8];
      v52 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
      v53 = (char *)v11 + v52;
      v49 = &v12[v52];
      v54 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
      __dstc = (void *)*((_QWORD *)v54 - 1);
      if ((*((unsigned int (**)(char *, uint64_t, int *))__dstc + 6))(v49, 1, v54))
      {
        v43 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA50) - 8) + 64);
        v44 = v53;
        goto LABEL_26;
      }
      v86 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 32))(v53, v49, v86);
      *(_QWORD *)&v53[v54[5]] = *(_QWORD *)&v49[v54[5]];
      *(_OWORD *)&v53[v54[6]] = *(_OWORD *)&v49[v54[6]];
      v87 = v54[7];
      v88 = &v53[v87];
      v89 = &v49[v87];
      v88[8] = v89[8];
      *(_QWORD *)v88 = *(_QWORD *)v89;
      v85 = (void (*)(void))*((_QWORD *)__dstc + 7);
    }
    v85();
    goto LABEL_43;
  }
  v15 = sub_1000027AC(&qword_10008BB18);
  memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
LABEL_45:
  v91 = *(int *)(v4 + 24);
  v92 = (void *)(a1 + v91);
  v93 = &a2[v91];
  v94 = type metadata accessor for TimelineEntryRelevance(0);
  v95 = *(_QWORD *)(v94 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v93, 1, v94))
  {
    v96 = sub_1000027AC(&qword_10008BB20);
    memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v95 + 32))(v92, v93, v94);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v92, 0, 1, v94);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t sub_1000313E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000313F0);
}

uint64_t sub_1000313F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000027AC(&qword_10008CF30);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100031430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003143C);
}

uint64_t sub_10003143C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000027AC(&qword_10008CF30);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for WidgetContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_10008CF90;
  if (!qword_10008CF90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WidgetContentView);
  return result;
}

void sub_1000314BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_100031524(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

void sub_100031524(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10008CFA0)
  {
    v2 = type metadata accessor for GeneralMapsTimelineEntry(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10008CFA0);
  }
}

uint64_t sub_100031578(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006CD5C, 1);
}

uint64_t sub_100031588@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int EnumCaseMultiPayload;
  uint64_t v83;
  uint64_t v84;
  uint64_t KeyPath;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;

  v195 = a1;
  v1 = type metadata accessor for PlaceholderView(0);
  v2 = __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v155 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v2);
  v178 = (uint64_t)&v155 - v5;
  v183 = sub_1000027AC(&qword_10008CFD0);
  v6 = __chkstk_darwin(v183);
  v177 = (uint64_t)&v155 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v179 = (uint64_t)&v155 - v8;
  v181 = sub_1000027AC(&qword_10008CFD8);
  __chkstk_darwin(v181);
  v182 = (uint64_t)&v155 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_1000027AC(&qword_10008CFE0);
  __chkstk_darwin(v194);
  v184 = (char *)&v155 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = type metadata accessor for NavigationETAWidgetView(0);
  __chkstk_darwin(v164);
  v169 = (char *)&v155 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = sub_1000027AC(&qword_10008CFE8);
  v12 = __chkstk_darwin(v180);
  v167 = (uint64_t)&v155 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v171 = (uint64_t)&v155 - v14;
  v15 = type metadata accessor for NavigationETAEntryContent(0);
  v16 = __chkstk_darwin(v15);
  v162 = (uint64_t)&v155 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v170 = (uint64_t)&v155 - v18;
  v161 = type metadata accessor for SuggestedDestinationWidgetView(0);
  __chkstk_darwin(v161);
  v165 = (char *)&v155 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_1000027AC(&qword_10008CFF0);
  v20 = __chkstk_darwin(v176);
  v163 = (uint64_t)&v155 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v168 = (uint64_t)&v155 - v22;
  v23 = type metadata accessor for SuggestedDestinationEntryContent(0);
  v24 = __chkstk_darwin(v23);
  v160 = (uint64_t)&v155 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v166 = (uint64_t)&v155 - v26;
  v191 = sub_1000027AC(&qword_10008CFF8);
  __chkstk_darwin(v191);
  v193 = (uint64_t)&v155 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = sub_1000027AC(&qword_10008D000);
  __chkstk_darwin(v173);
  v174 = (uint64_t)&v155 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_1000027AC(&qword_10008D008);
  __chkstk_darwin(v192);
  v175 = (char *)&v155 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for BlurReplaceTransition.Configuration(0);
  v186 = *(_QWORD *)(v30 - 8);
  v187 = v30;
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v155 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v35 = (char *)&v155 - v34;
  v36 = type metadata accessor for BlurReplaceTransition(0);
  v189 = *(_QWORD *)(v36 - 8);
  v190 = v36;
  v37 = __chkstk_darwin(v36);
  v188 = (char *)&v155 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v40 = (char *)&v155 - v39;
  v41 = type metadata accessor for NearbyWidgetView(0);
  __chkstk_darwin(v41);
  v157 = (char *)&v155 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_1000027AC(&qword_10008D010);
  v43 = __chkstk_darwin(v172);
  v156 = (uint64_t)&v155 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v159 = (uint64_t)&v155 - v45;
  v46 = type metadata accessor for NearbyEntryContent(0);
  v47 = __chkstk_darwin(v46);
  v49 = (char *)&v155 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  v158 = (uint64_t)&v155 - v50;
  v51 = sub_1000027AC(&qword_10008CF30);
  __chkstk_darwin(v51);
  v53 = (char *)&v155 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_1000027AC(&qword_10008BB18);
  v55 = __chkstk_darwin(v54);
  v57 = (char *)&v155 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v55);
  v59 = (char *)&v155 - v58;
  sub_100016550(v185, (uint64_t)v53, &qword_10008CF30);
  v60 = type metadata accessor for GeneralMapsTimelineEntry(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 48))(v53, 1, v60) == 1)
  {
    sub_100015590((uint64_t)v53, &qword_10008CF30);
    v61 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v59, 1, 1, v61);
    v62 = (uint64_t)v59;
LABEL_4:
    *v4 = swift_getKeyPath(&unk_10006AD88);
    v64 = sub_1000027AC(&qword_10008C160);
    swift_storeEnumTagMultiPayload(v4, v64, 0);
    v65 = v178;
    v66 = sub_10001CDDC((uint64_t)v4, v178, type metadata accessor for PlaceholderView);
    static BlurReplaceTransition.Configuration.downUp.getter(v66);
    v68 = v186;
    v67 = v187;
    (*(void (**)(char *, char *, uint64_t))(v186 + 16))(v33, v35, v187);
    BlurReplaceTransition.init(configuration:)(v33);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v35, v67);
    v69 = v188;
    v70 = v189;
    v71 = v190;
    (*(void (**)(char *, char *, uint64_t))(v189 + 16))(v188, v40, v190);
    v72 = sub_10001B41C(&qword_10008D018, (uint64_t (*)(uint64_t))&type metadata accessor for BlurReplaceTransition, (uint64_t)&protocol conformance descriptor for BlurReplaceTransition);
    v73 = AnyTransition.init<A>(_:)(v69, v71, v72);
    v74 = v177;
    sub_10001B33C(v65, v177, type metadata accessor for PlaceholderView);
    v75 = v183;
    *(_QWORD *)(v74 + *(int *)(v183 + 36)) = v73;
    (*(void (**)(char *, uint64_t))(v70 + 8))(v40, v71);
    sub_10001B54C(v65, type metadata accessor for PlaceholderView);
    v76 = v179;
    sub_10001565C(v74, v179, &qword_10008CFD0);
    v77 = v182;
    sub_100016550(v76, v182, &qword_10008CFD0);
    swift_storeEnumTagMultiPayload(v77, v181, 1);
    v78 = sub_1000325E8();
    sub_1000326B8();
    v79 = (uint64_t)v184;
    _ConditionalContent<>.init(storage:)(v77, v180, v75, v78);
    v80 = v193;
    sub_100016550(v79, v193, &qword_10008CFE0);
    swift_storeEnumTagMultiPayload(v80, v191, 1);
    v81 = sub_10003273C();
    sub_100032868();
    _ConditionalContent<>.init(storage:)(v80, v192, v194, v81);
    sub_100015590(v79, &qword_10008CFE0);
    sub_100015590(v76, &qword_10008CFD0);
    return sub_100015590(v62, &qword_10008BB18);
  }
  sub_100016550((uint64_t)&v53[*(int *)(v60 + 20)], (uint64_t)v59, &qword_10008BB18);
  sub_10001B54C((uint64_t)v53, type metadata accessor for GeneralMapsTimelineEntry);
  v63 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
  v62 = (uint64_t)v59;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 48))(v59, 1, v63) == 1)
    goto LABEL_4;
  sub_100016550((uint64_t)v59, (uint64_t)v57, &qword_10008BB18);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v57, v63);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v83 = v166;
      sub_10001CDDC((uint64_t)v57, v166, type metadata accessor for SuggestedDestinationEntryContent);
      v84 = v160;
      sub_10001B33C(v83, v160, type metadata accessor for SuggestedDestinationEntryContent);
      KeyPath = swift_getKeyPath(&unk_10006AD88);
      v86 = (uint64_t)v165;
      v87 = (uint64_t *)&v165[*(int *)(v161 + 20)];
      *v87 = KeyPath;
      v88 = sub_1000027AC(&qword_10008C160);
      swift_storeEnumTagMultiPayload(v87, v88, 0);
      v89 = sub_10001CDDC(v84, v86, type metadata accessor for SuggestedDestinationEntryContent);
      static BlurReplaceTransition.Configuration.downUp.getter(v89);
      v91 = v186;
      v90 = v187;
      (*(void (**)(char *, char *, uint64_t))(v186 + 16))(v33, v35, v187);
      BlurReplaceTransition.init(configuration:)(v33);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v35, v90);
      v92 = v188;
      v93 = v189;
      v94 = v190;
      (*(void (**)(char *, char *, uint64_t))(v189 + 16))(v188, v40, v190);
      v95 = sub_10001B41C(&qword_10008D018, (uint64_t (*)(uint64_t))&type metadata accessor for BlurReplaceTransition, (uint64_t)&protocol conformance descriptor for BlurReplaceTransition);
      v96 = AnyTransition.init<A>(_:)(v92, v94, v95);
      v97 = v163;
      sub_10001B33C(v86, v163, type metadata accessor for SuggestedDestinationWidgetView);
      v98 = v176;
      *(_QWORD *)(v97 + *(int *)(v176 + 36)) = v96;
      (*(void (**)(char *, uint64_t))(v93 + 8))(v40, v94);
      sub_10001B54C(v86, type metadata accessor for SuggestedDestinationWidgetView);
      v99 = v97;
      v100 = v168;
      sub_10001565C(v99, v168, &qword_10008CFF0);
      v101 = v174;
      sub_100016550(v100, v174, &qword_10008CFF0);
      swift_storeEnumTagMultiPayload(v101, v173, 1);
      v102 = sub_100032760();
      sub_1000327E4();
      v103 = (uint64_t)v175;
      _ConditionalContent<>.init(storage:)(v101, v172, v98, v102);
      v104 = v193;
      sub_100016550(v103, v193, &qword_10008D008);
      swift_storeEnumTagMultiPayload(v104, v191, 0);
      v105 = sub_10003273C();
      sub_100032868();
      _ConditionalContent<>.init(storage:)(v104, v192, v194, v105);
      sub_100015590(v103, &qword_10008D008);
      sub_100015590(v100, &qword_10008CFF0);
      v106 = v83;
      v107 = type metadata accessor for SuggestedDestinationEntryContent;
    }
    else
    {
      v131 = v170;
      sub_10001CDDC((uint64_t)v57, v170, type metadata accessor for NavigationETAEntryContent);
      v132 = v162;
      sub_10001B33C(v131, v162, type metadata accessor for NavigationETAEntryContent);
      v133 = swift_getKeyPath(&unk_10006AD88);
      v134 = (uint64_t)v169;
      v135 = (uint64_t *)&v169[*(int *)(v164 + 20)];
      *v135 = v133;
      v136 = sub_1000027AC(&qword_10008C160);
      swift_storeEnumTagMultiPayload(v135, v136, 0);
      v137 = sub_10001CDDC(v132, v134, type metadata accessor for NavigationETAEntryContent);
      static BlurReplaceTransition.Configuration.downUp.getter(v137);
      v139 = v186;
      v138 = v187;
      (*(void (**)(char *, char *, uint64_t))(v186 + 16))(v33, v35, v187);
      BlurReplaceTransition.init(configuration:)(v33);
      (*(void (**)(char *, uint64_t))(v139 + 8))(v35, v138);
      v140 = v188;
      v141 = v189;
      v142 = v190;
      (*(void (**)(char *, char *, uint64_t))(v189 + 16))(v188, v40, v190);
      v143 = sub_10001B41C(&qword_10008D018, (uint64_t (*)(uint64_t))&type metadata accessor for BlurReplaceTransition, (uint64_t)&protocol conformance descriptor for BlurReplaceTransition);
      v144 = AnyTransition.init<A>(_:)(v140, v142, v143);
      v145 = v167;
      sub_10001B33C(v134, v167, type metadata accessor for NavigationETAWidgetView);
      v146 = v180;
      *(_QWORD *)(v145 + *(int *)(v180 + 36)) = v144;
      (*(void (**)(char *, uint64_t))(v141 + 8))(v40, v142);
      sub_10001B54C(v134, type metadata accessor for NavigationETAWidgetView);
      v147 = v145;
      v148 = v171;
      sub_10001565C(v147, v171, &qword_10008CFE8);
      v149 = v182;
      sub_100016550(v148, v182, &qword_10008CFE8);
      swift_storeEnumTagMultiPayload(v149, v181, 0);
      v150 = sub_1000325E8();
      sub_1000326B8();
      v151 = (uint64_t)v184;
      _ConditionalContent<>.init(storage:)(v149, v146, v183, v150);
      v152 = v193;
      sub_100016550(v151, v193, &qword_10008CFE0);
      swift_storeEnumTagMultiPayload(v152, v191, 1);
      v153 = sub_10003273C();
      sub_100032868();
      _ConditionalContent<>.init(storage:)(v152, v192, v194, v153);
      sub_100015590(v151, &qword_10008CFE0);
      sub_100015590(v148, &qword_10008CFE8);
      v106 = v131;
      v107 = type metadata accessor for NavigationETAEntryContent;
    }
  }
  else
  {
    v108 = v158;
    sub_10001CDDC((uint64_t)v57, v158, type metadata accessor for NearbyEntryContent);
    sub_10001B33C(v108, (uint64_t)v49, type metadata accessor for NearbyEntryContent);
    v109 = swift_getKeyPath(&unk_10006AD88);
    v110 = *(int *)(v41 + 20);
    v111 = (uint64_t)v157;
    v112 = &v157[v110];
    *(_QWORD *)&v157[v110] = v109;
    v113 = sub_1000027AC(&qword_10008C160);
    swift_storeEnumTagMultiPayload(v112, v113, 0);
    v114 = sub_10001CDDC((uint64_t)v49, v111, type metadata accessor for NearbyEntryContent);
    static BlurReplaceTransition.Configuration.downUp.getter(v114);
    v116 = v186;
    v115 = v187;
    (*(void (**)(char *, char *, uint64_t))(v186 + 16))(v33, v35, v187);
    BlurReplaceTransition.init(configuration:)(v33);
    (*(void (**)(char *, uint64_t))(v116 + 8))(v35, v115);
    v117 = v188;
    v118 = v189;
    v119 = v190;
    (*(void (**)(char *, char *, uint64_t))(v189 + 16))(v188, v40, v190);
    v120 = sub_10001B41C(&qword_10008D018, (uint64_t (*)(uint64_t))&type metadata accessor for BlurReplaceTransition, (uint64_t)&protocol conformance descriptor for BlurReplaceTransition);
    v121 = AnyTransition.init<A>(_:)(v117, v119, v120);
    v122 = v156;
    sub_10001B33C(v111, v156, type metadata accessor for NearbyWidgetView);
    v123 = v172;
    *(_QWORD *)(v122 + *(int *)(v172 + 36)) = v121;
    (*(void (**)(char *, uint64_t))(v118 + 8))(v40, v119);
    sub_10001B54C(v111, type metadata accessor for NearbyWidgetView);
    v124 = v122;
    v125 = v159;
    sub_10001565C(v124, v159, &qword_10008D010);
    v126 = v174;
    sub_100016550(v125, v174, &qword_10008D010);
    swift_storeEnumTagMultiPayload(v126, v173, 0);
    v127 = sub_100032760();
    sub_1000327E4();
    v128 = (uint64_t)v175;
    _ConditionalContent<>.init(storage:)(v126, v123, v176, v127);
    v129 = v193;
    sub_100016550(v128, v193, &qword_10008D008);
    swift_storeEnumTagMultiPayload(v129, v191, 0);
    v130 = sub_10003273C();
    sub_100032868();
    _ConditionalContent<>.init(storage:)(v129, v192, v194, v130);
    sub_100015590(v128, &qword_10008D008);
    sub_100015590(v125, &qword_10008D010);
    v106 = v108;
    v107 = type metadata accessor for NearbyEntryContent;
  }
  sub_10001B54C(v106, v107);
  return sub_100015590(v62, &qword_10008BB18);
}

unint64_t sub_1000325E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D020;
  if (!qword_10008D020)
  {
    v1 = sub_1000027EC(&qword_10008CFE8);
    sub_10001B41C(&qword_10008D028, type metadata accessor for NavigationETAWidgetView, (uint64_t)&unk_10006B588);
    sub_10003266C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D020);
  }
  return result;
}

unint64_t sub_10003266C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D030;
  if (!qword_10008D030)
  {
    v1 = sub_1000027EC(&qword_10008D038);
    result = swift_getWitnessTable(&protocol conformance descriptor for _TraitWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D030);
  }
  return result;
}

unint64_t sub_1000326B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D040;
  if (!qword_10008D040)
  {
    v1 = sub_1000027EC(&qword_10008CFD0);
    sub_10001B41C(&qword_10008D048, type metadata accessor for PlaceholderView, (uint64_t)&unk_10006ADD4);
    sub_10003266C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D040);
  }
  return result;
}

uint64_t sub_10003273C()
{
  return sub_10003288C(&qword_10008D050, &qword_10008D008, (void (*)(void))sub_100032760, (void (*)(void))sub_1000327E4);
}

unint64_t sub_100032760()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D058;
  if (!qword_10008D058)
  {
    v1 = sub_1000027EC(&qword_10008D010);
    sub_10001B41C(&qword_10008D060, type metadata accessor for NearbyWidgetView, (uint64_t)&unk_10006A4C4);
    sub_10003266C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D058);
  }
  return result;
}

unint64_t sub_1000327E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D068;
  if (!qword_10008D068)
  {
    v1 = sub_1000027EC(&qword_10008CFF0);
    sub_10001B41C(&qword_10008D070, type metadata accessor for SuggestedDestinationWidgetView, (uint64_t)&unk_10006B310);
    sub_10003266C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D068);
  }
  return result;
}

uint64_t sub_100032868()
{
  return sub_10003288C(&qword_10008D078, &qword_10008CFE0, (void (*)(void))sub_1000325E8, (void (*)(void))sub_1000326B8);
}

uint64_t sub_10003288C(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_1000027EC(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000328FC()
{
  return sub_10003288C(&qword_10008D080, &qword_10008D088, (void (*)(void))sub_10003273C, (void (*)(void))sub_100032868);
}

uint64_t *sub_100032930(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1000349B8(a1, a2, a3, &qword_10008C160, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily);
}

uint64_t sub_100032944(_QWORD *a1, uint64_t a2)
{
  return sub_100034A94(a1, a2, &qword_10008C160, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily);
}

uint64_t *sub_100032958(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_100034B0C(a1, a2, a3, &qword_10008C160, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily);
}

uint64_t *sub_10003296C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_100034BBC(a1, a2, a3, &qword_10008C160, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily);
}

void *sub_100032980(void *a1, const void *a2, uint64_t a3)
{
  return sub_100034C84(a1, a2, a3, &qword_10008C160, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily);
}

void *sub_100032994(void *a1, const void *a2, uint64_t a3)
{
  return sub_100034D30(a1, a2, a3, &qword_10008C160, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily);
}

uint64_t sub_1000329A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000329B4);
}

uint64_t sub_1000329B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100034DF8(a1, a2, a3, &qword_10008C168);
}

uint64_t sub_1000329C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000329CC);
}

uint64_t sub_1000329CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100034E4C(a1, a2, a3, a4, &qword_10008C168);
}

uint64_t type metadata accessor for PlaceholderView(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008D0E8, (uint64_t)&nominal type descriptor for PlaceholderView);
}

void sub_1000329EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100034EA0(a1, a2, a3, (unint64_t *)&qword_10008C1D8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
}

uint64_t sub_100032A00(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006CE00, 1);
}

uint64_t sub_100032A10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  char v32;
  double v33;
  uint64_t v34;
  uint64_t v35;

  v29[1] = a1;
  v30 = type metadata accessor for ContainerBackgroundPlacement(0);
  v1 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v3 = (char *)v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000027AC(&qword_10008D1C0);
  __chkstk_darwin(v4);
  v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000027AC(&qword_10008D1C8);
  __chkstk_darwin(v7);
  v9 = (_QWORD *)((char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v9 = static Alignment.center.getter(v10);
  v9[1] = v11;
  v12 = sub_10003474C();
  if ((v13 & 1) != 0)
  {
    v18 = sub_1000027AC(&qword_10008D1D0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v6, 1, 1, v18);
  }
  else
  {
    v14 = v12;
    GeometryProxy.size.getter();
    v31 = v14;
    v32 = 1;
    v33 = v15 * 0.25;
    v16 = sub_100034958();
    v34 = 0;
    v35 = 0;
    View.unredacted()(&type metadata for UserLocationViewLayout, v16);
    v17 = sub_1000027AC(&qword_10008D1D0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v6, 0, 1, v17);
  }
  v19 = sub_1000027AC(&qword_10008D1D8);
  v20 = sub_10001565C((uint64_t)v6, (uint64_t)v9 + *(int *)(v19 + 44), &qword_10008D1C0);
  static ContainerBackgroundPlacement.widget.getter(v20);
  v22 = static Alignment.center.getter(v21);
  v24 = v23;
  v25 = type metadata accessor for PlaceholderBackgroundView(0);
  v26 = sub_10001D82C(&qword_10008D1E0, &qword_10008D1C8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v27 = sub_10001B41C(&qword_10008C8F8, type metadata accessor for PlaceholderBackgroundView, (uint64_t)&unk_10006B088);
  View.containerBackground<A>(for:alignment:content:)(v3, v22, v24, sub_100032C7C, 0, v7, v25, v26, v27);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v30);
  return sub_100015590((uint64_t)v9, &qword_10008D1C8);
}

void sub_100032C80(uint64_t (**a1)@<X0>(uint64_t@<X8>)@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;

  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100014D70(v2, (uint64_t)qword_100090B98);
  v7 = Logger.logObject.getter(v3, v4, v5, v6);
  v11 = static os_log_type_t.debug.getter(v7, v8, v9, v10);
  if (os_log_type_enabled(v7, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v11, "PlaceholderSmallWidgetView: body", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  *a1 = sub_100034748;
  a1[1] = 0;
}

uint64_t sub_100032D5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];

  v27[1] = a1;
  v27[0] = type metadata accessor for ContainerBackgroundPlacement(0);
  v1 = *(_QWORD *)(v27[0] - 8);
  __chkstk_darwin(v27[0]);
  v3 = (char *)v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000027AC(&qword_10008D1F0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)v27 - v8;
  v10 = sub_1000027AC(&qword_10008D1F8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v13 = static HorizontalAlignment.center.getter(v11);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  v14 = sub_1000027AC(&qword_10008D200);
  v15 = &v13[*(int *)(v14 + 44)];
  *(_QWORD *)v9 = static VerticalAlignment.center.getter(v14);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v16 = sub_1000027AC(&qword_10008D208);
  sub_100032FC0(&v9[*(int *)(v16 + 44)]);
  sub_100016550((uint64_t)v9, (uint64_t)v7, &qword_10008D1F0);
  *(_QWORD *)v15 = 0;
  v15[8] = 1;
  *((_QWORD *)v15 + 2) = 0x3FF0000000000000;
  v17 = sub_1000027AC(&qword_10008D210);
  sub_100016550((uint64_t)v7, (uint64_t)&v15[*(int *)(v17 + 48)], &qword_10008D1F0);
  sub_100015590((uint64_t)v9, &qword_10008D1F0);
  v18 = sub_100015590((uint64_t)v7, &qword_10008D1F0);
  static ContainerBackgroundPlacement.widget.getter(v18);
  v20 = static Alignment.center.getter(v19);
  v22 = v21;
  v23 = type metadata accessor for PlaceholderBackgroundView(0);
  v24 = sub_10001D82C(&qword_10008D218, &qword_10008D1F8, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v25 = sub_10001B41C(&qword_10008C8F8, type metadata accessor for PlaceholderBackgroundView, (uint64_t)&unk_10006B088);
  View.containerBackground<A>(for:alignment:content:)(v3, v20, v22, sub_100032C7C, 0, v10, v23, v24, v25);
  (*(void (**)(char *, _QWORD))(v1 + 8))(v3, v27[0]);
  return sub_100015590((uint64_t)v13, &qword_10008D1F8);
}

uint64_t sub_100032FC0@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;

  v2 = sub_1000027AC(&qword_10008D220);
  v3 = __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v7 = (char *)&v29 - v6;
  v8 = sub_1000027AC(&qword_10008D228);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v29 - v13;
  if (qword_10008B970 != -1)
    swift_once(&qword_10008B970, sub_1000182D4);
  v15 = qword_100090B30;
  *v5 = swift_getKeyPath(&unk_10006AF80);
  v16 = sub_1000027AC(&qword_10008C488);
  v17 = swift_storeEnumTagMultiPayload(v5, v16, 0);
  *(_QWORD *)((char *)v5 + *(int *)(v2 + 36)) = v15;
  v18 = (char *)v5 + *(int *)(v2 + 40);
  *(_QWORD *)v18 = static HorizontalAlignment.center.getter(v17);
  *((_QWORD *)v18 + 1) = 0;
  v18[16] = 1;
  v19 = sub_1000027AC(&qword_10008D230);
  v20 = *(int *)(v19 + 44);
  if (qword_10008B980 != -1)
    v19 = swift_once(&qword_10008B980, sub_1000182F4);
  v21 = &v18[v20];
  v22 = qword_100090B40;
  *(_QWORD *)v21 = static VerticalAlignment.center.getter(v19);
  *((_QWORD *)v21 + 1) = v22;
  v21[16] = 0;
  v23 = sub_1000027AC(&qword_10008D238);
  sub_100033268((uint64_t)&v21[*(int *)(v23 + 44)]);
  sub_10001565C((uint64_t)v5, (uint64_t)v7, &qword_10008D220);
  v24 = sub_10001D82C(&qword_10008D240, &qword_10008D220, (uint64_t)&unk_10006AB10);
  View.unredacted()(v2, v24);
  sub_100015590((uint64_t)v7, &qword_10008D220);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v12, v8);
  v25 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v25(v12, v14, v8);
  v25(a1, v12, v8);
  v26 = &a1[*(int *)(sub_1000027AC(&qword_10008D248) + 48)];
  *(_QWORD *)v26 = 0;
  v26[8] = 1;
  *((_QWORD *)v26 + 2) = 0x3FF0000000000000;
  v27 = *(void (**)(char *, uint64_t))(v9 + 8);
  v27(v14, v8);
  return ((uint64_t (*)(char *, uint64_t))v27)(v12, v8);
}

uint64_t sub_100033268@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[3];

  v36 = a1;
  v1 = sub_1000027AC(&qword_10008C6D8);
  __chkstk_darwin(v1);
  v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Image.ResizingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_1000027AC(&qword_10008C6E8);
  v33 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_1000027AC(&qword_10008C6F0);
  __chkstk_darwin(v34);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000027AC(&qword_10008C708);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v33 - v16;
  if (qword_10008B988 != -1)
    swift_once(&qword_10008B988, sub_10001E12C);
  v18 = Image.init(uiImage:)((id)qword_100090B48);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
  v19 = Image.resizable(capInsets:resizingMode:)(v7, v18, 0.0, 0.0, 0.0, 0.0);
  swift_release(v18);
  v20 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  static WidgetAccentedRenderingMode.desaturated.getter(v20);
  v21 = type metadata accessor for WidgetAccentedRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v3, 0, 1, v21);
  Image.widgetAccentedRenderingMode(_:)(v3, v19);
  swift_release(v19);
  sub_100015590((uint64_t)v3, &qword_10008C6D8);
  if (qword_10008B978 != -1)
    swift_once(&qword_10008B978, sub_1000182E4);
  v23 = qword_100090B38;
  v24 = static Alignment.center.getter(v22);
  _FrameLayout.init(width:height:alignment:)(v37, v23, 0, v23, 0, v24, v25);
  v26 = v33;
  v27 = v35;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v11, v9, v35);
  v28 = v34;
  v29 = &v11[*(int *)(v34 + 36)];
  v30 = v37[1];
  *(_OWORD *)v29 = v37[0];
  *((_OWORD *)v29 + 1) = v30;
  *((_OWORD *)v29 + 2) = v37[2];
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v27);
  v31 = sub_10001D8C8();
  View.accessibility(identifier:)(0xD000000000000015, 0x8000000100079CF0, v28, v31);
  sub_100015590((uint64_t)v11, &qword_10008C6F0);
  sub_10001565C((uint64_t)v15, (uint64_t)v17, &qword_10008C708);
  sub_100016550((uint64_t)v17, (uint64_t)v15, &qword_10008C708);
  sub_100016550((uint64_t)v15, v36, &qword_10008C708);
  sub_100015590((uint64_t)v17, &qword_10008C708);
  return sub_100015590((uint64_t)v15, &qword_10008C708);
}

uint64_t sub_100033600@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v2 = sub_1000027AC(&qword_10008D190);
  v3 = __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v7 = (char *)&v25 - v6;
  v8 = sub_1000027AC(&qword_10008D198);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v25 - v13;
  if (qword_10008B970 != -1)
    swift_once(&qword_10008B970, sub_1000182D4);
  v15 = qword_100090B30;
  *v5 = swift_getKeyPath(&unk_10006AF80);
  v16 = sub_1000027AC(&qword_10008C488);
  v17 = swift_storeEnumTagMultiPayload(v5, v16, 0);
  *(_QWORD *)((char *)v5 + *(int *)(v2 + 36)) = v15;
  v18 = (char *)v5 + *(int *)(v2 + 40);
  *(_QWORD *)v18 = static VerticalAlignment.center.getter(v17);
  *((_QWORD *)v18 + 1) = 0;
  v18[16] = 1;
  v19 = sub_1000027AC(&qword_10008D1A0);
  sub_100033850((uint64_t)&v18[*(int *)(v19 + 44)]);
  sub_10001565C((uint64_t)v5, (uint64_t)v7, &qword_10008D190);
  v20 = sub_10001D82C(&qword_10008D1A8, &qword_10008D190, (uint64_t)&unk_10006AB10);
  View.unredacted()(v2, v20);
  sub_100015590((uint64_t)v7, &qword_10008D190);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v12, v8);
  v21 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v21(v12, v14, v8);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0x3FF0000000000000;
  v22 = sub_1000027AC(&qword_10008D1B0);
  v21((char *)(a1 + *(int *)(v22 + 48)), v12, v8);
  v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v14, v8);
  return ((uint64_t (*)(char *, uint64_t))v23)(v12, v8);
}

uint64_t sub_100033850@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  _OWORD v54[3];

  v50 = a1;
  v53 = sub_1000027AC(&qword_10008C508);
  v51 = *(_QWORD *)(v53 - 8);
  v1 = __chkstk_darwin(v53);
  v52 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v49 = (char *)&v46 - v3;
  v4 = sub_1000027AC(&qword_10008C6D8);
  __chkstk_darwin(v4);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Image.ResizingMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_1000027AC(&qword_10008C6E8);
  v46 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_1000027AC(&qword_10008C6F0);
  __chkstk_darwin(v47);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000027AC(&qword_10008C708);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v46 - v19;
  if (qword_10008B988 != -1)
    swift_once(&qword_10008B988, sub_10001E12C);
  v21 = Image.init(uiImage:)((id)qword_100090B48);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Image.ResizingMode.stretch(_:), v7);
  v22 = Image.resizable(capInsets:resizingMode:)(v10, v21, 0.0, 0.0, 0.0, 0.0);
  swift_release(v21);
  v23 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  static WidgetAccentedRenderingMode.desaturated.getter(v23);
  v24 = type metadata accessor for WidgetAccentedRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v6, 0, 1, v24);
  Image.widgetAccentedRenderingMode(_:)(v6, v22);
  swift_release(v22);
  sub_100015590((uint64_t)v6, &qword_10008C6D8);
  if (qword_10008B978 != -1)
    swift_once(&qword_10008B978, sub_1000182E4);
  v26 = qword_100090B38;
  v27 = static Alignment.center.getter(v25);
  _FrameLayout.init(width:height:alignment:)(v54, v26, 0, v26, 0, v27, v28);
  v29 = v46;
  v30 = v48;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v14, v12, v48);
  v31 = v47;
  v32 = &v14[*(int *)(v47 + 36)];
  v33 = v54[1];
  *(_OWORD *)v32 = v54[0];
  *((_OWORD *)v32 + 1) = v33;
  *((_OWORD *)v32 + 2) = v54[2];
  (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v30);
  v34 = sub_10001D8C8();
  View.accessibility(identifier:)(0xD000000000000015, 0x8000000100079CF0, v31, v34);
  sub_100015590((uint64_t)v14, &qword_10008C6F0);
  sub_10001565C((uint64_t)v18, (uint64_t)v20, &qword_10008C708);
  v35 = sub_1000027AC(&qword_10008C518);
  v36 = sub_10001D82C(&qword_10008C520, &qword_10008C518, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v37 = v49;
  ForEach<>.init(_:content:)(0, 3, sub_10001A674, 0, v35, v36);
  sub_100016550((uint64_t)v20, (uint64_t)v18, &qword_10008C708);
  v39 = v51;
  v38 = v52;
  v40 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  v41 = v53;
  v40(v52, v37, v53);
  v42 = v50;
  sub_100016550((uint64_t)v18, v50, &qword_10008C708);
  v43 = sub_1000027AC(&qword_10008D1B8);
  v40((char *)(v42 + *(int *)(v43 + 48)), v38, v41);
  v44 = *(void (**)(char *, uint64_t))(v39 + 8);
  v44(v37, v41);
  sub_100015590((uint64_t)v20, &qword_10008C708);
  v44(v38, v41);
  return sub_100015590((uint64_t)v18, &qword_10008C708);
}

uint64_t sub_100033CF8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  *a1 = swift_getKeyPath(&unk_10006AF80);
  v2 = sub_1000027AC(&qword_10008C488);
  return swift_storeEnumTagMultiPayload(a1, v2, 0);
}

uint64_t sub_100033D3C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = type metadata accessor for ContainerBackgroundPlacement(0);
  v0 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000027AC(&qword_10008D178);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v4);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v7 = sub_1000027AC(&qword_10008D180);
  v8 = sub_100033600((uint64_t)&v6[*(int *)(v7 + 44)]);
  static ContainerBackgroundPlacement.widget.getter(v8);
  v10 = static Alignment.center.getter(v9);
  v12 = v11;
  v13 = type metadata accessor for PlaceholderBackgroundView(0);
  v14 = sub_10001D82C(&qword_10008D188, &qword_10008D178, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v15 = sub_10001B41C(&qword_10008C8F8, type metadata accessor for PlaceholderBackgroundView, (uint64_t)&unk_10006B088);
  View.containerBackground<A>(for:alignment:content:)(v2, v10, v12, sub_100032C7C, 0, v3, v13, v14, v15);
  (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v18);
  return sub_100015590((uint64_t)v6, &qword_10008D178);
}

uint64_t sub_100033ED4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void (*v12)(char *, uint64_t);
  __n128 v13;
  uint64_t result;
  uint64_t v15;

  v2 = type metadata accessor for WidgetRenderingMode(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v15 - v7;
  if (qword_10008B9D0 != -1)
    swift_once(&qword_10008B9D0, sub_10002CF24);
  v9 = qword_100090B70;
  v10 = sub_100052310((uint64_t)v8);
  static WidgetRenderingMode.accented.getter(v10);
  v11 = static WidgetRenderingMode.== infix(_:_:)(v8, v6);
  v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v6, v2);
  v12(v8, v2);
  v13.n128_u64[0] = 0x3FA999999999999ALL;
  if ((v11 & 1) == 0)
    v13.n128_f64[0] = 1.0;
  result = Color.opacity(_:)(v9, v13);
  *a1 = result;
  return result;
}

uint64_t sub_100033FEC()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;

  if (qword_10008B998 != -1)
    swift_once(&qword_10008B998, sub_10001E448);
  v0 = qword_100090B60;
  v1 = qword_10008B978;
  v2 = swift_retain(qword_100090B60);
  if (v1 != -1)
    swift_once(&qword_10008B978, sub_1000182E4);
  v3 = qword_100090B38;
  v4 = static Alignment.center.getter(v2);
  _FrameLayout.init(width:height:alignment:)(&v9, v3, 0, v3, 0, v4, v5);
  v6 = sub_1000027AC(&qword_10008D2F0);
  v7 = sub_100035038();
  View.accessibility(identifier:)(0xD000000000000015, 0x8000000100079D10, v6, v7);
  return swift_release(v0);
}

uint64_t sub_100034120@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  uint64_t v26;
  __int16 v27;
  char v28;
  __int16 v29;
  char v30;

  v2 = type metadata accessor for WidgetFamily(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100052074((uint64_t)v5);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for WidgetFamily.systemSmall(_:))
  {
    LOBYTE(v27) = 0;
LABEL_5:
    v7 = sub_100034548();
    sub_10003458C();
    _ConditionalContent<>.init(storage:)(&v27, &type metadata for PlaceholderSmallWidgetView, &type metadata for PlaceholderMediumWidgetView, v7);
    v27 = v29;
    v8 = sub_1000027AC(&qword_10008D128);
    v9 = sub_1000027AC(&qword_10008D130);
    v10 = sub_100034524();
    sub_1000345D0();
    _ConditionalContent<>.init(storage:)(&v27, v8, v9, v10);
    if (HIBYTE(v29))
      v11 = 256;
    else
      v11 = 0;
    v27 = v11 | v29;
    v28 = 0;
    v12 = sub_1000027AC(&qword_10008D158);
    v13 = sub_10003288C(&qword_10008D160, &qword_10008D158, (void (*)(void))sub_100034524, (void (*)(void))sub_1000345D0);
    v14 = v12;
LABEL_14:
    result = _ConditionalContent<>.init(storage:)(&v27, v14, &type metadata for Never, v13);
    v22 = v30;
    *(_WORD *)a1 = v29;
    *(_BYTE *)(a1 + 2) = v22;
    return result;
  }
  if (v6 == enum case for WidgetFamily.systemMedium(_:))
  {
    LOBYTE(v27) = 1;
    goto LABEL_5;
  }
  if (v6 == enum case for WidgetFamily.systemLarge(_:))
  {
    LOBYTE(v27) = 0;
    v15 = sub_1000344E0();
    _ConditionalContent<>.init(storage:)(&v27, &type metadata for PlaceholderLargeWidgetView, &type metadata for Never, v15);
    LOBYTE(v27) = v29;
    HIBYTE(v27) = 1;
    v16 = sub_1000027AC(&qword_10008D128);
    v17 = sub_1000027AC(&qword_10008D130);
    v18 = sub_100034524();
    sub_1000345D0();
    _ConditionalContent<>.init(storage:)(&v27, v16, v17, v18);
    if (HIBYTE(v29))
      v19 = 256;
    else
      v19 = 0;
    v27 = v19 | v29;
    v28 = 0;
    v20 = sub_1000027AC(&qword_10008D158);
    v13 = sub_10003288C(&qword_10008D160, &qword_10008D158, (void (*)(void))sub_100034524, (void (*)(void))sub_1000345D0);
    v14 = v20;
    goto LABEL_14;
  }
  if (v6 == enum case for WidgetFamily.systemExtraLarge(_:)
    || v6 == enum case for WidgetFamily.accessoryCircular(_:)
    || v6 == enum case for WidgetFamily.accessoryRectangular(_:)
    || v6 == enum case for WidgetFamily.accessoryInline(_:))
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, 0x8000000100079690, "GeneralMapsWidget/PlaceholderView.swift", 39, 2, 118, 0);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "GeneralMapsWidget/PlaceholderView.swift", 39, 2, 120, 0);
  }
  __break(1u);
  return result;
}

unint64_t sub_1000344E0()
{
  unint64_t result;

  result = qword_10008D120;
  if (!qword_10008D120)
  {
    result = swift_getWitnessTable(&unk_10006AF2C, &type metadata for PlaceholderLargeWidgetView);
    atomic_store(result, (unint64_t *)&qword_10008D120);
  }
  return result;
}

uint64_t sub_100034524()
{
  return sub_10003288C(&qword_10008D138, &qword_10008D128, (void (*)(void))sub_100034548, (void (*)(void))sub_10003458C);
}

unint64_t sub_100034548()
{
  unint64_t result;

  result = qword_10008D140;
  if (!qword_10008D140)
  {
    result = swift_getWitnessTable(&unk_10006AEDC, &type metadata for PlaceholderSmallWidgetView);
    atomic_store(result, (unint64_t *)&qword_10008D140);
  }
  return result;
}

unint64_t sub_10003458C()
{
  unint64_t result;

  result = qword_10008D148;
  if (!qword_10008D148)
  {
    result = swift_getWitnessTable(&unk_10006AE8C, &type metadata for PlaceholderMediumWidgetView);
    atomic_store(result, (unint64_t *)&qword_10008D148);
  }
  return result;
}

unint64_t sub_1000345D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D150;
  if (!qword_10008D150)
  {
    v1 = sub_1000027EC(&qword_10008D130);
    sub_1000344E0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D150);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaceholderLargeWidgetView()
{
  return &type metadata for PlaceholderLargeWidgetView;
}

ValueMetadata *type metadata accessor for PlaceholderMediumWidgetView()
{
  return &type metadata for PlaceholderMediumWidgetView;
}

ValueMetadata *type metadata accessor for PlaceholderSmallWidgetView()
{
  return &type metadata for PlaceholderSmallWidgetView;
}

unint64_t sub_100034670()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D168;
  if (!qword_10008D168)
  {
    v1 = sub_1000027EC(&qword_10008D170);
    sub_10003288C(&qword_10008D160, &qword_10008D158, (void (*)(void))sub_100034524, (void (*)(void))sub_1000345D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D168);
  }
  return result;
}

uint64_t sub_1000346FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006CEBC, 1);
}

uint64_t sub_10003470C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006CE94, 1);
}

uint64_t sub_10003471C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006CE6C, 1);
}

uint64_t type metadata accessor for PlaceholderBackgroundView(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008D2A8, (uint64_t)&nominal type descriptor for PlaceholderBackgroundView);
}

uint64_t sub_10003474C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  char v24[8];

  if (qword_10008B9F8 != -1)
    swift_once(&qword_10008B9F8, sub_1000394FC);
  v0 = qword_100090BB0;
  KeyPath = swift_getKeyPath(&unk_10006AFB0);
  v2 = swift_getKeyPath(&unk_10006AFD8);
  static Published.subscript.getter(&v23, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  v3 = v23;
  v4 = v24[0];
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100014D70(v5, (uint64_t)qword_100090B98);
  v10 = Logger.logObject.getter(v6, v7, v8, v9);
  v14 = static os_log_type_t.debug.getter(v10, v11, v12, v13);
  if (os_log_type_enabled(v10, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v22 = v16;
    v23 = v3;
    *(_DWORD *)v15 = 136446210;
    v24[0] = v4;
    v17 = sub_1000027AC(&qword_10008D5E0);
    v18 = String.init<A>(reflecting:)(&v23, v17);
    v20 = v19;
    v23 = sub_1000523F0(v18, v19, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v15 + 4);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v10, v14, "PlaceholderSmallWidgetView: locationAccuracyAuthorization %{public}s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }

  return v3;
}

unint64_t sub_100034958()
{
  unint64_t result;

  result = qword_10008D1E8;
  if (!qword_10008D1E8)
  {
    result = swift_getWitnessTable(&unk_10006BA98, &type metadata for UserLocationViewLayout);
    atomic_store(result, (unint64_t *)&qword_10008D1E8);
  }
  return result;
}

uint64_t *sub_1000349A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1000349B8(a1, a2, a3, &qword_10008C488, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode);
}

uint64_t *sub_1000349B8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_1000027AC(a4);
  v9 = *(_DWORD *)(*(_QWORD *)(v8 - 8) + 80);
  if ((v9 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v9 + 16) & ~(unint64_t)v9));
    swift_retain(v15);
  }
  else
  {
    v10 = v8;
    if (swift_getEnumCaseMultiPayload(a2, v8) == 1)
    {
      v11 = a5(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = a1;
      v13 = v10;
      v14 = 1;
    }
    else
    {
      v16 = *a2;
      *a1 = *a2;
      swift_retain(v16);
      v12 = a1;
      v13 = v10;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }
  return a1;
}

uint64_t sub_100034A80(_QWORD *a1, uint64_t a2)
{
  return sub_100034A94(a1, a2, &qword_10008C488, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode);
}

uint64_t sub_100034A94(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1000027AC(a3);
  if (swift_getEnumCaseMultiPayload(a1, v6) != 1)
    return swift_release(*a1);
  v7 = a4(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
}

uint64_t *sub_100034AF8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_100034B0C(a1, a2, a3, &qword_10008C488, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode);
}

uint64_t *sub_100034B0C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = sub_1000027AC(a4);
  if (swift_getEnumCaseMultiPayload(a2, v8) == 1)
  {
    v9 = a5(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    v10 = a1;
    v11 = v8;
    v12 = 1;
  }
  else
  {
    v13 = *a2;
    *a1 = *a2;
    swift_retain(v13);
    v10 = a1;
    v11 = v8;
    v12 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v11, v12);
  return a1;
}

uint64_t *sub_100034BA8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_100034BBC(a1, a2, a3, &qword_10008C488, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode);
}

uint64_t *sub_100034BBC(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_100015590((uint64_t)a1, a4);
    v9 = sub_1000027AC(a4);
    if (swift_getEnumCaseMultiPayload(a2, v9) == 1)
    {
      v10 = a5(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = a1;
      v12 = v9;
      v13 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v11 = a1;
      v12 = v9;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }
  return a1;
}

void *sub_100034C70(void *a1, const void *a2, uint64_t a3)
{
  return sub_100034C84(a1, a2, a3, &qword_10008C488, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode);
}

void *sub_100034C84(void *a1, const void *a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;

  v8 = sub_1000027AC(a4);
  if (swift_getEnumCaseMultiPayload(a2, v8) == 1)
  {
    v9 = a5(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    swift_storeEnumTagMultiPayload(a1, v8, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  return a1;
}

void *sub_100034D1C(void *a1, const void *a2, uint64_t a3)
{
  return sub_100034D30(a1, a2, a3, &qword_10008C488, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode);
}

void *sub_100034D30(void *a1, const void *a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_100015590((uint64_t)a1, a4);
    v9 = sub_1000027AC(a4);
    if (swift_getEnumCaseMultiPayload(a2, v9) == 1)
    {
      v10 = a5(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      swift_storeEnumTagMultiPayload(a1, v9, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100034DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100034DEC);
}

uint64_t sub_100034DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100034DF8(a1, a2, a3, &qword_10008C480);
}

uint64_t sub_100034DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = sub_1000027AC(a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t sub_100034E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100034E40);
}

uint64_t sub_100034E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100034E4C(a1, a2, a3, a4, &qword_10008C480);
}

uint64_t sub_100034E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;

  v7 = sub_1000027AC(a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

void sub_100034E8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100034EA0(a1, a2, a3, &qword_10008C888, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
}

void sub_100034EA0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  sub_10001B658(319, a4, a5);
  if (v7 <= 0x3F)
  {
    v8 = *(_QWORD *)(v6 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v8, a1 + 16);
  }
}

ValueMetadata *type metadata accessor for PlaceholderImageIcon()
{
  return &type metadata for PlaceholderImageIcon;
}

uint64_t sub_100034F20(uint64_t a1)
{
  return sub_100034F74(a1, &qword_10008D178, &qword_10008D188);
}

uint64_t sub_100034F34()
{
  return sub_10001D82C(&qword_10008D2E0, &qword_10008D2E8, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
}

uint64_t sub_100034F60(uint64_t a1)
{
  return sub_100034F74(a1, &qword_10008D1F8, &qword_10008D218);
}

uint64_t sub_100034F74(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  _QWORD v6[4];

  v6[0] = sub_1000027EC(a2);
  v6[1] = type metadata accessor for PlaceholderBackgroundView(255);
  v6[2] = sub_10001D82C(a3, a2, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v6[3] = sub_10001B41C(&qword_10008C8F8, type metadata accessor for PlaceholderBackgroundView, (uint64_t)&unk_10006B088);
  return swift_getOpaqueTypeConformance2(v6, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
}

uint64_t sub_100035018(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006CF0C, 1);
}

uint64_t sub_100035028(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006CEE4, 1);
}

unint64_t sub_100035038()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D2F8;
  if (!qword_10008D2F8)
  {
    v1 = sub_1000027EC(&qword_10008D2F0);
    sub_10001D82C(&qword_10008D300, &qword_10008D308, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D2F8);
  }
  return result;
}

void *sub_1000350BC()
{
  return &protocol witness table for Color;
}

unint64_t sub_1000350CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D310;
  if (!qword_10008D310)
  {
    v1 = sub_1000027EC(&qword_10008D318);
    sub_100035038();
    sub_10001B41C(&qword_10008C6D0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D310);
  }
  return result;
}

uint64_t sub_100035150()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000351D0(v0, qword_100090B98);
  sub_100014D70(v0, (uint64_t)qword_100090B98);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEE007370614D2E65, 0xD000000000000011, 0x8000000100079D30);
}

uint64_t *sub_1000351D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t *sub_100035210(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void *v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_1000027AC(&qword_10008C240);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_1000027AC(&qword_10008C160);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = a3[6];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = *(void **)((char *)a2 + v23);
    if (v26 == (void *)1)
    {
      *(_OWORD *)v24 = *(_OWORD *)v25;
    }
    else
    {
      v27 = (void *)*((_QWORD *)v25 + 1);
      *(_QWORD *)v24 = v26;
      *((_QWORD *)v24 + 1) = v27;
      v28 = v26;
      v29 = v27;
    }
    v30 = *((_QWORD *)v25 + 3);
    *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
    *((_QWORD *)v24 + 3) = v30;
    *((_DWORD *)v24 + 8) = *((_DWORD *)v25 + 8);
    v24[36] = v25[36];
    v31 = *((_QWORD *)v25 + 6);
    *((_QWORD *)v24 + 5) = *((_QWORD *)v25 + 5);
    *((_QWORD *)v24 + 6) = v31;
    v24[56] = v25[56];
    v32 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
    v33 = &v24[v32];
    v34 = &v25[v32];
    v35 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
    v36 = *(_QWORD *)(v35 - 8);
    v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    if (v37(v34, 1, v35))
    {
      v38 = sub_1000027AC(&qword_10008BA68);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      v39 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v33, v34, v39);
      v40 = *(int *)(v35 + 20);
      v41 = &v33[v40];
      v42 = &v34[v40];
      v43 = *(void **)&v34[v40];
      if (v43 == (void *)1)
      {
        *(_OWORD *)v41 = *(_OWORD *)v42;
      }
      else
      {
        v44 = (void *)*((_QWORD *)v42 + 1);
        *(_QWORD *)v41 = v43;
        *((_QWORD *)v41 + 1) = v44;
        v45 = v43;
        v46 = v44;
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
    v47 = a3[7];
    v48 = (uint64_t *)((char *)a1 + v47);
    v49 = (uint64_t *)((char *)a2 + v47);
    v50 = v49[1];
    *v48 = *v49;
    v48[1] = v50;
    swift_bridgeObjectRetain(v50);
  }
  return a1;
}

uint64_t sub_1000354C0(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;

  v4 = sub_1000027AC(&qword_10008C240);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_1000027AC(&qword_10008C160);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (id *)((char *)a1 + a2[6]);
  if (*v9 != (id)1)
  {

  }
  swift_bridgeObjectRelease(v9[3]);
  swift_bridgeObjectRelease(v9[6]);
  v10 = (char *)v9 + *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v11 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    v12 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
    v13 = (id *)&v10[*(int *)(v11 + 20)];
    if (*v13 != (id)1)
    {

    }
  }
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[7] + 8));
}

uint64_t *sub_100035630(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;

  v6 = sub_1000027AC(&qword_10008C240);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = sub_1000027AC(&qword_10008C160);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(void **)((char *)a2 + v21);
  if (v24 == (void *)1)
  {
    *(_OWORD *)v22 = *(_OWORD *)v23;
  }
  else
  {
    v25 = (void *)*((_QWORD *)v23 + 1);
    *(_QWORD *)v22 = v24;
    *((_QWORD *)v22 + 1) = v25;
    v26 = v24;
    v27 = v25;
  }
  v28 = *((_QWORD *)v23 + 3);
  *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
  *((_QWORD *)v22 + 3) = v28;
  *((_DWORD *)v22 + 8) = *((_DWORD *)v23 + 8);
  v22[36] = v23[36];
  v29 = *((_QWORD *)v23 + 6);
  *((_QWORD *)v22 + 5) = *((_QWORD *)v23 + 5);
  *((_QWORD *)v22 + 6) = v29;
  v22[56] = v23[56];
  v30 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v31 = &v22[v30];
  v32 = &v23[v30];
  v33 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  if (v35(v32, 1, v33))
  {
    v36 = sub_1000027AC(&qword_10008BA68);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    v37 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v31, v32, v37);
    v38 = *(int *)(v33 + 20);
    v39 = &v31[v38];
    v40 = &v32[v38];
    v41 = *(void **)&v32[v38];
    if (v41 == (void *)1)
    {
      *(_OWORD *)v39 = *(_OWORD *)v40;
    }
    else
    {
      v42 = (void *)*((_QWORD *)v40 + 1);
      *(_QWORD *)v39 = v41;
      *((_QWORD *)v39 + 1) = v42;
      v43 = v41;
      v44 = v42;
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  v45 = a3[7];
  v46 = (uint64_t *)((char *)a1 + v45);
  v47 = (uint64_t *)((char *)a2 + v45);
  v48 = v47[1];
  *v46 = *v47;
  v46[1] = v48;
  swift_bridgeObjectRetain(v48);
  return a1;
}

uint64_t *sub_1000358B4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  id v56;
  void *v57;
  void *v58;
  id v59;
  id v60;
  void *v61;
  id v62;
  id v63;
  id v64;
  void *v65;
  void *v66;
  id v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;

  if (a1 != a2)
  {
    sub_100015590((uint64_t)a1, &qword_10008C240);
    v6 = sub_1000027AC(&qword_10008C240);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_100015590((uint64_t)a1 + v12, &qword_10008C160);
    v15 = sub_1000027AC(&qword_10008C160);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(void **)((char *)a1 + v21);
  v25 = *(void **)((char *)a2 + v21);
  if (v24 == (void *)1)
  {
    if (v25 != (void *)1)
    {
      *(_QWORD *)v22 = v25;
      v26 = (void *)*((_QWORD *)v23 + 1);
      *((_QWORD *)v22 + 1) = v26;
      v27 = v25;
      v28 = v26;
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  if (v25 == (void *)1)
  {
    sub_100016DF4((id *)v22);
LABEL_14:
    *(_OWORD *)v22 = *(_OWORD *)v23;
    goto LABEL_16;
  }
  *(_QWORD *)v22 = v25;
  v29 = v25;

  v30 = (void *)*((_QWORD *)v22 + 1);
  v31 = (void *)*((_QWORD *)v23 + 1);
  *((_QWORD *)v22 + 1) = v31;
  v32 = v31;

LABEL_16:
  *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
  v33 = *((_QWORD *)v23 + 3);
  v34 = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 3) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  v35 = *((_DWORD *)v23 + 8);
  v22[36] = v23[36];
  *((_DWORD *)v22 + 8) = v35;
  *((_QWORD *)v22 + 5) = *((_QWORD *)v23 + 5);
  v36 = *((_QWORD *)v23 + 6);
  v37 = *((_QWORD *)v22 + 6);
  *((_QWORD *)v22 + 6) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  v22[56] = v23[56];
  v38 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v39 = &v22[v38];
  v40 = &v23[v38];
  v41 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
  v44 = v43(v39, 1, v41);
  v45 = v43(v40, 1, v41);
  if (!v44)
  {
    if (!v45)
    {
      v52 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 24))(v39, v40, v52);
      v53 = *(int *)(v41 + 20);
      v54 = &v39[v53];
      v55 = &v40[v53];
      v56 = *(id *)v54;
      v57 = *(void **)v55;
      if (*(_QWORD *)v54 == 1)
      {
        if (v57 != (void *)1)
        {
          *(_QWORD *)v54 = v57;
          v58 = (void *)*((_QWORD *)v55 + 1);
          *((_QWORD *)v54 + 1) = v58;
          v59 = v57;
          v60 = v58;
          goto LABEL_32;
        }
      }
      else
      {
        if (v57 != (void *)1)
        {
          *(_QWORD *)v54 = v57;
          v64 = v57;

          v65 = (void *)*((_QWORD *)v54 + 1);
          v66 = (void *)*((_QWORD *)v55 + 1);
          *((_QWORD *)v54 + 1) = v66;
          v67 = v66;

          goto LABEL_32;
        }
        sub_100016DF4((id *)v54);
      }
      *(_OWORD *)v54 = *(_OWORD *)v55;
      goto LABEL_32;
    }
    sub_10001B54C((uint64_t)v39, type metadata accessor for NavigationETAEntryContent.ResolvedContent);
    goto LABEL_22;
  }
  if (v45)
  {
LABEL_22:
    v51 = sub_1000027AC(&qword_10008BA68);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    goto LABEL_32;
  }
  v46 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v39, v40, v46);
  v47 = *(int *)(v41 + 20);
  v48 = &v39[v47];
  v49 = &v40[v47];
  v50 = *(void **)&v40[v47];
  if (v50 == (void *)1)
  {
    *(_OWORD *)v48 = *(_OWORD *)v49;
  }
  else
  {
    *(_QWORD *)v48 = v50;
    v61 = (void *)*((_QWORD *)v49 + 1);
    *((_QWORD *)v48 + 1) = v61;
    v62 = v50;
    v63 = v61;
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
LABEL_32:
  v68 = a3[7];
  v69 = (uint64_t *)((char *)a1 + v68);
  v70 = (uint64_t *)((char *)a2 + v68);
  *v69 = *v70;
  v71 = v70[1];
  v72 = v69[1];
  v69[1] = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  return a1;
}

char *sub_100035CA4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = sub_1000027AC(&qword_10008C240);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_1000027AC(&qword_10008C160);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(_OWORD *)&a2[v13 + 16];
  *(_OWORD *)v14 = *(_OWORD *)&a2[v13];
  *((_OWORD *)v14 + 1) = v16;
  *((_DWORD *)v14 + 8) = *(_DWORD *)&a2[v13 + 32];
  v14[36] = a2[v13 + 36];
  *(_OWORD *)(v14 + 40) = *(_OWORD *)&a2[v13 + 40];
  v14[56] = a2[v13 + 56];
  v17 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v18 = &v14[v17];
  v19 = &v15[v17];
  v20 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = sub_1000027AC(&qword_10008BA68);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v23 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v18, v19, v23);
    *(_OWORD *)&v18[*(int *)(v20 + 20)] = *(_OWORD *)&v19[*(int *)(v20 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  return a1;
}

char *sub_100035EAC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  char *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  id v43;
  void *v44;

  if (a1 != a2)
  {
    sub_100015590((uint64_t)a1, &qword_10008C240);
    v6 = sub_1000027AC(&qword_10008C240);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100015590((uint64_t)&a1[v8], &qword_10008C160);
    v11 = sub_1000027AC(&qword_10008C160);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[6];
  v14 = (id *)&a1[v13];
  v15 = &a2[v13];
  v16 = *(void **)&a1[v13];
  if (v16 == (void *)1)
    goto LABEL_11;
  if (*(_QWORD *)v15 == 1)
  {
    sub_100016DF4(v14);
LABEL_11:
    *(_OWORD *)v14 = *(_OWORD *)v15;
    goto LABEL_13;
  }
  *v14 = *(id *)v15;

  v17 = v14[1];
  v14[1] = (id)*((_QWORD *)v15 + 1);

LABEL_13:
  v18 = (void *)*((_QWORD *)v15 + 3);
  v19 = v14[3];
  v14[2] = (id)*((_QWORD *)v15 + 2);
  v14[3] = v18;
  swift_bridgeObjectRelease(v19);
  *((_DWORD *)v14 + 8) = *((_DWORD *)v15 + 8);
  *((_BYTE *)v14 + 36) = v15[36];
  v20 = (void *)*((_QWORD *)v15 + 6);
  v21 = v14[6];
  v14[5] = (id)*((_QWORD *)v15 + 5);
  v14[6] = v20;
  swift_bridgeObjectRelease(v21);
  *((_BYTE *)v14 + 56) = v15[56];
  v22 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v23 = (char *)v14 + v22;
  v24 = &v15[v22];
  v25 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (v28)
  {
    if (!v29)
    {
      v30 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v23, v24, v30);
      *(_OWORD *)&v23[*(int *)(v25 + 20)] = *(_OWORD *)&v24[*(int *)(v25 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      goto LABEL_19;
    }
LABEL_18:
    v31 = sub_1000027AC(&qword_10008BA68);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_19;
  }
  if (v29)
  {
    sub_10001B54C((uint64_t)v23, type metadata accessor for NavigationETAEntryContent.ResolvedContent);
    goto LABEL_18;
  }
  v39 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 40))(v23, v24, v39);
  v40 = *(int *)(v25 + 20);
  v41 = &v23[v40];
  v42 = &v24[v40];
  v43 = *(id *)v41;
  if (*(_QWORD *)v41 != 1)
  {
    if (*(_QWORD *)v42 != 1)
    {
      *(_QWORD *)v41 = *(_QWORD *)v42;

      v44 = (void *)*((_QWORD *)v41 + 1);
      *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);

      goto LABEL_19;
    }
    sub_100016DF4((id *)v41);
  }
  *(_OWORD *)v41 = *(_OWORD *)v42;
LABEL_19:
  v32 = a3[7];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v36 = *(_QWORD *)v34;
  v35 = *((_QWORD *)v34 + 1);
  v37 = *((_QWORD *)v33 + 1);
  *(_QWORD *)v33 = v36;
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRelease(v37);
  return a1;
}

uint64_t sub_1000361E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000361F4);
}

uint64_t sub_1000361F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  v6 = sub_1000027AC(&qword_10008C278);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1000027AC(&qword_10008C168);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = type metadata accessor for NavigationETAEntryContent(0);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[7] + 8);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  return (v16 + 1);
}

uint64_t sub_1000362CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000362D8);
}

uint64_t sub_1000362D8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = sub_1000027AC(&qword_10008C278);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_1000027AC(&qword_10008C168);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for NavigationETAEntryContent(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[6];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[7] + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for NavigationETAMediumLargePlatterContent(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008D378, (uint64_t)&nominal type descriptor for NavigationETAMediumLargePlatterContent);
}

void sub_1000363C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  sub_10001B658(319, (unint64_t *)&unk_10008C2E8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001B658(319, (unint64_t *)&qword_10008C1D8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for NavigationETAEntryContent(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        v8[3] = &unk_10006B108;
        swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
      }
    }
  }
}

char *sub_100036488(char *a1, char **a2, uint64_t a3)
{
  char *v4;
  int v5;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = &v8[(v5 + 16) & ~(unint64_t)v5];
    swift_retain(v8);
  }
  else
  {
    v7 = *a2;
    if (*a2 == (char *)1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      v9 = a2[1];
      *(_QWORD *)a1 = v7;
      *((_QWORD *)a1 + 1) = v9;
      v10 = v7;
      v11 = v9;
    }
    v12 = a2[3];
    *((_QWORD *)v4 + 2) = a2[2];
    *((_QWORD *)v4 + 3) = v12;
    *((_DWORD *)v4 + 8) = *((_DWORD *)a2 + 8);
    v4[36] = *((_BYTE *)a2 + 36);
    v13 = a2[6];
    *((_QWORD *)v4 + 5) = a2[5];
    *((_QWORD *)v4 + 6) = v13;
    v4[56] = *((_BYTE *)a2 + 56);
    v14 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
    v15 = &v4[v14];
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    if (v19(v16, 1, v17))
    {
      v20 = sub_1000027AC(&qword_10008BA68);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v21 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v15, v16, v21);
      v22 = *(int *)(v17 + 20);
      v23 = &v15[v22];
      v24 = &v16[v22];
      v25 = *(void **)&v16[v22];
      if (v25 == (void *)1)
      {
        *(_OWORD *)v23 = *(_OWORD *)v24;
      }
      else
      {
        v26 = (void *)*((_QWORD *)v24 + 1);
        *(_QWORD *)v23 = v25;
        *((_QWORD *)v23 + 1) = v26;
        v27 = v25;
        v28 = v26;
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v29 = *(int *)(a3 + 20);
    v30 = &v4[v29];
    v31 = (char **)((char *)a2 + v29);
    v32 = v31[1];
    *(_QWORD *)v30 = *v31;
    *((_QWORD *)v30 + 1) = v32;
    swift_bridgeObjectRetain(v32);
  }
  return v4;
}

uint64_t sub_100036640(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;

  if (*(_QWORD *)a1 != 1)
  {

  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  v4 = a1 + *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v5 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
    v7 = (id *)(v4 + *(int *)(v5 + 20));
    if (*v7 != (id)1)
    {

    }
  }
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_100036710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;

  v6 = *(void **)a2;
  if (*(_QWORD *)a2 == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v7 = *(void **)(a2 + 8);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = v6;
    v9 = v7;
  }
  v10 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v12 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  if (v17(v14, 1, v15))
  {
    v18 = sub_1000027AC(&qword_10008BA68);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v13, v14, v19);
    v20 = *(int *)(v15 + 20);
    v21 = &v13[v20];
    v22 = &v14[v20];
    v23 = *(void **)&v14[v20];
    if (v23 == (void *)1)
    {
      *(_OWORD *)v21 = *(_OWORD *)v22;
    }
    else
    {
      v24 = (void *)*((_QWORD *)v22 + 1);
      *(_QWORD *)v21 = v23;
      *((_QWORD *)v21 + 1) = v24;
      v25 = v23;
      v26 = v24;
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v27 = *(int *)(a3 + 20);
  v28 = (_QWORD *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  return a1;
}

uint64_t sub_10003689C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  id v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;

  v6 = *(id *)a1;
  v7 = *(void **)a2;
  if (*(_QWORD *)a1 == 1)
  {
    if (v7 != (void *)1)
    {
      *(_QWORD *)a1 = v7;
      v8 = *(void **)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v8;
      v9 = v7;
      v10 = v8;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v7 == (void *)1)
  {
    sub_100016DF4((id *)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *(_QWORD *)a1 = v7;
  v11 = v7;

  v12 = *(void **)(a1 + 8);
  v13 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v13;
  v14 = v13;

LABEL_8:
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v18 = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v20 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v21 = (char *)(a1 + v20);
  v22 = (char *)(a2 + v20);
  v23 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      v34 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v21, v22, v34);
      v35 = *(int *)(v23 + 20);
      v36 = &v21[v35];
      v37 = &v22[v35];
      v38 = *(id *)v36;
      v39 = *(void **)v37;
      if (*(_QWORD *)v36 == 1)
      {
        if (v39 != (void *)1)
        {
          *(_QWORD *)v36 = v39;
          v40 = (void *)*((_QWORD *)v37 + 1);
          *((_QWORD *)v36 + 1) = v40;
          v41 = v39;
          v42 = v40;
          goto LABEL_24;
        }
      }
      else
      {
        if (v39 != (void *)1)
        {
          *(_QWORD *)v36 = v39;
          v46 = v39;

          v47 = (void *)*((_QWORD *)v36 + 1);
          v48 = (void *)*((_QWORD *)v37 + 1);
          *((_QWORD *)v36 + 1) = v48;
          v49 = v48;

          goto LABEL_24;
        }
        sub_100016DF4((id *)v36);
      }
      *(_OWORD *)v36 = *(_OWORD *)v37;
      goto LABEL_24;
    }
    sub_10001B54C((uint64_t)v21, type metadata accessor for NavigationETAEntryContent.ResolvedContent);
    goto LABEL_14;
  }
  if (v27)
  {
LABEL_14:
    v33 = sub_1000027AC(&qword_10008BA68);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_24;
  }
  v28 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v21, v22, v28);
  v29 = *(int *)(v23 + 20);
  v30 = &v21[v29];
  v31 = &v22[v29];
  v32 = *(void **)&v22[v29];
  if (v32 == (void *)1)
  {
    *(_OWORD *)v30 = *(_OWORD *)v31;
  }
  else
  {
    *(_QWORD *)v30 = v32;
    v43 = (void *)*((_QWORD *)v31 + 1);
    *((_QWORD *)v30 + 1) = v43;
    v44 = v32;
    v45 = v43;
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
LABEL_24:
  v50 = *(int *)(a3 + 20);
  v51 = (_QWORD *)(a1 + v50);
  v52 = (_QWORD *)(a2 + v50);
  *v51 = *v52;
  v53 = v52[1];
  v54 = v51[1];
  v51[1] = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease(v54);
  return a1;
}

uint64_t sub_100036B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_1000027AC(&qword_10008BA68);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v8, v9, v13);
    *(_OWORD *)&v8[*(int *)(v10 + 20)] = *(_OWORD *)&v9[*(int *)(v10 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100036C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  id v33;
  void *v34;

  v6 = *(id *)a1;
  if (*(_QWORD *)a1 == 1)
    goto LABEL_4;
  if (*(_QWORD *)a2 == 1)
  {
    sub_100016DF4((id *)a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

LABEL_6:
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v12 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      v20 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v13, v14, v20);
      *(_OWORD *)&v13[*(int *)(v15 + 20)] = *(_OWORD *)&v14[*(int *)(v15 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_12;
    }
LABEL_11:
    v21 = sub_1000027AC(&qword_10008BA68);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_12;
  }
  if (v19)
  {
    sub_10001B54C((uint64_t)v13, type metadata accessor for NavigationETAEntryContent.ResolvedContent);
    goto LABEL_11;
  }
  v29 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 40))(v13, v14, v29);
  v30 = *(int *)(v15 + 20);
  v31 = &v13[v30];
  v32 = &v14[v30];
  v33 = *(id *)v31;
  if (*(_QWORD *)v31 != 1)
  {
    if (*(_QWORD *)v32 != 1)
    {
      *(_QWORD *)v31 = *(_QWORD *)v32;

      v34 = (void *)*((_QWORD *)v31 + 1);
      *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);

      goto LABEL_12;
    }
    sub_100016DF4((id *)v31);
  }
  *(_OWORD *)v31 = *(_OWORD *)v32;
LABEL_12:
  v22 = *(int *)(a3 + 20);
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  v27 = v23[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease(v27);
  return a1;
}

uint64_t sub_100036EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100036EB4);
}

uint64_t sub_100036EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for NavigationETAEntryContent(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100036F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100036F40);
}

uint64_t sub_100036F40(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for NavigationETAEntryContent(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for NavigationETASmallPlatterContent(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008D410, (uint64_t)&nominal type descriptor for NavigationETASmallPlatterContent);
}

uint64_t sub_100036FD0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for NavigationETAEntryContent(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10006B108;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100037040(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006CFAC, 1);
}

uint64_t sub_100037050@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v4 = sub_1000027AC(&qword_10008D450);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v22 - v8;
  v10 = sub_1000027AC(&qword_10008D458);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v22 - v15;
  *(_QWORD *)v16 = static VerticalAlignment.center.getter(v14);
  *((_QWORD *)v16 + 1) = 0;
  v16[16] = 1;
  v17 = sub_1000027AC(&qword_10008D470);
  v18 = sub_100037218(a1, (uint64_t)&v16[*(int *)(v17 + 44)]);
  *(_QWORD *)v9 = static VerticalAlignment.center.getter(v18);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v19 = sub_1000027AC(&qword_10008D478);
  sub_1000374B0(a1, (uint64_t)&v9[*(int *)(v19 + 44)]);
  sub_100016550((uint64_t)v16, (uint64_t)v13, &qword_10008D458);
  sub_100016550((uint64_t)v9, (uint64_t)v7, &qword_10008D450);
  sub_100016550((uint64_t)v13, a2, &qword_10008D458);
  v20 = sub_1000027AC(&qword_10008D560);
  sub_100016550((uint64_t)v7, a2 + *(int *)(v20 + 48), &qword_10008D450);
  sub_100015590((uint64_t)v9, &qword_10008D450);
  sub_100015590((uint64_t)v16, &qword_10008D458);
  sub_100015590((uint64_t)v7, &qword_10008D450);
  return sub_100015590((uint64_t)v13, &qword_10008D458);
}

uint64_t sub_100037218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;

  v50 = a2;
  v3 = sub_1000027AC(&qword_10008D4A0);
  v4 = __chkstk_darwin(v3);
  v49 = (uint64_t)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v48 = (char *)&v44 - v6;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v51 = v7;
  v52 = v8;
  v9 = sub_10001D720();
  swift_bridgeObjectRetain(v8);
  v10 = Text.init<A>(_:)(&v51, &type metadata for String, v9);
  v45 = v11;
  v46 = v10;
  v12 = v11;
  v14 = v13;
  v47 = v13;
  v16 = v15 & 1;
  LODWORD(v51) = static HierarchicalShapeStyle.primary.getter();
  v17 = Text.foregroundStyle<A>(_:)(&v51, v10, v12, v16, v14, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  v24 = static Font.subheadline.getter();
  v25 = Text.font(_:)(v24, v17, v19, v23, v21);
  v27 = v26;
  LOBYTE(v9) = v28;
  v30 = v29;
  swift_release(v24);
  LOBYTE(v24) = v9 & 1;
  sub_10001D86C(v17, v19, v23);
  v31 = swift_bridgeObjectRelease(v21);
  v32 = static Font.Weight.bold.getter(v31);
  v33 = Text.fontWeight(_:)(*(_QWORD *)&v32, 0, v25, v27, v9 & 1, v30);
  v35 = v34;
  v37 = v36;
  LOBYTE(v17) = v38 & 1;
  sub_10001D86C(v25, v27, v24);
  swift_bridgeObjectRelease(v30);
  sub_10001D86C(v46, v45, v16);
  swift_bridgeObjectRelease(v47);
  v51 = v33;
  v52 = v35;
  v53 = v17;
  v54 = v37;
  v39 = (uint64_t)v48;
  View.accessibility(identifier:)(0xD00000000000001FLL, 0x8000000100079D80, &type metadata for Text, &protocol witness table for Text);
  sub_10001D86C(v33, v35, v17);
  swift_bridgeObjectRelease(v37);
  v40 = v49;
  sub_100016550(v39, v49, &qword_10008D4A0);
  v41 = v50;
  sub_100016550(v40, v50, &qword_10008D4A0);
  v42 = v41 + *(int *)(sub_1000027AC(&qword_10008D4A8) + 48);
  *(_QWORD *)v42 = 0;
  *(_BYTE *)(v42 + 8) = 1;
  sub_100015590(v39, &qword_10008D4A0);
  return sub_100015590(v40, &qword_10008D4A0);
}

uint64_t sub_1000374B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t OpaqueTypeConformance2;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  char v60;
  uint64_t v61;

  v57 = a2;
  v3 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000027AC(&qword_10008D488);
  v7 = *(_QWORD *)(v6 - 8);
  v55 = v6;
  v56 = v7;
  __chkstk_darwin(v6);
  v51 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000027AC(&qword_10008D490);
  v10 = __chkstk_darwin(v9);
  v54 = (uint64_t)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v52 = (char *)&v48 - v13;
  __chkstk_darwin(v12);
  v53 = (uint64_t)&v48 - v14;
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(4, 1);
  v15._countAndFlagsBits = 541152325;
  v15._object = (void *)0xE400000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v15);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(a1 + 40));
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v16);
  v17 = LocalizedStringKey.init(stringInterpolation:)(v5);
  v18 = Text.init(_:tableName:bundle:comment:)(v17);
  v48 = v19;
  v49 = v18;
  v20 = v19;
  v22 = v21;
  v50 = v21;
  v24 = v23 & 1;
  LODWORD(v58) = static HierarchicalShapeStyle.secondary.getter();
  v25 = Text.foregroundStyle<A>(_:)(&v58, v18, v20, v24, v22, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v27 = v26;
  v29 = v28;
  v31 = v30 & 1;
  v32 = static Font.footnote.getter();
  v33 = Text.font(_:)(v32, v25, v27, v31, v29);
  v35 = v34;
  LOBYTE(v22) = v36;
  v38 = v37;
  swift_release(v32);
  sub_10001D86C(v25, v27, v31);
  swift_bridgeObjectRelease(v29);
  sub_10001D86C(v49, v48, v24);
  swift_bridgeObjectRelease(v50);
  v58 = (void *)v33;
  v59 = (void *)v35;
  v60 = v22 & 1;
  v61 = v38;
  v39 = v51;
  View.widgetAccentable(_:)(1, &type metadata for Text, &protocol witness table for Text);
  sub_10001D86C(v33, v35, v22 & 1);
  swift_bridgeObjectRelease(v38);
  v58 = &type metadata for Text;
  v59 = &protocol witness table for Text;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v58, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
  v41 = (uint64_t)v52;
  v42 = v55;
  View.accessibility(identifier:)(0xD000000000000017, 0x8000000100079D60, v55, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v39, v42);
  v43 = v53;
  sub_10001565C(v41, v53, &qword_10008D490);
  v44 = v54;
  sub_100016550(v43, v54, &qword_10008D490);
  v45 = v57;
  sub_100016550(v44, v57, &qword_10008D490);
  v46 = v45 + *(int *)(sub_1000027AC(&qword_10008D498) + 48);
  *(_QWORD *)v46 = 0;
  *(_BYTE *)(v46 + 8) = 1;
  sub_100015590(v43, &qword_10008D490);
  return sub_100015590(v44, &qword_10008D490);
}

uint64_t sub_100037838@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100039250(a1, 1, &qword_10008D558, (uint64_t (*)(uint64_t))sub_100037050, a2);
}

uint64_t sub_100037850(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006CF84, 1);
}

uint64_t sub_100037860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;

  v4 = sub_1000027AC(&qword_10008D450);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v36 - v8;
  v10 = sub_1000027AC(&qword_10008D458);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v36 - v14;
  v16 = sub_1000027AC(&qword_10008D460);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v36 - v21;
  *(_QWORD *)v22 = static VerticalAlignment.center.getter(v20);
  *((_QWORD *)v22 + 1) = 0;
  v22[16] = 1;
  v23 = sub_1000027AC(&qword_10008D468);
  sub_100037B9C(a1, (uint64_t)&v22[*(int *)(v23 + 44)]);
  v25 = static Alignment.center.getter(v24);
  v27 = _FrameLayout.init(width:height:alignment:)(&v42, 0, 1, 0x4014000000000000, 0, v25, v26);
  v28 = v42;
  v41 = v43;
  v40 = v44;
  v39 = v45;
  v37 = v47;
  v38 = v46;
  *(_QWORD *)v15 = static VerticalAlignment.center.getter(v27);
  *((_QWORD *)v15 + 1) = 0;
  v15[16] = 1;
  v29 = sub_1000027AC(&qword_10008D470);
  v30 = sub_100038BF8(a1, (uint64_t)&v15[*(int *)(v29 + 44)]);
  *(_QWORD *)v9 = static VerticalAlignment.center.getter(v30);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v31 = sub_1000027AC(&qword_10008D478);
  sub_100038EA0(a1, (uint64_t)&v9[*(int *)(v31 + 44)]);
  v36 = v19;
  sub_100016550((uint64_t)v22, (uint64_t)v19, &qword_10008D460);
  sub_100016550((uint64_t)v15, (uint64_t)v13, &qword_10008D458);
  sub_100016550((uint64_t)v9, (uint64_t)v7, &qword_10008D450);
  sub_100016550((uint64_t)v19, a2, &qword_10008D460);
  v32 = (int *)sub_1000027AC(&qword_10008D480);
  v33 = a2 + v32[12];
  *(_QWORD *)v33 = 0;
  *(_BYTE *)(v33 + 8) = 1;
  *(_QWORD *)(v33 + 16) = v28;
  *(_BYTE *)(v33 + 24) = v41;
  *(_QWORD *)(v33 + 32) = v40;
  *(_BYTE *)(v33 + 40) = v39;
  v34 = v37;
  *(_QWORD *)(v33 + 48) = v38;
  *(_QWORD *)(v33 + 56) = v34;
  sub_100016550((uint64_t)v13, a2 + v32[16], &qword_10008D458);
  sub_100016550((uint64_t)v7, a2 + v32[20], &qword_10008D450);
  sub_100015590((uint64_t)v9, &qword_10008D450);
  sub_100015590((uint64_t)v15, &qword_10008D458);
  sub_100015590((uint64_t)v22, &qword_10008D460);
  sub_100015590((uint64_t)v7, &qword_10008D450);
  sub_100015590((uint64_t)v13, &qword_10008D458);
  return sub_100015590((uint64_t)v36, &qword_10008D460);
}

uint64_t sub_100037B9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  int v39;
  void (*v40)(char *, uint64_t);
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  __int128 v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  char v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t result;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _OWORD v113[3];

  v4 = sub_1000027AC(&qword_10008D4B0);
  __chkstk_darwin(v4);
  v94 = (uint64_t *)((char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_1000027AC(&qword_10008D4B8);
  v110 = *(_QWORD *)(v6 - 8);
  v111 = v6;
  __chkstk_darwin(v6);
  v93 = (uint64_t)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NavigationETAMediumLargePlatterContent(0);
  __chkstk_darwin(v8);
  v107 = (uint64_t)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000027AC(&qword_10008D4C0);
  v11 = __chkstk_darwin(v10);
  v112 = (uint64_t)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v109 = (char *)&v90 - v13;
  v14 = sub_1000027AC(&qword_10008C6D8);
  __chkstk_darwin(v14);
  v97 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for Image.ResizingMode(0);
  v95 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v17 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_1000027AC(&qword_10008C6E8);
  v100 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v99 = (char *)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_1000027AC(&qword_10008C6F0);
  __chkstk_darwin(v101);
  v102 = (char *)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000027AC(&qword_10008C708);
  v105 = *(_QWORD *)(v20 - 8);
  v106 = v20;
  __chkstk_darwin(v20);
  v98 = (char *)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for ColorScheme(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v90 - v27;
  v29 = sub_1000027AC(&qword_10008D4C8);
  v30 = __chkstk_darwin(v29);
  v108 = (uint64_t)&v90 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v33 = (char *)&v90 - v32;
  v104 = v8;
  v34 = a1 + *(int *)(v8 + 24);
  v35 = *(void **)v34;
  if (*(_QWORD *)v34 == 1)
  {
    v36 = 1;
    v37 = (uint64_t)v109;
  }
  else
  {
    v92 = a2;
    v38 = *(void **)(v34 + 8);
    v91 = a1;
    sub_100052044((uint64_t)v28);
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v26, v28, v22);
    v39 = (*(uint64_t (**)(char *, uint64_t))(v23 + 88))(v26, v22);
    if (v39 != enum case for ColorScheme.light(_:))
    {
      v35 = v38;
      if (v39 != enum case for ColorScheme.dark(_:))
      {
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "GeneralMapsWidget/ColorSchemeSpecificImageSet.swift", 51, 2, 24, 0);
        __break(1u);
        return result;
      }
    }
    v40 = *(void (**)(char *, uint64_t))(v23 + 8);
    v41 = v35;
    v40(v28, v22);
    if (v35)
    {
      v42 = v41;
      v43 = Image.init(uiImage:)(v42);
      v44 = v95;
      v45 = v96;
      (*(void (**)(char *, _QWORD, uint64_t))(v95 + 104))(v17, enum case for Image.ResizingMode.stretch(_:), v96);
      v46 = Image.resizable(capInsets:resizingMode:)(v17, v43, 0.0, 0.0, 0.0, 0.0);
      swift_release(v43);
      v47 = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v17, v45);
      v48 = (uint64_t)v97;
      static WidgetAccentedRenderingMode.desaturated.getter(v47);
      v49 = type metadata accessor for WidgetAccentedRenderingMode(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v48, 0, 1, v49);
      v50 = v99;
      Image.widgetAccentedRenderingMode(_:)(v48, v46);
      swift_release(v46);
      sub_100015590(v48, &qword_10008C6D8);
      v52 = static Alignment.center.getter(v51);
      _FrameLayout.init(width:height:alignment:)(v113, 0x403E000000000000, 0, 0x403E000000000000, 0, v52, v53);
      v54 = v100;
      v56 = (uint64_t)v102;
      v55 = v103;
      (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v102, v50, v103);
      v57 = v101;
      v58 = (_OWORD *)(v56 + *(int *)(v101 + 36));
      v59 = v113[1];
      *v58 = v113[0];
      v58[1] = v59;
      v58[2] = v113[2];
      (*(void (**)(char *, uint64_t))(v54 + 8))(v50, v55);
      v60 = sub_10001D8C8();
      v61 = (uint64_t)v98;
      View.accessibility(identifier:)(0xD00000000000001FLL, 0x8000000100079DA0, v57, v60);

      sub_100015590(v56, &qword_10008C6F0);
      sub_10001565C(v61, (uint64_t)v33, &qword_10008C708);
      v36 = 0;
    }
    else
    {
      v36 = 1;
    }
    a2 = v92;
    v37 = (uint64_t)v109;
    a1 = v91;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v105 + 56))(v33, v36, 1, v106);
  v62 = *(unsigned __int8 *)(v34 + 56);
  v63 = v107;
  sub_1000392AC(a1, v107);
  v64 = v111;
  if (v62 == 1)
  {
    v65 = v63 + *(int *)(v104 + 24);
    v66 = *(_DWORD *)(v65 + 32);
    v67 = *(_BYTE *)(v65 + 36);
    v68 = sub_10001B54C(v63, type metadata accessor for NavigationETAMediumLargePlatterContent);
    v69 = 1;
    if ((v67 & 1) == 0 && !v66)
    {
      v70 = static HorizontalAlignment.center.getter(v68);
      v71 = (uint64_t)v94;
      *v94 = v70;
      *(_QWORD *)(v71 + 8) = 0;
      *(_BYTE *)(v71 + 16) = 1;
      v72 = sub_1000027AC(&qword_10008D4D8);
      v73 = sub_1000383F8(v71 + *(int *)(v72 + 44));
      if (qword_10008B9A0 != -1)
        v73 = swift_once(&qword_10008B9A0, sub_100024624);
      v74 = -*(double *)&qword_100090B68;
      v75 = static Edge.Set.all.getter(v73);
      v76 = EdgeInsets.init(_all:)(v74);
      v78 = v77;
      v80 = v79;
      v82 = v81;
      v83 = v93;
      sub_100016550(v71, v93, &qword_10008D4B0);
      v84 = v83 + *(int *)(v64 + 36);
      *(_BYTE *)v84 = v75;
      *(double *)(v84 + 8) = v76;
      *(_QWORD *)(v84 + 16) = v78;
      *(_QWORD *)(v84 + 24) = v80;
      *(_QWORD *)(v84 + 32) = v82;
      *(_BYTE *)(v84 + 40) = 0;
      sub_100015590(v71, &qword_10008D4B0);
      sub_10001565C(v83, v37, &qword_10008D4B8);
      v69 = 0;
    }
  }
  else
  {
    sub_10001B54C(v63, type metadata accessor for NavigationETAMediumLargePlatterContent);
    v69 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v110 + 56))(v37, v69, 1, v64);
  v85 = v108;
  sub_100016550((uint64_t)v33, v108, &qword_10008D4C8);
  v86 = v112;
  sub_100016550(v37, v112, &qword_10008D4C0);
  sub_100016550(v85, a2, &qword_10008D4C8);
  v87 = sub_1000027AC(&qword_10008D4D0);
  v88 = a2 + *(int *)(v87 + 48);
  *(_QWORD *)v88 = 0;
  *(_BYTE *)(v88 + 8) = 1;
  sub_100016550(v86, a2 + *(int *)(v87 + 64), &qword_10008D4C0);
  sub_100015590(v37, &qword_10008D4C0);
  sub_100015590((uint64_t)v33, &qword_10008D4C8);
  sub_100015590(v86, &qword_10008D4C0);
  return sub_100015590(v85, &qword_10008D4C8);
}

uint64_t sub_1000383F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;

  v42 = a1;
  v1 = type metadata accessor for WidgetFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000027AC(&qword_10008D4E0);
  v41 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_1000027AC(&qword_10008D4E8);
  v11 = __chkstk_darwin(v40);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v38 - v15;
  v17 = __chkstk_darwin(v14);
  v39 = (char *)&v38 - v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v38 - v19;
  type metadata accessor for NavigationETAMediumLargePlatterContent(0);
  sub_100052074((uint64_t)v4);
  sub_10004A924((uint64_t)v4, (uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v21 = sub_1000027AC(&qword_10008D4F0);
  v22 = sub_100023274(&qword_10008D4F8, &qword_10008D4F0, (void (*)(void))sub_1000392F0);
  Link.init(destination:label:)(v7, sub_1000387D4, 0, v21, v22);
  if (qword_10008BA00 != -1)
    swift_once(&qword_10008BA00, sub_100045C88);
  v23._countAndFlagsBits = 0xD000000000000021;
  v44._countAndFlagsBits = 0xD00000000000002FLL;
  v44._object = (void *)0x8000000100079DF0;
  v23._object = (void *)0x8000000100079DC0;
  v24._countAndFlagsBits = 0x5445206572616853;
  v24._object = (void *)0xE900000000000041;
  v43 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)qword_100090BC0, v24, v44);
  v25 = sub_10001D720();
  v26 = Text.init<A>(_:)(&v43, &type metadata for String, v25);
  v28 = v27;
  v30 = v29;
  v32 = v31 & 1;
  v33 = sub_10001D82C(&qword_10008D540, &qword_10008D4E0, (uint64_t)&protocol conformance descriptor for Link<A>);
  View.accessibility(label:)(v26, v28, v32, v30, v8, v33);
  sub_10001D86C(v26, v28, v32);
  swift_bridgeObjectRelease(v30);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v8);
  v34 = (uint64_t)v39;
  ModifiedContent<>.accessibility(identifier:)(0xD00000000000001ELL, 0x8000000100079E20, v40);
  sub_100015590((uint64_t)v16, &qword_10008D4E8);
  sub_10001565C(v34, (uint64_t)v20, &qword_10008D4E8);
  sub_100016550((uint64_t)v20, (uint64_t)v13, &qword_10008D4E8);
  v35 = v42;
  sub_100016550((uint64_t)v13, v42, &qword_10008D4E8);
  v36 = v35 + *(int *)(sub_1000027AC(&qword_10008D548) + 48);
  *(_QWORD *)v36 = 0;
  *(_BYTE *)(v36 + 8) = 1;
  sub_100015590((uint64_t)v20, &qword_10008D4E8);
  return sub_100015590((uint64_t)v13, &qword_10008D4E8);
}

uint64_t sub_1000387D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD v55[3];

  v54 = a1;
  v1 = type metadata accessor for Image.ResizingMode(0);
  v47 = *(_QWORD *)(v1 - 8);
  v48 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000027AC(&qword_10008C6E0);
  __chkstk_darwin(v4);
  v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000027AC(&qword_10008D550);
  v51 = *(_QWORD *)(v7 - 8);
  v52 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_1000027AC(&qword_10008D528);
  __chkstk_darwin(v50);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_1000027AC(&qword_10008D518);
  __chkstk_darwin(v49);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_1000027AC(&qword_10008D508);
  __chkstk_darwin(v53);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = Image.init(systemName:)(0xD00000000000001DLL, 0x8000000100079E40);
  v17 = enum case for Image.TemplateRenderingMode.template(_:);
  v18 = type metadata accessor for Image.TemplateRenderingMode(0);
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 104))(v6, v17, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v6, 0, 1, v18);
  v20 = Image.renderingMode(_:)(v6, v16);
  swift_release(v16);
  sub_100015590((uint64_t)v6, &qword_10008C6E0);
  v22 = v47;
  v21 = v48;
  (*(void (**)(char *, _QWORD, uint64_t))(v47 + 104))(v3, enum case for Image.ResizingMode.stretch(_:), v48);
  v23 = Image.resizable(capInsets:resizingMode:)(v3, v20, 0.0, 0.0, 0.0, 0.0);
  swift_release(v20);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v3, v21);
  *(_QWORD *)&v55[0] = v23;
  View.widgetAccentable(_:)(1, &type metadata for Image, &protocol witness table for Image);
  v24 = swift_release(v23);
  v25 = static Color.blue.getter(v24);
  KeyPath = swift_getKeyPath(&unk_10006B1E8);
  v28 = v51;
  v27 = v52;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v11, v9, v52);
  v29 = (uint64_t *)&v11[*(int *)(v50 + 36)];
  *v29 = KeyPath;
  v29[1] = v25;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v27);
  sub_100016550((uint64_t)v11, (uint64_t)v13, &qword_10008D528);
  v30 = &v13[*(int *)(v49 + 36)];
  *(_QWORD *)v30 = 0;
  *((_WORD *)v30 + 4) = 1;
  sub_100015590((uint64_t)v11, &qword_10008D528);
  v32 = static Alignment.center.getter(v31);
  _FrameLayout.init(width:height:alignment:)(v55, 0, 1, 0x4032000000000000, 0, v32, v33);
  sub_100016550((uint64_t)v13, (uint64_t)v15, &qword_10008D518);
  v34 = &v15[*(int *)(v53 + 36)];
  v35 = v55[1];
  *(_OWORD *)v34 = v55[0];
  *((_OWORD *)v34 + 1) = v35;
  *((_OWORD *)v34 + 2) = v55[2];
  v36 = sub_100015590((uint64_t)v13, &qword_10008D518);
  LOBYTE(v25) = static Edge.Set.all.getter(v36);
  v37 = EdgeInsets.init(_all:)(7.0);
  v39 = v38;
  v41 = v40;
  v43 = v42;
  v44 = v54;
  sub_100016550((uint64_t)v15, v54, &qword_10008D508);
  v45 = v44 + *(int *)(sub_1000027AC(&qword_10008D4F0) + 36);
  *(_BYTE *)v45 = v25;
  *(double *)(v45 + 8) = v37;
  *(_QWORD *)(v45 + 16) = v39;
  *(_QWORD *)(v45 + 24) = v41;
  *(_QWORD *)(v45 + 32) = v43;
  *(_BYTE *)(v45 + 40) = 0;
  return sub_100015590((uint64_t)v15, &qword_10008D508);
}

uint64_t sub_100038BF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;

  v50 = a2;
  v3 = sub_1000027AC(&qword_10008D4A0);
  v4 = __chkstk_darwin(v3);
  v49 = (uint64_t)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v48 = (char *)&v44 - v6;
  v7 = a1 + *(int *)(type metadata accessor for NavigationETAMediumLargePlatterContent(0) + 24);
  v8 = *(_QWORD *)(v7 + 24);
  v51 = *(_QWORD *)(v7 + 16);
  v52 = v8;
  v9 = sub_10001D720();
  swift_bridgeObjectRetain(v8);
  v10 = Text.init<A>(_:)(&v51, &type metadata for String, v9);
  v45 = v11;
  v46 = v10;
  v12 = v11;
  v14 = v13;
  v47 = v13;
  v16 = v15 & 1;
  LODWORD(v51) = static HierarchicalShapeStyle.primary.getter();
  v17 = Text.foregroundStyle<A>(_:)(&v51, v10, v12, v16, v14, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  v24 = static Font.subheadline.getter();
  v25 = Text.font(_:)(v24, v17, v19, v23, v21);
  v27 = v26;
  LOBYTE(v9) = v28;
  v30 = v29;
  swift_release(v24);
  LOBYTE(v24) = v9 & 1;
  sub_10001D86C(v17, v19, v23);
  v31 = swift_bridgeObjectRelease(v21);
  v32 = static Font.Weight.bold.getter(v31);
  v33 = Text.fontWeight(_:)(*(_QWORD *)&v32, 0, v25, v27, v9 & 1, v30);
  v35 = v34;
  v37 = v36;
  LOBYTE(v17) = v38 & 1;
  sub_10001D86C(v25, v27, v24);
  swift_bridgeObjectRelease(v30);
  sub_10001D86C(v46, v45, v16);
  swift_bridgeObjectRelease(v47);
  v51 = v33;
  v52 = v35;
  v53 = v17;
  v54 = v37;
  v39 = (uint64_t)v48;
  View.accessibility(identifier:)(0xD00000000000001FLL, 0x8000000100079D80, &type metadata for Text, &protocol witness table for Text);
  sub_10001D86C(v33, v35, v17);
  swift_bridgeObjectRelease(v37);
  v40 = v49;
  sub_100016550(v39, v49, &qword_10008D4A0);
  v41 = v50;
  sub_100016550(v40, v50, &qword_10008D4A0);
  v42 = v41 + *(int *)(sub_1000027AC(&qword_10008D4A8) + 48);
  *(_QWORD *)v42 = 0;
  *(_BYTE *)(v42 + 8) = 1;
  sub_100015590(v39, &qword_10008D4A0);
  return sub_100015590(v40, &qword_10008D4A0);
}

uint64_t sub_100038EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t OpaqueTypeConformance2;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  char v61;
  uint64_t v62;

  v58 = a2;
  v3 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000027AC(&qword_10008D488);
  v7 = *(_QWORD *)(v6 - 8);
  v56 = v6;
  v57 = v7;
  __chkstk_darwin(v6);
  v52 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000027AC(&qword_10008D490);
  v10 = __chkstk_darwin(v9);
  v55 = (uint64_t)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v53 = (char *)&v49 - v13;
  __chkstk_darwin(v12);
  v54 = (uint64_t)&v49 - v14;
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(4, 1);
  v15._countAndFlagsBits = 541152325;
  v15._object = (void *)0xE400000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v15);
  v16 = *(Swift::String *)(a1
                         + *(int *)(type metadata accessor for NavigationETAMediumLargePlatterContent(0) + 24)
                         + 40);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v16);
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v17);
  v18 = LocalizedStringKey.init(stringInterpolation:)(v5);
  v19 = Text.init(_:tableName:bundle:comment:)(v18);
  v49 = v20;
  v50 = v19;
  v21 = v20;
  v23 = v22;
  v51 = v22;
  v25 = v24 & 1;
  LODWORD(v59) = static HierarchicalShapeStyle.secondary.getter();
  v26 = Text.foregroundStyle<A>(_:)(&v59, v19, v21, v25, v23, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v28 = v27;
  v30 = v29;
  v32 = v31 & 1;
  v33 = static Font.footnote.getter();
  v34 = Text.font(_:)(v33, v26, v28, v32, v30);
  v36 = v35;
  LOBYTE(v23) = v37;
  v39 = v38;
  swift_release(v33);
  sub_10001D86C(v26, v28, v32);
  swift_bridgeObjectRelease(v30);
  sub_10001D86C(v50, v49, v25);
  swift_bridgeObjectRelease(v51);
  v59 = (void *)v34;
  v60 = (void *)v36;
  v61 = v23 & 1;
  v62 = v39;
  v40 = v52;
  View.widgetAccentable(_:)(1, &type metadata for Text, &protocol witness table for Text);
  sub_10001D86C(v34, v36, v23 & 1);
  swift_bridgeObjectRelease(v39);
  v59 = &type metadata for Text;
  v60 = &protocol witness table for Text;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v59, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
  v42 = (uint64_t)v53;
  v43 = v56;
  View.accessibility(identifier:)(0xD000000000000017, 0x8000000100079D60, v56, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v40, v43);
  v44 = v54;
  sub_10001565C(v42, v54, &qword_10008D490);
  v45 = v55;
  sub_100016550(v44, v55, &qword_10008D490);
  v46 = v58;
  sub_100016550(v45, v58, &qword_10008D490);
  v47 = v46 + *(int *)(sub_1000027AC(&qword_10008D498) + 48);
  *(_QWORD *)v47 = 0;
  *(_BYTE *)(v47 + 8) = 1;
  sub_100015590(v44, &qword_10008D490);
  return sub_100015590(v45, &qword_10008D490);
}

uint64_t sub_100039238@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100039250(a1, 0, &qword_10008D448, (uint64_t (*)(uint64_t))sub_100037860, a2);
}

uint64_t sub_100039250@<X0>(uint64_t a1@<X0>, char a2@<W2>, uint64_t *a3@<X3>, uint64_t (*a4)(uint64_t)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;

  *(_QWORD *)a5 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a5 + 8) = 0;
  *(_BYTE *)(a5 + 16) = a2;
  sub_1000027AC(a3);
  return a4(v5);
}

uint64_t sub_1000392AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NavigationETAMediumLargePlatterContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000392F0()
{
  return sub_100023274(&qword_10008D500, &qword_10008D508, (void (*)(void))sub_100039314);
}

uint64_t sub_100039314()
{
  return sub_100023274(&qword_10008D510, &qword_10008D518, (void (*)(void))sub_100039338);
}

unint64_t sub_100039338()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10008D520;
  if (!qword_10008D520)
  {
    v1 = sub_1000027EC(&qword_10008D528);
    v2[0] = &type metadata for Image;
    v2[1] = &protocol witness table for Image;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    sub_10001D82C(&qword_10008D530, &qword_10008D538, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D520);
  }
  return result;
}

uint64_t sub_1000393E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100039408(_QWORD *a1)
{
  __n128 v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_100039430()
{
  return sub_10001D82C(&qword_10008D568, &qword_10008D570, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_10003945C()
{
  return sub_10001D82C(&qword_10008D578, (uint64_t *)&unk_10008D580, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_100039488()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10006B2A8);
  v2 = swift_getKeyPath(&unk_10006B2D0);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

id sub_1000394FC()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for LocationAuthorizationMonitor(0)), "init");
  qword_100090BB0 = (uint64_t)result;
  return result;
}

void sub_10003952C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  char *v30;
  NSString v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  unint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD aBlock[5];
  uint64_t v55;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v53 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (uint8_t *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchPredicate(0, v7);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = swift_allocObject(&unk_100082B30, 24, 7);
  *(_QWORD *)(v12 + 16) = v0;
  v13 = (void *)objc_opt_self(NSThread);
  v14 = v0;
  if (objc_msgSend(v13, "isMainThread"))
  {
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100014D70(v15, (uint64_t)qword_100090B98);
    v20 = Logger.logObject.getter(v16, v17, v18, v19);
    v24 = static os_log_type_t.debug.getter(v20, v21, v22, v23);
    if (os_log_type_enabled(v20, v24))
    {
      v3 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v24, "LocationAuthorizationMonitor: startMonitoring (on main queue)", v3, 2u);
      swift_slowDealloc(v3, -1, -1);
    }

    v25 = sub_10003A298();
    *v11 = static OS_dispatch_queue.main.getter(v25);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
    v1 = _dispatchPreconditionTest(_:)(v11);
    (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
    if ((v1 & 1) != 0)
    {
      v26 = *(_QWORD *)&v14[OBJC_IVAR____TtC17GeneralMapsWidget28LocationAuthorizationMonitor_bundleIdentifier + 8];
      v27 = swift_bridgeObjectRetain(v26);
      v28 = (void *)static OS_dispatch_queue.main.getter(v27);
      v29 = objc_allocWithZone((Class)CLLocationManager);
      v30 = v14;
      v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v26);
      v32 = objc_msgSend(v29, "initWithEffectiveBundleIdentifier:delegate:onQueue:", v31, v30, v28);

      v33 = *(void **)&v30[OBJC_IVAR____TtC17GeneralMapsWidget28LocationAuthorizationMonitor_locationManager];
      *(_QWORD *)&v30[OBJC_IVAR____TtC17GeneralMapsWidget28LocationAuthorizationMonitor_locationManager] = v32;
      swift_release(v12);

      return;
    }
    __break(1u);
    goto LABEL_13;
  }
  if (qword_10008B9F0 != -1)
LABEL_13:
    swift_once(&qword_10008B9F0, sub_100035150);
  v34 = type metadata accessor for Logger(0);
  v35 = sub_100014D70(v34, (uint64_t)qword_100090B98);
  v39 = Logger.logObject.getter(v35, v36, v37, v38);
  v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "LocationAuthorizationMonitor: startMonitoring (on NON-MAIN queue?!?)", v41, 2u);
    swift_slowDealloc(v41, -1, -1);
  }

  v42 = sub_10003A298();
  v43 = (void *)static OS_dispatch_queue.main.getter(v42);
  aBlock[4] = sub_10003A290;
  v55 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100052B78;
  aBlock[3] = &unk_100082B48;
  v44 = _Block_copy(aBlock);
  v45 = v55;
  swift_retain(v12);
  v46 = swift_release(v45);
  static DispatchQoS.unspecified.getter(v46);
  aBlock[0] = &_swiftEmptyArrayStorage;
  v47 = sub_1000150DC();
  v48 = sub_1000027AC((uint64_t *)&unk_10008BF70);
  v49 = sub_100015124();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v48, v49, v1, v47);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v6, v3, v44);
  _Block_release(v44);
  swift_release(v12);

  (*(void (**)(uint8_t *, uint64_t))(v53 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v6, v52);
}

void sub_1000399A8(char *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  char *v13;
  NSString v14;
  id v15;
  void *v16;
  uint64_t v17;

  v3 = type metadata accessor for DispatchPredicate(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_10003A298();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v8 & 1) != 0)
  {
    v9 = *(_QWORD *)&a1[OBJC_IVAR____TtC17GeneralMapsWidget28LocationAuthorizationMonitor_bundleIdentifier + 8];
    v10 = swift_bridgeObjectRetain(v9);
    v11 = (void *)static OS_dispatch_queue.main.getter(v10);
    v12 = objc_allocWithZone((Class)CLLocationManager);
    v13 = a1;
    v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9);
    v15 = objc_msgSend(v12, "initWithEffectiveBundleIdentifier:delegate:onQueue:", v14, v13, v11);

    v16 = *(void **)&v13[OBJC_IVAR____TtC17GeneralMapsWidget28LocationAuthorizationMonitor_locationManager];
    *(_QWORD *)&v13[OBJC_IVAR____TtC17GeneralMapsWidget28LocationAuthorizationMonitor_locationManager] = v15;

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100039AF4(void *a1)
{
  void *v1;
  void *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t KeyPath;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  char v42;

  v2 = v1;
  if (objc_msgSend(a1, "authorizationStatus") - 3 > 1)
  {
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_100014D70(v26, (uint64_t)qword_100090B98);
    v31 = Logger.logObject.getter(v27, v28, v29, v30);
    v35 = static os_log_type_t.debug.getter(v31, v32, v33, v34);
    if (os_log_type_enabled(v31, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v35, "LocationAuthorizationMonitor: not authorized", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }

    KeyPath = swift_getKeyPath(&unk_10006B2A8);
    v38 = swift_getKeyPath(&unk_10006B2D0);
    v41 = 0;
    v42 = 1;
    v23 = v2;
    v24 = KeyPath;
    v25 = v38;
  }
  else
  {
    v4 = objc_msgSend(a1, "accuracyAuthorization");
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100014D70(v5, (uint64_t)qword_100090B98);
    v10 = Logger.logObject.getter(v6, v7, v8, v9);
    v14 = static os_log_type_t.debug.getter(v10, v11, v12, v13);
    if (os_log_type_enabled(v10, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v40 = (uint64_t)v4;
      v41 = v16;
      *(_DWORD *)v15 = 136446210;
      type metadata accessor for CLAccuracyAuthorization(0);
      v18 = String.init<A>(reflecting:)(&v40, v17);
      v20 = v19;
      v40 = sub_1000523F0(v18, v19, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v15 + 4);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v10, v14, "LocationAuthorizationMonitor: authorized with %{public}s", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }

    v21 = swift_getKeyPath(&unk_10006B2A8);
    v22 = swift_getKeyPath(&unk_10006B2D0);
    v41 = (uint64_t)v4;
    v42 = 0;
    v23 = v2;
    v24 = v21;
    v25 = v22;
  }
  return static Published.subscript.setter(&v41, v23, v24, v25);
}

id sub_100039E2C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  objc_class *v9;
  objc_super v11;
  uint64_t v12;
  char v13;

  v1 = sub_1000027AC(&qword_10008D5E8);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC17GeneralMapsWidget28LocationAuthorizationMonitor_locationManager] = 0;
  v5 = &v0[OBJC_IVAR____TtC17GeneralMapsWidget28LocationAuthorizationMonitor__accuracyAuthorization];
  v12 = 0;
  v13 = 1;
  v6 = v0;
  v7 = sub_1000027AC(&qword_10008D5E0);
  Published.init(initialValue:)(&v12, v7);
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v4, v1);
  v8 = &v6[OBJC_IVAR____TtC17GeneralMapsWidget28LocationAuthorizationMonitor_bundleIdentifier];
  strcpy(&v6[OBJC_IVAR____TtC17GeneralMapsWidget28LocationAuthorizationMonitor_bundleIdentifier], "com.apple.Maps");
  v8[15] = -18;

  v9 = (objc_class *)type metadata accessor for LocationAuthorizationMonitor(0);
  v11.receiver = v6;
  v11.super_class = v9;
  return objc_msgSendSuper2(&v11, "init");
}

id sub_100039F64()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LocationAuthorizationMonitor(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10003A000()
{
  return type metadata accessor for LocationAuthorizationMonitor(0);
}

uint64_t type metadata accessor for LocationAuthorizationMonitor(uint64_t a1)
{
  uint64_t result;

  result = qword_10008D5C8;
  if (!qword_10008D5C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationAuthorizationMonitor);
  return result;
}

void sub_10003A044(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\b";
  sub_10003A0C4(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_10006B258;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

void sub_10003A0C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10008D5D8)
  {
    v2 = sub_1000027EC(&qword_10008D5E0);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10008D5D8);
  }
}

void *sub_10003A11C()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_10003A128@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for LocationAuthorizationMonitor(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_10003A164@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  char v7;
  uint64_t v8;
  char v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10006B2A8);
  v5 = swift_getKeyPath(&unk_10006B2D0);
  static Published.subscript.getter(&v8, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  v7 = v9;
  *(_QWORD *)a2 = v8;
  *(_BYTE *)(a2 + 8) = v7;
  return result;
}

uint64_t sub_10003A1E8(uint64_t *a1, void **a2)
{
  uint64_t v2;
  char v3;
  void *v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v8;
  char v9;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_10006B2A8);
  v6 = swift_getKeyPath(&unk_10006B2D0);
  v8 = v2;
  v9 = v3;
  return static Published.subscript.setter(&v8, v4, KeyPath, v6);
}

uint64_t sub_10003A26C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10003A290(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000399A8(*(char **)(v2 + 16), a2);
}

unint64_t sub_10003A298()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008BF48;
  if (!qword_10008BF48)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10008BF48);
  }
  return result;
}

double sub_10003A2D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_10003A2E4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10003A2EC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _OWORD *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v12);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v9;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v11 = a2 + 7;
    v10 = (void *)a2[7];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v10 == (void *)1)
    {
      *(_OWORD *)(a1 + 56) = *v11;
    }
    else
    {
      v13 = (void *)a2[8];
      *(_QWORD *)(a1 + 56) = v10;
      *(_QWORD *)(a1 + 64) = v13;
      v14 = v10;
      v15 = v13;
    }
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
    v16 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
    v17 = (char *)(a1 + v16);
    v18 = (char *)a2 + v16;
    v19 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
    v20 = *((_QWORD *)v19 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
    {
      v21 = sub_1000027AC(&qword_10008BA60);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v22 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v17, v18, v22);
      v23 = v19[5];
      v24 = &v17[v23];
      v25 = &v18[v23];
      v26 = *(void **)&v18[v23];
      if (v26 == (void *)1)
      {
        *(_OWORD *)v24 = *(_OWORD *)v25;
      }
      else
      {
        v27 = (void *)*((_QWORD *)v25 + 1);
        *(_QWORD *)v24 = v26;
        *((_QWORD *)v24 + 1) = v27;
        v28 = v26;
        v29 = v27;
      }
      v30 = v19[6];
      v31 = &v17[v30];
      v32 = &v18[v30];
      *(_OWORD *)v31 = *(_OWORD *)v32;
      v31[16] = v32[16];
      v33 = v19[7];
      v34 = &v17[v33];
      v35 = &v18[v33];
      v36 = type metadata accessor for URL(0);
      v37 = *(_QWORD *)(v36 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        v38 = sub_1000027AC(&qword_10008BA58);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v20 + 56))(v17, 0, 1, v19);
    }
    v39 = *(int *)(a3 + 20);
    v40 = (uint64_t *)(a1 + v39);
    v41 = (uint64_t *)((char *)a2 + v39);
    v42 = sub_1000027AC(&qword_10008C160);
    if (swift_getEnumCaseMultiPayload(v41, v42) == 1)
    {
      v43 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v40, v41, v43);
      v44 = v40;
      v45 = v42;
      v46 = 1;
    }
    else
    {
      v47 = *v41;
      *v40 = *v41;
      swift_retain(v47);
      v44 = v40;
      v45 = v42;
      v46 = 0;
    }
    swift_storeEnumTagMultiPayload(v44, v45, v46);
  }
  return a1;
}

uint64_t sub_10003A5B4(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = *(void **)(a1 + 56);
  if (v4 != (void *)1)
  {

  }
  v5 = a1 + *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v6 = type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    v7 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
    v8 = (id *)(v5 + *(int *)(v6 + 20));
    if (*v8 != (id)1)
    {

    }
    v9 = v5 + *(int *)(v6 + 28);
    v10 = type metadata accessor for URL(0);
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  v12 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v13 = sub_1000027AC(&qword_10008C160);
  if (swift_getEnumCaseMultiPayload(v12, v13) != 1)
    return swift_release(*v12);
  v14 = type metadata accessor for WidgetFamily(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
}

uint64_t sub_10003A718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _OWORD *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = (_OWORD *)(a2 + 56);
  v9 = *(void **)(a2 + 56);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v9 == (void *)1)
  {
    *(_OWORD *)(a1 + 56) = *v10;
  }
  else
  {
    v11 = *(void **)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v11;
    v12 = v9;
    v13 = v11;
  }
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  v14 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v18 = *((_QWORD *)v17 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    v19 = sub_1000027AC(&qword_10008BA60);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v20 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v15, v16, v20);
    v21 = v17[5];
    v22 = &v15[v21];
    v23 = &v16[v21];
    v24 = *(void **)&v16[v21];
    if (v24 == (void *)1)
    {
      *(_OWORD *)v22 = *(_OWORD *)v23;
    }
    else
    {
      v25 = (void *)*((_QWORD *)v23 + 1);
      *(_QWORD *)v22 = v24;
      *((_QWORD *)v22 + 1) = v25;
      v26 = v24;
      v27 = v25;
    }
    v28 = v17[6];
    v29 = &v15[v28];
    v30 = &v16[v28];
    *(_OWORD *)v29 = *(_OWORD *)v30;
    v29[16] = v30[16];
    v31 = v17[7];
    v32 = &v15[v31];
    v33 = &v16[v31];
    v34 = type metadata accessor for URL(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = sub_1000027AC(&qword_10008BA58);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  }
  v37 = *(int *)(a3 + 20);
  v38 = (uint64_t *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  v40 = sub_1000027AC(&qword_10008C160);
  if (swift_getEnumCaseMultiPayload(v39, v40) == 1)
  {
    v41 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v38, v39, v41);
    v42 = 1;
  }
  else
  {
    v43 = *v39;
    *v38 = *v39;
    swift_retain(v43);
    v42 = 0;
  }
  swift_storeEnumTagMultiPayload(v38, v40, v42);
  return a1;
}

uint64_t sub_10003A9AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, int *);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void *v33;
  size_t v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  void *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v67;
  void *v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  __int128 v74;
  uint64_t v75;
  void *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(void *, uint64_t, uint64_t);
  int v81;
  int v82;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v11;
  v12 = *(void **)(a2 + 56);
  if (v10 == (void *)1)
  {
    if (v12 != (void *)1)
    {
      *(_QWORD *)(a1 + 56) = v12;
      v13 = *(void **)(a2 + 64);
      *(_QWORD *)(a1 + 64) = v13;
      v14 = v12;
      v15 = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v12 == (void *)1)
  {
    sub_100016DF4((id *)(a1 + 56));
LABEL_6:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 56) = v12;
  v16 = v12;

  v17 = *(void **)(a1 + 64);
  v18 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v18;
  v19 = v18;

LABEL_8:
  v20 = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = v20;
  v21 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v22 = a1 + v21;
  v23 = (char *)(a2 + v21);
  v24 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v25 = *((_QWORD *)v24 - 1);
  v26 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26((uint64_t)v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      v29 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v22, v23, v29);
      v30 = v24[5];
      v31 = v22 + v30;
      v32 = &v23[v30];
      v33 = *(void **)&v23[v30];
      if (v33 == (void *)1)
      {
        *(_OWORD *)v31 = *(_OWORD *)v32;
      }
      else
      {
        *(_QWORD *)v31 = v33;
        v46 = (void *)*((_QWORD *)v32 + 1);
        *(_QWORD *)(v31 + 8) = v46;
        v47 = v33;
        v48 = v46;
      }
      v49 = v24[6];
      v50 = v22 + v49;
      v51 = &v23[v49];
      v52 = *(_OWORD *)v51;
      *(_BYTE *)(v50 + 16) = v51[16];
      *(_OWORD *)v50 = v52;
      v53 = v24[7];
      v54 = (void *)(v22 + v53);
      v55 = &v23[v53];
      v56 = type metadata accessor for URL(0);
      v57 = *(_QWORD *)(v56 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
      {
        v58 = sub_1000027AC(&qword_10008BA58);
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v57 + 16))(v54, v55, v56);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v25 + 56))(v22, 0, 1, v24);
LABEL_25:
      if (a1 == a2)
        return a1;
      goto LABEL_26;
    }
    goto LABEL_14;
  }
  if (v28)
  {
    sub_10001B54C(v22, type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent);
LABEL_14:
    v34 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA60) - 8) + 64);
    v35 = (void *)v22;
    v36 = v23;
    goto LABEL_15;
  }
  v37 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 24))(v22, v23, v37);
  v38 = v24[5];
  v39 = v22 + v38;
  v40 = &v23[v38];
  v41 = *(void **)(v22 + v38);
  v42 = *(void **)&v23[v38];
  if (v41 == (void *)1)
  {
    if (v42 != (void *)1)
    {
      *(_QWORD *)v39 = v42;
      v43 = (void *)*((_QWORD *)v40 + 1);
      *(_QWORD *)(v39 + 8) = v43;
      v44 = v42;
      v45 = v43;
      goto LABEL_35;
    }
    goto LABEL_33;
  }
  if (v42 == (void *)1)
  {
    sub_100016DF4((id *)v39);
LABEL_33:
    *(_OWORD *)v39 = *(_OWORD *)v40;
    goto LABEL_35;
  }
  *(_QWORD *)v39 = v42;
  v67 = v42;

  v68 = *(void **)(v39 + 8);
  v69 = (void *)*((_QWORD *)v40 + 1);
  *(_QWORD *)(v39 + 8) = v69;
  v70 = v69;

LABEL_35:
  v71 = v24[6];
  v72 = v22 + v71;
  v73 = &v23[v71];
  v74 = *(_OWORD *)v73;
  *(_BYTE *)(v72 + 16) = v73[16];
  *(_OWORD *)v72 = v74;
  v75 = v24[7];
  v76 = (void *)(v22 + v75);
  v77 = &v23[v75];
  v78 = type metadata accessor for URL(0);
  v79 = *(_QWORD *)(v78 - 8);
  v80 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v79 + 48);
  v81 = v80(v76, 1, v78);
  v82 = v80(v77, 1, v78);
  if (v81)
  {
    if (!v82)
    {
      (*(void (**)(void *, char *, uint64_t))(v79 + 16))(v76, v77, v78);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
      goto LABEL_25;
    }
    goto LABEL_40;
  }
  if (v82)
  {
    (*(void (**)(void *, uint64_t))(v79 + 8))(v76, v78);
LABEL_40:
    v34 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA58) - 8) + 64);
    v35 = v76;
    v36 = v77;
LABEL_15:
    memcpy(v35, v36, v34);
    if (a1 == a2)
      return a1;
    goto LABEL_26;
  }
  (*(void (**)(void *, char *, uint64_t))(v79 + 24))(v76, v77, v78);
  if (a1 == a2)
    return a1;
LABEL_26:
  v59 = *(int *)(a3 + 20);
  v60 = (uint64_t *)(a1 + v59);
  v61 = (uint64_t *)(a2 + v59);
  sub_100015590(a1 + v59, &qword_10008C160);
  v62 = sub_1000027AC(&qword_10008C160);
  if (swift_getEnumCaseMultiPayload(v61, v62) == 1)
  {
    v63 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v60, v61, v63);
    v64 = 1;
  }
  else
  {
    v65 = *v61;
    *v60 = *v61;
    swift_retain(v65);
    v64 = 0;
  }
  swift_storeEnumTagMultiPayload(v60, v62, v64);
  return a1;
}

uint64_t sub_10003AE80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v8 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000027AC(&qword_10008BA60);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v9, v10, v14);
    *(_OWORD *)&v9[v11[5]] = *(_OWORD *)&v10[v11[5]];
    v15 = v11[6];
    v16 = &v9[v15];
    v17 = &v10[v15];
    *(_OWORD *)v16 = *(_OWORD *)v17;
    v16[16] = v17[16];
    v18 = v11[7];
    v19 = &v9[v18];
    v20 = &v10[v18];
    v21 = type metadata accessor for URL(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = sub_1000027AC(&qword_10008BA58);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v24 = *(int *)(a3 + 20);
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  v27 = sub_1000027AC(&qword_10008C160);
  if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
  {
    v28 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v25, v26, v28);
    swift_storeEnumTagMultiPayload(v25, v27, 1);
  }
  else
  {
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10003B0B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, int *);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(void *, uint64_t, uint64_t);
  int v56;
  int v57;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(void **)(a1 + 56);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v12;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  if (v11 == (void *)1)
    goto LABEL_4;
  if (v10 == 1)
  {
    sub_100016DF4((id *)(a1 + 56));
LABEL_4:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 56) = v10;

  v13 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);

LABEL_6:
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  v14 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v15 = a1 + v14;
  v16 = (char *)(a2 + v14);
  v17 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19((uint64_t)v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      v22 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v15, v16, v22);
      *(_OWORD *)(v15 + v17[5]) = *(_OWORD *)&v16[v17[5]];
      v23 = v17[6];
      v24 = v15 + v23;
      v25 = &v16[v23];
      *(_OWORD *)v24 = *(_OWORD *)v25;
      *(_BYTE *)(v24 + 16) = v25[16];
      v26 = v17[7];
      v27 = (void *)(v15 + v26);
      v28 = &v16[v26];
      v29 = type metadata accessor for URL(0);
      v30 = *(_QWORD *)(v29 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        v31 = sub_1000027AC(&qword_10008BA58);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
LABEL_21:
      if (a1 == a2)
        return a1;
      goto LABEL_22;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    sub_10001B54C(v15, type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent);
LABEL_12:
    v32 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA60) - 8) + 64);
    v33 = (void *)v15;
    v34 = v16;
    goto LABEL_13;
  }
  v35 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 40))(v15, v16, v35);
  v36 = v17[5];
  v37 = v15 + v36;
  v38 = &v16[v36];
  v39 = *(void **)(v15 + v36);
  if (v39 == (void *)1)
    goto LABEL_18;
  if (*(_QWORD *)v38 == 1)
  {
    sub_100016DF4((id *)v37);
LABEL_18:
    *(_OWORD *)v37 = *(_OWORD *)v38;
    goto LABEL_27;
  }
  *(_QWORD *)v37 = *(_QWORD *)v38;

  v46 = *(void **)(v37 + 8);
  *(_QWORD *)(v37 + 8) = *((_QWORD *)v38 + 1);

LABEL_27:
  v47 = v17[6];
  v48 = v15 + v47;
  v49 = &v16[v47];
  *(_OWORD *)v48 = *(_OWORD *)v49;
  *(_BYTE *)(v48 + 16) = v49[16];
  v50 = v17[7];
  v51 = (void *)(v15 + v50);
  v52 = &v16[v50];
  v53 = type metadata accessor for URL(0);
  v54 = *(_QWORD *)(v53 - 8);
  v55 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v54 + 48);
  v56 = v55(v51, 1, v53);
  v57 = v55(v52, 1, v53);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(void *, char *, uint64_t))(v54 + 32))(v51, v52, v53);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      goto LABEL_21;
    }
    goto LABEL_32;
  }
  if (v57)
  {
    (*(void (**)(void *, uint64_t))(v54 + 8))(v51, v53);
LABEL_32:
    v32 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA58) - 8) + 64);
    v33 = v51;
    v34 = v52;
LABEL_13:
    memcpy(v33, v34, v32);
    if (a1 == a2)
      return a1;
    goto LABEL_22;
  }
  (*(void (**)(void *, char *, uint64_t))(v54 + 40))(v51, v52, v53);
  if (a1 == a2)
    return a1;
LABEL_22:
  v40 = *(int *)(a3 + 20);
  v41 = (void *)(a1 + v40);
  v42 = (const void *)(a2 + v40);
  sub_100015590(a1 + v40, &qword_10008C160);
  v43 = sub_1000027AC(&qword_10008C160);
  if (swift_getEnumCaseMultiPayload(v42, v43) == 1)
  {
    v44 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v41, v42, v44);
    swift_storeEnumTagMultiPayload(v41, v43, 1);
  }
  else
  {
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10003B4E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003B4F4);
}

uint64_t sub_10003B4F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for SuggestedDestinationEntryContent(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_1000027AC(&qword_10008C168);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10003B56C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003B578);
}

uint64_t sub_10003B578(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for SuggestedDestinationEntryContent(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_1000027AC(&qword_10008C168);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SuggestedDestinationWidgetView(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008D648, (uint64_t)&nominal type descriptor for SuggestedDestinationWidgetView);
}

void sub_10003B60C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for SuggestedDestinationEntryContent(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10003B690(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_10003B690(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10008C1D8)
  {
    v2 = type metadata accessor for WidgetFamily(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10008C1D8);
  }
}

uint64_t sub_10003B6E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006D10C, 1);
}

uint64_t sub_10003B6F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t OpaqueTypeConformance2;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48[16];
  uint64_t v49;
  _QWORD v50[5];

  v43 = a1;
  v2 = sub_1000027AC(&qword_10008BA58);
  __chkstk_darwin(v2);
  v42 = (uint64_t)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000027AC(&qword_10008BA60);
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContainerBackgroundPlacement(0);
  v46 = *(_QWORD *)(v7 - 8);
  v47 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_1000027AC(&qword_10008D910);
  __chkstk_darwin(v45);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000027AC(&qword_10008D918);
  v40 = *(_QWORD *)(v12 - 8);
  v41 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000027AC(&qword_10008D920);
  v38 = *(_QWORD *)(v15 - 8);
  v39 = v15;
  v16 = __chkstk_darwin(v15);
  v37 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v11 = static HorizontalAlignment.center.getter(v16);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 1;
  v18 = (uint64_t)&v11[*(int *)(sub_1000027AC(&qword_10008D928) + 44)];
  v44 = v1;
  v19 = sub_10003BA84(v1, v18);
  static ContainerBackgroundPlacement.widget.getter(v19);
  v49 = v1;
  v21 = static Alignment.center.getter(v20);
  v23 = v22;
  v24 = sub_1000027AC(&qword_10008D8E0);
  v25 = sub_10001D82C(&qword_10008D930, &qword_10008D910, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v26 = sub_10001D82C(&qword_10008D8F0, &qword_10008D8E0, (uint64_t)&unk_10006A990);
  v27 = v23;
  v28 = v45;
  View.containerBackground<A>(for:alignment:content:)(v9, v21, v27, sub_10003E3B8, v48, v45, v24, v25, v26);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v9, v47);
  sub_100015590((uint64_t)v11, &qword_10008D910);
  v29 = type metadata accessor for SuggestedDestinationEntryContent(0);
  sub_100016550(v44 + *(int *)(v29 + 40), (uint64_t)v6, &qword_10008BA60);
  v30 = type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v6, 1, v30);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v32 = v42;
    sub_100016550((uint64_t)&v6[*(int *)(v30 + 28)], v42, &qword_10008BA58);
    sub_10001B54C((uint64_t)v6, type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent);
    v50[0] = v28;
    v50[1] = v24;
    v50[2] = v25;
    v50[3] = v26;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
    v34 = v37;
    v35 = v41;
    View.widgetURL(_:)(v32, v41, OpaqueTypeConformance2);
    sub_100015590(v32, &qword_10008BA58);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v14, v35);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v38 + 32))(v43, v34, v39);
  }
  return result;
}

uint64_t sub_10003BA84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = sub_1000027AC(&qword_10008D938);
  v5 = __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v9 = (char *)&v14 - v8;
  if (qword_10008B9A0 != -1)
    swift_once(&qword_10008B9A0, sub_100024624);
  v10 = qword_100090B68;
  *v7 = swift_getKeyPath(&unk_10006B508);
  v11 = sub_1000027AC(&qword_10008C488);
  swift_storeEnumTagMultiPayload(v7, v11, 0);
  *(_QWORD *)((char *)v7 + *(int *)(v4 + 36)) = v10;
  sub_10001B33C(a1, (uint64_t)v7 + *(int *)(v4 + 40), type metadata accessor for SuggestedDestinationEntryContent);
  sub_10001565C((uint64_t)v7, (uint64_t)v9, &qword_10008D938);
  sub_100016550((uint64_t)v9, (uint64_t)v7, &qword_10008D938);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = 0x3FF0000000000000;
  v12 = sub_1000027AC(&qword_10008D940);
  sub_100016550((uint64_t)v7, a2 + *(int *)(v12 + 48), &qword_10008D938);
  sub_100015590((uint64_t)v9, &qword_10008D938);
  return sub_100015590((uint64_t)v7, &qword_10008D938);
}

uint64_t sub_10003BC0C@<X0>(uint64_t a1@<X8>)
{
  return sub_10003BC28((uint64_t)sub_10003E3B8, a1);
}

uint64_t sub_10003BC28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t OpaqueTypeConformance2;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60[16];
  uint64_t v61;
  _QWORD v62[5];

  v59 = a1;
  v3 = v2;
  v54 = a2;
  v4 = sub_1000027AC(&qword_10008BA58);
  __chkstk_darwin(v4);
  v53 = (uint64_t)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000027AC(&qword_10008BA60);
  __chkstk_darwin(v6);
  v58 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ContainerBackgroundPlacement(0);
  v56 = *(_QWORD *)(v8 - 8);
  v57 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000027AC(&qword_10008D8A8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v46 - v15;
  v55 = sub_1000027AC(&qword_10008D8B0);
  __chkstk_darwin(v55);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000027AC(&qword_10008D8B8);
  v51 = *(_QWORD *)(v19 - 8);
  v52 = v19;
  __chkstk_darwin(v19);
  v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_1000027AC(&qword_10008D8C0);
  v48 = *(_QWORD *)(v50 - 8);
  v22 = __chkstk_darwin(v50);
  v47 = (char *)&v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v18 = static HorizontalAlignment.center.getter(v22);
  *((_QWORD *)v18 + 1) = 0;
  v18[16] = 1;
  v24 = sub_1000027AC(&qword_10008D8C8);
  v25 = &v18[*(int *)(v24 + 44)];
  *(_QWORD *)v16 = static VerticalAlignment.center.getter(v24);
  *((_QWORD *)v16 + 1) = 0;
  v16[16] = 1;
  v26 = sub_1000027AC(&qword_10008D8D0);
  sub_10003C090(v3, (uint64_t)&v16[*(int *)(v26 + 44)]);
  sub_100016550((uint64_t)v16, (uint64_t)v14, &qword_10008D8A8);
  *(_QWORD *)v25 = 0;
  v25[8] = 1;
  *((_QWORD *)v25 + 2) = 0x3FF0000000000000;
  v27 = sub_1000027AC(&qword_10008D8D8);
  sub_100016550((uint64_t)v14, (uint64_t)&v25[*(int *)(v27 + 48)], &qword_10008D8A8);
  sub_100015590((uint64_t)v16, &qword_10008D8A8);
  v28 = sub_100015590((uint64_t)v14, &qword_10008D8A8);
  static ContainerBackgroundPlacement.widget.getter(v28);
  v61 = v3;
  v30 = static Alignment.center.getter(v29);
  v32 = v31;
  v33 = sub_1000027AC(&qword_10008D8E0);
  v34 = sub_10001D82C(&qword_10008D8E8, &qword_10008D8B0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v35 = sub_10001D82C(&qword_10008D8F0, &qword_10008D8E0, (uint64_t)&unk_10006A990);
  v49 = v21;
  v36 = v55;
  View.containerBackground<A>(for:alignment:content:)(v10, v30, v32, v59, v60, v55, v33, v34, v35);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v10, v57);
  sub_100015590((uint64_t)v18, &qword_10008D8B0);
  v37 = v3 + *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v38 = v58;
  sub_100016550(v37, v58, &qword_10008BA60);
  v39 = type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v38, 1, v39);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v41 = v53;
    sub_100016550(v38 + *(int *)(v39 + 28), v53, &qword_10008BA58);
    sub_10001B54C(v38, type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent);
    v62[0] = v36;
    v62[1] = v33;
    v62[2] = v34;
    v62[3] = v35;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v62, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
    v43 = v47;
    v44 = v52;
    v45 = v49;
    View.widgetURL(_:)(v41, v52, OpaqueTypeConformance2);
    sub_100015590(v41, &qword_10008BA58);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v45, v44);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v48 + 32))(v54, v43, v50);
  }
  return result;
}

uint64_t sub_10003C090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD v60[3];

  v58 = a2;
  v3 = type metadata accessor for TimelineProviderContext(0);
  v56 = *(_QWORD *)(v3 - 8);
  v57 = v3;
  __chkstk_darwin(v3);
  v55 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000027AC(&qword_10008BA60);
  __chkstk_darwin(v5);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000027AC(&qword_10008C278);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v59 = type metadata accessor for SuggestedDestinationEntryContent(0);
  __chkstk_darwin(v59);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000027AC(&qword_10008D8F8);
  v14 = __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v18 = (char *)&v50 - v17;
  v52 = sub_1000027AC(&qword_10008D900);
  v19 = __chkstk_darwin(v52);
  v54 = (uint64_t)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v51 = (uint64_t)&v50 - v22;
  __chkstk_darwin(v21);
  v53 = (uint64_t)&v50 - v23;
  if (qword_10008B9A0 != -1)
    swift_once(&qword_10008B9A0, sub_100024624);
  v24 = qword_100090B68;
  *v16 = swift_getKeyPath(&unk_10006B508);
  v25 = sub_1000027AC(&qword_10008C488);
  swift_storeEnumTagMultiPayload(v16, v25, 0);
  *(_QWORD *)((char *)v16 + *(int *)(v13 + 36)) = v24;
  v26 = (uint64_t)v16 + *(int *)(v13 + 40);
  sub_10001B33C(a1, (uint64_t)v12, type metadata accessor for SuggestedDestinationEntryContent);
  *v10 = swift_getKeyPath(&unk_10006B4D8);
  v27 = sub_1000027AC(&qword_10008C240);
  swift_storeEnumTagMultiPayload(v10, v27, 0);
  KeyPath = swift_getKeyPath(&unk_10006B538);
  v29 = type metadata accessor for SuggestedDestinationMediumLargePlatterContent(0);
  v30 = (uint64_t *)(v26 + *(int *)(v29 + 20));
  *v30 = KeyPath;
  v31 = sub_1000027AC(&qword_10008C490);
  swift_storeEnumTagMultiPayload(v30, v31, 0);
  sub_10001565C((uint64_t)v10, v26, &qword_10008C278);
  sub_10003E274((uint64_t)v12, v26 + *(int *)(v29 + 24));
  sub_10001565C((uint64_t)v16, (uint64_t)v18, &qword_10008D8F8);
  sub_100016550(a1 + *(int *)(v59 + 40), (uint64_t)v7, &qword_10008BA60);
  v32 = type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v7, 1, v32);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v34 = v55;
    v35 = v56;
    v36 = v57;
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v55, v7, v57);
    v37 = sub_10001B54C((uint64_t)v7, type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent);
    v38 = TimelineProviderContext.displaySize.getter(v37);
    if (qword_10008B9A8 != -1)
      swift_once(&qword_10008B9A8, sub_100024634);
    v39 = v38 * 0.5 + *(double *)&qword_10008C918;
    v40.n128_f64[0] = (*(double (**)(char *, uint64_t))(v35 + 8))(v34, v36);
    v41 = static Alignment.center.getter(v40);
    _FrameLayout.init(width:height:alignment:)(v60, *(_QWORD *)&v39, 0, 0, 1, v41, v42);
    v43 = v51;
    sub_100016550((uint64_t)v18, v51, &qword_10008D8F8);
    v44 = (_OWORD *)(v43 + *(int *)(v52 + 36));
    v45 = v60[1];
    *v44 = v60[0];
    v44[1] = v45;
    v44[2] = v60[2];
    sub_100015590((uint64_t)v18, &qword_10008D8F8);
    v46 = v53;
    sub_10001565C(v43, v53, &qword_10008D900);
    v47 = v54;
    sub_100016550(v46, v54, &qword_10008D900);
    v48 = v58;
    sub_100016550(v47, v58, &qword_10008D900);
    v49 = v48 + *(int *)(sub_1000027AC(&qword_10008D908) + 48);
    *(_QWORD *)v49 = 0;
    *(_BYTE *)(v49 + 8) = 1;
    sub_100015590(v46, &qword_10008D900);
    return sub_100015590(v47, &qword_10008D900);
  }
  return result;
}

uint64_t sub_10003C574@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;

  v4 = sub_1000027AC(&qword_10008C480);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_1000027AC(&qword_10008C278);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for SuggestedDestinationEntryContent(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B33C(a1, (uint64_t)v12, v13);
  *v9 = swift_getKeyPath(&unk_10006B4D8);
  v14 = sub_1000027AC(&qword_10008C240);
  swift_storeEnumTagMultiPayload(v9, v14, 0);
  *v6 = swift_getKeyPath(&unk_10006B508);
  v15 = sub_1000027AC(&qword_10008C488);
  swift_storeEnumTagMultiPayload(v6, v15, 0);
  KeyPath = swift_getKeyPath(&unk_10006B538);
  v17 = (int *)sub_1000027AC(&qword_10008D8E0);
  v18 = (uint64_t *)(a2 + v17[10]);
  *v18 = KeyPath;
  v19 = sub_1000027AC(&qword_10008C490);
  swift_storeEnumTagMultiPayload(v18, v19, 0);
  sub_10001565C((uint64_t)v9, a2, &qword_10008C278);
  sub_10001565C((uint64_t)v6, a2 + v17[9], &qword_10008C480);
  result = sub_10003E274((uint64_t)v12, a2 + v17[11]);
  *(_BYTE *)(a2 + v17[12]) = 2;
  return result;
}

uint64_t sub_10003C758@<X0>(uint64_t a1@<X8>)
{
  return sub_10003BC28((uint64_t)sub_10003E244, a1);
}

uint64_t sub_10003C774@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t result;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v67 = a1;
  v54 = sub_1000027AC(&qword_10008D680);
  __chkstk_darwin(v54);
  v55 = (uint64_t)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_1000027AC(&qword_10008D688);
  __chkstk_darwin(v66);
  v56 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for SuggestedDestinationLargeWidgetView(0);
  __chkstk_darwin(v53);
  v57 = (uint64_t)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for SuggestedDestinationMediumWidgetView(0);
  __chkstk_darwin(v61);
  v58 = (uint64_t)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_1000027AC(&qword_10008D690);
  __chkstk_darwin(v62);
  v63 = (uint64_t)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_1000027AC(&qword_10008D698);
  __chkstk_darwin(v64);
  v60 = (uint64_t)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_1000027AC(&qword_10008D6A0);
  __chkstk_darwin(v59);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_1000027AC(&qword_10008D6A8);
  __chkstk_darwin(v65);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_1000027AC(&qword_10008D6B0);
  __chkstk_darwin(v68);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SuggestedDestinationSmallWidgetView(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for WidgetFamily(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SuggestedDestinationWidgetView(0);
  v21 = v1;
  sub_100052074((uint64_t)v20);
  v22 = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v20, v17);
  if (v22 == enum case for WidgetFamily.systemSmall(_:))
  {
    v23 = v16;
    sub_10001B33C(v1, (uint64_t)v16, type metadata accessor for SuggestedDestinationEntryContent);
    sub_10001B33C((uint64_t)v16, (uint64_t)v9, type metadata accessor for SuggestedDestinationSmallWidgetView);
    swift_storeEnumTagMultiPayload(v9, v59, 0);
    v24 = sub_10001B41C(&qword_10008D6C8, type metadata accessor for SuggestedDestinationSmallWidgetView, (uint64_t)&unk_10006B434);
    sub_10001B41C(&qword_10008D6D0, type metadata accessor for SuggestedDestinationMediumWidgetView, (uint64_t)&unk_10006B3E4);
    _ConditionalContent<>.init(storage:)(v9, v14, v61, v24);
    v25 = v60;
    sub_100016550((uint64_t)v11, v60, &qword_10008D6A8);
    swift_storeEnumTagMultiPayload(v25, v64, 0);
    v26 = sub_10003CFF0();
    sub_10003D08C();
    _ConditionalContent<>.init(storage:)(v25, v65, v66, v26);
    sub_100015590((uint64_t)v11, &qword_10008D6A8);
    v27 = v63;
    sub_100016550((uint64_t)v13, v63, &qword_10008D6B0);
    swift_storeEnumTagMultiPayload(v27, v62, 0);
    v28 = sub_10003D110();
    _ConditionalContent<>.init(storage:)(v27, v68, &type metadata for Never, v28);
    sub_100015590((uint64_t)v13, &qword_10008D6B0);
    v29 = (uint64_t)v23;
    v30 = type metadata accessor for SuggestedDestinationSmallWidgetView;
    return sub_10001B54C(v29, v30);
  }
  v31 = (uint64_t)v9;
  v32 = v59;
  v33 = v60;
  v34 = v61;
  v35 = v62;
  v52 = v13;
  v36 = v63;
  if (v22 == enum case for WidgetFamily.systemMedium(_:))
  {
    v37 = v58;
    sub_10001B33C(v21, v58, type metadata accessor for SuggestedDestinationEntryContent);
    sub_10001B33C(v37, v31, type metadata accessor for SuggestedDestinationMediumWidgetView);
    swift_storeEnumTagMultiPayload(v31, v32, 1);
    v38 = sub_10001B41C(&qword_10008D6C8, type metadata accessor for SuggestedDestinationSmallWidgetView, (uint64_t)&unk_10006B434);
    sub_10001B41C(&qword_10008D6D0, type metadata accessor for SuggestedDestinationMediumWidgetView, (uint64_t)&unk_10006B3E4);
    _ConditionalContent<>.init(storage:)(v31, v14, v34, v38);
    sub_100016550((uint64_t)v11, v33, &qword_10008D6A8);
    swift_storeEnumTagMultiPayload(v33, v64, 0);
    v39 = sub_10003CFF0();
    sub_10003D08C();
    v40 = (uint64_t)v52;
    _ConditionalContent<>.init(storage:)(v33, v65, v66, v39);
    sub_100015590((uint64_t)v11, &qword_10008D6A8);
    sub_100016550(v40, v36, &qword_10008D6B0);
    swift_storeEnumTagMultiPayload(v36, v35, 0);
    v41 = sub_10003D110();
    _ConditionalContent<>.init(storage:)(v36, v68, &type metadata for Never, v41);
    sub_100015590(v40, &qword_10008D6B0);
    v29 = v58;
    v30 = type metadata accessor for SuggestedDestinationMediumWidgetView;
    return sub_10001B54C(v29, v30);
  }
  if (v22 == enum case for WidgetFamily.systemLarge(_:))
  {
    v42 = v63;
    v43 = v57;
    sub_10001B33C(v21, v57, type metadata accessor for SuggestedDestinationEntryContent);
    v44 = v55;
    sub_10001B33C(v43, v55, type metadata accessor for SuggestedDestinationLargeWidgetView);
    swift_storeEnumTagMultiPayload(v44, v54, 0);
    v45 = sub_10001B41C(&qword_10008D6B8, type metadata accessor for SuggestedDestinationLargeWidgetView, (uint64_t)&unk_10006B484);
    v46 = (uint64_t)v56;
    _ConditionalContent<>.init(storage:)(v44, v53, &type metadata for Never, v45);
    sub_100016550(v46, v33, &qword_10008D688);
    swift_storeEnumTagMultiPayload(v33, v64, 1);
    v47 = sub_10003CFF0();
    sub_10003D08C();
    v48 = (uint64_t)v52;
    _ConditionalContent<>.init(storage:)(v33, v65, v66, v47);
    sub_100015590(v46, &qword_10008D688);
    sub_100016550(v48, v42, &qword_10008D6B0);
    swift_storeEnumTagMultiPayload(v42, v35, 0);
    v49 = sub_10003D110();
    _ConditionalContent<>.init(storage:)(v42, v68, &type metadata for Never, v49);
    sub_100015590(v48, &qword_10008D6B0);
    v29 = v43;
    v30 = type metadata accessor for SuggestedDestinationLargeWidgetView;
    return sub_10001B54C(v29, v30);
  }
  if (v22 == enum case for WidgetFamily.systemExtraLarge(_:)
    || v22 == enum case for WidgetFamily.accessoryCircular(_:)
    || v22 == enum case for WidgetFamily.accessoryRectangular(_:)
    || v22 == enum case for WidgetFamily.accessoryInline(_:))
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, 0x8000000100079690, "GeneralMapsWidget/SuggestedDestinationWidgetViews.swift", 55, 2, 98, 0);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "GeneralMapsWidget/SuggestedDestinationWidgetViews.swift", 55, 2, 100, 0);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SuggestedDestinationLargeWidgetView(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008D740, (uint64_t)&nominal type descriptor for SuggestedDestinationLargeWidgetView);
}

uint64_t type metadata accessor for SuggestedDestinationMediumWidgetView(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008D7D0, (uint64_t)&nominal type descriptor for SuggestedDestinationMediumWidgetView);
}

uint64_t type metadata accessor for SuggestedDestinationSmallWidgetView(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008D860, (uint64_t)&nominal type descriptor for SuggestedDestinationSmallWidgetView);
}

unint64_t sub_10003CFF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D6C0;
  if (!qword_10008D6C0)
  {
    v1 = sub_1000027EC(&qword_10008D6A8);
    sub_10001B41C(&qword_10008D6C8, type metadata accessor for SuggestedDestinationSmallWidgetView, (uint64_t)&unk_10006B434);
    sub_10001B41C(&qword_10008D6D0, type metadata accessor for SuggestedDestinationMediumWidgetView, (uint64_t)&unk_10006B3E4);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D6C0);
  }
  return result;
}

unint64_t sub_10003D08C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D6D8;
  if (!qword_10008D6D8)
  {
    v1 = sub_1000027EC(&qword_10008D688);
    sub_10001B41C(&qword_10008D6B8, type metadata accessor for SuggestedDestinationLargeWidgetView, (uint64_t)&unk_10006B484);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D6D8);
  }
  return result;
}

unint64_t sub_10003D110()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D6E0;
  if (!qword_10008D6E0)
  {
    v1 = sub_1000027EC(&qword_10008D6B0);
    sub_10003CFF0();
    sub_10003D08C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D6E0);
  }
  return result;
}

uint64_t sub_10003D194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003D1A0);
}

uint64_t sub_10003D1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003D1B0);
}

uint64_t sub_10003D1B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003D1C4);
}

uint64_t sub_10003D1C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003D1D4);
}

uint64_t sub_10003D1D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = type metadata accessor for SuggestedDestinationEntryContent(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v11);
  }
  else
  {
    v6 = v4;
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v9;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v10 = (void *)a2[7];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v10 == (void *)1)
    {
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
    }
    else
    {
      v12 = (void *)a2[8];
      *(_QWORD *)(a1 + 56) = v10;
      *(_QWORD *)(a1 + 64) = v12;
      v13 = v10;
      v14 = v12;
    }
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
    v15 = *(int *)(v6 + 40);
    v16 = (char *)(a1 + v15);
    v17 = (char *)a2 + v15;
    v18 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
    v19 = *((_QWORD *)v18 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
    {
      v20 = sub_1000027AC(&qword_10008BA60);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v21 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v16, v17, v21);
      v22 = v18[5];
      v23 = &v16[v22];
      v24 = &v17[v22];
      v25 = *(void **)&v17[v22];
      if (v25 == (void *)1)
      {
        *(_OWORD *)v23 = *(_OWORD *)v24;
      }
      else
      {
        v26 = (void *)*((_QWORD *)v24 + 1);
        *(_QWORD *)v23 = v25;
        *((_QWORD *)v23 + 1) = v26;
        v27 = v25;
        v28 = v26;
      }
      v29 = v18[6];
      v30 = &v16[v29];
      v31 = &v17[v29];
      *(_OWORD *)v30 = *(_OWORD *)v31;
      v30[16] = v31[16];
      v32 = v18[7];
      v33 = &v16[v32];
      v34 = &v17[v32];
      v35 = type metadata accessor for URL(0);
      v36 = *(_QWORD *)(v35 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        v37 = sub_1000027AC(&qword_10008BA58);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  return a1;
}

uint64_t sub_10003D41C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v2 = *(void **)(a1 + 56);
  if (v2 != (void *)1)
  {

  }
  v3 = a1 + *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v4 = type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4);
  if (!(_DWORD)result)
  {
    v6 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v3, v6);
    v7 = (id *)(v3 + *(int *)(v4 + 20));
    if (*v7 != (id)1)
    {

    }
    v8 = v3 + *(int *)(v4 + 28);
    v9 = type metadata accessor for URL(0);
    v10 = *(_QWORD *)(v9 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  return result;
}

uint64_t sub_10003D528(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _OWORD *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = (_OWORD *)(a2 + 56);
  v7 = *(void **)(a2 + 56);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (v7 == (void *)1)
  {
    *(_OWORD *)(a1 + 56) = *v8;
  }
  else
  {
    v9 = *(void **)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v7;
    *(_QWORD *)(a1 + 64) = v9;
    v10 = v7;
    v11 = v9;
  }
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  v12 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_1000027AC(&qword_10008BA60);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v13, v14, v18);
    v19 = v15[5];
    v20 = &v13[v19];
    v21 = &v14[v19];
    v22 = *(void **)&v14[v19];
    if (v22 == (void *)1)
    {
      *(_OWORD *)v20 = *(_OWORD *)v21;
    }
    else
    {
      v23 = (void *)*((_QWORD *)v21 + 1);
      *(_QWORD *)v20 = v22;
      *((_QWORD *)v20 + 1) = v23;
      v24 = v22;
      v25 = v23;
    }
    v26 = v15[6];
    v27 = &v13[v26];
    v28 = &v14[v26];
    *(_OWORD *)v27 = *(_OWORD *)v28;
    v27[16] = v28[16];
    v29 = v15[7];
    v30 = &v13[v29];
    v31 = &v14[v29];
    v32 = type metadata accessor for URL(0);
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      v34 = sub_1000027AC(&qword_10008BA58);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t sub_10003D73C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, int *);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  size_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  void *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v58;
  void *v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  void *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(void *, uint64_t, uint64_t);
  int v72;
  int v73;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v9;
  v10 = *(void **)(a2 + 56);
  if (v8 == (void *)1)
  {
    if (v10 != (void *)1)
    {
      *(_QWORD *)(a1 + 56) = v10;
      v11 = *(void **)(a2 + 64);
      *(_QWORD *)(a1 + 64) = v11;
      v12 = v10;
      v13 = v11;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 == (void *)1)
  {
    sub_100016DF4((id *)(a1 + 56));
LABEL_6:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 56) = v10;
  v14 = v10;

  v15 = *(void **)(a1 + 64);
  v16 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v16;
  v17 = v16;

LABEL_8:
  v18 = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = v18;
  v19 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v20 = a1 + v19;
  v21 = (char *)(a2 + v19);
  v22 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v23 = *((_QWORD *)v22 - 1);
  v24 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24((uint64_t)v21, 1, v22);
  if (!v25)
  {
    if (v26)
    {
      sub_10001B54C(v20, type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent);
      goto LABEL_14;
    }
    v35 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 24))(v20, v21, v35);
    v36 = v22[5];
    v37 = v20 + v36;
    v38 = &v21[v36];
    v39 = *(void **)(v20 + v36);
    v40 = *(void **)&v21[v36];
    if (v39 == (void *)1)
    {
      if (v40 != (void *)1)
      {
        *(_QWORD *)v37 = v40;
        v41 = (void *)*((_QWORD *)v38 + 1);
        *(_QWORD *)(v37 + 8) = v41;
        v42 = v40;
        v43 = v41;
LABEL_29:
        v62 = v22[6];
        v63 = v20 + v62;
        v64 = &v21[v62];
        v65 = *(_OWORD *)v64;
        *(_BYTE *)(v63 + 16) = v64[16];
        *(_OWORD *)v63 = v65;
        v66 = v22[7];
        v67 = (void *)(v20 + v66);
        v68 = &v21[v66];
        v69 = type metadata accessor for URL(0);
        v70 = *(_QWORD *)(v69 - 8);
        v71 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v70 + 48);
        v72 = v71(v67, 1, v69);
        v73 = v71(v68, 1, v69);
        if (v72)
        {
          if (!v73)
          {
            (*(void (**)(void *, char *, uint64_t))(v70 + 16))(v67, v68, v69);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
            return a1;
          }
        }
        else
        {
          if (!v73)
          {
            (*(void (**)(void *, char *, uint64_t))(v70 + 24))(v67, v68, v69);
            return a1;
          }
          (*(void (**)(void *, uint64_t))(v70 + 8))(v67, v69);
        }
        v32 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA58) - 8) + 64);
        v33 = v67;
        v34 = v68;
        goto LABEL_15;
      }
    }
    else
    {
      if (v40 != (void *)1)
      {
        *(_QWORD *)v37 = v40;
        v58 = v40;

        v59 = *(void **)(v37 + 8);
        v60 = (void *)*((_QWORD *)v38 + 1);
        *(_QWORD *)(v37 + 8) = v60;
        v61 = v60;

        goto LABEL_29;
      }
      sub_100016DF4((id *)v37);
    }
    *(_OWORD *)v37 = *(_OWORD *)v38;
    goto LABEL_29;
  }
  if (v26)
  {
LABEL_14:
    v32 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA60) - 8) + 64);
    v33 = (void *)v20;
    v34 = v21;
LABEL_15:
    memcpy(v33, v34, v32);
    return a1;
  }
  v27 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v20, v21, v27);
  v28 = v22[5];
  v29 = v20 + v28;
  v30 = &v21[v28];
  v31 = *(void **)&v21[v28];
  if (v31 == (void *)1)
  {
    *(_OWORD *)v29 = *(_OWORD *)v30;
  }
  else
  {
    *(_QWORD *)v29 = v31;
    v44 = (void *)*((_QWORD *)v30 + 1);
    *(_QWORD *)(v29 + 8) = v44;
    v45 = v31;
    v46 = v44;
  }
  v47 = v22[6];
  v48 = v20 + v47;
  v49 = &v21[v47];
  v50 = *(_OWORD *)v49;
  *(_BYTE *)(v48 + 16) = v49[16];
  *(_OWORD *)v48 = v50;
  v51 = v22[7];
  v52 = (void *)(v20 + v51);
  v53 = &v21[v51];
  v54 = type metadata accessor for URL(0);
  v55 = *(_QWORD *)(v54 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
  {
    v56 = sub_1000027AC(&qword_10008BA58);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v55 + 16))(v52, v53, v54);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
  return a1;
}

uint64_t sub_10003DB68(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v6 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_1000027AC(&qword_10008BA60);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v7, v8, v12);
    *(_OWORD *)&v7[v9[5]] = *(_OWORD *)&v8[v9[5]];
    v13 = v9[6];
    v14 = &v7[v13];
    v15 = &v8[v13];
    *(_OWORD *)v14 = *(_OWORD *)v15;
    v14[16] = v15[16];
    v16 = v9[7];
    v17 = &v7[v16];
    v18 = &v8[v16];
    v19 = type metadata accessor for URL(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = sub_1000027AC(&qword_10008BA58);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  return a1;
}

uint64_t sub_10003DD18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, int *);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void *v37;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(void *, uint64_t, uint64_t);
  int v49;
  int v50;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(void **)(a1 + 56);
  v10 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  if (v9 == (void *)1)
    goto LABEL_4;
  if (v8 == 1)
  {
    sub_100016DF4((id *)(a1 + 56));
LABEL_4:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 56) = v8;

  v11 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);

LABEL_6:
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  v12 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v13 = a1 + v12;
  v14 = (char *)(a2 + v12);
  v15 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17((uint64_t)v14, 1, v15);
  if (!v18)
  {
    if (v19)
    {
      sub_10001B54C(v13, type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent);
      goto LABEL_12;
    }
    v33 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 40))(v13, v14, v33);
    v34 = v15[5];
    v35 = v13 + v34;
    v36 = &v14[v34];
    v37 = *(void **)(v13 + v34);
    if (v37 != (void *)1)
    {
      if (*(_QWORD *)v36 != 1)
      {
        *(_QWORD *)v35 = *(_QWORD *)v36;

        v39 = *(void **)(v35 + 8);
        *(_QWORD *)(v35 + 8) = *((_QWORD *)v36 + 1);

        goto LABEL_22;
      }
      sub_100016DF4((id *)v35);
    }
    *(_OWORD *)v35 = *(_OWORD *)v36;
LABEL_22:
    v40 = v15[6];
    v41 = v13 + v40;
    v42 = &v14[v40];
    *(_OWORD *)v41 = *(_OWORD *)v42;
    *(_BYTE *)(v41 + 16) = v42[16];
    v43 = v15[7];
    v44 = (void *)(v13 + v43);
    v45 = &v14[v43];
    v46 = type metadata accessor for URL(0);
    v47 = *(_QWORD *)(v46 - 8);
    v48 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v47 + 48);
    v49 = v48(v44, 1, v46);
    v50 = v48(v45, 1, v46);
    if (v49)
    {
      if (!v50)
      {
        (*(void (**)(void *, char *, uint64_t))(v47 + 32))(v44, v45, v46);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
        return a1;
      }
    }
    else
    {
      if (!v50)
      {
        (*(void (**)(void *, char *, uint64_t))(v47 + 40))(v44, v45, v46);
        return a1;
      }
      (*(void (**)(void *, uint64_t))(v47 + 8))(v44, v46);
    }
    v30 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA58) - 8) + 64);
    v31 = v44;
    v32 = v45;
    goto LABEL_13;
  }
  if (v19)
  {
LABEL_12:
    v30 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA60) - 8) + 64);
    v31 = (void *)v13;
    v32 = v14;
LABEL_13:
    memcpy(v31, v32, v30);
    return a1;
  }
  v20 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v13, v14, v20);
  *(_OWORD *)(v13 + v15[5]) = *(_OWORD *)&v14[v15[5]];
  v21 = v15[6];
  v22 = v13 + v21;
  v23 = &v14[v21];
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *(_BYTE *)(v22 + 16) = v23[16];
  v24 = v15[7];
  v25 = (void *)(v13 + v24);
  v26 = &v14[v24];
  v27 = type metadata accessor for URL(0);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = sub_1000027AC(&qword_10008BA58);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t sub_10003E0A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003E0AC);
}

uint64_t sub_10003E0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SuggestedDestinationEntryContent(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10003E0EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003E0F8);
}

uint64_t sub_10003E0FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SuggestedDestinationEntryContent(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_10003E13C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for SuggestedDestinationEntryContent(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_10003E1A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D898;
  if (!qword_10008D898)
  {
    v1 = sub_1000027EC(&qword_10008D8A0);
    sub_10003D110();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D898);
  }
  return result;
}

uint64_t sub_10003E214(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006D184, 1);
}

uint64_t sub_10003E224(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006D15C, 1);
}

uint64_t sub_10003E234(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006D134, 1);
}

uint64_t sub_10003E244@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10003C574(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10003E274(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SuggestedDestinationEntryContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003E2B8(uint64_t a1)
{
  return sub_10003E2F0(a1, &qword_10008D8B8, &qword_10008D8B0, &qword_10008D8E8);
}

uint64_t sub_10003E2D4(uint64_t a1)
{
  return sub_10003E2F0(a1, &qword_10008D918, &qword_10008D910, &qword_10008D930);
}

uint64_t sub_10003E2F0(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_1000027EC(a2);
  v9 = sub_1000027EC(a3);
  v10 = sub_1000027EC(&qword_10008D8E0);
  v11 = sub_10001D82C(a4, a3, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v12 = sub_10001D82C(&qword_10008D8F0, &qword_10008D8E0, (uint64_t)&unk_10006A990);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
  v9 = v6;
  v10 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
}

char *sub_10003E3BC(char *a1, char **a2, uint64_t a3)
{
  char *v4;
  int v5;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = &v8[(v5 + 16) & ~(unint64_t)v5];
    swift_retain(v8);
  }
  else
  {
    v7 = *a2;
    if (*a2 == (char *)1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      v9 = a2[1];
      *(_QWORD *)a1 = v7;
      *((_QWORD *)a1 + 1) = v9;
      v10 = v7;
      v11 = v9;
    }
    v12 = a2[3];
    *((_QWORD *)v4 + 2) = a2[2];
    *((_QWORD *)v4 + 3) = v12;
    *((_DWORD *)v4 + 8) = *((_DWORD *)a2 + 8);
    v4[36] = *((_BYTE *)a2 + 36);
    v13 = a2[6];
    *((_QWORD *)v4 + 5) = a2[5];
    *((_QWORD *)v4 + 6) = v13;
    v4[56] = *((_BYTE *)a2 + 56);
    v14 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
    v15 = &v4[v14];
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    if (v19(v16, 1, v17))
    {
      v20 = sub_1000027AC(&qword_10008BA68);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v21 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v15, v16, v21);
      v22 = *(int *)(v17 + 20);
      v23 = &v15[v22];
      v24 = &v16[v22];
      v25 = *(void **)&v16[v22];
      if (v25 == (void *)1)
      {
        *(_OWORD *)v23 = *(_OWORD *)v24;
      }
      else
      {
        v26 = (void *)*((_QWORD *)v24 + 1);
        *(_QWORD *)v23 = v25;
        *((_QWORD *)v23 + 1) = v26;
        v27 = v25;
        v28 = v26;
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v29 = *(int *)(a3 + 20);
    v30 = &v4[v29];
    v31 = (uint64_t *)((char *)a2 + v29);
    v32 = sub_1000027AC(&qword_10008C160);
    if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
    {
      v33 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v30, v31, v33);
      v34 = v30;
      v35 = v32;
      v36 = 1;
    }
    else
    {
      v37 = *v31;
      *(_QWORD *)v30 = *v31;
      swift_retain(v37);
      v34 = v30;
      v35 = v32;
      v36 = 0;
    }
    swift_storeEnumTagMultiPayload(v34, v35, v36);
  }
  return v4;
}

uint64_t sub_10003E5D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)a1 != 1)
  {

  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  v4 = a1 + *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v5 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
    v7 = (id *)(v4 + *(int *)(v5 + 20));
    if (*v7 != (id)1)
    {

    }
  }
  v8 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v9 = sub_1000027AC(&qword_10008C160);
  if (swift_getEnumCaseMultiPayload(v8, v9) != 1)
    return swift_release(*v8);
  v10 = type metadata accessor for WidgetFamily(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
}

uint64_t sub_10003E6F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = *(void **)a2;
  if (*(_QWORD *)a2 == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v7 = *(void **)(a2 + 8);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = v6;
    v9 = v7;
  }
  v10 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v12 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  if (v17(v14, 1, v15))
  {
    v18 = sub_1000027AC(&qword_10008BA68);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v13, v14, v19);
    v20 = *(int *)(v15 + 20);
    v21 = &v13[v20];
    v22 = &v14[v20];
    v23 = *(void **)&v14[v20];
    if (v23 == (void *)1)
    {
      *(_OWORD *)v21 = *(_OWORD *)v22;
    }
    else
    {
      v24 = (void *)*((_QWORD *)v22 + 1);
      *(_QWORD *)v21 = v23;
      *((_QWORD *)v21 + 1) = v24;
      v25 = v23;
      v26 = v24;
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v27 = *(int *)(a3 + 20);
  v28 = (uint64_t *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v30 = sub_1000027AC(&qword_10008C160);
  if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
  {
    v31 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v28, v29, v31);
    v32 = v28;
    v33 = v30;
    v34 = 1;
  }
  else
  {
    v35 = *v29;
    *v28 = *v29;
    swift_retain(v35);
    v32 = v28;
    v33 = v30;
    v34 = 0;
  }
  swift_storeEnumTagMultiPayload(v32, v33, v34);
  return a1;
}

uint64_t sub_10003E8E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  id v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v6 = *(id *)a1;
  v7 = *(void **)a2;
  if (*(_QWORD *)a1 == 1)
  {
    if (v7 != (void *)1)
    {
      *(_QWORD *)a1 = v7;
      v8 = *(void **)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v8;
      v9 = v7;
      v10 = v8;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v7 == (void *)1)
  {
    sub_100016DF4((id *)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *(_QWORD *)a1 = v7;
  v11 = v7;

  v12 = *(void **)(a1 + 8);
  v13 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v13;
  v14 = v13;

LABEL_8:
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v18 = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v20 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v21 = (char *)(a1 + v20);
  v22 = (char *)(a2 + v20);
  v23 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      v34 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v21, v22, v34);
      v35 = *(int *)(v23 + 20);
      v36 = &v21[v35];
      v37 = &v22[v35];
      v38 = *(id *)v36;
      v39 = *(void **)v37;
      if (*(_QWORD *)v36 == 1)
      {
        if (v39 != (void *)1)
        {
          *(_QWORD *)v36 = v39;
          v40 = (void *)*((_QWORD *)v37 + 1);
          *((_QWORD *)v36 + 1) = v40;
          v41 = v39;
          v42 = v40;
          if (a1 == a2)
            return a1;
          goto LABEL_28;
        }
      }
      else
      {
        if (v39 != (void *)1)
        {
          *(_QWORD *)v36 = v39;
          v46 = v39;

          v47 = (void *)*((_QWORD *)v36 + 1);
          v48 = (void *)*((_QWORD *)v37 + 1);
          *((_QWORD *)v36 + 1) = v48;
          v49 = v48;

          if (a1 == a2)
            return a1;
          goto LABEL_28;
        }
        sub_100016DF4((id *)v36);
      }
      *(_OWORD *)v36 = *(_OWORD *)v37;
      if (a1 == a2)
        return a1;
LABEL_28:
      v50 = *(int *)(a3 + 20);
      v51 = (uint64_t *)(a1 + v50);
      v52 = (uint64_t *)(a2 + v50);
      sub_100015590(a1 + v50, &qword_10008C160);
      v53 = sub_1000027AC(&qword_10008C160);
      if (swift_getEnumCaseMultiPayload(v52, v53) == 1)
      {
        v54 = type metadata accessor for WidgetFamily(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v51, v52, v54);
        v55 = 1;
      }
      else
      {
        v56 = *v52;
        *v51 = *v52;
        swift_retain(v56);
        v55 = 0;
      }
      swift_storeEnumTagMultiPayload(v51, v53, v55);
      return a1;
    }
    sub_10001B54C((uint64_t)v21, type metadata accessor for NavigationETAEntryContent.ResolvedContent);
LABEL_14:
    v33 = sub_1000027AC(&qword_10008BA68);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    if (a1 == a2)
      return a1;
    goto LABEL_28;
  }
  if (v27)
    goto LABEL_14;
  v28 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v21, v22, v28);
  v29 = *(int *)(v23 + 20);
  v30 = &v21[v29];
  v31 = &v22[v29];
  v32 = *(void **)&v22[v29];
  if (v32 == (void *)1)
  {
    *(_OWORD *)v30 = *(_OWORD *)v31;
  }
  else
  {
    *(_QWORD *)v30 = v32;
    v43 = (void *)*((_QWORD *)v31 + 1);
    *((_QWORD *)v30 + 1) = v43;
    v44 = v32;
    v45 = v43;
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  if (a1 != a2)
    goto LABEL_28;
  return a1;
}

uint64_t sub_10003EC30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_1000027AC(&qword_10008BA68);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v8, v9, v13);
    *(_OWORD *)&v8[*(int *)(v10 + 20)] = *(_OWORD *)&v9[*(int *)(v10 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = *(int *)(a3 + 20);
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  v17 = sub_1000027AC(&qword_10008C160);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
    swift_storeEnumTagMultiPayload(v15, v17, 1);
  }
  else
  {
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10003EDB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  id *v30;
  char *v31;
  id v32;
  id v33;

  v6 = *(id *)a1;
  if (*(_QWORD *)a1 == 1)
    goto LABEL_4;
  if (*(_QWORD *)a2 == 1)
  {
    sub_100016DF4((id *)a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

LABEL_6:
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v12 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      v20 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v13, v14, v20);
      *(_OWORD *)&v13[*(int *)(v15 + 20)] = *(_OWORD *)&v14[*(int *)(v15 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v19)
  {
    sub_10001B54C((uint64_t)v13, type metadata accessor for NavigationETAEntryContent.ResolvedContent);
LABEL_11:
    v21 = sub_1000027AC(&qword_10008BA68);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_12;
  }
  v28 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 40))(v13, v14, v28);
  v29 = *(int *)(v15 + 20);
  v30 = (id *)&v13[v29];
  v31 = &v14[v29];
  v32 = *v30;
  if (*v30 == (id)1)
    goto LABEL_20;
  if (*(_QWORD *)v31 == 1)
  {
    sub_100016DF4(v30);
LABEL_20:
    *(_OWORD *)v30 = *(_OWORD *)v31;
    goto LABEL_12;
  }
  *v30 = *(id *)v31;

  v33 = v30[1];
  v30[1] = (id)*((_QWORD *)v31 + 1);

LABEL_12:
  if (a1 != a2)
  {
    v22 = *(int *)(a3 + 20);
    v23 = (void *)(a1 + v22);
    v24 = (const void *)(a2 + v22);
    sub_100015590(a1 + v22, &qword_10008C160);
    v25 = sub_1000027AC(&qword_10008C160);
    if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
    {
      v26 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v23, v24, v26);
      swift_storeEnumTagMultiPayload(v23, v25, 1);
    }
    else
    {
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10003F04C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003F058);
}

uint64_t sub_10003F058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for NavigationETAEntryContent(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_1000027AC(&qword_10008C168);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10003F0D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003F0DC);
}

uint64_t sub_10003F0DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for NavigationETAEntryContent(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_1000027AC(&qword_10008C168);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for NavigationETAWidgetView(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008D9A0, (uint64_t)&nominal type descriptor for NavigationETAWidgetView);
}

void sub_10003F170(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for NavigationETAEntryContent(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001B658(319, (unint64_t *)&qword_10008C1D8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

uint64_t sub_10003F204(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006D224, 1);
}

uint64_t sub_10003F214@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36[16];
  uint64_t v37;
  _QWORD v38[4];

  v2 = v1;
  v35 = a1;
  v3 = sub_1000027AC(&qword_10008BA58);
  __chkstk_darwin(v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ContainerBackgroundPlacement(0);
  v31 = *(_QWORD *)(v6 - 8);
  v32 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000027AC(&qword_10008DBC8);
  __chkstk_darwin(v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000027AC(&qword_10008DBD0);
  v13 = *(_QWORD *)(v12 - 8);
  v33 = v12;
  v34 = v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v11 = static HorizontalAlignment.center.getter(v14);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 1;
  v17 = sub_1000027AC(&qword_10008DBD8);
  v18 = sub_10003F4AC(v2, (uint64_t)&v11[*(int *)(v17 + 44)]);
  static ContainerBackgroundPlacement.widget.getter(v18);
  v37 = v2;
  v20 = static Alignment.center.getter(v19);
  v22 = v21;
  v23 = sub_1000027AC(&qword_10008DB98);
  v24 = sub_10001D82C(&qword_10008DBE0, &qword_10008DBC8, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v25 = sub_10001D82C(&qword_10008DBA8, &qword_10008DB98, (uint64_t)&unk_10006A990);
  View.containerBackground<A>(for:alignment:content:)(v8, v20, v22, sub_100041D74, v36, v9, v23, v24, v25);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v32);
  sub_100015590((uint64_t)v11, &qword_10008DBC8);
  v26 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v5, 1, 1, v26);
  v38[0] = v9;
  v38[1] = v23;
  v38[2] = v24;
  v38[3] = v25;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v38, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
  v28 = v33;
  View.widgetURL(_:)(v5, v33, OpaqueTypeConformance2);
  sub_100015590((uint64_t)v5, &qword_10008BA58);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v16, v28);
}

uint64_t sub_10003F4AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v22;
  Swift::String v23;

  v4 = sub_1000027AC(&qword_10008DBE8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (uint64_t *)((char *)&v22 - v9);
  __chkstk_darwin(v8);
  v12 = (char *)&v22 - v11;
  if (qword_10008B9A0 != -1)
    swift_once(&qword_10008B9A0, sub_100024624);
  v13 = qword_100090B68;
  *v10 = swift_getKeyPath(&unk_10006B700);
  v14 = sub_1000027AC(&qword_10008C488);
  swift_storeEnumTagMultiPayload(v10, v14, 0);
  *(_QWORD *)((char *)v10 + *(int *)(v4 + 36)) = v13;
  v15 = (uint64_t)v10 + *(int *)(v4 + 40);
  v16 = type metadata accessor for NavigationETASmallWidgetView(0);
  sub_10001B33C(a1 + *(int *)(v16 + 20), v15, type metadata accessor for NavigationETAEntryContent);
  v17 = *(int *)(type metadata accessor for NavigationETASmallPlatterContent(0) + 20);
  if (qword_10008BA00 != -1)
    swift_once(&qword_10008BA00, sub_100045C88);
  v23._object = (void *)0x8000000100079F60;
  v18._countAndFlagsBits = 0x402520415445;
  v18._object = (void *)0xE600000000000000;
  v19._countAndFlagsBits = 0x402520415445;
  v19._object = (void *)0xE600000000000000;
  v23._countAndFlagsBits = 0xD00000000000001BLL;
  *(Swift::String *)(v15 + v17) = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)qword_100090BC0, v19, v23);
  sub_10001565C((uint64_t)v10, (uint64_t)v12, &qword_10008DBE8);
  sub_100016550((uint64_t)v12, (uint64_t)v7, &qword_10008DBE8);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = 0x3FF0000000000000;
  v20 = sub_1000027AC(&qword_10008DBF0);
  sub_100016550((uint64_t)v7, a2 + *(int *)(v20 + 48), &qword_10008DBE8);
  sub_100015590((uint64_t)v12, &qword_10008DBE8);
  return sub_100015590((uint64_t)v7, &qword_10008DBE8);
}

uint64_t sub_10003F6F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t OpaqueTypeConformance2;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char v45[16];
  uint64_t v46;
  _QWORD v47[4];

  v2 = v1;
  v44 = a1;
  v3 = sub_1000027AC(&qword_10008BA58);
  __chkstk_darwin(v3);
  v43 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ContainerBackgroundPlacement(0);
  v41 = *(_QWORD *)(v5 - 8);
  v42 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000027AC(&qword_10008DB68);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v39 - v12;
  v14 = sub_1000027AC(&qword_10008DB70);
  __chkstk_darwin(v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000027AC(&qword_10008DB78);
  v18 = *(_QWORD *)(v17 - 8);
  v39 = v17;
  v40 = v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v16 = static HorizontalAlignment.center.getter(v19);
  *((_QWORD *)v16 + 1) = 0;
  v16[16] = 1;
  v22 = sub_1000027AC(&qword_10008DB80);
  v23 = &v16[*(int *)(v22 + 44)];
  *(_QWORD *)v13 = static VerticalAlignment.center.getter(v22);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  v24 = sub_1000027AC(&qword_10008DB88);
  sub_10003FA64(v2, (uint64_t)&v13[*(int *)(v24 + 44)]);
  sub_100016550((uint64_t)v13, (uint64_t)v11, &qword_10008DB68);
  *(_QWORD *)v23 = 0;
  v23[8] = 1;
  *((_QWORD *)v23 + 2) = 0x3FF0000000000000;
  v25 = sub_1000027AC(&qword_10008DB90);
  sub_100016550((uint64_t)v11, (uint64_t)&v23[*(int *)(v25 + 48)], &qword_10008DB68);
  sub_100015590((uint64_t)v13, &qword_10008DB68);
  v26 = sub_100015590((uint64_t)v11, &qword_10008DB68);
  static ContainerBackgroundPlacement.widget.getter(v26);
  v46 = v2;
  v28 = static Alignment.center.getter(v27);
  v30 = v29;
  v31 = sub_1000027AC(&qword_10008DB98);
  v32 = sub_10001D82C(&qword_10008DBA0, &qword_10008DB70, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v33 = sub_10001D82C(&qword_10008DBA8, &qword_10008DB98, (uint64_t)&unk_10006A990);
  View.containerBackground<A>(for:alignment:content:)(v7, v28, v30, sub_100041BE4, v45, v14, v31, v32, v33);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v7, v42);
  sub_100015590((uint64_t)v16, &qword_10008DB70);
  v34 = type metadata accessor for URL(0);
  v35 = (uint64_t)v43;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v43, 1, 1, v34);
  v47[0] = v14;
  v47[1] = v31;
  v47[2] = v32;
  v47[3] = v33;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v47, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
  v37 = v39;
  View.widgetURL(_:)(v35, v39, OpaqueTypeConformance2);
  sub_100015590(v35, &qword_10008BA58);
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v21, v37);
}

uint64_t sub_10003FA64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  Swift::String *v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD v64[3];
  Swift::String v65;

  v61 = a2;
  v3 = type metadata accessor for TimelineProviderContext(0);
  v59 = *(_QWORD *)(v3 - 8);
  v60 = v3;
  __chkstk_darwin(v3);
  v58 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000027AC(&qword_10008BA68);
  __chkstk_darwin(v5);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000027AC(&qword_10008C278);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v62 = type metadata accessor for NavigationETAEntryContent(0);
  __chkstk_darwin(v62);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000027AC(&qword_10008DBB0);
  v14 = __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v63 = (uint64_t)&v54 - v17;
  v55 = sub_1000027AC(&qword_10008DBB8);
  v18 = __chkstk_darwin(v55);
  v57 = (uint64_t)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v54 - v21;
  __chkstk_darwin(v20);
  v56 = (uint64_t)&v54 - v23;
  if (qword_10008B9A0 != -1)
    swift_once(&qword_10008B9A0, sub_100024624);
  v24 = qword_100090B68;
  *v16 = swift_getKeyPath(&unk_10006B700);
  v25 = sub_1000027AC(&qword_10008C488);
  swift_storeEnumTagMultiPayload(v16, v25, 0);
  *(_QWORD *)((char *)v16 + *(int *)(v13 + 36)) = v24;
  v26 = (uint64_t)v16 + *(int *)(v13 + 40);
  v27 = a1 + *(int *)(type metadata accessor for NavigationETAMediumLargeWidgetView(0) + 20);
  sub_10001B33C(v27, (uint64_t)v12, type metadata accessor for NavigationETAEntryContent);
  *v10 = swift_getKeyPath(&unk_10006B5D8);
  v28 = sub_1000027AC(&qword_10008C240);
  swift_storeEnumTagMultiPayload(v10, v28, 0);
  KeyPath = swift_getKeyPath(&unk_10006B760);
  v30 = (int *)type metadata accessor for NavigationETAMediumLargePlatterContent(0);
  v31 = (uint64_t *)(v26 + v30[5]);
  *v31 = KeyPath;
  v32 = sub_1000027AC(&qword_10008C160);
  swift_storeEnumTagMultiPayload(v31, v32, 0);
  sub_10001565C((uint64_t)v10, v26, &qword_10008C278);
  sub_100040B50((uint64_t)v12, v26 + v30[6]);
  v33 = (Swift::String *)(v26 + v30[7]);
  if (qword_10008BA00 != -1)
    swift_once(&qword_10008BA00, sub_100045C88);
  v65._object = (void *)0x8000000100079F60;
  v34._countAndFlagsBits = 0x402520415445;
  v34._object = (void *)0xE600000000000000;
  v35._countAndFlagsBits = 0x402520415445;
  v35._object = (void *)0xE600000000000000;
  v65._countAndFlagsBits = 0xD00000000000001BLL;
  *v33 = NSLocalizedString(_:tableName:bundle:value:comment:)(v34, (Swift::String_optional)0, (NSBundle)qword_100090BC0, v35, v65);
  v36 = v63;
  sub_10001565C((uint64_t)v16, v63, &qword_10008DBB0);
  sub_100016550(v27 + *(int *)(v62 + 36), (uint64_t)v7, &qword_10008BA68);
  v37 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v7, 1, v37);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v39 = v58;
    v40 = v59;
    v41 = v60;
    (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v58, v7, v60);
    v42 = sub_10001B54C((uint64_t)v7, type metadata accessor for NavigationETAEntryContent.ResolvedContent);
    v43 = TimelineProviderContext.displaySize.getter(v42);
    if (qword_10008B9A8 != -1)
      swift_once(&qword_10008B9A8, sub_100024634);
    v44 = v43 * 0.5 + *(double *)&qword_10008C918;
    v45.n128_f64[0] = (*(double (**)(char *, uint64_t))(v40 + 8))(v39, v41);
    v46 = static Alignment.center.getter(v45);
    _FrameLayout.init(width:height:alignment:)(v64, *(_QWORD *)&v44, 0, 0, 1, v46, v47);
    sub_100016550(v36, (uint64_t)v22, &qword_10008DBB0);
    v48 = &v22[*(int *)(v55 + 36)];
    v49 = v64[1];
    *(_OWORD *)v48 = v64[0];
    *((_OWORD *)v48 + 1) = v49;
    *((_OWORD *)v48 + 2) = v64[2];
    sub_100015590(v36, &qword_10008DBB0);
    v50 = v56;
    sub_10001565C((uint64_t)v22, v56, &qword_10008DBB8);
    v51 = v57;
    sub_100016550(v50, v57, &qword_10008DBB8);
    v52 = v61;
    sub_100016550(v51, v61, &qword_10008DBB8);
    v53 = v52 + *(int *)(sub_1000027AC(&qword_10008DBC0) + 48);
    *(_QWORD *)v53 = 0;
    *(_BYTE *)(v53 + 8) = 1;
    sub_100015590(v50, &qword_10008DBB8);
    return sub_100015590(v51, &qword_10008DBB8);
  }
  return result;
}

uint64_t sub_10003FFE0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  int *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;

  v6 = sub_1000027AC(&qword_10008C480);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_1000027AC(&qword_10008C278);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for NavigationETAEntryContent(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a2(0);
  sub_10001B33C(a1 + *(int *)(v15 + 20), (uint64_t)v14, type metadata accessor for NavigationETAEntryContent);
  *v11 = swift_getKeyPath(&unk_10006B5D8);
  v16 = sub_1000027AC(&qword_10008C240);
  swift_storeEnumTagMultiPayload(v11, v16, 0);
  *v8 = swift_getKeyPath(&unk_10006B700);
  v17 = sub_1000027AC(&qword_10008C488);
  swift_storeEnumTagMultiPayload(v8, v17, 0);
  KeyPath = swift_getKeyPath(&unk_10006B730);
  v19 = (int *)sub_1000027AC(&qword_10008DB98);
  v20 = (uint64_t *)(a3 + v19[10]);
  *v20 = KeyPath;
  v21 = sub_1000027AC(&qword_10008C490);
  swift_storeEnumTagMultiPayload(v20, v21, 0);
  sub_10001565C((uint64_t)v11, a3, &qword_10008C278);
  sub_10001565C((uint64_t)v8, a3 + v19[9], &qword_10008C480);
  result = sub_100040B50((uint64_t)v14, a3 + v19[11]);
  *(_BYTE *)(a3 + v19[12]) = 3;
  return result;
}

uint64_t sub_1000401DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t result;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;

  v70 = a1;
  v61 = sub_1000027AC(&qword_10008D9D8);
  __chkstk_darwin(v61);
  v62 = (uint64_t)&v60 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_1000027AC(&qword_10008D9E0);
  __chkstk_darwin(v69);
  v63 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for NavigationETAMediumLargeWidgetView(0);
  __chkstk_darwin(v66);
  v64 = (uint64_t *)((char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v67 = sub_1000027AC(&qword_10008D9E8);
  __chkstk_darwin(v67);
  v68 = (uint64_t)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_1000027AC(&qword_10008D9F0);
  __chkstk_darwin(v72);
  v71 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_1000027AC(&qword_10008D9F8);
  __chkstk_darwin(v65);
  v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_1000027AC(&qword_10008DA00);
  __chkstk_darwin(v73);
  v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_1000027AC(&qword_10008DA08);
  __chkstk_darwin(v75);
  v74 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for NavigationETAEntryContent(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for NavigationETASmallWidgetView(0);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = type metadata accessor for WidgetFamily(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NavigationETAWidgetView(0);
  v22 = v1;
  sub_100052074((uint64_t)v21);
  v23 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v21, v18);
  if (v23 == enum case for WidgetFamily.systemSmall(_:))
  {
    sub_10001B33C(v1, (uint64_t)v14, type metadata accessor for NavigationETAEntryContent);
    *v17 = swift_getKeyPath(&unk_10006B5D8);
    v24 = sub_1000027AC(&qword_10008C240);
    swift_storeEnumTagMultiPayload(v17, v24, 0);
    sub_100040B50((uint64_t)v14, (uint64_t)v17 + *(int *)(v15 + 20));
    sub_10001B33C((uint64_t)v17, (uint64_t)v8, type metadata accessor for NavigationETASmallWidgetView);
    swift_storeEnumTagMultiPayload(v8, v65, 0);
    v25 = sub_10001B41C(&qword_10008DA20, type metadata accessor for NavigationETASmallWidgetView, (uint64_t)&unk_10006B660);
    sub_10001B41C(&qword_10008DA10, type metadata accessor for NavigationETAMediumLargeWidgetView, (uint64_t)&unk_10006B6B0);
    _ConditionalContent<>.init(storage:)(v8, v15, v66, v25);
    v26 = v71;
    sub_100016550((uint64_t)v10, v71, &qword_10008DA00);
    swift_storeEnumTagMultiPayload(v26, v72, 0);
    v27 = sub_100040B94();
    sub_100040C30();
    v28 = (uint64_t)v74;
    _ConditionalContent<>.init(storage:)(v26, v73, v69, v27);
    sub_100015590((uint64_t)v10, &qword_10008DA00);
    v29 = v68;
    sub_100016550(v28, v68, &qword_10008DA08);
    swift_storeEnumTagMultiPayload(v29, v67, 0);
    v30 = sub_100040CB4();
    _ConditionalContent<>.init(storage:)(v29, v75, &type metadata for Never, v30);
    sub_100015590(v28, &qword_10008DA08);
    v31 = (uint64_t)v17;
    v32 = type metadata accessor for NavigationETASmallWidgetView;
    return sub_10001B54C(v31, v32);
  }
  v34 = v65;
  v33 = v66;
  v35 = (uint64_t)v8;
  v36 = v68;
  v37 = v69;
  if (v23 == enum case for WidgetFamily.systemMedium(_:))
  {
    v38 = v15;
    sub_10001B33C(v22, (uint64_t)v14, type metadata accessor for NavigationETAEntryContent);
    KeyPath = swift_getKeyPath(&unk_10006B5D8);
    v40 = (uint64_t)v64;
    *v64 = KeyPath;
    v41 = sub_1000027AC(&qword_10008C240);
    swift_storeEnumTagMultiPayload(v40, v41, 0);
    sub_100040B50((uint64_t)v14, v40 + *(int *)(v33 + 20));
    v42 = v35;
    sub_10001B33C(v40, v35, type metadata accessor for NavigationETAMediumLargeWidgetView);
    swift_storeEnumTagMultiPayload(v35, v34, 1);
    v43 = sub_10001B41C(&qword_10008DA20, type metadata accessor for NavigationETASmallWidgetView, (uint64_t)&unk_10006B660);
    sub_10001B41C(&qword_10008DA10, type metadata accessor for NavigationETAMediumLargeWidgetView, (uint64_t)&unk_10006B6B0);
    _ConditionalContent<>.init(storage:)(v42, v38, v33, v43);
    v44 = v71;
    sub_100016550((uint64_t)v10, v71, &qword_10008DA00);
    swift_storeEnumTagMultiPayload(v44, v72, 0);
    v45 = sub_100040B94();
    sub_100040C30();
    v46 = (uint64_t)v74;
    _ConditionalContent<>.init(storage:)(v44, v73, v37, v45);
    sub_100015590((uint64_t)v10, &qword_10008DA00);
    sub_100016550(v46, v36, &qword_10008DA08);
    swift_storeEnumTagMultiPayload(v36, v67, 0);
    v47 = sub_100040CB4();
    _ConditionalContent<>.init(storage:)(v36, v75, &type metadata for Never, v47);
    sub_100015590(v46, &qword_10008DA08);
    v31 = v40;
LABEL_7:
    v32 = type metadata accessor for NavigationETAMediumLargeWidgetView;
    return sub_10001B54C(v31, v32);
  }
  if (v23 == enum case for WidgetFamily.systemLarge(_:))
  {
    v48 = v66;
    sub_10001B33C(v22, (uint64_t)v14, type metadata accessor for NavigationETAEntryContent);
    v49 = swift_getKeyPath(&unk_10006B5D8);
    v50 = (uint64_t)v64;
    *v64 = v49;
    v51 = sub_1000027AC(&qword_10008C240);
    swift_storeEnumTagMultiPayload(v50, v51, 0);
    sub_100040B50((uint64_t)v14, v50 + *(int *)(v33 + 20));
    v52 = v62;
    sub_10001B33C(v50, v62, type metadata accessor for NavigationETAMediumLargeWidgetView);
    swift_storeEnumTagMultiPayload(v52, v61, 0);
    v53 = sub_10001B41C(&qword_10008DA10, type metadata accessor for NavigationETAMediumLargeWidgetView, (uint64_t)&unk_10006B6B0);
    v54 = (uint64_t)v63;
    _ConditionalContent<>.init(storage:)(v52, v48, &type metadata for Never, v53);
    v55 = v71;
    sub_100016550(v54, v71, &qword_10008D9E0);
    swift_storeEnumTagMultiPayload(v55, v72, 1);
    v56 = sub_100040B94();
    sub_100040C30();
    v57 = (uint64_t)v74;
    _ConditionalContent<>.init(storage:)(v55, v73, v37, v56);
    sub_100015590(v54, &qword_10008D9E0);
    sub_100016550(v57, v36, &qword_10008DA08);
    swift_storeEnumTagMultiPayload(v36, v67, 0);
    v58 = sub_100040CB4();
    _ConditionalContent<>.init(storage:)(v36, v75, &type metadata for Never, v58);
    sub_100015590(v57, &qword_10008DA08);
    v31 = v50;
    goto LABEL_7;
  }
  if (v23 == enum case for WidgetFamily.systemExtraLarge(_:)
    || v23 == enum case for WidgetFamily.accessoryCircular(_:)
    || v23 == enum case for WidgetFamily.accessoryRectangular(_:)
    || v23 == enum case for WidgetFamily.accessoryInline(_:))
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, 0x8000000100079690, "GeneralMapsWidget/NavigationETAWidgetViews.swift", 48, 2, 81, 0);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "GeneralMapsWidget/NavigationETAWidgetViews.swift", 48, 2, 83, 0);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for NavigationETAMediumLargeWidgetView(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008DA90, (uint64_t)&nominal type descriptor for NavigationETAMediumLargeWidgetView);
}

uint64_t type metadata accessor for NavigationETASmallWidgetView(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008DB20, (uint64_t)&nominal type descriptor for NavigationETASmallWidgetView);
}

uint64_t sub_100040AF8()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_100040B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100041CD0(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_100040B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100041CD0(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_100040B50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NavigationETAEntryContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100040B94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008DA18;
  if (!qword_10008DA18)
  {
    v1 = sub_1000027EC(&qword_10008DA00);
    sub_10001B41C(&qword_10008DA20, type metadata accessor for NavigationETASmallWidgetView, (uint64_t)&unk_10006B660);
    sub_10001B41C(&qword_10008DA10, type metadata accessor for NavigationETAMediumLargeWidgetView, (uint64_t)&unk_10006B6B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008DA18);
  }
  return result;
}

unint64_t sub_100040C30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008DA28;
  if (!qword_10008DA28)
  {
    v1 = sub_1000027EC(&qword_10008D9E0);
    sub_10001B41C(&qword_10008DA10, type metadata accessor for NavigationETAMediumLargeWidgetView, (uint64_t)&unk_10006B6B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008DA28);
  }
  return result;
}

unint64_t sub_100040CB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008DA30;
  if (!qword_10008DA30)
  {
    v1 = sub_1000027EC(&qword_10008DA08);
    sub_100040B94();
    sub_100040C30();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008DA30);
  }
  return result;
}

uint64_t sub_100040D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100040D44);
}

uint64_t sub_100040D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100040D54);
}

void sub_100040D5C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_10001B658(319, (unint64_t *)&unk_10008C2E8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for NavigationETAEntryContent(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

uint64_t *sub_100040DF0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_1000027AC(&qword_10008C240);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *(void **)((char *)a2 + v14);
    if (v17 == (void *)1)
    {
      *(_OWORD *)v15 = *(_OWORD *)v16;
    }
    else
    {
      v18 = (void *)*((_QWORD *)v16 + 1);
      *(_QWORD *)v15 = v17;
      *((_QWORD *)v15 + 1) = v18;
      v19 = v17;
      v20 = v18;
    }
    v21 = *((_QWORD *)v16 + 3);
    *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
    *((_QWORD *)v15 + 3) = v21;
    *((_DWORD *)v15 + 8) = *((_DWORD *)v16 + 8);
    v15[36] = v16[36];
    v22 = *((_QWORD *)v16 + 6);
    *((_QWORD *)v15 + 5) = *((_QWORD *)v16 + 5);
    *((_QWORD *)v15 + 6) = v22;
    v15[56] = v16[56];
    v23 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
    v24 = &v15[v23];
    v25 = &v16[v23];
    v26 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    if (v28(v25, 1, v26))
    {
      v29 = sub_1000027AC(&qword_10008BA68);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v30 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v24, v25, v30);
      v31 = *(int *)(v26 + 20);
      v32 = &v24[v31];
      v33 = &v25[v31];
      v34 = *(void **)&v25[v31];
      if (v34 == (void *)1)
      {
        *(_OWORD *)v32 = *(_OWORD *)v33;
      }
      else
      {
        v35 = (void *)*((_QWORD *)v33 + 1);
        *(_QWORD *)v32 = v34;
        *((_QWORD *)v32 + 1) = v35;
        v36 = v34;
        v37 = v35;
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
  }
  return a1;
}

void sub_100041004(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;

  v4 = sub_1000027AC(&qword_10008C240);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (id *)((char *)a1 + *(int *)(a2 + 20));
  if (*v6 != (id)1)
  {

  }
  swift_bridgeObjectRelease(v6[3]);
  swift_bridgeObjectRelease(v6[6]);
  v7 = (char *)v6 + *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v8 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    v9 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
    v10 = (id *)&v7[*(int *)(v8 + 20)];
    if (*v10 != (id)1)
    {

    }
  }
}

uint64_t *sub_100041118(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;

  v6 = sub_1000027AC(&qword_10008C240);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(void **)((char *)a2 + v12);
  if (v15 == (void *)1)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  else
  {
    v16 = (void *)*((_QWORD *)v14 + 1);
    *(_QWORD *)v13 = v15;
    *((_QWORD *)v13 + 1) = v16;
    v17 = v15;
    v18 = v16;
  }
  v19 = *((_QWORD *)v14 + 3);
  *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
  *((_QWORD *)v13 + 3) = v19;
  *((_DWORD *)v13 + 8) = *((_DWORD *)v14 + 8);
  v13[36] = v14[36];
  v20 = *((_QWORD *)v14 + 6);
  *((_QWORD *)v13 + 5) = *((_QWORD *)v14 + 5);
  *((_QWORD *)v13 + 6) = v20;
  v13[56] = v14[56];
  v21 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v22 = &v13[v21];
  v23 = &v14[v21];
  v24 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  if (v26(v23, 1, v24))
  {
    v27 = sub_1000027AC(&qword_10008BA68);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v28 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v22, v23, v28);
    v29 = *(int *)(v24 + 20);
    v30 = &v22[v29];
    v31 = &v23[v29];
    v32 = *(void **)&v23[v29];
    if (v32 == (void *)1)
    {
      *(_OWORD *)v30 = *(_OWORD *)v31;
    }
    else
    {
      v33 = (void *)*((_QWORD *)v31 + 1);
      *(_QWORD *)v30 = v32;
      *((_QWORD *)v30 + 1) = v33;
      v34 = v32;
      v35 = v33;
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  return a1;
}

uint64_t *sub_100041300(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  id v47;
  void *v48;
  void *v49;
  id v50;
  id v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  void *v56;
  void *v57;
  id v58;

  if (a1 != a2)
  {
    sub_100015590((uint64_t)a1, &qword_10008C240);
    v6 = sub_1000027AC(&qword_10008C240);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(void **)((char *)a1 + v12);
  v16 = *(void **)v14;
  if (v15 == (void *)1)
  {
    if (v16 != (void *)1)
    {
      *(_QWORD *)v13 = v16;
      v17 = (void *)*((_QWORD *)v14 + 1);
      *((_QWORD *)v13 + 1) = v17;
      v18 = v16;
      v19 = v17;
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  if (v16 == (void *)1)
  {
    sub_100016DF4((id *)v13);
LABEL_11:
    *(_OWORD *)v13 = *(_OWORD *)v14;
    goto LABEL_13;
  }
  *(_QWORD *)v13 = v16;
  v20 = v16;

  v21 = (void *)*((_QWORD *)v13 + 1);
  v22 = (void *)*((_QWORD *)v14 + 1);
  *((_QWORD *)v13 + 1) = v22;
  v23 = v22;

LABEL_13:
  *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
  v24 = *((_QWORD *)v14 + 3);
  v25 = *((_QWORD *)v13 + 3);
  *((_QWORD *)v13 + 3) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  v26 = *((_DWORD *)v14 + 8);
  v13[36] = v14[36];
  *((_DWORD *)v13 + 8) = v26;
  *((_QWORD *)v13 + 5) = *((_QWORD *)v14 + 5);
  v27 = *((_QWORD *)v14 + 6);
  v28 = *((_QWORD *)v13 + 6);
  *((_QWORD *)v13 + 6) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  v13[56] = v14[56];
  v29 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v30 = &v13[v29];
  v31 = &v14[v29];
  v32 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  v35 = v34(v30, 1, v32);
  v36 = v34(v31, 1, v32);
  if (!v35)
  {
    if (!v36)
    {
      v43 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 24))(v30, v31, v43);
      v44 = *(int *)(v32 + 20);
      v45 = &v30[v44];
      v46 = &v31[v44];
      v47 = *(id *)v45;
      v48 = *(void **)v46;
      if (*(_QWORD *)v45 == 1)
      {
        if (v48 != (void *)1)
        {
          *(_QWORD *)v45 = v48;
          v49 = (void *)*((_QWORD *)v46 + 1);
          *((_QWORD *)v45 + 1) = v49;
          v50 = v48;
          v51 = v49;
          return a1;
        }
      }
      else
      {
        if (v48 != (void *)1)
        {
          *(_QWORD *)v45 = v48;
          v55 = v48;

          v56 = (void *)*((_QWORD *)v45 + 1);
          v57 = (void *)*((_QWORD *)v46 + 1);
          *((_QWORD *)v45 + 1) = v57;
          v58 = v57;

          return a1;
        }
        sub_100016DF4((id *)v45);
      }
      *(_OWORD *)v45 = *(_OWORD *)v46;
      return a1;
    }
    sub_10001B54C((uint64_t)v30, type metadata accessor for NavigationETAEntryContent.ResolvedContent);
    goto LABEL_19;
  }
  if (v36)
  {
LABEL_19:
    v42 = sub_1000027AC(&qword_10008BA68);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    return a1;
  }
  v37 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v30, v31, v37);
  v38 = *(int *)(v32 + 20);
  v39 = &v30[v38];
  v40 = &v31[v38];
  v41 = *(void **)&v31[v38];
  if (v41 == (void *)1)
  {
    *(_OWORD *)v39 = *(_OWORD *)v40;
  }
  else
  {
    *(_QWORD *)v39 = v41;
    v52 = (void *)*((_QWORD *)v40 + 1);
    *((_QWORD *)v39 + 1) = v52;
    v53 = v41;
    v54 = v52;
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  return a1;
}

char *sub_100041630(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_1000027AC(&qword_10008C240);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_OWORD *)&a2[v8 + 16];
  *(_OWORD *)v9 = *(_OWORD *)&a2[v8];
  *((_OWORD *)v9 + 1) = v11;
  *((_DWORD *)v9 + 8) = *(_DWORD *)&a2[v8 + 32];
  v9[36] = a2[v8 + 36];
  *(_OWORD *)(v9 + 40) = *(_OWORD *)&a2[v8 + 40];
  v9[56] = a2[v8 + 56];
  v12 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v13 = &v9[v12];
  v14 = &v10[v12];
  v15 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_1000027AC(&qword_10008BA68);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v13, v14, v18);
    *(_OWORD *)&v13[*(int *)(v15 + 20)] = *(_OWORD *)&v14[*(int *)(v15 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

char *sub_1000417AC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  char *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  id v32;
  void *v33;

  if (a1 != a2)
  {
    sub_100015590((uint64_t)a1, &qword_10008C240);
    v6 = sub_1000027AC(&qword_10008C240);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = (id *)&a1[v8];
  v10 = &a2[v8];
  v11 = *(void **)&a1[v8];
  if (v11 == (void *)1)
    goto LABEL_8;
  if (*(_QWORD *)v10 == 1)
  {
    sub_100016DF4(v9);
LABEL_8:
    *(_OWORD *)v9 = *(_OWORD *)v10;
    goto LABEL_10;
  }
  *v9 = *(id *)v10;

  v12 = v9[1];
  v9[1] = (id)*((_QWORD *)v10 + 1);

LABEL_10:
  v13 = (void *)*((_QWORD *)v10 + 3);
  v14 = v9[3];
  v9[2] = (id)*((_QWORD *)v10 + 2);
  v9[3] = v13;
  swift_bridgeObjectRelease(v14);
  *((_DWORD *)v9 + 8) = *((_DWORD *)v10 + 8);
  *((_BYTE *)v9 + 36) = v10[36];
  v15 = (void *)*((_QWORD *)v10 + 6);
  v16 = v9[6];
  v9[5] = (id)*((_QWORD *)v10 + 5);
  v9[6] = v15;
  swift_bridgeObjectRelease(v16);
  *((_BYTE *)v9 + 56) = v10[56];
  v17 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v18 = (char *)v9 + v17;
  v19 = &v10[v17];
  v20 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (v23)
  {
    if (!v24)
    {
      v25 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v18, v19, v25);
      *(_OWORD *)&v18[*(int *)(v20 + 20)] = *(_OWORD *)&v19[*(int *)(v20 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      return a1;
    }
LABEL_15:
    v26 = sub_1000027AC(&qword_10008BA68);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    return a1;
  }
  if (v24)
  {
    sub_10001B54C((uint64_t)v18, type metadata accessor for NavigationETAEntryContent.ResolvedContent);
    goto LABEL_15;
  }
  v28 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 40))(v18, v19, v28);
  v29 = *(int *)(v20 + 20);
  v30 = &v18[v29];
  v31 = &v19[v29];
  v32 = *(id *)v30;
  if (*(_QWORD *)v30 != 1)
  {
    if (*(_QWORD *)v31 != 1)
    {
      *(_QWORD *)v30 = *(_QWORD *)v31;

      v33 = (void *)*((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);

      return a1;
    }
    sub_100016DF4((id *)v30);
  }
  *(_OWORD *)v30 = *(_OWORD *)v31;
  return a1;
}

uint64_t sub_100041A3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100041A48);
}

uint64_t sub_100041A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_1000027AC(&qword_10008C278);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for NavigationETAEntryContent(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100041AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100041AD0);
}

uint64_t sub_100041AD4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_1000027AC(&qword_10008C278);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for NavigationETAEntryContent(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

unint64_t sub_100041B58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008DB58;
  if (!qword_10008DB58)
  {
    v1 = sub_1000027EC(&qword_10008DB60);
    sub_100040CB4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008DB58);
  }
  return result;
}

uint64_t sub_100041BC4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006D274, 1);
}

uint64_t sub_100041BD4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006D24C, 1);
}

uint64_t sub_100041BE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10003FFE0(*(_QWORD *)(v1 + 16), type metadata accessor for NavigationETAMediumLargeWidgetView, a1);
}

uint64_t sub_100041C04()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_100041C24()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_100041C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100041CD0(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(char *))&EnvironmentValues.widgetRenderingMode.setter);
}

uint64_t sub_100041C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100041CD0(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(char *))&EnvironmentValues.widgetRenderingMode.setter);
}

uint64_t sub_100041C7C()
{
  return EnvironmentValues.redactionReasons.getter();
}

uint64_t sub_100041C9C()
{
  return EnvironmentValues.redactionReasons.getter();
}

uint64_t sub_100041CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100041CD0(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for RedactionReasons, (uint64_t (*)(char *))&EnvironmentValues.redactionReasons.setter);
}

uint64_t sub_100041CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  a5(0);
  __chkstk_darwin();
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t sub_100041D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100041CD0(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for RedactionReasons, (uint64_t (*)(char *))&EnvironmentValues.redactionReasons.setter);
}

uint64_t sub_100041D74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10003FFE0(*(_QWORD *)(v1 + 16), type metadata accessor for NavigationETASmallWidgetView, a1);
}

uint64_t sub_100041D94(uint64_t a1)
{
  return sub_100041DCC(a1, &qword_10008DB78, &qword_10008DB70, &qword_10008DBA0);
}

uint64_t sub_100041DB0(uint64_t a1)
{
  return sub_100041DCC(a1, &qword_10008DBD0, &qword_10008DBC8, &qword_10008DBE0);
}

uint64_t sub_100041DCC(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_1000027EC(a2);
  v9 = sub_1000027EC(a3);
  v10 = sub_1000027EC(&qword_10008DB98);
  v11 = sub_10001D82C(a4, a3, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v12 = sub_10001D82C(&qword_10008DBA8, &qword_10008DB98, (uint64_t)&unk_10006A990);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
  v9 = v6;
  v10 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
}

uint64_t sub_100041E94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, int *);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  size_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  void *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v58;
  void *v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  void *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(void *, uint64_t, uint64_t);
  int v72;
  int v73;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v9;
  v10 = *(void **)(a2 + 56);
  if (v8 == (void *)1)
  {
    if (v10 != (void *)1)
    {
      *(_QWORD *)(a1 + 56) = v10;
      v11 = *(void **)(a2 + 64);
      *(_QWORD *)(a1 + 64) = v11;
      v12 = v10;
      v13 = v11;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 == (void *)1)
  {
    sub_100016DF4((id *)(a1 + 56));
LABEL_6:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 56) = v10;
  v14 = v10;

  v15 = *(void **)(a1 + 64);
  v16 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v16;
  v17 = v16;

LABEL_8:
  v18 = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = v18;
  v19 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v20 = a1 + v19;
  v21 = (char *)(a2 + v19);
  v22 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v23 = *((_QWORD *)v22 - 1);
  v24 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24((uint64_t)v21, 1, v22);
  if (!v25)
  {
    if (v26)
    {
      sub_1000422B8(v20);
      goto LABEL_14;
    }
    v35 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 24))(v20, v21, v35);
    v36 = v22[5];
    v37 = v20 + v36;
    v38 = &v21[v36];
    v39 = *(void **)(v20 + v36);
    v40 = *(void **)&v21[v36];
    if (v39 == (void *)1)
    {
      if (v40 != (void *)1)
      {
        *(_QWORD *)v37 = v40;
        v41 = (void *)*((_QWORD *)v38 + 1);
        *(_QWORD *)(v37 + 8) = v41;
        v42 = v40;
        v43 = v41;
LABEL_29:
        v62 = v22[6];
        v63 = v20 + v62;
        v64 = &v21[v62];
        v65 = *(_OWORD *)v64;
        *(_BYTE *)(v63 + 16) = v64[16];
        *(_OWORD *)v63 = v65;
        v66 = v22[7];
        v67 = (void *)(v20 + v66);
        v68 = &v21[v66];
        v69 = type metadata accessor for URL(0);
        v70 = *(_QWORD *)(v69 - 8);
        v71 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v70 + 48);
        v72 = v71(v67, 1, v69);
        v73 = v71(v68, 1, v69);
        if (v72)
        {
          if (!v73)
          {
            (*(void (**)(void *, char *, uint64_t))(v70 + 16))(v67, v68, v69);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
            return a1;
          }
        }
        else
        {
          if (!v73)
          {
            (*(void (**)(void *, char *, uint64_t))(v70 + 24))(v67, v68, v69);
            return a1;
          }
          (*(void (**)(void *, uint64_t))(v70 + 8))(v67, v69);
        }
        v32 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA58) - 8) + 64);
        v33 = v67;
        v34 = v68;
        goto LABEL_15;
      }
    }
    else
    {
      if (v40 != (void *)1)
      {
        *(_QWORD *)v37 = v40;
        v58 = v40;

        v59 = *(void **)(v37 + 8);
        v60 = (void *)*((_QWORD *)v38 + 1);
        *(_QWORD *)(v37 + 8) = v60;
        v61 = v60;

        goto LABEL_29;
      }
      sub_100016DF4((id *)v37);
    }
    *(_OWORD *)v37 = *(_OWORD *)v38;
    goto LABEL_29;
  }
  if (v26)
  {
LABEL_14:
    v32 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA60) - 8) + 64);
    v33 = (void *)v20;
    v34 = v21;
LABEL_15:
    memcpy(v33, v34, v32);
    return a1;
  }
  v27 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v20, v21, v27);
  v28 = v22[5];
  v29 = v20 + v28;
  v30 = &v21[v28];
  v31 = *(void **)&v21[v28];
  if (v31 == (void *)1)
  {
    *(_OWORD *)v29 = *(_OWORD *)v30;
  }
  else
  {
    *(_QWORD *)v29 = v31;
    v44 = (void *)*((_QWORD *)v30 + 1);
    *(_QWORD *)(v29 + 8) = v44;
    v45 = v31;
    v46 = v44;
  }
  v47 = v22[6];
  v48 = v20 + v47;
  v49 = &v21[v47];
  v50 = *(_OWORD *)v49;
  *(_BYTE *)(v48 + 16) = v49[16];
  *(_OWORD *)v48 = v50;
  v51 = v22[7];
  v52 = (void *)(v20 + v51);
  v53 = &v21[v51];
  v54 = type metadata accessor for URL(0);
  v55 = *(_QWORD *)(v54 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
  {
    v56 = sub_1000027AC(&qword_10008BA58);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v55 + 16))(v52, v53, v54);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
  return a1;
}

uint64_t sub_1000422B8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000422F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, int *);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void *v37;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(void *, uint64_t, uint64_t);
  int v49;
  int v50;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(void **)(a1 + 56);
  v10 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  if (v9 == (void *)1)
    goto LABEL_4;
  if (v8 == 1)
  {
    sub_100016DF4((id *)(a1 + 56));
LABEL_4:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 56) = v8;

  v11 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);

LABEL_6:
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  v12 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v13 = a1 + v12;
  v14 = (char *)(a2 + v12);
  v15 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17((uint64_t)v14, 1, v15);
  if (!v18)
  {
    if (v19)
    {
      sub_1000422B8(v13);
      goto LABEL_12;
    }
    v33 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 40))(v13, v14, v33);
    v34 = v15[5];
    v35 = v13 + v34;
    v36 = &v14[v34];
    v37 = *(void **)(v13 + v34);
    if (v37 != (void *)1)
    {
      if (*(_QWORD *)v36 != 1)
      {
        *(_QWORD *)v35 = *(_QWORD *)v36;

        v39 = *(void **)(v35 + 8);
        *(_QWORD *)(v35 + 8) = *((_QWORD *)v36 + 1);

        goto LABEL_22;
      }
      sub_100016DF4((id *)v35);
    }
    *(_OWORD *)v35 = *(_OWORD *)v36;
LABEL_22:
    v40 = v15[6];
    v41 = v13 + v40;
    v42 = &v14[v40];
    *(_OWORD *)v41 = *(_OWORD *)v42;
    *(_BYTE *)(v41 + 16) = v42[16];
    v43 = v15[7];
    v44 = (void *)(v13 + v43);
    v45 = &v14[v43];
    v46 = type metadata accessor for URL(0);
    v47 = *(_QWORD *)(v46 - 8);
    v48 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v47 + 48);
    v49 = v48(v44, 1, v46);
    v50 = v48(v45, 1, v46);
    if (v49)
    {
      if (!v50)
      {
        (*(void (**)(void *, char *, uint64_t))(v47 + 32))(v44, v45, v46);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
        return a1;
      }
    }
    else
    {
      if (!v50)
      {
        (*(void (**)(void *, char *, uint64_t))(v47 + 40))(v44, v45, v46);
        return a1;
      }
      (*(void (**)(void *, uint64_t))(v47 + 8))(v44, v46);
    }
    v30 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA58) - 8) + 64);
    v31 = v44;
    v32 = v45;
    goto LABEL_13;
  }
  if (v19)
  {
LABEL_12:
    v30 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA60) - 8) + 64);
    v31 = (void *)v13;
    v32 = v14;
LABEL_13:
    memcpy(v31, v32, v30);
    return a1;
  }
  v20 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v13, v14, v20);
  *(_OWORD *)(v13 + v15[5]) = *(_OWORD *)&v14[v15[5]];
  v21 = v15[6];
  v22 = v13 + v21;
  v23 = &v14[v21];
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *(_BYTE *)(v22 + 16) = v23[16];
  v24 = v15[7];
  v25 = (void *)(v13 + v24);
  v26 = &v14[v24];
  v27 = type metadata accessor for URL(0);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = sub_1000027AC(&qword_10008BA58);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t sub_100042674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100042680);
}

uint64_t sub_100042680(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SuggestedDestinationEntryContent(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000426BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000426C8);
}

uint64_t sub_1000426C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SuggestedDestinationEntryContent(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SuggestedDestinationSmallPlatterContent(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008DC50, (uint64_t)&nominal type descriptor for SuggestedDestinationSmallPlatterContent);
}

uint64_t *sub_10004271C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  char *v35;
  char *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_1000027AC(&qword_10008C240);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_1000027AC(&qword_10008C490);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = *(int *)(a3 + 24);
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = *(uint64_t *)((char *)a2 + v23 + 8);
    *(_QWORD *)v24 = *(uint64_t *)((char *)a2 + v23);
    *((_QWORD *)v24 + 1) = v26;
    v27 = *(uint64_t *)((char *)a2 + v23 + 16);
    v28 = *((_QWORD *)v25 + 3);
    *((_QWORD *)v24 + 2) = v27;
    *((_QWORD *)v24 + 3) = v28;
    v29 = *((_QWORD *)v25 + 5);
    *((_QWORD *)v24 + 4) = *((_QWORD *)v25 + 4);
    *((_QWORD *)v24 + 5) = v29;
    v24[48] = v25[48];
    v30 = (void *)*((_QWORD *)v25 + 7);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v28);
    if (v30 == (void *)1)
    {
      *(_OWORD *)(v24 + 56) = *(_OWORD *)(v25 + 56);
    }
    else
    {
      v31 = (void *)*((_QWORD *)v25 + 8);
      *((_QWORD *)v24 + 7) = v30;
      *((_QWORD *)v24 + 8) = v31;
      v32 = v30;
      v33 = v31;
    }
    *((_DWORD *)v24 + 18) = *((_DWORD *)v25 + 18);
    v24[76] = v25[76];
    v34 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
    v35 = &v24[v34];
    v36 = &v25[v34];
    v37 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
    v38 = *((_QWORD *)v37 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v38 + 48))(v36, 1, v37))
    {
      v39 = sub_1000027AC(&qword_10008BA60);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      v40 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v35, v36, v40);
      v41 = v37[5];
      v42 = &v35[v41];
      v43 = &v36[v41];
      v44 = *(void **)&v36[v41];
      if (v44 == (void *)1)
      {
        *(_OWORD *)v42 = *(_OWORD *)v43;
      }
      else
      {
        v45 = (void *)*((_QWORD *)v43 + 1);
        *(_QWORD *)v42 = v44;
        *((_QWORD *)v42 + 1) = v45;
        v46 = v44;
        v47 = v45;
      }
      v48 = v37[6];
      v49 = &v35[v48];
      v50 = &v36[v48];
      *(_OWORD *)v49 = *(_OWORD *)v50;
      v49[16] = v50[16];
      v51 = v37[7];
      v52 = &v35[v51];
      v53 = &v36[v51];
      v54 = type metadata accessor for URL(0);
      v55 = *(_QWORD *)(v54 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
      {
        v56 = sub_1000027AC(&qword_10008BA58);
        memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v52, v53, v54);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v38 + 56))(v35, 0, 1, v37);
    }
  }
  return a1;
}

uint64_t sub_100042A58(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  id *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = sub_1000027AC(&qword_10008C240);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v7 = sub_1000027AC(&qword_10008C490);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (char *)a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
  v10 = (void *)*((_QWORD *)v9 + 7);
  if (v10 != (void *)1)
  {

  }
  v11 = &v9[*(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40)];
  v12 = type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12);
  if (!(_DWORD)result)
  {
    v14 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v11, v14);
    v15 = (id *)&v11[*(int *)(v12 + 20)];
    if (*v15 != (id)1)
    {

    }
    v16 = &v11[*(int *)(v12 + 28)];
    v17 = type metadata accessor for URL(0);
    v18 = *(_QWORD *)(v17 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v16, v17);
  }
  return result;
}

uint64_t *sub_100042C08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v6 = sub_1000027AC(&qword_10008C240);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = sub_1000027AC(&qword_10008C490);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = *(int *)(a3 + 24);
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(uint64_t *)((char *)a2 + v21 + 8);
  *(_QWORD *)v22 = *(uint64_t *)((char *)a2 + v21);
  *((_QWORD *)v22 + 1) = v24;
  v25 = *(uint64_t *)((char *)a2 + v21 + 16);
  v26 = *((_QWORD *)v23 + 3);
  *((_QWORD *)v22 + 2) = v25;
  *((_QWORD *)v22 + 3) = v26;
  v27 = *((_QWORD *)v23 + 5);
  *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
  *((_QWORD *)v22 + 5) = v27;
  v22[48] = v23[48];
  v28 = (void *)*((_QWORD *)v23 + 7);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v26);
  if (v28 == (void *)1)
  {
    *(_OWORD *)(v22 + 56) = *(_OWORD *)(v23 + 56);
  }
  else
  {
    v29 = (void *)*((_QWORD *)v23 + 8);
    *((_QWORD *)v22 + 7) = v28;
    *((_QWORD *)v22 + 8) = v29;
    v30 = v28;
    v31 = v29;
  }
  *((_DWORD *)v22 + 18) = *((_DWORD *)v23 + 18);
  v22[76] = v23[76];
  v32 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v33 = &v22[v32];
  v34 = &v23[v32];
  v35 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v36 = *((_QWORD *)v35 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v36 + 48))(v34, 1, v35))
  {
    v37 = sub_1000027AC(&qword_10008BA60);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v38 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v33, v34, v38);
    v39 = v35[5];
    v40 = &v33[v39];
    v41 = &v34[v39];
    v42 = *(void **)&v34[v39];
    if (v42 == (void *)1)
    {
      *(_OWORD *)v40 = *(_OWORD *)v41;
    }
    else
    {
      v43 = (void *)*((_QWORD *)v41 + 1);
      *(_QWORD *)v40 = v42;
      *((_QWORD *)v40 + 1) = v43;
      v44 = v42;
      v45 = v43;
    }
    v46 = v35[6];
    v47 = &v33[v46];
    v48 = &v34[v46];
    *(_OWORD *)v47 = *(_OWORD *)v48;
    v47[16] = v48[16];
    v49 = v35[7];
    v50 = &v33[v49];
    v51 = &v34[v49];
    v52 = type metadata accessor for URL(0);
    v53 = *(_QWORD *)(v52 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
    {
      v54 = sub_1000027AC(&qword_10008BA58);
      memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v50, v51, v52);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
  }
  return a1;
}

uint64_t *sub_100042F18(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int *v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, int *);
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void *v51;
  size_t v52;
  void *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void *v59;
  void *v60;
  void *v61;
  id v62;
  id v63;
  void *v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  __int128 v70;
  uint64_t v71;
  void *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v78;
  void *v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  __int128 v85;
  uint64_t v86;
  void *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(void *, uint64_t, uint64_t);
  int v92;
  int v93;

  if (a1 != a2)
  {
    sub_100015590((uint64_t)a1, &qword_10008C240);
    v6 = sub_1000027AC(&qword_10008C240);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = *(int *)(a3 + 20);
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_100015590((uint64_t)a1 + v12, &qword_10008C490);
    v15 = sub_1000027AC(&qword_10008C490);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = *(int *)(a3 + 24);
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  *(_QWORD *)v22 = *(uint64_t *)((char *)a2 + v21);
  v24 = *(uint64_t *)((char *)a2 + v21 + 8);
  v25 = *(uint64_t *)((char *)a1 + v21 + 8);
  *((_QWORD *)v22 + 1) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
  v26 = *((_QWORD *)v23 + 3);
  v27 = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 3) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
  v28 = *((_QWORD *)v23 + 5);
  v22[48] = v23[48];
  *((_QWORD *)v22 + 5) = v28;
  v29 = (void *)*((_QWORD *)v22 + 7);
  v30 = (void *)*((_QWORD *)v23 + 7);
  if (v29 == (void *)1)
  {
    if (v30 != (void *)1)
    {
      *((_QWORD *)v22 + 7) = v30;
      v31 = (void *)*((_QWORD *)v23 + 8);
      *((_QWORD *)v22 + 8) = v31;
      v32 = v30;
      v33 = v31;
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  if (v30 == (void *)1)
  {
    sub_100016DF4((id *)v22 + 7);
LABEL_14:
    *(_OWORD *)(v22 + 56) = *(_OWORD *)(v23 + 56);
    goto LABEL_16;
  }
  *((_QWORD *)v22 + 7) = v30;
  v34 = v30;

  v35 = (void *)*((_QWORD *)v22 + 8);
  v36 = (void *)*((_QWORD *)v23 + 8);
  *((_QWORD *)v22 + 8) = v36;
  v37 = v36;

LABEL_16:
  v38 = *((_DWORD *)v23 + 18);
  v22[76] = v23[76];
  *((_DWORD *)v22 + 18) = v38;
  v39 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v40 = (uint64_t)&v22[v39];
  v41 = &v23[v39];
  v42 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v43 = *((_QWORD *)v42 - 1);
  v44 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v43 + 48);
  v45 = v44(v40, 1, v42);
  v46 = v44((uint64_t)v41, 1, v42);
  if (!v45)
  {
    if (v46)
    {
      sub_1000422B8(v40);
      goto LABEL_22;
    }
    v55 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 24))(v40, v41, v55);
    v56 = v42[5];
    v57 = v40 + v56;
    v58 = &v41[v56];
    v59 = *(void **)(v40 + v56);
    v60 = *(void **)&v41[v56];
    if (v59 == (void *)1)
    {
      if (v60 != (void *)1)
      {
        *(_QWORD *)v57 = v60;
        v61 = (void *)*((_QWORD *)v58 + 1);
        *(_QWORD *)(v57 + 8) = v61;
        v62 = v60;
        v63 = v61;
LABEL_37:
        v82 = v42[6];
        v83 = v40 + v82;
        v84 = &v41[v82];
        v85 = *(_OWORD *)v84;
        *(_BYTE *)(v83 + 16) = v84[16];
        *(_OWORD *)v83 = v85;
        v86 = v42[7];
        v87 = (void *)(v40 + v86);
        v88 = &v41[v86];
        v89 = type metadata accessor for URL(0);
        v90 = *(_QWORD *)(v89 - 8);
        v91 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v90 + 48);
        v92 = v91(v87, 1, v89);
        v93 = v91(v88, 1, v89);
        if (v92)
        {
          if (!v93)
          {
            (*(void (**)(void *, char *, uint64_t))(v90 + 16))(v87, v88, v89);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
            return a1;
          }
        }
        else
        {
          if (!v93)
          {
            (*(void (**)(void *, char *, uint64_t))(v90 + 24))(v87, v88, v89);
            return a1;
          }
          (*(void (**)(void *, uint64_t))(v90 + 8))(v87, v89);
        }
        v52 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA58) - 8) + 64);
        v53 = v87;
        v54 = v88;
        goto LABEL_23;
      }
    }
    else
    {
      if (v60 != (void *)1)
      {
        *(_QWORD *)v57 = v60;
        v78 = v60;

        v79 = *(void **)(v57 + 8);
        v80 = (void *)*((_QWORD *)v58 + 1);
        *(_QWORD *)(v57 + 8) = v80;
        v81 = v80;

        goto LABEL_37;
      }
      sub_100016DF4((id *)v57);
    }
    *(_OWORD *)v57 = *(_OWORD *)v58;
    goto LABEL_37;
  }
  if (v46)
  {
LABEL_22:
    v52 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA60) - 8) + 64);
    v53 = (void *)v40;
    v54 = v41;
LABEL_23:
    memcpy(v53, v54, v52);
    return a1;
  }
  v47 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v40, v41, v47);
  v48 = v42[5];
  v49 = v40 + v48;
  v50 = &v41[v48];
  v51 = *(void **)&v41[v48];
  if (v51 == (void *)1)
  {
    *(_OWORD *)v49 = *(_OWORD *)v50;
  }
  else
  {
    *(_QWORD *)v49 = v51;
    v64 = (void *)*((_QWORD *)v50 + 1);
    *(_QWORD *)(v49 + 8) = v64;
    v65 = v51;
    v66 = v64;
  }
  v67 = v42[6];
  v68 = v40 + v67;
  v69 = &v41[v67];
  v70 = *(_OWORD *)v69;
  *(_BYTE *)(v68 + 16) = v69[16];
  *(_OWORD *)v68 = v70;
  v71 = v42[7];
  v72 = (void *)(v40 + v71);
  v73 = &v41[v71];
  v74 = type metadata accessor for URL(0);
  v75 = *(_QWORD *)(v74 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
  {
    v76 = sub_1000027AC(&qword_10008BA58);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v75 + 16))(v72, v73, v74);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v43 + 56))(v40, 0, 1, v42);
  return a1;
}

char *sub_100043460(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = sub_1000027AC(&qword_10008C240);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_1000027AC(&qword_10008C490);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = *(int *)(a3 + 24);
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(_OWORD *)&a2[v13 + 16];
  *(_OWORD *)v14 = *(_OWORD *)&a2[v13];
  *((_OWORD *)v14 + 1) = v16;
  v17 = *(_QWORD *)&a2[v13 + 40];
  *((_QWORD *)v14 + 4) = *(_QWORD *)&a2[v13 + 32];
  *((_QWORD *)v14 + 5) = v17;
  v14[48] = a2[v13 + 48];
  *(_OWORD *)(v14 + 56) = *(_OWORD *)&a2[v13 + 56];
  v14[76] = a2[v13 + 76];
  *((_DWORD *)v14 + 18) = *(_DWORD *)&a2[v13 + 72];
  v18 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v19 = &v14[v18];
  v20 = &v15[v18];
  v21 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v22 = *((_QWORD *)v21 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_1000027AC(&qword_10008BA60);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v24 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v19, v20, v24);
    *(_OWORD *)&v19[v21[5]] = *(_OWORD *)&v20[v21[5]];
    v25 = v21[6];
    v26 = &v19[v25];
    v27 = &v20[v25];
    *(_OWORD *)v26 = *(_OWORD *)v27;
    v26[16] = v27[16];
    v28 = v21[7];
    v29 = &v19[v28];
    v30 = &v20[v28];
    v31 = type metadata accessor for URL(0);
    v32 = *(_QWORD *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      v33 = sub_1000027AC(&qword_10008BA58);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v29, v30, v31);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

char *sub_100043704(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, int *);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  void *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void *v49;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(void *, uint64_t, uint64_t);
  int v61;
  int v62;

  if (a1 != a2)
  {
    sub_100015590((uint64_t)a1, &qword_10008C240);
    v6 = sub_1000027AC(&qword_10008C240);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = *(int *)(a3 + 20);
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100015590((uint64_t)&a1[v8], &qword_10008C490);
    v11 = sub_1000027AC(&qword_10008C490);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = *(int *)(a3 + 24);
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(_QWORD *)&a2[v13 + 8];
  v17 = *(_QWORD *)&a1[v13 + 8];
  *(_QWORD *)v14 = *(_QWORD *)&a2[v13];
  *((_QWORD *)v14 + 1) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *((_QWORD *)v15 + 3);
  v19 = *((_QWORD *)v14 + 3);
  *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
  *((_QWORD *)v14 + 3) = v18;
  swift_bridgeObjectRelease(v19);
  v20 = *((_QWORD *)v15 + 5);
  *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
  *((_QWORD *)v14 + 5) = v20;
  v14[48] = v15[48];
  v21 = (void *)*((_QWORD *)v14 + 7);
  v22 = *((_QWORD *)v15 + 7);
  if (v21 == (void *)1)
    goto LABEL_11;
  if (v22 == 1)
  {
    sub_100016DF4((id *)v14 + 7);
LABEL_11:
    *(_OWORD *)(v14 + 56) = *(_OWORD *)(v15 + 56);
    goto LABEL_13;
  }
  *((_QWORD *)v14 + 7) = v22;

  v23 = (void *)*((_QWORD *)v14 + 8);
  *((_QWORD *)v14 + 8) = *((_QWORD *)v15 + 8);

LABEL_13:
  *((_DWORD *)v14 + 18) = *((_DWORD *)v15 + 18);
  v14[76] = v15[76];
  v24 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v25 = (uint64_t)&v14[v24];
  v26 = &v15[v24];
  v27 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v28 = *((_QWORD *)v27 - 1);
  v29 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29((uint64_t)v26, 1, v27);
  if (!v30)
  {
    if (v31)
    {
      sub_1000422B8(v25);
      goto LABEL_19;
    }
    v45 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 40))(v25, v26, v45);
    v46 = v27[5];
    v47 = v25 + v46;
    v48 = &v26[v46];
    v49 = *(void **)(v25 + v46);
    if (v49 != (void *)1)
    {
      if (*(_QWORD *)v48 != 1)
      {
        *(_QWORD *)v47 = *(_QWORD *)v48;

        v51 = *(void **)(v47 + 8);
        *(_QWORD *)(v47 + 8) = *((_QWORD *)v48 + 1);

        goto LABEL_29;
      }
      sub_100016DF4((id *)v47);
    }
    *(_OWORD *)v47 = *(_OWORD *)v48;
LABEL_29:
    v52 = v27[6];
    v53 = v25 + v52;
    v54 = &v26[v52];
    *(_OWORD *)v53 = *(_OWORD *)v54;
    *(_BYTE *)(v53 + 16) = v54[16];
    v55 = v27[7];
    v56 = (void *)(v25 + v55);
    v57 = &v26[v55];
    v58 = type metadata accessor for URL(0);
    v59 = *(_QWORD *)(v58 - 8);
    v60 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v59 + 48);
    v61 = v60(v56, 1, v58);
    v62 = v60(v57, 1, v58);
    if (v61)
    {
      if (!v62)
      {
        (*(void (**)(void *, char *, uint64_t))(v59 + 32))(v56, v57, v58);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
        return a1;
      }
    }
    else
    {
      if (!v62)
      {
        (*(void (**)(void *, char *, uint64_t))(v59 + 40))(v56, v57, v58);
        return a1;
      }
      (*(void (**)(void *, uint64_t))(v59 + 8))(v56, v58);
    }
    v42 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA58) - 8) + 64);
    v43 = v56;
    v44 = v57;
    goto LABEL_20;
  }
  if (v31)
  {
LABEL_19:
    v42 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA60) - 8) + 64);
    v43 = (void *)v25;
    v44 = v26;
LABEL_20:
    memcpy(v43, v44, v42);
    return a1;
  }
  v32 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v25, v26, v32);
  *(_OWORD *)(v25 + v27[5]) = *(_OWORD *)&v26[v27[5]];
  v33 = v27[6];
  v34 = v25 + v33;
  v35 = &v26[v33];
  *(_OWORD *)v34 = *(_OWORD *)v35;
  *(_BYTE *)(v34 + 16) = v35[16];
  v36 = v27[7];
  v37 = (void *)(v25 + v36);
  v38 = &v26[v36];
  v39 = type metadata accessor for URL(0);
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    v41 = sub_1000027AC(&qword_10008BA58);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v40 + 32))(v37, v38, v39);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v28 + 56))(v25, 0, 1, v27);
  return a1;
}

uint64_t sub_100043BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100043BAC);
}

uint64_t sub_100043BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_1000027AC(&qword_10008C278);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_1000027AC(&qword_10008DC88);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = type metadata accessor for SuggestedDestinationEntryContent(0);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100043C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100043C58);
}

uint64_t sub_100043C58(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_1000027AC(&qword_10008C278);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_1000027AC(&qword_10008DC88);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for SuggestedDestinationEntryContent(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SuggestedDestinationMediumLargePlatterContent(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008DCE8, (uint64_t)&nominal type descriptor for SuggestedDestinationMediumLargePlatterContent);
}

void sub_100043D14(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_10001B658(319, (unint64_t *)&unk_10008C2E8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001B658(319, &qword_10008C890, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for SuggestedDestinationEntryContent(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_100043DD4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006D314, 1);
}

uint64_t sub_100043DE4@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v4 = sub_1000027AC(&qword_10008DD30);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v22 - v8;
  v10 = sub_1000027AC(&qword_10008DD38);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v22 - v15;
  *(_QWORD *)v16 = static VerticalAlignment.center.getter(v14);
  *((_QWORD *)v16 + 1) = 0;
  v16[16] = 1;
  v17 = sub_1000027AC(&qword_10008DD40);
  v18 = sub_100043FAC(a1, (uint64_t)&v16[*(int *)(v17 + 44)]);
  *(_QWORD *)v9 = static VerticalAlignment.center.getter(v18);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v19 = sub_1000027AC(&qword_10008DD48);
  sub_1000442E4((uint64_t)a1, (uint64_t)&v9[*(int *)(v19 + 44)]);
  sub_100016550((uint64_t)v16, (uint64_t)v13, &qword_10008DD38);
  sub_100016550((uint64_t)v9, (uint64_t)v7, &qword_10008DD30);
  sub_100016550((uint64_t)v13, a2, &qword_10008DD38);
  v20 = sub_1000027AC(&qword_10008DD50);
  sub_100016550((uint64_t)v7, a2 + *(int *)(v20 + 48), &qword_10008DD30);
  sub_100015590((uint64_t)v9, &qword_10008DD30);
  sub_100015590((uint64_t)v16, &qword_10008DD38);
  sub_100015590((uint64_t)v7, &qword_10008DD30);
  return sub_100015590((uint64_t)v13, &qword_10008DD38);
}

uint64_t sub_100043FAC@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _BYTE *v44;
  uint64_t OpaqueTypeConformance2;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v51[4];
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  char v63;
  uint64_t v64;

  v60 = a2;
  v3 = sub_1000027AC(&qword_10008DD70);
  v4 = *(_QWORD *)(v3 - 8);
  v58 = v3;
  v59 = v4;
  __chkstk_darwin(v3);
  v56 = &v51[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_1000027AC(&qword_10008DD78);
  v7 = __chkstk_darwin(v6);
  v9 = &v51[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v57 = &v51[-v10];
  v11 = *a1;
  v12 = a1[1];
  v61 = v11;
  v62 = v12;
  v13 = sub_10001D720();
  swift_bridgeObjectRetain(v12);
  v14 = Text.init<A>(_:)(&v61, &type metadata for String, v13);
  v53 = v15;
  v54 = v14;
  v16 = v15;
  v18 = v17;
  v55 = v17;
  v20 = v19 & 1;
  v52 = v19 & 1;
  LODWORD(v61) = static HierarchicalShapeStyle.primary.getter();
  v21 = Text.foregroundStyle<A>(_:)(&v61, v14, v16, v20, v18, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v23 = v22;
  v25 = v24;
  v27 = v26 & 1;
  v28 = static Font.subheadline.getter();
  v29 = Text.font(_:)(v28, v21, v23, v27, v25);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  swift_release(v28);
  sub_10001D86C(v21, v23, v27);
  v36 = swift_bridgeObjectRelease(v25);
  v37 = static Font.Weight.bold.getter(v36);
  v38 = Text.fontWeight(_:)(*(_QWORD *)&v37, 0, v29, v31, v33 & 1, v35);
  v40 = v39;
  v42 = v41;
  LOBYTE(v27) = v43 & 1;
  sub_10001D86C(v29, v31, v33 & 1);
  swift_bridgeObjectRelease(v35);
  sub_10001D86C(v54, v53, v52);
  swift_bridgeObjectRelease(v55);
  v61 = (void *)v38;
  v62 = (void *)v40;
  v63 = v27;
  v64 = v42;
  v44 = v56;
  View.privacySensitive(_:)(1, &type metadata for Text, &protocol witness table for Text);
  sub_10001D86C(v38, v40, v27);
  swift_bridgeObjectRelease(v42);
  v61 = &type metadata for Text;
  v62 = &protocol witness table for Text;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v61, &opaque type descriptor for <<opaque return type of View.privacySensitive(_:)>>, 1);
  v46 = v58;
  View.accessibility(identifier:)(0xD00000000000001ALL, 0x8000000100079FA0, v58, OpaqueTypeConformance2);
  (*(void (**)(_BYTE *, uint64_t))(v59 + 8))(v44, v46);
  v47 = v57;
  sub_10001565C((uint64_t)v9, (uint64_t)v57, &qword_10008DD78);
  sub_100016550((uint64_t)v47, (uint64_t)v9, &qword_10008DD78);
  v48 = v60;
  sub_100016550((uint64_t)v9, v60, &qword_10008DD78);
  v49 = v48 + *(int *)(sub_1000027AC(&qword_10008DD80) + 48);
  *(_QWORD *)v49 = 0;
  *(_BYTE *)(v49 + 8) = 1;
  sub_100015590((uint64_t)v47, &qword_10008DD78);
  return sub_100015590((uint64_t)v9, &qword_10008DD78);
}

uint64_t sub_1000442E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t OpaqueTypeConformance2;
  char *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  char v63;
  uint64_t v64;

  v60 = a2;
  v3 = sub_1000027AC(&qword_10008D488);
  v4 = *(_QWORD *)(v3 - 8);
  v56 = v3;
  v57 = v4;
  __chkstk_darwin(v3);
  v52 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000027AC(&qword_10008DD58);
  v7 = *(_QWORD *)(v6 - 8);
  v58 = v6;
  v59 = v7;
  __chkstk_darwin(v6);
  v53 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000027AC(&qword_10008DD60);
  v10 = __chkstk_darwin(v9);
  v54 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v55 = (uint64_t)&v49 - v12;
  v13 = *(void **)(a1 + 24);
  v61 = *(void **)(a1 + 16);
  v62 = v13;
  v14 = sub_10001D720();
  swift_bridgeObjectRetain(v13);
  v15 = Text.init<A>(_:)(&v61, &type metadata for String, v14);
  v49 = v16;
  v50 = v15;
  v17 = v16;
  v19 = v18;
  v51 = v18;
  v21 = v20 & 1;
  LODWORD(v61) = static HierarchicalShapeStyle.secondary.getter();
  v22 = Text.foregroundStyle<A>(_:)(&v61, v15, v17, v21, v19, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  v29 = static Font.footnote.getter();
  v30 = Text.font(_:)(v29, v22, v24, v28, v26);
  v32 = v31;
  LOBYTE(v15) = v33;
  v35 = v34;
  swift_release(v29);
  sub_10001D86C(v22, v24, v28);
  swift_bridgeObjectRelease(v26);
  sub_10001D86C(v50, v49, v21);
  swift_bridgeObjectRelease(v51);
  v61 = (void *)v30;
  v62 = (void *)v32;
  v63 = v15 & 1;
  v64 = v35;
  v36 = v52;
  View.widgetAccentable(_:)(1, &type metadata for Text, &protocol witness table for Text);
  sub_10001D86C(v30, v32, v15 & 1);
  swift_bridgeObjectRelease(v35);
  v61 = &type metadata for Text;
  v62 = &protocol witness table for Text;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v61, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
  v38 = v53;
  v39 = (void *)v56;
  View.privacySensitive(_:)(1, v56, OpaqueTypeConformance2);
  (*(void (**)(char *, void *))(v57 + 8))(v36, v39);
  v61 = v39;
  v62 = (void *)OpaqueTypeConformance2;
  v40 = swift_getOpaqueTypeConformance2(&v61, &opaque type descriptor for <<opaque return type of View.privacySensitive(_:)>>, 1);
  v41 = (uint64_t)v54;
  v42 = v58;
  View.accessibility(identifier:)(0xD00000000000001DLL, 0x8000000100079F80, v58, v40);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v38, v42);
  v43 = v55;
  sub_10001565C(v41, v55, &qword_10008DD60);
  sub_100016550(v43, v41, &qword_10008DD60);
  v44 = v41;
  v45 = v41;
  v46 = v60;
  sub_100016550(v44, v60, &qword_10008DD60);
  v47 = v46 + *(int *)(sub_1000027AC(&qword_10008DD68) + 48);
  *(_QWORD *)v47 = 0;
  *(_BYTE *)(v47 + 8) = 1;
  sub_100015590(v43, &qword_10008DD60);
  return sub_100015590(v45, &qword_10008DD60);
}

uint64_t sub_10004466C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100039250(a1, 1, &qword_10008DD28, (uint64_t (*)(uint64_t))sub_100043DE4, a2);
}

uint64_t sub_100044684@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  int v27;
  uint64_t (*v28)(char *, uint64_t);
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  void *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v49 = a2;
  v3 = sub_1000027AC(&qword_10008DD30);
  v4 = __chkstk_darwin(v3);
  v50 = (uint64_t)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v47 = (uint64_t *)((char *)&v45 - v6);
  v7 = sub_1000027AC(&qword_10008DD38);
  v8 = __chkstk_darwin(v7);
  v48 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v45 - v10;
  v12 = type metadata accessor for ColorScheme(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v45 - v17;
  v19 = sub_1000027AC(&qword_10008DD90);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v45 - v23;
  v25 = a1 + *(int *)(type metadata accessor for SuggestedDestinationMediumLargePlatterContent(0) + 24);
  v26 = *(void **)(v25 + 56);
  if (v26 == (void *)1)
    goto LABEL_6;
  v46 = *(void **)(v25 + 64);
  sub_100052044((uint64_t)v18);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
  v27 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v16, v12);
  if (v27 == enum case for ColorScheme.light(_:) || (v26 = v46, v27 == enum case for ColorScheme.dark(_:)))
  {
    v28 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
    v29 = v26;
    v30 = v28(v18, v12);
    if (v26)
    {
      *(_QWORD *)v24 = static VerticalAlignment.center.getter(v30);
      *((_QWORD *)v24 + 1) = 0;
      v24[16] = 1;
      v31 = sub_1000027AC(&qword_10008DDA8);
      sub_100044AD4(v29, a1, (uint64_t)&v24[*(int *)(v31 + 44)]);

      v32 = sub_1000027AC(&qword_10008DD98);
      v33 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v24, 0, 1, v32);
LABEL_7:
      *(_QWORD *)v11 = static VerticalAlignment.center.getter(v33);
      *((_QWORD *)v11 + 1) = 0;
      v11[16] = 1;
      v35 = sub_1000027AC(&qword_10008DD40);
      v36 = sub_10004538C(a1, (uint64_t)&v11[*(int *)(v35 + 44)]);
      v37 = static VerticalAlignment.center.getter(v36);
      v38 = (uint64_t)v47;
      *v47 = v37;
      *(_QWORD *)(v38 + 8) = 0;
      *(_BYTE *)(v38 + 16) = 1;
      v39 = sub_1000027AC(&qword_10008DD48);
      sub_1000456D4(a1, v38 + *(int *)(v39 + 44));
      sub_100016550((uint64_t)v24, (uint64_t)v22, &qword_10008DD90);
      v40 = v48;
      sub_100016550((uint64_t)v11, v48, &qword_10008DD38);
      v41 = v50;
      sub_100016550(v38, v50, &qword_10008DD30);
      v42 = v49;
      sub_100016550((uint64_t)v22, v49, &qword_10008DD90);
      v43 = sub_1000027AC(&qword_10008DDA0);
      sub_100016550(v40, v42 + *(int *)(v43 + 48), &qword_10008DD38);
      sub_100016550(v41, v42 + *(int *)(v43 + 64), &qword_10008DD30);
      sub_100015590(v38, &qword_10008DD30);
      sub_100015590((uint64_t)v11, &qword_10008DD38);
      sub_100015590((uint64_t)v24, &qword_10008DD90);
      sub_100015590(v41, &qword_10008DD30);
      sub_100015590(v40, &qword_10008DD38);
      return sub_100015590((uint64_t)v22, &qword_10008DD90);
    }
LABEL_6:
    v34 = sub_1000027AC(&qword_10008DD98);
    v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v24, 1, 1, v34);
    goto LABEL_7;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "GeneralMapsWidget/ColorSchemeSpecificImageSet.swift", 51, 2, 24, 0);
  __break(1u);
  return result;
}

uint64_t sub_100044AD4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  unint64_t v46;
  char *v47;
  uint64_t OpaqueTypeConformance2;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD v116[2];
  _OWORD v117[3];

  v108 = a2;
  v115 = a3;
  v114 = sub_1000027AC(&qword_10008DDB0);
  __chkstk_darwin(v114);
  v98 = (uint64_t)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_1000027AC(&qword_10008DDB8);
  __chkstk_darwin(v110);
  v113 = (uint64_t)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_1000027AC(&qword_10008DDC0);
  __chkstk_darwin(v94);
  v96 = (uint64_t)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_1000027AC(&qword_10008DDC8);
  v7 = __chkstk_darwin(v111);
  v95 = (uint64_t)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v97 = (uint64_t)&v93 - v9;
  v106 = type metadata accessor for RedactionReasons(0);
  v107 = *(_QWORD *)(v106 - 8);
  v10 = __chkstk_darwin(v106);
  v105 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v104 = (uint64_t)&v93 - v12;
  v13 = sub_1000027AC(&qword_10008DDD0);
  v14 = __chkstk_darwin(v13);
  v112 = (uint64_t)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v109 = (char *)&v93 - v16;
  v17 = sub_1000027AC(&qword_10008C6D8);
  __chkstk_darwin(v17);
  v19 = (char *)&v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Image.ResizingMode(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v93 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_1000027AC(&qword_10008C6E8);
  v100 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v25 = (char *)&v93 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1000027AC(&qword_10008C6F0);
  __chkstk_darwin(v26);
  v28 = (char *)&v93 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_1000027AC(&qword_10008DDD8);
  v103 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v99 = (char *)&v93 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_1000027AC(&qword_10008DDE0);
  __chkstk_darwin(v30);
  v32 = (char *)&v93 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = Image.init(uiImage:)(a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v23, enum case for Image.ResizingMode.stretch(_:), v20);
  v34 = Image.resizable(capInsets:resizingMode:)(v23, v33, 0.0, 0.0, 0.0, 0.0);
  swift_release(v33);
  v35 = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  static WidgetAccentedRenderingMode.desaturated.getter(v35);
  v36 = type metadata accessor for WidgetAccentedRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v19, 0, 1, v36);
  Image.widgetAccentedRenderingMode(_:)(v19, v34);
  swift_release(v34);
  v37 = (uint64_t)v19;
  v38 = (uint64_t)v32;
  sub_100015590(v37, &qword_10008C6D8);
  v40 = static Alignment.center.getter(v39);
  _FrameLayout.init(width:height:alignment:)(v117, 0x403E000000000000, 0, 0x403E000000000000, 0, v40, v41);
  v42 = v100;
  v43 = v101;
  (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v28, v25, v101);
  v44 = &v28[*(int *)(v26 + 36)];
  v45 = v117[1];
  *(_OWORD *)v44 = v117[0];
  *((_OWORD *)v44 + 1) = v45;
  *((_OWORD *)v44 + 2) = v117[2];
  (*(void (**)(char *, uint64_t))(v42 + 8))(v25, v43);
  v46 = sub_10001D8C8();
  v47 = v99;
  View.privacySensitive(_:)(1, v26, v46);
  sub_100015590((uint64_t)v28, &qword_10008C6F0);
  v116[0] = v26;
  v116[1] = v46;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v116, &opaque type descriptor for <<opaque return type of View.privacySensitive(_:)>>, 1);
  v49 = v102;
  View.accessibility(identifier:)(0xD000000000000019, 0x8000000100079FC0, v102, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v47, v49);
  type metadata accessor for SuggestedDestinationMediumLargePlatterContent(0);
  v50 = v104;
  v51 = sub_10005233C(v104);
  v52 = v105;
  static RedactionReasons.privacy.getter(v51);
  v53 = sub_10001B41C(&qword_10008C900, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
  v54 = v106;
  LOBYTE(v49) = dispatch thunk of SetAlgebra.isSuperset(of:)(v52, v106, v53);
  v55 = *(void (**)(char *, uint64_t))(v107 + 8);
  v55(v52, v54);
  v56 = ((uint64_t (*)(uint64_t, uint64_t))v55)(v50, v54);
  if ((v49 & 1) != 0)
  {
    v57 = v96;
    v58 = sub_100016550(v38, v96, &qword_10008DDE0);
    *(_WORD *)(v57 + *(int *)(v94 + 36)) = 256;
    v59 = static Edge.Set.bottom.getter(v58);
    v60 = EdgeInsets.init(_all:)(6.0);
    v62 = v61;
    v64 = v63;
    v66 = v65;
    v67 = v95;
    sub_100016550(v57, v95, &qword_10008DDC0);
    v68 = v111;
    v69 = v67 + *(int *)(v111 + 36);
    *(_BYTE *)v69 = v59;
    *(double *)(v69 + 8) = v60;
    *(_QWORD *)(v69 + 16) = v62;
    *(_QWORD *)(v69 + 24) = v64;
    *(_QWORD *)(v69 + 32) = v66;
    *(_BYTE *)(v69 + 40) = 0;
    sub_100015590(v57, &qword_10008DDC0);
    v70 = &qword_10008DDC8;
    v71 = v97;
    sub_10001565C(v67, v97, &qword_10008DDC8);
    v72 = v113;
    sub_100016550(v71, v113, &qword_10008DDC8);
    swift_storeEnumTagMultiPayload(v72, v110, 0);
    v73 = sub_100045BC4(&qword_10008DDE8, &qword_10008DDC8, (void (*)(void))sub_100045A94);
    sub_100045BC4(&qword_10008DE10, &qword_10008DDB0, (void (*)(void))sub_100045B18);
    v74 = (uint64_t)v109;
    v75 = v72;
    v76 = v68;
    v77 = v114;
  }
  else
  {
    v78 = static Edge.Set.bottom.getter(v56);
    v79 = EdgeInsets.init(_all:)(6.0);
    v81 = v80;
    v83 = v82;
    v85 = v84;
    v71 = v98;
    sub_100016550(v38, v98, &qword_10008DDE0);
    v87 = v113;
    v86 = v114;
    v88 = v71 + *(int *)(v114 + 36);
    *(_BYTE *)v88 = v78;
    *(double *)(v88 + 8) = v79;
    *(_QWORD *)(v88 + 16) = v81;
    *(_QWORD *)(v88 + 24) = v83;
    *(_QWORD *)(v88 + 32) = v85;
    *(_BYTE *)(v88 + 40) = 0;
    v70 = &qword_10008DDB0;
    sub_100016550(v71, v87, &qword_10008DDB0);
    swift_storeEnumTagMultiPayload(v87, v110, 1);
    v73 = sub_100045BC4(&qword_10008DDE8, &qword_10008DDC8, (void (*)(void))sub_100045A94);
    sub_100045BC4(&qword_10008DE10, &qword_10008DDB0, (void (*)(void))sub_100045B18);
    v74 = (uint64_t)v109;
    v75 = v87;
    v76 = v111;
    v77 = v86;
  }
  _ConditionalContent<>.init(storage:)(v75, v76, v77, v73);
  sub_100015590(v71, v70);
  v89 = v112;
  sub_100016550(v74, v112, &qword_10008DDD0);
  v90 = v115;
  sub_100016550(v89, v115, &qword_10008DDD0);
  v91 = v90 + *(int *)(sub_1000027AC(&qword_10008DE18) + 48);
  *(_QWORD *)v91 = 0;
  *(_BYTE *)(v91 + 8) = 1;
  sub_100015590(v74, &qword_10008DDD0);
  sub_100015590(v38, &qword_10008DDE0);
  return sub_100015590(v89, &qword_10008DDD0);
}

uint64_t sub_10004538C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _BYTE *v44;
  uint64_t OpaqueTypeConformance2;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v51[4];
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  char v63;
  uint64_t v64;

  v60 = a2;
  v3 = sub_1000027AC(&qword_10008DD70);
  v4 = *(_QWORD *)(v3 - 8);
  v58 = v3;
  v59 = v4;
  __chkstk_darwin(v3);
  v56 = &v51[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_1000027AC(&qword_10008DD78);
  v7 = __chkstk_darwin(v6);
  v9 = &v51[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v57 = &v51[-v10];
  v11 = a1 + *(int *)(type metadata accessor for SuggestedDestinationMediumLargePlatterContent(0) + 24);
  v12 = *(void **)(v11 + 8);
  v61 = *(void **)v11;
  v62 = v12;
  v13 = sub_10001D720();
  swift_bridgeObjectRetain(v12);
  v14 = Text.init<A>(_:)(&v61, &type metadata for String, v13);
  v53 = v15;
  v54 = v14;
  v16 = v15;
  v18 = v17;
  v55 = v17;
  v20 = v19 & 1;
  v52 = v19 & 1;
  LODWORD(v61) = static HierarchicalShapeStyle.primary.getter();
  v21 = Text.foregroundStyle<A>(_:)(&v61, v14, v16, v20, v18, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v23 = v22;
  v25 = v24;
  v27 = v26 & 1;
  v28 = static Font.subheadline.getter();
  v29 = Text.font(_:)(v28, v21, v23, v27, v25);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  swift_release(v28);
  sub_10001D86C(v21, v23, v27);
  v36 = swift_bridgeObjectRelease(v25);
  v37 = static Font.Weight.bold.getter(v36);
  v38 = Text.fontWeight(_:)(*(_QWORD *)&v37, 0, v29, v31, v33 & 1, v35);
  v40 = v39;
  v42 = v41;
  LOBYTE(v27) = v43 & 1;
  sub_10001D86C(v29, v31, v33 & 1);
  swift_bridgeObjectRelease(v35);
  sub_10001D86C(v54, v53, v52);
  swift_bridgeObjectRelease(v55);
  v61 = (void *)v38;
  v62 = (void *)v40;
  v63 = v27;
  v64 = v42;
  v44 = v56;
  View.privacySensitive(_:)(1, &type metadata for Text, &protocol witness table for Text);
  sub_10001D86C(v38, v40, v27);
  swift_bridgeObjectRelease(v42);
  v61 = &type metadata for Text;
  v62 = &protocol witness table for Text;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v61, &opaque type descriptor for <<opaque return type of View.privacySensitive(_:)>>, 1);
  v46 = v58;
  View.accessibility(identifier:)(0xD00000000000001ALL, 0x8000000100079FA0, v58, OpaqueTypeConformance2);
  (*(void (**)(_BYTE *, uint64_t))(v59 + 8))(v44, v46);
  v47 = v57;
  sub_10001565C((uint64_t)v9, (uint64_t)v57, &qword_10008DD78);
  sub_100016550((uint64_t)v47, (uint64_t)v9, &qword_10008DD78);
  v48 = v60;
  sub_100016550((uint64_t)v9, v60, &qword_10008DD78);
  v49 = v48 + *(int *)(sub_1000027AC(&qword_10008DD80) + 48);
  *(_QWORD *)v49 = 0;
  *(_BYTE *)(v49 + 8) = 1;
  sub_100015590((uint64_t)v47, &qword_10008DD78);
  return sub_100015590((uint64_t)v9, &qword_10008DD78);
}

uint64_t sub_1000456D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t OpaqueTypeConformance2;
  char *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  char v64;
  uint64_t v65;

  v61 = a2;
  v3 = sub_1000027AC(&qword_10008D488);
  v4 = *(_QWORD *)(v3 - 8);
  v57 = v3;
  v58 = v4;
  __chkstk_darwin(v3);
  v53 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000027AC(&qword_10008DD58);
  v7 = *(_QWORD *)(v6 - 8);
  v59 = v6;
  v60 = v7;
  __chkstk_darwin(v6);
  v54 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000027AC(&qword_10008DD60);
  v10 = __chkstk_darwin(v9);
  v55 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v56 = (uint64_t)&v50 - v12;
  v13 = a1 + *(int *)(type metadata accessor for SuggestedDestinationMediumLargePlatterContent(0) + 24);
  v14 = *(void **)(v13 + 24);
  v62 = *(void **)(v13 + 16);
  v63 = v14;
  v15 = sub_10001D720();
  swift_bridgeObjectRetain(v14);
  v16 = Text.init<A>(_:)(&v62, &type metadata for String, v15);
  v50 = v17;
  v51 = v16;
  v18 = v17;
  v20 = v19;
  v52 = v19;
  v22 = v21 & 1;
  LODWORD(v62) = static HierarchicalShapeStyle.secondary.getter();
  v23 = Text.foregroundStyle<A>(_:)(&v62, v16, v18, v22, v20, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  v30 = static Font.footnote.getter();
  v31 = Text.font(_:)(v30, v23, v25, v29, v27);
  v33 = v32;
  LOBYTE(v16) = v34;
  v36 = v35;
  swift_release(v30);
  sub_10001D86C(v23, v25, v29);
  swift_bridgeObjectRelease(v27);
  sub_10001D86C(v51, v50, v22);
  swift_bridgeObjectRelease(v52);
  v62 = (void *)v31;
  v63 = (void *)v33;
  v64 = v16 & 1;
  v65 = v36;
  v37 = v53;
  View.widgetAccentable(_:)(1, &type metadata for Text, &protocol witness table for Text);
  sub_10001D86C(v31, v33, v16 & 1);
  swift_bridgeObjectRelease(v36);
  v62 = &type metadata for Text;
  v63 = &protocol witness table for Text;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v62, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
  v39 = v54;
  v40 = (void *)v57;
  View.privacySensitive(_:)(1, v57, OpaqueTypeConformance2);
  (*(void (**)(char *, void *))(v58 + 8))(v37, v40);
  v62 = v40;
  v63 = (void *)OpaqueTypeConformance2;
  v41 = swift_getOpaqueTypeConformance2(&v62, &opaque type descriptor for <<opaque return type of View.privacySensitive(_:)>>, 1);
  v42 = (uint64_t)v55;
  v43 = v59;
  View.accessibility(identifier:)(0xD00000000000001DLL, 0x8000000100079F80, v59, v41);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v39, v43);
  v44 = v56;
  sub_10001565C(v42, v56, &qword_10008DD60);
  sub_100016550(v44, v42, &qword_10008DD60);
  v45 = v42;
  v46 = v42;
  v47 = v61;
  sub_100016550(v45, v61, &qword_10008DD60);
  v48 = v47 + *(int *)(sub_1000027AC(&qword_10008DD68) + 48);
  *(_QWORD *)v48 = 0;
  *(_BYTE *)(v48 + 8) = 1;
  sub_100015590(v44, &qword_10008DD60);
  return sub_100015590(v46, &qword_10008DD60);
}

uint64_t sub_100045A6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100039250(a1, 0, &qword_10008DD88, (uint64_t (*)(uint64_t))sub_100044684, a2);
}

uint64_t sub_100045A84(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006D2EC, 1);
}

unint64_t sub_100045A94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008DDF0;
  if (!qword_10008DDF0)
  {
    v1 = sub_1000027EC(&qword_10008DDC0);
    sub_100045B18();
    sub_10001D82C(&qword_10008DE00, &qword_10008DE08, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008DDF0);
  }
  return result;
}

unint64_t sub_100045B18()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10008DDF8;
  if (!qword_10008DDF8)
  {
    v1 = sub_1000027EC(&qword_10008DDE0);
    v2[0] = sub_1000027EC(&qword_10008C6F0);
    v2[1] = sub_10001D8C8();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.privacySensitive(_:)>>, 1);
    sub_10001B41C(&qword_10008C6D0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008DDF8);
  }
  return result;
}

uint64_t sub_100045BC4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000027EC(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100045C30()
{
  return sub_10001D82C(&qword_10008DE20, &qword_10008DE28, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_100045C5C()
{
  return sub_10001D82C(&qword_10008DE30, &qword_10008DE38, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

id sub_100045C88()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id result;

  v0 = type metadata accessor for StringUtils();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  result = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  qword_100090BC0 = (uint64_t)result;
  return result;
}

uint64_t sub_100045CD8()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for StringUtils()
{
  return objc_opt_self(_TtC17GeneralMapsWidget11StringUtils);
}

uint64_t sub_100045D08(uint64_t a1, uint64_t a2, int a3)
{
  NSBundle v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;

  switch(a3)
  {
    case 0:
      if (qword_10008BA00 != -1)
        swift_once(&qword_10008BA00, sub_100045C88);
      v5.super.isa = (Class)qword_100090BC0;
      v6 = 0xD000000000000012;
      v15 = 0x800000010007A1B0;
      v7 = 0x800000010007A190;
      v8 = 0x6576697264204025;
      v9 = 0xE800000000000000;
      break;
    case 1:
      if (qword_10008BA00 != -1)
        swift_once(&qword_10008BA00, sub_100045C88);
      v5.super.isa = (Class)qword_100090BC0;
      v6 = 0xD000000000000012;
      v15 = 0x800000010007A150;
      v7 = 0x800000010007A130;
      v8 = 0x7274207962204025;
      v9 = 0xED00007469736E61;
      break;
    case 2:
      if (qword_10008BA00 != -1)
        swift_once(&qword_10008BA00, sub_100045C88);
      v5.super.isa = (Class)qword_100090BC0;
      v6 = 0xD000000000000012;
      v15 = 0x800000010007A0F0;
      v7 = 0x800000010007A0D0;
      v8 = 0x6B6C6177204025;
      goto LABEL_17;
    case 3:
      if (qword_10008BA00 != -1)
        swift_once(&qword_10008BA00, sub_100045C88);
      v5.super.isa = (Class)qword_100090BC0;
      v6 = 0xD000000000000012;
      v15 = 0x800000010007A090;
      v7 = 0x800000010007A070;
      v8 = 0x65646972204025;
LABEL_17:
      v9 = 0xE700000000000000;
      break;
    default:
      if (qword_10008BA00 != -1)
        swift_once(&qword_10008BA00, sub_100045C88);
      v5.super.isa = (Class)qword_100090BC0;
      v6 = 0xD00000000000001BLL;
      v15 = 0x800000010007A030;
      v7 = 0x800000010007A010;
      v8 = 16421;
      v9 = 0xE200000000000000;
      break;
  }
  v10 = 0xD000000000000030;
  v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v6, (Swift::String_optional)0, v5, *(Swift::String *)&v8, *(Swift::String *)(&v15 - 1));
  if (a2)
  {
    v12 = sub_1000027AC(&qword_10008DED8);
    v13 = swift_allocObject(v12, 72, 7);
    *(_OWORD *)(v13 + 16) = xmmword_10006B890;
    *(_QWORD *)(v13 + 56) = &type metadata for String;
    *(_QWORD *)(v13 + 64) = sub_10004605C();
    *(_QWORD *)(v13 + 32) = a1;
    *(_QWORD *)(v13 + 40) = a2;
    swift_bridgeObjectRetain(a2);
    a2 = static String.localizedStringWithFormat(_:_:)(v11._countAndFlagsBits, v11._object, v13);
    swift_bridgeObjectRelease(v13);
  }
  swift_bridgeObjectRelease(v11._object);
  return a2;
}

unint64_t sub_10004605C()
{
  unint64_t result;

  result = qword_10008DEE0;
  if (!qword_10008DEE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10008DEE0);
  }
  return result;
}

uint64_t sub_1000460A0(unsigned int a1)
{
  if (a1 > 3)
    return static String._unconditionallyBridgeFromObjectiveC(_:)(MKLaunchOptionsDirectionsModeDefault);
  else
    return static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)*(&off_100082C70 + (int)a1));
}

uint64_t *sub_1000460CC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(void **)((char *)a2 + v8);
    if (v11 == (void *)1)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = (void *)*((_QWORD *)v10 + 1);
      *(_QWORD *)v9 = v11;
      *((_QWORD *)v9 + 1) = v13;
      v14 = v11;
      v15 = v13;
    }
    v16 = a3[6];
    v17 = a3[7];
    v18 = (char *)a1 + v16;
    v19 = (char *)a2 + v16;
    *(_OWORD *)v18 = *(_OWORD *)v19;
    v18[16] = v19[16];
    v20 = (char *)a1 + v17;
    v21 = (char *)a2 + v17;
    v22 = type metadata accessor for URL(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = sub_1000027AC(&qword_10008BA58);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
  }
  return a1;
}

uint64_t sub_100046220(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (id *)(a1 + *(int *)(a2 + 20));
  if (*v5 != (id)1)
  {

  }
  v6 = a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return result;
}

uint64_t sub_1000462D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(void **)(a2 + v7);
  if (v10 == (void *)1)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *(void **)(v9 + 8);
    *(_QWORD *)v8 = v10;
    *(_QWORD *)(v8 + 8) = v11;
    v12 = v10;
    v13 = v11;
  }
  v14 = a3[6];
  v15 = a3[7];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  v18 = (void *)(a1 + v15);
  v19 = (const void *)(a2 + v15);
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = sub_1000027AC(&qword_10008BA58);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t sub_1000463F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;

  v6 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(void **)(a1 + v7);
  v11 = *(void **)(a2 + v7);
  if (v10 == (void *)1)
  {
    if (v11 != (void *)1)
    {
      *(_QWORD *)v8 = v11;
      v12 = *(void **)(v9 + 8);
      *(_QWORD *)(v8 + 8) = v12;
      v13 = v11;
      v14 = v12;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v11 == (void *)1)
  {
    sub_100016DF4((id *)v8);
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  *(_QWORD *)v8 = v11;
  v15 = v11;

  v16 = *(void **)(v8 + 8);
  v17 = *(void **)(v9 + 8);
  *(_QWORD *)(v8 + 8) = v17;
  v18 = v17;

LABEL_8:
  v19 = a3[6];
  v20 = a1 + v19;
  v21 = (__int128 *)(a2 + v19);
  v22 = *v21;
  *(_BYTE *)(v20 + 16) = *((_BYTE *)v21 + 16);
  *(_OWORD *)v20 = v22;
  v23 = a3[7];
  v24 = (void *)(a1 + v23);
  v25 = (void *)(a2 + v23);
  v26 = type metadata accessor for URL(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 24))(v24, v25, v26);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v27 + 8))(v24, v26);
    goto LABEL_13;
  }
  if (v30)
  {
LABEL_13:
    v31 = sub_1000027AC(&qword_10008BA58);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v27 + 16))(v24, v25, v26);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  return a1;
}

uint64_t sub_1000465B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  v10 = a3[7];
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_1000027AC(&qword_10008BA58);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  return a1;
}

uint64_t sub_1000466B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;

  v6 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(void **)(a1 + v7);
  if (v10 == (void *)1)
    goto LABEL_4;
  if (*(_QWORD *)v9 == 1)
  {
    sub_100016DF4((id *)v8);
LABEL_4:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  *(_QWORD *)v8 = *(_QWORD *)v9;

  v11 = *(void **)(v8 + 8);
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);

LABEL_6:
  v12 = a3[6];
  v13 = a3[7];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
  v16 = (void *)(a1 + v13);
  v17 = (void *)(a2 + v13);
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v16, v17, v18);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_11;
  }
  if (v22)
  {
LABEL_11:
    v23 = sub_1000027AC(&qword_10008BA58);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v16, v17, v18);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

uint64_t sub_100046844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100046850);
}

uint64_t sub_100046850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for TimelineProviderContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 2147483645)
  {
    v8 = sub_1000027AC(&qword_10008BA58);
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return ((_DWORD)v11 - 1) & ~(((int)v11 - 1) >> 31);
}

uint64_t sub_100046904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100046910);
}

uint64_t sub_100046910(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for TimelineProviderContext(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483645)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 + 1);
      return result;
    }
    v10 = sub_1000027AC(&qword_10008BA58);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(uint64_t a1)
{
  return sub_100006A5C(a1, (uint64_t *)&unk_10008DF40, (uint64_t)&nominal type descriptor for SuggestedDestinationEntryContent.ResolvedContent);
}

void sub_1000469D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v2 = type metadata accessor for TimelineProviderContext(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_10006B8E0;
    v6[2] = &unk_10006B8F8;
    sub_100006B50(319, (unint64_t *)&unk_10008DF50, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t sub_100046A78(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _OWORD *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v12);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v9;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v11 = a2 + 7;
    v10 = (void *)a2[7];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v10 == (void *)1)
    {
      *(_OWORD *)(a1 + 56) = *v11;
    }
    else
    {
      v13 = (void *)a2[8];
      *(_QWORD *)(a1 + 56) = v10;
      *(_QWORD *)(a1 + 64) = v13;
      v14 = v10;
      v15 = v13;
    }
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
    v16 = *(int *)(a3 + 40);
    v17 = (char *)(a1 + v16);
    v18 = (char *)a2 + v16;
    v19 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
    v20 = *((_QWORD *)v19 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
    {
      v21 = sub_1000027AC(&qword_10008BA60);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v22 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v17, v18, v22);
      v23 = v19[5];
      v24 = &v17[v23];
      v25 = &v18[v23];
      v26 = *(void **)&v18[v23];
      if (v26 == (void *)1)
      {
        *(_OWORD *)v24 = *(_OWORD *)v25;
      }
      else
      {
        v27 = (void *)*((_QWORD *)v25 + 1);
        *(_QWORD *)v24 = v26;
        *((_QWORD *)v24 + 1) = v27;
        v28 = v26;
        v29 = v27;
      }
      v30 = v19[6];
      v31 = &v17[v30];
      v32 = &v18[v30];
      *(_OWORD *)v31 = *(_OWORD *)v32;
      v31[16] = v32[16];
      v33 = v19[7];
      v34 = &v17[v33];
      v35 = &v18[v33];
      v36 = type metadata accessor for URL(0);
      v37 = *(_QWORD *)(v36 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        v38 = sub_1000027AC(&qword_10008BA58);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v20 + 56))(v17, 0, 1, v19);
    }
  }
  return a1;
}

uint64_t sub_100046CB4(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = *(void **)(a1 + 56);
  if (v4 != (void *)1)
  {

  }
  v5 = a1 + *(int *)(a2 + 40);
  v6 = type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
  {
    v8 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v5, v8);
    v9 = (id *)(v5 + *(int *)(v6 + 20));
    if (*v9 != (id)1)
    {

    }
    v10 = v5 + *(int *)(v6 + 28);
    v11 = type metadata accessor for URL(0);
    v12 = *(_QWORD *)(v11 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }
  return result;
}

uint64_t sub_100046DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _OWORD *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = (_OWORD *)(a2 + 56);
  v9 = *(void **)(a2 + 56);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v9 == (void *)1)
  {
    *(_OWORD *)(a1 + 56) = *v10;
  }
  else
  {
    v11 = *(void **)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v11;
    v12 = v9;
    v13 = v11;
  }
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  v14 = *(int *)(a3 + 40);
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v18 = *((_QWORD *)v17 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    v19 = sub_1000027AC(&qword_10008BA60);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v20 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v15, v16, v20);
    v21 = v17[5];
    v22 = &v15[v21];
    v23 = &v16[v21];
    v24 = *(void **)&v16[v21];
    if (v24 == (void *)1)
    {
      *(_OWORD *)v22 = *(_OWORD *)v23;
    }
    else
    {
      v25 = (void *)*((_QWORD *)v23 + 1);
      *(_QWORD *)v22 = v24;
      *((_QWORD *)v22 + 1) = v25;
      v26 = v24;
      v27 = v25;
    }
    v28 = v17[6];
    v29 = &v15[v28];
    v30 = &v16[v28];
    *(_OWORD *)v29 = *(_OWORD *)v30;
    v29[16] = v30[16];
    v31 = v17[7];
    v32 = &v15[v31];
    v33 = &v16[v31];
    v34 = type metadata accessor for URL(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = sub_1000027AC(&qword_10008BA58);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  }
  return a1;
}

uint64_t sub_100046FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, int *);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void *v33;
  size_t v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  void *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v60;
  void *v61;
  void *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  __int128 v67;
  uint64_t v68;
  void *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(void *, uint64_t, uint64_t);
  int v74;
  int v75;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v11;
  v12 = *(void **)(a2 + 56);
  if (v10 == (void *)1)
  {
    if (v12 != (void *)1)
    {
      *(_QWORD *)(a1 + 56) = v12;
      v13 = *(void **)(a2 + 64);
      *(_QWORD *)(a1 + 64) = v13;
      v14 = v12;
      v15 = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v12 == (void *)1)
  {
    sub_100016DF4((id *)(a1 + 56));
LABEL_6:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 56) = v12;
  v16 = v12;

  v17 = *(void **)(a1 + 64);
  v18 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v18;
  v19 = v18;

LABEL_8:
  v20 = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = v20;
  v21 = *(int *)(a3 + 40);
  v22 = a1 + v21;
  v23 = (char *)(a2 + v21);
  v24 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v25 = *((_QWORD *)v24 - 1);
  v26 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26((uint64_t)v23, 1, v24);
  if (!v27)
  {
    if (v28)
    {
      sub_10001B54C(v22, type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent);
      goto LABEL_14;
    }
    v37 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 24))(v22, v23, v37);
    v38 = v24[5];
    v39 = v22 + v38;
    v40 = &v23[v38];
    v41 = *(void **)(v22 + v38);
    v42 = *(void **)&v23[v38];
    if (v41 == (void *)1)
    {
      if (v42 != (void *)1)
      {
        *(_QWORD *)v39 = v42;
        v43 = (void *)*((_QWORD *)v40 + 1);
        *(_QWORD *)(v39 + 8) = v43;
        v44 = v42;
        v45 = v43;
LABEL_29:
        v64 = v24[6];
        v65 = v22 + v64;
        v66 = &v23[v64];
        v67 = *(_OWORD *)v66;
        *(_BYTE *)(v65 + 16) = v66[16];
        *(_OWORD *)v65 = v67;
        v68 = v24[7];
        v69 = (void *)(v22 + v68);
        v70 = &v23[v68];
        v71 = type metadata accessor for URL(0);
        v72 = *(_QWORD *)(v71 - 8);
        v73 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v72 + 48);
        v74 = v73(v69, 1, v71);
        v75 = v73(v70, 1, v71);
        if (v74)
        {
          if (!v75)
          {
            (*(void (**)(void *, char *, uint64_t))(v72 + 16))(v69, v70, v71);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
            return a1;
          }
        }
        else
        {
          if (!v75)
          {
            (*(void (**)(void *, char *, uint64_t))(v72 + 24))(v69, v70, v71);
            return a1;
          }
          (*(void (**)(void *, uint64_t))(v72 + 8))(v69, v71);
        }
        v34 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA58) - 8) + 64);
        v35 = v69;
        v36 = v70;
        goto LABEL_15;
      }
    }
    else
    {
      if (v42 != (void *)1)
      {
        *(_QWORD *)v39 = v42;
        v60 = v42;

        v61 = *(void **)(v39 + 8);
        v62 = (void *)*((_QWORD *)v40 + 1);
        *(_QWORD *)(v39 + 8) = v62;
        v63 = v62;

        goto LABEL_29;
      }
      sub_100016DF4((id *)v39);
    }
    *(_OWORD *)v39 = *(_OWORD *)v40;
    goto LABEL_29;
  }
  if (v28)
  {
LABEL_14:
    v34 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA60) - 8) + 64);
    v35 = (void *)v22;
    v36 = v23;
LABEL_15:
    memcpy(v35, v36, v34);
    return a1;
  }
  v29 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v22, v23, v29);
  v30 = v24[5];
  v31 = v22 + v30;
  v32 = &v23[v30];
  v33 = *(void **)&v23[v30];
  if (v33 == (void *)1)
  {
    *(_OWORD *)v31 = *(_OWORD *)v32;
  }
  else
  {
    *(_QWORD *)v31 = v33;
    v46 = (void *)*((_QWORD *)v32 + 1);
    *(_QWORD *)(v31 + 8) = v46;
    v47 = v33;
    v48 = v46;
  }
  v49 = v24[6];
  v50 = v22 + v49;
  v51 = &v23[v49];
  v52 = *(_OWORD *)v51;
  *(_BYTE *)(v50 + 16) = v51[16];
  *(_OWORD *)v50 = v52;
  v53 = v24[7];
  v54 = (void *)(v22 + v53);
  v55 = &v23[v53];
  v56 = type metadata accessor for URL(0);
  v57 = *(_QWORD *)(v56 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
  {
    v58 = sub_1000027AC(&qword_10008BA58);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v57 + 16))(v54, v55, v56);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v25 + 56))(v22, 0, 1, v24);
  return a1;
}

uint64_t sub_1000473F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  v6 = *(int *)(a3 + 40);
  v7 = (char *)(a2 + v6);
  v8 = (char *)(a1 + v6);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v9 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v10 + 48))(v7, 1, v9))
  {
    v11 = sub_1000027AC(&qword_10008BA60);
    memcpy(v8, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v8, v7, v12);
    *(_OWORD *)&v8[v9[5]] = *(_OWORD *)&v7[v9[5]];
    v13 = v9[6];
    v14 = &v8[v13];
    v15 = &v7[v13];
    *(_OWORD *)v14 = *(_OWORD *)v15;
    v14[16] = v15[16];
    v16 = v9[7];
    v17 = &v8[v16];
    v18 = &v7[v16];
    v19 = type metadata accessor for URL(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = sub_1000027AC(&qword_10008BA58);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v10 + 56))(v8, 0, 1, v9);
  }
  return a1;
}

uint64_t sub_100047598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, int *);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(void *, uint64_t, uint64_t);
  int v51;
  int v52;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(void **)(a1 + 56);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v12;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  if (v11 == (void *)1)
    goto LABEL_4;
  if (v10 == 1)
  {
    sub_100016DF4((id *)(a1 + 56));
LABEL_4:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 56) = v10;

  v13 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);

LABEL_6:
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  v14 = *(int *)(a3 + 40);
  v15 = a1 + v14;
  v16 = (char *)(a2 + v14);
  v17 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19((uint64_t)v16, 1, v17);
  if (!v20)
  {
    if (v21)
    {
      sub_10001B54C(v15, type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent);
      goto LABEL_12;
    }
    v35 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 40))(v15, v16, v35);
    v36 = v17[5];
    v37 = v15 + v36;
    v38 = &v16[v36];
    v39 = *(void **)(v15 + v36);
    if (v39 != (void *)1)
    {
      if (*(_QWORD *)v38 != 1)
      {
        *(_QWORD *)v37 = *(_QWORD *)v38;

        v41 = *(void **)(v37 + 8);
        *(_QWORD *)(v37 + 8) = *((_QWORD *)v38 + 1);

        goto LABEL_22;
      }
      sub_100016DF4((id *)v37);
    }
    *(_OWORD *)v37 = *(_OWORD *)v38;
LABEL_22:
    v42 = v17[6];
    v43 = v15 + v42;
    v44 = &v16[v42];
    *(_OWORD *)v43 = *(_OWORD *)v44;
    *(_BYTE *)(v43 + 16) = v44[16];
    v45 = v17[7];
    v46 = (void *)(v15 + v45);
    v47 = &v16[v45];
    v48 = type metadata accessor for URL(0);
    v49 = *(_QWORD *)(v48 - 8);
    v50 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v49 + 48);
    v51 = v50(v46, 1, v48);
    v52 = v50(v47, 1, v48);
    if (v51)
    {
      if (!v52)
      {
        (*(void (**)(void *, char *, uint64_t))(v49 + 32))(v46, v47, v48);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
        return a1;
      }
    }
    else
    {
      if (!v52)
      {
        (*(void (**)(void *, char *, uint64_t))(v49 + 40))(v46, v47, v48);
        return a1;
      }
      (*(void (**)(void *, uint64_t))(v49 + 8))(v46, v48);
    }
    v32 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA58) - 8) + 64);
    v33 = v46;
    v34 = v47;
    goto LABEL_13;
  }
  if (v21)
  {
LABEL_12:
    v32 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA60) - 8) + 64);
    v33 = (void *)v15;
    v34 = v16;
LABEL_13:
    memcpy(v33, v34, v32);
    return a1;
  }
  v22 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v15, v16, v22);
  *(_OWORD *)(v15 + v17[5]) = *(_OWORD *)&v16[v17[5]];
  v23 = v17[6];
  v24 = v15 + v23;
  v25 = &v16[v23];
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_BYTE *)(v24 + 16) = v25[16];
  v26 = v17[7];
  v27 = (void *)(v15 + v26);
  v28 = &v16[v26];
  v29 = type metadata accessor for URL(0);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = sub_1000027AC(&qword_10008BA58);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t sub_10004791C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100047928);
}

uint64_t sub_100047928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000027AC(&qword_10008BA60);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t sub_1000479A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000479B4);
}

uint64_t sub_1000479B4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1000027AC(&qword_10008BA60);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SuggestedDestinationEntryContent(uint64_t a1)
{
  return sub_100006A5C(a1, (uint64_t *)&unk_10008DFE0, (uint64_t)&nominal type descriptor for SuggestedDestinationEntryContent);
}

void sub_100047A40(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_10006B938;
  v4[1] = &unk_10006B938;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = &unk_10006B950;
  v4[4] = &unk_10006B8E0;
  v4[5] = &unk_10006B968;
  sub_100006B50(319, (unint64_t *)&unk_10008DFF0, type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

_UNKNOWN **sub_100047AF0()
{
  return &off_100082C90;
}

id sub_100047AFC(uint64_t a1)
{
  uint64_t v1;
  id *v2;
  id v3;

  v2 = (id *)(v1 + *(int *)(a1 + 20));
  v3 = *v2;
  sub_100047B5C(*v2, v2[1]);
  return v3;
}

uint64_t sub_100047B34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100016550(v2 + *(int *)(a1 + 40), a2, &qword_10008BA60);
}

id sub_100047B5C(id result, void *a2)
{
  id v2;
  id v3;

  if (result != (id)1)
  {
    v3 = result;
    v2 = a2;
    return v3;
  }
  return result;
}

uint64_t sub_100047B8C(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _OWORD *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(char *, uint64_t, uint64_t);
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v12);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v9;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v11 = a2 + 7;
    v10 = (void *)a2[7];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v10 == (void *)1)
    {
      *(_OWORD *)(a1 + 56) = *v11;
    }
    else
    {
      v13 = (void *)a2[8];
      *(_QWORD *)(a1 + 56) = v10;
      *(_QWORD *)(a1 + 64) = v13;
      v14 = v10;
      v15 = v13;
    }
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
    v16 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
    v17 = (char *)(a1 + v16);
    v18 = (char *)a2 + v16;
    v19 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
    v20 = *((_QWORD *)v19 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
    {
      v21 = sub_1000027AC(&qword_10008BA60);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v23 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v17, v18, v23);
      v24 = v19[5];
      v25 = &v17[v24];
      v26 = &v18[v24];
      v27 = *(void **)&v18[v24];
      if (v27 == (void *)1)
      {
        *(_OWORD *)v25 = *(_OWORD *)v26;
      }
      else
      {
        v28 = (void *)*((_QWORD *)v26 + 1);
        *(_QWORD *)v25 = v27;
        *((_QWORD *)v25 + 1) = v28;
        v29 = v27;
        v30 = v28;
      }
      v31 = v19[6];
      v32 = &v17[v31];
      v33 = &v18[v31];
      *(_OWORD *)v32 = *(_OWORD *)v33;
      v32[16] = v33[16];
      v34 = v19[7];
      v35 = &v17[v34];
      v36 = &v18[v34];
      v37 = type metadata accessor for URL(0);
      v38 = *(_QWORD *)(v37 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
      {
        v39 = sub_1000027AC(&qword_10008BA58);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v20 + 56))(v17, 0, 1, v19);
    }
    v40 = a3[5];
    v41 = a3[6];
    v42 = *(void **)((char *)a2 + v40);
    *(_QWORD *)(a1 + v40) = v42;
    v43 = *(void **)((char *)a2 + v41);
    *(_QWORD *)(a1 + v41) = v43;
    v44 = a3[7];
    v45 = a3[8];
    v46 = *(void **)((char *)a2 + v44);
    *(_QWORD *)(a1 + v44) = v46;
    v47 = *(void **)((char *)a2 + v45);
    *(_QWORD *)(a1 + v45) = v47;
    v48 = a3[9];
    v49 = (void *)(a1 + v48);
    v50 = (char *)a2 + v48;
    v51 = type metadata accessor for UUID(0, v22);
    v52 = *(_QWORD *)(v51 - 8);
    v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
    v54 = v42;
    v55 = v43;
    v56 = v46;
    v57 = v47;
    if (v53(v50, 1, v51))
    {
      v58 = sub_1000027AC(&qword_10008CD10);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v52 + 16))(v49, v50, v51);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
    }
  }
  return a1;
}

uint64_t sub_100047E94(uint64_t a1, int *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = *(void **)(a1 + 56);
  if (v4 != (void *)1)
  {

  }
  v5 = a1 + *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v6 = type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    v7 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
    v8 = (id *)(v5 + *(int *)(v6 + 20));
    if (*v8 != (id)1)
    {

    }
    v9 = v5 + *(int *)(v6 + 28);
    v10 = type metadata accessor for URL(0);
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }

  v12 = a1 + a2[9];
  v14 = type metadata accessor for UUID(0, v13);
  v15 = *(_QWORD *)(v14 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v12, v14);
  return result;
}

uint64_t sub_100048020(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _OWORD *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(const void *, uint64_t, uint64_t);
  id v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = (_OWORD *)(a2 + 56);
  v9 = *(void **)(a2 + 56);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v9 == (void *)1)
  {
    *(_OWORD *)(a1 + 56) = *v10;
  }
  else
  {
    v11 = *(void **)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v11;
    v12 = v9;
    v13 = v11;
  }
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  v14 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v18 = *((_QWORD *)v17 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    v19 = sub_1000027AC(&qword_10008BA60);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v21 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v15, v16, v21);
    v22 = v17[5];
    v23 = &v15[v22];
    v24 = &v16[v22];
    v25 = *(void **)&v16[v22];
    if (v25 == (void *)1)
    {
      *(_OWORD *)v23 = *(_OWORD *)v24;
    }
    else
    {
      v26 = (void *)*((_QWORD *)v24 + 1);
      *(_QWORD *)v23 = v25;
      *((_QWORD *)v23 + 1) = v26;
      v27 = v25;
      v28 = v26;
    }
    v29 = v17[6];
    v30 = &v15[v29];
    v31 = &v16[v29];
    *(_OWORD *)v30 = *(_OWORD *)v31;
    v30[16] = v31[16];
    v32 = v17[7];
    v33 = &v15[v32];
    v34 = &v16[v32];
    v35 = type metadata accessor for URL(0);
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      v37 = sub_1000027AC(&qword_10008BA58);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  }
  v38 = a3[5];
  v39 = a3[6];
  v40 = *(void **)(a2 + v38);
  *(_QWORD *)(a1 + v38) = v40;
  v41 = *(void **)(a2 + v39);
  *(_QWORD *)(a1 + v39) = v41;
  v42 = a3[7];
  v43 = a3[8];
  v44 = *(void **)(a2 + v42);
  *(_QWORD *)(a1 + v42) = v44;
  v45 = *(void **)(a2 + v43);
  *(_QWORD *)(a1 + v43) = v45;
  v46 = a3[9];
  v47 = (void *)(a1 + v46);
  v48 = (const void *)(a2 + v46);
  v49 = type metadata accessor for UUID(0, v20);
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v50 + 48);
  v52 = v40;
  v53 = v41;
  v54 = v44;
  v55 = v45;
  if (v51(v48, 1, v49))
  {
    v56 = sub_1000027AC(&qword_10008CD10);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v50 + 16))(v47, v48, v49);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
  }
  return a1;
}

uint64_t sub_1000482FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, int *);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void *v33;
  size_t v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  void *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  id v62;
  uint64_t v63;
  void *v64;
  void *v65;
  id v66;
  uint64_t v67;
  void *v68;
  void *v69;
  id v70;
  uint64_t v71;
  void *v72;
  void *v73;
  id v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(void *, uint64_t, uint64_t);
  int v82;
  int v83;
  uint64_t v84;
  id v86;
  void *v87;
  void *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  __int128 v93;
  uint64_t v94;
  void *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(void *, uint64_t, uint64_t);
  int v100;
  int v101;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v11;
  v12 = *(void **)(a2 + 56);
  if (v10 == (void *)1)
  {
    if (v12 != (void *)1)
    {
      *(_QWORD *)(a1 + 56) = v12;
      v13 = *(void **)(a2 + 64);
      *(_QWORD *)(a1 + 64) = v13;
      v14 = v12;
      v15 = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v12 == (void *)1)
  {
    sub_100016DF4((id *)(a1 + 56));
LABEL_6:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 56) = v12;
  v16 = v12;

  v17 = *(void **)(a1 + 64);
  v18 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v18;
  v19 = v18;

LABEL_8:
  v20 = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = v20;
  v21 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v22 = a1 + v21;
  v23 = (char *)(a2 + v21);
  v24 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v25 = *((_QWORD *)v24 - 1);
  v26 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26((uint64_t)v23, 1, v24);
  if (!v27)
  {
    if (v28)
    {
      sub_10001B54C(v22, type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent);
      goto LABEL_14;
    }
    v37 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 24))(v22, v23, v37);
    v38 = v24[5];
    v39 = v22 + v38;
    v40 = &v23[v38];
    v41 = *(void **)(v22 + v38);
    v42 = *(void **)&v23[v38];
    if (v41 == (void *)1)
    {
      if (v42 != (void *)1)
      {
        *(_QWORD *)v39 = v42;
        v43 = (void *)*((_QWORD *)v40 + 1);
        *(_QWORD *)(v39 + 8) = v43;
        v44 = v42;
        v45 = v43;
LABEL_36:
        v90 = v24[6];
        v91 = v22 + v90;
        v92 = &v23[v90];
        v93 = *(_OWORD *)v92;
        *(_BYTE *)(v91 + 16) = v92[16];
        *(_OWORD *)v91 = v93;
        v94 = v24[7];
        v95 = (void *)(v22 + v94);
        v96 = &v23[v94];
        v97 = type metadata accessor for URL(0);
        v98 = *(_QWORD *)(v97 - 8);
        v99 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v98 + 48);
        v100 = v99(v95, 1, v97);
        v101 = v99(v96, 1, v97);
        if (v100)
        {
          if (!v101)
          {
            (*(void (**)(void *, char *, uint64_t))(v98 + 16))(v95, v96, v97);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
            goto LABEL_24;
          }
        }
        else
        {
          if (!v101)
          {
            (*(void (**)(void *, char *, uint64_t))(v98 + 24))(v95, v96, v97);
            goto LABEL_24;
          }
          (*(void (**)(void *, uint64_t))(v98 + 8))(v95, v97);
        }
        v34 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA58) - 8) + 64);
        v35 = v95;
        v36 = v96;
LABEL_15:
        memcpy(v35, v36, v34);
        goto LABEL_24;
      }
    }
    else
    {
      if (v42 != (void *)1)
      {
        *(_QWORD *)v39 = v42;
        v86 = v42;

        v87 = *(void **)(v39 + 8);
        v88 = (void *)*((_QWORD *)v40 + 1);
        *(_QWORD *)(v39 + 8) = v88;
        v89 = v88;

        goto LABEL_36;
      }
      sub_100016DF4((id *)v39);
    }
    *(_OWORD *)v39 = *(_OWORD *)v40;
    goto LABEL_36;
  }
  if (v28)
  {
LABEL_14:
    v34 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA60) - 8) + 64);
    v35 = (void *)v22;
    v36 = v23;
    goto LABEL_15;
  }
  v29 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v22, v23, v29);
  v30 = v24[5];
  v31 = v22 + v30;
  v32 = &v23[v30];
  v33 = *(void **)&v23[v30];
  if (v33 == (void *)1)
  {
    *(_OWORD *)v31 = *(_OWORD *)v32;
  }
  else
  {
    *(_QWORD *)v31 = v33;
    v46 = (void *)*((_QWORD *)v32 + 1);
    *(_QWORD *)(v31 + 8) = v46;
    v47 = v33;
    v48 = v46;
  }
  v49 = v24[6];
  v50 = v22 + v49;
  v51 = &v23[v49];
  v52 = *(_OWORD *)v51;
  *(_BYTE *)(v50 + 16) = v51[16];
  *(_OWORD *)v50 = v52;
  v53 = v24[7];
  v54 = (void *)(v22 + v53);
  v55 = &v23[v53];
  v56 = type metadata accessor for URL(0);
  v57 = *(_QWORD *)(v56 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
  {
    v58 = sub_1000027AC(&qword_10008BA58);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v57 + 16))(v54, v55, v56);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v25 + 56))(v22, 0, 1, v24);
LABEL_24:
  v59 = a3[5];
  v60 = *(void **)(a1 + v59);
  v61 = *(void **)(a2 + v59);
  *(_QWORD *)(a1 + v59) = v61;
  v62 = v61;

  v63 = a3[6];
  v64 = *(void **)(a2 + v63);
  v65 = *(void **)(a1 + v63);
  *(_QWORD *)(a1 + v63) = v64;
  v66 = v64;

  v67 = a3[7];
  v68 = *(void **)(a1 + v67);
  v69 = *(void **)(a2 + v67);
  *(_QWORD *)(a1 + v67) = v69;
  v70 = v69;

  v71 = a3[8];
  v72 = *(void **)(a1 + v71);
  v73 = *(void **)(a2 + v71);
  *(_QWORD *)(a1 + v71) = v73;
  v74 = v73;

  v75 = a3[9];
  v76 = (void *)(a1 + v75);
  v77 = (void *)(a2 + v75);
  v79 = type metadata accessor for UUID(0, v78);
  v80 = *(_QWORD *)(v79 - 8);
  v81 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v80 + 48);
  v82 = v81(v76, 1, v79);
  v83 = v81(v77, 1, v79);
  if (!v82)
  {
    if (!v83)
    {
      (*(void (**)(void *, void *, uint64_t))(v80 + 24))(v76, v77, v79);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v80 + 8))(v76, v79);
    goto LABEL_29;
  }
  if (v83)
  {
LABEL_29:
    v84 = sub_1000027AC(&qword_10008CD10);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v80 + 16))(v76, v77, v79);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v76, 0, 1, v79);
  return a1;
}

uint64_t sub_10004885C(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v8 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000027AC(&qword_10008BA60);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v15 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v9, v10, v15);
    *(_OWORD *)&v9[v11[5]] = *(_OWORD *)&v10[v11[5]];
    v16 = v11[6];
    v17 = &v9[v16];
    v18 = &v10[v16];
    *(_OWORD *)v17 = *(_OWORD *)v18;
    v17[16] = v18[16];
    v19 = v11[7];
    v20 = &v9[v19];
    v21 = &v10[v19];
    v22 = type metadata accessor for URL(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = sub_1000027AC(&qword_10008BA58);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v25 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v25) = *(_QWORD *)(a2 + v25);
  v26 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v26) = *(_QWORD *)(a2 + v26);
  v27 = a3[9];
  v28 = (void *)(a1 + v27);
  v29 = (const void *)(a2 + v27);
  v30 = type metadata accessor for UUID(0, v14);
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    v32 = sub_1000027AC(&qword_10008CD10);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v31 + 32))(v28, v29, v30);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  return a1;
}

uint64_t sub_100048AC4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, int *);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(void *, uint64_t, uint64_t);
  int v55;
  int v56;
  uint64_t v57;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(void *, uint64_t, uint64_t);
  int v69;
  int v70;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(void **)(a1 + 56);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v12;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  if (v11 == (void *)1)
    goto LABEL_4;
  if (v10 == 1)
  {
    sub_100016DF4((id *)(a1 + 56));
LABEL_4:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 56) = v10;

  v13 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);

LABEL_6:
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  v14 = *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v15 = a1 + v14;
  v16 = (char *)(a2 + v14);
  v17 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19((uint64_t)v16, 1, v17);
  if (!v20)
  {
    if (v21)
    {
      sub_10001B54C(v15, type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent);
      goto LABEL_12;
    }
    v35 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 40))(v15, v16, v35);
    v36 = v17[5];
    v37 = v15 + v36;
    v38 = &v16[v36];
    v39 = *(void **)(v15 + v36);
    if (v39 != (void *)1)
    {
      if (*(_QWORD *)v38 != 1)
      {
        *(_QWORD *)v37 = *(_QWORD *)v38;

        v59 = *(void **)(v37 + 8);
        *(_QWORD *)(v37 + 8) = *((_QWORD *)v38 + 1);

        goto LABEL_29;
      }
      sub_100016DF4((id *)v37);
    }
    *(_OWORD *)v37 = *(_OWORD *)v38;
LABEL_29:
    v60 = v17[6];
    v61 = v15 + v60;
    v62 = &v16[v60];
    *(_OWORD *)v61 = *(_OWORD *)v62;
    *(_BYTE *)(v61 + 16) = v62[16];
    v63 = v17[7];
    v64 = (void *)(v15 + v63);
    v65 = &v16[v63];
    v66 = type metadata accessor for URL(0);
    v67 = *(_QWORD *)(v66 - 8);
    v68 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v67 + 48);
    v69 = v68(v64, 1, v66);
    v70 = v68(v65, 1, v66);
    if (v69)
    {
      if (!v70)
      {
        (*(void (**)(void *, char *, uint64_t))(v67 + 32))(v64, v65, v66);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
        goto LABEL_20;
      }
    }
    else
    {
      if (!v70)
      {
        (*(void (**)(void *, char *, uint64_t))(v67 + 40))(v64, v65, v66);
        goto LABEL_20;
      }
      (*(void (**)(void *, uint64_t))(v67 + 8))(v64, v66);
    }
    v32 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA58) - 8) + 64);
    v33 = v64;
    v34 = v65;
LABEL_13:
    memcpy(v33, v34, v32);
    goto LABEL_20;
  }
  if (v21)
  {
LABEL_12:
    v32 = *(_QWORD *)(*(_QWORD *)(sub_1000027AC(&qword_10008BA60) - 8) + 64);
    v33 = (void *)v15;
    v34 = v16;
    goto LABEL_13;
  }
  v22 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v15, v16, v22);
  *(_OWORD *)(v15 + v17[5]) = *(_OWORD *)&v16[v17[5]];
  v23 = v17[6];
  v24 = v15 + v23;
  v25 = &v16[v23];
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_BYTE *)(v24 + 16) = v25[16];
  v26 = v17[7];
  v27 = (void *)(v15 + v26);
  v28 = &v16[v26];
  v29 = type metadata accessor for URL(0);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = sub_1000027AC(&qword_10008BA58);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
LABEL_20:
  v40 = a3[5];
  v41 = *(void **)(a1 + v40);
  *(_QWORD *)(a1 + v40) = *(_QWORD *)(a2 + v40);

  v42 = a3[6];
  v43 = *(void **)(a1 + v42);
  *(_QWORD *)(a1 + v42) = *(_QWORD *)(a2 + v42);

  v44 = a3[7];
  v45 = *(void **)(a1 + v44);
  *(_QWORD *)(a1 + v44) = *(_QWORD *)(a2 + v44);

  v46 = a3[8];
  v47 = *(void **)(a1 + v46);
  *(_QWORD *)(a1 + v46) = *(_QWORD *)(a2 + v46);

  v48 = a3[9];
  v49 = (void *)(a1 + v48);
  v50 = (void *)(a2 + v48);
  v52 = type metadata accessor for UUID(0, v51);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v53 + 48);
  v55 = v54(v49, 1, v52);
  v56 = v54(v50, 1, v52);
  if (!v55)
  {
    if (!v56)
    {
      (*(void (**)(void *, void *, uint64_t))(v53 + 40))(v49, v50, v52);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v53 + 8))(v49, v52);
    goto LABEL_25;
  }
  if (v56)
  {
LABEL_25:
    v57 = sub_1000027AC(&qword_10008CD10);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v53 + 32))(v49, v50, v52);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v49, 0, 1, v52);
  return a1;
}

uint64_t sub_100048F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100048F7C);
}

uint64_t sub_100048F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for SuggestedDestinationEntryContent(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_1000027AC(&qword_10008CD10);
    v10 = a1 + *(int *)(a3 + 36);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_100049028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100049034);
}

uint64_t sub_100049034(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for SuggestedDestinationEntryContent(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
      return result;
    }
    v10 = sub_1000027AC(&qword_10008CD10);
    v12 = a1 + *(int *)(a4 + 36);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SuggestedDestinationEntryContentResolver(uint64_t a1)
{
  return sub_100006A5C(a1, (uint64_t *)&unk_10008E0C0, (uint64_t)&nominal type descriptor for SuggestedDestinationEntryContentResolver);
}

void sub_1000490F0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  v2 = type metadata accessor for SuggestedDestinationEntryContent(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\b";
    v6[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[3] = "\b";
    v6[4] = "\b";
    sub_100006B50(319, (unint64_t *)&unk_10008E0D0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    if (v5 <= 0x3F)
    {
      v6[5] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

uint64_t sub_1000491A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD aBlock[5];
  uint64_t v61;

  v50 = a2;
  v53 = a3;
  v54 = a4;
  v48 = a1;
  v56 = type metadata accessor for DispatchWorkItemFlags(0);
  v59 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v55 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v57 = *(_QWORD *)(v5 - 8);
  v58 = v5;
  __chkstk_darwin(v5);
  v52 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  v9 = *(_QWORD *)(v8 + 64);
  v10 = v8;
  __chkstk_darwin(v7);
  v46 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SuggestedDestinationEntryContentResolver(0);
  v47 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v47 + 64);
  __chkstk_darwin(v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TimelineProviderContext(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100014FA8(0, (unint64_t *)&qword_10008BF48, OS_dispatch_queue_ptr);
  v51 = static OS_dispatch_queue.main.getter(v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v48, v14);
  sub_10001B33C(v49, (uint64_t)v13, type metadata accessor for SuggestedDestinationEntryContentResolver);
  v19 = v10;
  v44 = v10;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v21 = v46;
  v20(v46, v50, v7);
  v22 = *(unsigned __int8 *)(v15 + 80);
  v23 = (v22 + 16) & ~v22;
  v24 = *(unsigned __int8 *)(v47 + 80);
  v25 = (v16 + v24 + v23) & ~v24;
  v26 = *(unsigned __int8 *)(v19 + 80);
  v27 = (v12 + v26 + v25) & ~v26;
  v28 = (v9 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = swift_allocObject(&unk_100082CC8, v28 + 16, v22 | v24 | v26 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v29 + v23, v17, v14);
  sub_10004A52C((uint64_t)v13, v29 + v25);
  (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v29 + v27, v21, v45);
  v30 = (_QWORD *)(v29 + v28);
  v31 = v54;
  *v30 = v53;
  v30[1] = v31;
  aBlock[4] = sub_10004A570;
  v61 = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100052B78;
  aBlock[3] = &unk_100082CE0;
  v32 = _Block_copy(aBlock);
  v33 = v61;
  swift_retain(v31);
  v34 = swift_release(v33);
  v35 = v52;
  static DispatchQoS.unspecified.getter(v34);
  aBlock[0] = &_swiftEmptyArrayStorage;
  v36 = sub_1000150DC();
  v37 = sub_1000027AC((uint64_t *)&unk_10008BF70);
  v38 = sub_100015124();
  v40 = v55;
  v39 = v56;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v37, v38, v56, v36);
  v41 = (void *)v51;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v35, v40, v32);
  _Block_release(v32);

  (*(void (**)(char *, uint64_t))(v59 + 8))(v40, v39);
  return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v35, v58);
}

uint64_t sub_100049528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t inited;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  void *v51;
  id v52;
  Class isa;
  Class v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  Class v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t result;
  uint64_t v90;
  char *v91;
  char *v92;
  void (*v93)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _OWORD v111[2];
  __int128 v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v107 = a4;
  v108 = a5;
  v97 = a3;
  v100 = a2;
  v6 = type metadata accessor for TimelineProviderContext(0);
  v105 = *(_QWORD *)(v6 - 8);
  v106 = v6;
  __chkstk_darwin(v6);
  v103 = v7;
  v104 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SuggestedDestinationEntryContentResolver(0);
  v98 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v99 = v9;
  v102 = (uint64_t)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000027AC(&qword_10008BF20);
  __chkstk_darwin(v10);
  v109 = (uint64_t)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000027AC(&qword_10008BA58);
  v13 = __chkstk_darwin(v12);
  v92 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v91 = (char *)&v90 - v15;
  v16 = type metadata accessor for WidgetFamily(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v90 - v21;
  v96 = swift_allocBox(v12);
  v24 = v23;
  v25 = type metadata accessor for URL(0);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v94 = v25;
  v95 = v24;
  v93 = v26;
  ((void (*)(uint64_t, uint64_t, uint64_t))v26)(v24, 1, 1);
  v27 = sub_1000027AC(&qword_10008E110);
  inited = swift_initStackObject(v27, &v116);
  *(_OWORD *)(inited + 16) = xmmword_10006B8C0;
  v114 = static String._unconditionallyBridgeFromObjectiveC(_:)(MKLaunchOptionsAnalyticsActionKey);
  v115 = v29;
  v30 = AnyHashable.init<A>(_:)(&v114, &type metadata for String, &protocol witness table for String);
  v101 = a1;
  TimelineProviderContext.family.getter(v30);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, v16);
  v31 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v20, v16);
  if (v31 == enum case for WidgetFamily.systemSmall(_:))
  {
    v32 = 94;
LABEL_7:
    (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
    *(_QWORD *)(inited + 96) = &type metadata for Int32;
    *(_DWORD *)(inited + 72) = v32;
    v114 = static String._unconditionallyBridgeFromObjectiveC(_:)(MKLaunchOptionsAnalyticsTargetKey);
    v115 = v33;
    AnyHashable.init<A>(_:)(&v114, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 168) = &type metadata for Int32;
    *(_DWORD *)(inited + 144) = 696;
    v114 = static String._unconditionallyBridgeFromObjectiveC(_:)(MKLaunchOptionsAnalyticsValueKey);
    v115 = v34;
    AnyHashable.init<A>(_:)(&v114, &type metadata for String, &protocol witness table for String);
    v35 = v100;
    v114 = *(_QWORD *)(v100 + 32);
    v36 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    *(_QWORD *)(inited + 240) = &type metadata for String;
    *(_QWORD *)(inited + 216) = v36;
    *(_QWORD *)(inited + 224) = v37;
    v38 = sub_100007048(inited);
    v39 = *(void **)(v35 + *(int *)(v8 + 32));
    if (v39)
    {
      *(_QWORD *)&v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(MKLaunchOptionsDirectionsModeKey);
      *((_QWORD *)&v112 + 1) = v40;
      v41 = v39;
      AnyHashable.init<A>(_:)(&v112, &type metadata for String, &protocol witness table for String);
      v42 = sub_1000460A0(objc_msgSend(v41, "transportType"));
      v113 = &type metadata for String;
      *(_QWORD *)&v112 = v42;
      *((_QWORD *)&v112 + 1) = v43;
      sub_100016594(&v112, v111);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v38);
      v110 = v38;
      sub_10002C1F0(v111, (uint64_t)&v114, isUniquelyReferenced_nonNull_native);
      v45 = v110;
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_100014DC4((uint64_t)&v114);
      v46 = (void *)objc_opt_self(MKMapItem);
      v47 = sub_1000027AC(&qword_10008E118);
      v48 = swift_allocObject(v47, 96, 7);
      *(_OWORD *)(v48 + 16) = xmmword_10006A2F0;
      v49 = objc_msgSend(v46, "mapItemForCurrentLocation");
      v50 = sub_100014FA8(0, &qword_10008E120, MKMapItem_ptr);
      *(_QWORD *)(v48 + 56) = v50;
      *(_QWORD *)(v48 + 32) = v49;
      v51 = *(void **)(v35 + *(int *)(v8 + 24));
      *(_QWORD *)(v48 + 88) = v50;
      *(_QWORD *)(v48 + 64) = v51;
      v52 = v51;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v48);
      v54 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v45);
      v55 = objc_msgSend(v46, "urlForMapItems:options:", isa, v54);

      if (v55)
      {
        v56 = (uint64_t)v92;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v55);

        v57 = 0;
        v41 = v55;
        v58 = v103;
        v59 = v101;
        v60 = v97;
        v62 = v94;
        v61 = v95;
      }
      else
      {
        v57 = 1;
        v58 = v103;
        v59 = v101;
        v60 = v97;
        v62 = v94;
        v61 = v95;
        v56 = (uint64_t)v92;
      }

      v93(v56, v57, 1, v62);
    }
    else
    {
      v63 = (void *)objc_opt_self(MKMapItem);
      v64 = *(_QWORD *)(v35 + *(int *)(v8 + 24));
      v65 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v38);
      v66 = objc_msgSend(v63, "urlForMapItem:options:", v64, v65);

      v58 = v103;
      if (v66)
      {
        v56 = (uint64_t)v91;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v66);

        v67 = 0;
        v59 = v101;
        v60 = v97;
        v68 = v94;
        v61 = v95;
        v69 = v93;
      }
      else
      {
        v67 = 1;
        v59 = v101;
        v60 = v97;
        v68 = v94;
        v61 = v95;
        v69 = v93;
        v56 = (uint64_t)v91;
      }
      v69(v56, v67, 1, v68);
    }
    sub_10004A624(v56, v61);
    v103 = sub_100049DDC(v59);
    v70 = type metadata accessor for Date(0);
    v71 = *(_QWORD *)(v70 - 8);
    v72 = v109;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16))(v109, v60, v70);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v71 + 56))(v72, 0, 1, v70);
    v73 = v102;
    sub_10001B33C(v35, v102, type metadata accessor for SuggestedDestinationEntryContentResolver);
    v74 = v104;
    v75 = v105;
    v76 = v106;
    (*(void (**)(char *, uint64_t, uint64_t))(v105 + 16))(v104, v59, v106);
    v77 = *(unsigned __int8 *)(v98 + 80);
    v78 = (v77 + 16) & ~v77;
    v79 = *(unsigned __int8 *)(v75 + 80);
    v80 = (v99 + v79 + v78) & ~v79;
    v81 = (v58 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
    v82 = (v81 + 15) & 0xFFFFFFFFFFFFFFF8;
    v83 = swift_allocObject(&unk_100082D18, v82 + 16, v77 | v79 | 7);
    sub_10004A52C(v73, v83 + v78);
    (*(void (**)(uint64_t, char *, uint64_t))(v75 + 32))(v83 + v80, v74, v76);
    v84 = v96;
    *(_QWORD *)(v83 + v81) = v96;
    v85 = (_QWORD *)(v83 + v82);
    v86 = v108;
    *v85 = v107;
    v85[1] = v86;
    swift_retain(v84);
    swift_retain(v86);
    v87 = v109;
    v88 = v103;
    sub_1000274B8(v109, (uint64_t)sub_10004A898, v83);
    swift_release(v88);
    swift_release(v83);
    sub_100015590(v87, &qword_10008BF20);
    return swift_release(v84);
  }
  if (v31 == enum case for WidgetFamily.systemMedium(_:))
  {
    v32 = 95;
    goto LABEL_7;
  }
  if (v31 == enum case for WidgetFamily.systemLarge(_:))
  {
    v32 = 96;
    goto LABEL_7;
  }
  if (v31 == enum case for WidgetFamily.systemExtraLarge(_:)
    || v31 == enum case for WidgetFamily.accessoryCircular(_:)
    || v31 == enum case for WidgetFamily.accessoryRectangular(_:)
    || v31 == enum case for WidgetFamily.accessoryInline(_:))
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, 0x8000000100079690, "GeneralMapsWidget/SuggestedDestinationEntryContent.swift", 56, 2, 83, 0);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "GeneralMapsWidget/SuggestedDestinationEntryContent.swift", 56, 2, 85, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_100049DDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  char *v19;
  uint64_t v20;
  int *v21;
  void (*v22)(char *, char *, _QWORD *);
  id v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unsigned __int8 v35;
  void *v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  _QWORD v43[2];
  void (*v44)(char *, char *, _QWORD *);
  _QWORD *v45;
  uint64_t v46;
  unsigned __int8 v47;

  v2 = v1;
  v4 = type metadata accessor for TimelineProviderContext(0);
  v45 = *(_QWORD **)(v4 - 8);
  v46 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WidgetFamily(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate(0, v11);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (_QWORD *)((char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_100014FA8(0, (unint64_t *)&qword_10008BF48, OS_dispatch_queue_ptr);
  *v15 = static OS_dispatch_queue.main.getter(v16);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  v17 = _dispatchPreconditionTest(_:)(v15);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v17 & 1) != 0)
  {
    v19 = v6;
    v20 = type metadata accessor for MapSnapshotter();
    v21 = (int *)type metadata accessor for SuggestedDestinationEntryContentResolver(0);
    v22 = (void (*)(char *, char *, _QWORD *))(v2 + v21[9]);
    TimelineProviderContext.family.getter(v21);
    v44 = v22;
    v23 = sub_1000298F4(v22, (uint64_t)v10);
    v24 = *(_QWORD **)(v8 + 8);
    ((void (*)(_BYTE *, uint64_t))v24)(v10, v7);
    if (v23)
    {
      v25 = type metadata accessor for SuggestedDestinationSnapshotter();
      v26 = swift_dynamicCastClass(v23, v25);
      if (v26)
        return v26;
      swift_release(v23);
    }
    v27 = (void (*)(char *, uint64_t, uint64_t))v45[2];
    v45 = v24;
    v28 = (uint64_t)v19;
    v27(v19, a1, v46);
    v29 = v21[6];
    v30 = *(void **)(v2 + v21[5]);
    v43[0] = v20;
    v43[1] = a1;
    v31 = *(void **)(v2 + v29);
    v32 = v21[8];
    v33 = *(void **)(v2 + v21[7]);
    v46 = v7;
    v34 = *(unsigned int *)(v2 + 72);
    v35 = *(_BYTE *)(v2 + 76);
    v36 = *(void **)(v2 + v32);
    v37 = type metadata accessor for SuggestedDestinationSnapshotter();
    swift_allocObject(v37, 112, 7);
    v38 = v36;
    v39 = v30;
    v40 = v31;
    v41 = v33;
    v47 = v35;
    sub_10002D110(v28, v30, v40, v33, v34 | ((unint64_t)v35 << 32), v36);
    v26 = v42;
    TimelineProviderContext.family.getter(v42);
    sub_100029F24(v26, (uint64_t)v44, v10);
    ((void (*)(_BYTE *, uint64_t))v45)(v10, v46);
    return v26;
  }
  __break(1u);
  return result;
}

uint64_t sub_10004A07C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *), uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];
  void (*v31)(char *);
  _BYTE v32[24];

  v30[1] = a6;
  v31 = a5;
  v30[0] = a1;
  v10 = sub_1000027AC(&qword_10008BB18);
  __chkstk_darwin(v10);
  v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SuggestedDestinationEntryContent(0);
  __chkstk_darwin(v13);
  v15 = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_projectBox(a4);
  v17 = type metadata accessor for SuggestedDestinationSnapshotter();
  v18 = swift_dynamicCastClassUnconditional(a1, v17, 0, 0, 0);
  sub_10001B33C(a2, (uint64_t)v15, type metadata accessor for SuggestedDestinationEntryContent);
  v19 = (uint64_t)&v15[*(int *)(v13 + 40)];
  swift_retain(a1);
  sub_100015590(v19, &qword_10008BA60);
  v20 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v19, a3, v20);
  v21 = *(void **)(v18 + 24);
  v22 = *(void **)(v18 + 32);
  v24 = *(_QWORD *)(v18 + 80);
  v23 = *(_QWORD *)(v18 + 88);
  LOBYTE(v18) = *(_BYTE *)(v18 + 96);
  swift_beginAccess(v16, v32, 0, 0);
  v25 = (int *)type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  sub_100016550(v16, v19 + v25[7], &qword_10008BA58);
  v26 = (_QWORD *)(v19 + v25[5]);
  *v26 = v21;
  v26[1] = v22;
  v27 = v19 + v25[6];
  *(_QWORD *)v27 = v24;
  *(_QWORD *)(v27 + 8) = v23;
  *(_BYTE *)(v27 + 16) = v18;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v25 - 1) + 56))(v19, 0, 1, v25);
  sub_10001B33C((uint64_t)v15, (uint64_t)v12, type metadata accessor for SuggestedDestinationEntryContent);
  v28 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
  swift_storeEnumTagMultiPayload(v12, v28, 1);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v12, 0, 1, v28);
  sub_100047B5C(v21, v22);
  v31(v12);
  swift_release(v30[0]);
  sub_100015590((uint64_t)v12, &qword_10008BB18);
  return sub_10001B54C((uint64_t)v15, type metadata accessor for SuggestedDestinationEntryContent);
}

uint64_t sub_10004A2D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = type metadata accessor for TimelineProviderContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v30 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v30 + 16) & ~v30;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = (int *)type metadata accessor for SuggestedDestinationEntryContentResolver(0);
  v6 = *((_QWORD *)v5 - 1);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v27 = *(_QWORD *)(v6 + 64);
  v29 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v29 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v26 = *(_QWORD *)(v8 + 64);
  v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0 + v3, v1);
  v28 = (v3 + v4 + v7) & ~v7;
  v11 = v0 + v28;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v28 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v28 + 24));
  v12 = *(void **)(v0 + v28 + 56);
  if (v12 != (void *)1)
  {

  }
  v13 = v11 + *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v14 = type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
  {
    v10(v13, v1);
    v15 = (id *)(v13 + *(int *)(v14 + 20));
    if (*v15 != (id)1)
    {

    }
    v16 = v13 + *(int *)(v14 + 28);
    v17 = type metadata accessor for URL(0);
    v18 = *(_QWORD *)(v17 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  }

  v19 = v11 + v5[9];
  v21 = type metadata accessor for UUID(0, v20);
  v22 = *(_QWORD *)(v21 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v19, 1, v21))
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v19, v21);
  v23 = (v28 + v27 + v9) & ~v9;
  v24 = (v26 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v23, v29);
  swift_release(*(_QWORD *)(v0 + v24 + 8));
  return swift_deallocObject(v0, v24 + 16, v30 | v7 | v9 | 7);
}

uint64_t sub_10004A52C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SuggestedDestinationEntryContentResolver(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004A570()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;

  v1 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(type metadata accessor for SuggestedDestinationEntryContentResolver(0) - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (uint64_t *)(v0 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_100049528(v0 + v2, v0 + v5, v0 + v8, *v9, v9[1]);
}

double sub_10004A60C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_10004A61C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004A624(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000027AC(&qword_10008BA58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004A66C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v1 = (int *)type metadata accessor for SuggestedDestinationEntryContentResolver(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v24 = *(_QWORD *)(v2 + 64);
  v4 = type metadata accessor for TimelineProviderContext(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v23 = *(_QWORD *)(v5 + 64);
  v7 = v0 + ((v3 + 16) & ~v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 24));
  v8 = *(void **)(v7 + 56);
  if (v8 != (void *)1)
  {

  }
  v9 = v7 + *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
  v10 = type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v4);
    v11 = (id *)(v9 + *(int *)(v10 + 20));
    if (*v11 != (id)1)
    {

    }
    v12 = v9 + *(int *)(v10 + 28);
    v13 = type metadata accessor for URL(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }

  v15 = v7 + v1[9];
  v17 = type metadata accessor for UUID(0, v16);
  v18 = *(_QWORD *)(v17 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v15, 1, v17))
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v15, v17);
  v19 = (((v3 + 16) & ~v3) + v24 + v6) & ~v6;
  v20 = (v23 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v19, v4);
  swift_release(*(_QWORD *)(v0 + v20));
  swift_release(*(_QWORD *)(v0 + v21 + 8));
  return swift_deallocObject(v0, v21 + 16, v3 | v6 | 7);
}

uint64_t sub_10004A898(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(type metadata accessor for SuggestedDestinationEntryContentResolver(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10004A07C(a1, v1 + v4, v1 + v7, *(_QWORD *)(v1 + v8), *(void (**)(char *))(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10004A924@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004A94C(a1, &MKLaunchOptionsLaunchIntoNavShareETAKey, 9022, 676, a2);
}

uint64_t sub_10004A938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004A94C(a1, &MKLaunchOptionsLaunchIntoSearchHomeKey, 54, 675, a2);
}

uint64_t sub_10004A94C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  Class isa;
  id v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v30 = a3;
  v31 = a4;
  v33 = a1;
  v29 = a5;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000027AC(&qword_10008BA58);
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = (id)objc_opt_self(MKMapItem);
  v13 = sub_1000027AC(&qword_10008E110);
  inited = swift_initStackObject(v13, &v36);
  *(_OWORD *)(inited + 16) = xmmword_10006BA00;
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a2);
  v35 = v15;
  AnyHashable.init<A>(_:)(&v34, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(inited + 96) = &type metadata for Bool;
  *(_BYTE *)(inited + 72) = 1;
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(MKLaunchOptionsAnalyticsActionKey);
  v35 = v16;
  AnyHashable.init<A>(_:)(&v34, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(inited + 168) = &type metadata for Int32;
  *(_DWORD *)(inited + 144) = v30;
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(MKLaunchOptionsAnalyticsTargetKey);
  v35 = v17;
  AnyHashable.init<A>(_:)(&v34, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(inited + 240) = &type metadata for Int32;
  *(_DWORD *)(inited + 216) = v31;
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(MKLaunchOptionsAnalyticsValueKey);
  v35 = v18;
  AnyHashable.init<A>(_:)(&v34, &type metadata for String, &protocol witness table for String);
  v19 = type metadata accessor for WidgetFamily(0);
  v20 = sub_10004AC40();
  v21 = dispatch thunk of CustomStringConvertible.description.getter(v19, v20);
  *(_QWORD *)(inited + 312) = &type metadata for String;
  *(_QWORD *)(inited + 288) = v21;
  *(_QWORD *)(inited + 296) = v22;
  v23 = sub_100007048(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v23);
  v25 = objc_msgSend(v32, "urlForMapItem:options:", 0, isa);

  if (v25)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v25);

    v26 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v26(v12, v9, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6);
    if ((_DWORD)result != 1)
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v26)(v29, v12, v6);
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v6);
  }
  __break(1u);
  return result;
}

unint64_t sub_10004AC40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008CCD8;
  if (!qword_10008CCD8)
  {
    v1 = type metadata accessor for WidgetFamily(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for WidgetFamily, v1);
    atomic_store(result, (unint64_t *)&qword_10008CCD8);
  }
  return result;
}

void sub_10004AC88(uint64_t a1, void (*a2)(void *, void *))
{
  void *v3;
  void *v4;

  v3 = *(void **)(a1 + 24);
  v4 = *(void **)(a1 + 32);
  sub_100047B5C(v3, v4);
  a2(v3, v4);
  sub_10002ACEC(v3, v4);
}

uint64_t sub_10004ACD4()
{
  uint64_t v0;

  v0 = sub_100029404();
  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t type metadata accessor for NavigationETASnapshotter()
{
  return objc_opt_self(_TtC17GeneralMapsWidget24NavigationETASnapshotter);
}

void sub_10004AD10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  double v6;
  _QWORD v10[2];

  v0 = type metadata accessor for WidgetFamily(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TimelineProviderContext.family.getter(v2);
  v5 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v4, v0);
  if ((_DWORD)v5 == enum case for WidgetFamily.systemSmall(_:))
  {
    if (qword_10008B9E0 != -1)
      swift_once(&qword_10008B9E0, sub_10002D044);
  }
  else if ((_DWORD)v5 == enum case for WidgetFamily.systemMedium(_:))
  {
    v6 = TimelineProviderContext.displaySize.getter(v5) * 0.5;
    if (qword_10008B9A8 != -1)
    {
      *(double *)&v10[1] = v6;
      swift_once(&qword_10008B9A8, sub_100024634);
    }
  }
  else if ((_DWORD)v5 == enum case for WidgetFamily.systemLarge(_:))
  {
    if (qword_10008B9D8 != -1)
      swift_once(&qword_10008B9D8, sub_10002D030);
  }
  else
  {
    if ((_DWORD)v5 == enum case for WidgetFamily.systemExtraLarge(_:)
      || (_DWORD)v5 == enum case for WidgetFamily.accessoryCircular(_:)
      || (_DWORD)v5 == enum case for WidgetFamily.accessoryRectangular(_:)
      || (_DWORD)v5 == enum case for WidgetFamily.accessoryInline(_:))
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, 0x8000000100079690, "GeneralMapsWidget/NavigationETASnapshotter.swift", 48, 2, 62, 0);
    }
    else
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "GeneralMapsWidget/NavigationETASnapshotter.swift", 48, 2, 64, 0);
    }
    __break(1u);
  }
}

uint64_t sub_10004AF70(double a1, double a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  id v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t result;
  uint64_t v32;

  v7 = type metadata accessor for WidgetFamily(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  TimelineProviderContext.family.getter(v9);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v11, v7);
  if (v12 == enum case for WidgetFamily.systemSmall(_:))
  {
    v14 = MKMapRectMakeWithRadialDistance(a1, a2, 50.0);
    v16 = v15;
    v18 = v17;
    v20 = v19;
LABEL_6:
    v25 = TimelineProviderContext.displaySize.getter(v13);
    v27 = v26;
    sub_10004AD10();
    return _MKMapRectThatFits(v14, v16, v18, v20, v25, v27);
  }
  if (v12 == enum case for WidgetFamily.systemMedium(_:) || v12 == enum case for WidgetFamily.systemLarge(_:))
  {
    v21 = objc_msgSend(a4, "boundingMapRegion");
    v14 = GEOMapRectForMapRegion();
    v16 = v22;
    v18 = v23;
    v20 = v24;

    goto LABEL_6;
  }
  if (v12 == enum case for WidgetFamily.systemExtraLarge(_:)
    || v12 == enum case for WidgetFamily.accessoryCircular(_:)
    || v12 == enum case for WidgetFamily.accessoryRectangular(_:)
    || v12 == enum case for WidgetFamily.accessoryInline(_:))
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, 0x8000000100079690, "GeneralMapsWidget/NavigationETASnapshotter.swift", 48, 2, 45, 0);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "GeneralMapsWidget/NavigationETASnapshotter.swift", 48, 2, 47, 0);
  }
  __break(1u);
  return result;
}

void sub_10004B1D4(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  void *v17;
  double v18;
  double v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;

  v3 = v2;
  *(_OWORD *)(v3 + 16) = xmmword_10006ACC0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = dispatch_group_create();
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = sub_100006F2C((uint64_t)&_swiftEmptyArrayStorage);
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = &_swiftEmptyArrayStorage;
  v6 = objc_msgSend(objc_allocWithZone((Class)MKMapSnapshotOptions), "init", swift_retain(v3).n128_f64[0]);
  v7 = *(void **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v6;

  v8 = *(void **)(v3 + 16);
  if (!v8)
  {
    __break(1u);
    goto LABEL_8;
  }
  objc_msgSend(v8, "_setShowsAppleLogo:", 0);
  v9 = *(void **)(v3 + 16);
  if (!v9)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v10 = v9;
  objc_msgSend(v10, "setSize:", TimelineProviderContext.displaySize.getter(v10));

  objc_msgSend(a2, "pointAtRouteCoordinate:", objc_msgSend(a2, "endRouteCoordinate"));
  v14 = nullsub_1(v11, v12, v13);
  v15 = CLLocationCoordinate2DFromGEOLocationCoordinate2D(v14);
  v17 = *(void **)(v3 + 16);
  if (!v17)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v18 = v15;
  v19 = v16;
  v20 = v17;
  sub_10004AF70(v18, v19, a1, a2);
  objc_msgSend(v20, "setMapRect:");

  v21 = *(void **)(v3 + 16);
  if (!v21)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  objc_msgSend(v21, "_setComposedRouteForRouteLine:", a2);
  v22 = *(void **)(v3 + 16);
  v23 = v22;
  swift_release(v3);
  if (v22)
  {
    objc_msgSend(v23, "setMapType:", objc_msgSend(a2, "mapType"));

    v24 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(a1, v24);
    return;
  }
LABEL_11:
  __break(1u);
}

uint64_t sub_10004B3AC@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t result;
  _BYTE v38[4];
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v41 = a3;
  v6 = type metadata accessor for PreciseUserLocationView(0);
  __chkstk_darwin(v6);
  v8 = &v38[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v40 = sub_1000027AC(&qword_10008E2E0);
  __chkstk_darwin(v40);
  v10 = &v38[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_1000027AC(&qword_10008E2E8);
  __chkstk_darwin(v11);
  v13 = &v38[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v42 = sub_1000027AC(&qword_10008E2F0);
  __chkstk_darwin(v42);
  v15 = &v38[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = sub_1000027AC(&qword_10008C278);
  __chkstk_darwin(v16);
  v18 = &v38[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = (int *)type metadata accessor for CoarseUserLocationView(0);
  __chkstk_darwin(v19);
  v21 = &v38[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (!a1)
  {
    *v18 = swift_getKeyPath(&unk_10006BB58);
    v22 = sub_1000027AC(&qword_10008C240);
    swift_storeEnumTagMultiPayload(v18, v22, 0);
    KeyPath = swift_getKeyPath(&unk_10006BB88);
    v24 = (uint64_t *)&v8[*(int *)(v6 + 20)];
    *v24 = KeyPath;
    v25 = sub_1000027AC(&qword_10008C488);
    swift_storeEnumTagMultiPayload(v24, v25, 0);
    sub_10001565C((uint64_t)v18, (uint64_t)v8, &qword_10008C278);
    v8[*(int *)(v6 + 24)] = v39 & 1;
    v26 = type metadata accessor for PreciseUserLocationView;
    sub_10001B33C((uint64_t)v8, (uint64_t)v13, type metadata accessor for PreciseUserLocationView);
    swift_storeEnumTagMultiPayload(v13, v11, 1);
    v27 = sub_10001B41C(&qword_10008E2F8, type metadata accessor for CoarseUserLocationView, (uint64_t)&unk_10006BC58);
    sub_10001B41C(&qword_10008E300, type metadata accessor for PreciseUserLocationView, (uint64_t)&unk_10006BC08);
    _ConditionalContent<>.init(storage:)(v13, v19, v6, v27);
    sub_100016550((uint64_t)v15, (uint64_t)v10, &qword_10008E2F0);
    swift_storeEnumTagMultiPayload(v10, v40, 0);
    v28 = sub_10004D554();
    _ConditionalContent<>.init(storage:)(v10, v42, &type metadata for Never, v28);
    sub_100015590((uint64_t)v15, &qword_10008E2F0);
    v29 = (uint64_t)v8;
    return sub_10001B54C(v29, v26);
  }
  v30 = v39;
  if (a1 == 1)
  {
    *v18 = swift_getKeyPath(&unk_10006BB58);
    v31 = sub_1000027AC(&qword_10008C240);
    swift_storeEnumTagMultiPayload(v18, v31, 0);
    v32 = swift_getKeyPath(&unk_10006BB88);
    v33 = (uint64_t *)&v21[v19[5]];
    *v33 = v32;
    v34 = sub_1000027AC(&qword_10008C488);
    swift_storeEnumTagMultiPayload(v33, v34, 0);
    sub_10001565C((uint64_t)v18, (uint64_t)v21, &qword_10008C278);
    v21[v19[6]] = v30 & 1;
    *(double *)&v21[v19[7]] = a4;
    v26 = type metadata accessor for CoarseUserLocationView;
    sub_10001B33C((uint64_t)v21, (uint64_t)v13, type metadata accessor for CoarseUserLocationView);
    swift_storeEnumTagMultiPayload(v13, v11, 0);
    v35 = sub_10001B41C(&qword_10008E2F8, type metadata accessor for CoarseUserLocationView, (uint64_t)&unk_10006BC58);
    sub_10001B41C(&qword_10008E300, type metadata accessor for PreciseUserLocationView, (uint64_t)&unk_10006BC08);
    _ConditionalContent<>.init(storage:)(v13, v19, v6, v35);
    sub_100016550((uint64_t)v15, (uint64_t)v10, &qword_10008E2F0);
    swift_storeEnumTagMultiPayload(v10, v40, 0);
    v36 = sub_10004D554();
    _ConditionalContent<>.init(storage:)(v10, v42, &type metadata for Never, v36);
    sub_100015590((uint64_t)v15, &qword_10008E2F0);
    v29 = (uint64_t)v21;
    return sub_10001B54C(v29, v26);
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "GeneralMapsWidget/UserLocationView.swift", 40, 2, 30, 0);
  __break(1u);
  return result;
}

uint64_t sub_10004B87C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10004B3AC(*(_QWORD *)v1, *(unsigned __int8 *)(v1 + 8), a1, *(double *)(v1 + 16));
}

double sub_10004B88C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  double result;

  v4 = static HorizontalAlignment.center.getter();
  v5 = *a1;
  v6 = *((_BYTE *)a1 + 8);
  result = *((double *)a1 + 4);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 1;
  *(_QWORD *)(a2 + 56) = v5;
  *(_BYTE *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 72) = *((_OWORD *)a1 + 1);
  *(double *)(a2 + 88) = result;
  *(_QWORD *)(a2 + 96) = 0;
  *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 120) = 1;
  return result;
}

double sub_10004B918@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  double result;
  __int128 v10;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[6];
  _OWORD v14[2];
  _OWORD v15[8];

  v4 = *(_OWORD *)(v2 + 16);
  v11[0] = *(_OWORD *)v2;
  v11[1] = v4;
  v12 = *(_QWORD *)(v2 + 32);
  v5 = static VerticalAlignment.center.getter(a1);
  sub_10004B88C((uint64_t *)v11, (uint64_t)v13);
  *(_OWORD *)((char *)&v15[4] + 7) = v13[4];
  *(_OWORD *)((char *)&v15[5] + 7) = v13[5];
  *(_OWORD *)((char *)&v15[6] + 7) = v14[0];
  *(_OWORD *)((char *)v15 + 7) = v13[0];
  *(_OWORD *)((char *)&v15[1] + 7) = v13[1];
  *(_OWORD *)((char *)&v15[2] + 7) = v13[2];
  *(_OWORD *)((char *)&v15[3] + 7) = v13[3];
  v6 = v15[6];
  *(_OWORD *)(a2 + 129) = *(_OWORD *)((char *)v14 + 9);
  v7 = v15[5];
  *(_OWORD *)(a2 + 81) = v15[4];
  *(_OWORD *)(a2 + 97) = v7;
  v8 = v15[2];
  *(_OWORD *)(a2 + 65) = v15[3];
  *(_OWORD *)(a2 + 49) = v8;
  v10 = v15[0];
  result = *(double *)&v15[1];
  *(_OWORD *)(a2 + 33) = v15[1];
  *(_OWORD *)(a2 + 17) = v10;
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_OWORD *)(a2 + 113) = v6;
  return result;
}

uint64_t sub_10004B9EC(SEL *a1, SEL *a2, SEL *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  id v14;
  id v15;
  id v16;
  uint64_t result;
  uint64_t v18;

  v9 = type metadata accessor for ColorScheme(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v4, v9);
  v13 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v12, v9);
  if (v13 == enum case for ColorScheme.light(_:))
  {
    v14 = objc_msgSend((id)objc_opt_self(UIColor), *a3);
    return Color.init(_:)(v14);
  }
  if (v13 == enum case for ColorScheme.dark(_:))
  {
    v15 = objc_msgSend((id)objc_opt_self(UIColor), *a1);
    v16 = objc_msgSend((id)objc_opt_self(UITraitCollection), *a2, 1);
    v14 = objc_msgSend(v15, "resolvedColorWithTraitCollection:", v16);

    return Color.init(_:)(v14);
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "GeneralMapsWidget/UserLocationView.swift", 40, 2, a4, 0);
  __break(1u);
  return result;
}

uint64_t sub_10004BB8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __n128 v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  unint64_t v16;
  _OWORD v18[3];

  v1 = sub_1000027AC(&qword_10008E450);
  __chkstk_darwin(v1);
  v3 = (_QWORD *)((char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_1000027AC(&qword_10008E458);
  __chkstk_darwin(v4);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7.n128_u64[0] = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CoarseUserLocationView(0) + 28));
  v8 = v7.n128_f64[0] + v7.n128_f64[0];
  *v3 = static Alignment.center.getter(v7);
  v3[1] = v9;
  v10 = sub_1000027AC(&qword_10008E460);
  sub_10004BD20(v0, (uint64_t)v3 + *(int *)(v10 + 44));
  v12 = static Alignment.center.getter(v11);
  _FrameLayout.init(width:height:alignment:)(v18, *(_QWORD *)&v8, 0, *(_QWORD *)&v8, 0, v12, v13);
  sub_100016550((uint64_t)v3, (uint64_t)v6, &qword_10008E450);
  v14 = &v6[*(int *)(v4 + 36)];
  v15 = v18[1];
  *(_OWORD *)v14 = v18[0];
  *((_OWORD *)v14 + 1) = v15;
  *((_OWORD *)v14 + 2) = v18[2];
  sub_100015590((uint64_t)v3, &qword_10008E450);
  v16 = sub_10004E730();
  View.accessibility(identifier:)(0xD000000000000016, 0x800000010006BBD0, v4, v16);
  return sub_100015590((uint64_t)v6, &qword_10008E458);
}

uint64_t sub_10004BD20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  double v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t result;
  uint64_t v66;
  uint64_t (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;

  v77 = a2;
  v3 = type metadata accessor for WidgetRenderingMode(0);
  v70 = *(_QWORD *)(v3 - 8);
  v71 = v3;
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v66 - v7;
  v78 = type metadata accessor for ColorScheme(0);
  v9 = *(_QWORD *)(v78 - 8);
  v10 = __chkstk_darwin(v78);
  v72 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v66 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v66 - v15;
  v69 = sub_1000027AC(&qword_10008E478);
  v68 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v18 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_1000027AC(&qword_10008E480);
  v19 = __chkstk_darwin(v66);
  v76 = (uint64_t)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v66 - v22;
  __chkstk_darwin(v21);
  v75 = (uint64_t)&v66 - v24;
  sub_100052044((uint64_t)v16);
  v25 = type metadata accessor for CoarseUserLocationView(0);
  v26 = *(int *)(v25 + 24);
  v73 = v14;
  v74 = a1;
  if (*(_BYTE *)(a1 + v26) == 1)
  {
    v27 = sub_10004B9EC((SEL *)&selRef_systemGray2Color, (SEL *)&selRef_traitCollectionWithAccessibilityContrast_, (SEL *)&selRef_systemGray2Color, 65);
    v29 = 0x3FC999999999999ALL;
  }
  else
  {
    v29 = 0x3FC1EB851EB851ECLL;
    v27 = static Color.blue.getter(v25);
  }
  v28.n128_u64[0] = v29;
  *(double *)&v30 = COERCE_DOUBLE(Color.opacity(_:)(v27, v28));
  swift_release(v27);
  v31 = v78;
  v67 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  v32 = v67(v16, v78);
  v33 = static Edge.Set.all.getter(v32);
  v34 = 1.0;
  v35 = EdgeInsets.init(_all:)(1.0);
  v79 = *(double *)&v30;
  LOWORD(v80) = 256;
  LOBYTE(v81) = v33;
  v82 = v35;
  v83 = v36;
  v84 = v37;
  v85 = v38;
  v86 = 0;
  v39 = sub_1000027AC(&qword_10008E488);
  v40 = sub_10004E7B4();
  View.widgetAccentable(_:)(1, v39, v40);
  swift_release(v30);
  v41 = sub_100052310((uint64_t)v8);
  static WidgetRenderingMode.accented.getter(v41);
  v42 = static WidgetRenderingMode.== infix(_:_:)(v8, v6);
  v43 = v71;
  v44 = *(void (**)(char *, uint64_t))(v70 + 8);
  v44(v6, v71);
  v44(v8, v43);
  if ((v42 & 1) != 0)
    v34 = 0.8;
  v45 = v68;
  v46 = v69;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v23, v18, v69);
  *(double *)&v23[*(int *)(v66 + 36)] = v34;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v46);
  v47 = v75;
  sub_10001565C((uint64_t)v23, v75, &qword_10008E480);
  v48 = (uint64_t)v73;
  sub_100052044((uint64_t)v73);
  v49 = v72;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v72, v48, v31);
  v50 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v49, v31);
  if (v50 == enum case for ColorScheme.light(_:))
  {
    v51 = sub_10004B9EC((SEL *)&selRef_systemGray3Color, (SEL *)&selRef_traitCollectionWithUserInterfaceStyle_, (SEL *)&selRef_whiteColor, 76);
LABEL_10:
    v67((char *)v48, v78);
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v79, 0, 0, &_swiftEmptyArrayStorage, 2.5, 10.0, 0.0);
    v54 = v79;
    v55 = v81;
    v56 = v82;
    v57 = v83;
    v58.n128_u64[0] = 0.5;
    v59 = static Alignment.center.getter(v58);
    v61 = v60;
    v62 = v76;
    sub_100016550(v47, v76, &qword_10008E480);
    v63 = v77;
    sub_100016550(v62, v77, &qword_10008E480);
    v64 = v63 + *(int *)(sub_1000027AC(&qword_10008E498) + 48);
    *(double *)v64 = v54 * 0.5;
    *(double *)(v64 + 8) = v54;
    *(_QWORD *)(v64 + 16) = v80;
    *(_QWORD *)(v64 + 24) = v55;
    *(double *)(v64 + 32) = v56;
    *(_QWORD *)(v64 + 40) = v57;
    *(_QWORD *)(v64 + 48) = v51;
    *(_WORD *)(v64 + 56) = 256;
    *(_QWORD *)(v64 + 64) = v59;
    *(_QWORD *)(v64 + 72) = v61;
    swift_bridgeObjectRetain(*(_QWORD *)&v56);
    swift_retain(v51);
    sub_100015590(v47, &qword_10008E480);
    swift_release(v51);
    swift_bridgeObjectRelease(*(_QWORD *)&v56);
    return sub_100015590(v62, &qword_10008E480);
  }
  if (v50 == enum case for ColorScheme.dark(_:))
  {
    v52 = sub_10004B9EC((SEL *)&selRef_systemGray3Color, (SEL *)&selRef_traitCollectionWithUserInterfaceStyle_, (SEL *)&selRef_whiteColor, 76);
    v53.n128_u64[0] = 0.5;
    v51 = Color.opacity(_:)(v52, v53);
    swift_release(v52);
    goto LABEL_10;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "GeneralMapsWidget/UserLocationView.swift", 40, 2, 105, 0);
  __break(1u);
  return result;
}

void sub_10004C2CC()
{
  qword_100090BC8 = 0x4036000000000000;
}

uint64_t initializeBufferWithCopyOfBuffer for UserLocationState(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for UserLocationState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UserLocationState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for UserLocationState()
{
  return &type metadata for UserLocationState;
}

__n128 initializeWithCopy for UserLocationViewLayout(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for UserLocationViewLayout(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UserLocationViewLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for UserLocationViewLayout()
{
  return &type metadata for UserLocationViewLayout;
}

uint64_t sub_10004C45C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006D490, 1);
}

__n128 initializeBufferWithCopyOfBuffer for UserLocationView(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for UserLocationView(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UserLocationView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for UserLocationView()
{
  return &type metadata for UserLocationView;
}

uint64_t sub_10004C528()
{
  return sub_10001D82C(&qword_10008E2D0, &qword_10008E2D8, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_10004C554(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006D510, 1);
}

uint64_t type metadata accessor for PreciseUserLocationView(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008E368, (uint64_t)&nominal type descriptor for PreciseUserLocationView);
}

uint64_t type metadata accessor for CoarseUserLocationView(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008E400, (uint64_t)&nominal type descriptor for CoarseUserLocationView);
}

uint64_t sub_10004C58C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  _OWORD v19[3];

  v1 = v0;
  v2 = sub_1000027AC(&qword_10008E4A0);
  __chkstk_darwin(v2);
  v4 = (_QWORD *)((char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_1000027AC(&qword_10008E4A8);
  __chkstk_darwin(v5);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v4 = static Alignment.center.getter(v8);
  v4[1] = v9;
  v10 = sub_1000027AC(&qword_10008E4B0);
  sub_10004C72C(v1, (uint64_t)v4 + *(int *)(v10 + 44));
  if (qword_10008BA08 != -1)
    swift_once(&qword_10008BA08, sub_10004C2CC);
  v12 = qword_100090BC8;
  v13 = static Alignment.center.getter(v11);
  _FrameLayout.init(width:height:alignment:)(v19, v12, 0, v12, 0, v13, v14);
  sub_100016550((uint64_t)v4, (uint64_t)v7, &qword_10008E4A0);
  v15 = &v7[*(int *)(v5 + 36)];
  v16 = v19[1];
  *(_OWORD *)v15 = v19[0];
  *((_OWORD *)v15 + 1) = v16;
  *((_OWORD *)v15 + 2) = v19[2];
  sub_100015590((uint64_t)v4, &qword_10008E4A0);
  v17 = sub_10004E838();
  View.accessibility(identifier:)(0xD000000000000017, 0x800000010006BBA0, v5, v17);
  return sub_100015590((uint64_t)v7, &qword_10008E4A8);
}

uint64_t sub_10004C72C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  int v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t (*v88)(char *, uint64_t);
  uint64_t v89;
  char v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t, uint64_t);
  uint64_t v103;
  char v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  double v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  double v136;
  uint64_t v137;
  double v138;
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t result;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  double v179;
  unint64_t v180;
  uint64_t v181;
  double v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  char v187;

  v177 = a2;
  v166 = type metadata accessor for Color.RGBColorSpace(0);
  v164 = *(_QWORD *)(v166 - 8);
  __chkstk_darwin(v166);
  v165 = (char *)&v149 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_1000027AC(&qword_10008E4C8);
  __chkstk_darwin(v176);
  v175 = (uint64_t *)((char *)&v149 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v171 = sub_1000027AC(&qword_10008E478);
  v161 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin(v171);
  v160 = (char *)&v149 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = sub_1000027AC(&qword_10008E4D0);
  __chkstk_darwin(v168);
  v170 = (uint64_t)&v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_1000027AC(&qword_10008E4D8);
  __chkstk_darwin(v169);
  v162 = (uint64_t)&v149 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for _ForegroundLayerLevel(0);
  __chkstk_darwin(v8);
  v158 = (char *)&v149 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v10);
  v156 = (char *)&v149 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = type metadata accessor for BlendMode(0);
  v154 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v153 = (char *)&v149 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ColorScheme(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v163 = (char *)&v149 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v149 - v18;
  __chkstk_darwin(v17);
  v178 = (uint64_t)&v149 - v20;
  v150 = sub_1000027AC(&qword_10008E4E0);
  __chkstk_darwin(v150);
  v151 = (char *)&v149 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_1000027AC(&qword_10008E4E8);
  v22 = __chkstk_darwin(v152);
  v157 = (uint64_t)&v149 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v159 = (char *)&v149 - v24;
  v172 = sub_1000027AC(&qword_10008E4F0);
  __chkstk_darwin(v172);
  v167 = (char *)&v149 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for WidgetRenderingMode(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v149 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v32 = (char *)&v149 - v31;
  v33 = sub_1000027AC(&qword_10008E4F8);
  v34 = __chkstk_darwin(v33);
  v174 = (uint64_t)&v149 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v173 = (char *)&v149 - v36;
  v37 = type metadata accessor for PreciseUserLocationView(0);
  v38 = a1;
  v39 = sub_100052310((uint64_t)v32);
  static WidgetRenderingMode.accented.getter(v39);
  LOBYTE(a1) = static WidgetRenderingMode.== infix(_:_:)(v32, v30);
  v40 = *(void (**)(char *, uint64_t))(v27 + 8);
  v40(v30, v26);
  v40(v32, v26);
  if ((a1 & 1) != 0)
  {
    v41 = *(unsigned __int8 *)(v38 + *(int *)(v37 + 24));
    v42 = sub_100052044(v178);
    v149 = v14;
    if (v41 == 1)
    {
      v166 = v38;
      v43 = v178;
      v44 = sub_10004B9EC((SEL *)&selRef_systemGray2Color, (SEL *)&selRef_traitCollectionWithAccessibilityContrast_, (SEL *)&selRef_systemGray2Color, 65);
      v165 = *(char **)(v14 + 8);
      v45 = ((uint64_t (*)(uint64_t, uint64_t))v165)(v43, v13);
      v46 = static Edge.Set.all.getter(v45);
      v47 = EdgeInsets.init(_all:)(1.0);
      v49 = v48;
      v51 = v50;
      v53 = v52;
      v54 = v154;
      v55 = v153;
      v56 = v155;
      (*(void (**)(char *, _QWORD, uint64_t))(v154 + 104))(v153, enum case for BlendMode.destinationOut(_:), v155);
      v57 = (uint64_t)v156;
      (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v156, v55, v56);
      v58 = (uint64_t)v151;
      sub_10001B33C(v57, (uint64_t)&v151[*(int *)(v150 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
      *(_QWORD *)v58 = v44;
      *(_WORD *)(v58 + 8) = 256;
      *(_BYTE *)(v58 + 16) = v46;
      *(double *)(v58 + 24) = v47;
      *(_QWORD *)(v58 + 32) = v49;
      *(_QWORD *)(v58 + 40) = v51;
      *(_QWORD *)(v58 + 48) = v53;
      *(_BYTE *)(v58 + 56) = 0;
      swift_retain(v44);
      sub_10001B54C(v57, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v56);
      v59 = swift_release(v44);
      v60 = v158;
      static _ForegroundLayerLevel.secondary.getter(v59);
      v61 = (uint64_t)v159;
      _ForegroundLayerLevelViewModifier.init(level:)(v60);
      sub_10001565C(v58, v61, &qword_10008E4E0);
      sub_100052044(v43);
      v62 = sub_10004B9EC((SEL *)&selRef_systemGray2Color, (SEL *)&selRef_traitCollectionWithAccessibilityContrast_, (SEL *)&selRef_systemGray2Color, 65);
      v63 = ((uint64_t (*)(uint64_t, uint64_t))v165)(v43, v13);
      LOBYTE(v56) = static Edge.Set.all.getter(v63);
      v64 = EdgeInsets.init(_all:)(1.0);
      v66 = v65;
      v68 = v67;
      v70 = v69;
      v71 = v157;
      sub_100016550(v61, v157, &qword_10008E4E8);
      v72 = v162;
      sub_100016550(v71, v162, &qword_10008E4E8);
      v73 = v72 + *(int *)(sub_1000027AC(&qword_10008E528) + 48);
      *(_QWORD *)v73 = v62;
      *(_WORD *)(v73 + 8) = 256;
      *(_BYTE *)(v73 + 16) = v56;
      *(double *)(v73 + 24) = v64;
      *(_QWORD *)(v73 + 32) = v66;
      *(_QWORD *)(v73 + 40) = v68;
      *(_QWORD *)(v73 + 48) = v70;
      *(_BYTE *)(v73 + 56) = 0;
      *(_QWORD *)(v73 + 64) = 0x3FE0000000000000;
      swift_retain(v62);
      sub_100015590(v71, &qword_10008E4E8);
      v74 = v170;
      sub_100016550(v72, v170, &qword_10008E4D8);
      swift_storeEnumTagMultiPayload(v74, v168, 0);
      v75 = sub_10001D82C(&qword_10008E510, &qword_10008E4D8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      *(double *)&v76 = COERCE_DOUBLE(sub_1000027EC(&qword_10008E488));
      v77 = sub_10004E7B4();
      v179 = *(double *)&v76;
      v180 = v77;
      swift_getOpaqueTypeConformance2(&v179, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
      v78 = v167;
      _ConditionalContent<>.init(storage:)(v74, v169, v171, v75);
      v79 = (uint64_t)v78;
      sub_100015590(v72, &qword_10008E4D8);
      swift_release(v62);
      sub_100015590(v61, &qword_10008E4E8);
      v80 = v43;
    }
    else
    {
      *(double *)&v101 = COERCE_DOUBLE(static Color.blue.getter(v42));
      v102 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8);
      v80 = v178;
      v103 = v102(v178, v13);
      v104 = static Edge.Set.all.getter(v103);
      v105 = EdgeInsets.init(_all:)(1.0);
      v179 = *(double *)&v101;
      LOWORD(v180) = 256;
      LOBYTE(v181) = v104;
      v182 = v105;
      v183 = v106;
      v184 = v107;
      v185 = v108;
      v186 = 0;
      *(double *)&v109 = COERCE_DOUBLE(sub_1000027AC(&qword_10008E488));
      v110 = sub_10004E7B4();
      v111 = v160;
      View.widgetAccentable(_:)(1, v109, v110);
      swift_release(v101);
      v112 = v161;
      v113 = v170;
      v114 = v171;
      (*(void (**)(uint64_t, char *, uint64_t))(v161 + 16))(v170, v111, v171);
      swift_storeEnumTagMultiPayload(v113, v168, 1);
      v115 = sub_10001D82C(&qword_10008E510, &qword_10008E4D8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v179 = *(double *)&v109;
      v180 = v110;
      swift_getOpaqueTypeConformance2(&v179, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
      v79 = (uint64_t)v167;
      _ConditionalContent<>.init(storage:)(v113, v169, v114, v115);
      (*(void (**)(char *, uint64_t))(v112 + 8))(v111, v114);
    }
    v116 = (uint64_t)v173;
    v117 = v175;
    sub_100016550(v79, (uint64_t)v175, &qword_10008E4F0);
    swift_storeEnumTagMultiPayload(v117, v176, 0);
    v118 = v79;
    v119 = sub_1000027AC(&qword_10008E500);
    v120 = sub_10004E8BC();
    sub_10001D82C(&qword_10008E518, &qword_10008E500, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v117, v172, v119, v120);
    sub_100015590(v118, &qword_10008E4F0);
    v85 = v149;
LABEL_13:
    sub_100052044(v80);
    v135 = sub_10004B9EC((SEL *)&selRef_systemGray3Color, (SEL *)&selRef_traitCollectionWithUserInterfaceStyle_, (SEL *)&selRef_whiteColor, 76);
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v80, v13);
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v179, 0, 0, &_swiftEmptyArrayStorage, 3.5, 10.0, 0.0);
    v136 = v179;
    v137 = v181;
    v138 = v182;
    v139 = v183;
    v140.n128_u64[0] = 0.5;
    v141 = static Alignment.center.getter(v140);
    v143 = v142;
    v144 = v174;
    sub_100016550(v116, v174, &qword_10008E4F8);
    v145 = v116;
    v146 = v177;
    sub_100016550(v144, v177, &qword_10008E4F8);
    v147 = v146 + *(int *)(sub_1000027AC(&qword_10008E520) + 48);
    *(double *)v147 = v136 * 0.5;
    *(double *)(v147 + 8) = v136;
    *(_QWORD *)(v147 + 16) = v180;
    *(_QWORD *)(v147 + 24) = v137;
    *(double *)(v147 + 32) = v138;
    *(_QWORD *)(v147 + 40) = v139;
    *(_QWORD *)(v147 + 48) = v135;
    *(_WORD *)(v147 + 56) = 256;
    *(_QWORD *)(v147 + 64) = v141;
    *(_QWORD *)(v147 + 72) = v143;
    swift_bridgeObjectRetain(*(_QWORD *)&v138);
    swift_retain(v135);
    sub_100015590(v145, &qword_10008E4F8);
    swift_release(v135);
    swift_bridgeObjectRelease(*(_QWORD *)&v138);
    return sub_100015590(v144, &qword_10008E4F8);
  }
  sub_100052044((uint64_t)v19);
  v81 = v163;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v163, v19, v13);
  v82 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v81, v13);
  v83 = 0.25;
  v84 = v38;
  v85 = v14;
  v80 = v178;
  if (v82 == enum case for ColorScheme.light(_:))
  {
LABEL_7:
    v86 = v165;
    (*(void (**)(char *, _QWORD, uint64_t))(v164 + 104))(v165, enum case for Color.RGBColorSpace.sRGB(_:), v166);
    v87 = Color.init(_:white:opacity:)(v86, 0.0, v83);
    v88 = *(uint64_t (**)(char *, uint64_t))(v85 + 8);
    v89 = v88(v19, v13);
    v90 = static Edge.Set.all.getter(v89);
    v91 = EdgeInsets.init(_all:)(1.0);
    v93 = v92;
    v95 = v94;
    v97 = v96;
    v98 = *(unsigned __int8 *)(v84 + *(int *)(v37 + 24));
    v99 = sub_100052044(v80);
    if (v98 == 1)
      v100 = sub_10004B9EC((SEL *)&selRef_systemGray2Color, (SEL *)&selRef_traitCollectionWithAccessibilityContrast_, (SEL *)&selRef_systemGray2Color, 65);
    else
      v100 = static Color.blue.getter(v99);
    v121 = v100;
    v122 = v88((char *)v80, v13);
    v123 = static Edge.Set.all.getter(v122);
    v124 = EdgeInsets.init(_all:)(1.0);
    v126 = v125;
    v128 = v127;
    v130 = v129;
    LOBYTE(v179) = 0;
    v187 = 0;
    swift_retain(v87);
    v131 = v175;
    *v175 = v87;
    *(_OWORD *)(v131 + 1) = xmmword_10006BA50;
    v131[3] = 0x3FF0000000000000;
    *((_BYTE *)v131 + 32) = v90;
    *((double *)v131 + 5) = v91;
    v131[6] = v93;
    v131[7] = v95;
    v131[8] = v97;
    *((_BYTE *)v131 + 72) = 0;
    v131[10] = v121;
    *((_WORD *)v131 + 44) = 256;
    *((_BYTE *)v131 + 96) = v123;
    *((double *)v131 + 13) = v124;
    v131[14] = v126;
    v131[15] = v128;
    v131[16] = v130;
    *((_BYTE *)v131 + 136) = 0;
    swift_retain(v121);
    swift_storeEnumTagMultiPayload(v131, v176, 1);
    v132 = sub_1000027AC(&qword_10008E500);
    v133 = sub_10004E8BC();
    sub_10001D82C(&qword_10008E518, &qword_10008E500, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v134 = v133;
    v116 = (uint64_t)v173;
    _ConditionalContent<>.init(storage:)(v131, v172, v132, v134);
    swift_release(v87);
    swift_release(v121);
    goto LABEL_13;
  }
  if (v82 == enum case for ColorScheme.dark(_:))
  {
    v83 = 0.3;
    goto LABEL_7;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "GeneralMapsWidget/UserLocationView.swift", 40, 2, 87, 0);
  __break(1u);
  return result;
}

unint64_t sub_10004D554()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008E308;
  if (!qword_10008E308)
  {
    v1 = sub_1000027EC(&qword_10008E2F0);
    sub_10001B41C(&qword_10008E2F8, type metadata accessor for CoarseUserLocationView, (uint64_t)&unk_10006BC58);
    sub_10001B41C(&qword_10008E300, type metadata accessor for PreciseUserLocationView, (uint64_t)&unk_10006BC08);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008E308);
  }
  return result;
}

_QWORD *sub_10004D5F0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_1000027AC(&qword_10008C240);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (_QWORD *)((char *)a1 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = sub_1000027AC(&qword_10008C488);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t sub_10004D74C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_1000027AC(&qword_10008C240);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v7 = sub_1000027AC(&qword_10008C488);
  if (swift_getEnumCaseMultiPayload(v6, v7) != 1)
    return swift_release(*v6);
  v8 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
}

_QWORD *sub_10004D804(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = sub_1000027AC(&qword_10008C240);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = sub_1000027AC(&qword_10008C488);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_10004D934(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    sub_100015590((uint64_t)a1, &qword_10008C240);
    v6 = sub_1000027AC(&qword_10008C240);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = *(int *)(a3 + 20);
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    sub_100015590((uint64_t)a1 + v12, &qword_10008C488);
    v15 = sub_1000027AC(&qword_10008C488);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

char *sub_10004DA8C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_1000027AC(&qword_10008C240);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_1000027AC(&qword_10008C488);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

char *sub_10004DBB4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_100015590((uint64_t)a1, &qword_10008C240);
    v6 = sub_1000027AC(&qword_10008C240);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = *(int *)(a3 + 20);
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100015590((uint64_t)&a1[v8], &qword_10008C488);
    v11 = sub_1000027AC(&qword_10008C488);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t sub_10004DD04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004DD10);
}

uint64_t sub_10004DD14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004DD20);
}

void sub_10004DD24(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_10001B658(319, (unint64_t *)&unk_10008C2E8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001B658(319, &qword_10008C888, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_10006BBD8;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

_QWORD *sub_10004DDD0(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_1000027AC(&qword_10008C240);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (_QWORD *)((char *)a1 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = sub_1000027AC(&qword_10008C488);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    *(_QWORD *)((char *)a1 + v23) = *(_QWORD *)((char *)a2 + v23);
  }
  return a1;
}

_QWORD *sub_10004DF34(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_1000027AC(&qword_10008C240);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = sub_1000027AC(&qword_10008C488);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v21) = *(_QWORD *)((char *)a2 + v21);
  return a1;
}

_QWORD *sub_10004E06C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    sub_100015590((uint64_t)a1, &qword_10008C240);
    v6 = sub_1000027AC(&qword_10008C240);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    sub_100015590((uint64_t)a1 + v12, &qword_10008C488);
    v15 = sub_1000027AC(&qword_10008C488);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  return a1;
}

char *sub_10004E1D0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_1000027AC(&qword_10008C240);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_1000027AC(&qword_10008C488);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];
  return a1;
}

char *sub_10004E300(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    sub_100015590((uint64_t)a1, &qword_10008C240);
    v6 = sub_1000027AC(&qword_10008C240);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100015590((uint64_t)&a1[v8], &qword_10008C488);
    v11 = sub_1000027AC(&qword_10008C488);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];
  return a1;
}

uint64_t sub_10004E458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004E464);
}

uint64_t sub_10004E468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v6 = sub_1000027AC(&qword_10008C278);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1000027AC(&qword_10008C480);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 2)
    return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_10004E528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004E534);
}

uint64_t sub_10004E538(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_1000027AC(&qword_10008C278);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_1000027AC(&qword_10008C480);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  return result;
}

void sub_10004E5E4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_10001B658(319, (unint64_t *)&unk_10008C2E8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001B658(319, &qword_10008C888, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_10006BBD8;
      v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

unint64_t sub_10004E6A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008E440;
  if (!qword_10008E440)
  {
    v1 = sub_1000027EC(&qword_10008E448);
    sub_10004D554();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008E440);
  }
  return result;
}

uint64_t sub_10004E710(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006D560, 1);
}

uint64_t sub_10004E720(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006D538, 1);
}

unint64_t sub_10004E730()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008E468;
  if (!qword_10008E468)
  {
    v1 = sub_1000027EC(&qword_10008E458);
    sub_10001D82C(&qword_10008E470, &qword_10008E450, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008E468);
  }
  return result;
}

unint64_t sub_10004E7B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008E490;
  if (!qword_10008E490)
  {
    v1 = sub_1000027EC(&qword_10008E488);
    sub_10001D82C(&qword_10008D300, &qword_10008D308, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008E490);
  }
  return result;
}

unint64_t sub_10004E838()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008E4B8;
  if (!qword_10008E4B8)
  {
    v1 = sub_1000027EC(&qword_10008E4A8);
    sub_10001D82C(&qword_10008E4C0, &qword_10008E4A0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008E4B8);
  }
  return result;
}

unint64_t sub_10004E8BC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10008E508;
  if (!qword_10008E508)
  {
    v1 = sub_1000027EC(&qword_10008E4F0);
    sub_10001D82C(&qword_10008E510, &qword_10008E4D8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v2[0] = sub_1000027EC(&qword_10008E488);
    v2[1] = sub_10004E7B4();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008E508);
  }
  return result;
}

uint64_t sub_10004E970()
{
  return sub_10001D96C(&qword_10008E530, &qword_10008E538, (void (*)(void))sub_10004E730);
}

uint64_t sub_10004E99C()
{
  return sub_10001D96C(&qword_10008E540, &qword_10008E548, (void (*)(void))sub_10004E838);
}

uint64_t *sub_10004E9C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(void **)((char *)a2 + v8);
    if (v11 == (void *)1)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = (void *)*((_QWORD *)v10 + 1);
      *(_QWORD *)v9 = v11;
      *((_QWORD *)v9 + 1) = v13;
      v14 = v11;
      v15 = v13;
    }
  }
  return a1;
}

void sub_10004EA78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id *v5;

  v4 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (id *)(a1 + *(int *)(a2 + 20));
  if (*v5 != (id)1)
  {

  }
}

uint64_t sub_10004EADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;

  v6 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(void **)(a2 + v7);
  if (v10 == (void *)1)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *(void **)(v9 + 8);
    *(_QWORD *)v8 = v10;
    *(_QWORD *)(v8 + 8) = v11;
    v12 = v10;
    v13 = v11;
  }
  return a1;
}

uint64_t sub_10004EB60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v18;

  v6 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(void **)(a1 + v7);
  v11 = *(void **)v9;
  if (v10 != (void *)1)
  {
    if (v11 != (void *)1)
    {
      *(_QWORD *)v8 = v11;
      v15 = v11;

      v16 = *(void **)(v8 + 8);
      v17 = *(void **)(v9 + 8);
      *(_QWORD *)(v8 + 8) = v17;
      v18 = v17;

      return a1;
    }
    sub_100016DF4((id *)v8);
    goto LABEL_6;
  }
  if (v11 == (void *)1)
  {
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    return a1;
  }
  *(_QWORD *)v8 = v11;
  v12 = *(void **)(v9 + 8);
  *(_QWORD *)(v8 + 8) = v12;
  v13 = v11;
  v14 = v12;
  return a1;
}

uint64_t sub_10004EC28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10004EC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  void *v11;

  v6 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (_QWORD *)(a2 + v7);
  v10 = *(void **)(a1 + v7);
  if (v10 != (void *)1)
  {
    if (*v9 != 1)
    {
      *(_QWORD *)v8 = *v9;

      v11 = *(void **)(v8 + 8);
      *(_QWORD *)(v8 + 8) = v9[1];

      return a1;
    }
    sub_100016DF4((id *)v8);
  }
  *(_OWORD *)v8 = *(_OWORD *)v9;
  return a1;
}

uint64_t sub_10004ED24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004ED30);
}

uint64_t sub_10004ED30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for TimelineProviderContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return ((_DWORD)v9 - 1) & ~(((int)v9 - 1) >> 31);
}

uint64_t sub_10004EDB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004EDBC);
}

uint64_t sub_10004EDBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for TimelineProviderContext(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 + 1);
  return result;
}

uint64_t type metadata accessor for NavigationETAEntryContent.ResolvedContent(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008E5A8, (uint64_t)&nominal type descriptor for NavigationETAEntryContent.ResolvedContent);
}

uint64_t sub_10004EE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100050524(a1, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for TimelineProviderContext, (uint64_t)&unk_10006BCC0);
}

char *sub_10004EE5C(char *a1, char **a2, uint64_t a3)
{
  char *v4;
  int v5;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = &v8[(v5 + 16) & ~(unint64_t)v5];
    swift_retain(v8);
  }
  else
  {
    v7 = *a2;
    if (*a2 == (char *)1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      v9 = a2[1];
      *(_QWORD *)a1 = v7;
      *((_QWORD *)a1 + 1) = v9;
      v10 = v7;
      v11 = v9;
    }
    v12 = a2[3];
    *((_QWORD *)v4 + 2) = a2[2];
    *((_QWORD *)v4 + 3) = v12;
    *((_DWORD *)v4 + 8) = *((_DWORD *)a2 + 8);
    v4[36] = *((_BYTE *)a2 + 36);
    v13 = a2[6];
    *((_QWORD *)v4 + 5) = a2[5];
    *((_QWORD *)v4 + 6) = v13;
    v14 = *((_BYTE *)a2 + 56);
    v15 = *(int *)(a3 + 36);
    v16 = (char *)a2 + v15;
    v17 = &v4[v15];
    v4[56] = v14;
    v18 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    if (v20(v16, 1, v18))
    {
      v21 = sub_1000027AC(&qword_10008BA68);
      memcpy(v17, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v22 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v17, v16, v22);
      v23 = *(int *)(v18 + 20);
      v24 = &v17[v23];
      v25 = &v16[v23];
      v26 = *(void **)&v16[v23];
      if (v26 == (void *)1)
      {
        *(_OWORD *)v24 = *(_OWORD *)v25;
      }
      else
      {
        v27 = (void *)*((_QWORD *)v25 + 1);
        *(_QWORD *)v24 = v26;
        *((_QWORD *)v24 + 1) = v27;
        v28 = v26;
        v29 = v27;
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
    }
  }
  return v4;
}

void sub_10004EFEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;

  if (*(_QWORD *)a1 != 1)
  {

  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
    v7 = (id *)(v4 + *(int *)(v5 + 20));
    if (*v7 != (id)1)
    {

    }
  }
}

uint64_t sub_10004F0A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;

  v6 = *(void **)a2;
  if (*(_QWORD *)a2 == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v7 = *(void **)(a2 + 8);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = v6;
    v9 = v7;
  }
  v10 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v11;
  v12 = *(_BYTE *)(a2 + 56);
  v13 = *(int *)(a3 + 36);
  v14 = (char *)(a2 + v13);
  v15 = (char *)(a1 + v13);
  *(_BYTE *)(a1 + 56) = v12;
  v16 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  if (v18(v14, 1, v16))
  {
    v19 = sub_1000027AC(&qword_10008BA68);
    memcpy(v15, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v20 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v15, v14, v20);
    v21 = *(int *)(v16 + 20);
    v22 = &v15[v21];
    v23 = &v14[v21];
    v24 = *(void **)&v14[v21];
    if (v24 == (void *)1)
    {
      *(_OWORD *)v22 = *(_OWORD *)v23;
    }
    else
    {
      v25 = (void *)*((_QWORD *)v23 + 1);
      *(_QWORD *)v22 = v24;
      *((_QWORD *)v22 + 1) = v25;
      v26 = v24;
      v27 = v25;
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_10004F20C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  id v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  void *v47;
  void *v48;
  id v49;

  v6 = *(id *)a1;
  v7 = *(void **)a2;
  if (*(_QWORD *)a1 == 1)
  {
    if (v7 != (void *)1)
    {
      *(_QWORD *)a1 = v7;
      v8 = *(void **)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v8;
      v9 = v7;
      v10 = v8;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v7 == (void *)1)
  {
    sub_100016DF4((id *)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *(_QWORD *)a1 = v7;
  v11 = v7;

  v12 = *(void **)(a1 + 8);
  v13 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v13;
  v14 = v13;

LABEL_8:
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v18 = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v20 = *(int *)(a3 + 36);
  v21 = (char *)(a1 + v20);
  v22 = (char *)(a2 + v20);
  v23 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      v34 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v21, v22, v34);
      v35 = *(int *)(v23 + 20);
      v36 = &v21[v35];
      v37 = &v22[v35];
      v38 = *(id *)v36;
      v39 = *(void **)v37;
      if (*(_QWORD *)v36 == 1)
      {
        if (v39 != (void *)1)
        {
          *(_QWORD *)v36 = v39;
          v40 = (void *)*((_QWORD *)v37 + 1);
          *((_QWORD *)v36 + 1) = v40;
          v41 = v39;
          v42 = v40;
          return a1;
        }
      }
      else
      {
        if (v39 != (void *)1)
        {
          *(_QWORD *)v36 = v39;
          v46 = v39;

          v47 = (void *)*((_QWORD *)v36 + 1);
          v48 = (void *)*((_QWORD *)v37 + 1);
          *((_QWORD *)v36 + 1) = v48;
          v49 = v48;

          return a1;
        }
        sub_100016DF4((id *)v36);
      }
      *(_OWORD *)v36 = *(_OWORD *)v37;
      return a1;
    }
    sub_10001B54C((uint64_t)v21, type metadata accessor for NavigationETAEntryContent.ResolvedContent);
    goto LABEL_14;
  }
  if (v27)
  {
LABEL_14:
    v33 = sub_1000027AC(&qword_10008BA68);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    return a1;
  }
  v28 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v21, v22, v28);
  v29 = *(int *)(v23 + 20);
  v30 = &v21[v29];
  v31 = &v22[v29];
  v32 = *(void **)&v22[v29];
  if (v32 == (void *)1)
  {
    *(_OWORD *)v30 = *(_OWORD *)v31;
  }
  else
  {
    *(_QWORD *)v30 = v32;
    v43 = (void *)*((_QWORD *)v31 + 1);
    *((_QWORD *)v30 + 1) = v43;
    v44 = v32;
    v45 = v43;
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  return a1;
}

uint64_t sub_10004F4A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(int *)(a3 + 36);
  v6 = (char *)(a2 + v5);
  v7 = (char *)(a1 + v5);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8))
  {
    v10 = sub_1000027AC(&qword_10008BA68);
    memcpy(v7, v6, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v7, v6, v11);
    *(_OWORD *)&v7[*(int *)(v8 + 20)] = *(_OWORD *)&v6[*(int *)(v8 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_10004F594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  id v27;
  void *v28;

  v6 = *(id *)a1;
  if (*(_QWORD *)a1 == 1)
    goto LABEL_4;
  if (*(_QWORD *)a2 == 1)
  {
    sub_100016DF4((id *)a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

LABEL_6:
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v12 = *(int *)(a3 + 36);
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      v20 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v13, v14, v20);
      *(_OWORD *)&v13[*(int *)(v15 + 20)] = *(_OWORD *)&v14[*(int *)(v15 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      return a1;
    }
LABEL_11:
    v21 = sub_1000027AC(&qword_10008BA68);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  if (v19)
  {
    sub_10001B54C((uint64_t)v13, type metadata accessor for NavigationETAEntryContent.ResolvedContent);
    goto LABEL_11;
  }
  v23 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v13, v14, v23);
  v24 = *(int *)(v15 + 20);
  v25 = &v13[v24];
  v26 = &v14[v24];
  v27 = *(id *)v25;
  if (*(_QWORD *)v25 != 1)
  {
    if (*(_QWORD *)v26 != 1)
    {
      *(_QWORD *)v25 = *(_QWORD *)v26;

      v28 = (void *)*((_QWORD *)v25 + 1);
      *((_QWORD *)v25 + 1) = *((_QWORD *)v26 + 1);

      return a1;
    }
    sub_100016DF4((id *)v25);
  }
  *(_OWORD *)v25 = *(_OWORD *)v26;
  return a1;
}

uint64_t sub_10004F78C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004F798);
}

uint64_t sub_10004F798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000027AC(&qword_10008BA68);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_10004F818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004F824);
}

uint64_t sub_10004F824(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_1000027AC(&qword_10008BA68);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for NavigationETAEntryContent(uint64_t a1)
{
  return sub_100006A5C(a1, (uint64_t *)&unk_10008E638, (uint64_t)&nominal type descriptor for NavigationETAEntryContent);
}

void sub_10004F8B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_10006BCC0;
  v4[1] = &unk_10006BD00;
  v4[2] = &unk_10006BD18;
  v4[3] = &unk_10006BD00;
  v4[4] = &unk_10006BD30;
  sub_10004F944(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

void sub_10004F944(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10008E648)
  {
    v2 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10008E648);
  }
}

_UNKNOWN **sub_10004F998()
{
  return &off_100082F28;
}

uint64_t sub_10004F9A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10004F9B4(v2 + *(int *)(a1 + 36), a2);
}

uint64_t sub_10004F9B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000027AC(&qword_10008BA68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

char *sub_10004F9FC(char *a1, char **a2, uint64_t a3)
{
  char *v4;
  int v5;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  void *v30;
  id v31;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = &v8[(v5 + 16) & ~(unint64_t)v5];
    swift_retain(v8);
  }
  else
  {
    v7 = *a2;
    if (*a2 == (char *)1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      v9 = a2[1];
      *(_QWORD *)a1 = v7;
      *((_QWORD *)a1 + 1) = v9;
      v10 = v7;
      v11 = v9;
    }
    v12 = a2[3];
    *((_QWORD *)v4 + 2) = a2[2];
    *((_QWORD *)v4 + 3) = v12;
    *((_DWORD *)v4 + 8) = *((_DWORD *)a2 + 8);
    v4[36] = *((_BYTE *)a2 + 36);
    v13 = a2[6];
    *((_QWORD *)v4 + 5) = a2[5];
    *((_QWORD *)v4 + 6) = v13;
    v4[56] = *((_BYTE *)a2 + 56);
    v14 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
    v15 = &v4[v14];
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    if (v19(v16, 1, v17))
    {
      v20 = sub_1000027AC(&qword_10008BA68);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v21 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v15, v16, v21);
      v22 = *(int *)(v17 + 20);
      v23 = &v15[v22];
      v24 = &v16[v22];
      v25 = *(void **)&v16[v22];
      if (v25 == (void *)1)
      {
        *(_OWORD *)v23 = *(_OWORD *)v24;
      }
      else
      {
        v26 = (void *)*((_QWORD *)v24 + 1);
        *(_QWORD *)v23 = v25;
        *((_QWORD *)v23 + 1) = v26;
        v27 = v25;
        v28 = v26;
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v29 = *(int *)(a3 + 20);
    v30 = *(char **)((char *)a2 + v29);
    *(_QWORD *)&v4[v29] = v30;
    v31 = v30;
  }
  return v4;
}

void sub_10004FBAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;

  if (*(_QWORD *)a1 != 1)
  {

  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  v4 = a1 + *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v5 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
    v7 = (id *)(v4 + *(int *)(v5 + 20));
    if (*v7 != (id)1)
    {

    }
  }

}

uint64_t sub_10004FC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  id v29;

  v6 = *(void **)a2;
  if (*(_QWORD *)a2 == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v7 = *(void **)(a2 + 8);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = v6;
    v9 = v7;
  }
  v10 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v12 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  if (v17(v14, 1, v15))
  {
    v18 = sub_1000027AC(&qword_10008BA68);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v13, v14, v19);
    v20 = *(int *)(v15 + 20);
    v21 = &v13[v20];
    v22 = &v14[v20];
    v23 = *(void **)&v14[v20];
    if (v23 == (void *)1)
    {
      *(_OWORD *)v21 = *(_OWORD *)v22;
    }
    else
    {
      v24 = (void *)*((_QWORD *)v22 + 1);
      *(_QWORD *)v21 = v23;
      *((_QWORD *)v21 + 1) = v24;
      v25 = v23;
      v26 = v24;
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v27 = *(int *)(a3 + 20);
  v28 = *(void **)(a2 + v27);
  *(_QWORD *)(a1 + v27) = v28;
  v29 = v28;
  return a1;
}

uint64_t sub_10004FDFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  id v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;

  v6 = *(id *)a1;
  v7 = *(void **)a2;
  if (*(_QWORD *)a1 == 1)
  {
    if (v7 != (void *)1)
    {
      *(_QWORD *)a1 = v7;
      v8 = *(void **)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v8;
      v9 = v7;
      v10 = v8;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v7 == (void *)1)
  {
    sub_100016DF4((id *)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *(_QWORD *)a1 = v7;
  v11 = v7;

  v12 = *(void **)(a1 + 8);
  v13 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v13;
  v14 = v13;

LABEL_8:
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v18 = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v20 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v21 = (char *)(a1 + v20);
  v22 = (char *)(a2 + v20);
  v23 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      v34 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v21, v22, v34);
      v35 = *(int *)(v23 + 20);
      v36 = &v21[v35];
      v37 = &v22[v35];
      v38 = *(id *)v36;
      v39 = *(void **)v37;
      if (*(_QWORD *)v36 == 1)
      {
        if (v39 != (void *)1)
        {
          *(_QWORD *)v36 = v39;
          v40 = (void *)*((_QWORD *)v37 + 1);
          *((_QWORD *)v36 + 1) = v40;
          v41 = v39;
          v42 = v40;
          goto LABEL_24;
        }
      }
      else
      {
        if (v39 != (void *)1)
        {
          *(_QWORD *)v36 = v39;
          v46 = v39;

          v47 = (void *)*((_QWORD *)v36 + 1);
          v48 = (void *)*((_QWORD *)v37 + 1);
          *((_QWORD *)v36 + 1) = v48;
          v49 = v48;

          goto LABEL_24;
        }
        sub_100016DF4((id *)v36);
      }
      *(_OWORD *)v36 = *(_OWORD *)v37;
      goto LABEL_24;
    }
    sub_10001B54C((uint64_t)v21, type metadata accessor for NavigationETAEntryContent.ResolvedContent);
    goto LABEL_14;
  }
  if (v27)
  {
LABEL_14:
    v33 = sub_1000027AC(&qword_10008BA68);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_24;
  }
  v28 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v21, v22, v28);
  v29 = *(int *)(v23 + 20);
  v30 = &v21[v29];
  v31 = &v22[v29];
  v32 = *(void **)&v22[v29];
  if (v32 == (void *)1)
  {
    *(_OWORD *)v30 = *(_OWORD *)v31;
  }
  else
  {
    *(_QWORD *)v30 = v32;
    v43 = (void *)*((_QWORD *)v31 + 1);
    *((_QWORD *)v30 + 1) = v43;
    v44 = v32;
    v45 = v43;
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
LABEL_24:
  v50 = *(int *)(a3 + 20);
  v51 = *(void **)(a2 + v50);
  v52 = *(void **)(a1 + v50);
  *(_QWORD *)(a1 + v50) = v51;
  v53 = v51;

  return a1;
}

uint64_t sub_1000500B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_1000027AC(&qword_10008BA68);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v8, v9, v13);
    *(_OWORD *)&v8[*(int *)(v10 + 20)] = *(_OWORD *)&v9[*(int *)(v10 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000501D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  id v29;
  void *v30;

  v6 = *(id *)a1;
  if (*(_QWORD *)a1 == 1)
    goto LABEL_4;
  if (*(_QWORD *)a2 == 1)
  {
    sub_100016DF4((id *)a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

LABEL_6:
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v12 = *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      v20 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v13, v14, v20);
      *(_OWORD *)&v13[*(int *)(v15 + 20)] = *(_OWORD *)&v14[*(int *)(v15 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_12;
    }
LABEL_11:
    v21 = sub_1000027AC(&qword_10008BA68);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_12;
  }
  if (v19)
  {
    sub_10001B54C((uint64_t)v13, type metadata accessor for NavigationETAEntryContent.ResolvedContent);
    goto LABEL_11;
  }
  v25 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v13, v14, v25);
  v26 = *(int *)(v15 + 20);
  v27 = &v13[v26];
  v28 = &v14[v26];
  v29 = *(id *)v27;
  if (*(_QWORD *)v27 != 1)
  {
    if (*(_QWORD *)v28 != 1)
    {
      *(_QWORD *)v27 = *(_QWORD *)v28;

      v30 = (void *)*((_QWORD *)v27 + 1);
      *((_QWORD *)v27 + 1) = *((_QWORD *)v28 + 1);

      goto LABEL_12;
    }
    sub_100016DF4((id *)v27);
  }
  *(_OWORD *)v27 = *(_OWORD *)v28;
LABEL_12:
  v22 = *(int *)(a3 + 20);
  v23 = *(void **)(a1 + v22);
  *(_QWORD *)(a1 + v22) = *(_QWORD *)(a2 + v22);

  return a1;
}

uint64_t sub_1000503EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000503F8);
}

uint64_t sub_1000503F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for NavigationETAEntryContent(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100050474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100050480);
}

uint64_t sub_100050480(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for NavigationETAEntryContent(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for NavigationETAEntryContentResolver(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008E710, (uint64_t)&nominal type descriptor for NavigationETAEntryContentResolver);
}

uint64_t sub_10005050C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100050524(a1, a2, a3, type metadata accessor for NavigationETAEntryContent, (uint64_t)&value witness table for Builtin.UnknownObject + 64);
}

uint64_t sub_100050524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t result;
  unint64_t v8;
  _QWORD v9[2];

  result = a4(319);
  if (v8 <= 0x3F)
  {
    v9[0] = *(_QWORD *)(result - 8) + 64;
    v9[1] = a5;
    swift_initStructMetadata(a1, 256, 2, v9, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100050590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(_QWORD);
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;

  v5 = v4;
  v41 = a3;
  v42 = a4;
  v44 = a2;
  v7 = sub_1000027AC(&qword_10008BF20);
  __chkstk_darwin(v7);
  v43 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TimelineProviderContext(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v39 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v39 - v13;
  v15 = type metadata accessor for NavigationETAEntryContentResolver(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = *(id *)(v5 + *(int *)(__chkstk_darwin(v15) + 20));
  sub_10001B33C(v5, (uint64_t)v18, v19);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v20(v14, a1, v9);
  v21 = *(unsigned __int8 *)(v16 + 80);
  v22 = (v21 + 16) & ~v21;
  v23 = *(unsigned __int8 *)(v10 + 80);
  v24 = (v17 + v23 + v22) & ~v23;
  v25 = (v11 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject(&unk_100082F60, v25 + 16, v21 | v23 | 7);
  sub_100050B78((uint64_t)v18, v26 + v22);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v26 + v24, v14, v9);
  v27 = (_QWORD *)(v26 + v25);
  v28 = v42;
  *v27 = v41;
  v27[1] = v28;
  v29 = (uint64_t)v39;
  v20(v39, a1, v9);
  v30 = type metadata accessor for NavigationETASnapshotter();
  swift_allocObject(v30, 80, 7);
  swift_retain(v28);
  v31 = v40;
  sub_10004B1D4(v29, v31);
  v33 = v32;

  v34 = type metadata accessor for Date(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = (uint64_t)v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v43, v44, v34);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v36, 0, 1, v34);
  v37 = swift_allocObject(&unk_100082F88, 32, 7);
  *(_QWORD *)(v37 + 16) = sub_100050BBC;
  *(_QWORD *)(v37 + 24) = v26;
  swift_retain(v26);
  sub_1000274B8(v36, (uint64_t)sub_100050C70, v37);
  swift_release(v33);
  swift_release(v37);
  sub_100015590(v36, &qword_10008BF20);
  return swift_release(v26);
}

uint64_t sub_100050848(void *a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(char *))
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;

  v10 = sub_1000027AC(&qword_10008BB18);
  __chkstk_darwin(v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for NavigationETAEntryContent(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B33C(a3, (uint64_t)v15, type metadata accessor for NavigationETAEntryContent);
  v16 = (uint64_t)&v15[*(int *)(v13 + 36)];
  sub_100015590(v16, &qword_10008BA68);
  v17 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v16, a4, v17);
  v18 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  v19 = (_QWORD *)(v16 + *(int *)(v18 + 20));
  *v19 = a1;
  v19[1] = a2;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v16, 0, 1, v18);
  sub_10001B33C((uint64_t)v15, (uint64_t)v12, type metadata accessor for NavigationETAEntryContent);
  v20 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
  swift_storeEnumTagMultiPayload(v12, v20, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v12, 0, 1, v20);
  sub_100047B5C(a1, a2);
  a5(v12);
  sub_100015590((uint64_t)v12, &qword_10008BB18);
  return sub_10001B54C((uint64_t)v15, type metadata accessor for NavigationETAEntryContent);
}

uint64_t sub_100050A08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v17 = type metadata accessor for NavigationETAEntryContentResolver(0);
  v1 = *(_QWORD *)(v17 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = type metadata accessor for TimelineProviderContext(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v16 = *(_QWORD *)(v6 + 64);
  v8 = v0 + v3;
  v9 = *(void **)(v0 + v3);
  if (v9 != (void *)1)
  {

  }
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + 48));
  v10 = v8 + *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
  v11 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v5);
    v12 = (id *)(v10 + *(int *)(v11 + 20));
    if (*v12 != (id)1)
    {

    }
  }
  v13 = (v3 + v4 + v7) & ~v7;
  v14 = (v16 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v13, v5);
  swift_release(*(_QWORD *)(v0 + v14 + 8));
  return swift_deallocObject(v0, v14 + 16, v2 | v7 | 7);
}

uint64_t sub_100050B78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NavigationETAEntryContentResolver(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100050BBC(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(type metadata accessor for NavigationETAEntryContentResolver(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  return sub_100050848(a1, a2, v2 + v6, v2 + v9, *(void (**)(char *))(v2 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100050C4C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100050C70(uint64_t a1)
{
  uint64_t v1;

  sub_10004AC88(a1, *(void (**)(void *, void *))(v1 + 16));
}

uint64_t sub_100050C78@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  int *v3;
  Swift::String *v4;
  NSBundle v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String *v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t result;
  Swift::String v21;
  Swift::String v22;

  *a1 = swift_getKeyPath(&unk_10006BE20);
  v2 = sub_1000027AC(&qword_10008C160);
  swift_storeEnumTagMultiPayload(a1, v2, 0);
  v3 = (int *)type metadata accessor for GeneralMapsWidget(0);
  v4 = (Swift::String *)((char *)a1 + v3[6]);
  if (qword_10008BA00 != -1)
    swift_once(&qword_10008BA00, sub_100045C88);
  v5.super.isa = (Class)qword_100090BC0;
  v21._countAndFlagsBits = 0xD00000000000001CLL;
  v21._object = (void *)0x800000010007A570;
  v6._object = (void *)0x800000010007A2F0;
  v6._countAndFlagsBits = 0xD000000000000017;
  v7._countAndFlagsBits = 1936744781;
  v7._object = (void *)0xE400000000000000;
  *v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)qword_100090BC0, v7, v21);
  v8 = (Swift::String *)((char *)a1 + v3[7]);
  v22._countAndFlagsBits = 0xD00000000000001BLL;
  v9._countAndFlagsBits = 0xD000000000000040;
  v22._object = (void *)0x800000010007A5E0;
  v10._object = (void *)0x800000010007A310;
  v9._object = (void *)0x800000010007A590;
  v10._countAndFlagsBits = 0xD000000000000017;
  *v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, v5, v9, v22);
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100014D70(v11, (uint64_t)qword_100090B98);
  v16 = Logger.logObject.getter(v12, v13, v14, v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "GeneralMapsWidget: init", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  if (qword_10008B9F8 != -1)
    swift_once(&qword_10008B9F8, sub_1000394FC);
  sub_10003952C();
  objc_msgSend((id)objc_opt_self(HardwareIdentifierSwiftHelper), "configureGEOServiceTraitsAndClientCapabilitiesHardwareIdentifier");
  v19 = type metadata accessor for GeneralMapsTimelineProvider(0);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  result = sub_100052CEC();
  *(_QWORD *)((char *)a1 + v3[5]) = result;
  return result;
}

uint64_t sub_100050EF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  _BYTE *v48;
  unint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t OpaqueTypeConformance2;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t);
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  _BYTE v94[12];
  unsigned int v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  _BYTE *v102;
  uint64_t v103;
  _BYTE *v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;

  v2 = v1;
  v118 = a1;
  v3 = sub_1000027AC(&qword_10008BA30);
  v103 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v102 = &v94[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v106 = sub_1000027AC(&qword_10008BA28);
  v5 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v104 = &v94[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_1000027AC(&qword_10008BA20);
  v107 = *(_QWORD *)(v7 - 8);
  v108 = v7;
  __chkstk_darwin(v7);
  v105 = &v94[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v112 = sub_1000027AC(&qword_10008BA18);
  v110 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v109 = &v94[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_1000027AC(&qword_10008BA10);
  v113 = *(_QWORD *)(v10 - 8);
  v114 = v10;
  __chkstk_darwin(v10);
  v111 = &v94[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_1000027AC(&qword_10008E7E8);
  v116 = *(_QWORD *)(v12 - 8);
  v117 = v12;
  __chkstk_darwin(v12);
  v115 = &v94[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for WidgetFamily(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = &v94[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = type metadata accessor for GeneralMapsWidget(0);
  __chkstk_darwin(v18);
  v20 = &v94[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v101 = v15;
  v21 = type metadata accessor for Logger(0);
  sub_100014D70(v21, (uint64_t)qword_100090B98);
  v22 = sub_10001B33C(v1, (uint64_t)v20, type metadata accessor for GeneralMapsWidget);
  v26 = Logger.logObject.getter(v22, v23, v24, v25);
  v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc(12, -1);
    v99 = v3;
    v29 = (uint8_t *)v28;
    v30 = swift_slowAlloc(32, -1);
    v97 = v18;
    v31 = v30;
    v120 = v30;
    v98 = v1;
    *(_DWORD *)v29 = 136446210;
    v96 = v29 + 4;
    *(_QWORD *)&v100 = v5;
    sub_1000520A4(&qword_10008C160, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, (uint64_t)v17);
    v32 = sub_10001B41C((unint64_t *)&qword_10008CCD8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v33 = dispatch thunk of CustomStringConvertible.description.getter(v14, v32);
    v35 = v34;
    v36 = v17;
    v37 = v101;
    (*(void (**)(_BYTE *, uint64_t))(v101 + 8))(v36, v14);
    v119 = sub_1000523F0(v33, v35, &v120);
    v2 = v98;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v96);
    v38 = v35;
    v5 = v100;
    swift_bridgeObjectRelease(v38);
    sub_1000523B4((uint64_t)v20);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "GeneralMapsWidget: Avocado called GeneralMapsWidget 'body' (requesting size %{public}s)", v29, 0xCu);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    v39 = v31;
    v18 = v97;
    swift_slowDealloc(v39, -1, -1);
    v40 = v29;
    v3 = v99;
    swift_slowDealloc(v40, -1, -1);

    v41 = v14;
  }
  else
  {
    sub_1000523B4((uint64_t)v20);

    v41 = v14;
    v37 = v101;
  }
  v120 = *(_QWORD *)(v2 + *(int *)(v18 + 20));
  v42 = v120;
  v43 = type metadata accessor for WidgetContentView(0);
  v44 = type metadata accessor for GeneralMapsTimelineProvider(0);
  v45 = sub_10001B41C(&qword_10008E7F0, type metadata accessor for WidgetContentView, (uint64_t)&unk_10006AD34);
  v46 = sub_10001B41C(&qword_10008E7F8, type metadata accessor for GeneralMapsTimelineProvider, (uint64_t)&unk_10006BF0C);
  v47 = swift_retain(v42);
  v93 = v46;
  v48 = v102;
  StaticConfiguration.init<A>(kind:provider:content:)(0x6C7070612E6D6F63, 0xEE007370614D2E65, &v120, sub_100051824, 0, v43, v44, v45, v47, v93);
  v49 = sub_100002830();
  v50 = v104;
  WidgetConfiguration.supportsAccentedContent()(v3, v49);
  (*(void (**)(_BYTE *, uint64_t))(v103 + 8))(v48, v3);
  v51 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000017, 0x800000010007A2F0);
  v53 = v52;
  LOBYTE(v44) = v54;
  v56 = v55;
  v120 = v3;
  v121 = v49;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v120, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportsAccentedContent()>>, 1);
  v58 = v44 & 1;
  v60 = v105;
  v59 = v106;
  WidgetConfiguration.configurationDisplayName(_:)(v51, v53, v58, v56, v106, OpaqueTypeConformance2);
  swift_bridgeObjectRelease(v56);
  swift_bridgeObjectRelease(v53);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v50, v59);
  v104 = (_BYTE *)sub_1000027AC(&qword_10008E800);
  v61 = *(unsigned __int8 *)(v37 + 80);
  v99 = *(_QWORD *)(v37 + 72);
  v62 = v99;
  v63 = 2 * v99;
  v97 = 2 * v99;
  v64 = (v61 + 32) & ~v61;
  v101 = v64;
  v102 = (_BYTE *)(v61 | 7);
  v103 = v64 + 3 * v99;
  v65 = swift_allocObject(v104, v103, v61 | 7);
  v100 = xmmword_10006B8C0;
  *(_OWORD *)(v65 + 16) = xmmword_10006B8C0;
  v66 = v65 + v64;
  LODWORD(v98) = enum case for WidgetFamily.systemSmall(_:);
  v67 = *(void (**)(uint64_t))(v37 + 104);
  v67(v66);
  LODWORD(v96) = enum case for WidgetFamily.systemMedium(_:);
  v67(v66 + v62);
  v95 = enum case for WidgetFamily.systemLarge(_:);
  v67(v66 + v63);
  v120 = v59;
  v121 = OpaqueTypeConformance2;
  v68 = swift_getOpaqueTypeConformance2(&v120, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v69 = v109;
  v70 = v41;
  v71 = v108;
  WidgetConfiguration.supportedFamilies(_:)(v65, v108, v68);
  swift_bridgeObjectRelease(v65);
  (*(void (**)(_BYTE *, uint64_t))(v107 + 8))(v60, v71);
  v72 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000017, 0x800000010007A310);
  v74 = v73;
  LOBYTE(v59) = v75;
  v77 = v76;
  v120 = v71;
  v121 = v68;
  v78 = swift_getOpaqueTypeConformance2(&v120, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v79 = v59 & 1;
  v81 = v111;
  v80 = v112;
  WidgetConfiguration.description(_:)(v72, v74, v79, v77, v112, v78);
  swift_bridgeObjectRelease(v77);
  swift_bridgeObjectRelease(v74);
  (*(void (**)(_BYTE *, uint64_t))(v110 + 8))(v69, v80);
  v120 = v80;
  v121 = v78;
  v82 = swift_getOpaqueTypeConformance2(&v120, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v84 = v114;
  v83 = v115;
  WidgetConfiguration._containerBackgroundRemovable(_:)(0, v114, v82);
  (*(void (**)(_BYTE *, uint64_t))(v113 + 8))(v81, v84);
  v85 = sub_1000027AC(&qword_10008E808);
  v86 = type metadata accessor for WidgetLocation(0);
  v87 = swift_allocObject(v85, ((*(unsigned __int8 *)(*(_QWORD *)(v86 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v86 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v86 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v86 - 8) + 80) | 7);
  *(_OWORD *)(v87 + 16) = xmmword_10006B890;
  static WidgetLocation.iPhoneWidgetsOnMac.getter();
  v88 = swift_allocObject(v104, v103, v102);
  *(_OWORD *)(v88 + 16) = v100;
  v89 = v88 + v101;
  ((void (*)(uint64_t, _QWORD, uint64_t))v67)(v88 + v101, v98, v70);
  ((void (*)(uint64_t, _QWORD, uint64_t))v67)(v89 + v99, v96, v70);
  ((void (*)(uint64_t, _QWORD, uint64_t))v67)(v89 + v97, v95, v70);
  v120 = v84;
  v121 = v82;
  v90 = swift_getOpaqueTypeConformance2(&v120, &unk_10006C238, 1);
  v91 = v117;
  WidgetConfiguration.disfavoredLocations(_:for:)(v87, v88, v117, v90);
  swift_bridgeObjectRelease(v87);
  swift_bridgeObjectRelease(v88);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v116 + 8))(v83, v91);
}

uint64_t sub_100051824@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  sub_10001B33C(a1, a2, type metadata accessor for GeneralMapsTimelineEntry);
  v3 = type metadata accessor for GeneralMapsTimelineEntry(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 0, 1, v3);
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for GeneralMapsWidget(0);
  v4 = sub_10001B41C(&qword_10008E748, type metadata accessor for GeneralMapsWidget, (uint64_t)&unk_10006BDE0);
  static Widget.main()(v3, v4);
  return 0;
}

uint64_t type metadata accessor for GeneralMapsWidget(uint64_t a1)
{
  uint64_t result;

  result = qword_10008E7A8;
  if (!qword_10008E7A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GeneralMapsWidget);
  return result;
}

uint64_t *sub_100051904(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_1000027AC(&qword_10008C160);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = a3[6];
    v16 = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = v16;
    v17 = (uint64_t *)((char *)a1 + v15);
    v18 = (uint64_t *)((char *)a2 + v15);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = a3[7];
    v21 = (uint64_t *)((char *)a1 + v20);
    v22 = (uint64_t *)((char *)a2 + v20);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    swift_retain(v16);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v23);
  }
  return a1;
}

uint64_t sub_100051A14(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1000027AC(&qword_10008C160);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  swift_release(*(_QWORD *)((char *)a1 + a2[5]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[6] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[7] + 8));
}

uint64_t *sub_100051AA4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v6 = sub_1000027AC(&qword_10008C160);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a3[6];
  v14 = *(uint64_t *)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + v12) = v14;
  v15 = (uint64_t *)((char *)a1 + v13);
  v16 = (uint64_t *)((char *)a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = a3[7];
  v19 = (uint64_t *)((char *)a1 + v18);
  v20 = (uint64_t *)((char *)a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  swift_retain(v14);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v21);
  return a1;
}

uint64_t *sub_100051B88(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  if (a1 != a2)
  {
    sub_100051CAC((uint64_t)a1);
    v6 = sub_1000027AC(&qword_10008C160);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = *(uint64_t *)((char *)a2 + v12);
  v14 = *(uint64_t *)((char *)a1 + v12);
  *(uint64_t *)((char *)a1 + v12) = v13;
  swift_retain(v13);
  swift_release(v14);
  v15 = a3[6];
  v16 = (uint64_t *)((char *)a1 + v15);
  v17 = (uint64_t *)((char *)a2 + v15);
  *v16 = *v17;
  v18 = v17[1];
  v19 = v16[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = a3[7];
  v21 = (uint64_t *)((char *)a1 + v20);
  v22 = (uint64_t *)((char *)a2 + v20);
  *v21 = *v22;
  v23 = v22[1];
  v24 = v21[1];
  v21[1] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  return a1;
}

uint64_t sub_100051CAC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000027AC(&qword_10008C160);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_100051CEC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1000027AC(&qword_10008C160);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  return a1;
}

char *sub_100051DA8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    sub_100051CAC((uint64_t)a1);
    v6 = sub_1000027AC(&qword_10008C160);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = *(_QWORD *)&a1[v8];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  swift_release(v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v14 = *(_QWORD *)v12;
  v13 = *((_QWORD *)v12 + 1);
  v15 = *((_QWORD *)v11 + 1);
  *(_QWORD *)v11 = v14;
  *((_QWORD *)v11 + 1) = v13;
  swift_bridgeObjectRelease(v15);
  v16 = a3[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v20 = *(_QWORD *)v18;
  v19 = *((_QWORD *)v18 + 1);
  v21 = *((_QWORD *)v17 + 1);
  *(_QWORD *)v17 = v20;
  *((_QWORD *)v17 + 1) = v19;
  swift_bridgeObjectRelease(v21);
  return a1;
}

uint64_t sub_100051EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100051EAC);
}

uint64_t sub_100051EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1000027AC(&qword_10008C168);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100051F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100051F38);
}

uint64_t sub_100051F38(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1000027AC(&qword_10008C168);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

void sub_100051FB4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  sub_10003B690(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = &unk_10006BDC8;
    v4[3] = &unk_10006BDC8;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

uint64_t sub_100052034(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006D628, 1);
}

uint64_t sub_100052044@<X0>(uint64_t a1@<X8>)
{
  return sub_1000520A4(&qword_10008C240, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

uint64_t sub_100052074@<X0>(uint64_t a1@<X8>)
{
  return sub_1000520A4(&qword_10008C160, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, a1);
}

uint64_t sub_1000520A4@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000027AC(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100016550(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    v20 = *v17;
    v21 = static os_log_type_t.fault.getter();
    v22 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v22, v21))
    {
      v27 = a4;
      v23 = swift_slowAlloc(12, -1);
      v28 = a5;
      v24 = (uint8_t *)v23;
      v25 = swift_slowAlloc(32, -1);
      v31 = v25;
      *(_DWORD *)v24 = 136315138;
      v30 = sub_1000523F0(v29, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v24 + 4);
      _os_log_impl((void *)&_mh_execute_header, v22, v21, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v14, v20);
    swift_release(v20);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_1000522DC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000520A4(&qword_10008C718, (uint64_t (*)(_QWORD))&type metadata accessor for LayoutDirection, 0x694474756F79614CLL, 0xEF6E6F6974636572, a1);
}

uint64_t sub_100052310@<X0>(uint64_t a1@<X8>)
{
  return sub_1000520A4(&qword_10008C488, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010007A620, a1);
}

uint64_t sub_10005233C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000520A4(&qword_10008C490, (uint64_t (*)(_QWORD))&type metadata accessor for RedactionReasons, 0xD000000000000010, 0x800000010007A600, a1);
}

uint64_t sub_100052368@<X0>(uint64_t a1@<X8>)
{
  return sub_1000520A4(&qword_10008C9D0, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, 0xD000000000000013, 0x800000010007A640, a1);
}

uint64_t sub_100052394()
{
  return EnvironmentValues.widgetFamily.getter();
}

uint64_t sub_1000523B4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for GeneralMapsWidget(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000523F0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13[3];
  void *ObjectType;

  v6 = sub_1000524C0(v13, 0, 0, 1, a1, a2);
  v8 = v13[0];
  if (v6)
  {
    v9 = v6;
    ObjectType = (void *)swift_getObjectType(v6, v7);
    v13[0] = v9;
    v10 = *a3;
    if (*a3)
    {
      sub_10002ACB0((uint64_t)v13, *a3);
      *a3 = v10 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v13[0] = a1;
    v13[1] = a2;
    v11 = *a3;
    if (*a3)
    {
      sub_10002ACB0((uint64_t)v13, *a3);
      *a3 = v11 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_10002CE18(v13);
  return v8;
}

uint64_t sub_1000524C0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_100052678(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_100052678(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_10005270C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1000528E4(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1000528E4(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_10005270C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100052880(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100052880(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_1000027AC(&qword_10008E810);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1000528E4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000027AC(&qword_10008E810);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100052A34()
{
  return EnvironmentValues.widgetFamily.getter();
}

uint64_t sub_100052A54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;

  v0 = sub_1000027EC(&qword_10008E7E8);
  v1 = sub_1000027EC(&qword_10008BA10);
  v2 = sub_1000027EC(&qword_10008BA18);
  v3 = sub_1000027EC(&qword_10008BA20);
  v4 = sub_1000027EC(&qword_10008BA28);
  v11 = sub_1000027EC(&qword_10008BA30);
  v12 = sub_100002830();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportsAccentedContent()>>, 1);
  v11 = v4;
  v12 = OpaqueTypeConformance2;
  v6 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v11 = v3;
  v12 = v6;
  v7 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v11 = v2;
  v12 = v7;
  v8 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v11 = v1;
  v12 = v8;
  v9 = swift_getOpaqueTypeConformance2(&v11, &unk_10006C238, 1);
  v11 = v0;
  v12 = v9;
  return swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.disfavoredLocations(_:for:)>>, 1);
}

void *sub_100052B7C(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  char v8;
  id v9;
  uint64_t v11;
  void *v12;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v7 = sub_10005CC3C((uint64_t)a1);
      if ((v8 & 1) != 0)
      {
        v6 = *(void **)(*(_QWORD *)(a2 + 56) + 8 * v7);
        v9 = v6;
        return v6;
      }
    }
    return 0;
  }
  v3 = a1;
  v4 = __CocoaDictionary.lookup(_:)();

  if (!v4)
    return 0;
  v11 = v4;
  v5 = sub_100014FA8(0, (unint64_t *)&unk_10008BF60, GEOComposedRoute_ptr);
  swift_unknownObjectRetain(v4);
  swift_dynamicCast(&v12, &v11, (char *)&type metadata for Swift.AnyObject + 8, v5, 7);
  v6 = v12;
  swift_unknownObjectRelease(v4);
  return v6;
}

uint64_t sub_100052C50(uint64_t a1)
{
  void (*v1)(__n128);
  uint64_t v2;
  __n128 v3;

  v1 = *(void (**)(__n128))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_100052C7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0
     + OBJC_IVAR____TtCC17GeneralMapsWidget27GeneralMapsTimelineProviderP33_E134A4B3F820D74145B932C0401CE63122StateCollectionSession_expiration;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtCC17GeneralMapsWidget27GeneralMapsTimelineProviderP33_E134A4B3F820D74145B932C0401CE63122StateCollectionSession_collector));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtCC17GeneralMapsWidget27GeneralMapsTimelineProviderP33_E134A4B3F820D74145B932C0401CE63122StateCollectionSession_group));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100052CEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v30;
  void *v31;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100014FA8(0, (unint64_t *)&qword_10008BF48, OS_dispatch_queue_ptr);
  v30 = v12;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_BYTE *)(v1 + 96) = 0;
  static DispatchQoS.unspecified.getter(v12);
  v31 = &_swiftEmptyArrayStorage;
  v13 = sub_10001B41C(&qword_10008EAD0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_1000027AC(&qword_10008EAD8);
  v15 = sub_10005C390(&qword_10008EAE0, &qword_10008EAD8);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v14, v15, v6, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  *(_QWORD *)(v1 + 104) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000025, 0x800000010007A7E0, v11, v8, v5, 0);
  *(_QWORD *)(v1 + 112) = 0;
  v16 = v1 + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider_timeline;
  v17 = type metadata accessor for GeneralMapsTimelineProvider.ResolvableContentTimeline(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider_maxTimelineAge) = 0x402E000000000000;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider_maxFreshLocationAge) = 0x4072C00000000000;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider_pendingRequestCount) = 0;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider____lazy_storage___briefDateComponentsFormatter) = 0;
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_100014D70(v18, (uint64_t)qword_100090B98);
  v23 = Logger.logObject.getter(v19, v20, v21, v22);
  v27 = static os_log_type_t.debug.getter(v23, v24, v25, v26);
  if (os_log_type_enabled(v23, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v27, "GeneralMapsTimelineProvider init", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }

  return v1;
}

uint64_t sub_100052FE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;

  v1 = v0;
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100014D70(v2, (uint64_t)qword_100090B98);
  v7 = Logger.logObject.getter(v3, v4, v5, v6);
  v11 = static os_log_type_t.debug.getter(v7, v8, v9, v10);
  if (os_log_type_enabled(v7, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v11, "GeneralMapsTimelineProvider deinit", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  sub_100014F38(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(void **)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88));
  swift_release(*(_QWORD *)(v1 + 112));
  sub_100015590(v1 + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider_timeline, &qword_10008EAE8);
  objc_release(*(id *)(v1
                     + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider____lazy_storage___briefDateComponentsFormatter));
  return v1;
}

uint64_t sub_100053120()
{
  uint64_t v0;

  sub_100052FE8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100053144()
{
  return type metadata accessor for GeneralMapsTimelineProvider(0);
}

uint64_t type metadata accessor for GeneralMapsTimelineProvider(uint64_t a1)
{
  return sub_100006A5C(a1, (uint64_t *)&unk_10008E868, (uint64_t)&nominal type descriptor for GeneralMapsTimelineProvider);
}

void sub_100053160(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = "Q";
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = &unk_10006BEB8;
  sub_100053204(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = &unk_10006BEB8;
    swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
  }
}

void sub_100053204(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10008E878)
  {
    v2 = type metadata accessor for GeneralMapsTimelineProvider.ResolvableContentTimeline(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10008E878);
  }
}

uint64_t type metadata accessor for GeneralMapsTimelineProvider.ResolvableContentTimeline(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008EA80, (uint64_t)&nominal type descriptor for GeneralMapsTimelineProvider.ResolvableContentTimeline);
}

uint64_t sub_10005326C()
{
  return type metadata accessor for GeneralMapsTimelineProvider.StateCollectionSession(0);
}

uint64_t type metadata accessor for GeneralMapsTimelineProvider.StateCollectionSession(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008E970, (uint64_t)&nominal type descriptor for GeneralMapsTimelineProvider.StateCollectionSession);
}

uint64_t sub_100053288(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t *sub_100053304(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for Date(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_10005339C(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_1000533E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for Date(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t *sub_100053454(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_QWORD *sub_1000534C8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_100053524(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_100053590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005359C);
}

uint64_t sub_10005359C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_100053618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100053624);
}

char *sub_100053624(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_100053698(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100053710()
{
  return sub_10001B41C(qword_10008EAB8, type metadata accessor for GeneralMapsTimelineEntry, (uint64_t)&unk_100069FFC);
}

double sub_10005373C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD aBlock[5];
  uint64_t v37;

  v4 = v3;
  v29 = a2;
  v30 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v9 - 8);
  v33 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(_QWORD *)(v4 + 104);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 24) & ~v16;
  v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_100083078, v18 + 16, v16 | 7);
  *(_QWORD *)(v19 + 16) = v4;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v19 + v17, v15, v12);
  v20 = (_QWORD *)(v19 + v18);
  v21 = v30;
  *v20 = v29;
  v20[1] = v21;
  aBlock[4] = sub_10005CAB0;
  v37 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100052B78;
  aBlock[3] = &unk_100083090;
  v22 = _Block_copy(aBlock);
  swift_retain(v4);
  swift_retain(v21);
  static DispatchQoS.unspecified.getter(v23);
  v35 = &_swiftEmptyArrayStorage;
  v24 = sub_10001B41C((unint64_t *)&qword_10008C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_1000027AC((uint64_t *)&unk_10008BF70);
  v26 = sub_10005C390(qword_10008C800, (uint64_t *)&unk_10008BF70);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v25, v26, v6, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v33);
  *(_QWORD *)&result = swift_release(v37).n128_u64[0];
  return result;
}

void sub_1000539BC(uint64_t a1, char *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint8_t *v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  int v51;
  uint8_t *v52;
  double v53;
  void (*v54)(char *, uint64_t, __n128);
  __n128 v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  os_log_type_t v69;
  uint8_t *v70;
  void **v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  os_log_type_t v90;
  uint8_t *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  os_log_type_t v102;
  uint8_t *v103;
  void *v104;
  id v105;
  NSObject *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __n128 v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  const void *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint8_t *v139;
  uint8_t *v140;
  void **v141;
  uint8_t *v142;
  void (*v143)(char *, uint64_t);
  void (*v144)(char *, uint64_t, uint64_t);
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(void);
  uint64_t v154;
  char *v155;
  uint64_t v156;
  char v157[24];
  void *v158;
  void **aBlock;
  uint64_t v160;
  uint64_t (*v161)(uint64_t);
  void *v162;
  void (*v163)(void);
  uint64_t v164;
  void *v165;
  uint64_t v166;

  v153 = a3;
  v155 = a2;
  v6 = sub_1000027AC(&qword_10008EAE8);
  __chkstk_darwin(v6);
  v8 = (char *)&v139 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for GeneralMapsTimelineProvider.ResolvableContentTimeline(0);
  v10 = *(uint8_t **)(v9 - 8);
  __chkstk_darwin(v9);
  v146 = (char *)&v139 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = type metadata accessor for DispatchWorkItemFlags(0);
  v150 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v149 = (char *)&v139 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = type metadata accessor for DispatchQoS(0);
  v148 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v147 = (char *)&v139 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date(0);
  v156 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v139 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v139 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v139 - v21;
  v23 = *(_QWORD *)(a1 + 112);
  v154 = a4;
  if (v23)
  {
    v142 = v10;
    v145 = a1;
    swift_retain(v23);
    Date.init()(v24);
    v25 = v23
        + OBJC_IVAR____TtCC17GeneralMapsWidget27GeneralMapsTimelineProviderP33_E134A4B3F820D74145B932C0401CE63122StateCollectionSession_expiration;
    swift_beginAccess(v23+ OBJC_IVAR____TtCC17GeneralMapsWidget27GeneralMapsTimelineProviderP33_E134A4B3F820D74145B932C0401CE63122StateCollectionSession_expiration, v157, 0, 0);
    v26 = v156;
    v144 = *(void (**)(char *, uint64_t, uint64_t))(v156 + 16);
    v144(v20, v25, v14);
    v27 = static Date.< infix(_:_:)(v22, v20);
    v28 = *(void (**)(char *, uint64_t))(v26 + 8);
    v28(v20, v14);
    v143 = v28;
    v28(v22, v14);
    if ((v27 & 1) != 0)
    {
      if (qword_10008B9F0 != -1)
        swift_once(&qword_10008B9F0, sub_100035150);
      v29 = type metadata accessor for Logger(0);
      v30 = sub_100014D70(v29, (uint64_t)qword_100090B98);
      v34 = Logger.logObject.getter(v30, v31, v32, v33);
      v38 = static os_log_type_t.debug.getter(v34, v35, v36, v37);
      v39 = os_log_type_enabled(v34, v38);
      v40 = v154;
      if (v39)
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v38, "GeneralMapsTimelineProvider: refreshIfNeeded: was already refreshing", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }

      v42 = (void (*)(char *, char *, uint64_t))v144;
      v144(v22, v25, v14);
      v43 = v155;
      v44 = static Date.> infix(_:_:)(v155, v22);
      v143(v22, v14);
      if ((v44 & 1) != 0)
      {
        v42(v17, v43, v14);
        swift_retain(v23);
        v49 = Logger.logObject.getter(v45, v46, v47, v48);
        v50 = static os_log_type_t.info.getter();
        v51 = v50;
        if (os_log_type_enabled(v49, v50))
        {
          LODWORD(v146) = v51;
          v52 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v52 = 134349056;
          v142 = v52 + 4;
          v144(v22, v25, v14);
          v53 = Date.timeIntervalSince(_:)(v22);
          v54 = (void (*)(char *, uint64_t, __n128))v143;
          v143(v22, v14);
          aBlock = *(void ***)&v53;
          v43 = v155;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v160, v142);
          v55 = swift_release(v23);
          v54(v17, v14, v55);
          _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v146, "GeneralMapsTimelineProvider: refreshIfNeeded: extending refresh session expiration by %{public}f seconds", v52, 0xCu);
          v56 = v52;
          v42 = (void (*)(char *, char *, uint64_t))v144;
          swift_slowDealloc(v56, -1, -1);
        }
        else
        {
          v126 = swift_release(v23);
          ((void (*)(char *, uint64_t, __n128))v143)(v17, v14, v126);
        }

        v42(v22, v43, v14);
        swift_beginAccess(v25, &aBlock, 33, 0);
        (*(void (**)(uint64_t, char *, uint64_t))(v156 + 40))(v25, v22, v14);
        swift_endAccess(&aBlock);
      }
      v127 = *(_QWORD *)(v145 + 104);
      v163 = v153;
      v164 = v40;
      aBlock = _NSConcreteStackBlock;
      v160 = 1107296256;
      v161 = sub_100052B78;
      v162 = &unk_100083108;
      v128 = _Block_copy(&aBlock);
      v129 = v40;
      v130 = v128;
      swift_retain(v129);
      v131 = v147;
      static DispatchQoS.unspecified.getter(v132);
      v165 = &_swiftEmptyArrayStorage;
      v133 = sub_10001B41C((unint64_t *)&qword_10008C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v134 = sub_1000027AC((uint64_t *)&unk_10008BF70);
      v135 = sub_10005C390(qword_10008C800, (uint64_t *)&unk_10008BF70);
      v136 = v149;
      v137 = v134;
      v138 = v152;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v165, v137, v135, v152, v133);
      OS_dispatch_group.notify(qos:flags:queue:execute:)(v131, v136, v127, v130);
      _Block_release(v130);
      (*(void (**)(char *, uint64_t))(v150 + 8))(v136, v138);
      (*(void (**)(char *, uint64_t))(v148 + 8))(v131, v151);
      swift_release(v23);
      v125 = v164;
LABEL_35:
      swift_release(v125);
      return;
    }
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v57 = type metadata accessor for Logger(0);
    sub_100014D70(v57, (uint64_t)qword_100090B98);
    v58 = swift_retain_n(v23, 2);
    v62 = Logger.logObject.getter(v58, v59, v60, v61);
    v63 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(12, -1);
      v141 = (void **)swift_slowAlloc(32, -1);
      aBlock = v141;
      v140 = v64;
      *(_DWORD *)v64 = 136446210;
      v139 = v64 + 4;
      v144(v22, v25, v14);
      v65 = sub_10001B41C(&qword_10008EAF0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v66 = dispatch thunk of CustomStringConvertible.description.getter(v14, v65);
      v68 = v67;
      v143(v22, v14);
      v165 = (void *)sub_1000523F0(v66, v68, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166, v139);
      swift_release_n(v23, 2);
      swift_bridgeObjectRelease(v68);
      v69 = v63;
      v70 = v140;
      _os_log_impl((void *)&_mh_execute_header, v62, v69, "GeneralMapsTimelineProvider: refreshIfNeeded: clearing expired refresh session (expired at %{public}s)", v140, 0xCu);
      v71 = v141;
      swift_arrayDestroy(v141, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);

    }
    else
    {

      swift_release_n(v23, 2);
    }
    v10 = v142;
    a1 = v145;
    v72 = *(_QWORD *)(v145 + 112);
    if (v72)
    {
      swift_retain(*(_QWORD *)(v145 + 112));
      sub_1000080FC(v73, v74);
      v10 = v142;
      swift_release(v72);
    }
    swift_release(v23);
    v75 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0;
    swift_release(v75);
  }
  v76 = a1 + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider_timeline;
  swift_beginAccess(a1 + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider_timeline, &v165, 0, 0);
  sub_100016550(v76, (uint64_t)v8, &qword_10008EAE8);
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v10 + 6))(v8, 1, v9) == 1)
  {
    sub_100015590((uint64_t)v8, &qword_10008EAE8);
LABEL_27:
    v92 = v155;
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v93 = type metadata accessor for Logger(0);
    v94 = sub_100014D70(v93, (uint64_t)qword_100090B98);
    v98 = Logger.logObject.getter(v94, v95, v96, v97);
    v102 = static os_log_type_t.debug.getter(v98, v99, v100, v101);
    if (os_log_type_enabled(v98, v102))
    {
      v103 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v103 = 0;
      _os_log_impl((void *)&_mh_execute_header, v98, v102, "GeneralMapsTimelineProvider: refreshIfNeeded: will refresh!", v103, 2u);
      swift_slowDealloc(v103, -1, -1);
    }

    v104 = *(void **)(a1 + 104);
    v105 = objc_allocWithZone((Class)type metadata accessor for GeneralMapsStateCollector());
    v146 = v104;
    v106 = sub_1000074C4(v146);
    v107 = v156;
    (*(void (**)(char *, char *, uint64_t))(v156 + 16))(v22, v92, v14);
    v108 = type metadata accessor for GeneralMapsTimelineProvider.StateCollectionSession(0);
    v109 = swift_allocObject(v108, *(unsigned int *)(v108 + 48), *(unsigned __int16 *)(v108 + 52));
    v110 = a1;
    v111 = OBJC_IVAR____TtCC17GeneralMapsWidget27GeneralMapsTimelineProviderP33_E134A4B3F820D74145B932C0401CE63122StateCollectionSession_group;
    v112 = v106;
    *(_QWORD *)(v109 + v111) = dispatch_group_create();
    (*(void (**)(uint64_t, char *, uint64_t))(v107 + 32))(v109+ OBJC_IVAR____TtCC17GeneralMapsWidget27GeneralMapsTimelineProviderP33_E134A4B3F820D74145B932C0401CE63122StateCollectionSession_expiration, v22, v14);
    *(_QWORD *)(v109
              + OBJC_IVAR____TtCC17GeneralMapsWidget27GeneralMapsTimelineProviderP33_E134A4B3F820D74145B932C0401CE63122StateCollectionSession_collector) = v112;
    v113 = *(_QWORD *)(v110 + 112);
    *(_QWORD *)(v110 + 112) = v109;
    swift_retain(v109);
    swift_release(v113);
    dispatch_group_enter(*(dispatch_group_t *)(v109
                                             + OBJC_IVAR____TtCC17GeneralMapsWidget27GeneralMapsTimelineProviderP33_E134A4B3F820D74145B932C0401CE63122StateCollectionSession_group));
    v114 = v154;
    v163 = v153;
    v164 = v154;
    aBlock = _NSConcreteStackBlock;
    v160 = 1107296256;
    v161 = sub_100052B78;
    v162 = &unk_1000830B8;
    v115 = _Block_copy(&aBlock);
    swift_retain(v114);
    v116 = v147;
    static DispatchQoS.unspecified.getter(v117);
    v158 = &_swiftEmptyArrayStorage;
    v118 = sub_10001B41C((unint64_t *)&qword_10008C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v119 = sub_1000027AC((uint64_t *)&unk_10008BF70);
    v120 = sub_10005C390(qword_10008C800, (uint64_t *)&unk_10008BF70);
    v121 = v149;
    v122 = v119;
    v123 = v152;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v158, v122, v120, v152, v118);
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v116, v121, v146, v115);
    _Block_release(v115);
    (*(void (**)(char *, uint64_t))(v150 + 8))(v121, v123);
    (*(void (**)(char *, uint64_t))(v148 + 8))(v116, v151);
    swift_release(v164);
    v124 = swift_allocObject(&unk_1000830F0, 32, 7);
    *(_QWORD *)(v124 + 16) = v110;
    *(_QWORD *)(v124 + 24) = v109;
    swift_retain(v109);
    swift_retain(v110);
    sub_100007BE8(v155, (uint64_t)sub_10005CB24, v124);

    swift_release(v109);
    v125 = v124;
    goto LABEL_35;
  }
  v77 = (uint64_t)v8;
  v78 = v146;
  v79 = sub_10001CDDC(v77, (uint64_t)v146, type metadata accessor for GeneralMapsTimelineProvider.ResolvableContentTimeline);
  Date.init()(v79);
  v80 = Date.timeIntervalSince(_:)(&v78[*(int *)(v9 + 20)]);
  (*(void (**)(char *, uint64_t))(v156 + 8))(v22, v14);
  if (v80 >= 15.0)
  {
    sub_10001B54C((uint64_t)v78, type metadata accessor for GeneralMapsTimelineProvider.ResolvableContentTimeline);
    goto LABEL_27;
  }
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v81 = type metadata accessor for Logger(0);
  v82 = sub_100014D70(v81, (uint64_t)qword_100090B98);
  v86 = Logger.logObject.getter(v82, v83, v84, v85);
  v90 = static os_log_type_t.debug.getter(v86, v87, v88, v89);
  if (os_log_type_enabled(v86, v90))
  {
    v91 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v91 = 0;
    _os_log_impl((void *)&_mh_execute_header, v86, v90, "GeneralMapsTimelineProvider: refreshIfNeeded: refresh not needed", v91, 2u);
    swift_slowDealloc(v91, -1, -1);
  }

  v153();
  sub_10001B54C((uint64_t)v78, type metadata accessor for GeneralMapsTimelineProvider.ResolvableContentTimeline);
}

void sub_1000546CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *oslog;

  v3 = *(_QWORD *)(a2 + 112);
  if (v3)
    v4 = v3 == a3;
  else
    v4 = 0;
  if (v4)
  {
    v15 = *(_BYTE *)(a1 + 80);
    v16 = *(_QWORD *)(a1 + 72);
    v18 = *(_QWORD *)(a1 + 40);
    v17 = *(_QWORD *)(a1 + 48);
    v19 = *(unsigned int *)(a1 + 16);
    v20 = *(_QWORD *)(a2 + 16);
    v21 = *(_QWORD *)(a2 + 24);
    v22 = *(_QWORD *)(a2 + 32);
    v23 = *(void **)(a2 + 40);
    v24 = *(_QWORD *)(a2 + 48);
    v25 = *(_QWORD *)(a2 + 56);
    v26 = *(_QWORD *)(a2 + 64);
    v27 = *(void **)(a2 + 72);
    v28 = *(_QWORD *)(a2 + 80);
    v29 = *(_QWORD *)(a2 + 88);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 32) = v19;
    *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 56) = v18;
    *(_QWORD *)(a2 + 64) = v17;
    *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 88) = v16;
    *(_BYTE *)(a2 + 96) = v15;
    sub_100014F38(v20, v21, v22, v23, v24, v25, v26, v27, v28, v29);
    sub_10005CB2C(a1);
    sub_100054850();
    v30 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a2 + 112) = 0;
    swift_release(v30);
    dispatch_group_leave(*(dispatch_group_t *)(a3
                                             + OBJC_IVAR____TtCC17GeneralMapsWidget27GeneralMapsTimelineProviderP33_E134A4B3F820D74145B932C0401CE63122StateCollectionSession_group));
  }
  else
  {
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100014D70(v5, (uint64_t)qword_100090B98);
    oslog = Logger.logObject.getter(v6, v7, v8, v9);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v10, "GeneralMapsTimelineProvider: refreshIfNeeded: ignoring expired state collector", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

  }
}

void sub_100054850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  _BOOL4 v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  id v112;
  char *v113;
  id v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  id v124;
  int *v125;
  NSBundle v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  BOOL v138;
  _BOOL4 v139;
  id v140;
  void *v141;
  uint64_t v142;
  char *v143;
  id v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  NSObject *v154;
  os_log_type_t v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  uint64_t v159;
  uint64_t v160;
  id v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  os_log_type_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  id v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  NSObject *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  os_log_type_t v181;
  uint64_t v182;
  uint64_t v183;
  id v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  int v204;
  char *v205;
  uint64_t v206;
  char *v207;
  id v208;
  uint64_t v209;
  uint64_t v210;
  Swift::String v211;
  Swift::String v212;
  Swift::String v213;
  uint64_t v214;
  void *v215;
  char *v216;
  id v217;
  id v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  id v222;
  void *v223;
  void *v224;
  void *v225;
  id v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  NSObject *v230;
  os_log_type_t v231;
  uint64_t v232;
  char *v233;
  id v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  void (*v243)(char *, uint64_t);
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  char *v248;
  uint64_t v249;
  void *v250;
  void *v251;
  id v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  char *v262;
  id v263;
  id v264;
  char *v265;
  double v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  NSObject *v272;
  os_log_type_t v273;
  uint8_t *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  int *v280;
  _QWORD *v281;
  id v282;
  char *v283;
  id v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  id v288;
  uint64_t v289;
  unint64_t v290;
  id v291;
  unint64_t v292;
  unint64_t v293;
  id v294;
  char *v295;
  char *v296;
  uint64_t v297;
  int v298;
  NSObject *v299;
  os_log_type_t v300;
  uint8_t *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  char *v307;
  uint64_t v308;
  char v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  NSObject *v315;
  os_log_type_t v316;
  uint8_t *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  id v323;
  int *v324;
  char *v325;
  char *v326;
  id v327;
  uint64_t v328;
  unint64_t v329;
  id v330;
  uint64_t v331;
  unint64_t v332;
  unint64_t v333;
  int *v334;
  _QWORD *v335;
  char *v336;
  id v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  id v341;
  uint64_t v342;
  unint64_t v343;
  id v344;
  uint64_t v345;
  void *v346;
  unint64_t v347;
  unint64_t v348;
  void (*v349)(char *, uint64_t);
  uint64_t v350;
  int v351;
  void (*v352)(char *, uint64_t, uint64_t);
  char *v353;
  char *v354;
  uint64_t countAndFlagsBits;
  void *v356;
  void *object;
  Swift::String v358;
  char v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  char *v364;
  void (*v365)(void);
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  NSObject *v370;
  os_log_type_t v371;
  uint8_t *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  _QWORD *v381;
  uint64_t v382;
  char *v383;
  unint64_t *v384;
  unint64_t v385;
  char *v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  void (*v391)(char *, uint64_t);
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  unint64_t *v396;
  uint64_t v397;
  void (*v398)(char *, uint64_t);
  _QWORD *v399;
  char *v400;
  uint64_t v401;
  id v402;
  double v403;
  double v404;
  double v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  id v412;
  char *v413;
  double v414;
  uint64_t v415;
  char *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  NSObject *v420;
  os_log_type_t v421;
  _BOOL4 v422;
  uint64_t v423;
  uint64_t v424;
  char *v425;
  uint64_t v426;
  unint64_t v427;
  unint64_t v428;
  unint64_t v429;
  uint64_t v430;
  char *v431;
  uint64_t v432;
  unint64_t v433;
  unint64_t v434;
  uint64_t v435;
  id v436;
  double v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  NSObject *v448;
  os_log_type_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  unint64_t v457;
  char *v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  int *v466;
  _QWORD *v467;
  char *v468;
  uint64_t v469;
  uint64_t v470;
  double *v471;
  uint64_t v472;
  uint64_t v473;
  unint64_t *v474;
  unint64_t v475;
  char *v476;
  unint64_t v477;
  unint64_t v478;
  char *v479;
  id v480;
  char *v481;
  char *v482;
  unint64_t *v483;
  id v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  NSObject *v488;
  os_log_type_t v489;
  uint64_t v490;
  uint64_t v491;
  id v492;
  uint64_t v493;
  unint64_t v494;
  unint64_t v495;
  unint64_t v496;
  uint64_t v497;
  char *v498;
  uint64_t v499;
  unint64_t v500;
  unint64_t v501;
  int *v502;
  _QWORD *v503;
  char *v504;
  uint64_t v505;
  uint64_t v506;
  double *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t v511;
  id v512;
  unint64_t v513;
  unint64_t v514;
  NSObject *v515;
  os_log_type_t v516;
  uint8_t *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  unint64_t v522;
  uint64_t v523;
  uint64_t v524;
  int *v525;
  _QWORD *v526;
  char *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  char *v531;
  uint64_t v532;
  unint64_t v533;
  unint64_t v534;
  unint64_t v535;
  int *v536;
  _QWORD *v537;
  char *v538;
  uint64_t v539;
  double *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  uint64_t v547;
  uint64_t v548;
  unint64_t v549;
  uint64_t v550;
  char *v551;
  __int128 v552;
  id v553;
  __int128 v554;
  char *v555;
  char *v556;
  char *v557;
  char *v558;
  char *v559;
  uint64_t v560;
  uint64_t v561;
  __int128 v562;
  _QWORD *v563;
  uint64_t v564;
  char *v565;
  void *v566;
  id v567;
  char *v568;
  char *v569;
  uint64_t v570;
  _BOOL4 v571;
  void *v572;
  void *v573;
  uint64_t v574;
  id v575;
  int v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  char *v583;
  void *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  char *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  void *v596;
  char *v597;
  char *v598;
  char *v599;
  char *v600;
  char *v601;
  uint64_t v602;
  unint64_t v603;
  uint64_t v604;
  uint64_t v605;
  char *v606;
  char *v607;
  char *v608;
  uint64_t v609;
  uint64_t v610;
  char *v611;
  id v612;
  int *v613;
  char *v614;
  void *v615;
  uint64_t *v616;
  char *v617;
  uint64_t v618;
  uint64_t v619;
  void (*v620)(uint64_t, uint64_t);
  unint64_t *v621;
  uint64_t v622;
  char *v623;
  char *v624;
  uint64_t v625;
  char *v626;
  __int128 v627;
  char v628[8];
  char v629[8];
  char v630[8];
  uint64_t v631;
  uint64_t v632;
  __int128 v633;
  uint64_t v634;
  uint64_t v635;
  _UNKNOWN **v636;
  uint64_t v637;
  char v638[8];
  Swift::String v639;

  v561 = type metadata accessor for NearbyEntryContent(0);
  v1 = __chkstk_darwin(v561);
  v560 = (uint64_t)&v550 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v563 = (uint64_t *)((char *)&v550 - v3);
  v610 = type metadata accessor for UUID(0, v4);
  v609 = *(_QWORD *)(v610 - 8);
  v5 = __chkstk_darwin(v610);
  v7 = (char *)&v550 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v608 = (char *)&v550 - v8;
  v591 = type metadata accessor for SuggestedDestinationEntryContent(0);
  v9 = __chkstk_darwin(v591);
  v594 = (uint64_t)&v550 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v586 = (uint64_t)&v550 - v12;
  __chkstk_darwin(v11);
  v623 = (char *)&v550 - v13;
  v582 = sub_1000027AC(&qword_10008BF20);
  v14 = __chkstk_darwin(v582);
  v590 = (uint64_t)&v550 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v579 = (uint64_t)&v550 - v17;
  v18 = __chkstk_darwin(v16);
  v599 = (char *)&v550 - v19;
  v20 = __chkstk_darwin(v18);
  v581 = (uint64_t)&v550 - v21;
  v22 = __chkstk_darwin(v20);
  v601 = (char *)&v550 - v23;
  v24 = __chkstk_darwin(v22);
  v600 = (char *)&v550 - v25;
  __chkstk_darwin(v24);
  v626 = (char *)&v550 - v26;
  v27 = sub_1000027AC(&qword_10008EAE8);
  __chkstk_darwin(v27);
  v29 = (char *)&v550 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v604 = sub_1000027AC(&qword_10008EAF8);
  v605 = *(_QWORD *)(v604 - 8);
  v30 = __chkstk_darwin(v604);
  v556 = (char *)&v550 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v557 = (char *)&v550 - v33;
  v34 = __chkstk_darwin(v32);
  v559 = (char *)&v550 - v35;
  v36 = __chkstk_darwin(v34);
  v558 = (char *)&v550 - v37;
  v38 = __chkstk_darwin(v36);
  v589 = (uint64_t)&v550 - v39;
  v40 = __chkstk_darwin(v38);
  v585 = (uint64_t)&v550 - v41;
  v42 = __chkstk_darwin(v40);
  v578 = (uint64_t)&v550 - v43;
  __chkstk_darwin(v42);
  v619 = (uint64_t)&v550 - v44;
  v613 = (int *)type metadata accessor for NavigationETAEntryContent(0);
  __chkstk_darwin(v613);
  v617 = (char *)&v550 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for Date(0);
  v625 = *(_QWORD *)(v46 - 8);
  v47 = __chkstk_darwin(v46);
  v588 = (char *)&v550 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __chkstk_darwin(v47);
  v568 = (char *)&v550 - v50;
  v51 = __chkstk_darwin(v49);
  v569 = (char *)&v550 - v52;
  v53 = __chkstk_darwin(v51);
  v611 = (char *)&v550 - v54;
  v55 = __chkstk_darwin(v53);
  v598 = (char *)&v550 - v56;
  v57 = __chkstk_darwin(v55);
  v597 = (char *)&v550 - v58;
  v59 = __chkstk_darwin(v57);
  v606 = (char *)&v550 - v60;
  v61 = __chkstk_darwin(v59);
  v624 = (char *)&v550 - v62;
  v63 = __chkstk_darwin(v61);
  v614 = (char *)&v550 - v64;
  v65 = __chkstk_darwin(v63);
  v67 = (uint64_t)&v550 - v66;
  __chkstk_darwin(v65);
  v607 = (char *)&v550 - v68;
  v69 = type metadata accessor for GeneralMapsTimelineProvider.ResolvableContentTimeline(0);
  v580 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v621 = (unint64_t *)((char *)&v550 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0));
  v72 = type metadata accessor for DispatchPredicate(0, v71);
  v73 = *(uint64_t **)(v72 - 8);
  __chkstk_darwin(v72);
  v75 = (uint64_t)&v550 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = *(void **)(v0 + 104);
  *(_QWORD *)v75 = v76;
  ((void (*)(uint64_t, _QWORD, uint64_t))v73[13])(v75, enum case for DispatchPredicate.onQueue(_:), v72);
  v77 = v76;
  v78 = _dispatchPreconditionTest(_:)(v75);
  ((void (*)(uint64_t, uint64_t))v73[1])(v75, v72);
  if ((v78 & 1) == 0)
  {
LABEL_118:
    __break(1u);
LABEL_119:
    swift_once(&qword_10008B9F0, sub_100035150);
    goto LABEL_4;
  }
  v79 = *(_QWORD *)(v0 + 64);
  if (!v79)
  {
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v104 = type metadata accessor for Logger(0);
    v105 = sub_100014D70(v104, (uint64_t)qword_100090B98);
    v109 = Logger.logObject.getter(v105, v106, v107, v108);
    v110 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v109, v110))
    {
      v111 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v111 = 0;
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "GeneralMapsTimelineProvider: generateResolvableTimeline (failed: invalid state)", v111, 2u);
      swift_slowDealloc(v111, -1, -1);
    }

    return;
  }
  v555 = v7;
  v565 = v29;
  v80 = *(void **)(v0 + 16);
  v615 = *(void **)(v0 + 24);
  v81 = *(void **)(v0 + 40);
  v570 = *(_QWORD *)(v0 + 32);
  v82 = *(_QWORD *)(v0 + 48);
  v75 = *(_QWORD *)(v0 + 56);
  v83 = *(void **)(v0 + 72);
  v577 = *(_QWORD *)(v0 + 80);
  v84 = *(_QWORD *)(v0 + 88);
  v587 = v0;
  v576 = *(unsigned __int8 *)(v0 + 96);
  v564 = v69;
  v85 = (char *)v621 + *(int *)(v69 + 20);
  *v621 = (unint64_t)&_swiftEmptyArrayStorage;
  v593 = v84;
  swift_bridgeObjectRetain(v84);
  v592 = (uint64_t)v80;
  v567 = v80;
  v566 = v81;
  v553 = v81;
  v574 = v82;
  swift_bridgeObjectRetain(v82);
  swift_bridgeObjectRetain(v75);
  v595 = v79;
  swift_bridgeObjectRetain(v79);
  v584 = v83;
  v612 = v83;
  Date.init()(v612);
  v72 = v625;
  v73 = *(uint64_t **)(v625 + 16);
  v78 = (uint64_t)v607;
  ((void (*)(char *, char *, uint64_t))v73)(v607, v85, v46);
  if (qword_10008B9F0 != -1)
    goto LABEL_119;
LABEL_4:
  v86 = type metadata accessor for Logger(0);
  v87 = sub_100014D70(v86, (uint64_t)qword_100090B98);
  v616 = v73;
  v88 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v73)(v67, v78, v46);
  v622 = v87;
  v92 = Logger.logObject.getter(v88, v89, v90, v91);
  v93 = static os_log_type_t.info.getter();
  v94 = os_log_type_enabled(v92, v93);
  *(_QWORD *)&v627 = v46;
  v618 = v75;
  if (v94)
  {
    v95 = (uint8_t *)swift_slowAlloc(12, -1);
    v96 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v633 = v96;
    *(_DWORD *)v95 = 136446210;
    v97 = sub_10001B41C(&qword_10008EAF0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v98 = dispatch thunk of CustomStringConvertible.description.getter(v46, v97);
    v100 = v99;
    v637 = sub_1000523F0(v98, v99, (uint64_t *)&v633);
    v101 = v625;
    v102 = v618;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v637, v638, v95 + 4);
    swift_bridgeObjectRelease(v100);
    v620 = *(void (**)(uint64_t, uint64_t))(v101 + 8);
    v620(v67, v46);
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "GeneralMapsTimelineProvider: generateResolvableTimeline, starting at %{public}s", v95, 0xCu);
    swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v96, -1, -1);
    v103 = v95;
    v78 = v101;
    swift_slowDealloc(v103, -1, -1);
  }
  else
  {
    v102 = v75;
    v78 = v72;
    v620 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
    v620(v67, v46);
  }

  v112 = v615;
  if (v584 && v593)
  {
    v113 = (char *)v612;
    swift_bridgeObjectRetain(v593);
    v114 = objc_msgSend(v113, "waypoints");
    v115 = v627;
    if (!v114)
    {
      __break(1u);
      return;
    }
    v116 = v114;
    v117 = sub_100014FA8(0, &qword_10008EB08, GEOComposedWaypoint_ptr);
    v118 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v116, v117);

    v119 = v607;
    v120 = (uint64_t *)v617;
    if ((unint64_t)v118 >> 62)
    {
      if (v118 < 0)
        v394 = v118;
      else
        v394 = v118 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v118);
      v121 = _CocoaArrayWrapper.endIndex.getter(v394);
      swift_bridgeObjectRelease(v118);
    }
    else
    {
      v121 = *(_QWORD *)((v118 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v122 = v587;
    swift_bridgeObjectRelease(v118);
    v123 = objc_msgSend(v113, "nextWaypoint");
    v124 = objc_msgSend(v123, "name");

    if (v121 < 3)
    {
      v125 = v613;
      if (!v124)
      {
        if (qword_10008BA00 != -1)
          swift_once(&qword_10008BA00, sub_100045C88);
        v126.super.isa = (Class)qword_100090BC0;
        v129 = 0xD00000000000001DLL;
        v127 = 0xD000000000000034;
        v549 = 0x800000010007A8C0;
        v128 = 0x800000010007A8A0;
        v130 = 0x74616E6974736544;
        v131 = 0xEB000000006E6F69;
        goto LABEL_107;
      }
    }
    else
    {
      v125 = v613;
      if (!v124)
      {
        if (qword_10008BA00 != -1)
          swift_once(&qword_10008BA00, sub_100045C88);
        v126.super.isa = (Class)qword_100090BC0;
        v127 = 0xD00000000000003ALL;
        v549 = 0x800000010007A920;
        v128 = 0x800000010007A900;
        v129 = 0xD00000000000001BLL;
        v130 = 0x6F7453207478654ELL;
        v131 = 0xE900000000000070;
LABEL_107:
        v358 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v129, (Swift::String_optional)0, v126, *(Swift::String *)&v130, *(Swift::String *)&v127);
        countAndFlagsBits = v358._countAndFlagsBits;
        object = v358._object;
        goto LABEL_108;
      }
    }
    countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v124);
    object = v356;

LABEL_108:
    v359 = v576 & 1;
    v360 = (char *)v120 + v125[9];
    v361 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v361 - 8) + 56))(v360, 1, 1, v361);
    v120[2] = countAndFlagsBits;
    v120[3] = (uint64_t)object;
    v362 = v593;
    v120[5] = v577;
    v120[6] = v362;
    *((_BYTE *)v120 + 56) = v359;
    *v120 = sub_10001DB9C();
    v120[1] = v363;
    *((_DWORD *)v120 + 8) = objc_msgSend(v113, "transportType");
    *((_BYTE *)v120 + 36) = 0;
    v364 = v614;
    v365 = (void (*)(void))v616;
    v366 = ((uint64_t (*)(char *, char *, uint64_t))v616)(v614, v119, v115);
    v370 = Logger.logObject.getter(v366, v367, v368, v369);
    v371 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v370, v371))
    {
      v372 = (uint8_t *)swift_slowAlloc(12, -1);
      v373 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v633 = v373;
      v626 = v113;
      *(_DWORD *)v372 = 136446210;
      v374 = sub_10001B41C(&qword_10008EAF0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v375 = dispatch thunk of CustomStringConvertible.description.getter(v627, v374);
      v377 = v376;
      v637 = sub_1000523F0(v375, v376, (uint64_t *)&v633);
      v115 = v627;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v637, v638, v372 + 4);
      swift_bridgeObjectRelease(v377);
      v113 = v626;
      v620((uint64_t)v364, v115);
      _os_log_impl((void *)&_mh_execute_header, v370, v371, "GeneralMapsTimelineProvider: generateResolvableTimeline added NavigationETA entry at %{public}s", v372, 0xCu);
      swift_arrayDestroy(v373, 1, (char *)&type metadata for Any + 8);
      v378 = v373;
      v365 = (void (*)(void))v616;
      swift_slowDealloc(v378, -1, -1);
      swift_slowDealloc(v372, -1, -1);
    }
    else
    {
      v620((uint64_t)v364, v115);
    }

    v379 = (uint64_t)v615;
    v380 = type metadata accessor for NavigationETAEntryContentResolver(0);
    v635 = v380;
    v636 = &off_100082F40;
    v381 = sub_10005CBE8(&v633);
    sub_10001B33C((uint64_t)v120, (uint64_t)v381, type metadata accessor for NavigationETAEntryContent);
    *(_QWORD *)((char *)v381 + *(int *)(v380 + 20)) = v113;
    v382 = v619 + *(int *)(v604 + 48);
    v383 = v607;
    v365();
    sub_10005CC24(&v633, v382);
    v384 = v621;
    v385 = *v621;
    v386 = v113;
    if ((swift_isUniquelyReferenced_nonNull_native(v385) & 1) == 0)
      v385 = sub_10005C4F0(0, *(_QWORD *)(v385 + 16) + 1, 1, v385);
    v388 = *(_QWORD *)(v385 + 16);
    v387 = *(_QWORD *)(v385 + 24);
    if (v388 >= v387 >> 1)
      v385 = sub_10005C4F0(v387 > 1, v388 + 1, 1, v385);
    *(_QWORD *)(v385 + 16) = v388 + 1;
    sub_10001565C(v619, v385+ ((*(unsigned __int8 *)(v605 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v605 + 80))+ *(_QWORD *)(v605 + 72) * v388, &qword_10008EAF8);
    sub_100014F38(v592, v379, v570, v566, v574, v618, v595, v584, v577, v593);

    *v384 = v385;
    v620((uint64_t)v383, v115);
    v389 = (uint64_t)v565;
    sub_10001CDDC((uint64_t)v384, (uint64_t)v565, type metadata accessor for GeneralMapsTimelineProvider.ResolvableContentTimeline);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v580 + 56))(v389, 0, 1, v564);
    v390 = v122 + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider_timeline;
    swift_beginAccess(v122 + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider_timeline, &v633, 33, 0);
    sub_10005CBA0(v389, v390);
    swift_endAccess(&v633);
    sub_10001B54C((uint64_t)v120, type metadata accessor for NavigationETAEntryContent);
    return;
  }
  v46 = v627;
  v132 = ((uint64_t (*)(char *, char *, _QWORD))v616)(v624, v607, v627);
  if (v102)
  {
    v67 = v102;
    v136 = v102 & 0xFFFFFFFFFFFFFF8;
    if (v102 >> 62)
      goto LABEL_126;
    v72 = *(_QWORD *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v102);
    if (v72)
    {
      while (1)
      {
        v603 = v67 & 0xC000000000000001;
        swift_beginAccess(v624, v630, 1, 0);
        v583 = v638;
        v138 = v592 && v112 == 0;
        v139 = v138;
        v571 = v139;
        v75 = 4;
        *(_QWORD *)&v137 = 136380675;
        v552 = v137;
        v551 = (char *)&type metadata for Any + 8;
        v73 = &qword_10008BF20;
        *(_QWORD *)&v137 = 136381187;
        v562 = v137;
        v573 = (void *)0x800000010007A840;
        v572 = (void *)0x800000010007A810;
        *(_QWORD *)&v137 = 136446210;
        v554 = v137;
        v602 = v72;
        while (1)
        {
          if (v603)
            v140 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v75 - 4, v67);
          else
            v140 = *(id *)(v67 + 8 * v75);
          v141 = v140;
          v142 = v75 - 3;
          if (__OFADD__(v75 - 4, 1))
          {
            __break(1u);
            goto LABEL_118;
          }
          v143 = (char *)objc_msgSend(v140, "MKMapItem");
          if (!v143)
          {
            v149 = v78;
            v150 = v141;
            v154 = Logger.logObject.getter(v150, v151, v152, v153);
            v155 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v154, v155))
            {
              v156 = swift_slowAlloc(12, -1);
              v157 = swift_slowAlloc(32, -1);
              *(_QWORD *)&v633 = v157;
              *(_DWORD *)v156 = v552;
              v158 = objc_msgSend(v150, "undecoratedTitle");
              v619 = v75 - 3;
              v159 = v46;
              v160 = v75;
              v161 = v158;
              v162 = static String._unconditionallyBridgeFromObjectiveC(_:)(v158);
              v164 = v163;

              v165 = v162;
              v166 = v625;
              v167 = v618;
              *(_QWORD *)(v156 + 4) = sub_1000523F0(v165, v164, (uint64_t *)&v633);

              v168 = v164;
              v112 = v615;
              swift_bridgeObjectRelease(v168);
              v169 = v155;
              v78 = v166;
              _os_log_impl((void *)&_mh_execute_header, v154, v169, "GeneralMapsTimelineProvider: generateResolvableTimeline skipping suggestions entry (%{private}s) because no map item was available", (uint8_t *)v156, 0xCu);
              swift_arrayDestroy(v157, 1, v551);
              v170 = v157;
              v73 = &qword_10008BF20;
              swift_slowDealloc(v170, -1, -1);
              v171 = v156;
              v67 = v167;
              v75 = v160;
              v46 = v159;
              v142 = v619;
              swift_slowDealloc(v171, -1, -1);

            }
            else
            {

              v78 = v149;
            }
            v72 = v602;
            goto LABEL_34;
          }
          v614 = v143;
          v619 = v75 - 3;
          v144 = objc_msgSend(v141, "expires");
          if (v144)
          {
            v145 = v144;
            v146 = (uint64_t)v600;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            v147 = 0;
            v148 = (uint64_t)v601;
          }
          else
          {
            v147 = 1;
            v148 = (uint64_t)v601;
            v146 = (uint64_t)v600;
          }
          v612 = (id)v75;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56))(v146, v147, 1, v46);
          v172 = (uint64_t)v626;
          sub_10001565C(v146, (uint64_t)v626, &qword_10008BF20);
          sub_100016550(v172, v148, &qword_10008BF20);
          v173 = v141;
          v177 = Logger.logObject.getter(v173, v174, v175, v176);
          v181 = static os_log_type_t.debug.getter(v177, v178, v179, v180);
          if (os_log_type_enabled(v177, v181))
          {
            v182 = swift_slowAlloc(32, -1);
            v183 = swift_slowAlloc(96, -1);
            *(_QWORD *)&v633 = v183;
            *(_DWORD *)v182 = v562;
            v184 = objc_msgSend(v173, "undecoratedTitle");
            v185 = static String._unconditionallyBridgeFromObjectiveC(_:)(v184);
            v187 = v186;

            v637 = sub_1000523F0(v185, v187, (uint64_t *)&v633);
            v188 = v583;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v637, v583, v182 + 4);

            v189 = v187;
            v190 = v625;
            swift_bridgeObjectRelease(v189);
            *(_WORD *)(v182 + 12) = 2082;
            v191 = v581;
            sub_100016550(v148, v581, &qword_10008BF20);
            v192 = String.init<A>(describing:)(v191, v582);
            v194 = v193;
            v637 = sub_1000523F0(v192, v193, (uint64_t *)&v633);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v637, v188, v182 + 14);
            swift_bridgeObjectRelease(v194);
            sub_100015590(v148, &qword_10008BF20);
            *(_WORD *)(v182 + 22) = 2082;
            v195 = sub_10001B41C(&qword_10008EAF0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v196 = dispatch thunk of CustomStringConvertible.description.getter(v627, v195);
            v198 = v197;
            v637 = sub_1000523F0(v196, v197, (uint64_t *)&v633);
            v199 = v188;
            v73 = &qword_10008BF20;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v637, v199, v182 + 24);
            swift_bridgeObjectRelease(v198);
            _os_log_impl((void *)&_mh_execute_header, v177, v181, "GeneralMapsTimelineProvider: generateResolvableTimeline suggestions entry (%{private}s) suggestionEnd: %{public}s lastEnd: %{public}s", (uint8_t *)v182, 0x20u);
            swift_arrayDestroy(v183, 3, (char *)&type metadata for Any + 8);
            v200 = v183;
            v46 = v627;
            swift_slowDealloc(v200, -1, -1);
            swift_slowDealloc(v182, -1, -1);

            v201 = (uint64_t)v599;
            v202 = v597;
          }
          else
          {

            sub_100015590(v148, &qword_10008BF20);
            v201 = (uint64_t)v599;
            v202 = v597;
            v190 = v78;
          }
          v203 = v606;
          sub_100016550((uint64_t)v626, v201, &qword_10008BF20);
          v613 = *(int **)(v190 + 48);
          v204 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v613)(v201, 1, v46);
          v205 = v598;
          if (v204 == 1)
          {
            sub_100015590(v201, &qword_10008BF20);
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v190 + 32))(v203, v201, v46);
            v206 = sub_10001B41C(&qword_10008EB00, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            if ((dispatch thunk of static Comparable.< infix(_:_:)(v624, v203, v46, v206) & 1) == 0)
            {
              ((void (*)(char *, char *, uint64_t))v616)(v202, v203, v46);
              v226 = v173;
              v230 = Logger.logObject.getter(v226, v227, v228, v229);
              v231 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v230, v231))
              {
                v232 = swift_slowAlloc(32, -1);
                v617 = (char *)swift_slowAlloc(96, -1);
                *(_QWORD *)&v633 = v617;
                *(_DWORD *)v232 = v562;
                v233 = v202;
                v234 = objc_msgSend(v226, "undecoratedTitle");
                v235 = static String._unconditionallyBridgeFromObjectiveC(_:)(v234);
                v237 = v236;

                v637 = sub_1000523F0(v235, v237, (uint64_t *)&v633);
                v238 = v583;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v637, v583, v232 + 4);

                swift_bridgeObjectRelease(v237);
                *(_WORD *)(v232 + 12) = 2082;
                v239 = sub_10001B41C(&qword_10008EAF0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
                v240 = dispatch thunk of CustomStringConvertible.description.getter(v627, v239);
                v242 = v241;
                v637 = sub_1000523F0(v240, v241, (uint64_t *)&v633);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v637, v238, v232 + 14);
                swift_bridgeObjectRelease(v242);
                v243 = (void (*)(char *, uint64_t))v620;
                v620((uint64_t)v233, v627);
                *(_WORD *)(v232 + 22) = 2082;
                v244 = v239;
                v73 = &qword_10008BF20;
                v245 = dispatch thunk of CustomStringConvertible.description.getter(v627, v244);
                v247 = v246;
                v637 = sub_1000523F0(v245, v246, (uint64_t *)&v633);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v637, v238, v232 + 24);
                swift_bridgeObjectRelease(v247);
                _os_log_impl((void *)&_mh_execute_header, v230, v231, "GeneralMapsTimelineProvider: generateResolvableTimeline skipping suggestions entry (%{private}s) ending at %{public}s because timeline already populated up to %{public}s", (uint8_t *)v232, 0x20u);
                v248 = v617;
                swift_arrayDestroy(v617, 3, (char *)&type metadata for Any + 8);
                v46 = v627;
                swift_slowDealloc(v248, -1, -1);
                swift_slowDealloc(v232, -1, -1);

                v243(v606, v46);
                v78 = v625;
                v67 = v618;
                sub_100015590((uint64_t)v626, &qword_10008BF20);
                v112 = v615;
                v72 = v602;
                v75 = (uint64_t)v612;
                v142 = v619;
              }
              else
              {

                v349 = (void (*)(char *, uint64_t))v620;
                v620((uint64_t)v202, v46);

                v349(v203, v46);
                sub_100015590((uint64_t)v626, &qword_10008BF20);
                v112 = v615;
                v67 = v618;
                v72 = v602;
                v75 = (uint64_t)v612;
                v142 = v619;
                v78 = v625;
              }
              goto LABEL_34;
            }
            v620((uint64_t)v203, v46);
          }
          v112 = v173;
          v207 = (char *)sub_100052B7C(v112, v595);

          v208 = objc_msgSend(v112, "undecoratedTitle");
          v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v208);
          v210 = v209;

          if (qword_10008BA00 != -1)
            swift_once(&qword_10008BA00, sub_100045C88);
          v211._countAndFlagsBits = 0xD00000000000002BLL;
          v639._countAndFlagsBits = 0xD000000000000052;
          v639._object = v573;
          v211._object = v572;
          v212._countAndFlagsBits = 45;
          v212._object = (void *)0xE100000000000000;
          v213 = NSLocalizedString(_:tableName:bundle:value:comment:)(v211, (Swift::String_optional)0, (NSBundle)qword_100090BC0, v212, v639);
          v214 = v213._countAndFlagsBits;
          v215 = v213._object;
          v617 = v207;
          if (v207)
          {
            swift_bridgeObjectRetain(v213._object);
            v216 = v207;
            v217 = sub_10005C09C();
            v218 = objc_msgSend(v217, "stringFromTimeInterval:", (double)objc_msgSend(v216, "expectedTime"));

            if (v218)
            {
              v219 = static String._unconditionallyBridgeFromObjectiveC(_:)(v218);
              v221 = v220;

            }
            else
            {
              v219 = 0;
              v221 = 0;
            }
            v249 = sub_100045D08(v219, v221, (int)objc_msgSend(v216, "transportType"));
            v251 = v250;

            swift_bridgeObjectRelease(v213._object);
            swift_bridgeObjectRelease(v221);
            if (v251)
            {
              swift_bridgeObjectRelease(v213._object);
              v214 = v249;
              v215 = v251;
            }
            v73 = &qword_10008BF20;
          }
          else
          {
            swift_bridgeObjectRetain(v213._object);
            v222 = objc_msgSend(v112, "undecoratedSubtitle");
            if (v222)
            {
              v223 = v222;
              v214 = static String._unconditionallyBridgeFromObjectiveC(_:)(v222);
              v225 = v224;

              swift_bridgeObjectRelease_n(v213._object, 2);
              v215 = v225;
            }
            else
            {
              swift_bridgeObjectRelease(v213._object);
            }
          }
          swift_bridgeObjectRetain(v215);
          v252 = objc_msgSend(v112, "type");
          v253 = v623;
          v254 = &v623[*(int *)(v591 + 40)];
          v255 = type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v255 - 8) + 56))(v254, 1, 1, v255);
          *(_QWORD *)v253 = v67;
          *((_QWORD *)v253 + 1) = v210;
          *((_QWORD *)v253 + 2) = v214;
          *((_QWORD *)v253 + 3) = v215;
          *((_QWORD *)v253 + 4) = v252;
          *((_QWORD *)v253 + 5) = 0;
          v253[48] = 2;
          *((_QWORD *)v253 + 7) = sub_10001DC7C();
          *((_QWORD *)v253 + 8) = v256;
          if (v617)
          {
            v257 = (uint64_t)objc_msgSend(v617, "transportType");
            v261 = v257;
            v46 = v627;
            v78 = v625;
            goto LABEL_70;
          }
          v261 = GEOTransportTypeFromUserPreference();
          v257 = (uint64_t)objc_msgSend(v112, "containsKey:", CFSTR("MapsSuggestionsTransportTypeKey"));
          v46 = v627;
          v78 = v625;
          if ((_DWORD)v257)
            break;
LABEL_70:
          v262 = v623;
          *((_DWORD *)v623 + 18) = v261;
          v262[76] = 0;
          v596 = v215;
          if (!v571)
          {
            v299 = Logger.logObject.getter(v257, v258, v259, v260);
            v300 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v299, v300))
            {
              v301 = (uint8_t *)swift_slowAlloc(12, -1);
              v302 = swift_slowAlloc(32, -1);
              *(_QWORD *)&v633 = v302;
              *(_DWORD *)v301 = v554;
              v303 = sub_10001B41C(&qword_10008EAF0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
              v304 = dispatch thunk of CustomStringConvertible.description.getter(v627, v303);
              v306 = v305;
              v637 = sub_1000523F0(v304, v305, (uint64_t *)&v633);
              v46 = v627;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v637, v583, v301 + 4);
              swift_bridgeObjectRelease(v306);
              _os_log_impl((void *)&_mh_execute_header, v299, v300, "GeneralMapsTimelineProvider: generateResolvableTimeline added no-location SuggestedDestination entry at %{public}s", v301, 0xCu);
              swift_arrayDestroy(v302, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v302, -1, -1);
              swift_slowDealloc(v301, -1, -1);
            }

            v142 = v619;
            v323 = v617;
            v324 = (int *)type metadata accessor for SuggestedDestinationEntryContentResolver(0);
            v635 = (uint64_t)v324;
            v636 = &off_100082CA8;
            v325 = (char *)sub_10005CBE8(&v633);
            sub_10001B33C((uint64_t)v623, (uint64_t)v325, type metadata accessor for SuggestedDestinationEntryContent);
            v326 = v614;
            v327 = objc_msgSend(v112, "styleAttributes");
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v609 + 56))(&v325[v324[9]], 1, 1, v610);
            *(_QWORD *)&v325[v324[5]] = 0;
            *(_QWORD *)&v325[v324[6]] = v326;
            *(_QWORD *)&v325[v324[7]] = v327;
            *(_QWORD *)&v325[v324[8]] = v323;
            v328 = v589 + *(int *)(v604 + 48);
            ((void (*)(void))v616)();
            sub_10005CC24(&v633, v328);
            v329 = *v621;
            v330 = v323;
            v73 = &qword_10008BF20;
            if ((swift_isUniquelyReferenced_nonNull_native(v329) & 1) == 0)
              v329 = sub_10005C4F0(0, *(_QWORD *)(v329 + 16) + 1, 1, v329);
            v331 = v625;
            v333 = *(_QWORD *)(v329 + 16);
            v332 = *(_QWORD *)(v329 + 24);
            if (v333 >= v332 >> 1)
              v329 = sub_10005C4F0(v332 > 1, v333 + 1, 1, v329);
            *(_QWORD *)(v329 + 16) = v333 + 1;
            sub_10001565C(v589, v329+ ((*(unsigned __int8 *)(v605 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v605 + 80))+ *(_QWORD *)(v605 + 72) * v333, &qword_10008EAF8);

            swift_bridgeObjectRelease(v596);
            *v621 = v329;
            v67 = v618;
            v78 = v331;
            v72 = v602;
            goto LABEL_100;
          }
          ((void (*)(char *, char *, uint64_t))v616)(v205, v624, v46);
          v263 = v567;
          UUID.init()();
          swift_beginAccess(v205, v629, 0, 0);
          v575 = v263;
          v264 = objc_msgSend(v263, "timestamp");
          v265 = v611;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v266 = Date.timeIntervalSince(_:)(v265);
          v620((uint64_t)v265, v46);
          if (v266 < 300.0)
          {
            v267 = v586;
            v268 = sub_10001B33C((uint64_t)v623, v586, type metadata accessor for SuggestedDestinationEntryContent);
            *(_QWORD *)(v267 + 40) = 0;
            *(_BYTE *)(v267 + 48) = 0;
            v272 = Logger.logObject.getter(v268, v269, v270, v271);
            v273 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v272, v273))
            {
              v274 = (uint8_t *)swift_slowAlloc(12, -1);
              v275 = swift_slowAlloc(32, -1);
              *(_QWORD *)&v633 = v275;
              *(_DWORD *)v274 = v554;
              v276 = sub_10001B41C(&qword_10008EAF0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
              v277 = dispatch thunk of CustomStringConvertible.description.getter(v627, v276);
              v279 = v278;
              v637 = sub_1000523F0(v277, v278, (uint64_t *)&v633);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v637, v583, v274 + 4);
              swift_bridgeObjectRelease(v279);
              _os_log_impl((void *)&_mh_execute_header, v272, v273, "GeneralMapsTimelineProvider: generateResolvableTimeline added fresh-location SuggestedDestination entry at %{public}s", v274, 0xCu);
              swift_arrayDestroy(v275, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v275, -1, -1);
              swift_slowDealloc(v274, -1, -1);
            }

            v280 = (int *)type metadata accessor for SuggestedDestinationEntryContentResolver(0);
            v635 = (uint64_t)v280;
            v636 = &off_100082CA8;
            v281 = sub_10005CBE8(&v633);
            sub_10001B33C(v586, (uint64_t)v281, type metadata accessor for SuggestedDestinationEntryContent);
            v282 = v575;
            v283 = v614;
            v284 = objc_msgSend(v112, "styleAttributes");
            v285 = (char *)v281 + v280[9];
            v286 = v609;
            v287 = v610;
            (*(void (**)(char *, char *, uint64_t))(v609 + 16))(v285, v608, v610);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v286 + 56))(v285, 0, 1, v287);
            *(_QWORD *)((char *)v281 + v280[5]) = v592;
            *(_QWORD *)((char *)v281 + v280[6]) = v283;
            *(_QWORD *)((char *)v281 + v280[7]) = v284;
            v288 = v617;
            *(_QWORD *)((char *)v281 + v280[8]) = v617;
            v289 = v578 + *(int *)(v604 + 48);
            v46 = v627;
            ((void (*)(void))v616)();
            sub_10005CC24(&v633, v289);
            v290 = *v621;
            v291 = v288;
            if ((swift_isUniquelyReferenced_nonNull_native(v290) & 1) == 0)
              v290 = sub_10005C4F0(0, *(_QWORD *)(v290 + 16) + 1, 1, v290);
            v78 = v625;
            v73 = &qword_10008BF20;
            v293 = *(_QWORD *)(v290 + 16);
            v292 = *(_QWORD *)(v290 + 24);
            v215 = v596;
            if (v293 >= v292 >> 1)
              v290 = sub_10005C4F0(v292 > 1, v293 + 1, 1, v290);
            *(_QWORD *)(v290 + 16) = v293 + 1;
            sub_10001565C(v578, v290+ ((*(unsigned __int8 *)(v605 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v605 + 80))+ *(_QWORD *)(v605 + 72) * v293, &qword_10008EAF8);
            *v621 = v290;
            v294 = objc_msgSend(v282, "timestamp");
            v295 = v569;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            v296 = v611;
            static Date.+ infix(_:_:)(v295, 300.0);
            v620((uint64_t)v295, v46);
            sub_10001B54C(v586, type metadata accessor for SuggestedDestinationEntryContent);
            swift_beginAccess(v205, v628, 1, 0);
            (*(void (**)(char *, char *, uint64_t))(v78 + 40))(v205, v296, v46);
          }
          v297 = v579;
          sub_100016550((uint64_t)v626, v579, &qword_10008BF20);
          v298 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v613)(v297, 1, v46);
          v67 = v618;
          if (v298 == 1)
          {
            sub_100015590(v297, &qword_10008BF20);
LABEL_84:
            v310 = v594;
            v311 = sub_10001B33C((uint64_t)v623, v594, type metadata accessor for SuggestedDestinationEntryContent);
            *(_QWORD *)(v310 + 40) = 0;
            *(_BYTE *)(v310 + 48) = 1;
            v315 = Logger.logObject.getter(v311, v312, v313, v314);
            v316 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v315, v316))
            {
              v317 = (uint8_t *)swift_slowAlloc(12, -1);
              v318 = swift_slowAlloc(32, -1);
              *(_QWORD *)&v633 = v318;
              *(_DWORD *)v317 = v554;
              v319 = sub_10001B41C(&qword_10008EAF0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
              v320 = dispatch thunk of CustomStringConvertible.description.getter(v627, v319);
              v322 = v321;
              v637 = sub_1000523F0(v320, v321, (uint64_t *)&v633);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v637, v583, v317 + 4);
              swift_bridgeObjectRelease(v322);
              _os_log_impl((void *)&_mh_execute_header, v315, v316, "GeneralMapsTimelineProvider: generateResolvableTimeline added stale-location SuggestedDestination entry at %{public}s", v317, 0xCu);
              swift_arrayDestroy(v318, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v318, -1, -1);
              swift_slowDealloc(v317, -1, -1);
            }

            v334 = (int *)type metadata accessor for SuggestedDestinationEntryContentResolver(0);
            v635 = (uint64_t)v334;
            v636 = &off_100082CA8;
            v335 = sub_10005CBE8(&v633);
            sub_10001B33C(v594, (uint64_t)v335, type metadata accessor for SuggestedDestinationEntryContent);
            v575 = v575;
            v336 = v614;
            v337 = objc_msgSend(v112, "styleAttributes");
            v338 = (char *)v335 + v334[9];
            v339 = v609;
            v340 = v610;
            (*(void (**)(char *, char *, uint64_t))(v609 + 16))(v338, v608, v610);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v339 + 56))(v338, 0, 1, v340);
            *(_QWORD *)((char *)v335 + v334[5]) = v592;
            *(_QWORD *)((char *)v335 + v334[6]) = v336;
            *(_QWORD *)((char *)v335 + v334[7]) = v337;
            v341 = v617;
            *(_QWORD *)((char *)v335 + v334[8]) = v617;
            v342 = v585 + *(int *)(v604 + 48);
            ((void (*)(void))v616)();
            sub_10005CC24(&v633, v342);
            v343 = *v621;
            v344 = v341;
            if ((swift_isUniquelyReferenced_nonNull_native(v343) & 1) == 0)
              v343 = sub_10005C4F0(0, *(_QWORD *)(v343 + 16) + 1, 1, v343);
            v345 = v618;
            v78 = v625;
            v346 = v596;
            v348 = *(_QWORD *)(v343 + 16);
            v347 = *(_QWORD *)(v343 + 24);
            if (v348 >= v347 >> 1)
              v343 = sub_10005C4F0(v347 > 1, v348 + 1, 1, v343);
            *(_QWORD *)(v343 + 16) = v348 + 1;
            sub_10001565C(v585, v343+ ((*(unsigned __int8 *)(v605 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v605 + 80))+ *(_QWORD *)(v605 + 72) * v348, &qword_10008EAF8);
            swift_bridgeObjectRelease(v346);

            *v621 = v343;
            sub_10001B54C(v594, type metadata accessor for SuggestedDestinationEntryContent);
            (*(void (**)(char *, uint64_t))(v609 + 8))(v608, v610);
            v46 = v627;
            v620((uint64_t)v205, v627);
            v67 = v345;
            v72 = v602;
            v73 = &qword_10008BF20;
            goto LABEL_99;
          }
          v307 = v568;
          (*(void (**)(char *, uint64_t, uint64_t))(v78 + 32))(v568, v297, v46);
          v308 = sub_10001B41C(&qword_10008EB00, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v309 = dispatch thunk of static Comparable.< infix(_:_:)(v205, v307, v46, v308);
          v620((uint64_t)v307, v46);
          if ((v309 & 1) != 0)
            goto LABEL_84;
          (*(void (**)(char *, uint64_t))(v609 + 8))(v608, v610);

          swift_bridgeObjectRelease(v215);
          v620((uint64_t)v205, v46);
          v72 = v602;
LABEL_99:
          v142 = v619;
LABEL_100:
          v350 = v590;
          sub_10001565C((uint64_t)v626, v590, &qword_10008BF20);
          v351 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v613)(v350, 1, v46);
          v112 = v615;
          if (v351 == 1)
          {
            sub_100014F38(v592, (uint64_t)v615, v570, v566, v574, v67, v595, v584, v577, v593);
            swift_bridgeObjectRelease(v67);
            v391 = (void (*)(char *, uint64_t))v620;
            v620((uint64_t)v607, v46);
            sub_100015590(v350, &qword_10008BF20);
            v392 = (uint64_t)v565;
            sub_10001CDDC((uint64_t)v621, (uint64_t)v565, type metadata accessor for GeneralMapsTimelineProvider.ResolvableContentTimeline);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v580 + 56))(v392, 0, 1, v564);
            v393 = v587 + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider_timeline;
            swift_beginAccess(v587 + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider_timeline, &v633, 33, 0);
            sub_10005CBA0(v392, v393);
            swift_endAccess(&v633);
            sub_10001B54C((uint64_t)v623, type metadata accessor for SuggestedDestinationEntryContent);
            v391(v624, v46);
            return;
          }
          v352 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 32);
          v353 = v588;
          v352(v588, v350, v46);
          v354 = v611;
          v352(v611, (uint64_t)v353, v46);
          (*(void (**)(char *, char *, uint64_t))(v78 + 40))(v624, v354, v46);
          sub_10001B54C((uint64_t)v623, type metadata accessor for SuggestedDestinationEntryContent);
          v75 = (uint64_t)v612;
LABEL_34:
          ++v75;
          if (v142 == v72)
            goto LABEL_130;
        }
        v257 = (uint64_t)objc_msgSend(v112, "integerForKey:", CFSTR("MapsSuggestionsTransportTypeKey"));
        v136 = 0xFFFFFFFF80000000;
        if (v257 >= (uint64_t)0xFFFFFFFF80000000)
          break;
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        if (v67 >= 0)
          v395 = v136;
        else
          v395 = v67;
        swift_bridgeObjectRetain_n(v67, 2);
        v72 = _CocoaArrayWrapper.endIndex.getter(v395);
        swift_bridgeObjectRelease(v67);
        if (!v72)
          goto LABEL_130;
      }
      v261 = v257;
      v136 = 0x7FFFFFFFLL;
      if (v257 > 0x7FFFFFFF)
        goto LABEL_125;
      goto LABEL_70;
    }
LABEL_130:
    v132 = swift_bridgeObjectRelease(v67);
  }
  v396 = v621;
  v397 = v587;
  v398 = (void (*)(char *, uint64_t))v620;
  if (*(_QWORD *)(*v621 + 16))
  {
    v620((uint64_t)v607, v46);
    sub_100014F38(v592, (uint64_t)v112, v570, v566, v574, v618, v595, v584, v577, v593);
  }
  else
  {
    if ((v570 - 1) > 3)
      v626 = 0;
    else
      v626 = (char *)qword_10006BF68[(int)v570 - 1];
    if (v592)
    {
      v399 = v563;
      *v563 = 0;
      *((_BYTE *)v399 + 8) = 2;
      v400 = (char *)v399 + *(int *)(v561 + 20);
      v401 = type metadata accessor for NearbyEntryContent.ResolvedContent(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v401 - 8) + 56))(v400, 1, 1, v401);
      v402 = v567;
      UUID.init()();
      objc_msgSend(v402, "coordinate");
      v405 = MKMapRectMakeWithRadialDistance(v403, v404, 5000.0);
      v407 = v406;
      v409 = v408;
      v411 = v410;
      swift_beginAccess(v624, &v637, 0, 0);
      v412 = objc_msgSend(v402, "timestamp");
      v413 = v611;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v414 = Date.timeIntervalSince(_:)(v413);
      v398(v413, v46);
      if (v414 < 300.0)
      {
        v415 = v560;
        sub_10001B33C((uint64_t)v399, v560, type metadata accessor for NearbyEntryContent);
        *(_QWORD *)v415 = v112;
        *(_BYTE *)(v415 + 8) = 0;
        v416 = (char *)v402;
        v420 = Logger.logObject.getter(v416, v417, v418, v419);
        v421 = static os_log_type_t.info.getter();
        v422 = os_log_type_enabled(v420, v421);
        v623 = v416;
        if (v422)
        {
          v423 = swift_slowAlloc(22, -1);
          v424 = swift_slowAlloc(64, -1);
          v632 = v424;
          *(_DWORD *)v423 = 136380931;
          *(_QWORD *)&v633 = v416;
          *((_QWORD *)&v633 + 1) = v615;
          v425 = v416;
          v426 = String.init<A>(reflecting:)(&v633, &type metadata for GeneralMapsLocationUpdater.LocationInfo);
          v428 = v427;
          *(_QWORD *)&v633 = sub_1000523F0(v426, v427, &v632);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v633, (char *)&v633 + 8, v423 + 4);

          v429 = v428;
          v46 = v627;
          swift_bridgeObjectRelease(v429);
          *(_WORD *)(v423 + 12) = 2082;
          v430 = sub_10001B41C(&qword_10008EAF0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v431 = v624;
          v432 = dispatch thunk of CustomStringConvertible.description.getter(v46, v430);
          v434 = v433;
          *(_QWORD *)&v633 = sub_1000523F0(v432, v433, &v632);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v633, (char *)&v633 + 8, v423 + 14);
          swift_bridgeObjectRelease(v434);
          _os_log_impl((void *)&_mh_execute_header, v420, v421, "GeneralMapsTimelineProvider: generateResolvableTimeline added Nearby entry (with fresh location: %{private}s) at %{public}s", (uint8_t *)v423, 0x16u);
          swift_arrayDestroy(v424, 2, (char *)&type metadata for Any + 8);
          v435 = v424;
          v112 = v615;
          swift_slowDealloc(v435, -1, -1);
          swift_slowDealloc(v423, -1, -1);

        }
        else
        {

          v431 = v624;
        }
        v465 = (uint64_t)v558;
        v466 = (int *)type metadata accessor for NearbyEntryContentResolver(0);
        v635 = (uint64_t)v466;
        v636 = &off_100083380;
        v467 = sub_10005CBE8(&v633);
        sub_10001B33C(v560, (uint64_t)v467, type metadata accessor for NearbyEntryContent);
        v468 = (char *)v467 + v466[9];
        v469 = v609;
        v470 = v610;
        (*(void (**)(char *, char *, uint64_t))(v609 + 16))(v468, v555, v610);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v469 + 56))(v468, 0, 1, v470);
        *(_QWORD *)((char *)v467 + v466[5]) = v592;
        *(_QWORD *)((char *)v467 + v466[6]) = v626;
        v471 = (double *)((char *)v467 + v466[7]);
        *v471 = v405;
        *((_QWORD *)v471 + 1) = v407;
        *((_QWORD *)v471 + 2) = v409;
        *((_QWORD *)v471 + 3) = v411;
        v472 = v574;
        *(_QWORD *)((char *)v467 + v466[8]) = v574;
        v473 = v465 + *(int *)(v604 + 48);
        ((void (*)(uint64_t, char *, uint64_t))v616)(v465, v431, v46);
        sub_10005CC24(&v633, v473);
        v474 = v621;
        v475 = *v621;
        v476 = v623;
        swift_bridgeObjectRetain(v472);
        if ((swift_isUniquelyReferenced_nonNull_native(v475) & 1) == 0)
          v475 = sub_10005C4F0(0, *(_QWORD *)(v475 + 16) + 1, 1, v475);
        v478 = *(_QWORD *)(v475 + 16);
        v477 = *(_QWORD *)(v475 + 24);
        v479 = v624;
        if (v478 >= v477 >> 1)
          v475 = sub_10005C4F0(v477 > 1, v478 + 1, 1, v475);
        *(_QWORD *)(v475 + 16) = v478 + 1;
        sub_10001565C(v465, v475+ ((*(unsigned __int8 *)(v605 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v605 + 80))+ *(_QWORD *)(v605 + 72) * v478, &qword_10008EAF8);
        v396 = v474;
        *v474 = v475;
        v480 = objc_msgSend(v476, "timestamp");
        v481 = v569;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        v482 = v611;
        static Date.+ infix(_:_:)(v481, 300.0);
        v620((uint64_t)v481, v46);
        sub_10001B54C(v560, type metadata accessor for NearbyEntryContent);
        swift_beginAccess(v479, &v632, 1, 0);
        (*(void (**)(char *, char *, uint64_t))(v625 + 40))(v479, v482, v46);
        v399 = v563;
      }
      v483 = v396;
      *v399 = v112;
      *((_BYTE *)v399 + 8) = 1;
      v484 = v402;
      v488 = Logger.logObject.getter(v484, v485, v486, v487);
      v489 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v488, v489))
      {
        v490 = swift_slowAlloc(22, -1);
        v491 = swift_slowAlloc(64, -1);
        v631 = v491;
        *(_DWORD *)v490 = 136380931;
        *(_QWORD *)&v633 = v484;
        *((_QWORD *)&v633 + 1) = v112;
        v492 = v484;
        v493 = String.init<A>(reflecting:)(&v633, &type metadata for GeneralMapsLocationUpdater.LocationInfo);
        v495 = v494;
        *(_QWORD *)&v633 = sub_1000523F0(v493, v494, &v631);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v633, (char *)&v633 + 8, v490 + 4);

        v496 = v495;
        v112 = v615;
        swift_bridgeObjectRelease(v496);
        *(_WORD *)(v490 + 12) = 2082;
        v497 = sub_10001B41C(&qword_10008EAF0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v498 = v624;
        v499 = dispatch thunk of CustomStringConvertible.description.getter(v627, v497);
        v501 = v500;
        *(_QWORD *)&v633 = sub_1000523F0(v499, v500, &v631);
        v46 = v627;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v633, (char *)&v633 + 8, v490 + 14);
        swift_bridgeObjectRelease(v501);
        _os_log_impl((void *)&_mh_execute_header, v488, v489, "GeneralMapsTimelineProvider: generateResolvableTimeline added Nearby entry (with stale location: %{private}s) at %{public}s", (uint8_t *)v490, 0x16u);
        swift_arrayDestroy(v491, 2, (char *)&type metadata for Any + 8);
        v396 = v621;
        swift_slowDealloc(v491, -1, -1);
        swift_slowDealloc(v490, -1, -1);

      }
      else
      {

        v498 = v624;
        v396 = v483;
      }
      v502 = (int *)type metadata accessor for NearbyEntryContentResolver(0);
      v635 = (uint64_t)v502;
      v636 = &off_100083380;
      v503 = sub_10005CBE8(&v633);
      sub_10001B33C((uint64_t)v563, (uint64_t)v503, type metadata accessor for NearbyEntryContent);
      v504 = (char *)v503 + v502[9];
      v505 = v609;
      v506 = v610;
      (*(void (**)(char *, char *, uint64_t))(v609 + 16))(v504, v555, v610);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v505 + 56))(v504, 0, 1, v506);
      *(_QWORD *)((char *)v503 + v502[5]) = v592;
      *(_QWORD *)((char *)v503 + v502[6]) = v626;
      v507 = (double *)((char *)v503 + v502[7]);
      *v507 = v405;
      *((_QWORD *)v507 + 1) = v407;
      *((_QWORD *)v507 + 2) = v409;
      *((_QWORD *)v507 + 3) = v411;
      v508 = v574;
      *(_QWORD *)((char *)v503 + v502[8]) = v574;
      v509 = (uint64_t)v559;
      v510 = (uint64_t)&v559[*(int *)(v604 + 48)];
      ((void (*)(char *, char *, uint64_t))v616)(v559, v498, v46);
      sub_10005CC24(&v633, v510);
      v511 = *v396;
      v512 = v484;
      swift_bridgeObjectRetain(v508);
      if ((swift_isUniquelyReferenced_nonNull_native(v511) & 1) == 0)
        v511 = sub_10005C4F0(0, *(_QWORD *)(v511 + 16) + 1, 1, v511);
      v397 = v587;
      v514 = *(_QWORD *)(v511 + 16);
      v513 = *(_QWORD *)(v511 + 24);
      if (v514 >= v513 >> 1)
        v511 = sub_10005C4F0(v513 > 1, v514 + 1, 1, v511);
      *(_QWORD *)(v511 + 16) = v514 + 1;
      sub_10001565C(v509, v511+ ((*(unsigned __int8 *)(v605 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v605 + 80))+ *(_QWORD *)(v605 + 72) * v514, &qword_10008EAF8);
      sub_100014F38(v592, (uint64_t)v112, v570, v566, v574, v618, v595, v584, v577, v593);

      *v396 = v511;
      (*(void (**)(char *, uint64_t))(v609 + 8))(v555, v610);
      sub_10001B54C((uint64_t)v563, type metadata accessor for NearbyEntryContent);
    }
    else if (v566)
    {
      v436 = v553;
      v437 = sub_10002CF5C();
      v439 = v438;
      v441 = v440;
      v443 = v442;
      v448 = Logger.logObject.getter(v444, v445, v446, v447);
      v449 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v448, v449))
      {
        v450 = swift_slowAlloc(22, -1);
        *(_QWORD *)&v627 = v436;
        v451 = v450;
        v452 = v397;
        v453 = swift_slowAlloc(64, -1);
        v637 = v453;
        *(_DWORD *)v451 = 136380931;
        *(double *)&v633 = v437;
        *((_QWORD *)&v633 + 1) = v439;
        v634 = v441;
        v635 = v443;
        type metadata accessor for MKMapRect(0);
        v455 = String.init<A>(reflecting:)(&v633, v454);
        v457 = v456;
        *(_QWORD *)&v633 = sub_1000523F0(v455, v456, &v637);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v633, (char *)&v633 + 8, v451 + 4);
        swift_bridgeObjectRelease(v457);
        *(_WORD *)(v451 + 12) = 2082;
        v458 = v624;
        swift_beginAccess(v624, &v632, 0, 0);
        v459 = sub_10001B41C(&qword_10008EAF0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v460 = dispatch thunk of CustomStringConvertible.description.getter(v46, v459);
        v462 = v461;
        *(_QWORD *)&v633 = sub_1000523F0(v460, v461, &v637);
        v112 = v615;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v633, (char *)&v633 + 8, v451 + 14);
        swift_bridgeObjectRelease(v462);
        _os_log_impl((void *)&_mh_execute_header, v448, v449, "GeneralMapsTimelineProvider: generateResolvableTimeline added Nearby entry (with map rect: %{private}s) at %{public}s", (uint8_t *)v451, 0x16u);
        swift_arrayDestroy(v453, 2, (char *)&type metadata for Any + 8);
        v463 = v453;
        v397 = v452;
        v396 = v621;
        swift_slowDealloc(v463, -1, -1);
        v464 = v451;
        v436 = (id)v627;
        swift_slowDealloc(v464, -1, -1);

      }
      else
      {

        v458 = v624;
      }
      swift_beginAccess(v458, &v637, 0, 0);
      v536 = (int *)type metadata accessor for NearbyEntryContentResolver(0);
      v635 = (uint64_t)v536;
      v636 = &off_100083380;
      v537 = sub_10005CBE8(&v633);
      *v537 = 0;
      *((_BYTE *)v537 + 8) = 2;
      v538 = (char *)v537 + *(int *)(v561 + 20);
      v539 = type metadata accessor for NearbyEntryContent.ResolvedContent(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v539 - 8) + 56))(v538, 1, 1, v539);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v609 + 56))((char *)v537 + v536[9], 1, 1, v610);
      *(_QWORD *)((char *)v537 + v536[5]) = 0;
      *(_QWORD *)((char *)v537 + v536[6]) = v626;
      v540 = (double *)((char *)v537 + v536[7]);
      *v540 = v437;
      *((_QWORD *)v540 + 1) = v439;
      *((_QWORD *)v540 + 2) = v441;
      *((_QWORD *)v540 + 3) = v443;
      v541 = v574;
      *(_QWORD *)((char *)v537 + v536[8]) = v574;
      v542 = (uint64_t)v557;
      v543 = (uint64_t)&v557[*(int *)(v604 + 48)];
      ((void (*)(char *, char *, uint64_t))v616)(v557, v458, v46);
      sub_10005CC24(&v633, v543);
      v544 = *v396;
      swift_bridgeObjectRetain(v541);
      if ((swift_isUniquelyReferenced_nonNull_native(v544) & 1) == 0)
        v544 = sub_10005C4F0(0, *(_QWORD *)(v544 + 16) + 1, 1, v544);
      v546 = *(_QWORD *)(v544 + 16);
      v545 = *(_QWORD *)(v544 + 24);
      if (v546 >= v545 >> 1)
        v544 = sub_10005C4F0(v545 > 1, v546 + 1, 1, v544);
      *(_QWORD *)(v544 + 16) = v546 + 1;
      sub_10001565C(v542, v544+ ((*(unsigned __int8 *)(v605 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v605 + 80))+ *(_QWORD *)(v605 + 72) * v546, &qword_10008EAF8);

      sub_100014F38(0, (uint64_t)v112, v570, v566, v574, v618, v595, v584, v577, v593);
      *v396 = v544;
    }
    else
    {
      v515 = Logger.logObject.getter(v132, v133, v134, v135);
      v516 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v515, v516))
      {
        v517 = (uint8_t *)swift_slowAlloc(12, -1);
        v518 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v633 = v518;
        *(_DWORD *)v517 = 136446210;
        swift_beginAccess(v624, &v632, 0, 0);
        v519 = sub_10001B41C(&qword_10008EAF0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v520 = dispatch thunk of CustomStringConvertible.description.getter(v46, v519);
        v522 = v521;
        v637 = sub_1000523F0(v520, v521, (uint64_t *)&v633);
        v396 = v621;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v637, v638, v517 + 4);
        swift_bridgeObjectRelease(v522);
        _os_log_impl((void *)&_mh_execute_header, v515, v516, "GeneralMapsTimelineProvider: generateResolvableTimeline added Nearby entry (with fallback region) at %{public}s", v517, 0xCu);
        swift_arrayDestroy(v518, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v518, -1, -1);
        swift_slowDealloc(v517, -1, -1);
      }

      v523 = v561;
      v524 = (uint64_t)v556;
      swift_beginAccess(v624, &v637, 0, 0);
      v525 = (int *)type metadata accessor for NearbyEntryContentResolver(0);
      v635 = (uint64_t)v525;
      v636 = &off_100083380;
      v526 = sub_10005CBE8(&v633);
      *v526 = 0;
      *((_BYTE *)v526 + 8) = 2;
      v527 = (char *)v526 + *(int *)(v523 + 20);
      v528 = type metadata accessor for NearbyEntryContent.ResolvedContent(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v528 - 8) + 56))(v527, 1, 1, v528);
      if (qword_10008B9E8 != -1)
        swift_once(&qword_10008B9E8, sub_10002D058);
      v627 = xmmword_100090B78;
      v529 = qword_100090B88;
      v530 = unk_100090B90;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v609 + 56))((char *)v526 + v525[9], 1, 1, v610);
      *(_QWORD *)((char *)v526 + v525[5]) = 0;
      *(_QWORD *)((char *)v526 + v525[6]) = v626;
      v531 = (char *)v526 + v525[7];
      *(_OWORD *)v531 = v627;
      *((_QWORD *)v531 + 2) = v529;
      *((_QWORD *)v531 + 3) = v530;
      *(_QWORD *)((char *)v526 + v525[8]) = 0;
      v532 = v524 + *(int *)(v604 + 48);
      ((void (*)(uint64_t, char *, uint64_t))v616)(v524, v624, v46);
      sub_10005CC24(&v633, v532);
      v533 = *v396;
      if ((swift_isUniquelyReferenced_nonNull_native(*v396) & 1) == 0)
        v533 = sub_10005C4F0(0, *(_QWORD *)(v533 + 16) + 1, 1, v533);
      v535 = *(_QWORD *)(v533 + 16);
      v534 = *(_QWORD *)(v533 + 24);
      if (v535 >= v534 >> 1)
        v533 = sub_10005C4F0(v534 > 1, v535 + 1, 1, v533);
      *(_QWORD *)(v533 + 16) = v535 + 1;
      sub_10001565C(v524, v533+ ((*(unsigned __int8 *)(v605 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v605 + 80))+ *(_QWORD *)(v605 + 72) * v535, &qword_10008EAF8);
      sub_100014F38(0, (uint64_t)v112, v570, 0, v574, v618, v595, v584, v577, v593);
      *v396 = v533;
    }
    v398 = (void (*)(char *, uint64_t))v620;
    v620((uint64_t)v607, v46);
  }
  v547 = (uint64_t)v565;
  sub_10001CDDC((uint64_t)v396, (uint64_t)v565, type metadata accessor for GeneralMapsTimelineProvider.ResolvableContentTimeline);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v580 + 56))(v547, 0, 1, v564);
  v548 = v397 + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider_timeline;
  swift_beginAccess(v397 + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider_timeline, &v633, 33, 0);
  sub_10005CBA0(v547, v548);
  swift_endAccess(&v633);
  v398(v624, v46);
}

void sub_1000588E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  id v26;
  void *v27;
  uint64_t v28;

  v1 = v0;
  v2 = type metadata accessor for WidgetFamily(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchPredicate(0, v6);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_100014FA8(0, (unint64_t *)&qword_10008BF48, OS_dispatch_queue_ptr);
  *v10 = static OS_dispatch_queue.main.getter(v11);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v12 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v13 = type metadata accessor for MapSnapshotter();
  TimelineProviderContext.family.getter(v13);
  sub_10002A51C((uint64_t)v5, v14);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v15 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider_pendingRequestCount);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    swift_once(&qword_10008B9F0, sub_100035150);
    goto LABEL_5;
  }
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider_pendingRequestCount) = v17;
  if (v17)
    return;
  if (qword_10008B9F0 != -1)
    goto LABEL_12;
LABEL_5:
  v18 = type metadata accessor for Logger(0);
  v19 = sub_100014D70(v18, (uint64_t)qword_100090B98);
  v23 = Logger.logObject.getter(v19, v20, v21, v22);
  v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "GeneralMapsTimelineProvider: all widget request completions called; purging icon manager",
      v25,
      2u);
    swift_slowDealloc(v25, -1, -1);
  }

  v26 = objc_msgSend((id)objc_opt_self(MKIconManager), "iconManager");
  if (v26)
  {
    v27 = v26;
    objc_msgSend(v26, "purge");

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100058B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD aBlock[5];
  uint64_t v48;

  v37 = a4;
  v38 = a2;
  v39 = a3;
  v36 = a1;
  v43 = type metadata accessor for DispatchWorkItemFlags(0);
  v46 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v42 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v44 = *(_QWORD *)(v5 - 8);
  v45 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TimelineProviderContext(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for GeneralMapsTimelineEntry(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100014FA8(0, (unint64_t *)&qword_10008BF48, OS_dispatch_queue_ptr);
  v40 = static OS_dispatch_queue.main.getter(v16);
  sub_10001B33C(v37, (uint64_t)v15, type metadata accessor for GeneralMapsTimelineEntry);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v36, v8);
  v17 = *(unsigned __int8 *)(v13 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = (v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(unsigned __int8 *)(v9 + 80);
  v21 = (v20 + v19 + 8) & ~v20;
  v22 = swift_allocObject(&unk_1000832D0, v21 + v10, v17 | v20 | 7);
  v23 = v39;
  *(_QWORD *)(v22 + 16) = v38;
  *(_QWORD *)(v22 + 24) = v23;
  sub_10001CDDC((uint64_t)v15, v22 + v18, type metadata accessor for GeneralMapsTimelineEntry);
  v24 = v41;
  *(_QWORD *)(v22 + v19) = v41;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v22 + v21, v11, v8);
  aBlock[4] = sub_10005F430;
  v48 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100052B78;
  aBlock[3] = &unk_1000832E8;
  v25 = _Block_copy(aBlock);
  v26 = v48;
  swift_retain(v23);
  swift_retain(v24);
  swift_release(v26);
  static DispatchQoS.unspecified.getter(v27);
  aBlock[0] = &_swiftEmptyArrayStorage;
  v28 = sub_10001B41C((unint64_t *)&qword_10008C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v29 = sub_1000027AC((uint64_t *)&unk_10008BF70);
  v30 = sub_10005C390(qword_10008C800, (uint64_t *)&unk_10008BF70);
  v32 = v42;
  v31 = v43;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v29, v30, v43, v28);
  v33 = (void *)v40;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v32, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v46 + 8))(v32, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v7, v45);
}

uint64_t sub_100058E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD aBlock[5];
  uint64_t v49;

  v37 = a4;
  v38 = a2;
  v39 = a3;
  v44 = type metadata accessor for DispatchWorkItemFlags(0);
  v47 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v43 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v45 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  __chkstk_darwin(v6);
  v42 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TimelineProviderContext(0);
  v9 = *(_QWORD *)(v8 - 8);
  v36 = v8;
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000027AC(&qword_10008EB18);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100014FA8(0, (unint64_t *)&qword_10008BF48, OS_dispatch_queue_ptr);
  v40 = static OS_dispatch_queue.main.getter(v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v37, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v17 = *(unsigned __int8 *)(v13 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = (v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(unsigned __int8 *)(v9 + 80);
  v21 = (v20 + v19 + 8) & ~v20;
  v22 = swift_allocObject(&unk_1000831E0, v21 + v10, v17 | v20 | 7);
  v23 = v39;
  *(_QWORD *)(v22 + 16) = v38;
  *(_QWORD *)(v22 + 24) = v23;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v22 + v18, v15, v12);
  v24 = v41;
  *(_QWORD *)(v22 + v19) = v41;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v22 + v21, v11, v36);
  aBlock[4] = sub_10005E8C4;
  v49 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100052B78;
  aBlock[3] = &unk_1000831F8;
  v25 = _Block_copy(aBlock);
  v26 = v49;
  swift_retain(v23);
  swift_retain(v24);
  swift_release(v26);
  v27 = v42;
  static DispatchQoS.unspecified.getter(v28);
  aBlock[0] = &_swiftEmptyArrayStorage;
  v29 = sub_10001B41C((unint64_t *)&qword_10008C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = sub_1000027AC((uint64_t *)&unk_10008BF70);
  v31 = sub_10005C390(qword_10008C800, (uint64_t *)&unk_10008BF70);
  v33 = v43;
  v32 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v30, v31, v44, v29);
  v34 = (void *)v40;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v27, v33, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v47 + 8))(v33, v32);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v27, v46);
}

uint64_t sub_100059194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  void (*v73)(uint64_t, uint64_t, __n128);
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t (*v80)(char *, uint64_t, uint64_t);
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95[2];

  v86 = a3;
  v88 = a1;
  v4 = type metadata accessor for WidgetFamily(0);
  v78 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for TimelineProviderContext(0);
  v91 = *(_QWORD *)(v93 - 8);
  v7 = __chkstk_darwin(v93);
  v90 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = v8;
  __chkstk_darwin(v7);
  v10 = (char *)&v75 - v9;
  v83 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v83 - 8);
  v12 = __chkstk_darwin(v83);
  v89 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v82 = (char *)&v75 - v15;
  v16 = __chkstk_darwin(v14);
  v87 = (uint64_t)&v75 - v17;
  v84 = v18;
  __chkstk_darwin(v16);
  v20 = (char *)&v75 - v19;
  v22 = type metadata accessor for DispatchPredicate(0, v21);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (uint8_t **)((char *)&v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = sub_100014FA8(0, (unint64_t *)&qword_10008BF48, OS_dispatch_queue_ptr);
  *v25 = static OS_dispatch_queue.main.getter(v26);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v23 + 104))(v25, enum case for DispatchPredicate.onQueue(_:), v22);
  v27 = _dispatchPreconditionTest(_:)(v25);
  v28 = (*(uint64_t (**)(_QWORD *, uint64_t))(v23 + 8))(v25, v22);
  if ((v27 & 1) != 0)
  {
    v29 = *(_QWORD *)(v92 + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider_pendingRequestCount);
    v30 = __OFADD__(v29, 1);
    v31 = v29 + 1;
    if (!v30)
    {
      v81 = a2;
      *(_QWORD *)(v92 + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider_pendingRequestCount) = v31;
      Date.init()(v28);
      if (qword_10008B9F0 == -1)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_10:
  swift_once(&qword_10008B9F0, sub_100035150);
LABEL_4:
  v32 = type metadata accessor for Logger(0);
  sub_100014D70(v32, (uint64_t)qword_100090B98);
  v80 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v91 + 16);
  v33 = v80(v10, v88, v93);
  v37 = Logger.logObject.getter(v33, v34, v35, v36);
  v38 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = swift_slowAlloc(12, -1);
    v77 = v11;
    v40 = (uint8_t *)v39;
    v41 = swift_slowAlloc(32, -1);
    v76 = v41;
    v95[0] = v41;
    *(_DWORD *)v40 = 136446210;
    v75 = v40 + 4;
    TimelineProviderContext.family.getter(v41);
    v42 = sub_10001B41C((unint64_t *)&qword_10008CCD8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v43 = dispatch thunk of CustomStringConvertible.description.getter(v4, v42);
    v44 = v20;
    v46 = v45;
    (*(void (**)(char *, uint64_t))(v78 + 8))(v6, v4);
    v94 = sub_1000523F0(v43, v46, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v75);
    v47 = v46;
    v20 = v44;
    v48 = v91;
    v49 = v93;
    swift_bridgeObjectRelease(v47);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v10, v49);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "GeneralMapsTimelineProvider: 'snapshot' requested (of size %{public}s)", v40, 0xCu);
    v50 = v76;
    swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    v51 = v40;
    v11 = v77;
    swift_slowDealloc(v51, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v91 + 8))(v10, v93);
  }

  v79 = v20;
  v52 = v87;
  static Date.+ infix(_:_:)(v20, 15.0);
  v53 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v54 = v82;
  v55 = v83;
  v53(v82, v20, v83);
  v80(v90, v88, v93);
  v53(v89, (char *)v52, v55);
  v56 = *(unsigned __int8 *)(v11 + 80);
  v57 = (v56 + 16) & ~v56;
  v58 = (v84 + v57 + 7) & 0xFFFFFFFFFFFFFFF8;
  v59 = v91;
  v60 = *(unsigned __int8 *)(v91 + 80);
  v61 = (v60 + v58 + 8) & ~v60;
  v62 = (v85 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
  v63 = (v56 + 16 + v62) & ~v56;
  v64 = swift_allocObject(&unk_100083280, v63 + v84, v56 | v60 | 7);
  v65 = v64 + v57;
  v66 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
  v66(v65, v54, v55);
  v68 = v92;
  v67 = v93;
  *(_QWORD *)(v64 + v58) = v92;
  (*(void (**)(uint64_t, char *, uint64_t))(v59 + 32))(v64 + v61, v90, v67);
  v69 = (_QWORD *)(v64 + v62);
  v70 = v86;
  *v69 = v81;
  v69[1] = v70;
  v66(v64 + v63, v89, v55);
  swift_retain(v68);
  swift_retain(v70);
  v71 = v87;
  sub_10005373C(v87, (uint64_t)sub_10005EB60, v64);
  v72 = swift_release(v64);
  v73 = *(void (**)(uint64_t, uint64_t, __n128))(v11 + 8);
  v73(v71, v55, v72);
  return ((uint64_t (*)(char *, uint64_t))v73)(v79, v55);
}

uint64_t sub_10005972C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(void);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t, __n128);
  __n128 v63;
  void (*v65)(void);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  char *v76;
  double v77;
  void (*v78)(char *, uint64_t);
  void (*v79)(uint64_t, char *, uint64_t);
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  void (*v95)(void);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  _BYTE v105[32];

  v86 = a6;
  v99 = a5;
  v97 = a4;
  v102 = a3;
  v103 = a1;
  v7 = type metadata accessor for TimelineProviderContext(0);
  v91 = *(_QWORD *)(v7 - 8);
  v92 = v7;
  __chkstk_darwin(v7);
  v85 = v8;
  v90 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v93 = (uint64_t)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = v12;
  __chkstk_darwin(v11);
  v94 = (char *)&v79 - v13;
  v83 = sub_1000027AC(&qword_10008EAF8);
  v80 = *(_QWORD *)(v83 - 8);
  v14 = *(_QWORD *)(v80 + 64);
  v15 = __chkstk_darwin(v83);
  v88 = (uint64_t)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v15);
  v81 = (char *)&v79 - v17;
  __chkstk_darwin(v16);
  v89 = (uint64_t)&v79 - v18;
  v19 = sub_1000027AC(&qword_10008EAE8);
  __chkstk_darwin(v19);
  v21 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for GeneralMapsTimelineProvider.ResolvableContentTimeline(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v96 = (uint64_t)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for GeneralMapsTimelineEntry(0);
  v82 = *(_QWORD *)(v25 - 8);
  v26 = *(_QWORD *)(v82 + 64);
  v27 = __chkstk_darwin(v25);
  v87 = (uint64_t)&v79 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v29 = (char *)&v79 - v28;
  v100 = v10;
  v101 = v9;
  v95 = *(void (**)(void))(v10 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v95)((char *)&v79 - v28, v103, v9);
  v30 = &v29[*(int *)(v25 + 20)];
  v31 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
  v32 = &v29[*(int *)(v25 + 24)];
  v33 = type metadata accessor for TimelineEntryRelevance(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
  v98 = a2;
  v34 = a2 + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider_timeline;
  swift_beginAccess(a2 + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider_timeline, v105, 0, 0);
  sub_100016550(v34, (uint64_t)v21, &qword_10008EAE8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    sub_100015590((uint64_t)v21, &qword_10008EAE8);
  }
  else
  {
    v35 = (uint64_t)v21;
    v36 = v96;
    sub_10001CDDC(v35, v96, type metadata accessor for GeneralMapsTimelineProvider.ResolvableContentTimeline);
    if (*(_QWORD *)(*(_QWORD *)v36 + 16))
    {
      v37 = v83;
      v38 = v89;
      v39 = (_QWORD *)(v89 + *(int *)(v83 + 48));
      v40 = *(unsigned __int8 *)(v80 + 80);
      v41 = v81;
      sub_100016550(*(_QWORD *)v36 + ((v40 + 32) & ~v40), (uint64_t)v81, &qword_10008EAF8);
      v42 = (__int128 *)&v41[*(int *)(v37 + 48)];
      v79 = *(void (**)(uint64_t, char *, uint64_t))(v100 + 32);
      v43 = v101;
      v79(v38, v41, v101);
      sub_10005CC24(v42, (uint64_t)v39);
      v44 = v39[4];
      v93 = v39[3];
      v80 = v44;
      v81 = (char *)sub_10005E528(v39, v93);
      v45 = v95;
      ((void (*)(char *, uint64_t, uint64_t))v95)(v94, v103, v43);
      v46 = v91;
      (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v90, v102, v92);
      sub_10001B33C((uint64_t)v29, v87, type metadata accessor for GeneralMapsTimelineEntry);
      v47 = v88 + *(int *)(v37 + 48);
      v45();
      sub_10005E54C((uint64_t)v39, v47);
      v48 = *(unsigned __int8 *)(v100 + 80);
      v49 = (v48 + 16) & ~v48;
      v50 = (v84 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
      v51 = *(unsigned __int8 *)(v46 + 80);
      v52 = (v51 + v50 + 8) & ~v51;
      v53 = (v85 + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
      v54 = *(unsigned __int8 *)(v82 + 80);
      v55 = (v54 + v53 + 16) & ~v54;
      v56 = (v26 + v40 + v55) & ~v40;
      v57 = swift_allocObject(&unk_1000832A8, v56 + v14, v40 | v48 | v51 | v54 | 7);
      v79(v57 + v49, v94, v101);
      v58 = v98;
      *(_QWORD *)(v57 + v50) = v98;
      (*(void (**)(uint64_t, char *, uint64_t))(v91 + 32))(v57 + v52, v90, v92);
      v59 = (_QWORD *)(v57 + v53);
      v60 = v99;
      *v59 = v97;
      v59[1] = v60;
      sub_10001CDDC(v87, v57 + v55, type metadata accessor for GeneralMapsTimelineEntry);
      sub_10001565C(v88, v57 + v56, &qword_10008EAF8);
      v61 = v80;
      v62 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t, __n128))(v80 + 8);
      swift_retain(v58);
      v63 = swift_retain(v60);
      v62(v102, v86, sub_10005EFF0, v57, v93, v61, v63);
      swift_release(v57);
      sub_10001B54C(v96, type metadata accessor for GeneralMapsTimelineProvider.ResolvableContentTimeline);
      sub_10001B54C((uint64_t)v29, type metadata accessor for GeneralMapsTimelineEntry);
      return sub_100015590(v89, &qword_10008EAF8);
    }
    sub_10001B54C(v96, type metadata accessor for GeneralMapsTimelineProvider.ResolvableContentTimeline);
  }
  v65 = v95;
  v66 = v101;
  v67 = v93;
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v68 = type metadata accessor for Logger(0);
  sub_100014D70(v68, (uint64_t)qword_100090B98);
  v69 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v65)(v67, v103, v66);
  v73 = Logger.logObject.getter(v69, v70, v71, v72);
  v74 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v73, v74))
  {
    v75 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v75 = 134349056;
    v76 = v94;
    Date.init()(v75);
    v77 = Date.timeIntervalSince(_:)(v67);
    v78 = *(void (**)(char *, uint64_t))(v100 + 8);
    v78(v76, v66);
    v104 = v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v75 + 4);
    v78((char *)v67, v66);
    _os_log_impl((void *)&_mh_execute_header, v73, v74, "GeneralMapsTimelineProvider: no timeline; will call 'snapshot' completion with empty entry (%{public}f seconds elapsed)",
      v75,
      0xCu);
    swift_slowDealloc(v75, -1, -1);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v67, v66);
  }

  sub_100058B3C(v102, v97, v99, (uint64_t)v29);
  return sub_10001B54C((uint64_t)v29, type metadata accessor for GeneralMapsTimelineEntry);
}

uint64_t sub_100059EAC(uint64_t a1, void (*a2)(_QWORD), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  char *v43;
  double v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_QWORD);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  char *v57;
  double v58;
  void (*v59)(char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint8_t *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  void (*v86)(_QWORD);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  uint64_t v93;

  v81 = a7;
  v82 = a8;
  v89 = a5;
  v90 = a6;
  v88 = a4;
  v86 = a2;
  v10 = sub_1000027AC(&qword_10008BB20);
  __chkstk_darwin(v10);
  v12 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_1000027AC(&qword_10008EAF8);
  __chkstk_darwin(v79);
  v83 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for GeneralMapsTimelineEntry(0);
  __chkstk_darwin(v84);
  v85 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for Date(0);
  v87 = *(_QWORD *)(v91 - 8);
  v15 = __chkstk_darwin(v91);
  v78 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v74 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v74 - v20;
  v22 = sub_1000027AC(&qword_10008BB18);
  v23 = __chkstk_darwin(v22);
  v80 = (uint64_t)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v26 = (char *)&v74 - v25;
  v27 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = __chkstk_darwin(v27);
  v77 = (uint64_t)&v74 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v32 = (char *)&v74 - v31;
  sub_100016550(a1, (uint64_t)v26, &qword_10008BB18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
  {
    sub_100015590((uint64_t)v26, &qword_10008BB18);
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v33 = type metadata accessor for Logger(0);
    sub_100014D70(v33, (uint64_t)qword_100090B98);
    v34 = v87;
    v35 = v91;
    v36 = (*(uint64_t (**)(char *, void (*)(_QWORD), uint64_t))(v87 + 16))(v21, v86, v91);
    v40 = Logger.logObject.getter(v36, v37, v38, v39);
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v42 = 134349056;
      v43 = v78;
      Date.init()(v42);
      v44 = Date.timeIntervalSince(_:)(v21);
      v45 = *(void (**)(char *, uint64_t))(v34 + 8);
      v45(v43, v35);
      v92 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v42 + 4);
      v45(v21, v35);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "GeneralMapsTimelineProvider: could not resolve content; will call 'snapshot' completion with empty entry (%{publ"
        "ic}f seconds elapsed)",
        v42,
        0xCu);
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v35);
    }

    return sub_100058B3C(v88, v89, v90, v81);
  }
  else
  {
    v76 = v12;
    v75 = v32;
    sub_10001CDDC((uint64_t)v26, (uint64_t)v32, type metadata accessor for GeneralMapsTimelineEntryContent);
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v81 = a3;
    v46 = type metadata accessor for Logger(0);
    sub_100014D70(v46, (uint64_t)qword_100090B98);
    v47 = v87;
    v48 = *(void (**)(_QWORD))(v87 + 16);
    v49 = v91;
    v50 = ((uint64_t (*)(char *, void (*)(_QWORD), uint64_t))v48)(v19, v86, v91);
    v54 = Logger.logObject.getter(v50, v51, v52, v53);
    v55 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v56 = 134349056;
      v74 = v56 + 4;
      v57 = v78;
      Date.init()(v56);
      v58 = Date.timeIntervalSince(_:)(v19);
      v86 = v48;
      v59 = *(void (**)(char *, uint64_t))(v47 + 8);
      v59(v57, v91);
      v92 = v58;
      v49 = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v74);
      v59(v19, v49);
      v48 = v86;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "GeneralMapsTimelineProvider: will call 'snapshot' completion with entry (%{public}f seconds elapsed)", v56, 0xCu);
      swift_slowDealloc(v56, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v49);
    }

    v61 = *(int *)(v79 + 48);
    v62 = v83;
    v63 = &v83[v61];
    v64 = v82 + v61;
    v48(v83);
    sub_10005E54C(v64, (uint64_t)v63);
    v65 = (uint64_t)v75;
    v66 = v80;
    sub_10001B33C((uint64_t)v75, v80, type metadata accessor for GeneralMapsTimelineEntryContent);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(v66, 0, 1, v27);
    v67 = v77;
    sub_10001B33C(v65, v77, type metadata accessor for GeneralMapsTimelineEntryContent);
    swift_getEnumCaseMultiPayload(v67, v27);
    v69 = (uint64_t)v76;
    TimelineEntryRelevance.init(score:duration:)(flt_10006BF88[v68], 0.0);
    sub_10001B54C(v67, type metadata accessor for GeneralMapsTimelineEntryContent);
    v70 = type metadata accessor for TimelineEntryRelevance(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v69, 0, 1, v70);
    v71 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
    v72 = (uint64_t)v85;
    v71(v85, v62, v49);
    v73 = v84;
    sub_10001565C(v66, v72 + *(int *)(v84 + 20), &qword_10008BB18);
    sub_10001565C(v69, v72 + *(int *)(v73 + 24), &qword_10008BB20);
    sub_10002CE18(v63);
    sub_100058B3C(v88, v89, v90, v72);
    sub_10001B54C(v72, type metadata accessor for GeneralMapsTimelineEntry);
    return sub_10001B54C(v65, type metadata accessor for GeneralMapsTimelineEntryContent);
  }
}

uint64_t sub_10005A548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD aBlock[5];
  uint64_t v45;

  v40 = a6;
  v37 = a3;
  v38 = a5;
  v35 = a4;
  v36 = a2;
  v7 = v6;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v43 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v41 = *(_QWORD *)(v12 - 8);
  v42 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TimelineProviderContext(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100014FA8(0, (unint64_t *)&qword_10008BF48, OS_dispatch_queue_ptr);
  v39 = static OS_dispatch_queue.main.getter(v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, v15);
  v20 = *(unsigned __int8 *)(v16 + 80);
  v21 = (v20 + 24) & ~v20;
  v22 = (v17 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(v35, v22 + 16, v20 | 7);
  *(_QWORD *)(v23 + 16) = v7;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v23 + v21, v18, v15);
  v24 = (_QWORD *)(v23 + v22);
  v25 = v37;
  *v24 = v36;
  v24[1] = v25;
  aBlock[4] = v38;
  v45 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100052B78;
  aBlock[3] = v40;
  v26 = _Block_copy(aBlock);
  v27 = v45;
  swift_retain(v7);
  swift_retain(v25);
  v28 = swift_release(v27);
  static DispatchQoS.unspecified.getter(v28);
  aBlock[0] = &_swiftEmptyArrayStorage;
  v29 = sub_10001B41C((unint64_t *)&qword_10008C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = sub_1000027AC((uint64_t *)&unk_10008BF70);
  v31 = sub_10005C390(qword_10008C800, (uint64_t *)&unk_10008BF70);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v30, v31, v9, v29);
  v32 = (void *)v39;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v26);
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v14, v42);
}

uint64_t sub_10005A7E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, char *, uint64_t);
  _QWORD *v71;
  uint64_t v72;
  __n128 v73;
  void (*v74)(uint64_t, uint64_t, __n128);
  uint64_t v76;
  uint8_t *v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t (*v80)(char *, uint64_t, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100[2];

  v89 = a3;
  v90 = a2;
  v95 = a1;
  v3 = type metadata accessor for WidgetFamily(0);
  v82 = *(_QWORD *)(v3 - 8);
  v83 = v3;
  __chkstk_darwin(v3);
  v81 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TimelineProviderContext(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = v8;
  __chkstk_darwin(v7);
  v92 = (char *)&v76 - v10;
  v11 = type metadata accessor for Date(0);
  v91 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v91 + 64);
  v13 = __chkstk_darwin(v11);
  v96 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v13);
  v94 = (char *)&v76 - v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v76 - v17;
  __chkstk_darwin(v16);
  v97 = (char *)&v76 - v19;
  v21 = type metadata accessor for DispatchPredicate(0, v20);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (uint64_t *)((char *)&v76 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = sub_100014FA8(0, (unint64_t *)&qword_10008BF48, OS_dispatch_queue_ptr);
  *v24 = static OS_dispatch_queue.main.getter(v25);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v22 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v21);
  v26 = _dispatchPreconditionTest(_:)(v24);
  v27 = (*(uint64_t (**)(_QWORD *, uint64_t))(v22 + 8))(v24, v21);
  if ((v26 & 1) != 0)
  {
    v28 = *(_QWORD *)(v98 + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider_pendingRequestCount);
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (!v29)
    {
      *(_QWORD *)(v98 + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider_pendingRequestCount) = v30;
      Date.init()(v27);
      if (qword_10008B9F0 == -1)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_10:
  swift_once(&qword_10008B9F0, sub_100035150);
LABEL_4:
  v86 = v18;
  v87 = v11;
  v93 = v9;
  v31 = type metadata accessor for Logger(0);
  sub_100014D70(v31, (uint64_t)qword_100090B98);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v33 = v92;
  v34 = v32(v92, v95, v5);
  v38 = Logger.logObject.getter(v34, v35, v36, v37);
  v39 = static os_log_type_t.info.getter();
  v40 = os_log_type_enabled(v38, v39);
  v85 = v6;
  if (v40)
  {
    v41 = swift_slowAlloc(12, -1);
    v80 = v32;
    v42 = (uint8_t *)v41;
    v43 = swift_slowAlloc(32, -1);
    v79 = v43;
    v100[0] = v43;
    v78 = v42;
    *(_DWORD *)v42 = 136446210;
    v77 = v42 + 4;
    v44 = v81;
    TimelineProviderContext.family.getter(v43);
    v45 = sub_10001B41C((unint64_t *)&qword_10008CCD8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v46 = v83;
    v47 = dispatch thunk of CustomStringConvertible.description.getter(v83, v45);
    v48 = v6;
    v50 = v49;
    (*(void (**)(char *, uint64_t))(v82 + 8))(v44, v46);
    v51 = v47;
    v52 = v5;
    v99 = sub_1000523F0(v51, v50, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v77);
    swift_bridgeObjectRelease(v50);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v92, v5);
    v53 = v78;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "GeneralMapsTimelineProvider: 'timeline' requested (of size %{public}s)", v78, 0xCu);
    v54 = v79;
    swift_arrayDestroy(v79, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    v32 = v80;
    swift_slowDealloc(v53, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v33, v5);

    v52 = v5;
  }
  v84 = v52;
  v55 = (uint64_t)v86;
  v56 = v97;
  static Date.+ infix(_:_:)(v97, 30.0);
  v57 = v91;
  v58 = *(void (**)(char *, char *, uint64_t))(v91 + 16);
  v59 = v87;
  v58(v94, v56, v87);
  v32(v93, v95, v52);
  v58(v96, (char *)v55, v59);
  v60 = *(unsigned __int8 *)(v57 + 80);
  v61 = (v60 + 24) & ~v60;
  v62 = v85;
  v63 = *(unsigned __int8 *)(v85 + 80);
  v64 = (v12 + v63 + v61) & ~v63;
  v65 = (v88 + v64 + 7) & 0xFFFFFFFFFFFFFFF8;
  v66 = (v60 + v65 + 16) & ~v60;
  v67 = swift_allocObject(&unk_100083050, v66 + v12, v60 | v63 | 7);
  v68 = v98;
  *(_QWORD *)(v67 + 16) = v98;
  v69 = v67 + v61;
  v70 = *(void (**)(uint64_t, char *, uint64_t))(v57 + 32);
  v70(v69, v94, v59);
  (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v67 + v64, v93, v84);
  v71 = (_QWORD *)(v67 + v65);
  v72 = v89;
  *v71 = v90;
  v71[1] = v72;
  v70(v67 + v66, v96, v59);
  swift_retain(v68);
  swift_retain(v72);
  sub_10005373C(v55, (uint64_t)sub_10005CA18, v67);
  v73 = swift_release(v67);
  v74 = *(void (**)(uint64_t, uint64_t, __n128))(v57 + 8);
  v74(v55, v59, v73);
  return ((uint64_t (*)(char *, uint64_t))v74)(v97, v59);
}

void sub_10005AD8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  char *v44;
  double v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  dispatch_group_t v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  char *v65;
  void (*v66)(uint64_t, uint64_t, void (*)(uint64_t), uint64_t, uint64_t, uint64_t);
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  void *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  dispatch_group_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *isa;
  dispatch_group_t v134;
  uint64_t v135;
  _QWORD *v136;
  void **aBlock;
  _QWORD v138[4];
  uint64_t v139;
  char v140[8];

  v126 = a6;
  v118 = a5;
  v117 = a4;
  v132 = a3;
  v116 = a2;
  v7 = type metadata accessor for TimelineReloadPolicy(0);
  __chkstk_darwin(v7);
  v129 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000027AC(&qword_10008EB18);
  isa = v9[-1].isa;
  v134 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for DispatchWorkItemFlags(0);
  v112 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v111 = (char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for DispatchQoS(0);
  v109 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v108 = (char *)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for TimelineProviderContext(0);
  v106 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v105 = v14;
  v115 = (char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_1000027AC(&qword_10008EAF8);
  v15 = *(_QWORD *)(v128 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = __chkstk_darwin(v128);
  v125 = (char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v17);
  v135 = (uint64_t)&v101 - v19;
  __chkstk_darwin(v18);
  v127 = (char *)&v101 - v20;
  v21 = type metadata accessor for Date(0);
  v130 = *(_QWORD *)(v21 - 8);
  v131 = v21;
  v22 = __chkstk_darwin(v21);
  v114 = (char *)&v101 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = v23;
  __chkstk_darwin(v22);
  v25 = (char *)&v101 - v24;
  v26 = sub_1000027AC(&qword_10008EAE8);
  __chkstk_darwin(v26);
  v28 = (char *)&v101 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for GeneralMapsTimelineProvider.ResolvableContentTimeline(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v32 = (uint64_t *)((char *)&v101 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  v119 = a1;
  v33 = a1 + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider_timeline;
  swift_beginAccess(v33, v140, 0, 0);
  sub_100016550(v33, (uint64_t)v28, &qword_10008EAE8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1)
  {
    sub_100015590((uint64_t)v28, &qword_10008EAE8);
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v34 = type metadata accessor for Logger(0);
    sub_100014D70(v34, (uint64_t)qword_100090B98);
    v36 = v130;
    v35 = v131;
    v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v130 + 16))(v25, v116, v131);
    v41 = Logger.logObject.getter(v37, v38, v39, v40);
    v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v43 = 134349056;
      v44 = v114;
      Date.init()(v43);
      v45 = Date.timeIntervalSince(_:)(v25);
      v46 = *(void (**)(char *, uint64_t))(v36 + 8);
      v46(v44, v35);
      aBlock = *(void ***)&v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v138, v43 + 4);
      v46(v25, v35);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "GeneralMapsTimelineProvider: no timeline; will call 'timeline' completion with empty array (%{public}f seconds elapsed)",
        v43,
        0xCu);
      swift_slowDealloc(v43, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v25, v35);
    }
    v71 = v132;

    v72 = v129;
    static TimelineReloadPolicy.atEnd.getter(v73);
    v74 = type metadata accessor for GeneralMapsTimelineEntry(0);
    v75 = sub_10001B41C(qword_10008EAB8, type metadata accessor for GeneralMapsTimelineEntry, (uint64_t)&unk_100069FFC);
    Timeline.init(entries:policy:)(_swiftEmptyArrayStorage, v72, v74, v75);
    sub_100058E60(v71, v117, v118, (uint64_t)v11);
    ((void (*)(char *, id))isa[1])(v11, v134);
  }
  else
  {
    sub_10001CDDC((uint64_t)v28, (uint64_t)v32, type metadata accessor for GeneralMapsTimelineProvider.ResolvableContentTimeline);
    v129 = (char *)swift_allocObject(&unk_100083140, 24, 7);
    *((_QWORD *)v129 + 2) = _swiftEmptyArrayStorage;
    v103 = v32;
    v47 = *v32;
    swift_bridgeObjectRetain(*v32);
    v48 = dispatch_group_create();
    v49 = *(_QWORD *)(v47 + 16);
    v134 = v48;
    if (v49)
    {
      v50 = v48;
      v51 = (uint64_t)v127;
      v52 = v128;
      v124 = (__int128 *)&v127[*(int *)(v128 + 48)];
      v53 = *(unsigned __int8 *)(v15 + 80);
      v54 = (v53 + 32) & ~v53;
      v102 = v47;
      v55 = v47 + v54;
      v122 = *(_QWORD *)(v15 + 72);
      v123 = v54;
      v121 = v54 + v16;
      v120 = v53 | 7;
      v56 = v130;
      v57 = (uint64_t)v125;
      do
      {
        sub_100016550(v55, v51, &qword_10008EAF8);
        v58 = (_QWORD *)(v135 + *(int *)(v52 + 48));
        v59 = v131;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 32))(v135, v51, v131);
        sub_10005CC24(v124, (uint64_t)v58);
        dispatch_group_enter(v50);
        v61 = v58[3];
        v60 = v58[4];
        isa = sub_10005E528(v58, v61);
        v62 = v57 + *(int *)(v52 + 48);
        v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16);
        v63(v57, v135, v59);
        sub_10005E54C((uint64_t)v58, v62);
        v64 = swift_allocObject(&unk_100083168, v121, v120);
        v65 = v129;
        *(_QWORD *)(v64 + 16) = v134;
        *(_QWORD *)(v64 + 24) = v65;
        sub_10001565C(v57, v64 + v123, &qword_10008EAF8);
        v66 = *(void (**)(uint64_t, uint64_t, void (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v60 + 8);
        swift_retain(v65);
        v67 = v134;
        v68 = v61;
        v51 = (uint64_t)v127;
        v69 = v60;
        v50 = v134;
        v66(v132, v126, sub_10005E62C, v64, v68, v69);
        v56 = v130;
        v70 = v64;
        v52 = v128;
        swift_release(v70);
        sub_100015590(v135, &qword_10008EAF8);
        v55 += v122;
        --v49;
      }
      while (v49);
      swift_bridgeObjectRelease(v102);
    }
    else
    {
      swift_bridgeObjectRelease(v47);
      v56 = v130;
      v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 16);
    }
    v135 = *(_QWORD *)(v119 + 104);
    v76 = v114;
    v77 = v131;
    v63((uint64_t)v114, v116, v131);
    v78 = v106;
    v79 = v107;
    (*(void (**)(char *, uint64_t, uint64_t))(v106 + 16))(v115, v132, v107);
    v80 = *(unsigned __int8 *)(v56 + 80);
    v81 = (v80 + 24) & ~v80;
    v82 = (v104 + v81 + 7) & 0xFFFFFFFFFFFFFFF8;
    v83 = *(unsigned __int8 *)(v78 + 80);
    v84 = (v83 + v82 + 8) & ~v83;
    v85 = (v105 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
    v86 = swift_allocObject(&unk_100083190, v85 + 16, v80 | v83 | 7);
    *(_QWORD *)(v86 + 16) = v129;
    (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v86 + v81, v76, v77);
    v87 = v119;
    *(_QWORD *)(v86 + v82) = v119;
    (*(void (**)(uint64_t, char *, uint64_t))(v78 + 32))(v86 + v84, v115, v79);
    v88 = (_QWORD *)(v86 + v85);
    v89 = v118;
    *v88 = v117;
    v88[1] = v89;
    v138[3] = sub_10005E764;
    v139 = v86;
    aBlock = _NSConcreteStackBlock;
    v138[0] = 1107296256;
    v138[1] = sub_100052B78;
    v138[2] = &unk_1000831A8;
    v90 = _Block_copy(&aBlock);
    v91 = v129;
    swift_retain(v129);
    swift_retain(v87);
    swift_retain(v89);
    v92 = v108;
    static DispatchQoS.unspecified.getter(v93);
    v136 = _swiftEmptyArrayStorage;
    v94 = sub_10001B41C((unint64_t *)&qword_10008C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v95 = sub_1000027AC((uint64_t *)&unk_10008BF70);
    v96 = sub_10005C390(qword_10008C800, (uint64_t *)&unk_10008BF70);
    v97 = v111;
    v98 = v113;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v136, v95, v96, v113, v94);
    v99 = v134;
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v92, v97, v135, v90);
    _Block_release(v90);

    (*(void (**)(char *, uint64_t))(v112 + 8))(v97, v98);
    (*(void (**)(char *, uint64_t))(v109 + 8))(v92, v110);
    sub_10001B54C((uint64_t)v103, type metadata accessor for GeneralMapsTimelineProvider.ResolvableContentTimeline);
    v100 = v139;
    swift_release(v91);
    swift_release(v100);
  }
}

void sub_10005B794(uint64_t a1, NSObject *a2, char *a3, char *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  dispatch_group_t v59;
  _BYTE v60[24];

  v53 = a3;
  v54 = a4;
  v59 = a2;
  v5 = sub_1000027AC(&qword_10008BB20);
  __chkstk_darwin(v5);
  v57 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000027AC(&qword_10008EAF8);
  __chkstk_darwin(v7);
  v55 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for GeneralMapsTimelineEntry(0);
  v58 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000027AC(&qword_10008BB18);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v51 - v15;
  v17 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v51 - v22;
  sub_100016550(a1, (uint64_t)v16, &qword_10008BB18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_100015590((uint64_t)v16, &qword_10008BB18);
    if (qword_10008B9F0 != -1)
      swift_once(&qword_10008B9F0, sub_100035150);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100014D70(v24, (uint64_t)qword_100090B98);
    v29 = Logger.logObject.getter(v25, v26, v27, v28);
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "GeneralMapsTimelineProvider: could not resolve content; skipping entry",
        v31,
        2u);
      swift_slowDealloc(v31, -1, -1);
    }

    dispatch_group_leave(v59);
  }
  else
  {
    v51 = (unint64_t *)(v53 + 16);
    sub_10001CDDC((uint64_t)v16, (uint64_t)v23, type metadata accessor for GeneralMapsTimelineEntryContent);
    v32 = *(int *)(v7 + 48);
    v33 = v54;
    v34 = v55;
    v53 = v10;
    v35 = (uint64_t)&v55[v32];
    v36 = (uint64_t)&v54[v32];
    v37 = type metadata accessor for Date(0);
    v52 = *(_QWORD *)(v37 - 8);
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v34, v33, v37);
    v38 = (_QWORD *)v35;
    sub_10005E54C(v36, v35);
    sub_10001B33C((uint64_t)v23, (uint64_t)v14, type metadata accessor for GeneralMapsTimelineEntryContent);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v17);
    v54 = v23;
    v39 = (uint64_t)v23;
    v40 = v51;
    sub_10001B33C(v39, (uint64_t)v21, type metadata accessor for GeneralMapsTimelineEntryContent);
    swift_getEnumCaseMultiPayload(v21, v17);
    v42 = (uint64_t)v57;
    TimelineEntryRelevance.init(score:duration:)(flt_10006BF88[v41], 0.0);
    sub_10001B54C((uint64_t)v21, type metadata accessor for GeneralMapsTimelineEntryContent);
    v43 = type metadata accessor for TimelineEntryRelevance(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v42, 0, 1, v43);
    v44 = (uint64_t)v53;
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v53, v34, v37);
    v45 = v56;
    sub_10001565C((uint64_t)v14, v44 + *(int *)(v56 + 20), &qword_10008BB18);
    sub_10001565C(v42, v44 + *(int *)(v45 + 24), &qword_10008BB20);
    sub_10002CE18(v38);
    swift_beginAccess(v40, v60, 33, 0);
    v46 = *v40;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v40);
    *v40 = v46;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v46 = sub_10005C700(0, *(_QWORD *)(v46 + 16) + 1, 1, v46, &qword_10008EB20, type metadata accessor for GeneralMapsTimelineEntry);
      *v40 = v46;
    }
    v49 = *(_QWORD *)(v46 + 16);
    v48 = *(_QWORD *)(v46 + 24);
    v50 = (uint64_t)v54;
    if (v49 >= v48 >> 1)
    {
      v46 = sub_10005C700(v48 > 1, v49 + 1, 1, v46, &qword_10008EB20, type metadata accessor for GeneralMapsTimelineEntry);
      *v40 = v46;
    }
    *(_QWORD *)(v46 + 16) = v49 + 1;
    sub_10001CDDC(v44, v46+ ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80))+ *(_QWORD *)(v58 + 72) * v49, type metadata accessor for GeneralMapsTimelineEntry);
    swift_endAccess(v60);
    dispatch_group_leave(v59);
    sub_10001B54C(v50, type metadata accessor for GeneralMapsTimelineEntryContent);
  }
}

uint64_t sub_10005BC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  double v33;
  void (*v34)(char *, uint64_t);
  _DWORD *v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53[32];
  double v54;
  _BYTE v55[16];

  v51 = a4;
  v52 = a5;
  v10 = type metadata accessor for TimelineReloadPolicy(0);
  __chkstk_darwin(v10);
  v48 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000027AC(&qword_10008EB18);
  v49 = *(_QWORD *)(v12 - 8);
  v50 = v12;
  __chkstk_darwin(v12);
  v47 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v46 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v44 - v18;
  v20 = (_QWORD *)(a1 + 16);
  swift_beginAccess(a1 + 16, &v54, 33, 0);
  sub_10005C018((unint64_t *)(a1 + 16));
  swift_endAccess(&v54);
  if (qword_10008B9F0 != -1)
    swift_once(&qword_10008B9F0, sub_100035150);
  v21 = type metadata accessor for Logger(0);
  sub_100014D70(v21, (uint64_t)qword_100090B98);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v19, a2, v14);
  swift_retain(a1);
  v26 = Logger.logObject.getter(v22, v23, v24, v25);
  v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (_DWORD *)swift_slowAlloc(22, -1);
    v45 = a6;
    v29 = v28;
    *v28 = 134349312;
    v30 = v28 + 1;
    swift_beginAccess(a1 + 16, v53, 0, 0);
    v54 = *(double *)(*(_QWORD *)(a1 + 16) + 16);
    v44 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v30);
    swift_release(a1);
    *((_WORD *)v29 + 6) = 2050;
    v31 = v46;
    Date.init()(v32);
    v33 = Date.timeIntervalSince(_:)(v19);
    v34 = *(void (**)(char *, uint64_t))(v15 + 8);
    v34(v31, v14);
    v54 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, (char *)v29 + 14);
    v34(v19, v14);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "GeneralMapsTimelineProvider: will call 'timeline' completion with %{public}ld entries (%{public}f seconds elapsed)", (uint8_t *)v29, 0x16u);
    v35 = v29;
    a6 = v45;
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {
    v36 = swift_release(a1);
    (*(void (**)(char *, uint64_t, __n128))(v15 + 8))(v19, v14, v36);
  }

  swift_beginAccess(a1 + 16, &v54, 0, 0);
  v37 = *v20;
  v38 = swift_bridgeObjectRetain(*v20);
  v39 = v48;
  static TimelineReloadPolicy.atEnd.getter(v38);
  v40 = type metadata accessor for GeneralMapsTimelineEntry(0);
  v41 = sub_10001B41C(qword_10008EAB8, type metadata accessor for GeneralMapsTimelineEntry, (uint64_t)&unk_100069FFC);
  v42 = (uint64_t)v47;
  Timeline.init(entries:policy:)(v37, v39, v40, v41);
  sub_100058E60(v51, v52, a6, v42);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8))(v42, v50);
}

Swift::Int sub_10005C018(unint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  Swift::Int result;
  _QWORD v6[2];

  v2 = *(_QWORD *)(type metadata accessor for GeneralMapsTimelineEntry(0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = sub_10005E2AC(v3);
  v4 = *(_QWORD *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_10005CFF0(v6);
  *a1 = v3;
  return result;
}

id sub_10005C09C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider____lazy_storage___briefDateComponentsFormatter;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider____lazy_storage___briefDateComponentsFormatter);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtC17GeneralMapsWidget27GeneralMapsTimelineProvider____lazy_storage___briefDateComponentsFormatter);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)NSDateComponentsFormatter), "init");
    objc_msgSend(v4, "setAllowedUnits:", 112);
    objc_msgSend(v4, "setUnitsStyle:", 2);
    objc_msgSend(v4, "setMaximumUnitCount:", 2);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

uint64_t sub_10005C148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  Date.init()(a1);
  v3 = type metadata accessor for GeneralMapsTimelineEntry(0);
  v4 = a2 + *(int *)(v3 + 20);
  v5 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + *(int *)(v3 + 24);
  v7 = type metadata accessor for TimelineEntryRelevance(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t sub_10005C1D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005A548(a1, a2, a3, (uint64_t)&unk_100083230, (uint64_t)sub_10005E9F4, (uint64_t)&unk_100083248);
}

uint64_t sub_10005C208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005A548(a1, a2, a3, (uint64_t)&unk_100083000, (uint64_t)sub_10005C36C, (uint64_t)&unk_100083018);
}

uint64_t sub_10005C240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to TimelineProvider.relevances()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10005C2AC;
  return TimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_10005C2AC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10005C2F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to TimelineProvider.relevance()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10005F5D0;
  return TimelineProvider.relevance()(a1, a2, a3);
}

uint64_t sub_10005C360()
{
  return sub_10005E95C((uint64_t (*)(_QWORD))&type metadata accessor for TimelineProviderContext);
}

uint64_t sub_10005C36C()
{
  return sub_10005EA00((uint64_t (*)(unint64_t, _QWORD, _QWORD))sub_10005A7E8);
}

double sub_10005C378(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_10005C388(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10005C390(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1000027EC(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005C3D0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10005C700(a1, a2, a3, a4, &qword_10008EB48, type metadata accessor for NearbyButtonActionLink);
}

char *sub_10005C3E4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1000027AC(&qword_10008EB30);
      v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32])
          memmove(v14, a4 + 32, 16 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10005E2E0(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10005C4F0(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_1000027AC(&qword_10008EB10);
  v11 = *(_QWORD *)(sub_1000027AC(&qword_10008EAF8) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_1000027AC(&qword_10008EAF8);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10005E3E8(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

uint64_t sub_10005C700(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_1000027AC(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10005F4B8(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_10005C90C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10005C700(a1, a2, a3, a4, &qword_10008EB40, type metadata accessor for NearbyButtonContent);
}

uint64_t sub_10005C920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v14;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for TimelineProviderContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v14 = v3 | v8 | 7;
  v10 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v3 + v10 + 16) & ~v3;
  swift_release(*(_QWORD *)(v0 + 16));
  v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release(*(_QWORD *)(v0 + v10 + 8));
  v12(v0 + v11, v1);
  return swift_deallocObject(v0, v11 + v5, v14);
}

void sub_10005CA18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10005AD8C(*(_QWORD *)(v0 + 16), v0 + v3, v0 + v6, *(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + v7 + 8), v0 + ((v2 + v7 + 16) & ~v2));
}

uint64_t sub_10005CAA4()
{
  return sub_10005E95C((uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

void sub_10005CAB0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_1000539BC(*(_QWORD *)(v0 + 16), (char *)(v0 + v2), *(void (**)(void))v3, *(_QWORD *)(v3 + 8));
}

uint64_t sub_10005CAF8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10005CB24(uint64_t a1)
{
  uint64_t v1;

  sub_1000546CC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10005CB2C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;

  v2 = *(void **)a1;
  v4 = *(void **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(void **)(a1 + 56);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 72));
  v8 = v2;
  v9 = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v10 = v7;
  return a1;
}

uint64_t sub_10005CBA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000027AC(&qword_10008EAE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10005CBE8(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_10005CC24(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t sub_10005CC3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10005CE1C(a1, v4, &qword_10008BF58, MapsSuggestionsEntry_ptr);
}

unint64_t sub_10005CC88(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = v1;
  v4 = a1 & 1;
  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  Hasher._combine(_:)(a1 & 1);
  v5 = Hasher._finalize()();
  return sub_10005CD60(v4, v5);
}

unint64_t sub_10005CCE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10005CE1C(a1, v4, &qword_10008CCF8, MKMapSnapshotter_ptr);
}

unint64_t sub_10005CD30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10005CF2C(a1, v4);
}

unint64_t sub_10005CD60(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (((((a1 & 1) == 0) ^ *(unsigned __int8 *)(v7 + result)) & 1) == 0)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (((((a1 & 1) == 0) ^ *(_BYTE *)(v7 + result)) & 1) != 0)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_10005CE1C(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  id v8;
  char v9;
  uint64_t v10;
  id v11;
  char v12;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  i = a2 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_100014FA8(0, a3, a4);
    v8 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * i);
    v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) == 0)
    {
      v10 = ~v6;
      for (i = (i + 1) & v10; ((*(_QWORD *)(v5 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v10)
      {
        v11 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * i);
        v12 = static NSObject.== infix(_:_:)();

        if ((v12 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_10005CF2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_100014D88(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100014DC4((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

Swift::Int sub_10005CFF0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  Swift::Int v19;
  unint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  Swift::Int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t v45;
  Swift::Int v46;
  Swift::Int v47;
  uint64_t v48;
  uint64_t v49;
  Swift::Int v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  Swift::Int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  char *v117;
  _QWORD *v118;
  char *v119;
  _QWORD *v120;
  Swift::Int v121;
  uint64_t v122;
  Swift::Int v123;
  uint64_t v124;
  Swift::Int v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  Swift::Int v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;

  v2 = v1;
  v4 = type metadata accessor for GeneralMapsTimelineEntry(0);
  v127 = *(_QWORD *)(v4 - 8);
  v128 = v4;
  v5 = __chkstk_darwin(v4);
  v124 = (uint64_t)&v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v134 = (uint64_t)&v119 - v8;
  v9 = __chkstk_darwin(v7);
  v131 = (uint64_t)&v119 - v10;
  __chkstk_darwin(v9);
  v130 = (uint64_t)&v119 - v11;
  v12 = a1[1];
  result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0)
      goto LABEL_143;
    if (v12)
      return sub_10005D9C0(0, v12, 1, a1);
    return result;
  }
  if (v12 >= 0)
    v14 = v12;
  else
    v14 = v12 + 1;
  if (v12 < -1)
    goto LABEL_151;
  v121 = result;
  if (v12 < 2)
  {
    v18 = (char *)&_swiftEmptyArrayStorage;
    v126 = (unint64_t)&_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80));
    v120 = &_swiftEmptyArrayStorage;
    if (v12 != 1)
    {
      v20 = *((_QWORD *)&_swiftEmptyArrayStorage + 2);
LABEL_106:
      if (v20 >= 2)
      {
        v111 = *a1;
        do
        {
          v112 = v20 - 2;
          if (v20 < 2)
            goto LABEL_138;
          if (!v111)
            goto LABEL_150;
          v105 = v18;
          v113 = *(_QWORD *)&v18[16 * v112 + 32];
          v114 = *(_QWORD *)&v18[16 * v20 + 24];
          sub_10005DBF4(v111 + *(_QWORD *)(v127 + 72) * v113, v111 + *(_QWORD *)(v127 + 72) * *(_QWORD *)&v18[16 * v20 + 16], v111 + *(_QWORD *)(v127 + 72) * v114, v126);
          if (v2)
            goto LABEL_118;
          if (v114 < v113)
            goto LABEL_139;
          if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
            v105 = sub_10005E298((uint64_t)v18);
          if (v112 >= *((_QWORD *)v105 + 2))
            goto LABEL_140;
          v115 = &v105[16 * v112 + 32];
          *(_QWORD *)v115 = v113;
          *((_QWORD *)v115 + 1) = v114;
          v116 = *((_QWORD *)v105 + 2);
          if (v20 > v116)
            goto LABEL_141;
          memmove(&v105[16 * v20 + 16], &v105[16 * v20 + 32], 16 * (v116 - v20));
          *((_QWORD *)v105 + 2) = v116 - 1;
          v20 = v116 - 1;
          v18 = v105;
        }
        while (v116 > 2);
      }
      v117 = v18;
LABEL_120:
      swift_bridgeObjectRelease(v117);
      v118 = v120;
      v120[2] = 0;
      return swift_bridgeObjectRelease(v118);
    }
  }
  else
  {
    v15 = v14 >> 1;
    v16 = static Array._allocateBufferUninitialized(minimumCapacity:)(v14 >> 1, v128);
    *(_QWORD *)(v16 + 16) = v15;
    v17 = *(unsigned __int8 *)(v127 + 80);
    v120 = (_QWORD *)v16;
    v126 = v16 + ((v17 + 32) & ~v17);
  }
  v19 = 0;
  v18 = (char *)&_swiftEmptyArrayStorage;
  v133 = a1;
  while (1)
  {
    v21 = v19 + 1;
    v125 = v19;
    if (v19 + 1 >= v12)
    {
      v37 = v19 + 1;
      goto LABEL_58;
    }
    v122 = v2;
    v22 = *a1;
    v23 = *(_QWORD *)(v127 + 72);
    v24 = v130;
    sub_10001B33C(*a1 + v23 * v21, v130, type metadata accessor for GeneralMapsTimelineEntry);
    v129 = v22;
    v132 = v12;
    v25 = v131;
    sub_10001B33C(v22 + v23 * v19, v131, type metadata accessor for GeneralMapsTimelineEntry);
    v26 = static Date.< infix(_:_:)(v24, v25);
    v27 = v25;
    v28 = v132;
    sub_10001B54C(v27, type metadata accessor for GeneralMapsTimelineEntry);
    sub_10001B54C(v24, type metadata accessor for GeneralMapsTimelineEntry);
    v135 = v23;
    if (v19 + 2 >= v28)
    {
      v32 = v19 + 2;
      if ((v26 & 1) == 0)
        goto LABEL_37;
    }
    else
    {
      v29 = v23;
      v30 = v23 * v21;
      v31 = v129;
      v32 = v19 + 2;
      v33 = v29 * (v19 + 2);
      do
      {
        v34 = v130;
        sub_10001B33C(v31 + v33, v130, type metadata accessor for GeneralMapsTimelineEntry);
        v35 = v131;
        sub_10001B33C(v31 + v30, v131, type metadata accessor for GeneralMapsTimelineEntry);
        v36 = static Date.< infix(_:_:)(v34, v35);
        sub_10001B54C(v35, type metadata accessor for GeneralMapsTimelineEntry);
        sub_10001B54C(v34, type metadata accessor for GeneralMapsTimelineEntry);
        if (((v26 ^ v36) & 1) != 0)
        {
          v28 = v132;
          a1 = v133;
          v19 = v125;
          if ((v26 & 1) == 0)
            goto LABEL_37;
          goto LABEL_24;
        }
        v31 += v135;
        ++v32;
      }
      while (v132 != v32);
      v28 = v132;
      a1 = v133;
      v32 = v132;
      v19 = v125;
      if ((v26 & 1) == 0)
      {
LABEL_37:
        v37 = v32;
        break;
      }
    }
LABEL_24:
    v38 = v135;
    if (v32 < v19)
      goto LABEL_144;
    v37 = v32;
    if (v19 >= v32)
      break;
    v119 = v18;
    v39 = 0;
    v40 = v135 * (v32 - 1);
    v41 = v32 * v135;
    v42 = v19 * v135;
    v43 = v129;
    do
    {
      if (v19 != v37 + v39 - 1)
      {
        if (!v43)
          goto LABEL_149;
        sub_10001CDDC(v43 + v42, v124, type metadata accessor for GeneralMapsTimelineEntry);
        if (v42 < v40 || v43 + v42 >= (unint64_t)(v43 + v41))
        {
          swift_arrayInitWithTakeFrontToBack(v43 + v42, v43 + v40, 1, v128);
        }
        else if (v42 != v40)
        {
          swift_arrayInitWithTakeBackToFront(v43 + v42);
        }
        sub_10001CDDC(v124, v43 + v40, type metadata accessor for GeneralMapsTimelineEntry);
        a1 = v133;
        v37 = v32;
        v38 = v135;
      }
      ++v19;
      --v39;
      v40 -= v38;
      v41 -= v38;
      v42 += v38;
    }
    while (v19 < v37 + v39);
    v18 = v119;
    v2 = v122;
    v19 = v125;
    v28 = v132;
    if (v37 < v132)
      goto LABEL_41;
LABEL_58:
    if (v37 < v19)
      goto LABEL_137;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    v132 = v37;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v18 = sub_10005E094(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
    v60 = *((_QWORD *)v18 + 2);
    v59 = *((_QWORD *)v18 + 3);
    v20 = v60 + 1;
    if (v60 >= v59 >> 1)
      v18 = sub_10005E094((char *)(v59 > 1), v60 + 1, 1, v18);
    *((_QWORD *)v18 + 2) = v20;
    v61 = v18 + 32;
    v62 = &v18[16 * v60 + 32];
    v63 = v132;
    *(_QWORD *)v62 = v19;
    *((_QWORD *)v62 + 1) = v63;
    if (v60)
    {
      while (1)
      {
        v64 = v20 - 1;
        if (v20 >= 4)
        {
          v69 = &v61[16 * v20];
          v70 = *((_QWORD *)v69 - 8);
          v71 = *((_QWORD *)v69 - 7);
          v75 = __OFSUB__(v71, v70);
          v72 = v71 - v70;
          if (v75)
            goto LABEL_126;
          v74 = *((_QWORD *)v69 - 6);
          v73 = *((_QWORD *)v69 - 5);
          v75 = __OFSUB__(v73, v74);
          v67 = v73 - v74;
          v68 = v75;
          if (v75)
            goto LABEL_127;
          v76 = v20 - 2;
          v77 = &v61[16 * v20 - 32];
          v79 = *(_QWORD *)v77;
          v78 = *((_QWORD *)v77 + 1);
          v75 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v75)
            goto LABEL_129;
          v75 = __OFADD__(v67, v80);
          v81 = v67 + v80;
          if (v75)
            goto LABEL_132;
          if (v81 >= v72)
          {
            v99 = &v61[16 * v64];
            v101 = *(_QWORD *)v99;
            v100 = *((_QWORD *)v99 + 1);
            v75 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v75)
              goto LABEL_136;
            v92 = v67 < v102;
            goto LABEL_95;
          }
        }
        else
        {
          if (v20 != 3)
          {
            v93 = *((_QWORD *)v18 + 4);
            v94 = *((_QWORD *)v18 + 5);
            v75 = __OFSUB__(v94, v93);
            v86 = v94 - v93;
            v87 = v75;
            goto LABEL_89;
          }
          v66 = *((_QWORD *)v18 + 4);
          v65 = *((_QWORD *)v18 + 5);
          v75 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          v68 = v75;
        }
        if ((v68 & 1) != 0)
          goto LABEL_128;
        v76 = v20 - 2;
        v82 = &v61[16 * v20 - 32];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v85 = __OFSUB__(v83, v84);
        v86 = v83 - v84;
        v87 = v85;
        if (v85)
          goto LABEL_131;
        v88 = &v61[16 * v64];
        v90 = *(_QWORD *)v88;
        v89 = *((_QWORD *)v88 + 1);
        v75 = __OFSUB__(v89, v90);
        v91 = v89 - v90;
        if (v75)
          goto LABEL_134;
        if (__OFADD__(v86, v91))
          goto LABEL_135;
        if (v86 + v91 >= v67)
        {
          v92 = v67 < v91;
LABEL_95:
          if (v92)
            v64 = v76;
          goto LABEL_97;
        }
LABEL_89:
        if ((v87 & 1) != 0)
          goto LABEL_130;
        v95 = &v61[16 * v64];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v75 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v75)
          goto LABEL_133;
        if (v98 < v86)
          goto LABEL_14;
LABEL_97:
        v103 = v64 - 1;
        if (v64 - 1 >= v20)
        {
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
          goto LABEL_146;
        }
        v104 = *a1;
        if (!*a1)
          goto LABEL_148;
        v105 = v18;
        v106 = &v61[16 * v103];
        v107 = *(_QWORD *)v106;
        v108 = &v61[16 * v64];
        v109 = *((_QWORD *)v108 + 1);
        sub_10005DBF4(v104 + *(_QWORD *)(v127 + 72) * *(_QWORD *)v106, v104 + *(_QWORD *)(v127 + 72) * *(_QWORD *)v108, v104 + *(_QWORD *)(v127 + 72) * v109, v126);
        if (v2)
        {
LABEL_118:
          v117 = v105;
          goto LABEL_120;
        }
        if (v109 < v107)
          goto LABEL_123;
        if (v64 > *((_QWORD *)v105 + 2))
          goto LABEL_124;
        *(_QWORD *)v106 = v107;
        *(_QWORD *)&v61[16 * v103 + 8] = v109;
        v110 = *((_QWORD *)v105 + 2);
        if (v64 >= v110)
          goto LABEL_125;
        v18 = v105;
        v20 = v110 - 1;
        memmove(&v61[16 * v64], v108 + 16, 16 * (v110 - 1 - v64));
        *((_QWORD *)v105 + 2) = v110 - 1;
        a1 = v133;
        if (v110 <= 2)
          goto LABEL_14;
      }
    }
    v20 = 1;
LABEL_14:
    v12 = a1[1];
    v19 = v132;
    if (v132 >= v12)
      goto LABEL_106;
  }
  v2 = v122;
  if (v37 >= v28)
    goto LABEL_58;
LABEL_41:
  if (__OFSUB__(v37, v19))
    goto LABEL_142;
  if (v37 - v19 >= v121)
    goto LABEL_58;
  if (__OFADD__(v19, v121))
    goto LABEL_145;
  if (v19 + v121 >= v28)
    v44 = v28;
  else
    v44 = v19 + v121;
  if (v44 >= v19)
  {
    if (v37 != v44)
    {
      v119 = v18;
      v122 = v2;
      v123 = v44;
      v45 = *(_QWORD *)(v127 + 72);
      v135 = v45 * (v37 - 1);
      v129 = v45;
      v46 = v37 * v45;
      do
      {
        v48 = 0;
        v132 = v37;
        while (1)
        {
          v49 = *a1;
          v50 = v46;
          v51 = v46 + v48 + *a1;
          v52 = a1;
          v53 = v130;
          sub_10001B33C(v51, v130, type metadata accessor for GeneralMapsTimelineEntry);
          v54 = v131;
          sub_10001B33C(v135 + v48 + v49, v131, type metadata accessor for GeneralMapsTimelineEntry);
          LOBYTE(v49) = static Date.< infix(_:_:)(v53, v54);
          sub_10001B54C(v54, type metadata accessor for GeneralMapsTimelineEntry);
          sub_10001B54C(v53, type metadata accessor for GeneralMapsTimelineEntry);
          if ((v49 & 1) == 0)
            break;
          v55 = *v52;
          if (!*v52)
            goto LABEL_147;
          v46 = v50;
          v56 = v55 + v50 + v48;
          v57 = v55 + v135 + v48;
          sub_10001CDDC(v56, v134, type metadata accessor for GeneralMapsTimelineEntry);
          swift_arrayInitWithTakeFrontToBack(v56, v57, 1, v128);
          sub_10001CDDC(v134, v57, type metadata accessor for GeneralMapsTimelineEntry);
          v48 -= v129;
          ++v19;
          v47 = v132;
          a1 = v133;
          if (v132 == v19)
            goto LABEL_51;
        }
        v47 = v132;
        a1 = v52;
        v46 = v50;
LABEL_51:
        v37 = v47 + 1;
        v135 += v129;
        v46 += v129;
        v19 = v125;
      }
      while (v37 != v123);
      v37 = v123;
      v2 = v122;
      v18 = v119;
    }
    goto LABEL_58;
  }
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_10005D9C0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v26 = a1;
  v27 = type metadata accessor for GeneralMapsTimelineEntry(0);
  v7 = __chkstk_darwin(v27);
  v31 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v28 = (uint64_t)&v24 - v10;
  result = __chkstk_darwin(v9);
  v14 = (char *)&v24 - v13;
  v30 = a3;
  v25 = a2;
  if (a3 != a2)
  {
    v15 = *(_QWORD *)(v12 + 72);
    v33 = v15 * (v30 - 1);
    v29 = v15;
    v32 = v15 * v30;
LABEL_5:
    v16 = 0;
    v17 = v26;
    while (1)
    {
      v18 = *a4;
      sub_10001B33C(v32 + v16 + *a4, (uint64_t)v14, type metadata accessor for GeneralMapsTimelineEntry);
      v19 = v28;
      sub_10001B33C(v33 + v16 + v18, v28, type metadata accessor for GeneralMapsTimelineEntry);
      LOBYTE(v18) = static Date.< infix(_:_:)(v14, v19);
      sub_10001B54C(v19, type metadata accessor for GeneralMapsTimelineEntry);
      result = sub_10001B54C((uint64_t)v14, type metadata accessor for GeneralMapsTimelineEntry);
      if ((v18 & 1) == 0)
      {
LABEL_4:
        v33 += v29;
        v32 += v29;
        if (++v30 == v25)
          return result;
        goto LABEL_5;
      }
      v20 = *a4;
      if (!*a4)
        break;
      v21 = a4;
      v22 = v20 + v32 + v16;
      v23 = v20 + v33 + v16;
      sub_10001CDDC(v22, v31, type metadata accessor for GeneralMapsTimelineEntry);
      swift_arrayInitWithTakeFrontToBack(v22, v23, 1, v27);
      result = sub_10001CDDC(v31, v23, type metadata accessor for GeneralMapsTimelineEntry);
      v16 -= v29;
      ++v17;
      a4 = v21;
      if (v30 == v17)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10005DBF4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t result;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;

  v44 = type metadata accessor for GeneralMapsTimelineEntry(0);
  v8 = __chkstk_darwin(v44);
  v45 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v41 - v10;
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_62;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_63;
  v15 = (uint64_t)(a2 - a1) / v13;
  v48 = a1;
  v47 = a4;
  v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v16, v44);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4);
      }
      v25 = a4 + v18;
      v46 = a4 + v18;
      v48 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v27 = -v13;
        v42 = a4;
        v43 = a1;
        do
        {
          v28 = a3 + v27;
          sub_10001B33C(v25 + v27, (uint64_t)v11, type metadata accessor for GeneralMapsTimelineEntry);
          v29 = a2 + v27;
          v30 = a3;
          v31 = (uint64_t)v11;
          v32 = v45;
          sub_10001B33C(a2 + v27, v45, type metadata accessor for GeneralMapsTimelineEntry);
          v33 = static Date.< infix(_:_:)(v31, v32);
          v34 = v32;
          v11 = (char *)v31;
          sub_10001B54C(v34, type metadata accessor for GeneralMapsTimelineEntry);
          sub_10001B54C(v31, type metadata accessor for GeneralMapsTimelineEntry);
          if ((v33 & 1) != 0)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v28, a2 + v27, 1, v44);
              v37 = v42;
              v36 = v43;
            }
            else
            {
              v35 = v30 == a2;
              v37 = v42;
              v36 = v43;
              if (!v35)
                swift_arrayInitWithTakeBackToFront(v28);
            }
            v48 += v27;
          }
          else
          {
            v38 = v46;
            v39 = v46 + v27;
            v46 += v27;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack(v28, v39, 1, v44);
              v29 = a2;
              v37 = v42;
              v36 = v43;
            }
            else
            {
              v35 = v30 == v38;
              v37 = v42;
              v36 = v43;
              if (!v35)
                swift_arrayInitWithTakeBackToFront(v28);
              v29 = a2;
            }
          }
          v25 = v46;
          if (v46 <= v37)
            break;
          a2 = v29;
          a3 = v28;
        }
        while (v29 > v36);
      }
      goto LABEL_60;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v15, v44);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }
    v43 = a4 + v17;
    v46 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      v20 = v45;
      do
      {
        sub_10001B33C(a2, (uint64_t)v11, type metadata accessor for GeneralMapsTimelineEntry);
        sub_10001B33C(a4, v20, type metadata accessor for GeneralMapsTimelineEntry);
        v21 = static Date.< infix(_:_:)(v11, v20);
        sub_10001B54C(v20, type metadata accessor for GeneralMapsTimelineEntry);
        sub_10001B54C((uint64_t)v11, type metadata accessor for GeneralMapsTimelineEntry);
        v22 = v48;
        if ((v21 & 1) != 0)
        {
          v23 = a2 + v13;
          if (v48 < a2 || v48 >= v23)
          {
            swift_arrayInitWithTakeFrontToBack(v48, a2, 1, v44);
          }
          else if (v48 == a2)
          {
            v22 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v48);
          }
        }
        else
        {
          v24 = v47 + v13;
          if (v48 < v47 || v48 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack(v48, v47, 1, v44);
          }
          else if (v48 != v47)
          {
            swift_arrayInitWithTakeBackToFront(v48);
          }
          v47 = v24;
          v23 = a2;
        }
        v48 = v22 + v13;
        a4 = v47;
        if (v47 >= v43)
          break;
        a2 = v23;
      }
      while (v23 < a3);
    }
LABEL_60:
    sub_10005E18C(&v48, &v47, (uint64_t *)&v46);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_10005E094(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000027AC(&qword_10008EB28);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_10005E18C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = type metadata accessor for GeneralMapsTimelineEntry(0);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  v10 = v8 / v7;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v10 * v7)
    return swift_arrayInitWithTakeFrontToBack(v3, v4, v10, result);
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront(v3);
  return result;
}

char *sub_10005E298(uint64_t a1)
{
  return sub_10005E094(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10005E2AC(unint64_t a1)
{
  return sub_10005C700(0, *(_QWORD *)(a1 + 16), 0, a1, &qword_10008EB20, type metadata accessor for GeneralMapsTimelineEntry);
}

uint64_t sub_10005E2E0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_1000027AC(&qword_10008EB38);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10005E3E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(sub_1000027AC(&qword_10008EAF8) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10005E504()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

_QWORD *sub_10005E528(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10005E54C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10005E590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_1000027AC(&qword_10008EAF8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  swift_release(*(_QWORD *)(v0 + 24));
  v7 = v0 + v4;
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  sub_10002CE18((_QWORD *)(v7 + *(int *)(v1 + 48)));
  return swift_deallocObject(v0, v5, v6);
}

void sub_10005E62C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000027AC(&qword_10008EAF8) - 8) + 80);
  sub_10005B794(a1, *(NSObject **)(v1 + 16), *(char **)(v1 + 24), (char *)(v1 + ((v3 + 32) & ~v3)));
}

uint64_t sub_10005E670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for TimelineProviderContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 8) & ~v8;
  v12 = v3 | v8 | 7;
  v10 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v5));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release(*(_QWORD *)(v0 + v10 + 8));
  return swift_deallocObject(v0, v10 + 16, v12);
}

uint64_t sub_10005E764()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;

  v1 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (uint64_t *)(v0 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_10005BC8C(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v3), v0 + v5, *v6, v6[1]);
}

uint64_t sub_10005E7F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  __n128 v13;

  v1 = sub_1000027AC(&qword_10008EB18);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for TimelineProviderContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  v12 = swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v12);
  v13 = swift_release(*(_QWORD *)(v0 + v5));
  (*(void (**)(uint64_t, uint64_t, __n128))(v7 + 8))(v0 + v9, v6, v13);
  return swift_deallocObject(v0, v10, v11);
}

void sub_10005E8C4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(sub_1000027AC(&qword_10008EB18) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(unint64_t))(v0 + 16))(v0 + v2);
  sub_1000588E8();
}

uint64_t sub_10005E950()
{
  return sub_10005E95C((uint64_t (*)(_QWORD))&type metadata accessor for TimelineProviderContext);
}

uint64_t sub_10005E95C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a1(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 24) & ~v4;
  v6 = v4 | 7;
  v7 = (*(_QWORD *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v1 + 16));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  swift_release(*(_QWORD *)(v1 + v7 + 8));
  return swift_deallocObject(v1, v7 + 16, v6);
}

uint64_t sub_10005E9F4()
{
  return sub_10005EA00((uint64_t (*)(unint64_t, _QWORD, _QWORD))sub_100059194);
}

uint64_t sub_10005EA00(uint64_t (*a1)(unint64_t, _QWORD, _QWORD))
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a1(v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v5 + 8));
}

uint64_t sub_10005EA5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v14 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v14 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = type metadata accessor for TimelineProviderContext(0);
  v6 = *(_QWORD *)(v13 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v5 + v7 + 8) & ~v7;
  v15 = v2 | v7 | 7;
  v9 = (*(_QWORD *)(v6 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v2 + 16 + v9) & ~v2;
  v11 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v11(v0 + v3, v14);
  swift_release(*(_QWORD *)(v0 + v5));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v13);
  swift_release(*(_QWORD *)(v0 + v9 + 8));
  v11(v0 + v10, v14);
  return swift_deallocObject(v0, v10 + v4, v15);
}

uint64_t sub_10005EB60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v6 = (v4 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10005972C(v0 + v3, *(_QWORD *)(v0 + v4), v0 + v6, *(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + v7 + 8), v0 + ((v2 + 16 + v7) & ~v2));
}

uint64_t sub_10005EBFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, __n128);
  __n128 v18;
  void (*v19)(unint64_t, uint64_t);
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  id *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v50 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v50 + 16) & ~v50;
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = type metadata accessor for TimelineProviderContext(0);
  v6 = *(_QWORD *)(v5 - 8);
  v49 = *(unsigned __int8 *)(v6 + 80);
  v7 = (v4 + v49 + 8) & ~v49;
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = type metadata accessor for GeneralMapsTimelineEntry(0);
  v10 = *(_QWORD *)(v9 - 8);
  v43 = (*(unsigned __int8 *)(v10 + 80) + v8 + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v46 = *(_QWORD *)(v10 + 64);
  v47 = *(unsigned __int8 *)(v10 + 80);
  v48 = sub_1000027AC(&qword_10008EAF8);
  v11 = *(_QWORD *)(v48 - 8);
  v44 = *(_QWORD *)(v11 + 64);
  v45 = *(unsigned __int8 *)(v11 + 80);
  v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v0 + v3, v1);
  v13 = swift_release(*(_QWORD *)(v0 + v4));
  v14 = v0 + v7;
  v15 = v9;
  v16 = v5;
  v17 = *(void (**)(uint64_t, uint64_t, __n128))(v6 + 8);
  v17(v14, v16, v13);
  v18 = swift_release(*(_QWORD *)(v0 + v8 + 8));
  v19 = (void (*)(unint64_t, uint64_t))v12;
  ((void (*)(unint64_t, uint64_t, __n128))v12)(v0 + v43, v1, v18);
  v20 = v0 + v43 + *(int *)(v15 + 20);
  v21 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
    goto LABEL_2;
  swift_getEnumCaseMultiPayload(v20, v21);
  if (v29 == 2)
  {
    if (*(_QWORD *)v20 != 1)
    {

    }
    swift_bridgeObjectRelease(*(_QWORD *)(v20 + 24));
    swift_bridgeObjectRelease(*(_QWORD *)(v20 + 48));
    v30 = v20 + *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
    v33 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v30, 1, v33))
    {
      ((void (*)(unint64_t, uint64_t))v17)(v30, v16);
      v32 = *(int *)(v33 + 20);
LABEL_14:
      v34 = v30 + v32;
      v35 = *(void **)(v30 + v32);
      if (v35 != (void *)1)
      {

      }
    }
  }
  else
  {
    if (v29 != 1)
    {
      if (v29)
        goto LABEL_2;
      v30 = v20 + *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
      v31 = type metadata accessor for NearbyEntryContent.ResolvedContent(0);
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v30, 1, v31))
      {
        goto LABEL_2;
      }
      ((void (*)(unint64_t, uint64_t))v17)(v30, v16);
      swift_bridgeObjectRelease(*(_QWORD *)(v30 + *(int *)(v31 + 20)));
      v32 = *(int *)(v31 + 24);
      goto LABEL_14;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(v20 + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v20 + 24));
    v36 = *(void **)(v20 + 56);
    if (v36 != (void *)1)
    {

    }
    v37 = v20 + *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
    v38 = type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48))(v37, 1, v38))
    {
      ((void (*)(unint64_t, uint64_t))v17)(v37, v16);
      v39 = (id *)(v37 + *(int *)(v38 + 20));
      if (*v39 != (id)1)
      {

      }
      v40 = v37 + *(int *)(v38 + 28);
      v41 = type metadata accessor for URL(0);
      v42 = *(_QWORD *)(v41 - 8);
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
        (*(void (**)(unint64_t, uint64_t))(v42 + 8))(v40, v41);
    }
  }
LABEL_2:
  v22 = v0 + v43 + *(int *)(v15 + 24);
  v23 = type metadata accessor for TimelineEntryRelevance(0);
  v24 = *(_QWORD *)(v23 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    (*(void (**)(unint64_t, uint64_t))(v24 + 8))(v22, v23);
  v25 = (v43 + v46 + v45) & ~v45;
  v26 = v25 + v44;
  v27 = v0 + v25;
  v19(v0 + v25, v1);
  sub_10002CE18((_QWORD *)(v27 + *(int *)(v48 + 48)));
  return swift_deallocObject(v0, v26, v50 | v49 | v47 | v45 | 7);
}

uint64_t sub_10005EFF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(type metadata accessor for GeneralMapsTimelineEntry(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + v8 + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000027AC(&qword_10008EAF8) - 8) + 80);
  return sub_100059EAC(a1, (void (*)(_QWORD))(v1 + v4), *(_QWORD *)(v1 + v5), v1 + v7, *(_QWORD *)(v1 + v8), *(_QWORD *)(v1 + v8 + 8), v1 + v10, v1 + ((v10 + v11 + v12) & ~v12));
}

uint64_t sub_10005F0D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = type metadata accessor for GeneralMapsTimelineEntry(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v33 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for TimelineProviderContext(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v32 = *(_QWORD *)(v6 + 64);
  swift_release(*(_QWORD *)(v0 + 24));
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  v9 = v0 + v4 + *(int *)(v1 + 20);
  v10 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
    goto LABEL_2;
  swift_getEnumCaseMultiPayload(v9, v10);
  if (v18 == 2)
  {
    if (*(_QWORD *)v9 != 1)
    {

    }
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + 24));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + 48));
    v19 = v9 + *(int *)(type metadata accessor for NavigationETAEntryContent(0) + 36);
    v22 = type metadata accessor for NavigationETAEntryContent.ResolvedContent(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v19, 1, v22))
    {
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v19, v5);
      v21 = *(int *)(v22 + 20);
LABEL_14:
      v23 = (id *)(v19 + v21);
      if (*v23 != (id)1)
      {

      }
    }
  }
  else
  {
    if (v18 != 1)
    {
      if (v18)
        goto LABEL_2;
      v19 = v9 + *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
      v20 = type metadata accessor for NearbyEntryContent.ResolvedContent(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20))
        goto LABEL_2;
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v19, v5);
      swift_bridgeObjectRelease(*(_QWORD *)(v19 + *(int *)(v20 + 20)));
      v21 = *(int *)(v20 + 24);
      goto LABEL_14;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + 24));
    v24 = *(void **)(v9 + 56);
    if (v24 != (void *)1)
    {

    }
    v25 = v9 + *(int *)(type metadata accessor for SuggestedDestinationEntryContent(0) + 40);
    v26 = type metadata accessor for SuggestedDestinationEntryContent.ResolvedContent(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v25, 1, v26))
    {
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v25, v5);
      v27 = *(void **)(v25 + *(int *)(v26 + 20));
      if (v27 != (void *)1)
      {
        v31 = v25 + *(int *)(v26 + 20);

      }
      v28 = v25 + *(int *)(v26 + 28);
      v29 = type metadata accessor for URL(0);
      v30 = *(_QWORD *)(v29 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
    }
  }
LABEL_2:
  v11 = v0 + v4 + *(int *)(v1 + 24);
  v12 = type metadata accessor for TimelineEntryRelevance(0);
  v13 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  v14 = (v33 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v14 + v7 + 8) & ~v7;
  v16 = swift_release(*(_QWORD *)(v0 + v14));
  (*(void (**)(uint64_t, uint64_t, __n128))(v6 + 8))(v0 + v15, v5, v16);
  return swift_deallocObject(v0, v15 + v32, v3 | v7 | 7);
}

void sub_10005F430()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for GeneralMapsTimelineEntry(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(unint64_t))(v0 + 16))(v0 + v2);
  sub_1000588E8();
}

uint64_t sub_10005F4B8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_10005F60C(void *a1)
{
  uint64_t v1;
  void *v2;
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  CLLocationDistance v12;
  double v13;
  CLLocationDistance v14;
  double v15;
  double v16;
  id v17;
  double v18;
  double v19;
  CLLocationCoordinate2D v20;
  MKCoordinateRegion v21;

  v2 = *(void **)(v1 + 96);
  if (v2)
  {
    if (*(_BYTE *)(v1 + 88) == 1)
    {
      v4 = v2;
      objc_msgSend(v4, "coordinate");
      v6 = v5;
      v8 = v7;
      objc_msgSend(a1, "pointForCoordinate:");
      v10 = v9;
      objc_msgSend(v4, "horizontalAccuracy");
      v12 = v11;
      objc_msgSend(v4, "horizontalAccuracy");
      v14 = v13;
      v20.latitude = v6;
      v20.longitude = v8;
      v21 = MKCoordinateRegionMakeWithDistance(v20, v12, v14);
      objc_msgSend(a1, "pointForCoordinate:", v6, v8 + v21.span.longitudeDelta, v21.span.latitudeDelta);
      v16 = vabdd_f64(v15, v10);
      v17 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
      objc_msgSend(v17, "scale");
      v19 = v18;

      *(double *)(v1 + 80) = 1.0 / v19 * round(v16 / (1.0 / v19));
      *(_BYTE *)(v1 + 88) = 0;
    }
  }
}

void sub_10005F730()
{
  uint64_t v0;

}

uint64_t sub_10005F738()
{
  uint64_t v0;

  v0 = sub_100029404();

  return swift_deallocClassInstance(v0, 104, 7);
}

uint64_t type metadata accessor for NearbySnapshotter()
{
  return objc_opt_self(_TtC17GeneralMapsWidget17NearbySnapshotter);
}

uint64_t sub_10005F78C(double a1, double a2, double a3, double a4, uint64_t a5, char a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t result;
  uint64_t v23;

  v11 = type metadata accessor for WidgetFamily(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  TimelineProviderContext.family.getter(v13);
  v16 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v15, v11);
  if ((_DWORD)v16 == enum case for WidgetFamily.systemSmall(_:))
  {
LABEL_2:
    v17 = TimelineProviderContext.displaySize.getter(v16);
    return _MKMapRectThatFits(a1, a2, a3, a4, v17, v18);
  }
  if ((_DWORD)v16 == enum case for WidgetFamily.systemMedium(_:))
  {
    if ((a6 & 1) == 0)
    {
      if (qword_10008B970 != -1)
        v16 = swift_once(&qword_10008B970, sub_1000182D4);
      if (qword_10008B978 != -1)
        v16 = swift_once(&qword_10008B978, sub_1000182E4);
      if (qword_10008B980 != -1)
        v16 = swift_once(&qword_10008B980, sub_1000182F4);
    }
    goto LABEL_2;
  }
  if ((_DWORD)v16 == enum case for WidgetFamily.systemLarge(_:))
  {
    if ((a6 & 1) == 0)
    {
      if (qword_10008B970 != -1)
        v16 = swift_once(&qword_10008B970, sub_1000182D4);
      if (qword_10008B978 != -1)
        v16 = swift_once(&qword_10008B978, sub_1000182E4);
    }
    goto LABEL_2;
  }
  if ((_DWORD)v16 == enum case for WidgetFamily.systemExtraLarge(_:)
    || (_DWORD)v16 == enum case for WidgetFamily.accessoryCircular(_:)
    || (_DWORD)v16 == enum case for WidgetFamily.accessoryRectangular(_:)
    || (_DWORD)v16 == enum case for WidgetFamily.accessoryInline(_:))
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, 0x8000000100079690, "GeneralMapsWidget/NearbySnapshotter.swift", 41, 2, 59, 0);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "GeneralMapsWidget/NearbySnapshotter.swift", 41, 2, 61, 0);
  }
  __break(1u);
  return result;
}

id sub_10005FAA0(uint64_t a1, void *a2, uint64_t a3, char a4, double a5, double a6, double a7, double a8)
{
  uint64_t v8;
  uint64_t v9;
  id v17;
  id v18;
  id v19;
  void *v20;
  id result;
  void *v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;

  v9 = v8;
  *(_QWORD *)(v9 + 80) = 0;
  *(_BYTE *)(v9 + 88) = 1;
  *(_QWORD *)(v9 + 96) = a2;
  *(_OWORD *)(v9 + 16) = xmmword_10006ACC0;
  *(_QWORD *)(v9 + 32) = 0;
  v17 = a2;
  *(_QWORD *)(v9 + 40) = dispatch_group_create();
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 56) = sub_100006F2C((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 72) = _swiftEmptyArrayStorage;
  v18 = objc_allocWithZone((Class)MKMapSnapshotOptions);
  swift_retain_n(v9, 2);
  v19 = objc_msgSend(v18, "init");
  v20 = *(void **)(v9 + 16);
  *(_QWORD *)(v9 + 16) = v19;
  swift_release(v9);

  result = *(id *)(v9 + 16);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  result = objc_msgSend(result, "_setShowsAppleLogo:", 0);
  v22 = *(void **)(v9 + 16);
  if (!v22)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v23 = v22;
  objc_msgSend(v23, "setSize:", TimelineProviderContext.displaySize.getter(v23));

  sub_10005F78C(a5, a6, a7, a8, a1, a4 & 1);
  result = *(id *)(v9 + 16);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  result = objc_msgSend(result, "setMapRect:");
  v24 = *(void **)(v9 + 16);
  if (v24)
  {
    v25 = v24;
    objc_msgSend(v25, "setMapType:", a3);

    swift_release(v9);
    v26 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(a1, v26);
    return (id)v9;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t *sub_10005FC48(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v10;
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    v13 = *(void **)((char *)a2 + v9);
    swift_bridgeObjectRetain(v10);
    if (v13 == (void *)1)
    {
      *(_OWORD *)v11 = *(_OWORD *)v12;
    }
    else
    {
      v15 = (void *)*((_QWORD *)v12 + 1);
      *(_QWORD *)v11 = v13;
      *((_QWORD *)v11 + 1) = v15;
      v16 = v13;
      v17 = v15;
    }
    v18 = a3[7];
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
  }
  return a1;
}

void sub_10005FD28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id *v5;

  v4 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
  v5 = (id *)(a1 + *(int *)(a2 + 24));
  if (*v5 != (id)1)
  {

  }
}

uint64_t sub_10005FD98(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = a1 + v8;
  v11 = a2 + v8;
  v12 = *(void **)(a2 + v8);
  swift_bridgeObjectRetain(v9);
  if (v12 == (void *)1)
  {
    *(_OWORD *)v10 = *(_OWORD *)v11;
  }
  else
  {
    v13 = *(void **)(v11 + 8);
    *(_QWORD *)v10 = v12;
    *(_QWORD *)(v10 + 8) = v13;
    v14 = v12;
    v15 = v13;
  }
  v16 = a3[7];
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  return a1;
}

uint64_t sub_10005FE4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v6 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = *(void **)(a1 + v10);
  v14 = *(void **)(a2 + v10);
  if (v13 != (void *)1)
  {
    if (v14 != (void *)1)
    {
      *(_QWORD *)v11 = v14;
      v18 = v14;

      v19 = *(void **)(v11 + 8);
      v20 = *(void **)(v12 + 8);
      *(_QWORD *)(v11 + 8) = v20;
      v21 = v20;

      goto LABEL_8;
    }
    sub_100016DF4((id *)v11);
    goto LABEL_6;
  }
  if (v14 == (void *)1)
  {
LABEL_6:
    *(_OWORD *)v11 = *(_OWORD *)v12;
    goto LABEL_8;
  }
  *(_QWORD *)v11 = v14;
  v15 = *(void **)(v12 + 8);
  *(_QWORD *)(v11 + 8) = v15;
  v16 = v14;
  v17 = v15;
LABEL_8:
  v22 = a3[7];
  v23 = a1 + v22;
  v24 = (uint64_t *)(a2 + v22);
  v25 = *v24;
  *(_BYTE *)(v23 + 8) = *((_BYTE *)v24 + 8);
  *(_QWORD *)v23 = v25;
  return a1;
}

uint64_t sub_10005FF54(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v9 = *(_QWORD *)v10;
  return a1;
}

uint64_t sub_10005FFD4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  v9 = a3[6];
  v10 = a1 + v9;
  v11 = (_QWORD *)(a2 + v9);
  v12 = *(void **)(a1 + v9);
  if (v12 != (void *)1)
  {
    if (*v11 != 1)
    {
      *(_QWORD *)v10 = *v11;

      v13 = *(void **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v11[1];

      goto LABEL_6;
    }
    sub_100016DF4((id *)v10);
  }
  *(_OWORD *)v10 = *(_OWORD *)v11;
LABEL_6:
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  return a1;
}

uint64_t sub_1000600AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000600B8);
}

uint64_t sub_1000600B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for TimelineProviderContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100060134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100060140);
}

uint64_t sub_100060140(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for TimelineProviderContext(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for NearbyEntryContent.ResolvedContent(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008ED90, (uint64_t)&nominal type descriptor for NearbyEntryContent.ResolvedContent);
}

uint64_t sub_1000601CC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for TimelineProviderContext(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = &unk_10006BFE0;
    v4[3] = &unk_10006BFF8;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_100060254(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v5 = *(int *)(a3 + 20);
    v6 = (char *)(a1 + v5);
    v7 = (char *)a2 + v5;
    v8 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
    v9 = *((_QWORD *)v8 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v9 + 48))(v7, 1, v8))
    {
      v10 = sub_1000027AC(&qword_10008BA50);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v12 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v6, v7, v12);
      v13 = v8[5];
      v14 = *(_QWORD *)&v7[v13];
      *(_QWORD *)&v6[v13] = v14;
      v15 = v8[6];
      v16 = &v6[v15];
      v17 = &v7[v15];
      v18 = *(void **)&v7[v15];
      swift_bridgeObjectRetain(v14);
      if (v18 == (void *)1)
      {
        *(_OWORD *)v16 = *(_OWORD *)v17;
      }
      else
      {
        v19 = (void *)*((_QWORD *)v17 + 1);
        *(_QWORD *)v16 = v18;
        *((_QWORD *)v16 + 1) = v19;
        v20 = v18;
        v21 = v19;
      }
      v22 = v8[7];
      v23 = &v6[v22];
      v24 = &v7[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  return v3;
}

void sub_1000603B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id *v5;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3))
  {
    v4 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + *(int *)(v3 + 20)));
    v5 = (id *)(v2 + *(int *)(v3 + 24));
    if (*v5 != (id)1)
    {

    }
  }
}

uint64_t sub_100060450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  char *v21;
  char *v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = (char *)(a1 + v4);
  v6 = (char *)(a2 + v4);
  v7 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v8 = *((_QWORD *)v7 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    v9 = sub_1000027AC(&qword_10008BA50);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v5, v6, v10);
    v11 = v7[5];
    v12 = *(_QWORD *)&v6[v11];
    *(_QWORD *)&v5[v11] = v12;
    v13 = v7[6];
    v14 = &v5[v13];
    v15 = &v6[v13];
    v16 = *(void **)&v6[v13];
    swift_bridgeObjectRetain(v12);
    if (v16 == (void *)1)
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
    }
    else
    {
      v17 = (void *)*((_QWORD *)v15 + 1);
      *(_QWORD *)v14 = v16;
      *((_QWORD *)v14 + 1) = v17;
      v18 = v16;
      v19 = v17;
    }
    v20 = v7[7];
    v21 = &v5[v20];
    v22 = &v6[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_100060588(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, int *);
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)(a1 + v5);
  v7 = (char *)a2 + v5;
  v8 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v9 = *((_QWORD *)v8 - 1);
  v10 = *(uint64_t (**)(char *, uint64_t, int *))(v9 + 48);
  v11 = v10(v6, 1, v8);
  v12 = v10(v7, 1, v8);
  if (!v11)
  {
    if (v12)
    {
      sub_10001B54C((uint64_t)v6, type metadata accessor for NearbyEntryContent.ResolvedContent);
      goto LABEL_7;
    }
    v21 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v6, v7, v21);
    v22 = v8[5];
    v23 = *(_QWORD *)&v7[v22];
    v24 = *(_QWORD *)&v6[v22];
    *(_QWORD *)&v6[v22] = v23;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRelease(v24);
    v25 = v8[6];
    v26 = &v6[v25];
    v27 = &v7[v25];
    v28 = *(void **)&v6[v25];
    v29 = *(void **)&v7[v25];
    if (v28 == (void *)1)
    {
      if (v29 != (void *)1)
      {
        *(_QWORD *)v26 = v29;
        v30 = (void *)*((_QWORD *)v27 + 1);
        *((_QWORD *)v26 + 1) = v30;
        v31 = v29;
        v32 = v30;
LABEL_17:
        v44 = v8[7];
        v45 = &v6[v44];
        v46 = &v7[v44];
        v47 = *(_QWORD *)v46;
        v45[8] = v46[8];
        *(_QWORD *)v45 = v47;
        return a1;
      }
    }
    else
    {
      if (v29 != (void *)1)
      {
        *(_QWORD *)v26 = v29;
        v40 = v29;

        v41 = (void *)*((_QWORD *)v26 + 1);
        v42 = (void *)*((_QWORD *)v27 + 1);
        *((_QWORD *)v26 + 1) = v42;
        v43 = v42;

        goto LABEL_17;
      }
      sub_100016DF4((id *)v26);
    }
    *(_OWORD *)v26 = *(_OWORD *)v27;
    goto LABEL_17;
  }
  if (v12)
  {
LABEL_7:
    v20 = sub_1000027AC(&qword_10008BA50);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  v13 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v6, v7, v13);
  v14 = v8[5];
  v15 = *(_QWORD *)&v7[v14];
  *(_QWORD *)&v6[v14] = v15;
  v16 = v8[6];
  v17 = &v6[v16];
  v18 = &v7[v16];
  v19 = *(void **)&v7[v16];
  swift_bridgeObjectRetain(v15);
  if (v19 == (void *)1)
  {
    *(_OWORD *)v17 = *(_OWORD *)v18;
  }
  else
  {
    *(_QWORD *)v17 = v19;
    v33 = (void *)*((_QWORD *)v18 + 1);
    *((_QWORD *)v17 + 1) = v33;
    v34 = v19;
    v35 = v33;
  }
  v36 = v8[7];
  v37 = &v6[v36];
  v38 = &v7[v36];
  v39 = *(_QWORD *)v38;
  v37[8] = v38[8];
  *(_QWORD *)v37 = v39;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v9 + 56))(v6, 0, 1, v8);
  return a1;
}

uint64_t sub_1000607C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = (char *)(a1 + v4);
  v6 = (char *)(a2 + v4);
  v7 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v8 = *((_QWORD *)v7 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    v9 = sub_1000027AC(&qword_10008BA50);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v5, v6, v10);
    *(_QWORD *)&v5[v7[5]] = *(_QWORD *)&v6[v7[5]];
    *(_OWORD *)&v5[v7[6]] = *(_OWORD *)&v6[v7[6]];
    v11 = v7[7];
    v12 = &v5[v11];
    v13 = &v6[v11];
    v12[8] = v13[8];
    *(_QWORD *)v12 = *(_QWORD *)v13;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_1000608C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t (*v9)(char *, uint64_t, int *);
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  char *v27;
  char *v28;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = (char *)(a1 + v4);
  v6 = (char *)(a2 + v4);
  v7 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(uint64_t (**)(char *, uint64_t, int *))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (v11)
    {
      sub_10001B54C((uint64_t)v5, type metadata accessor for NearbyEntryContent.ResolvedContent);
      goto LABEL_6;
    }
    v18 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v5, v6, v18);
    v19 = v7[5];
    v20 = *(_QWORD *)&v5[v19];
    *(_QWORD *)&v5[v19] = *(_QWORD *)&v6[v19];
    swift_bridgeObjectRelease(v20);
    v21 = v7[6];
    v22 = &v5[v21];
    v23 = &v6[v21];
    v24 = *(void **)&v5[v21];
    if (v24 != (void *)1)
    {
      if (*(_QWORD *)v23 != 1)
      {
        *(_QWORD *)v22 = *(_QWORD *)v23;

        v25 = (void *)*((_QWORD *)v22 + 1);
        *((_QWORD *)v22 + 1) = *((_QWORD *)v23 + 1);

        goto LABEL_13;
      }
      sub_100016DF4((id *)v22);
    }
    *(_OWORD *)v22 = *(_OWORD *)v23;
LABEL_13:
    v26 = v7[7];
    v27 = &v5[v26];
    v28 = &v6[v26];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    return a1;
  }
  if (v11)
  {
LABEL_6:
    v16 = sub_1000027AC(&qword_10008BA50);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  v12 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v5, v6, v12);
  *(_QWORD *)&v5[v7[5]] = *(_QWORD *)&v6[v7[5]];
  *(_OWORD *)&v5[v7[6]] = *(_OWORD *)&v6[v7[6]];
  v13 = v7[7];
  v14 = &v5[v13];
  v15 = &v6[v13];
  v14[8] = v15[8];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t sub_100060AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100060AB0);
}

uint64_t sub_100060AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 253)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 >= 2)
      v5 = ((v4 + 2147483646) & 0x7FFFFFFF) - 1;
    else
      v5 = -2;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_1000027AC(&qword_10008BA50);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v9);
  }
}

uint64_t sub_100060B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100060B50);
}

uint64_t sub_100060B50(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 253)
  {
    *(_BYTE *)(result + 8) = a2 + 2;
  }
  else
  {
    v7 = sub_1000027AC(&qword_10008BA50);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for NearbyEntryContent(uint64_t a1)
{
  return sub_100006A5C(a1, (uint64_t *)&unk_10008EE28, (uint64_t)&nominal type descriptor for NearbyEntryContent);
}

void sub_100060BD8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\t";
  sub_100006B50(319, (unint64_t *)&unk_10008EE38, type metadata accessor for NearbyEntryContent.ResolvedContent);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

_UNKNOWN **sub_100060C5C()
{
  return &off_100083368;
}

uint64_t sub_100060C68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  __chkstk_darwin(a1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B33C(v2, (uint64_t)v5, type metadata accessor for NearbyButtonAction);
  v6 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, v5, v6);
}

id sub_100060CF0(uint64_t a1)
{
  uint64_t v1;
  id *v2;
  id v3;

  v2 = (id *)(v1 + *(int *)(a1 + 24));
  v3 = *v2;
  sub_100047B5C(*v2, v2[1]);
  return v3;
}

uint64_t sub_100060D28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100060D38(v2 + *(int *)(a1 + 20), a2);
}

uint64_t sub_100060D38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000027AC(&qword_10008BA50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_100060D80(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  id v43;
  uint64_t v44;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
    v8 = (char *)v4 + v7;
    v9 = (char *)a2 + v7;
    v10 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
    v11 = *((_QWORD *)v10 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_1000027AC(&qword_10008BA50);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v15 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v8, v9, v15);
      v16 = v10[5];
      v17 = *(_QWORD *)&v9[v16];
      *(_QWORD *)&v8[v16] = v17;
      v18 = v10[6];
      v19 = &v8[v18];
      v20 = &v9[v18];
      v21 = *(void **)&v9[v18];
      swift_bridgeObjectRetain(v17);
      if (v21 == (void *)1)
      {
        *(_OWORD *)v19 = *(_OWORD *)v20;
      }
      else
      {
        v22 = (void *)*((_QWORD *)v20 + 1);
        *(_QWORD *)v19 = v21;
        *((_QWORD *)v19 + 1) = v22;
        v23 = v21;
        v24 = v22;
      }
      v25 = v10[7];
      v26 = &v8[v25];
      v27 = &v9[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
    }
    v28 = a3[5];
    v29 = a3[6];
    v30 = *(void **)((char *)a2 + v28);
    *(_QWORD *)((char *)v4 + v28) = v30;
    *(_QWORD *)((char *)v4 + v29) = *(uint64_t *)((char *)a2 + v29);
    v31 = a3[7];
    v32 = a3[8];
    v33 = (_OWORD *)((char *)v4 + v31);
    v34 = (_OWORD *)((char *)a2 + v31);
    v35 = v34[1];
    v36 = *(uint64_t *)((char *)a2 + v32);
    *v33 = *v34;
    v33[1] = v35;
    *(_QWORD *)((char *)v4 + v32) = v36;
    v37 = a3[9];
    v38 = (char *)v4 + v37;
    v39 = (char *)a2 + v37;
    v40 = type metadata accessor for UUID(0, v13);
    v41 = *(_QWORD *)(v40 - 8);
    v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
    v43 = v30;
    swift_bridgeObjectRetain(v36);
    if (v42(v39, 1, v40))
    {
      v44 = sub_1000027AC(&qword_10008CD10);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
  }
  return v4;
}

uint64_t sub_100060FBC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = a1 + *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  v5 = type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + *(int *)(v5 + 20)));
    v7 = (id *)(v4 + *(int *)(v5 + 24));
    if (*v7 != (id)1)
    {

    }
  }

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8]));
  v8 = a1 + a2[9];
  v10 = type metadata accessor for UUID(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v8, v10);
  return result;
}

uint64_t sub_1000610C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(const void *, uint64_t, uint64_t);
  id v41;
  uint64_t v42;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_1000027AC(&qword_10008BA50);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v13 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v7, v8, v13);
    v14 = v9[5];
    v15 = *(_QWORD *)&v8[v14];
    *(_QWORD *)&v7[v14] = v15;
    v16 = v9[6];
    v17 = &v7[v16];
    v18 = &v8[v16];
    v19 = *(void **)&v8[v16];
    swift_bridgeObjectRetain(v15);
    if (v19 == (void *)1)
    {
      *(_OWORD *)v17 = *(_OWORD *)v18;
    }
    else
    {
      v20 = (void *)*((_QWORD *)v18 + 1);
      *(_QWORD *)v17 = v19;
      *((_QWORD *)v17 + 1) = v20;
      v21 = v19;
      v22 = v20;
    }
    v23 = v9[7];
    v24 = &v7[v23];
    v25 = &v8[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  v26 = a3[5];
  v27 = a3[6];
  v28 = *(void **)(a2 + v26);
  *(_QWORD *)(a1 + v26) = v28;
  *(_QWORD *)(a1 + v27) = *(_QWORD *)(a2 + v27);
  v29 = a3[7];
  v30 = a3[8];
  v31 = (_OWORD *)(a1 + v29);
  v32 = (_OWORD *)(a2 + v29);
  v33 = v32[1];
  v34 = *(_QWORD *)(a2 + v30);
  *v31 = *v32;
  v31[1] = v33;
  *(_QWORD *)(a1 + v30) = v34;
  v35 = a3[9];
  v36 = (void *)(a1 + v35);
  v37 = (const void *)(a2 + v35);
  v38 = type metadata accessor for UUID(0, v12);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48);
  v41 = v28;
  swift_bridgeObjectRetain(v34);
  if (v40(v37, 1, v38))
  {
    v42 = sub_1000027AC(&qword_10008CD10);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v39 + 16))(v36, v37, v38);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  return a1;
}

uint64_t sub_1000612D8(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(void *, uint64_t, uint64_t);
  int v67;
  int v68;
  uint64_t v69;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  v8 = (char *)(a1 + v7);
  v9 = (char *)a2 + v7;
  v10 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_10001B54C((uint64_t)v8, type metadata accessor for NearbyEntryContent.ResolvedContent);
      goto LABEL_7;
    }
    v23 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 24))(v8, v9, v23);
    v24 = v10[5];
    v25 = *(_QWORD *)&v9[v24];
    v26 = *(_QWORD *)&v8[v24];
    *(_QWORD *)&v8[v24] = v25;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRelease(v26);
    v27 = v10[6];
    v28 = &v8[v27];
    v29 = &v9[v27];
    v30 = *(void **)&v8[v27];
    v31 = *(void **)&v9[v27];
    if (v30 == (void *)1)
    {
      if (v31 != (void *)1)
      {
        *(_QWORD *)v28 = v31;
        v32 = (void *)*((_QWORD *)v29 + 1);
        *((_QWORD *)v28 + 1) = v32;
        v33 = v31;
        v34 = v32;
LABEL_17:
        v46 = v10[7];
        v47 = &v8[v46];
        v48 = &v9[v46];
        v49 = *(_QWORD *)v48;
        v47[8] = v48[8];
        *(_QWORD *)v47 = v49;
        goto LABEL_18;
      }
    }
    else
    {
      if (v31 != (void *)1)
      {
        *(_QWORD *)v28 = v31;
        v42 = v31;

        v43 = (void *)*((_QWORD *)v28 + 1);
        v44 = (void *)*((_QWORD *)v29 + 1);
        *((_QWORD *)v28 + 1) = v44;
        v45 = v44;

        goto LABEL_17;
      }
      sub_100016DF4((id *)v28);
    }
    *(_OWORD *)v28 = *(_OWORD *)v29;
    goto LABEL_17;
  }
  if (v14)
  {
LABEL_7:
    v22 = sub_1000027AC(&qword_10008BA50);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_18;
  }
  v15 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v8, v9, v15);
  v16 = v10[5];
  v17 = *(_QWORD *)&v9[v16];
  *(_QWORD *)&v8[v16] = v17;
  v18 = v10[6];
  v19 = &v8[v18];
  v20 = &v9[v18];
  v21 = *(void **)&v9[v18];
  swift_bridgeObjectRetain(v17);
  if (v21 == (void *)1)
  {
    *(_OWORD *)v19 = *(_OWORD *)v20;
  }
  else
  {
    *(_QWORD *)v19 = v21;
    v35 = (void *)*((_QWORD *)v20 + 1);
    *((_QWORD *)v19 + 1) = v35;
    v36 = v21;
    v37 = v35;
  }
  v38 = v10[7];
  v39 = &v8[v38];
  v40 = &v9[v38];
  v41 = *(_QWORD *)v40;
  v39[8] = v40[8];
  *(_QWORD *)v39 = v41;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
LABEL_18:
  v50 = a3[5];
  v51 = *(void **)(a1 + v50);
  v52 = *(void **)((char *)a2 + v50);
  *(_QWORD *)(a1 + v50) = v52;
  v53 = v52;

  *(_QWORD *)(a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  v54 = a3[7];
  v55 = (_QWORD *)(a1 + v54);
  v56 = (uint64_t *)((char *)a2 + v54);
  *v55 = *v56;
  v55[1] = v56[1];
  v55[2] = v56[2];
  v55[3] = v56[3];
  v57 = a3[8];
  v58 = *(_QWORD *)(a1 + v57);
  v59 = *(uint64_t *)((char *)a2 + v57);
  *(_QWORD *)(a1 + v57) = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRelease(v58);
  v60 = a3[9];
  v61 = (void *)(a1 + v60);
  v62 = (char *)a2 + v60;
  v64 = type metadata accessor for UUID(0, v63);
  v65 = *(_QWORD *)(v64 - 8);
  v66 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v65 + 48);
  v67 = v66(v61, 1, v64);
  v68 = v66(v62, 1, v64);
  if (!v67)
  {
    if (!v68)
    {
      (*(void (**)(void *, char *, uint64_t))(v65 + 24))(v61, v62, v64);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v65 + 8))(v61, v64);
    goto LABEL_23;
  }
  if (v68)
  {
LABEL_23:
    v69 = sub_1000027AC(&qword_10008CD10);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, char *, uint64_t))(v65 + 16))(v61, v62, v64);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v61, 0, 1, v64);
  return a1;
}

uint64_t sub_100061660(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_1000027AC(&qword_10008BA50);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v13 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v7, v8, v13);
    *(_QWORD *)&v7[v9[5]] = *(_QWORD *)&v8[v9[5]];
    *(_OWORD *)&v7[v9[6]] = *(_OWORD *)&v8[v9[6]];
    v14 = v9[7];
    v15 = &v7[v14];
    v16 = &v8[v14];
    v15[8] = v16[8];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  v17 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  v18 = a3[7];
  v19 = a3[8];
  v20 = (_OWORD *)(a1 + v18);
  v21 = (__int128 *)(a2 + v18);
  v22 = *v21;
  v23 = v21[1];
  v24 = *(_QWORD *)(a2 + v19);
  *v20 = v22;
  v20[1] = v23;
  *(_QWORD *)(a1 + v19) = v24;
  v25 = a3[9];
  v26 = (void *)(a1 + v25);
  v27 = (const void *)(a2 + v25);
  v28 = type metadata accessor for UUID(0, v12);
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    v30 = sub_1000027AC(&qword_10008CD10);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v29 + 32))(v26, v27, v28);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  return a1;
}

uint64_t sub_100061830(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, int *);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  char *v47;
  char *v48;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(char *, uint64_t, int *))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      v14 = type metadata accessor for TimelineProviderContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v7, v8, v14);
      *(_QWORD *)&v7[v9[5]] = *(_QWORD *)&v8[v9[5]];
      *(_OWORD *)&v7[v9[6]] = *(_OWORD *)&v8[v9[6]];
      v15 = v9[7];
      v16 = &v7[v15];
      v17 = &v8[v15];
      v16[8] = v17[8];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_10001B54C((uint64_t)v7, type metadata accessor for NearbyEntryContent.ResolvedContent);
LABEL_6:
    v18 = sub_1000027AC(&qword_10008BA50);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  v38 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v7, v8, v38);
  v39 = v9[5];
  v40 = *(_QWORD *)&v7[v39];
  *(_QWORD *)&v7[v39] = *(_QWORD *)&v8[v39];
  swift_bridgeObjectRelease(v40);
  v41 = v9[6];
  v42 = &v7[v41];
  v43 = &v8[v41];
  v44 = *(void **)&v7[v41];
  if (v44 != (void *)1)
  {
    if (*(_QWORD *)v43 != 1)
    {
      *(_QWORD *)v42 = *(_QWORD *)v43;

      v45 = (void *)*((_QWORD *)v42 + 1);
      *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);

      goto LABEL_20;
    }
    sub_100016DF4((id *)v42);
  }
  *(_OWORD *)v42 = *(_OWORD *)v43;
LABEL_20:
  v46 = v9[7];
  v47 = &v7[v46];
  v48 = &v8[v46];
  *(_QWORD *)v47 = *(_QWORD *)v48;
  v47[8] = v48[8];
LABEL_7:
  v19 = a3[5];
  v20 = *(void **)(a1 + v19);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);

  v21 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v22 = (_OWORD *)(a1 + v21);
  v23 = (_OWORD *)(a2 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = a3[8];
  v26 = *(_QWORD *)(a1 + v25);
  *(_QWORD *)(a1 + v25) = *(_QWORD *)(a2 + v25);
  swift_bridgeObjectRelease(v26);
  v27 = a3[9];
  v28 = (void *)(a1 + v27);
  v29 = (void *)(a2 + v27);
  v31 = type metadata accessor for UUID(0, v30);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v28, 1, v31);
  v35 = v33(v29, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, void *, uint64_t))(v32 + 40))(v28, v29, v31);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v32 + 8))(v28, v31);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    v36 = sub_1000027AC(&qword_10008CD10);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v32 + 32))(v28, v29, v31);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v28, 0, 1, v31);
  return a1;
}

uint64_t sub_100061B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100061B3C);
}

uint64_t sub_100061B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for NearbyEntryContent(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = sub_1000027AC(&qword_10008CD10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v11);
  }
}

uint64_t sub_100061BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100061C00);
}

uint64_t sub_100061C00(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for NearbyEntryContent(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
      return result;
    }
    v10 = sub_1000027AC(&qword_10008CD10);
    v12 = a1 + *(int *)(a4 + 36);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for NearbyEntryContentResolver(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008EEF0, (uint64_t)&nominal type descriptor for NearbyEntryContentResolver);
}

void sub_100061CBC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  v2 = type metadata accessor for NearbyEntryContent(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\b";
    v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[3] = &unk_10006C098;
    v6[4] = "\b";
    sub_100006B50(319, (unint64_t *)&unk_10008E0D0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    if (v5 <= 0x3F)
    {
      v6[5] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

char *sub_100061D74(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v7 = a2[1];
    v6 = a2[2];
    *((_QWORD *)a1 + 1) = v7;
    *((_QWORD *)a1 + 2) = v6;
    v8 = a2[3];
    *((_QWORD *)a1 + 3) = v8;
    v9 = *(int *)(a3 + 24);
    v10 = &a1[v9];
    v11 = (uint64_t)a2 + v9;
    v12 = type metadata accessor for NearbyButtonAction(0);
    v13 = v4;
    v14 = v7;
    swift_bridgeObjectRetain(v8);
    swift_getEnumCaseMultiPayload(v11, v12);
    v16 = v15;
    v17 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v10, v11, v17);
    swift_storeEnumTagMultiPayload(v10, v12, v16 == 1);
  }
  return v5;
}

uint64_t type metadata accessor for NearbyButtonAction(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008F040, (uint64_t)&nominal type descriptor for NearbyButtonAction);
}

uint64_t sub_100061E78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  type metadata accessor for NearbyButtonAction(0);
  v5 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_100061ED8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  int v13;
  _BOOL8 v14;
  uint64_t v15;

  v4 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  v6 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for NearbyButtonAction(0);
  v11 = v4;
  v12 = v5;
  swift_bridgeObjectRetain(v6);
  swift_getEnumCaseMultiPayload(v9, v10);
  v14 = v13 == 1;
  v15 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v8, v9, v15);
  swift_storeEnumTagMultiPayload(v8, v10, v14);
  return a1;
}

uint64_t sub_100061F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BOOL8 v19;
  uint64_t v20;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  v9 = *(void **)(a1 + 8);
  v10 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v10;
  v11 = v10;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  if (a1 != a2)
  {
    v14 = *(int *)(a3 + 24);
    v15 = a2 + v14;
    v16 = a1 + v14;
    sub_10001B54C(a1 + v14, type metadata accessor for NearbyButtonAction);
    v17 = type metadata accessor for NearbyButtonAction(0);
    swift_getEnumCaseMultiPayload(v15, v17);
    v19 = v18 == 1;
    v20 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v16, v15, v20);
    swift_storeEnumTagMultiPayload(v16, v17, v19);
  }
  return a1;
}

_OWORD *sub_100062080(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  int v9;
  _BOOL8 v10;
  uint64_t v11;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for NearbyButtonAction(0);
  swift_getEnumCaseMultiPayload(v7, v8);
  v10 = v9 == 1;
  v11 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v6, v7, v11);
  swift_storeEnumTagMultiPayload(v6, v8, v10);
  return a1;
}

void **sub_100062114(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  _BOOL8 v15;
  uint64_t v16;

  v6 = *a1;
  *a1 = *a2;

  v7 = a1[1];
  a1[1] = a2[1];

  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 24);
    v11 = (char *)a2 + v10;
    v12 = (char *)a1 + v10;
    sub_10001B54C((uint64_t)a1 + v10, type metadata accessor for NearbyButtonAction);
    v13 = type metadata accessor for NearbyButtonAction(0);
    swift_getEnumCaseMultiPayload(v11, v13);
    v15 = v14 == 1;
    v16 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v12, v11, v16);
    swift_storeEnumTagMultiPayload(v12, v13, v15);
  }
  return a1;
}

uint64_t sub_1000621F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000621FC);
}

uint64_t sub_1000621FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for NearbyButtonAction(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_100062278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100062284);
}

uint64_t sub_100062284(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for NearbyButtonAction(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for NearbyButtonContent(uint64_t a1)
{
  return sub_100006A5C(a1, qword_10008EF90, (uint64_t)&nominal type descriptor for NearbyButtonContent);
}

uint64_t sub_10006230C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_10006C0C8;
  v4[1] = &unk_10006C0E0;
  result = type metadata accessor for NearbyButtonAction(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100062388(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v8 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, EnumCaseMultiPayload == 1);
  }
  return a1;
}

uint64_t sub_100062434(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_100062468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v6;
  uint64_t v7;

  v6 = swift_getEnumCaseMultiPayload(a2, a3) == 1;
  v7 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  swift_storeEnumTagMultiPayload(a1, a3, v6);
  return a1;
}

uint64_t sub_1000624DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BOOL8 v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_10001B54C(a1, type metadata accessor for NearbyButtonAction);
    swift_getEnumCaseMultiPayload(a2, a3);
    v7 = v6 == 1;
    v8 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, v7);
  }
  return a1;
}

uint64_t sub_100062568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v6;
  uint64_t v7;

  v6 = swift_getEnumCaseMultiPayload(a2, a3) == 1;
  v7 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
  swift_storeEnumTagMultiPayload(a1, a3, v6);
  return a1;
}

uint64_t sub_1000625DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BOOL8 v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_10001B54C(a1, type metadata accessor for NearbyButtonAction);
    swift_getEnumCaseMultiPayload(a2, a3);
    v7 = v6 == 1;
    v8 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, v7);
  }
  return a1;
}

uint64_t sub_100062668(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

uint64_t sub_1000626CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD aBlock[5];
  uint64_t v59;

  v47 = a1;
  v51 = a3;
  v52 = a4;
  v48 = a2;
  v54 = type metadata accessor for DispatchWorkItemFlags(0);
  v57 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v53 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v55 = *(_QWORD *)(v5 - 8);
  v56 = v5;
  __chkstk_darwin(v5);
  v50 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v44 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  v8 = *(_QWORD *)(v44 + 64);
  __chkstk_darwin(v7);
  v43 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TimelineProviderContext(0);
  v10 = *(_QWORD *)(v9 - 8);
  v42 = v9;
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for NearbyEntryContentResolver(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10003A298();
  v49 = static OS_dispatch_queue.main.getter(v17);
  sub_10001B33C(v46, (uint64_t)v16, type metadata accessor for NearbyEntryContentResolver);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v47, v9);
  v18 = v44;
  v19 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))((char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v48, v45);
  v20 = *(unsigned __int8 *)(v14 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = *(unsigned __int8 *)(v10 + 80);
  v23 = (v15 + v22 + v21) & ~v22;
  v24 = *(unsigned __int8 *)(v18 + 80);
  v25 = (v11 + v24 + v23) & ~v24;
  v26 = (v8 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = swift_allocObject(&unk_1000833A0, v26 + 16, v20 | v22 | v24 | 7);
  sub_10001CDDC((uint64_t)v16, v27 + v21, type metadata accessor for NearbyEntryContentResolver);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v27 + v23, v12, v42);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v27 + v25, v43, v19);
  v28 = (_QWORD *)(v27 + v26);
  v29 = v52;
  *v28 = v51;
  v28[1] = v29;
  aBlock[4] = sub_100063350;
  v59 = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100052B78;
  aBlock[3] = &unk_1000833B8;
  v30 = _Block_copy(aBlock);
  v31 = v59;
  swift_retain(v29);
  swift_release(v31);
  v32 = v50;
  static DispatchQoS.unspecified.getter(v33);
  aBlock[0] = _swiftEmptyArrayStorage;
  v34 = sub_10001B41C((unint64_t *)&qword_10008C7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v35 = sub_1000027AC((uint64_t *)&unk_10008BF70);
  v36 = sub_100015124();
  v38 = v53;
  v37 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v35, v36, v54, v34);
  v39 = (void *)v49;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v32, v38, v30);
  _Block_release(v30);

  (*(void (**)(char *, uint64_t))(v57 + 8))(v38, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v32, v56);
}

uint64_t sub_100062A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v38 = a4;
  v39 = a5;
  v37 = type metadata accessor for TimelineProviderContext(0);
  v8 = *(_QWORD *)(v37 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v37);
  v34 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for NearbyEntryContentResolver(0);
  v33 = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(v33 + 64);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000027AC(&qword_10008BF20);
  __chkstk_darwin(v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100063404(*(_QWORD *)(a1 + *(int *)(v10 + 32)));
  v36 = sub_100062CB4(a2, a3, *(_QWORD *)(v35 + 16) < 2uLL);
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v15, a3, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
  sub_10001B33C(a1, (uint64_t)v12, type metadata accessor for NearbyEntryContentResolver);
  v18 = v34;
  v19 = a2;
  v20 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v34, v19, v37);
  v21 = *(unsigned __int8 *)(v33 + 80);
  v22 = (v21 + 16) & ~v21;
  v23 = *(unsigned __int8 *)(v8 + 80);
  v24 = (v11 + v23 + v22) & ~v23;
  v25 = (v9 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF8;
  v27 = swift_allocObject(&unk_1000833F0, v26 + 16, v21 | v23 | 7);
  sub_10001CDDC((uint64_t)v12, v27 + v22, type metadata accessor for NearbyEntryContentResolver);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v27 + v24, v18, v20);
  *(_QWORD *)(v27 + v25) = v35;
  v28 = (_QWORD *)(v27 + v26);
  v29 = v39;
  *v28 = v38;
  v28[1] = v29;
  swift_retain(v29);
  v30 = v36;
  sub_1000274B8((uint64_t)v15, (uint64_t)sub_100063CB8, v27);
  swift_release(v30);
  swift_release(v27);
  return sub_100015590((uint64_t)v15, &qword_10008BF20);
}

uint64_t sub_100062CB4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  int *v21;
  void (*v22)(char *, char *, _QWORD *);
  id v23;
  void (*v24)(_BYTE *, uint64_t);
  __n128 v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;

  v4 = v3;
  v7 = type metadata accessor for TimelineProviderContext(0);
  v42 = *(_QWORD *)(v7 - 8);
  v43 = v7;
  __chkstk_darwin(v7);
  v44 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetFamily(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchPredicate(0, v13);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_10003A298();
  *v17 = static OS_dispatch_queue.main.getter(v18);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  v19 = _dispatchPreconditionTest(_:)(v17);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  if ((v19 & 1) != 0)
  {
    v41 = a3;
    type metadata accessor for MapSnapshotter();
    v21 = (int *)type metadata accessor for NearbyEntryContentResolver(0);
    v22 = (void (*)(char *, char *, _QWORD *))(v4 + v21[9]);
    TimelineProviderContext.family.getter(v21);
    v23 = sub_1000298F4(v22, (uint64_t)v12);
    v24 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
    v40 = v9;
    v24(v12, v9);
    if (v23)
    {
      v26 = type metadata accessor for NearbySnapshotter();
      v27 = (id)swift_dynamicCastClass(v23, v26);
      if (v27)
        return (uint64_t)v27;
      v25 = swift_release(v23);
    }
    v28 = (uint64_t)v44;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v42 + 16))(v44, a1, v43, v25);
    v29 = *(void **)(v4 + v21[5]);
    v30 = *(_QWORD *)(v4 + v21[6]);
    v31 = (double *)(v4 + v21[7]);
    v32 = *v31;
    v33 = v31[1];
    v34 = v31[2];
    v35 = v31[3];
    v36 = type metadata accessor for NearbySnapshotter();
    swift_allocObject(v36, 104, 7);
    v37 = v29;
    v27 = sub_10005FAA0(v28, v29, v30, v41 & 1, v32, v33, v34, v35);

    TimelineProviderContext.family.getter(v38);
    sub_100029F24((uint64_t)v27, (uint64_t)v22, v12);
    v24(v12, v40);
    return (uint64_t)v27;
  }
  __break(1u);
  return result;
}

uint64_t sub_100062F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *), uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  int *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  void (*v29)(char *);

  v28 = a6;
  v29 = a5;
  v10 = sub_1000027AC(&qword_10008BB18);
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for NearbyEntryContent(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for NearbySnapshotter();
  v17 = swift_dynamicCastClassUnconditional(a1, v16, 0, 0, 0);
  sub_10001B33C(a2, (uint64_t)v15, type metadata accessor for NearbyEntryContent);
  v18 = (uint64_t)&v15[*(int *)(v13 + 20)];
  swift_retain(a1);
  sub_100015590(v18, &qword_10008BA50);
  v19 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v18, a3, v19);
  v20 = *(void **)(v17 + 24);
  v21 = *(void **)(v17 + 32);
  v22 = *(_QWORD *)(v17 + 80);
  LOBYTE(v17) = *(_BYTE *)(v17 + 88);
  v23 = (int *)type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  *(_QWORD *)(v18 + v23[5]) = a4;
  v24 = (_QWORD *)(v18 + v23[6]);
  *v24 = v20;
  v24[1] = v21;
  v25 = v18 + v23[7];
  *(_QWORD *)v25 = v22;
  *(_BYTE *)(v25 + 8) = v17;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v23 - 1) + 56))(v18, 0, 1, v23);
  sub_10001B33C((uint64_t)v15, (uint64_t)v12, type metadata accessor for NearbyEntryContent);
  v26 = type metadata accessor for GeneralMapsTimelineEntryContent(0);
  swift_storeEnumTagMultiPayload(v12, v26, 0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v12, 0, 1, v26);
  swift_bridgeObjectRetain(a4);
  sub_100047B5C(v20, v21);
  v29(v12);
  swift_release(a1);
  sub_100015590((uint64_t)v12, &qword_10008BB18);
  return sub_10001B54C((uint64_t)v15, type metadata accessor for NearbyEntryContent);
}

uint64_t sub_10006316C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = (int *)type metadata accessor for NearbyEntryContentResolver(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v22 = *(_QWORD *)(v2 + 64);
  v24 = type metadata accessor for TimelineProviderContext(0);
  v4 = *(_QWORD *)(v24 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v21 = *(_QWORD *)(v4 + 64);
  v23 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v23 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v20 = *(_QWORD *)(v6 + 64);
  v8 = v0 + ((v3 + 16) & ~v3);
  v9 = v8 + *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  v10 = type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v9, v24);
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + *(int *)(v10 + 20)));
    v11 = (id *)(v9 + *(int *)(v10 + 24));
    if (*v11 != (id)1)
    {

    }
  }

  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v1[8]));
  v12 = v8 + v1[9];
  v14 = type metadata accessor for UUID(0, v13);
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v12, v14);
  v16 = (((v3 + 16) & ~v3) + v22 + v5) & ~v5;
  v17 = (v16 + v21 + v7) & ~v7;
  v18 = (v20 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v16, v24);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v17, v23);
  swift_release(*(_QWORD *)(v0 + v18 + 8));
  return swift_deallocObject(v0, v18 + 16, v3 | v5 | v7 | 7);
}

uint64_t sub_100063350()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;

  v1 = *(_QWORD *)(type metadata accessor for NearbyEntryContentResolver(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (uint64_t *)(v0 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_100062A50(v0 + v2, v0 + v5, v0 + v8, *v9, v9[1]);
}

double sub_1000633EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1000633FC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100063404(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  id v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  id v41;
  id v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  void *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  uint64_t (*v56)(uint64_t, uint64_t, _QWORD *);
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  Swift::String v79;

  v74 = a1;
  v1 = (_QWORD *)type metadata accessor for URL(0);
  v70 = *(v1 - 1);
  __chkstk_darwin(v1);
  v69 = (char *)&v63 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000027AC(&qword_10008BA58);
  __chkstk_darwin(v3);
  v5 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for NearbyButtonContent(0);
  v6 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for WidgetFamily(0);
  v9 = *(_QWORD *)(v77 - 8);
  v10 = __chkstk_darwin(v77);
  v65 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v63 - v12);
  v72 = type metadata accessor for NearbyButtonAction(0);
  v14 = __chkstk_darwin(v72);
  v68 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v63 - v16;
  v18 = sub_1000027AC(&qword_10008EB40);
  v19 = *(_QWORD *)(v6 + 72);
  v20 = *(unsigned __int8 *)(v6 + 80);
  v21 = (v20 + 32) & ~v20;
  v67 = v19;
  v22 = swift_allocObject(v18, v21 + v19, v20 | 7);
  *(_OWORD *)(v22 + 16) = xmmword_10006B890;
  v78 = v22;
  v66 = v21;
  v23 = v22 + v21;
  if (qword_10008B990 != -1)
LABEL_28:
    swift_once(&qword_10008B990, sub_10001E1A0);
  v71 = v1;
  v24 = *(void **)algn_100090B58;
  v25 = qword_10008BA00;
  v75 = qword_100090B50;
  v76 = v9;
  v26 = (id)qword_100090B50;
  v27 = v24;
  if (v25 != -1)
    swift_once(&qword_10008BA00, sub_100045C88);
  v79._countAndFlagsBits = 0xD00000000000001FLL;
  v79._object = (void *)0x800000010007AB20;
  v28._object = (void *)0x800000010007AB00;
  v28._countAndFlagsBits = 0xD000000000000014;
  v29._countAndFlagsBits = 0x686372616553;
  v29._object = (void *)0xE600000000000000;
  v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)qword_100090BC0, v29, v79);
  TimelineProviderContext.family.getter(v30._countAndFlagsBits);
  sub_10004A938((uint64_t)v13, (uint64_t)v17);
  v31 = v76;
  v32 = v13;
  v13 = (_QWORD *)v77;
  (*(void (**)(_QWORD *, uint64_t))(v76 + 8))(v32, v77);
  swift_storeEnumTagMultiPayload(v17, v72, 0);
  *(_QWORD *)v23 = v75;
  *(_QWORD *)(v23 + 8) = v24;
  *(Swift::String *)(v23 + 16) = v30;
  sub_10001CDDC((uint64_t)v17, v23 + *(int *)(v73 + 24), type metadata accessor for NearbyButtonAction);
  v33 = v74;
  if (!v74)
    return v78;
  v34 = swift_bridgeObjectRetain(v74);
  v35 = v65;
  TimelineProviderContext.family.getter(v34);
  v36 = (*(uint64_t (**)(char *, _QWORD *))(v31 + 88))(v35, v13);
  v9 = v78;
  if (v36 == enum case for WidgetFamily.systemSmall(_:))
  {
    v37 = 1;
LABEL_12:
    v65 = (char *)v37;
    if ((unint64_t)v33 >> 62)
    {
      if (v33 >= 0)
        v61 = v33 & 0xFFFFFFFFFFFFFF8;
      else
        v61 = v33;
      swift_bridgeObjectRetain(v33);
      v38 = _CocoaArrayWrapper.endIndex.getter(v61);
      swift_bridgeObjectRelease(v33);
      if (v38)
      {
LABEL_14:
        v63 = v38;
        v64 = v33 & 0xC000000000000001;
        v39 = 4;
        while (1)
        {
          v17 = (char *)(v39 - 4);
          if (v64)
            v40 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v39 - 4, v33);
          else
            v40 = *(id *)(v33 + 8 * v39);
          v1 = v40;
          if (__OFADD__(v17, 1))
          {
            __break(1u);
            goto LABEL_28;
          }
          v75 = v39 - 3;
          v76 = v39;
          v78 = v9;
          v41 = objc_msgSend(v40, "styleAttributes");
          v42 = sub_10001E1F0((uint64_t)v41, 4);
          v77 = v43;

          v44 = objc_msgSend(v1, "shortDisplayString");
          if (!v44)
            break;
          v45 = v44;
          v13 = v8;
          v9 = (uint64_t)v5;
          v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
          v48 = v47;

          v49 = v1;
          v50 = objc_msgSend(v1, "mapsURL");
          if (!v50)
            goto LABEL_36;
          v51 = v50;
          v52 = v69;
          static URL._unconditionallyBridgeFromObjectiveC(_:)(v50);

          v53 = v70;
          v23 = *(_QWORD *)(v70 + 32);
          v54 = v52;
          v55 = v71;
          ((void (*)(uint64_t, char *, _QWORD *))v23)(v9, v54, v71);
          (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD *))(v53 + 56))(v9, 0, 1, v55);
          v56 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(v53 + 48);
          v5 = (char *)v9;
          v36 = v56(v9, 1, v55);
          if (v36 == 1)
            goto LABEL_37;
          v57 = (uint64_t)v68;
          ((void (*)(char *, char *, _QWORD *))v23)(v68, v5, v55);
          swift_storeEnumTagMultiPayload(v57, v72, 1);
          v8 = (char *)v13;
          v58 = v77;
          *v13 = v42;
          v13[1] = v58;
          v13[2] = v46;
          v13[3] = v48;
          sub_10001CDDC(v57, (uint64_t)v13 + *(int *)(v73 + 24), type metadata accessor for NearbyButtonAction);
          v9 = v78;
          v60 = *(_QWORD *)(v78 + 16);
          v59 = *(_QWORD *)(v78 + 24);
          if (v60 >= v59 >> 1)
            v9 = sub_10005C90C(v59 > 1, v60 + 1, 1, v78);
          v33 = v74;
          *(_QWORD *)(v9 + 16) = v60 + 1;
          sub_10001CDDC((uint64_t)v13, v9 + v66 + v60 * v67, type metadata accessor for NearbyButtonContent);

          if (*(_QWORD *)(v9 + 16) < (unint64_t)v65)
          {
            v39 = v76 + 1;
            if (v75 != v63)
              continue;
          }
          goto LABEL_33;
        }
        __break(1u);
LABEL_36:
        v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(v70 + 56))(v9, 1, 1, v71);
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
    }
    else
    {
      v38 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v38)
        goto LABEL_14;
    }
LABEL_33:
    swift_bridgeObjectRelease(v33);
    return v9;
  }
  if (v36 == enum case for WidgetFamily.systemMedium(_:))
  {
    v37 = 2;
    goto LABEL_12;
  }
  if (v36 == enum case for WidgetFamily.systemLarge(_:))
  {
    v37 = 4;
    goto LABEL_12;
  }
LABEL_38:
  if (v36 == enum case for WidgetFamily.systemExtraLarge(_:)
    || v36 == enum case for WidgetFamily.accessoryCircular(_:)
    || v36 == enum case for WidgetFamily.accessoryRectangular(_:)
    || v36 == enum case for WidgetFamily.accessoryInline(_:))
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, 0x8000000100079690, "GeneralMapsWidget/NearbyEntryContent.swift", 42, 2, 95, 0);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "GeneralMapsWidget/NearbyEntryContent.swift", 42, 2, 97, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_100063B08()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v1 = (int *)type metadata accessor for NearbyEntryContentResolver(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v21 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for TimelineProviderContext(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v20 = *(_QWORD *)(v6 + 64);
  v8 = v0 + v4;
  v9 = v0 + v4 + *(int *)(type metadata accessor for NearbyEntryContent(0) + 20);
  v10 = type metadata accessor for NearbyEntryContent.ResolvedContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + *(int *)(v10 + 20)));
    v11 = (id *)(v9 + *(int *)(v10 + 24));
    if (*v11 != (id)1)
    {

    }
  }

  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v1[8]));
  v12 = v8 + v1[9];
  v14 = type metadata accessor for UUID(0, v13);
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v12, v14);
  v16 = (v4 + v21 + v7) & ~v7;
  v17 = (v20 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v16, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v17));
  swift_release(*(_QWORD *)(v0 + v18 + 8));
  return swift_deallocObject(v0, v18 + 16, v3 | v7 | 7);
}

uint64_t sub_100063CB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(type metadata accessor for NearbyEntryContentResolver(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100062F48(a1, v1 + v4, v1 + v7, *(_QWORD *)(v1 + v8), *(void (**)(char *))(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC17GeneralMapsWidgetP33_58512893E51939CB3312036E8F3CDA9C19ResourceBundleClass);
}

uint64_t sub_100063D64()
{
  return sub_100063EFC(1);
}

uint64_t sub_100063D6C(int a1, int a2, int a3, int a4)
{
  BOOL v9;
  _DWORD v10[2];

  if (qword_100090AD8 == -1)
  {
    if (qword_100090AE0)
    {
LABEL_3:
      v10[0] = a1;
      v10[1] = (a2 << 16) | (a3 << 8) | a4;
      return _availability_version_check(1, v10);
    }
  }
  else
  {
    dispatch_once_f(&qword_100090AD8, 0, (dispatch_function_t)sub_100063EF4);
    if (qword_100090AE0)
      goto LABEL_3;
  }
  if (qword_100090AD0 == -1)
  {
    v9 = dword_100090AC0 < a2;
    if (dword_100090AC0 > a2)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_100090AD0, 0, (dispatch_function_t)sub_100063D64);
    v9 = dword_100090AC0 < a2;
    if (dword_100090AC0 > a2)
      return 1;
  }
  if (v9)
    return 0;
  if (dword_100090AC4 > a3)
    return 1;
  return dword_100090AC4 >= a3 && dword_100090AC8 >= a4;
}

uint64_t sub_100063EF4()
{
  return sub_100063EFC(0);
}

uint64_t sub_100063EFC(uint64_t result)
{
  void *v1;
  BOOL v2;
  unsigned __int8 *v4;
  uint64_t (*v5)(_QWORD);
  unint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t (*v8)(_QWORD, const char *, uint64_t, unsigned __int8 *);
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(void);
  FILE *v12;
  FILE *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  FILE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  FILE *v27;
  unsigned int (*v28)(uint64_t, char *, uint64_t, uint64_t);
  char v29[32];

  v1 = (void *)qword_100090AE0;
  if (qword_100090AE0)
    v2 = (_DWORD)result == 0;
  else
    v2 = 0;
  if (!v2)
  {
    if (&__availability_version_check)
    {
      qword_100090AE0 = (uint64_t)&__availability_version_check;
      v1 = &__availability_version_check;
    }
    if (!v1 || (_DWORD)result != 0)
    {
      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        v4 = *(unsigned __int8 **)result;
        result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          v5 = (uint64_t (*)(_QWORD))result;
          v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            v7 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))result;
            result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              v8 = (uint64_t (*)(_QWORD, const char *, uint64_t, unsigned __int8 *))result;
              result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  v10 = (uint64_t (*)(uint64_t))result;
                  result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    v11 = (uint64_t (*)(void))result;
                    result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        v12 = (FILE *)result;
                        result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          v13 = (FILE *)result;
                          v27 = v12;
                          fseek((FILE *)result, 0, 2);
                          v14 = ftell(v13);
                          if (v14 < 0)
                          {
                            v16 = 0;
                          }
                          else
                          {
                            v15 = v14;
                            rewind(v13);
                            v16 = malloc(v15);
                            if (v16)
                            {
                              v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                v17 = v5(0);
                                if (v17)
                                {
                                  v18 = v17;
                                  v19 = v13;
                                  if (v6)
                                    v20 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))v6)(0, v17, 0, 0, 0);
                                  else
                                    v20 = v7(0, v17, 0, 0);
                                  v21 = v20;
                                  if (v20)
                                  {
                                    v22 = v8(0, "ProductVersion", 1536, v4);
                                    if (v22)
                                    {
                                      v23 = v22;
                                      v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32, 134217984))
                                            sscanf(v29, "%d.%d.%d", &dword_100090AC0, &dword_100090AC4, &dword_100090AC8);
                                        }
                                      }
                                    }
                                    ((void (*)(uint64_t))v27)(v21);
                                    v19 = v13;
                                  }
                                  ((void (*)(uint64_t))v27)(v18);
                                }
                                else
                                {
                                  v19 = v13;
                                }
                                v16 = v26;
                              }
                              else
                              {
                                v16 = v26;
                                v19 = v13;
                              }
                              goto LABEL_41;
                            }
                          }
                          v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_100064B58(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_100090AE8;
  qword_100090AE8 = (uint64_t)v1;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
  objc_msgSend((id)qword_100090AE8, "setLocale:", v3);

}

void sub_100065010(id a1)
{
  NSDateFormatter *v1;
  void *v2;
  void *v3;

  v1 = objc_opt_new(NSDateFormatter);
  v2 = (void *)qword_100090AF8;
  qword_100090AF8 = (uint64_t)v1;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
  objc_msgSend((id)qword_100090AF8, "setLocale:", v3);

  _objc_msgSend((id)qword_100090AF8, "setTimeStyle:", 1);
}

void sub_1000661D0(id a1)
{
  NSLengthFormatter *v1;
  void *v2;

  v1 = objc_opt_new(NSLengthFormatter);
  v2 = (void *)qword_100090B08;
  qword_100090B08 = (uint64_t)v1;

}

void sub_1000661F8(id a1)
{
  NSLengthFormatter *v1;
  void *v2;

  v1 = objc_opt_new(NSLengthFormatter);
  v2 = (void *)qword_100090B18;
  qword_100090B18 = (uint64_t)v1;

  objc_msgSend((id)qword_100090B18, "setUnitStyle:", 3);
}

void sub_100066354()
{
  if (qword_100090B28 != -1)
    dispatch_once(&qword_100090B28, &stru_100083618);
}

void sub_10006637C(id a1)
{
  byte_10008F160 = 1;
  _GEOConfigRegisterStateCaptureFunctions(sub_10006639C, sub_1000663A8);
}

_UNKNOWN **sub_10006639C()
{
  return &off_1000841B0;
}

_UNKNOWN **sub_1000663A8()
{
  return &off_1000841C8;
}

id sub_1000663B4(id a1)
{
  return &off_1000841E0;
}

id sub_1000663C0(id a1)
{
  return &off_1000841F8;
}

id sub_1000663CC(id a1)
{
  return &off_100084210;
}

id sub_1000663D8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1000663E4(id a1)
{
  return &off_100084210;
}

void sub_100066D68(uint64_t a1)
{
  _QWORD *WeakRetained;
  uint64_t v2;
  void *v3;
  uint64_t Log;
  NSObject *v5;
  int v6;
  char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
    v3 = (void *)WeakRetained[1];
    WeakRetained[1] = v2;

  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "MKLocationManagerAdapter");
    v5 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 136446722;
      v7 = "MapsSuggestionsMKLocationManagerAdapter.m";
      v8 = 1026;
      v9 = 36;
      v10 = 2082;
      v11 = "-[MapsSuggestionsMKLocationManagerAdapter init]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v6, 0x1Cu);
    }

  }
}

void sub_100066F14(uint64_t a1)
{
  id *WeakRetained;
  id *v2;
  NSObject *v3;
  uint64_t Log;
  int v5;
  char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "considerMyAllowanceAsLimited:", objc_msgSend(WeakRetained[1], "isAuthorizedForPreciseLocation") ^ 1);
    objc_msgSend(v2[1], "startLocationUpdateWithObserver:", v2);
    v3 = objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    -[NSObject addObserver:selector:name:object:](v3, "addObserver:selector:name:object:", v2, "locationManagerApprovalDidChange:", MKLocationManagerApprovalDidChangeNotification, 0);
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "MKLocationManagerAdapter");
    v3 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = 136446722;
      v6 = "MapsSuggestionsMKLocationManagerAdapter.m";
      v7 = 1026;
      v8 = 49;
      v9 = 2082;
      v10 = "-[MapsSuggestionsMKLocationManagerAdapter onStartImplementation]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v5, 0x1Cu);
    }

  }
}

void sub_1000670F8(uint64_t a1)
{
  id *WeakRetained;
  id *v2;
  NSObject *v3;
  uint64_t Log;
  int v5;
  char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[1], "stopLocationUpdateWithObserver:", WeakRetained);
    v3 = objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    -[NSObject removeObserver:name:object:](v3, "removeObserver:name:object:", v2, MKLocationManagerApprovalDidChangeNotification, 0);
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "MKLocationManagerAdapter");
    v3 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = 136446722;
      v6 = "MapsSuggestionsMKLocationManagerAdapter.m";
      v7 = 1026;
      v8 = 60;
      v9 = 2082;
      v10 = "-[MapsSuggestionsMKLocationManagerAdapter onStopImplementation]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v5, 0x1Cu);
    }

  }
}

id objc_msgSend_CGImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGImage");
}

id objc_msgSend_MKMapItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "MKMapItem");
}

id objc_msgSend__arrivalTimeStringForEtaDate_timeZone_includingAMPMSymbols_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_arrivalTimeStringForEtaDate:timeZone:includingAMPMSymbols:");
}

id objc_msgSend__chargeImageAttachmentWithFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_chargeImageAttachmentWithFont:");
}

id objc_msgSend__computeDistanceProperties(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_computeDistanceProperties");
}

id objc_msgSend__computeTimeProperties(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_computeTimeProperties");
}

id objc_msgSend__lengthUnitFromUnit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lengthUnitFromUnit:");
}

id objc_msgSend__maps_addressBookAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_maps_addressBookAllowed");
}

id objc_msgSend__navigation_distanceUsesMetricSystem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_navigation_distanceUsesMetricSystem");
}

id objc_msgSend__navigation_isEquivalentToTimeZone_forDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_navigation_isEquivalentToTimeZone:forDate:");
}

id objc_msgSend__styleAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_styleAttributes");
}

id objc_msgSend__unitStyleForUnit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unitStyleForUnit:");
}

id objc_msgSend_addAttributes_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttributes:range:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_airportStyleAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "airportStyleAttributes");
}

id objc_msgSend_appendAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendAttributedString:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_arrivalBatteryCharge(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrivalBatteryCharge");
}

id objc_msgSend_arrivalInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrivalInfo");
}

id objc_msgSend_arrivalState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrivalState");
}

id objc_msgSend_arrivalTimeStringIncludingAMPMSymbols_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrivalTimeStringIncludingAMPMSymbols:");
}

id objc_msgSend_attributedStringWithAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedStringWithAttachment:");
}

id objc_msgSend_autoupdatingCurrentLocale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoupdatingCurrentLocale");
}

id objc_msgSend_avatarImageForContacts_scope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "avatarImageForContacts:scope:");
}

id objc_msgSend_avatarImageWithSize_scale_rightToLeft_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "avatarImageWithSize:scale:rightToLeft:");
}

id objc_msgSend_batteryChargeRemainingAtEndOfLeg(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batteryChargeRemainingAtEndOfLeg");
}

id objc_msgSend_calendarEventStyleAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarEventStyleAttributes");
}

id objc_msgSend_capHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "capHeight");
}

id objc_msgSend_carRentalStyleAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "carRentalStyleAttributes");
}

id objc_msgSend_chargeImageOfSize_batteryLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chargeImageOfSize:batteryLevel:");
}

id objc_msgSend_chargingInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chargingInfo");
}

id objc_msgSend_chargingStationInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chargingStationInfo");
}

id objc_msgSend_components_fromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "components:fromDate:");
}

id objc_msgSend_considerMyAllowanceAsLimited_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "considerMyAllowanceAsLimited:");
}

id objc_msgSend_considerMyNewLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "considerMyNewLocation:");
}

id objc_msgSend_containsKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsKey:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentCalendar");
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentLocale");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "date");
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateBySettingHour_minute_second_ofDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateBySettingHour:minute:second:ofDate:options:");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultTimeZone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultTimeZone");
}

id objc_msgSend_destination(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destination");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_displayDateForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayDateForDate:");
}

id objc_msgSend_displayETAToEndOfLeg(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayETAToEndOfLeg");
}

id objc_msgSend_displayMinutesForTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayMinutesForTimeInterval:");
}

id objc_msgSend_displayRemainingMinutesToEndOfLeg(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayRemainingMinutesToEndOfLeg");
}

id objc_msgSend_distanceRemainingToEndOfLeg(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distanceRemainingToEndOfLeg");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_eta(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eta");
}

id objc_msgSend_etaDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "etaDate");
}

id objc_msgSend_etaDateStringWithAMPMSymbol_allowTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "etaDateStringWithAMPMSymbol:allowTimeZone:");
}

id objc_msgSend_evChargingInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evChargingInfo");
}

id objc_msgSend_feet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feet");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstObject");
}

id objc_msgSend_geoMapItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "geoMapItem");
}

id objc_msgSend_hardwareIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hardwareIdentifier");
}

id objc_msgSend_hasObservers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasObservers");
}

id objc_msgSend_homeStyleAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "homeStyleAttributes");
}

id objc_msgSend_hotelStyleAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hotelStyleAttributes");
}

id objc_msgSend_hour(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hour");
}

id objc_msgSend_iconData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iconData");
}

id objc_msgSend_imageForSize_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageForSize:scale:");
}

id objc_msgSend_imageWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithData:");
}

id objc_msgSend_initWithGeoMapItem_isPlaceHolderPlace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithGeoMapItem:isPlaceHolderPlace:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerValue");
}

id objc_msgSend_isArrivedAtEVCharger(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isArrivedAtEVCharger");
}

id objc_msgSend_isAuthorizedForPreciseLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAuthorizedForPreciseLocation");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isEtaToFinalDestination(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEtaToFinalDestination");
}

id objc_msgSend_isInArrivalState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInArrivalState");
}

id objc_msgSend_isInParkingState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInParkingState");
}

id objc_msgSend_isShortcut(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isShortcut");
}

id objc_msgSend_kilometers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kilometers");
}

id objc_msgSend_lastLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastLocation");
}

id objc_msgSend_leg(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leg");
}

id objc_msgSend_legIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "legIndex");
}

id objc_msgSend_legIndexForStepIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "legIndexForStepIndex:");
}

id objc_msgSend_legInfos(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "legInfos");
}

id objc_msgSend_legs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "legs");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_localizedStringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringWithFormat:");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainBundle");
}

id objc_msgSend_markerStyleAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markerStyleAttributes");
}

id objc_msgSend_meters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "meters");
}

id objc_msgSend_miles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "miles");
}

id objc_msgSend_minute(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minute");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "name");
}

id objc_msgSend_nearbyTransitStyleAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyTransitStyleAttributes");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_parkedCarStyleAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parkedCarStyleAttributes");
}

id objc_msgSend_placeholderImageProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeholderImageProvider");
}

id objc_msgSend_pointSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointSize");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_replaceCharactersInRange_withAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceCharactersInRange:withAttributedString:");
}

id objc_msgSend_restaurantStyleAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restaurantStyleAttributes");
}

id objc_msgSend_route(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "route");
}

id objc_msgSend_routeMatch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "routeMatch");
}

id objc_msgSend_routeRequestStorageForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "routeRequestStorageForKey:");
}

id objc_msgSend_schoolStyleAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "schoolStyleAttributes");
}

id objc_msgSend_scopeWithPointSize_scale_rightToLeft_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeWithPointSize:scale:rightToLeft:style:");
}

id objc_msgSend_setBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBounds:");
}

id objc_msgSend_setClientCapabilitiesHardwareIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientCapabilitiesHardwareIdentifier:");
}

id objc_msgSend_setDefaultTraitsHardwareIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultTraitsHardwareIdentifier:");
}

id objc_msgSend_setIconData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIconData:");
}

id objc_msgSend_setImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImage:");
}

id objc_msgSend_setLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocale:");
}

id objc_msgSend_setLocalizedDateFormatFromTemplate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalizedDateFormatFromTemplate:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeZone:");
}

id objc_msgSend_setUnitStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnitStyle:");
}

id objc_msgSend_setUserValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserValues:");
}

id objc_msgSend_sharedLocationManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedLocationManager");
}

id objc_msgSend_sharedLocationStyleAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedLocationStyleAttributes");
}

id objc_msgSend_sharedPlatform(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedPlatform");
}

id objc_msgSend_sharedService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedService");
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "size");
}

id objc_msgSend_startLocationUpdateWithObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startLocationUpdateWithObserver:");
}

id objc_msgSend_stepIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stepIndex");
}

id objc_msgSend_stopLocationUpdateWithObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopLocationUpdateWithObserver:");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "string");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForKey:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_ticketedEventStyleAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ticketedEventStyleAttributes");
}

id objc_msgSend_timeZone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeZone");
}

id objc_msgSend_transportType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transportType");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "type");
}

id objc_msgSend_undecoratedTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undecoratedTitle");
}

id objc_msgSend_uniqueIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueIdentifier");
}

id objc_msgSend_unit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unit");
}

id objc_msgSend_unitStringFromValue_unit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unitStringFromValue:unit:");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_userValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userValues");
}

id objc_msgSend_waypointDisplayInfoForWaypoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waypointDisplayInfoForWaypoint:");
}

id objc_msgSend_waypoints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waypoints");
}

id objc_msgSend_workStyleAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workStyleAttributes");
}

id objc_msgSend_yards(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "yards");
}
