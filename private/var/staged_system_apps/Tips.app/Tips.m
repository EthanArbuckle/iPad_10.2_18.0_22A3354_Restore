void sub_1000035F0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_100003770(319, (unint64_t *)&unk_1000B5418, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100003770(319, (unint64_t *)&qword_1000B4650, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_10007C3E8;
      v6[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

void sub_1000036AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  sub_100003770(319, (unint64_t *)&unk_1000B5418, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100003770(319, (unint64_t *)&qword_1000B4650, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_10007A8F8;
      v6[3] = &unk_10007A910;
      v6[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

void sub_100003770(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Environment.Content(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_100003A74()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  id v11[2];

  v1 = type metadata accessor for Locale(0);
  __chkstk_darwin(v1);
  v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v4);
  v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*((_BYTE *)v0 + OBJC_IVAR___CollectionListViewController_searchActive) == 1)
  {
    v7 = String.LocalizationValue.init(stringLiteral:)(0x545F484352414553, 0xEC000000454C5449);
    static Locale.current.getter(v7);
    String.init(localized:table:bundle:locale:comment:)(v6, 0, 0, 0, v3, "Navigation title when Search is being active", 44, 2);
    v9 = v8;
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9);
    objc_msgSend(v0, "setTitle:", v10);

  }
  else
  {
    if (qword_1000B3FB8 != -1)
      swift_once(&qword_1000B3FB8, sub_1000043F0);
    v11[0] = String._bridgeToObjectiveC()();
    objc_msgSend(v0, "setTitle:", v11[0]);

  }
}

uint64_t type metadata accessor for TipListViewController()
{
  return objc_opt_self(TipListViewController);
}

uint64_t sub_100003CE8(uint64_t a1, int a2, void *aBlock)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t (*v6)();
  uint64_t (**v7)();
  uint64_t v8;
  uint64_t v9;

  v4 = _Block_copy(aBlock);
  if (v4)
  {
    v5 = v4;
    v4 = (_QWORD *)swift_allocObject(&unk_1000A4478, 24, 7);
    v4[2] = v5;
    v6 = sub_10003B588;
  }
  else
  {
    v6 = 0;
  }
  v7 = (uint64_t (**)())(a1 + qword_1000B90D8);
  v9 = *(_QWORD *)(a1 + qword_1000B90D8);
  v8 = *(_QWORD *)(a1 + qword_1000B90D8 + 8);
  *v7 = v6;
  v7[1] = (uint64_t (*)())v4;
  return sub_100005500(v9, v8);
}

void sub_100003D54(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000B4650)
  {
    v2 = type metadata accessor for ColorScheme(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000B4650);
  }
}

uint64_t sub_100003DA8(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_100003E60(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for ScrollViewProxy(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_100003F34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000187A4(&qword_1000B5340);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 48);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 2);
    v8 = (uint64_t)*(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    v10 = v9;
    result = sub_10001023C(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v10;
    v14 = v4[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100004098(uint64_t a1, void *a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  id v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  KeyPath = swift_getKeyPath(&unk_10007B508);
  v4 = swift_getKeyPath(&unk_10007B530);
  v5 = a2;
  static Published.subscript.getter(v12, v5, KeyPath, v4);

  swift_release(KeyPath);
  result = swift_release(v4);
  if (LOBYTE(v12[0]) == 1)
  {
    v7 = swift_getKeyPath(&unk_10007B5A0);
    v8 = swift_getKeyPath(&unk_10007B5C8);
    v9 = v5;
    static Published.subscript.getter(v12, v9, v7, v8);

    swift_release(v7);
    result = swift_release(v8);
    if ((v12[0] & 1) == 0)
    {
      v10 = swift_getKeyPath(&unk_10007B568);
      v11 = swift_getKeyPath(&unk_10007B5E8);
      v12[0] = 0;
      v12[1] = 0;
      static Published.subscript.setter(v12, v9, v10, v11);
      return sub_10003A1B0();
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for TipCollection(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t sub_1000041E8(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100004284(void **a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FeaturedCollectionView(0) - 8) + 80);
  return sub_1000108F0(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_1000042C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FeaturedCollectionView(0) - 8) + 80);
  return sub_100007C80(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_1000043F0()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[16];

  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v1 = &v7[-((v0 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin();
  v3 = &v7[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000015, 0x800000010008BFA0);
  static Locale.current.getter(v4);
  result = String.init(localized:table:bundle:locale:comment:)(v3, 0, 0, 0, v1, "Navigation title for Collections of tips view", 45, 2);
  qword_1000B9060 = result;
  *(_QWORD *)algn_1000B9068 = v6;
  return result;
}

unint64_t sub_1000044D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_100018DD8(a1, v7);
}

void sub_100004628(char *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _BYTE v6[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_10000AE88(v2);

  }
}

Swift::Bool __swiftcall TPSLastDisplayedContent.hasContent()()
{
  uint64_t v0;
  id v1;
  unsigned __int8 v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v7[24];

  v1 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v2 = objc_msgSend(v1, "isRunningTest");

  if ((v2 & 1) != 0)
    return 0;
  v4 = (_QWORD *)(v0 + OBJC_IVAR___TPSLastDisplayedContent_collectionId);
  swift_beginAccess(v0 + OBJC_IVAR___TPSLastDisplayedContent_collectionId, v7, 0, 0);
  if (*v4)
    return 1;
  v5 = (_QWORD *)(v0 + OBJC_IVAR___TPSLastDisplayedContent_tipId);
  swift_beginAccess(v0 + OBJC_IVAR___TPSLastDisplayedContent_tipId, &v6, 0, 0);
  return *v5 != 0;
}

unint64_t sub_100004804(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000187A4(&qword_1000B5330);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000121BC(v7, (uint64_t)&v14, &qword_1000B5820);
    v8 = v14;
    result = sub_1000044D4(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_100018DC8(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CollectionListViewController()
{
  return objc_opt_self(CollectionListViewController);
}

id sub_100004950(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void (*v11)(char *, char *, uint64_t);
  int v12;
  uint64_t v13;
  char v16[24];

  v3 = type metadata accessor for ColorScheme(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = ((uint64_t (*)(void))__chkstk_darwin)();
  v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v16[-v8 - 8];
  v10 = &v1[OBJC_IVAR___CollectionListViewModel_colorScheme];
  swift_beginAccess(&v1[OBJC_IVAR___CollectionListViewModel_colorScheme], v16, 0, 0);
  v11 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v11(v9, v10, v3);
  v11(v7, v9, v3);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  v13 = 0;
  if (v12 != enum case for ColorScheme.light(_:))
  {
    if (v12 == enum case for ColorScheme.dark(_:))
    {
      v13 = 1;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      v13 = 0;
    }
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  return objc_msgSend(v1, "assetsInfoFor:userInterfaceStyle:", a1, v13);
}

void sub_100004BA0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[7];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  void *v20;

  v15[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v15[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_100018CCC(319, (unint64_t *)&qword_1000B4890, (uint64_t)&type metadata for Bool);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v15[2] = v4;
    sub_100004D18(319, &qword_1000B4898, &qword_1000B48A0);
    if (v6 <= 0x3F)
    {
      v15[3] = *(_QWORD *)(v5 - 8) + 64;
      v15[4] = v4;
      sub_100004D18(319, (unint64_t *)&qword_1000B48A8, &qword_1000B4198);
      if (v8 <= 0x3F)
      {
        v15[5] = *(_QWORD *)(v7 - 8) + 64;
        sub_100004D18(319, &qword_1000B48B0, &qword_1000B48B8);
        if (v10 <= 0x3F)
        {
          v15[6] = *(_QWORD *)(v9 - 8) + 64;
          sub_100004D18(319, &qword_1000B48C0, &qword_1000B48C8);
          if (v12 <= 0x3F)
          {
            v16 = *(_QWORD *)(v11 - 8) + 64;
            v17 = v16;
            sub_100018CCC(319, &qword_1000B48D0, (uint64_t)&type metadata for TipCollection);
            if (v14 <= 0x3F)
            {
              v18 = *(_QWORD *)(v13 - 8) + 64;
              v19 = "\b";
              v20 = &unk_1000792B0;
              swift_updateClassMetadata2(a1, 256, 12, v15, a1 + 80);
            }
          }
        }
      }
    }
  }
}

void sub_100004D18(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = sub_1000176F8(a3);
    v6 = type metadata accessor for Published(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_100004F64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  sub_100015BC0(a2, a3, a4);
  v6 = a4 + *(int *)(sub_1000187A4(&qword_1000B5D38) + 36);
  v7 = type metadata accessor for ScrollViewProxy(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6, a1, v7);
}

uint64_t sub_100004FC0()
{
  char *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void (**v4)(char);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  objc_super v9;

  v9.receiver = v0;
  v9.super_class = (Class)type metadata accessor for TipListViewController();
  objc_msgSendSuper2(&v9, "viewDidLoad");
  sub_100009910(0);
  v1 = objc_msgSend(v0, "navigationItem");
  objc_msgSend(v1, "setLargeTitleDisplayMode:", 2);

  v2 = *(_QWORD *)&v0[OBJC_IVAR___TipListViewController_viewModel];
  v3 = swift_allocObject(&unk_1000A4528, 24, 7);
  *(_QWORD *)(v3 + 16) = v0;
  v4 = (void (**)(char))(v2 + qword_1000B90C8);
  v5 = *(_QWORD *)(v2 + qword_1000B90C8);
  v6 = (uint64_t)v4[1];
  *v4 = sub_1000530A0;
  v4[1] = (void (*)(char))v3;
  v7 = v0;
  return sub_100005500(v5, v6);
}

BOOL sub_100005120(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *Strong;
  void *v4;
  id v5;
  id v6;
  _BYTE v8[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2);
  if (!Strong)
    return 1;
  v4 = Strong;
  v5 = objc_msgSend(Strong, "traitCollection");

  v6 = objc_msgSend(v5, "horizontalSizeClass");
  return v6 != 0;
}

uint64_t sub_100005398(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1 + qword_1000B5678;
  v3 = sub_1000187A4(&qword_1000B44D8);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(v2, v3);
  v5 = a1 + qword_1000B5680;
  v6 = sub_1000187A4(&qword_1000B5720);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v4(a1 + qword_1000B5688, v3);
  v4(a1 + qword_1000B5690, v3);
  v7 = a1 + qword_1000B5698;
  v8 = sub_1000187A4(&qword_1000B5718);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(a1 + qword_1000B56A0, v8);
  v10 = a1 + qword_1000B56A8;
  v11 = sub_1000187A4(&qword_1000B4930);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = a1 + qword_1000B56B0;
  v13 = sub_1000187A4(&qword_1000B4918);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  sub_100005500(*(_QWORD *)(a1 + qword_1000B90C8), *(_QWORD *)(a1 + qword_1000B90C8 + 8));
  return sub_100005500(*(_QWORD *)(a1 + qword_1000B90D8), *(_QWORD *)(a1 + qword_1000B90D8 + 8));
}

uint64_t sub_100005500(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t *sub_100005648(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B41C0);
    v6 = sub_1000187A4(&qword_1000B41C0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  *v13 = *v14;
  v15 = (void *)v14[1];
  v16 = (void *)v13[1];
  v13[1] = v15;
  v17 = v15;

  v18 = a3[6];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  *v19 = *v20;
  v21 = *((_QWORD *)v19 + 1);
  v22 = *((_QWORD *)v20 + 1);
  *((_QWORD *)v19 + 1) = v22;
  swift_retain(v22);
  swift_release(v21);
  v23 = a3[7];
  v24 = (uint64_t *)((char *)a1 + v23);
  v25 = (char *)a2 + v23;
  *v24 = *(uint64_t *)((char *)a2 + v23);
  v26 = *(uint64_t *)((char *)a2 + v23 + 8);
  v27 = *(uint64_t *)((char *)a1 + v23 + 8);
  v24[1] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  v24[2] = *((_QWORD *)v25 + 2);
  v28 = *((_QWORD *)v25 + 3);
  v29 = v24[3];
  v24[3] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  v30 = a3[8];
  v31 = *(void **)((char *)a2 + v30);
  v32 = *(void **)((char *)a1 + v30);
  *(uint64_t *)((char *)a1 + v30) = (uint64_t)v31;
  v33 = v31;

  return a1;
}

uint64_t sub_1000057C0(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v6 = *a2;
  if ((unint64_t)*a2 >> 62)
  {
    if (v6 < 0)
      v8 = *a2;
    else
      v8 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*a2);
    v9 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease(v6);
    if (v9)
      goto LABEL_3;
  }
  else if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    v7 = *a2;
    swift_bridgeObjectRetain(v7);
    goto LABEL_9;
  }
  v7 = 0;
LABEL_9:
  KeyPath = swift_getKeyPath(&unk_100079420);
  v11 = swift_getKeyPath(&unk_100079448);
  v20 = v7;
  v12 = a1;
  static Published.subscript.setter(&v20, v12, KeyPath, v11);
  v13 = *a3;
  if ((unint64_t)*a3 >> 62)
  {
    if (v13 < 0)
      v15 = *a3;
    else
      v15 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*a3);
    v16 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease(v13);
    if (v16)
      goto LABEL_11;
LABEL_16:
    v14 = 0;
    goto LABEL_17;
  }
  if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_16;
LABEL_11:
  v14 = *a3;
  swift_bridgeObjectRetain(v14);
LABEL_17:
  v17 = swift_getKeyPath(&unk_100079468);
  v18 = swift_getKeyPath(&unk_100079490);
  v20 = v14;
  return static Published.subscript.setter(&v20, v12, v17, v18);
}

id sub_100005930@<X0>(void **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v4;
  uint64_t v5;
  char *Strong;
  uint64_t v7;
  _BYTE v9[24];

  v4 = *a1;
  if (!*a1)
  {
    v5 = a2 + 16;
    swift_beginAccess(a2 + 16, v9, 0, 0);
    Strong = (char *)swift_unknownObjectWeakLoadStrong(v5);
    v4 = 0;
    if (Strong)
    {
      v7 = *(_QWORD *)&Strong[OBJC_IVAR___CollectionListViewModel_featuredAssetViewModel];
      *(_QWORD *)&Strong[OBJC_IVAR___CollectionListViewModel_featuredAssetViewModel] = 0;

      swift_release(v7);
      v4 = 0;
    }
  }
  *a3 = v4;
  return v4;
}

void sub_1000059AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  char *v34;

  sub_100019714();
  if (v3 <= 0x3F)
  {
    v19[0] = *(_QWORD *)(v2 - 8) + 64;
    v19[1] = v19[0];
    sub_100004D18(319, (unint64_t *)&qword_1000B48A8, &qword_1000B4198);
    if (v5 <= 0x3F)
    {
      v20 = *(_QWORD *)(v4 - 8) + 64;
      v21 = v20;
      sub_100004D18(319, &qword_1000B4898, &qword_1000B48A0);
      if (v7 <= 0x3F)
      {
        v8 = *(_QWORD *)(v6 - 8) + 64;
        v22 = v8;
        v23 = v8;
        sub_100019818(319);
        if (v10 <= 0x3F)
        {
          v24 = *(_QWORD *)(v9 - 8) + 64;
          v25 = v8;
          sub_100004D18(319, &qword_1000B4A98, &qword_1000B4AA0);
          if (v12 <= 0x3F)
          {
            v26 = *(_QWORD *)(v11 - 8) + 64;
            sub_100004D18(319, &qword_1000B4AA8, &qword_1000B4AB0);
            if (v14 <= 0x3F)
            {
              v27 = *(_QWORD *)(v13 - 8) + 64;
              sub_100004D18(319, &qword_1000B4AB8, &qword_1000B4AC0);
              if (v16 <= 0x3F)
              {
                v28 = *(_QWORD *)(v15 - 8) + 64;
                v29 = "\b";
                v30 = &unk_100079690;
                v31 = &unk_100079690;
                v32 = &unk_100079690;
                v17 = type metadata accessor for ColorScheme(319);
                if (v18 <= 0x3F)
                {
                  v33 = *(_QWORD *)(v17 - 8) + 64;
                  v34 = (char *)&value witness table for Builtin.BridgeObject + 64;
                  swift_updateClassMetadata2(a1, 256, 17, v19, a1 + 80);
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_100005C2C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

id sub_100005D54(void *a1)
{
  char *v1;
  uint64_t v3;
  objc_class *v4;
  id v5;
  char *v6;
  id v7;
  id v8;
  id v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  objc_super v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;

  v3 = OBJC_IVAR___TipListViewController_viewModel;
  v4 = (objc_class *)type metadata accessor for TipListViewModel(0);
  v5 = objc_allocWithZone(v4);
  v6 = v1;
  v7 = objc_msgSend(v5, "init");
  *(_QWORD *)&v1[v3] = v7;
  if (a1)
  {
    *(_QWORD *)&v1[v3] = a1;
    v8 = a1;

    v7 = *(id *)&v1[v3];
  }
  v23 = 0;
  v9 = v7;
  State.init(wrappedValue:)(&v18, &v23, &type metadata for Bool);
  v10 = v18;
  v11 = v19;
  v12 = sub_1000041E8(&qword_1000B4BE0, type metadata accessor for TipListViewModel, (uint64_t)&protocol conformance descriptor for TipNavigationViewModel);
  v13 = ObservedObject.init(wrappedValue:)(v9, v4, v12);
  v18 = 0;
  v19 = v13;
  v20 = v14;
  v21 = v10;
  v22 = v11;
  v15 = objc_allocWithZone((Class)sub_1000187A4(&qword_1000B5828));
  *(_QWORD *)&v6[OBJC_IVAR___TipListViewController_hostingController] = UIHostingController.init(rootView:)(&v18);

  v17.receiver = v6;
  v17.super_class = (Class)type metadata accessor for TipListViewController();
  return objc_msgSendSuper2(&v17, "initWithNibName:bundle:", 0, 0);
}

uint64_t sub_100005E88(void **a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t result;
  char *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v12, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = (char *)result;
    v6 = v2;
    v7 = objc_msgSend(v5, "assetsInfoFor:", v6);
    type metadata accessor for TipsContentModel(0);
    v8 = static TipsContentModel.shared()();
    v9 = type metadata accessor for DocumentAssetViewModel(0);
    swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    v10 = DocumentAssetViewModel.init(document:assetsInfo:contentModel:)(v6, v7, v8);
    v11 = *(_QWORD *)&v5[OBJC_IVAR___CollectionListViewModel_featuredAssetViewModel];
    *(_QWORD *)&v5[OBJC_IVAR___CollectionListViewModel_featuredAssetViewModel] = v10;

    return swift_release(v11);
  }
  return result;
}

void sub_1000060BC(void *a1)
{
  id v1;
  id v2;
  void *v3;
  id v4;
  objc_super v5;

  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for SearchResultsViewController(0);
  v1 = v5.receiver;
  objc_msgSendSuper2(&v5, "viewDidLoad");
  v2 = objc_msgSend(v1, "view", v5.receiver, v5.super_class);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v3, "setBackgroundColor:", v4);

  }
  else
  {
    __break(1u);
  }
}

_QWORD *sub_100006178()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0;
  v8 = _swiftEmptyArrayStorage;
  KeyPath = swift_getKeyPath(&unk_100079420);
  v3 = swift_getKeyPath(&unk_100079448);
  static Published.subscript.getter(&v7, v1, KeyPath, v3);
  swift_release(KeyPath);
  swift_release(v3);
  if (v7)
    sub_100019034(v7);
  v4 = swift_getKeyPath(&unk_100079468);
  v5 = swift_getKeyPath(&unk_100079490);
  static Published.subscript.getter(&v7, v1, v4, v5);
  swift_release(v4);
  swift_release(v5);
  if (v7)
    sub_100019034(v7);
  return v8;
}

int main(int argc, const char **argv, const char **envp)
{
  int v3;
  char **v4;
  uint64_t v5;
  objc_class *ObjCClassFromMetadata;
  NSString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v11;
  NSString *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = static CommandLine.argc.getter(*(_QWORD *)&argc, argv, envp);
  v4 = (char **)static CommandLine.unsafeArgv.getter();
  v5 = sub_100006578(0, &qword_1000B4030, &off_1000A1F70);
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v5);
  v7 = NSStringFromClass(ObjCClassFromMetadata);
  if (!v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v9 = v8;
    v7 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9);
  }
  v10 = sub_100006578(0, &qword_1000B4038, &off_1000A1F58);
  v11 = (objc_class *)swift_getObjCClassFromMetadata(v10);
  v12 = NSStringFromClass(v11);
  if (!v12)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v14 = v13;
    v12 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
  }
  UIApplicationMain(v3, v4, v7, v12);

  return 0;
}

uint64_t sub_100006578(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1000065B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  char *v27;
  char *v28;
  unint64_t v29;
  _QWORD v31[2];
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v34 = *(_QWORD *)(v0 - 8);
  v35 = v0;
  __chkstk_darwin(v0);
  v33 = (char *)v31 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_1000187A4(&qword_1000B5CE0);
  v3 = __chkstk_darwin(v2);
  v32 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)v31 - v5;
  v7 = sub_1000187A4(&qword_1000B61E0);
  __chkstk_darwin(v7);
  v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Locale(0);
  __chkstk_darwin(v14);
  v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v17);
  v19 = (char *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for LocalizedStringResource(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[1] = sub_1000187A4(&qword_1000B5CE8);
  v24 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000024, 0x800000010008D1B0);
  static Locale.current.getter(v24);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for LocalizedStringResource.BundleDescription.main(_:), v10);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v19, 0, 0, v16, v13, "Title of the parameter that specifies the target collection when running an AppIntent that opens a tip collection.", 114, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v9, 1, 1, v20);
  v25 = type metadata accessor for IntentDialog(0);
  memset(v36, 0, 32);
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v26(v6, 1, 1, v25);
  v27 = v32;
  v26(v32, 1, 1, v25);
  v28 = v33;
  (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v33, enum case for InputConnectionBehavior.default(_:), v35);
  v29 = sub_100019FCC();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v23, v9, v36, v6, v27, v28, v29);
}

id sub_1000068BC(void *a1)
{
  char *v1;
  uint64_t v3;
  objc_class *v4;
  id v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  objc_super v16;
  _QWORD v17[2];

  v3 = OBJC_IVAR___CollectionListViewController_viewModel;
  v4 = (objc_class *)type metadata accessor for CollectionListViewModel(0);
  v5 = objc_allocWithZone(v4);
  v6 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v5, "init");
  v6[OBJC_IVAR___CollectionListViewController_canIncreaseViewCount] = 1;
  v7 = OBJC_IVAR___CollectionListViewController_searchResultsViewModel;
  *(_QWORD *)&v6[v7] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SearchResultsViewModel(0)), "init");
  *(_QWORD *)&v6[OBJC_IVAR___CollectionListViewController_searchResultsViewController] = 0;
  *(_QWORD *)&v6[OBJC_IVAR___CollectionListViewController_searchController] = 0;
  v6[OBJC_IVAR___CollectionListViewController_searchActive] = 0;
  *(_QWORD *)&v6[OBJC_IVAR___CollectionListViewController_cancellables] = &_swiftEmptySetSingleton;
  v8 = &v6[OBJC_IVAR___CollectionListViewController_searchResultSelectedHandler];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  if (a1)
  {
    v9 = *(void **)&v1[v3];
    *(_QWORD *)&v1[v3] = a1;
    v10 = a1;

  }
  v11 = *(void **)&v1[v3];
  v12 = sub_1000041E8(&qword_1000B4510, type metadata accessor for CollectionListViewModel, (uint64_t)&unk_1000796A8);
  v17[0] = ObservedObject.init(wrappedValue:)(v11, v4, v12);
  v17[1] = v13;
  v14 = objc_allocWithZone((Class)sub_1000187A4(&qword_1000B4518));
  *(_QWORD *)&v6[OBJC_IVAR___CollectionListViewController_hostingController] = UIHostingController.init(rootView:)(v17);

  v16.receiver = v6;
  v16.super_class = (Class)type metadata accessor for CollectionListViewController();
  return objc_msgSendSuper2(&v16, "initWithNibName:bundle:", 0, 0);
}

_QWORD *initializeBufferWithCopyOfBuffer for CollectionListView(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = v3;
  return a1;
}

void sub_100006A6C(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_1000187A4(&qword_1000B5260);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }

}

void sub_100006B58()
{
  char *v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void (*v30)(id);
  uint64_t v31;
  id v32;
  uint64_t v33;

  KeyPath = swift_getKeyPath(&unk_100079390);
  v2 = swift_getKeyPath(&unk_1000793B8);
  static Published.subscript.getter(&v32, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  v3 = v33;
  swift_bridgeObjectRelease(v33);
  if (v3)
    return;
  v4 = swift_getKeyPath(&unk_1000793D8);
  v5 = swift_getKeyPath(&unk_100079400);
  static Published.subscript.getter(&v32, v0, v4, v5);
  swift_release(v4);
  swift_release(v5);
  v6 = v32;

  if (v6)
    return;
  v7 = swift_getKeyPath(&unk_1000794B0);
  v8 = swift_getKeyPath(&unk_1000794D8);
  static Published.subscript.getter(&v32, v0, v7, v8);
  swift_release(v7);
  swift_release(v8);
  if ((v32 & 1) != 0)
    return;
  v9 = *(_QWORD *)&v0[OBJC_IVAR___TPSChecklistViewModel_currentDisplayTips];
  if (v9)
  {
    if ((unint64_t)v9 >> 62)
    {
      if (v9 >= 0)
        v15 = v9 & 0xFFFFFFFFFFFFFF8;
      else
        v15 = *(_QWORD *)&v0[OBJC_IVAR___TPSChecklistViewModel_currentDisplayTips];
      swift_bridgeObjectRetain(*(_QWORD *)&v0[OBJC_IVAR___TPSChecklistViewModel_currentDisplayTips]);
      v10 = _CocoaArrayWrapper.endIndex.getter(v15);
      if (v10)
        goto LABEL_7;
    }
    else
    {
      v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)&v0[OBJC_IVAR___TPSChecklistViewModel_currentDisplayTips]);
      if (v10)
      {
LABEL_7:
        if ((v9 & 0xC000000000000001) != 0)
        {
          v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v9);
        }
        else
        {
          if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          v11 = *(id *)(v9 + 32);
        }
        v12 = v11;
        swift_bridgeObjectRelease(v9);
        v13 = objc_msgSend(v12, "identifier");

        v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        v10 = v14;

        goto LABEL_17;
      }
    }
    swift_bridgeObjectRelease(v9);
    v9 = 0;
  }
  else
  {
    v10 = 0;
  }
LABEL_17:
  v16 = swift_getKeyPath(&unk_100079390);
  v17 = swift_getKeyPath(&unk_1000793B8);
  v32 = (id)v9;
  v33 = v10;
  v18 = v0;
  static Published.subscript.setter(&v32, v18, v16, v17);
  v19 = swift_getKeyPath(&unk_100079390);
  v20 = swift_getKeyPath(&unk_1000793B8);
  static Published.subscript.getter(&v32, v18, v19, v20);
  swift_release(v19);
  swift_release(v20);
  v21 = v33;
  if (v33)
  {
    v22 = (void *)sub_100036580((uint64_t)v32, v33);
    swift_bridgeObjectRelease(v21);
    v23 = swift_getKeyPath(&unk_1000793D8);
    v24 = swift_getKeyPath(&unk_100079400);
    v32 = v22;
    v25 = v22;
    v26 = v18;
    static Published.subscript.setter(&v32, v26, v23, v24);
    v27 = swift_getKeyPath(&unk_1000793D8);
    v28 = swift_getKeyPath(&unk_100079400);
    static Published.subscript.getter(&v32, v26, v27, v28);
    swift_release(v27);
    swift_release(v28);
    v29 = v32;
    if (v32)
    {
      v30 = *(void (**)(id))&v26[OBJC_IVAR___TPSChecklistViewModel_actionHandler];
      if (v30)
      {
        v31 = *(_QWORD *)&v26[OBJC_IVAR___TPSChecklistViewModel_actionHandler + 8];
        swift_retain(v31);
        v30(v29);
        sub_100005500((uint64_t)v30, v31);
      }

      v25 = v29;
    }

  }
}

uint64_t *sub_100006ECC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B5260);
    v6 = sub_1000187A4(&qword_1000B5260);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_100011DE0((uint64_t)a1 + v12, &qword_1000B41C0);
    v15 = sub_1000187A4(&qword_1000B41C0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = a3[6];
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  *v22 = *v23;
  v24 = (void *)v23[1];
  v25 = (void *)v22[1];
  v22[1] = v24;
  v26 = v24;

  v27 = a3[7];
  v28 = (uint64_t *)((char *)a1 + v27);
  v29 = (char *)a2 + v27;
  *v28 = *(uint64_t *)((char *)a2 + v27);
  v30 = *(uint64_t *)((char *)a2 + v27 + 8);
  v31 = *(uint64_t *)((char *)a1 + v27 + 8);
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v28[2] = *((_QWORD *)v29 + 2);
  v32 = *((_QWORD *)v29 + 3);
  v33 = v28[3];
  v28[3] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v34 = a3[8];
  v35 = *(void **)((char *)a2 + v34);
  v36 = *(void **)((char *)a1 + v34);
  *(uint64_t *)((char *)a1 + v34) = (uint64_t)v35;
  v37 = v35;

  return a1;
}

uint64_t sub_1000070A4(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  v4 = sub_1000187A4(&qword_1000B41B8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for UserInterfaceSizeClass(0);
    v6 = *(_QWORD *)(v5 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5))
      (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v7 = (_QWORD *)((char *)a1 + a2[5]);
  v8 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }

  v10 = (char *)a1 + a2[7];
  swift_bridgeObjectRelease(*((_QWORD *)v10 + 1));
  return swift_release(*((_QWORD *)v10 + 2));
}

void sub_1000071A4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;

  KeyPath = swift_getKeyPath(&unk_1000796E0);
  v2 = swift_getKeyPath(&unk_100079708);
  static Published.subscript.getter(&v11, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  v3 = v11;
  v4 = swift_getKeyPath(&unk_100079728);
  v5 = swift_getKeyPath(&unk_100079750);
  static Published.subscript.getter(&v11, v0, v4, v5);
  swift_release(v4);
  swift_release(v5);
  v6 = v11;
  v7 = swift_getKeyPath(&unk_100079780);
  v8 = swift_getKeyPath(&unk_1000797A8);
  if (v3)
  {
    v11 = v3;
    v9 = v3;
    v10 = v6;
    static Published.subscript.setter(&v11, v10, v7, v8);
    sub_1000354B4();

  }
  else
  {
    v11 = 0;
    v10 = v6;
    static Published.subscript.setter(&v11, v10, v7, v8);
    sub_1000354B4();
  }

}

uint64_t sub_100007314(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  objc_class *v10;
  id v11;
  char *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  __int128 v27;
  uint64_t v28;

  v3 = sub_1000187A4(&qword_1000B41B0);
  __chkstk_darwin(v3);
  v5 = (_QWORD *)((char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = (int *)type metadata accessor for SearchResultsView(0);
  __chkstk_darwin(v6);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = qword_1000B40B8;
  v10 = (objc_class *)type metadata accessor for SearchResultsViewModel(0);
  v11 = objc_allocWithZone(v10);
  v12 = v1;
  v13 = objc_msgSend(v11, "init");
  *(_QWORD *)&v1[v9] = a1;
  v14 = a1;

  *v5 = swift_getKeyPath(&unk_100078C88);
  v15 = sub_1000187A4(&qword_1000B41B8);
  swift_storeEnumTagMultiPayload(v5, v15, 0);
  KeyPath = swift_getKeyPath(&unk_100078CB8);
  v17 = (uint64_t *)&v8[v6[5]];
  *v17 = KeyPath;
  v18 = sub_1000187A4(&qword_1000B41C0);
  swift_storeEnumTagMultiPayload(v17, v18, 0);
  sub_10001961C((uint64_t)v5, (uint64_t)v8);
  v19 = &v8[v6[6]];
  v20 = sub_100019AF0();
  *(_QWORD *)v19 = ObservedObject.init(wrappedValue:)(v14, v10, v20);
  *((_QWORD *)v19 + 1) = v21;
  v22 = &v8[v6[7]];
  v26[0] = 0;
  v26[1] = 0;
  v23 = sub_1000187A4(&qword_1000B4198);
  State.init(wrappedValue:)(&v27, v26, v23);
  v24 = v28;
  *(_OWORD *)v22 = v27;
  *((_QWORD *)v22 + 2) = v24;
  return UIHostingController.init(rootView:)(v8);
}

uint64_t *sub_1000074E8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;

  v6 = sub_1000187A4(&qword_1000B5260);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[6];
  v22 = a3[7];
  v23 = (uint64_t *)((char *)a1 + v21);
  v24 = (uint64_t *)((char *)a2 + v21);
  v26 = *v24;
  v25 = (void *)v24[1];
  *v23 = v26;
  v23[1] = v25;
  v27 = *(void **)((char *)a2 + v22);
  *(uint64_t *)((char *)a1 + v22) = (uint64_t)v27;
  v28 = v25;
  v29 = v27;
  return a1;
}

uint64_t *sub_100007808(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;

  v6 = sub_1000187A4(&qword_1000B41B8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for UserInterfaceSizeClass(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_1000187A4(&qword_1000B41C8);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a1;
    v12 = v6;
    v13 = 1;
  }
  else
  {
    v10 = *a2;
    *a1 = *a2;
    swift_retain(v10);
    v11 = a1;
    v12 = v6;
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v11, v12, v13);
  v14 = a3[5];
  v15 = (uint64_t *)((char *)a1 + v14);
  v16 = (uint64_t *)((char *)a2 + v14);
  v17 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
    v19 = v15;
    v20 = v17;
    v21 = 1;
  }
  else
  {
    v22 = *v16;
    *v15 = *v16;
    swift_retain(v22);
    v19 = v15;
    v20 = v17;
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v19, v20, v21);
  v23 = a3[6];
  v24 = a3[7];
  v25 = (uint64_t *)((char *)a1 + v23);
  v26 = (uint64_t *)((char *)a2 + v23);
  v28 = *v26;
  v27 = (void *)v26[1];
  *v25 = v28;
  v25[1] = v27;
  v29 = (uint64_t *)((char *)a1 + v24);
  v30 = (uint64_t *)((char *)a2 + v24);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  v32 = v30[2];
  v29[2] = v32;
  v33 = v27;
  swift_bridgeObjectRetain(v31);
  swift_retain(v32);
  return a1;
}

uint64_t sub_1000079C4(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;

  v6 = sub_1000187A4(&qword_1000B4500);
  v7 = swift_allocObject(v6, 40, 7);
  *(_OWORD *)(v7 + 16) = xmmword_10007B480;
  *(_QWORD *)(v7 + 32) = a1;
  v18 = v7;
  specialized Array._endMutation()(v7);
  KeyPath = swift_getKeyPath(&unk_10007B740);
  v9 = swift_allocObject(&unk_1000A48F0, 32, 7);
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  v10 = a1;
  v11 = a3;
  v12 = sub_1000187A4(&qword_1000B4AA0);
  v13 = sub_1000187A4(&qword_1000B5E20);
  v14 = sub_1000086E8(&qword_1000B5E80, &qword_1000B4AA0, (uint64_t)&protocol conformance descriptor for [A]);
  v15 = sub_100007AF8();
  v16 = sub_100007B50();
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t (*)@<X0>(id *@<X0>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))ForEach<>.init(_:id:content:))(&v18, KeyPath, sub_100018B6C, v9, v12, v13, v14, v15, v16);
}

unint64_t sub_100007AF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5E88;
  if (!qword_1000B5E88)
  {
    v1 = sub_100006578(255, (unint64_t *)&qword_1000B61F0, TPSCollection_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5E88);
  }
  return result;
}

unint64_t sub_100007B50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5E18;
  if (!qword_1000B5E18)
  {
    v1 = sub_1000176F8(&qword_1000B5E20);
    sub_10000A890();
    sub_1000041E8(&qword_1000B5E40, type metadata accessor for CollectionListItemView, (uint64_t)&unk_10007A928);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5E18);
  }
  return result;
}

uint64_t sub_100007C80@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  _BYTE v23[16];
  uint64_t v24;
  _OWORD v25[3];

  v4 = type metadata accessor for FeaturedCollectionView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = sub_1000187A4(&qword_1000B4768);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000A968(a1, (uint64_t)&v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for FeaturedCollectionView);
  v11 = *(unsigned __int8 *)(v5 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = swift_allocObject(&unk_1000A3568, v12 + v6, v11 | 7);
  sub_100011E1C((uint64_t)&v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v13 + v12);
  v24 = a1;
  v14 = sub_1000187A4(&qword_1000B4770);
  v15 = sub_100007E38();
  v16 = Button.init(action:label:)(sub_10003495C, v13, sub_100018B38, v23, v14, v15);
  v17 = GeometryProxy.size.getter(v16);
  v18 = static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)(v25, *(_QWORD *)&v17, 0, 0, 1, v18, v19);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v8 + 16))(a2, v10, v7);
  v20 = (_OWORD *)(a2 + *(int *)(sub_1000187A4(&qword_1000B4798) + 36));
  v21 = v25[1];
  *v20 = v25[0];
  v20[1] = v21;
  v20[2] = v25[2];
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
}

unint64_t sub_100007E38()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000B4778;
  if (!qword_1000B4778)
  {
    v1 = sub_1000176F8(&qword_1000B4770);
    v2[0] = type metadata accessor for RemoteVideoView(255);
    v2[1] = sub_1000041E8(&qword_1000B4780, (uint64_t (*)(uint64_t))&type metadata accessor for RemoteVideoView, (uint64_t)&protocol conformance descriptor for RemoteVideoView);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.assetContentMode(_:)>>, 1);
    sub_1000086E8(&qword_1000B4788, &qword_1000B4790, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4778);
  }
  return result;
}

uint64_t sub_100007EFC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = a1;
  v4 = (uint64_t (__cdecl *)())((char *)&dword_1000B61E8 + dword_1000B61E8);
  v2 = (_QWORD *)swift_task_alloc(unk_1000B61EC);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_100007EF8;
  return v4();
}

uint64_t sub_100007F5C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[5];
  uint64_t v33;

  v27 = a1;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v6 - 8);
  v30 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v26 - v14;
  sub_100006578(0, (unint64_t *)&qword_1000B44A0, OS_dispatch_queue_ptr);
  v16 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)(v13, 0.15);
  v28 = *(void (**)(char *, uint64_t))(v10 + 8);
  v28(v13, v9);
  v17 = swift_allocObject(&unk_1000A4878, 32, 7);
  *(_QWORD *)(v17 + 16) = v27;
  *(_QWORD *)(v17 + 24) = a2;
  aBlock[4] = sub_100019D68;
  v33 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100003DA8;
  aBlock[3] = &unk_1000A4890;
  v18 = _Block_copy(aBlock);
  v19 = v33;
  v20 = a2;
  v21 = swift_release(v19);
  static DispatchQoS.unspecified.getter(v21);
  aBlock[0] = _swiftEmptyArrayStorage;
  v22 = sub_1000041E8((unint64_t *)&qword_1000B44A8, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_1000187A4(&qword_1000B44B0);
  v24 = sub_1000086E8((unint64_t *)&qword_1000B44B8, &qword_1000B44B0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v3, v22);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v15, v8, v5, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v30);
  return ((uint64_t (*)(char *, uint64_t))v28)(v15, v9);
}

uint64_t sub_10000820C(uint64_t a1, void *a2)
{
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  KeyPath = swift_getKeyPath(&unk_10007B7F8);
  v5 = swift_getKeyPath(&unk_10007B820);
  v6 = a2;
  static Published.subscript.getter(&v15, v6, KeyPath, v5);

  swift_release(KeyPath);
  swift_release(v5);
  v7 = swift_getKeyPath(&unk_10007B840);
  v8 = swift_allocObject(&unk_1000A4918, 32, 7);
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = v6;
  v9 = v6;
  v10 = sub_1000187A4(&qword_1000B4AC0);
  v11 = type metadata accessor for UserGuideListItemView(0);
  v12 = sub_1000086E8(&qword_1000B5EB8, &qword_1000B4AC0, (uint64_t)&protocol conformance descriptor for [A]);
  v13 = sub_1000041E8(&qword_1000B5EB0, type metadata accessor for UserGuideListItemView, (uint64_t)&unk_10007C400);
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t (*)@<X0>(void **@<X0>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t))ForEach<>.init(_:id:content:))(&v15, v7, sub_100019D78, v8, v10, v11, v12, &protocol witness table for String, v13);
}

uint64_t type metadata accessor for UserGuideListItemView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B6898;
  if (!qword_1000B6898)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UserGuideListItemView);
  return result;
}

void sub_1000083A0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  objc_class *v11;
  id v12;
  void *v13;
  id v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[24];
  objc_super v29;

  v1 = v0;
  v2 = sub_1000187A4(&qword_1000B44C0);
  v25 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000187A4(&qword_1000B44C8);
  v26 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000187A4(&qword_1000B44D0);
  v27 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (objc_class *)type metadata accessor for CollectionListViewController();
  v29.receiver = v0;
  v29.super_class = v11;
  objc_msgSendSuper2(&v29, "viewDidLoad");
  v12 = objc_msgSend(v0, "navigationController");
  if (v12)
  {
    v13 = v12;
    v14 = objc_msgSend(v12, "navigationBar");

    objc_msgSend(v14, "setPrefersLargeTitles:", 1);
  }
  v15 = *(char **)&v1[OBJC_IVAR___CollectionListViewController_viewModel];
  swift_beginAccess(&v15[OBJC_IVAR___CollectionListViewModel__viewCollapsed], v28, 33, 0);
  v16 = v15;
  v17 = sub_1000187A4(&qword_1000B44D8);
  Published.projectedValue.getter(v17);
  swift_endAccess(v28);

  v18 = swift_allocObject(&unk_1000A3398, 24, 7);
  swift_unknownObjectWeakInit(v18 + 16, v1);
  v19 = sub_1000086E8(&qword_1000B44E0, &qword_1000B44C0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  Publisher.filter(_:)(sub_1000198A8, v18, v2, v19);
  swift_release(v18);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v4, v2);
  v20 = sub_1000086E8(&qword_1000B44E8, &qword_1000B44C8, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  Publisher<>.removeDuplicates()(v5, v20, &protocol witness table for Bool);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v5);
  v21 = swift_allocObject(&unk_1000A3398, 24, 7);
  swift_unknownObjectWeakInit(v21 + 16, v1);
  v22 = sub_1000086E8(&qword_1000B44F0, &qword_1000B44D0, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v23 = Publisher<>.sink(receiveValue:)(sub_10001986C, v21, v8, v22);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v8);
  v24 = &v1[OBJC_IVAR___CollectionListViewController_cancellables];
  swift_beginAccess(&v1[OBJC_IVAR___CollectionListViewController_cancellables], v28, 33, 0);
  AnyCancellable.store(in:)(v24);
  swift_endAccess(v28);
  swift_release(v23);
  sub_100003A74();
}

uint64_t sub_1000086E8(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000176F8(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100008B80()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  v1 = (int *)type metadata accessor for FeaturedCollectionView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = v4 + v5;

  swift_release(*(_QWORD *)((char *)v6 + v1[6] + 8));
  v10 = (char *)v6 + v1[7];
  swift_bridgeObjectRelease(*((_QWORD *)v10 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v10 + 3));

  return swift_deallocObject(v0, v9, v3 | 7);
}

uint64_t sub_100008C6C(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 48));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100008CA4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100008CD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for ChecklistView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)((char *)v6 + *(int *)(v1 + 20));
  v10 = sub_1000187A4(&qword_1000B5008);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }

  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100008DE8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (int *)type metadata accessor for ChecklistItemView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_1000187A4(&qword_1000B5260);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }

  swift_release(*(_QWORD *)((char *)v6 + v1[6] + 16));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100008EBC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100008EF0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v1 = (int *)type metadata accessor for SearchResultsView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_1000187A4(&qword_1000B41B8);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for UserInterfaceSizeClass(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v0 + v4, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v10 = (_QWORD *)((char *)v6 + v1[5]);
  v11 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }

  v13 = (char *)v6 + v1[7];
  swift_bridgeObjectRelease(*((_QWORD *)v13 + 1));
  swift_release(*((_QWORD *)v13 + 2));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100009034()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;

  v1 = (int *)type metadata accessor for UserGuideSearchResultItemView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_1000187A4(&qword_1000B6388);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for ScenePhase(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = v4 + v5;

  v10 = (char *)v6 + v1[7];
  v11 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = (char *)v6 + v1[8];
  sub_100014658(*(_QWORD *)v12, *((_QWORD *)v12 + 1), v12[16]);
  swift_bridgeObjectRelease(*((_QWORD *)v12 + 3));
  v13 = (char *)v6 + v1[9];
  sub_100014658(*(_QWORD *)v13, *((_QWORD *)v13 + 1), v13[16]);
  swift_bridgeObjectRelease(*((_QWORD *)v13 + 3));
  swift_release(*(_QWORD *)((char *)v6 + v1[10] + 8));
  swift_release(*(_QWORD *)((char *)v6 + v1[11] + 8));
  swift_release(*(_QWORD *)((char *)v6 + v1[12] + 16));
  return swift_deallocObject(v0, v9, v3 | 7);
}

uint64_t sub_100009184()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v1 = (int *)type metadata accessor for TipListItemTipBodyView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_1000187A4(&qword_1000B5950);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for BackgroundProminence(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)((char *)v6 + v1[5]);
  v10 = sub_1000187A4(&qword_1000B6388);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for ScenePhase(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v12 = v3 | 7;
  v13 = v4 + v5;
  sub_10005FE00(*(_QWORD *)((char *)v6 + v1[6]), *((_BYTE *)v6 + v1[6] + 8));

  v14 = (char *)v6 + v1[9];
  v15 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v16 = (char *)v6 + v1[10];
  sub_100014658(*(_QWORD *)v16, *((_QWORD *)v16 + 1), v16[16]);
  swift_bridgeObjectRelease(*((_QWORD *)v16 + 3));
  swift_release(*(_QWORD *)((char *)v6 + v1[12] + 8));
  swift_release(*(_QWORD *)((char *)v6 + v1[13] + 8));
  swift_release(*(_QWORD *)((char *)v6 + v1[14] + 16));
  return swift_deallocObject(v0, v13, v12);
}

uint64_t sub_100009324()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for ScrollVerticallyTestSupport(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  v6 = v0 + v3;
  v7 = type metadata accessor for ScrollViewProxy(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100009394(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  NSString v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;

  v4 = sub_1000187A4(&qword_1000B4698);
  v5 = __chkstk_darwin(v4);
  v53 = (uint64_t)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v52 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v52 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v52 - v13;
  v15 = objc_msgSend(a1, "featuredAssets");
  v16 = objc_msgSend(a1, "language");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v18 = v17;

  v19 = objc_msgSend(a1, "assetFileInfoManager");
  v20 = objc_allocWithZone((Class)TPSAssetsConfiguration);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  v22 = objc_msgSend(v20, "initWithAssets:language:userInterfaceStyle:assetFileInfoManager:", v15, v21, a2, v19);

  v23 = (void *)objc_opt_self(TPSContentURLController);
  v24 = v22;
  v25 = objc_msgSend(v23, "assetPathFromAssetConfiguration:type:", v24, 0);
  if (v25)
  {
    v26 = v25;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v29 = v28;

    URL.init(string:)(v27, v29);
    swift_bridgeObjectRelease(v29);
  }
  else
  {

    v30 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v14, 1, 1, v30);

  }
  v31 = objc_msgSend(v24, "cacheIdentifierForType:", 0);
  if (v31)
  {
    v32 = v31;
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v35 = v34;

  }
  else
  {
    v33 = 0;
    v35 = 0;
  }
  v36 = v24;
  v37 = objc_msgSend(v23, "assetPathFromAssetConfiguration:type:", v36, 1);
  if (v37)
  {
    v38 = v37;
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v41 = v40;

    URL.init(string:)(v39, v41);
    swift_bridgeObjectRelease(v41);
  }
  else
  {

    v42 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v12, 1, 1, v42);

  }
  v43 = objc_msgSend(v36, "cacheIdentifierForType:", 1);
  if (v43)
  {
    v44 = v43;
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v47 = v46;

  }
  else
  {
    v45 = 0;
    v47 = 0;
  }
  sub_100009780((uint64_t)v12, (uint64_t)v9);
  v48 = v53;
  sub_100009780((uint64_t)v14, v53);
  v49 = objc_allocWithZone((Class)type metadata accessor for TPSAssetsInfo(0));
  v50 = TPSAssetsInfo.init(videoIdentifier:videoURL:imageIdentifier:imageURL:)(v45, v47, v9, v33, v35, v48);

  sub_100009740((uint64_t)v12);
  sub_100009740((uint64_t)v14);
  return v50;
}

uint64_t sub_100009740(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000187A4(&qword_1000B4698);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100009780(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000187A4(&qword_1000B4698);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000098EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100009910(char a1)
{
  char *v1;
  char *v2;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  Swift::String v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t inited;
  NSString *v18;
  id v19;
  unint64_t v20;
  Class isa;
  id v22;
  id v23;
  void *v24;
  id v25;
  char v26[72];

  v2 = v1;
  v4 = objc_msgSend(objc_allocWithZone((Class)UINavigationBarAppearance), "init");
  v5 = (void *)objc_opt_self(UIColor);
  v6 = objc_msgSend(v5, "tintColor");
  objc_msgSend(v4, "configureWithDefaultBackground");
  if ((a1 & 1) != 0
    || (*(_BYTE *)(*(_QWORD *)&v2[OBJC_IVAR___TipListViewController_viewModel] + qword_1000B90B8) & 1) != 0)
  {
    v7 = 0;
  }
  else
  {
    v8 = objc_msgSend(v5, "whiteColor");

    sub_100006578(0, &qword_1000B5818, UIImage_ptr);
    v6 = v8;
    v9._object = (void *)0x800000010008D0C0;
    v9._countAndFlagsBits = 0xD000000000000010;
    v10 = (void *)UIImage.init(systemImageName:)(v9);
    if (v10)
    {
      v11 = v10;
      v7 = objc_msgSend(v10, "imageWithTintColor:renderingMode:", v6, 1);

    }
    else
    {

      v7 = 0;
    }
    v12 = v4;
    v13 = objc_msgSend(v5, "clearColor");
    objc_msgSend(v12, "setBackgroundColor:", v13);

  }
  v14 = objc_msgSend(v4, "backButtonAppearance");
  v15 = objc_msgSend(v14, "normal");
  v16 = sub_1000187A4(&qword_1000B4950);
  inited = swift_initStackObject(v16, v26);
  *(_OWORD *)(inited + 16) = xmmword_1000791F0;
  *(_QWORD *)(inited + 32) = NSForegroundColorAttributeName;
  *(_QWORD *)(inited + 64) = sub_100006578(0, &qword_1000B44F8, UIColor_ptr);
  *(_QWORD *)(inited + 40) = v6;
  v18 = NSForegroundColorAttributeName;
  v19 = v6;
  v20 = sub_100004804(inited);
  type metadata accessor for Key(0);
  sub_1000041E8(&qword_1000B4098, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100078B90);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v20);
  objc_msgSend(v15, "setTitleTextAttributes:", isa);

  objc_msgSend(v4, "setBackIndicatorImage:transitionMaskImage:", v7, v7);
  v22 = objc_msgSend(v2, "navigationItem");
  objc_msgSend(v22, "setStandardAppearance:", v4);

  v23 = objc_msgSend(v2, "navigationController");
  if (v23)
  {
    v24 = v23;
    v25 = objc_msgSend(v23, "navigationBar");

    objc_msgSend(v25, "setTintColor:", v19);
  }
  if (objc_msgSend((id)objc_opt_self(TPSCommonDefines), "isPhoneUI"))
    objc_msgSend(v2, "setNeedsStatusBarAppearanceUpdate");

}

void sub_100009C94()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  Class isa;
  objc_super v34;

  v1 = v0;
  v34.receiver = v0;
  v34.super_class = (Class)type metadata accessor for TipListViewController();
  objc_msgSendSuper2(&v34, "loadView");
  v2 = *(void **)&v0[OBJC_IVAR___TipListViewController_hostingController];
  v3 = objc_msgSend(v2, "view");
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v0, "addChildViewController:", v2);
    v5 = objc_msgSend(v0, "view");
    if (v5)
    {
      v6 = v5;
      objc_msgSend(v5, "addSubview:", v4);

      v7 = objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
      objc_msgSend(v4, "setBackgroundColor:", v7);

      objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      v8 = objc_msgSend(v1, "view");
      if (v8)
      {
        v9 = v8;
        v10 = sub_1000187A4(&qword_1000B4500);
        v11 = swift_allocObject(v10, 64, 7);
        *(_OWORD *)(v11 + 16) = xmmword_100078F30;
        v12 = objc_msgSend(v4, "leadingAnchor");
        v13 = objc_msgSend(v1, "view");
        if (v13)
        {
          v14 = v13;
          v15 = objc_msgSend(v13, "leadingAnchor");

          v16 = objc_msgSend(v12, "constraintEqualToAnchor:", v15);
          *(_QWORD *)(v11 + 32) = v16;
          v17 = objc_msgSend(v4, "topAnchor");
          v18 = objc_msgSend(v1, "view");
          if (v18)
          {
            v19 = v18;
            v20 = objc_msgSend(v18, "topAnchor");

            v21 = objc_msgSend(v17, "constraintEqualToAnchor:", v20);
            *(_QWORD *)(v11 + 40) = v21;
            v22 = objc_msgSend(v4, "trailingAnchor");
            v23 = objc_msgSend(v1, "view");
            if (v23)
            {
              v24 = v23;
              v25 = objc_msgSend(v23, "trailingAnchor");

              v26 = objc_msgSend(v22, "constraintEqualToAnchor:", v25);
              *(_QWORD *)(v11 + 48) = v26;
              v27 = objc_msgSend(v4, "bottomAnchor");
              v28 = objc_msgSend(v1, "view");
              if (v28)
              {
                v29 = v28;
                v30 = objc_msgSend(v28, "bottomAnchor");

                v31 = objc_msgSend(v27, "constraintEqualToAnchor:", v30);
                *(_QWORD *)(v11 + 56) = v31;
                specialized Array._endMutation()(v32);
                sub_100006578(0, (unint64_t *)&qword_1000B4508, NSLayoutConstraint_ptr);
                isa = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease(v11);
                objc_msgSend(v9, "addConstraints:", isa);

                objc_msgSend(v2, "didMoveToParentViewController:", v1);
                return;
              }
LABEL_15:
              __break(1u);
              return;
            }
LABEL_14:
            __break(1u);
            goto LABEL_15;
          }
LABEL_13:
          __break(1u);
          goto LABEL_14;
        }
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
}

void sub_10000A064()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  Class isa;
  objc_super v34;

  v1 = v0;
  v34.receiver = v0;
  v34.super_class = (Class)type metadata accessor for CollectionListViewController();
  objc_msgSendSuper2(&v34, "loadView");
  v2 = *(void **)&v0[OBJC_IVAR___CollectionListViewController_hostingController];
  v3 = objc_msgSend(v2, "view");
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v0, "addChildViewController:", v2);
    v5 = objc_msgSend(v0, "view");
    if (v5)
    {
      v6 = v5;
      objc_msgSend(v5, "addSubview:", v4);

      v7 = objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
      objc_msgSend(v4, "setBackgroundColor:", v7);

      objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      v8 = objc_msgSend(v1, "view");
      if (v8)
      {
        v9 = v8;
        v10 = sub_1000187A4(&qword_1000B4500);
        v11 = swift_allocObject(v10, 64, 7);
        *(_OWORD *)(v11 + 16) = xmmword_100078F30;
        v12 = objc_msgSend(v4, "leadingAnchor");
        v13 = objc_msgSend(v1, "view");
        if (v13)
        {
          v14 = v13;
          v15 = objc_msgSend(v13, "leadingAnchor");

          v16 = objc_msgSend(v12, "constraintEqualToAnchor:", v15);
          *(_QWORD *)(v11 + 32) = v16;
          v17 = objc_msgSend(v4, "topAnchor");
          v18 = objc_msgSend(v1, "view");
          if (v18)
          {
            v19 = v18;
            v20 = objc_msgSend(v18, "topAnchor");

            v21 = objc_msgSend(v17, "constraintEqualToAnchor:", v20);
            *(_QWORD *)(v11 + 40) = v21;
            v22 = objc_msgSend(v4, "trailingAnchor");
            v23 = objc_msgSend(v1, "view");
            if (v23)
            {
              v24 = v23;
              v25 = objc_msgSend(v23, "trailingAnchor");

              v26 = objc_msgSend(v22, "constraintEqualToAnchor:", v25);
              *(_QWORD *)(v11 + 48) = v26;
              v27 = objc_msgSend(v4, "bottomAnchor");
              v28 = objc_msgSend(v1, "view");
              if (v28)
              {
                v29 = v28;
                v30 = objc_msgSend(v28, "bottomAnchor");

                v31 = objc_msgSend(v27, "constraintEqualToAnchor:", v30);
                *(_QWORD *)(v11 + 56) = v31;
                specialized Array._endMutation()(v32);
                sub_100006578(0, (unint64_t *)&qword_1000B4508, NSLayoutConstraint_ptr);
                isa = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease(v11);
                objc_msgSend(v9, "addConstraints:", isa);

                objc_msgSend(v2, "didMoveToParentViewController:", v1);
                return;
              }
LABEL_15:
              __break(1u);
              return;
            }
LABEL_14:
            __break(1u);
            goto LABEL_15;
          }
LABEL_13:
          __break(1u);
          goto LABEL_14;
        }
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
}

uint64_t sub_10000A434@<X0>(id *a1@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t KeyPath;
  uint64_t v20;
  id v21;
  id v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v57 = a3;
  v56 = type metadata accessor for CollectionListItemView(0);
  __chkstk_darwin(v56);
  v6 = (uint64_t *)((char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_1000187A4(&qword_1000B5E90);
  __chkstk_darwin(v7);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FeaturedCollectionView(0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_1000187A4(&qword_1000B5E30);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v51 - v17;
  v55 = *a1;
  KeyPath = swift_getKeyPath(&unk_10007B508);
  v20 = swift_getKeyPath(&unk_10007B530);
  v21 = a2;
  static Published.subscript.getter(&v58, v21, KeyPath, v20);

  swift_release(KeyPath);
  swift_release(v20);
  if (v58 == 1)
  {
    v22 = v21;
    sub_100033E04(v22, v55, v12);
    sub_10000A968((uint64_t)v12, (uint64_t)v16, type metadata accessor for FeaturedCollectionView);
    v23 = &v16[*(int *)(v13 + 36)];
    v23[32] = 0;
    *(_OWORD *)v23 = 0u;
    *((_OWORD *)v23 + 1) = 0u;
    sub_10000A92C((uint64_t)v12, type metadata accessor for FeaturedCollectionView);
    sub_100014780((uint64_t)v16, (uint64_t)v18, &qword_1000B5E30);
    sub_1000121BC((uint64_t)v18, (uint64_t)v9, &qword_1000B5E30);
    swift_storeEnumTagMultiPayload(v9, v7, 0);
    v24 = sub_10000A890();
    v25 = sub_1000041E8(&qword_1000B5E40, type metadata accessor for CollectionListItemView, (uint64_t)&unk_10007A928);
    _ConditionalContent<>.init(storage:)(v9, v13, v56, v24, v25);
    return sub_100011DE0((uint64_t)v18, &qword_1000B5E30);
  }
  else
  {
    v52 = v7;
    v53 = v9;
    v54 = v13;
    *v6 = swift_getKeyPath(&unk_10007B758);
    v27 = sub_1000187A4(&qword_1000B5260);
    swift_storeEnumTagMultiPayload(v6, v27, 0);
    v28 = (int *)v56;
    v29 = (_QWORD *)((char *)v6 + *(int *)(v56 + 20));
    *v29 = swift_getKeyPath(&unk_10007B788);
    v30 = sub_1000187A4(&qword_1000B41C0);
    swift_storeEnumTagMultiPayload(v29, v30, 0);
    v31 = (_QWORD *)((char *)v6 + v28[6]);
    v32 = type metadata accessor for CollectionListViewModel(0);
    v33 = sub_1000041E8(&qword_1000B4510, type metadata accessor for CollectionListViewModel, (uint64_t)&unk_1000796A8);
    v34 = v21;
    v35 = v55;
    *v31 = ObservedObject.init(wrappedValue:)(v34, v32, v33);
    v31[1] = v36;
    *(_QWORD *)((char *)v6 + v28[8]) = v35;
    v37 = v35;
    v38 = objc_msgSend(v37, "identifier");
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v41 = v40;

    v42 = objc_msgSend(v37, "title");
    if (v42)
    {
      v43 = v42;
      v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      v46 = v45;

    }
    else
    {

      v44 = 0;
      v46 = 0xE000000000000000;
    }
    v47 = (uint64_t)v53;
    v48 = (_QWORD *)((char *)v6 + v28[7]);
    *v48 = v39;
    v48[1] = v41;
    v48[2] = v44;
    v48[3] = v46;
    sub_10000A968((uint64_t)v6, v47, type metadata accessor for CollectionListItemView);
    swift_storeEnumTagMultiPayload(v47, v52, 1);
    v49 = sub_10000A890();
    v50 = sub_1000041E8(&qword_1000B5E40, type metadata accessor for CollectionListItemView, (uint64_t)&unk_10007A928);
    _ConditionalContent<>.init(storage:)(v47, v54, v28, v49, v50);
    return sub_10000A92C((uint64_t)v6, type metadata accessor for CollectionListItemView);
  }
}

unint64_t sub_10000A890()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5E28;
  if (!qword_1000B5E28)
  {
    v1 = sub_1000176F8(&qword_1000B5E30);
    sub_1000041E8(&qword_1000B5E38, type metadata accessor for FeaturedCollectionView, (uint64_t)&unk_100079100);
    sub_1000086E8(&qword_1000B4EF0, &qword_1000B4EF8, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5E28);
  }
  return result;
}

uint64_t sub_10000A92C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000A968(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

double sub_10000A9AC@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  char v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  char v12;
  uint64_t (*v13)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v14;
  char v15;
  __int128 v16;
  char v17;

  v5 = a2;
  v6 = sub_10000ABE8();

  if ((v6 & 1) != 0)
  {
    v7 = swift_allocObject(&unk_1000A4800, 32, 7);
    *(_QWORD *)(v7 + 16) = a1;
    *(_QWORD *)(v7 + 24) = v5;
    v13 = sub_100018B50;
    v14 = v7;
    v15 = 0;
    v8 = v5;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = 1;
  }
  v9 = sub_1000187A4(&qword_1000B5D28);
  v10 = sub_1000086E8(&qword_1000B5D30, &qword_1000B5D28, (uint64_t)&protocol conformance descriptor for ScrollViewReader<A>);
  _ConditionalContent<>.init(storage:)(&v13, v9, &type metadata for EmptyView, v10, &protocol witness table for EmptyView);
  result = *(double *)&v16;
  v12 = v17;
  *(_OWORD *)a3 = v16;
  *(_BYTE *)(a3 + 16) = v12;
  return result;
}

void sub_10000AAE4(uint64_t a1)
{
  char *v1;
  void *v2;
  id v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  id v9;

  if (v1[OBJC_IVAR___CollectionListViewController_canIncreaseViewCount] == 1)
  {
    v2 = v1;
    v4 = *(id *)&v1[OBJC_IVAR___CollectionListViewController_viewModel];
    v5 = sub_10000ABE8();

    if ((v5 & 1) != 0)
    {
      objc_msgSend(v2, "cancelAnalyticsIncreaseCountViewForCollectionsViewDelay");
      static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      v7 = v6;
      v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v7);
      v9 = objc_msgSend((id)objc_opt_self(TPSViewSourceProxy), "proxyWithViewMethod:", v8);

      objc_msgSend(v2, "performSelector:withObject:afterDelay:", "analyticsIncreaseCountViewForCollectionsView:", v9, kTipsAnalyticsDelayedEventInterval);
    }
  }
}

uint64_t sub_10000ABE8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  int64_t v16;
  int64_t v17;

  KeyPath = swift_getKeyPath(&unk_1000798B0);
  v2 = swift_getKeyPath(&unk_1000798D8);
  static Published.subscript.getter(&v17, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  v3 = v17;
  if ((unint64_t)v17 >> 62)
  {
    if (v17 < 0)
      v15 = v17;
    else
      v15 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v17);
    v4 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v4 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v3);
  if (!v4)
  {
    v5 = swift_getKeyPath(&unk_1000798F8);
    v6 = swift_getKeyPath(&unk_100079920);
    static Published.subscript.getter(&v17, v0, v5, v6);
    swift_release(v5);
    swift_release(v6);
    v7 = v17;
    if ((unint64_t)v17 >> 62)
    {
      v16 = v17 < 0 ? v17 : v17 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v17);
      v8 = _CocoaArrayWrapper.endIndex.getter(v16);
      swift_bridgeObjectRelease(v7);
    }
    else
    {
      v8 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v7);
    if (!v8)
    {
      v9 = swift_getKeyPath(&unk_100079868);
      v10 = swift_getKeyPath(&unk_100079890);
      static Published.subscript.getter(&v17, v0, v9, v10);
      swift_release(v9);
      swift_release(v10);
      v11 = v17;

      if (!v11)
      {
        v12 = swift_getKeyPath(&unk_1000797C8);
        v13 = swift_getKeyPath(&unk_1000797F0);
        static Published.subscript.getter(&v17, v0, v12, v13);
        swift_release(v12);
        swift_release(v13);
        if (!v17)
          return 0;

      }
    }
  }
  return 1;
}

uint64_t sub_10000ADDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1 + qword_1000B55A0;
  v3 = sub_1000187A4(&qword_1000B44D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  v4 = a1 + qword_1000B55A8;
  v5 = sub_1000187A4(&qword_1000B5630);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + qword_1000B55B0;
  v7 = sub_1000187A4(&qword_1000B5628);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_1000B55B8));
}

void sub_10000AE88(char a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  void *v4;
  uint64_t KeyPath;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  id v60;
  void *v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  void *v67;
  id v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v2 = v1;
  if ((a1 & 1) != 0)
  {
    v3 = OBJC_IVAR___CollectionListViewController_searchResultsViewModel;
    v4 = *(void **)&v1[OBJC_IVAR___CollectionListViewController_searchResultsViewModel];
    KeyPath = swift_getKeyPath(&unk_100078F78);
    v6 = swift_getKeyPath(&unk_100078FA0);
    v7 = v4;
    static Published.subscript.getter(&v76, v7, KeyPath, v6);
    swift_release(KeyPath);
    swift_release(v6);
    v8 = v76;
    dispatch thunk of SearchResultsModel.searchResultEligibilityFilter.setter(sub_1000322EC, 0);

    swift_release(v8);
    v9 = *(void **)&v2[v3];
    v10 = swift_getKeyPath(&unk_100078F78);
    v11 = swift_getKeyPath(&unk_100078FA0);
    v12 = v9;
    static Published.subscript.getter(&v76, v12, v10, v11);
    swift_release(v10);
    swift_release(v11);
    v13 = v76;
    dispatch thunk of SearchResultsModel.searchResultCollectionResolver.setter(sub_1000322F8, 0);

    swift_release(v13);
    v14 = *(void **)&v2[v3];
    v15 = swift_getKeyPath(&unk_100078F78);
    v16 = swift_getKeyPath(&unk_100078FA0);
    v17 = v14;
    static Published.subscript.getter(&v76, v17, v15, v16);
    swift_release(v15);
    swift_release(v16);
    v18 = v76;
    dispatch thunk of SearchResultsModel.searchResultUserGuideResolver.setter(sub_100032304, 0);

    swift_release(v18);
    v19 = *(void **)&v2[v3];
    v20 = *(_QWORD *)&v2[OBJC_IVAR___CollectionListViewController_searchResultSelectedHandler];
    v21 = *(_QWORD *)&v2[OBJC_IVAR___CollectionListViewController_searchResultSelectedHandler + 8];
    v22 = swift_getKeyPath(&unk_100078F78);
    v23 = swift_getKeyPath(&unk_100078FA0);
    v24 = v19;
    sub_1000331C4(v20, v21);
    static Published.subscript.getter(&v76, v24, v22, v23);
    swift_release(v22);
    swift_release(v23);
    v25 = v76;
    dispatch thunk of SearchResultsModel.searchResultSelected.setter(v20, v21);

    swift_release(v25);
    v26 = *(void **)&v2[v3];
    v27 = swift_allocObject(&unk_1000A3398, 24, 7);
    swift_unknownObjectWeakInit(v27 + 16, v2);
    v28 = swift_getKeyPath(&unk_100078F78);
    v29 = swift_getKeyPath(&unk_100078FA0);
    v30 = v26;
    swift_retain(v27);
    static Published.subscript.getter(&v76, v30, v28, v29);
    swift_release(v28);
    swift_release(v29);
    v31 = v76;
    dispatch thunk of SearchResultsModel.searchResultsSeeAllHandler.setter(sub_1000331D4, v27);

    swift_release(v27);
    swift_release(v31);
    v32 = *(void **)&v2[v3];
    v33 = swift_allocObject(&unk_1000A3398, 24, 7);
    swift_unknownObjectWeakInit(v33 + 16, v2);
    v34 = swift_getKeyPath(&unk_100078F78);
    v35 = swift_getKeyPath(&unk_100078FA0);
    v36 = v32;
    swift_retain(v33);
    static Published.subscript.getter(&v76, v36, v34, v35);
    swift_release(v34);
    swift_release(v35);
    v37 = v76;
    dispatch thunk of SearchResultsModel.searchResultScrollHandler.setter(sub_1000331DC, v33);

    swift_release(v33);
    swift_release(v37);
    v38 = *(void **)&v2[v3];
    v39 = swift_allocObject(&unk_1000A3398, 24, 7);
    swift_unknownObjectWeakInit(v39 + 16, v2);
    v40 = swift_getKeyPath(&unk_100078F78);
    v41 = swift_getKeyPath(&unk_100078FA0);
    v42 = v38;
    swift_retain(v39);
    static Published.subscript.getter(&v76, v42, v40, v41);
    swift_release(v40);
    swift_release(v41);
    v43 = v76;
    dispatch thunk of SearchResultsModel.searchResultsUpdated.setter(sub_10000B550, v39);

    swift_release(v39);
    swift_release(v43);
    v44 = *(void **)&v2[v3];
    v45 = objc_allocWithZone((Class)type metadata accessor for SearchResultsViewController(0));
    v46 = v44;
    v47 = sub_100007314(v46);

    v48 = OBJC_IVAR___CollectionListViewController_searchResultsViewController;
    v49 = *(void **)&v2[OBJC_IVAR___CollectionListViewController_searchResultsViewController];
    *(_QWORD *)&v2[OBJC_IVAR___CollectionListViewController_searchResultsViewController] = v47;

    v50 = objc_msgSend(objc_allocWithZone((Class)UISearchController), "initWithSearchResultsController:", *(_QWORD *)&v2[v48]);
    v51 = OBJC_IVAR___CollectionListViewController_searchController;
    v52 = *(void **)&v2[OBJC_IVAR___CollectionListViewController_searchController];
    *(_QWORD *)&v2[OBJC_IVAR___CollectionListViewController_searchController] = v50;

    v53 = *(void **)&v2[v51];
    if (v53)
    {
      objc_msgSend(v53, "setSearchResultsUpdater:", v2);
      v54 = *(void **)&v2[v51];
      if (v54)
      {
        objc_msgSend(v54, "setDelegate:", v2);
        v55 = *(void **)&v2[v51];
        if (v55)
        {
          objc_msgSend(v55, "setHidesNavigationBarDuringPresentation:", 1);
          v56 = *(void **)&v2[v51];
          if (v56)
          {
            objc_msgSend(v56, "setObscuresBackgroundDuringPresentation:", 0);
            v57 = *(void **)&v2[v51];
            if (v57)
            {
              v58 = objc_msgSend(v57, "searchBar");
              objc_msgSend(v58, "setDelegate:", v2);

              v59 = *(void **)&v2[v51];
              if (v59)
              {
                v60 = objc_msgSend(v59, "searchBar");
                objc_msgSend(v60, "setAutocorrectionType:", 1);

                v61 = *(void **)&v2[v51];
                if (v61)
                {
                  v62 = objc_msgSend(v61, "searchBar");
                  objc_msgSend(v62, "setAutocapitalizationType:", 0);

                }
              }
            }
          }
        }
      }
    }
    v63 = objc_msgSend(v2, "navigationItem");
    v64 = *(id *)&v2[v51];
    objc_msgSend(v63, "setSearchController:", v64);

    v65 = objc_msgSend(v2, "navigationItem");
    objc_msgSend(v65, "setHidesSearchBarWhenScrolling:", 0);

    objc_msgSend(v2, "setDefinesPresentationContext:", 1);
  }
  else
  {
    v66 = objc_msgSend(v1, "navigationController");
    if (v66)
    {
      v67 = v66;

    }
    v68 = objc_msgSend(v2, "navigationItem");
    objc_msgSend(v68, "setSearchController:", 0);

    v69 = *(void **)&v2[OBJC_IVAR___CollectionListViewController_searchController];
    *(_QWORD *)&v2[OBJC_IVAR___CollectionListViewController_searchController] = 0;

    v2[OBJC_IVAR___CollectionListViewController_searchActive] = 0;
    v70 = *(void **)&v2[OBJC_IVAR___CollectionListViewController_searchResultsViewModel];
    v71 = swift_getKeyPath(&unk_100078F78);
    v72 = swift_getKeyPath(&unk_100078FA0);
    v73 = v70;
    static Published.subscript.getter(&v76, v73, v71, v72);
    swift_release(v71);
    v74 = swift_release(v72);
    v75 = v76;
    dispatch thunk of SearchResultsModel.reset()(v74);

    swift_release(v75);
    sub_100003A74();
  }
}

void sub_10000B550()
{
  uint64_t v0;

  sub_10000B558(v0);
}

void sub_10000B558(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  void *v4;
  void *v5;
  uint64_t KeyPath;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char **v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  char v20;
  id v21;
  void *v22;
  uint64_t v23;
  _BYTE v24[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v24, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = *(void **)(Strong + OBJC_IVAR___CollectionListViewController_searchResultsViewController);
    if (!v4)
    {
LABEL_12:

      return;
    }
    v5 = *(void **)(Strong + OBJC_IVAR___CollectionListViewController_searchResultsViewModel);
    KeyPath = swift_getKeyPath(&unk_100078F78);
    v7 = swift_getKeyPath(&unk_100078FA0);
    v8 = v4;
    v9 = v5;
    static Published.subscript.getter(&v23, v9, KeyPath, v7);
    swift_release(KeyPath);
    v10 = swift_release(v7);
    v11 = v23;
    LOBYTE(v7) = dispatch thunk of SearchResultsModel.hasStartedSearch.getter(v10);

    swift_release(v11);
    v12 = (void *)objc_opt_self(UIColor);
    v13 = &selRef_systemBackgroundColor;
    if ((v7 & 1) == 0)
      v13 = &selRef_clearColor;
    v14 = objc_msgSend(v12, *v13);
    v15 = objc_msgSend(v8, "view");
    if (v15)
    {
      v16 = v15;
      v17 = objc_msgSend(v15, "backgroundColor");

      if (v17)
      {
        sub_100006578(0, &qword_1000B44F8, UIColor_ptr);
        v18 = v14;
        v19 = v17;
        v20 = static NSObject.== infix(_:_:)(v19, v18);

        if ((v20 & 1) != 0)
        {
          v14 = v3;
          v3 = v8;
          v8 = v18;
LABEL_11:

          v3 = v8;
          goto LABEL_12;
        }
      }
      v21 = objc_msgSend(v8, "view");
      if (v21)
      {
        v22 = v21;
        objc_msgSend(v21, "setBackgroundColor:", v14);

        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

void sub_10000B788()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!objc_msgSend((id)objc_opt_self(TPSCommonDefines), "isPhoneUI"))
    return;
  v1 = objc_msgSend(v0, "viewControllers");
  v2 = sub_10000B974();
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if (!((unint64_t)v3 >> 62))
  {
    if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_22:
    swift_bridgeObjectRelease(v3);
    return;
  }
  if (v3 < 0)
    v15 = v3;
  else
    v15 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  v16 = _CocoaArrayWrapper.endIndex.getter(v15);
  swift_bridgeObjectRelease(v3);
  if (!v16)
    goto LABEL_22;
LABEL_4:
  if ((v3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
  }
  else
  {
    if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v4 = *(id *)(v3 + 32);
  }
  v5 = v4;
  swift_bridgeObjectRelease(v3);
  v6 = objc_opt_self(UINavigationController);
  v7 = (void *)swift_dynamicCastObjCClass(v5, v6);
  if (!v7 || (v8 = objc_msgSend(v7, "topViewController")) == 0)
  {
LABEL_15:

    return;
  }
  v9 = v8;
  v10 = objc_opt_self(UINavigationController);
  v11 = (void *)swift_dynamicCastObjCClass(v9, v10);
  if (!v11)
  {

    goto LABEL_15;
  }
  v12 = objc_msgSend(v11, "topViewController");
  if (v12)
  {
    v13 = v12;
    v14 = type metadata accessor for TipListViewController();
    if ((objc_msgSend(v13, "isKindOfClass:", swift_getObjCClassFromMetadata(v14)) & 1) != 0)
      objc_msgSend(v0, "viewControllerForColumn:", 1);

  }
  else
  {

  }
}

unint64_t sub_10000B974()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4800;
  if (!qword_1000B4800)
  {
    v1 = objc_opt_self(UIViewController);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000B4800);
  }
  return result;
}

uint64_t sub_10000B9B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

char *sub_10000B9F8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  objc_class *v52;
  id v53;
  objc_class *v54;
  id v55;
  uint64_t KeyPath;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (**v61)(uint64_t);
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  objc_super v101;
  id v102;
  char *v103;
  uint64_t v104;

  v94 = sub_1000187A4(&qword_1000B4AC8);
  v96 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v92 = (char *)&v80 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_1000187A4(&qword_1000B4AD0);
  v3 = *(_QWORD *)(v2 - 8);
  v97 = v2;
  v98 = v3;
  __chkstk_darwin(v2);
  v93 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000187A4(&qword_1000B4AD8);
  v6 = *(_QWORD *)(v5 - 8);
  v99 = v5;
  v100 = v6;
  __chkstk_darwin(v5);
  v95 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000187A4(&qword_1000B4AE0);
  v90 = *(_QWORD *)(v8 - 8);
  v91 = v8;
  __chkstk_darwin(v8);
  v89 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000187A4(&qword_1000B4AE8);
  v87 = *(_QWORD *)(v10 - 8);
  v88 = v10;
  __chkstk_darwin(v10);
  v86 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_1000187A4(&qword_1000B4AF0);
  v84 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v83 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_1000187A4(&qword_1000B4938);
  v81 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v14 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000187A4(&qword_1000B4930);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000187A4(&qword_1000B44D8);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = &v0[OBJC_IVAR___CollectionListViewModel__appInBackground];
  LOBYTE(v103) = 0;
  v24 = v0;
  Published.init(initialValue:)(&v103, &type metadata for Bool);
  v25 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  v25(v23, v22, v19);
  v26 = &v24[OBJC_IVAR___CollectionListViewModel__viewCollapsed];
  LOBYTE(v103) = 0;
  Published.init(initialValue:)(&v103, &type metadata for Bool);
  v25(v26, v22, v19);
  v27 = &v24[OBJC_IVAR___CollectionListViewModel__currentCollectionID];
  v103 = 0;
  v104 = 0;
  v28 = sub_1000187A4(&qword_1000B4198);
  Published.init(initialValue:)(&v103, v28);
  v29 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v29(v27, v18, v15);
  v30 = &v24[OBJC_IVAR___CollectionListViewModel__selectedCollectionID];
  v103 = 0;
  v104 = 0;
  Published.init(initialValue:)(&v103, v28);
  v29(v30, v18, v15);
  v31 = &v24[OBJC_IVAR___CollectionListViewModel__featuredCollection];
  v103 = 0;
  v32 = sub_1000187A4(&qword_1000B48A0);
  Published.init(initialValue:)(&v103, v32);
  v33 = *(void (**)(char *, char *, uint64_t))(v81 + 32);
  v34 = v82;
  v33(v31, v14, v82);
  v35 = &v24[OBJC_IVAR___CollectionListViewModel__checklistCollection];
  v103 = 0;
  Published.init(initialValue:)(&v103, v32);
  v33(v35, v14, v34);
  v36 = &v24[OBJC_IVAR___CollectionListViewModel__savedTipsCollection];
  v103 = 0;
  Published.init(initialValue:)(&v103, v32);
  v33(v36, v14, v34);
  v37 = &v24[OBJC_IVAR___CollectionListViewModel__collections];
  v103 = (char *)_swiftEmptyArrayStorage;
  v38 = sub_1000187A4(&qword_1000B4AA0);
  v39 = v83;
  Published.init(initialValue:)(&v103, v38);
  (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v37, v39, v85);
  v40 = &v24[OBJC_IVAR___CollectionListViewModel__collectionSections];
  v103 = (char *)_swiftEmptyArrayStorage;
  v41 = sub_1000187A4(&qword_1000B4AB0);
  v42 = v86;
  Published.init(initialValue:)(&v103, v41);
  (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v40, v42, v88);
  v43 = &v24[OBJC_IVAR___CollectionListViewModel__userGuides];
  v103 = (char *)_swiftEmptyArrayStorage;
  v44 = sub_1000187A4(&qword_1000B4AC0);
  v45 = v89;
  Published.init(initialValue:)(&v103, v44);
  (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v43, v45, v91);
  *(_QWORD *)&v24[OBJC_IVAR___CollectionListViewModel_featuredAssetViewModel] = 0;
  v46 = &v24[OBJC_IVAR___CollectionListViewModel_actionHandler];
  *(_QWORD *)v46 = 0;
  *((_QWORD *)v46 + 1) = 0;
  v47 = &v24[OBJC_IVAR___CollectionListViewModel_checklistHandler];
  *(_QWORD *)v47 = 0;
  *((_QWORD *)v47 + 1) = 0;
  v48 = &v24[OBJC_IVAR___CollectionListViewModel_userGuideHandler];
  *(_QWORD *)v48 = 0;
  *((_QWORD *)v48 + 1) = 0;
  v49 = &v24[OBJC_IVAR___CollectionListViewModel_colorScheme];
  v50 = enum case for ColorScheme.light(_:);
  v51 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 104))(v49, v50, v51);
  *(_QWORD *)&v24[OBJC_IVAR___CollectionListViewModel_cancellables] = &_swiftEmptySetSingleton;
  v52 = (objc_class *)type metadata accessor for ChecklistViewModel(0);
  v53 = objc_msgSend(objc_allocWithZone(v52), "init");
  swift_beginAccess(&v24[OBJC_IVAR___CollectionListViewModel__checklistViewModel], &v103, 33, 0);
  v102 = v53;
  Published.init(initialValue:)(&v102, v52);
  swift_endAccess(&v103);

  v54 = (objc_class *)type metadata accessor for CollectionListViewModel(0);
  v101.receiver = v24;
  v101.super_class = v54;
  v55 = objc_msgSendSuper2(&v101, "init");
  KeyPath = swift_getKeyPath(&unk_100079728);
  v57 = swift_getKeyPath(&unk_100079750);
  v58 = (char *)v55;
  static Published.subscript.getter(&v103, v58, KeyPath, v57);
  swift_release(KeyPath);
  swift_release(v57);
  v59 = v103;
  v60 = swift_allocObject(&unk_1000A36C8, 24, 7);
  swift_unknownObjectWeakInit(v60 + 16, v58);
  v61 = (void (**)(uint64_t))&v59[OBJC_IVAR___TPSChecklistViewModel_actionHandler];
  v62 = *(_QWORD *)&v59[OBJC_IVAR___TPSChecklistViewModel_actionHandler];
  v63 = *(_QWORD *)&v59[OBJC_IVAR___TPSChecklistViewModel_actionHandler + 8];
  *v61 = sub_10003B55C;
  v61[1] = (void (*)(uint64_t))v60;
  sub_100005500(v62, v63);

  swift_beginAccess(&v58[OBJC_IVAR___CollectionListViewModel__featuredCollection], &v103, 33, 0);
  v64 = v92;
  Published.projectedValue.getter(v34);
  swift_endAccess(&v103);
  v65 = sub_1000086E8(&qword_1000B4AF8, &qword_1000B4AC8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v66 = sub_10000C2C8();
  v68 = v93;
  v67 = v94;
  Publisher<>.removeDuplicates()(v94, v65, v66);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v64, v67);
  v69 = swift_allocObject(&unk_1000A36C8, 24, 7);
  swift_unknownObjectWeakInit(v69 + 16, v58);
  v70 = sub_100006578(0, (unint64_t *)&qword_1000B61F0, TPSCollection_ptr);
  v71 = sub_1000086E8(&qword_1000B4B10, &qword_1000B4AD0, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v72 = v95;
  v73 = v97;
  Publisher.compactMap<A>(_:)(sub_100018B2C, v69, v97, v70, v71);
  swift_release(v69);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v68, v73);
  v74 = swift_allocObject(&unk_1000A36C8, 24, 7);
  swift_unknownObjectWeakInit(v74 + 16, v58);
  v75 = sub_1000086E8(&qword_1000B4B18, &qword_1000B4AD8, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v76 = v99;
  v77 = Publisher<>.sink(receiveValue:)(sub_100019988, v74, v99, v75);
  swift_release(v74);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v72, v76);
  v78 = &v58[OBJC_IVAR___CollectionListViewModel_cancellables];
  swift_beginAccess(&v58[OBJC_IVAR___CollectionListViewModel_cancellables], &v103, 33, 0);
  AnyCancellable.store(in:)(v78);
  swift_endAccess(&v103);
  swift_release(v77);

  return v58;
}

uint64_t type metadata accessor for ChecklistViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B4880;
  if (!qword_1000B4880)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ChecklistViewModel);
  return result;
}

unint64_t sub_10000C2C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4B00;
  if (!qword_1000B4B00)
  {
    v1 = sub_1000176F8(&qword_1000B48A0);
    sub_100018F78();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4B00);
  }
  return result;
}

id sub_10000C34C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  objc_class *v40;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  objc_super v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v1 = sub_1000187A4(&qword_1000B4918);
  v53 = *(_QWORD *)(v1 - 8);
  v54 = v1;
  __chkstk_darwin(v1);
  v52 = (char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000187A4(&qword_1000B4920);
  v50 = *(_QWORD *)(v3 - 8);
  v51 = v3;
  __chkstk_darwin(v3);
  v49 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000187A4(&qword_1000B4928);
  v47 = *(_QWORD *)(v5 - 8);
  v48 = v5;
  __chkstk_darwin(v5);
  v46 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000187A4(&qword_1000B4930);
  v44 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  __chkstk_darwin(v7);
  v43 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_1000187A4(&qword_1000B4938);
  v9 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000187A4(&qword_1000B44D8);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = OBJC_IVAR___TPSChecklistViewModel_appController;
  type metadata accessor for TPSUIAppController(0);
  v17 = v0;
  *(_QWORD *)&v0[v16] = static TPSUIAppController.shared.getter();
  v18 = OBJC_IVAR___TPSChecklistViewModel_checkListSessionController;
  type metadata accessor for TPSAnalyticsChecklistSessionController(0);
  *(_QWORD *)&v17[v18] = static TPSAnalyticsChecklistSessionController.sharedInstance.getter();
  v19 = &v17[OBJC_IVAR___TPSChecklistViewModel__appInBackground];
  LOBYTE(v56) = 0;
  Published.init(initialValue:)(&v56, &type metadata for Bool);
  v20 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v20(v19, v15, v12);
  v21 = &v17[OBJC_IVAR___TPSChecklistViewModel__collection];
  v56 = 0;
  v22 = sub_1000187A4(&qword_1000B48A0);
  Published.init(initialValue:)(&v56, v22);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v21, v11, v42);
  v23 = &v17[OBJC_IVAR___TPSChecklistViewModel__viewCollapsed];
  LOBYTE(v56) = 0;
  Published.init(initialValue:)(&v56, &type metadata for Bool);
  v20(v23, v15, v12);
  v24 = &v17[OBJC_IVAR___TPSChecklistViewModel__selectedTipIdentifier];
  v56 = 0;
  v57 = 0;
  v25 = sub_1000187A4(&qword_1000B4198);
  v26 = v43;
  Published.init(initialValue:)(&v56, v25);
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v24, v26, v45);
  v27 = &v17[OBJC_IVAR___TPSChecklistViewModel__currentTip];
  v56 = 0;
  v28 = sub_1000187A4(&qword_1000B48B8);
  v29 = v46;
  Published.init(initialValue:)(&v56, v28);
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v27, v29, v48);
  v30 = &v17[OBJC_IVAR___TPSChecklistViewModel__suggestedTips];
  v56 = 0;
  v31 = sub_1000187A4(&qword_1000B48C8);
  v32 = v49;
  Published.init(initialValue:)(&v56, v31);
  v33 = v51;
  v34 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
  v34(v30, v32, v51);
  v35 = &v17[OBJC_IVAR___TPSChecklistViewModel__completedTips];
  v56 = 0;
  Published.init(initialValue:)(&v56, v31);
  v34(v35, v32, v33);
  v36 = &v17[OBJC_IVAR___TPSChecklistViewModel__collectionEntity];
  v37 = unk_1000B60B8;
  v56 = *(_QWORD *)aEmpty;
  v57 = unk_1000B60A8;
  v58 = qword_1000B60B0;
  v59 = unk_1000B60B8;
  swift_bridgeObjectRetain(unk_1000B60A8);
  swift_bridgeObjectRetain(v37);
  v38 = v52;
  Published.init(initialValue:)(&v56, &type metadata for TipCollection);
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v36, v38, v54);
  *(_QWORD *)&v17[OBJC_IVAR___TPSChecklistViewModel_currentDisplayTips] = 0;
  v39 = &v17[OBJC_IVAR___TPSChecklistViewModel_actionHandler];
  *(_QWORD *)v39 = 0;
  *((_QWORD *)v39 + 1) = 0;

  v40 = (objc_class *)type metadata accessor for ChecklistViewModel(0);
  v55.receiver = v17;
  v55.super_class = v40;
  return objc_msgSendSuper2(&v55, "init");
}

void sub_10000C938(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_10000C980@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  char *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _QWORD v53[2];
  unsigned __int8 v54;

  v51 = a2;
  v50 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v50);
  v4 = (_OWORD *)((char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_1000187A4(&qword_1000B4698);
  v6 = __chkstk_darwin(v5);
  v45 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v44 - v8;
  v10 = type metadata accessor for FeaturedCollectionView(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for RemoteVideoView(0);
  v47 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000187A4(&qword_1000B47A0);
  v48 = *(_QWORD *)(v16 - 8);
  v49 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_1000187A4(&qword_1000B4770);
  __chkstk_darwin(v46);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + *(int *)(v10 + 20) + 8) + OBJC_IVAR___CollectionListViewModel_featuredAssetViewModel);
  sub_10000A968(a1, (uint64_t)v12, type metadata accessor for FeaturedCollectionView);
  if (v21)
  {
    v22 = v21;
  }
  else
  {
    v44 = *(id *)&v12[*(int *)(v10 + 32)];
    v23 = type metadata accessor for URL(0);
    v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
    v24(v9, 1, 1, v23);
    v25 = v45;
    v24(v45, 1, 1, v23);
    v26 = objc_allocWithZone((Class)type metadata accessor for TPSAssetsInfo(0));
    v27 = v44;
    v28 = TPSAssetsInfo.init(videoIdentifier:videoURL:imageIdentifier:imageURL:)(0, 0, v9, 0, 0, v25);
    type metadata accessor for TipsContentModel(0);
    v29 = static TipsContentModel.shared()();
    v30 = type metadata accessor for DocumentAssetViewModel(0);
    swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
    v22 = DocumentAssetViewModel.init(document:assetsInfo:contentModel:)(v27, v28, v29);
    v21 = 0;
  }
  swift_retain(v21);
  sub_10000A92C((uint64_t)v12, type metadata accessor for FeaturedCollectionView);
  v52 = 0;
  static Binding.constant(_:)(v53, &v52, &type metadata for Bool);
  RemoteVideoView.init(viewModel:showReplayButtonAtVideoEnd:isImageLoaded:)(v22, v53[0], v53[1], v54, 0, 0, 0);
  v31 = sub_1000041E8(&qword_1000B4780, (uint64_t (*)(uint64_t))&type metadata accessor for RemoteVideoView, (uint64_t)&protocol conformance descriptor for RemoteVideoView);
  View.assetContentMode(_:)(1, v13, v31);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v15, v13);
  v32 = (char *)v4 + *(int *)(v50 + 20);
  v33 = enum case for RoundedCornerStyle.continuous(_:);
  v34 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v32, v33, v34);
  __asm { FMOV            V0.2D, #10.0 }
  *v4 = _Q0;
  v40 = (uint64_t)&v20[*(int *)(v46 + 36)];
  sub_10000A968((uint64_t)v4, v40, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v40 + *(int *)(sub_1000187A4(&qword_1000B4790) + 36)) = 256;
  v42 = v48;
  v41 = v49;
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v20, v18, v49);
  sub_10000A92C((uint64_t)v4, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v18, v41);
  return sub_100014780((uint64_t)v20, v51, &qword_1000B4770);
}

uint64_t sub_10000CDAC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  char *v32;
  char *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t);
  char *v45;
  char *v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t, uint64_t);
  char *v57;
  char *v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t, uint64_t, uint64_t);
  char *v68;
  char *v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;

  v2 = v1;
  v4 = sub_1000187A4(&qword_1000B4698);
  v5 = __chkstk_darwin(v4);
  v79 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v78 = (char *)&v77 - v7;
  v8 = type metadata accessor for FeaturedCollectionView(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v77 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v77 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v77 - v19;
  v21 = v2 + *(int *)(v18 + 24);
  v23 = *(_QWORD *)(v21 + 8);
  BYTE1(v80) = *(_BYTE *)v21;
  v22 = BYTE1(v80);
  v81 = v23;
  LOBYTE(v80) = a1;
  v24 = sub_1000187A4(&qword_1000B4738);
  State.wrappedValue.setter(&v80, v24);
  BYTE1(v80) = v22;
  v81 = v23;
  State.wrappedValue.getter(&v80, v24);
  v25 = v2 + *(int *)(v8 + 20);
  v26 = *(_QWORD *)(*(_QWORD *)(v25 + 8) + OBJC_IVAR___CollectionListViewModel_featuredAssetViewModel);
  if (v80 == 1)
  {
    sub_10000A968(v2, (uint64_t)v20, type metadata accessor for FeaturedCollectionView);
    if (v26)
    {
      v27 = v26;
    }
    else
    {
      v29 = *(void **)&v20[*(int *)(v8 + 32)];
      v30 = type metadata accessor for URL(0);
      v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
      v32 = v78;
      v31(v78, 1, 1, v30);
      v33 = v79;
      v31(v79, 1, 1, v30);
      v34 = objc_allocWithZone((Class)type metadata accessor for TPSAssetsInfo(0));
      v35 = v29;
      v36 = TPSAssetsInfo.init(videoIdentifier:videoURL:imageIdentifier:imageURL:)(0, 0, v32, 0, 0, v33);
      type metadata accessor for TipsContentModel(0);
      v37 = static TipsContentModel.shared()();
      v38 = type metadata accessor for DocumentAssetViewModel(0);
      swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
      v27 = DocumentAssetViewModel.init(document:assetsInfo:contentModel:)(v35, v36, v37);
      v26 = 0;
    }
    swift_retain(v26);
    v39 = sub_10000A92C((uint64_t)v20, type metadata accessor for FeaturedCollectionView);
    dispatch thunk of DocumentAssetViewModel.load()(v39);
    swift_release(v27);
    v40 = *(_QWORD *)(*(_QWORD *)(v25 + 8) + OBJC_IVAR___CollectionListViewModel_featuredAssetViewModel);
    sub_10000A968(v2, (uint64_t)v17, type metadata accessor for FeaturedCollectionView);
    if (v40)
    {
      v41 = v40;
    }
    else
    {
      v54 = *(void **)&v17[*(int *)(v8 + 32)];
      v55 = type metadata accessor for URL(0);
      v56 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56);
      v57 = v78;
      v56(v78, 1, 1, v55);
      v58 = v79;
      v56(v79, 1, 1, v55);
      v59 = objc_allocWithZone((Class)type metadata accessor for TPSAssetsInfo(0));
      v60 = v54;
      v61 = TPSAssetsInfo.init(videoIdentifier:videoURL:imageIdentifier:imageURL:)(0, 0, v57, 0, 0, v58);
      type metadata accessor for TipsContentModel(0);
      v62 = static TipsContentModel.shared()();
      v63 = type metadata accessor for DocumentAssetViewModel(0);
      swift_allocObject(v63, *(unsigned int *)(v63 + 48), *(unsigned __int16 *)(v63 + 52));
      v41 = DocumentAssetViewModel.init(document:assetsInfo:contentModel:)(v60, v61, v62);
      v40 = 0;
    }
    swift_retain(v40);
    v64 = sub_10000A92C((uint64_t)v17, type metadata accessor for FeaturedCollectionView);
    dispatch thunk of DocumentAssetViewModel.playVideo()(v64);
  }
  else
  {
    sub_10000A968(v2, (uint64_t)v14, type metadata accessor for FeaturedCollectionView);
    if (v26)
    {
      v28 = v26;
    }
    else
    {
      v42 = *(void **)&v14[*(int *)(v8 + 32)];
      v43 = type metadata accessor for URL(0);
      v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56);
      v45 = v78;
      v44(v78, 1, 1, v43);
      v46 = v79;
      v44(v79, 1, 1, v43);
      v47 = objc_allocWithZone((Class)type metadata accessor for TPSAssetsInfo(0));
      v48 = v42;
      v49 = TPSAssetsInfo.init(videoIdentifier:videoURL:imageIdentifier:imageURL:)(0, 0, v45, 0, 0, v46);
      type metadata accessor for TipsContentModel(0);
      v50 = static TipsContentModel.shared()();
      v51 = type metadata accessor for DocumentAssetViewModel(0);
      swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
      v28 = DocumentAssetViewModel.init(document:assetsInfo:contentModel:)(v48, v49, v50);
      v26 = 0;
    }
    swift_retain(v26);
    v52 = sub_10000A92C((uint64_t)v14, type metadata accessor for FeaturedCollectionView);
    dispatch thunk of DocumentAssetViewModel.cancel()(v52);
    swift_release(v28);
    v53 = *(_QWORD *)(*(_QWORD *)(v25 + 8) + OBJC_IVAR___CollectionListViewModel_featuredAssetViewModel);
    sub_10000A968(v2, (uint64_t)v11, type metadata accessor for FeaturedCollectionView);
    if (v53)
    {
      v41 = v53;
    }
    else
    {
      v65 = *(void **)&v11[*(int *)(v8 + 32)];
      v66 = type metadata accessor for URL(0);
      v67 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56);
      v68 = v78;
      v67(v78, 1, 1, v66);
      v69 = v79;
      v67(v79, 1, 1, v66);
      v70 = objc_allocWithZone((Class)type metadata accessor for TPSAssetsInfo(0));
      v71 = v65;
      v72 = TPSAssetsInfo.init(videoIdentifier:videoURL:imageIdentifier:imageURL:)(0, 0, v68, 0, 0, v69);
      type metadata accessor for TipsContentModel(0);
      v73 = static TipsContentModel.shared()();
      v74 = type metadata accessor for DocumentAssetViewModel(0);
      swift_allocObject(v74, *(unsigned int *)(v74 + 48), *(unsigned __int16 *)(v74 + 52));
      v41 = DocumentAssetViewModel.init(document:assetsInfo:contentModel:)(v71, v72, v73);
      v53 = 0;
    }
    swift_retain(v53);
    v75 = sub_10000A92C((uint64_t)v11, type metadata accessor for FeaturedCollectionView);
    dispatch thunk of DocumentAssetViewModel.resetVideo()(v75);
  }
  return swift_release(v41);
}

void sub_10000D3B4(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v4 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }

  swift_release(*(_QWORD *)((char *)a1 + a2[6] + 8));
  v6 = (char *)a1 + a2[7];
  swift_bridgeObjectRelease(*((_QWORD *)v6 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v6 + 3));

}

uint64_t sub_10000D464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  Swift::String v88;
  uint64_t KeyPath;
  Swift::String v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t, uint64_t);
  void (*v93)(char *, uint64_t);
  void (*v94)(char *, uint64_t);
  Swift::String v95;
  unint64_t v96;
  uint64_t v97;
  Swift::String v98;
  uint64_t v99;
  uint64_t v100;
  Swift::String v101;
  uint64_t v102;
  Swift::String v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  Swift::String v108;
  Swift::String v109;
  uint64_t v110;
  uint64_t v111;
  Swift::String v112;
  uint64_t v113;
  char *v114;
  Swift::String v115;
  uint64_t v116;
  Swift::String v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t, uint64_t);
  void (*v121)(char *, uint64_t);
  Swift::String v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  Swift::String v127;
  uint64_t v128;
  Swift::String v129;
  uint64_t v130;
  Swift::String v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  Swift::String v135;
  uint64_t v136;
  Swift::String v137;
  uint64_t v138;
  uint64_t v139;
  Swift::String v140;
  unint64_t v141;
  char *v142;
  Swift::String v143;
  uint64_t v144;
  Swift::String v145;
  uint64_t v146;
  void (*v147)(char *, uint64_t, uint64_t);
  void (*v148)(char *, uint64_t);
  Swift::String v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  Swift::String v153;
  uint64_t v154;
  Swift::String v155;
  uint64_t v156;
  uint64_t v157;
  Swift::String v158;
  char *v159;
  char *v160;
  Swift::String v161;
  Swift::String v162;
  uint64_t v163;
  uint64_t v164;
  Swift::String v165;
  char *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  Swift::String v171;
  uint64_t v172;
  Swift::String v173;
  uint64_t v174;
  void (*v175)(char *, uint64_t, uint64_t);
  void (*v176)(char *, uint64_t);
  Swift::String v177;
  unint64_t v178;
  char *v179;
  Swift::String v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void (*v184)(char *, uint64_t);
  Swift::String v185;
  uint64_t v186;
  Swift::String v187;
  unint64_t v188;
  uint64_t v189;
  char *v190;
  Swift::String v191;
  uint64_t v192;
  Swift::String v193;
  uint64_t v194;
  uint64_t v195;
  Swift::String v196;
  unint64_t v197;
  uint64_t v198;
  char *v199;
  Swift::String v200;
  uint64_t v201;
  Swift::String v202;
  uint64_t v203;
  uint64_t v204;
  void (*v205)(char *, uint64_t, uint64_t);
  void (*v206)(char *, uint64_t);
  Swift::String v207;
  char *v208;
  unint64_t v209;
  Swift::String v210;
  void (*v211)(char *, uint64_t, uint64_t);
  Swift::String v212;
  uint64_t v213;
  uint64_t v214;
  Swift::String v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  Swift::String v220;
  Swift::String v221;
  uint64_t v222;
  Swift::String v223;
  unint64_t v224;
  char *v225;
  Swift::String v226;
  uint64_t v227;
  Swift::String v228;
  uint64_t v229;
  uint64_t v230;
  void (*v231)(char *, uint64_t, uint64_t);
  void (*v232)(char *, uint64_t);
  Swift::String v233;
  char *v234;
  Swift::String v235;
  Swift::String v236;
  uint64_t v237;
  uint64_t v238;
  Swift::String v239;
  uint64_t v240;
  char *v241;
  Swift::String v242;
  Swift::String v243;
  uint64_t v244;
  Swift::String v245;
  uint64_t v246;
  char *v247;
  Swift::String v248;
  uint64_t v249;
  Swift::String v250;
  uint64_t v251;
  void (*v252)(char *, uint64_t, uint64_t);
  void (*v253)(char *, uint64_t);
  Swift::String v254;
  uint64_t v255;
  char *v256;
  Swift::String v257;
  uint64_t v258;
  uint64_t v259;
  void (*v260)(char *, uint64_t);
  Swift::String v261;
  uint64_t v262;
  uint64_t v263;
  Swift::String v264;
  unint64_t v265;
  uint64_t v266;
  char *v267;
  Swift::String v268;
  uint64_t v269;
  Swift::String v270;
  uint64_t v271;
  uint64_t v272;
  Swift::String v273;
  unint64_t v274;
  uint64_t v275;
  char *v276;
  Swift::String v277;
  uint64_t v278;
  Swift::String v279;
  uint64_t v280;
  uint64_t v281;
  void (*v282)(char *, uint64_t, uint64_t);
  void (*v283)(char *, uint64_t);
  Swift::String v284;
  unint64_t v285;
  char *v286;
  Swift::String v287;
  void (*v288)(char *, uint64_t, uint64_t);
  void (*v289)(char *, uint64_t);
  Swift::String v290;
  uint64_t v291;
  Swift::String v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  Swift::String v297;
  uint64_t v298;
  uint64_t v299;
  Swift::String v300;
  uint64_t v301;
  uint64_t v302;
  Swift::String v303;
  unint64_t v304;
  char *v305;
  unint64_t v306;
  Swift::String v307;
  uint64_t v308;
  Swift::String v309;
  uint64_t v310;
  void (*v311)(char *, uint64_t, uint64_t);
  void (*v312)(char *, uint64_t);
  Swift::String v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  Swift::String v317;
  uint64_t v318;
  uint64_t v319;
  Swift::String v320;
  uint64_t v321;
  uint64_t v322;
  Swift::String v323;
  uint64_t v324;
  char *v325;
  Swift::String v326;
  uint64_t v327;
  uint64_t v328;
  void (*v329)(char *, uint64_t);
  Swift::String v330;
  uint64_t v331;
  Swift::String v332;
  uint64_t v333;
  char *v334;
  Swift::String v335;
  uint64_t v336;
  uint64_t v337;
  void (*v338)(char *, uint64_t, uint64_t);
  Swift::String v339;
  uint64_t v340;
  Swift::String v341;
  char *v342;
  Swift::String v343;
  uint64_t v344;
  void (*v345)(char *, uint64_t, uint64_t);
  Swift::String v346;
  uint64_t v347;
  Swift::String v348;
  uint64_t v349;
  char *v350;
  Swift::String v351;
  void (*v352)(char *, uint64_t);
  Swift::String v353;
  uint64_t v354;
  uint64_t v355;
  Swift::String v356;
  char *v357;
  Swift::String v358;
  uint64_t v359;
  void (*v360)(char *, uint64_t, uint64_t);
  Swift::String v361;
  uint64_t v362;
  Swift::String v363;
  unint64_t v364;
  char *v365;
  Swift::String v366;
  void (*v367)(char *, uint64_t);
  Swift::String v368;
  uint64_t v369;
  Swift::String v370;
  unint64_t v371;
  char *v372;
  Swift::String v373;
  Swift::String v374;
  uint64_t v375;
  Swift::String v376;
  char *v377;
  uint64_t v378;
  char *v379;
  char *v380;
  char *v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v388;
  char *v389;
  char *v390;
  char *v391;
  char *v392;
  char *v393;
  char *v394;
  char *v395;
  char *v396;
  char *v397;
  char *v398;
  char *v399;
  char *v400;
  char *v401;
  char *v402;
  char *v403;
  char *v404;
  char *v405;
  char *v406;
  char *v407;
  char *v408;
  char *v409;
  char *v410;
  char *v411;
  char *v412;
  char *v413;
  uint64_t v414;
  char *v415;
  char *v416;
  uint64_t v417;
  char *v418;
  char *v419;
  uint64_t v420;
  uint64_t v421;
  char *v422;
  char *v423;
  char *v424;
  char *v425;
  char *v426;
  char *v427;
  uint64_t v428;
  uint64_t v429;
  char *v430;
  uint64_t v431;
  uint64_t v432;
  void (*v433)(char *, uint64_t, uint64_t);
  unsigned int v434;
  uint64_t v435;
  unint64_t v436;
  uint64_t v437;
  void (*v438)(char *, uint64_t);
  uint64_t v439;

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v428 = *(_QWORD *)(v0 - 8);
  v429 = v0;
  __chkstk_darwin(v0);
  v427 = (char *)&v388 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v426 = (char *)&v388 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v4);
  v424 = (char *)&v388 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v6);
  v425 = (char *)&v388 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AppShortcutPhraseToken(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v388 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000187A4(&qword_1000B5648);
  v13 = __chkstk_darwin(v12);
  v423 = (char *)&v388 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v422 = (char *)&v388 - v16;
  v17 = __chkstk_darwin(v15);
  v418 = (char *)&v388 - v18;
  v19 = __chkstk_darwin(v17);
  v416 = (char *)&v388 - v20;
  v21 = __chkstk_darwin(v19);
  v415 = (char *)&v388 - v22;
  v23 = __chkstk_darwin(v21);
  v413 = (char *)&v388 - v24;
  v25 = __chkstk_darwin(v23);
  v412 = (char *)&v388 - v26;
  v27 = __chkstk_darwin(v25);
  v411 = (char *)&v388 - v28;
  v29 = __chkstk_darwin(v27);
  v410 = (char *)&v388 - v30;
  v31 = __chkstk_darwin(v29);
  v409 = (char *)&v388 - v32;
  v33 = __chkstk_darwin(v31);
  v408 = (char *)&v388 - v34;
  v35 = __chkstk_darwin(v33);
  v407 = (char *)&v388 - v36;
  v37 = __chkstk_darwin(v35);
  v406 = (char *)&v388 - v38;
  v39 = __chkstk_darwin(v37);
  v405 = (char *)&v388 - v40;
  v41 = __chkstk_darwin(v39);
  v404 = (char *)&v388 - v42;
  v43 = __chkstk_darwin(v41);
  v403 = (char *)&v388 - v44;
  v45 = __chkstk_darwin(v43);
  v402 = (char *)&v388 - v46;
  v47 = __chkstk_darwin(v45);
  v401 = (char *)&v388 - v48;
  v49 = __chkstk_darwin(v47);
  v430 = (char *)&v388 - v50;
  v51 = __chkstk_darwin(v49);
  v400 = (char *)&v388 - v52;
  v53 = __chkstk_darwin(v51);
  v399 = (char *)&v388 - v54;
  v55 = __chkstk_darwin(v53);
  v398 = (char *)&v388 - v56;
  v57 = __chkstk_darwin(v55);
  v397 = (char *)&v388 - v58;
  v59 = __chkstk_darwin(v57);
  v396 = (char *)&v388 - v60;
  v61 = __chkstk_darwin(v59);
  v395 = (char *)&v388 - v62;
  v63 = __chkstk_darwin(v61);
  v394 = (char *)&v388 - v64;
  v65 = __chkstk_darwin(v63);
  v393 = (char *)&v388 - v66;
  v67 = __chkstk_darwin(v65);
  v392 = (char *)&v388 - v68;
  v69 = __chkstk_darwin(v67);
  v391 = (char *)&v388 - v70;
  v71 = __chkstk_darwin(v69);
  v390 = (char *)&v388 - v72;
  v73 = __chkstk_darwin(v71);
  v389 = (char *)&v388 - v74;
  v75 = __chkstk_darwin(v73);
  v77 = (char *)&v388 - v76;
  __chkstk_darwin(v75);
  v79 = (char *)&v388 - v78;
  v80 = type metadata accessor for AppShortcut(0);
  v420 = *(_QWORD *)(v80 - 8);
  v421 = v80;
  __chkstk_darwin(v80);
  v419 = (char *)&v388 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  v439 = sub_1000065B0();
  v82 = sub_1000187A4(&qword_1000B5650);
  v83 = *(_QWORD *)(sub_1000187A4(&qword_1000B5658) - 8);
  v432 = *(_QWORD *)(v83 + 72);
  v84 = *(unsigned __int8 *)(v83 + 80);
  v85 = (v84 + 32) & ~v84;
  v414 = 32 * v432;
  v86 = swift_allocObject(v82, v85 + 33 * v432, v84 | 7);
  v417 = v86;
  *(_OWORD *)(v86 + 16) = xmmword_10007ABE0;
  v87 = v86 + v85;
  v436 = sub_100018888();
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(6, 2, &type metadata for CollectionOpenIntent, v436);
  v88._countAndFlagsBits = 0x206E65704FLL;
  v88._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v88);
  KeyPath = swift_getKeyPath(&unk_10007AC38);
  v435 = sub_1000187A4(&qword_1000B5668);
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v12, v435);
  swift_release(KeyPath);
  v90._countAndFlagsBits = 32;
  v90._object = (void *)0xE100000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v90);
  v91 = enum case for AppShortcutPhraseToken.applicationName(_:);
  v92 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
  v434 = enum case for AppShortcutPhraseToken.applicationName(_:);
  v431 = v8;
  v92(v11, enum case for AppShortcutPhraseToken.applicationName(_:), v8);
  v433 = v92;
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v93 = *(void (**)(char *, uint64_t))(v9 + 8);
  v93(v11, v8);
  v94 = v93;
  v438 = v93;
  v95._countAndFlagsBits = 0;
  v95._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v95);
  v437 = v87;
  v96 = v436;
  AppShortcutPhrase.init(stringInterpolation:)(v79, &type metadata for CollectionOpenIntent, v436);
  v97 = v432;
  v388 = v87 + v432;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(12, 2, &type metadata for CollectionOpenIntent, v96);
  v98._countAndFlagsBits = 0x206E65704FLL;
  v98._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v98);
  v99 = v431;
  v92(v11, v91, v431);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v100 = v99;
  v94(v11, v99);
  v101._countAndFlagsBits = 0x2074756F626120;
  v101._object = (void *)0xE700000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v101);
  v102 = swift_getKeyPath(&unk_10007AC38);
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v102, v12, v435);
  swift_release(v102);
  v103._countAndFlagsBits = 0;
  v103._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v103);
  v104 = v436;
  AppShortcutPhrase.init(stringInterpolation:)(v77, &type metadata for CollectionOpenIntent, v436);
  v105 = 2 * v97;
  v106 = v437;
  v388 = v437 + 2 * v97;
  v107 = v389;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(10, 2, &type metadata for CollectionOpenIntent, v104);
  v108._countAndFlagsBits = 0x206E65704FLL;
  v108._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v108);
  v433(v11, v434, v100);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v438(v11, v100);
  v109._countAndFlagsBits = 0x20726F6620;
  v109._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v109);
  v110 = swift_getKeyPath(&unk_10007AC38);
  v111 = v435;
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v110, v12, v435);
  swift_release(v110);
  v112._countAndFlagsBits = 0;
  v112._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v112);
  AppShortcutPhrase.init(stringInterpolation:)(v107, &type metadata for CollectionOpenIntent, v104);
  v113 = v432;
  v389 = (char *)(v106 + v105 + v432);
  v114 = v390;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(9, 2, &type metadata for CollectionOpenIntent, v104);
  v115._countAndFlagsBits = 0x20656D20776F6853;
  v115._object = (void *)0xE800000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v115);
  v116 = swift_getKeyPath(&unk_10007AC38);
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v116, v12, v111);
  swift_release(v116);
  v117._countAndFlagsBits = 32;
  v117._object = (void *)0xE100000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v117);
  v118 = v434;
  v119 = v431;
  v120 = v433;
  v433(v11, v434, v431);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v121 = v438;
  v438(v11, v119);
  v122._countAndFlagsBits = 0;
  v122._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v122);
  v123 = v436;
  AppShortcutPhrase.init(stringInterpolation:)(v114, &type metadata for CollectionOpenIntent, v436);
  v124 = 4 * v113;
  v390 = (char *)(4 * v113);
  v125 = v437;
  v389 = (char *)(v437 + v124);
  v126 = v391;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(15, 2, &type metadata for CollectionOpenIntent, v123);
  v127._countAndFlagsBits = 0x20656D20776F6853;
  v127._object = (void *)0xE800000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v127);
  v128 = v431;
  v120(v11, v118, v431);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v121(v11, v128);
  v129._countAndFlagsBits = 0x2074756F626120;
  v129._object = (void *)0xE700000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v129);
  v130 = swift_getKeyPath(&unk_10007AC38);
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v130, v12, v111);
  swift_release(v130);
  v131._countAndFlagsBits = 0;
  v131._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v131);
  v132 = v436;
  AppShortcutPhrase.init(stringInterpolation:)(v126, &type metadata for CollectionOpenIntent, v436);
  v133 = v432;
  v391 = &v390[v432 + v125];
  v134 = v392;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 2, &type metadata for CollectionOpenIntent, v132);
  v135._countAndFlagsBits = 0x20656D20776F6853;
  v135._object = (void *)0xE800000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v135);
  v136 = v434;
  v433(v11, v434, v128);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v438(v11, v128);
  v137._countAndFlagsBits = 0x20726F6620;
  v137._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v137);
  v138 = swift_getKeyPath(&unk_10007AC38);
  v139 = v435;
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v138, v12, v435);
  swift_release(v138);
  v140._countAndFlagsBits = 0;
  v140._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v140);
  v141 = v436;
  AppShortcutPhrase.init(stringInterpolation:)(v134, &type metadata for CollectionOpenIntent, v436);
  v392 = (char *)(v125 + 6 * v133);
  v142 = v393;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(6, 2, &type metadata for CollectionOpenIntent, v141);
  v143._countAndFlagsBits = 0x20776F6853;
  v143._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v143);
  v144 = swift_getKeyPath(&unk_10007AC38);
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v144, v12, v139);
  swift_release(v144);
  v145._countAndFlagsBits = 32;
  v145._object = (void *)0xE100000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v145);
  v146 = v431;
  v147 = v433;
  v433(v11, v136, v431);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v148 = v438;
  v438(v11, v146);
  v149._countAndFlagsBits = 0;
  v149._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v149);
  v150 = v436;
  AppShortcutPhrase.init(stringInterpolation:)(v142, &type metadata for CollectionOpenIntent, v436);
  v393 = (char *)(8 * v432);
  v151 = v437;
  v392 = (char *)(v437 + 7 * v432);
  v152 = v394;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(12, 2, &type metadata for CollectionOpenIntent, v150);
  v153._countAndFlagsBits = 0x20776F6853;
  v153._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v153);
  v154 = v434;
  v147(v11, v434, v146);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v148(v11, v146);
  v155._countAndFlagsBits = 0x2074756F626120;
  v155._object = (void *)0xE700000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v155);
  v156 = swift_getKeyPath(&unk_10007AC38);
  v157 = v435;
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v156, v12, v435);
  swift_release(v156);
  v158._countAndFlagsBits = 0;
  v158._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v158);
  AppShortcutPhrase.init(stringInterpolation:)(v152, &type metadata for CollectionOpenIntent, v150);
  v159 = v393;
  v394 = &v393[v151];
  v160 = v395;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(10, 2, &type metadata for CollectionOpenIntent, v150);
  v161._countAndFlagsBits = 0x20776F6853;
  v161._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v161);
  v433(v11, v154, v146);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v438(v11, v146);
  v162._countAndFlagsBits = 0x20726F6620;
  v162._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v162);
  v163 = swift_getKeyPath(&unk_10007AC38);
  v164 = v157;
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v163, v12, v157);
  swift_release(v163);
  v165._countAndFlagsBits = 0;
  v165._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v165);
  v166 = v160;
  v167 = v150;
  AppShortcutPhrase.init(stringInterpolation:)(v166, &type metadata for CollectionOpenIntent, v150);
  v168 = v432;
  v169 = v437;
  v395 = &v159[v432 + v437];
  v170 = v396;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(9, 2, &type metadata for CollectionOpenIntent, v167);
  v171._countAndFlagsBits = 0x20656D2065766947;
  v171._object = (void *)0xE800000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v171);
  v172 = swift_getKeyPath(&unk_10007AC38);
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v172, v12, v164);
  swift_release(v172);
  v173._countAndFlagsBits = 32;
  v173._object = (void *)0xE100000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v173);
  v174 = v434;
  v175 = v433;
  v433(v11, v434, v146);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v176 = v438;
  v438(v11, v146);
  v177._countAndFlagsBits = 0;
  v177._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v177);
  v178 = v436;
  AppShortcutPhrase.init(stringInterpolation:)(v170, &type metadata for CollectionOpenIntent, v436);
  v396 = (char *)(v169 + 10 * v168);
  v179 = v397;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(15, 2, &type metadata for CollectionOpenIntent, v178);
  v180._countAndFlagsBits = 0x20656D2065766947;
  v180._object = (void *)0xE800000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v180);
  v181 = v174;
  v182 = v174;
  v183 = v431;
  v175(v11, v181, v431);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v176(v11, v183);
  v184 = v176;
  v185._countAndFlagsBits = 0x2074756F626120;
  v185._object = (void *)0xE700000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v185);
  v186 = swift_getKeyPath(&unk_10007AC38);
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v186, v12, v435);
  swift_release(v186);
  v187._countAndFlagsBits = 0;
  v187._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v187);
  v188 = v436;
  AppShortcutPhrase.init(stringInterpolation:)(v179, &type metadata for CollectionOpenIntent, v436);
  v189 = v432;
  v397 = (char *)(v169 + 11 * v432);
  v190 = v398;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 2, &type metadata for CollectionOpenIntent, v188);
  v191._countAndFlagsBits = 0x20656D2065766947;
  v191._object = (void *)0xE800000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v191);
  v192 = v431;
  v175(v11, v182, v431);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v184(v11, v192);
  v193._countAndFlagsBits = 0x20726F6620;
  v193._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v193);
  v194 = swift_getKeyPath(&unk_10007AC38);
  v195 = v435;
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v194, v12, v435);
  swift_release(v194);
  v196._countAndFlagsBits = 0;
  v196._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v196);
  v197 = v436;
  AppShortcutPhrase.init(stringInterpolation:)(v190, &type metadata for CollectionOpenIntent, v436);
  v198 = v437;
  v398 = (char *)(v437 + 12 * v189);
  v199 = v399;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(6, 2, &type metadata for CollectionOpenIntent, v197);
  v200._countAndFlagsBits = 0x2065766947;
  v200._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v200);
  v201 = swift_getKeyPath(&unk_10007AC38);
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v201, v12, v195);
  swift_release(v201);
  v202._countAndFlagsBits = 32;
  v202._object = (void *)0xE100000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v202);
  v203 = v434;
  v204 = v431;
  v205 = v433;
  v433(v11, v434, v431);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v206 = v438;
  v438(v11, v204);
  v207._countAndFlagsBits = 0;
  v207._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v207);
  AppShortcutPhrase.init(stringInterpolation:)(v199, &type metadata for CollectionOpenIntent, v197);
  v399 = (char *)(v198 + 13 * v432);
  v208 = v400;
  v209 = v197;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(12, 2, &type metadata for CollectionOpenIntent, v197);
  v210._countAndFlagsBits = 0x2065766947;
  v210._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v210);
  v205(v11, v203, v204);
  v211 = v205;
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v206(v11, v204);
  v212._countAndFlagsBits = 0x2074756F626120;
  v212._object = (void *)0xE700000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v212);
  v213 = swift_getKeyPath(&unk_10007AC38);
  v214 = v435;
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v213, v12, v435);
  swift_release(v213);
  v215._countAndFlagsBits = 0;
  v215._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v215);
  v216 = v209;
  AppShortcutPhrase.init(stringInterpolation:)(v208, &type metadata for CollectionOpenIntent, v209);
  v217 = v437;
  v218 = v432;
  v400 = (char *)(v437 + 14 * v432);
  v219 = v430;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(10, 2, &type metadata for CollectionOpenIntent, v216);
  v220._countAndFlagsBits = 0x2065766947;
  v220._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v220);
  v211(v11, v434, v204);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v438(v11, v204);
  v221._countAndFlagsBits = 0x20726F6620;
  v221._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v221);
  v222 = swift_getKeyPath(&unk_10007AC38);
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v222, v12, v214);
  swift_release(v222);
  v223._countAndFlagsBits = 0;
  v223._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v223);
  v224 = v436;
  AppShortcutPhrase.init(stringInterpolation:)(v219, &type metadata for CollectionOpenIntent, v436);
  v430 = (char *)(16 * v218);
  v400 = (char *)(v217 + 15 * v218);
  v225 = v401;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(6, 2, &type metadata for CollectionOpenIntent, v224);
  v226._countAndFlagsBits = 0x2077656956;
  v226._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v226);
  v227 = swift_getKeyPath(&unk_10007AC38);
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v227, v12, v214);
  swift_release(v227);
  v228._countAndFlagsBits = 32;
  v228._object = (void *)0xE100000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v228);
  v229 = v434;
  v230 = v431;
  v231 = v433;
  v433(v11, v434, v431);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v232 = v438;
  v438(v11, v230);
  v233._countAndFlagsBits = 0;
  v233._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v233);
  AppShortcutPhrase.init(stringInterpolation:)(v225, &type metadata for CollectionOpenIntent, v224);
  v401 = &v430[v437];
  v234 = v402;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(12, 2, &type metadata for CollectionOpenIntent, v224);
  v235._countAndFlagsBits = 0x2077656956;
  v235._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v235);
  v231(v11, v229, v230);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v232(v11, v230);
  v236._countAndFlagsBits = 0x2074756F626120;
  v236._object = (void *)0xE700000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v236);
  v237 = swift_getKeyPath(&unk_10007AC38);
  v238 = v435;
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v237, v12, v435);
  swift_release(v237);
  v239._countAndFlagsBits = 0;
  v239._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v239);
  AppShortcutPhrase.init(stringInterpolation:)(v234, &type metadata for CollectionOpenIntent, v224);
  v240 = v432;
  v241 = v403;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(10, 2, &type metadata for CollectionOpenIntent, v224);
  v242._countAndFlagsBits = 0x2077656956;
  v242._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v242);
  v433(v11, v434, v230);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v438(v11, v230);
  v243._countAndFlagsBits = 0x20726F6620;
  v243._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v243);
  v244 = swift_getKeyPath(&unk_10007AC38);
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v244, v12, v238);
  swift_release(v244);
  v245._countAndFlagsBits = 0;
  v245._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v245);
  AppShortcutPhrase.init(stringInterpolation:)(v241, &type metadata for CollectionOpenIntent, v224);
  v246 = v437;
  v430 = (char *)(v437 + 18 * v240);
  v247 = v404;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(9, 2, &type metadata for CollectionOpenIntent, v224);
  v248._countAndFlagsBits = 0x2079616C70736944;
  v248._object = (void *)0xE800000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v248);
  v249 = swift_getKeyPath(&unk_10007AC38);
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v249, v12, v238);
  swift_release(v249);
  v250._countAndFlagsBits = 32;
  v250._object = (void *)0xE100000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v250);
  v251 = v434;
  v252 = v433;
  v433(v11, v434, v230);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v253 = v438;
  v438(v11, v230);
  v254._countAndFlagsBits = 0;
  v254._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v254);
  AppShortcutPhrase.init(stringInterpolation:)(v247, &type metadata for CollectionOpenIntent, v224);
  v255 = v432;
  v430 = (char *)(v246 + 19 * v432);
  v256 = v405;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(15, 2, &type metadata for CollectionOpenIntent, v224);
  v257._countAndFlagsBits = 0x2079616C70736944;
  v257._object = (void *)0xE800000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v257);
  v258 = v251;
  v259 = v431;
  v252(v11, v251, v431);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v260 = v253;
  v253(v11, v259);
  v261._countAndFlagsBits = 0x2074756F626120;
  v261._object = (void *)0xE700000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v261);
  v262 = swift_getKeyPath(&unk_10007AC38);
  v263 = v435;
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v262, v12, v435);
  swift_release(v262);
  v264._countAndFlagsBits = 0;
  v264._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v264);
  v265 = v436;
  AppShortcutPhrase.init(stringInterpolation:)(v256, &type metadata for CollectionOpenIntent, v436);
  v266 = v437;
  v430 = (char *)(v437 + 20 * v255);
  v267 = v406;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 2, &type metadata for CollectionOpenIntent, v265);
  v268._countAndFlagsBits = 0x2079616C70736944;
  v268._object = (void *)0xE800000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v268);
  v269 = v431;
  v433(v11, v258, v431);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v260(v11, v269);
  v270._countAndFlagsBits = 0x20726F6620;
  v270._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v270);
  v271 = swift_getKeyPath(&unk_10007AC38);
  v272 = v263;
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v271, v12, v263);
  swift_release(v271);
  v273._countAndFlagsBits = 0;
  v273._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v273);
  v274 = v436;
  AppShortcutPhrase.init(stringInterpolation:)(v267, &type metadata for CollectionOpenIntent, v436);
  v275 = v432;
  v430 = (char *)(v266 + 21 * v432);
  v276 = v407;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(8, 2, &type metadata for CollectionOpenIntent, v274);
  v277._countAndFlagsBits = 0x206573776F7242;
  v277._object = (void *)0xE700000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v277);
  v278 = swift_getKeyPath(&unk_10007AC38);
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v278, v12, v272);
  swift_release(v278);
  v279._countAndFlagsBits = 32;
  v279._object = (void *)0xE100000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v279);
  v280 = v434;
  v281 = v431;
  v282 = v433;
  v433(v11, v434, v431);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v283 = v438;
  v438(v11, v281);
  v284._countAndFlagsBits = 0;
  v284._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v284);
  v285 = v436;
  AppShortcutPhrase.init(stringInterpolation:)(v276, &type metadata for CollectionOpenIntent, v436);
  v430 = (char *)(v437 + 22 * v275);
  v286 = v408;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(14, 2, &type metadata for CollectionOpenIntent, v285);
  v287._countAndFlagsBits = 0x206573776F7242;
  v287._object = (void *)0xE700000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v287);
  v288 = v282;
  v282(v11, v280, v281);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v283(v11, v281);
  v289 = v283;
  v290._countAndFlagsBits = 0x2074756F626120;
  v290._object = (void *)0xE700000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v290);
  v291 = swift_getKeyPath(&unk_10007AC38);
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v291, v12, v435);
  swift_release(v291);
  v292._countAndFlagsBits = 0;
  v292._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v292);
  v293 = v436;
  AppShortcutPhrase.init(stringInterpolation:)(v286, &type metadata for CollectionOpenIntent, v436);
  v294 = v437;
  v295 = v432;
  v430 = (char *)(v437 + 23 * v432);
  v296 = v409;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(12, 2, &type metadata for CollectionOpenIntent, v293);
  v297._countAndFlagsBits = 0x206573776F7242;
  v297._object = (void *)0xE700000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v297);
  v298 = v434;
  v299 = v431;
  v288(v11, v434, v431);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v289(v11, v299);
  v300._countAndFlagsBits = 0x20726F6620;
  v300._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v300);
  v301 = swift_getKeyPath(&unk_10007AC38);
  v302 = v435;
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v301, v12, v435);
  swift_release(v301);
  v303._countAndFlagsBits = 0;
  v303._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v303);
  v304 = v436;
  AppShortcutPhrase.init(stringInterpolation:)(v296, &type metadata for CollectionOpenIntent, v436);
  v430 = (char *)(v294 + 24 * v295);
  v305 = v410;
  v306 = v304;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(5, 2, &type metadata for CollectionOpenIntent, v304);
  v307._countAndFlagsBits = 543515987;
  v307._object = (void *)0xE400000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v307);
  v308 = swift_getKeyPath(&unk_10007AC38);
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v308, v12, v302);
  swift_release(v308);
  v309._countAndFlagsBits = 32;
  v309._object = (void *)0xE100000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v309);
  v310 = v431;
  v311 = v433;
  v433(v11, v298, v431);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v312 = v438;
  v438(v11, v310);
  v313._countAndFlagsBits = 0;
  v313._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v313);
  AppShortcutPhrase.init(stringInterpolation:)(v305, &type metadata for CollectionOpenIntent, v306);
  v314 = v437;
  v315 = v432;
  v430 = (char *)(v437 + 25 * v432);
  v316 = v411;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(11, 2, &type metadata for CollectionOpenIntent, v306);
  v317._countAndFlagsBits = 543515987;
  v317._object = (void *)0xE400000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v317);
  v318 = v298;
  v319 = v431;
  v311(v11, v318, v431);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v312(v11, v319);
  v320._countAndFlagsBits = 0x2074756F626120;
  v320._object = (void *)0xE700000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v320);
  v321 = swift_getKeyPath(&unk_10007AC38);
  v322 = v435;
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v321, v12, v435);
  swift_release(v321);
  v323._countAndFlagsBits = 0;
  v323._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v323);
  AppShortcutPhrase.init(stringInterpolation:)(v316, &type metadata for CollectionOpenIntent, v306);
  v430 = (char *)(v314 + 26 * v315);
  v324 = v314;
  v325 = v412;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(9, 2, &type metadata for CollectionOpenIntent, v306);
  v326._countAndFlagsBits = 543515987;
  v326._object = (void *)0xE400000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v326);
  v327 = v434;
  v328 = v431;
  v311(v11, v434, v431);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v329 = v438;
  v438(v11, v328);
  v330._countAndFlagsBits = 0x20726F6620;
  v330._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v330);
  v331 = swift_getKeyPath(&unk_10007AC38);
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v331, v12, v322);
  swift_release(v331);
  v332._countAndFlagsBits = 0;
  v332._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v332);
  AppShortcutPhrase.init(stringInterpolation:)(v325, &type metadata for CollectionOpenIntent, v306);
  v333 = v432;
  v430 = (char *)(v324 + 27 * v432);
  v334 = v413;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(14, 2, &type metadata for CollectionOpenIntent, v306);
  v335._countAndFlagsBits = 0x6572612074616857;
  v335._object = (void *)0xE900000000000020;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v335);
  v336 = v327;
  v337 = v431;
  v338 = v433;
  v433(v11, v336, v431);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v329(v11, v337);
  v339._countAndFlagsBits = 0x20726F6620;
  v339._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v339);
  v340 = swift_getKeyPath(&unk_10007AC38);
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v340, v12, v435);
  swift_release(v340);
  v341._countAndFlagsBits = 0;
  v341._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v341);
  AppShortcutPhrase.init(stringInterpolation:)(v334, &type metadata for CollectionOpenIntent, v306);
  v430 = (char *)(v437 + 28 * v333);
  v342 = v415;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(19, 2, &type metadata for CollectionOpenIntent, v306);
  v343._countAndFlagsBits = 0x6572612074616857;
  v343._object = (void *)0xEE0020656D6F7320;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v343);
  v344 = v434;
  v345 = v338;
  v338(v11, v434, v337);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v438(v11, v337);
  v346._countAndFlagsBits = 0x20726F6620;
  v346._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v346);
  v347 = swift_getKeyPath(&unk_10007AC38);
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v347, v12, v435);
  swift_release(v347);
  v348._countAndFlagsBits = 0;
  v348._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v348);
  AppShortcutPhrase.init(stringInterpolation:)(v342, &type metadata for CollectionOpenIntent, v306);
  v349 = v432;
  v430 = (char *)(v437 + 29 * v432);
  v350 = v416;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(14, 2, &type metadata for CollectionOpenIntent, v306);
  v351._countAndFlagsBits = 0x656D206863616554;
  v351._object = (void *)0xE900000000000020;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v351);
  v345(v11, v344, v337);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v352 = v438;
  v438(v11, v337);
  v353._countAndFlagsBits = 0x20726F6620;
  v353._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v353);
  v354 = swift_getKeyPath(&unk_10007AC38);
  v355 = v435;
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v354, v12, v435);
  swift_release(v354);
  v356._countAndFlagsBits = 0;
  v356._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v356);
  AppShortcutPhrase.init(stringInterpolation:)(v350, &type metadata for CollectionOpenIntent, v306);
  v430 = (char *)(v437 + 30 * v349);
  v357 = v418;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(15, 2, &type metadata for CollectionOpenIntent, v306);
  v358._countAndFlagsBits = 0x20656D206C6C6554;
  v358._object = (void *)0xE800000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v358);
  v359 = v434;
  v360 = v433;
  v433(v11, v434, v337);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v352(v11, v337);
  v361._countAndFlagsBits = 0x2074756F626120;
  v361._object = (void *)0xE700000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v361);
  v362 = swift_getKeyPath(&unk_10007AC38);
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v362, v12, v355);
  swift_release(v362);
  v363._countAndFlagsBits = 0;
  v363._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v363);
  v364 = v436;
  AppShortcutPhrase.init(stringInterpolation:)(v357, &type metadata for CollectionOpenIntent, v436);
  v432 = v437 + v414 - v432;
  v365 = v422;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(7, 2, &type metadata for CollectionOpenIntent, v364);
  v366._countAndFlagsBits = 0;
  v366._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v366);
  v360(v11, v359, v337);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v367 = v438;
  v438(v11, v337);
  v368._countAndFlagsBits = 0x2074756F626120;
  v368._object = (void *)0xE700000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v368);
  v369 = swift_getKeyPath(&unk_10007AC38);
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v369, v12, v355);
  swift_release(v369);
  v370._countAndFlagsBits = 0;
  v370._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v370);
  v371 = v436;
  AppShortcutPhrase.init(stringInterpolation:)(v365, &type metadata for CollectionOpenIntent, v436);
  v372 = v423;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(5, 2, &type metadata for CollectionOpenIntent, v371);
  v373._countAndFlagsBits = 0;
  v373._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v373);
  v433(v11, v434, v337);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v11, v12);
  v367(v11, v337);
  v374._countAndFlagsBits = 0x20726F6620;
  v374._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v374);
  v375 = swift_getKeyPath(&unk_10007AC38);
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(v375, v12, v435);
  swift_release(v375);
  v376._countAndFlagsBits = 0;
  v376._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v376);
  AppShortcutPhrase.init(stringInterpolation:)(v372, &type metadata for CollectionOpenIntent, v371);
  v377 = v424;
  v378 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000028, 0x800000010008CDA0);
  v379 = v426;
  static Locale.current.getter(v378);
  v380 = v427;
  (*(void (**)(char *, _QWORD, uint64_t))(v428 + 104))(v427, enum case for LocalizedStringResource.BundleDescription.main(_:), v429);
  v381 = v425;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v377, 0, 0, v379, v380, "Section Header text for the Open Collection App Shortcuts in Shortcuts.app", 74, 2);
  v382 = v419;
  AppShortcut.init<A>(intent:phrases:shortTitle:systemImageName:)(&v439, v417, v381, 1936746868, 0xE400000000000000, &type metadata for CollectionOpenIntent, v371);
  v383 = static AppShortcutsBuilder.buildExpression(_:)(v382);
  (*(void (**)(char *, uint64_t))(v420 + 8))(v382, v421);
  v384 = sub_1000187A4(&qword_1000B5670);
  v385 = swift_allocObject(v384, 40, 7);
  *(_OWORD *)(v385 + 16) = xmmword_1000791F0;
  *(_QWORD *)(v385 + 32) = v383;
  v386 = static AppShortcutsBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v385);
  return v386;
}

void sub_10000FA94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  id v5;
  void *v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  char v23;
  void *v24;
  void (*v25)(id *, _QWORD);
  _QWORD *v26;
  id v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t i;
  id v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  id v66;
  id v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[7];
  id v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  id v86[5];
  unint64_t v87;
  uint64_t v88;

  v2 = v0;
  KeyPath = swift_getKeyPath(&unk_100079300);
  v4 = swift_getKeyPath(&unk_100079328);
  static Published.subscript.getter(v86, v2, KeyPath, v4);
  swift_release(KeyPath);
  swift_release(v4);
  v5 = v86[0];
  if (v86[0])
  {
    v6 = *(void **)(v2 + OBJC_IVAR___TPSChecklistViewModel_appController);
    v7 = objc_msgSend(v86[0], "identifier");
    if (!v7)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v9 = v8;
      v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v9);
    }
    v10 = objc_msgSend(v6, "tipsForCollectionIdentifier:", v7);

    if (!v10)
    {

      return;
    }
    v82 = v5;
    v83 = v2;
    v11 = sub_100006578(0, (unint64_t *)&qword_1000B42F0, TPSTip_ptr);
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

    v13 = (_QWORD *)sub_100003F34((uint64_t)_swiftEmptyArrayStorage);
    v87 = (unint64_t)_swiftEmptyArrayStorage;
    v88 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v12 >> 62)
      goto LABEL_41;
    v14 = v12 & 0xFFFFFFFFFFFFF8;
    v15 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v15)
    {
      while (2)
      {
        if (v15 >= 1)
        {
          v16 = 0;
          v84 = v15;
          v85 = v12 & 0xC000000000000001;
          while (1)
          {
            v17 = v85
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v12)
                : *(id *)(v12 + 8 * v16 + 32);
            v18 = v17;
            v19 = objc_msgSend(v17, "checklistContent");

            if (v19)
              break;

LABEL_10:
            if (v15 == ++v16)
              goto LABEL_45;
          }
          if (objc_msgSend(v18, "contentStatus") == (id)1)
          {
            v20 = swift_getKeyPath(&unk_100079468);
            v21 = swift_getKeyPath(&unk_100079490);
            static Published.subscript.getter(v86, v83, v20, v21);
            swift_release(v20);
            swift_release(v21);
            v22 = v86[0];
            if (v86[0])
            {
              v23 = sub_1000363C8((uint64_t)v18, (uint64_t)v86[0]);
              swift_bridgeObjectRelease(v22);
              if ((v23 & 1) == 0)
              {
                type metadata accessor for TPSAnalyticsChecklistSessionController(0);
                v24 = (void *)static TPSAnalyticsChecklistSessionController.sharedInstance.getter();
                v25 = (void (*)(id *, _QWORD))dispatch thunk of TPSAnalyticsChecklistSessionController.sessionTipsCompleted.modify(v86);
                if (__OFADD__(*v26, 1))
                  goto LABEL_40;
                ++*v26;
                v25(v86, 0);

              }
            }
            v27 = v18;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            v29 = *(_QWORD *)((v87 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v28 = *(_QWORD *)((v87 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v29 >= v28 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
          }
          else
          {
            v27 = v18;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            v29 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v30 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v29 >= v30 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v29 + 1, 1);
          }
          v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v27);
          specialized Array._endMutation()(v31);
          v32 = objc_msgSend(v18, "identifier");
          v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
          v1 = v34;

          v35 = v18;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
          v86[0] = v13;
          v38 = sub_10001023C(v33, v1);
          v39 = v13[2];
          v40 = (v37 & 1) == 0;
          v41 = v39 + v40;
          if (__OFADD__(v39, v40))
          {
            __break(1u);
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
LABEL_41:
            if (v12 < 0)
              v50 = v12;
            else
              v50 = v12 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v12);
            v15 = _CocoaArrayWrapper.endIndex.getter(v50);
            swift_bridgeObjectRelease(v12);
            if (!v15)
              goto LABEL_45;
            continue;
          }
          v42 = v37;
          if (v13[3] < v41)
          {
            sub_100010380(v41, isUniquelyReferenced_nonNull_native);
            v43 = sub_10001023C(v33, v1);
            if ((v42 & 1) != (v44 & 1))
              goto LABEL_85;
            v38 = v43;
            v13 = v86[0];
            if ((v42 & 1) == 0)
              goto LABEL_34;
LABEL_32:
            v45 = v13[7];

            *(_QWORD *)(v45 + 8 * v38) = v35;
LABEL_36:

            swift_bridgeObjectRelease(v1);
            swift_bridgeObjectRelease(0x8000000000000000);
            v15 = v84;
            goto LABEL_10;
          }
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v13 = v86[0];
            if ((v37 & 1) != 0)
              goto LABEL_32;
          }
          else
          {
            sub_100049E10();
            v13 = v86[0];
            if ((v42 & 1) != 0)
              goto LABEL_32;
          }
LABEL_34:
          v13[(v38 >> 6) + 8] |= 1 << v38;
          v46 = (uint64_t *)(v13[6] + 16 * v38);
          *v46 = v33;
          v46[1] = v1;
          *(_QWORD *)(v13[7] + 8 * v38) = v35;
          v47 = v13[2];
          v48 = __OFADD__(v47, 1);
          v49 = v47 + 1;
          if (v48)
            goto LABEL_39;
          v13[2] = v49;
          swift_bridgeObjectRetain(v1);
          goto LABEL_36;
        }
        break;
      }
      __break(1u);
LABEL_62:
      if (v12 >= 0)
        v71 = v14;
      else
        v71 = v12;
      swift_bridgeObjectRetain(v12);
      v56 = _CocoaArrayWrapper.endIndex.getter(v71);
      swift_bridgeObjectRelease(v12);
      if (!v56)
        goto LABEL_66;
LABEL_48:
      if (v56 >= 1)
      {
        for (i = 0; i != v56; ++i)
        {
          if ((v12 & 0xC000000000000001) != 0)
            v58 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v12);
          else
            v58 = *(id *)(v12 + 8 * i + 32);
          v59 = v58;
          v60 = objc_msgSend(v58, "identifier");
          v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
          v63 = v62;

          if (v13[2] && (v64 = sub_10001023C(v61, v63), (v65 & 1) != 0))
          {
            v66 = *(id *)(v13[7] + 8 * v64);
            swift_bridgeObjectRelease(v63);
            v67 = v66;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            v69 = *(_QWORD *)(((unint64_t)v86[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
            v68 = *(_QWORD *)(((unint64_t)v86[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v69 >= v68 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, v69 + 1, 1);
            v70 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v69, v67);
            specialized Array._endMutation()(v70);

          }
          else
          {

            swift_bridgeObjectRelease(v63);
          }
        }
        swift_bridgeObjectRelease(v12);
        v55 = v86[0];
        goto LABEL_67;
      }
      __break(1u);
LABEL_85:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
LABEL_45:
      v51 = swift_bridgeObjectRelease(v12);
      v52 = __chkstk_darwin(v51);
      v53 = v83;
      v81[2] = v83;
      v81[3] = &v88;
      v81[4] = &v87;
      v54 = static Animation.default.getter(v52);
      withAnimation<A>(_:_:)(v54, sub_100019D80, v81, (char *)&type metadata for () + 8);
      swift_release(v54);
      v55 = sub_100006178();
      v1 = OBJC_IVAR___TPSChecklistViewModel_currentDisplayTips;
      v12 = *(_QWORD *)(v53 + OBJC_IVAR___TPSChecklistViewModel_currentDisplayTips);
      if (v12)
      {
        v86[0] = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRelease(v55);
        v14 = v12 & 0xFFFFFFFFFFFFFF8;
        if ((unint64_t)v12 >> 62)
          goto LABEL_62;
        v56 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v56)
          goto LABEL_48;
LABEL_66:
        swift_bridgeObjectRelease(v12);
        v55 = _swiftEmptyArrayStorage;
      }
LABEL_67:
      v72 = *(_QWORD *)(v83 + v1);
      *(_QWORD *)(v83 + v1) = v55;
      v73 = swift_bridgeObjectRelease(v72);
      dispatch thunk of TPSAnalyticsChecklistSessionController.sessionStartSuggestedTipCount.getter(v73);
      v74 = v88;
      v75 = (unint64_t)v88 >> 62;
      if ((v76 & 1) != 0)
      {
        if (v75)
        {
          if (v88 < 0)
            v80 = v88;
          else
            v80 = v88 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v88);
          v78 = _CocoaArrayWrapper.endIndex.getter(v80);
          swift_bridgeObjectRelease(v74);
        }
        else
        {
          v78 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        dispatch thunk of TPSAnalyticsChecklistSessionController.sessionStartSuggestedTipCount.setter(v78, 0);
      }
      else
      {
        if (v75)
        {
          if (v88 < 0)
            v79 = v88;
          else
            v79 = v88 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v88);
          v77 = _CocoaArrayWrapper.endIndex.getter(v79);
          swift_bridgeObjectRelease(v74);
        }
        else
        {
          v77 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        dispatch thunk of TPSAnalyticsChecklistSessionController.sessionEndSuggestedTipsCount.setter(v77);
      }
      sub_100006B58();

      swift_bridgeObjectRelease(v87);
      swift_bridgeObjectRelease(v88);
      swift_bridgeObjectRelease(v13);
    }
  }
}

unint64_t sub_10001023C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_1000102A0(a1, a2, v5);
}

unint64_t sub_1000102A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

Swift::Int sub_100010380(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000187A4(&qword_1000B5340);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      v34 = v33;
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void sub_10001068C(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v4 = sub_1000187A4(&qword_1000B5260);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }

  v9 = (char *)a1 + a2[7];
  swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));

}

uint64_t *sub_10001077C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;

  v6 = sub_1000187A4(&qword_1000B5260);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[6];
  v22 = a3[7];
  v23 = (uint64_t *)((char *)a1 + v21);
  v24 = (uint64_t *)((char *)a2 + v21);
  v26 = *v24;
  v25 = (void *)v24[1];
  *v23 = v26;
  v23[1] = v25;
  v27 = (uint64_t *)((char *)a1 + v22);
  v28 = (uint64_t *)((char *)a2 + v22);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = v28[3];
  v27[2] = v28[2];
  v27[3] = v30;
  v31 = a3[8];
  v32 = *(void **)((char *)a2 + v31);
  *(uint64_t *)((char *)a1 + v31) = (uint64_t)v32;
  v33 = v25;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  v34 = v32;
  return a1;
}

uint64_t sub_1000108F0(void **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  void *v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD aBlock[5];
  uint64_t v54;

  v49 = type metadata accessor for DispatchWorkItemFlags(0);
  v52 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v48 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v50 = *(_QWORD *)(v5 - 8);
  v51 = v5;
  __chkstk_darwin(v5);
  v47 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FeaturedCollectionView(0);
  v46 = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(v46 + 64);
  __chkstk_darwin(v7);
  v44 = (uint64_t)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v43 - 8);
  v10 = __chkstk_darwin(v43);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v45 = (char *)&v41 - v13;
  v14 = type metadata accessor for ColorScheme(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *a1;
  v18 = *(id *)(a2 + *(int *)(v7 + 20) + 8);
  sub_100012200((uint64_t)v17);
  sub_100010CE4(v17, 0);

  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  sub_100010CA8();
  v19 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)(v12, 1.0);
  v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v21 = v43;
  v20(v12, v43);
  v22 = v44;
  sub_10000A968(a2, v44, type metadata accessor for FeaturedCollectionView);
  v23 = *(unsigned __int8 *)(v46 + 80);
  v24 = (v23 + 16) & ~v23;
  v25 = (v8 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject(&unk_1000A3518, v25 + 8, v23 | 7);
  sub_100011E1C(v22, v26 + v24);
  v27 = v42;
  *(_QWORD *)(v26 + v25) = v42;
  aBlock[4] = sub_100034908;
  v54 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100003DA8;
  aBlock[3] = &unk_1000A3530;
  v28 = _Block_copy(aBlock);
  v29 = v54;
  v30 = v27;
  v31 = swift_release(v29);
  v32 = v47;
  static DispatchQoS.unspecified.getter(v31);
  aBlock[0] = _swiftEmptyArrayStorage;
  v33 = sub_1000041E8((unint64_t *)&qword_1000B44A8, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v34 = sub_1000187A4(&qword_1000B44B0);
  v35 = sub_1000086E8((unint64_t *)&qword_1000B44B8, &qword_1000B44B0, (uint64_t)&protocol conformance descriptor for [A]);
  v36 = v48;
  v37 = v34;
  v38 = v49;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v37, v35, v49, v33);
  v39 = v45;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v45, v32, v36, v28);
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v52 + 8))(v36, v38);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v32, v51);
  return ((uint64_t (*)(char *, uint64_t))v20)(v39, v21);
}

unint64_t sub_100010CA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B44A0;
  if (!qword_1000B44A0)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000B44A0);
  }
  return result;
}

void sub_100010CE4(char *a1, char a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void (*v10)(char *, char *, uint64_t);
  char v11;
  uint64_t KeyPath;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  _QWORD v17[3];
  char v18[24];

  v5 = type metadata accessor for ColorScheme(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = &v2[OBJC_IVAR___CollectionListViewModel_colorScheme];
  swift_beginAccess(&v2[OBJC_IVAR___CollectionListViewModel_colorScheme], v18, 0, 0);
  v10 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v10(v8, v9, v5);
  v11 = static ColorScheme.== infix(_:_:)(v8, a1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((v11 & 1) == 0 || (a2 & 1) != 0)
  {
    v10(v8, a1, v5);
    swift_beginAccess(v9, v17, 33, 0);
    (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v9, v8, v5);
    swift_endAccess(v17);
    KeyPath = swift_getKeyPath(&unk_100079868);
    v13 = swift_getKeyPath(&unk_100079890);
    static Published.subscript.getter(v17, v2, KeyPath, v13);
    swift_release(KeyPath);
    swift_release(v13);
    v14 = (void *)v17[0];
    if (v17[0])
    {
      v15 = *(_QWORD *)&v2[OBJC_IVAR___CollectionListViewModel_featuredAssetViewModel];
      if (v15)
      {
        swift_retain(*(_QWORD *)&v2[OBJC_IVAR___CollectionListViewModel_featuredAssetViewModel]);
        v16 = objc_msgSend(v2, "assetsInfoFor:", v14);
        dispatch thunk of DocumentAssetViewModel.updateWithTipAssetInfo(_:shouldReload:)();
        swift_release(v15);

      }
    }
  }
}

uint64_t sub_100010EA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t KeyPath;
  uint64_t *v52;
  id v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;

  v69 = a1;
  v2 = sub_1000187A4(&qword_1000B42D8);
  __chkstk_darwin(v2);
  v67 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_1000187A4(&qword_1000B4740);
  v4 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_1000187A4(&qword_1000B4748);
  __chkstk_darwin(v62);
  v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_1000187A4(&qword_1000B4750);
  __chkstk_darwin(v63);
  v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_1000187A4(&qword_1000B4758);
  __chkstk_darwin(v66);
  v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(int *)(type metadata accessor for FeaturedCollectionView(0) + 32);
  v68 = v1;
  v65 = v13;
  v14 = objc_msgSend(*(id *)(v1 + v13), "featuredTitle");
  if (v14)
  {
    v15 = v14;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v18 = v17;

  }
  else
  {
    v16 = 0;
    v18 = 0xE000000000000000;
  }
  v70 = v16;
  v71 = v18;
  v19 = sub_100014614();
  v20 = Text.init<A>(_:)(&v70, &type metadata for String, v19);
  v22 = v21;
  v24 = v23;
  v70 = v20;
  v71 = v21;
  v26 = v25 & 1;
  v72 = v25 & 1;
  v73 = v23;
  View.avoidsOrphans(_:)(0, &type metadata for Text, &protocol witness table for Text);
  sub_100014658(v20, v22, v26);
  v27 = swift_bridgeObjectRelease(v24);
  LOBYTE(v20) = static Edge.Set.top.getter(v27);
  v28 = EdgeInsets.init(_all:)(8.0);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v35 = v64;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v8, v6, v64);
  v36 = &v8[*(int *)(v62 + 36)];
  *v36 = v20;
  *((double *)v36 + 1) = v28;
  *((_QWORD *)v36 + 2) = v30;
  *((_QWORD *)v36 + 3) = v32;
  *((_QWORD *)v36 + 4) = v34;
  v36[40] = 0;
  v37 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v35);
  LOBYTE(v20) = static Edge.Set.horizontal.getter(v37);
  v38 = EdgeInsets.init(_all:)(12.0);
  v40 = v39;
  v42 = v41;
  v44 = v43;
  sub_1000121BC((uint64_t)v8, (uint64_t)v10, &qword_1000B4748);
  v45 = &v10[*(int *)(v63 + 36)];
  *v45 = v20;
  *((double *)v45 + 1) = v38;
  *((_QWORD *)v45 + 2) = v40;
  *((_QWORD *)v45 + 3) = v42;
  *((_QWORD *)v45 + 4) = v44;
  v45[40] = 0;
  sub_100011DE0((uint64_t)v8, &qword_1000B4748);
  v46 = type metadata accessor for Font.Design(0);
  v47 = (uint64_t)v67;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v67, 1, 1, v46);
  v48 = static Font.system(size:weight:design:)(0, 1, v47, 28.0);
  v49 = sub_100011DE0(v47, &qword_1000B42D8);
  static Font.Weight.bold.getter(v49);
  v50 = Font.weight(_:)(v48);
  swift_release(v48);
  KeyPath = swift_getKeyPath(&unk_100079150);
  sub_1000121BC((uint64_t)v10, (uint64_t)v12, &qword_1000B4750);
  v52 = (uint64_t *)&v12[*(int *)(v66 + 36)];
  *v52 = KeyPath;
  v52[1] = v50;
  sub_100011DE0((uint64_t)v10, &qword_1000B4750);
  v53 = objc_msgSend(*(id *)(v68 + v65), "featuredContent");
  if (v53 && (v54 = v53, v55 = objc_msgSend(v53, "labelStyle"), v54, v55 == (id)1))
    v56 = static Color.white.getter();
  else
    v56 = static Color.primary.getter();
  v57 = v56;
  v58 = swift_getKeyPath(&unk_100079180);
  v59 = v69;
  sub_1000121BC((uint64_t)v12, v69, &qword_1000B4758);
  v60 = (uint64_t *)(v59 + *(int *)(sub_1000187A4(&qword_1000B4760) + 36));
  *v60 = v58;
  v60[1] = v57;
  return sub_100011DE0((uint64_t)v12, &qword_1000B4758);
}

uint64_t sub_1000112F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (**v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (**v60)();
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t, uint64_t, uint64_t);
  char *v84;
  char *v85;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (**v102)(void **);
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (**v117)(char *, char *, uint64_t);
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t (*v141)@<X0>(uint64_t@<X8>);
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;

  v2 = v1;
  v137 = a1;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v135 = *(_QWORD *)(v3 - 8);
  v136 = v3;
  __chkstk_darwin(v3);
  v134 = (char *)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000187A4(&qword_1000B4690);
  v132 = *(_QWORD *)(v5 - 8);
  v133 = v5;
  __chkstk_darwin(v5);
  v131 = (char *)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000187A4(&qword_1000B4698);
  v8 = __chkstk_darwin(v7);
  v110 = (char *)&v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v109 = (char *)&v108 - v10;
  v122 = type metadata accessor for ColorScheme(0);
  v123 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122);
  v119 = (uint64_t)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000187A4(&qword_1000B46A0);
  __chkstk_darwin(v12);
  v14 = (char *)&v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for FeaturedCollectionView(0);
  v15 = *(_QWORD *)(v140 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = __chkstk_darwin(v140);
  v118 = (char *)&v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (void (**)(char *, char *, uint64_t))((char *)&v108 - v18);
  v120 = sub_1000187A4(&qword_1000B46A8);
  v117 = *(void (***)(char *, char *, uint64_t))(v120 - 8);
  __chkstk_darwin(v120);
  v21 = (char *)&v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_1000187A4(&qword_1000B46B0);
  __chkstk_darwin(v113);
  v23 = (char *)&v108 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_1000187A4(&qword_1000B46B8);
  __chkstk_darwin(v114);
  v112 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_1000187A4(&qword_1000B46C0);
  __chkstk_darwin(v121);
  v111 = (uint64_t)&v108 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_1000187A4(&qword_1000B46C8);
  __chkstk_darwin(v116);
  v115 = (uint64_t)&v108 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_1000187A4(&qword_1000B46D0);
  v126 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v138 = (char *)&v108 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_1000187A4(&qword_1000B46D8);
  __chkstk_darwin(v127);
  v130 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_1000187A4(&qword_1000B46E0);
  v125 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v124 = (char *)&v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A968(v1, (uint64_t)v19, type metadata accessor for FeaturedCollectionView);
  v30 = *(unsigned __int8 *)(v15 + 80);
  v31 = (v30 + 16) & ~v30;
  v32 = v31 + v16;
  v139 = v30 | 7;
  v33 = swift_allocObject(&unk_1000A3450, v31 + v16, v30 | 7);
  sub_100011E1C((uint64_t)v19, v33 + v31);
  v141 = sub_1000042C0;
  v142 = v33;
  v34 = v2 + *(int *)(v140 + 28);
  v35 = *(_OWORD *)v34;
  v37 = *(_QWORD *)(v34 + 16);
  v36 = *(_QWORD *)(v34 + 24);
  v143 = v35;
  *(_QWORD *)&v144 = v37;
  *((_QWORD *)&v144 + 1) = v36;
  v38 = sub_100019FCC();
  AppEntity.fullyQualifiedIdentifier.getter(&type metadata for TipCollection, v38);
  v39 = type metadata accessor for EntityIdentifier(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v14, 0, 1, v39);
  v40 = sub_1000187A4(&qword_1000B46E8);
  v41 = sub_1000086E8(&qword_1000B46F0, &qword_1000B46E8, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
  View.appEntityIdentifier(_:)(v14, v40, v41);
  sub_100011DE0((uint64_t)v14, &qword_1000B46A0);
  v42 = swift_release(v142);
  v43 = static Alignment.center.getter(v42);
  _FrameLayout.init(width:height:alignment:)(&v143, 0, 1, 0x406E000000000000, 0, v43, v44);
  v45 = (uint64_t)v117;
  v46 = v120;
  v117[2](v23, v21, v120);
  v47 = &v23[*(int *)(v113 + 36)];
  v48 = v144;
  *(_OWORD *)v47 = v143;
  *((_OWORD *)v47 + 1) = v48;
  *((_OWORD *)v47 + 2) = v145;
  v49 = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v21, v46);
  v50 = static Alignment.topLeading.getter(v49);
  v52 = v51;
  v53 = (uint64_t)v112;
  v54 = (uint64_t)&v112[*(int *)(v114 + 36)];
  sub_100010EA0(v54);
  v55 = (uint64_t *)(v54 + *(int *)(sub_1000187A4(&qword_1000B46F8) + 36));
  *v55 = v50;
  v55[1] = v52;
  sub_100014780((uint64_t)v23, v53, &qword_1000B46B0);
  sub_10000A968(v2, (uint64_t)v19, type metadata accessor for FeaturedCollectionView);
  v56 = v32;
  v57 = v139;
  v58 = swift_allocObject(&unk_1000A3478, v32, v139);
  sub_100011E1C((uint64_t)v19, v58 + v31);
  v59 = v111;
  sub_1000121BC(v53, v111, &qword_1000B46B8);
  v60 = (uint64_t (**)())(v59 + *(int *)(v121 + 36));
  *v60 = sub_100019C34;
  v60[1] = (uint64_t (*)())v58;
  v60[2] = 0;
  v60[3] = 0;
  sub_100011DE0(v53, &qword_1000B46B8);
  sub_10000A968(v2, (uint64_t)v19, type metadata accessor for FeaturedCollectionView);
  v61 = v56;
  v62 = swift_allocObject(&unk_1000A34A0, v56, v57);
  sub_100011E1C((uint64_t)v19, v62 + v31);
  v63 = v115;
  sub_1000121BC(v59, v115, &qword_1000B46C0);
  v64 = v116;
  v65 = (_QWORD *)(v63 + *(int *)(v116 + 36));
  *v65 = 0;
  v65[1] = 0;
  v65[2] = sub_1000345E4;
  v65[3] = v62;
  v66 = v59;
  v67 = (uint64_t)v118;
  sub_100011DE0(v66, &qword_1000B46C0);
  v68 = v119;
  v69 = v2;
  sub_100012200(v119);
  sub_10000A968(v2, (uint64_t)v19, type metadata accessor for FeaturedCollectionView);
  v120 = v61;
  v70 = swift_allocObject(&unk_1000A34C8, v61, v57);
  v121 = v31;
  v71 = v70 + v31;
  v72 = v69;
  v117 = v19;
  sub_100011E1C((uint64_t)v19, v71);
  v73 = sub_100034658(&qword_1000B4700, &qword_1000B46C8, (void (*)(void))sub_10003463C);
  v74 = sub_1000041E8(&qword_1000B4728, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t)&protocol conformance descriptor for ColorScheme);
  v75 = v68;
  v76 = v68;
  v77 = v122;
  View.onChange<A>(of:initial:_:)(v75, 0, sub_1000345F0, v70, v64, v122, v73, v74);
  v78 = v140;
  swift_release(v70);
  (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v76, v77);
  sub_100011DE0(v63, &qword_1000B46C8);
  v79 = *(_QWORD *)(*(_QWORD *)(v72 + *(int *)(v78 + 20) + 8)
                  + OBJC_IVAR___CollectionListViewModel_featuredAssetViewModel);
  sub_10000A968(v72, v67, type metadata accessor for FeaturedCollectionView);
  if (v79)
  {
    v80 = v79;
  }
  else
  {
    v81 = *(void **)(v67 + *(int *)(v78 + 32));
    v82 = type metadata accessor for URL(0);
    v83 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56);
    v84 = v109;
    v83(v109, 1, 1, v82);
    v85 = v110;
    v83(v110, 1, 1, v82);
    v86 = objc_allocWithZone((Class)type metadata accessor for TPSAssetsInfo(0));
    v87 = v81;
    v88 = TPSAssetsInfo.init(videoIdentifier:videoURL:imageIdentifier:imageURL:)(0, 0, v84, 0, 0, v85);
    type metadata accessor for TipsContentModel(0);
    v89 = static TipsContentModel.shared()();
    v90 = type metadata accessor for DocumentAssetViewModel(0);
    swift_allocObject(v90, *(unsigned int *)(v90 + 48), *(unsigned __int16 *)(v90 + 52));
    v80 = DocumentAssetViewModel.init(document:assetsInfo:contentModel:)(v87, v88, v89);
    v79 = 0;
  }
  swift_retain(v79);
  v91 = sub_10000A92C(v67, type metadata accessor for FeaturedCollectionView);
  v92 = v131;
  dispatch thunk of DocumentAssetViewModel.$player.getter(v91);
  swift_release(v80);
  v93 = (uint64_t)v117;
  sub_10000A968(v72, (uint64_t)v117, type metadata accessor for FeaturedCollectionView);
  v94 = swift_allocObject(&unk_1000A34F0, v120, v139);
  sub_100011E1C(v93, v94 + v121);
  v95 = v126;
  v96 = (uint64_t)v130;
  v97 = v138;
  v98 = v128;
  (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v130, v138, v128);
  v99 = v127;
  v101 = v132;
  v100 = v133;
  (*(void (**)(uint64_t, char *, uint64_t))(v132 + 16))(v96 + *(int *)(v127 + 52), v92, v133);
  v102 = (uint64_t (**)(void **))(v96 + *(int *)(v99 + 56));
  *v102 = sub_100004284;
  v102[1] = (uint64_t (*)(void **))v94;
  (*(void (**)(char *, uint64_t))(v101 + 8))(v92, v100);
  v103 = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v97, v98);
  v104 = v134;
  static AccessibilityChildBehavior.combine.getter(v103);
  v105 = sub_1000086E8(&qword_1000B4730, &qword_1000B46D8, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
  v106 = v124;
  View.accessibilityElement(children:)(v104, v99, v105);
  (*(void (**)(char *, uint64_t))(v135 + 8))(v104, v136);
  sub_100011DE0(v96, &qword_1000B46D8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v125 + 32))(v137, v106, v129);
}

uint64_t sub_100011DE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1000187A4(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100011E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FeaturedCollectionView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for FeaturedCollectionView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B4640;
  if (!qword_1000B4640)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FeaturedCollectionView);
  return result;
}

uint64_t *sub_100011E9C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;

  v6 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a3[6];
  v14 = (uint64_t *)((char *)a1 + v12);
  v15 = (uint64_t *)((char *)a2 + v12);
  v17 = *v15;
  v16 = (void *)v15[1];
  *v14 = v17;
  v14[1] = v16;
  v18 = (char *)a1 + v13;
  v19 = (char *)a2 + v13;
  *v18 = *v19;
  v20 = *((_QWORD *)v19 + 1);
  *((_QWORD *)v18 + 1) = v20;
  v21 = a3[7];
  v22 = a3[8];
  v23 = (uint64_t *)((char *)a1 + v21);
  v24 = (uint64_t *)((char *)a2 + v21);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = v24[3];
  v23[2] = v24[2];
  v23[3] = v26;
  v27 = *(void **)((char *)a2 + v22);
  *(uint64_t *)((char *)a1 + v22) = (uint64_t)v27;
  v28 = v16;
  swift_retain(v20);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  v29 = v27;
  return a1;
}

uint64_t sub_100011FB4@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, char *a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v25 = a4;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000187A4(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000121BC(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    v20 = *v17;
    v21 = static os_log_type_t.fault.getter();
    v22 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v22, v21))
    {
      v23 = swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v26 = v24;
      *(_DWORD *)v23 = 136315138;
      *(_QWORD *)(v23 + 4) = sub_10005F8BC(a3, v25, &v26);
      _os_log_impl((void *)&_mh_execute_header, v22, v21, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v14, v20);
    swift_release(v20);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_1000121BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000187A4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100012200@<X0>(uint64_t a1@<X8>)
{
  return sub_100011FB4(&qword_1000B41C0, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, (char *)0x686353726F6C6F43, (char *)0xEB00000000656D65, a1);
}

Class sub_100012790(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, _QWORD *a6)
{
  uint64_t KeyPath;
  uint64_t v11;
  id v12;
  uint64_t v13;
  Class isa;
  uint64_t v16;

  KeyPath = swift_getKeyPath(a3);
  v11 = swift_getKeyPath(a4);
  v12 = a1;
  static Published.subscript.getter(&v16, v12, KeyPath, v11);

  swift_release(KeyPath);
  swift_release(v11);
  v13 = v16;
  sub_100006578(0, a5, a6);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v13);
  return isa;
}

void sub_100012D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100013038(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  void *v7;
  unsigned int v8;
  id v9;

  v9 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "collectionIdentifiers"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[TPSCommonDefines checklistCollectionIdentifier](TPSCommonDefines, "checklistCollectionIdentifier"));
  v8 = objc_msgSend(v6, "containsObject:", v7);

  if (v8)
  {
    if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 48) + 16))())
    {
      objc_msgSend(*(id *)(a1 + 32), "removeObject:", v9);
      if ((unint64_t)objc_msgSend(*(id *)(a1 + 40), "count") >= 3)
        *a4 = 1;
    }
  }

}

uint64_t sub_100013100(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  _QWORD v23[2];

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  if (v4
    && (v5 = (void *)v4,
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title")),
        v7 = objc_msgSend(v6, "length"),
        v6,
        v5,
        v7))
  {
    v8 = objc_alloc_init((Class)NSURLComponents);
    objc_msgSend(v8, "setScheme:", CFSTR("tips"));
    objc_msgSend(v8, "setPath:", CFSTR("open"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[TPSCommonDefines sharedInstance](TPSCommonDefines, "sharedInstance"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "collectionIdentifiers"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "collectionIdentifierToUseForCollectionIdentifiers:", v11));

    if (objc_msgSend(v12, "length"))
    {
      v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "stringByAppendingFormat:", CFSTR("%@%@"), CFSTR("#"), v12));

      v9 = (void *)v13;
    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLQueryItem queryItemWithName:value:](NSURLQueryItem, "queryItemWithName:value:", CFSTR("type"), CFSTR("shortcut")));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLQueryItem queryItemWithName:value:](NSURLQueryItem, "queryItemWithName:value:", CFSTR("id"), v9));
    v23[0] = v14;
    v23[1] = v15;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v23, 2));
    objc_msgSend(v8, "setQueryItems:", v16);

    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "string"));
    v18 = objc_alloc((Class)UIApplicationShortcutItem);
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));
    v20 = objc_msgSend(v18, "initWithType:localizedTitle:", v17, v19);

    objc_msgSend(*(id *)(a1 + 32), "addObject:", v20);
    v21 = 1;
  }
  else
  {
    v21 = 0;
  }

  return v21;
}

uint64_t sub_100013378(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath;
  uint64_t v7;
  id v8;
  uint64_t v10;

  KeyPath = swift_getKeyPath(a3);
  v7 = swift_getKeyPath(a4);
  v8 = a1;
  static Published.subscript.getter(&v10, v8, KeyPath, v7);

  swift_release(KeyPath);
  swift_release(v7);
  return v10;
}

uint64_t sub_100013404(void *a1, uint64_t a2, uint64_t a3, unint64_t *a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v16;

  v11 = sub_100006578(0, a4, a5);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, v11);
  KeyPath = swift_getKeyPath(a6);
  v14 = swift_getKeyPath(a7);
  v16 = v12;
  return static Published.subscript.setter(&v16, a1, KeyPath, v14);
}

uint64_t sub_100013490(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t KeyPath;
  uint64_t v9;
  id v10;
  void *v12;

  KeyPath = swift_getKeyPath(a4);
  v9 = swift_getKeyPath(a5);
  v12 = a3;
  v10 = a3;
  return static Published.subscript.setter(&v12, a1, KeyPath, v9);
}

uint64_t sub_100013618(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t KeyPath;
  uint64_t v9;
  char v11;

  KeyPath = swift_getKeyPath(a4);
  v9 = swift_getKeyPath(a5);
  v11 = a3;
  return static Published.subscript.setter(&v11, a1, KeyPath, v9);
}

void sub_100013690(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t KeyPath;
  uint64_t v14;
  id v15;
  char v16;

  KeyPath = swift_getKeyPath(a4);
  v14 = swift_getKeyPath(a5);
  v16 = a3;
  v15 = a1;
  static Published.subscript.setter(&v16, v15, KeyPath, v14);
  sub_100013734(a4, a5, a6, a7);

}

uint64_t sub_100013734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  char v18;
  uint64_t v19;

  KeyPath = swift_getKeyPath(&unk_100079728);
  v10 = swift_getKeyPath(&unk_100079750);
  static Published.subscript.getter(&v19, v4, KeyPath, v10);
  swift_release(KeyPath);
  swift_release(v10);
  v11 = v19;
  v12 = swift_getKeyPath(a1);
  v13 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v18, v4, v12, v13);
  swift_release(v12);
  swift_release(v13);
  LOBYTE(v13) = v18;
  v14 = swift_getKeyPath(a3);
  v15 = swift_getKeyPath(a4);
  v17 = v13;
  return static Published.subscript.setter(&v17, v11, v14, v15);
}

uint64_t sub_100013854(void *a1, uint64_t a2, char a3)
{
  return sub_100013618(a1, a2, a3, (uint64_t)&unk_10007AF10, (uint64_t)&unk_10007AF38);
}

uint64_t sub_100013868(void *a1, uint64_t a2, char a3)
{
  return sub_100013618(a1, a2, a3, (uint64_t)&unk_10007AE80, (uint64_t)&unk_10007AEA8);
}

uint64_t destroy for TipCollection(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1000142E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t OpaqueTypeConformance2;
  __int128 *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  v2 = v1;
  v41 = a1;
  v3 = sub_1000187A4(&qword_1000B46A0);
  __chkstk_darwin(v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccessibilityTraits(0);
  v39 = *(_QWORD *)(v6 - 8);
  v40 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AccessibilityChildBehavior(0);
  v35 = *(_QWORD *)(v9 - 8);
  v36 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000187A4(&qword_1000B5458);
  __chkstk_darwin(v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000187A4(&qword_1000B5460);
  v37 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_1000187A4(&qword_1000B5468);
  v18 = __chkstk_darwin(v38);
  v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v14 = static VerticalAlignment.center.getter(v18);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 1;
  v21 = sub_1000187A4(&qword_1000B5470);
  v22 = sub_10004C4E8(v2, (uint64_t)&v14[*(int *)(v21 + 44)]);
  static AccessibilityChildBehavior.combine.getter(v22);
  v23 = sub_1000086E8(&qword_1000B5478, &qword_1000B5458, (uint64_t)&protocol conformance descriptor for HStack<A>);
  View.accessibilityElement(children:)(v11, v12, v23);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v36);
  v24 = sub_100011DE0((uint64_t)v14, &qword_1000B5458);
  static AccessibilityTraits.isButton.getter(v24);
  *(_QWORD *)&v42 = v12;
  *((_QWORD *)&v42 + 1) = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v42, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityAddTraits(_:)(v8, v15, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v40);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v17, v15);
  v26 = (__int128 *)(v34 + *(int *)(type metadata accessor for CollectionListItemView(0) + 28));
  v27 = *v26;
  v29 = *((_QWORD *)v26 + 2);
  v28 = *((_QWORD *)v26 + 3);
  v42 = v27;
  v43 = v29;
  v44 = v28;
  v30 = sub_100019FCC();
  AppEntity.fullyQualifiedIdentifier.getter(&type metadata for TipCollection, v30);
  v31 = type metadata accessor for EntityIdentifier(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v5, 0, 1, v31);
  v32 = sub_10004DA24();
  View.appEntityIdentifier(_:)(v5, v38, v32);
  sub_100011DE0((uint64_t)v5, &qword_1000B46A0);
  return sub_100011DE0((uint64_t)v20, &qword_1000B5468);
}

unint64_t sub_100014614()
{
  unint64_t result;

  result = qword_1000B42E0;
  if (!qword_1000B42E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000B42E0);
  }
  return result;
}

uint64_t sub_100014658(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_100014668(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000176F8(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for CollectionListItemView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B5408;
  if (!qword_1000B5408)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CollectionListItemView);
  return result;
}

uint64_t sub_100014708@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for CollectionListViewModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for CollectionListViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B4A80;
  if (!qword_1000B4A80)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CollectionListViewModel);
  return result;
}

uint64_t sub_100014780(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000187A4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000147C4(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_100031A98(result, a2, a3 & 1);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_1000147F4(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_100014658(result, a2, a3 & 1);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

BOOL sub_100014870(void *a1)
{
  void *v1;
  void *v2;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  id v7;
  char v8;
  _BOOL8 result;
  void *v10;

  v2 = v1;
  KeyPath = swift_getKeyPath(&unk_1000796E0);
  v5 = swift_getKeyPath(&unk_100079708);
  static Published.subscript.getter(&v10, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  v6 = v10;
  result = 0;
  if (v10)
  {
    sub_100006578(0, (unint64_t *)&qword_1000B61F0, TPSCollection_ptr);
    v7 = a1;
    v8 = static NSObject.== infix(_:_:)(v7, v6);

    if ((v8 & 1) != 0 && !objc_msgSend(v2, "tipCountFor:", v7))
      return 1;
  }
  return result;
}

BOOL sub_1000149AC(void *a1)
{
  void *v1;
  void *v2;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  char v13;
  void *v15;

  v2 = v1;
  KeyPath = swift_getKeyPath(&unk_1000797C8);
  v5 = swift_getKeyPath(&unk_1000797F0);
  static Published.subscript.getter(&v15, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  v6 = v15;
  if (v15)
  {
    sub_100006578(0, (unint64_t *)&qword_1000B61F0, TPSCollection_ptr);
    v7 = a1;
    v8 = static NSObject.== infix(_:_:)(v7, v6);

    if ((v8 & 1) != 0)
      return (uint64_t)objc_msgSend(v2, "tipCountFor:", a1) > 0;
  }
  v9 = swift_getKeyPath(&unk_1000796E0);
  v10 = swift_getKeyPath(&unk_100079708);
  static Published.subscript.getter(&v15, v2, v9, v10);
  swift_release(v9);
  swift_release(v10);
  v11 = v15;
  if (!v15)
    return 0;
  sub_100006578(0, (unint64_t *)&qword_1000B61F0, TPSCollection_ptr);
  v12 = a1;
  v13 = static NSObject.== infix(_:_:)(v12, v11);

  return (v13 & 1) != 0 && (uint64_t)objc_msgSend(v2, "tipCountFor:", a1) > 0;
}

uint64_t sub_100014B28@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  __int128 v110;
  uint64_t v111;
  unsigned __int8 v112;
  uint64_t v113;
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  __int128 v121;

  LODWORD(v3) = a2;
  v98 = a3;
  v5 = sub_1000187A4(&qword_1000B5538);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v100 = (uint64_t)&v75 - v9;
  v86 = sub_1000187A4(&qword_1000B5540);
  __chkstk_darwin(v86);
  v90 = (uint64_t *)((char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v89 = type metadata accessor for Image.Scale(0);
  v88 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v87 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000187A4(&qword_1000B42D8);
  __chkstk_darwin(v12);
  v14 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Font.TextStyle(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_1000187A4(&qword_1000B5548);
  v96 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v20 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000187A4(&qword_1000B5550);
  v22 = __chkstk_darwin(v21);
  v97 = (uint64_t)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v25 = (char *)&v75 - v24;
  v95 = a1;
  v94 = v14;
  v93 = v15;
  v92 = v16;
  v91 = v18;
  if ((a1 & 1) != 0)
  {
    v85 = Image.init(systemName:)(0x72616D6B63656863, 0xE90000000000006BLL);
    (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for Font.TextStyle.footnote(_:), v15);
    v26 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v14, 1, 1, v26);
    v27 = static Font.system(_:design:weight:)(v18, v14, 0, 1);
    v82 = v3;
    v28 = v27;
    sub_100011DE0((uint64_t)v14, &qword_1000B42D8);
    v29 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    static Font.Weight.bold.getter(v29);
    v81 = Font.weight(_:)(v28);
    swift_release(v28);
    KeyPath = swift_getKeyPath(&unk_10007A9D0);
    v31 = static Color.green.getter();
    v84 = v8;
    v32 = v31;
    v3 = swift_getKeyPath(&unk_10007AA00);
    v33 = static Alignment.trailing.getter();
    _FrameLayout.init(width:height:alignment:)(&v111, 0, 1, 0, 1, v33, v34);
    v80 = v111;
    v79 = v112;
    v78 = v113;
    v77 = v114;
    v83 = v25;
    v35 = v115;
    v76 = v116;
    v36 = v88;
    v37 = v87;
    v38 = v89;
    (*(void (**)(char *, _QWORD, uint64_t))(v88 + 104))(v87, enum case for Image.Scale.large(_:), v89);
    v39 = swift_getKeyPath(&unk_10007AA30);
    v40 = v90;
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))((char *)v90 + *(int *)(v86 + 28), v37, v38);
    *v40 = v39;
    sub_1000121BC((uint64_t)v40, (uint64_t)&v20[*(int *)(v99 + 36)], &qword_1000B5540);
    v41 = v85;
    *(_QWORD *)v20 = v85;
    *((_QWORD *)v20 + 1) = KeyPath;
    v42 = v81;
    *((_QWORD *)v20 + 2) = v81;
    *((_QWORD *)v20 + 3) = v3;
    v43 = v80;
    *((_QWORD *)v20 + 4) = v32;
    *((_QWORD *)v20 + 5) = v43;
    v20[48] = v79;
    *((_QWORD *)v20 + 7) = v78;
    v20[64] = v77;
    *((_QWORD *)v20 + 9) = v35;
    v25 = v83;
    *((_QWORD *)v20 + 10) = v76;
    swift_retain(v41);
    swift_retain(KeyPath);
    swift_retain(v42);
    swift_retain(v3);
    swift_retain(v32);
    sub_100011DE0((uint64_t)v40, &qword_1000B5540);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v38);
    v44 = v32;
    v8 = v84;
    swift_release(v44);
    v45 = v3;
    LOBYTE(v3) = v82;
    swift_release(v45);
    swift_release(v42);
    swift_release(KeyPath);
    swift_release(v85);
    sub_100014780((uint64_t)v20, (uint64_t)v25, &qword_1000B5548);
    v46 = 0;
  }
  else
  {
    v46 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v96 + 56))(v25, v46, 1, v99);
  if ((v3 & 1) != 0)
  {
    v47 = Image.init(systemName:)(0x2E6E6F7276656863, 0xEF64726177726F66);
    v48 = v92;
    v49 = v91;
    v50 = v93;
    (*(void (**)(char *, _QWORD, uint64_t))(v92 + 104))(v91, enum case for Font.TextStyle.footnote(_:), v93);
    v51 = type metadata accessor for Font.Design(0);
    v52 = (uint64_t)v94;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v94, 1, 1, v51);
    v53 = static Font.system(_:design:weight:)(v49, v52, 0, 1);
    sub_100011DE0(v52, &qword_1000B42D8);
    v54 = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v49, v50);
    static Font.Weight.bold.getter(v54);
    v55 = Font.weight(_:)(v53);
    swift_release(v53);
    v56 = swift_getKeyPath(&unk_10007A9D0);
    v57 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
    v58 = Color.init(_:)(v57);
    v59 = v25;
    v60 = swift_getKeyPath(&unk_10007AA00);
    v61 = static Alignment.trailing.getter();
    _FrameLayout.init(width:height:alignment:)(&v117, 0, 1, 0, 1, v61, v62);
    v101 = v47;
    v102 = v56;
    v103 = v55;
    v104 = v60;
    v105 = v58;
    v106 = v117;
    v107 = v118;
    v108 = v119;
    v109 = v120;
    v110 = v121;
    v63 = sub_1000187A4(&qword_1000B5568);
    v64 = sub_1000153C0();
    v65 = v100;
    View.accessibilityHidden(_:)(1, v63, v64);
    swift_release(v58);
    v66 = v60;
    v25 = v59;
    swift_release(v66);
    swift_release(v55);
    swift_release(v56);
    swift_release(v47);
    v67 = sub_1000187A4(&qword_1000B5558);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v65, 0, 1, v67);
  }
  else
  {
    v68 = sub_1000187A4(&qword_1000B5558);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v100, 1, 1, v68);
    if ((v95 & 1) == 0)
    {
      v69 = 0;
      goto LABEL_9;
    }
  }
  v69 = 1;
LABEL_9:
  v70 = v97;
  sub_1000121BC((uint64_t)v25, v97, &qword_1000B5550);
  v71 = v100;
  sub_1000121BC(v100, (uint64_t)v8, &qword_1000B5538);
  v72 = v98;
  sub_1000121BC(v70, v98, &qword_1000B5550);
  v73 = sub_1000187A4(&qword_1000B5560);
  sub_1000121BC((uint64_t)v8, v72 + *(int *)(v73 + 48), &qword_1000B5538);
  *(_BYTE *)(v72 + *(int *)(v73 + 64)) = v69;
  sub_100011DE0(v71, &qword_1000B5538);
  sub_100011DE0((uint64_t)v25, &qword_1000B5550);
  sub_100011DE0((uint64_t)v8, &qword_1000B5538);
  return sub_100011DE0(v70, &qword_1000B5550);
}

unint64_t sub_1000153C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5570;
  if (!qword_1000B5570)
  {
    v1 = sub_1000176F8(&qword_1000B5568);
    sub_100019598();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5570);
  }
  return result;
}

unint64_t sub_10001542C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B54E0;
  if (!qword_1000B54E0)
  {
    v1 = sub_1000176F8(&qword_1000B54E8);
    sub_100014668(&qword_1000B54F0, &qword_1000B54B0, (void (*)(void))sub_100019490);
    sub_1000086E8(&qword_1000B4DB8, &qword_1000B4DC0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B54E0);
  }
  return result;
}

unint64_t sub_1000154C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5508;
  if (!qword_1000B5508)
  {
    v1 = sub_1000176F8(&qword_1000B5510);
    sub_1000086E8(&qword_1000B4DA8, &qword_1000B4DB0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5508);
  }
  return result;
}

uint64_t sub_1000155F0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t KeyPath;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t OpaqueTypeConformance2;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  void *v76;
  unint64_t v77;
  unint64_t v78;
  void *v79;

  v66 = a1;
  v73 = a3;
  v59 = type metadata accessor for Prominence(0);
  v4 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_1000187A4(&qword_1000B5250);
  v60 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = (int *)sub_1000187A4(&qword_1000B51E0);
  __chkstk_darwin(v71);
  v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000187A4(&qword_1000B5EC0);
  v64 = *(_QWORD *)(v11 - 8);
  v65 = v11;
  __chkstk_darwin(v11);
  v63 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_1000187A4(&qword_1000B5E48);
  v68 = *(_QWORD *)(v72 - 8);
  v13 = __chkstk_darwin(v72);
  v61 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v67 = (char *)&v58 - v15;
  v16 = type metadata accessor for Locale(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_1000187A4(&qword_1000B5EC8);
  __chkstk_darwin(v70);
  v23 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_10007B8B8);
  v25 = swift_getKeyPath(&unk_10007B8E0);
  v26 = a2;
  static Published.subscript.getter(&v74, v26, KeyPath, v25);

  swift_release(KeyPath);
  swift_release(v25);
  if (v74)
  {
    v69 = v74;
    v27 = String.LocalizationValue.init(stringLiteral:)(0x5049545F52554F59, 0xE900000000000053);
    static Locale.current.getter(v27);
    v28 = (void *)String.init(localized:table:bundle:locale:comment:)(v21, 0, 0, 0, v18, "Collection section header for tips you have saved.", 50, 2);
    v30 = v29;
    v74 = v28;
    v75 = v29;
    v31 = sub_100014614();
    swift_bridgeObjectRetain(v30);
    v74 = (void *)Text.init<A>(_:)(&v74, &type metadata for String, v31);
    v75 = v32;
    LOBYTE(v76) = v33 & 1;
    v77 = v34;
    v35 = v59;
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Prominence.increased(_:), v59);
    View.headerProminence(_:)(v6, &type metadata for Text, &protocol witness table for Text);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v35);
    sub_100014658((uint64_t)v74, v75, (char)v76);
    swift_bridgeObjectRelease(v77);
    v36 = swift_getKeyPath(&unk_10007B7B8);
    v37 = v60;
    v38 = v62;
    (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v10, v8, v62);
    v39 = v71;
    v40 = &v10[v71[9]];
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = 0;
    v40[16] = 1;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v8, v38);
    v41 = swift_bridgeObjectRelease(v30);
    __chkstk_darwin(v41);
    v42 = v66;
    *(&v58 - 4) = (uint64_t)v69;
    *(&v58 - 3) = v42;
    *(&v58 - 2) = (uint64_t)v26;
    v43 = sub_1000187A4(&qword_1000B5E58);
    v44 = sub_100017500();
    v45 = sub_1000175A8();
    v46 = v63;
    Section<>.init(header:content:)(v10, sub_10005A7F0, &v58 - 6, v39, v43, v44, v45);
    v47 = v61;
    v48 = v65;
    Section<>.collapsible(_:)(0, v65, v44, v45, &protocol witness table for EmptyView);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v46, v48);
    v50 = v67;
    v49 = v68;
    v51 = v72;
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v67, v47, v72);
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v23, v50, v51);
    swift_storeEnumTagMultiPayload(v23, v70, 0);
    v74 = v39;
    v75 = v43;
    v76 = &type metadata for EmptyView;
    v77 = v44;
    v78 = v45;
    v79 = &protocol witness table for EmptyView;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v74, &opaque type descriptor for <<opaque return type of Section<>.collapsible(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v23, v51, &type metadata for EmptyView, OpaqueTypeConformance2, &protocol witness table for EmptyView);

    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v50, v51);
  }
  else
  {
    swift_storeEnumTagMultiPayload(v23, v70, 1);
    v54 = sub_1000176F8(&qword_1000B5E58);
    v55 = sub_100017500();
    v56 = sub_1000175A8();
    v74 = v71;
    v75 = v54;
    v76 = &type metadata for EmptyView;
    v77 = v55;
    v78 = v56;
    v79 = &protocol witness table for EmptyView;
    v57 = swift_getOpaqueTypeConformance2(&v74, &opaque type descriptor for <<opaque return type of Section<>.collapsible(_:)>>, 1);
    return _ConditionalContent<>.init(storage:)(v23, v72, &type metadata for EmptyView, v57, &protocol witness table for EmptyView);
  }
}

uint64_t sub_100015BC0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t KeyPath;
  uint64_t v23;
  id v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t OpaqueTypeConformance2;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (**v40)();
  uint64_t (*v41)(char *, uint64_t);
  id v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (**v63)();
  uint64_t (*v64)(char *, uint64_t);
  id v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _QWORD v105[2];
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;

  v102 = a3;
  v88 = type metadata accessor for SidebarListStyle(0);
  v87 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v86 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_1000187A4(&qword_1000B5D40);
  v91 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v90 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_1000187A4(&qword_1000B5D48);
  v7 = __chkstk_darwin(v101);
  v89 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v93 = (uint64_t)&v82 - v9;
  v99 = sub_1000187A4(&qword_1000B5D50);
  __chkstk_darwin(v99);
  v100 = (uint64_t)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for InsetGroupedListStyle(0);
  v84 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v12 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000187A4(&qword_1000B5D58);
  v94 = *(_QWORD *)(v13 - 8);
  v95 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_1000187A4(&qword_1000B5D60);
  __chkstk_darwin(v96);
  v17 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_1000187A4(&qword_1000B5D68);
  v85 = *(_QWORD *)(v97 - 8);
  v18 = __chkstk_darwin(v97);
  v83 = (char *)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v82 - v20;
  KeyPath = swift_getKeyPath(&unk_10007B508);
  v23 = swift_getKeyPath(&unk_10007B530);
  v24 = a2;
  static Published.subscript.getter(&v107, v24, KeyPath, v23);

  swift_release(KeyPath);
  swift_release(v23);
  v25 = v107;
  v26 = type metadata accessor for CollectionListViewModel(0);
  v27 = sub_1000041E8(&qword_1000B4510, type metadata accessor for CollectionListViewModel, (uint64_t)&unk_1000796A8);
  v28 = a1;
  v29 = (void *)ObservedObject.projectedValue.getter(a1, v24, v26, v27);
  v30 = swift_getKeyPath(&unk_10007B568);
  ObservedObject.Wrapper.subscript.getter(&v107, v30, v29, v27);
  swift_release(v30);

  v105[0] = v107;
  v105[1] = v108;
  v106 = v109;
  __chkstk_darwin(v31);
  if (v25 == 1)
  {
    *(&v82 - 2) = v28;
    *(&v82 - 1) = (uint64_t)v24;
    v32 = sub_1000187A4(&qword_1000B5D70);
    v33 = sub_1000176F8(&qword_1000B5D78);
    v34 = sub_1000167AC();
    v103 = v33;
    v104 = v34;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v103, &opaque type descriptor for <<opaque return type of View.listRowSeparator(_:edges:)>>, 1);
    List.init(selection:content:)(v105, sub_10005A868, &v82 - 4, &type metadata for String, v32, &protocol witness table for String, OpaqueTypeConformance2);
    v36 = swift_allocObject(&unk_1000A4850, 32, 7);
    *(_QWORD *)(v36 + 16) = v28;
    *(_QWORD *)(v36 + 24) = v24;
    v38 = v94;
    v37 = v95;
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v17, v15, v95);
    v39 = v96;
    v40 = (uint64_t (**)())&v17[*(int *)(v96 + 36)];
    *v40 = sub_10005A844;
    v40[1] = (uint64_t (*)())v36;
    v40[2] = 0;
    v40[3] = 0;
    v41 = *(uint64_t (**)(char *, uint64_t))(v38 + 8);
    v42 = v24;
    v43 = v41(v15, v37);
    InsetGroupedListStyle.init()(v43);
    v44 = sub_1000164AC();
    v45 = v83;
    v46 = v98;
    View.listStyle<A>(_:)(v12, v39, v98, v44, &protocol witness table for InsetGroupedListStyle);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v12, v46);
    sub_100011DE0((uint64_t)v17, &qword_1000B5D60);
    v47 = v85;
    v48 = v45;
    v49 = v97;
    (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v21, v48, v97);
    v50 = v100;
    (*(void (**)(uint64_t, char *, uint64_t))(v47 + 16))(v100, v21, v49);
    swift_storeEnumTagMultiPayload(v50, v99, 0);
    v107 = v39;
    v108 = v46;
    *(_QWORD *)&v109 = v44;
    *((_QWORD *)&v109 + 1) = &protocol witness table for InsetGroupedListStyle;
    v51 = swift_getOpaqueTypeConformance2(&v107, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    v52 = sub_1000163E0();
    _ConditionalContent<>.init(storage:)(v50, v49, v101, v51, v52);
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v21, v49);
  }
  else
  {
    v54 = v28;
    *(&v82 - 2) = v28;
    *(&v82 - 1) = (uint64_t)v24;
    v55 = sub_1000187A4(&qword_1000B5D70);
    v56 = sub_1000176F8(&qword_1000B5D78);
    v57 = sub_1000167AC();
    v103 = v56;
    v104 = v57;
    v58 = swift_getOpaqueTypeConformance2(&v103, &opaque type descriptor for <<opaque return type of View.listRowSeparator(_:edges:)>>, 1);
    List.init(selection:content:)(v105, sub_100018B48, &v82 - 4, &type metadata for String, v55, &protocol witness table for String, v58);
    v59 = swift_allocObject(&unk_1000A4828, 32, 7);
    *(_QWORD *)(v59 + 16) = v54;
    *(_QWORD *)(v59 + 24) = v24;
    v61 = v94;
    v60 = v95;
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v17, v15, v95);
    v62 = v96;
    v63 = (uint64_t (**)())&v17[*(int *)(v96 + 36)];
    *v63 = sub_100019D70;
    v63[1] = (uint64_t (*)())v59;
    v63[2] = 0;
    v63[3] = 0;
    v64 = *(uint64_t (**)(char *, uint64_t))(v61 + 8);
    v65 = v24;
    v66 = v64(v15, v60);
    v67 = v86;
    SidebarListStyle.init()(v66);
    v68 = sub_1000164AC();
    v69 = v90;
    v70 = v88;
    View.listStyle<A>(_:)(v67, v62, v88, v68, &protocol witness table for SidebarListStyle);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v67, v70);
    v71 = sub_100011DE0((uint64_t)v17, &qword_1000B5D60);
    v72 = static Color.clear.getter(v71);
    v107 = v72;
    swift_retain(v72);
    v73 = AnyView.init<A>(_:)(&v107, &type metadata for Color, &protocol witness table for Color);
    v74 = v91;
    v75 = (uint64_t)v89;
    v76 = v92;
    (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v89, v69, v92);
    swift_release(v72);
    v77 = v101;
    *(_QWORD *)(v75 + *(int *)(v101 + 36)) = v73;
    (*(void (**)(char *, uint64_t))(v74 + 8))(v69, v76);
    v78 = v93;
    sub_100014780(v75, v93, &qword_1000B5D48);
    v79 = v100;
    sub_1000121BC(v78, v100, &qword_1000B5D48);
    swift_storeEnumTagMultiPayload(v79, v99, 1);
    v107 = v62;
    v108 = v98;
    *(_QWORD *)&v109 = v68;
    *((_QWORD *)&v109 + 1) = &protocol witness table for InsetGroupedListStyle;
    v80 = swift_getOpaqueTypeConformance2(&v107, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    v81 = sub_1000163E0();
    _ConditionalContent<>.init(storage:)(v79, v97, v77, v80, v81);
    return sub_100011DE0(v78, &qword_1000B5D48);
  }
}

unint64_t sub_1000163E0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1000B5DB8;
  if (!qword_1000B5DB8)
  {
    v1 = sub_1000176F8(&qword_1000B5D48);
    v2[0] = sub_1000176F8(&qword_1000B5D60);
    v2[1] = type metadata accessor for SidebarListStyle(255);
    v2[2] = sub_1000164AC();
    v2[3] = &protocol witness table for SidebarListStyle;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    sub_1000086E8(&qword_1000B4290, &qword_1000B4298, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5DB8);
  }
  return result;
}

unint64_t sub_1000164AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5DA8;
  if (!qword_1000B5DA8)
  {
    v1 = sub_1000176F8(&qword_1000B5D60);
    sub_1000086E8(&qword_1000B5DB0, &qword_1000B5D58, (uint64_t)&protocol conformance descriptor for List<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5DA8);
  }
  return result;
}

uint64_t sub_100016530@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a3;
  v5 = sub_1000187A4(&qword_1000B4C60);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000187A4(&qword_1000B5D90);
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000187A4(&qword_1000B5D78);
  __chkstk_darwin(v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_1000187A4(&qword_1000B5D70);
  v14 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100016830(a1, a2, (uint64_t)v10);
  v17 = type metadata accessor for Text.Case(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v7, 1, 1, v17);
  KeyPath = swift_getKeyPath(&unk_10007B608);
  v19 = (uint64_t *)&v13[*(int *)(v11 + 36)];
  v20 = sub_1000187A4(&qword_1000B4C88);
  sub_1000121BC((uint64_t)v7, (uint64_t)v19 + *(int *)(v20 + 28), &qword_1000B4C60);
  *v19 = KeyPath;
  sub_1000121BC((uint64_t)v10, (uint64_t)v13, &qword_1000B5D90);
  sub_100011DE0((uint64_t)v7, &qword_1000B4C60);
  sub_100011DE0((uint64_t)v10, &qword_1000B5D90);
  v21 = swift_getKeyPath(&unk_10007B508);
  v22 = swift_getKeyPath(&unk_10007B530);
  v23 = a2;
  static Published.subscript.getter(&v32, v23, v21, v22);

  swift_release(v21);
  v24 = swift_release(v22);
  LODWORD(v23) = v32;
  v25 = static VerticalEdge.Set.all.getter(v24);
  v26 = sub_1000167AC();
  if ((_DWORD)v23)
    v27 = 0;
  else
    v27 = 2;
  View.listRowSeparator(_:edges:)(v27, v25, v11, v26);
  sub_100011DE0((uint64_t)v13, &qword_1000B5D78);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v31, v16, v30);
}

unint64_t sub_1000167AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5D80;
  if (!qword_1000B5D80)
  {
    v1 = sub_1000176F8(&qword_1000B5D78);
    sub_100019390();
    sub_1000086E8(&qword_1000B4CA0, &qword_1000B4C88, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5D80);
  }
  return result;
}

uint64_t sub_100016830@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  id v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t OpaqueTypeConformance2;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD v106[6];
  uint64_t v107;

  v102 = a3;
  v97 = sub_1000187A4(&qword_1000B5DC0);
  v95 = *(_QWORD *)(v97 - 8);
  v5 = __chkstk_darwin(v97);
  v96 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v93 = (uint64_t)&v88 - v7;
  v94 = sub_1000187A4(&qword_1000B5DC8);
  v103 = *(_QWORD *)(v94 - 8);
  v8 = __chkstk_darwin(v94);
  v92 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v91 = (char *)&v88 - v10;
  v11 = sub_1000187A4(&qword_1000B5DD0);
  v12 = __chkstk_darwin(v11);
  v101 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v99 = (uint64_t)&v88 - v14;
  v15 = sub_1000187A4(&qword_1000B5DD8);
  v16 = __chkstk_darwin(v15);
  v100 = (uint64_t)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v105 = (uint64_t)&v88 - v18;
  v19 = sub_1000187A4(&qword_1000B5DE0);
  __chkstk_darwin(v19);
  v21 = (char *)&v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1000187A4(&qword_1000B5DE8);
  v90 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v24 = (char *)&v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1000187A4(&qword_1000B5DF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v88 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1000187A4(&qword_1000B5DF8);
  v29 = __chkstk_darwin(v28);
  v98 = (uint64_t)&v88 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v104 = (uint64_t)&v88 - v31;
  KeyPath = swift_getKeyPath(&unk_10007B658);
  v33 = swift_getKeyPath(&unk_10007B680);
  v34 = a2;
  static Published.subscript.getter(v106, v34, KeyPath, v33);

  swift_release(KeyPath);
  v35 = swift_release(v33);
  v36 = (void *)v106[0];
  if (v106[0])
  {
    v89 = v19;
    __chkstk_darwin(v35);
    *(&v88 - 4) = (uint64_t)v36;
    *(&v88 - 3) = a1;
    v86 = v34;
    v37 = sub_1000187A4(&qword_1000B5E10);
    v38 = sub_100017694();
    Section<>.init(content:)(sub_100018B60, &v88 - 6, v37, v38);
    v39 = v90;
    (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v21, v24, v22);
    swift_storeEnumTagMultiPayload(v21, v89, 0);
    v40 = sub_100017624();
    _ConditionalContent<>.init(storage:)(v21, v22, &type metadata for EmptyView, v40, &protocol witness table for EmptyView);

    (*(void (**)(char *, uint64_t))(v39 + 8))(v24, v22);
  }
  else
  {
    swift_storeEnumTagMultiPayload(v21, v19, 1);
    v41 = sub_100017624();
    _ConditionalContent<>.init(storage:)(v21, v22, &type metadata for EmptyView, v41, &protocol witness table for EmptyView);
  }
  sub_100014780((uint64_t)v27, v104, &qword_1000B5DF0);
  sub_1000155F0(a1, v34, v105);
  v42 = swift_getKeyPath(&unk_10007B6B8);
  v43 = swift_getKeyPath(&unk_10007B6E0);
  v44 = a1;
  v45 = v34;
  static Published.subscript.getter(v106, v45, v42, v43);

  swift_release(v42);
  swift_release(v43);
  v46 = v106[0];
  if (v106[0] >> 62)
  {
    if (v106[0] < 0)
      v85 = v106[0];
    else
      v85 = v106[0] & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v106[0]);
    v47 = _CocoaArrayWrapper.endIndex.getter(v85);
    swift_bridgeObjectRelease(v46);
  }
  else
  {
    v47 = *(_QWORD *)((v106[0] & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v46);
  if (v47)
  {
    v48 = swift_getKeyPath(&unk_10007B6B8);
    v49 = swift_getKeyPath(&unk_10007B6E0);
    v50 = v45;
    static Published.subscript.getter(v106, v50, v48, v49);

    swift_release(v48);
    swift_release(v49);
    v107 = v106[0];
    v51 = swift_getKeyPath(&unk_10007B710);
    v52 = swift_allocObject(&unk_1000A48C8, 32, 7);
    *(_QWORD *)(v52 + 16) = v44;
    *(_QWORD *)(v52 + 24) = v50;
    v53 = v50;
    v54 = sub_1000187A4(&qword_1000B4AB0);
    v55 = sub_1000187A4(&qword_1000B5E48);
    v56 = sub_1000086E8(&qword_1000B5E50, &qword_1000B4AB0, (uint64_t)&protocol conformance descriptor for [A]);
    v57 = sub_1000176F8(&qword_1000B51E0);
    v58 = sub_1000176F8(&qword_1000B5E58);
    v59 = sub_100017500();
    v60 = sub_1000175A8();
    v106[0] = v57;
    v106[1] = v58;
    v106[2] = &type metadata for EmptyView;
    v106[3] = v59;
    v106[4] = v60;
    v106[5] = &protocol witness table for EmptyView;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v106, &opaque type descriptor for <<opaque return type of Section<>.collapsible(_:)>>, 1);
    v62 = v91;
    ForEach<>.init(_:id:content:)(&v107, v51, sub_100018944, v52, v54, v55, v56, &protocol witness table for String, OpaqueTypeConformance2, v87);
    v63 = v93;
    sub_10001773C(v44, (uint64_t)v53, v93);
    v64 = *(void (**)(char *, char *, uint64_t))(v103 + 16);
    v65 = v92;
    v66 = v94;
    v64(v92, v62, v94);
    v68 = v95;
    v67 = v96;
    v69 = *(void (**)(char *, uint64_t, uint64_t))(v95 + 16);
    v70 = v97;
    v69(v96, v63, v97);
    v71 = (uint64_t)v101;
    v64(v101, v65, v66);
    v72 = sub_1000187A4(&qword_1000B5E68);
    v69((char *)(v71 + *(int *)(v72 + 48)), (uint64_t)v67, v70);
    v73 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
    v73(v63, v70);
    v74 = *(void (**)(char *, uint64_t))(v103 + 8);
    v74(v62, v66);
    v73((uint64_t)v67, v70);
    v74(v65, v66);
    v75 = sub_1000187A4(&qword_1000B5E70);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v71, 0, 1, v75);
    v76 = v99;
    sub_100014780(v71, v99, &qword_1000B5DD0);
  }
  else
  {
    v77 = sub_1000187A4(&qword_1000B5E70);
    v76 = v99;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v99, 1, 1, v77);
    v71 = (uint64_t)v101;
  }
  v78 = v104;
  v79 = v98;
  sub_1000121BC(v104, v98, &qword_1000B5DF8);
  v80 = v105;
  v81 = v100;
  sub_1000121BC(v105, v100, &qword_1000B5DD8);
  sub_1000121BC(v76, v71, &qword_1000B5DD0);
  v82 = v102;
  sub_1000121BC(v79, v102, &qword_1000B5DF8);
  v83 = sub_1000187A4(&qword_1000B5E78);
  sub_1000121BC(v81, v82 + *(int *)(v83 + 48), &qword_1000B5DD8);
  sub_1000121BC(v71, v82 + *(int *)(v83 + 64), &qword_1000B5DD0);
  sub_100011DE0(v76, &qword_1000B5DD0);
  sub_100011DE0(v80, &qword_1000B5DD8);
  sub_100011DE0(v78, &qword_1000B5DF8);
  sub_100011DE0(v71, &qword_1000B5DD0);
  sub_100011DE0(v81, &qword_1000B5DD8);
  return sub_100011DE0(v79, &qword_1000B5DF8);
}

uint64_t sub_1000170C4(void *a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v5 = objc_msgSend(a1, "collections");
  v6 = sub_100006578(0, (unint64_t *)&qword_1000B61F0, TPSCollection_ptr);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  v16 = v7;
  KeyPath = swift_getKeyPath(&unk_10007B870);
  v9 = swift_allocObject(&unk_1000A4940, 32, 7);
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  v10 = a3;
  v11 = sub_1000187A4(&qword_1000B4AA0);
  v12 = type metadata accessor for CollectionListItemView(0);
  v13 = sub_1000086E8(&qword_1000B5E80, &qword_1000B4AA0, (uint64_t)&protocol conformance descriptor for [A]);
  v14 = sub_1000041E8(&qword_1000B5E40, type metadata accessor for CollectionListItemView, (uint64_t)&unk_10007A928);
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t))ForEach<>.init(_:id:content:))(&v16, KeyPath, sub_100007F58, v9, v11, v12, v13, &protocol witness table for String, v14);
}

uint64_t sub_100017210@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43[16];
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;

  v40 = a2;
  v41 = a3;
  v42 = a4;
  v5 = type metadata accessor for Prominence(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_1000187A4(&qword_1000B5250);
  v9 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_1000187A4(&qword_1000B51E0);
  __chkstk_darwin(v36);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000187A4(&qword_1000B5EC0);
  v15 = *(_QWORD *)(v14 - 8);
  v38 = v14;
  v39 = v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = *a1;
  v18 = objc_msgSend(v35, "text");
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  v47 = v19;
  v48 = v21;
  v22 = sub_100014614();
  swift_bridgeObjectRetain(v21);
  v47 = Text.init<A>(_:)(&v47, &type metadata for String, v22);
  v48 = v23;
  v49 = v24 & 1;
  v50 = v25;
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for Prominence.increased(_:), v5);
  View.headerProminence(_:)(v8, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_100014658(v47, v48, v49);
  swift_bridgeObjectRelease(v50);
  KeyPath = swift_getKeyPath(&unk_10007B7B8);
  v27 = v37;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v11, v37);
  v28 = v36;
  v29 = &v13[*(int *)(v36 + 36)];
  *(_QWORD *)v29 = KeyPath;
  *((_QWORD *)v29 + 1) = 0;
  v29[16] = 1;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v27);
  swift_bridgeObjectRelease(v21);
  v44 = v35;
  v45 = v40;
  v46 = v41;
  v30 = sub_1000187A4(&qword_1000B5E58);
  v31 = sub_100017500();
  v32 = sub_1000175A8();
  Section<>.init(header:content:)(v13, sub_100018928, v43, v28, v30, v31, v32);
  v33 = v38;
  Section<>.collapsible(_:)(0, v38, v31, v32, &protocol witness table for EmptyView);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v17, v33);
}

unint64_t sub_100017500()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000B51D8;
  if (!qword_1000B51D8)
  {
    v1 = sub_1000176F8(&qword_1000B51E0);
    v2[0] = &type metadata for Text;
    v2[1] = &protocol witness table for Text;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.headerProminence(_:)>>, 1);
    sub_1000086E8(&qword_1000B51E8, &qword_1000B51F0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B51D8);
  }
  return result;
}

unint64_t sub_1000175A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5E60;
  if (!qword_1000B5E60)
  {
    v1 = sub_1000176F8(&qword_1000B5E58);
    sub_1000041E8(&qword_1000B5E40, type metadata accessor for CollectionListItemView, (uint64_t)&unk_10007A928);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5E60);
  }
  return result;
}

unint64_t sub_100017624()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5E00;
  if (!qword_1000B5E00)
  {
    v1 = sub_1000176F8(&qword_1000B5DE8);
    sub_100017694();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5E00);
  }
  return result;
}

unint64_t sub_100017694()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5E08;
  if (!qword_1000B5E08)
  {
    v1 = sub_1000176F8(&qword_1000B5E10);
    sub_100007B50();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5E08);
  }
  return result;
}

uint64_t sub_1000176F8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_10001773C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44[16];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;

  v41 = a1;
  v42 = a2;
  v43 = a3;
  v3 = type metadata accessor for Prominence(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000187A4(&qword_1000B5250);
  v39 = *(_QWORD *)(v7 - 8);
  v40 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Locale(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000187A4(&qword_1000B51E0);
  __chkstk_darwin(v16);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000187A4(&qword_1000B5E98);
  v38 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = String.LocalizationValue.init(stringLiteral:)(0x4955475F52455355, 0xEB00000000534544);
  static Locale.current.getter(v22);
  v23 = String.init(localized:table:bundle:locale:comment:)(v15, 0, 0, 0, v12, "User Guides section title", 25, 2);
  v25 = v24;
  v47 = v23;
  v48 = v24;
  v26 = sub_100014614();
  swift_bridgeObjectRetain(v25);
  v47 = Text.init<A>(_:)(&v47, &type metadata for String, v26);
  v48 = v27;
  v49 = v28 & 1;
  v50 = v29;
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Prominence.increased(_:), v3);
  View.headerProminence(_:)(v6, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100014658(v47, v48, v49);
  swift_bridgeObjectRelease(v50);
  KeyPath = swift_getKeyPath(&unk_10007B7B8);
  v32 = v39;
  v31 = v40;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v18, v9, v40);
  v33 = &v18[*(int *)(v16 + 36)];
  *(_QWORD *)v33 = KeyPath;
  *((_QWORD *)v33 + 1) = 0;
  v33[16] = 1;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v31);
  swift_bridgeObjectRelease(v25);
  v45 = v41;
  v46 = v42;
  v34 = sub_1000187A4(&qword_1000B5EA0);
  v35 = sub_100017500();
  v36 = sub_100017AAC();
  Section<>.init(header:content:)(v18, sub_100018B58, v44, v16, v34, v35, v36);
  Section<>.collapsible(_:)(0, v19, v35, v36, &protocol witness table for EmptyView);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v21, v19);
}

unint64_t sub_100017AAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5EA8;
  if (!qword_1000B5EA8)
  {
    v1 = sub_1000176F8(&qword_1000B5EA0);
    sub_1000041E8(&qword_1000B5EB0, type metadata accessor for UserGuideListItemView, (uint64_t)&unk_10007C400);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5EA8);
  }
  return result;
}

_BYTE *sub_100017B28()
{
  return sub_100017B48();
}

_BYTE *sub_100017B48()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  objc_class *v18;
  _BYTE *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  objc_super v24;
  _QWORD *v25;

  v1 = sub_1000187A4(&qword_1000B5628);
  v22 = *(_QWORD *)(v1 - 8);
  v23 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000187A4(&qword_1000B5630);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000187A4(&qword_1000B44D8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &v0[qword_1000B55A0];
  LOBYTE(v25) = 0;
  v13 = v0;
  Published.init(initialValue:)(&v25, &type metadata for Bool);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v11, v8);
  v14 = &v13[qword_1000B55A8];
  v15 = type metadata accessor for SearchResultsModel(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v25 = (_QWORD *)SearchResultsModel.init()();
  Published.init(initialValue:)(&v25, v15);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v14, v7, v4);
  v16 = &v13[qword_1000B55B0];
  v25 = _swiftEmptyArrayStorage;
  v17 = sub_1000187A4((uint64_t *)&unk_1000B5608);
  Published.init(initialValue:)(&v25, v17);
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v16, v3, v23);
  *(_QWORD *)&v13[qword_1000B55B8] = &_swiftEmptySetSingleton;

  v18 = (objc_class *)type metadata accessor for SearchResultsViewModel(0);
  v24.receiver = v13;
  v24.super_class = v18;
  v19 = objc_msgSendSuper2(&v24, "init");
  sub_10004ED9C();
  v19[qword_1000B90B0] = 0;

  return v19;
}

uint64_t type metadata accessor for SearchResultsViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B55C0;
  if (!qword_1000B55C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SearchResultsViewModel);
  return result;
}

id sub_100017DAC()
{
  return sub_100017DCC();
}

id sub_100017DCC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  objc_class *v36;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  objc_super v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v1 = sub_1000187A4(&qword_1000B4918);
  v44 = *(_QWORD *)(v1 - 8);
  v45 = v1;
  __chkstk_darwin(v1);
  v43 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000187A4(&qword_1000B4930);
  v41 = *(_QWORD *)(v3 - 8);
  v42 = v3;
  __chkstk_darwin(v3);
  v40 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000187A4(&qword_1000B5718);
  v38 = *(_QWORD *)(v5 - 8);
  v39 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000187A4(&qword_1000B5720);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000187A4(&qword_1000B44D8);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = &v0[qword_1000B5678];
  LOBYTE(v47) = 0;
  v17 = v0;
  Published.init(initialValue:)(&v47, &type metadata for Bool);
  v18 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v18(v16, v15, v12);
  v19 = &v17[qword_1000B5680];
  v47 = objc_msgSend(objc_allocWithZone((Class)TPSCollection), "init");
  v20 = sub_100018214();
  Published.init(initialValue:)(&v47, v20);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v19, v11, v8);
  v21 = &v17[qword_1000B5688];
  LOBYTE(v47) = 0;
  Published.init(initialValue:)(&v47, &type metadata for Bool);
  v18(v21, v15, v12);
  v22 = &v17[qword_1000B5690];
  LOBYTE(v47) = 0;
  Published.init(initialValue:)(&v47, &type metadata for Bool);
  v18(v22, v15, v12);
  v23 = &v17[qword_1000B5698];
  v47 = 0;
  Published.init(initialValue:)(&v47, &type metadata for CGFloat);
  v24 = v39;
  v25 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
  v25(v23, v7, v39);
  v26 = &v17[qword_1000B56A0];
  v47 = 0;
  Published.init(initialValue:)(&v47, &type metadata for CGFloat);
  v25(v26, v7, v24);
  v27 = &v17[qword_1000B56A8];
  v47 = 0;
  v48 = 0;
  v28 = sub_1000187A4(&qword_1000B4198);
  v29 = v40;
  Published.init(initialValue:)(&v47, v28);
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v27, v29, v42);
  v30 = &v17[qword_1000B56B0];
  v31 = unk_1000B60B8;
  v47 = *(id *)aEmpty;
  v48 = unk_1000B60A8;
  v49 = qword_1000B60B0;
  v50 = unk_1000B60B8;
  swift_bridgeObjectRetain(unk_1000B60A8);
  swift_bridgeObjectRetain(v31);
  v32 = v43;
  Published.init(initialValue:)(&v47, &type metadata for TipCollection);
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v30, v32, v45);
  v17[qword_1000B90B0] = 1;
  v17[qword_1000B90B8] = 0;
  v17[qword_1000B90C0] = 0;
  v33 = &v17[qword_1000B90C8];
  *(_QWORD *)v33 = 0;
  *((_QWORD *)v33 + 1) = 0;
  v34 = &v17[qword_1000B90D0];
  *(_QWORD *)v34 = 0;
  *((_QWORD *)v34 + 1) = 0;
  v35 = &v17[qword_1000B90D8];
  *(_QWORD *)v35 = 0;
  *((_QWORD *)v35 + 1) = 0;
  v17[qword_1000B90E0] = 0;

  v36 = (objc_class *)type metadata accessor for TipListViewModel(0);
  v46.receiver = v17;
  v46.super_class = v36;
  return objc_msgSendSuper2(&v46, "init");
}

uint64_t sub_1000181CC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t type metadata accessor for TipListViewModel(uint64_t a1)
{
  return sub_1000181CC(a1, (uint64_t *)&unk_1000B56B8, (uint64_t)&nominal type descriptor for TipListViewModel);
}

unint64_t sub_100018214()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B61F0;
  if (!qword_1000B61F0)
  {
    v1 = objc_opt_self(TPSCollection);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000B61F0);
  }
  return result;
}

char *sub_100018250(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_10001826C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_10001826C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000187A4(&qword_1000B5728);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for TipCollection);
  }
  swift_release(a4);
  return v11;
}

_QWORD *initializeWithCopy for TipCollection(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_1000183AC@<X0>(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  NSString v27;
  id v28;
  uint64_t v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t, uint64_t);
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;

  v50 = a1;
  v53 = a4;
  v6 = sub_1000187A4(&qword_1000B61D8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v44 - v10;
  v12 = sub_1000187A4(&qword_1000B61E0);
  v13 = __chkstk_darwin(v12);
  v52 = (uint64_t)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v49 = (char *)&v44 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v44 - v17;
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v51 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v24 = (char *)&v44 - v23;
  swift_bridgeObjectRetain(a3);
  LocalizedStringResource.init(stringLiteral:)(a2, a3);
  v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
  v47(v18, 1, 1, v19);
  v25 = type metadata accessor for DisplayRepresentation.Image(0);
  v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v48(v11, 1, 1, v25);
  type metadata accessor for TPSUIAppController(0);
  v26 = (void *)static TPSUIAppController.shared.getter();
  v27 = String._bridgeToObjectiveC()();
  v28 = objc_msgSend(v26, "collectionForIdentifier:", v27);

  v29 = (uint64_t)v9;
  if (v28)
  {
    v30 = objc_msgSend(v28, "tocAssets");
    if (v30)
    {
      v31 = v30;
      v50 = v9;
      v32 = objc_msgSend(v30, "symbolId");

      if (v32)
      {
        v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
        v45 = v34;
        v46 = v33;

        v35 = objc_msgSend(v28, "text");
        if (v35)
        {
          v36 = v35;
          v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
          v39 = v38;

          v35 = (id)v37;
        }
        else
        {
          v39 = 0xE000000000000000;
        }
        v40 = (uint64_t)v49;
        LocalizedStringResource.init(stringLiteral:)(v35, v39);
        sub_100011DE0((uint64_t)v18, &qword_1000B61E0);
        v47((char *)v40, 0, 1, v19);
        sub_100014780(v40, (uint64_t)v18, &qword_1000B61E0);
        v29 = (uint64_t)v50;
        DisplayRepresentation.Image.init(systemName:isTemplate:)(v46, v45, 2);

        sub_100011DE0((uint64_t)v11, &qword_1000B61D8);
        v48((char *)v29, 0, 1, v25);
        sub_100014780(v29, (uint64_t)v11, &qword_1000B61D8);
      }
      else
      {

        v29 = (uint64_t)v50;
      }
    }
    else
    {

    }
  }
  v41 = v51;
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v51, v24, v19);
  v42 = v52;
  sub_1000121BC((uint64_t)v18, v52, &qword_1000B61E0);
  sub_1000121BC((uint64_t)v11, v29, &qword_1000B61D8);
  DisplayRepresentation.init(title:subtitle:image:)(v41, v42, v29);
  sub_100011DE0((uint64_t)v11, &qword_1000B61D8);
  sub_100011DE0((uint64_t)v18, &qword_1000B61E0);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v24, v19);
}

uint64_t sub_1000187A4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void sub_1000187E4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*a1, "identifier");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

uint64_t sub_10001883C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000183AC(*(char **)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

__n128 initializeWithTake for TipCollection(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100018854@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100018860(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100018888();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_100018888()
{
  unint64_t result;

  result = qword_1000B5660;
  if (!qword_1000B5660)
  {
    result = swift_getWitnessTable(&unk_10007B360, &type metadata for CollectionOpenIntent);
    atomic_store(result, (unint64_t *)&qword_1000B5660);
  }
  return result;
}

void sub_1000188D0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_1000188D0(a1, &qword_1000B4050, (uint64_t)&unk_1000A2F70);
}

uint64_t sub_100018928()
{
  uint64_t v0;

  return sub_1000170C4(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

ValueMetadata *type metadata accessor for TipCollection()
{
  return &type metadata for TipCollection;
}

uint64_t sub_100018944@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100017210(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t type metadata accessor for ScrollVerticallyTestSupport(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B6AE0;
  if (!qword_1000B6AE0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ScrollVerticallyTestSupport);
  return result;
}

ValueMetadata *type metadata accessor for CollectionListView()
{
  return &type metadata for CollectionListView;
}

void destroy for UserGuideSearchResultsItemsView(uint64_t a1)
{

}

ValueMetadata *type metadata accessor for CollectionOpenIntent()
{
  return &type metadata for CollectionOpenIntent;
}

uint64_t getEnumTagSinglePayload for TipCollection(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

unint64_t sub_100018A0C()
{
  unint64_t result;

  result = qword_1000B6100;
  if (!qword_1000B6100)
  {
    result = swift_getWitnessTable(&unk_10007BBA4, &type metadata for TipCollection);
    atomic_store(result, (unint64_t *)&qword_1000B6100);
  }
  return result;
}

const char *sub_100018A50()
{
  return "identifier";
}

uint64_t sub_100018A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100018A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100018A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100018A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100018A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100018AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100018ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100018ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100018ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100018AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100018AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100018B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100018B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

id sub_100018B2C@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_100005930(a1, v2, a2);
}

uint64_t sub_100018B38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000C980(*(_QWORD *)(v1 + 16), a1);
}

double sub_100018B40@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000A9AC(*(_QWORD *)v1, *(void **)(v1 + 8), a1);
}

uint64_t sub_100018B48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100016530(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_100018B50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100004F64(a1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), a2);
}

uint64_t sub_100018B58()
{
  uint64_t v0;

  return sub_10000820C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100018B60()
{
  uint64_t v0;

  return sub_1000079C4(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100018B6C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10000A434(a1, *(void **)(v2 + 24), a2);
}

void sub_100018B74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[4];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  v2 = qword_1000B90E8;
  sub_100018CCC(319, (unint64_t *)&qword_1000B4890, (uint64_t)&type metadata for Bool);
  if (v4 <= 0x3F)
  {
    v5 = *(_QWORD *)(v3 - 8) + 64;
    v14[0] = v5;
    sub_1000196BC(319, &qword_1000B56F0, (uint64_t (*)(uint64_t))sub_100018214, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
    if (v7 <= 0x3F)
    {
      v14[1] = *(_QWORD *)(v6 - 8) + 64;
      v14[2] = v5;
      v14[3] = v5;
      sub_100018CCC(319, (unint64_t *)&unk_1000B56F8, (uint64_t)&type metadata for CGFloat);
      if (v9 <= 0x3F)
      {
        v15 = *(_QWORD *)(v8 - 8) + 64;
        v16 = v15;
        sub_1000197C0(319);
        if (v11 <= 0x3F)
        {
          v17 = *(_QWORD *)(v10 - 8) + 64;
          sub_100018CCC(319, &qword_1000B48D0, (uint64_t)&type metadata for TipCollection);
          if (v13 <= 0x3F)
          {
            v18 = *(_QWORD *)(v12 - 8) + 64;
            v19 = &unk_10007AD18;
            v20 = &unk_10007AD18;
            v21 = &unk_10007AD18;
            v22 = &unk_10007AD30;
            v23 = &unk_10007AD48;
            v24 = &unk_10007AD30;
            v25 = &unk_10007AD18;
            swift_initClassMetadata2(a1, 0, 15, v14, a1 + v2);
          }
        }
      }
    }
  }
}

void sub_100018CCC(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = type metadata accessor for Published(0, a3);
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_100018D10()
{
  unint64_t result;

  result = qword_1000B6148;
  if (!qword_1000B6148)
  {
    result = swift_getWitnessTable(&unk_10007BB7C, &type metadata for TipCollection);
    atomic_store(result, (unint64_t *)&qword_1000B6148);
  }
  return result;
}

uint64_t sub_100018D54(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100018D5C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100018D64(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100018D6C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100018D74(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100018D7C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100018D84(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100018D8C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100018D94(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100018D9C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100018DA4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100018DAC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100018DB4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

__n128 initializeWithTake for SearchResultsEmptyView(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *sub_100018DC8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_100018DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_100018F4C()
{
  return sub_1000041E8(&qword_1000B4080, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1000789D8);
}

unint64_t sub_100018F78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4B08;
  if (!qword_1000B4B08)
  {
    v1 = sub_100006578(255, (unint64_t *)&qword_1000B61F0, TPSCollection_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4B08);
  }
  return result;
}

unint64_t sub_100018FD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B6108;
  if (!qword_1000B6108)
  {
    v1 = sub_1000176F8(qword_1000B6110);
    sub_100018A0C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000B6108);
  }
  return result;
}

uint64_t sub_100019034(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease(*v1);
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_1000191EC(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    v15 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000191EC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  void (*v17[4])(id *);

  v5 = result;
  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    result = swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      if (a3 < 0)
        v10 = a3;
      else
        v10 = a3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a3);
      v11 = _CocoaArrayWrapper.endIndex.getter(v10);
      result = swift_bridgeObjectRelease(a3);
      if (v11 <= a2)
      {
        if (v7 >= 1)
        {
          sub_100037E0C();
          swift_bridgeObjectRetain(a3);
          for (i = 0; i != v7; ++i)
          {
            sub_1000187A4(&qword_1000B4908);
            v13 = sub_100037750(v17, i, a3);
            v15 = *v14;
            ((void (*)(void (**)(id *), _QWORD))v13)(v17, 0);
            *(_QWORD *)(v5 + 8 * i) = v15;
          }
          swift_bridgeObjectRelease(a3);
          return a3;
        }
        goto LABEL_22;
      }
    }
    else
    {
      v8 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v8 <= a2)
      {
        v9 = sub_100006578(0, (unint64_t *)&qword_1000B42F0, TPSTip_ptr);
        swift_arrayInitWithCopy(v5, (a3 & 0xFFFFFFFFFFFFFF8) + 32, v8, v9);
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_100019390()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5D88;
  if (!qword_1000B5D88)
  {
    v1 = sub_1000176F8(&qword_1000B5D90);
    sub_1000086E8(&qword_1000B5D98, &qword_1000B5DA0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5D88);
  }
  return result;
}

unint64_t sub_10001940C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5ED0;
  if (!qword_1000B5ED0)
  {
    v1 = sub_1000176F8(&qword_1000B5ED8);
    sub_1000086E8(&qword_1000B5D30, &qword_1000B5D28, (uint64_t)&protocol conformance descriptor for ScrollViewReader<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5ED0);
  }
  return result;
}

unint64_t sub_100019490()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B54F8;
  if (!qword_1000B54F8)
  {
    v1 = sub_1000176F8(&qword_1000B5500);
    sub_1000154C8();
    sub_1000086E8(&qword_1000B5518, &qword_1000B5520, (uint64_t)&protocol conformance descriptor for RemoteImageView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B54F8);
  }
  return result;
}

unint64_t sub_100019514()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B54C0;
  if (!qword_1000B54C0)
  {
    v1 = sub_1000176F8(&qword_1000B54C8);
    sub_1000086E8(&qword_1000B54D0, &qword_1000B54D8, (uint64_t)&protocol conformance descriptor for TipGradientView<A>);
    sub_10001542C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B54C0);
  }
  return result;
}

unint64_t sub_100019598()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5578;
  if (!qword_1000B5578)
  {
    v1 = sub_1000176F8(&qword_1000B5580);
    sub_1000154C8();
    sub_1000086E8(&qword_1000B4DB8, &qword_1000B4DC0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5578);
  }
  return result;
}

uint64_t sub_10001961C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000187A4(&qword_1000B41B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100019664(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000B6270)
  {
    v2 = sub_1000176F8(&qword_1000B41C8);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000B6270);
  }
}

void sub_1000196BC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_100019714()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1000B4890)
  {
    v0 = type metadata accessor for Published(0, &type metadata for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1000B4890);
  }
}

void sub_100019768(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000B5600)
  {
    v2 = sub_1000176F8((uint64_t *)&unk_1000B5608);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000B5600);
  }
}

void sub_1000197C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000B48A8)
  {
    v2 = sub_1000176F8(&qword_1000B4198);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000B48A8);
  }
}

void sub_100019818(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000B4A90)
  {
    v2 = type metadata accessor for ChecklistViewModel(255);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000B4A90);
  }
}

void sub_10001986C(char *a1)
{
  uint64_t v1;

  sub_100004628(a1, v1);
}

BOOL sub_1000198A8(uint64_t a1)
{
  uint64_t v1;

  return sub_100005120(a1, v1);
}

uint64_t sub_1000198E4(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + qword_1000B9030);
}

uint64_t type metadata accessor for SearchResultsViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B40C0;
  if (!qword_1000B40C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SearchResultsViewController);
  return result;
}

uint64_t sub_100019970(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008F51C, 1);
}

uint64_t sub_100019980()
{
  return type metadata accessor for CollectionListViewModel(0);
}

uint64_t sub_100019988(void **a1)
{
  uint64_t v1;

  return sub_100005E88(a1, v1);
}

void *sub_100019990()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t type metadata accessor for TPSSplitViewController()
{
  return objc_opt_self(_TtC4Tips22TPSSplitViewController);
}

void sub_100019A38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[4];

  v2 = qword_1000B90A0;
  sub_100019714();
  if (v4 <= 0x3F)
  {
    v9[0] = *(_QWORD *)(v3 - 8) + 64;
    sub_10004F410(319);
    if (v6 <= 0x3F)
    {
      v9[1] = *(_QWORD *)(v5 - 8) + 64;
      sub_100019768(319);
      if (v8 <= 0x3F)
      {
        v9[2] = *(_QWORD *)(v7 - 8) + 64;
        v9[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
        swift_initClassMetadata2(a1, 0, 4, v9, a1 + v2);
      }
    }
  }
}

unint64_t sub_100019AF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B41A0;
  if (!qword_1000B41A0)
  {
    v1 = type metadata accessor for SearchResultsViewModel(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for TipNavigationViewModel, v1);
    atomic_store(result, (unint64_t *)&qword_1000B41A0);
  }
  return result;
}

void sub_100019B38(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  sub_100003D54(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1000790B8;
    v4[2] = &unk_1000790D0;
    v4[3] = &unk_1000790E8;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

uint64_t sub_100019BCC()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_100019BE4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008DFDC, 1);
}

uint64_t sub_100019BF4(char a1)
{
  type metadata accessor for FeaturedCollectionView(0);
  return sub_10000CDAC(a1);
}

uint64_t sub_100019C34()
{
  return sub_100019BF4(1);
}

uint64_t sub_100019C3C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008E924, 1);
}

uint64_t sub_100019C4C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008F488, 1);
}

unint64_t sub_100019CC4()
{
  unint64_t result;

  result = qword_1000B5CA8;
  if (!qword_1000B5CA8)
  {
    result = swift_getWitnessTable(&unk_10007B3F0, &type metadata for CollectionOpenIntent);
    atomic_store(result, (unint64_t *)&qword_1000B5CA8);
  }
  return result;
}

unint64_t sub_100019D08()
{
  unint64_t result;

  result = qword_1000B5CB0;
  if (!qword_1000B5CB0)
  {
    result = swift_getWitnessTable(&unk_10007B418, &type metadata for CollectionOpenIntent);
    atomic_store(result, (unint64_t *)&qword_1000B5CB0);
  }
  return result;
}

uint64_t sub_100019D58(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008F124, 1);
}

uint64_t sub_100019D68()
{
  uint64_t v0;

  return sub_100004098(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100019D70()
{
  uint64_t v0;

  return sub_100007F5C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100019D78@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10005A350(a1, *(void **)(v2 + 24), a2);
}

uint64_t sub_100019D80()
{
  uint64_t v0;

  return sub_1000057C0(*(void **)(v0 + 16), *(uint64_t **)(v0 + 24), *(uint64_t **)(v0 + 32));
}

void sub_100019D9C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_100019664(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100003D54(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_10007BCB8;
      v6[3] = &unk_10007BCD0;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t type metadata accessor for SearchResultsView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B6260;
  if (!qword_1000B6260)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SearchResultsView);
  return result;
}

uint64_t sub_100019E70()
{
  return type metadata accessor for TipListViewModel(0);
}

unint64_t sub_100019E78()
{
  unint64_t result;

  result = qword_1000B6138;
  if (!qword_1000B6138)
  {
    result = swift_getWitnessTable(&unk_10007BAB4, &type metadata for TipCollection);
    atomic_store(result, (unint64_t *)&qword_1000B6138);
  }
  return result;
}

unint64_t sub_100019EBC()
{
  unint64_t result;

  result = qword_1000B6168;
  if (!qword_1000B6168)
  {
    result = swift_getWitnessTable(&unk_10007BC2C, &type metadata for TipCollection);
    atomic_store(result, (unint64_t *)&qword_1000B6168);
  }
  return result;
}

unint64_t sub_100019F00()
{
  unint64_t result;

  result = qword_1000B6150;
  if (!qword_1000B6150)
  {
    result = swift_getWitnessTable(&unk_10007BBFC, &type metadata for TipCollection);
    atomic_store(result, (unint64_t *)&qword_1000B6150);
  }
  return result;
}

unint64_t sub_100019F44()
{
  unint64_t result;

  result = qword_1000B6140;
  if (!qword_1000B6140)
  {
    result = swift_getWitnessTable(&unk_10007BB54, &type metadata for TipCollection);
    atomic_store(result, (unint64_t *)&qword_1000B6140);
  }
  return result;
}

unint64_t sub_100019F88()
{
  unint64_t result;

  result = qword_1000B6130;
  if (!qword_1000B6130)
  {
    result = swift_getWitnessTable(&unk_10007BB24, &type metadata for TipCollection);
    atomic_store(result, (unint64_t *)&qword_1000B6130);
  }
  return result;
}

unint64_t sub_100019FCC()
{
  unint64_t result;

  result = qword_1000B60E0[0];
  if (!qword_1000B60E0[0])
  {
    result = swift_getWitnessTable(&unk_10007BA5C, &type metadata for TipCollection);
    atomic_store(result, qword_1000B60E0);
  }
  return result;
}

unint64_t sub_10001A010()
{
  unint64_t result;

  result = qword_1000B6128;
  if (!qword_1000B6128)
  {
    result = swift_getWitnessTable(&unk_10007BAEC, &type metadata for TipCollection);
    atomic_store(result, (unint64_t *)&qword_1000B6128);
  }
  return result;
}

void *sub_10001A074()
{
  return &protocol witness table for String;
}

ValueMetadata *type metadata accessor for TipCollection.TipCollectionQuery()
{
  return &type metadata for TipCollection.TipCollectionQuery;
}

unint64_t sub_10001A098()
{
  unint64_t result;

  result = qword_1000B60D8;
  if (!qword_1000B60D8)
  {
    result = swift_getWitnessTable(&unk_10007BA18, &type metadata for TipCollection.TipCollectionQuery);
    atomic_store(result, (unint64_t *)&qword_1000B60D8);
  }
  return result;
}

unint64_t sub_10001A0DC()
{
  unint64_t result;

  result = qword_1000B60D0;
  if (!qword_1000B60D0)
  {
    result = swift_getWitnessTable(&unk_10007B9B8, &type metadata for TipCollection.TipCollectionQuery);
    atomic_store(result, (unint64_t *)&qword_1000B60D0);
  }
  return result;
}

unint64_t sub_10001A120()
{
  unint64_t result;

  result = qword_1000B60F8;
  if (!qword_1000B60F8)
  {
    result = swift_getWitnessTable(&unk_10007BA40, &type metadata for TipCollection.TipCollectionQuery);
    atomic_store(result, (unint64_t *)&qword_1000B60F8);
  }
  return result;
}

unint64_t sub_10001A164()
{
  unint64_t result;

  result = qword_1000B60C0;
  if (!qword_1000B60C0)
  {
    result = swift_getWitnessTable(&unk_10007B960, &type metadata for TipCollection.TipCollectionQuery);
    atomic_store(result, (unint64_t *)&qword_1000B60C0);
  }
  return result;
}

uint64_t destroy for TipListView(uint64_t a1)
{

  return swift_release(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for TipListView(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = v3;
  swift_retain(v4);
  return a1;
}

ValueMetadata *type metadata accessor for TipListView()
{
  return &type metadata for TipListView;
}

ValueMetadata *type metadata accessor for TipsAppShortcuts()
{
  return &type metadata for TipsAppShortcuts;
}

unint64_t sub_10001A250()
{
  unint64_t result;

  result = qword_1000B49D8;
  if (!qword_1000B49D8)
  {
    result = swift_getWitnessTable(&unk_10007ABF0, &type metadata for TipsAppShortcuts);
    atomic_store(result, (unint64_t *)&qword_1000B49D8);
  }
  return result;
}

void sub_10001ACDC(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSOperationQueue);
  v2 = (void *)qword_1000B6C28;
  qword_1000B6C28 = (uint64_t)v1;

  _objc_msgSend((id)qword_1000B6C28, "setMaxConcurrentOperationCount:", 1);
}

void sub_10001D540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
  id *v17;
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  _Unwind_Resume(a1);
}

void sub_10001D594(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD block[5];
  id v22;
  id v23;
  id v24;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "contentParser"));
  objc_msgSend(v3, "setDelegate:", WeakRetained);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tip"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tip"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "fullContentAssets"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "baseURL"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tip"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "language"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tip"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "assetFileInfoManager"));

  LOBYTE(v3) = objc_msgSend(WeakRetained, "isSharedVariant") ^ 1;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "contentParser"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tip"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "bodyContent"));
  v13 = *(_QWORD *)(a1 + 32);
  v24 = 0;
  LOBYTE(v17) = (_BYTE)v3;
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "attributedStringForConstellationContent:defaultAttributes:identifier:language:assetsBaseURL:assetFileInfoManager:supportsLinks:error:", v12, v13, v20, v19, v18, v9, v17, &v24));
  v15 = v24;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001D7B0;
  block[3] = &unk_1000A2910;
  block[4] = WeakRetained;
  objc_copyWeak(&v23, (id *)(a1 + 48));
  v22 = v14;
  v16 = v14;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v23);
}

id sub_10001D7B0(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  void *v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentParser"));
  objc_msgSend(*(id *)(a1 + 32), "setBodyContentProcessingCount:", objc_msgSend(v2, "numOfActiveRemoteURLSessions"));

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uniqueIdentifierForCurrentTip"));
  v5 = objc_msgSend(WeakRetained, "isEqualToString:", v4);

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appController"));
    v7 = *(_QWORD *)(a1 + 40);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tip"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
    objc_msgSend(v6, "updateAttributedString:forIdentifier:", v7, v9);

    objc_msgSend(*(id *)(a1 + 32), "updateAttributedStringWithCache");
  }
  objc_msgSend(*(id *)(a1 + 32), "setContentTextOperation:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setContentTextOperationID:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "updateImageReadyStatus");
}

void sub_10001E2A8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  char v5;
  id v6;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  if (v2)
  {
    v3 = (void *)v2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    v5 = objc_opt_respondsToSelector(v4, "tipCollectionViewCellSharedTipTapped:");

    if ((v5 & 1) != 0)
    {
      v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
      objc_msgSend(v6, "performSelector:withObject:", "tipCollectionViewCellSharedTipTapped:", *(_QWORD *)(a1 + 32));

    }
  }
}

void sub_10001E358(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "link"));
  objc_msgSend(v1, "handleTipsURL:", v2);

}

void sub_10001F5D8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_10001F9D0(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[5];
  id v5;
  uint64_t v6;
  char v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v4[0] = _NSConcreteStackBlock;
  v4[2] = sub_10001FA6C;
  v4[3] = &unk_1000A29B0;
  v3 = *(void **)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 56);
  v4[1] = 3221225472;
  v5 = v3;
  v6 = *(_QWORD *)(a1 + 48);
  objc_msgSend(v2, "installCACommitCompletionBlock:", v4);

}

void sub_10001FA6C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  double x;
  double y;
  double width;
  double Height;
  id v9;
  CGRect v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appDelegate"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "tipsByCollectionViewController"));
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "collectionView"));

  if (*(_BYTE *)(a1 + 56))
  {
    v4 = objc_msgSend(objc_alloc((Class)RPTDirectionalSwipeTestParameters), "initWithTestName:scrollView:completionHandler:", *(_QWORD *)(a1 + 40), v9, 0);
    v10.origin.x = RPTGetBoundsForView(v9);
    x = v10.origin.x;
    y = v10.origin.y;
    width = v10.size.width;
    Height = CGRectGetHeight(v10);
    if (Height > 0.0)
      objc_msgSend(v4, "setScrollingBounds:", x + 30.0, y + 0.0, width + -60.0, round(Height / 3.0));
    objc_msgSend(v4, "setDirection:", 2);
    objc_msgSend(v4, "setSwipeSpeedFactor:", &off_1000A5DE8);
    objc_msgSend(v4, "setShouldFlick:", 1);
    +[RPTTestRunner runTestWithParameters:](RPTTestRunner, "runTestWithParameters:", v4);

  }
  else
  {
    objc_msgSend(v9, "_performScrollTest:iterations:delta:scrollAxis:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), 1);
  }

}

void sub_1000217A8(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "networkStateDidChange:", a2);

}

void sub_100023BC0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100023BE4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchResultViewModel"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "searchQuery"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "searchTerm"));

  if (!objc_msgSend(v4, "length"))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "searchResultViewModel"));
    objc_msgSend(v5, "reset");

  }
}

void sub_100025010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForRow:inSection:](NSIndexPath, "indexPathForRow:inSection:", a3, 0));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "cellForItemAtIndexPath:", v6));

  if (v5)
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v6);

}

void sub_100025090(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  objc_msgSend(v2, "reconfigureItemsAtIndexPaths:", *(_QWORD *)(a1 + 40));

}

void sub_10002529C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 120));
  _Unwind_Resume(a1);
}

void sub_1000252C0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reconfigureAllCollectionViewItems");
  objc_msgSend(WeakRetained, "ensureCurrentTipPositionWithViewSize:", *(double *)(a1 + 40), *(double *)(a1 + 48));

}

void sub_100025304(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  void *v4;
  void *v5;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setUpdatingSize:", 0);
  objc_msgSend(WeakRetained, "setScrollingTipContent:", 0);
  if (!*(_BYTE *)(a1 + 64))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "appController"));
    v3 = objc_msgSend(v2, "appInBackground");

    if ((v3 & 1) == 0)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
      objc_msgSend(WeakRetained, "updateTipForCell:startVideo:", 0, objc_msgSend(v4, "tipsViewControllerShouldStartVideo:", *(_QWORD *)(a1 + 32)));

    }
  }
  objc_msgSend(WeakRetained, "_adjustScrollViewPagingDecelerationForSize:", *(double *)(a1 + 48), *(double *)(a1 + 56));
  objc_msgSend(WeakRetained, "resetSearchController");
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v5, "setNeedsLayout");

}

void sub_100025574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100025598(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentTip"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
  v10 = objc_msgSend(v7, "isEqualToString:", v9);

  if (v10)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
    *a4 = 1;
  }
}

id sub_100026DB8(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  unsigned int v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  objc_msgSend(v4, "cancelAssetsPrefetch");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appController"));
  objc_msgSend(v6, "resetAttributedStringCache");

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traitCollection"));
  v8 = objc_msgSend(v7, "hasDifferentColorAppearanceComparedToTraitCollection:", v5);

  if (v8)
  {
    v9 = *(void **)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "traitCollection"));
    objc_msgSend(v9, "updateContentBackgroundWithTraitCollection:", v10);

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traitCollection"));
    v12 = objc_msgSend(v11, "userInterfaceStyle");
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cellAppearance"));
    objc_msgSend(v13, "setUserInterfaceStyle:", v12);

    objc_msgSend(*(id *)(a1 + 32), "reconfigureAllCollectionViewItems");
  }
  return objc_msgSend(*(id *)(a1 + 32), "updateTipForCell:startVideo:", 0, 1);
}

void sub_1000275CC(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playerController"));
  objc_msgSend(v1, "autoplay:", 0);

}

void sub_1000295BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000295FC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  _QWORD block[4];
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fullContentAssets"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "baseURL"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "language"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "assetFileInfoManager"));
  v8 = objc_msgSend(WeakRetained, "isSharedVariant") ^ 1;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "footnoteContentParser"));
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v22 = 0;
  LOBYTE(v16) = v8;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "attributedStringForConstellationContent:defaultAttributes:identifier:language:assetsBaseURL:assetFileInfoManager:supportsLinks:error:", v10, v11, v3, v6, v5, v7, v16, &v22));
  v13 = v22;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100029788;
  block[3] = &unk_1000A2B40;
  v18 = *(id *)(a1 + 56);
  v19 = WeakRetained;
  v20 = v12;
  v21 = v3;
  v14 = v3;
  v15 = v12;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

id sub_100029788(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uniqueIdentifierForCurrentTip"));
  LODWORD(v2) = objc_msgSend(v2, "hasPrefix:", v3);

  if ((_DWORD)v2)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "appController"));
    v5 = *(_QWORD *)(a1 + 48);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "tip"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
    objc_msgSend(v4, "updateFootnoteAttributedString:forIdentifier:", v5, v7);

    v8 = *(_QWORD *)(a1 + 48);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "footnoteTextView"));
    objc_msgSend(v9, "setAttributedText:", v8);

    v10 = *(_QWORD *)(a1 + 56);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "footnoteTextView"));
    objc_msgSend(v11, "setTipID:", v10);

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "footnoteTextView"));
    objc_msgSend(v12, "setHidden:", 0);

  }
  objc_msgSend(*(id *)(a1 + 40), "setFootnoteContentTextOperation:", 0);
  return objc_msgSend(*(id *)(a1 + 40), "setFootnoteContentTextOperationID:", 0);
}

void sub_10002AA7C(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (+[TPSCommonDefines isChecklistCollectionWithIdentifier:](TPSCommonDefines, "isChecklistCollectionWithIdentifier:", v5))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[TPSAnalyticsChecklistSessionController sharedInstance](TPSAnalyticsChecklistSessionController, "sharedInstance"));
    objc_msgSend(v4, "startSession");

  }
  else
  {
    objc_msgSend(WeakRetained, "logAnalyticsEventForChecklistSession");
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "pendingColumnSwitching") & 1) == 0)
    objc_msgSend(WeakRetained, "displayCollectionID:tipID:preferredColumn:", v5, 0, 1);

}

void sub_10002AB20(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[TPSCommonDefines checklistCollectionIdentifier](TPSCommonDefines, "checklistCollectionIdentifier"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));

  objc_msgSend(WeakRetained, "displayCollectionID:tipID:preferredColumn:", v4, v5, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[TPSAnalyticsChecklistSessionController sharedInstance](TPSAnalyticsChecklistSessionController, "sharedInstance"));
  objc_msgSend(v6, "startSession");

}

void sub_10002ABC4(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "logAnalyticsEventForChecklistSession");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "version"));
  v6 = objc_msgSend(v3, "platformIndependent");

  objc_msgSend(WeakRetained, "displayUserGuideWithIdentifier:topicId:version:platformIndependent:prefersLandingPage:", v4, 0, v5, v6, 0);
}

void sub_10002AC60(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id WeakRetained;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tipListViewController"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "viewModel"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "collection"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tipsByCollectionViewController"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));

  objc_msgSend(v9, "updateWithCollectionID:tipID:", v8, v10);
  if ((objc_msgSend(*(id *)(a1 + 32), "pendingColumnSwitching") & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "showTipsView");

}

id sub_10002B1B8(uint64_t a1)
{
  uint64_t v2;

  if (objc_msgSend(*(id *)(a1 + 32), "length"))
    v2 = 2;
  else
    v2 = 1;
  return objc_msgSend(*(id *)(a1 + 40), "displayCollectionID:tipID:preferredColumn:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), v2);
}

void sub_10002B394(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "splitViewController"));
  objc_msgSend(v2, "showColumn:", *(_QWORD *)(a1 + 40));

}

void sub_10002B3D4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "showCollectionsView");

}

void sub_10002BBA8(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "length") || !*(_BYTE *)(a1 + 40))
    objc_msgSend(v3, "setSelectedHelpTopicID:", *(_QWORD *)(a1 + 32));
  else
    objc_msgSend(v3, "setPrefersLandingViewOnLoad:", 1);

}

void sub_10002BC08(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "text"));
  v4 = (id)objc_claimAutoreleasedReturnValue(+[HLPHelpViewController helpViewControllerWithTitle:identifier:version:](HLPHelpViewController, "helpViewControllerWithTitle:identifier:version:", v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));

  objc_msgSend(v4, "setDelegate:", *(_QWORD *)(a1 + 56));
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  objc_msgSend(v4, "setShowTopicViewOnLoad:", 1);
  objc_msgSend(v4, "setPlatformIndependent:", *(unsigned __int8 *)(a1 + 72));
  objc_msgSend(*(id *)(a1 + 56), "setUserGuideDisplayed:", 1);
  v3 = objc_msgSend(objc_alloc((Class)UINavigationController), "initWithRootViewController:", v4);
  objc_msgSend(v3, "setModalPresentationStyle:", 1);
  objc_msgSend(*(id *)(a1 + 56), "presentViewController:animated:completion:", v3, 1, 0);

}

BOOL sub_10002C7F0(id a1, NSURLQueryItem *a2)
{
  void *v2;
  unsigned __int8 v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[NSURLQueryItem name](a2, "name"));
  v3 = objc_msgSend(v2, "isEqualToString:", TPSTipURLSchemeParameterSearchTermKey);

  return v3;
}

void sub_10002CE64(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "showCollectionsView");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionListViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "navigationController"));
  v4 = objc_msgSend(v3, "popToRootViewControllerAnimated:", 0);

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionListViewController"));
  objc_msgSend(v5, "searchWithSearchQuery:", *(_QWORD *)(a1 + 40));

}

void sub_10002CEE8(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "showTipsView");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tipsByCollectionViewController"));
  objc_msgSend(v2, "searchWithSearchQuery:", *(_QWORD *)(a1 + 40));

}

void sub_10002DF60(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

id sub_10002EB28(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "model");
  if ((unint64_t)result < 2)
    return objc_msgSend(*(id *)(a1 + 32), "parallaxFactor");
  return result;
}

uint64_t variable initialization expression of TPSLastDisplayedContent.tipId()
{
  return 0;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_1000188D0(a1, &qword_1000B4040, (uint64_t)&unk_1000A2F20);
}

uint64_t sub_10002EC3C(uint64_t a1, uint64_t a2)
{
  return sub_10002EFD0(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_10002EC58(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_10002ECCC(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_10002ED48@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

void type metadata accessor for ActivityType(uint64_t a1)
{
  sub_1000188D0(a1, &qword_1000B4048, (uint64_t)&unk_1000A2F48);
}

uint64_t sub_10002EDA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000041E8(&qword_1000B4098, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100078B90);
  v3 = sub_1000041E8(&qword_1000B40A0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1000789A4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10002EE24()
{
  return sub_1000041E8(&qword_1000B4058, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100078968);
}

uint64_t sub_10002EE50()
{
  return sub_1000041E8(&qword_1000B4060, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_10007893C);
}

uint64_t sub_10002EE7C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_10002EEC0@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10002EEE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000041E8(&qword_1000B4088, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_100078B08);
  v3 = sub_1000041E8(&qword_1000B4090, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_100078AB0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10002EF6C()
{
  return sub_1000041E8(&qword_1000B4068, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_100078A78);
}

uint64_t sub_10002EF98()
{
  return sub_1000041E8(&qword_1000B4070, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_100078A50);
}

uint64_t sub_10002EFC4(uint64_t a1, uint64_t a2)
{
  return sub_10002EFD0(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_10002EFD0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10002F00C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10002F04C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_10002F0BC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_10002F144()
{
  return sub_1000041E8(&qword_1000B4078, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_100078AE0);
}

uint64_t sub_10002F170(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10002F190(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_1000188D0(a1, &qword_1000B40A8, (uint64_t)&unk_1000A2FF0);
}

uint64_t sub_10002F1D0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10002F1F0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_1000188D0(a1, &qword_1000B40B0, (uint64_t)&unk_1000A3070);
}

uint64_t sub_10002F22C()
{
  return type metadata accessor for SearchResultsViewController(0);
}

id sub_10002F2CC(uint64_t a1)
{
  return *(id *)(a1 + qword_1000B40B8);
}

void sub_10002F2DC(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  id v4;

  v4 = *(id *)(a1 + qword_1000B40B8);
  *(_QWORD *)(a1 + qword_1000B40B8) = a3;
  v3 = a3;

}

uint64_t sub_10002F310(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;

  v3 = a3;
  v4 = sub_100007314(v3);

  return v4;
}

void sub_10002F344(char a1)
{
  char *v1;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  char v10;
  objc_super v11;

  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for SearchResultsViewController(0);
  objc_msgSendSuper2(&v11, "viewWillAppear:", a1 & 1);
  v3 = *(void **)&v1[qword_1000B40B8];
  KeyPath = swift_getKeyPath(&unk_100078D08);
  v5 = swift_getKeyPath(&unk_100078D30);
  v6 = v3;
  static Published.subscript.getter(&v10, v6, KeyPath, v5);

  swift_release(KeyPath);
  swift_release(v5);
  if (v10 == 1)
  {
    v7 = objc_msgSend(v1, "navigationController");
    if (v7)
    {
      v8 = v7;
      v9 = objc_msgSend(v7, "navigationBar");

      objc_msgSend(v9, "setHidden:", 1);
    }
  }
}

void sub_10002F448(void *a1, uint64_t a2, char a3)
{
  id v4;

  v4 = a1;
  sub_10002F344(a3);

}

id sub_10002F488(char *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  id v6;
  id v7;
  char *v8;
  id v9;
  objc_super v11;

  v5 = qword_1000B40B8;
  v6 = objc_allocWithZone((Class)type metadata accessor for SearchResultsViewModel(0));
  v7 = a3;
  v8 = a1;
  *(_QWORD *)&a1[v5] = objc_msgSend(v6, "init");

  v11.receiver = v8;
  v11.super_class = (Class)type metadata accessor for SearchResultsViewController(0);
  v9 = objc_msgSendSuper2(&v11, "initWithCoder:", v7);

  return v9;
}

void sub_10002F52C()
{
  _swift_stdlib_reportUnimplementedInitializer("Tips.SearchResultsViewController", 32, "init(rootView:)", 15, 0);
  __break(1u);
}

void sub_10002F558()
{
  _swift_stdlib_reportUnimplementedInitializer("Tips.SearchResultsViewController", 32, "init(coder:rootView:)", 21, 0);
  __break(1u);
}

void sub_10002F584()
{
  uint64_t v0;

}

id sub_10002F594()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SearchResultsViewController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_10002F5C8(uint64_t a1)
{

}

uint64_t sub_10002F5D8()
{
  return type metadata accessor for SearchResultsViewController(0);
}

uint64_t sub_10002F5E4(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, qword_1000B9040 + a1 + 16);
}

uint64_t sub_10002F634(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;

  v3 = a3;
  v4 = sub_10002FD84(v3);

  return v4;
}

void sub_10002F668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  objc_super v14;

  v5 = v4;
  v6 = (uint64_t *)((swift_isaMask & *v4) + qword_1000B9040);
  v7 = *v6;
  v8 = v6[1];
  v9 = (objc_class *)type metadata accessor for SearchResultsListViewController(0, *v6, v8, a4);
  v14.receiver = v5;
  v14.super_class = v9;
  objc_msgSendSuper2(&v14, "viewDidLoad");
  v10 = objc_msgSend(v5, "navigationItem");
  objc_msgSend(v10, "setLargeTitleDisplayMode:", 2);

  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  v12 = v11;
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  objc_msgSend(v5, "setTitle:", v13);

}

void sub_10002F748(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v4 = a1;
  sub_10002F668((uint64_t)v4, v1, v2, v3);

}

void sub_10002F77C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v6;
  void *v7;
  uint64_t KeyPath;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  char v14;
  objc_super v15;

  v6 = (objc_class *)type metadata accessor for SearchResultsListViewController(0, *(_QWORD *)((swift_isaMask & *v4) + qword_1000B9040), *(_QWORD *)((swift_isaMask & *v4) + qword_1000B9040 + 8), a4);
  v15.receiver = v4;
  v15.super_class = v6;
  objc_msgSendSuper2(&v15, "viewWillAppear:", a1 & 1);
  v7 = *(void **)((char *)v4 + *(_QWORD *)(qword_1000B9040 + (swift_isaMask & *v4) + 16));
  KeyPath = swift_getKeyPath(&unk_100078D08);
  v9 = swift_getKeyPath(&unk_100078D30);
  v10 = v7;
  static Published.subscript.getter(&v14, v10, KeyPath, v9);

  swift_release(KeyPath);
  swift_release(v9);
  if (v14 == 1)
  {
    v11 = objc_msgSend(v4, "navigationController");
    if (v11)
    {
      v12 = v11;
      v13 = objc_msgSend(v11, "navigationBar");

      objc_msgSend(v13, "setHidden:", 0);
    }
  }
}

void sub_10002F8B4(void *a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  id v6;

  v6 = a1;
  sub_10002F77C(a3, (uint64_t)v6, v4, v5);

}

id sub_10002F8F4(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  objc_class *v8;
  id v9;
  objc_super v11;

  v3 = swift_isaMask & *v1;
  v4 = *(_QWORD *)(qword_1000B9040 + v3 + 16);
  v5 = objc_allocWithZone((Class)type metadata accessor for SearchResultsViewModel(0));
  v6 = v1;
  *(_QWORD *)((char *)v1 + v4) = objc_msgSend(v5, "init");

  v8 = (objc_class *)type metadata accessor for SearchResultsListViewController(0, *(_QWORD *)(v3 + qword_1000B9040), *(_QWORD *)(v3 + qword_1000B9040 + 8), v7);
  v11.receiver = v6;
  v11.super_class = v8;
  v9 = objc_msgSendSuper2(&v11, "initWithCoder:", a1);

  return v9;
}

id sub_10002F9BC(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10002F8F4(a3);
}

void sub_10002F9E0()
{
  _QWORD *v0;

}

id sub_10002FA0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for SearchResultsListViewController(0, *(_QWORD *)((swift_isaMask & *v4) + qword_1000B9040), *(_QWORD *)((swift_isaMask & *v4) + qword_1000B9040 + 8), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

void sub_10002FA64(_QWORD *a1)
{

}

uint64_t type metadata accessor for SearchResultsListViewController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002FEB0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchResultsListViewController);
}

void sub_10002FA9C()
{
  sub_10002FE50();
}

void sub_10002FAB0()
{
  sub_10002FE7C();
}

uint64_t sub_10002FAC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_1000187A4(&qword_1000B41C8);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002FD3C(a1, (uint64_t)v4);
  return EnvironmentValues.horizontalSizeClass.setter(v4);
}

uint64_t sub_10002FB3C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  objc_class *v12;
  id v13;
  id v14;
  _QWORD *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  v4 = type metadata accessor for SearchResult.Item.Category(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == enum case for SearchResult.Item.Category.tip(_:))
  {
    v9 = (uint64_t *)&unk_1000B41A8;
  }
  else
  {
    if (v8 != enum case for SearchResult.Item.Category.userGuideTopic(_:))
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return 0;
    }
    v9 = (uint64_t *)&unk_1000B4190;
  }
  v10 = objc_allocWithZone((Class)sub_1000187A4(v9));
  v11 = *(_QWORD *)(qword_1000B9040 + (swift_isaMask & *v10) + 16);
  v12 = (objc_class *)type metadata accessor for SearchResultsViewModel(0);
  v13 = objc_allocWithZone(v12);
  v14 = a2;
  v15 = v10;
  v16 = objc_msgSend(v13, "init");
  *(_QWORD *)((char *)v10 + v11) = v14;
  v17 = v14;

  v31[0] = 0;
  v31[1] = 0;
  v18 = v17;
  v19 = sub_1000187A4(&qword_1000B4198);
  State.init(wrappedValue:)(&v27, v31, v19);
  v26 = v27;
  v20 = v28;
  v21 = sub_100019AF0();
  v22 = ObservedObject.init(wrappedValue:)(v18, v12, v21);
  v27 = v26;
  v28 = v20;
  v29 = v22;
  v30 = v23;
  v24 = UIHostingController.init(rootView:)(&v27);

  return v24;
}

uint64_t sub_10002FD10()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_10002FD3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000187A4(&qword_1000B41C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002FD84(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  id v6;
  id v7;
  uint64_t v9[5];

  v3 = *(_QWORD *)(qword_1000B9040 + (swift_isaMask & *v1) + 16);
  v4 = objc_allocWithZone((Class)type metadata accessor for SearchResultsViewModel(0));
  v5 = v1;
  v6 = objc_msgSend(v4, "init");
  *(_QWORD *)((char *)v1 + v3) = a1;
  v7 = a1;

  sub_100041008((uint64_t)v7, v9);
  return UIHostingController.init(rootView:)(v9);
}

void sub_10002FE50()
{
  _swift_stdlib_reportUnimplementedInitializer("Tips.SearchResultsListViewController", 36, "init(rootView:)", 15, 0);
  __break(1u);
}

void sub_10002FE7C()
{
  _swift_stdlib_reportUnimplementedInitializer("Tips.SearchResultsListViewController", 36, "init(coder:rootView:)", 21, 0);
  __break(1u);
}

uint64_t sub_10002FEB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t initializeWithCopy for UserGuideSearchResultsItemsView(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for UserGuideSearchResultsItemsView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for UserGuideSearchResultsItemsView(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for UserGuideSearchResultsItemsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for UserGuideSearchResultsItemsView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserGuideSearchResultsItemsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UserGuideSearchResultsItemsView()
{
  return &type metadata for UserGuideSearchResultsItemsView;
}

uint64_t sub_100030064(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008DE68, 1);
}

uint64_t sub_100030074()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[16];

  v0 = type metadata accessor for Locale(0);
  __chkstk_darwin(v0);
  v2 = &v9[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v3);
  v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000029, 0x800000010008BD30);
  static Locale.current.getter(v6);
  result = String.init(localized:table:bundle:locale:comment:)(v5, 0, 0, 0, v2, "Search Result Section Header Title for User Guide Topics", 56, 2);
  qword_1000B9050 = result;
  *(_QWORD *)algn_1000B9058 = v8;
  return result;
}

uint64_t sub_100030158@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  uint64_t KeyPath;
  uint64_t v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD v27[2];
  _BYTE v28[16];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  char v36;
  unint64_t v37;

  v27[1] = a5;
  v27[0] = sub_1000187A4(&qword_1000B4240);
  __chkstk_darwin(v27[0]);
  v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100078DF8);
  v12 = swift_getKeyPath(&unk_100078E20);
  v13 = a2;
  static Published.subscript.getter(&v37, v13, KeyPath, v12);

  swift_release(KeyPath);
  swift_release(v12);
  v14 = v37;
  v15 = sub_100031AC4(a3, v37, (void (*)(_QWORD))&type metadata accessor for UserGuideTopic);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  swift_bridgeObjectRelease(v14);
  v22 = v13;
  sub_1000302F8(a1, (uint64_t)v22, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100030B20);

  v29 = v15;
  v30 = v17;
  v31 = v19;
  v32 = v21;
  v33 = a1;
  v34 = v22;
  v35 = a3;
  v36 = a4;
  v23 = sub_1000187A4(&qword_1000B4248);
  v24 = sub_100031700();
  v25 = sub_100031784();
  Section<>.init(header:content:)(v10, sub_1000316E8, v28, v27[0], v23, v24, v25);
  return swift_unknownObjectRelease(v15);
}

uint64_t sub_1000302EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1000302F8(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100031060);
}

uint64_t sub_1000302F8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v10 = sub_1000187A4(&qword_1000B42B8);
  __chkstk_darwin(v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000187A4(&qword_1000B4260);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a4 & 1) != 0)
  {
    *(_QWORD *)v16 = static VerticalAlignment.center.getter(v14);
    *((_QWORD *)v16 + 1) = 0;
    v16[16] = 1;
    sub_1000187A4(&qword_1000B42C0);
    a5(a1, a2, a3, 1);
    sub_1000121BC((uint64_t)v16, (uint64_t)v12, &qword_1000B4260);
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    v17 = sub_1000086E8(&qword_1000B4258, &qword_1000B4260, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v12, v13, &type metadata for EmptyView, v17, &protocol witness table for EmptyView);
    return sub_100011DE0((uint64_t)v16, &qword_1000B4260);
  }
  else
  {
    swift_storeEnumTagMultiPayload(v12, v10, 1);
    v19 = sub_1000086E8(&qword_1000B4258, &qword_1000B4260, (uint64_t)&protocol conformance descriptor for HStack<A>);
    return _ConditionalContent<>.init(storage:)(v12, v13, &type metadata for EmptyView, v19, &protocol witness table for EmptyView);
  }
}

uint64_t sub_1000304C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t KeyPath;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeConformance2;
  uint64_t v25;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[4];

  v30[0] = a1;
  v30[1] = a2;
  v30[2] = a3;
  v30[3] = a4;
  KeyPath = swift_getKeyPath(&unk_100078E50);
  v18 = swift_allocObject(&unk_1000A32C0, 80, 7);
  *(_QWORD *)(v18 + 16) = a5;
  *(_QWORD *)(v18 + 24) = a6;
  *(_QWORD *)(v18 + 32) = a7;
  *(_BYTE *)(v18 + 40) = a8;
  *(_QWORD *)(v18 + 48) = a1;
  *(_QWORD *)(v18 + 56) = a2;
  *(_QWORD *)(v18 + 64) = a3;
  *(_QWORD *)(v18 + 72) = a4;
  swift_unknownObjectRetain_n(a1, 2);
  v19 = a6;
  v20 = sub_1000187A4(&qword_1000B42A0);
  v21 = sub_1000187A4(&qword_1000B42A8);
  v22 = sub_1000086E8(&qword_1000B42B0, &qword_1000B42A0, (uint64_t)&protocol conformance descriptor for ArraySlice<A>);
  v23 = sub_1000176F8(&qword_1000B4270);
  v28 = sub_1000176F8(&qword_1000B4278);
  v29 = sub_100031840();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v28, &opaque type descriptor for <<opaque return type of View.listRowSeparator(_:edges:)>>, 1);
  v28 = v23;
  v29 = OpaqueTypeConformance2;
  v25 = swift_getOpaqueTypeConformance2(&v28, &opaque type descriptor for <<opaque return type of View.listRowSeparator(_:edges:)>>, 1);
  return ForEach<>.init(_:id:content:)(v30, KeyPath, sub_100031960, v18, v20, v21, v22, &protocol witness table for String, v25, a9);
}

uint64_t sub_100030644@<X0>(void **a1@<X0>, void *a2@<X2>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, unint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t KeyPath;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  int64_t v30;
  void *v31;
  id v32;
  id v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  id v39;
  id v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t OpaqueTypeConformance2;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD v53[2];

  v46 = a3;
  v50 = a5;
  v51 = a6;
  v52 = a4;
  v8 = type metadata accessor for UserGuideSearchResultItemView(0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_1000187A4(&qword_1000B4278);
  __chkstk_darwin(v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000187A4(&qword_1000B4270);
  v49 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000187A4(&qword_1000B42A8);
  v47 = *(_QWORD *)(v17 - 8);
  v48 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *a1;
  v21 = a2;
  v22 = v20;
  sub_100060A30(v21, v22, v10);
  KeyPath = swift_getKeyPath(&unk_100078E98);
  v24 = swift_getKeyPath(&unk_100078EC0);
  v25 = v21;
  static Published.subscript.getter(v53, v25, KeyPath, v24);

  swift_release(KeyPath);
  v26 = swift_release(v24);
  if (LOBYTE(v53[0]) == 1)
  {
    v27 = static Color.clear.getter(v26);
    v53[0] = v27;
    swift_retain(v27);
    v28 = AnyView.init<A>(_:)(v53, &type metadata for Color, &protocol witness table for Color);
  }
  else
  {
    v28 = 0;
    v27 = 0;
  }
  sub_10003199C((uint64_t)v10, (uint64_t)v13);
  swift_release(v27);
  *(_QWORD *)&v13[*(int *)(v11 + 36)] = v28;
  result = sub_1000319E0((uint64_t)v10);
  v30 = v51 >> 1;
  if (v51 >> 1 == v52)
    goto LABEL_8;
  if (v30 <= v52)
  {
    __break(1u);
    goto LABEL_16;
  }
  v31 = *(void **)(v46 + 8 * v52);
  type metadata accessor for UserGuideTopic(0);
  v32 = v22;
  v33 = v31;
  v34 = static NSObject.== infix(_:_:)(v33, v32);

  if ((v34 & 1) == 0)
LABEL_8:
    v35 = 0;
  else
    v35 = 2;
  v36 = static VerticalEdge.Set.top.getter();
  v37 = sub_100031840();
  View.listRowSeparator(_:edges:)(v35, v36, v11, v37);
  result = sub_100011DE0((uint64_t)v13, &qword_1000B4278);
  if (v30 == v52)
    goto LABEL_13;
  if (v30 > v52)
  {
    v38 = *(void **)(v46 + 8 * v30 - 8);
    type metadata accessor for UserGuideTopic(0);
    v39 = v22;
    v40 = v38;
    v41 = static NSObject.== infix(_:_:)(v40, v39);

    if ((v41 & 1) != 0)
    {
      v42 = 2;
LABEL_14:
      v43 = static VerticalEdge.Set.bottom.getter();
      v53[0] = v11;
      v53[1] = v37;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v53, &opaque type descriptor for <<opaque return type of View.listRowSeparator(_:edges:)>>, 1);
      View.listRowSeparator(_:edges:)(v42, v43, v14, OpaqueTypeConformance2);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v16, v14);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v47 + 32))(v50, v19, v48);
    }
LABEL_13:
    v42 = 0;
    goto LABEL_14;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_1000309C8()
{
  uint64_t v0;

  if (qword_1000B3FB0 != -1)
    swift_once(&qword_1000B3FB0, sub_100030074);
  v0 = qword_1000B9050;
  swift_bridgeObjectRetain(*(_QWORD *)algn_1000B9058);
  return v0;
}

uint64_t sub_100030A24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100030158(*(_QWORD *)v1, *(void **)(v1 + 8), *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), a1);
}

uint64_t sub_100030A34(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100030A74();
  return swift_getOpaqueTypeConformance2(v3, &unk_10008E70C, 1);
}

unint64_t sub_100030A74()
{
  unint64_t result;

  result = qword_1000B41D0;
  if (!qword_1000B41D0)
  {
    result = swift_getWitnessTable(&unk_100078DD0, &type metadata for UserGuideSearchResultsItemsView);
    atomic_store(result, (unint64_t *)&qword_1000B41D0);
  }
  return result;
}

unint64_t sub_100030AB8(uint64_t a1)
{
  unint64_t result;

  result = sub_100030ADC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100030ADC()
{
  unint64_t result;

  result = qword_1000B4238;
  if (!qword_1000B4238)
  {
    result = swift_getWitnessTable(&unk_100078D80, &type metadata for UserGuideSearchResultsItemsView);
    atomic_store(result, (unint64_t *)&qword_1000B4238);
  }
  return result;
}

uint64_t sub_100030B20@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  id v52;
  _BYTE *v53;
  uint64_t KeyPath;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v69;
  _BYTE v70[4];
  int v71;
  uint64_t v72;
  void *v73;
  _BYTE *v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t *v82;
  _QWORD v83[2];

  v71 = a4;
  v75 = a3;
  v72 = a1;
  v73 = a2;
  v82 = a5;
  v5 = sub_1000187A4(&qword_1000B42C8);
  v78 = *(_QWORD *)(v5 - 8);
  v79 = v5;
  __chkstk_darwin(v5);
  v74 = &v70[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v77 = sub_1000187A4(&qword_1000B42D0);
  v7 = __chkstk_darwin(v77);
  v81 = &v70[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __chkstk_darwin(v7);
  v76 = &v70[-v10];
  __chkstk_darwin(v9);
  v80 = &v70[-v11];
  v12 = sub_1000187A4(&qword_1000B42D8);
  __chkstk_darwin(v12);
  v14 = &v70[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for Font.TextStyle(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v70[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1000B3FB0 != -1)
    swift_once(&qword_1000B3FB0, sub_100030074);
  v19 = *(_QWORD *)algn_1000B9058;
  v83[0] = qword_1000B9050;
  v83[1] = *(_QWORD *)algn_1000B9058;
  v20 = sub_100014614();
  swift_bridgeObjectRetain(v19);
  v21 = Text.init<A>(_:)(v83, &type metadata for String, v20);
  v23 = v22;
  v25 = v24;
  v27 = v26 & 1;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for Font.TextStyle.title3(_:), v15);
  v28 = type metadata accessor for Font.Design(0);
  v29 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v14, 1, 1, v28);
  v30 = static Font.Weight.bold.getter(v29);
  v31 = static Font.system(_:design:weight:)(v18, v14, *(_QWORD *)&v30, 0);
  sub_100011DE0((uint64_t)v14, &qword_1000B42D8);
  (*(void (**)(_BYTE *, uint64_t))(v16 + 8))(v18, v15);
  v32 = Text.font(_:)(v31, v21, v23, v27, v25);
  v34 = v33;
  v36 = v35;
  v38 = v37;
  swift_release(v31);
  v39 = v36 & 1;
  sub_100014658(v21, v23, v27);
  swift_bridgeObjectRelease(v25);
  v40 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  v41 = Color.init(uiColor:)(v40);
  v83[0] = v41;
  v42 = Text.foregroundStyle<A>(_:)(v83, v32, v34, v39, v38, &type metadata for Color, &protocol witness table for Color);
  v44 = v43;
  v46 = v45;
  v48 = v47;
  sub_100014658(v32, v34, v39);
  swift_release(v41);
  swift_bridgeObjectRelease(v38);
  LOBYTE(v38) = v71 & 1;
  v49 = swift_allocObject(&unk_1000A32E8, 41, 7);
  v50 = v73;
  *(_QWORD *)(v49 + 16) = v72;
  *(_QWORD *)(v49 + 24) = v50;
  v51 = v75;
  *(_QWORD *)(v49 + 32) = v75;
  *(_BYTE *)(v49 + 40) = v38;
  v52 = v50;
  v53 = v74;
  Button.init(action:label:)(sub_100031A40, v49, sub_1000422E8, 0, &type metadata for Text, &protocol witness table for Text);
  KeyPath = swift_getKeyPath(&unk_100078DF8);
  v55 = swift_getKeyPath(&unk_100078E20);
  v56 = v52;
  static Published.subscript.getter(v83, v56, KeyPath, v55);

  swift_release(KeyPath);
  swift_release(v55);
  v57 = v83[0];
  if (v83[0] >> 62)
  {
    if (v83[0] < 0)
      v69 = v83[0];
    else
      v69 = v83[0] & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v83[0]);
    v58 = _CocoaArrayWrapper.endIndex.getter(v69);
    swift_bridgeObjectRelease(v57);
  }
  else
  {
    v58 = *(_QWORD *)((v83[0] & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v57);
  v59 = v46 & 1;
  if (v58 <= v51)
    v60 = 0.0;
  else
    v60 = 1.0;
  v62 = v78;
  v61 = v79;
  v63 = (uint64_t)v76;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v78 + 16))(v76, v53, v79);
  *(double *)(v63 + *(int *)(v77 + 36)) = v60;
  (*(void (**)(_BYTE *, uint64_t))(v62 + 8))(v53, v61);
  v64 = v80;
  sub_100031A50(v63, (uint64_t)v80);
  v65 = v81;
  sub_1000121BC((uint64_t)v64, (uint64_t)v81, &qword_1000B42D0);
  v66 = v82;
  *v82 = v42;
  v66[1] = v44;
  *((_BYTE *)v66 + 16) = v59;
  v66[3] = v48;
  v66[4] = 0;
  *((_BYTE *)v66 + 40) = 1;
  v67 = sub_1000187A4(&qword_1000B42E8);
  sub_1000121BC((uint64_t)v65, (uint64_t)v66 + *(int *)(v67 + 64), &qword_1000B42D0);
  sub_100031A98(v42, v44, v59);
  swift_bridgeObjectRetain(v48);
  sub_100011DE0((uint64_t)v64, &qword_1000B42D0);
  sub_100011DE0((uint64_t)v65, &qword_1000B42D0);
  sub_100014658(v42, v44, v59);
  return swift_bridgeObjectRelease(v48);
}

uint64_t sub_100031060@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  id v51;
  _BYTE *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v66;
  _BYTE v67[4];
  int v68;
  uint64_t v69;
  void *v70;
  _BYTE *v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t *v79;
  _QWORD v80[2];

  v68 = a4;
  v72 = a3;
  v69 = a1;
  v70 = a2;
  v79 = a5;
  v5 = sub_1000187A4(&qword_1000B42C8);
  v75 = *(_QWORD *)(v5 - 8);
  v76 = v5;
  __chkstk_darwin(v5);
  v71 = &v67[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v74 = sub_1000187A4(&qword_1000B42D0);
  v7 = __chkstk_darwin(v74);
  v78 = &v67[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __chkstk_darwin(v7);
  v73 = &v67[-v10];
  __chkstk_darwin(v9);
  v77 = &v67[-v11];
  v12 = sub_1000187A4(&qword_1000B42D8);
  __chkstk_darwin(v12);
  v14 = &v67[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for Font.TextStyle(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v67[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1000B3FF8 != -1)
    swift_once(&qword_1000B3FF8, sub_10006A294);
  v19 = unk_1000B9130;
  v80[0] = qword_1000B9128;
  v80[1] = unk_1000B9130;
  v20 = sub_100014614();
  swift_bridgeObjectRetain(v19);
  v21 = Text.init<A>(_:)(v80, &type metadata for String, v20);
  v23 = v22;
  v25 = v24;
  v27 = v26 & 1;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for Font.TextStyle.title3(_:), v15);
  v28 = type metadata accessor for Font.Design(0);
  v29 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v14, 1, 1, v28);
  v30 = static Font.Weight.bold.getter(v29);
  v31 = static Font.system(_:design:weight:)(v18, v14, *(_QWORD *)&v30, 0);
  sub_100011DE0((uint64_t)v14, &qword_1000B42D8);
  (*(void (**)(_BYTE *, uint64_t))(v16 + 8))(v18, v15);
  v32 = Text.font(_:)(v31, v21, v23, v27, v25);
  v34 = v33;
  v36 = v35;
  v38 = v37;
  swift_release(v31);
  LOBYTE(v31) = v36 & 1;
  sub_100014658(v21, v23, v27);
  swift_bridgeObjectRelease(v25);
  v39 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  v40 = Color.init(uiColor:)(v39);
  v80[0] = v40;
  v41 = Text.foregroundStyle<A>(_:)(v80, v32, v34, v36 & 1, v38, &type metadata for Color, &protocol witness table for Color);
  v43 = v42;
  v45 = v44;
  v47 = v46;
  sub_100014658(v32, v34, v31);
  swift_release(v40);
  swift_bridgeObjectRelease(v38);
  LOBYTE(v40) = v68 & 1;
  v48 = swift_allocObject(&unk_1000A3310, 41, 7);
  v49 = v70;
  *(_QWORD *)(v48 + 16) = v69;
  *(_QWORD *)(v48 + 24) = v49;
  v50 = v72;
  *(_QWORD *)(v48 + 32) = v72;
  *(_BYTE *)(v48 + 40) = v40;
  v51 = v49;
  v52 = v71;
  Button.init(action:label:)(sub_100031AB0, v48, sub_1000422E8, 0, &type metadata for Text, &protocol witness table for Text);
  v53 = v51;
  v54 = dispatch thunk of TipNavigationViewModel.tips.getter(v53);

  if ((unint64_t)v54 >> 62)
  {
    if (v54 < 0)
      v66 = v54;
    else
      v66 = v54 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v54);
    v55 = _CocoaArrayWrapper.endIndex.getter(v66);
    swift_bridgeObjectRelease(v54);
  }
  else
  {
    v55 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v54);
  v56 = v45 & 1;
  if (v55 <= v50)
    v57 = 0.0;
  else
    v57 = 1.0;
  v59 = v75;
  v58 = v76;
  v60 = (uint64_t)v73;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v75 + 16))(v73, v52, v76);
  *(double *)(v60 + *(int *)(v74 + 36)) = v57;
  (*(void (**)(_BYTE *, uint64_t))(v59 + 8))(v52, v58);
  v61 = v77;
  sub_100031A50(v60, (uint64_t)v77);
  v62 = v78;
  sub_1000121BC((uint64_t)v61, (uint64_t)v78, &qword_1000B42D0);
  v63 = v79;
  *v79 = v41;
  v63[1] = v43;
  *((_BYTE *)v63 + 16) = v56;
  v63[3] = v47;
  v63[4] = 0;
  *((_BYTE *)v63 + 40) = 1;
  v64 = sub_1000187A4(&qword_1000B42E8);
  sub_1000121BC((uint64_t)v62, (uint64_t)v63 + *(int *)(v64 + 64), &qword_1000B42D0);
  sub_100031A98(v41, v43, v56);
  swift_bridgeObjectRetain(v47);
  sub_100011DE0((uint64_t)v61, &qword_1000B42D0);
  sub_100011DE0((uint64_t)v62, &qword_1000B42D0);
  sub_100014658(v41, v43, v56);
  return swift_bridgeObjectRelease(v47);
}

void sub_100031564(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t KeyPath;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = type metadata accessor for SearchResult.Item.Category(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100078EE0);
  v8 = swift_getKeyPath(&unk_100078F08);
  v9 = a2;
  static Published.subscript.getter(&v16, v9, KeyPath, v8);
  swift_release(KeyPath);
  v10 = swift_release(v8);
  v11 = v16;
  v12 = (void (*)(char *))dispatch thunk of SearchResultsModel.searchResultsSeeAllHandler.getter(v10);
  v14 = v13;

  swift_release(v11);
  if (v12)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for SearchResult.Item.Category.userGuideTopic(_:), v3);
    v12(v6);
    sub_100005500((uint64_t)v12, v14);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

}

void sub_100031694(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)a1;
  v2 = *(id *)(a1 + 8);
  sub_10006A378(v1, v2);

}

uint64_t sub_1000316E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000304C4(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(void **)(v1 + 56), *(_QWORD *)(v1 + 64), *(_BYTE *)(v1 + 72), a1);
}

unint64_t sub_100031700()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4250;
  if (!qword_1000B4250)
  {
    v1 = sub_1000176F8(&qword_1000B4240);
    sub_1000086E8(&qword_1000B4258, &qword_1000B4260, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4250);
  }
  return result;
}

unint64_t sub_100031784()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  unint64_t v5;

  result = qword_1000B4268;
  if (!qword_1000B4268)
  {
    v1 = sub_1000176F8(&qword_1000B4248);
    v2 = sub_1000176F8(&qword_1000B4270);
    v4 = sub_1000176F8(&qword_1000B4278);
    v5 = sub_100031840();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.listRowSeparator(_:edges:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.listRowSeparator(_:edges:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4268);
  }
  return result;
}

unint64_t sub_100031840()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4280;
  if (!qword_1000B4280)
  {
    v1 = sub_1000176F8(&qword_1000B4278);
    sub_1000318C4();
    sub_1000086E8(&qword_1000B4290, &qword_1000B4298, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4280);
  }
  return result;
}

unint64_t sub_1000318C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4288;
  if (!qword_1000B4288)
  {
    v1 = type metadata accessor for UserGuideSearchResultItemView(255);
    result = swift_getWitnessTable(&unk_10007BEE0, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4288);
  }
  return result;
}

uint64_t sub_10003190C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = dispatch thunk of UserGuideTopic.identifier.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100031934()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100031960@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100030644(a1, *(void **)(v2 + 24), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), a2, *(_QWORD *)(v2 + 72));
}

uint64_t sub_10003199C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UserGuideSearchResultItemView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000319E0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UserGuideSearchResultItemView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100031A1C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

void sub_100031A40()
{
  uint64_t v0;

  sub_100031564(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100031A50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000187A4(&qword_1000B42D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100031A98(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

void sub_100031AB0()
{
  uint64_t v0;

  sub_100031694(v0 + 16);
}

uint64_t sub_100031AB8(uint64_t a1, unint64_t a2)
{
  return sub_100031AC4(a1, a2, (void (*)(_QWORD))sub_100031C64);
}

uint64_t sub_100031AC4(uint64_t result, unint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(_QWORD);
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = a3;
    v3 = a2;
    v4 = result;
    v6 = a2 >> 62;
    if (!(a2 >> 62))
    {
      v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  if (v3 < 0)
    v17 = v3;
  else
    v17 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  v7 = _CocoaArrayWrapper.endIndex.getter(v17);
  result = swift_bridgeObjectRelease(v3);
LABEL_4:
  if (v7 >= v4)
    v8 = v4;
  else
    v8 = v7;
  if (v7 < 0)
    v8 = v4;
  if (v4)
    v9 = v8;
  else
    v9 = 0;
  if (v6)
  {
    if (v3 < 0)
      v11 = v3;
    else
      v11 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v12 = _CocoaArrayWrapper.endIndex.getter(v11);
    result = swift_bridgeObjectRelease(v3);
    if (v12 < 0)
      goto LABEL_37;
    swift_bridgeObjectRetain(v3);
    v10 = _CocoaArrayWrapper.endIndex.getter(v11);
    result = swift_bridgeObjectRelease(v3);
  }
  else
  {
    v10 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 < v9)
  {
    __break(1u);
LABEL_37:
    __break(1u);
    return result;
  }
  if ((v3 & 0xC000000000000001) != 0 && v9)
  {
    v5(0);
    v13 = 0;
    do
    {
      v14 = v13 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v13);
      v13 = v14;
    }
    while (v9 != v14);
  }
  if (v6)
  {
    if (v3 < 0)
      v16 = v3;
    else
      v16 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v15 = _CocoaArrayWrapper.subscript.getter(0, v9, v16);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v15 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
  }
  return v15;
}

unint64_t sub_100031C64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B42F0;
  if (!qword_1000B42F0)
  {
    v1 = objc_opt_self(TPSTip);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000B42F0);
  }
  return result;
}

unint64_t sub_100031CA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B42F8;
  if (!qword_1000B42F8)
  {
    v1 = sub_1000176F8((uint64_t *)&unk_1000B4300);
    sub_100031700();
    sub_100031784();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B42F8);
  }
  return result;
}

id sub_100031D64()
{
  void *v0;
  id v1;
  objc_super v3;

  objc_msgSend(v0, "cancelAnalyticsIncreaseCountViewForCollectionsViewDelay");
  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v1, "removeObserver:name:object:", v0, UIApplicationWillEnterForegroundNotification, 0);
  objc_msgSend(v1, "removeObserver:name:object:", v0, UIApplicationDidEnterBackgroundNotification, 0);

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for CollectionListViewController();
  return objc_msgSendSuper2(&v3, "dealloc");
}

id sub_100031F64(void *a1)
{
  char *v1;
  uint64_t v3;
  objc_class *v4;
  id v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  objc_super v15;
  _QWORD v16[2];

  v3 = OBJC_IVAR___CollectionListViewController_viewModel;
  v4 = (objc_class *)type metadata accessor for CollectionListViewModel(0);
  v5 = objc_allocWithZone(v4);
  v6 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v5, "init");
  v6[OBJC_IVAR___CollectionListViewController_canIncreaseViewCount] = 1;
  v7 = OBJC_IVAR___CollectionListViewController_searchResultsViewModel;
  *(_QWORD *)&v6[v7] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SearchResultsViewModel(0)), "init");
  *(_QWORD *)&v6[OBJC_IVAR___CollectionListViewController_searchResultsViewController] = 0;
  *(_QWORD *)&v6[OBJC_IVAR___CollectionListViewController_searchController] = 0;
  v6[OBJC_IVAR___CollectionListViewController_searchActive] = 0;
  *(_QWORD *)&v6[OBJC_IVAR___CollectionListViewController_cancellables] = &_swiftEmptySetSingleton;
  v8 = &v6[OBJC_IVAR___CollectionListViewController_searchResultSelectedHandler];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v9 = *(void **)&v1[v3];
  v10 = sub_1000041E8(&qword_1000B4510, type metadata accessor for CollectionListViewModel, (uint64_t)&unk_1000796A8);
  v16[0] = ObservedObject.init(wrappedValue:)(v9, v4, v10);
  v16[1] = v11;
  v12 = objc_allocWithZone((Class)sub_1000187A4(&qword_1000B4518));
  *(_QWORD *)&v6[OBJC_IVAR___CollectionListViewController_hostingController] = UIHostingController.init(rootView:)(v16);

  v15.receiver = v6;
  v15.super_class = (Class)type metadata accessor for CollectionListViewController();
  v13 = objc_msgSendSuper2(&v15, "initWithCoder:", a1);

  return v13;
}

id sub_1000322EC(uint64_t a1, uint64_t a2)
{
  return sub_100032310(a1, a2, (SEL *)&selRef_tipForIdentifier_);
}

id sub_1000322F8(uint64_t a1, uint64_t a2)
{
  return sub_100032310(a1, a2, (SEL *)&selRef_collectionForIdentifier_);
}

id sub_100032304(uint64_t a1, uint64_t a2)
{
  return sub_100032310(a1, a2, (SEL *)&selRef_userGuideWithIdentifier_);
}

id sub_100032310(uint64_t a1, uint64_t a2, SEL *a3)
{
  void *v4;
  NSString v5;
  id v6;

  type metadata accessor for TPSUIAppController(0);
  v4 = (void *)static TPSUIAppController.shared.getter();
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, *a3, v5);

  return v6;
}

void sub_100032388(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  _BYTE v10[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = *(id *)(Strong + OBJC_IVAR___CollectionListViewController_searchResultsViewModel);
    v7 = sub_10002FB3C(a1, v6);

    if (v7)
    {
      v8 = objc_msgSend(v5, "navigationController");
      if (v8)
      {
        v9 = v8;
        objc_msgSend(v8, "pushViewController:animated:", v7, 1);

      }
      v5 = (void *)v7;
    }

  }
}

void sub_10003244C(uint64_t a1)
{
  uint64_t v1;
  void *Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    objc_msgSend(Strong, "dismissSearch");

  }
}

uint64_t sub_1000324BC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v5 - 8);
  v29 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)v26 - v13;
  sub_100006578(0, (unint64_t *)&qword_1000B44A0, OS_dispatch_queue_ptr);
  v15 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)(v12, 0.15);
  v27 = *(void (**)(char *, uint64_t))(v9 + 8);
  v27(v12, v8);
  v16 = swift_allocObject(&unk_1000A3398, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16, v26[1]);
  v17 = swift_allocObject(&unk_1000A33C0, 32, 7);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = a1;
  aBlock[4] = sub_1000331BC;
  v32 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100003DA8;
  aBlock[3] = &unk_1000A33D8;
  v18 = _Block_copy(aBlock);
  v19 = v32;
  v20 = a1;
  v21 = swift_release(v19);
  static DispatchQoS.unspecified.getter(v21);
  aBlock[0] = _swiftEmptyArrayStorage;
  v22 = sub_1000041E8((unint64_t *)&qword_1000B44A8, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_1000187A4(&qword_1000B44B0);
  v24 = sub_1000086E8((unint64_t *)&qword_1000B44B8, &qword_1000B44B0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v2, v22);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v14, v7, v4, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v29);
  return ((uint64_t (*)(char *, uint64_t))v27)(v14, v8);
}

uint64_t sub_10003278C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t result;
  void *v18;
  id v19;
  uint64_t KeyPath;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];
  _BYTE v26[24];
  _BYTE v27[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v27, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = *(void **)(Strong + OBJC_IVAR___CollectionListViewController_searchController);
    v7 = v6;

    if (v6)
    {
      v8 = objc_msgSend(v7, "searchBar");

      dispatch thunk of TPSAppSearchQuery.searchTerm.getter();
      v10 = v9;
      v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v10);
      objc_msgSend(v8, "setText:", v11);

    }
  }
  swift_beginAccess(v3, v26, 0, 0);
  v12 = swift_unknownObjectWeakLoadStrong(v3);
  if (v12)
  {
    v13 = (void *)v12;
    v14 = *(void **)(v12 + OBJC_IVAR___CollectionListViewController_searchController);
    v15 = v14;

    if (v14)
    {
      v16 = objc_msgSend(v15, "searchBar");

      objc_msgSend(v16, "becomeFirstResponder");
    }
  }
  swift_beginAccess(v3, v25, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v18 = (void *)result;
    v19 = *(id *)(result + OBJC_IVAR___CollectionListViewController_searchResultsViewModel);

    KeyPath = swift_getKeyPath(&unk_100078F78);
    v21 = swift_getKeyPath(&unk_100078FA0);
    v22 = a2;
    static Published.subscript.getter(&v24, v19, KeyPath, v21);
    swift_release(KeyPath);
    swift_release(v21);
    v23 = v24;
    dispatch thunk of SearchResultsModel.searchQuery.setter(a2);

    return swift_release(v23);
  }
  return result;
}

void sub_100032A34(void *a1)
{
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = objc_msgSend(a1, "searchBar");
  v3 = objc_msgSend(v2, "text");

  if (v3)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v6 = v5;

    v7 = *(void **)(v1 + OBJC_IVAR___CollectionListViewController_searchResultsViewModel);
    v8 = objc_allocWithZone((Class)type metadata accessor for TPSAppSearchQuery(0));
    v9 = v7;
    v10 = TPSAppSearchQuery.init(searchTerm:origin:identifier:)(v4, v6, 0, 0, 0);
    KeyPath = swift_getKeyPath(&unk_100078F78);
    v12 = swift_getKeyPath(&unk_100078FA0);
    static Published.subscript.getter(&v14, v9, KeyPath, v12);
    swift_release(KeyPath);
    swift_release(v12);
    v13 = v14;
    dispatch thunk of SearchResultsModel.searchQuery.setter(v10);

    swift_release(v13);
  }
}

void sub_100032D9C(void *a1)
{
  char *v1;
  void *v2;
  id v4;
  char v5;
  id v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;

  v2 = v1;
  objc_msgSend(v1, "cancelAnalyticsIncreaseCountViewForCollectionsViewDelay");
  if (v1[OBJC_IVAR___CollectionListViewController_canIncreaseViewCount] == 1)
  {
    v4 = *(id *)&v1[OBJC_IVAR___CollectionListViewController_viewModel];
    v5 = sub_10000ABE8();

    if ((v5 & 1) != 0)
    {
      v6 = TPSAnalyticsContentStyleLandingPage;
      v7 = objc_msgSend(a1, "viewMethod");
      if (!v7)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0);
        v9 = v8;
        v7 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v9);
      }
      v10 = (void *)objc_opt_self(TPSAnalyticsEventContentViewed);
      v11 = objc_msgSend(v2, "traitCollection");
      v12 = objc_msgSend(v10, "analyticsViewModeForTraitCollection:", v11);

      v13 = objc_msgSend(v10, "eventWithContentID:collectionID:correlationID:clientConditionID:viewMethod:viewMode:", v6, v6, 0, 0, v7, v12);
      objc_msgSend(v13, "log");

    }
  }
}

void sub_100032F80()
{
  uint64_t v0;
  void *v1;
  uint64_t KeyPath;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v0 + OBJC_IVAR___CollectionListViewController_searchActive) = 0;
  v1 = *(void **)(v0 + OBJC_IVAR___CollectionListViewController_searchResultsViewModel);
  KeyPath = swift_getKeyPath(&unk_100078F78);
  v3 = swift_getKeyPath(&unk_100078FA0);
  v4 = v1;
  static Published.subscript.getter(&v7, v4, KeyPath, v3);
  swift_release(KeyPath);
  v5 = swift_release(v3);
  v6 = v7;
  dispatch thunk of SearchResultsModel.reset()(v5);

  swift_release(v6);
  sub_100003A74();
}

void sub_100033028()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  void *v4;
  uint64_t KeyPath;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = OBJC_IVAR___CollectionListViewController_searchActive;
  if (v0[OBJC_IVAR___CollectionListViewController_searchActive] == 1)
  {
    v2 = v0;
    v3 = OBJC_IVAR___CollectionListViewController_searchResultsViewModel;
    v4 = *(void **)&v0[OBJC_IVAR___CollectionListViewController_searchResultsViewModel];
    KeyPath = swift_getKeyPath(&unk_100078F78);
    v6 = swift_getKeyPath(&unk_100078FA0);
    v7 = v4;
    static Published.subscript.getter(&v17, v7, KeyPath, v6);
    swift_release(KeyPath);
    v8 = swift_release(v6);
    v9 = v17;
    v10 = dispatch thunk of SearchResultsModel.queryCount.getter(v8);

    swift_release(v9);
    if (!v10)
    {
      objc_msgSend(v2, "dismissViewControllerAnimated:completion:", 1, 0);
      v2[v1] = 0;
      v11 = *(void **)&v2[v3];
      v12 = swift_getKeyPath(&unk_100078F78);
      v13 = swift_getKeyPath(&unk_100078FA0);
      v14 = v11;
      static Published.subscript.getter(&v17, v14, v12, v13);
      swift_release(v12);
      v15 = swift_release(v13);
      v16 = v17;
      dispatch thunk of SearchResultsModel.reset()(v15);

      swift_release(v16);
      sub_100003A74();
    }
  }
}

uint64_t sub_10003316C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100033190()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000331BC()
{
  uint64_t v0;

  return sub_10003278C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000331C4(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

void sub_1000331D4(uint64_t a1)
{
  uint64_t v1;

  sub_100032388(a1, v1);
}

void sub_1000331DC()
{
  uint64_t v0;

  sub_10003244C(v0);
}

id sub_1000331E4()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t KeyPath;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id result;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SearchResultsViewModel(0)), "init");
  objc_msgSend(v1, "setSearchResultViewModel:", v2);

  v3 = objc_msgSend(v1, "searchResultViewModel");
  if (v3)
  {
    v4 = v3;
    KeyPath = swift_getKeyPath(&unk_100078FD8);
    v6 = swift_getKeyPath(&unk_100079000);
    LOBYTE(v49) = 1;
    static Published.subscript.setter(&v49, v4, KeyPath, v6);
  }
  v7 = objc_msgSend(v1, "searchResultViewModel");
  if (v7)
  {
    v8 = v7;
    v9 = swift_allocObject(&unk_1000A3418, 24, 7);
    swift_unknownObjectWeakInit(v9 + 16, v1);
    v10 = swift_getKeyPath(&unk_100079020);
    v11 = swift_getKeyPath(&unk_100079048);
    swift_retain(v9);
    static Published.subscript.getter(&v49, v8, v10, v11);
    swift_release(v10);
    swift_release(v11);
    v12 = v49;
    dispatch thunk of SearchResultsModel.searchResultEligibilityFilter.setter(sub_100033C44, v9);

    swift_release(v9);
    swift_release(v12);
  }
  v13 = objc_msgSend(v1, "searchResultViewModel");
  if (v13)
  {
    v14 = v13;
    v15 = swift_allocObject(&unk_1000A3418, 24, 7);
    swift_unknownObjectWeakInit(v15 + 16, v1);
    v16 = swift_getKeyPath(&unk_100079020);
    v17 = swift_getKeyPath(&unk_100079048);
    swift_retain(v15);
    static Published.subscript.getter(&v49, v14, v16, v17);
    swift_release(v16);
    swift_release(v17);
    v18 = v49;
    dispatch thunk of SearchResultsModel.searchResultCollectionResolver.setter(sub_100033C6C, v15);

    swift_release(v15);
    swift_release(v18);
  }
  v19 = objc_msgSend(v1, "searchResultViewModel");
  if (v19)
  {
    v20 = v19;
    v21 = swift_allocObject(&unk_1000A3418, 24, 7);
    swift_unknownObjectWeakInit(v21 + 16, v1);
    v22 = swift_getKeyPath(&unk_100079020);
    v23 = swift_getKeyPath(&unk_100079048);
    swift_retain(v21);
    static Published.subscript.getter(&v49, v20, v22, v23);
    swift_release(v22);
    swift_release(v23);
    v24 = v49;
    dispatch thunk of SearchResultsModel.searchResultUserGuideResolver.setter(sub_100033C8C, v21);

    swift_release(v21);
    swift_release(v24);
  }
  v25 = objc_msgSend(v1, "searchResultViewModel");
  if (v25)
  {
    v26 = v25;
    v27 = swift_allocObject(&unk_1000A3418, 24, 7);
    swift_unknownObjectWeakInit(v27 + 16, v1);
    v28 = swift_getKeyPath(&unk_100079020);
    v29 = swift_getKeyPath(&unk_100079048);
    swift_retain(v27);
    static Published.subscript.getter(&v49, v26, v28, v29);
    swift_release(v28);
    swift_release(v29);
    v30 = v49;
    dispatch thunk of SearchResultsModel.searchResultSelected.setter(sub_100033CAC, v27);

    swift_release(v27);
    swift_release(v30);
  }
  v31 = objc_msgSend(v1, "searchResultViewModel");
  if (v31)
  {
    v32 = v31;
    v33 = swift_allocObject(&unk_1000A3418, 24, 7);
    swift_unknownObjectWeakInit(v33 + 16, v1);
    v34 = swift_getKeyPath(&unk_100079020);
    v35 = swift_getKeyPath(&unk_100079048);
    swift_retain(v33);
    static Published.subscript.getter(&v49, v32, v34, v35);
    swift_release(v34);
    swift_release(v35);
    v36 = v49;
    dispatch thunk of SearchResultsModel.searchResultsSeeAllHandler.setter(sub_100033CB4, v33);

    swift_release(v33);
    swift_release(v36);
  }
  v37 = objc_msgSend(v1, "searchResultViewModel");
  if (v37)
  {
    v38 = v37;
    v39 = swift_allocObject(&unk_1000A3418, 24, 7);
    swift_unknownObjectWeakInit(v39 + 16, v1);
    v40 = swift_getKeyPath(&unk_100079020);
    v41 = swift_getKeyPath(&unk_100079048);
    swift_retain(v39);
    static Published.subscript.getter(&v49, v38, v40, v41);
    swift_release(v40);
    swift_release(v41);
    v42 = v49;
    dispatch thunk of SearchResultsModel.searchResultScrollHandler.setter(sub_100033CBC, v39);

    swift_release(v39);
    swift_release(v42);
  }
  result = objc_msgSend(v1, "searchResultViewModel");
  if (result)
  {
    v44 = result;
    v45 = swift_allocObject(&unk_1000A3418, 24, 7);
    swift_unknownObjectWeakInit(v45 + 16, v1);
    v46 = swift_getKeyPath(&unk_100079020);
    v47 = swift_getKeyPath(&unk_100079048);
    swift_retain(v45);
    static Published.subscript.getter(&v49, v44, v46, v47);
    swift_release(v46);
    swift_release(v47);
    v48 = v49;
    dispatch thunk of SearchResultsModel.searchResultsUpdated.setter(sub_100033CDC, v45);

    swift_release(v45);
    return (id)swift_release(v48);
  }
  return result;
}

void sub_100033790(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v5;
  void *Strong;
  void *v7;
  id v8;
  NSString v9;
  _BYTE v10[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v10, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = Strong;
    v8 = objc_msgSend(Strong, "appController");

    if (v8)
    {
      v9 = String._bridgeToObjectiveC()();
      objc_msgSend(v8, *a4, v9);

    }
    else
    {
      __break(1u);
    }
  }
}

id sub_100033858(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id result;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  id v16;
  _QWORD v18[3];
  uint64_t v19;
  _QWORD v20[4];
  _BYTE v21[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v21, 0, 0);
  result = (id)swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    objc_msgSend(result, "dismissPresentedSearchResultsViewController:", 1);
    objc_msgSend(v5, "dismissSearch");
    result = objc_msgSend(v5, "delegate");
    if (result)
    {
      v6 = result;
      if ((objc_msgSend(result, "respondsToSelector:", "tipsViewController:didSelectSearchResult:") & 1) != 0)
      {
        v7 = type metadata accessor for SearchResult.Item.Value(0);
        v20[3] = v7;
        v8 = sub_100033CFC(v20);
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v8, a1, v7);
        sub_100033D38((uint64_t)v20, (uint64_t)v18);
        v9 = v19;
        if (v19)
        {
          v10 = sub_100033DC0(v18, v19);
          v11 = *(_QWORD *)(v9 - 8);
          __chkstk_darwin(v10);
          v13 = (char *)&v18[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *))(v11 + 16))(v13);
          v14 = v5;
          v15 = _bridgeAnythingToObjectiveC<A>(_:)(v13, v9);
          (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v9);
          sub_100033DE4(v18);
        }
        else
        {
          v16 = v5;
          v15 = 0;
        }
        objc_msgSend(v6, "tipsViewController:didSelectSearchResult:", v5, v15);
        swift_unknownObjectRelease(v6);

        swift_unknownObjectRelease(v15);
        return (id)sub_100033D80((uint64_t)v20);
      }
      else
      {

        return (id)swift_unknownObjectRelease(v6);
      }
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void sub_100033A28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *Strong;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  char v12[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v12, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = objc_msgSend(Strong, "searchResultViewModel");
    if (v6)
    {
      v7 = v6;
      v8 = sub_10002FB3C(a1, v6);
      if (v8)
      {
        v9 = v8;
        v10 = objc_msgSend(v5, "searchResultsNavigationController");
        if (v10)
        {
          v11 = (uint64_t)v10;
          objc_msgSend(v10, "pushViewController:animated:", v9, 1);

          v5 = v7;
          v7 = (id)v9;
          v9 = v11;
        }

        v5 = v7;
        v7 = (id)v9;
      }

      v5 = v7;
    }

  }
}

void sub_100033B08(uint64_t a1, SEL *a2)
{
  uint64_t v3;
  void *Strong;
  void *v5;
  _BYTE v6[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    objc_msgSend(Strong, *a2);

  }
}

uint64_t sub_100033C20()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100033C44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100033790(a1, a2, v2, (SEL *)&selRef_tipForIdentifier_);
}

void sub_100033C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100033790(a1, a2, v2, (SEL *)&selRef_collectionForIdentifier_);
}

void sub_100033C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100033790(a1, a2, v2, (SEL *)&selRef_userGuideWithIdentifier_);
}

id sub_100033CAC(uint64_t a1)
{
  uint64_t v1;

  return sub_100033858(a1, v1);
}

void sub_100033CB4(uint64_t a1)
{
  uint64_t v1;

  sub_100033A28(a1, v1);
}

void sub_100033CBC()
{
  uint64_t v0;

  sub_100033B08(v0, (SEL *)&selRef_dismissSearch);
}

void sub_100033CDC()
{
  uint64_t v0;

  sub_100033B08(v0, (SEL *)&selRef_updateSearchResultsPresentationIfNeeded);
}

_QWORD *sub_100033CFC(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_100033D38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000187A4(&qword_1000B49D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100033D80(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000187A4(&qword_1000B49D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_100033DC0(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100033DE4(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_100033E04(void *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  int *v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  char v26;
  _QWORD v27[2];

  *a3 = swift_getKeyPath(&unk_100079070);
  v6 = sub_1000187A4(&qword_1000B41C0);
  swift_storeEnumTagMultiPayload(a3, v6, 0);
  v7 = (int *)type metadata accessor for FeaturedCollectionView(0);
  v8 = (char *)a3 + v7[6];
  v26 = 0;
  State.init(wrappedValue:)(v27, &v26, &type metadata for Bool);
  v9 = v27[1];
  *v8 = v27[0];
  *((_QWORD *)v8 + 1) = v9;
  v10 = (_QWORD *)((char *)a3 + v7[5]);
  v11 = type metadata accessor for CollectionListViewModel(0);
  v12 = sub_1000041E8(&qword_1000B4510, type metadata accessor for CollectionListViewModel, (uint64_t)&unk_1000796A8);
  v13 = a1;
  *v10 = ObservedObject.init(wrappedValue:)(v13, v11, v12);
  v10[1] = v14;
  *(_QWORD *)((char *)a3 + v7[8]) = a2;
  v15 = a2;
  v16 = objc_msgSend(v15, "identifier");
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  v20 = objc_msgSend(v15, "title");
  if (v20)
  {
    v21 = v20;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v24 = v23;

  }
  else
  {

    v22 = 0;
    v24 = 0xE000000000000000;
  }

  v25 = (_QWORD *)((char *)a3 + v7[7]);
  *v25 = v17;
  v25[1] = v19;
  v25[2] = v22;
  v25[3] = v24;
}

uint64_t sub_100033F94(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = type metadata accessor for FeaturedCollectionView(0);
  v3 = *(_QWORD *)(a1 + *(int *)(result + 20) + 8) + OBJC_IVAR___CollectionListViewModel_actionHandler;
  v4 = *(void (**)(uint64_t, uint64_t))v3;
  if (*(_QWORD *)v3)
  {
    v5 = *(_QWORD *)(v3 + 8);
    v6 = *(void **)(a1 + *(int *)(result + 32));
    swift_retain(v5);
    v7 = objc_msgSend(v6, "identifier");
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v4(v8, v10);
    sub_100005500((uint64_t)v4, v5);
    return swift_bridgeObjectRelease(v10);
  }
  return result;
}

void sub_100034060(uint64_t a1, char *a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(id *)(a3 + *(int *)(type metadata accessor for FeaturedCollectionView(0) + 20) + 8);
  v5 = sub_1000187A4(&qword_1000B4738);
  State.wrappedValue.getter(&v6, v5);
  sub_100010CE4(a2, v6);

}

_QWORD *sub_1000340EC(uint64_t a1, void *a2)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  type metadata accessor for FeaturedCollectionView(0);
  v3 = sub_1000187A4(&qword_1000B4738);
  result = State.wrappedValue.getter(&v5, v3);
  if (v5 == 1)
    return objc_msgSend(a2, "play");
  return result;
}

uint64_t *sub_100034170(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_1000187A4(&qword_1000B41C0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = a3[6];
    v16 = (uint64_t *)((char *)a1 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v19 = *v17;
    v18 = (void *)v17[1];
    *v16 = v19;
    v16[1] = v18;
    v20 = (char *)a1 + v15;
    v21 = (char *)a2 + v15;
    *v20 = *v21;
    v22 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v20 + 1) = v22;
    v23 = a3[7];
    v24 = a3[8];
    v25 = (uint64_t *)((char *)a1 + v23);
    v26 = (uint64_t *)((char *)a2 + v23);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v28 = v26[3];
    v25[2] = v26[2];
    v25[3] = v28;
    v29 = *(void **)((char *)a2 + v24);
    *(uint64_t *)((char *)a1 + v24) = (uint64_t)v29;
    v30 = v18;
    swift_retain(v22);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    v31 = v29;
  }
  return a1;
}

char *sub_1000342B4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;

  v6 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  v9 = a3[7];
  v10 = a3[8];
  v11 = &a1[v9];
  v12 = &a2[v9];
  v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];
  return a1;
}

char *sub_100034380(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B41C0);
    v6 = sub_1000187A4(&qword_1000B41C0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v12 = *(_QWORD *)v10;
  v11 = *((_QWORD *)v10 + 1);
  v13 = (void *)*((_QWORD *)v9 + 1);
  *(_QWORD *)v9 = v12;
  *((_QWORD *)v9 + 1) = v11;

  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  *v15 = *v16;
  v17 = *((_QWORD *)v15 + 1);
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  swift_release(v17);
  v18 = a3[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = *(_QWORD *)&a2[v18 + 8];
  v22 = *(_QWORD *)&a1[v18 + 8];
  *(_QWORD *)v19 = *(_QWORD *)&a2[v18];
  *((_QWORD *)v19 + 1) = v21;
  swift_bridgeObjectRelease(v22);
  v23 = *((_QWORD *)v20 + 3);
  v24 = *((_QWORD *)v19 + 3);
  *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
  *((_QWORD *)v19 + 3) = v23;
  swift_bridgeObjectRelease(v24);
  v25 = a3[8];
  v26 = *(void **)&a1[v25];
  *(_QWORD *)&a1[v25] = *(_QWORD *)&a2[v25];

  return a1;
}

uint64_t sub_1000344BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000344C8);
}

uint64_t sub_1000344C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1000187A4(&qword_1000B45E0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10003454C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100034558);
}

uint64_t sub_100034558(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1000187A4(&qword_1000B45E0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1000345E4()
{
  return sub_100019BF4(0);
}

void sub_1000345F0(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FeaturedCollectionView(0) - 8) + 80);
  sub_100034060(a1, a2, v2 + ((v5 + 16) & ~v5));
}

uint64_t sub_10003463C()
{
  return sub_100034658(&qword_1000B4708, &qword_1000B46C0, (void (*)(void))sub_1000346C4);
}

uint64_t sub_100034658(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000176F8(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000346C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4710;
  if (!qword_1000B4710)
  {
    v1 = sub_1000176F8(&qword_1000B46B8);
    sub_100034748();
    sub_1000086E8(&qword_1000B4720, &qword_1000B46F8, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4710);
  }
  return result;
}

unint64_t sub_100034748()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000B4718;
  if (!qword_1000B4718)
  {
    v1 = sub_1000176F8(&qword_1000B46B0);
    v2[0] = sub_1000176F8(&qword_1000B46E8);
    v2[1] = sub_1000086E8(&qword_1000B46F0, &qword_1000B46E8, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.appEntityIdentifier(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4718);
  }
  return result;
}

uint64_t sub_100034800()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;

  v1 = (int *)type metadata accessor for FeaturedCollectionView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  swift_release(*(_QWORD *)((char *)v6 + v1[6] + 8));
  v10 = (char *)v6 + v1[7];
  swift_bridgeObjectRelease(*((_QWORD *)v10 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v10 + 3));

  return swift_deallocObject(v0, v9 + 8, v3 | 7);
}

_QWORD *sub_100034908()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for FeaturedCollectionView(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1000340EC(v0 + v2, *(void **)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10003495C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FeaturedCollectionView(0) - 8) + 80);
  return sub_100033F94(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_100034988()
{
  _QWORD v1[2];

  v1[0] = sub_1000176F8(&qword_1000B46D8);
  v1[1] = sub_1000086E8(&qword_1000B4730, &qword_1000B46D8, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
}

id sub_1000349EC(void *a1)
{
  objc_class *v1;
  objc_class *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  unint64_t v11;
  id v12;
  Class isa;
  id v14;
  id v15;
  id v16;
  id result;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSArray v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSString v33;
  uint64_t v34;
  uint64_t v35;

  v2 = v1;
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(objc_allocWithZone(v1), "init");
  v11 = sub_100031C64();
  v12 = v10;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v12, "setTips:", isa);

  if (!a1)
  {
LABEL_9:
    objc_msgSend(v12, "setAllowBookmarks:", 0);
    objc_msgSend(v12, "setAllowPaging:", 0);
    objc_msgSend(v12, "setShouldDisplayNavigationTitle:", 0);
    objc_msgSend(v12, "setIsSharedVariant:", 1);
    objc_msgSend(v12, "setCurrentTip:", a1);
    v35 = (uint64_t)v12;
    v25 = objc_allocWithZone((Class)UIBarButtonItem);
    v26 = _bridgeAnythingToObjectiveC<A>(_:)(&v35, v2);
    v27 = objc_msgSend(v25, "initWithBarButtonSystemItem:target:action:", 0, v26, "doneTapped:");
    swift_unknownObjectRelease(v26);
    v28 = objc_msgSend(v12, "navigationItem");
    objc_msgSend(v28, "setRightBarButtonItem:", v27);

    v29 = objc_msgSend(v12, "navigationItem");
    v30 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x800000010008C0A0);
    static Locale.current.getter(v30);
    String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, 0, v6, "Title of Shared Tip modal popover", 33, 2);
    v32 = v31;
    v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v32);
    objc_msgSend(v29, "setTitle:", v33);

    return v12;
  }
  v14 = a1;
  v15 = v12;
  v16 = v14;
  result = objc_msgSend(v15, "tips");
  if (result)
  {
    v18 = result;
    v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(result, v11);

    v35 = v19;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v21 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v20 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v21 >= v20 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
    v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v16);
    specialized Array._endMutation()(v22);
    v23 = v35;
    if (v35)
    {
      v24.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v23);
    }
    else
    {
      v24.super.isa = 0;
    }
    objc_msgSend(v15, "setTips:", v24.super.isa);

    goto LABEL_9;
  }
  __break(1u);
  return result;
}

id sub_100035040(char *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  char *v7;
  objc_class *v8;
  objc_super v10;

  v7 = &a1[OBJC_IVAR____TtC4Tips26TPSSharedTipViewController_onDismissed];
  v8 = (objc_class *)type metadata accessor for TPSSharedTipViewController();
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  v10.receiver = a1;
  v10.super_class = v8;
  return objc_msgSendSuper2(&v10, *a4, a3);
}

id sub_10003509C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TPSSharedTipViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TPSSharedTipViewController()
{
  return objc_opt_self(_TtC4Tips26TPSSharedTipViewController);
}

BOOL sub_100035100(_BOOL8 a1)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  id v14;
  NSString v15;
  id v16;

  v2 = v1;
  v4 = objc_msgSend(v1, "assetFileInfoManager");
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v2, "assets");
    if (v6 && (v7 = v6, v8 = objc_msgSend(v6, "videoId"), v7, v8)
      || (v9 = objc_msgSend(v2, "assets")) != 0
      && (v10 = v9, v8 = objc_msgSend(v9, "posterId"), v10, v8))
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v12 = v11;

      v13 = String._bridgeToObjectiveC()();
      v14 = objc_msgSend(v5, "fileInfoIdentifierWithMainIdentifier:userInterfaceStyle:", v13, a1);

      if (v14)
      {

        swift_bridgeObjectRelease(v12);
        v5 = v14;
      }
      else
      {
        v15 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v12);
        v16 = objc_msgSend(v5, "fileInfoIdentifierWithMainIdentifier:userInterfaceStyle:", v15, !a1);

        if (v16)
        {

          a1 = !a1;
        }
      }
    }

  }
  return a1;
}

id sub_100035370()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TPSSplitViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000353D4()
{
  return sub_100035670((uint64_t)&unk_1000794F8, (uint64_t)&unk_100079520);
}

uint64_t sub_100035410()
{
  return sub_100035D30((uint64_t)&unk_100079300, (uint64_t)&unk_100079328);
}

uint64_t sub_1000354B4()
{
  void *v0;
  uint64_t KeyPath;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v16[4];

  sub_10000FA94();
  KeyPath = swift_getKeyPath(&unk_100079300);
  v2 = swift_getKeyPath(&unk_100079328);
  static Published.subscript.getter(v16, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  v3 = v16[0];
  if (v16[0])
  {
    v4 = objc_msgSend(v16[0], "identifier");

    v3 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v6 = v5;

  }
  else
  {
    v6 = (void *)0xE000000000000000;
  }
  v7 = swift_getKeyPath(&unk_100079300);
  v8 = swift_getKeyPath(&unk_100079328);
  static Published.subscript.getter(v16, v0, v7, v8);
  swift_release(v7);
  swift_release(v8);
  v9 = v16[0];
  if (!v16[0])
    goto LABEL_8;
  v10 = objc_msgSend(v16[0], "title");

  if (!v10)
  {
    v9 = 0;
LABEL_8:
    v12 = (void *)0xE000000000000000;
    goto LABEL_9;
  }
  v9 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v12 = v11;

LABEL_9:
  v13 = swift_getKeyPath(&unk_100079348);
  v14 = swift_getKeyPath(&unk_100079370);
  v16[0] = v3;
  v16[1] = v6;
  v16[2] = v9;
  v16[3] = v12;
  return static Published.subscript.setter(v16, v0, v13, v14);
}

uint64_t sub_10003565C()
{
  return sub_100035670((uint64_t)&unk_1000794B0, (uint64_t)&unk_1000794D8);
}

uint64_t sub_100035670(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_100035790()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100079390);
  v2 = swift_getKeyPath(&unk_1000793B8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

void sub_10003586C(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t KeyPath;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  KeyPath = swift_getKeyPath(&unk_100079390);
  v6 = swift_getKeyPath(&unk_1000793B8);
  v21 = a1;
  v22 = a2;
  v7 = v2;
  static Published.subscript.setter(&v21, v7, KeyPath, v6);
  v8 = swift_getKeyPath(&unk_100079390);
  v9 = swift_getKeyPath(&unk_1000793B8);
  static Published.subscript.getter(&v21, v7, v8, v9);
  swift_release(v8);
  swift_release(v9);
  v10 = v22;
  if (v22)
  {
    v11 = (void *)sub_100036580(v21, v22);
    swift_bridgeObjectRelease(v10);
    v12 = swift_getKeyPath(&unk_1000793D8);
    v13 = swift_getKeyPath(&unk_100079400);
    v21 = (uint64_t)v11;
    v14 = v11;
    v15 = (char *)v7;
    static Published.subscript.setter(&v21, v15, v12, v13);
    v16 = swift_getKeyPath(&unk_1000793D8);
    v17 = swift_getKeyPath(&unk_100079400);
    static Published.subscript.getter(&v21, v15, v16, v17);
    swift_release(v16);
    swift_release(v17);
    v18 = v21;
    if (v21)
    {
      v19 = *(void (**)(uint64_t))&v15[OBJC_IVAR___TPSChecklistViewModel_actionHandler];
      if (v19)
      {
        v20 = *(_QWORD *)&v15[OBJC_IVAR___TPSChecklistViewModel_actionHandler + 8];
        swift_retain(v20);
        v19(v18);
        sub_100005500((uint64_t)v19, v20);
      }

      v14 = (id)v18;
    }

  }
}

double sub_100035A24@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  __int128 v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100079390);
  v5 = swift_getKeyPath(&unk_1000793B8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

void sub_100035AA0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain(v2);
  sub_10003586C(v1, v2);
}

id sub_100035AF0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath;
  uint64_t v7;
  id v8;
  id v10;

  KeyPath = swift_getKeyPath(a3);
  v7 = swift_getKeyPath(a4);
  v8 = a1;
  static Published.subscript.getter(&v10, v8, KeyPath, v7);

  swift_release(KeyPath);
  swift_release(v7);
  return v10;
}

uint64_t sub_100035B68()
{
  return sub_100035D30((uint64_t)&unk_1000793D8, (uint64_t)&unk_100079400);
}

uint64_t sub_100035BC4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100035E58(a1, (uint64_t)&unk_1000793D8, (uint64_t)&unk_100079400, a2);
}

void sub_100035BD8(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  sub_1000379FC(v1);

}

uint64_t sub_100035C28()
{
  return sub_100035D30((uint64_t)&unk_100079420, (uint64_t)&unk_100079448);
}

Class sub_100035C64(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath;
  uint64_t v7;
  id v8;
  uint64_t v9;
  Class isa;
  uint64_t v12;

  KeyPath = swift_getKeyPath(a3);
  v7 = swift_getKeyPath(a4);
  v8 = a1;
  static Published.subscript.getter(&v12, v8, KeyPath, v7);

  swift_release(KeyPath);
  swift_release(v7);
  v9 = v12;
  if (!v12)
    return (Class)0;
  sub_100006578(0, (unint64_t *)&qword_1000B42F0, TPSTip_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v9);
  return isa;
}

uint64_t sub_100035D1C()
{
  return sub_100035D30((uint64_t)&unk_100079468, (uint64_t)&unk_100079490);
}

uint64_t sub_100035D30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_100035DAC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v13;

  v7 = a3;
  if (a3)
  {
    v9 = sub_100006578(0, (unint64_t *)&qword_1000B42F0, TPSTip_ptr);
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v9);
  }
  KeyPath = swift_getKeyPath(a4);
  v11 = swift_getKeyPath(a5);
  v13 = v7;
  return static Published.subscript.setter(&v13, a1, KeyPath, v11);
}

uint64_t sub_100035E44@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100035E58(a1, (uint64_t)&unk_100079468, (uint64_t)&unk_100079490, a2);
}

uint64_t sub_100035E58@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(KeyPath);
  result = swift_release(v8);
  *a4 = v10;
  return result;
}

uint64_t sub_100035ED0(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100079468);
  v5 = swift_getKeyPath(&unk_100079490);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_100035F44()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100079348);
  v2 = swift_getKeyPath(&unk_100079370);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100036220()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_100079420);
  v2 = swift_getKeyPath(&unk_100079448);
  static Published.subscript.getter(&v7, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  v3 = v7;
  swift_bridgeObjectRelease(v7);
  if (!v3)
  {
    v4 = swift_getKeyPath(&unk_100079468);
    v5 = swift_getKeyPath(&unk_100079490);
    static Published.subscript.getter(&v7, v0, v4, v5);
    swift_release(v4);
    swift_release(v5);
    result = v7;
    if (!v7)
      return result;
    swift_bridgeObjectRelease(v7);
  }
  return 1;
}

uint64_t sub_1000363C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  char v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;

  if ((unint64_t)a2 >> 62)
    goto LABEL_20;
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v18))
  {
    v5 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      v6 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_5:
      v7 = v6;
      sub_100006578(0, (unint64_t *)&qword_1000B42F0, TPSTip_ptr);
      v8 = static NSObject.== infix(_:_:)(v7, a1);

      if ((v8 & 1) != 0)
      {
LABEL_6:
        swift_bridgeObjectRelease(a2);
        return 1;
      }
      if (v4 == 1)
        goto LABEL_18;
      if (v5)
        break;
      v5 = 5;
      while (1)
      {
        v15 = v5 - 3;
        if (__OFADD__(v5 - 4, 1))
          break;
        v16 = *(id *)(a2 + 8 * v5);
        v17 = static NSObject.== infix(_:_:)(v16, a1);

        if ((v17 & 1) != 0)
          goto LABEL_6;
        ++v5;
        if (v15 == v4)
          goto LABEL_18;
      }
      __break(1u);
    }
    v10 = 1;
    while (1)
    {
      v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a2);
      v12 = v10 + 1;
      if (__OFADD__(v10, 1))
        break;
      v13 = v11;
      v14 = static NSObject.== infix(_:_:)(v11, a1);
      swift_unknownObjectRelease(v13);
      if ((v14 & 1) != 0)
        goto LABEL_6;
      ++v10;
      if (v12 == v4)
        goto LABEL_18;
    }
    __break(1u);
LABEL_20:
    if (a2 < 0)
      v18 = a2;
    else
      v18 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
LABEL_18:
  swift_bridgeObjectRelease(a2);
  return 0;
}

uint64_t sub_100036580(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  id v17;
  uint64_t v18;
  uint64_t v19;

  v3 = a2;
  if (!a2)
    return v3;
  v4 = v2;
  KeyPath = swift_getKeyPath(&unk_100079420);
  v7 = swift_getKeyPath(&unk_100079448);
  static Published.subscript.getter(&v19, v4, KeyPath, v7);
  swift_release(KeyPath);
  swift_release(v7);
  v8 = v19;
  if (v19)
  {
    swift_bridgeObjectRetain(v3);
    v9 = (uint64_t)sub_100037844(v8, a1, v3);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v3);
    if ((unint64_t)v9 >> 62)
    {
      if (v9 < 0)
        v12 = v9;
      else
        v12 = v9 & 0xFFFFFFFFFFFFFF8;
      if (_CocoaArrayWrapper.endIndex.getter(v12))
        goto LABEL_5;
    }
    else if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_5:
      if ((v9 & 0xC000000000000001) != 0)
      {
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v9);
        goto LABEL_8;
      }
      if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v10 = *(id *)(v9 + 32);
LABEL_8:
        v3 = (uint64_t)v10;
        v11 = v9;
LABEL_22:
        swift_bridgeObjectRelease(v11);
        return v3;
      }
      __break(1u);
      goto LABEL_25;
    }
    swift_bridgeObjectRelease(v9);
  }
  v13 = swift_getKeyPath(&unk_100079468);
  v14 = swift_getKeyPath(&unk_100079490);
  static Published.subscript.getter(&v19, v4, v13, v14);
  swift_release(v13);
  swift_release(v14);
  v15 = v19;
  if (!v19)
    return 0;
  swift_bridgeObjectRetain(v3);
  a1 = (uint64_t)sub_100037844(v15, a1, v3);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v3);
  if ((unint64_t)a1 >> 62)
  {
LABEL_25:
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    result = _CocoaArrayWrapper.endIndex.getter(v18);
    if (!result)
      goto LABEL_29;
    goto LABEL_18;
  }
  result = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!result)
  {
LABEL_29:
    swift_bridgeObjectRelease(a1);
    return 0;
  }
LABEL_18:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    goto LABEL_21;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v17 = *(id *)(a1 + 32);
LABEL_21:
    v3 = (uint64_t)v17;
    v11 = a1;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_100036840()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  KeyPath = swift_getKeyPath(&unk_100079420);
  v2 = swift_getKeyPath(&unk_100079448);
  static Published.subscript.getter(&v12, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  v3 = v12;
  if (v12)
  {
    if ((unint64_t)v12 >> 62)
      goto LABEL_7;
    if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      while ((v3 & 0xC000000000000001) == 0)
      {
        if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_17;
        __break(1u);
LABEL_7:
        if (v3 >= 0)
          v4 = v3 & 0xFFFFFFFFFFFFFF8;
        else
          v4 = v3;
        swift_bridgeObjectRetain(v3);
        v5 = _CocoaArrayWrapper.endIndex.getter(v4);
        swift_bridgeObjectRelease(v3);
        if (!v5)
          goto LABEL_11;
      }
LABEL_22:
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
      goto LABEL_18;
    }
LABEL_11:
    swift_bridgeObjectRelease(v3);
  }
  v6 = swift_getKeyPath(&unk_100079468);
  v7 = swift_getKeyPath(&unk_100079490);
  static Published.subscript.getter(&v12, v0, v6, v7);
  swift_release(v6);
  result = swift_release(v7);
  v3 = v12;
  if (!v12)
    return 0;
  if ((unint64_t)v12 >> 62)
  {
    if (v12 >= 0)
      v11 = v12 & 0xFFFFFFFFFFFFFF8;
    else
      v11 = v12;
    swift_bridgeObjectRetain(v12);
    v9 = _CocoaArrayWrapper.endIndex.getter(v11);
    result = swift_bridgeObjectRelease(v3);
    if (!v9)
      goto LABEL_19;
  }
  else
  {
    v9 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v9)
    {
LABEL_19:
      swift_bridgeObjectRelease(v3);
      return v9;
    }
  }
  if ((v3 & 0xC000000000000001) != 0)
    goto LABEL_22;
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_17:
    v10 = *(id *)(v3 + 32);
LABEL_18:
    v9 = (uint64_t)v10;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

void sub_100036A0C()
{
  void *v0;
  uint64_t KeyPath;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char *v23;
  void (*v24)(void *);
  uint64_t v25;
  void *v26;
  uint64_t v27;

  KeyPath = swift_getKeyPath(&unk_100079390);
  v2 = swift_getKeyPath(&unk_1000793B8);
  v26 = 0;
  v27 = 0;
  v3 = v0;
  static Published.subscript.setter(&v26, v3, KeyPath, v2);
  v4 = swift_getKeyPath(&unk_100079390);
  v5 = swift_getKeyPath(&unk_1000793B8);
  static Published.subscript.getter(&v26, v3, v4, v5);
  swift_release(v4);
  swift_release(v5);
  v6 = v27;
  if (v27)
  {
    v7 = (void *)sub_100036580((uint64_t)v26, v27);
    swift_bridgeObjectRelease(v6);
    v8 = swift_getKeyPath(&unk_1000793D8);
    v9 = swift_getKeyPath(&unk_100079400);
    v26 = v7;
    v10 = v7;
    v11 = (char *)v3;
    static Published.subscript.setter(&v26, v11, v8, v9);
    v12 = swift_getKeyPath(&unk_1000793D8);
    v13 = swift_getKeyPath(&unk_100079400);
    static Published.subscript.getter(&v26, v11, v12, v13);
    swift_release(v12);
    swift_release(v13);
    v14 = (uint64_t)v26;
    if (v26)
    {
      v15 = *(void (**)(uint64_t))&v11[OBJC_IVAR___TPSChecklistViewModel_actionHandler];
      if (v15)
      {
        v16 = *(_QWORD *)&v11[OBJC_IVAR___TPSChecklistViewModel_actionHandler + 8];
        swift_retain(v16);
        v15(v14);
        sub_100005500((uint64_t)v15, v16);
      }

      v10 = (id)v14;
    }

  }
  v17 = swift_getKeyPath(&unk_1000793D8);
  v18 = swift_getKeyPath(&unk_100079400);
  v26 = 0;
  v19 = (char *)v3;
  static Published.subscript.setter(&v26, v19, v17, v18);
  v20 = swift_getKeyPath(&unk_1000793D8);
  v21 = swift_getKeyPath(&unk_100079400);
  static Published.subscript.getter(&v26, v19, v20, v21);
  swift_release(v20);
  swift_release(v21);
  v22 = v26;
  if (v26)
  {
    v23 = &v19[OBJC_IVAR___TPSChecklistViewModel_actionHandler];
    v24 = *(void (**)(void *))v23;
    if (*(_QWORD *)v23)
    {
      v25 = *((_QWORD *)v23 + 1);
      swift_retain(v25);
      v24(v22);
      sub_100005500((uint64_t)v24, v25);
    }

  }
}

id sub_100036CB4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ChecklistViewModel(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100036CE8()
{
  return type metadata accessor for ChecklistViewModel(0);
}

uint64_t sub_100036CF0@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for ChecklistViewModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_100036D2C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v4 = sub_1000187A4(&qword_1000B4698);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, "checklistContent");
  if (v7 && (v8 = v7, v9 = objc_msgSend(v7, "assets"), v8, v9))
  {
    v10 = objc_msgSend(v9, "baseURL");

    if (v10)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v10);

      v11 = type metadata accessor for URL(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 0, 1, v11);
    }
    else
    {
      v14 = type metadata accessor for URL(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v6, 1, 1, v14);
    }
    return sub_100037CEC((uint64_t)v6, a2);
  }
  else
  {
    v12 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a2, 1, 1, v12);
  }
}

uint64_t sub_100037024(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];

  v2 = v1;
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v31[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v31[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = objc_msgSend(a1, "checklistContent");
  if (v10
    && (v11 = v10, v12 = objc_msgSend(v10, "subtitle"), v11, v12))
  {
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);

    return v13;
  }
  else
  {
    v15 = objc_msgSend(v2, "titleFor:", a1);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    if (objc_msgSend(v2, "isCompletedFor:", a1))
    {
      v19 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001CLL, 0x800000010008C410);
      static Locale.current.getter(v19);
      v20 = "Subtitle for checklist item that has been set up";
      v21 = v9;
      v22 = v6;
      v23 = 48;
    }
    else
    {
      v24 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001CLL, 0x800000010008C3B0);
      static Locale.current.getter(v24);
      v20 = "Subtitle for checklist item that has not been set up";
      v21 = v9;
      v22 = v6;
      v23 = 52;
    }
    v25 = String.init(localized:table:bundle:locale:comment:)(v21, 0, 0, 0, v22, v20, v23, 2);
    v27 = v26;
    v28 = sub_1000187A4(&qword_1000B48F8);
    v29 = swift_allocObject(v28, 72, 7);
    *(_OWORD *)(v29 + 16) = xmmword_1000791F0;
    *(_QWORD *)(v29 + 56) = &type metadata for String;
    *(_QWORD *)(v29 + 64) = sub_100037CA8();
    *(_QWORD *)(v29 + 32) = v16;
    *(_QWORD *)(v29 + 40) = v18;
    v30 = String.init(format:_:)(v25, v27, v29);
    swift_bridgeObjectRelease(v27);
    return v30;
  }
}

uint64_t sub_100037454@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unsigned int *v12;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v3 = objc_msgSend(a1, "checklistContent");
  if (!v3)
    goto LABEL_17;
  v4 = v3;
  v5 = objc_msgSend(v3, "assets");

  if (!v5)
    goto LABEL_17;
  v6 = objc_msgSend(v5, "symbolSize");

  if (!v6)
    goto LABEL_17;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  if (v7 == 0x656772616CLL && v9 == 0xE500000000000000)
  {
    v11 = 0xE500000000000000;
    goto LABEL_11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656772616CLL, 0xE500000000000000, v7, v9, 0) & 1) == 0)
  {
    if (v7 == 0x6C6C616D73 && v9 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease(0xE500000000000000);
    }
    else
    {
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C6C616D73, 0xE500000000000000, v7, v9, 0);
      swift_bridgeObjectRelease(v9);
      if ((v14 & 1) == 0)
      {
LABEL_17:
        v12 = (unsigned int *)&enum case for Image.Scale.medium(_:);
        goto LABEL_18;
      }
    }
    v12 = (unsigned int *)&enum case for Image.Scale.small(_:);
    goto LABEL_18;
  }
  v11 = v9;
LABEL_11:
  swift_bridgeObjectRelease(v11);
  v12 = (unsigned int *)&enum case for Image.Scale.large(_:);
LABEL_18:
  v15 = *v12;
  v16 = type metadata accessor for Image.Scale(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(a2, v15, v16);
}

double sub_100037630@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100079348);
  v5 = swift_getKeyPath(&unk_100079370);
  static Published.subscript.getter(&v9, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = *(double *)&v9;
  v7 = v10;
  v8 = v11;
  *(_OWORD *)a2 = v9;
  *(_QWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v8;
  return result;
}

uint64_t sub_1000376B8(uint64_t *a1, void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t KeyPath;
  uint64_t v8;
  _QWORD v10[4];

  v3 = *a1;
  v2 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  v6 = *a2;
  KeyPath = swift_getKeyPath(&unk_100079348);
  v8 = swift_getKeyPath(&unk_100079370);
  v10[0] = v3;
  v10[1] = v2;
  v10[2] = v5;
  v10[3] = v4;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v4);
  return static Published.subscript.setter(v10, v6, KeyPath, v8);
}

void (*sub_100037750(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1000377D0(v6, a2, a3);
  return sub_1000377A4;
}

void sub_1000377A4(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_1000377D0(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_10003783C;
  }
  __break(1u);
  return result;
}

void sub_10003783C(id *a1)
{

}

_QWORD *sub_100037844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  if ((unint64_t)a1 >> 62)
    goto LABEL_22;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      v6 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
LABEL_9:
        v8 = v7;
        v9 = v6 + 1;
        if (__OFADD__(v6, 1))
          goto LABEL_21;
        v10 = v5;
        v11 = objc_msgSend(v7, "identifier");
        v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        v14 = v13;

        if (v12 == a2 && v14 == a3)
        {
          v17 = swift_bridgeObjectRelease(a3);
LABEL_17:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
          v18 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
          v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v8);
          specialized ContiguousArray._endMutation()(v19);
          goto LABEL_5;
        }
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, a2, a3, 0);
        v17 = swift_bridgeObjectRelease(v14);
        if ((v16 & 1) != 0)
          goto LABEL_17;

LABEL_5:
        ++v6;
        v5 = v10;
        if (v9 == v10)
          return _swiftEmptyArrayStorage;
      }
      if (v6 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      if (a1 < 0)
        v21 = a1;
      else
        v21 = a1 & 0xFFFFFFFFFFFFFF8;
      v5 = _CocoaArrayWrapper.endIndex.getter(v21);
      if (!v5)
        return _swiftEmptyArrayStorage;
    }
    v7 = *(id *)(a1 + 8 * v6 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

void sub_1000379FC(void *a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  void (*v11)(void *);
  uint64_t v12;
  void *v13;

  KeyPath = swift_getKeyPath(&unk_1000793D8);
  v4 = swift_getKeyPath(&unk_100079400);
  v13 = a1;
  v5 = a1;
  v6 = v1;
  static Published.subscript.setter(&v13, v6, KeyPath, v4);
  v7 = swift_getKeyPath(&unk_1000793D8);
  v8 = swift_getKeyPath(&unk_100079400);
  static Published.subscript.getter(&v13, v6, v7, v8);
  swift_release(v7);
  swift_release(v8);
  v9 = v13;
  if (v13)
  {
    v10 = &v6[OBJC_IVAR___TPSChecklistViewModel_actionHandler];
    v11 = *(void (**)(void *))&v6[OBJC_IVAR___TPSChecklistViewModel_actionHandler];
    if (v11)
    {
      v12 = *((_QWORD *)v10 + 1);
      swift_retain(v12);
      v11(v9);
      sub_100005500((uint64_t)v11, v12);
    }

  }
}

_QWORD *sub_100037AF8(void *a1)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v2 = objc_msgSend(a1, "checklistContent");
  if (v2 && (v3 = v2, v4 = objc_msgSend(v2, "bodyContent"), v3, v4))
  {
    v5 = sub_1000187A4(&qword_1000B48E8);
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

    v7 = sub_10004F9C4(v6);
    swift_bridgeObjectRelease(v6);
    if (!v7)
    {
      v8 = sub_1000187A4(&qword_1000B48F0);
      v7 = (_QWORD *)swift_allocObject(v8, 40, 7);
      *((_OWORD *)v7 + 1) = xmmword_1000791F0;
      v7[4] = sub_1000520F4((uint64_t)_swiftEmptyArrayStorage);
    }
    return v7;
  }
  else
  {
    v10 = objc_msgSend(a1, "checklistContent");
    v11 = v10;
    if (v10)
    {
      v12 = objc_msgSend(v10, "bodyText");

      if (v12)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        v14 = v13;

        v11 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v14);
      }
      else
      {
        v11 = 0;
      }
    }
    v15 = objc_msgSend((id)objc_opt_self(TPSConstellationContentUtilities), "textContentWithText:", v11);

    v16 = sub_1000187A4(&qword_1000B48E0);
    v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

    v18 = sub_10004F884(v17);
    swift_bridgeObjectRelease(v17);
    return v18;
  }
}

unint64_t sub_100037CA8()
{
  unint64_t result;

  result = qword_1000B4900;
  if (!qword_1000B4900)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000B4900);
  }
  return result;
}

uint64_t sub_100037CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000187A4(&qword_1000B4698);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100037D38(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain(v2);
  sub_10003586C(v1, v2);
}

uint64_t sub_100037D74@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100035E58(a1, (uint64_t)&unk_1000793D8, (uint64_t)&unk_100079400, a2);
}

void sub_100037D98(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  sub_1000379FC(v1);

}

uint64_t sub_100037DDC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100035E58(a1, (uint64_t)&unk_100079468, (uint64_t)&unk_100079490, a2);
}

unint64_t sub_100037E0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4910;
  if (!qword_1000B4910)
  {
    v1 = sub_1000176F8(&qword_1000B4908);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000B4910);
  }
  return result;
}

uint64_t sub_100037E60()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100037E84(uint64_t a1)
{
  uint64_t v1;

  return sub_10004F870(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100037E8C(void *a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v11;
  void *v12;
  id v13;
  id v14;

  v2 = objc_msgSend(a1, "checklistContent");
  if (v2
    && (v3 = v2, v4 = objc_msgSend(v2, "assets"), v3, v4)
    && (v5 = objc_msgSend(v4, "symbolColor"), v4, v5))
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v8 = v7;

    sub_100006578(0, &qword_1000B44F8, UIColor_ptr);
    v9 = static UIColor.colorForSystemColorString(_:)(v6, v8);
    swift_bridgeObjectRelease(v8);
    return Color.init(_:)(v9);
  }
  else
  {
    v11 = objc_msgSend(a1, "checklistContent");
    if (v11
      && (v12 = v11, v13 = objc_msgSend(v11, "assets"), v12, v13)
      && (v14 = objc_msgSend(v13, "symbolId"), v13, v14))
    {

      return static Color.black.getter();
    }
    else
    {
      return static Color.yellow.getter();
    }
  }
}

void sub_100037FEC(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, int a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  id v27;
  NSString *v28;
  NSString *v29;
  id v30;
  uint64_t v31;
  NSString *v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  void (*v43)(_BYTE *, _QWORD);
  id v44;
  void (*v45)(_BYTE *, _QWORD);
  uint64_t v46;
  char *v47;
  char *v48;
  NSString v49;
  id v50;
  uint64_t v51;
  id v52;
  id v53[2];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  int v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  _BYTE v68[32];
  char v69[96];

  v53[1] = a5;
  v53[0] = a4;
  v57 = a2;
  v56 = a1;
  v65 = type metadata accessor for UIButton.Configuration.CornerStyle(0);
  v64 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v63 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for UIButton.Configuration.Size(0);
  v61 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v60 = (char *)v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for UIButton.Configuration.TitleAlignment(0);
  v54 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v13 = (char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000187A4(&qword_1000B4948);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = a6;
  if ((a7 & 1) != 0)
    static UIButton.Configuration.filled()(v15);
  else
    static UIButton.Configuration.plain()(v15);
  v18 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v18, "buttonFontSize");
  v19 = objc_msgSend(v18, "systemFontOfSize:weight:");
  v20 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleBody);
  v66 = v19;
  v21 = objc_msgSend(v20, "scaledFontForFont:", v19);

  v59 = a7;
  if ((a7 & 1) != 0)
    v22 = a3;
  else
    v22 = objc_msgSend(a3, "colorWithAlphaComponent:", 0.3);
  v23 = v22;
  v24 = sub_1000187A4(&qword_1000B4950);
  inited = swift_initStackObject(v24, v69);
  *(_OWORD *)(inited + 16) = xmmword_100079540;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  v26 = sub_100006578(0, (unint64_t *)&qword_1000B4958, UIFont_ptr);
  *(_QWORD *)(inited + 40) = v21;
  *(_QWORD *)(inited + 64) = v26;
  *(_QWORD *)(inited + 72) = NSParagraphStyleAttributeName;
  v27 = objc_allocWithZone((Class)NSMutableParagraphStyle);
  v28 = NSFontAttributeName;
  v58 = v21;
  v29 = NSParagraphStyleAttributeName;
  v30 = objc_msgSend(v27, "initWithAlignment:", 1);
  v31 = sub_100006578(0, (unint64_t *)&unk_1000B4960, NSMutableParagraphStyle_ptr);
  *(_QWORD *)(inited + 80) = v30;
  *(_QWORD *)(inited + 104) = v31;
  *(_QWORD *)(inited + 112) = NSForegroundColorAttributeName;
  *(_QWORD *)(inited + 144) = sub_100006578(0, &qword_1000B44F8, UIColor_ptr);
  *(_QWORD *)(inited + 120) = v23;
  v32 = NSForegroundColorAttributeName;
  v33 = v23;
  v34 = sub_100004804(inited);
  v35 = swift_allocObject(&unk_1000A3678, 24, 7);
  *(_QWORD *)(v35 + 16) = v34;
  UIConfigurationTextAttributesTransformer.init(_:)(sub_100039194, v35);
  v36 = type metadata accessor for UIConfigurationTextAttributesTransformer(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v17, 0, 1, v36);
  UIButton.Configuration.titleTextAttributesTransformer.setter(v17);
  v37 = v57;
  swift_bridgeObjectRetain(v57);
  UIButton.Configuration.title.setter(v56, v37);
  (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v13, enum case for UIButton.Configuration.TitleAlignment.center(_:), v55);
  UIButton.Configuration.titleAlignment.setter(v13);
  v38 = v33;
  UIButton.Configuration.baseForegroundColor.setter(v33);
  if ((v59 & 1) != 0)
  {
    v39 = v53[0];
    v40 = v53[0];
    UIButton.Configuration.baseBackgroundColor.setter(v39);
  }
  else
  {
    v41 = (void *)objc_opt_self(UIColor);
    v42 = objc_msgSend(v41, "systemGray6Color");
    v43 = (void (*)(_BYTE *, _QWORD))UIButton.Configuration.background.modify(v68);
    UIBackgroundConfiguration.strokeColor.setter(v42);
    v43(v68, 0);
    v44 = objc_msgSend(v41, "clearColor");
    v45 = (void (*)(_BYTE *, _QWORD))UIButton.Configuration.background.modify(v68);
    UIBackgroundConfiguration.backgroundColor.setter(v44);
    v45(v68, 0);
  }
  v46 = v67;
  v47 = v60;
  (*(void (**)(char *, _QWORD, uint64_t))(v61 + 104))(v60, enum case for UIButton.Configuration.Size.medium(_:), v62);
  UIButton.Configuration.buttonSize.setter(v47);
  v48 = v63;
  (*(void (**)(char *, _QWORD, uint64_t))(v64 + 104))(v63, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v65);
  UIButton.Configuration.cornerStyle.setter(v48);
  if (v46)
  {
    swift_bridgeObjectRetain(v46);
    v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v46);
    v50 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v49);

    if (v50)
    {
      v51 = UIButton.Configuration.imagePlacement.setter(2);
      UIButton.Configuration.imagePadding.setter(v51, 2.0);
      v52 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithScale:", 1);
      UIButton.Configuration.image.setter(objc_msgSend(v50, "imageByApplyingSymbolConfiguration:", v52));

    }
  }

}

void sub_100038B50(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t inited;
  NSString *v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  void (*v41)(_BYTE *, _QWORD);
  uint64_t v42;
  NSString v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[32];
  _BYTE v54[88];

  v52 = a1;
  v1 = type metadata accessor for UIButton.Configuration.CornerStyle(0);
  v48 = *(_QWORD *)(v1 - 8);
  v49 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for UIButton.Configuration.Size(0);
  v4 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000187A4(&qword_1000B4948);
  __chkstk_darwin(v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UIButton.Configuration.TitleAlignment(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Locale(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for UIButton.Configuration(0);
  v50 = *(_QWORD *)(v20 - 8);
  v51 = v20;
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIButton.Configuration.plain()(v21);
  v24 = String.LocalizationValue.init(stringLiteral:)(0x425F59414C504552, 0xED00004E4F545455);
  static Locale.current.getter(v24);
  v25 = String.init(localized:table:bundle:locale:comment:)(v19, 0, 0, 0, v16, "Replay button title for tip video", 33, 2);
  UIButton.Configuration.title.setter(v25, v26);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for UIButton.Configuration.TitleAlignment.center(_:), v10);
  UIButton.Configuration.titleAlignment.setter(v13);
  v27 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v27, "buttonFontSize");
  v28 = objc_msgSend(v27, "systemFontOfSize:weight:");
  v29 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleBody);
  v30 = objc_msgSend(v29, "scaledFontForFont:", v28);

  v31 = sub_1000187A4(&qword_1000B4950);
  inited = swift_initStackObject(v31, v54);
  *(_OWORD *)(inited + 16) = xmmword_1000791F0;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  *(_QWORD *)(inited + 64) = sub_100006578(0, (unint64_t *)&qword_1000B4958, UIFont_ptr);
  *(_QWORD *)(inited + 40) = v30;
  v33 = NSFontAttributeName;
  v34 = v30;
  v35 = sub_100004804(inited);
  v36 = swift_allocObject(&unk_1000A3650, 24, 7);
  *(_QWORD *)(v36 + 16) = v35;
  UIConfigurationTextAttributesTransformer.init(_:)(sub_10003918C, v36);
  v37 = type metadata accessor for UIConfigurationTextAttributesTransformer(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v9, 0, 1, v37);
  UIButton.Configuration.titleTextAttributesTransformer.setter(v9);
  v38 = objc_msgSend((id)objc_opt_self(UIColor), "systemBlueColor");
  UIButton.Configuration.baseForegroundColor.setter(v38);
  v39 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", 8);
  v40 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v39);
  v41 = (void (*)(_BYTE *, _QWORD))UIButton.Configuration.background.modify(v53);
  UIBackgroundConfiguration.customView.setter(v40);
  v41(v53, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for UIButton.Configuration.Size.medium(_:), v47);
  UIButton.Configuration.buttonSize.setter(v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v3, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v49);
  UIButton.Configuration.cornerStyle.setter(v3);
  v42 = UIButton.Configuration.imagePlacement.setter(2);
  UIButton.Configuration.imagePadding.setter(v42, 5.0);
  v43 = String._bridgeToObjectiveC()();
  v44 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v43);

  if (v44)
  {
    v45 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithScale:", 1);
    UIButton.Configuration.image.setter(objc_msgSend(v44, "imageByApplyingSymbolConfiguration:", v45));

    (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v52, v23, v51);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v52, v23, v51);

  }
}

uint64_t sub_100039168()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003918C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10006C0BC(a1, *(_QWORD *)(v2 + 16), a2);
}

void sub_10003919C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t Strong;
  void *v12;
  uint64_t v13;
  _BYTE v15[24];

  v4 = type metadata accessor for SearchResult.Item.Value(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (void **)&v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = a2 + 16;
  (*(void (**)(void **, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v9 = (*(uint64_t (**)(void **, uint64_t))(v5 + 88))(v7, v4);
  if (v9 == enum case for SearchResult.Item.Value.topic(_:))
  {
    (*(void (**)(void **, uint64_t))(v5 + 96))(v7, v4);
    v10 = *v7;
    swift_beginAccess(v8, v15, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v8);
    if (Strong)
    {
      v12 = (void *)Strong;
      sub_100039458();
LABEL_7:

      goto LABEL_8;
    }
    goto LABEL_8;
  }
  if (v9 == enum case for SearchResult.Item.Value.tip(_:))
  {
    (*(void (**)(void **, uint64_t))(v5 + 96))(v7, v4);
    v10 = *v7;
    swift_beginAccess(v8, v15, 0, 0);
    v13 = swift_unknownObjectWeakLoadStrong(v8);
    if (v13)
    {
      v12 = (void *)v13;
      sub_1000392FC(v10);
      goto LABEL_7;
    }
LABEL_8:

    return;
  }
  (*(void (**)(void **, uint64_t))(v5 + 8))(v7, v4);
}

void sub_1000392FC(void *a1)
{
  void *v1;
  id v3;
  NSString v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;

  v3 = objc_msgSend(v1, "appController");
  v9 = objc_msgSend(objc_allocWithZone((Class)TPSTipsByCollectionViewController), "initWithAppController:", v3);

  if (v9)
  {
    objc_msgSend(v9, "setDelegate:", v1);
    objc_msgSend(v9, "setShouldDisplayNavigationTitle:", 1);
    v4 = objc_msgSend(a1, "identifier");
    if (!v4)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v6 = v5;
      v4 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v6);
    }
    objc_msgSend(v9, "updateWithCollectionID:tipID:", 0, v4);

    v7 = objc_msgSend(v1, "collectionListViewController");
    v8 = objc_msgSend(v7, "navigationController");

    if (v8)
    {
      objc_msgSend(v8, "pushViewController:animated:", v9, 1);

    }
  }
}

void sub_100039458()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;

  v1 = v0;
  dispatch thunk of UserGuideTopic.productId.getter();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  v5 = swift_bridgeObjectRelease(v3);
  v6 = dispatch thunk of UserGuideTopic.topicId.getter(v5);
  if (!v7)
  {
    v9 = 0;
    dispatch thunk of UserGuideTopic.version.getter(v6);
    if (v11)
      goto LABEL_3;
LABEL_5:
    v13 = 0;
    goto LABEL_6;
  }
  v8 = v7;
  v9 = String._bridgeToObjectiveC()();
  v10 = swift_bridgeObjectRelease(v8);
  dispatch thunk of UserGuideTopic.version.getter(v10);
  if (!v11)
    goto LABEL_5;
LABEL_3:
  v12 = v11;
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
LABEL_6:
  objc_msgSend(v1, "displayUserGuideWithIdentifier:topicId:version:platformIndependent:prefersLandingPage:", v4, v9, v13, 1, 1);

}

uint64_t TPSMainViewController.tipsViewController(_:didSelectSearchResult:)(uint64_t a1, uint64_t a2)
{
  return sub_1000395B8(a2);
}

uint64_t sub_1000395B8(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void **v13;
  int v14;
  int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSString v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSString v29;
  void *v31;
  NSString v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void **, uint64_t);
  _BYTE v36[24];
  uint64_t v37;

  v2 = v1;
  v4 = sub_1000187A4((uint64_t *)&unk_1000B49E0);
  __chkstk_darwin(v4);
  v6 = &v36[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for SearchResult.Item.Value(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (void **)&v36[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = (void **)&v36[-v12];
  sub_100033D38(a1, (uint64_t)v36);
  if (!v37)
  {
    sub_100011DE0((uint64_t)v36, &qword_1000B49D0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    return sub_100011DE0((uint64_t)v6, (uint64_t *)&unk_1000B49E0);
  }
  v14 = swift_dynamicCast(v6, v36, (char *)&type metadata for Any + 8, v7, 6);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, v14 ^ 1u, 1, v7);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    return sub_100011DE0((uint64_t)v6, (uint64_t *)&unk_1000B49E0);
  (*(void (**)(void **, _BYTE *, uint64_t))(v8 + 32))(v13, v6, v7);
  (*(void (**)(void **, void **, uint64_t))(v8 + 16))(v11, v13, v7);
  v15 = (*(uint64_t (**)(void **, uint64_t))(v8 + 88))(v11, v7);
  if (v15 == enum case for SearchResult.Item.Value.topic(_:))
  {
    v16 = (*(uint64_t (**)(void **, uint64_t))(v8 + 96))(v11, v7);
    v17 = *v11;
    dispatch thunk of UserGuideTopic.productId.getter(v16);
    v19 = v18;
    v20 = String._bridgeToObjectiveC()();
    v21 = swift_bridgeObjectRelease(v19);
    v22 = dispatch thunk of UserGuideTopic.topicId.getter(v21);
    if (v23)
    {
      v24 = v23;
      v25 = String._bridgeToObjectiveC()();
      v26 = swift_bridgeObjectRelease(v24);
      dispatch thunk of UserGuideTopic.version.getter(v26);
      if (v27)
      {
LABEL_6:
        v28 = v27;
        v29 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v28);
LABEL_16:
        objc_msgSend(v2, "displayUserGuideWithIdentifier:topicId:version:platformIndependent:prefersLandingPage:", v20, v25, v29, 1, 1);

        return (*(uint64_t (**)(void **, uint64_t))(v8 + 8))(v13, v7);
      }
    }
    else
    {
      v25 = 0;
      dispatch thunk of UserGuideTopic.version.getter(v22);
      if (v27)
        goto LABEL_6;
    }
    v29 = 0;
    goto LABEL_16;
  }
  if (v15 != enum case for SearchResult.Item.Value.tip(_:))
  {
    v35 = *(uint64_t (**)(void **, uint64_t))(v8 + 8);
    v35(v13, v7);
    return v35(v11, v7);
  }
  (*(void (**)(void **, uint64_t))(v8 + 96))(v11, v7);
  v31 = *v11;
  v32 = objc_msgSend(v31, "identifier");
  if (!v32)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v34 = v33;
    v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v34);
  }
  objc_msgSend(v2, "showTipWithID:launchType:", v32, TPSAnalyticsLaunchTypeSearchResult);

  return (*(uint64_t (**)(void **, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_1000398E4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100039908(uint64_t a1)
{
  uint64_t v1;

  sub_10003919C(a1, v1);
}

uint64_t sub_100039910@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100039AC4(a1, (uint64_t)&unk_100079AF0, (uint64_t)&unk_100079B18, a2);
}

uint64_t sub_100039924(char *a1, void **a2)
{
  char v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100079AF0);
  v5 = swift_getKeyPath(&unk_100079B18);
  v7 = v2;
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_100039990@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100035E58(a1, (uint64_t)&unk_100079820, (uint64_t)&unk_100079848, a2);
}

uint64_t sub_1000399A4(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100079820);
  v5 = swift_getKeyPath(&unk_100079848);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_100039A2C()
{
  return sub_100035670((uint64_t)&unk_100079AA8, (uint64_t)&unk_100079AD0);
}

uint64_t sub_100039A64@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100039AC4(a1, (uint64_t)&unk_100079AA8, (uint64_t)&unk_100079AD0, a2);
}

uint64_t sub_100039A78(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_100039B60(a1, a2, a3, a4, (uint64_t)&unk_100079AA8, (uint64_t)&unk_100079AD0, (uint64_t)&unk_100079AF0, (uint64_t)&unk_100079B18);
}

uint64_t sub_100039A9C()
{
  return sub_100035670((uint64_t)&unk_100079A18, (uint64_t)&unk_100079A40);
}

uint64_t sub_100039AB0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100039AC4(a1, (uint64_t)&unk_100079A18, (uint64_t)&unk_100079A40, a2);
}

uint64_t sub_100039AC4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(KeyPath);
  result = swift_release(v8);
  *a4 = v10;
  return result;
}

uint64_t sub_100039B3C(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_100039B60(a1, a2, a3, a4, (uint64_t)&unk_100079A18, (uint64_t)&unk_100079A40, (uint64_t)&unk_100079A60, (uint64_t)&unk_100079A88);
}

uint64_t sub_100039B60(char *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v12;
  void *v13;
  uint64_t KeyPath;
  uint64_t v15;
  char v17;

  v12 = *a1;
  v13 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v15 = swift_getKeyPath(a6);
  v17 = v12;
  static Published.subscript.setter(&v17, v13, KeyPath, v15);
  return sub_100013734(a5, a6, a7, a8);
}

uint64_t sub_100039C00()
{
  return sub_10003A0A8((uint64_t)&unk_1000799D0, (uint64_t)&unk_1000799F8);
}

uint64_t sub_100039D14(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = v2;
  KeyPath = swift_getKeyPath(&unk_1000799D0);
  v7 = swift_getKeyPath(&unk_1000799F8);
  static Published.subscript.getter(&v20, v3, KeyPath, v7);
  swift_release(KeyPath);
  result = swift_release(v7);
  v9 = v21;
  if (v21)
  {
    v10 = v20;
    v11 = *(void (**)(uint64_t, uint64_t))&v3[OBJC_IVAR___CollectionListViewModel_actionHandler];
    if (v11)
    {
      v12 = *(_QWORD *)&v3[OBJC_IVAR___CollectionListViewModel_actionHandler + 8];
      swift_retain(v12);
      v11(v10, v9);
      sub_100005500((uint64_t)v11, v12);
    }
    if (a2 && (v10 == a1 && v9 == a2 || (_stringCompareWithSmolCheck(_:_:expecting:)(v10, v9, a1, a2, 0) & 1) != 0))
      return swift_bridgeObjectRelease(v9);
    v13 = swift_getKeyPath(&unk_100079988);
    v14 = swift_getKeyPath(&unk_1000799B0);
    static Published.subscript.getter(&v20, v3, v13, v14);
    swift_release(v13);
    swift_release(v14);
    v15 = v21;
    if (!v21)
      goto LABEL_14;
    if (v20 == v10 && v21 == v9)
    {
      swift_bridgeObjectRelease(v9);
      return swift_bridgeObjectRelease(v15);
    }
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, v10, v9, 0);
    swift_bridgeObjectRelease(v15);
    if ((v16 & 1) != 0)
    {
      return swift_bridgeObjectRelease(v9);
    }
    else
    {
LABEL_14:
      v17 = swift_getKeyPath(&unk_100079988);
      v18 = swift_getKeyPath(&unk_1000799B0);
      v20 = v10;
      v21 = v9;
      v19 = static Published.subscript.setter(&v20, v3, v17, v18);
      return sub_10003A1B0(v19);
    }
  }
  return result;
}

uint64_t sub_100039EFC(uint64_t *a1, void **a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000799D0);
  v6 = swift_getKeyPath(&unk_1000799F8);
  swift_bridgeObjectRetain(v2);
  static Published.subscript.getter(&v12, v4, KeyPath, v6);
  swift_release(KeyPath);
  swift_release(v6);
  v7 = v12;
  v8 = v13;
  v9 = swift_getKeyPath(&unk_1000799D0);
  v10 = swift_getKeyPath(&unk_1000799F8);
  v12 = v3;
  v13 = v2;
  static Published.subscript.setter(&v12, v4, v9, v10);
  sub_100039D14(v7, v8);
  return swift_bridgeObjectRelease(v8);
}

id sub_100039FF4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath;
  uint64_t v7;
  id v8;
  uint64_t v9;
  NSString v10;
  uint64_t v12;
  uint64_t v13;

  KeyPath = swift_getKeyPath(a3);
  v7 = swift_getKeyPath(a4);
  v8 = a1;
  static Published.subscript.getter(&v12, v8, KeyPath, v7);

  swift_release(KeyPath);
  swift_release(v7);
  v9 = v13;
  if (!v13)
    return 0;
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  return v10;
}

uint64_t sub_10003A094()
{
  return sub_10003A0A8((uint64_t)&unk_100079988, (uint64_t)&unk_1000799B0);
}

uint64_t sub_10003A0A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_10003A1B0()
{
  void *v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  KeyPath = swift_getKeyPath(&unk_100079988);
  v2 = swift_getKeyPath(&unk_1000799B0);
  static Published.subscript.getter(&v12, v0, KeyPath, v2);
  swift_release(KeyPath);
  result = swift_release(v2);
  v4 = v13;
  if (v13)
  {
    v5 = v12;
    v6 = swift_getKeyPath(&unk_1000799D0);
    v7 = swift_getKeyPath(&unk_1000799F8);
    static Published.subscript.getter(&v12, v0, v6, v7);
    swift_release(v6);
    swift_release(v7);
    v8 = v12;
    v9 = v13;
    v10 = swift_getKeyPath(&unk_1000799D0);
    v11 = swift_getKeyPath(&unk_1000799F8);
    v12 = v5;
    v13 = v4;
    static Published.subscript.setter(&v12, v0, v10, v11);
    sub_100039D14(v8, v9);
    return swift_bridgeObjectRelease(v9);
  }
  return result;
}

double sub_10003A2D4@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_10003A2E8(a1, (uint64_t)&unk_100079988, (uint64_t)&unk_1000799B0, a2);
}

double sub_10003A2E8@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _OWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  double result;
  __int128 v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(KeyPath);
  swift_release(v8);
  result = *(double *)&v10;
  *a4 = v10;
  return result;
}

uint64_t sub_10003A360(uint64_t *a1, void **a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_100079988);
  v6 = swift_getKeyPath(&unk_1000799B0);
  v8[0] = v3;
  v8[1] = v2;
  swift_bridgeObjectRetain(v2);
  static Published.subscript.setter(v8, v4, KeyPath, v6);
  return sub_10003A1B0();
}

uint64_t sub_10003A3FC()
{
  return sub_100035D30((uint64_t)&unk_100079868, (uint64_t)&unk_100079890);
}

uint64_t sub_10003A410@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100035E58(a1, (uint64_t)&unk_100079868, (uint64_t)&unk_100079890, a2);
}

uint64_t sub_10003A424(void **a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10003A774(a1, a2, a3, a4, (uint64_t)&unk_100079868, (uint64_t)&unk_100079890);
}

uint64_t sub_10003A44C()
{
  return sub_100035D30((uint64_t)&unk_1000796E0, (uint64_t)&unk_100079708);
}

void sub_10003A460(void **a1, void **a2)
{
  void *v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  void *v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000796E0);
  v5 = swift_getKeyPath(&unk_100079708);
  v7 = v2;
  v6 = v2;
  static Published.subscript.setter(&v7, v3, KeyPath, v5);
  sub_1000071A4();
}

uint64_t sub_10003A558()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100079728);
  v2 = swift_getKeyPath(&unk_100079750);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10003A638@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100079728);
  v5 = swift_getKeyPath(&unk_100079750);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10003A6B4(void **a1, void **a2)
{
  void *v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  void *v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100079728);
  v5 = swift_getKeyPath(&unk_100079750);
  v8 = v2;
  v6 = v2;
  return static Published.subscript.setter(&v8, v3, KeyPath, v5);
}

uint64_t sub_10003A738()
{
  return sub_100035D30((uint64_t)&unk_1000797C8, (uint64_t)&unk_1000797F0);
}

uint64_t sub_10003A74C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100035E58(a1, (uint64_t)&unk_1000797C8, (uint64_t)&unk_1000797F0, a2);
}

uint64_t sub_10003A760(void **a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10003A774(a1, a2, a3, a4, (uint64_t)&unk_1000797C8, (uint64_t)&unk_1000797F0);
}

uint64_t sub_10003A774(void **a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  void *v8;
  uint64_t KeyPath;
  uint64_t v10;
  id v11;
  void *v13;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v13 = v7;
  v11 = v7;
  return static Published.subscript.setter(&v13, v8, KeyPath, v10);
}

uint64_t sub_10003A7E0()
{
  return sub_100035D30((uint64_t)&unk_1000798F8, (uint64_t)&unk_100079920);
}

uint64_t sub_10003A818()
{
  return sub_100035D30((uint64_t)&unk_1000798B0, (uint64_t)&unk_1000798D8);
}

uint64_t sub_10003A82C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100035E58(a1, (uint64_t)&unk_1000798B0, (uint64_t)&unk_1000798D8, a2);
}

uint64_t sub_10003A840(uint64_t *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10003A930(a1, a2, a3, a4, (uint64_t)&unk_1000798B0, (uint64_t)&unk_1000798D8);
}

uint64_t sub_10003A8F4()
{
  return sub_100035D30((uint64_t)&unk_100079940, (uint64_t)&unk_100079968);
}

uint64_t sub_10003A908@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100035E58(a1, (uint64_t)&unk_100079940, (uint64_t)&unk_100079968, a2);
}

uint64_t sub_10003A91C(uint64_t *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10003A930(a1, a2, a3, a4, (uint64_t)&unk_100079940, (uint64_t)&unk_100079968);
}

uint64_t sub_10003A930(uint64_t *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  void *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v12;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v12 = v7;
  swift_bridgeObjectRetain(v7);
  return static Published.subscript.setter(&v12, v8, KeyPath, v10);
}

uint64_t sub_10003A9D0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  char v11;
  id v13;

  KeyPath = swift_getKeyPath(&unk_1000796E0);
  v2 = swift_getKeyPath(&unk_100079708);
  static Published.subscript.getter(&v13, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  v3 = v13;

  if (v3)
  {
    v4 = swift_getKeyPath(&unk_100079868);
    v5 = swift_getKeyPath(&unk_100079890);
    static Published.subscript.getter(&v13, v0, v4, v5);
    swift_release(v4);
    swift_release(v5);
    v6 = v13;
    v7 = swift_getKeyPath(&unk_1000796E0);
    v8 = swift_getKeyPath(&unk_100079708);
    static Published.subscript.getter(&v13, v0, v7, v8);
    swift_release(v7);
    swift_release(v8);
    v9 = v13;
    if (v6)
    {
      if (!v13)
      {
        v11 = 0;
        goto LABEL_10;
      }
      sub_100006578(0, (unint64_t *)&qword_1000B61F0, TPSCollection_ptr);
      v10 = v6;
      v11 = static NSObject.== infix(_:_:)(v10, v9);

    }
    else
    {
      if (!v13)
      {
        v11 = 1;
        return v11 & 1;
      }
      v11 = 0;
    }
    v6 = v9;
LABEL_10:

    return v11 & 1;
  }
  v11 = 0;
  return v11 & 1;
}

uint64_t sub_10003AB64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v6 = v5;
  swift_retain(v2);
  v3(v4, v6);
  swift_release(v2);
  return swift_bridgeObjectRelease(v6);
}

id sub_10003ABF0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD v10[5];
  uint64_t v11;

  v5 = (_QWORD *)(a1 + *a3);
  if (!*v5)
    return 0;
  v6 = v5[1];
  v10[4] = *v5;
  v11 = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = a4;
  v10[3] = a5;
  v7 = _Block_copy(v10);
  v8 = v11;
  swift_retain(v6);
  swift_release(v8);
  return v7;
}

void sub_10003AC78(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

void sub_10003ACF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  _BYTE v8[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    v7 = *(void (**)(uint64_t))(Strong + OBJC_IVAR___CollectionListViewModel_checklistHandler);
    v6 = *(_QWORD *)(Strong + OBJC_IVAR___CollectionListViewModel_checklistHandler + 8);
    sub_1000331C4((uint64_t)v7, v6);

    if (v7)
    {
      v7(a1);
      sub_100005500((uint64_t)v7, v6);
    }
  }
}

id sub_10003AE08()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CollectionListViewModel(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_10003AE6C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t KeyPath;
  uint64_t v9;
  void *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  int v13;
  uint64_t v14;
  id v15;
  _QWORD v18[3];

  v1 = type metadata accessor for ColorScheme(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v18[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v18[-1] - v6;
  KeyPath = swift_getKeyPath(&unk_100079868);
  v9 = swift_getKeyPath(&unk_100079890);
  static Published.subscript.getter(v18, v0, KeyPath, v9);
  swift_release(KeyPath);
  swift_release(v9);
  v10 = (void *)v18[0];
  if (!v18[0])
    return 0;
  v11 = &v0[OBJC_IVAR___CollectionListViewModel_colorScheme];
  swift_beginAccess(&v0[OBJC_IVAR___CollectionListViewModel_colorScheme], v18, 0, 0);
  v12 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v12(v7, v11, v1);
  v12(v5, v7, v1);
  v13 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v5, v1);
  v14 = 0;
  if (v13 != enum case for ColorScheme.light(_:))
  {
    if (v13 == enum case for ColorScheme.dark(_:))
    {
      v14 = 1;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      v14 = 0;
    }
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
  v15 = objc_msgSend(v0, "assetsInfoFor:userInterfaceStyle:", v10, v14);

  return v15;
}

id sub_10003B024(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  KeyPath = swift_getKeyPath(&unk_1000796E0);
  v5 = swift_getKeyPath(&unk_100079708);
  static Published.subscript.getter(&v18, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  v6 = (void *)v18;
  if (!v18)
    return objc_msgSend(a1, "count");
  sub_100006578(0, (unint64_t *)&qword_1000B61F0, TPSCollection_ptr);
  v7 = a1;
  v8 = static NSObject.== infix(_:_:)(v7, v6);

  if ((v8 & 1) == 0)
    return objc_msgSend(a1, "count");
  v9 = swift_getKeyPath(&unk_100079728);
  v10 = swift_getKeyPath(&unk_100079750);
  static Published.subscript.getter(&v18, v2, v9, v10);
  swift_release(v9);
  swift_release(v10);
  v11 = (void *)v18;
  v12 = swift_getKeyPath(&unk_100079820);
  v13 = swift_getKeyPath(&unk_100079848);
  static Published.subscript.getter(&v18, v11, v12, v13);
  swift_release(v12);
  swift_release(v13);
  v14 = v18;
  if (v18)
  {
    if ((unint64_t)v18 >> 62)
    {
      if (v18 >= 0)
        v17 = v18 & 0xFFFFFFFFFFFFFF8;
      else
        v17 = v18;
      swift_bridgeObjectRetain(v18);
      v15 = _CocoaArrayWrapper.endIndex.getter(v17);

      swift_bridgeObjectRelease_n(v14, 2);
    }
    else
    {
      v15 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);

      swift_bridgeObjectRelease(v14);
    }
  }
  else
  {

    return 0;
  }
  return (id)v15;
}

uint64_t sub_10003B240@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100035E58(a1, (uint64_t)&unk_1000796E0, (uint64_t)&unk_100079708, a2);
}

uint64_t sub_10003B278@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100035E58(a1, (uint64_t)&unk_1000797C8, (uint64_t)&unk_1000797F0, a2);
}

uint64_t sub_10003B29C(void **a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10003A774(a1, a2, a3, a4, (uint64_t)&unk_1000797C8, (uint64_t)&unk_1000797F0);
}

uint64_t sub_10003B2C0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100035E58(a1, (uint64_t)&unk_100079820, (uint64_t)&unk_100079848, a2);
}

uint64_t sub_10003B2E8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100035E58(a1, (uint64_t)&unk_100079868, (uint64_t)&unk_100079890, a2);
}

uint64_t sub_10003B30C(void **a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10003A774(a1, a2, a3, a4, (uint64_t)&unk_100079868, (uint64_t)&unk_100079890);
}

uint64_t sub_10003B330@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100035E58(a1, (uint64_t)&unk_1000798B0, (uint64_t)&unk_1000798D8, a2);
}

uint64_t sub_10003B354(uint64_t *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10003A930(a1, a2, a3, a4, (uint64_t)&unk_1000798B0, (uint64_t)&unk_1000798D8);
}

uint64_t sub_10003B378@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100035E58(a1, (uint64_t)&unk_1000798F8, (uint64_t)&unk_100079920, a2);
}

uint64_t sub_10003B39C(uint64_t *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10003A930(a1, a2, a3, a4, (uint64_t)&unk_1000798F8, (uint64_t)&unk_100079920);
}

uint64_t sub_10003B3C0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100035E58(a1, (uint64_t)&unk_100079940, (uint64_t)&unk_100079968, a2);
}

uint64_t sub_10003B3E4(uint64_t *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10003A930(a1, a2, a3, a4, (uint64_t)&unk_100079940, (uint64_t)&unk_100079968);
}

double sub_10003B408@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_10003A2E8(a1, (uint64_t)&unk_100079988, (uint64_t)&unk_1000799B0, a2);
}

double sub_10003B430@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_10003A2E8(a1, (uint64_t)&unk_1000799D0, (uint64_t)&unk_1000799F8, a2);
}

uint64_t sub_10003B458@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100039AC4(a1, (uint64_t)&unk_100079A18, (uint64_t)&unk_100079A40, a2);
}

uint64_t sub_10003B47C(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_100039B60(a1, a2, a3, a4, (uint64_t)&unk_100079A18, (uint64_t)&unk_100079A40, (uint64_t)&unk_100079A60, (uint64_t)&unk_100079A88);
}

uint64_t sub_10003B4B8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100039AC4(a1, (uint64_t)&unk_100079AA8, (uint64_t)&unk_100079AD0, a2);
}

uint64_t sub_10003B4DC(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_100039B60(a1, a2, a3, a4, (uint64_t)&unk_100079AA8, (uint64_t)&unk_100079AD0, (uint64_t)&unk_100079AF0, (uint64_t)&unk_100079B18);
}

uint64_t sub_10003B510@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100039AC4(a1, (uint64_t)&unk_100079AF0, (uint64_t)&unk_100079B18, a2);
}

uint64_t sub_10003B538()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10003B55C(uint64_t a1)
{
  uint64_t v1;

  sub_10003ACF8(a1, v1);
}

uint64_t sub_10003B564()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003B588()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

void sub_10003B598()
{
  uint64_t v0;
  uint64_t v1;
  NSString v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = String._bridgeToObjectiveC()();
  (*(void (**)(uint64_t, NSString))(v1 + 16))(v1, v2);

}

uint64_t assignWithCopy for TipListView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(void **)(a2 + 16);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = v4;

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_retain(v8);
  swift_release(v7);
  return a1;
}

__n128 initializeWithTake for TipListView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TipListView(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for TipListView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TipListView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_10003B798(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008E5C8, 1);
}

uint64_t sub_10003B7A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (**a3)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v15;
  __int128 v16;

  v6 = type metadata accessor for GeometryProxy(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = *(_OWORD *)(a2 + 8);
  v15 = *(_OWORD *)(a2 + 24);
  v16 = v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v10 + 56) & ~v10;
  v12 = swift_allocObject(&unk_1000A3920, v11 + v8, v10 | 7);
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v12 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v12 + 32) = v13;
  *(_QWORD *)(v12 + 48) = *(_QWORD *)(a2 + 32);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *a3 = sub_10003F8DC;
  a3[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v12;
  sub_10003F6BC((uint64_t)&v16);
  return sub_10003F6E4((uint64_t)&v15);
}

uint64_t sub_10003B8A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  uint64_t *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  int v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  id v79;
  uint64_t v80;
  uint64_t OpaqueTypeConformance2;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (**v92)();
  id v93;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119[16];
  uint64_t *v120;
  uint64_t v121;
  id v122;
  _OWORD v123[2];
  __int128 v124;
  __int128 v125;

  v117 = a1;
  v114 = a4;
  v113 = type metadata accessor for ScrollViewProxy(0);
  v104 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v116 = v6;
  v112 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_1000187A4(&qword_1000B4BA0);
  v7 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v9 = (char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = (_QWORD *)sub_1000187A4(&qword_1000B4BA8);
  v101 = *(v102 - 1);
  __chkstk_darwin(v102);
  v11 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_1000187A4(&qword_1000B4BB0);
  __chkstk_darwin(v98);
  v96 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_1000187A4(&qword_1000B4BB8);
  __chkstk_darwin(v99);
  v100 = (uint64_t)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_1000187A4(&qword_1000B4BC0);
  __chkstk_darwin(v118);
  v103 = (uint64_t)&v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_1000187A4(&qword_1000B4BC8);
  v106 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v115 = (char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_1000187A4(&qword_1000B4BD0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v109 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_1000187A4(&qword_1000B4BD8);
  __chkstk_darwin(v105);
  v108 = (char *)&v95 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a2[1];
  v18 = (void *)a2[2];
  v20 = type metadata accessor for TipListViewModel(0);
  v21 = sub_1000041E8(&qword_1000B4BE0, type metadata accessor for TipListViewModel, (uint64_t)&protocol conformance descriptor for TipNavigationViewModel);
  v22 = (void *)ObservedObject.projectedValue.getter(v19, v18, v20, v21);
  KeyPath = swift_getKeyPath(&unk_100079C78);
  ObservedObject.Wrapper.subscript.getter(&v124, KeyPath, v22, v21);
  swift_release(KeyPath);

  v123[0] = v124;
  v123[1] = v125;
  v120 = a2;
  v121 = a3;
  v24 = sub_1000187A4(&qword_1000B4BE8);
  v25 = sub_1000086E8(&qword_1000B4BF0, &qword_1000B4BE8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v26 = List.init(selection:content:)(v123, sub_10003F934, v119, &type metadata for String, v24, &protocol witness table for String, v25);
  v27 = static Axis.Set.horizontal.getter(v26);
  v28 = static Axis.Set.vertical.getter();
  v29 = Axis.Set.init(rawValue:)(0);
  v30 = Axis.Set.init(rawValue:)(v29);
  if (Axis.Set.init(rawValue:)(v30 & v27) != v27)
    v29 = Axis.Set.init(rawValue:)(v29 | v27);
  v31 = Axis.Set.init(rawValue:)(v29);
  v32 = Axis.Set.init(rawValue:)(v31 & v28);
  if (v32 != v28)
  {
    v32 = Axis.Set.init(rawValue:)(v29 | v28);
    v29 = v32;
  }
  v33 = static Alignment.center.getter(v32);
  v35 = v34;
  v36 = sub_1000086E8(&qword_1000B4BF8, &qword_1000B4BA0, (uint64_t)&protocol conformance descriptor for List<A, B>);
  v37 = v33;
  v38 = v97;
  View.containerRelativeFrame(_:alignment:)(v29, v37, v35, v97, v36);
  v39 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v38);
  v95 = static Alignment.center.getter(v39);
  v41 = v40;
  GeometryProxy.size.getter(v95);
  v43 = round(v42);
  v44 = a2;
  v123[0] = *(_OWORD *)(a2 + 3);
  v45 = swift_allocObject(&unk_1000A3948, 64, 7);
  v46 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v45 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v45 + 32) = v46;
  *(_QWORD *)(v45 + 48) = a2[4];
  *(double *)(v45 + 56) = v43;
  v47 = *a2;
  v48 = v18;
  v97 = (uint64_t)v48;
  sub_10003F6E4((uint64_t)v123);
  v49 = Namespace.wrappedValue.getter(v47);
  v50 = static MatchedGeometryProperties.frame.getter();
  v51 = static UnitPoint.center.getter();
  v53 = v52;
  v54 = v11;
  v55 = v101;
  v56 = (uint64_t)v96;
  v57 = v102;
  (*(void (**)(char *, char *, _QWORD *))(v101 + 16))(v96, v54, v102);
  v58 = v56 + *(int *)(v98 + 36);
  *(_QWORD *)v58 = sub_10003F944;
  *(_QWORD *)(v58 + 8) = v45;
  *(_QWORD *)(v58 + 16) = 0x646165487473696CLL;
  *(_QWORD *)(v58 + 24) = 0xEA00000000007265;
  *(_QWORD *)(v58 + 32) = v49;
  *(_DWORD *)(v58 + 40) = v50;
  *(double *)(v58 + 48) = v51;
  *(_QWORD *)(v58 + 56) = v53;
  *(_WORD *)(v58 + 64) = 0;
  *(_QWORD *)(v58 + 72) = v95;
  *(_QWORD *)(v58 + 80) = v41;
  (*(void (**)(char *, _QWORD *))(v55 + 8))(v54, v57);
  v59 = v100;
  sub_1000121BC(v56, v100, &qword_1000B4BB0);
  v60 = (_QWORD *)(v59 + *(int *)(v99 + 36));
  *v60 = 1953720684;
  v60[1] = 0xE400000000000000;
  sub_100011DE0(v56, &qword_1000B4BB0);
  v61 = swift_getKeyPath(&unk_100079CA0);
  v62 = v103;
  sub_1000121BC(v59, v103, &qword_1000B4BB8);
  v63 = v62 + *(int *)(v118 + 36);
  *(_QWORD *)v63 = v61;
  *(_QWORD *)(v63 + 8) = 0;
  *(_BYTE *)(v63 + 16) = 0;
  sub_100011DE0(v59, &qword_1000B4BB8);
  v64 = swift_getKeyPath(&unk_100079CE0);
  v65 = swift_getKeyPath(&unk_100079D08);
  static Published.subscript.getter(&v124, v48, v64, v65);
  swift_release(v64);
  swift_release(v65);
  v66 = v104;
  v102 = *(_QWORD **)(v104 + 16);
  v67 = v112;
  v68 = v113;
  ((void (*)(char *, uint64_t, uint64_t))v102)(v112, v117, v113);
  v69 = *(unsigned __int8 *)(v66 + 80);
  v70 = (v69 + 16) & ~v69;
  v101 = v69 | 7;
  v71 = swift_allocObject(&unk_1000A3970, v70 + v116, v69 | 7);
  v104 = *(_QWORD *)(v66 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v104)(v71 + v70, v67, v68);
  v72 = sub_100006578(0, (unint64_t *)&qword_1000B61F0, TPSCollection_ptr);
  v73 = sub_10003FAE0();
  v100 = sub_10003FCB4((unint64_t *)&qword_1000B4B08, (unint64_t *)&qword_1000B61F0, TPSCollection_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  View.onChange<A>(of:initial:_:)(&v124, 0, sub_10003FAB4, v71, v118, v72, v73, v100);
  swift_release(v71);

  v74 = sub_100011DE0(v62, &qword_1000B4BC0);
  v75 = (void *)v97;
  v122 = (id)dispatch thunk of TipNavigationViewModel.currentTip.getter(v74);
  ((void (*)(char *, uint64_t, uint64_t))v102)(v67, v117, v68);
  v76 = (v69 + 56) & ~v69;
  v77 = swift_allocObject(&unk_1000A3998, v76 + v116, v101);
  v78 = *((_OWORD *)v44 + 1);
  *(_OWORD *)(v77 + 16) = *(_OWORD *)v44;
  *(_OWORD *)(v77 + 32) = v78;
  *(_QWORD *)(v77 + 48) = v44[4];
  ((void (*)(uint64_t, char *, uint64_t))v104)(v77 + v76, v67, v68);
  v79 = v75;
  sub_10003F6E4((uint64_t)v123);
  v80 = sub_1000187A4(&qword_1000B48B8);
  *(_QWORD *)&v124 = v118;
  *((_QWORD *)&v124 + 1) = v72;
  *(_QWORD *)&v125 = v73;
  *((_QWORD *)&v125 + 1) = v100;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v124, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v82 = sub_10003FDD0();
  v83 = v109;
  v84 = v107;
  v85 = v80;
  v86 = v115;
  View.onChange<A>(of:initial:_:)(&v122, 0, sub_10003FD80, v77, v107, v85, OpaqueTypeConformance2, v82);
  swift_release(v77);

  (*(void (**)(char *, uint64_t))(v106 + 8))(v86, v84);
  v87 = swift_allocObject(&unk_1000A39C0, 56, 7);
  v88 = *((_OWORD *)v44 + 1);
  *(_OWORD *)(v87 + 16) = *(_OWORD *)v44;
  *(_OWORD *)(v87 + 32) = v88;
  *(_QWORD *)(v87 + 48) = v44[4];
  v89 = v110;
  v90 = (uint64_t)v108;
  v91 = v111;
  (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v108, v83, v111);
  v92 = (uint64_t (**)())(v90 + *(int *)(v105 + 36));
  *v92 = sub_10003FE5C;
  v92[1] = (uint64_t (*)())v87;
  v92[2] = 0;
  v92[3] = 0;
  v93 = v79;
  sub_10003F6E4((uint64_t)v123);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v83, v91);
  return sub_100014780(v90, v114, &qword_1000B4BD8);
}

uint64_t sub_10003C23C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t KeyPath;
  uint64_t v46;
  double v47;
  char *v48;
  uint64_t v49;
  int v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _OWORD v109[8];
  _OWORD v110[3];
  __int128 v111;
  __int128 v112;
  _BYTE v113[64];

  v95 = a2;
  v107 = a3;
  v4 = sub_1000187A4(&qword_1000B4E78);
  v105 = *(_QWORD *)(v4 - 8);
  v106 = v4;
  v5 = __chkstk_darwin(v4);
  v104 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v103 = (char *)&v91 - v7;
  v8 = sub_1000187A4(&qword_1000B4CA8);
  __chkstk_darwin(v8);
  v10 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_1000187A4(&qword_1000B4E80);
  __chkstk_darwin(v91);
  v12 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000187A4(&qword_1000B4E88);
  __chkstk_darwin(v13);
  v15 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000187A4(&qword_1000B4E90);
  v93 = *(_QWORD *)(v16 - 8);
  v94 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_1000187A4(&qword_1000B4E98);
  __chkstk_darwin(v92);
  v20 = (char *)&v91 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_1000187A4(&qword_1000B4EA0);
  __chkstk_darwin(v96);
  v22 = (char *)&v91 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_1000187A4(&qword_1000B4EA8);
  __chkstk_darwin(v98);
  v97 = (uint64_t)&v91 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_1000187A4(&qword_1000B4EB0);
  v24 = __chkstk_darwin(v100);
  v102 = (uint64_t)&v91 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v99 = (uint64_t)&v91 - v27;
  __chkstk_darwin(v26);
  v101 = (uint64_t)&v91 - v28;
  sub_10003CA30((uint64_t)v10);
  v112 = *(_OWORD *)(a1 + 24);
  v109[0] = *(_OWORD *)(a1 + 24);
  v29 = sub_1000187A4(&qword_1000B4738);
  State.wrappedValue.getter(v110, v29);
  if (LOBYTE(v110[0]))
    v30 = 0.0;
  else
    v30 = 1.0;
  sub_1000121BC((uint64_t)v10, (uint64_t)v12, &qword_1000B4CA8);
  *(double *)&v12[*(int *)(v91 + 36)] = v30;
  v31 = sub_100011DE0((uint64_t)v10, &qword_1000B4CA8);
  v32 = GeometryProxy.size.getter(v31);
  v34 = static Alignment.center.getter(v33);
  _FrameLayout.init(width:height:alignment:)(v110, *(_QWORD *)&v32, 0, 0, 1, v34, v35);
  sub_1000121BC((uint64_t)v12, (uint64_t)v15, &qword_1000B4E80);
  v36 = &v15[*(int *)(v13 + 36)];
  v37 = v110[1];
  *(_OWORD *)v36 = v110[0];
  *((_OWORD *)v36 + 1) = v37;
  *((_OWORD *)v36 + 2) = v110[2];
  v38 = sub_100011DE0((uint64_t)v12, &qword_1000B4E80);
  v39 = static VerticalEdge.Set.all.getter(v38);
  v40 = sub_100040ACC(&qword_1000B4EB8, &qword_1000B4E88, (void (*)(void))sub_100040AA8);
  View.listRowSeparator(_:edges:)(2, v39, v13, v40);
  sub_100011DE0((uint64_t)v15, &qword_1000B4E88);
  v42 = v93;
  v41 = v94;
  (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v20, v18, v94);
  v43 = &v20[*(int *)(v92 + 52)];
  *(_QWORD *)v43 = 0x646165487473696CLL;
  *((_QWORD *)v43 + 1) = 0xEA00000000007265;
  (*(void (**)(char *, uint64_t))(v42 + 8))(v18, v41);
  v111 = *(_OWORD *)(a1 + 8);
  v44 = *((_QWORD *)&v111 + 1);
  KeyPath = swift_getKeyPath(&unk_100079DE8);
  v46 = swift_getKeyPath(&unk_100079E10);
  static Published.subscript.getter(v109, v44, KeyPath, v46);
  swift_release(KeyPath);
  swift_release(v46);
  v47 = -*(double *)v109;
  sub_1000121BC((uint64_t)v20, (uint64_t)v22, &qword_1000B4E98);
  v48 = &v22[*(int *)(v96 + 36)];
  *(double *)v48 = v47;
  *((_QWORD *)v48 + 2) = 0;
  *((_QWORD *)v48 + 3) = 0;
  *((_QWORD *)v48 + 1) = 0;
  v48[32] = 0;
  sub_100011DE0((uint64_t)v20, &qword_1000B4E98);
  v49 = Namespace.wrappedValue.getter(*(_QWORD *)a1);
  v50 = static MatchedGeometryProperties.frame.getter();
  v51 = static UnitPoint.center.getter();
  v53 = v52;
  v54 = v97;
  sub_1000121BC((uint64_t)v22, v97, &qword_1000B4EA0);
  v55 = v54 + *(int *)(v98 + 36);
  *(_QWORD *)v55 = 0x646165487473696CLL;
  *(_QWORD *)(v55 + 8) = 0xEA00000000007265;
  *(_QWORD *)(v55 + 16) = v49;
  *(_DWORD *)(v55 + 24) = v50;
  *(double *)(v55 + 32) = v51;
  *(_QWORD *)(v55 + 40) = v53;
  *(_BYTE *)(v55 + 48) = 1;
  sub_100011DE0((uint64_t)v22, &qword_1000B4EA0);
  v56 = swift_getKeyPath(&unk_100079CE0);
  v57 = swift_getKeyPath(&unk_100079D08);
  static Published.subscript.getter(v109, v44, v56, v57);
  swift_release(v56);
  swift_release(v57);
  v58 = *(void **)&v109[0];
  v59 = objc_msgSend(*(id *)&v109[0], "gradient");

  memset(v113, 0, 32);
  v113[32] = 1;
  sub_10003EB8C(a1, (uint64_t)v113, v109);

  v61 = static Alignment.center.getter(v60);
  v63 = v62;
  v64 = v99;
  sub_1000121BC(v54, v99, &qword_1000B4EA8);
  v65 = v64 + *(int *)(v100 + 36);
  v66 = v109[5];
  *(_OWORD *)(v65 + 64) = v109[4];
  *(_OWORD *)(v65 + 80) = v66;
  v67 = v109[7];
  *(_OWORD *)(v65 + 96) = v109[6];
  *(_OWORD *)(v65 + 112) = v67;
  v68 = v109[1];
  *(_OWORD *)v65 = v109[0];
  *(_OWORD *)(v65 + 16) = v68;
  v69 = v109[3];
  *(_OWORD *)(v65 + 32) = v109[2];
  *(_OWORD *)(v65 + 48) = v69;
  *(_QWORD *)(v65 + 128) = v61;
  *(_QWORD *)(v65 + 136) = v63;
  sub_100011DE0(v54, &qword_1000B4EA8);
  v70 = v101;
  v71 = sub_100014780(v64, v101, &qword_1000B4EB0);
  v108 = dispatch thunk of TipNavigationViewModel.tips.getter(v71);
  v72 = swift_getKeyPath(&unk_100079F38);
  v73 = swift_allocObject(&unk_1000A3A60, 56, 7);
  v74 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v73 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v73 + 32) = v74;
  *(_QWORD *)(v73 + 48) = *(_QWORD *)(a1 + 32);
  sub_10003F6BC((uint64_t)&v111);
  sub_10003F6E4((uint64_t)&v112);
  v75 = sub_1000187A4(&qword_1000B4908);
  v76 = sub_1000187A4(&qword_1000B4ED0);
  v77 = sub_1000086E8(&qword_1000B4ED8, &qword_1000B4908, (uint64_t)&protocol conformance descriptor for [A]);
  v78 = sub_100040C08();
  v79 = v103;
  ForEach<>.init(_:id:content:)(&v108, v72, sub_100040C00, v73, v75, v76, v77, &protocol witness table for String, v78);
  v80 = v102;
  sub_1000121BC(v70, v102, &qword_1000B4EB0);
  v81 = v104;
  v82 = v105;
  v83 = *(void (**)(char *, char *, uint64_t))(v105 + 16);
  v84 = v106;
  v83(v104, v79, v106);
  v85 = v80;
  v86 = v80;
  v87 = v107;
  sub_1000121BC(v85, v107, &qword_1000B4EB0);
  v88 = sub_1000187A4(&qword_1000B4F00);
  v83((char *)(v87 + *(int *)(v88 + 48)), v81, v84);
  v89 = *(void (**)(char *, uint64_t))(v82 + 8);
  v89(v79, v84);
  sub_100011DE0(v70, &qword_1000B4EB0);
  v89(v81, v84);
  return sub_100011DE0(v86, &qword_1000B4EB0);
}

uint64_t sub_10003CA30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t KeyPath;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;

  v2 = v1;
  v53 = a1;
  v3 = sub_1000187A4(&qword_1000B4CB8);
  __chkstk_darwin(v3);
  v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000187A4(&qword_1000B4CC0);
  __chkstk_darwin(v6);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000187A4(&qword_1000B4CC8);
  __chkstk_darwin(v9);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000187A4(&qword_1000B4CD0);
  __chkstk_darwin(v12);
  v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_1000187A4(&qword_1000B4CD8);
  v15 = *(_QWORD *)(v52 - 8);
  v16 = __chkstk_darwin(v52);
  v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v5 = static HorizontalAlignment.center.getter(v16);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 0;
  v19 = sub_1000187A4(&qword_1000B4CE0);
  v20 = sub_10003E0D4(v2, (uint64_t)&v5[*(int *)(v19 + 44)]);
  v21 = static Alignment.center.getter(v20);
  sub_100043280(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v8, 0.0, 1, 0.0, 1, v21, v22);
  v23 = sub_100011DE0((uint64_t)v5, &qword_1000B4CB8);
  LOBYTE(v5) = static Edge.Set.horizontal.getter(v23);
  v24 = EdgeInsets.init(_all:)(16.0);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  sub_1000121BC((uint64_t)v8, (uint64_t)v11, &qword_1000B4CC0);
  v31 = &v11[*(int *)(v9 + 36)];
  *v31 = (char)v5;
  *((double *)v31 + 1) = v24;
  *((_QWORD *)v31 + 2) = v26;
  *((_QWORD *)v31 + 3) = v28;
  *((_QWORD *)v31 + 4) = v30;
  v31[40] = 0;
  v32 = sub_100011DE0((uint64_t)v8, &qword_1000B4CC0);
  v33 = static Edge.Set.bottom.getter(v32);
  v55 = *(_OWORD *)(v2 + 8);
  v34 = *((_QWORD *)&v55 + 1);
  KeyPath = swift_getKeyPath(&unk_100079C10);
  v36 = swift_getKeyPath(&unk_100079C38);
  static Published.subscript.getter(&v54, v34, KeyPath, v36);
  swift_release(KeyPath);
  swift_release(v36);
  v37 = 35.0;
  if (!(_BYTE)v54)
    v37 = 18.0;
  v38 = EdgeInsets.init(_all:)(v37);
  v40 = v39;
  v42 = v41;
  v44 = v43;
  sub_1000121BC((uint64_t)v11, (uint64_t)v14, &qword_1000B4CC8);
  v45 = &v14[*(int *)(v12 + 36)];
  *v45 = v33;
  *((double *)v45 + 1) = v38;
  *((_QWORD *)v45 + 2) = v40;
  *((_QWORD *)v45 + 3) = v42;
  *((_QWORD *)v45 + 4) = v44;
  v45[40] = 0;
  sub_100011DE0((uint64_t)v11, &qword_1000B4CC8);
  v54 = *(_OWORD *)(v2 + 24);
  v46 = swift_allocObject(&unk_1000A3A38, 56, 7);
  v47 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v46 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v46 + 32) = v47;
  *(_QWORD *)(v46 + 48) = *(_QWORD *)(v2 + 32);
  sub_10003F6BC((uint64_t)&v55);
  sub_10003F6E4((uint64_t)&v54);
  v48 = sub_100040ACC(&qword_1000B4CE8, &qword_1000B4CD0, (void (*)(void))sub_100040320);
  View.readScrollOffset(onChange:)(sub_1000402EC, v46, v12, v48);
  swift_release(v46);
  sub_100011DE0((uint64_t)v14, &qword_1000B4CD0);
  v50 = v52;
  v49 = v53;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 16))(v53, v18, v52);
  *(_WORD *)(v49 + *(int *)(sub_1000187A4(&qword_1000B4CA8) + 36)) = 256;
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v50);
}

unint64_t sub_10003CE28@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t result;
  id v30;
  void *v31;
  id v32;
  id v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  __int128 v51;

  v49 = a3;
  v5 = (int *)type metadata accessor for TipListItemView(0);
  v6 = __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v10 = (char *)&v45 - v9;
  v11 = sub_1000187A4(&qword_1000B4F08);
  v47 = *(_QWORD *)(v11 - 8);
  v48 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_1000187A4(&qword_1000B4ED0);
  __chkstk_darwin(v46);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  v51 = *(_OWORD *)(a2 + 8);
  v17 = *((_QWORD *)&v51 + 1);
  *v8 = swift_getKeyPath(&unk_100079F60);
  v18 = sub_1000187A4(&qword_1000B41C0);
  swift_storeEnumTagMultiPayload(v8, v18, 0);
  v19 = (_QWORD *)((char *)v8 + v5[5]);
  sub_10003F6BC((uint64_t)&v51);
  v20 = type metadata accessor for TipListViewModel(0);
  v21 = sub_1000041E8(&qword_1000B4BE0, type metadata accessor for TipListViewModel, (uint64_t)&protocol conformance descriptor for TipNavigationViewModel);
  v22 = v16;
  *v19 = ObservedObject.init(wrappedValue:)(v17, v20, v21);
  v19[1] = v23;
  *(_QWORD *)((char *)v8 + v5[6]) = v22;
  *(_QWORD *)((char *)v8 + v5[7]) = 4;
  v24 = sub_100040CD0((uint64_t)v8, (uint64_t)v10);
  v25 = dispatch thunk of TipNavigationViewModel.tips.getter(v24);
  v26 = v25;
  if (!((unint64_t)v25 >> 62))
  {
    v27 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v27)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease(v26);
    goto LABEL_14;
  }
  if (v25 >= 0)
    v25 &= 0xFFFFFFFFFFFFFF8uLL;
  v27 = _CocoaArrayWrapper.endIndex.getter(v25);
  if (!v27)
    goto LABEL_13;
LABEL_3:
  v28 = __OFSUB__(v27, 1);
  result = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else if ((v26 & 0xC000000000000001) == 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (result < *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v30 = *(id *)(v26 + 8 * result + 32);
      goto LABEL_8;
    }
    __break(1u);
    return result;
  }
  v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(result, v26);
LABEL_8:
  v31 = v30;
  swift_bridgeObjectRelease(v26);
  sub_100006578(0, (unint64_t *)&qword_1000B42F0, TPSTip_ptr);
  v32 = v22;
  v33 = v31;
  v34 = static NSObject.== infix(_:_:)(v33, v32);

  if ((v34 & 1) == 0)
  {
LABEL_14:
    v35 = 0;
    goto LABEL_15;
  }
  v35 = 2;
LABEL_15:
  v36 = static VerticalEdge.Set.bottom.getter();
  v37 = sub_1000041E8(&qword_1000B4EE8, type metadata accessor for TipListItemView, (uint64_t)&unk_10007BFE0);
  View.listRowSeparator(_:edges:)(v35, v36, v5, v37);
  sub_100040D14((uint64_t)v10);
  KeyPath = swift_getKeyPath(&unk_100079C10);
  v39 = swift_getKeyPath(&unk_100079C38);
  static Published.subscript.getter(&v50, v17, KeyPath, v39);
  swift_release(KeyPath);
  swift_release(v39);
  v40 = v50;
  if (v50)
    v41 = 0;
  else
    v41 = 0x4020000000000000;
  v43 = v47;
  v42 = v48;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v15, v13, v48);
  v44 = &v15[*(int *)(v46 + 36)];
  *(_QWORD *)v44 = v41;
  *((_QWORD *)v44 + 1) = 0;
  *((_QWORD *)v44 + 2) = v41;
  *((_QWORD *)v44 + 3) = 0;
  v44[32] = v40;
  (*(void (**)(char *, uint64_t))(v43 + 8))(v13, v42);
  return sub_100014780((uint64_t)v15, v49, &qword_1000B4ED0);
}

uint64_t sub_10003D1C8(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = 0x646165487473696CLL;
  v5[1] = 0xEA00000000007265;
  v2 = static UnitPoint.top.getter(a1, a2);
  return ScrollViewProxy.scrollTo<A>(_:anchor:)(v5, *(_QWORD *)&v2, v3, 0, &type metadata for String, &protocol witness table for String);
}

void sub_10003D230(uint64_t a1, id *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  char v8;
  uint64_t KeyPath;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  id v21;
  _QWORD v22[2];

  if (*a2)
  {
    v6 = *(void **)(a3 + 16);
    v21 = *a2;
    v7 = dispatch thunk of TipNavigationViewModel.tips.getter(v21);
    v8 = sub_1000363C8((uint64_t)v21, v7);
    swift_bridgeObjectRelease(v7);
    if ((v8 & 1) != 0)
    {
      KeyPath = swift_getKeyPath(&unk_100079C10);
      v10 = swift_getKeyPath(&unk_100079C38);
      static Published.subscript.getter(v22, v6, KeyPath, v10);
      swift_release(KeyPath);
      swift_release(v10);
      if ((v22[0] & 1) == 0)
      {
        v11 = objc_msgSend(v21, "identifier");
        v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        v14 = v13;

        v15 = swift_getKeyPath(&unk_100079C78);
        v16 = swift_getKeyPath(&unk_100079D80);
        v22[0] = v12;
        v22[1] = v14;
        static Published.subscript.setter(v22, v6, v15, v16);
        sub_100050684();
      }
      if (*((_BYTE *)v6 + qword_1000B90E0) == 1)
      {
        v18[2] = a4;
        v19 = __chkstk_darwin(v21);
        v20 = a3;
        v17 = static Animation.default.getter(v19);
        withAnimation<A>(_:_:)(v17, sub_10003FE7C, v18, (char *)&type metadata for () + 8);

        swift_release(v17);
      }
      else
      {

      }
    }
    else
    {

    }
  }
}

uint64_t sub_10003D414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v10 = a2;
  v4 = static UnitPoint.center.getter();
  v6 = v5;
  v7 = sub_100006578(0, (unint64_t *)&qword_1000B42F0, TPSTip_ptr);
  v8 = sub_10003FCB4(&qword_1000B4C58, (unint64_t *)&qword_1000B42F0, TPSTip_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  result = ScrollViewProxy.scrollTo<A>(_:anchor:)(&v10, *(_QWORD *)&v4, v6, 0, v7, v8);
  *(_BYTE *)(*(_QWORD *)(a3 + 16) + qword_1000B90E0) = 0;
  return result;
}

uint64_t sub_10003D4DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[5];
  uint64_t v31;
  __int128 v32;
  __int128 v33;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v27 = *(_QWORD *)(v5 - 8);
  v28 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v26 - v13;
  sub_100006578(0, (unint64_t *)&qword_1000B44A0, OS_dispatch_queue_ptr);
  v15 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)(v12, 0.15);
  v26 = *(void (**)(char *, uint64_t))(v9 + 8);
  v26(v12, v8);
  v16 = *(_OWORD *)(a1 + 8);
  v32 = *(_OWORD *)(a1 + 24);
  v33 = v16;
  v17 = swift_allocObject(&unk_1000A39E8, 56, 7);
  v18 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v17 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v17 + 32) = v18;
  *(_QWORD *)(v17 + 48) = *(_QWORD *)(a1 + 32);
  aBlock[4] = sub_10003FE6C;
  v31 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100003DA8;
  aBlock[3] = &unk_1000A3A00;
  v19 = _Block_copy(aBlock);
  v20 = v31;
  sub_10003F6BC((uint64_t)&v33);
  sub_10003F6E4((uint64_t)&v32);
  v21 = swift_release(v20);
  static DispatchQoS.unspecified.getter(v21);
  aBlock[0] = _swiftEmptyArrayStorage;
  v22 = sub_1000041E8((unint64_t *)&qword_1000B44A8, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_1000187A4(&qword_1000B44B0);
  v24 = sub_1000086E8((unint64_t *)&qword_1000B44B8, &qword_1000B44B0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v2, v22);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v14, v7, v4, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v28);
  return ((uint64_t (*)(char *, uint64_t))v26)(v14, v8);
}

void sub_10003D7A8(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v1 = *(void **)(a1 + 16);
  KeyPath = swift_getKeyPath(&unk_100079C10);
  v3 = swift_getKeyPath(&unk_100079C38);
  static Published.subscript.getter(v8, v1, KeyPath, v3);
  swift_release(KeyPath);
  swift_release(v3);
  if (LOBYTE(v8[0]) == 1)
  {
    v4 = swift_getKeyPath(&unk_100079D38);
    v5 = swift_getKeyPath(&unk_100079D60);
    static Published.subscript.getter(v8, v1, v4, v5);
    swift_release(v4);
    swift_release(v5);
    if ((v8[0] & 1) == 0)
    {
      v6 = swift_getKeyPath(&unk_100079C78);
      v7 = swift_getKeyPath(&unk_100079D80);
      v8[0] = 0;
      v8[1] = 0;
      static Published.subscript.setter(v8, v1, v6, v7);
      sub_100050684();
    }
  }
}

double sub_10003D8B8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  char v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  char v16;
  __int128 v17;
  char v18;
  __int128 v19;
  __int128 v20;

  v3 = v2;
  v20 = *(_OWORD *)(v2 + 8);
  v5 = dispatch thunk of TipNavigationViewModel.tips.getter(a1);
  v6 = v5;
  if ((unint64_t)v5 >> 62)
  {
    if (v5 >= 0)
      v5 &= 0xFFFFFFFFFFFFFF8uLL;
    v7 = _CocoaArrayWrapper.endIndex.getter(v5);
  }
  else
  {
    v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v6);
  if (v7)
  {
    v19 = *(_OWORD *)(v3 + 24);
    v8 = swift_allocObject(&unk_1000A38A8, 56, 7);
    v9 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)(v8 + 16) = *(_OWORD *)v3;
    *(_OWORD *)(v8 + 32) = v9;
    *(_QWORD *)(v8 + 48) = *(_QWORD *)(v3 + 32);
    v14 = sub_10003F6B4;
    v15 = v8;
    v16 = 0;
    sub_10003F6BC((uint64_t)&v20);
    sub_10003F6E4((uint64_t)&v19);
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = 1;
  }
  v10 = sub_1000187A4(&qword_1000B4B30);
  v11 = sub_1000086E8(&qword_1000B4B38, &qword_1000B4B30, (uint64_t)&protocol conformance descriptor for ScrollViewReader<A>);
  _ConditionalContent<>.init(storage:)(&v14, v10, &type metadata for EmptyView, v11, &protocol witness table for EmptyView);
  result = *(double *)&v17;
  v13 = v18;
  *(_OWORD *)a2 = v17;
  *(_BYTE *)(a2 + 16) = v13;
  return result;
}

uint64_t sub_10003D9EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v21[4];

  v4 = sub_1000187A4(&qword_1000B46A0);
  __chkstk_darwin(v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000187A4(&qword_1000B4B40);
  __chkstk_darwin(v7);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003DBC4(a2, (uint64_t)v9);
  v10 = &v9[*(int *)(v7 + 36)];
  v11 = type metadata accessor for ScrollViewProxy(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v10, a1, v11);
  v12 = *(_QWORD *)(a2 + 16);
  KeyPath = swift_getKeyPath(&unk_100079BB8);
  v14 = swift_getKeyPath(&unk_100079BE0);
  static Published.subscript.getter(v21, v12, KeyPath, v14);
  swift_release(KeyPath);
  swift_release(v14);
  v15 = v21[1];
  v16 = v21[3];
  v17 = sub_100019FCC();
  AppEntity.fullyQualifiedIdentifier.getter(&type metadata for TipCollection, v17);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v15);
  v18 = type metadata accessor for EntityIdentifier(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v6, 0, 1, v18);
  v19 = sub_10003F714();
  View.appEntityIdentifier(_:)(v6, v7, v19);
  sub_100011DE0((uint64_t)v6, &qword_1000B46A0);
  return sub_100011DE0((uint64_t)v9, &qword_1000B4B40);
}

uint64_t sub_10003DBC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t OpaqueTypeConformance2;
  uint64_t v30;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)@<X0>(uint64_t@<X0>, uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>)@<X8>);
  uint64_t v57;
  uint64_t v58;
  void *v59;
  __int128 v60;
  _OWORD v61[2];

  v55 = a2;
  v53 = type metadata accessor for InsetListStyle(0);
  v46 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_1000187A4(&qword_1000B4B88);
  v48 = *(_QWORD *)(v54 - 8);
  v5 = __chkstk_darwin(v54);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v47 = (char *)&v44 - v8;
  v50 = sub_1000187A4(&qword_1000B4B90);
  __chkstk_darwin(v50);
  v52 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for PlainListStyle(0);
  v45 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_1000187A4(&qword_1000B4B98);
  v12 = *(_QWORD *)(v51 - 8);
  v13 = __chkstk_darwin(v51);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v44 - v16;
  v61[0] = *(_OWORD *)(a1 + 8);
  v18 = *((_QWORD *)&v61[0] + 1);
  KeyPath = swift_getKeyPath(&unk_100079C10);
  v20 = swift_getKeyPath(&unk_100079C38);
  static Published.subscript.getter(&v56, v18, KeyPath, v20);
  swift_release(KeyPath);
  swift_release(v20);
  v60 = *(_OWORD *)(a1 + 24);
  if (v56 == 1)
  {
    v21 = swift_allocObject(&unk_1000A38F8, 56, 7);
    v22 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v21 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v21 + 32) = v22;
    *(_QWORD *)(v21 + 48) = *(_QWORD *)(a1 + 32);
    v56 = sub_100040DD8;
    v57 = v21;
    sub_10003F6BC((uint64_t)v61);
    v23 = sub_10003F6E4((uint64_t)&v60);
    PlainListStyle.init()(v23);
    v24 = sub_1000187A4(&qword_1000B4B70);
    v25 = sub_1000086E8(&qword_1000B4B78, &qword_1000B4B70, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    v26 = v49;
    View.listStyle<A>(_:)(v11, v24, v49, v25, &protocol witness table for PlainListStyle);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v11, v26);
    swift_release(v57);
    v27 = v51;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v15, v51);
    v28 = v52;
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v52, v17, v27);
    swift_storeEnumTagMultiPayload(v28, v50, 0);
    v56 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>)@<X8>))v24;
    v57 = v26;
    v58 = v25;
    v59 = &protocol witness table for PlainListStyle;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v56, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    v56 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>)@<X8>))v24;
    v57 = v53;
    v58 = v25;
    v59 = &protocol witness table for InsetListStyle;
    v30 = swift_getOpaqueTypeConformance2(&v56, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v28, v27, v54, OpaqueTypeConformance2, v30);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, v27);
  }
  else
  {
    v32 = swift_allocObject(&unk_1000A38D0, 56, 7);
    v33 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v32 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v32 + 32) = v33;
    *(_QWORD *)(v32 + 48) = *(_QWORD *)(a1 + 32);
    v56 = sub_10003F8C0;
    v57 = v32;
    sub_10003F6BC((uint64_t)v61);
    v34 = sub_10003F6E4((uint64_t)&v60);
    InsetListStyle.init()(v34);
    v35 = sub_1000187A4(&qword_1000B4B70);
    v36 = sub_1000086E8(&qword_1000B4B78, &qword_1000B4B70, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    v37 = v53;
    View.listStyle<A>(_:)(v4, v35, v53, v36, &protocol witness table for InsetListStyle);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v4, v37);
    swift_release(v57);
    v39 = v47;
    v38 = v48;
    v40 = v54;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v47, v7, v54);
    v41 = v52;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v52, v39, v40);
    swift_storeEnumTagMultiPayload(v41, v50, 1);
    v56 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>)@<X8>))v35;
    v57 = v49;
    v58 = v36;
    v59 = &protocol witness table for PlainListStyle;
    v42 = swift_getOpaqueTypeConformance2(&v56, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    v56 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>)@<X8>))v35;
    v57 = v37;
    v58 = v36;
    v59 = &protocol witness table for InsetListStyle;
    v43 = swift_getOpaqueTypeConformance2(&v56, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v41, v51, v40, v42, v43);
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v39, v40);
  }
}

uint64_t sub_10003E0D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE v130[136];
  _BYTE v131[136];
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  int v140;
  _OWORD v141[8];
  int v142;

  v127 = a2;
  v119 = type metadata accessor for AccessibilityTraits(0);
  v117 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v116 = (char *)&v115 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000187A4(&qword_1000B4D08);
  v123 = *(_QWORD *)(v4 - 8);
  v124 = v4;
  __chkstk_darwin(v4);
  v118 = (char *)&v115 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000187A4(&qword_1000B4D10);
  v7 = __chkstk_darwin(v6);
  v126 = (uint64_t)&v115 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v122 = (uint64_t)&v115 - v9;
  v10 = sub_1000187A4(&qword_1000B42D8);
  __chkstk_darwin(v10);
  v12 = (char *)&v115 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000187A4(&qword_1000B4D18);
  __chkstk_darwin(v13);
  v15 = (char *)&v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_1000187A4(&qword_1000B4D20);
  __chkstk_darwin(v120);
  v17 = (char *)&v115 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_1000187A4(&qword_1000B4D28);
  __chkstk_darwin(v121);
  v19 = (char *)&v115 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = (char *)sub_1000187A4(&qword_1000B4D30);
  v20 = __chkstk_darwin(v125);
  v22 = (char *)&v115 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v129 = (uint64_t)&v115 - v23;
  v24 = sub_10003EA30(a1, (uint64_t)v15);
  v25 = static Edge.Set.top.getter(v24);
  v128 = *(_QWORD *)(a1 + 16);
  v26 = v128;
  KeyPath = swift_getKeyPath(&unk_100079DE8);
  v28 = swift_getKeyPath(&unk_100079E10);
  static Published.subscript.getter(v141, v26, KeyPath, v28);
  swift_release(KeyPath);
  swift_release(v28);
  v29 = EdgeInsets.init(_all:)(*(double *)v141);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  sub_1000121BC((uint64_t)v15, (uint64_t)v17, &qword_1000B4D18);
  v36 = &v17[*(int *)(v120 + 36)];
  *v36 = v25;
  *((double *)v36 + 1) = v29;
  *((_QWORD *)v36 + 2) = v31;
  *((_QWORD *)v36 + 3) = v33;
  *((_QWORD *)v36 + 4) = v35;
  v36[40] = 0;
  sub_100011DE0((uint64_t)v15, &qword_1000B4D18);
  v37 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v12, 1, 1, v37);
  v38 = static Font.system(size:weight:design:)(0, 1, v12, 70.0);
  v39 = sub_100011DE0((uint64_t)v12, &qword_1000B42D8);
  static Font.Weight.semibold.getter(v39);
  v40 = Font.weight(_:)(v38);
  swift_release(v38);
  v41 = swift_getKeyPath(&unk_100079E30);
  sub_1000121BC((uint64_t)v17, (uint64_t)v19, &qword_1000B4D20);
  v42 = (uint64_t *)&v19[*(int *)(v121 + 36)];
  *v42 = v41;
  v42[1] = v40;
  v43 = sub_100011DE0((uint64_t)v17, &qword_1000B4D20);
  v44 = static Color.white.getter(v43);
  v45 = swift_getKeyPath(&unk_100079E60);
  sub_1000121BC((uint64_t)v19, (uint64_t)v22, &qword_1000B4D28);
  v46 = (uint64_t *)&v22[*((int *)v125 + 9)];
  *v46 = v45;
  v46[1] = v44;
  sub_100011DE0((uint64_t)v19, &qword_1000B4D28);
  v125 = v22;
  sub_100014780((uint64_t)v22, v129, &qword_1000B4D30);
  v47 = swift_getKeyPath(&unk_100079CE0);
  v48 = swift_getKeyPath(&unk_100079D08);
  static Published.subscript.getter(v141, v128, v47, v48);
  swift_release(v47);
  swift_release(v48);
  v49 = *(void **)&v141[0];
  v50 = objc_msgSend(*(id *)&v141[0], "title");

  if (v50)
  {
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    v53 = v52;

    *(_QWORD *)&v141[0] = v51;
    *((_QWORD *)&v141[0] + 1) = v53;
    v54 = sub_100014614();
    v55 = Text.init<A>(_:)(v141, &type metadata for String, v54);
    v120 = v56;
    v121 = v55;
    v58 = v57;
    v60 = v59;
    v61 = swift_getKeyPath(&unk_100079E90);
    v62 = static Edge.Set.top.getter(v61);
    v63 = EdgeInsets.init(_all:)(5.0);
    v65 = v64;
    v67 = v66;
    v69 = v68;
    v70 = static Font.title.getter();
    static Font.Weight.bold.getter(v70);
    v71 = Font.weight(_:)(v70);
    swift_release(v70);
    v72 = swift_getKeyPath(&unk_100079E30);
    v73 = static Color.white.getter(v72);
    v74 = swift_getKeyPath(&unk_100079E60);
    v131[0] = v58 & 1;
    v130[0] = 0;
    v75 = static HierarchicalShapeStyle.primary.getter();
    *(_QWORD *)&v132 = v121;
    *((_QWORD *)&v132 + 1) = v120;
    LOBYTE(v133) = v131[0];
    *((_QWORD *)&v133 + 1) = v60;
    *(_QWORD *)&v134 = v61;
    BYTE8(v134) = 1;
    LOBYTE(v135) = v62;
    *((double *)&v135 + 1) = v63;
    *(_QWORD *)&v136 = v65;
    *((_QWORD *)&v136 + 1) = v67;
    *(_QWORD *)&v137 = v69;
    BYTE8(v137) = v130[0];
    *(_QWORD *)&v138 = v72;
    *((_QWORD *)&v138 + 1) = v71;
    *(_QWORD *)&v139 = v74;
    *((_QWORD *)&v139 + 1) = v73;
    v140 = v75;
    v76 = v116;
    static AccessibilityTraits.isHeader.getter();
    v77 = sub_1000187A4(&qword_1000B4D48);
    v78 = sub_1000405E8();
    v79 = (uint64_t)v118;
    View.accessibilityAddTraits(_:)(v76, v77, v78);
    (*(void (**)(char *, uint64_t))(v117 + 8))(v76, v119);
    v141[6] = v138;
    v141[7] = v139;
    v142 = v140;
    v141[2] = v134;
    v141[3] = v135;
    v141[4] = v136;
    v141[5] = v137;
    v141[0] = v132;
    v141[1] = v133;
    sub_100040818((uint64_t)v141);
    v80 = v122;
    sub_100014780(v79, v122, &qword_1000B4D08);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v123 + 56))(v80, 0, 1, v124);
  }
  else
  {
    v80 = v122;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v123 + 56))(v122, 1, 1, v124);
  }
  v81 = swift_getKeyPath(&unk_100079CE0);
  v82 = swift_getKeyPath(&unk_100079D08);
  static Published.subscript.getter(v141, v128, v81, v82);
  swift_release(v81);
  swift_release(v82);
  v83 = *(void **)&v141[0];
  v84 = objc_msgSend(*(id *)&v141[0], "text");

  if (v84)
  {
    v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
    v87 = v86;

    *(_QWORD *)&v141[0] = v85;
    *((_QWORD *)&v141[0] + 1) = v87;
    v88 = sub_100014614();
    v128 = Text.init<A>(_:)(v141, &type metadata for String, v88);
    v124 = v89;
    LOBYTE(v87) = v90;
    v92 = v91;
    v93 = swift_getKeyPath(&unk_100079E90);
    v94 = static Font.subheadline.getter();
    v95 = v80;
    v96 = swift_getKeyPath(&unk_100079E30);
    v97 = static Edge.Set.top.getter(v96);
    v98 = EdgeInsets.init(_all:)(11.0);
    v100 = v99;
    v102 = v101;
    v104 = v103;
    v105 = static Color.secondary.getter();
    v106 = swift_getKeyPath(&unk_100079E60);
    v131[0] = v87 & 1;
    v130[0] = 0;
    v107 = static HierarchicalShapeStyle.secondary.getter();
    *(_QWORD *)&v132 = v128;
    *((_QWORD *)&v132 + 1) = v124;
    LOBYTE(v133) = v131[0];
    *((_QWORD *)&v133 + 1) = v92;
    *(_QWORD *)&v134 = v93;
    BYTE8(v134) = 1;
    *(_QWORD *)&v135 = v96;
    *((_QWORD *)&v135 + 1) = v94;
    v80 = v95;
    LOBYTE(v136) = v97;
    *((double *)&v136 + 1) = v98;
    *(_QWORD *)&v137 = v100;
    *((_QWORD *)&v137 + 1) = v102;
    *(_QWORD *)&v138 = v104;
    BYTE8(v138) = v130[0];
    *(_QWORD *)&v139 = v106;
    *((_QWORD *)&v139 + 1) = v105;
    v140 = v107;
    nullsub_1(&v132);
  }
  else
  {
    sub_100040470((uint64_t)&v132);
  }
  sub_100014780((uint64_t)&v132, (uint64_t)v141, &qword_1000B4D38);
  v108 = v129;
  v109 = (uint64_t)v125;
  sub_1000121BC(v129, (uint64_t)v125, &qword_1000B4D30);
  v110 = v126;
  sub_1000121BC(v80, v126, &qword_1000B4D10);
  sub_100014780((uint64_t)v141, (uint64_t)v130, &qword_1000B4D38);
  v111 = v127;
  sub_1000121BC(v109, v127, &qword_1000B4D30);
  v112 = sub_1000187A4(&qword_1000B4D40);
  sub_1000121BC(v110, v111 + *(int *)(v112 + 48), &qword_1000B4D10);
  v113 = v111 + *(int *)(v112 + 64);
  sub_100014780((uint64_t)v130, (uint64_t)v131, &qword_1000B4D38);
  sub_100014780((uint64_t)v131, v113, &qword_1000B4D38);
  sub_100040504((uint64_t)v131, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_10004048C);
  sub_100011DE0(v80, &qword_1000B4D10);
  sub_100011DE0(v108, &qword_1000B4D30);
  sub_100014780((uint64_t)v130, (uint64_t)&v132, &qword_1000B4D38);
  sub_100040504((uint64_t)&v132, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_100040568);
  sub_100011DE0(v110, &qword_1000B4D10);
  return sub_100011DE0(v109, &qword_1000B4D30);
}

uint64_t sub_10003EA30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  id v16;

  v3 = *(_QWORD *)(a1 + 16);
  KeyPath = swift_getKeyPath(&unk_100079CE0);
  v5 = swift_getKeyPath(&unk_100079D08);
  static Published.subscript.getter(&v16, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  v6 = v16;
  v7 = objc_msgSend(v16, "tocAssets");

  if (v7 && (v8 = objc_msgSend(v7, "symbolId"), v7, v8))
  {
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v12 = (void *)Image.init(_internalSystemName:)(v9, v11);
    v16 = v12;
    View.accessibilityHidden(_:)(1, &type metadata for Image, &protocol witness table for Image);
    swift_release(v12);
    v13 = sub_1000187A4(&qword_1000B4DD8);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a2, 0, 1, v13);
  }
  else
  {
    v15 = sub_1000187A4(&qword_1000B4DD8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a2, 1, 1, v15);
  }
}

double sub_10003EB8C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  double result;
  __int128 v48;
  char v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD v56[2];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[27];
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int16 v65;
  char v66;
  _OWORD v67[6];
  _OWORD v68[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _OWORD v75[2];
  _QWORD v76[5];
  _BYTE v77[8];
  double v78;
  __int128 v79;
  char v80;
  _BYTE v81[8];
  double v82;
  __int128 v83;
  char v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _OWORD v91[3];

  v5 = *(_QWORD *)(a1 + 16);
  KeyPath = swift_getKeyPath(&unk_100079CE0);
  v7 = swift_getKeyPath(&unk_100079D08);
  static Published.subscript.getter(&v85, v5, KeyPath, v7);
  swift_release(KeyPath);
  swift_release(v7);
  v8 = (void *)v85;
  v9 = objc_msgSend((id)v85, "gradient");

  if (v9)
  {
    v11 = v9;
    v12 = static Array.colorsFromGradient(_:)(v9, &type metadata for Color);

    v13 = Gradient.init(colors:)(v12);
    v14 = static UnitPoint.topTrailing.getter(v13);
    v16 = v15;
    v17 = static UnitPoint.bottomLeading.getter();
    LinearGradient.init(gradient:startPoint:endPoint:)(v76, v13, v14, v16, v17, v18);
    v19 = v76[0];
    v20 = v76[1];
    v21 = v76[2];
    v22 = v76[3];
    v23 = v76[4];
    sub_100014780(a2, (uint64_t)v81, &qword_1000B4E48);
    if ((v84 & 1) != 0)
    {
      *(_QWORD *)&v69 = v19;
      *((_QWORD *)&v69 + 1) = v20;
      *(_QWORD *)&v70 = v21;
      *((_QWORD *)&v70 + 1) = v22;
      *(_QWORD *)&v71 = v23;
      *((_QWORD *)&v71 + 1) = 256;
      v72 = 0uLL;
      *(_QWORD *)&v73 = 0;
      WORD4(v73) = 0;
      BYTE10(v73) = 1;
    }
    else
    {
      v69 = v83;
      *(_QWORD *)&v70 = 0;
      *((double *)&v70 + 1) = -v82;
      *(_QWORD *)&v71 = v19;
      *((_QWORD *)&v71 + 1) = v20;
      *(_QWORD *)&v72 = v21;
      *((_QWORD *)&v72 + 1) = v22;
      *(_QWORD *)&v73 = v23;
      WORD4(v73) = 256;
      BYTE10(v73) = 0;
    }
    v26 = sub_1000187A4(&qword_1000B4E20);
    v27 = sub_1000187A4(&qword_1000B4E30);
    v28 = sub_1000086E8(&qword_1000B4E18, &qword_1000B4E20, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    v29 = sub_1000086E8(&qword_1000B4E28, &qword_1000B4E30, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    _ConditionalContent<>.init(storage:)(&v69, v26, v27, v28, v29);
    v30 = v85;
    v31 = v86;
    v54 = *((_QWORD *)&v87 + 1);
    v55 = v87;
    v52 = *((_QWORD *)&v88 + 1);
    v53 = v88;
    v51 = v89;
    v49 = BYTE10(v89);
    v50 = WORD4(v89);
    v32 = sub_1000187A4(&qword_1000B4E50);
    v33 = swift_allocObject(v32, 48, 7);
    *(_OWORD *)(v33 + 16) = xmmword_100079B40;
    v34 = (void *)objc_opt_self(UIColor);
    *(_QWORD *)(v33 + 32) = Color.init(_:)(objc_msgSend(v34, "systemBackgroundColor"));
    v35 = objc_msgSend(v34, "systemBackgroundColor");
    v36 = objc_msgSend(v35, "colorWithAlphaComponent:", 0.0);

    v37 = Color.init(_:)(v36);
    *(_QWORD *)(v33 + 40) = v37;
    *(_QWORD *)&v85 = v33;
    specialized Array._endMutation()(v37);
    v38 = AnyGradient.init(colors:locations:interpolations:)(v85, 0, &off_1000A2D88);
    sub_100014780(a2, (uint64_t)v77, &qword_1000B4E48);
    if ((v80 & 1) != 0)
    {
      *(_QWORD *)&v85 = v38;
      *((_QWORD *)&v85 + 1) = 256;
      *(_QWORD *)&v87 = 0;
      v86 = 0uLL;
      WORD4(v87) = 0;
      BYTE10(v87) = 1;
    }
    else
    {
      v85 = v79;
      *(_QWORD *)&v86 = 0;
      *((double *)&v86 + 1) = -v78;
      *(_QWORD *)&v87 = v38;
      WORD4(v87) = 256;
      BYTE10(v87) = 0;
    }
    v39 = sub_1000187A4(&qword_1000B4E58);
    v40 = sub_1000187A4(&qword_1000B4E60);
    v41 = sub_1000086E8(&qword_1000B4E68, &qword_1000B4E58, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    v42 = sub_1000086E8(&qword_1000B4E70, &qword_1000B4E60, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    _ConditionalContent<>.init(storage:)(&v85, v39, v40, v41, v42);
    v56[0] = v30;
    v56[1] = v31;
    *(_QWORD *)&v57 = v55;
    *((_QWORD *)&v57 + 1) = v54;
    *(_QWORD *)&v58 = v53;
    *((_QWORD *)&v58 + 1) = v52;
    *(_QWORD *)&v59 = v51;
    WORD4(v59) = v50;
    BYTE10(v59) = v49;
    v60 = v62;
    *(_OWORD *)v61 = v63;
    *(_QWORD *)&v61[16] = v64;
    *(_WORD *)&v61[24] = v65;
    v61[26] = v66;
    v71 = v57;
    v72 = v58;
    v69 = v30;
    v70 = v31;
    *(_OWORD *)((char *)v75 + 11) = *(_OWORD *)&v61[11];
    v74 = v62;
    v75[0] = v63;
    v73 = v59;
    sub_1000409E8((uint64_t)&v69);
    sub_100014780((uint64_t)&v69, (uint64_t)&v85, &qword_1000B4DE0);
    sub_1000409F0((uint64_t)v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_100040194, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000401A4);
    sub_1000409F0((uint64_t)v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_100040194, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000401A4);
    v43 = sub_1000187A4(&qword_1000B4DE8);
    v44 = sub_1000408A8();
    _ConditionalContent<>.init(storage:)(&v85, v43, &type metadata for Color, v44, &protocol witness table for Color);

    sub_1000409F0((uint64_t)v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_1000402C8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000402D8);
    sub_1000409F0((uint64_t)v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_1000402C8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000402D8);
    v89 = v67[4];
    v90 = v67[5];
    v91[0] = v68[0];
    *(_OWORD *)((char *)v91 + 12) = *(_OWORD *)((char *)v68 + 12);
    v85 = v67[0];
    v86 = v67[1];
    v87 = v67[2];
    v88 = v67[3];
  }
  else
  {
    *(_QWORD *)&v69 = static Color.clear.getter(v10);
    sub_10004089C((uint64_t)&v69);
    sub_100014780((uint64_t)&v69, (uint64_t)v67, &qword_1000B4DE0);
    v24 = sub_1000187A4(&qword_1000B4DE8);
    v25 = sub_1000408A8();
    _ConditionalContent<>.init(storage:)(v67, v24, &type metadata for Color, v25, &protocol witness table for Color);
  }
  v45 = v90;
  a3[4] = v89;
  a3[5] = v45;
  a3[6] = v91[0];
  *(_OWORD *)((char *)a3 + 108) = *(_OWORD *)((char *)v91 + 12);
  v46 = v86;
  *a3 = v85;
  a3[1] = v46;
  result = *(double *)&v87;
  v48 = v88;
  a3[2] = v87;
  a3[3] = v48;
  return result;
}

uint64_t sub_10003F17C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;

  v6 = sub_1000187A4(&qword_1000B4C60);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000187A4(&qword_1000B4C68);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_1000187A4(&qword_1000B4C70);
  __chkstk_darwin(v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000187A4(&qword_1000B4C78);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10003FE98(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24), *(_QWORD *)(a1 + 32), a3);
  if (v23 <= 0.0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(v16 + 56))(a2, 1, 1, v15, v20);
  v24 = v20;
  v25 = v21;
  v26 = v22;
  v27 = v23;
  *v11 = static Alignment.center.getter(v19);
  v11[1] = v28;
  v29 = sub_1000187A4(&qword_1000B4C80);
  sub_10003F468(a1, (_QWORD *)((char *)v11 + *(int *)(v29 + 44)), v24, v25, v26, v27);
  v30 = type metadata accessor for Text.Case(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v8, 1, 1, v30);
  KeyPath = swift_getKeyPath(&unk_100079DA0);
  v32 = *(int *)(v12 + 36);
  v41 = a2;
  v33 = (uint64_t *)&v14[v32];
  v34 = sub_1000187A4(&qword_1000B4C88);
  sub_1000121BC((uint64_t)v8, (uint64_t)v33 + *(int *)(v34 + 28), &qword_1000B4C60);
  *v33 = KeyPath;
  sub_1000121BC((uint64_t)v11, (uint64_t)v14, &qword_1000B4C68);
  sub_100011DE0((uint64_t)v8, &qword_1000B4C60);
  v35 = sub_100011DE0((uint64_t)v11, &qword_1000B4C68);
  v36 = static VerticalEdge.Set.all.getter(v35);
  v37 = sub_100040054();
  View.listRowSeparator(_:edges:)(2, v36, v12, v37);
  sub_100011DE0((uint64_t)v14, &qword_1000B4C70);
  v38 = v41;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v41, v18, v15);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v38, 0, 1, v15);
}

uint64_t sub_10003F468@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  void *v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[2];
  _QWORD v40[4];
  char v41;
  _OWORD v42[6];
  _OWORD v43[2];
  _OWORD v44[6];
  _OWORD v45[3];

  v12 = sub_1000187A4(&qword_1000B4CA8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v32 - v16;
  v18 = *(_QWORD *)(a1 + 16);
  KeyPath = swift_getKeyPath(&unk_100079CE0);
  v20 = swift_getKeyPath(&unk_100079D08);
  static Published.subscript.getter(v44, v18, KeyPath, v20);
  swift_release(KeyPath);
  swift_release(v20);
  v21 = *(void **)&v44[0];
  v22 = objc_msgSend(*(id *)&v44[0], "gradient");

  *(double *)v40 = a3;
  *(double *)&v40[1] = a4;
  *(double *)&v40[2] = a5;
  *(double *)&v40[3] = a6;
  v41 = 0;
  sub_10003EB8C(a1, (uint64_t)v40, &v33);

  sub_10003CA30((uint64_t)v17);
  sub_1000121BC((uint64_t)v17, (uint64_t)v15, &qword_1000B4CA8);
  v23 = v37;
  v24 = v38;
  v42[4] = v37;
  v42[5] = v38;
  v25 = v39[0];
  v43[0] = v39[0];
  *(_OWORD *)((char *)v43 + 12) = *(_OWORD *)((char *)v39 + 12);
  v26 = v33;
  v27 = v34;
  v42[0] = v33;
  v42[1] = v34;
  v28 = v35;
  v29 = v36;
  v42[2] = v35;
  v42[3] = v36;
  *(_OWORD *)((char *)a2 + 108) = *(_OWORD *)((char *)v39 + 12);
  a2[5] = v24;
  a2[6] = v25;
  a2[3] = v29;
  a2[4] = v23;
  a2[1] = v27;
  a2[2] = v28;
  *a2 = v26;
  v30 = sub_1000187A4(&qword_1000B4CB0);
  sub_1000121BC((uint64_t)v15, (uint64_t)a2 + *(int *)(v30 + 48), &qword_1000B4CA8);
  sub_1000401B0((uint64_t)v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_1000400F0);
  sub_100011DE0((uint64_t)v17, &qword_1000B4CA8);
  sub_100011DE0((uint64_t)v15, &qword_1000B4CA8);
  v44[4] = v37;
  v44[5] = v38;
  v45[0] = v39[0];
  *(_OWORD *)((char *)v45 + 12) = *(_OWORD *)((char *)v39 + 12);
  v44[0] = v33;
  v44[1] = v34;
  v44[2] = v35;
  v44[3] = v36;
  return sub_1000401B0((uint64_t)v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_100040224);
}

uint64_t sub_10003F6AC()
{
  return sub_100008C6C(56);
}

uint64_t sub_10003F6B4(uint64_t a1)
{
  uint64_t v1;

  return sub_10003D9EC(a1, v1 + 16);
}

uint64_t sub_10003F6BC(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 8);
  return a1;
}

uint64_t sub_10003F6E4(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 8));
  return a1;
}

unint64_t sub_10003F714()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4B48;
  if (!qword_1000B4B48)
  {
    v1 = sub_1000176F8(&qword_1000B4B40);
    sub_100014668(&qword_1000B4B50, &qword_1000B4B58, (void (*)(void))sub_10003F7B0);
    sub_1000041E8(&qword_1000B4B80, type metadata accessor for ScrollVerticallyTestSupport, (uint64_t)&unk_10007C6CC);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4B48);
  }
  return result;
}

unint64_t sub_10003F7B0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  result = qword_1000B4B60;
  if (!qword_1000B4B60)
  {
    v1 = sub_1000176F8(&qword_1000B4B68);
    v2 = sub_1000176F8(&qword_1000B4B70);
    v3 = type metadata accessor for PlainListStyle(255);
    v4 = sub_1000086E8(&qword_1000B4B78, &qword_1000B4B70, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    v6 = v2;
    v7 = v3;
    v8 = v4;
    v9 = &protocol witness table for PlainListStyle;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    v5 = type metadata accessor for InsetListStyle(255);
    v6 = v2;
    v7 = v5;
    v8 = v4;
    v9 = &protocol witness table for InsetListStyle;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4B60);
  }
  return result;
}

uint64_t sub_10003F8B8()
{
  return sub_100008C6C(56);
}

uint64_t sub_10003F8C0@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v2;

  return sub_10003B7A8(a1, v2 + 16, a2);
}

uint64_t sub_10003F8C8()
{
  return sub_100008C6C(56);
}

uint64_t sub_10003F8D0()
{
  return sub_10003FD00((uint64_t (*)(_QWORD))&type metadata accessor for GeometryProxy);
}

uint64_t sub_10003F8DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GeometryProxy(0) - 8) + 80);
  return sub_10003B8A8(a1, (uint64_t *)(v2 + 16), v2 + ((v5 + 56) & ~v5), a2);
}

uint64_t sub_10003F934@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10003C23C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10003F93C()
{
  return sub_100008C6C(64);
}

uint64_t sub_10003F944@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10003F17C(v1 + 16, a1, *(double *)(v1 + 56));
}

uint64_t sub_10003F950@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10003F978(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_10003F9A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10003F9C8(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_10003F9F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.listRowSpacing.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10003FA20(uint64_t a1)
{
  return EnvironmentValues.listRowSpacing.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_10003FA54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for ScrollViewProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10003FAB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ScrollViewProxy(0) - 8) + 80);
  return sub_10003D1C8(v0 + ((v1 + 16) & ~v1), v2);
}

unint64_t sub_10003FAE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4C00;
  if (!qword_1000B4C00)
  {
    v1 = sub_1000176F8(&qword_1000B4BC0);
    sub_10003FB64();
    sub_1000086E8(&qword_1000B4C38, &qword_1000B4C40, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4C00);
  }
  return result;
}

unint64_t sub_10003FB64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4C08;
  if (!qword_1000B4C08)
  {
    v1 = sub_1000176F8(&qword_1000B4BB8);
    sub_10003FBE8();
    sub_1000086E8(&qword_1000B4C28, &qword_1000B4C30, (uint64_t)&protocol conformance descriptor for _CoordinateSpaceModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4C08);
  }
  return result;
}

unint64_t sub_10003FBE8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000B4C10;
  if (!qword_1000B4C10)
  {
    v1 = sub_1000176F8(&qword_1000B4BB0);
    v2[0] = sub_1000176F8(&qword_1000B4BA0);
    v2[1] = sub_1000086E8(&qword_1000B4BF8, &qword_1000B4BA0, (uint64_t)&protocol conformance descriptor for List<A, B>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:alignment:)>>, 1);
    sub_1000086E8(&qword_1000B4C18, &qword_1000B4C20, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4C10);
  }
  return result;
}

uint64_t sub_10003FCB4(unint64_t *a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100006578(255, a2, a3);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003FCF4()
{
  return sub_10003FD00((uint64_t (*)(_QWORD))&type metadata accessor for ScrollViewProxy);
}

uint64_t sub_10003FD00(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 56) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;

  swift_release(*(_QWORD *)(v1 + 48));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

void sub_10003FD80(uint64_t a1, id *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ScrollViewProxy(0) - 8) + 80);
  sub_10003D230(a1, a2, v2 + 16, v2 + ((v5 + 56) & ~v5));
}

unint64_t sub_10003FDD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4C48;
  if (!qword_1000B4C48)
  {
    v1 = sub_1000176F8(&qword_1000B48B8);
    sub_10003FCB4(&qword_1000B4C50, (unint64_t *)&qword_1000B42F0, TPSTip_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4C48);
  }
  return result;
}

uint64_t sub_10003FE54()
{
  return sub_100008C6C(56);
}

uint64_t sub_10003FE5C()
{
  uint64_t v0;

  return sub_10003D4DC(v0 + 16);
}

uint64_t sub_10003FE64()
{
  return sub_100008C6C(56);
}

void sub_10003FE6C()
{
  uint64_t v0;

  sub_10003D7A8(v0 + 16);
}

uint64_t sub_10003FE7C()
{
  uint64_t *v0;

  return sub_10003D414(v0[2], v0[3], v0[4]);
}

double sub_10003FE98(uint64_t a1, char a2, unint64_t a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t KeyPath;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;

  v8 = type metadata accessor for NamedCoordinateSpace(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100079EE0);
  v13 = swift_getKeyPath(&unk_100079F08);
  static Published.subscript.getter(&v25, a1, KeyPath, v13);
  swift_release(KeyPath);
  swift_release(v13);
  v14 = *(double *)&v25;
  v25 = 1953720684;
  v26 = 0xE400000000000000;
  static CoordinateSpaceProtocol<>.named<A>(_:)(&v25, &type metadata for String, &protocol witness table for String);
  v15 = GeometryProxy.frame<A>(in:)(v11, v8, &protocol witness table for NamedCoordinateSpace);
  v17 = v16;
  v18 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  GeometryProxy.size.getter(v18);
  v20 = 0.0;
  if (round(v19) < a4 && round(v14 + v17) < a4)
    v20 = v14 + v17;
  LOBYTE(v25) = a2 & 1;
  v26 = a3;
  v24 = v20 != 0.0;
  v21 = sub_1000187A4(&qword_1000B4738);
  State.wrappedValue.setter(&v24, v21);
  return v15;
}

unint64_t sub_100040054()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4C90;
  if (!qword_1000B4C90)
  {
    v1 = sub_1000176F8(&qword_1000B4C70);
    sub_1000086E8(&qword_1000B4C98, &qword_1000B4C68, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_1000086E8(&qword_1000B4CA0, &qword_1000B4C88, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4C90);
  }
  return result;
}

uint64_t sub_1000400F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int a17, char a18)
{
  if ((a18 & 1) != 0)
    return swift_retain(a1);
  sub_100040194(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11 & 1);
  return sub_1000401A4(a12, a13, a14, a15, a16, a17, BYTE2(a17) & 1);
}

uint64_t sub_100040194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11)
{
  if ((a11 & 1) == 0)
    a1 = a5;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_1000401A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) == 0)
    a1 = a5;
  return swift_retain(a1);
}

uint64_t sub_1000401B0(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))
{
  uint64_t v4;

  BYTE4(v4) = *(_BYTE *)(a1 + 123);
  LODWORD(v4) = *(unsigned __int16 *)(a1 + 120) | (*(unsigned __int8 *)(a1 + 122) << 16);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), v4);
  return a1;
}

uint64_t sub_100040224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int a17, char a18)
{
  if ((a18 & 1) != 0)
    return swift_release(a1);
  sub_1000402C8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11 & 1);
  return sub_1000402D8(a12, a13, a14, a15, a16, a17, BYTE2(a17) & 1);
}

uint64_t sub_1000402C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11)
{
  if ((a11 & 1) == 0)
    a1 = a5;
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_1000402D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) == 0)
    a1 = a5;
  return swift_release(a1);
}

uint64_t sub_1000402E4()
{
  return sub_100008C6C(56);
}

uint64_t sub_1000402EC(double a1, double a2)
{
  uint64_t v2;
  double *v3;

  v3 = (double *)(*(_QWORD *)(v2 + 32) + qword_1000B90D0);
  *v3 = a1;
  v3[1] = a2;
  return sub_100050AC4();
}

uint64_t sub_100040320()
{
  return sub_100040ACC(&qword_1000B4CF0, &qword_1000B4CC8, (void (*)(void))sub_100040344);
}

unint64_t sub_100040344()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4CF8;
  if (!qword_1000B4CF8)
  {
    v1 = sub_1000176F8(&qword_1000B4CC0);
    sub_1000086E8(&qword_1000B4D00, &qword_1000B4CB8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4CF8);
  }
  return result;
}

uint64_t sub_1000403D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000403F8(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_100040420@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100040448(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

double sub_100040470(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_10004048C(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a4)
  {
    sub_100031A98(result, a2, a3 & 1);
    swift_retain(a16);
    swift_bridgeObjectRetain(a4);
    swift_retain(a5);
    swift_retain(a7);
    swift_retain(a8);
    return swift_retain(a15);
  }
  return result;
}

uint64_t sub_100040504(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_DWORD *)(a1 + 128));
  return a1;
}

uint64_t sub_100040568(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a4)
  {
    sub_100014658(result, a2, a3 & 1);
    swift_release(a15);
    swift_release(a7);
    swift_release(a5);
    swift_bridgeObjectRelease(a4);
    swift_release(a8);
    return swift_release(a16);
  }
  return result;
}

unint64_t sub_1000405E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4D50;
  if (!qword_1000B4D50)
  {
    v1 = sub_1000176F8(&qword_1000B4D48);
    sub_10004066C();
    sub_1000086E8(&qword_1000B4DC8, &qword_1000B4DD0, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4D50);
  }
  return result;
}

unint64_t sub_10004066C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4D58;
  if (!qword_1000B4D58)
  {
    v1 = sub_1000176F8(&qword_1000B4D60);
    sub_1000406F0();
    sub_1000086E8(&qword_1000B4DB8, &qword_1000B4DC0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4D58);
  }
  return result;
}

unint64_t sub_1000406F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4D68;
  if (!qword_1000B4D68)
  {
    v1 = sub_1000176F8(&qword_1000B4D70);
    sub_100040ACC(&qword_1000B4D78, &qword_1000B4D80, (void (*)(void))sub_100040794);
    sub_1000086E8(&qword_1000B4DA8, &qword_1000B4DB0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4D68);
  }
  return result;
}

unint64_t sub_100040794()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4D88;
  if (!qword_1000B4D88)
  {
    v1 = sub_1000176F8(&qword_1000B4D90);
    sub_1000086E8(&qword_1000B4D98, &qword_1000B4DA0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4D88);
  }
  return result;
}

uint64_t sub_100040818(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 120);
  sub_100014658(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v6);
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v5);
  swift_release(v7);
  return a1;
}

uint64_t sub_10004089C(uint64_t result)
{
  *(_BYTE *)(result + 123) = 1;
  return result;
}

unint64_t sub_1000408A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4DF0;
  if (!qword_1000B4DF0)
  {
    v1 = sub_1000176F8(&qword_1000B4DE8);
    sub_100014668(&qword_1000B4DF8, &qword_1000B4E00, (void (*)(void))sub_100040944);
    sub_1000086E8(&qword_1000B4E38, &qword_1000B4E40, (uint64_t)&protocol conformance descriptor for _MaskEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4DF0);
  }
  return result;
}

unint64_t sub_100040944()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4E08;
  if (!qword_1000B4E08)
  {
    v1 = sub_1000176F8(&qword_1000B4E10);
    sub_1000086E8(&qword_1000B4E18, &qword_1000B4E20, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    sub_1000086E8(&qword_1000B4E28, &qword_1000B4E30, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4E08);
  }
  return result;
}

uint64_t sub_1000409E8(uint64_t result)
{
  *(_BYTE *)(result + 123) = 0;
  return result;
}

uint64_t sub_1000409F0(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;

  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 112);
  v10 = *(unsigned __int8 *)(a1 + 122);
  v11 = *(unsigned __int16 *)(a1 + 120);
  BYTE2(v13) = *(_BYTE *)(a1 + 74);
  LOWORD(v13) = *(_WORD *)(a1 + 72);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v13);
  a3(v5, v6, v7, v8, v9, v11, v10);
  return a1;
}

uint64_t sub_100040AA8()
{
  return sub_100040ACC(&qword_1000B4EC0, &qword_1000B4E80, (void (*)(void))sub_100040B34);
}

uint64_t sub_100040ACC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000176F8(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100040B34()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000B4EC8;
  if (!qword_1000B4EC8)
  {
    v1 = sub_1000176F8(&qword_1000B4CA8);
    v2[0] = sub_1000176F8(&qword_1000B4CD0);
    v2[1] = sub_100040ACC(&qword_1000B4CE8, &qword_1000B4CD0, (void (*)(void))sub_100040320);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.readScrollOffset(onChange:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4EC8);
  }
  return result;
}

uint64_t sub_100040BF8()
{
  return sub_100008C6C(56);
}

unint64_t sub_100040C00@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10003CE28(a1, v2 + 16, a2);
}

unint64_t sub_100040C08()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000B4EE0;
  if (!qword_1000B4EE0)
  {
    v1 = sub_1000176F8(&qword_1000B4ED0);
    v2[0] = type metadata accessor for TipListItemView(255);
    v2[1] = sub_1000041E8(&qword_1000B4EE8, type metadata accessor for TipListItemView, (uint64_t)&unk_10007BFE0);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.listRowSeparator(_:edges:)>>, 1);
    sub_1000086E8(&qword_1000B4EF0, &qword_1000B4EF8, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4EE0);
  }
  return result;
}

uint64_t sub_100040CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TipListItemView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100040D14(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TipListItemView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100040D54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4F10;
  if (!qword_1000B4F10)
  {
    v1 = sub_1000176F8(qword_1000B4F18);
    sub_1000086E8(&qword_1000B4B38, &qword_1000B4B30, (uint64_t)&protocol conformance descriptor for ScrollViewReader<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4F10);
  }
  return result;
}

uint64_t sub_100040DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

void sub_100040DE4(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 16));

}

_QWORD *sub_100040E14(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v5 = a2[2];
  v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  v6 = (void *)a2[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v3);
  swift_retain(v5);
  v7 = v6;
  return a1;
}

_QWORD *sub_100040E64(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = (void *)a2[4];
  v9 = (void *)a1[4];
  a1[4] = v8;
  v10 = v8;

  return a1;
}

_QWORD *sub_100040EE4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = (void *)a1[4];
  a1[3] = *(_QWORD *)(a2 + 24);
  a1[4] = v5;

  return a1;
}

uint64_t sub_100040F38(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_100040F80(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for SearchResultsListView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002FEB0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchResultsListView);
}

uint64_t sub_100040FD4(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10008E62C, 1);
}

uint64_t sub_100041008@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v4 = sub_100041094(0, 0);
  v6 = v5;
  v8 = v7;
  v9 = type metadata accessor for SearchResultsViewModel(0);
  v10 = sub_1000041E8((unint64_t *)&qword_1000B41A0, type metadata accessor for SearchResultsViewModel, (uint64_t)&protocol conformance descriptor for TipNavigationViewModel);
  result = ObservedObject.init(wrappedValue:)(a1, v9, v10);
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v8;
  a2[3] = result;
  a2[4] = v12;
  return result;
}

uint64_t sub_100041094(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[2];
  uint64_t v5;

  v4[0] = a1;
  v4[1] = a2;
  v2 = sub_1000187A4(&qword_1000B4198);
  State.init(wrappedValue:)(&v5, v4, v2);
  return v5;
}

uint64_t sub_1000410D4()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_1000187A4(&qword_1000B4FC0);
  State.wrappedValue.getter(&v2, v0);
  return v2;
}

uint64_t sub_100041120()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_1000187A4(&qword_1000B4FC0);
  State.projectedValue.getter(&v2, v0);
  return v2;
}

uint64_t sub_100041170@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t WitnessTable;
  unint64_t v14;
  void *v15;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  char *v36;
  void *v37;
  uint64_t v38;
  __int128 v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  void *v48;
  id v49;
  uint64_t v50;
  char *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  void (*v64)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  char *v72;
  char *v73;
  void *v74;
  uint64_t v75;
  char *v76;
  uint64_t OpaqueTypeConformance2;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char v94[16];
  void *v95;
  uint64_t v96;
  __int128 *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  char v110[8];

  v3 = v2;
  v93 = a2;
  v5 = type metadata accessor for PlainListStyle(0);
  v92 = *(_QWORD *)(v5 - 8);
  v6 = (void *)v5;
  __chkstk_darwin(v5);
  v91 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(a1 + 16);
  v67 = *(_QWORD *)(a1 + 24);
  v71 = *(void **)(v67 + 8);
  v102 = &type metadata for String;
  v103 = v8;
  v104 = &protocol witness table for String;
  v105 = v71;
  v9 = type metadata accessor for List(0, &v102);
  v87 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v66 - v10;
  v12 = sub_1000176F8(&qword_1000B4198);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for List<A, B>, v9);
  v14 = sub_100041E94();
  v102 = (void *)v9;
  v103 = (void *)v12;
  v70 = v12;
  v104 = (void *)WitnessTable;
  v105 = (void *)v14;
  v69 = WitnessTable;
  v15 = (void *)v14;
  v68 = v14;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v102, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v88 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v83 = OpaqueTypeMetadata2;
  __chkstk_darwin(OpaqueTypeMetadata2);
  v72 = (char *)&v66 - v17;
  v18 = type metadata accessor for ModifiedContent(0);
  v90 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v79 = (char *)&v66 - v19;
  v102 = (void *)v9;
  v103 = (void *)v12;
  v104 = (void *)WitnessTable;
  v105 = v15;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v102, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v100 = OpaqueTypeConformance2;
  v101 = &protocol witness table for _AppearanceActionModifier;
  v20 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v18);
  v102 = (void *)v18;
  v103 = v6;
  v74 = v6;
  v104 = (void *)v20;
  v105 = &protocol witness table for PlainListStyle;
  v75 = v20;
  v21 = swift_getOpaqueTypeMetadata2(0, &v102, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (void *)v21;
  v81 = v21;
  v89 = v22;
  __chkstk_darwin(v21);
  v73 = (char *)&v66 - v24;
  v102 = (void *)v18;
  v103 = v6;
  v104 = (void *)v20;
  v105 = &protocol witness table for PlainListStyle;
  v80 = swift_getOpaqueTypeConformance2(&v102, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
  v102 = v23;
  v103 = &type metadata for Color;
  v104 = (void *)v80;
  v105 = &protocol witness table for Color;
  v25 = swift_getOpaqueTypeMetadata2(0, &v102, &opaque type descriptor for <<opaque return type of View.scrollContentBackground<A>(_:)>>, 0);
  v86 = *(_QWORD *)(v25 - 8);
  v82 = v25;
  __chkstk_darwin(v25);
  v76 = (char *)&v66 - v26;
  sub_1000176F8(&qword_1000B4FA8);
  v27 = type metadata accessor for ModifiedContent(0);
  v85 = *(_QWORD *)(v27 - 8);
  v28 = __chkstk_darwin(v27);
  v78 = (char *)&v66 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v84 = (char *)&v66 - v30;
  v102 = (void *)sub_100041120();
  v103 = v31;
  v104 = v32;
  v105 = v33;
  v34 = v8;
  v35 = v67;
  v95 = v8;
  v96 = v67;
  v97 = v3;
  v36 = v11;
  List.init(selection:content:)(&v102, sub_100041EF0, v94, &type metadata for String, v34, &protocol witness table for String, v71);
  v102 = (void *)sub_1000410D4();
  v103 = v37;
  v107 = *v3;
  v108 = *((_QWORD *)v3 + 2);
  sub_100014780((uint64_t)&v107, (uint64_t)v110, &qword_1000B4198);
  sub_100014780((uint64_t)&v108, (uint64_t)&v109, &qword_1000B4FB0);
  v106 = *(__int128 *)((char *)v3 + 24);
  v38 = swift_allocObject(&unk_1000A3B80, 72, 7);
  *(_QWORD *)(v38 + 16) = v34;
  *(_QWORD *)(v38 + 24) = v35;
  v39 = v3[1];
  *(_OWORD *)(v38 + 32) = *v3;
  *(_OWORD *)(v38 + 48) = v39;
  *(_QWORD *)(v38 + 64) = *((_QWORD *)v3 + 4);
  sub_100041F0C((uint64_t)v110);
  sub_100041F34(&v109);
  sub_10003F6BC((uint64_t)&v106);
  v40 = v72;
  View.onChange<A>(of:initial:_:)(&v102, 0, sub_100041F00, v38, v9, v70, v69, v68);
  swift_release(v38);
  swift_bridgeObjectRelease(v103);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v36, v9);
  v41 = swift_allocObject(&unk_1000A3BA8, 72, 7);
  *(_QWORD *)(v41 + 16) = v34;
  *(_QWORD *)(v41 + 24) = v35;
  v42 = v3[1];
  *(_OWORD *)(v41 + 32) = *v3;
  *(_OWORD *)(v41 + 48) = v42;
  *(_QWORD *)(v41 + 64) = *((_QWORD *)v3 + 4);
  sub_100041F0C((uint64_t)v110);
  sub_100041F34(&v109);
  sub_10003F6BC((uint64_t)&v106);
  v43 = v79;
  v44 = v83;
  View.onAppear(perform:)(sub_100041F60, v41, v83, OpaqueTypeConformance2);
  swift_release(v41);
  v45 = (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v40, v44);
  v46 = v91;
  PlainListStyle.init()(v45);
  v47 = v73;
  v48 = v74;
  View.listStyle<A>(_:)(v46, v18, v74, v75, &protocol witness table for PlainListStyle);
  (*(void (**)(char *, void *))(v92 + 8))(v46, v48);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v43, v18);
  v49 = objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
  v50 = Color.init(_:)(v49);
  v102 = (void *)v50;
  v51 = v76;
  v52 = (void *)v81;
  v53 = (void *)v80;
  View.scrollContentBackground<A>(_:)(&v102, v81, &type metadata for Color, v80, &protocol witness table for Color);
  swift_release(v50);
  v54 = (*(uint64_t (**)(char *, void *))(v89 + 8))(v47, v52);
  v55 = static Edge.Set.all.getter(v54);
  v102 = v52;
  v103 = &type metadata for Color;
  v104 = v53;
  v105 = &protocol witness table for Color;
  v56 = swift_getOpaqueTypeConformance2(&v102, &opaque type descriptor for <<opaque return type of View.scrollContentBackground<A>(_:)>>, 1);
  v57 = v78;
  v58 = v55;
  v59 = v82;
  View.background(ignoresSafeAreaEdges:)(v58, v82, v56);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v51, v59);
  v60 = sub_1000086E8(&qword_1000B4FB8, &qword_1000B4FA8, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
  v98 = v56;
  v99 = v60;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v27);
  v61 = v85;
  v62 = *(void (**)(char *, char *, uint64_t))(v85 + 16);
  v63 = v84;
  v62(v84, v57, v27);
  v64 = *(void (**)(char *, uint64_t))(v61 + 8);
  v64(v57, v27);
  v62(v93, v63, v27);
  return ((uint64_t (*)(char *, uint64_t))v64)(v63, v27);
}

uint64_t sub_100041940@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v7 = *(_QWORD *)(a2 - 8);
  v8 = __chkstk_darwin(a1);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v18 - v12;
  (*(void (**)(id, uint64_t, uint64_t))(v14 + 80))(*(id *)(v11 + 32), a2, a3);
  v15 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v15(v13, v10, a2);
  v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v10, a2);
  v15(a4, v13, a2);
  return ((uint64_t (*)(char *, uint64_t))v16)(v13, a2);
}

uint64_t sub_100041A24(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t KeyPath;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v9 = type metadata accessor for SearchResult.Item.Category(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a2;
  v13 = a2[1];
  v16 = type metadata accessor for SearchResultsListView(0, a4, a5, v15);
  v17 = *(void **)(a3 + 32);
  KeyPath = swift_getKeyPath(&unk_10007A020);
  v19 = swift_getKeyPath(&unk_10007A048);
  v20 = v17;
  static Published.subscript.getter(&v24, v20, KeyPath, v19);
  swift_release(KeyPath);
  swift_release(v19);
  v21 = v24;
  dispatch thunk of SearchResultsModel.updateSelection(to:)(v14, v13);

  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return sub_100041B4C(v16);
}

uint64_t sub_100041B4C(uint64_t a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[5];
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[24];

  v27 = a1;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v5 - 8);
  v30 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v26 - v13;
  sub_100010CA8();
  v15 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)(v12, 0.15);
  v28 = *(void (**)(char *, uint64_t))(v9 + 8);
  v28(v12, v8);
  v35 = *v1;
  v36 = *((_QWORD *)v1 + 2);
  sub_100014780((uint64_t)&v35, (uint64_t)v38, &qword_1000B4198);
  sub_100014780((uint64_t)&v36, (uint64_t)&v37, &qword_1000B4FB0);
  v34 = *(__int128 *)((char *)v1 + 24);
  v16 = swift_allocObject(&unk_1000A3BD0, 72, 7);
  v17 = *v1;
  v18 = v1[1];
  *(_OWORD *)(v16 + 16) = *(_OWORD *)(v27 + 16);
  *(_OWORD *)(v16 + 32) = v17;
  *(_OWORD *)(v16 + 48) = v18;
  *(_QWORD *)(v16 + 64) = *((_QWORD *)v1 + 4);
  aBlock[4] = sub_100041F90;
  v33 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100003DA8;
  aBlock[3] = &unk_1000A3BE8;
  v19 = _Block_copy(aBlock);
  v20 = v33;
  sub_100041F0C((uint64_t)v38);
  sub_100041F34(&v37);
  sub_10003F6BC((uint64_t)&v34);
  v21 = swift_release(v20);
  static DispatchQoS.unspecified.getter(v21);
  aBlock[0] = _swiftEmptyArrayStorage;
  v22 = sub_1000041E8((unint64_t *)&qword_1000B44A8, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_1000187A4(&qword_1000B44B0);
  v24 = sub_1000086E8((unint64_t *)&qword_1000B44B8, &qword_1000B44B0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v2, v22);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v14, v7, v4, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v30);
  return ((uint64_t (*)(char *, uint64_t))v28)(v14, v8);
}

uint64_t sub_100041E5C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_100041170(a1, a2);
}

unint64_t sub_100041E94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4FA0;
  if (!qword_1000B4FA0)
  {
    v1 = sub_1000176F8(&qword_1000B4198);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4FA0);
  }
  return result;
}

uint64_t sub_100041EF0@<X0>(char *a1@<X8>)
{
  uint64_t *v1;

  return sub_100041940(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100041F00(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100041A24(a1, a2, v2 + 32, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100041F0C(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

_QWORD *sub_100041F34(_QWORD *a1)
{
  swift_retain(*a1);
  return a1;
}

uint64_t sub_100041F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = type metadata accessor for SearchResultsListView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return sub_100041B4C(v5);
}

uint64_t sub_100041F90()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[2];
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 48);
  v3[0] = 0;
  v3[1] = 0;
  v1 = sub_1000187A4(&qword_1000B4FC0);
  return State.wrappedValue.setter(v3, v1);
}

uint64_t sub_100041FE0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10007A020);
  v5 = swift_getKeyPath(&unk_10007A048);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10004205C(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10007A020);
  v5 = swift_getKeyPath(&unk_10007A048);
  v7 = v2;
  swift_retain(v2);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_1000420D8(void **a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t WitnessTable;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v12;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v1 = *a1;
  v2 = (void *)*((_QWORD *)a1[1] + 1);
  v14 = &type metadata for String;
  v15 = v1;
  v16 = &protocol witness table for String;
  v17 = v2;
  v3 = type metadata accessor for List(255, &v14);
  v4 = sub_1000176F8(&qword_1000B4198);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for List<A, B>, v3);
  v6 = sub_100041E94();
  v14 = (void *)v3;
  v15 = (void *)v4;
  v16 = (void *)WitnessTable;
  v17 = (void *)v6;
  swift_getOpaqueTypeMetadata2(255, &v14, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v7 = type metadata accessor for ModifiedContent(255);
  v8 = type metadata accessor for PlainListStyle(255);
  v14 = (void *)v3;
  v15 = (void *)v4;
  v16 = (void *)WitnessTable;
  v17 = (void *)v6;
  swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v9 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v7);
  v14 = (void *)v7;
  v15 = (void *)v8;
  v16 = (void *)v9;
  v17 = &protocol witness table for PlainListStyle;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v14, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 0);
  v14 = (void *)v7;
  v15 = (void *)v8;
  v16 = (void *)v9;
  v17 = &protocol witness table for PlainListStyle;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
  v14 = (void *)OpaqueTypeMetadata2;
  v15 = &type metadata for Color;
  v16 = (void *)OpaqueTypeConformance2;
  v17 = &protocol witness table for Color;
  swift_getOpaqueTypeMetadata2(255, &v14, &opaque type descriptor for <<opaque return type of View.scrollContentBackground<A>(_:)>>, 0);
  sub_1000176F8(&qword_1000B4FA8);
  v12 = type metadata accessor for ModifiedContent(255);
  v14 = (void *)OpaqueTypeMetadata2;
  v15 = &type metadata for Color;
  v16 = (void *)OpaqueTypeConformance2;
  v17 = &protocol witness table for Color;
  swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of View.scrollContentBackground<A>(_:)>>, 1);
  sub_1000086E8(&qword_1000B4FB8, &qword_1000B4FA8, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
}

uint64_t sub_1000422E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v2 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002ALL, 0x800000010008C800);
  v3 = Text.init(_:tableName:bundle:comment:)(v2);
  v5 = v4;
  v7 = v6;
  v9 = v8 & 1;
  v10 = static Color.blue.getter();
  v19 = v10;
  v11 = Text.foregroundStyle<A>(_:)(&v19, v3, v5, v9, v7, &type metadata for Color, &protocol witness table for Color);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  sub_100014658(v3, v5, v9);
  swift_release(v10);
  result = swift_bridgeObjectRelease(v7);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v15 & 1;
  *(_QWORD *)(a1 + 24) = v17;
  return result;
}

uint64_t sub_1000423F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = type metadata accessor for SearchResultsViewModel(0);
  v5 = sub_100019AF0();
  result = ObservedObject.init(wrappedValue:)(a1, v4, v5);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

uint64_t sub_100042454()
{
  void *v0;
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;

  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = objc_msgSend(v0, "variantID");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  URL.init(string:)(0xD00000000000001ELL, 0x800000010008C880);
  return swift_bridgeObjectRelease(0x800000010008C880);
}

void sub_100042514()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  objc_class *v11;
  id v12;
  id v13;
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  void *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  Class isa;
  id v24;
  uint64_t v25;
  Class v26;
  id v27;
  void *v28;
  id v29;
  __int128 v30;
  uint64_t v31;

  v1 = v0;
  v2 = sub_1000187A4(&qword_1000B4698);
  __chkstk_darwin(v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!objc_msgSend((id)objc_opt_self(TPSFeatureFlags), "allowsTipsSharing"))
    return;
  v9 = objc_msgSend(v0, "currentTip");
  if (!v9)
  {
    __break(1u);
    goto LABEL_14;
  }
  v10 = v9;
  v11 = (objc_class *)type metadata accessor for TPSSharingActivityItemSource();
  v12 = objc_allocWithZone(v11);
  v13 = sub_1000632E4(v10);

  v14 = sub_1000187A4(&qword_1000B4FC8);
  v15 = (char *)swift_allocObject(v14, 64, 7);
  *((_OWORD *)v15 + 1) = xmmword_1000791F0;
  *((_QWORD *)v15 + 7) = v11;
  *((_QWORD *)v15 + 4) = v13;
  v16 = v13;
  v17 = objc_msgSend(v1, "currentTip");
  if (!v17)
  {
LABEL_14:
    __break(1u);
    return;
  }
  v18 = v17;
  sub_100042454();

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100011DE0((uint64_t)v4, &qword_1000B4698);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    v31 = v5;
    v19 = sub_100033CFC(&v30);
    (*(void (**)(_QWORD *, char *, uint64_t))(v6 + 16))(v19, v8, v5);
    v21 = *((_QWORD *)v15 + 2);
    v20 = *((_QWORD *)v15 + 3);
    if (v21 >= v20 >> 1)
      v15 = sub_1000428C0((char *)(v20 > 1), v21 + 1, 1, v15);
    *((_QWORD *)v15 + 2) = v21 + 1;
    sub_100018DC8(&v30, &v15[32 * v21 + 32]);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  v22 = objc_allocWithZone((Class)UIActivityViewController);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v15);
  v24 = objc_msgSend(v22, "initWithActivityItems:applicationActivities:", isa, 0);

  v25 = sub_1000429C4();
  type metadata accessor for ActivityType(0);
  v26 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v25);
  objc_msgSend(v24, "setExcludedActivityTypes:", v26);

  v27 = objc_msgSend(v24, "popoverPresentationController");
  if (v27)
  {
    v28 = v27;
    v29 = objc_msgSend(v1, "shareBarButton");
    objc_msgSend(v28, "setSourceItem:", v29);

  }
  objc_msgSend(v1, "presentViewController:animated:completion:", v24, 1, 0);

}

char *sub_1000428C0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000187A4(&qword_1000B4FC8);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, (char *)&type metadata for Any + 8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_1000429C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSString *v4;
  NSString *v5;
  NSString *v6;
  NSString *v7;
  NSString *v8;
  NSString *v9;
  NSString *v10;
  NSString *v11;
  NSString *v12;
  NSString *v13;
  NSString *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v0 = sub_1000187A4(&qword_1000B4FD0);
  v1 = swift_allocObject(v0, 152, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10007A0B0;
  *(_QWORD *)(v1 + 32) = UIActivityTypeAssignToContact;
  *(_QWORD *)(v1 + 40) = UIActivityTypePrint;
  *(_QWORD *)(v1 + 48) = UIActivityTypeSaveToCameraRoll;
  *(_QWORD *)(v1 + 56) = UIActivityTypeAddToReadingList;
  *(_QWORD *)(v1 + 64) = UIActivityTypePostToFlickr;
  *(_QWORD *)(v1 + 72) = UIActivityTypePostToVimeo;
  *(_QWORD *)(v1 + 80) = UIActivityTypePostToTencentWeibo;
  *(_QWORD *)(v1 + 88) = UIActivityTypeMarkupAsPDF;
  *(_QWORD *)(v1 + 96) = UIActivityTypeCollaborationInviteWithLink;
  *(_QWORD *)(v1 + 104) = UIActivityTypeCollaborationCopyLink;
  v2 = UIActivityTypeUserDefaults;
  v21 = (void *)UIActivityTypeUserDefaults;
  *(_QWORD *)(v1 + 112) = UIActivityTypeAddToHomeScreen;
  *(_QWORD *)(v1 + 120) = v2;
  v20 = (void *)UIActivityTypeCreateReminder;
  v3 = UIActivityTypeSaveToFiles;
  v22 = (void *)UIActivityTypeSaveToFiles;
  *(_QWORD *)(v1 + 128) = UIActivityTypeCreateReminder;
  *(_QWORD *)(v1 + 136) = v3;
  v23 = (void *)UIActivityTypeBoxInvite;
  *(_QWORD *)(v1 + 144) = UIActivityTypeBoxInvite;
  v4 = UIActivityTypeAssignToContact;
  v5 = UIActivityTypePrint;
  v6 = UIActivityTypeSaveToCameraRoll;
  v7 = UIActivityTypeAddToReadingList;
  v8 = UIActivityTypePostToFlickr;
  v9 = UIActivityTypePostToVimeo;
  v10 = UIActivityTypePostToTencentWeibo;
  v11 = UIActivityTypeMarkupAsPDF;
  v12 = UIActivityTypeCollaborationInviteWithLink;
  v13 = UIActivityTypeCollaborationCopyLink;
  v14 = UIActivityTypeAddToHomeScreen;
  v15 = v21;
  v16 = v20;
  v17 = v22;
  v18 = v23;
  return v1;
}

ValueMetadata *type metadata accessor for SearchResultsEmptyView()
{
  return &type metadata for SearchResultsEmptyView;
}

uint64_t sub_100042B84(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008E780, 1);
}

uint64_t sub_100042B94@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;

  v4 = *v1;
  v3 = v1[1];
  v5 = (void *)objc_opt_self(UIColor);
  swift_bridgeObjectRetain(v3);
  v6 = Color.init(_:)(objc_msgSend(v5, "systemBackgroundColor"));
  result = static Edge.Set.all.getter();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ContentUnavailableView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for ContentUnavailableView(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *_s4Tips22SearchResultsEmptyViewVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for ContentUnavailableView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CollectionListView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CollectionListView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentUnavailableView()
{
  return &type metadata for ContentUnavailableView;
}

unint64_t sub_100042D40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4FD8;
  if (!qword_1000B4FD8)
  {
    v1 = sub_1000176F8(&qword_1000B4FE0);
    sub_100042DAC();
    sub_100042DF0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4FD8);
  }
  return result;
}

unint64_t sub_100042DAC()
{
  unint64_t result;

  result = qword_1000B4FE8;
  if (!qword_1000B4FE8)
  {
    result = swift_getWitnessTable(&unk_10007A148, &type metadata for ContentUnavailableView);
    atomic_store(result, (unint64_t *)&qword_1000B4FE8);
  }
  return result;
}

unint64_t sub_100042DF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4FF0;
  if (!qword_1000B4FF0)
  {
    v1 = sub_1000176F8(&qword_1000B4FF8);
    result = swift_getWitnessTable(&protocol conformance descriptor for _BackgroundStyleModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B4FF0);
  }
  return result;
}

void *sub_100042E3C()
{
  return &protocol witness table for Never;
}

id sub_100042E48(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  _BYTE v22[16];

  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v22[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = objc_msgSend((id)objc_opt_self(UIContentUnavailableConfiguration), "searchConfiguration");
  v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v11 = a1 & 0xFFFFFFFFFFFFLL;
  if (v11)
  {
    v12 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x800000010008C8A0);
    static Locale.current.getter(v12);
    v13 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, 0, v6, "No Results found for the given search term", 42, 2);
    v15 = v14;
    v16 = sub_1000187A4(&qword_1000B48F8);
    v17 = swift_allocObject(v16, 72, 7);
    *(_OWORD *)(v17 + 16) = xmmword_1000791F0;
    *(_QWORD *)(v17 + 56) = &type metadata for String;
    *(_QWORD *)(v17 + 64) = sub_100037CA8();
    *(_QWORD *)(v17 + 32) = a1;
    *(_QWORD *)(v17 + 40) = a2;
    swift_bridgeObjectRetain(a2);
    static String.localizedStringWithFormat(_:_:)(v13, v15, v17);
    v19 = v18;
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v15);
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
    objc_msgSend(v10, "setText:", v20);

  }
  return v10;
}

id sub_10004301C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  id v3;
  id v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = objc_msgSend(objc_allocWithZone((Class)UIViewController), "init");
  v4 = sub_100042E48(v1, v2);
  objc_msgSend(v3, "_setContentUnavailableConfiguration:", v4);

  return v3;
}

void sub_100043088(void *a1)
{
  uint64_t v1;
  id v3;

  v3 = sub_100042E48(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  objc_msgSend(a1, "_setContentUnavailableConfiguration:", v3);

}

uint64_t sub_1000430DC(uint64_t a1, char a2)
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)(a1, a2 & 1);
}

uint64_t sub_100043114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000431DC();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100043164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000431DC();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000431B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000431DC();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_1000431DC()
{
  unint64_t result;

  result = qword_1000B5000;
  if (!qword_1000B5000)
  {
    result = swift_getWitnessTable(&unk_10007A198, &type metadata for ContentUnavailableView);
    atomic_store(result, (unint64_t *)&qword_1000B5000);
  }
  return result;
}

void sub_100043230(uint64_t a1, void **a2)
{
  void *v2;
  NSString v3;

  v2 = *a2;
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setIdentifier:", v3);

}

double sub_100043280@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000432D8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000B4CB8, &qword_1000B4CC0).n128_u64[0];
  return result;
}

__n128 sub_1000432D8@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v33;
  double v34;
  double v35;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __n128 result;
  unsigned int v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = v17;
  v19 = a9;
  v20 = a17;
  v22 = a14;
  v21 = a15;
  v23 = a12;
  v24 = a10;
  v25 = a2 & 1;
  v26 = a1;
  if ((_DWORD)v25)
    v26 = -INFINITY;
  v27 = a4 & 1;
  v28 = a3;
  if ((_DWORD)v27)
    v28 = v26;
  v29 = a6 & 1;
  v30 = a8 & 1;
  v31 = a5;
  if ((a6 & 1) != 0)
    v31 = v28;
  if (v26 > v28 || v28 > v31)
    goto LABEL_22;
  v33 = a7;
  if ((a8 & 1) != 0)
    v33 = -INFINITY;
  v34 = a10;
  if ((a11 & 1) != 0)
    v34 = v33;
  v35 = a12;
  if ((a13 & 1) != 0)
    v35 = v34;
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    v49 = a5;
    v50 = a7;
    v47 = a3;
    v48 = a1;
    v46 = v25;
    v45 = v27;
    v38 = static os_log_type_t.fault.getter();
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v27 = v45;
    v22 = a14;
    v21 = a15;
    v25 = v46;
    v24 = a10;
    v23 = a12;
    a3 = v47;
    a1 = v48;
    a5 = v49;
    a7 = v50;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v25, *(_QWORD *)&a3, v27, *(_QWORD *)&a5, v29, *(_QWORD *)&a7, v30, *(_QWORD *)&v24, a11 & 1, *(_QWORD *)&v23, a13 & 1, v22, v21);
  sub_1000121BC(v18, v19, a16);
  v41 = v19 + *(int *)(sub_1000187A4(v20) + 36);
  v42 = v51[5];
  *(_OWORD *)(v41 + 64) = v51[4];
  *(_OWORD *)(v41 + 80) = v42;
  *(_OWORD *)(v41 + 96) = v51[6];
  v43 = v51[1];
  *(_OWORD *)v41 = v51[0];
  *(_OWORD *)(v41 + 16) = v43;
  result = (__n128)v51[3];
  *(_OWORD *)(v41 + 32) = v51[2];
  *(__n128 *)(v41 + 48) = result;
  return result;
}

double sub_1000434A4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000432D8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000B52D0, &qword_1000B52D8).n128_u64[0];
  return result;
}

double sub_1000434FC@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000432D8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000B52E0, &qword_1000B52E8).n128_u64[0];
  return result;
}

double sub_100043554@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100043604(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000B52F0, &qword_1000B52F8).n128_u64[0];
  return result;
}

double sub_1000435AC@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100043604(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000B5300, &qword_1000B5308).n128_u64[0];
  return result;
}

__n128 sub_100043604@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v32;
  double v33;
  double v34;
  uint64_t v36;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __n128 result;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = a9;
  v19 = a16;
  v21 = a14;
  v20 = a15;
  v22 = a12;
  v23 = a10;
  v24 = a2 & 1;
  v25 = a1;
  if ((_DWORD)v24)
    v25 = -INFINITY;
  v26 = a4 & 1;
  v27 = a3;
  if ((_DWORD)v26)
    v27 = v25;
  v28 = a6 & 1;
  v29 = a8 & 1;
  v30 = a5;
  if ((a6 & 1) != 0)
    v30 = v27;
  if (v25 > v27 || v27 > v30)
    goto LABEL_22;
  v32 = a7;
  if ((a8 & 1) != 0)
    v32 = -INFINITY;
  v33 = a10;
  if ((a11 & 1) != 0)
    v33 = v32;
  v34 = a12;
  if ((a13 & 1) != 0)
    v34 = v33;
  if (v32 > v33 || v33 > v34)
  {
LABEL_22:
    v49 = a7;
    v50 = a5;
    v47 = a1;
    v48 = a3;
    v46 = v24;
    v36 = v26;
    v38 = static os_log_type_t.fault.getter();
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v18 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v26 = v36;
    v21 = a14;
    v20 = a15;
    v24 = v46;
    v23 = a10;
    v22 = a12;
    a1 = v47;
    a3 = v48;
    a7 = v49;
    a5 = v50;
    v19 = a16;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v24, *(_QWORD *)&a3, v26, *(_QWORD *)&a5, v28, *(_QWORD *)&a7, v29, *(_QWORD *)&v23, a11 & 1, *(_QWORD *)&v22, a13 & 1, v21, v20);
  v41 = sub_1000187A4(v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v18, v17, v41);
  v42 = v18 + *(int *)(sub_1000187A4(a17) + 36);
  v43 = v51[5];
  *(_OWORD *)(v42 + 64) = v51[4];
  *(_OWORD *)(v42 + 80) = v43;
  *(_OWORD *)(v42 + 96) = v51[6];
  v44 = v51[1];
  *(_OWORD *)v42 = v51[0];
  *(_OWORD *)(v42 + 16) = v44;
  result = (__n128)v51[3];
  *(_OWORD *)(v42 + 32) = v51[2];
  *(__n128 *)(v42 + 48) = result;
  return result;
}

uint64_t TPSTip.id.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, "identifier");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

void *sub_100043834()
{
  return &protocol witness table for String;
}

void sub_100043840(uint64_t *a1@<X8>)
{
  id *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*v1, "identifier");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  *a1 = v4;
  a1[1] = v6;
}

uint64_t *sub_100043894(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  void *v26;
  uint64_t v27;
  id v28;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_1000187A4(&qword_1000B41C0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_1000187A4(&qword_1000B5008);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = *(int *)(a3 + 24);
    v24 = (uint64_t *)((char *)a1 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    v27 = *v25;
    v26 = (void *)v25[1];
    *v24 = v27;
    v24[1] = v26;
    v28 = v26;
  }
  return a1;
}

void sub_1000439FC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v7 = sub_1000187A4(&qword_1000B5008);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }

}

uint64_t *sub_100043AC8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  void *v24;
  uint64_t v25;
  id v26;

  v6 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = sub_1000187A4(&qword_1000B5008);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = *(int *)(a3 + 24);
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  v25 = *v23;
  v24 = (void *)v23[1];
  *v22 = v25;
  v22[1] = v24;
  v26 = v24;
  return a1;
}

uint64_t *sub_100043C04(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  id v26;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B41C0);
    v6 = sub_1000187A4(&qword_1000B41C0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = *(int *)(a3 + 20);
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_100011DE0((uint64_t)a1 + v12, &qword_1000B5008);
    v15 = sub_1000187A4(&qword_1000B5008);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = *(int *)(a3 + 24);
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  *v22 = *v23;
  v24 = (void *)v23[1];
  v25 = (void *)v22[1];
  v22[1] = v24;
  v26 = v24;

  return a1;
}

char *sub_100043D78(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_1000187A4(&qword_1000B5008);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for DismissAction(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  *(_OWORD *)&a1[*(int *)(a3 + 24)] = *(_OWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

char *sub_100043EA0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B41C0);
    v6 = sub_1000187A4(&qword_1000B41C0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = *(int *)(a3 + 20);
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100011DE0((uint64_t)&a1[v8], &qword_1000B5008);
    v11 = sub_1000187A4(&qword_1000B5008);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for DismissAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = *(int *)(a3 + 24);
  v14 = &a1[v13];
  v15 = &a2[v13];
  v17 = *(_QWORD *)v15;
  v16 = *((_QWORD *)v15 + 1);
  v18 = (void *)*((_QWORD *)v14 + 1);
  *(_QWORD *)v14 = v17;
  *((_QWORD *)v14 + 1) = v16;

  return a1;
}

uint64_t sub_100044000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004400C);
}

uint64_t sub_10004400C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_1000187A4(&qword_1000B45E0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1000187A4(&qword_1000B5010);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_1000440C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000440CC);
}

uint64_t sub_1000440CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_1000187A4(&qword_1000B45E0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_1000187A4(&qword_1000B5010);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for ChecklistView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B5070;
  if (!qword_1000B5070)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ChecklistView);
  return result;
}

void sub_1000441B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_100003770(319, (unint64_t *)&qword_1000B4650, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100003770(319, (unint64_t *)&unk_1000B5080, (uint64_t (*)(uint64_t))&type metadata accessor for DismissAction);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_10007A270;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

uint64_t sub_100044264(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008E7D0, 1);
}

uint64_t sub_100044274@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t OpaqueTypeConformance2;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (**v61)();
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83[16];
  uint64_t v84;
  _QWORD v85[2];
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;

  v2 = v1;
  v82 = a1;
  v3 = type metadata accessor for ChecklistView(0);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  v80 = *(_QWORD *)(v3 - 8);
  v81 = v4;
  __chkstk_darwin(v3);
  v79 = (uint64_t)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for InsetGroupedListStyle(0);
  v77 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v72 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000187A4(&qword_1000B46A0);
  __chkstk_darwin(v7);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000187A4(&qword_1000B50B8);
  v66 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_1000187A4(&qword_1000B50C0);
  v68 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_1000187A4(&qword_1000B50C8);
  v70 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v64 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000187A4(&qword_1000B50D0);
  v17 = *(_QWORD *)(v16 - 8);
  v73 = v16;
  v74 = v17;
  __chkstk_darwin(v16);
  v65 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_1000187A4(&qword_1000B50D8);
  v76 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v71 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t *)(v1 + *(int *)(v3 + 24));
  v21 = *v20;
  v22 = v20[1];
  v23 = type metadata accessor for ChecklistViewModel(0);
  v24 = sub_1000041E8((unint64_t *)&qword_1000B50E0, type metadata accessor for ChecklistViewModel, (uint64_t)&unk_1000792C8);
  v25 = (void *)ObservedObject.projectedValue.getter(v21, v22, v23, v24);
  KeyPath = swift_getKeyPath(&unk_10007A2F8);
  ObservedObject.Wrapper.subscript.getter(&v87, KeyPath, v25, v24);
  swift_release(KeyPath);

  v85[0] = v87;
  v85[1] = v88;
  v86 = v89;
  v84 = v2;
  v27 = sub_1000187A4(&qword_1000B50E8);
  v28 = sub_1000086E8(&qword_1000B50F0, &qword_1000B50E8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  List.init(selection:content:)(v85, sub_100046FC8, v83, &type metadata for String, v27, &protocol witness table for String, v28);
  v29 = v20[1];
  v30 = swift_getKeyPath(&unk_10007A320);
  v31 = swift_getKeyPath(&unk_10007A348);
  static Published.subscript.getter(&v87, v29, v30, v31);
  swift_release(v30);
  swift_release(v31);
  v32 = v88;
  v33 = *((_QWORD *)&v89 + 1);
  v34 = sub_100019FCC();
  AppEntity.fullyQualifiedIdentifier.getter(&type metadata for TipCollection, v34);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v32);
  v35 = type metadata accessor for EntityIdentifier(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v9, 0, 1, v35);
  v36 = sub_1000086E8(&qword_1000B50F8, &qword_1000B50B8, (uint64_t)&protocol conformance descriptor for List<A, B>);
  View.appEntityIdentifier(_:)(v9, v10, v36);
  sub_100011DE0((uint64_t)v9, &qword_1000B46A0);
  v37 = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v12, v10);
  v38 = static Edge.Set.top.getter(v37);
  v87 = v10;
  v88 = v36;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v87, &opaque type descriptor for <<opaque return type of View.appEntityIdentifier(_:)>>, 1);
  v40 = v64;
  v41 = v67;
  View.listPadding(_:_:)(v38, v67, OpaqueTypeConformance2, 0.0);
  v42 = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v14, v41);
  v43 = v72;
  InsetGroupedListStyle.init()(v42);
  v87 = v41;
  v88 = OpaqueTypeConformance2;
  v44 = swift_getOpaqueTypeConformance2(&v87, &opaque type descriptor for <<opaque return type of View.listPadding(_:_:)>>, 1);
  v45 = v65;
  v46 = v69;
  v47 = v75;
  View.listStyle<A>(_:)(v43, v69, v75, v44, &protocol witness table for InsetGroupedListStyle);
  v48 = v47;
  (*(void (**)(char *, uint64_t))(v77 + 8))(v43, v47);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v40, v46);
  v49 = objc_msgSend((id)objc_opt_self(UIColor), "systemGroupedBackgroundColor");
  v50 = Color.init(_:)(v49);
  v85[0] = v50;
  v87 = v46;
  v88 = v48;
  *(_QWORD *)&v89 = v44;
  *((_QWORD *)&v89 + 1) = &protocol witness table for InsetGroupedListStyle;
  v51 = swift_getOpaqueTypeConformance2(&v87, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
  v52 = v71;
  v53 = v73;
  View.scrollContentBackground<A>(_:)(v85, v73, &type metadata for Color, v51, &protocol witness table for Color);
  swift_release(v50);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v45, v53);
  v54 = v79;
  sub_100046FD8(v2, v79);
  v55 = *(unsigned __int8 *)(v80 + 80);
  v56 = (v55 + 16) & ~v55;
  v57 = swift_allocObject(&unk_1000A3E08, v56 + v81, v55 | 7);
  sub_100047934(v54, v57 + v56, type metadata accessor for ChecklistView);
  v58 = v76;
  v59 = v82;
  v60 = v78;
  (*(void (**)(uint64_t, char *, uint64_t))(v76 + 16))(v82, v52, v78);
  v61 = (uint64_t (**)())(v59 + *(int *)(sub_1000187A4(&qword_1000B5100) + 36));
  *v61 = sub_100047020;
  v61[1] = (uint64_t (*)())v57;
  v61[2] = 0;
  v61[3] = 0;
  return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v52, v60);
}

uint64_t sub_100044910@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t KeyPath;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  void (*v88)(char *, char *, uint64_t);
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t);
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126[16];
  uint64_t v127;
  _QWORD v128[2];

  v122 = a2;
  v3 = sub_1000187A4(&qword_1000B5108);
  v124 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v112 = (char *)&v104 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v111 = (char *)&v104 - v6;
  v114 = type metadata accessor for ChecklistView(0);
  v123 = *(_QWORD *)(v114 - 8);
  v7 = *(_QWORD *)(v123 + 64);
  __chkstk_darwin(v114);
  v113 = (uint64_t)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000187A4(&qword_1000B5110);
  v15 = __chkstk_darwin(v14);
  v116 = (uint64_t)&v104 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v121 = (uint64_t)&v104 - v18;
  v19 = __chkstk_darwin(v17);
  v118 = (char *)&v104 - v20;
  __chkstk_darwin(v19);
  v125 = (uint64_t)&v104 - v21;
  v22 = sub_1000187A4(&qword_1000B5118);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v119 = (char *)&v104 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v104 - v27;
  __chkstk_darwin(v26);
  v30 = (char *)&v104 - v29;
  v127 = a1;
  v31 = sub_1000187A4(&qword_1000B5120);
  v32 = sub_1000471A4();
  Section<>.init(content:)(sub_10004719C, v126, v31, v32);
  v117 = v23;
  v33 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  v115 = v30;
  v120 = v22;
  v33(v30, v28, v22);
  v114 = a1 + *(int *)(v114 + 24);
  v34 = *(_QWORD *)(v114 + 8);
  KeyPath = swift_getKeyPath(&unk_10007A4A0);
  v36 = swift_getKeyPath(&unk_10007A4C8);
  static Published.subscript.getter(v128, v34, KeyPath, v36);
  swift_release(KeyPath);
  swift_release(v36);
  v37 = v128[0];
  v110 = a1;
  v109 = v7;
  v108 = v10;
  v107 = v13;
  if (v128[0])
  {
    v38 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000013, 0x800000010008C950);
    static Locale.current.getter(v38);
    v39 = String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, 0, v10, "Section header for Suggested checklist items", 44, 2);
    v105 = v40;
    v128[0] = v37;
    v106 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))swift_getKeyPath(&unk_10007A550);
    v41 = v113;
    sub_100046FD8(a1, v113);
    v42 = *(unsigned __int8 *)(v123 + 80);
    v43 = (v42 + 16) & ~v42;
    v44 = v3;
    v45 = (v7 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
    v46 = (v45 + 15) & 0xFFFFFFFFFFFFFFF8;
    v47 = swift_allocObject(&unk_1000A3EA8, v46 + 17, v42 | 7);
    v48 = v47 + v43;
    v49 = v41;
    sub_100047934(v41, v48, type metadata accessor for ChecklistView);
    *(_QWORD *)(v47 + v45) = v37;
    v3 = v44;
    v50 = v47 + v46;
    v52 = v124;
    v51 = v125;
    v53 = v105;
    *(_QWORD *)v50 = v39;
    *(_QWORD *)(v50 + 8) = v53;
    *(_BYTE *)(v50 + 16) = 0;
    swift_bridgeObjectRetain(v37);
    v54 = sub_1000187A4(&qword_1000B4908);
    v55 = sub_1000187A4(&qword_1000B5178);
    v56 = sub_1000086E8(&qword_1000B4ED8, &qword_1000B4908, (uint64_t)&protocol conformance descriptor for [A]);
    v57 = sub_1000473BC();
    ForEach<>.init(_:id:content:)(v128, v106, sub_1000473B8, v47, v54, v55, v56, &protocol witness table for String, v57);
    v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56);
    v58(v51, 0, 1, v44);
  }
  else
  {
    v49 = v113;
    v51 = v125;
    v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v124 + 56);
    v58(v125, 1, 1, v3);
  }
  v59 = v114;
  v60 = *(_QWORD *)(v114 + 8);
  v61 = swift_getKeyPath(&unk_10007A4F8);
  v62 = swift_getKeyPath(&unk_10007A520);
  static Published.subscript.getter(v128, v60, v61, v62);
  swift_release(v61);
  swift_release(v62);
  v63 = v128[0];
  if (v128[0])
  {
    v106 = v58;
    v113 = v3;
    v64 = v107;
    v65 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000013, 0x800000010008C900);
    v66 = v108;
    static Locale.current.getter(v65);
    v67 = String.init(localized:table:bundle:locale:comment:)(v64, 0, 0, 0, v66, "Section header for completed checklist items", 44, 2);
    v69 = v68;
    v70 = *(_QWORD *)(v59 + 8);
    v71 = swift_getKeyPath(&unk_10007A4A0);
    v72 = swift_getKeyPath(&unk_10007A4C8);
    static Published.subscript.getter(v128, v70, v71, v72);
    swift_release(v71);
    swift_release(v72);
    v73 = v128[0];
    if (v128[0])
      swift_bridgeObjectRelease(v128[0]);
    v74 = v73 != 0;
    v128[0] = v63;
    v75 = swift_getKeyPath(&unk_10007A550);
    v76 = v49;
    sub_100046FD8(v110, v49);
    v77 = *(unsigned __int8 *)(v123 + 80);
    v78 = (v77 + 16) & ~v77;
    v79 = (v109 + v78 + 7) & 0xFFFFFFFFFFFFFFF8;
    v80 = (v79 + 15) & 0xFFFFFFFFFFFFFFF8;
    v81 = swift_allocObject(&unk_1000A3E80, v80 + 17, v77 | 7);
    sub_100047934(v76, v81 + v78, type metadata accessor for ChecklistView);
    *(_QWORD *)(v81 + v79) = v63;
    v82 = v81 + v80;
    *(_QWORD *)v82 = v67;
    *(_QWORD *)(v82 + 8) = v69;
    *(_BYTE *)(v82 + 16) = v74;
    swift_bridgeObjectRetain(v63);
    v83 = sub_1000187A4(&qword_1000B4908);
    v84 = sub_1000187A4(&qword_1000B5178);
    v85 = sub_1000086E8(&qword_1000B4ED8, &qword_1000B4908, (uint64_t)&protocol conformance descriptor for [A]);
    v86 = sub_1000473BC();
    v87 = v112;
    ForEach<>.init(_:id:content:)(v128, v75, sub_1000473B8, v81, v83, v84, v85, &protocol witness table for String, v86);
    v88 = *(void (**)(char *, char *, uint64_t))(v124 + 32);
    v89 = v111;
    v90 = v113;
    v88(v111, v87, v113);
    v91 = (uint64_t)v118;
    v88(v118, v89, v90);
    v51 = v125;
    v106(v91, 0, 1, v90);
  }
  else
  {
    v91 = (uint64_t)v118;
    v58((uint64_t)v118, 1, 1, v3);
  }
  v92 = v117;
  v93 = *(void (**)(char *, char *, uint64_t))(v117 + 16);
  v95 = v119;
  v94 = v120;
  v96 = v115;
  v93(v119, v115, v120);
  v97 = v51;
  v98 = v121;
  sub_1000121BC(v97, v121, &qword_1000B5110);
  v99 = v116;
  sub_1000121BC(v91, v116, &qword_1000B5110);
  v100 = v122;
  v93(v122, v95, v94);
  v101 = sub_1000187A4(&qword_1000B5170);
  sub_1000121BC(v98, (uint64_t)&v100[*(int *)(v101 + 48)], &qword_1000B5110);
  sub_1000121BC(v99, (uint64_t)&v100[*(int *)(v101 + 64)], &qword_1000B5110);
  sub_100011DE0(v91, &qword_1000B5110);
  sub_100011DE0(v125, &qword_1000B5110);
  v102 = *(void (**)(char *, uint64_t))(v92 + 8);
  v102(v96, v94);
  sub_100011DE0(v99, &qword_1000B5110);
  sub_100011DE0(v98, &qword_1000B5110);
  return ((uint64_t (*)(char *, uint64_t))v102)(v95, v94);
}

uint64_t sub_100045188@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;

  v4 = sub_1000187A4(&qword_1000B5168);
  __chkstk_darwin(v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000187A4(&qword_1000B5158);
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000187A4(&qword_1000B5148);
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000187A4(&qword_1000B5138);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v14);
  *((_QWORD *)v6 + 1) = 0x4028000000000000;
  v6[16] = 0;
  v17 = sub_1000187A4(&qword_1000B5268);
  v18 = sub_100045A30(a1, (uint64_t)&v6[*(int *)(v17 + 44)]);
  v19 = static Alignment.center.getter(v18);
  sub_1000432D8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v9, 0.0, 1, 0.0, 1, v19, v20, &qword_1000B5168, &qword_1000B5158);
  v21 = sub_100011DE0((uint64_t)v6, &qword_1000B5168);
  LOBYTE(v6) = static Edge.Set.bottom.getter(v21);
  v22 = EdgeInsets.init(_all:)(27.0);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  sub_1000121BC((uint64_t)v9, (uint64_t)v12, &qword_1000B5158);
  v29 = &v12[*(int *)(v10 + 36)];
  *v29 = (char)v6;
  *((double *)v29 + 1) = v22;
  *((_QWORD *)v29 + 2) = v24;
  *((_QWORD *)v29 + 3) = v26;
  *((_QWORD *)v29 + 4) = v28;
  v29[40] = 0;
  sub_100011DE0((uint64_t)v9, &qword_1000B5158);
  sub_1000121BC((uint64_t)v12, (uint64_t)v16, &qword_1000B5148);
  v30 = &v16[*(int *)(v13 + 36)];
  v30[32] = 0;
  *(_OWORD *)v30 = 0u;
  *((_OWORD *)v30 + 1) = 0u;
  v31 = sub_100011DE0((uint64_t)v12, &qword_1000B5148);
  v32 = static Color.clear.getter(v31);
  v36 = v32;
  swift_retain(v32);
  v33 = AnyView.init<A>(_:)(&v36, &type metadata for Color, &protocol witness table for Color);
  sub_1000121BC((uint64_t)v16, a2, &qword_1000B5138);
  swift_release(v32);
  *(_QWORD *)(a2 + *(int *)(sub_1000187A4(&qword_1000B5120) + 36)) = v33;
  return sub_100011DE0((uint64_t)v16, &qword_1000B5138);
}

uint64_t sub_100045450(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[5];
  uint64_t v36;

  v27 = a1;
  v31 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v2 = (char *)&v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ChecklistView(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  v30 = v9;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v27 - v14;
  sub_100006578(0, (unint64_t *)&qword_1000B44A0, OS_dispatch_queue_ptr);
  v28 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)(v13, 0.15);
  v29 = *(void (**)(char *, uint64_t))(v10 + 8);
  v29(v13, v9);
  sub_100046FD8(v27, (uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(unsigned __int8 *)(v7 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = swift_allocObject(&unk_1000A3E30, v17 + v8, v16 | 7);
  sub_100047934((uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, type metadata accessor for ChecklistView);
  aBlock[4] = sub_100047030;
  v36 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100003DA8;
  aBlock[3] = &unk_1000A3E48;
  v19 = _Block_copy(aBlock);
  v20 = swift_release(v36);
  static DispatchQoS.unspecified.getter(v20);
  aBlock[0] = _swiftEmptyArrayStorage;
  v21 = sub_1000041E8((unint64_t *)&qword_1000B44A8, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_1000187A4(&qword_1000B44B0);
  v23 = sub_1000086E8((unint64_t *)&qword_1000B44B8, &qword_1000B44B0, (uint64_t)&protocol conformance descriptor for [A]);
  v24 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v22, v23, v31, v21);
  v25 = (void *)v28;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v15, v5, v2, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v2, v24);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v33);
  return ((uint64_t (*)(char *, uint64_t))v29)(v15, v30);
}

void sub_100045754(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void (*v28)(void *);
  uint64_t v29;
  void *v30;
  uint64_t v31;

  v2 = type metadata accessor for ChecklistView(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1 + *(int *)(v3 + 24);
  v7 = *(_QWORD *)(v6 + 8);
  KeyPath = swift_getKeyPath(&unk_10007A378);
  v9 = swift_getKeyPath(&unk_10007A3A0);
  static Published.subscript.getter(&v30, v7, KeyPath, v9);
  swift_release(KeyPath);
  swift_release(v9);
  LODWORD(v7) = v30;
  sub_100046FD8(a1, (uint64_t)v5);
  if ((_DWORD)v7 == 1)
  {
    v10 = *(_QWORD *)&v5[*(int *)(v2 + 24) + 8];
    v11 = swift_getKeyPath(&unk_10007A3D0);
    v12 = swift_getKeyPath(&unk_10007A3F8);
    static Published.subscript.getter(&v30, v10, v11, v12);
    swift_release(v11);
    swift_release(v12);
    LOBYTE(v10) = (_BYTE)v30;
    sub_10000A92C((uint64_t)v5, type metadata accessor for ChecklistView);
    if ((v10 & 1) == 0)
    {
      v13 = *(void **)(v6 + 8);
      v14 = swift_getKeyPath(&unk_10007A2F8);
      v15 = swift_getKeyPath(&unk_10007A418);
      v30 = 0;
      v31 = 0;
      v16 = v13;
      static Published.subscript.setter(&v30, v16, v14, v15);
      v17 = swift_getKeyPath(&unk_10007A2F8);
      v18 = swift_getKeyPath(&unk_10007A418);
      static Published.subscript.getter(&v30, v16, v17, v18);
      swift_release(v17);
      swift_release(v18);
      v19 = v31;
      if (v31)
      {
        v20 = (void *)sub_100036580((uint64_t)v30, v31);
        swift_bridgeObjectRelease(v19);
        v21 = swift_getKeyPath(&unk_10007A448);
        v22 = swift_getKeyPath(&unk_10007A470);
        v30 = v20;
        v23 = v20;
        v24 = (char *)v16;
        static Published.subscript.setter(&v30, v24, v21, v22);
        v25 = swift_getKeyPath(&unk_10007A448);
        v26 = swift_getKeyPath(&unk_10007A470);
        static Published.subscript.getter(&v30, v24, v25, v26);
        swift_release(v25);
        swift_release(v26);
        v27 = v30;
        if (v30)
        {
          v28 = *(void (**)(void *))&v24[OBJC_IVAR___TPSChecklistViewModel_actionHandler];
          if (v28)
          {
            v29 = *(_QWORD *)&v24[OBJC_IVAR___TPSChecklistViewModel_actionHandler + 8];
            swift_retain(v29);
            v28(v27);
            sub_100005500((uint64_t)v28, v29);
          }

        }
        else
        {

        }
      }
    }
  }
  else
  {
    sub_10000A92C((uint64_t)v5, type metadata accessor for ChecklistView);
  }
}

uint64_t sub_100045A30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t KeyPath;
  uint64_t v36;
  id v37;
  id v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  __int16 v110;
  char v111;
  _OWORD v112[3];

  v102 = a2;
  v3 = type metadata accessor for AccessibilityTraits(0);
  v98 = *(_QWORD *)(v3 - 8);
  v99 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000187A4(&qword_1000B5270);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v97 = (char *)&v94 - v11;
  __chkstk_darwin(v10);
  v104 = (uint64_t)&v94 - v12;
  v13 = sub_1000187A4(&qword_1000B5278);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_1000187A4(&qword_1000B5280);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v94 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v94 - v24;
  *v15 = static Alignment.center.getter(v23);
  v15[1] = v26;
  v27 = sub_1000187A4(&qword_1000B5288);
  v28 = sub_1000460C8((_QWORD *)((char *)v15 + *(int *)(v27 + 44)));
  v29 = static Alignment.center.getter(v28);
  _FrameLayout.init(width:height:alignment:)(v112, 0x4054000000000000, 0, 0x4054000000000000, 0, v29, v30);
  sub_1000121BC((uint64_t)v15, (uint64_t)v22, &qword_1000B5278);
  v31 = &v22[*(int *)(v16 + 36)];
  v32 = v112[1];
  *(_OWORD *)v31 = v112[0];
  *((_OWORD *)v31 + 1) = v32;
  *((_OWORD *)v31 + 2) = v112[2];
  sub_100011DE0((uint64_t)v15, &qword_1000B5278);
  v100 = v25;
  sub_100014780((uint64_t)v22, (uint64_t)v25, &qword_1000B5280);
  v33 = a1 + *(int *)(type metadata accessor for ChecklistView(0) + 24);
  v34 = *(_QWORD *)(v33 + 8);
  KeyPath = swift_getKeyPath(&unk_10007A618);
  v36 = swift_getKeyPath(&unk_10007A640);
  static Published.subscript.getter(&v105, v34, KeyPath, v36);
  swift_release(KeyPath);
  swift_release(v36);
  v37 = v105;
  v103 = v9;
  v101 = v19;
  v96 = v33;
  if (v105)
  {
    v38 = objc_msgSend(v105, "title");

    if (v38)
    {
      v37 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v40 = v39;

      goto LABEL_6;
    }
    v37 = 0;
  }
  v40 = 0xE000000000000000;
LABEL_6:
  v105 = v37;
  v106 = v40;
  v95 = sub_100014614();
  v41 = Text.init<A>(_:)(&v105, &type metadata for String, v95);
  v43 = v42;
  v45 = v44;
  v47 = v46 & 1;
  v48 = static Font.title.getter();
  static Font.Weight.bold.getter(v48);
  v49 = Font.weight(_:)(v48);
  swift_release(v48);
  v50 = (void *)Text.font(_:)(v49, v41, v43, v47, v45);
  v52 = v51;
  v54 = v53;
  v56 = v55;
  swift_release(v49);
  sub_100014658(v41, v43, v47);
  swift_bridgeObjectRelease(v45);
  v57 = swift_getKeyPath(&unk_10007A660);
  v105 = v50;
  v106 = v52;
  v107 = v54 & 1;
  v108 = v56;
  v109 = v57;
  v110 = 1;
  v111 = 1;
  static AccessibilityTraits.isHeader.getter();
  v58 = sub_1000187A4(&qword_1000B5290);
  v59 = sub_100040ACC(&qword_1000B5298, &qword_1000B5290, (void (*)(void))sub_100040794);
  v60 = (uint64_t)v97;
  View.accessibilityAddTraits(_:)(v5, v58, v59);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v5, v99);
  v61 = v108;
  v62 = v109;
  sub_100014658((uint64_t)v105, v106, v107);
  swift_release(v62);
  swift_bridgeObjectRelease(v61);
  sub_100014780(v60, v104, &qword_1000B5270);
  v63 = *(_QWORD *)(v96 + 8);
  v64 = swift_getKeyPath(&unk_10007A618);
  v65 = swift_getKeyPath(&unk_10007A640);
  static Published.subscript.getter(&v105, v63, v64, v65);
  swift_release(v64);
  swift_release(v65);
  v66 = v105;
  if (!v105)
  {
LABEL_10:
    v69 = 0xE000000000000000;
    goto LABEL_11;
  }
  v67 = objc_msgSend(v105, "text");

  if (!v67)
  {
    v66 = 0;
    goto LABEL_10;
  }
  v66 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
  v69 = v68;

LABEL_11:
  v105 = v66;
  v106 = v69;
  v70 = Text.init<A>(_:)(&v105, &type metadata for String, v95);
  v72 = v71;
  v74 = v73;
  v76 = v75 & 1;
  v77 = static Font.callout.getter();
  v78 = Text.font(_:)(v77, v70, v72, v76, v74);
  v80 = v79;
  v82 = v81;
  v99 = v83;
  swift_release(v77);
  LOBYTE(v77) = v82 & 1;
  sub_100014658(v70, v72, v76);
  swift_bridgeObjectRelease(v74);
  v84 = swift_getKeyPath(&unk_10007A660);
  v86 = (uint64_t)v100;
  v85 = (uint64_t)v101;
  sub_1000121BC((uint64_t)v100, (uint64_t)v101, &qword_1000B5280);
  v87 = (uint64_t)v103;
  v88 = v104;
  sub_1000121BC(v104, (uint64_t)v103, &qword_1000B5270);
  v89 = v102;
  sub_1000121BC(v85, v102, &qword_1000B5280);
  v90 = sub_1000187A4(&qword_1000B52A0);
  sub_1000121BC(v87, v89 + *(int *)(v90 + 48), &qword_1000B5270);
  v91 = v89 + *(int *)(v90 + 64);
  *(_QWORD *)v91 = v78;
  *(_QWORD *)(v91 + 8) = v80;
  *(_BYTE *)(v91 + 16) = v77;
  v92 = v99;
  *(_QWORD *)(v91 + 24) = v99;
  *(_QWORD *)(v91 + 32) = v84;
  *(_WORD *)(v91 + 40) = 1;
  *(_BYTE *)(v91 + 42) = 1;
  sub_100031A98(v78, v80, v77);
  swift_bridgeObjectRetain(v92);
  swift_retain(v84);
  sub_100011DE0(v88, &qword_1000B5270);
  sub_100011DE0(v86, &qword_1000B5280);
  sub_100014658(v78, v80, v77);
  swift_release(v84);
  swift_bridgeObjectRelease(v92);
  sub_100011DE0(v87, &qword_1000B5270);
  return sub_100011DE0(v85, &qword_1000B5280);
}

uint64_t sub_1000460C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;

  v42 = a1;
  v1 = sub_1000187A4(&qword_1000B52A8);
  __chkstk_darwin(v1);
  v3 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ImageResource(0);
  v39 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000187A4(&qword_1000B4DD8);
  __chkstk_darwin(v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_1000187A4(&qword_1000B52B0);
  v10 = __chkstk_darwin(v40);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v41 = (uint64_t)&v38 - v13;
  v14 = type metadata accessor for ColorScheme(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v38 - v19;
  sub_100012200((uint64_t)&v38 - v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for ColorScheme.light(_:), v14);
  v21 = static ColorScheme.== infix(_:_:)(v20, v18);
  v22 = *(void (**)(char *, uint64_t))(v15 + 8);
  v22(v18, v14);
  v23 = ((uint64_t (*)(char *, uint64_t))v22)(v20, v14);
  if ((v21 & 1) != 0)
  {
    v24 = static Color.white.getter(v23);
  }
  else
  {
    v25 = objc_msgSend((id)objc_opt_self(UIColor), "tertiarySystemBackgroundColor");
    v24 = Color.init(_:)(v25);
  }
  v26 = v24;
  if (qword_1000B4028 != -1)
    swift_once(&qword_1000B4028, sub_10006C95C);
  v27 = sub_1000479CC(v4, (uint64_t)qword_1000B9138);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v6, v27, v4);
  v28 = Image.init(_:)(v6);
  v43 = v28;
  View.accessibilityHidden(_:)(1, &type metadata for Image, &protocol witness table for Image);
  v29 = swift_release(v28);
  static SymbolRenderingMode.multicolor.getter(v29);
  v30 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v3, 0, 1, v30);
  KeyPath = swift_getKeyPath(&unk_10007A690);
  v32 = (uint64_t *)&v12[*(int *)(v40 + 36)];
  v33 = sub_1000187A4(&qword_1000B52B8);
  sub_1000121BC((uint64_t)v3, (uint64_t)v32 + *(int *)(v33 + 28), &qword_1000B52A8);
  *v32 = KeyPath;
  sub_1000121BC((uint64_t)v9, (uint64_t)v12, &qword_1000B4DD8);
  sub_100011DE0((uint64_t)v3, &qword_1000B52A8);
  sub_100011DE0((uint64_t)v9, &qword_1000B4DD8);
  v34 = v41;
  sub_100014780((uint64_t)v12, v41, &qword_1000B52B0);
  sub_1000121BC(v34, (uint64_t)v12, &qword_1000B52B0);
  v35 = v42;
  *v42 = v26;
  *((_WORD *)v35 + 4) = 256;
  v36 = sub_1000187A4(&qword_1000B52C0);
  sub_1000121BC((uint64_t)v12, (uint64_t)v35 + *(int *)(v36 + 48), &qword_1000B52B0);
  swift_retain(v26);
  sub_100011DE0(v34, &qword_1000B52B0);
  sub_100011DE0((uint64_t)v12, &qword_1000B52B0);
  return swift_release(v26);
}

uint64_t sub_1000464A0@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  void (*v31)(char *, _QWORD, uint64_t, uint64_t);
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char v51[16];
  uint64_t v52;
  void *v53;

  v45 = a4;
  v46 = a5;
  v43 = a1;
  v44 = a3;
  v49 = a7;
  v9 = sub_1000187A4(&qword_1000B5248);
  __chkstk_darwin(v9);
  v48 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_1000187A4(&qword_1000B5190);
  __chkstk_darwin(v47);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ListSectionSpacing(0);
  v50 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000187A4(&qword_1000B51B0);
  __chkstk_darwin(v16);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000187A4(&qword_1000B51A0);
  v42 = *(_QWORD *)(v19 - 8);
  v20 = v42;
  __chkstk_darwin(v19);
  v22 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *v43;
  v52 = a2;
  v53 = v23;
  sub_100046B40(v23, v44, v45, v46, a6, (uint64_t)v18);
  v24 = sub_1000187A4(&qword_1000B5200);
  v25 = sub_10004753C();
  v26 = sub_1000475E4();
  v27 = Section<>.init(header:content:)(v18, sub_1000478D8, v51, v16, v24, v25, v26);
  static ListSectionSpacing.compact.getter(v27);
  v28 = &v12[*(int *)(v47 + 36)];
  v29 = v50;
  v30 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
  v30(v28, v15, v13);
  v31 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56);
  v31(v28, 0, 1, v13);
  v32 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v33 = v19;
  v32(v12, v22, v19);
  KeyPath = swift_getKeyPath(&unk_10007A578);
  v35 = (uint64_t)v48;
  v30(v48, v15, v13);
  v31((char *)v35, 0, 1, v13);
  v36 = sub_1000187A4(&qword_1000B5178);
  v37 = v49;
  v38 = (uint64_t *)(v49 + *(int *)(v36 + 36));
  v39 = sub_1000187A4(&qword_1000B5240);
  sub_1000121BC(v35, (uint64_t)v38 + *(int *)(v39 + 28), &qword_1000B5248);
  *v38 = KeyPath;
  sub_1000121BC((uint64_t)v12, v37, &qword_1000B5190);
  sub_100011DE0(v35, &qword_1000B5248);
  sub_100011DE0((uint64_t)v12, &qword_1000B5190);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v15, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v22, v33);
}

uint64_t sub_1000467B8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t OpaqueTypeConformance2;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  __int128 v51;
  uint64_t v52;

  v41 = a2;
  v49 = a3;
  v4 = type metadata accessor for AccessibilityTraits(0);
  v47 = *(_QWORD *)(v4 - 8);
  v48 = v4;
  __chkstk_darwin(v4);
  v46 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for AccessibilityChildBehavior(0);
  v43 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for ChecklistItemView(0);
  v9 = __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v13 = (char *)&v40 - v12;
  v42 = sub_1000187A4(&qword_1000B5258);
  v44 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000187A4(&qword_1000B5210);
  __chkstk_darwin(v16);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(void **)(a1 + *(int *)(type metadata accessor for ChecklistView(0) + 24) + 8);
  *v11 = swift_getKeyPath(&unk_10007A5D8);
  v20 = sub_1000187A4(&qword_1000B5260);
  swift_storeEnumTagMultiPayload(v11, v20, 0);
  v21 = (char *)v11 + v8[6];
  v50[0] = 0;
  v50[1] = 0;
  type metadata accessor for CGSize(0);
  v23 = v22;
  v24 = v19;
  v25 = v41;
  State.init(wrappedValue:)(&v51, v50, v23);
  v26 = v52;
  *(_OWORD *)v21 = v51;
  *((_QWORD *)v21 + 2) = v26;
  v27 = (_QWORD *)((char *)v11 + v8[5]);
  v28 = type metadata accessor for ChecklistViewModel(0);
  v29 = sub_1000041E8((unint64_t *)&qword_1000B50E0, type metadata accessor for ChecklistViewModel, (uint64_t)&unk_1000792C8);
  *v27 = ObservedObject.init(wrappedValue:)(v24, v28, v29);
  v27[1] = v30;
  *(_QWORD *)((char *)v11 + v8[7]) = v25;
  v31 = sub_100047934((uint64_t)v11, (uint64_t)v13, type metadata accessor for ChecklistItemView);
  static AccessibilityChildBehavior.combine.getter(v31);
  v32 = sub_1000041E8(&qword_1000B5218, type metadata accessor for ChecklistItemView, (uint64_t)&unk_10007B0E8);
  View.accessibilityElement(children:)(v7, v8, v32);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v7, v45);
  v33 = sub_10000A92C((uint64_t)v13, type metadata accessor for ChecklistItemView);
  v34 = v46;
  static AccessibilityTraits.isButton.getter(v33);
  *(_QWORD *)&v51 = v8;
  *((_QWORD *)&v51 + 1) = v32;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v51, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v36 = v42;
  View.accessibilityAddTraits(_:)(v34, v42, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v34, v48);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v15, v36);
  v37 = v49;
  sub_1000121BC((uint64_t)v18, v49, &qword_1000B5210);
  v38 = v37 + *(int *)(sub_1000187A4(&qword_1000B5200) + 36);
  *(_BYTE *)(v38 + 32) = 0;
  *(_OWORD *)v38 = 0u;
  *(_OWORD *)(v38 + 16) = 0u;
  return sub_100011DE0((uint64_t)v18, &qword_1000B5210);
}

uint64_t sub_100046B40@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, char a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t result;
  id v14;
  void *v15;
  id v16;
  char v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!((unint64_t)a2 >> 62))
  {
    v12 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(a2);
    if (v12)
      goto LABEL_3;
LABEL_12:
    swift_bridgeObjectRelease(a2);
    goto LABEL_13;
  }
  if (a2 < 0)
    v22 = a2;
  else
    v22 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  result = _CocoaArrayWrapper.endIndex.getter(v22);
  if (!result)
    goto LABEL_12;
LABEL_3:
  if ((a2 & 0xC000000000000001) != 0)
  {
    v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_6:
    v15 = v14;
    swift_bridgeObjectRelease(a2);
    sub_100006578(0, (unint64_t *)&qword_1000B42F0, TPSTip_ptr);
    v16 = a1;
    v17 = static NSObject.== infix(_:_:)(v16, v15);

    if ((v17 & 1) != 0)
    {
      sub_100046CB0(a3, a4, a5 & 1, a6);
      v18 = sub_1000187A4(&qword_1000B51C0);
      v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
      v20 = a6;
      v21 = 0;
      return v19(v20, v21, 1, v18);
    }
LABEL_13:
    v18 = sub_1000187A4(&qword_1000B51C0);
    v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
    v20 = a6;
    v21 = 1;
    return v19(v20, v21, 1, v18);
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v14 = *(id *)(a2 + 32);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t sub_100046CB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t KeyPath;
  char *v23;
  uint64_t v24;
  char v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;

  v49 = a3;
  v50 = a4;
  v6 = type metadata accessor for Prominence(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000187A4(&qword_1000B5250);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_1000187A4(&qword_1000B51E0);
  __chkstk_darwin(v47);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_1000187A4(&qword_1000B51D0);
  __chkstk_darwin(v48);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = a1;
  v52 = a2;
  v18 = sub_100014614();
  swift_bridgeObjectRetain(a2);
  v51 = Text.init<A>(_:)(&v51, &type metadata for String, v18);
  v52 = v19;
  v53 = v20 & 1;
  v54 = v21;
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Prominence.increased(_:), v6);
  View.headerProminence(_:)(v9, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_100014658(v51, v52, v53);
  swift_bridgeObjectRelease(v54);
  KeyPath = swift_getKeyPath(&unk_10007A5A8);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v13, v10);
  v23 = &v15[*(int *)(v47 + 36)];
  *(_QWORD *)v23 = KeyPath;
  *((_QWORD *)v23 + 1) = 0;
  v23[16] = 1;
  v24 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v25 = static Edge.Set.top.getter(v24);
  v26 = 0.0;
  if ((v49 & 1) != 0)
    v26 = 12.0;
  v27 = EdgeInsets.init(_all:)(v26);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  sub_1000121BC((uint64_t)v15, (uint64_t)v17, &qword_1000B51E0);
  v34 = &v17[*(int *)(v48 + 36)];
  *v34 = v25;
  *((double *)v34 + 1) = v27;
  *((_QWORD *)v34 + 2) = v29;
  *((_QWORD *)v34 + 3) = v31;
  *((_QWORD *)v34 + 4) = v33;
  v34[40] = 0;
  v35 = sub_100011DE0((uint64_t)v15, &qword_1000B51E0);
  v36 = static Edge.Set.bottom.getter(v35);
  v37 = EdgeInsets.init(_all:)(-6.0);
  v39 = v38;
  v41 = v40;
  v43 = v42;
  v44 = v50;
  sub_1000121BC((uint64_t)v17, v50, &qword_1000B51D0);
  v45 = v44 + *(int *)(sub_1000187A4(&qword_1000B51C0) + 36);
  *(_BYTE *)v45 = v36;
  *(double *)(v45 + 8) = v37;
  *(_QWORD *)(v45 + 16) = v39;
  *(_QWORD *)(v45 + 24) = v41;
  *(_QWORD *)(v45 + 32) = v43;
  *(_BYTE *)(v45 + 40) = 0;
  return sub_100011DE0((uint64_t)v17, &qword_1000B51D0);
}

uint64_t sub_100046FC8@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_100044910(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100046FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ChecklistView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100047020()
{
  return sub_10004703C(sub_100045450);
}

uint64_t sub_100047030()
{
  return sub_10004703C((uint64_t (*)(uint64_t))sub_100045754);
}

uint64_t sub_10004703C(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ChecklistView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_100047078@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000470A0(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_1000470C4()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t sub_1000470E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000470F8(a1, a2, a3, a4, &qword_1000B52A8, (uint64_t (*)(char *))&EnvironmentValues.symbolRenderingMode.setter);
}

uint64_t sub_1000470F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(char *))
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v9 = sub_1000187A4(a5);
  __chkstk_darwin(v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000121BC(a1, (uint64_t)v11, a5);
  return a6(v11);
}

uint64_t sub_10004719C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100045188(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000471A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5128;
  if (!qword_1000B5128)
  {
    v1 = sub_1000176F8(&qword_1000B5120);
    sub_100047228();
    sub_1000086E8(&qword_1000B4290, &qword_1000B4298, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5128);
  }
  return result;
}

unint64_t sub_100047228()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5130;
  if (!qword_1000B5130)
  {
    v1 = sub_1000176F8(&qword_1000B5138);
    sub_100040ACC(&qword_1000B5140, &qword_1000B5148, (void (*)(void))sub_1000472CC);
    sub_1000086E8(&qword_1000B4EF0, &qword_1000B4EF8, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5130);
  }
  return result;
}

unint64_t sub_1000472CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5150;
  if (!qword_1000B5150)
  {
    v1 = sub_1000176F8(&qword_1000B5158);
    sub_1000086E8(&qword_1000B5160, &qword_1000B5168, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5150);
  }
  return result;
}

void sub_100047364(uint64_t a1, void **a2)
{
  void *v2;
  NSString v3;

  v2 = *a2;
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setIdentifier:", v3);

}

unint64_t sub_1000473BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5180;
  if (!qword_1000B5180)
  {
    v1 = sub_1000176F8(&qword_1000B5178);
    sub_100047440();
    sub_1000086E8(&qword_1000B5238, &qword_1000B5240, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5180);
  }
  return result;
}

unint64_t sub_100047440()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5188;
  if (!qword_1000B5188)
  {
    v1 = sub_1000176F8(&qword_1000B5190);
    sub_1000474C4();
    sub_1000086E8(&qword_1000B5228, &qword_1000B5230, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5188);
  }
  return result;
}

unint64_t sub_1000474C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5198;
  if (!qword_1000B5198)
  {
    v1 = sub_1000176F8(&qword_1000B51A0);
    sub_10004753C();
    sub_1000475E4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5198);
  }
  return result;
}

unint64_t sub_10004753C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B51A8;
  if (!qword_1000B51A8)
  {
    v1 = sub_1000176F8(&qword_1000B51B0);
    sub_100040ACC(&qword_1000B51B8, &qword_1000B51C0, (void (*)(void))sub_1000475C0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1000B51A8);
  }
  return result;
}

uint64_t sub_1000475C0()
{
  return sub_100040ACC(&qword_1000B51C8, &qword_1000B51D0, (void (*)(void))sub_100017500);
}

unint64_t sub_1000475E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B51F8;
  if (!qword_1000B51F8)
  {
    v1 = sub_1000176F8(&qword_1000B5200);
    sub_100047668();
    sub_1000086E8(&qword_1000B4EF0, &qword_1000B4EF8, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B51F8);
  }
  return result;
}

unint64_t sub_100047668()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000B5208;
  if (!qword_1000B5208)
  {
    v1 = sub_1000176F8(&qword_1000B5210);
    v2[0] = type metadata accessor for ChecklistItemView(255);
    v2[1] = sub_1000041E8(&qword_1000B5218, type metadata accessor for ChecklistItemView, (uint64_t)&unk_10007B0E8);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_1000041E8(&qword_1000B5220, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5208);
  }
  return result;
}

uint64_t sub_10004772C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v1 = type metadata accessor for ChecklistView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)((char *)v6 + *(int *)(v1 + 20));
  v10 = sub_1000187A4(&qword_1000B5008);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v12 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v12));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, v13 + 17, v3 | 7);
}

uint64_t sub_100047864@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for ChecklistView(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000464A0(a1, v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 16), a2);
}

uint64_t sub_1000478D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000467B8(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_1000478E0()
{
  return EnvironmentValues.listSectionSpacing.getter();
}

uint64_t sub_100047900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000470F8(a1, a2, a3, a4, &qword_1000B5248, (uint64_t (*)(char *))&EnvironmentValues.listSectionSpacing.setter);
}

uint64_t sub_100047934(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100047980@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000479A8(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_1000479CC(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_1000479E4()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t sub_100047A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000470F8(a1, a2, a3, a4, &qword_1000B52A8, (uint64_t (*)(char *))&EnvironmentValues.symbolRenderingMode.setter);
}

unint64_t sub_100047A2C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;

  result = qword_1000B52C8;
  if (!qword_1000B52C8)
  {
    v1 = sub_1000176F8(&qword_1000B5100);
    v2 = sub_1000176F8(&qword_1000B50D0);
    v3 = sub_1000176F8(&qword_1000B50C8);
    v4 = type metadata accessor for InsetGroupedListStyle(255);
    v5 = sub_1000176F8(&qword_1000B50C0);
    v9 = sub_1000176F8(&qword_1000B50B8);
    v10 = (void *)sub_1000086E8(&qword_1000B50F8, &qword_1000B50B8, (uint64_t)&protocol conformance descriptor for List<A, B>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.appEntityIdentifier(_:)>>, 1);
    v9 = v5;
    v10 = (void *)OpaqueTypeConformance2;
    v7 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.listPadding(_:_:)>>, 1);
    v9 = v3;
    v10 = (void *)v4;
    v11 = v7;
    v12 = &protocol witness table for InsetGroupedListStyle;
    v8 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    v9 = v2;
    v10 = &type metadata for Color;
    v11 = v8;
    v12 = &protocol witness table for Color;
    swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.scrollContentBackground<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B52C8);
  }
  return result;
}

void sub_100047B94()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  double v11;
  double v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  unsigned int v50;
  id v51;
  id v52;
  id v53;
  char **v54;
  id v55;
  id v56;
  id v57;
  id v58;
  double v59;
  id v60;
  id v61;
  double v62;
  void *v63;
  id v64;
  uint64_t v65;
  void *v66;
  id v67;

  if (objc_msgSend(v0, "isSharedVariant"))
  {
    v1 = objc_msgSend(v0, "sharedTipAvailabilityView");

    if (!v1)
    {
      v2 = objc_msgSend(v0, "actionButton");
      if (v2)
      {
        v3 = v2;
        objc_msgSend(v2, "setEnabled:", 0);

      }
      objc_msgSend(v0, "deactivateBottomConstraints");
      v4 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
      objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      v5 = objc_msgSend(v0, "contentScrollView");
      objc_msgSend(v5, "addSubview:", v4);

      v6 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
      objc_msgSend(v6, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      v7 = objc_msgSend((id)objc_opt_self(UIColor), "opaqueSeparatorColor");
      objc_msgSend(v6, "setBackgroundColor:", v7);

      objc_msgSend(v4, "addSubview:", v6);
      v8 = objc_msgSend(v0, "availabilityTextView");
      objc_msgSend(v4, "addSubview:", v8);
      v9 = objc_msgSend(v6, "heightAnchor");
      v10 = objc_msgSend(v0, "cellAppearance");
      objc_msgSend(v10, "displayScale");
      v12 = v11;

      v13 = objc_msgSend(v9, "constraintEqualToConstant:", 1.0 / v12);
      objc_msgSend(v13, "setActive:", 1);

      v14 = objc_msgSend(v6, "topAnchor");
      v15 = objc_msgSend(v4, "topAnchor");
      v16 = objc_msgSend(v14, "constraintEqualToAnchor:", v15);

      objc_msgSend(v16, "setActive:", 1);
      v17 = objc_msgSend(v6, "leadingAnchor");
      v18 = objc_msgSend(v4, "leadingAnchor");
      v19 = objc_msgSend(v17, "constraintEqualToAnchor:", v18);

      objc_msgSend(v19, "setActive:", 1);
      v20 = objc_msgSend(v6, "trailingAnchor");
      v21 = objc_msgSend(v4, "trailingAnchor");
      v22 = objc_msgSend(v20, "constraintEqualToAnchor:", v21);

      objc_msgSend(v22, "setActive:", 1);
      v23 = objc_msgSend(v8, "leadingAnchor");
      v24 = objc_msgSend(v4, "leadingAnchor");
      v25 = objc_msgSend(v23, "constraintEqualToAnchor:", v24);

      objc_msgSend(v25, "setActive:", 1);
      v26 = objc_msgSend(v8, "trailingAnchor");
      v27 = objc_msgSend(v4, "trailingAnchor");
      v28 = objc_msgSend(v26, "constraintEqualToAnchor:", v27);

      objc_msgSend(v28, "setActive:", 1);
      v29 = objc_msgSend(v8, "topAnchor");
      v30 = objc_msgSend(v6, "bottomAnchor");
      v31 = objc_msgSend(v29, "constraintEqualToAnchor:constant:", v30, 8.0);

      objc_msgSend(v31, "setActive:", 1);
      v66 = v8;
      v32 = objc_msgSend(v8, "bottomAnchor");
      v33 = objc_msgSend(v4, "bottomAnchor");
      v34 = objc_msgSend(v32, "constraintEqualToAnchor:", v33);

      objc_msgSend(v34, "setActive:", 1);
      v35 = objc_msgSend(v4, "leadingAnchor");
      v36 = objc_msgSend(v0, "titleLabel");
      v37 = objc_msgSend(v36, "leadingAnchor");

      v38 = objc_msgSend(v35, "constraintEqualToAnchor:", v37);
      objc_msgSend(v38, "setActive:", 1);

      v39 = objc_msgSend(v4, "trailingAnchor");
      v40 = objc_msgSend(v0, "titleLabel");
      v41 = objc_msgSend(v40, "trailingAnchor");

      v42 = objc_msgSend(v39, "constraintEqualToAnchor:", v41);
      objc_msgSend(v42, "setActive:", 1);

      v43 = objc_msgSend(v0, "footnoteTextView");
      if (v43)
        goto LABEL_16;
      v44 = objc_msgSend(v0, "tip");
      v45 = objc_msgSend(v44, "actions");

      if (v45)
      {
        v46 = sub_100006578(0, &qword_1000B5338, TPSURLAction_ptr);
        v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v45, v46);

        if ((unint64_t)v47 >> 62)
        {
          v65 = v47 < 0 ? v47 : v47 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v47);
          v48 = _CocoaArrayWrapper.endIndex.getter(v65);
          swift_bridgeObjectRelease(v47);
        }
        else
        {
          v48 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease(v47);
        if (v48)
        {
          v43 = objc_msgSend(v0, "actionButton");
          if (v43)
            goto LABEL_16;
        }
      }
      v49 = objc_msgSend(v0, "tip");
      v50 = objc_msgSend(v49, "containsLinks");

      v51 = v50 ? objc_msgSend(v0, "contentTextView") : objc_msgSend(v0, "contentLabel");
      v43 = v51;
      if (v43)
      {
LABEL_16:
        v67 = v43;
        v52 = objc_msgSend(v4, "topAnchor");
        v53 = objc_msgSend(v67, "bottomAnchor");
        v54 = &selRef_applicationWillTerminate;
        v55 = objc_msgSend(v52, "constraintEqualToAnchor:constant:", v53, 15.0);

        objc_msgSend(v55, "setActive:", 1);
      }
      else
      {
        v67 = 0;
        v54 = &selRef_applicationWillTerminate;
      }
      v56 = objc_msgSend(v4, "bottomAnchor");
      v57 = objc_msgSend(v0, "contentScrollView");
      v58 = objc_msgSend(v57, "bottomAnchor");

      objc_msgSend(v0, "bottomPadding");
      v60 = objc_msgSend(v56, v54[92], v58, -v59);

      objc_msgSend(v0, "setSharedTextViewBottomConstraint:", v60);
      v61 = objc_msgSend(v0, "sharedTextViewBottomConstraint");
      if (v61)
      {
        v63 = v61;
        LODWORD(v62) = 1144750080;
        objc_msgSend(v61, "setPriority:", v62);

      }
      v64 = objc_msgSend(v0, "sharedTextViewBottomConstraint");
      objc_msgSend(v64, "setActive:", 1);

      objc_msgSend(v0, "setSharedTipAvailabilityView:", v4);
      objc_msgSend(v0, "setNeedsUpdateConstraints");

    }
  }
}

id sub_100048564()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;

  v1 = objc_msgSend(v0, "sharedTipAvailabilityView");
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, "removeFromSuperview");
    objc_msgSend(v0, "setSharedTipAvailabilityView:", 0);

  }
  v3 = objc_msgSend(v0, "sharedTextViewBottomConstraint");
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, "setActive:", 0);

  }
  objc_msgSend(v0, "setSharedTextViewBottomConstraint:", 0);
  return objc_msgSend(v0, "setNeedsUpdateConstraints");
}

id sub_100048648()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  unsigned int v34;
  id result;
  void *v36;
  void *v37;
  id v38;
  id v39;
  _QWORD *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  NSString v45;
  void *v46;
  char *v47;
  id v48;
  id v49;
  _QWORD *v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  Swift::String v54;
  void *object;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSString *v60;
  id v61;
  NSString *v62;
  id v63;
  uint64_t v64;
  NSString *v65;
  unint64_t v66;
  id v67;
  NSString v68;
  Class isa;
  id v70;
  id v71;
  id v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t inited;
  NSString *v81;
  id v82;
  unint64_t v83;
  id v84;
  void *v85;
  NSString *v86;
  id v87;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  id v100;
  _QWORD *v101;
  void (*v102)(char *, _QWORD *);
  char *v103;
  char *v104;
  id v105;
  void *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  _QWORD *v122;
  char *v123;
  _QWORD *v124;
  id v125;
  uint64_t v126;
  unint64_t v127;
  _OWORD v128[2];
  __int128 v129;
  uint64_t v130;
  char v131[88];

  v1 = type metadata accessor for AttributeContainer(0);
  v111 = *(_QWORD *)(v1 - 8);
  v112 = v1;
  __chkstk_darwin(v1);
  v110 = (char *)&v107 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = type metadata accessor for AttributedString.MarkdownParsingOptions.FailurePolicy(0);
  v119 = *(_QWORD *)(v121 - 8);
  __chkstk_darwin(v121);
  v120 = (char *)&v107 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AttributedString.MarkdownParsingOptions.InterpretedSyntax(0);
  v115 = *(_QWORD *)(v4 - 8);
  v116 = v4;
  __chkstk_darwin(v4);
  v118 = (char *)&v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttributedString.MarkdownParsingOptions(0);
  __chkstk_darwin(v6);
  v117 = (char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000187A4(&qword_1000B4698);
  __chkstk_darwin(v8);
  v113 = (char *)&v107 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000187A4(&qword_1000B5310);
  __chkstk_darwin(v10);
  v123 = (char *)&v107 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = (_QWORD *)type metadata accessor for AttributedString(0);
  v122 = (_QWORD *)*(v124 - 1);
  v12 = __chkstk_darwin(v124);
  v108 = (char *)&v107 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v114 = (char *)&v107 - v15;
  __chkstk_darwin(v14);
  v109 = (char *)&v107 - v16;
  v17 = type metadata accessor for Locale(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v107 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v107 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = objc_msgSend(objc_allocWithZone((Class)TPSTipContentTextView), "init");
  objc_msgSend(v23, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v23, "setScrollEnabled:", 0);
  objc_msgSend(v23, "_setInteractiveTextSelectionDisabled:", 1);
  v24 = (void *)objc_opt_self(UIColor);
  v25 = v23;
  v125 = v24;
  v26 = objc_msgSend(v24, "clearColor");
  objc_msgSend(v25, "setBackgroundColor:", v26);

  objc_msgSend(v25, "setEditable:", 0);
  v27 = (void *)objc_opt_self(TPSAppearance);
  v28 = v25;
  v29 = objc_msgSend(v27, "footnoteFont");
  objc_msgSend(v28, "setFont:", v29);

  objc_msgSend(v28, "setDataDetectorTypes:", 0);
  v30 = objc_msgSend(v28, "textContainer");
  objc_msgSend(v30, "setHeightTracksTextView:", 1);

  objc_msgSend(v28, "setDelegate:", v0);
  objc_msgSend(v28, "setOpaque:", 1);
  objc_msgSend(v28, "setTextContainerInset:", UIEdgeInsetsZero.top, UIEdgeInsetsZero.left, UIEdgeInsetsZero.bottom, UIEdgeInsetsZero.right);
  v31 = objc_msgSend(v28, "textContainer");
  objc_msgSend(v31, "setLineFragmentPadding:", 0.0);

  v32 = objc_msgSend(v0, "appController");
  v33 = objc_msgSend(v0, "tip");
  v34 = objc_msgSend(v32, "hasLocalVariant:", v33);

  if (!v34)
  {
    v71 = objc_msgSend(v0, "tip");
    v72 = objc_msgSend(v71, "availabilityMessage");

    if (v72)
    {
      v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
      v75 = v74;

      v76 = HIBYTE(v75) & 0xF;
      if ((v75 & 0x2000000000000000) == 0)
        v76 = v73 & 0xFFFFFFFFFFFFLL;
      if (v76)
        goto LABEL_10;
      swift_bridgeObjectRelease(v75);
    }
    v77 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x800000010008C9D0);
    static Locale.current.getter(v77);
    v73 = String.init(localized:table:bundle:locale:comment:)(v22, 0, 0, 0, v19, 0, 0, 256);
    v75 = v78;
LABEL_10:
    v79 = sub_1000187A4(&qword_1000B4950);
    inited = swift_initStackObject(v79, v131);
    *(_OWORD *)(inited + 16) = xmmword_1000791F0;
    *(_QWORD *)(inited + 32) = NSForegroundColorAttributeName;
    v81 = NSForegroundColorAttributeName;
    v82 = objc_msgSend(v125, "tertiaryLabelColor");
    *(_QWORD *)(inited + 64) = sub_100006578(0, &qword_1000B44F8, UIColor_ptr);
    *(_QWORD *)(inited + 40) = v82;
    v83 = sub_100004804(inited);
    v84 = objc_msgSend(v27, "footnoteFont");
    v107 = v73;
    if (v84)
    {
      v85 = v84;
      v130 = sub_100006578(0, (unint64_t *)&qword_1000B4958, UIFont_ptr);
      *(_QWORD *)&v129 = v85;
      sub_100018DC8(&v129, v128);
      v86 = NSFontAttributeName;
      v87 = v85;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v83);
      v127 = v83;
      sub_100049AF4(v128, v86, isUniquelyReferenced_nonNull_native);
      v83 = v127;

      swift_bridgeObjectRelease(0x8000000000000000);
    }
    v89 = v124;
    v91 = v120;
    v90 = v121;
    v92 = v119;
    v93 = type metadata accessor for URL(0);
    v94 = v113;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v113, 1, 1, v93);
    v95 = v118;
    (*(void (**)(char *, _QWORD, uint64_t))(v115 + 104))(v118, enum case for AttributedString.MarkdownParsingOptions.InterpretedSyntax.full(_:), v116);
    (*(void (**)(char *, _QWORD, uint64_t))(v92 + 104))(v91, enum case for AttributedString.MarkdownParsingOptions.FailurePolicy.throwError(_:), v90);
    v96 = v117;
    AttributedString.MarkdownParsingOptions.init(allowsExtendedAttributes:interpretedSyntax:failurePolicy:languageCode:)(0, v95, v91, 0, 0);
    v97 = v114;
    AttributedString.init(markdown:options:baseURL:)(v107, v75, v96, v94);
    v98 = v110;
    AttributeContainer.init(_:)(v83);
    v99 = sub_1000041E8(&qword_1000B5318, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
    v100 = v123;
    AttributedStringProtocol.settingAttributes(_:)(v98, v89, v99);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v98, v112);
    v101 = v122;
    v102 = (void (*)(char *, _QWORD *))v122[1];
    v102(v97, v89);
    ((void (*)(id, _QWORD, uint64_t, _QWORD *))v101[7])(v100, 0, 1, v89);
    if (((unsigned int (*)(id, uint64_t, _QWORD *))v101[6])(v100, 1, v89) == 1)
    {
      sub_100049480((uint64_t)v100);
    }
    else
    {
      v103 = v109;
      ((void (*)(char *, id, _QWORD *))v101[4])(v109, v100, v89);
      sub_100006578(0, &qword_1000B5320, NSAttributedString_ptr);
      v104 = v108;
      ((void (*)(char *, char *, _QWORD *))v101[2])(v108, v103, v89);
      v105 = v28;
      v106 = (void *)NSAttributedString.init(_:)(v104);
      objc_msgSend(v105, "setAttributedText:", v106);

      v102(v103, v89);
    }
    return v28;
  }
  result = objc_msgSend(v27, "footnoteBoldTextFont");
  if (result)
  {
    v36 = result;
    v124 = objc_msgSend(objc_allocWithZone((Class)NSTextAttachment), "init");
    v37 = (void *)objc_opt_self(UIImageSymbolConfiguration);
    v38 = objc_msgSend(v37, "configurationWithFont:", v36);
    v39 = objc_msgSend(v125, "linkColor");
    v40 = objc_msgSend(v37, "configurationWithHierarchicalColor:", v39);
    v122 = v40;

    v41 = objc_msgSend((id)objc_opt_self(TPSCommonDefines), "deviceSymbol");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v43 = v42;

    v44 = (char *)v38;
    v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v43);
    v46 = (void *)objc_opt_self(UIImage);
    v47 = v44;
    v123 = v44;
    v48 = objc_msgSend(v46, "systemImageNamed:withConfiguration:", v45, v44);

    v49 = objc_msgSend(v48, "imageByApplyingSymbolConfiguration:", v40);
    v50 = v124;
    objc_msgSend(v124, "setImage:", v49);

    v51 = sub_100006578(0, &qword_1000B5328, NSMutableAttributedString_ptr);
    v52 = objc_msgSend((id)swift_getObjCClassFromMetadata(v51), "attributedStringWithAttachment:", v50);
    v53 = String.LocalizationValue.init(stringLiteral:)(0x5F4E4F5F57454956, 0xEE00454349564544);
    static Locale.current.getter(v53);
    v54._countAndFlagsBits = String.init(localized:table:bundle:locale:comment:)(v22, 0, 0, 0, v19, 0, 0, 256);
    object = v54._object;
    *(_QWORD *)&v129 = 32;
    *((_QWORD *)&v129 + 1) = 0xE100000000000000;
    String.append(_:)(v54);
    swift_bridgeObjectRelease(object);
    v56 = *((_QWORD *)&v129 + 1);
    v57 = sub_1000187A4(&qword_1000B4950);
    v58 = swift_initStackObject(v57, &v126);
    *(_OWORD *)(v58 + 16) = xmmword_100079540;
    *(_QWORD *)(v58 + 32) = NSFontAttributeName;
    v59 = sub_100006578(0, (unint64_t *)&qword_1000B4958, UIFont_ptr);
    *(_QWORD *)(v58 + 40) = v36;
    *(_QWORD *)(v58 + 64) = v59;
    *(_QWORD *)(v58 + 72) = NSForegroundColorAttributeName;
    v60 = NSFontAttributeName;
    v61 = v36;
    v62 = NSForegroundColorAttributeName;
    v63 = objc_msgSend(v125, "linkColor");
    v64 = sub_100006578(0, &qword_1000B44F8, UIColor_ptr);
    *(_QWORD *)(v58 + 80) = v63;
    *(_QWORD *)(v58 + 104) = v64;
    *(_QWORD *)(v58 + 112) = NSLinkAttributeName;
    *(_QWORD *)(v58 + 144) = &type metadata for String;
    *(_QWORD *)(v58 + 120) = 35;
    *(_QWORD *)(v58 + 128) = 0xE100000000000000;
    v65 = NSLinkAttributeName;
    v66 = sub_100004804(v58);
    v67 = objc_allocWithZone((Class)NSAttributedString);
    v68 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v56);
    type metadata accessor for Key(0);
    sub_1000041E8(&qword_1000B4098, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100078B90);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v66);
    v70 = objc_msgSend(v67, "initWithString:attributes:", v68, isa);

    objc_msgSend(v52, "appendAttributedString:", v70);
    objc_msgSend(v28, "setAttributedText:", v52);

    return v28;
  }
  __break(1u);
  return result;
}

void sub_10004931C()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;

  v1 = objc_msgSend(v0, "contentLabelBottomConstraint");
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, "setActive:", 0);

  }
  v3 = objc_msgSend(v0, "textViewBottomConstraint");
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, "setActive:", 0);

  }
  v5 = objc_msgSend(v0, "actionButtonBottomConstraint");
  if (v5)
  {
    v6 = v5;
    objc_msgSend(v5, "setActive:", 0);

  }
  v7 = objc_msgSend(v0, "footnoteBottomConstraint");
  if (v7)
  {
    v8 = v7;
    objc_msgSend(v7, "setActive:", 0);

  }
  v9 = objc_msgSend(v0, "sharedTextViewBottomConstraint");
  if (v9)
  {
    v10 = v9;
    objc_msgSend(v9, "setActive:", 0);

  }
}

uint64_t sub_100049480(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000187A4(&qword_1000B5310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *sub_1000494C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  _OWORD *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[9];
  _OWORD v42[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000187A4(&qword_1000B5330);
  v40 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v39 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v38 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = (_OWORD *)swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_25;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v18 >= v38)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v39 + 8 * v18);
    ++v14;
    if (!v20)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v38)
        goto LABEL_37;
      v20 = *(_QWORD *)(v39 + 8 * v14);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v38)
        {
LABEL_37:
          swift_release(v5);
          if ((v40 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v20 = *(_QWORD *)(v39 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v14 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_46;
            if (v14 >= v38)
              goto LABEL_37;
            v20 = *(_QWORD *)(v39 + 8 * v14);
            ++v21;
            if (v20)
              goto LABEL_24;
          }
        }
        v14 = v21;
      }
    }
LABEL_24:
    v11 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_25:
    v22 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v23 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
    if ((v40 & 1) != 0)
    {
      sub_100018DC8(v23, v42);
    }
    else
    {
      sub_10004A184((uint64_t)v23, (uint64_t)v42);
      v24 = v22;
    }
    v25 = *(_QWORD *)(v8 + 40);
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v28 = v27;
    Hasher.init(_seed:)(v41, v25);
    String.hash(into:)(v41, v26, v28);
    v29 = Hasher._finalize()();
    result = (_OWORD *)swift_bridgeObjectRelease(v28);
    v30 = -1 << *(_BYTE *)(v8 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v12 + 8 * v32);
      }
      while (v36 == -1);
      v15 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v15) = v22;
    result = sub_100018DC8(v42, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v19 = (_QWORD *)(v5 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v19, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = (_OWORD *)swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_1000497F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000187A4(&qword_1000B5348);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v19 >= v35)
          goto LABEL_37;
        v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v35)
            goto LABEL_37;
          v20 = v36[v14];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                v14 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_44;
                if (v14 >= v35)
                  goto LABEL_37;
                v20 = v36[v14];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v14 = v21;
          }
        }
LABEL_24:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_100018DC8(v25, v38);
      }
      else
      {
        sub_10004A184((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
      *v16 = v24;
      v16[1] = v23;
      result = (uint64_t)sub_100018DC8(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

_OWORD *sub_100049AF4(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _OWORD *result;
  unint64_t v18;
  char v19;
  uint64_t v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_1000044D4((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_QWORD *)(v15[7] + 32 * v9);
        sub_100033DE4(v16);
        return sub_100018DC8(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_100049FC0();
      goto LABEL_7;
    }
    sub_1000494C0(v12, a3 & 1);
    v18 = sub_1000044D4((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100049D44(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for Key(0);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

_OWORD *sub_100049C14(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10001023C(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        sub_100033DE4(v19);
        return sub_100018DC8(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10004A1C0();
      goto LABEL_7;
    }
    sub_1000497F8(v15, a4 & 1);
    v21 = sub_10001023C(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100049DA8(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_OWORD *sub_100049D44(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_100018DC8(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

_OWORD *sub_100049DA8(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_100018DC8(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

id sub_100049E10()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_1000187A4(&qword_1000B5340);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100049FC0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  sub_1000187A4(&qword_1000B5330);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_10004A184(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_100018DC8(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10004A184(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *sub_10004A1C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_1000187A4(&qword_1000B5348);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_10004A184(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_100018DC8(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_10004A3A4(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t (*sub_10004A3B0())()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v0 = sub_10004A6F0();
  EnvironmentValues.subscript.getter(v5, &type metadata for TipActionClientURLHandlerKey, &type metadata for TipActionClientURLHandlerKey, v0);
  v1 = v5[0];
  if (!v5[0])
    return 0;
  v2 = v5[1];
  v3 = swift_allocObject(&unk_1000A4008, 32, 7);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  return sub_10004A750;
}

uint64_t _s7SwiftUI4ViewP4TipsE14onTipActionURL7performQry10Foundation0H0Vc_tF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t (*v10)();
  _QWORD v12[2];

  KeyPath = swift_getKeyPath(&unk_10007A6C8);
  if (a1)
  {
    v9 = swift_allocObject(&unk_1000A3F90, 32, 7);
    *(_QWORD *)(v9 + 16) = a1;
    *(_QWORD *)(v9 + 24) = a2;
    v10 = sub_10004A6D0;
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v12[0] = v10;
  v12[1] = v9;
  sub_1000331C4(a1, a2);
  View.environment<A>(_:_:)(KeyPath, v12, a3, a4);
  swift_release(KeyPath);
  return sub_100005500((uint64_t)v10, v9);
}

uint64_t sub_10004A4FC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  unint64_t v6;
  _QWORD v8[2];

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject(&unk_1000A3FE0, 32, 7);
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = swift_allocObject(&unk_1000A3FB8, 32, 7);
    *(_QWORD *)(v4 + 16) = sub_10004A6D0;
    *(_QWORD *)(v4 + 24) = v3;
    v5 = sub_10004A750;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v8[0] = v5;
  v8[1] = v4;
  sub_1000331C4(v1, v2);
  v6 = sub_10004A6F0();
  return EnvironmentValues.subscript.setter(v8, &type metadata for TipActionClientURLHandlerKey, &type metadata for TipActionClientURLHandlerKey, v6);
}

uint64_t sub_10004A5B0()
{
  uint64_t v0;

  sub_1000176F8(&qword_1000B5350);
  v0 = type metadata accessor for ModifiedContent(255);
  sub_10004A610();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v0);
}

unint64_t sub_10004A610()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5358;
  if (!qword_1000B5358)
  {
    v1 = sub_1000176F8(&qword_1000B5350);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5358);
  }
  return result;
}

double sub_10004A65C@<D0>(_OWORD *a1@<X8>)
{
  unint64_t v2;
  double result;
  __int128 v4;

  v2 = sub_10004A6F0();
  EnvironmentValues.subscript.getter(&v4, &type metadata for TipActionClientURLHandlerKey, &type metadata for TipActionClientURLHandlerKey, v2);
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t sub_10004A6AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004A6D0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_10004A6F0()
{
  unint64_t result;

  result = qword_1000B5360;
  if (!qword_1000B5360)
  {
    result = swift_getWitnessTable(&unk_10007A710, &type metadata for TipActionClientURLHandlerKey);
    atomic_store(result, (unint64_t *)&qword_1000B5360);
  }
  return result;
}

ValueMetadata *type metadata accessor for TipActionClientURLHandlerKey()
{
  return &type metadata for TipActionClientURLHandlerKey;
}

void sub_10004A754(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  id v35;
  NSString v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  Swift::String v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  char v49[8];
  void **aBlock;
  unint64_t v51;
  uint64_t (*v52)(uint64_t);
  void *v53;
  void (*v54)();
  uint64_t v55;

  v44 = a4;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v47 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v45 = *(_QWORD *)(v12 - 8);
  v46 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TipsLog(0, v15);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v21 = swift_errorRetain(a2);
    static TipsLog.default.getter(v21);
    swift_getErrorValue(a2, v49, v48);
    v22 = Error.localizedDescription.getter(v48[1], v48[2]);
    v24 = v23;
    log(_:_:)(v20, v22, v23);
    swift_bridgeObjectRelease(v24);
    swift_errorRelease(a2);
LABEL_3:
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    goto LABEL_5;
  }
  if (!a1)
  {
    static TipsLog.default.getter(v18);
    aBlock = 0;
    v51 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease(v51);
    aBlock = (void **)0xD000000000000015;
    v51 = 0x800000010008CA20;
    v42._countAndFlagsBits = a3;
    v42._object = v44;
    String.append(_:)(v42);
    v43 = v51;
    log(_:_:)(v20, aBlock, v51);
    swift_bridgeObjectRelease(v43);
    goto LABEL_3;
  }
LABEL_5:
  sub_100010CA8();
  v25 = (void *)static OS_dispatch_queue.main.getter();
  v26 = swift_allocObject(&unk_1000A40C8, 32, 7);
  *(_QWORD *)(v26 + 16) = a1;
  *(_QWORD *)(v26 + 24) = a5;
  v54 = sub_10004B010;
  v55 = v26;
  aBlock = _NSConcreteStackBlock;
  v51 = 1107296256;
  v52 = sub_100003DA8;
  v53 = &unk_1000A40E0;
  v27 = _Block_copy(&aBlock);
  v28 = v55;
  v29 = a1;
  v30 = a5;
  v31 = swift_release(v28);
  static DispatchQoS.unspecified.getter(v31);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v32 = sub_10004B018();
  v33 = sub_1000187A4(&qword_1000B44B0);
  v34 = sub_10004B060();
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v33, v34, v9, v32);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v27);
  _Block_release(v27);

  (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v14, v46);
  if (a1)
  {
    v35 = v29;
    v36 = objc_msgSend(v35, "identifier");
    if (!v36)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v38 = v37;
      v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v38);
    }
    v39 = (void *)objc_opt_self(TPSAnalyticsEventAppLaunched);
    v40 = objc_msgSend(v35, "correlationID");
    v41 = objc_msgSend(v39, "eventWithContentID:collectionID:correlationID:launchType:", v36, 0, v40, TPSAnalyticsLaunchTypeSharedTipModal);

    objc_msgSend(v41, "log");
  }
}

void sub_10004AB10(void *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(int);
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  _QWORD v23[5];
  uint64_t v24;

  type metadata accessor for TPSSharedTipViewController();
  v4 = a1;
  v5 = sub_1000349EC(a1);
  v6 = objc_msgSend(a2, "appController");
  objc_msgSend(v5, "setAppController:", v6);

  objc_msgSend(v5, "setDelegate:", a2);
  v7 = (char *)v5;
  v8 = objc_msgSend(a2, "preferredUserInterfaceStyle");
  v9 = (uint64_t)v8;
  if (a1)
  {
    if (sub_100035100(v8 == (id)2))
      v9 = 2;
    else
      v9 = 1;
  }
  objc_msgSend(v7, "setOverrideUserInterfaceStyle:", v9);

  v10 = swift_allocObject(&unk_1000A4118, 24, 7);
  *(_QWORD *)(v10 + 16) = a2;
  v11 = (void (**)(int))&v7[OBJC_IVAR____TtC4Tips26TPSSharedTipViewController_onDismissed];
  v12 = *(_QWORD *)&v7[OBJC_IVAR____TtC4Tips26TPSSharedTipViewController_onDismissed];
  v13 = *(_QWORD *)&v7[OBJC_IVAR____TtC4Tips26TPSSharedTipViewController_onDismissed + 8];
  *v11 = sub_10004B0D0;
  v11[1] = (void (*)(int))v10;
  v14 = a2;
  sub_100005500(v12, v13);
  v15 = objc_msgSend(v14, "tipsByCollectionViewController");
  objc_msgSend(v15, "setShouldHoldOffVideo:", 1);

  v16 = objc_msgSend(v14, "tipsByCollectionViewController");
  objc_msgSend(v16, "stopVideoForCurrentTip");

  v17 = objc_msgSend(objc_allocWithZone((Class)UINavigationController), "initWithRootViewController:", v7);
  v18 = swift_allocObject(&unk_1000A4140, 32, 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = v14;
  v23[4] = sub_10004B104;
  v24 = v18;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 1107296256;
  v23[2] = sub_100003DA8;
  v23[3] = &unk_1000A4158;
  v19 = _Block_copy(v23);
  v20 = v24;
  v21 = v4;
  v22 = v14;
  swift_release(v20);
  objc_msgSend(v22, "presentViewController:animated:completion:", v17, 1, v19);
  _Block_release(v19);

}

void sub_10004AD74(int a1, id a2)
{
  id v3;

  objc_msgSend(a2, "updateShouldHoldOffVideo");
  v3 = objc_msgSend(a2, "tipsByCollectionViewController");
  objc_msgSend(v3, "continueVideoForCurrentTip");

}

void sub_10004ADD4(void *a1, void *a2)
{
  id v3;
  id v4;

  if (a1)
  {
    v3 = a1;
    v4 = objc_msgSend(a2, "appController");
    objc_msgSend(v4, "logSharedTipDisplayed:isEligible:", v3, 0);

  }
}

void sub_10004AE40(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_10004AFD8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

void sub_10004B004(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10004A754(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32));
}

void sub_10004B010()
{
  uint64_t v0;

  sub_10004AB10(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

unint64_t sub_10004B018()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B44A8;
  if (!qword_1000B44A8)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1000B44A8);
  }
  return result;
}

unint64_t sub_10004B060()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B44B8;
  if (!qword_1000B44B8)
  {
    v1 = sub_1000176F8(&qword_1000B44B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000B44B8);
  }
  return result;
}

uint64_t sub_10004B0AC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10004B0D0(int a1)
{
  uint64_t v1;

  sub_10004AD74(a1, *(id *)(v1 + 16));
}

uint64_t sub_10004B0D8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10004B104()
{
  uint64_t v0;

  sub_10004ADD4(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10004B120@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10007A778);
  v5 = swift_getKeyPath(&unk_10007A7A0);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10004B19C(void **a1, void **a2)
{
  void *v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  void *v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10007A778);
  v5 = swift_getKeyPath(&unk_10007A7A0);
  v8 = v2;
  v6 = v2;
  static Published.subscript.setter(&v8, v3, KeyPath, v5);
  return sub_1000354B4();
}

uint64_t sub_10004B218@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10007A7D0);
  v5 = swift_getKeyPath(&unk_10007A7F8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10004B294(char *a1, void **a2)
{
  char v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10007A7D0);
  v5 = swift_getKeyPath(&unk_10007A7F8);
  v7 = v2;
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

id sub_10004B388(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  objc_class *v9;
  id v10;
  char *v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  objc_class *v20;
  id v21;
  objc_super v23;

  v3 = type metadata accessor for ChecklistView(0);
  v4 = __chkstk_darwin(v3);
  v6 = (id *)((char *)&v23.receiver - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v8 = (char *)&v23 - v7;
  v9 = (objc_class *)type metadata accessor for ChecklistViewModel(0);
  v10 = objc_allocWithZone(v9);
  v11 = v1;
  v12 = objc_msgSend(v10, "init");
  *(_QWORD *)&v11[OBJC_IVAR___TPSChecklistViewController_viewModel] = v12;
  *v6 = swift_getKeyPath(&unk_10007A818);
  v13 = sub_1000187A4(&qword_1000B41C0);
  swift_storeEnumTagMultiPayload(v6, v13, 0);
  v14 = (_QWORD *)((char *)v6 + *(int *)(v3 + 20));
  *v14 = swift_getKeyPath(&unk_10007A848);
  v15 = sub_1000187A4(&qword_1000B5008);
  swift_storeEnumTagMultiPayload(v14, v15, 0);
  v16 = (_QWORD *)((char *)v6 + *(int *)(v3 + 24));
  v17 = sub_10004BEDC();
  *v16 = ObservedObject.init(wrappedValue:)(v12, v9, v17);
  v16[1] = v18;
  sub_10004BF24((uint64_t)v6, (uint64_t)v8);
  v19 = objc_allocWithZone((Class)sub_1000187A4(&qword_1000B53A0));
  *(_QWORD *)&v11[OBJC_IVAR___TPSChecklistViewController_hostingController] = UIHostingController.init(rootView:)(v8);

  v20 = (objc_class *)type metadata accessor for ChecklistViewController();
  v23.receiver = v11;
  v23.super_class = v20;
  v21 = objc_msgSendSuper2(&v23, "initWithCoder:", a1);

  return v21;
}

uint64_t sub_10004B594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___TPSChecklistViewController_viewModel);
  KeyPath = swift_getKeyPath(&unk_10007A778);
  v3 = swift_getKeyPath(&unk_10007A7A0);
  static Published.subscript.getter(&v5, v1, KeyPath, v3);
  swift_release(KeyPath);
  swift_release(v3);
  return v5;
}

void sub_10004B69C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  Class isa;
  objc_super v33;

  v1 = v0;
  v33.receiver = v0;
  v33.super_class = (Class)type metadata accessor for ChecklistViewController();
  objc_msgSendSuper2(&v33, "loadView");
  v2 = OBJC_IVAR___TPSChecklistViewController_hostingController;
  v3 = objc_msgSend(*(id *)&v0[OBJC_IVAR___TPSChecklistViewController_hostingController], "view");
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v0, "addChildViewController:", *(_QWORD *)&v0[v2]);
    v5 = objc_msgSend(v0, "view");
    if (v5)
    {
      v6 = v5;
      objc_msgSend(v5, "addSubview:", v4);

      objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      v7 = objc_msgSend(v1, "view");
      if (v7)
      {
        v8 = v7;
        v9 = sub_1000187A4(&qword_1000B4500);
        v10 = swift_allocObject(v9, 64, 7);
        *(_OWORD *)(v10 + 16) = xmmword_100078F30;
        v11 = objc_msgSend(v4, "leadingAnchor");
        v12 = objc_msgSend(v1, "view");
        if (v12)
        {
          v13 = v12;
          v14 = objc_msgSend(v12, "leadingAnchor");

          v15 = objc_msgSend(v11, "constraintEqualToAnchor:", v14);
          *(_QWORD *)(v10 + 32) = v15;
          v16 = objc_msgSend(v4, "topAnchor");
          v17 = objc_msgSend(v1, "view");
          if (v17)
          {
            v18 = v17;
            v19 = objc_msgSend(v17, "topAnchor");

            v20 = objc_msgSend(v16, "constraintEqualToAnchor:", v19);
            *(_QWORD *)(v10 + 40) = v20;
            v21 = objc_msgSend(v4, "trailingAnchor");
            v22 = objc_msgSend(v1, "view");
            if (v22)
            {
              v23 = v22;
              v24 = objc_msgSend(v22, "trailingAnchor");

              v25 = objc_msgSend(v21, "constraintEqualToAnchor:", v24);
              *(_QWORD *)(v10 + 48) = v25;
              v26 = objc_msgSend(v4, "bottomAnchor");
              v27 = objc_msgSend(v1, "view");
              if (v27)
              {
                v28 = v27;
                v29 = objc_msgSend(v27, "bottomAnchor");

                v30 = objc_msgSend(v26, "constraintEqualToAnchor:", v29);
                *(_QWORD *)(v10 + 56) = v30;
                specialized Array._endMutation()(v31);
                sub_10004BDC0();
                isa = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease(v10);
                objc_msgSend(v8, "addConstraints:", isa);

                objc_msgSend(*(id *)&v1[v2], "didMoveToParentViewController:", v1);
                return;
              }
LABEL_15:
              __break(1u);
              return;
            }
LABEL_14:
            __break(1u);
            goto LABEL_15;
          }
LABEL_13:
          __break(1u);
          goto LABEL_14;
        }
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
}

uint64_t sub_10004BBD0(char a1)
{
  char *v1;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  objc_super v9;

  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for ChecklistViewController();
  objc_msgSendSuper2(&v9, "viewDidAppear:", a1 & 1);
  v3 = *(_QWORD *)&v1[OBJC_IVAR___TPSChecklistViewController_viewModel];
  KeyPath = swift_getKeyPath(&unk_10007A7D0);
  v5 = swift_getKeyPath(&unk_10007A7F8);
  static Published.subscript.getter(&v8, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  if (v8 == 1)
  {
    v7 = *(_QWORD *)(v3 + OBJC_IVAR___TPSChecklistViewModel_currentDisplayTips);
    *(_QWORD *)(v3 + OBJC_IVAR___TPSChecklistViewModel_currentDisplayTips) = 0;
    return swift_bridgeObjectRelease(v7);
  }
  return result;
}

void sub_10004BCFC()
{
  uint64_t v0;

}

id sub_10004BD28()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ChecklistViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ChecklistViewController()
{
  return objc_opt_self(TPSChecklistViewController);
}

unint64_t sub_10004BDC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4508;
  if (!qword_1000B4508)
  {
    v1 = objc_opt_self(NSLayoutConstraint);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000B4508);
  }
  return result;
}

uint64_t sub_10004BDFC()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10004BE1C()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10004BE3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ColorScheme(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.colorScheme.setter(v4);
}

uint64_t sub_10004BEBC()
{
  return EnvironmentValues.dismiss.getter();
}

unint64_t sub_10004BEDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B50E0;
  if (!qword_1000B50E0)
  {
    v1 = type metadata accessor for ChecklistViewModel(255);
    result = swift_getWitnessTable(&unk_1000792C8, v1);
    atomic_store(result, (unint64_t *)&qword_1000B50E0);
  }
  return result;
}

uint64_t sub_10004BF24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ChecklistView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_10004BF68(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  char *v16;
  uint64_t v17;
  id v18;
  objc_class *v19;
  objc_super v21;

  v3 = type metadata accessor for ChecklistView(0);
  v4 = __chkstk_darwin(v3);
  v6 = (id *)((char *)&v21.receiver - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v8 = (char *)&v21 - v7;
  *(_QWORD *)&v1[OBJC_IVAR___TPSChecklistViewController_viewModel] = a1;
  *v6 = swift_getKeyPath(&unk_10007A818);
  v9 = sub_1000187A4(&qword_1000B41C0);
  swift_storeEnumTagMultiPayload(v6, v9, 0);
  v10 = (_QWORD *)((char *)v6 + *(int *)(v3 + 20));
  *v10 = swift_getKeyPath(&unk_10007A848);
  v11 = sub_1000187A4(&qword_1000B5008);
  swift_storeEnumTagMultiPayload(v10, v11, 0);
  v12 = (_QWORD *)((char *)v6 + *(int *)(v3 + 24));
  v13 = type metadata accessor for ChecklistViewModel(0);
  v14 = sub_10004BEDC();
  v15 = a1;
  v16 = v1;
  *v12 = ObservedObject.init(wrappedValue:)(v15, v13, v14);
  v12[1] = v17;
  sub_10004BF24((uint64_t)v6, (uint64_t)v8);
  v18 = objc_allocWithZone((Class)sub_1000187A4(&qword_1000B53A0));
  *(_QWORD *)&v16[OBJC_IVAR___TPSChecklistViewController_hostingController] = UIHostingController.init(rootView:)(v8);

  v19 = (objc_class *)type metadata accessor for ChecklistViewController();
  v21.receiver = v16;
  v21.super_class = v19;
  return objc_msgSendSuper2(&v21, "initWithNibName:bundle:", 0, 0);
}

void sub_10004C100(void *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;

  *a3 = swift_getKeyPath(&unk_10007A880);
  v6 = sub_1000187A4(&qword_1000B5260);
  swift_storeEnumTagMultiPayload(a3, v6, 0);
  v7 = (int *)type metadata accessor for CollectionListItemView(0);
  v8 = (_QWORD *)((char *)a3 + v7[5]);
  *v8 = swift_getKeyPath(&unk_10007A8B0);
  v9 = sub_1000187A4(&qword_1000B41C0);
  swift_storeEnumTagMultiPayload(v8, v9, 0);
  v10 = (_QWORD *)((char *)a3 + v7[6]);
  v11 = type metadata accessor for CollectionListViewModel(0);
  v12 = sub_1000041E8(&qword_1000B4510, type metadata accessor for CollectionListViewModel, (uint64_t)&unk_1000796A8);
  v13 = a1;
  *v10 = ObservedObject.init(wrappedValue:)(v13, v11, v12);
  v10[1] = v14;
  *(_QWORD *)((char *)a3 + v7[8]) = a2;
  v15 = a2;
  v16 = objc_msgSend(v15, "identifier");
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  v20 = objc_msgSend(v15, "title");
  if (v20)
  {
    v21 = v20;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v24 = v23;

  }
  else
  {

    v22 = 0;
    v24 = 0xE000000000000000;
  }

  v25 = (_QWORD *)((char *)a3 + v7[7]);
  *v25 = v17;
  v25[1] = v19;
  v25[2] = v22;
  v25[3] = v24;
}

uint64_t sub_10004C28C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v1 = v0;
  v2 = sub_1000187A4(&qword_1000B4698);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v22 - v6;
  v8 = sub_1000187A4(&qword_1000B5598);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TipsContentModel(0);
  v11 = (void *)static TipsContentModel.shared()();
  v12 = *(void **)(v1 + *(int *)(type metadata accessor for CollectionListItemView(0) + 32));
  v13 = objc_msgSend(v12, "tileAssets");
  v14 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v10, 1, 1, v14);
  v15 = (void *)dispatch thunk of TipsContentModel.assetConfiguration(for:assets:updatedColorScheme:)(v12, v13, v10);

  sub_100011DE0((uint64_t)v10, &qword_1000B5598);
  dispatch thunk of TipsContentModel.assetURL(for:type:)(v15, 0);
  if (v15 && (v16 = objc_msgSend(v15, "cacheIdentifierForType:", 0)) != 0)
  {
    v17 = v16;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v20 = v19;

  }
  else
  {
    v18 = 0;
    v20 = 0;
  }
  sub_1000121BC((uint64_t)v7, (uint64_t)v5, &qword_1000B4698);
  RemoteImageView.init(identifier:url:isLoaded:placeholder:)(v18, v20, v5, 0, 0, 0, sub_10004C4A4, 0, &type metadata for Color, &protocol witness table for Color);

  return sub_100011DE0((uint64_t)v7, &qword_1000B4698);
}

uint64_t sub_10004C4A4@<X0>(uint64_t *a1@<X8>)
{
  id v2;
  uint64_t result;

  v2 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemBackgroundColor");
  result = Color.init(_:)(v2);
  *a1 = result;
  return result;
}

uint64_t sub_10004C4E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t KeyPath;
  uint64_t v32;
  id v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  id v77;
  void *v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _OWORD v148[3];

  v136 = a2;
  v3 = sub_1000187A4(&qword_1000B5488);
  v4 = __chkstk_darwin(v3);
  v145 = (uint64_t)&v126 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v137 = (uint64_t *)((char *)&v126 - v6);
  v7 = sub_1000187A4(&qword_1000B5490);
  __chkstk_darwin(v7);
  v9 = (char *)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000187A4(&qword_1000B5498);
  __chkstk_darwin(v10);
  v12 = (char *)&v126 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_1000187A4(&qword_1000B54A0);
  __chkstk_darwin(v143);
  v14 = (char *)&v126 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_1000187A4(&qword_1000B54A8);
  v15 = __chkstk_darwin(v144);
  v141 = (uint64_t)&v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v126 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v126 - v20;
  v22 = sub_1000187A4(&qword_1000B54B0);
  __chkstk_darwin(v22);
  v24 = (char *)&v126 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004CDBC(a1);
  v139 = a1;
  v135 = v24;
  sub_10004D074(a1, (uint64_t)v24, (uint64_t)v9);
  v25 = sub_100014668(&qword_1000B54B8, &qword_1000B5490, (void (*)(void))sub_100019514);
  View.accessibilityHidden(_:)(1, v7, v25);
  v26 = sub_100011DE0((uint64_t)v9, &qword_1000B5490);
  v27 = static Edge.Set.leading.getter(v26);
  v28 = type metadata accessor for CollectionListItemView(0);
  v29 = a1 + *(int *)(v28 + 24);
  v30 = *(void **)(v29 + 8);
  KeyPath = swift_getKeyPath(&unk_10007A988);
  v32 = swift_getKeyPath(&unk_10007A9B0);
  v33 = v30;
  static Published.subscript.getter(v148, v33, KeyPath, v32);

  swift_release(KeyPath);
  swift_release(v32);
  v34 = -4.0;
  if (LOBYTE(v148[0]))
    v34 = -8.0;
  v35 = EdgeInsets.init(_all:)(v34);
  v37 = v36;
  v39 = v38;
  v41 = v40;
  sub_1000121BC((uint64_t)v12, (uint64_t)v14, &qword_1000B5498);
  v42 = &v14[*(int *)(v143 + 36)];
  *v42 = v27;
  *((double *)v42 + 1) = v35;
  *((_QWORD *)v42 + 2) = v37;
  *((_QWORD *)v42 + 3) = v39;
  *((_QWORD *)v42 + 4) = v41;
  v42[40] = 0;
  v43 = sub_100011DE0((uint64_t)v12, &qword_1000B5498);
  v44 = static Alignment.center.getter(v43);
  _FrameLayout.init(width:height:alignment:)(v148, 0x4040000000000000, 0, 0x4040000000000000, 0, v44, v45);
  sub_1000121BC((uint64_t)v14, (uint64_t)v19, &qword_1000B54A0);
  v46 = &v19[*(int *)(v144 + 36)];
  v47 = v148[1];
  *(_OWORD *)v46 = v148[0];
  *((_OWORD *)v46 + 1) = v47;
  *((_OWORD *)v46 + 2) = v148[2];
  sub_100011DE0((uint64_t)v14, &qword_1000B54A0);
  v140 = v21;
  sub_100014780((uint64_t)v19, (uint64_t)v21, &qword_1000B54A8);
  v134 = v29;
  v48 = *(void **)(v29 + 8);
  v49 = *(int *)(v28 + 32);
  v50 = *(_QWORD *)(v139 + v49);
  v58 = (uint64_t)objc_msgSend(v48, "titleFor:", v50);
  v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
  v53 = v52;

  v146 = v51;
  v147 = v53;
  v54 = sub_100014614();
  v55 = Text.init<A>(_:)(&v146, &type metadata for String, v54);
  v143 = v56;
  v144 = v55;
  LODWORD(v58) = v57;
  v138 = v59;
  v133 = ((uint64_t (*)(void))static Edge.Set.trailing.getter)();
  v60 = EdgeInsets.init(_all:)(12.0);
  v62 = v61;
  v64 = v63;
  v66 = v65;
  v67 = objc_msgSend(v48, "shouldDisplayBadgeFor:", v50);
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v142 = 0;
  v71 = 0;
  v72 = 0.0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  if (v67)
  {
    v76 = objc_msgSend(v48, "tipCountFor:", v50);
    LODWORD(v132) = v58;
    v77 = v76;
    v78 = (void *)objc_opt_self(NSNumberFormatter);
    v79 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v77);
    v80 = objc_msgSend(v78, "localizedStringFromNumber:numberStyle:", v79, 0);

    v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
    v83 = v82;

    v146 = v81;
    v147 = v83;
    v58 = Text.init<A>(_:)(&v146, &type metadata for String, v54);
    v85 = v84;
    v87 = v86;
    v89 = v88 & 1;
    v90 = static Color.secondary.getter();
    v68 = Text.foregroundColor(_:)(v90, v58, v85, v89, v87);
    v69 = v91;
    v93 = v92;
    v142 = v94;
    swift_release(v90);
    v70 = v93 & 1;
    v95 = v58;
    LOBYTE(v58) = v132;
    sub_100014658(v95, v85, v89);
    v96 = swift_bridgeObjectRelease(v87);
    LOBYTE(v85) = static Edge.Set.trailing.getter(v96);
    v72 = EdgeInsets.init(_all:)(3.0);
    v73 = v97;
    v74 = v98;
    v75 = v99;
    v71 = v85;
  }
  v130 = v73;
  v131 = v74;
  v132 = v75;
  v100 = v58 & 1;
  v101 = v72;
  v102 = v71;
  v103 = swift_getKeyPath(&unk_10007A988);
  v104 = v68;
  v105 = v69;
  v106 = swift_getKeyPath(&unk_10007A9B0);
  v107 = v48;
  static Published.subscript.getter(&v146, v107, v103, v106);

  swift_release(v103);
  swift_release(v106);
  LODWORD(v106) = v146;
  LODWORD(v103) = objc_msgSend(*(id *)(v134 + 8), "shouldDisplayCheckmarkFor:", *(_QWORD *)(v139 + v49));
  v108 = static VerticalAlignment.center.getter();
  v109 = v70;
  v126 = v70;
  v110 = (uint64_t)v137;
  *v137 = v108;
  *(_QWORD *)(v110 + 8) = 0;
  *(_BYTE *)(v110 + 16) = 1;
  v111 = sub_1000187A4(&qword_1000B5528);
  sub_100014B28(v103, v106, v110 + *(int *)(v111 + 44));
  v112 = v141;
  sub_1000121BC((uint64_t)v140, v141, &qword_1000B54A8);
  sub_1000121BC(v110, v145, &qword_1000B5488);
  v113 = v112;
  v114 = v136;
  sub_1000121BC(v113, v136, &qword_1000B54A8);
  v115 = (int *)sub_1000187A4(&qword_1000B5530);
  v116 = v114 + v115[12];
  v117 = v143;
  *(_QWORD *)v116 = v144;
  *(_QWORD *)(v116 + 8) = v117;
  v129 = v100;
  *(_BYTE *)(v116 + 16) = v100;
  *(_QWORD *)(v116 + 24) = v138;
  *(_BYTE *)(v116 + 32) = v133;
  *(double *)(v116 + 40) = v60;
  *(_QWORD *)(v116 + 48) = v62;
  *(_QWORD *)(v116 + 56) = v64;
  *(_QWORD *)(v116 + 64) = v66;
  *(_BYTE *)(v116 + 72) = 0;
  v118 = v114 + v115[16];
  *(_QWORD *)v118 = 0;
  *(_BYTE *)(v118 + 8) = 1;
  v119 = v114 + v115[20];
  v127 = v104;
  *(_QWORD *)v119 = v104;
  *(_QWORD *)(v119 + 8) = v105;
  v128 = v105;
  v120 = v142;
  *(_QWORD *)(v119 + 16) = v109;
  *(_QWORD *)(v119 + 24) = v120;
  *(_QWORD *)(v119 + 32) = v102;
  *(double *)(v119 + 40) = v101;
  v121 = v131;
  *(_QWORD *)(v119 + 48) = v130;
  *(_QWORD *)(v119 + 56) = v121;
  *(_QWORD *)(v119 + 64) = v132;
  *(_BYTE *)(v119 + 72) = 0;
  sub_1000121BC(v145, v114 + v115[24], &qword_1000B5488);
  sub_100031A98(v144, v143, v100);
  v122 = v138;
  swift_bridgeObjectRetain(v138);
  v123 = v105;
  LOBYTE(v107) = v126;
  v124 = v142;
  sub_1000147C4(v104, v123, v126, v142);
  sub_100011DE0(v110, &qword_1000B5488);
  sub_100011DE0((uint64_t)v140, &qword_1000B54A8);
  sub_100011DE0((uint64_t)v135, &qword_1000B54B0);
  sub_100011DE0(v145, &qword_1000B5488);
  sub_1000147F4(v127, v128, (char)v107, v124);
  sub_100014658(v144, v143, v129);
  swift_bridgeObjectRelease(v122);
  return sub_100011DE0(v141, &qword_1000B54A8);
}

uint64_t sub_10004CDBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = sub_1000187A4(&qword_1000B42D8);
  __chkstk_darwin(v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000187A4(&qword_1000B5590);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_1000187A4(&qword_1000B5520);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(*(id *)(a1 + *(int *)(type metadata accessor for CollectionListItemView(0) + 32)), "collectionAssets");
  if (v12
    && (v13 = v12, v14 = objc_msgSend(v12, "symbolId"), v13, v14))
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v18 = Image.init(_internalSystemName:)(v15, v17);
    v19 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v4, 1, 1, v19);
    v20 = static Font.system(size:weight:design:)(0, 1, v4, 22.0);
    sub_100011DE0((uint64_t)v4, &qword_1000B42D8);
    KeyPath = swift_getKeyPath(&unk_10007A9D0);
    *v7 = v18;
    v7[1] = KeyPath;
    v7[2] = v20;
    swift_storeEnumTagMultiPayload(v7, v5, 0);
    v22 = sub_1000187A4(&qword_1000B5510);
    v23 = sub_1000154C8();
    v24 = sub_1000086E8(&qword_1000B5518, &qword_1000B5520, (uint64_t)&protocol conformance descriptor for RemoteImageView<A>);
    return _ConditionalContent<>.init(storage:)(v7, v22, v8, v23, v24);
  }
  else
  {
    sub_10004C28C();
    (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(v7, v11, v8);
    swift_storeEnumTagMultiPayload(v7, v5, 1);
    v26 = sub_1000187A4(&qword_1000B5510);
    v27 = sub_1000154C8();
    v28 = sub_1000086E8(&qword_1000B5518, &qword_1000B5520, (uint64_t)&protocol conformance descriptor for RemoteImageView<A>);
    _ConditionalContent<>.init(storage:)(v7, v26, v8, v27, v28);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t sub_10004D074@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t KeyPath;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v40 = a2;
  v42 = a3;
  v43 = sub_1000187A4(&qword_1000B54E8);
  __chkstk_darwin(v43);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_1000187A4(&qword_1000B5588);
  __chkstk_darwin(v41);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000187A4(&qword_1000B54D8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CollectionListItemView(0);
  v13 = *(void **)(a1 + *(int *)(v12 + 24) + 8);
  KeyPath = swift_getKeyPath(&unk_10007A988);
  v15 = swift_getKeyPath(&unk_10007A9B0);
  v16 = v13;
  static Published.subscript.getter(&v44, v16, KeyPath, v15);

  swift_release(KeyPath);
  swift_release(v15);
  if (v44 == 1)
  {
    v17 = objc_msgSend(*(id *)(a1 + *(int *)(v12 + 32)), "collectionAssets");
    v18 = objc_msgSend(v17, "gradient");

    v20 = __chkstk_darwin(v19);
    *(&v39 - 2) = v40;
    v21 = static UnitPoint.topTrailing.getter(v20);
    v23 = v22;
    v24 = static UnitPoint.bottomLeading.getter();
    v26 = v25;
    v27 = sub_1000187A4(&qword_1000B54B0);
    v28 = sub_100014668(&qword_1000B54F0, &qword_1000B54B0, (void (*)(void))sub_100019490);
    TipGradientView.init(_:startPoint:endPoint:gradientView:)(v18, sub_10004DBC8, &v39 - 4, v27, v28, v21, v23, v24, v26);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v7, v11, v8);
    swift_storeEnumTagMultiPayload(v7, v41, 0);
    v29 = sub_1000086E8(&qword_1000B54D0, &qword_1000B54D8, (uint64_t)&protocol conformance descriptor for TipGradientView<A>);
    v30 = sub_10001542C();
    _ConditionalContent<>.init(storage:)(v7, v8, v43, v29, v30);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    v32 = objc_msgSend((id)objc_opt_self(UIColor), "systemBlueColor");
    v33 = Color.init(_:)(v32);
    v34 = swift_getKeyPath(&unk_10007AA00);
    sub_1000121BC(v40, (uint64_t)v5, &qword_1000B54B0);
    v35 = v43;
    v36 = (uint64_t *)&v5[*(int *)(v43 + 36)];
    *v36 = v34;
    v36[1] = v33;
    sub_1000121BC((uint64_t)v5, (uint64_t)v7, &qword_1000B54E8);
    swift_storeEnumTagMultiPayload(v7, v41, 1);
    v37 = sub_1000086E8(&qword_1000B54D0, &qword_1000B54D8, (uint64_t)&protocol conformance descriptor for TipGradientView<A>);
    v38 = sub_10001542C();
    _ConditionalContent<>.init(storage:)(v7, v8, v35, v37, v38);
    return sub_100011DE0((uint64_t)v5, &qword_1000B54E8);
  }
}

uint64_t *sub_10004D424(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_1000187A4(&qword_1000B5260);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_1000187A4(&qword_1000B41C0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = a3[6];
    v24 = a3[7];
    v25 = (uint64_t *)((char *)a1 + v23);
    v26 = (uint64_t *)((char *)a2 + v23);
    v28 = *v26;
    v27 = (void *)v26[1];
    *v25 = v28;
    v25[1] = v27;
    v29 = (uint64_t *)((char *)a1 + v24);
    v30 = (uint64_t *)((char *)a2 + v24);
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    v32 = v30[3];
    v29[2] = v30[2];
    v29[3] = v32;
    v33 = a3[8];
    v34 = *(void **)((char *)a2 + v33);
    *(uint64_t *)((char *)a1 + v33) = (uint64_t)v34;
    v35 = v27;
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v32);
    v36 = v34;
  }
  return a1;
}

char *sub_10004D5C4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;

  v6 = sub_1000187A4(&qword_1000B5260);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *((_OWORD *)v15 + 1);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v16;
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  return a1;
}

char *sub_10004D708(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B5260);
    v6 = sub_1000187A4(&qword_1000B5260);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100011DE0((uint64_t)&a1[v8], &qword_1000B41C0);
    v11 = sub_1000187A4(&qword_1000B41C0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v17 = *(_QWORD *)v15;
  v16 = *((_QWORD *)v15 + 1);
  v18 = (void *)*((_QWORD *)v14 + 1);
  *(_QWORD *)v14 = v17;
  *((_QWORD *)v14 + 1) = v16;

  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *(_QWORD *)&a2[v19 + 8];
  v23 = *(_QWORD *)&a1[v19 + 8];
  *(_QWORD *)v20 = *(_QWORD *)&a2[v19];
  *((_QWORD *)v20 + 1) = v22;
  swift_bridgeObjectRelease(v23);
  v24 = *((_QWORD *)v21 + 3);
  v25 = *((_QWORD *)v20 + 3);
  *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
  *((_QWORD *)v20 + 3) = v24;
  swift_bridgeObjectRelease(v25);
  v26 = a3[8];
  v27 = *(void **)&a1[v26];
  *(_QWORD *)&a1[v26] = *(_QWORD *)&a2[v26];

  return a1;
}

uint64_t sub_10004D8A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004D8B4);
}

uint64_t sub_10004D8B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_1000187A4(&qword_1000B53A8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1000187A4(&qword_1000B45E0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_10004D968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004D974);
}

uint64_t sub_10004D974(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_1000187A4(&qword_1000B53A8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_1000187A4(&qword_1000B45E0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

unint64_t sub_10004DA24()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000B5480;
  if (!qword_1000B5480)
  {
    v1 = sub_1000176F8(&qword_1000B5468);
    v2[0] = sub_1000176F8(&qword_1000B5458);
    v2[1] = sub_1000086E8(&qword_1000B5478, &qword_1000B5458, (uint64_t)&protocol conformance descriptor for HStack<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_1000041E8(&qword_1000B5220, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5480);
  }
  return result;
}

uint64_t sub_10004DB08()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_10004DB28()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_10004DB48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for Image.Scale(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.imageScale.setter(v4);
}

uint64_t sub_10004DBC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000121BC(*(_QWORD *)(v1 + 16), a1, &qword_1000B54B0);
}

uint64_t sub_10004DBEC()
{
  _QWORD v1[2];

  v1[0] = sub_1000176F8(&qword_1000B5468);
  v1[1] = sub_10004DA24();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.appEntityIdentifier(_:)>>, 1);
}

uint64_t sub_10004DC38(void *a1)
{
  uint64_t KeyPath;
  uint64_t v3;
  id v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10007AB38);
  v3 = swift_getKeyPath(&unk_10007AB60);
  v4 = a1;
  static Published.subscript.getter(&v6, v4, KeyPath, v3);

  swift_release(KeyPath);
  swift_release(v3);
  return v6;
}

uint64_t sub_10004DCB4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10007AB38);
  v2 = swift_getKeyPath(&unk_10007AB60);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10004DD24(void *a1, uint64_t a2, char a3)
{
  uint64_t KeyPath;
  uint64_t v6;
  char v8;

  KeyPath = swift_getKeyPath(&unk_10007AB38);
  v6 = swift_getKeyPath(&unk_10007AB60);
  v8 = a3;
  return static Published.subscript.setter(&v8, a1, KeyPath, v6);
}

uint64_t sub_10004DD90@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10007AB38);
  v5 = swift_getKeyPath(&unk_10007AB60);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10004DE0C(char *a1, void **a2)
{
  char v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10007AB38);
  v5 = swift_getKeyPath(&unk_10007AB60);
  v7 = v2;
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_10004DE78()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10007AAA8);
  v2 = swift_getKeyPath(&unk_10007AAD0);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

Class sub_10004DEE8(void *a1)
{
  uint64_t KeyPath;
  uint64_t v3;
  id v4;
  uint64_t v5;
  Class isa;
  uint64_t v8;

  KeyPath = swift_getKeyPath(&unk_10007AAF0);
  v3 = swift_getKeyPath(&unk_10007AB18);
  v4 = a1;
  static Published.subscript.getter(&v8, v4, KeyPath, v3);

  swift_release(KeyPath);
  swift_release(v3);
  v5 = v8;
  type metadata accessor for UserGuideTopic(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v5);
  return isa;
}

uint64_t sub_10004DF88()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10007AAF0);
  v2 = swift_getKeyPath(&unk_10007AB18);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10004DFF8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v10;

  v5 = type metadata accessor for UserGuideTopic(0);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, v5);
  KeyPath = swift_getKeyPath(&unk_10007AAF0);
  v8 = swift_getKeyPath(&unk_10007AB18);
  v10 = v6;
  return static Published.subscript.setter(&v10, a1, KeyPath, v8);
}

uint64_t sub_10004E07C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10007AAF0);
  v5 = swift_getKeyPath(&unk_10007AB18);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10004E0F8(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10007AAF0);
  v5 = swift_getKeyPath(&unk_10007AB18);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

id sub_10004E16C(void *a1)
{
  uint64_t KeyPath;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_10007AAA8);
  v3 = swift_getKeyPath(&unk_10007AAD0);
  v4 = a1;
  static Published.subscript.getter(&v9, v4, KeyPath, v3);
  swift_release(KeyPath);
  v5 = swift_release(v3);
  v6 = v9;
  v7 = (void *)dispatch thunk of SearchResultsModel.searchQuery.getter(v5);

  swift_release(v6);
  return v7;
}

uint64_t sub_10004E1FC(void *a1, uint64_t a2, void *a3)
{
  uint64_t KeyPath;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v11;

  KeyPath = swift_getKeyPath(&unk_10007AAA8);
  v6 = swift_getKeyPath(&unk_10007AAD0);
  v7 = a3;
  v8 = a1;
  static Published.subscript.getter(&v11, v8, KeyPath, v6);
  swift_release(KeyPath);
  swift_release(v6);
  v9 = v11;
  dispatch thunk of SearchResultsModel.searchQuery.setter(a3);

  return swift_release(v9);
}

id sub_10004E298(void *a1)
{
  uint64_t KeyPath;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  uint64_t v11;

  KeyPath = swift_getKeyPath(&unk_10007AAA8);
  v3 = swift_getKeyPath(&unk_10007AAD0);
  v4 = a1;
  static Published.subscript.getter(&v11, v4, KeyPath, v3);
  swift_release(KeyPath);
  v5 = swift_release(v3);
  v6 = v11;
  dispatch thunk of SearchResultsModel.searchTerm.getter(v5);
  v8 = v7;

  swift_release(v6);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  return v9;
}

uint64_t sub_10004E344(void *a1, uint64_t a2)
{
  return sub_10004E368(a1, a2, (uint64_t (*)(uint64_t))&dispatch thunk of SearchResultsModel.hasTopics.getter);
}

uint64_t sub_10004E350(void *a1, uint64_t a2)
{
  return sub_10004E368(a1, a2, (uint64_t (*)(uint64_t))&dispatch thunk of SearchResultsModel.hasSearchResults.getter);
}

uint64_t sub_10004E35C(void *a1, uint64_t a2)
{
  return sub_10004E368(a1, a2, (uint64_t (*)(uint64_t))&dispatch thunk of SearchResultsModel.hasStartedSearch.getter);
}

uint64_t sub_10004E368(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t KeyPath;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  KeyPath = swift_getKeyPath(&unk_10007AAA8);
  v6 = swift_getKeyPath(&unk_10007AAD0);
  v7 = a1;
  static Published.subscript.getter(&v11, v7, KeyPath, v6);
  swift_release(KeyPath);
  v8 = swift_release(v6);
  v9 = v11;
  LOBYTE(a3) = a3(v8);

  swift_release(v9);
  return a3 & 1;
}

uint64_t sub_10004E404(void *a1)
{
  uint64_t KeyPath;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  KeyPath = swift_getKeyPath(&unk_10007AAA8);
  v3 = swift_getKeyPath(&unk_10007AAD0);
  v4 = a1;
  static Published.subscript.getter(&v8, v4, KeyPath, v3);
  swift_release(KeyPath);
  v5 = swift_release(v3);
  v6 = v8;
  LOBYTE(v3) = dispatch thunk of SearchResultsModel.hasStartedSearch.getter(v5);

  swift_release(v6);
  return v3 & 1;
}

id sub_10004E494(void *a1, uint64_t a2)
{
  return sub_10004E5A4(a1, a2, (uint64_t (*)(uint64_t))&dispatch thunk of SearchResultsModel.topicActionHandler.getter, (uint64_t)sub_10003AC78, (uint64_t)&unk_1000A43D8);
}

uint64_t sub_10004E4B0(void *a1, int a2, void *aBlock)
{
  void *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v11;

  v4 = _Block_copy(aBlock);
  if (v4)
  {
    v5 = swift_allocObject(&unk_1000A43C0, 24, 7);
    *(_QWORD *)(v5 + 16) = v4;
    v4 = sub_10003B588;
  }
  else
  {
    v5 = 0;
  }
  KeyPath = swift_getKeyPath(&unk_10007AAA8);
  v7 = swift_getKeyPath(&unk_10007AAD0);
  v8 = a1;
  static Published.subscript.getter(&v11, v8, KeyPath, v7);
  swift_release(KeyPath);
  swift_release(v7);
  v9 = v11;
  dispatch thunk of SearchResultsModel.topicActionHandler.setter(v4, v5);

  return swift_release(v9);
}

id sub_10004E588(void *a1, uint64_t a2)
{
  return sub_10004E5A4(a1, a2, (uint64_t (*)(uint64_t))&dispatch thunk of SearchResultsModel.searchResultCollectionResolver.getter, (uint64_t)sub_10004E698, (uint64_t)&unk_1000A4388);
}

id sub_10004E5A4(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t KeyPath;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[5];
  uint64_t v20;

  KeyPath = swift_getKeyPath(&unk_10007AAA8);
  v10 = swift_getKeyPath(&unk_10007AAD0);
  v11 = a1;
  static Published.subscript.getter(v19, v11, KeyPath, v10);
  swift_release(KeyPath);
  v12 = swift_release(v10);
  v13 = v19[0];
  v14 = a3(v12);
  v16 = v15;

  swift_release(v13);
  if (!v14)
    return 0;
  v19[4] = v14;
  v20 = v16;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = a4;
  v19[3] = a5;
  v17 = _Block_copy(v19);
  swift_release(v20);
  return v17;
}

uint64_t sub_10004E69C(void *a1, int a2, void *aBlock)
{
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v11;

  v4 = (uint64_t (*)())_Block_copy(aBlock);
  if (v4)
  {
    v5 = swift_allocObject(&unk_1000A4370, 24, 7);
    *(_QWORD *)(v5 + 16) = v4;
    v4 = sub_10004F824;
  }
  else
  {
    v5 = 0;
  }
  KeyPath = swift_getKeyPath(&unk_10007AAA8);
  v7 = swift_getKeyPath(&unk_10007AAD0);
  v8 = a1;
  static Published.subscript.getter(&v11, v8, KeyPath, v7);
  swift_release(KeyPath);
  swift_release(v7);
  v9 = v11;
  dispatch thunk of SearchResultsModel.searchResultCollectionResolver.setter(v4, v5);

  return swift_release(v9);
}

id sub_10004E774(void *a1, uint64_t a2)
{
  return sub_10004E5A4(a1, a2, (uint64_t (*)(uint64_t))&dispatch thunk of SearchResultsModel.searchResultUserGuideResolver.getter, (uint64_t)sub_10004E698, (uint64_t)&unk_1000A4338);
}

uint64_t sub_10004E790(void *a1, int a2, void *aBlock)
{
  void *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v11;

  v4 = _Block_copy(aBlock);
  if (v4)
  {
    v5 = swift_allocObject(&unk_1000A4320, 24, 7);
    *(_QWORD *)(v5 + 16) = v4;
    v4 = sub_10004F7B8;
  }
  else
  {
    v5 = 0;
  }
  KeyPath = swift_getKeyPath(&unk_10007AAA8);
  v7 = swift_getKeyPath(&unk_10007AAD0);
  v8 = a1;
  static Published.subscript.getter(&v11, v8, KeyPath, v7);
  swift_release(KeyPath);
  swift_release(v7);
  v9 = v11;
  dispatch thunk of SearchResultsModel.searchResultUserGuideResolver.setter(v4, v5);

  return swift_release(v9);
}

id sub_10004E868(void *a1, uint64_t a2)
{
  return sub_10004E5A4(a1, a2, (uint64_t (*)(uint64_t))&dispatch thunk of SearchResultsModel.searchResultEligibilityFilter.getter, (uint64_t)sub_10004E698, (uint64_t)&unk_1000A42E8);
}

id sub_10004E884(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v3 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v6 = v5;
  swift_retain(v2);
  v7 = (void *)v3(v4, v6);
  swift_release(v2);
  swift_bridgeObjectRelease(v6);
  return v7;
}

uint64_t sub_10004E8E4(void *a1, int a2, void *aBlock)
{
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v11;

  v4 = (uint64_t (*)())_Block_copy(aBlock);
  if (v4)
  {
    v5 = swift_allocObject(&unk_1000A42D0, 24, 7);
    *(_QWORD *)(v5 + 16) = v4;
    v4 = sub_10004F824;
  }
  else
  {
    v5 = 0;
  }
  KeyPath = swift_getKeyPath(&unk_10007AAA8);
  v7 = swift_getKeyPath(&unk_10007AAD0);
  v8 = a1;
  static Published.subscript.getter(&v11, v8, KeyPath, v7);
  swift_release(KeyPath);
  swift_release(v7);
  v9 = v11;
  dispatch thunk of SearchResultsModel.searchResultEligibilityFilter.setter(v4, v5);

  return swift_release(v9);
}

id sub_10004E9BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v4;
  id v5;

  v4 = String._bridgeToObjectiveC()();
  v5 = (id)(*(uint64_t (**)(uint64_t, NSString))(a3 + 16))(a3, v4);

  return v5;
}

id sub_10004EA04(void *a1, uint64_t a2)
{
  return sub_10004E5A4(a1, a2, (uint64_t (*)(uint64_t))&dispatch thunk of SearchResultsModel.searchResultScrollHandler.getter, (uint64_t)sub_100003DA8, (uint64_t)&unk_1000A4298);
}

uint64_t sub_10004EA20(void *a1, int a2, void *aBlock)
{
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v11;

  v4 = (uint64_t (*)())_Block_copy(aBlock);
  if (v4)
  {
    v5 = swift_allocObject(&unk_1000A4280, 24, 7);
    *(_QWORD *)(v5 + 16) = v4;
    v4 = sub_10004F828;
  }
  else
  {
    v5 = 0;
  }
  KeyPath = swift_getKeyPath(&unk_10007AAA8);
  v7 = swift_getKeyPath(&unk_10007AAD0);
  v8 = a1;
  static Published.subscript.getter(&v11, v8, KeyPath, v7);
  swift_release(KeyPath);
  swift_release(v7);
  v9 = v11;
  dispatch thunk of SearchResultsModel.searchResultScrollHandler.setter(v4, v5);

  return swift_release(v9);
}

id sub_10004EAF8(void *a1, uint64_t a2)
{
  return sub_10004E5A4(a1, a2, (uint64_t (*)(uint64_t))&dispatch thunk of SearchResultsModel.searchResultsUpdated.getter, (uint64_t)sub_100003DA8, (uint64_t)&unk_1000A4248);
}

uint64_t sub_10004EB14(void *a1, int a2, void *aBlock)
{
  void *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v11;

  v4 = _Block_copy(aBlock);
  if (v4)
  {
    v5 = swift_allocObject(&unk_1000A4230, 24, 7);
    *(_QWORD *)(v5 + 16) = v4;
    v4 = sub_10004F7AC;
  }
  else
  {
    v5 = 0;
  }
  KeyPath = swift_getKeyPath(&unk_10007AAA8);
  v7 = swift_getKeyPath(&unk_10007AAD0);
  v8 = a1;
  static Published.subscript.getter(&v11, v8, KeyPath, v7);
  swift_release(KeyPath);
  swift_release(v7);
  v9 = v11;
  dispatch thunk of SearchResultsModel.searchResultsUpdated.setter(v4, v5);

  return swift_release(v9);
}

uint64_t sub_10004EBEC(void *a1)
{
  uint64_t KeyPath;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_10007AAA8);
  v3 = swift_getKeyPath(&unk_10007AAD0);
  v4 = a1;
  static Published.subscript.getter(&v9, v4, KeyPath, v3);
  swift_release(KeyPath);
  v5 = swift_release(v3);
  v6 = v9;
  v7 = dispatch thunk of SearchResultsModel.queryCount.getter(v5);

  swift_release(v6);
  return v7;
}

uint64_t sub_10004EC7C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v10;

  KeyPath = swift_getKeyPath(&unk_10007AAA8);
  v6 = swift_getKeyPath(&unk_10007AAD0);
  v7 = a1;
  static Published.subscript.getter(&v10, v7, KeyPath, v6);
  swift_release(KeyPath);
  swift_release(v6);
  v8 = v10;
  dispatch thunk of SearchResultsModel.queryCount.setter(a3);

  return swift_release(v8);
}

uint64_t sub_10004ED14(void *a1)
{
  uint64_t KeyPath;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  KeyPath = swift_getKeyPath(&unk_10007AAA8);
  v3 = swift_getKeyPath(&unk_10007AAD0);
  v4 = a1;
  static Published.subscript.getter(&v8, v4, KeyPath, v3);
  swift_release(KeyPath);
  v5 = swift_release(v3);
  v6 = v8;
  dispatch thunk of SearchResultsModel.reset()(v5);

  return swift_release(v6);
}

uint64_t sub_10004ED9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];

  v1 = v0;
  v2 = sub_1000187A4(&qword_1000B44C0);
  v24 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000187A4(&qword_1000B5638);
  v25 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_10007AAA8);
  v9 = swift_getKeyPath(&unk_10007AAD0);
  static Published.subscript.getter(v26, v1, KeyPath, v9);
  swift_release(KeyPath);
  swift_release(v9);
  v10 = v26[0];
  v11 = swift_allocObject(&unk_1000A4410, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16, v1);
  swift_retain(v11);
  dispatch thunk of SearchResultsModel.searchResultsTipsUpdated.setter(sub_10004F804, v11);
  swift_release(v10);
  swift_release(v11);
  v12 = swift_getKeyPath(&unk_10007AAA8);
  v13 = swift_getKeyPath(&unk_10007AAD0);
  static Published.subscript.getter(v26, v1, v12, v13);
  swift_release(v12);
  swift_release(v13);
  v14 = v26[0];
  v15 = swift_allocObject(&unk_1000A4410, 24, 7);
  swift_unknownObjectWeakInit(v15 + 16, v1);
  swift_retain(v15);
  dispatch thunk of SearchResultsModel.searchResultsTopicsUpdated.setter(sub_10004F80C, v15);
  swift_release(v14);
  swift_release(v15);
  swift_beginAccess(v1 + qword_1000B55A0, v26, 33, 0);
  v16 = sub_1000187A4(&qword_1000B44D8);
  Published.projectedValue.getter(v16);
  swift_endAccess(v26);
  v17 = sub_1000086E8(&qword_1000B44E0, &qword_1000B44C0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  Publisher.map<A>(_:)(sub_10004F1BC, 0, v2, &type metadata for Bool, v17);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v2);
  v18 = swift_allocObject(&unk_1000A4410, 24, 7);
  swift_unknownObjectWeakInit(v18 + 16, v1);
  v19 = sub_1000086E8(&qword_1000B5640, &qword_1000B5638, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v20 = Publisher<>.sink(receiveValue:)(sub_10004F814, v18, v5, v19);
  swift_release(v18);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v5);
  v21 = v1 + qword_1000B55B8;
  swift_beginAccess(v21, v26, 33, 0);
  AnyCancellable.store(in:)(v21);
  swift_endAccess(v26);
  return swift_release(v20);
}

void sub_10004F0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  uint64_t v6;
  _BYTE v7[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = swift_bridgeObjectRetain(a1);
    dispatch thunk of TipNavigationViewModel.tips.setter(v6);

  }
}

uint64_t sub_10004F128(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    KeyPath = swift_getKeyPath(&unk_10007AAF0);
    v7 = swift_getKeyPath(&unk_10007AB18);
    v8 = a1;
    swift_bridgeObjectRetain(a1);
    return static Published.subscript.setter(&v8, v5, KeyPath, v7);
  }
  return result;
}

_BYTE *sub_10004F1BC@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*result & 1) == 0;
  return result;
}

uint64_t sub_10004F1D0(char *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  char v8;
  _BYTE v9[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    KeyPath = swift_getKeyPath(&unk_10007AB90);
    v7 = swift_getKeyPath(&unk_10007ABB8);
    v8 = v2;
    return static Published.subscript.setter(&v8, v5, KeyPath, v7);
  }
  return result;
}

id sub_10004F258(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10004F270(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of SearchResultsModel.tipForIdentifier(_:));
}

id sub_10004F264(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10004F270(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of SearchResultsModel.userGuideForIdentifier(_:));
}

id sub_10004F270(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v8 = v7;
  KeyPath = swift_getKeyPath(&unk_10007AAA8);
  v10 = swift_getKeyPath(&unk_10007AAD0);
  v11 = a1;
  static Published.subscript.getter(&v15, v11, KeyPath, v10);
  swift_release(KeyPath);
  swift_release(v10);
  v12 = v15;
  v13 = (void *)a4(v6, v8);

  swift_bridgeObjectRelease(v8);
  swift_release(v12);
  return v13;
}

uint64_t sub_10004F334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + qword_1000B55A0;
  v2 = sub_1000187A4(&qword_1000B44D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + qword_1000B55A8;
  v4 = sub_1000187A4(&qword_1000B5630);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + qword_1000B55B0;
  v6 = sub_1000187A4(&qword_1000B5628);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_1000B55B8));
}

id sub_10004F3DC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SearchResultsViewModel(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_10004F410(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000B55F8)
  {
    v2 = type metadata accessor for SearchResultsModel(255);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000B55F8);
  }
}

uint64_t sub_10004F464()
{
  return type metadata accessor for SearchResultsViewModel(0);
}

uint64_t sub_10004F46C(void *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v20;

  KeyPath = swift_getKeyPath(&unk_10007AAA8);
  v4 = swift_getKeyPath(&unk_10007AAD0);
  static Published.subscript.getter(&v20, v1, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_release(v4);
  v6 = v20;
  v7 = (uint64_t (*)(uint64_t, uint64_t))dispatch thunk of SearchResultsModel.searchResultCollectionResolver.getter(v5);
  v9 = v8;
  swift_release(v6);
  if (!v7)
    return 0;
  v10 = objc_msgSend(a1, "collectionIdentifiers");
  if (!v10)
    goto LABEL_8;
  v11 = v10;
  v12 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, &type metadata for String);

  if (!v12[2])
  {
    swift_bridgeObjectRelease(v12);
    goto LABEL_8;
  }
  v13 = v12[4];
  v14 = v12[5];
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v12);
  v15 = (void *)v7(v13, v14);
  swift_bridgeObjectRelease(v14);
  if (!v15)
  {
LABEL_8:
    sub_100005500((uint64_t)v7, v9);
    return 0;
  }
  v16 = objc_msgSend(v15, "title");
  if (v16)
  {
    v17 = v16;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    sub_100005500((uint64_t)v7, v9);

  }
  else
  {
    sub_100005500((uint64_t)v7, v9);

    return 0;
  }
  return v18;
}

id sub_10004F5F4(void *a1, uint64_t a2, void *a3)
{
  return sub_10004F704(a1, a2, a3, (void (*)(id))sub_10004F46C);
}

uint64_t sub_10004F600()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  KeyPath = swift_getKeyPath(&unk_10007AAA8);
  v2 = swift_getKeyPath(&unk_10007AAD0);
  static Published.subscript.getter(&v16, v0, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_release(v2);
  v4 = v16;
  v5 = (uint64_t (*)(uint64_t))dispatch thunk of SearchResultsModel.searchResultUserGuideResolver.getter(v3);
  v7 = v6;
  v8 = swift_release(v4);
  if (!v5)
    return 0;
  v9 = dispatch thunk of UserGuideTopic.productId.getter(v8);
  v11 = v10;
  v12 = (void *)v5(v9);
  v13 = swift_bridgeObjectRelease(v11);
  if (!v12)
  {
    sub_100005500((uint64_t)v5, v7);
    return 0;
  }
  v14 = UserGuide.displayName.getter(v13);

  sub_100005500((uint64_t)v5, v7);
  return v14;
}

id sub_10004F6F8(void *a1, uint64_t a2, void *a3)
{
  return sub_10004F704(a1, a2, a3, (void (*)(id))sub_10004F600);
}

id sub_10004F704(void *a1, uint64_t a2, void *a3, void (*a4)(id))
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;

  v6 = a3;
  v7 = a1;
  a4(v6);
  v9 = v8;

  if (v9)
  {
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9);
  }
  else
  {
    v10 = 0;
  }
  return v10;
}

uint64_t sub_10004F788()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004F7AC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

id sub_10004F7B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10004E9BC(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_10004F7E0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10004F804(uint64_t a1)
{
  uint64_t v1;

  sub_10004F0CC(a1, v1);
}

uint64_t sub_10004F80C(uint64_t a1)
{
  uint64_t v1;

  return sub_10004F128(a1, v1);
}

uint64_t sub_10004F814(char *a1)
{
  uint64_t v1;

  return sub_10004F1D0(a1, v1);
}

uint64_t sub_10004F870(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

_QWORD *sub_10004F884(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v14 = _swiftEmptyArrayStorage;
    sub_10005149C(0, v1, 0);
    v4 = (uint64_t *)(a1 + 32);
    v2 = _swiftEmptyArrayStorage;
    do
    {
      v5 = *v4;
      v12 = v5;
      swift_bridgeObjectRetain_n(v5, 2);
      v6 = sub_1000187A4(&qword_1000B48E0);
      v7 = sub_1000187A4(&qword_1000B48D8);
      swift_dynamicCast(&v13, &v12, v6, v7, 7);
      v8 = v13;
      swift_bridgeObjectRelease(v5);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_10005149C(0, v2[2] + 1, 1);
        v2 = v14;
      }
      v10 = v2[2];
      v9 = v2[3];
      if (v10 >= v9 >> 1)
      {
        sub_10005149C((_QWORD *)(v9 > 1), v10 + 1, 1);
        v2 = v14;
      }
      v2[2] = v10 + 1;
      v2[v10 + 4] = v8;
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_10004F9C4(uint64_t a1)
{
  int64_t v2;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = *(_QWORD *)(a1 + 16);
  v13 = _swiftEmptyArrayStorage;
  sub_10005149C(0, v2, 0);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (i = (uint64_t *)(a1 + 32); ; ++i)
    {
      v12 = *i;
      swift_bridgeObjectRetain(v12);
      v5 = sub_1000187A4(&qword_1000B48E8);
      v6 = sub_1000187A4(&qword_1000B48D8);
      if (!swift_dynamicCast(&v11, &v12, v5, v6, 6))
        break;
      v7 = v11;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_10005149C(0, v3[2] + 1, 1);
        v3 = v13;
      }
      v9 = v3[2];
      v8 = v3[3];
      if (v9 >= v8 >> 1)
      {
        sub_10005149C((_QWORD *)(v8 > 1), v9 + 1, 1);
        v3 = v13;
      }
      v3[2] = v9 + 1;
      v3[v9 + 4] = v7;
      if (!--v2)
        return v3;
    }
    v11 = 0;
    swift_release(v3);
    swift_bridgeObjectRelease(v11);
    return 0;
  }
  return v3;
}

double sub_10004FB10@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  __int128 v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10007AE38);
  v5 = swift_getKeyPath(&unk_10007AE60);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

void sub_10004FB8C(uint64_t *a1, void **a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v7[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_10007AE38);
  v6 = swift_getKeyPath(&unk_10007AE60);
  v7[0] = v3;
  v7[1] = v2;
  swift_bridgeObjectRetain(v2);
  static Published.subscript.setter(v7, v4, KeyPath, v6);
  sub_100050684();
}

uint64_t sub_10004FC14(uint64_t result)
{
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  v2 = *(void (**)(uint64_t))(v1 + qword_1000B90D8);
  if (v2)
  {
    v3 = result;
    v4 = *(_QWORD *)(v1 + qword_1000B90D8 + 8);
    swift_retain(v4);
    v2(v3);
    return sub_100005500((uint64_t)v2, v4);
  }
  return result;
}

uint64_t sub_10004FC78()
{
  return sub_100035670((uint64_t)&unk_10007AF58, (uint64_t)&unk_10007AF80);
}

uint64_t sub_10004FC8C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10007AD60);
  v2 = swift_getKeyPath(&unk_10007AD88);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10004FCFC()
{
  return sub_100035670((uint64_t)&unk_10007AF10, (uint64_t)&unk_10007AF38);
}

uint64_t sub_10004FD10()
{
  return sub_100035670((uint64_t)&unk_10007AE80, (uint64_t)&unk_10007AEA8);
}

double sub_10004FD24()
{
  return sub_10004FD4C((uint64_t)&unk_10007AEC8, (uint64_t)&unk_10007AEF0);
}

double sub_10004FD38()
{
  return sub_10004FD4C((uint64_t)&unk_10007ADF0, (uint64_t)&unk_10007AE18);
}

double sub_10004FD4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  double v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_10004FDB4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10007AE38);
  v2 = swift_getKeyPath(&unk_10007AE60);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10004FE24()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10007ADA8);
  v2 = swift_getKeyPath(&unk_10007ADD0);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

BOOL sub_10004FE98()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v10;

  KeyPath = swift_getKeyPath(&unk_10007AD60);
  v2 = swift_getKeyPath(&unk_10007AD88);
  static Published.subscript.getter(&v10, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  v3 = v10;
  v4 = objc_msgSend(v10, "identifier");

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  swift_bridgeObjectRelease(v7);
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  return v8 != 0;
}

uint64_t sub_10004FF5C(void *a1, uint64_t a2)
{
  return sub_100013378(a1, a2, (uint64_t)&unk_10007AF58, (uint64_t)&unk_10007AF80);
}

uint64_t sub_10004FF70(void *a1, uint64_t a2, char a3)
{
  return sub_100013618(a1, a2, a3, (uint64_t)&unk_10007AF58, (uint64_t)&unk_10007AF80);
}

uint64_t sub_10004FF84@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100039AC4(a1, (uint64_t)&unk_10007AF58, (uint64_t)&unk_10007AF80, a2);
}

uint64_t sub_10004FF98(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1000502B0(a1, a2, a3, a4, (uint64_t)&unk_10007AF58, (uint64_t)&unk_10007AF80);
}

id sub_10004FFAC(void *a1)
{
  uint64_t KeyPath;
  uint64_t v3;
  id v4;
  id v6;

  KeyPath = swift_getKeyPath(&unk_10007AD60);
  v3 = swift_getKeyPath(&unk_10007AD88);
  v4 = a1;
  static Published.subscript.getter(&v6, v4, KeyPath, v3);

  swift_release(KeyPath);
  swift_release(v3);
  return v6;
}

void sub_100050028(void *a1, uint64_t a2, void *a3)
{
  uint64_t KeyPath;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  void *v10;

  KeyPath = swift_getKeyPath(&unk_10007AD60);
  v6 = swift_getKeyPath(&unk_10007AD88);
  v10 = a3;
  v7 = a3;
  v8 = a1;
  v9 = v7;
  static Published.subscript.setter(&v10, v8, KeyPath, v6);
  sub_1000500B8();

}

uint64_t sub_1000500B8()
{
  void *v0;
  uint64_t KeyPath;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v18[4];

  KeyPath = swift_getKeyPath(&unk_10007AD60);
  v2 = swift_getKeyPath(&unk_10007AD88);
  static Published.subscript.getter(v18, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  v3 = v18[0];
  v4 = objc_msgSend(v18[0], "identifier");

  v5 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8 = swift_getKeyPath(&unk_10007AD60);
  v9 = swift_getKeyPath(&unk_10007AD88);
  static Published.subscript.getter(v18, v0, v8, v9);
  swift_release(v8);
  swift_release(v9);
  v10 = v18[0];
  v11 = objc_msgSend(v18[0], "title");

  if (v11)
  {
    v12 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

  }
  else
  {
    v12 = 0;
    v14 = (void *)0xE000000000000000;
  }
  v15 = swift_getKeyPath(&unk_10007ADA8);
  v16 = swift_getKeyPath(&unk_10007ADD0);
  v18[0] = v5;
  v18[1] = v7;
  v18[2] = v12;
  v18[3] = v14;
  return static Published.subscript.setter(v18, v0, v15, v16);
}

uint64_t sub_100050238(void *a1, uint64_t a2)
{
  return sub_100013378(a1, a2, (uint64_t)&unk_10007AF10, (uint64_t)&unk_10007AF38);
}

uint64_t sub_10005024C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100039AC4(a1, (uint64_t)&unk_10007AF10, (uint64_t)&unk_10007AF38, a2);
}

uint64_t sub_100050260(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1000502B0(a1, a2, a3, a4, (uint64_t)&unk_10007AF10, (uint64_t)&unk_10007AF38);
}

uint64_t sub_100050274(void *a1, uint64_t a2)
{
  return sub_100013378(a1, a2, (uint64_t)&unk_10007AE80, (uint64_t)&unk_10007AEA8);
}

uint64_t sub_100050288@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100039AC4(a1, (uint64_t)&unk_10007AE80, (uint64_t)&unk_10007AEA8, a2);
}

uint64_t sub_10005029C(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1000502B0(a1, a2, a3, a4, (uint64_t)&unk_10007AE80, (uint64_t)&unk_10007AEA8);
}

uint64_t sub_1000502B0(char *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7;
  void *v8;
  uint64_t KeyPath;
  uint64_t v10;
  char v12;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v12 = v7;
  return static Published.subscript.setter(&v12, v8, KeyPath, v10);
}

double sub_100050318(void *a1, uint64_t a2)
{
  return sub_100050354(a1, a2, (uint64_t)&unk_10007AEC8, (uint64_t)&unk_10007AEF0);
}

uint64_t sub_10005032C(void *a1, uint64_t a2, double a3)
{
  return sub_1000503E0(a1, a3, a2, (uint64_t)&unk_10007AEC8, (uint64_t)&unk_10007AEF0);
}

double sub_100050340(void *a1, uint64_t a2)
{
  return sub_100050354(a1, a2, (uint64_t)&unk_10007ADF0, (uint64_t)&unk_10007AE18);
}

double sub_100050354(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath;
  uint64_t v7;
  id v8;
  double v10;

  KeyPath = swift_getKeyPath(a3);
  v7 = swift_getKeyPath(a4);
  v8 = a1;
  static Published.subscript.getter(&v10, v8, KeyPath, v7);

  swift_release(KeyPath);
  swift_release(v7);
  return v10;
}

uint64_t sub_1000503CC(void *a1, uint64_t a2, double a3)
{
  return sub_1000503E0(a1, a3, a2, (uint64_t)&unk_10007ADF0, (uint64_t)&unk_10007AE18);
}

uint64_t sub_1000503E0(void *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t KeyPath;
  uint64_t v9;
  double v11;

  KeyPath = swift_getKeyPath(a4);
  v9 = swift_getKeyPath(a5);
  v11 = a2;
  return static Published.subscript.setter(&v11, a1, KeyPath, v9);
}

double sub_100050450@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  double v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10007ADF0);
  v5 = swift_getKeyPath(&unk_10007AE18);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = v7;
  *a2 = v7;
  return result;
}

uint64_t sub_1000504CC(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10007ADF0);
  v5 = swift_getKeyPath(&unk_10007AE18);
  v7 = v2;
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

id sub_100050540(void *a1)
{
  uint64_t KeyPath;
  uint64_t v3;
  id v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_10007AE38);
  v3 = swift_getKeyPath(&unk_10007AE60);
  v4 = a1;
  static Published.subscript.getter(&v8, v4, KeyPath, v3);

  swift_release(KeyPath);
  swift_release(v3);
  v5 = v9;
  if (!v9)
    return 0;
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

void sub_1000505E4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  id v9;
  _QWORD v10[2];

  if (a3)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v6 = v5;
  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  KeyPath = swift_getKeyPath(&unk_10007AE38);
  v8 = swift_getKeyPath(&unk_10007AE60);
  v10[0] = v4;
  v10[1] = v6;
  v9 = a1;
  static Published.subscript.setter(v10, v9, KeyPath, v8);
  sub_100050684();

}

void sub_100050684()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  KeyPath = swift_getKeyPath(&unk_10007AE38);
  v2 = swift_getKeyPath(&unk_10007AE60);
  static Published.subscript.getter(&v9, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  v3 = v10;
  if (v10)
  {
    v4 = objc_msgSend((id)type metadata accessor for TPSUIAppController(0), "sharedInstance");
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v3);
    v6 = objc_msgSend(v4, "tipForIdentifier:", v5);

    v7 = swift_getKeyPath(&unk_10007AE80);
    v8 = swift_getKeyPath(&unk_10007AEA8);
    static Published.subscript.getter(&v9, v0, v7, v8);
    swift_release(v7);
    swift_release(v8);
    dispatch thunk of TipNavigationViewModel.updateSelectedTip(_:forceUpdate:)(v6, v9);

  }
}

double sub_1000507B0@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10007ADA8);
  v5 = swift_getKeyPath(&unk_10007ADD0);
  static Published.subscript.getter(&v9, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = *(double *)&v9;
  v7 = v10;
  v8 = v11;
  *(_OWORD *)a2 = v9;
  *(_QWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v8;
  return result;
}

uint64_t sub_100050834(uint64_t *a1, void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t KeyPath;
  uint64_t v8;
  _QWORD v10[4];

  v3 = *a1;
  v2 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  v6 = *a2;
  KeyPath = swift_getKeyPath(&unk_10007ADA8);
  v8 = swift_getKeyPath(&unk_10007ADD0);
  v10[0] = v3;
  v10[1] = v2;
  v10[2] = v5;
  v10[3] = v4;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v4);
  return static Published.subscript.setter(v10, v6, KeyPath, v8);
}

uint64_t sub_1000508C8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + qword_1000B90B0);
}

uint64_t sub_1000508D8(uint64_t result, uint64_t a2, char a3)
{
  *(_BYTE *)(result + qword_1000B90B0) = a3;
  return result;
}

uint64_t sub_1000508E8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + qword_1000B90B8);
}

uint64_t sub_1000508F8(uint64_t result, uint64_t a2, char a3)
{
  *(_BYTE *)(result + qword_1000B90B8) = a3;
  return result;
}

uint64_t sub_100050908(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + qword_1000B90C0);
}

void sub_100050918(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  void (*v3)(uint64_t);
  uint64_t v5;
  _BYTE *v6;

  a1[qword_1000B90C0] = a3;
  v3 = *(void (**)(uint64_t))&a1[qword_1000B90C8];
  if (v3)
  {
    v5 = *(_QWORD *)&a1[qword_1000B90C8 + 8];
    v6 = a1;
    sub_1000331C4((uint64_t)v3, v5);
    v3(a3);
    sub_100005500((uint64_t)v3, v5);

  }
}

id sub_1000509A8(uint64_t a1, uint64_t a2)
{
  return sub_10003ABF0(a1, a2, &qword_1000B90C8, (uint64_t)sub_1000509C4, (uint64_t)&unk_1000A44E0);
}

uint64_t sub_1000509C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_100050A00(uint64_t a1, int a2, void *aBlock)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t (*v6)(char);
  uint64_t (**v7)(char);
  uint64_t v8;
  uint64_t v9;

  v4 = _Block_copy(aBlock);
  if (v4)
  {
    v5 = v4;
    v4 = (_QWORD *)swift_allocObject(&unk_1000A44C8, 24, 7);
    v4[2] = v5;
    v6 = sub_100051760;
  }
  else
  {
    v6 = 0;
  }
  v7 = (uint64_t (**)(char))(a1 + qword_1000B90C8);
  v9 = *(_QWORD *)(a1 + qword_1000B90C8);
  v8 = *(_QWORD *)(a1 + qword_1000B90C8 + 8);
  *v7 = v6;
  v7[1] = (uint64_t (*)(char))v4;
  return sub_100005500(v9, v8);
}

double sub_100050A6C(uint64_t a1)
{
  return *(double *)(a1 + qword_1000B90D0);
}

void sub_100050A80(char *a1, double a2, double a3)
{
  double *v3;
  char *v4;

  v3 = (double *)&a1[qword_1000B90D0];
  *v3 = a2;
  v3[1] = a3;
  v4 = a1;
  sub_100050AC4();

}

uint64_t sub_100050AC4()
{
  _BYTE *v0;
  _BYTE *v1;
  double v2;
  int v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  double v10;

  v1 = v0;
  v2 = *(double *)&v0[qword_1000B90D0 + 8];
  v3 = v0[qword_1000B90C0];
  if ((((v2 >= -5.0) ^ v3) & 1) == 0)
  {
    v4 = v3 ^ 1u;
    v1[qword_1000B90C0] = v3 ^ 1;
    v5 = *(void (**)(uint64_t))&v1[qword_1000B90C8];
    if (v5)
    {
      v6 = *(_QWORD *)&v1[qword_1000B90C8 + 8];
      swift_retain(v6);
      v5(v4);
      sub_100005500((uint64_t)v5, v6);
    }
  }
  KeyPath = swift_getKeyPath(&unk_10007ADF0);
  v8 = swift_getKeyPath(&unk_10007AE18);
  if (v2 <= 0.0)
    v10 = 0.0;
  else
    v10 = v2;
  return static Published.subscript.setter(&v10, v1, KeyPath, v8);
}

id sub_100050BB4(uint64_t a1, uint64_t a2)
{
  return sub_10003ABF0(a1, a2, &qword_1000B90D8, (uint64_t)sub_10003AC78, (uint64_t)&unk_1000A4490);
}

uint64_t sub_100050BD0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + qword_1000B90E0);
}

uint64_t sub_100050BE0(uint64_t result, uint64_t a2, char a3)
{
  *(_BYTE *)(result + qword_1000B90E0) = a3;
  return result;
}

BOOL sub_100050BF0(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = a1;
  v2 = dispatch thunk of TipNavigationViewModel.tips.getter();
  v3 = v2;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 >= 0)
      v2 &= 0xFFFFFFFFFFFFFF8uLL;
    v4 = _CocoaArrayWrapper.endIndex.getter(v2);
  }
  else
  {
    v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }

  swift_bridgeObjectRelease(v3);
  return v4 != 0;
}

BOOL sub_100050C5C(void *a1)
{
  id v1;
  BOOL v2;

  v1 = a1;
  v2 = sub_10004FE98();

  return v2;
}

void sub_100050C8C(char *a1, uint64_t a2, void *a3)
{
  void (*v3)(id);
  uint64_t v5;
  id v6;
  char *v7;

  v3 = *(void (**)(id))&a1[qword_1000B90D8];
  if (v3)
  {
    v5 = *(_QWORD *)&a1[qword_1000B90D8 + 8];
    v6 = a3;
    v7 = a1;
    sub_1000331C4((uint64_t)v3, v5);
    v3(v6);
    sub_100005500((uint64_t)v3, v5);

  }
}

uint64_t sub_100050D20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0 + qword_1000B5678;
  v2 = sub_1000187A4(&qword_1000B44D8);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v4 = v0 + qword_1000B5680;
  v5 = sub_1000187A4(&qword_1000B5720);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v3(v0 + qword_1000B5688, v2);
  v3(v0 + qword_1000B5690, v2);
  v6 = v0 + qword_1000B5698;
  v7 = sub_1000187A4(&qword_1000B5718);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v0 + qword_1000B56A0, v7);
  v9 = v0 + qword_1000B56A8;
  v10 = sub_1000187A4(&qword_1000B4930);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = v0 + qword_1000B56B0;
  v12 = sub_1000187A4(&qword_1000B4918);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  sub_100005500(*(_QWORD *)(v0 + qword_1000B90C8), *(_QWORD *)(v0 + qword_1000B90C8 + 8));
  return sub_100005500(*(_QWORD *)(v0 + qword_1000B90D8), *(_QWORD *)(v0 + qword_1000B90D8 + 8));
}

id sub_100050E84()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TipListViewModel(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_100050EB8(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  NSString v11;

  v4 = a3;
  v5 = a1;
  v6 = objc_msgSend(v4, "fullContent");
  if (v6 && (v7 = v6, v8 = objc_msgSend(v6, "title"), v7, v8))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v10 = v9;

  }
  else
  {

    v10 = 0xE000000000000000;
  }
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  return v11;
}

Class sub_100050F80(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  _QWORD *v6;
  Class isa;

  v4 = a3;
  v5 = a1;
  v6 = sub_1000515D8(v4);

  sub_1000187A4(&qword_1000B48D8);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  return isa;
}

id sub_100050FF0(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSURL *v17;
  void *v18;
  void *v19;
  uint64_t v21;

  v5 = sub_1000187A4(&qword_1000B4698);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v21 - v9;
  v11 = a3;
  v12 = a1;
  v13 = objc_msgSend(v11, "fullContentAssets");
  v14 = objc_msgSend(v13, "baseURL");

  if (v14)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v14);

    v15 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v8, 0, 1, v15);
  }
  else
  {
    v15 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v8, 1, 1, v15);
  }
  sub_100037CEC((uint64_t)v8, (uint64_t)v10);

  type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v10, 1, v15) != 1)
  {
    URL._bridgeToObjectiveC()(v17);
    v18 = v19;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v10, v15);
  }
  return v18;
}

id sub_100051178()
{
  return 0;
}

uint64_t sub_100051190@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  NSString v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;

  v6 = sub_1000187A4(&qword_1000B4698);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v41 - v10;
  v12 = objc_msgSend(a1, "fullContentAssets");
  v13 = objc_msgSend(a1, "language");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v15 = v14;

  v16 = objc_msgSend(a1, "assetFileInfoManager");
  v17 = objc_allocWithZone((Class)TPSAssetsConfiguration);
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  v19 = objc_msgSend(v17, "initWithAssets:language:userInterfaceStyle:assetFileInfoManager:", v12, v18, a2, v16);

  v20 = (void *)objc_opt_self(TPSContentURLController);
  v21 = v19;
  v22 = objc_msgSend(v20, "assetPathFromAssetConfiguration:type:", v21, 2);
  if (v22)
  {
    v23 = v22;
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v26 = v25;

    URL.init(string:)(v24, v26);
    swift_bridgeObjectRelease(v26);
  }
  else
  {

    v27 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v11, 1, 1, v27);

  }
  v28 = objc_msgSend(v21, "cacheIdentifierForType:", 2);
  if (v28)
  {
    v29 = v28;
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v32 = v31;

  }
  else
  {
    v30 = 0;
    v32 = 0;
  }
  v33 = type metadata accessor for TPSUIAppController(0);
  v34 = (void *)static TPSUIAppController.shared.getter(v33);
  v35 = objc_msgSend(v34, "assetSizes");

  if (v35)
  {
    v36 = objc_msgSend(v35, "thumbnail");

    objc_msgSend(v36, "heightToWidthRatioForViewMode:", objc_msgSend((id)objc_opt_self(TPSCommonDefines), "isPhoneUI") ^ 1);
    v38 = v37;

  }
  else
  {
    v38 = 1.0;
  }

  sub_100037CEC((uint64_t)v11, (uint64_t)v9);
  *a3 = v30;
  a3[1] = v32;
  v39 = type metadata accessor for TipListViewModel.AssetConfiguration(0);
  result = sub_100037CEC((uint64_t)v9, (uint64_t)a3 + *(int *)(v39 + 20));
  *(double *)((char *)a3 + *(int *)(v39 + 24)) = v38;
  return result;
}

_QWORD *sub_10005149C(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1000514B8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1000514B8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000187A4(&qword_1000B48F0);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[v8 + 4])
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    v15 = sub_1000187A4(&qword_1000B48D8);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }
  swift_release(a4);
  return v11;
}

_QWORD *sub_1000515D8(void *a1)
{
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v2 = objc_msgSend(a1, "bodyContent");
  if (v2)
  {

    v3 = objc_msgSend(a1, "bodyContent");
    if (!v3
      || (v4 = v3,
          v5 = sub_1000187A4(&qword_1000B48E8),
          v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5),
          v4,
          v7 = sub_10004F9C4(v6),
          swift_bridgeObjectRelease(v6),
          !v7))
    {
      v8 = sub_1000187A4(&qword_1000B48F0);
      v7 = (_QWORD *)swift_allocObject(v8, 40, 7);
      *((_OWORD *)v7 + 1) = xmmword_1000791F0;
      v7[4] = sub_1000520F4((uint64_t)_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease(0);
    }
    return v7;
  }
  else
  {
    v10 = (void *)objc_opt_self(TPSConstellationContentUtilities);
    v11 = objc_msgSend(a1, "bodyText");
    v12 = objc_msgSend(v10, "textContentWithText:", v11);

    v13 = sub_1000187A4(&qword_1000B48E0);
    v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

    v15 = sub_10004F884(v14);
    swift_bridgeObjectRelease(v14);
    return v15;
  }
}

uint64_t sub_100051734()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100051760(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t sub_10005177C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100039AC4(a1, (uint64_t)&unk_10007AE80, (uint64_t)&unk_10007AEA8, a2);
}

uint64_t sub_1000517A0(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1000502B0(a1, a2, a3, a4, (uint64_t)&unk_10007AE80, (uint64_t)&unk_10007AEA8);
}

uint64_t sub_1000517CC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100039AC4(a1, (uint64_t)&unk_10007AF10, (uint64_t)&unk_10007AF38, a2);
}

uint64_t sub_1000517F0(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1000502B0(a1, a2, a3, a4, (uint64_t)&unk_10007AF10, (uint64_t)&unk_10007AF38);
}

uint64_t sub_100051814@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100039AC4(a1, (uint64_t)&unk_10007AF58, (uint64_t)&unk_10007AF80, a2);
}

uint64_t sub_100051838(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1000502B0(a1, a2, a3, a4, (uint64_t)&unk_10007AF58, (uint64_t)&unk_10007AF80);
}

uint64_t type metadata accessor for TipListViewModel.AssetConfiguration(uint64_t a1)
{
  return sub_1000181CC(a1, (uint64_t *)&unk_1000B5788, (uint64_t)&nominal type descriptor for TipListViewModel.AssetConfiguration);
}

uint64_t *sub_100051870(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain(v7);
    if (v13(v10, 1, v11))
    {
      v14 = sub_1000187A4(&qword_1000B4698);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t sub_100051984(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

_QWORD *sub_100051A00(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain(v6);
  if (v12(v9, 1, v10))
  {
    v13 = sub_1000187A4(&qword_1000B4698);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_100051AE8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_1000187A4(&qword_1000B4698);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_100051C24(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_1000187A4(&qword_1000B4698);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_100051CFC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_1000187A4(&qword_1000B4698);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100051E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100051E34);
}

uint64_t sub_100051E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_1000187A4(&qword_1000B4698);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v9);
  }
}

uint64_t sub_100051EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100051ECC);
}

uint64_t sub_100051ECC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = sub_1000187A4(&qword_1000B4698);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_100051F44(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_10007AD30;
  sub_1000196BC(319, (unint64_t *)&unk_1000B5798, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_100051FE8(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    v4 = __CocoaSet.startIndex.getter(v3);
    v6 = v5;
    v7 = __CocoaSet.endIndex.getter(v3);
    v9 = static __CocoaSet.Index.== infix(_:_:)(v4, v6, v7, v8);
    swift_bridgeObjectRelease(v7);
    if ((v9 & 1) != 0)
      goto LABEL_6;
    goto LABEL_10;
  }
  result = sub_100052FE4(a1);
  if ((v13 & 1) == 0)
  {
    v6 = v12;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v12)
    {
      v4 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
      {
LABEL_6:
        sub_100052FD8(v4, v6, v2 != 0);
        return 0;
      }
LABEL_10:
      sub_100052D70(v4, v6, v2 != 0, a1);
      v10 = v14;
      sub_100052FD8(v4, v6, v2 != 0);
      return v10;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1000520F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000187A4(&qword_1000B5348);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000121BC(v7, (uint64_t)&v16, &qword_1000B5830);
    v8 = v16;
    v9 = v17;
    result = sub_10001023C(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_100018DC8(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100052228@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10007AFE8);
  v5 = swift_getKeyPath(&unk_10007B010);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1000522A4(void **a1, void **a2)
{
  void *v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  void *v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10007AFE8);
  v5 = swift_getKeyPath(&unk_10007B010);
  v8 = v2;
  v6 = v2;
  static Published.subscript.setter(&v8, v3, KeyPath, v5);
  return sub_1000500B8();
}

double sub_100052320@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  double v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10007B048);
  v5 = swift_getKeyPath(&unk_10007B070);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = v7;
  *a2 = v7;
  return result;
}

uint64_t sub_10005239C(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10007B048);
  v5 = swift_getKeyPath(&unk_10007B070);
  v7 = v2;
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

id sub_100052454(void *a1)
{
  char *v1;
  uint64_t v3;
  objc_class *v4;
  id v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  objc_super v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;

  v3 = OBJC_IVAR___TipListViewController_viewModel;
  v4 = (objc_class *)type metadata accessor for TipListViewModel(0);
  v5 = objc_allocWithZone(v4);
  v6 = v1;
  v7 = objc_msgSend(v5, "init");
  *(_QWORD *)&v1[v3] = v7;
  v22 = 0;
  v8 = v7;
  State.init(wrappedValue:)(&v17, &v22, &type metadata for Bool);
  LOBYTE(v5) = v17;
  v9 = v18;
  v10 = sub_1000041E8(&qword_1000B4BE0, type metadata accessor for TipListViewModel, (uint64_t)&protocol conformance descriptor for TipNavigationViewModel);
  v11 = ObservedObject.init(wrappedValue:)(v8, v4, v10);
  v17 = 0;
  v18 = v11;
  v19 = v12;
  v20 = (char)v5;
  v21 = v9;
  v13 = objc_allocWithZone((Class)sub_1000187A4(&qword_1000B5828));
  *(_QWORD *)&v6[OBJC_IVAR___TipListViewController_hostingController] = UIHostingController.init(rootView:)(&v17);

  v16.receiver = v6;
  v16.super_class = (Class)type metadata accessor for TipListViewController();
  v14 = objc_msgSendSuper2(&v16, "initWithCoder:", a1);

  return v14;
}

uint64_t sub_1000525E0()
{
  uint64_t v0;
  void *v1;
  uint64_t KeyPath;
  uint64_t v3;
  id v4;
  uint64_t v6;

  v1 = *(void **)(v0 + OBJC_IVAR___TipListViewController_viewModel);
  KeyPath = swift_getKeyPath(&unk_10007AFE8);
  v3 = swift_getKeyPath(&unk_10007B010);
  v4 = v1;
  static Published.subscript.getter(&v6, v4, KeyPath, v3);

  swift_release(KeyPath);
  swift_release(v3);
  return v6;
}

id sub_1000526F8()
{
  char *v0;
  id result;
  void *v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  void *v7;
  uint64_t KeyPath;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  objc_super v15;

  v15.receiver = v0;
  v15.super_class = (Class)type metadata accessor for TipListViewController();
  objc_msgSendSuper2(&v15, "viewDidLayoutSubviews");
  result = objc_msgSend(v0, "view");
  if (result)
  {
    v2 = result;
    objc_msgSend(result, "safeAreaInsets");
    v4 = v3;

    v5 = round(v4);
    v6 = OBJC_IVAR___TipListViewController_viewModel;
    v7 = *(void **)&v0[OBJC_IVAR___TipListViewController_viewModel];
    KeyPath = swift_getKeyPath(&unk_10007B048);
    v9 = swift_getKeyPath(&unk_10007B070);
    v10 = v7;
    static Published.subscript.getter(&v14, v10, KeyPath, v9);

    swift_release(KeyPath);
    result = (id)swift_release(v9);
    if (v5 != v14)
    {
      v11 = *(void **)&v0[v6];
      v12 = swift_getKeyPath(&unk_10007B048);
      v13 = swift_getKeyPath(&unk_10007B070);
      v14 = v5;
      return (id)static Published.subscript.setter(&v14, v11, v12, v13);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL sub_10005288C()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  char v7;

  if (!objc_msgSend((id)objc_opt_self(TPSCommonDefines), "isPhoneUI"))
    return 0;
  v1 = objc_msgSend(v0, "navigationController");
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "navigationBar");

    v2 = objc_msgSend(v3, "tintColor");
  }
  v4 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
  v5 = v4;
  if (v2)
  {
    if (v4)
    {
      sub_100006578(0, &qword_1000B44F8, UIColor_ptr);
      v6 = v2;
      v7 = static NSObject.== infix(_:_:)(v6, v5);

      return (v7 & 1) != 0;
    }
    v5 = v2;
  }
  else if (!v4)
  {
    return 1;
  }

  return 0;
}

void sub_1000529E0()
{
  uint64_t v0;

}

id sub_100052A0C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TipListViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_100052A74(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  char v11;
  id v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  void (*v20)(void *);
  uint64_t v21;
  void *v22;
  Class isa;
  id v24;
  objc_super v25;

  v3 = v2;
  v6 = swift_bridgeObjectRetain(a1);
  v7 = (void *)sub_100051FE8(v6);
  swift_bridgeObjectRelease(a1);
  if (!v7)
    return;
  v24 = objc_msgSend(v7, "key");

  if (!v24)
    return;
  v8 = objc_msgSend(v24, "keyCode");
  if (v8 == (id)81)
  {
    v13 = OBJC_IVAR___TipListViewController_viewModel;
    v14 = *(id *)&v3[OBJC_IVAR___TipListViewController_viewModel];
    v15 = dispatch thunk of TipNavigationViewModel.canGoNext.getter();

    if ((v15 & 1) == 0)
      goto LABEL_10;
    v12 = *(id *)&v3[v13];
    dispatch thunk of TipNavigationViewModel.goNext()();
  }
  else
  {
    if (v8 != (id)82)
    {
      sub_100006578(0, &qword_1000B5808, UIPress_ptr);
      sub_100052D18();
      isa = Set._bridgeToObjectiveC()().super.isa;
      v25.receiver = v3;
      v25.super_class = (Class)type metadata accessor for TipListViewController();
      objc_msgSendSuper2(&v25, "pressesBegan:withEvent:", isa, a2);

      return;
    }
    v9 = OBJC_IVAR___TipListViewController_viewModel;
    v10 = *(id *)&v3[OBJC_IVAR___TipListViewController_viewModel];
    v11 = dispatch thunk of TipNavigationViewModel.canGoBack.getter();

    if ((v11 & 1) == 0)
      goto LABEL_10;
    v12 = *(id *)&v3[v9];
    dispatch thunk of TipNavigationViewModel.goBack()();
  }

LABEL_10:
  v16 = OBJC_IVAR___TipListViewController_viewModel;
  v17 = *(id *)&v3[OBJC_IVAR___TipListViewController_viewModel];
  v18 = (void *)dispatch thunk of TipNavigationViewModel.currentTip.getter(v17);

  if (v18)
  {
    v19 = *(_QWORD *)&v3[v16] + qword_1000B90D8;
    v20 = *(void (**)(void *))v19;
    if (*(_QWORD *)v19)
    {
      v21 = *(_QWORD *)(v19 + 8);
      swift_retain(v21);
      v20(v18);

      sub_100005500((uint64_t)v20, v21);
      v22 = v18;
    }
    else
    {

      v22 = v24;
    }

    *(_BYTE *)(*(_QWORD *)&v3[v16] + qword_1000B90E0) = 1;
  }
  else
  {

  }
}

unint64_t sub_100052D18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5810;
  if (!qword_1000B5810)
  {
    v1 = sub_100006578(255, &qword_1000B5808, UIPress_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5810);
  }
  return result;
}

void sub_100052D70(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  id v22;
  uint64_t v23;
  void *v24;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v12 = __CocoaSet.Index.element.getter(v7, a2);
        v23 = v12;
        v13 = sub_100006578(0, &qword_1000B5808, UIPress_ptr);
        swift_unknownObjectRetain(v12, v14);
        swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v13, 7);
        v4 = v24;
        swift_unknownObjectRelease(v12);
        v15 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v16 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v15 & ~v16;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v17 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v18 = static NSObject.== infix(_:_:)(v17, v4);

          if ((v18 & 1) == 0)
          {
            v19 = ~v16;
            do
            {
              v7 = (v7 + 1) & v19;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v20 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v21 = static NSObject.== infix(_:_:)(v20, v4);

            }
            while ((v21 & 1) == 0);
          }

LABEL_20:
          v22 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  v9 = __CocoaSet.element(at:)(a1, a2, v8);
  v23 = v9;
  v10 = sub_100006578(0, &qword_1000B5808, UIPress_ptr);
  swift_unknownObjectRetain(v9, v11);
  swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
  swift_unknownObjectRelease(v9);
}

uint64_t sub_100052FD8(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_100052FE4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_10005307C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000530A0(char a1)
{
  sub_100009910(a1);
}

uint64_t *sub_1000530C0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_1000187A4(&qword_1000B5260);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = a3[6];
    v16 = (uint64_t *)((char *)a1 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v19 = *v17;
    v18 = (void *)v17[1];
    *v16 = v19;
    v16[1] = v18;
    v20 = (char *)a1 + v15;
    v21 = (char *)a2 + v15;
    *(_OWORD *)v20 = *(_OWORD *)v21;
    v22 = *((_QWORD *)v21 + 2);
    *((_QWORD *)v20 + 2) = v22;
    v23 = a3[7];
    v24 = *(void **)((char *)a2 + v23);
    *(uint64_t *)((char *)a1 + v23) = (uint64_t)v24;
    v25 = v18;
    swift_retain(v22);
    v26 = v24;
  }
  return a1;
}

void sub_1000531D4(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1000187A4(&qword_1000B5260);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }

  swift_release(*(_QWORD *)((char *)a1 + a2[6] + 16));
}

uint64_t *sub_100053264(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;

  v6 = sub_1000187A4(&qword_1000B5260);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a3[6];
  v14 = (uint64_t *)((char *)a1 + v12);
  v15 = (uint64_t *)((char *)a2 + v12);
  v17 = *v15;
  v16 = (void *)v15[1];
  *v14 = v17;
  v14[1] = v16;
  v18 = (char *)a1 + v13;
  v19 = (char *)a2 + v13;
  *(_OWORD *)v18 = *(_OWORD *)v19;
  v20 = *((_QWORD *)v19 + 2);
  *((_QWORD *)v18 + 2) = v20;
  v21 = a3[7];
  v22 = *(void **)((char *)a2 + v21);
  *(uint64_t *)((char *)a1 + v21) = (uint64_t)v22;
  v23 = v16;
  swift_retain(v20);
  v24 = v22;
  return a1;
}

uint64_t *sub_10005334C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B5260);
    v6 = sub_1000187A4(&qword_1000B5260);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  *v13 = *v14;
  v15 = (void *)v14[1];
  v16 = (void *)v13[1];
  v13[1] = v15;
  v17 = v15;

  v18 = a3[6];
  v19 = (uint64_t *)((char *)a1 + v18);
  v20 = (uint64_t *)((char *)a2 + v18);
  *v19 = *v20;
  v19[1] = v20[1];
  v21 = v19[2];
  v22 = v20[2];
  v19[2] = v22;
  swift_retain(v22);
  swift_release(v21);
  v23 = a3[7];
  v24 = *(void **)((char *)a2 + v23);
  v25 = *(void **)((char *)a1 + v23);
  *(uint64_t *)((char *)a1 + v23) = (uint64_t)v24;
  v26 = v24;

  return a1;
}

char *sub_100053478(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;

  v6 = sub_1000187A4(&qword_1000B5260);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

char *sub_100053544(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B5260);
    v6 = sub_1000187A4(&qword_1000B5260);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v12 = *(_QWORD *)v10;
  v11 = *((_QWORD *)v10 + 1);
  v13 = (void *)*((_QWORD *)v9 + 1);
  *(_QWORD *)v9 = v12;
  *((_QWORD *)v9 + 1) = v11;

  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  *(_OWORD *)v15 = *(_OWORD *)v16;
  v17 = *((_QWORD *)v15 + 2);
  *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
  swift_release(v17);
  v18 = a3[7];
  v19 = *(void **)&a1[v18];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];

  return a1;
}

uint64_t sub_10005364C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100053658);
}

uint64_t sub_100053658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100057940(a1, a2, a3, &qword_1000B53A8);
}

uint64_t sub_100053664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100053670);
}

uint64_t sub_100053670(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1000579D8(a1, a2, a3, a4, &qword_1000B53A8);
}

uint64_t type metadata accessor for ChecklistItemView(uint64_t a1)
{
  return sub_1000181CC(a1, qword_1000B5890, (uint64_t)&nominal type descriptor for ChecklistItemView);
}

void sub_100053690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000573DC(a1, a2, a3, (unint64_t *)&unk_1000B5418, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory, (uint64_t)&unk_10007B0D0, (uint64_t)&value witness table for Builtin.UnknownObject + 64);
}

uint64_t sub_1000536B8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008EF58, 1);
}

uint64_t sub_1000536C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  v2 = v1;
  v4 = sub_1000187A4(&qword_1000B58D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000187A4(&qword_1000B58D8);
  __chkstk_darwin(v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000187A4(&qword_1000B52D0);
  __chkstk_darwin(v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000538E4(v2, (uint64_t)v6);
  LOBYTE(v2) = static Edge.Set.vertical.getter(v13);
  v14 = EdgeInsets.init(_all:)(11.0);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  sub_1000121BC((uint64_t)v6, (uint64_t)v9, &qword_1000B58D0);
  v21 = &v9[*(int *)(v7 + 36)];
  *v21 = v2;
  *((double *)v21 + 1) = v14;
  *((_QWORD *)v21 + 2) = v16;
  *((_QWORD *)v21 + 3) = v18;
  *((_QWORD *)v21 + 4) = v20;
  v21[40] = 0;
  v22 = sub_100011DE0((uint64_t)v6, &qword_1000B58D0);
  v23 = static Edge.Set.horizontal.getter(v22);
  v24 = EdgeInsets.init(_all:)(13.0);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  sub_1000121BC((uint64_t)v9, (uint64_t)v12, &qword_1000B58D8);
  v31 = &v12[*(int *)(v10 + 36)];
  *v31 = v23;
  *((double *)v31 + 1) = v24;
  *((_QWORD *)v31 + 2) = v26;
  *((_QWORD *)v31 + 3) = v28;
  *((_QWORD *)v31 + 4) = v30;
  v31[40] = 0;
  v32 = sub_100011DE0((uint64_t)v9, &qword_1000B58D8);
  v33 = static Alignment.leading.getter(v32);
  sub_1000434A4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a1, 0.0, 1, 0.0, 1, v33, v34);
  return sub_100011DE0((uint64_t)v12, &qword_1000B52D0);
}

uint64_t sub_1000538E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  BOOL v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a2;
  v32 = sub_1000187A4(&qword_1000B58E0);
  __chkstk_darwin(v32);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000187A4(&qword_1000B58E8);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_1000187A4(&qword_1000B58F0);
  __chkstk_darwin(v30);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ContentSizeCategory(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v29 - v15;
  sub_10005F090((uint64_t)&v29 - v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for ContentSizeCategory.accessibilityMedium(_:), v10);
  v17 = sub_100056814((uint64_t)v16, (uint64_t)v14);
  v18 = *(void (**)(char *, uint64_t))(v11 + 8);
  v18(v14, v10);
  v19 = ((uint64_t (*)(char *, uint64_t))v18)(v16, v10);
  if (v17)
  {
    *(_QWORD *)v9 = static VerticalAlignment.top.getter(v19);
    *((_QWORD *)v9 + 1) = 0x4026000000000000;
    v9[16] = 0;
    v20 = sub_1000187A4(&qword_1000B5910);
    sub_100053BE4(a1, (uint64_t)&v9[*(int *)(v20 + 44)]);
    v21 = &qword_1000B58F0;
    sub_1000121BC((uint64_t)v9, (uint64_t)v7, &qword_1000B58F0);
    swift_storeEnumTagMultiPayload(v7, v5, 0);
    v22 = sub_1000086E8(&qword_1000B5900, &qword_1000B58F0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v23 = sub_1000086E8(&qword_1000B5908, &qword_1000B58E0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    _ConditionalContent<>.init(storage:)(v7, v30, v32, v22, v23);
    v24 = (uint64_t)v9;
  }
  else
  {
    *(_QWORD *)v4 = static HorizontalAlignment.leading.getter(v19);
    *((_QWORD *)v4 + 1) = 0x4018000000000000;
    v4[16] = 0;
    v25 = sub_1000187A4(&qword_1000B58F8);
    sub_1000547F8(a1, (uint64_t)&v4[*(int *)(v25 + 44)]);
    v21 = &qword_1000B58E0;
    sub_1000121BC((uint64_t)v4, (uint64_t)v7, &qword_1000B58E0);
    swift_storeEnumTagMultiPayload(v7, v5, 1);
    v26 = sub_1000086E8(&qword_1000B5900, &qword_1000B58F0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v27 = sub_1000086E8(&qword_1000B5908, &qword_1000B58E0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    _ConditionalContent<>.init(storage:)(v7, v30, v32, v26, v27);
    v24 = (uint64_t)v4;
  }
  return sub_100011DE0(v24, v21);
}

uint64_t sub_100053BE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = a2;
  v3 = type metadata accessor for ChecklistItemView(0);
  v33 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v33 + 64);
  __chkstk_darwin(v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_1000187A4(&qword_1000B5918);
  __chkstk_darwin(v35);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000187A4(&qword_1000B5920);
  v34 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v33 - v12;
  v14 = sub_1000187A4(&qword_1000B52E8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v33 - v18;
  v20 = sub_100053ED8((uint64_t)&v33 - v18);
  *(_QWORD *)v7 = static HorizontalAlignment.leading.getter(v20);
  *((_QWORD *)v7 + 1) = 0x4000000000000000;
  v7[16] = 0;
  v21 = sub_1000187A4(&qword_1000B5928);
  sub_1000540D0(a1, &v7[*(int *)(v21 + 44)]);
  sub_10000A968(a1, (uint64_t)v5, type metadata accessor for ChecklistItemView);
  v22 = *(unsigned __int8 *)(v33 + 80);
  v23 = (v22 + 16) & ~v22;
  v24 = swift_allocObject(&unk_1000A4578, v23 + v4, v22 | 7);
  sub_100047934((uint64_t)v5, v24 + v23, type metadata accessor for ChecklistItemView);
  v25 = sub_1000086E8(&qword_1000B5930, &qword_1000B5918, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.readSize(onChange:)(sub_100056BA0, v24, v35, v25);
  swift_release(v24);
  sub_100011DE0((uint64_t)v7, &qword_1000B5918);
  v26 = v34;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v13, v11, v8);
  sub_1000121BC((uint64_t)v19, (uint64_t)v17, &qword_1000B52E8);
  v27 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  v28 = v26;
  v27(v11, v13, v8);
  v29 = v36;
  sub_1000121BC((uint64_t)v17, v36, &qword_1000B52E8);
  v30 = sub_1000187A4(&qword_1000B5938);
  v27((char *)(v29 + *(int *)(v30 + 48)), v11, v8);
  v31 = *(void (**)(char *, uint64_t))(v28 + 8);
  v31(v13, v8);
  sub_100011DE0((uint64_t)v19, &qword_1000B52E8);
  v31(v11, v8);
  return sub_100011DE0((uint64_t)v17, &qword_1000B52E8);
}

uint64_t sub_100053ED8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v25 = a1;
  v2 = type metadata accessor for ChecklistItemIcon(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_1000187A4(&qword_1000B52E0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static VerticalAlignment.center.getter(v6);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 1;
  v9 = (uint64_t)&v8[*(int *)(sub_1000187A4(&qword_1000B59C0) + 44)];
  v10 = type metadata accessor for ChecklistItemView(0);
  v11 = *(void **)(v1 + *(int *)(v10 + 20) + 8);
  v12 = *(void **)(v1 + *(int *)(v10 + 28));
  *v4 = swift_getKeyPath(&unk_10007B138);
  v13 = sub_1000187A4(&qword_1000B5950);
  swift_storeEnumTagMultiPayload(v4, v13, 0);
  v14 = (_QWORD *)((char *)v4 + *(int *)(v2 + 20));
  v15 = type metadata accessor for ChecklistViewModel(0);
  v16 = sub_1000041E8((unint64_t *)&qword_1000B50E0, type metadata accessor for ChecklistViewModel, (uint64_t)&unk_1000792C8);
  v17 = v11;
  v18 = v12;
  *v14 = ObservedObject.init(wrappedValue:)(v17, v15, v16);
  v14[1] = v19;
  *(_QWORD *)((char *)v4 + *(int *)(v2 + 24)) = v18;
  v20 = sub_100047934((uint64_t)v4, v9, type metadata accessor for ChecklistItemIcon);
  v21 = static Alignment.center.getter(v20);
  sub_1000434FC(0.0, 1, 0.0, 1, 45.0, 0, 0.0, 1, v25, 0.0, 1, 0.0, 1, v21, v22);
  return sub_100011DE0((uint64_t)v8, &qword_1000B52E0);
}

uint64_t sub_1000540D0@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  char v78;
  char v79;
  char v80;
  int v81;
  __int16 v82;
  _BYTE v83[7];
  _BYTE v84[7];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _OWORD v91[2];
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  char v107;

  v4 = (int *)type metadata accessor for ChecklistItemBody(0);
  v5 = __chkstk_darwin(v4);
  v62 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (id *)((char *)&v56 - v7);
  v9 = sub_1000187A4(&qword_1000B5948);
  v10 = __chkstk_darwin(v9);
  v60 = (uint64_t)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v56 - v13;
  v72 = static VerticalAlignment.firstTextLineCenter.getter(v12);
  sub_100054610(a1, (uint64_t)&v92);
  v75 = *((_QWORD *)&v92 + 1);
  v76 = v92;
  v77 = v93;
  v61 = v94;
  v74 = BYTE1(v95);
  v59 = v96;
  v68 = v98;
  v69 = v97;
  v66 = v100;
  v67 = v99;
  v64 = v102;
  v65 = v101;
  v63 = v103;
  v70 = BYTE4(v103);
  v71 = v95;
  v80 = 0;
  v79 = v93;
  v78 = BYTE4(v103);
  v73 = BYTE4(v103);
  v58 = v14;
  sub_100055114(a1);
  v15 = (int *)type metadata accessor for ChecklistItemView(0);
  v16 = *(void **)(a1 + v15[7]);
  v17 = *(void **)(a1 + v15[5] + 8);
  v18 = a1 + v15[6];
  v19 = *(_QWORD *)(v18 + 16);
  v92 = *(_OWORD *)v18;
  v93 = v19;
  v20 = v17;
  v56 = v16;
  v21 = sub_1000187A4(&qword_1000B5940);
  State.wrappedValue.getter(&v85, v21);
  v22 = v85;
  *v8 = swift_getKeyPath(&unk_10007B138);
  v23 = sub_1000187A4(&qword_1000B5950);
  swift_storeEnumTagMultiPayload(v8, v23, 0);
  v24 = (uint64_t)v8;
  v25 = (_OWORD *)((char *)v8 + v4[7]);
  v26 = (_QWORD *)((char *)v8 + v4[5]);
  v27 = type metadata accessor for ChecklistViewModel(0);
  v28 = sub_1000041E8((unint64_t *)&qword_1000B50E0, type metadata accessor for ChecklistViewModel, (uint64_t)&unk_1000792C8);
  *v26 = ObservedObject.init(wrappedValue:)(v20, v27, v28);
  v26[1] = v29;
  v30 = v4[6];
  v31 = v24;
  v57 = v24;
  *(_QWORD *)(v24 + v30) = v56;
  *v25 = v22;
  v32 = v60;
  sub_1000121BC((uint64_t)v14, v60, &qword_1000B5948);
  v33 = v62;
  sub_10000A968(v31, v62, type metadata accessor for ChecklistItemBody);
  *(_QWORD *)&v85 = v72;
  *((_QWORD *)&v85 + 1) = 0x4010000000000000;
  LOBYTE(v86) = 0;
  *(_DWORD *)((char *)&v86 + 1) = *(_DWORD *)v84;
  DWORD1(v86) = *(_DWORD *)&v84[3];
  v35 = v75;
  v34 = v76;
  *((_QWORD *)&v86 + 1) = v76;
  *(_QWORD *)&v87 = v75;
  BYTE8(v87) = v77;
  *(_DWORD *)((char *)&v87 + 9) = *(_DWORD *)v83;
  HIDWORD(v87) = *(_DWORD *)&v83[3];
  v36 = v61;
  *(_QWORD *)&v88 = v61;
  BYTE8(v88) = v71;
  BYTE9(v88) = v74;
  HIWORD(v88) = v82;
  *(_DWORD *)((char *)&v88 + 10) = v81;
  v37 = v59;
  *(_QWORD *)&v89 = v59;
  *((_QWORD *)&v89 + 1) = v69;
  *(_QWORD *)&v90 = v68;
  *((_QWORD *)&v90 + 1) = v67;
  *(_QWORD *)&v91[0] = v66;
  *((_QWORD *)&v91[0] + 1) = v65;
  *(_QWORD *)&v91[1] = v64;
  DWORD2(v91[1]) = v63;
  BYTE12(v91[1]) = v73;
  v38 = v86;
  *a2 = v85;
  a2[1] = v38;
  v39 = v88;
  a2[2] = v87;
  a2[3] = v39;
  v40 = v89;
  v41 = v90;
  v42 = v91[0];
  *(_OWORD *)((char *)a2 + 109) = *(_OWORD *)((char *)v91 + 13);
  a2[5] = v41;
  a2[6] = v42;
  a2[4] = v40;
  v43 = sub_1000187A4(&qword_1000B5958);
  sub_1000121BC(v32, (uint64_t)a2 + *(int *)(v43 + 48), &qword_1000B5948);
  sub_10000A968(v33, (uint64_t)a2 + *(int *)(v43 + 64), type metadata accessor for ChecklistItemBody);
  sub_100056BDC((uint64_t)&v85);
  v44 = v77;
  sub_100031A98(v34, v35, v77);
  swift_bridgeObjectRetain(v36);
  v45 = v37;
  v46 = v37;
  v48 = v68;
  v47 = v69;
  v49 = v66;
  v50 = v67;
  v51 = v64;
  v52 = v65;
  v53 = v63;
  sub_100056C84(v46, v69, v68, v67, v66, v65, v64, v63, v70);
  sub_100056CCC(v57);
  sub_100011DE0((uint64_t)v58, &qword_1000B5948);
  sub_100014658(v76, v75, v44);
  v54 = v61;
  swift_bridgeObjectRelease(v61);
  sub_100056D08(v45, v47, v48, v50, v49, v52, v51, v53, v70);
  sub_100056CCC(v62);
  sub_100011DE0(v60, &qword_1000B5948);
  *(_QWORD *)&v92 = v72;
  *((_QWORD *)&v92 + 1) = 0x4010000000000000;
  LOBYTE(v93) = 0;
  *(_DWORD *)((char *)&v93 + 1) = *(_DWORD *)v84;
  HIDWORD(v93) = *(_DWORD *)&v84[3];
  v94 = v76;
  v95 = v75;
  LOBYTE(v96) = v77;
  *(_DWORD *)((char *)&v96 + 1) = *(_DWORD *)v83;
  HIDWORD(v96) = *(_DWORD *)&v83[3];
  v97 = v54;
  LOBYTE(v98) = v71;
  BYTE1(v98) = v74;
  HIWORD(v98) = v82;
  *(_DWORD *)((char *)&v98 + 2) = v81;
  v99 = v45;
  v100 = v47;
  v101 = v48;
  v102 = v50;
  v103 = v49;
  v104 = v52;
  v105 = v51;
  v106 = v53;
  v107 = v73;
  return sub_100056D50((uint64_t)&v92);
}

uint64_t sub_100054610@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  char v44;

  v4 = type metadata accessor for ChecklistItemView(0);
  v32 = a1;
  v5 = objc_msgSend(*(id *)(a1 + *(int *)(v4 + 20) + 8), "titleFor:", *(_QWORD *)(a1 + *(int *)(v4 + 28)));
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v36 = v6;
  v37 = v8;
  v9 = sub_100014614();
  v10 = Text.init<A>(_:)(&v36, &type metadata for String, v9);
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  v17 = static Font.headline.getter();
  v18 = Text.font(_:)(v17, v10, v12, v16, v14);
  v34 = v19;
  v35 = v18;
  LOBYTE(a1) = v20;
  v31 = v21;
  swift_release(v17);
  LOBYTE(a1) = a1 & 1;
  sub_100014658(v10, v12, v16);
  swift_bridgeObjectRelease(v14);
  sub_10005589C(v32, (uint64_t)&v36);
  v22 = v36;
  v23 = v37;
  v33 = v36;
  v24 = v38;
  v25 = v39;
  v27 = v40;
  v26 = v41;
  v28 = v42;
  v29 = v43;
  LOBYTE(v17) = v44;
  *(_QWORD *)a2 = v35;
  *(_QWORD *)(a2 + 8) = v34;
  *(_BYTE *)(a2 + 16) = a1;
  *(_QWORD *)(a2 + 24) = v31;
  *(_WORD *)(a2 + 32) = 256;
  *(_QWORD *)(a2 + 40) = v22;
  *(_QWORD *)(a2 + 48) = v23;
  *(_QWORD *)(a2 + 56) = v24;
  *(_QWORD *)(a2 + 64) = v25;
  *(_QWORD *)(a2 + 72) = v27;
  *(_QWORD *)(a2 + 80) = v26;
  *(_QWORD *)(a2 + 88) = v28;
  *(_DWORD *)(a2 + 96) = v29;
  *(_BYTE *)(a2 + 100) = v17;
  sub_100031A98(v35, v34, a1);
  swift_bridgeObjectRetain(v31);
  sub_100056C84(v33, v23, v24, v25, v27, v26, v28, v29, v17);
  sub_100056D08(v33, v23, v24, v25, v27, v26, v28, v29, v17);
  sub_100014658(v35, v34, a1);
  return swift_bridgeObjectRelease(v31);
}

uint64_t sub_1000547F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[7];
  unsigned int v76;
  char v77;

  v74 = a2;
  v3 = type metadata accessor for ChecklistItemView(0);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  v68 = *(_QWORD *)(v3 - 8);
  v69 = v4;
  __chkstk_darwin(v3);
  v66 = (uint64_t)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_1000187A4(&qword_1000B59C8);
  __chkstk_darwin(v72);
  v64 = (uint64_t *)((char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v73 = sub_1000187A4(&qword_1000B59D0);
  v71 = *(_QWORD *)(v73 - 8);
  v7 = __chkstk_darwin(v73);
  v67 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v70 = (char *)&v58 - v9;
  v10 = sub_1000187A4(&qword_1000B52E8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v58 - v14;
  v16 = sub_1000187A4(&qword_1000B59D8);
  v17 = __chkstk_darwin(v16);
  v65 = (uint64_t)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v58 - v20;
  *(_QWORD *)v21 = static VerticalAlignment.top.getter(v19);
  *((_QWORD *)v21 + 1) = 0;
  v21[16] = 1;
  v63 = v21;
  v60 = &v21[*(int *)(sub_1000187A4(&qword_1000B59E0) + 44)];
  v62 = a1;
  sub_100053ED8((uint64_t)v15);
  sub_10005589C(a1, (uint64_t)v75);
  v22 = v75[0];
  v23 = v75[1];
  v24 = v75[2];
  v59 = v75[3];
  v25 = v75[5];
  v58 = v75[4];
  v26 = v75[6];
  v27 = v76;
  LOBYTE(a1) = v77;
  v61 = v13;
  sub_1000121BC((uint64_t)v15, (uint64_t)v13, &qword_1000B52E8);
  v28 = (uint64_t)v13;
  v29 = (uint64_t)v60;
  sub_1000121BC(v28, (uint64_t)v60, &qword_1000B52E8);
  v30 = v29 + *(int *)(sub_1000187A4(&qword_1000B59E8) + 48);
  *(_QWORD *)v30 = v22;
  *(_QWORD *)(v30 + 8) = v23;
  v31 = v59;
  *(_QWORD *)(v30 + 16) = v24;
  *(_QWORD *)(v30 + 24) = v31;
  v32 = v58;
  *(_QWORD *)(v30 + 32) = v58;
  *(_QWORD *)(v30 + 40) = v25;
  *(_QWORD *)(v30 + 48) = v26;
  *(_DWORD *)(v30 + 56) = v27;
  *(_BYTE *)(v30 + 60) = a1;
  sub_100056C84(v22, v23, v24, v31, v32, v25, v26, v27, a1);
  sub_100011DE0((uint64_t)v15, &qword_1000B52E8);
  sub_100056D08(v22, v23, v24, v31, v32, v25, v26, v27, a1);
  v33 = sub_100011DE0((uint64_t)v61, &qword_1000B52E8);
  v34 = static HorizontalAlignment.leading.getter(v33);
  v35 = (uint64_t)v64;
  *v64 = v34;
  *(_QWORD *)(v35 + 8) = 0x4010000000000000;
  *(_BYTE *)(v35 + 16) = 0;
  v36 = sub_1000187A4(&qword_1000B59F0);
  v37 = v62;
  sub_100054CD8(v62, (uint64_t *)(v35 + *(int *)(v36 + 44)));
  v38 = v66;
  sub_10000A968(v37, v66, type metadata accessor for ChecklistItemView);
  v39 = *(unsigned __int8 *)(v68 + 80);
  v40 = (v39 + 16) & ~v39;
  v41 = swift_allocObject(&unk_1000A45A0, v40 + v69, v39 | 7);
  sub_100047934(v38, v41 + v40, type metadata accessor for ChecklistItemView);
  v42 = sub_1000086E8(&qword_1000B59F8, &qword_1000B59C8, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v43 = v67;
  View.readSize(onChange:)(sub_100056BA0, v41, v72, v42);
  swift_release(v41);
  sub_100011DE0(v35, &qword_1000B59C8);
  v45 = v70;
  v44 = v71;
  v46 = v73;
  (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v70, v43, v73);
  v47 = (uint64_t)v63;
  v48 = v65;
  sub_1000121BC((uint64_t)v63, v65, &qword_1000B59D8);
  v49 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  v50 = v44;
  v51 = v43;
  v52 = v43;
  v53 = v46;
  v49(v51, v45, v46);
  v54 = v74;
  sub_1000121BC(v48, v74, &qword_1000B59D8);
  v55 = sub_1000187A4(&qword_1000B5A00);
  v49((char *)(v54 + *(int *)(v55 + 48)), v52, v53);
  v56 = *(void (**)(char *, uint64_t))(v50 + 8);
  v56(v45, v53);
  sub_100011DE0(v47, &qword_1000B59D8);
  v56(v52, v53);
  return sub_100011DE0(v48, &qword_1000B59D8);
}

uint64_t sub_100054CD8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  _QWORD v64[3];

  v57 = a2;
  v58 = type metadata accessor for ChecklistItemBody(0);
  v3 = __chkstk_darwin(v58);
  v60 = (uint64_t)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v52 - v5);
  v7 = sub_1000187A4(&qword_1000B5948);
  v8 = __chkstk_darwin(v7);
  v59 = (uint64_t)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v61 = (uint64_t)&v52 - v10;
  v11 = (int *)type metadata accessor for ChecklistItemView(0);
  v12 = *(void **)(a1 + v11[5] + 8);
  v53 = *(id *)(a1 + v11[7]);
  v13 = objc_msgSend(v12, "titleFor:");
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  *(_QWORD *)&v62 = v14;
  *((_QWORD *)&v62 + 1) = v16;
  v17 = sub_100014614();
  v18 = Text.init<A>(_:)(&v62, &type metadata for String, v17);
  v20 = v19;
  v22 = v21;
  v24 = v23 & 1;
  v25 = static Font.headline.getter();
  v54 = Text.font(_:)(v25, v18, v20, v24, v22);
  v55 = v26;
  LOBYTE(v16) = v27;
  v56 = v28;
  swift_release(v25);
  LOBYTE(v25) = v16 & 1;
  sub_100014658(v18, v20, v24);
  swift_bridgeObjectRelease(v22);
  v29 = v61;
  sub_100055114(a1);
  v30 = a1 + v11[6];
  v31 = *(_QWORD *)(v30 + 16);
  v62 = *(_OWORD *)v30;
  v63 = v31;
  v32 = v12;
  v33 = v53;
  v34 = sub_1000187A4(&qword_1000B5940);
  State.wrappedValue.getter(v64, v34);
  v35 = v64[0];
  v36 = v64[1];
  *v6 = swift_getKeyPath(&unk_10007B138);
  v37 = sub_1000187A4(&qword_1000B5950);
  swift_storeEnumTagMultiPayload(v6, v37, 0);
  v38 = (_QWORD *)((char *)v6 + *(int *)(v58 + 28));
  v39 = v58;
  v40 = (_QWORD *)((char *)v6 + *(int *)(v58 + 20));
  v41 = type metadata accessor for ChecklistViewModel(0);
  v42 = sub_1000041E8((unint64_t *)&qword_1000B50E0, type metadata accessor for ChecklistViewModel, (uint64_t)&unk_1000792C8);
  *v40 = ObservedObject.init(wrappedValue:)(v32, v41, v42);
  v40[1] = v43;
  *(_QWORD *)((char *)v6 + *(int *)(v39 + 24)) = v33;
  *v38 = v35;
  v38[1] = v36;
  LOBYTE(v62) = v25;
  v44 = v59;
  sub_1000121BC(v29, v59, &qword_1000B5948);
  v45 = v60;
  sub_10000A968((uint64_t)v6, v60, type metadata accessor for ChecklistItemBody);
  v46 = v54;
  v47 = v55;
  v48 = v56;
  v49 = v57;
  *v57 = v54;
  v49[1] = v47;
  *((_BYTE *)v49 + 16) = v25;
  v49[3] = v48;
  *((_WORD *)v49 + 16) = 256;
  v50 = sub_1000187A4(&qword_1000B5A08);
  sub_1000121BC(v44, (uint64_t)v49 + *(int *)(v50 + 48), &qword_1000B5948);
  sub_10000A968(v45, (uint64_t)v49 + *(int *)(v50 + 64), type metadata accessor for ChecklistItemBody);
  sub_100031A98(v46, v47, v25);
  swift_bridgeObjectRetain(v48);
  sub_100031A98(v46, v47, v25);
  swift_bridgeObjectRetain(v48);
  sub_100056CCC((uint64_t)v6);
  sub_100011DE0(v61, &qword_1000B5948);
  sub_100014658(v46, v47, v25);
  swift_bridgeObjectRelease(v48);
  sub_100056CCC(v45);
  sub_100011DE0(v44, &qword_1000B5948);
  sub_100014658(v46, v47, v62);
  return swift_bridgeObjectRelease(v48);
}

uint64_t sub_1000550A0(uint64_t a1, double a2, double a3)
{
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  __int128 v10;
  uint64_t v11;

  v5 = (__int128 *)(a1 + *(int *)(type metadata accessor for ChecklistItemView(0) + 24));
  v6 = *((_QWORD *)v5 + 2);
  v10 = *v5;
  v11 = v6;
  *(double *)v9 = a2;
  *(double *)&v9[1] = a3;
  v7 = sub_1000187A4(&qword_1000B5940);
  return State.wrappedValue.setter(v9, v7);
}

uint64_t sub_100055114(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;

  v2 = sub_1000187A4(&qword_1000B5960);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000187A4(&qword_1000B5968);
  __chkstk_darwin(v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000187A4(&qword_1000B5970);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v19 - v12;
  v14 = type metadata accessor for ChecklistItemView(0);
  if (objc_msgSend(*(id *)(a1 + *(int *)(v14 + 20) + 8), "isCompletedFor:", *(_QWORD *)(a1 + *(int *)(v14 + 28))))
  {
    *(_QWORD *)v7 = static VerticalAlignment.firstTextLineCenter.getter();
    *((_QWORD *)v7 + 1) = 0x4008000000000000;
    v7[16] = 0;
    v15 = sub_1000187A4(&qword_1000B5988);
    sub_100055350(a1, (uint64_t)&v7[*(int *)(v15 + 44)]);
    sub_1000121BC((uint64_t)v7, (uint64_t)v11, &qword_1000B5968);
    *(_WORD *)&v11[*(int *)(v8 + 36)] = 256;
    sub_100011DE0((uint64_t)v7, &qword_1000B5968);
    sub_100014780((uint64_t)v11, (uint64_t)v13, &qword_1000B5970);
    sub_1000121BC((uint64_t)v13, (uint64_t)v4, &qword_1000B5970);
    swift_storeEnumTagMultiPayload(v4, v2, 0);
    v16 = sub_100056DF8();
    _ConditionalContent<>.init(storage:)(v4, v8, &type metadata for EmptyView, v16, &protocol witness table for EmptyView);
    return sub_100011DE0((uint64_t)v13, &qword_1000B5970);
  }
  else
  {
    swift_storeEnumTagMultiPayload(v4, v2, 1);
    v18 = sub_100056DF8();
    return _ConditionalContent<>.init(storage:)(v4, v8, &type metadata for EmptyView, v18, &protocol witness table for EmptyView);
  }
}

uint64_t sub_100055350@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[2];

  v77 = a2;
  v73 = type metadata accessor for Image.Scale(0);
  v3 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v5 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000187A4(&qword_1000B4DD8);
  __chkstk_darwin(v6);
  v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_1000187A4(&qword_1000B5990);
  __chkstk_darwin(v70);
  v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_1000187A4(&qword_1000B5998);
  __chkstk_darwin(v71);
  v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_1000187A4(&qword_1000B59A0);
  v13 = __chkstk_darwin(v72);
  v76 = (uint64_t)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v68 - v16;
  __chkstk_darwin(v15);
  v75 = (uint64_t)&v68 - v18;
  v19 = Image.init(systemName:)(0xD000000000000015, 0x800000010008D100);
  v78[0] = v19;
  View.accessibilityHidden(_:)(1, &type metadata for Image, &protocol witness table for Image);
  swift_release(v19);
  v20 = type metadata accessor for ChecklistItemView(0);
  v69 = a1 + *(int *)(v20 + 20);
  v21 = *(void **)(v69 + 8);
  v22 = *(int *)(v20 + 28);
  v74 = a1;
  if (objc_msgSend(v21, "isSuggestedFor:", *(_QWORD *)(a1 + v22)))
  {
    v23 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
    v24 = Color.init(_:)(v23);
  }
  else
  {
    v24 = static Color.green.getter();
  }
  v25 = v24;
  sub_1000121BC((uint64_t)v8, (uint64_t)v10, &qword_1000B4DD8);
  *(_QWORD *)&v10[*(int *)(v70 + 36)] = v25;
  v26 = sub_100011DE0((uint64_t)v8, &qword_1000B4DD8);
  v27 = static Font.footnote.getter(v26);
  KeyPath = swift_getKeyPath(&unk_10007B168);
  sub_1000121BC((uint64_t)v10, (uint64_t)v12, &qword_1000B5990);
  v29 = (uint64_t *)&v12[*(int *)(v71 + 36)];
  *v29 = KeyPath;
  v29[1] = v27;
  sub_100011DE0((uint64_t)v10, &qword_1000B5990);
  v30 = v73;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Image.Scale.small(_:), v73);
  v31 = swift_getKeyPath(&unk_10007B198);
  v32 = (uint64_t *)&v17[*(int *)(v72 + 36)];
  v33 = sub_1000187A4(&qword_1000B5540);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))((char *)v32 + *(int *)(v33 + 28), v5, v30);
  *v32 = v31;
  sub_1000121BC((uint64_t)v12, (uint64_t)v17, &qword_1000B5998);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v30);
  sub_100011DE0((uint64_t)v12, &qword_1000B5998);
  v34 = v75;
  sub_100014780((uint64_t)v17, v75, &qword_1000B59A0);
  v35 = objc_msgSend(*(id *)(v69 + 8), "subtitleFor:", *(_QWORD *)(v74 + v22));
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v38 = v37;

  v78[0] = v36;
  v78[1] = v38;
  v39 = sub_100014614();
  v40 = Text.init<A>(_:)(v78, &type metadata for String, v39);
  v42 = v41;
  v44 = v43;
  v46 = v45 & 1;
  LODWORD(v78[0]) = static HierarchicalShapeStyle.secondary.getter();
  v47 = Text.foregroundStyle<A>(_:)(v78, v40, v42, v46, v44, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v49 = v48;
  v51 = v50;
  v53 = v52 & 1;
  sub_100014658(v40, v42, v46);
  v54 = swift_bridgeObjectRelease(v44);
  v55 = static Font.subheadline.getter(v54);
  static Font.Weight.semibold.getter(v55);
  v56 = Font.weight(_:)(v55);
  swift_release(v55);
  v57 = Text.font(_:)(v56, v47, v49, v53, v51);
  v59 = v58;
  v61 = v60;
  v63 = v62;
  swift_release(v56);
  sub_100014658(v47, v49, v53);
  swift_bridgeObjectRelease(v51);
  v64 = v76;
  sub_1000121BC(v34, v76, &qword_1000B59A0);
  v65 = v77;
  sub_1000121BC(v64, v77, &qword_1000B59A0);
  v66 = v65 + *(int *)(sub_1000187A4(&qword_1000B59A8) + 48);
  *(_QWORD *)v66 = v57;
  *(_QWORD *)(v66 + 8) = v59;
  *(_BYTE *)(v66 + 16) = v61 & 1;
  *(_QWORD *)(v66 + 24) = v63;
  sub_100031A98(v57, v59, v61 & 1);
  swift_bridgeObjectRetain(v63);
  sub_100011DE0(v34, &qword_1000B59A0);
  sub_100014658(v57, v59, v61 & 1);
  swift_bridgeObjectRelease(v63);
  return sub_100011DE0(v64, &qword_1000B59A0);
}

double sub_10005589C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  char v20;
  _BYTE v21[60];
  char v22;
  _OWORD v23[3];
  uint64_t v24;
  int v25;
  char v26;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for ChecklistItemView(0) + 20) + 8);
  KeyPath = swift_getKeyPath(&unk_10007B1D8);
  v5 = swift_getKeyPath(&unk_10007B200);
  static Published.subscript.getter(v23, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  if (LOBYTE(v23[0]) == 1)
  {
    v6 = Image.init(systemName:)(0x2E6E6F7276656863, 0xEF64726177726F66);
    v7 = static Font.footnote.getter();
    static Font.Weight.bold.getter(v7);
    v8 = Font.weight(_:)(v7);
    swift_release(v7);
    v9 = swift_getKeyPath(&unk_10007B168);
    v10 = static HierarchicalShapeStyle.tertiary.getter();
    swift_retain(v6);
    swift_retain(v9);
    swift_retain(v8);
    *(_OWORD *)v21 = xmmword_10007B090;
    *(_QWORD *)&v21[16] = v6;
    *(_OWORD *)&v21[24] = xmmword_10007B090;
    *(_QWORD *)&v21[40] = v9;
    *(_QWORD *)&v21[48] = v8;
    *(_DWORD *)&v21[56] = v10;
    v22 = 0;
    v11 = sub_1000187A4(&qword_1000B59B0);
    v12 = sub_1000086E8(&qword_1000B59B8, &qword_1000B59B0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v21, v11, &type metadata for EmptyView, v12, &protocol witness table for EmptyView);
    swift_release(v8);
    swift_release(v9);
    swift_release(v6);
  }
  else
  {
    memset(v21, 0, sizeof(v21));
    v22 = 1;
    v13 = sub_1000187A4(&qword_1000B59B0);
    v14 = sub_1000086E8(&qword_1000B59B8, &qword_1000B59B0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v21, v13, &type metadata for EmptyView, v14, &protocol witness table for EmptyView);
  }
  result = *(double *)v23;
  v16 = v23[1];
  v17 = v23[2];
  v18 = v24;
  v19 = v25;
  v20 = v26;
  *(_OWORD *)a2 = v23[0];
  *(_OWORD *)(a2 + 16) = v16;
  *(_OWORD *)(a2 + 32) = v17;
  *(_QWORD *)(a2 + 48) = v18;
  *(_DWORD *)(a2 + 56) = v19;
  *(_BYTE *)(a2 + 60) = v20;
  return result;
}

uint64_t sub_100055AD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v83 = a1;
  v2 = type metadata accessor for Image.Scale(0);
  v81 = *(_QWORD *)(v2 - 8);
  v82 = v2;
  __chkstk_darwin(v2);
  v80 = (uint64_t)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000187A4(&qword_1000B42D8);
  __chkstk_darwin(v4);
  v79 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for BackgroundProminence(0);
  v73 = *(_QWORD *)(v6 - 8);
  v74 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v69 - v10;
  v12 = sub_1000187A4(&qword_1000B52A8);
  __chkstk_darwin(v12);
  v14 = (uint64_t)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000187A4(&qword_1000B4DD8);
  __chkstk_darwin(v15);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000187A4(&qword_1000B52B0);
  __chkstk_darwin(v18);
  v20 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_1000187A4(&qword_1000B5BA0);
  __chkstk_darwin(v72);
  v22 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_1000187A4(&qword_1000B5BA8);
  __chkstk_darwin(v75);
  v78 = (uint64_t)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_1000187A4(&qword_1000B5BB0);
  __chkstk_darwin(v76);
  v77 = (char *)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for ChecklistItemIcon(0);
  v26 = *(int *)(v25 + 24);
  v27 = v1 + *(int *)(v25 + 20);
  v69 = v1;
  v70 = v27;
  v28 = *(void **)(v27 + 8);
  v71 = v26;
  v29 = objc_msgSend(v28, "symbolIdentifierFor:", *(_QWORD *)(v1 + v26));
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v32 = v31;

  v33 = Image.init(_internalSystemName:)(v30, v32);
  v84 = v33;
  View.accessibilityHidden(_:)(1, &type metadata for Image, &protocol witness table for Image);
  v34 = swift_release(v33);
  static SymbolRenderingMode.monochrome.getter(v34);
  v35 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v14, 0, 1, v35);
  KeyPath = swift_getKeyPath(&unk_10007B308);
  v37 = (uint64_t *)&v20[*(int *)(v18 + 36)];
  v38 = sub_1000187A4(&qword_1000B52B8);
  sub_1000121BC(v14, (uint64_t)v37 + *(int *)(v38 + 28), &qword_1000B52A8);
  *v37 = KeyPath;
  sub_1000121BC((uint64_t)v17, (uint64_t)v20, &qword_1000B4DD8);
  v39 = v69;
  sub_100011DE0(v14, &qword_1000B52A8);
  sub_100011DE0((uint64_t)v17, &qword_1000B4DD8);
  v40 = sub_10005F0BC((uint64_t)v11);
  static BackgroundProminence.increased.getter(v40);
  LOBYTE(v14) = static BackgroundProminence.== infix(_:_:)(v11, v9);
  v41 = *(void (**)(char *, uint64_t))(v73 + 8);
  v42 = v9;
  v43 = v74;
  v41(v42, v74);
  v44 = ((uint64_t (*)(char *, uint64_t))v41)(v11, v43);
  if ((v14 & 1) != 0)
  {
    LODWORD(v84) = static HierarchicalShapeStyle.primary.getter(v44);
    v45 = AnyShapeStyle.init<A>(_:)(&v84, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    v47 = v70;
    v46 = v71;
  }
  else
  {
    v47 = v70;
    v46 = v71;
    v48 = *(void **)(v39 + v71);
    v49 = *(id *)(v70 + 8);
    v50 = sub_100037E8C(v48);

    v84 = v50;
    v45 = AnyShapeStyle.init<A>(_:)(&v84, &type metadata for Color, &protocol witness table for Color);
  }
  sub_1000121BC((uint64_t)v20, (uint64_t)v22, &qword_1000B52B0);
  *(_QWORD *)&v22[*(int *)(v72 + 36)] = v45;
  v51 = sub_100011DE0((uint64_t)v20, &qword_1000B52B0);
  v52 = static Font.Weight.semibold.getter(v51);
  v53 = type metadata accessor for Font.Design(0);
  v54 = (uint64_t)v79;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v79, 1, 1, v53);
  v55 = static Font.system(size:weight:design:)(*(_QWORD *)&v52, 0, v54, 34.0);
  sub_100011DE0(v54, &qword_1000B42D8);
  v56 = swift_getKeyPath(&unk_10007B168);
  v57 = v78;
  sub_1000121BC((uint64_t)v22, v78, &qword_1000B5BA0);
  v58 = (uint64_t *)(v57 + *(int *)(v75 + 36));
  *v58 = v56;
  v58[1] = v55;
  sub_100011DE0((uint64_t)v22, &qword_1000B5BA0);
  v59 = *(void **)(v39 + v46);
  v60 = *(id *)(v47 + 8);
  v61 = v80;
  sub_100037454(v59, v80);

  v62 = swift_getKeyPath(&unk_10007B198);
  v63 = (uint64_t)v77;
  v64 = (uint64_t *)&v77[*(int *)(v76 + 36)];
  v65 = sub_1000187A4(&qword_1000B5540);
  v67 = v81;
  v66 = v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))((char *)v64 + *(int *)(v65 + 28), v61, v82);
  *v64 = v62;
  sub_1000121BC(v57, v63, &qword_1000B5BA8);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v61, v66);
  sub_100011DE0(v57, &qword_1000B5BA8);
  return sub_100014780(v63, v83, &qword_1000B5BB0);
}

uint64_t sub_1000560B0()
{
  return EnvironmentValues.backgroundProminence.getter();
}

uint64_t sub_1000560D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for BackgroundProminence(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.backgroundProminence.setter(v4);
}

uint64_t sub_100056150@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  double *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  _OWORD v96[2];
  uint64_t v97;

  v95 = a2;
  v3 = sub_1000187A4(&qword_1000B5B80);
  __chkstk_darwin(v3);
  v5 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000187A4(&qword_1000B5B88);
  __chkstk_darwin(v6);
  v91 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000187A4(&qword_1000B4698);
  __chkstk_darwin(v8);
  v90 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ConstellationContentView(0);
  v93 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v88 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v92 = (char *)&v78 - v13;
  v14 = type metadata accessor for ConstellationContentParagraphStyle(0);
  v83 = *(_QWORD *)(v14 - 8);
  v84 = v14;
  __chkstk_darwin(v14);
  v85 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000187A4(&qword_1000B5B90);
  __chkstk_darwin(v16);
  v82 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for ConstellationContentAttributes(0);
  v87 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v94 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for BackgroundProminence(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v78 - v24;
  v26 = type metadata accessor for ChecklistItemBody(0);
  v27 = *(int *)(v26 + 20);
  v28 = *(int *)(v26 + 24);
  v86 = v26;
  v29 = a1 + v27;
  v30 = v28;
  if (objc_msgSend(*(id *)(a1 + v27 + 8), "isSuggestedFor:", *(_QWORD *)(a1 + v28)))
  {
    v80 = v3;
    v81 = v5;
    v31 = a1;
    v32 = sub_10005F0BC((uint64_t)v25);
    static BackgroundProminence.increased.getter(v32);
    v33 = static BackgroundProminence.== infix(_:_:)(v25, v23);
    v34 = *(void (**)(char *, uint64_t))(v20 + 8);
    v34(v23, v19);
    v35 = ((uint64_t (*)(char *, uint64_t))v34)(v25, v19);
    v79 = v10;
    if ((v33 & 1) != 0)
    {
      v36 = static Color.white.getter(v35);
    }
    else
    {
      v39 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
      v36 = Color.init(_:)(v39);
    }
    v40 = (char *)v36;
    v42 = v84;
    v41 = v85;
    v43 = v30;
    v44 = v29;
    v45 = v82;
    v46 = v83;
    v47 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
    v48 = type metadata accessor for Locale.Language(0);
    memset(v96, 0, sizeof(v96));
    v97 = 0;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v45, 1, 1, v48);
    v49 = swift_retain(v40);
    v50 = defaultParagraphSpacing.getter(v49);
    (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v41, enum case for ConstellationContentParagraphStyle.newline(_:), v42);
    BYTE2(v77) = 1;
    LOWORD(v77) = 0;
    v85 = v40;
    ConstellationContentAttributes.init(font:foregroundColor:accentColor:titleGradientStyle:textAlignment:paragraphSpacing:paragraphStyle:numberOfLines:lineBreakMode:symbolScale:useForegroundColorForSymbol:displayLinkStyle:typeSettingLanguage:supportsLinks:)(v47, v40, 0, v96, 4, v41, 0, 0, v50, 1, v77, v45, 1);
    v51 = *(void **)(v44 + 8);
    v52 = *(void **)(v31 + v43);
    v53 = objc_msgSend(v51, "bodyContentFor:", v52);
    v54 = sub_1000187A4(&qword_1000B48D8);
    v84 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v53, v54);

    v55 = objc_msgSend(v52, "language");
    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    v58 = v57;

    v59 = objc_msgSend(v51, "assetsBaseURLFor:", v52);
    if (v59)
    {
      v60 = v59;
      v61 = v90;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v59);

      v62 = type metadata accessor for URL(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v61, 0, 1, v62);
    }
    else
    {
      v63 = type metadata accessor for URL(0);
      v61 = v90;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v90, 1, 1, v63);
    }
    v64 = objc_msgSend(v52, "assetFileInfoManager");
    v65 = v87;
    v66 = v91;
    v67 = v94;
    v68 = v89;
    (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v91, v94, v89);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v66, 0, 1, v68);
    v69 = (double *)(v31 + *(int *)(v86 + 28));
    LOBYTE(v76) = 1;
    v70 = v88;
    ConstellationContentView.init(rawContent:language:assetsBaseURL:assetFileInfoManager:attributes:size:maxWidth:textIsSelectable:delegate:)(v84, v56, v58, v61, v64, v66, 0, 1, *v69, v69[1], v76, 0, 0);
    v72 = v92;
    v71 = v93;
    v73 = v79;
    (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v92, v70, v79);
    v74 = v81;
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v81, v72, v73);
    swift_storeEnumTagMultiPayload(v74, v80, 0);
    v75 = sub_1000041E8(&qword_1000B5B98, (uint64_t (*)(uint64_t))&type metadata accessor for ConstellationContentView, (uint64_t)&protocol conformance descriptor for ConstellationContentView);
    _ConditionalContent<>.init(storage:)(v74, v73, &type metadata for EmptyView, v75, &protocol witness table for EmptyView);
    swift_release(v85);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
    return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v67, v68);
  }
  else
  {
    swift_storeEnumTagMultiPayload(v5, v3, 1);
    v37 = sub_1000041E8(&qword_1000B5B98, (uint64_t (*)(uint64_t))&type metadata accessor for ConstellationContentView, (uint64_t)&protocol conformance descriptor for ConstellationContentView);
    return _ConditionalContent<>.init(storage:)(v5, v10, &type metadata for EmptyView, v37, &protocol witness table for EmptyView);
  }
}

uint64_t sub_10005680C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100056150(v1, a1);
}

BOOL sub_100056814(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t (*v12)(char *, uint64_t);
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v19;

  v4 = type metadata accessor for ContentSizeCategory(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v19 - v9, a1, v4);
  v12 = *(uint64_t (**)(char *, uint64_t))(v5 + 88);
  v13 = v12(v10, v4);
  v14 = 0;
  v15 = enum case for ContentSizeCategory.extraSmall(_:);
  if (v13 != enum case for ContentSizeCategory.extraSmall(_:))
  {
    if (v13 == enum case for ContentSizeCategory.small(_:))
    {
      v14 = 1;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.medium(_:))
    {
      v14 = 2;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.large(_:))
      goto LABEL_7;
    if (v13 == enum case for ContentSizeCategory.extraLarge(_:))
    {
      v14 = 4;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraLarge(_:))
    {
      v14 = 5;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
    {
      v14 = 6;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityMedium(_:))
    {
      v14 = 7;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityLarge(_:))
    {
      v14 = 8;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
    {
      v14 = 9;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
    {
      v14 = 10;
    }
    else
    {
      if (v13 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
LABEL_7:
        v14 = 3;
        goto LABEL_24;
      }
      v14 = 11;
    }
  }
LABEL_24:
  v11(v8, a2, v4);
  v16 = v12(v8, v4);
  if (v16 == v15)
  {
    v17 = 0;
  }
  else if (v16 == enum case for ContentSizeCategory.small(_:))
  {
    v17 = 1;
  }
  else if (v16 == enum case for ContentSizeCategory.medium(_:))
  {
    v17 = 2;
  }
  else
  {
    if (v16 != enum case for ContentSizeCategory.large(_:))
    {
      if (v16 == enum case for ContentSizeCategory.extraLarge(_:))
      {
        v17 = 4;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraLarge(_:))
      {
        v17 = 5;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
      {
        v17 = 6;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityMedium(_:))
      {
        v17 = 7;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityLarge(_:))
      {
        v17 = 8;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
      {
        v17 = 9;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
      {
        v17 = 10;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        v17 = 11;
        return v14 < v17;
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    v17 = 3;
  }
  return v14 < v17;
}

uint64_t type metadata accessor for ChecklistItemBody(uint64_t a1)
{
  return sub_1000181CC(a1, (uint64_t *)&unk_1000B5A70, (uint64_t)&nominal type descriptor for ChecklistItemBody);
}

uint64_t sub_100056BB8()
{
  return EnvironmentValues.backgroundProminence.getter();
}

uint64_t sub_100056BDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(unsigned int *)(a1 + 120);
  v10 = *(_BYTE *)(a1 + 124);
  sub_100031A98(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  sub_100056C84(v12, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t sub_100056C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;

  if ((a9 & 1) == 0)
  {
    swift_retain(a7);
    swift_retain(a3);
    return swift_retain(a6);
  }
  return result;
}

uint64_t sub_100056CCC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ChecklistItemBody(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100056D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;

  if ((a9 & 1) == 0)
  {
    swift_release(a3);
    swift_release(a6);
    return swift_release(a7);
  }
  return result;
}

uint64_t sub_100056D50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(unsigned int *)(a1 + 120);
  v10 = *(_BYTE *)(a1 + 124);
  sub_100014658(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease(v2);
  sub_100056D08(v12, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

unint64_t sub_100056DF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5978;
  if (!qword_1000B5978)
  {
    v1 = sub_1000176F8(&qword_1000B5970);
    sub_1000086E8(&qword_1000B5980, &qword_1000B5968, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5978);
  }
  return result;
}

uint64_t type metadata accessor for ChecklistItemIcon(uint64_t a1)
{
  return sub_1000181CC(a1, qword_1000B5B10, (uint64_t)&nominal type descriptor for ChecklistItemIcon);
}

uint64_t sub_100056EAC(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ChecklistItemView(0) - 8) + 80);
  return sub_1000550A0(v2 + ((v5 + 16) & ~v5), a1, a2);
}

uint64_t *sub_100056EF4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_1000187A4(&qword_1000B5950);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for BackgroundProminence(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = a3[6];
    v16 = (uint64_t *)((char *)a1 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v19 = *v17;
    v18 = (void *)v17[1];
    *v16 = v19;
    v16[1] = v18;
    v20 = *(void **)((char *)a2 + v15);
    *(uint64_t *)((char *)a1 + v15) = (uint64_t)v20;
    *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
    v21 = v18;
    v22 = v20;
  }
  return a1;
}

uint64_t *sub_100056FF4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;

  v6 = sub_1000187A4(&qword_1000B5950);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for BackgroundProminence(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a3[6];
  v14 = (uint64_t *)((char *)a1 + v12);
  v15 = (uint64_t *)((char *)a2 + v12);
  v17 = *v15;
  v16 = (void *)v15[1];
  *v14 = v17;
  v14[1] = v16;
  v18 = *(void **)((char *)a2 + v13);
  *(uint64_t *)((char *)a1 + v13) = (uint64_t)v18;
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  v19 = v16;
  v20 = v18;
  return a1;
}

uint64_t *sub_1000570C4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B5950);
    v6 = sub_1000187A4(&qword_1000B5950);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for BackgroundProminence(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  *v13 = *v14;
  v15 = (void *)v14[1];
  v16 = (void *)v13[1];
  v13[1] = v15;
  v17 = v15;

  v18 = a3[6];
  v19 = *(void **)((char *)a2 + v18);
  v20 = *(void **)((char *)a1 + v18);
  *(uint64_t *)((char *)a1 + v18) = (uint64_t)v19;
  v21 = v19;

  v22 = a3[7];
  v23 = (uint64_t *)((char *)a1 + v22);
  v24 = (uint64_t *)((char *)a2 + v22);
  *v23 = *v24;
  v23[1] = v24[1];
  return a1;
}

char *sub_1000571D8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1000187A4(&qword_1000B5950);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for BackgroundProminence(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  return a1;
}

char *sub_100057294(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B5950);
    v6 = sub_1000187A4(&qword_1000B5950);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for BackgroundProminence(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v12 = *(_QWORD *)v10;
  v11 = *((_QWORD *)v10 + 1);
  v13 = (void *)*((_QWORD *)v9 + 1);
  *(_QWORD *)v9 = v12;
  *((_QWORD *)v9 + 1) = v11;

  v14 = a3[6];
  v15 = *(void **)&a1[v14];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];

  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  return a1;
}

uint64_t sub_100057384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100057390);
}

uint64_t sub_100057390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100057940(a1, a2, a3, &qword_1000B5A10);
}

uint64_t sub_10005739C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000573A8);
}

uint64_t sub_1000573A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1000579D8(a1, a2, a3, a4, &qword_1000B5A10);
}

void sub_1000573B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000573DC(a1, a2, a3, (unint64_t *)&unk_1000B5A80, (uint64_t (*)(uint64_t))&type metadata accessor for BackgroundProminence, (uint64_t)&value witness table for Builtin.UnknownObject + 64, (uint64_t)&unk_10007B238);
}

void sub_1000573DC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[4];

  sub_100003770(319, a4, a5);
  if (v11 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v10 - 8) + 64;
    v12[1] = &unk_10007B0B8;
    v12[2] = a6;
    v12[3] = a7;
    swift_initStructMetadata(a1, 256, 4, v12, a1 + 16);
  }
}

uint64_t *sub_100057468(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_1000187A4(&qword_1000B5950);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for BackgroundProminence(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = *(int *)(a3 + 24);
    v16 = (uint64_t *)((char *)a1 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v19 = *v17;
    v18 = (void *)v17[1];
    *v16 = v19;
    v16[1] = v18;
    v20 = *(void **)((char *)a2 + v15);
    *(uint64_t *)((char *)a1 + v15) = (uint64_t)v20;
    v21 = v18;
    v22 = v20;
  }
  return a1;
}

void sub_100057558(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1000187A4(&qword_1000B5950);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for BackgroundProminence(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }

}

uint64_t *sub_1000575D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;

  v6 = sub_1000187A4(&qword_1000B5950);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for BackgroundProminence(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = *(int *)(a3 + 24);
  v14 = (uint64_t *)((char *)a1 + v12);
  v15 = (uint64_t *)((char *)a2 + v12);
  v17 = *v15;
  v16 = (void *)v15[1];
  *v14 = v17;
  v14[1] = v16;
  v18 = *(void **)((char *)a2 + v13);
  *(uint64_t *)((char *)a1 + v13) = (uint64_t)v18;
  v19 = v16;
  v20 = v18;
  return a1;
}

uint64_t *sub_10005769C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B5950);
    v6 = sub_1000187A4(&qword_1000B5950);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for BackgroundProminence(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  *v13 = *v14;
  v15 = (void *)v14[1];
  v16 = (void *)v13[1];
  v13[1] = v15;
  v17 = v15;

  v18 = *(int *)(a3 + 24);
  v19 = *(void **)((char *)a2 + v18);
  v20 = *(void **)((char *)a1 + v18);
  *(uint64_t *)((char *)a1 + v18) = (uint64_t)v19;
  v21 = v19;

  return a1;
}

char *sub_100057794(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1000187A4(&qword_1000B5950);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for BackgroundProminence(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  return a1;
}

char *sub_100057844(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B5950);
    v6 = sub_1000187A4(&qword_1000B5950);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for BackgroundProminence(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v12 = *(_QWORD *)v10;
  v11 = *((_QWORD *)v10 + 1);
  v13 = (void *)*((_QWORD *)v9 + 1);
  *(_QWORD *)v9 = v12;
  *((_QWORD *)v9 + 1) = v11;

  v14 = *(int *)(a3 + 24);
  v15 = *(void **)&a1[v14];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];

  return a1;
}

uint64_t sub_100057928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100057934);
}

uint64_t sub_100057934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100057940(a1, a2, a3, &qword_1000B5A10);
}

uint64_t sub_100057940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;

  v7 = sub_1000187A4(a4);
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, a2, v7);
  v10 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_1000579C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000579CC);
}

uint64_t sub_1000579CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1000579D8(a1, a2, a3, a4, &qword_1000B5A10);
}

uint64_t sub_1000579D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v10;

  result = sub_1000187A4(a5);
  v10 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

void sub_100057A54(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_100003770(319, (unint64_t *)&unk_1000B5A80, (uint64_t (*)(uint64_t))&type metadata accessor for BackgroundProminence);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_10007B0B8;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_100057AE4()
{
  return sub_100040ACC(&qword_1000B5B50, &qword_1000B52D8, (void (*)(void))sub_100057B18);
}

uint64_t sub_100057B18()
{
  return sub_100040ACC(&qword_1000B5B58, &qword_1000B52D0, (void (*)(void))sub_100057B3C);
}

unint64_t sub_100057B3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5B60;
  if (!qword_1000B5B60)
  {
    v1 = sub_1000176F8(&qword_1000B58D8);
    sub_100014668(&qword_1000B5B68, &qword_1000B58D0, (void (*)(void))sub_100057BC0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5B60);
  }
  return result;
}

unint64_t sub_100057BC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5B70;
  if (!qword_1000B5B70)
  {
    v1 = sub_1000176F8(&qword_1000B5B78);
    sub_1000086E8(&qword_1000B5900, &qword_1000B58F0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_1000086E8(&qword_1000B5908, &qword_1000B58E0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5B70);
  }
  return result;
}

uint64_t sub_100057C5C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008EFA8, 1);
}

uint64_t sub_100057C6C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008EF80, 1);
}

uint64_t sub_100057C84()
{
  return sub_100014668(&qword_1000B5BB8, &qword_1000B5BC0, (void (*)(void))sub_100057CB0);
}

unint64_t sub_100057CB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5BC8;
  if (!qword_1000B5BC8)
  {
    v1 = sub_1000176F8(&qword_1000B5BD0);
    sub_1000041E8(&qword_1000B5B98, (uint64_t (*)(uint64_t))&type metadata accessor for ConstellationContentView, (uint64_t)&protocol conformance descriptor for ConstellationContentView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5BC8);
  }
  return result;
}

unint64_t sub_100057D38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5BD8;
  if (!qword_1000B5BD8)
  {
    v1 = sub_1000176F8(&qword_1000B5BB0);
    sub_100057DBC();
    sub_1000086E8(&qword_1000B5C18, &qword_1000B5540, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5BD8);
  }
  return result;
}

unint64_t sub_100057DBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5BE0;
  if (!qword_1000B5BE0)
  {
    v1 = sub_1000176F8(&qword_1000B5BA8);
    sub_100057E40();
    sub_1000086E8(&qword_1000B4DA8, &qword_1000B4DB0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5BE0);
  }
  return result;
}

unint64_t sub_100057E40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5BE8;
  if (!qword_1000B5BE8)
  {
    v1 = sub_1000176F8(&qword_1000B5BA0);
    sub_100057EC4();
    sub_1000086E8(&qword_1000B5C08, &qword_1000B5C10, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5BE8);
  }
  return result;
}

unint64_t sub_100057EC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5BF0;
  if (!qword_1000B5BF0)
  {
    v1 = sub_1000176F8(&qword_1000B52B0);
    sub_100057F48();
    sub_1000086E8(&qword_1000B5C00, &qword_1000B52B8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5BF0);
  }
  return result;
}

unint64_t sub_100057F48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5BF8;
  if (!qword_1000B5BF8)
  {
    v1 = sub_1000176F8(&qword_1000B4DD8);
    sub_1000041E8(&qword_1000B5220, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5BF8);
  }
  return result;
}

void *sub_100057FCC()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *result;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = sub_1000187A4(&qword_1000B5C60);
  result = (void *)__chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v0[OBJC_IVAR____TtC4Tips21TipsTOCViewController_canIncreaseViewCount] == 1)
  {
    result = (void *)(*(uint64_t (**)(void *))((swift_isaMask & *(_QWORD *)v0) + 0xB0))(result);
    if (result)
    {
      v6 = (void *)TPSAnalyticsViewMethodAppForeground;

      v7 = OBJC_IVAR____TtC4Tips21TipsTOCViewController_analyticsLoggingTask;
      v8 = *(_QWORD *)&v0[OBJC_IVAR____TtC4Tips21TipsTOCViewController_analyticsLoggingTask];
      if (v8)
      {
        swift_retain(*(_QWORD *)&v1[OBJC_IVAR____TtC4Tips21TipsTOCViewController_analyticsLoggingTask]);
        Task.cancel()();
        swift_release(v8);
      }
      v9 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v5, 1, 1, v9);
      type metadata accessor for MainActor(0);
      v10 = v1;
      v11 = v6;
      v12 = static MainActor.shared.getter(v11);
      v13 = (_QWORD *)swift_allocObject(&unk_1000A4678, 48, 7);
      v13[2] = v12;
      v13[3] = &protocol witness table for MainActor;
      v13[4] = v10;
      v13[5] = v11;
      v14 = sub_100058BDC((uint64_t)v5, (uint64_t)&unk_1000B5CA0, (uint64_t)v13);
      v15 = *(_QWORD *)&v1[v7];
      *(_QWORD *)&v1[v7] = v14;
      return (void *)swift_release(v15);
    }
  }
  return result;
}

void *sub_10005814C(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  void *result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  v4 = sub_1000187A4(&qword_1000B5C60);
  result = (void *)__chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v1[OBJC_IVAR____TtC4Tips21TipsTOCViewController_canIncreaseViewCount] == 1)
  {
    result = (void *)(*(uint64_t (**)(void *))((swift_isaMask & *(_QWORD *)v1) + 0xB0))(result);
    if (result)
    {

      v8 = OBJC_IVAR____TtC4Tips21TipsTOCViewController_analyticsLoggingTask;
      v9 = *(_QWORD *)&v1[OBJC_IVAR____TtC4Tips21TipsTOCViewController_analyticsLoggingTask];
      if (v9)
      {
        swift_retain(*(_QWORD *)&v2[OBJC_IVAR____TtC4Tips21TipsTOCViewController_analyticsLoggingTask]);
        Task.cancel()();
        swift_release(v9);
      }
      v10 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
      type metadata accessor for MainActor(0);
      v11 = v2;
      v12 = a1;
      v13 = static MainActor.shared.getter(v12);
      v14 = (_QWORD *)swift_allocObject(&unk_1000A4628, 48, 7);
      v14[2] = v13;
      v14[3] = &protocol witness table for MainActor;
      v14[4] = v11;
      v14[5] = v12;
      v15 = sub_100058BDC((uint64_t)v7, (uint64_t)&unk_1000B5C70, (uint64_t)v14);
      v16 = *(_QWORD *)&v2[v8];
      *(_QWORD *)&v2[v8] = v15;
      return (void *)swift_release(v16);
    }
  }
  return result;
}

void sub_1000582C4(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  id v16;

  v3 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC4Tips21TipsTOCViewController_analyticsLoggingTask);
  if (v3)
  {
    swift_retain(*(_QWORD *)((char *)v1 + OBJC_IVAR____TtC4Tips21TipsTOCViewController_analyticsLoggingTask));
    Task.cancel()();
    swift_release(v3);
  }
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC4Tips21TipsTOCViewController_canIncreaseViewCount) == 1)
  {
    v4 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xB0))();
    if (v4)
    {
      v5 = (void *)v4;
      v6 = TPSAnalyticsContentStyleLandingPage;
      v7 = objc_msgSend(v5, "identifier");
      if (!v7)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0);
        v9 = v8;
        v7 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v9);
      }
      v10 = objc_msgSend(a1, "viewMethod");
      if (!v10)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0);
        v12 = v11;
        v10 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v12);
      }
      v13 = (void *)objc_opt_self(TPSAnalyticsEventContentViewed);
      v14 = objc_msgSend(v1, "traitCollection");
      v15 = objc_msgSend(v13, "analyticsViewModeForTraitCollection:", v14);

      v16 = objc_msgSend(v13, "eventWithContentID:collectionID:correlationID:clientConditionID:viewMethod:viewMode:", v6, v7, 0, 0, v10, v15);
      objc_msgSend(v16, "log");

    }
  }
}

id sub_100058530()
{
  void *v0;
  id v1;
  objc_super v3;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v1, "removeObserver:name:object:", v0, UIApplicationWillEnterForegroundNotification, 0);
  objc_msgSend(v1, "removeObserver:name:object:", v0, UIApplicationDidEnterBackgroundNotification, 0);

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for TipsTOCViewController();
  return objc_msgSendSuper2(&v3, "dealloc");
}

void sub_100058738(char a1)
{
  char *v1;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  objc_super v7;

  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for TipsTOCViewController();
  objc_msgSendSuper2(&v7, "viewWillAppear:", a1 & 1);
  v1[OBJC_IVAR____TtC4Tips21TipsTOCViewController_canIncreaseViewCount] = 1;
  v3 = OBJC_IVAR____TtC4Tips21TipsTOCViewController_preferredViewMethod;
  v4 = *(void **)&v1[OBJC_IVAR____TtC4Tips21TipsTOCViewController_preferredViewMethod];
  if (v4)
  {
    v5 = v4;
    sub_10005814C(v5);
    v6 = *(void **)&v1[v3];
    *(_QWORD *)&v1[v3] = 0;

  }
  else
  {
    sub_10005814C(TPSAnalyticsViewMethodViewAppear);
  }
}

uint64_t sub_100058974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for ContinuousClock(0);
  v5[4] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[5] = v7;
  v5[6] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  v5[7] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v5[8] = v9;
  v5[9] = v10;
  return swift_task_switch(sub_100058A08, v9, v10);
}

uint64_t sub_100058A08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v1 = static Duration.seconds(_:)(kTipsAnalyticsDelayedEventInterval);
  v3 = v2;
  ContinuousClock.init()();
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1000B5C88 + dword_1000B5C88);
  v4 = (_QWORD *)swift_task_alloc(unk_1000B5C8C);
  *(_QWORD *)(v0 + 80) = v4;
  *v4 = v0;
  v4[1] = sub_100058AA4;
  return v6(v1, v3, 0, 0, 1);
}

uint64_t sub_100058AA4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 80));
  v4 = v2[5];
  v3 = v2[6];
  v5 = v2[4];
  if (v0)
  {
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v6 = v2[8];
    v7 = v2[9];
    v8 = sub_1000592DC;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v4 + 8))(v2[6], v2[4]);
    v6 = v2[8];
    v7 = v2[9];
    v8 = sub_100058B44;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_100058B44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  id v6;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 56));
  static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  v6 = objc_msgSend((id)objc_opt_self(TPSViewSourceProxy), "proxyWithViewMethod:", v5);

  sub_1000582C4(v6);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100058BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v21[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100058DEC(a1);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v10, v8);
      swift_unknownObjectRetain(v10, v13);
      v14 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v16 = v15;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v17 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v17 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v14 = 0;
  v16 = 0;
LABEL_6:
  v18 = swift_allocObject(&unk_1000A4650, 32, 7);
  *(_QWORD *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = a3;
  if (v16 | v14)
  {
    v21[0] = 0;
    v21[1] = 0;
    v19 = v21;
    v21[2] = v14;
    v21[3] = v16;
  }
  else
  {
    v19 = 0;
  }
  return swift_task_create(v9, v19, (char *)&type metadata for () + 8, &unk_1000B5C80, v18);
}

uint64_t type metadata accessor for TipsTOCViewController()
{
  return objc_opt_self(_TtC4Tips21TipsTOCViewController);
}

uint64_t sub_100058D74(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1000B5C6C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000592D8;
  return sub_100058974(a1, v4, v5, v7, v6);
}

uint64_t sub_100058DEC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000187A4(&qword_1000B5C60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100058E2C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100058E90;
  return v6(a1);
}

uint64_t sub_100058E90()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100058EDC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100058F00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1000B5C7C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100058F70;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000B5C78 + dword_1000B5C78))(a1, v4);
}

uint64_t sub_100058F70()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100058FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v6 + 64) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 72) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_10005905C, 0, 0);
}

uint64_t sub_10005905C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for ContinuousClock(0);
  v5 = sub_1000041E8(&qword_1000B5C90, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  v6 = sub_1000041E8(&qword_1000B5C98, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_100059174;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_100059174()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v2 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0)
    return swift_task_switch(sub_100059220, 0, 0);
  v8 = *(_QWORD *)(v6 + 80);
  swift_task_dealloc(*(_QWORD *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_100059220()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100059260(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1000B5C6C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100058F70;
  return sub_100058974(a1, v4, v5, v7, v6);
}

uint64_t sub_1000592E0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008F0E0, 1);
}

uint64_t sub_1000592F0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008F0B8, 1);
}

uint64_t sub_100059300()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t sub_100059320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10005A15C(v10, qword_1000B90F8);
  sub_1000479CC(v10, (uint64_t)qword_1000B90F8);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x800000010008D2B0);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Title for AppIntent that navigates to one of the tip collections.", 65, 2);
}

uint64_t sub_100059494()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t sub_1000594C8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t KeyPath;
  uint64_t v9;
  Swift::String v10;
  uint64_t v12;

  v0 = sub_1000187A4(&qword_1000B5D18);
  __chkstk_darwin(v0);
  v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000187A4(&qword_1000B5D20);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100018888();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(45, 1, &type metadata for CollectionOpenIntent, v6);
  v7._object = (void *)0x800000010008D280;
  v7._countAndFlagsBits = 0xD00000000000002DLL;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_10007B458);
  v9 = sub_1000187A4(&qword_1000B5668);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v9);
  swift_release(KeyPath);
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v10);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for CollectionOpenIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for CollectionOpenIntent, v6);
}

uint64_t sub_100059630(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2[28] = a1;
  v2[29] = a2;
  v3 = sub_1000187A4(&qword_1000B4698);
  v2[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for IntentSystemContext.Source(0);
  v2[31] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[32] = v5;
  v2[33] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000187A4(&qword_1000B5CF8);
  v2[34] = v6;
  v2[35] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_1000187A4(&qword_1000B5D00) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[36] = swift_task_alloc(v7);
  v2[37] = swift_task_alloc(v7);
  v2[38] = swift_task_alloc(v7);
  v8 = type metadata accessor for IntentSystemContext(0);
  v2[39] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[40] = v9;
  v2[41] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v2[42] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[43] = v11;
  v2[44] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10005976C, 0, 0);
}

id sub_10005976C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSString v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v39;
  id result;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSString v48;
  NSDictionary v49;
  NSURL *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v1 = *(_QWORD *)(v0 + 328);
  v61 = *(_QWORD *)(v0 + 320);
  v62 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 296);
  v60 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 280);
  v63 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 232);
  v7 = (void *)objc_opt_self(TPSDocument);
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 120));
  v8 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  v10 = objc_msgSend(v7, "URLWithTipIdentifier:collectionIdentifier:referrer:", 0, v9, TPSAnalyticsLaunchTypeAppShortcuts);

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v11 = sub_1000520F4((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + 216) = v6;
  v12 = sub_100018888();
  v13 = AppIntent.systemContext.getter(&type metadata for CollectionOpenIntent, v12);
  IntentSystemContext.source.getter(v13);
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v1, v62);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v2, enum case for IntentSystemContext.Source.spotlight(_:), v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v5);
  v14 = v3 + *(int *)(v63 + 48);
  sub_10005A0A4(v60, v3);
  sub_10005A0A4(v2, v14);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v15(v3, 1, v5) != 1)
  {
    v18 = *(_QWORD *)(v0 + 248);
    sub_10005A0A4(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288));
    v19 = v15(v14, 1, v18);
    v21 = *(_QWORD *)(v0 + 296);
    v20 = *(_QWORD *)(v0 + 304);
    v22 = *(_QWORD *)(v0 + 288);
    if (v19 != 1)
    {
      v64 = *(_QWORD *)(v0 + 280);
      v25 = *(_QWORD *)(v0 + 256);
      v26 = *(_QWORD *)(v0 + 264);
      v27 = v11;
      v28 = *(_QWORD *)(v0 + 248);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v26, v14, v28);
      v29 = sub_10005A0EC();
      v30 = dispatch thunk of static Equatable.== infix(_:_:)(v22, v26, v28, v29);
      v31 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
      v31(v26, v28);
      sub_100011DE0(v21, &qword_1000B5D00);
      sub_100011DE0(v20, &qword_1000B5D00);
      v32 = v28;
      v11 = v27;
      v31(v22, v32);
      sub_100011DE0(v64, &qword_1000B5D00);
      if ((v30 & 1) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
    v24 = *(_QWORD *)(v0 + 248);
    v23 = *(_QWORD *)(v0 + 256);
    sub_100011DE0(*(_QWORD *)(v0 + 296), &qword_1000B5D00);
    sub_100011DE0(v20, &qword_1000B5D00);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
LABEL_6:
    sub_100011DE0(*(_QWORD *)(v0 + 280), &qword_1000B5CF8);
    goto LABEL_9;
  }
  v16 = *(_QWORD *)(v0 + 304);
  v17 = *(_QWORD *)(v0 + 248);
  sub_100011DE0(*(_QWORD *)(v0 + 296), &qword_1000B5D00);
  sub_100011DE0(v16, &qword_1000B5D00);
  if (v15(v14, 1, v17) != 1)
    goto LABEL_6;
  sub_100011DE0(*(_QWORD *)(v0 + 280), &qword_1000B5D00);
LABEL_8:
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyLaunchOrigin);
  v35 = v34;
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(SBSOpenApplicationLaunchOriginSpotlight);
  *(_QWORD *)(v0 + 176) = &type metadata for String;
  *(_QWORD *)(v0 + 152) = v36;
  *(_QWORD *)(v0 + 160) = v37;
  sub_100018DC8((_OWORD *)(v0 + 152), (_OWORD *)(v0 + 184));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
  sub_100049C14((_OWORD *)(v0 + 184), v33, v35, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(0x8000000000000000);
LABEL_9:
  if (objc_msgSend((id)objc_opt_self(TPSFeatureFlags), "allowsPersistentSiri"))
    v39 = AFDeviceSupportsSystemAssistantExperience();
  else
    v39 = 0;
  result = objc_msgSend((id)objc_opt_self(TPSCommonDefines), "clientBundleIdentifier");
  if (result)
  {
    v41 = result;
    v42 = *(_QWORD *)(v0 + 344);
    v43 = *(_QWORD *)(v0 + 352);
    v44 = *(_QWORD *)(v0 + 336);
    v45 = *(_QWORD *)(v0 + 240);
    static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v47 = v46;

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v45, v43, v44);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(v45, 0, 1, v44);
    v48 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v47);
    v49.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v11);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v45, 1, v44) == 1)
    {
      v51 = 0;
    }
    else
    {
      v52 = *(_QWORD *)(v0 + 336);
      v53 = *(_QWORD *)(v0 + 344);
      v54 = *(_QWORD *)(v0 + 240);
      URL._bridgeToObjectiveC()(v50);
      v51 = v55;
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, v52);
    }
    v56 = v0 + 16;
    v57 = objc_msgSend(objc_allocWithZone((Class)INCAppLaunchRequest), "initWithBundleIdentifier:options:URL:userActivity:retainsSiri:", v48, v49.super.isa, v51, 0, v39);
    *(_QWORD *)(v0 + 360) = v57;

    *(_QWORD *)(v0 + 56) = v0 + 376;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_100059CDC;
    v58 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v59 = (_QWORD *)(v0 + 80);
    v59[1] = 0x40000000;
    v59[2] = sub_100059ECC;
    v59[3] = &unk_1000A46B8;
    v59[4] = v58;
    objc_msgSend(v57, "performWithCompletionHandler:", v59);
    return (id)swift_continuation_await(v56);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100059CDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 368) = v1;
  if (v1)
    v2 = sub_100059E04;
  else
    v2 = sub_100059D3C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100059D3C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 352);
  v2 = *(void **)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 328);
  v7 = *(_QWORD *)(v0 + 296);
  v6 = *(_QWORD *)(v0 + 304);
  v9 = *(_QWORD *)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 288);
  v11 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 240);
  static IntentResult.result<>()();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100059E04()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(void **)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 352);
  v5 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 336);
  v7 = *(_QWORD *)(v0 + 296);
  v6 = *(_QWORD *)(v0 + 304);
  v8 = *(_QWORD *)(v0 + 288);
  v10 = *(_QWORD *)(v0 + 280);
  v11 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 240);
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100059ECC(uint64_t a1, char a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_1000187A4(&qword_1000B5D10);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    **(_BYTE **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_100059F4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000B3FC0 != -1)
    swift_once(&qword_1000B3FC0, sub_100059320);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_1000479CC(v2, (uint64_t)qword_1000B90F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_100059FD0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1000B5CF4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100058F70;
  return sub_100059630(a1, v4);
}

uint64_t sub_10005A028@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1000065B0();
  *a1 = result;
  return result;
}

uint64_t sub_10005A04C()
{
  return sub_1000086E8(&qword_1000B5CC0, &qword_1000B5CC8, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t sub_10005A078()
{
  return sub_1000086E8(&qword_1000B5CD0, &qword_1000B5CD8, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_10005A0A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000187A4(&qword_1000B5D00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10005A0EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5D08;
  if (!qword_1000B5D08)
  {
    v1 = type metadata accessor for IntentSystemContext.Source(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentSystemContext.Source, v1);
    atomic_store(result, (unint64_t *)&qword_1000B5D08);
  }
  return result;
}

uint64_t sub_10005A134@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t *sub_10005A15C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

_QWORD *assignWithCopy for CollectionListView(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;

  *a1 = *a2;
  v3 = (void *)a2[1];
  v4 = (void *)a1[1];
  a1[1] = v3;
  v5 = v3;

  return a1;
}

_QWORD *assignWithTake for CollectionListView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;

  v3 = a2[1];
  v4 = (void *)a1[1];
  *a1 = *a2;
  a1[1] = v3;

  return a1;
}

uint64_t sub_10005A208(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v6 = sub_1000187A4(&qword_1000B4500);
  v7 = swift_allocObject(v6, 40, 7);
  *(_OWORD *)(v7 + 16) = xmmword_10007B480;
  *(_QWORD *)(v7 + 32) = a1;
  v17 = v7;
  specialized Array._endMutation()(v7);
  KeyPath = swift_getKeyPath(&unk_10007B870);
  v9 = swift_allocObject(&unk_1000A4968, 32, 7);
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  v10 = a1;
  v11 = a3;
  v12 = sub_1000187A4(&qword_1000B4AA0);
  v13 = type metadata accessor for CollectionListItemView(0);
  v14 = sub_1000086E8(&qword_1000B5E80, &qword_1000B4AA0, (uint64_t)&protocol conformance descriptor for [A]);
  v15 = sub_1000041E8(&qword_1000B5E40, type metadata accessor for CollectionListItemView, (uint64_t)&unk_10007A928);
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t))ForEach<>.init(_:id:content:))(&v17, KeyPath, sub_100007F58, v9, v12, v13, v14, &protocol witness table for String, v15);
}

uint64_t sub_10005A350@<X0>(void **a1@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t KeyPath;
  int *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_1000187A4(&qword_1000B53A8);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *a1;
  *v8 = swift_getKeyPath(&unk_10007B758);
  v10 = sub_1000187A4(&qword_1000B5260);
  swift_storeEnumTagMultiPayload(v8, v10, 0);
  KeyPath = swift_getKeyPath(&unk_10007B788);
  v12 = (int *)type metadata accessor for UserGuideListItemView(0);
  v13 = (uint64_t *)(a3 + v12[5]);
  *v13 = KeyPath;
  v14 = sub_1000187A4(&qword_1000B41C0);
  swift_storeEnumTagMultiPayload(v13, v14, 0);
  sub_100014780((uint64_t)v8, a3, &qword_1000B53A8);
  v15 = (uint64_t *)(a3 + v12[6]);
  v16 = type metadata accessor for CollectionListViewModel(0);
  v17 = sub_1000041E8(&qword_1000B4510, type metadata accessor for CollectionListViewModel, (uint64_t)&unk_1000796A8);
  v18 = a2;
  v19 = v9;
  result = ObservedObject.init(wrappedValue:)(v18, v16, v17);
  *v15 = result;
  v15[1] = v21;
  *(_QWORD *)(a3 + v12[7]) = v19;
  return result;
}

uint64_t sub_10005A4B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005A4EC()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t sub_10005A50C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.sizeCategory.setter(v4);
}

uint64_t sub_10005A588()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t sub_10005A5A8()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t sub_10005A5C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_1000187A4(&qword_1000B4C60);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000121BC(a1, (uint64_t)v4, &qword_1000B4C60);
  return EnvironmentValues.textCase.setter(v4);
}

void sub_10005A65C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000187E4(a1, a2);
}

uint64_t sub_10005A670()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t sub_10005A69C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10005A6CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10005A6FC(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_10005A728(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_10005A75C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = UserGuide.identifier.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_10005A784(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000187E4(a1, a2);
}

void sub_10005A798(uint64_t a1, void **a2)
{
  void *v2;
  NSString v3;

  v2 = *a2;
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setIdentifier:", v3);

}

uint64_t sub_10005A7F0()
{
  uint64_t v0;

  return sub_10005A208(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

void sub_10005A7FC(id *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_10004C100(*(id *)(v2 + 24), *a1, a2);
}

void *TPSLastDisplayedContent.tipId.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR___TPSLastDisplayedContent_tipId);
  swift_beginAccess(v0 + OBJC_IVAR___TPSLastDisplayedContent_tipId, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void TPSLastDisplayedContent.tipId.setter(void *a1)
{
  sub_10005AAB0(a1, &OBJC_IVAR___TPSLastDisplayedContent_tipId);
}

uint64_t (*TPSLastDisplayedContent.tipId.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR___TPSLastDisplayedContent_tipId, a1, 33, 0);
  return j_j__swift_endAccess;
}

id sub_10005A9B0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id *v3;
  _BYTE v5[24];

  v3 = (id *)(a1 + *a3);
  swift_beginAccess(v3, v5, 0, 0);
  return *v3;
}

void *TPSLastDisplayedContent.collectionId.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR___TPSLastDisplayedContent_collectionId);
  swift_beginAccess(v0 + OBJC_IVAR___TPSLastDisplayedContent_collectionId, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void sub_10005AA4C(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4)
{
  void **v5;
  void *v6;
  id v7;
  _BYTE v8[24];

  v5 = (void **)(a1 + *a4);
  swift_beginAccess(v5, v8, 1, 0);
  v6 = *v5;
  *v5 = a3;
  v7 = a3;

}

void TPSLastDisplayedContent.collectionId.setter(void *a1)
{
  sub_10005AAB0(a1, &OBJC_IVAR___TPSLastDisplayedContent_collectionId);
}

void sub_10005AAB0(void *a1, _QWORD *a2)
{
  uint64_t v2;
  void **v4;
  void *v5;
  _BYTE v6[24];

  v4 = (void **)(v2 + *a2);
  swift_beginAccess(v4, v6, 1, 0);
  v5 = *v4;
  *v4 = a1;

}

uint64_t (*TPSLastDisplayedContent.collectionId.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR___TPSLastDisplayedContent_collectionId, a1, 33, 0);
  return j__swift_endAccess;
}

id TPSLastDisplayedContent.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id TPSLastDisplayedContent.init()(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  *(_QWORD *)&v2[OBJC_IVAR___TPSLastDisplayedContent_tipId] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___TPSLastDisplayedContent_collectionId] = 0;
  v5.receiver = v2;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, "init");
}

id TPSLastDisplayedContent.__allocating_init(collectionId:tipId:)(void *a1, void *a2)
{
  objc_class *v2;
  char *v5;
  void **v6;
  void **v7;
  void *v8;
  char *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  objc_super v15;
  char v16[24];
  char v17[24];

  v5 = (char *)objc_allocWithZone(v2);
  v6 = (void **)&v5[OBJC_IVAR___TPSLastDisplayedContent_tipId];
  *(_QWORD *)&v5[OBJC_IVAR___TPSLastDisplayedContent_tipId] = 0;
  v7 = (void **)&v5[OBJC_IVAR___TPSLastDisplayedContent_collectionId];
  *v7 = 0;
  swift_beginAccess(v7, v17, 1, 0);
  v8 = *v7;
  *v7 = a1;
  v9 = v5;
  v10 = a1;

  swift_beginAccess(v6, v16, 1, 0);
  v11 = *v6;
  *v6 = a2;
  v12 = a2;

  v15.receiver = v9;
  v15.super_class = v2;
  v13 = objc_msgSendSuper2(&v15, "init");

  return v13;
}

id TPSLastDisplayedContent.init(collectionId:tipId:)(void *a1, void *a2)
{
  id v4;

  v4 = sub_10005B288(a1, a2);

  return v4;
}

uint64_t TPSLastDisplayedContent.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  id *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  id *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v19;
  _BYTE v20[24];
  uint64_t v21;
  unint64_t v22;

  v1 = v0;
  v21 = 40;
  v22 = 0xE100000000000000;
  v2 = (id *)(v0 + OBJC_IVAR___TPSLastDisplayedContent_collectionId);
  swift_beginAccess(v2, v20, 0, 0);
  if (*v2)
  {
    v3 = *v2;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease(0xE000000000000000);
    strcpy((char *)&v19, "collectionId: ");
    HIBYTE(v19._object) = -18;
    v4 = objc_msgSend(v3, "description");
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

    v8._countAndFlagsBits = v5;
    v8._object = v7;
    String.append(_:)(v8);
    swift_bridgeObjectRelease(v7);
    String.append(_:)(v19);

    swift_bridgeObjectRelease(v19._object);
  }
  v9 = (id *)(v1 + OBJC_IVAR___TPSLastDisplayedContent_tipId);
  swift_beginAccess(v9, &v19, 0, 0);
  if (*v9)
  {
    v10 = *v9;
    v11 = objc_msgSend(v10, "description");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v15._countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v14);
    v16._countAndFlagsBits = 0x203A6449706974;
    v16._object = (void *)0xE700000000000000;
    String.append(_:)(v16);

    swift_bridgeObjectRelease(0xE700000000000000);
  }
  v17._countAndFlagsBits = 41;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  return v21;
}

id TPSLastDisplayedContent.__deallocating_deinit(uint64_t a1, uint64_t a2)
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)swift_getObjectType(v2, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t static TPSLastDisplayedContent.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall TPSLastDisplayedContent.encode(with:)(NSCoder with)
{
  uint64_t v1;
  id *v3;
  id v4;
  NSString v5;
  id *v6;
  id v7;
  NSString v8;
  uint64_t v9;
  _BYTE v10[24];

  v3 = (id *)(v1 + OBJC_IVAR___TPSLastDisplayedContent_collectionId);
  swift_beginAccess(v1 + OBJC_IVAR___TPSLastDisplayedContent_collectionId, v10, 0, 0);
  v4 = *v3;
  v5 = String._bridgeToObjectiveC()();
  -[objc_class encodeObject:forKey:](with.super.isa, "encodeObject:forKey:", v4, v5);

  v6 = (id *)(v1 + OBJC_IVAR___TPSLastDisplayedContent_tipId);
  swift_beginAccess(v6, &v9, 0, 0);
  v7 = *v6;
  v8 = String._bridgeToObjectiveC()();
  -[objc_class encodeObject:forKey:](with.super.isa, "encodeObject:forKey:", v7, v8);

}

id TPSLastDisplayedContent.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), "initWithCoder:", a1);

  return v3;
}

id TPSLastDisplayedContent.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t ObjectType;

  v2 = v1;
  v4 = sub_10005B35C();
  v5 = NSCoder.decodeObject<A>(of:forKey:)(v4, 0x697463656C6C6F63, 0xEC00000064496E6FLL, v4);
  if (!v5)
    goto LABEL_5;
  v6 = (void *)v5;
  v7 = (void *)NSCoder.decodeObject<A>(of:forKey:)(v4, 0x6449706974, 0xE500000000000000, v4);
  if (!v7)
  {

LABEL_5:
    ObjectType = swift_getObjectType(v2, v11);
    swift_deallocPartialClassInstance(v2, ObjectType, 24, 7);
    return 0;
  }
  v8 = v7;
  v9 = v6;
  v10 = objc_msgSend(v2, "initWithCollectionId:tipId:", v9, v8);

  return v10;
}

id sub_10005B288(void *a1, void *a2)
{
  char *v2;
  objc_class *ObjectType;
  void **v6;
  void **v7;
  void *v8;
  char *v9;
  id v10;
  void *v11;
  id v12;
  objc_super v14;
  char v15[24];
  char v16[24];

  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  v6 = (void **)&v2[OBJC_IVAR___TPSLastDisplayedContent_tipId];
  *(_QWORD *)&v2[OBJC_IVAR___TPSLastDisplayedContent_tipId] = 0;
  v7 = (void **)&v2[OBJC_IVAR___TPSLastDisplayedContent_collectionId];
  *v7 = 0;
  swift_beginAccess(v7, v16, 1, 0);
  v8 = *v7;
  *v7 = a1;
  v9 = v2;
  v10 = a1;

  swift_beginAccess(v6, v15, 1, 0);
  v11 = *v6;
  *v6 = a2;
  v12 = a2;

  v14.receiver = v9;
  v14.super_class = ObjectType;
  return objc_msgSendSuper2(&v14, "init");
}

unint64_t sub_10005B35C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B5FB0;
  if (!qword_1000B5FB0)
  {
    v1 = objc_opt_self(NSString);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000B5FB0);
  }
  return result;
}

uint64_t type metadata accessor for TPSLastDisplayedContent()
{
  return objc_opt_self(TPSLastDisplayedContent);
}

uint64_t sub_10005B3BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = a1;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1000B6200 + dword_1000B6200);
  v6 = (_QWORD *)swift_task_alloc(unk_1000B6204);
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = sub_10005B42C;
  return v8(a2, a3);
}

uint64_t sub_10005B42C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10005B488(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t, uint64_t);

  v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1000B61F8 + dword_1000B61F8);
  v3 = (_QWORD *)swift_task_alloc(unk_1000B61FC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10005B4E8;
  return v5(a1, (uint64_t)v5);
}

uint64_t sub_10005B4E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_10005B53C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10001A164();
  *v5 = v2;
  v5[1] = sub_100058F70;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_10005B5A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to DynamicOptionsProvider.defaultResult()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100058F70;
  return DynamicOptionsProvider.defaultResult()(a1, a2, a3);
}

uint64_t sub_10005B618()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_1000187A4(&qword_1000B61E0);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10005A15C(v16, qword_1000B9110);
  sub_1000479CC(v16, (uint64_t)qword_1000B9110);
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000016, 0x800000010008D510);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "Short, human-readable name of the Entity type for AppShortcut.", 62, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t sub_10005B82C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000B3FC8 != -1)
    swift_once(&qword_1000B3FC8, sub_10005B618);
  v2 = type metadata accessor for TypeDisplayRepresentation(0);
  v3 = sub_1000479CC(v2, (uint64_t)qword_1000B9110);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

unint64_t sub_10005B8A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B6158;
  if (!qword_1000B6158)
  {
    v1 = sub_1000176F8(&qword_1000B6160);
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyResolverSpecification<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B6158);
  }
  return result;
}

uint64_t sub_10005B8EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100019FCC();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_10005B924(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100019F00();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_10005B95C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[2] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[3] = v2;
  v1[4] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[5] = v3;
  v1[6] = v4;
  return swift_task_switch(sub_10005B9CC, v3, v4);
}

uint64_t sub_10005B9CC()
{
  uint64_t v0;
  void *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(void **)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC4Tips14ContentFetcher_appController);
  if ((objc_msgSend(v1, "contentHasLoaded") & 1) != 0)
  {
    swift_release(*(_QWORD *)(v0 + 32));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    *(_QWORD *)(v0 + 56) = static MainActor.shared.getter(objc_msgSend(v1, "addDelegate:", v3));
    v4 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 64) = v4;
    *(_QWORD *)(v4 + 16) = v3;
    v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 72) = v5;
    *v5 = v0;
    v5[1] = sub_10005BAD4;
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
}

uint64_t sub_10005BAD4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 64);
  v3 = *(_QWORD *)(*v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10005BB3C, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_10005BB3C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10005BB6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _BYTE v17[24];

  v4 = type metadata accessor for TipsLog(0, a2);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = sub_1000187A4(&qword_1000B61D0);
  __chkstk_darwin(v8);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = sub_1000187A4(&qword_1000B61C8);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v10, a1, v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  v13 = a2 + OBJC_IVAR____TtC4Tips14ContentFetcher_continuation;
  swift_beginAccess(a2 + OBJC_IVAR____TtC4Tips14ContentFetcher_continuation, v17, 33, 0);
  sub_10005C288((uint64_t)v10, v13);
  swift_endAccess(v17);
  v14 = *(void **)(a2 + OBJC_IVAR____TtC4Tips14ContentFetcher_appController);
  LODWORD(v13) = objc_msgSend(v14, "updatingContent");
  static TipsLog.default.getter();
  if ((_DWORD)v13)
  {
    logDebug(_:_:)(v7, 0xD000000000000025, 0x800000010008D4C0);
    return (id)(*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    logDebug(_:_:)(v7, 0xD00000000000001CLL, 0x800000010008D4A0);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    return objc_msgSend(v14, "updateContent");
  }
}

id sub_10005BD3C(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id result;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  _BYTE v25[24];
  _BYTE v26[24];

  v3 = v2;
  v24 = a1;
  v5 = sub_1000187A4(&qword_1000B61C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000187A4(&qword_1000B61D0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v23 - v13;
  v16 = type metadata accessor for TipsLog(0, v15);
  v17 = *(_QWORD *)(v16 - 8);
  result = (id)__chkstk_darwin(v16);
  v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    static TipsLog.default.getter(result);
    logDebug(_:_:)(v20, 0xD00000000000001DLL, 0x800000010008D460);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    v21 = v3 + OBJC_IVAR____TtC4Tips14ContentFetcher_continuation;
    swift_beginAccess(v3 + OBJC_IVAR____TtC4Tips14ContentFetcher_continuation, v26, 0, 0);
    sub_1000121BC(v21, (uint64_t)v14, &qword_1000B61D0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v14, 1, v5))
    {
      sub_100011DE0((uint64_t)v14, &qword_1000B61D0);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v14, v5);
      v22 = sub_100011DE0((uint64_t)v14, &qword_1000B61D0);
      CheckedContinuation.resume(returning:)(v22, v5);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v12, 1, 1, v5);
    swift_beginAccess(v21, v25, 33, 0);
    sub_10005C288((uint64_t)v12, v21);
    swift_endAccess(v25);
    return objc_msgSend(v24, "removeDelegate:", v3);
  }
  return result;
}

id sub_10005C008()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ContentFetcher(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10005C080()
{
  return type metadata accessor for ContentFetcher(0);
}

uint64_t type metadata accessor for ContentFetcher(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B61A8;
  if (!qword_1000B61A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ContentFetcher);
  return result;
}

void sub_10005C0C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_10005C140(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

void sub_10005C140(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000B61C0)
  {
    v2 = sub_1000176F8(&qword_1000B61C8);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000B61C0);
  }
}

_QWORD *assignWithCopy for TipCollection(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for TipCollection(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t storeEnumTagSinglePayload for TipCollection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_10005C288(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000187A4(&qword_1000B61D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id sub_10005C2D0(uint64_t a1)
{
  uint64_t v1;

  return sub_10005BB6C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10005C2D8(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v24[4];
  _QWORD *v25;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return (uint64_t)_swiftEmptyArrayStorage;
  v4 = 0;
  v5 = result + 56;
  v21 = -(uint64_t)v3;
  v6 = _swiftEmptyArrayStorage;
  v19 = result + 56;
  v20 = *(_QWORD *)(result + 16);
  do
  {
    if (v4 <= v3)
      v7 = v3;
    else
      v7 = v4;
    v8 = -(uint64_t)v7;
    for (i = (uint64_t *)(v5 + 32 * v4++); ; i += 4)
    {
      if (v8 + v4 == 1)
      {
        __break(1u);
        return result;
      }
      v10 = *(i - 3);
      v11 = *(i - 2);
      v12 = *(i - 1);
      v13 = *i;
      v24[2] = v12;
      v24[3] = v13;
      v24[0] = a2;
      v24[1] = a3;
      v14 = sub_100014614();
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v13);
      if ((StringProtocol.localizedCaseInsensitiveContains<A>(_:)(v24, &type metadata for String, &type metadata for String, v14, v14) & 1) != 0)break;
      swift_bridgeObjectRelease(v13);
      result = swift_bridgeObjectRelease(v11);
      ++v4;
      if (v21 + v4 == 1)
        return (uint64_t)v6;
    }
    result = swift_isUniquelyReferenced_nonNull_native(v6);
    v25 = v6;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_100018250(0, v6[2] + 1, 1);
      v6 = v25;
    }
    v5 = v19;
    v16 = v6[2];
    v15 = v6[3];
    v17 = v16 + 1;
    if (v16 >= v15 >> 1)
    {
      result = (uint64_t)sub_100018250((char *)(v15 > 1), v16 + 1, 1);
      v17 = v16 + 1;
      v6 = v25;
    }
    v6[2] = v17;
    v18 = &v6[4 * v16];
    v18[4] = v10;
    v18[5] = v11;
    v18[6] = v12;
    v18[7] = v13;
    v3 = v20;
  }
  while (v21 + v4);
  return (uint64_t)v6;
}

uint64_t sub_10005C498()
{
  return swift_task_switch(sub_10005C4AC, 0, 0);
}

uint64_t sub_10005C4AC()
{
  objc_super *v0;
  void *v1;
  objc_class *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  id v6;
  objc_super **v7;

  type metadata accessor for TPSUIAppController(0);
  v1 = (void *)static TPSUIAppController.shared.getter();
  v0[2].receiver = v1;
  v2 = (objc_class *)type metadata accessor for ContentFetcher(0);
  v3 = (char *)objc_allocWithZone(v2);
  v4 = &v3[OBJC_IVAR____TtC4Tips14ContentFetcher_continuation];
  v5 = sub_1000187A4(&qword_1000B61C8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  *(_QWORD *)&v3[OBJC_IVAR____TtC4Tips14ContentFetcher_appController] = v1;
  v0[1].receiver = v3;
  v0[1].super_class = v2;
  v6 = v1;
  v0[2].super_class = (Class)objc_msgSendSuper2(v0 + 1, "init");
  v7 = (objc_super **)swift_task_alloc(dword_1000B61BC);
  v0[3].receiver = v7;
  *v7 = v0;
  v7[1] = (objc_super *)sub_10005C590;
  return sub_10005B95C();
}

uint64_t sub_10005C590()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  return swift_task_switch(sub_10005C5E4, 0, 0);
}

char *sub_10005C5E4()
{
  uint64_t v0;
  id v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;

  v1 = objc_msgSend(*(id *)(v0 + 32), "collections");
  if (v1)
  {
    v2 = v1;
    v3 = sub_100018214();
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  }
  else
  {
    v4 = (uint64_t)_swiftEmptyArrayStorage;
  }
  v5 = objc_msgSend(*(id *)(v0 + 32), "featuredCollection");
  if (v5)
  {
    v6 = v5;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v8 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v7 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v8 >= v7 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
    v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v6);
    specialized Array._endMutation()(v9);

  }
  if (!((unint64_t)v4 >> 62))
  {
    v10 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v4);
    if (v10)
      goto LABEL_10;
LABEL_26:
    v31 = *(void **)(v0 + 32);

    swift_bridgeObjectRelease(v4);
LABEL_27:
    swift_bridgeObjectRelease(v4);
    return (char *)(*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
  if (v4 < 0)
    v30 = v4;
  else
    v30 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v10 = _CocoaArrayWrapper.endIndex.getter(v30);
  if (!v10)
    goto LABEL_26;
LABEL_10:
  result = sub_100018250(0, v10 & ~(v10 >> 63), 0);
  if ((v10 & 0x8000000000000000) == 0)
  {
    v12 = 0;
    v32 = v0;
    v33 = v4 & 0xC000000000000001;
    v13 = v4;
    v14 = v10;
    do
    {
      if (v33)
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v4);
      else
        v15 = *(id *)(v4 + 8 * v12 + 32);
      v16 = v15;
      v17 = objc_msgSend(v15, "identifier");
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v20 = v19;

      v21 = objc_msgSend(v16, "featuredTitle");
      if (v21)
      {
        v22 = v21;
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        v25 = v24;

      }
      else
      {

        v23 = 0;
        v25 = 0xE000000000000000;
      }
      v27 = _swiftEmptyArrayStorage[2];
      v26 = _swiftEmptyArrayStorage[3];
      if (v27 >= v26 >> 1)
        sub_100018250((char *)(v26 > 1), v27 + 1, 1);
      ++v12;
      _swiftEmptyArrayStorage[2] = v27 + 1;
      v28 = &_swiftEmptyArrayStorage[4 * v27];
      v28[4] = v18;
      v28[5] = v20;
      v28[6] = v23;
      v28[7] = v25;
      v4 = v13;
    }
    while (v14 != v12);
    v0 = v32;
    v29 = *(void **)(v32 + 32);

    swift_bridgeObjectRelease(v13);
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t sub_10005C8A8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (__cdecl *v7)();

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for TipsLog(0, a2);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t (__cdecl *)())((char *)&dword_1000B61E8 + dword_1000B61E8);
  v5 = (_QWORD *)swift_task_alloc(unk_1000B61EC);
  v2[7] = v5;
  *v5 = v2;
  v5[1] = sub_10005C92C;
  return v7();
}

uint64_t sub_10005C92C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v2 + 56);
  v5 = *v2;
  *(_QWORD *)(v5 + 64) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_task_dealloc(*(_QWORD *)(v5 + 48));
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  else
  {
    *(_QWORD *)(v5 + 72) = a1;
    return swift_task_switch(sub_10005C9B4, 0, 0);
  }
}

uint64_t sub_10005C9B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  void *object;

  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v5 = *(void **)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(v5);
  v7 = sub_10005C2D8(v1, v6, (uint64_t)v5);
  swift_bridgeObjectRelease(v5);
  v8 = swift_bridgeObjectRelease(v1);
  static TipsLog.default.getter(v8);
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease(0xE000000000000000);
  v9._countAndFlagsBits = v6;
  v9._object = v5;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x7275746572202D20;
  v10._object = (void *)0xED000020676E696ELL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = Array.description.getter(v7, &type metadata for TipCollection);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  log(_:_:)(v2, 0xD000000000000020, 0x800000010008D570);
  swift_bridgeObjectRelease(0x800000010008D570);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

uint64_t sub_10005CB04(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v3 = type metadata accessor for TipsLog(0, a2);
  v2[3] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[4] = v4;
  v2[5] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10005CB64, 0, 0);
}

char *sub_10005CB64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSString v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *result;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  void *object;
  Swift::String v38;
  Swift::String v39;
  void *v40;
  uint64_t v41;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    type metadata accessor for TPSUIAppController(0);
    swift_bridgeObjectRetain(v1);
    v3 = (_QWORD *)(v1 + 40);
    do
    {
      v5 = *v3;
      v6 = swift_bridgeObjectRetain(*v3);
      v7 = (void *)static TPSUIAppController.shared.getter(v6);
      v8 = String._bridgeToObjectiveC()();
      v9 = objc_msgSend(v7, "collectionForIdentifier:", v8);

      v10 = swift_bridgeObjectRelease(v5);
      if (v9)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
        v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v11 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v12 >= v11 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        v4 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v9);
        specialized Array._endMutation()(v4);
      }
      v3 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(*(_QWORD *)(v41 + 16));
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
LABEL_9:
      v13 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v13)
        goto LABEL_10;
LABEL_27:
      v31 = swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      v33 = *(_QWORD *)(v41 + 32);
      v32 = *(_QWORD *)(v41 + 40);
      v35 = *(_QWORD *)(v41 + 16);
      v34 = *(_QWORD *)(v41 + 24);
      static TipsLog.default.getter(v31);
      _StringGuts.grow(_:)(49);
      swift_bridgeObjectRelease(0xE000000000000000);
      v36._countAndFlagsBits = Array.description.getter(v35, &type metadata for String);
      object = v36._object;
      String.append(_:)(v36);
      swift_bridgeObjectRelease(object);
      v38._countAndFlagsBits = 0x7275746572202D20;
      v38._object = (void *)0xED000020676E696ELL;
      String.append(_:)(v38);
      v39._countAndFlagsBits = Array.description.getter(_swiftEmptyArrayStorage, &type metadata for TipCollection);
      v40 = v39._object;
      String.append(_:)(v39);
      swift_bridgeObjectRelease(v40);
      log(_:_:)(v32, 0xD000000000000020, 0x800000010008D570);
      swift_bridgeObjectRelease(0x800000010008D570);
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
      swift_task_dealloc(v32);
      return (char *)(*(uint64_t (**)(_QWORD *))(v41 + 8))(_swiftEmptyArrayStorage);
    }
  }
  else if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
  {
    goto LABEL_9;
  }
  if ((uint64_t)_swiftEmptyArrayStorage < 0)
    v30 = _swiftEmptyArrayStorage;
  else
    v30 = (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  v13 = _CocoaArrayWrapper.endIndex.getter(v30);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  if (!v13)
    goto LABEL_27;
LABEL_10:
  result = sub_100018250(0, v13 & ~(v13 >> 63), 0);
  if ((v13 & 0x8000000000000000) == 0)
  {
    v15 = 0;
    do
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
        v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, _swiftEmptyArrayStorage);
      else
        v16 = (id)_swiftEmptyArrayStorage[v15 + 4];
      v17 = v16;
      v18 = objc_msgSend(v16, "identifier");
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v21 = v20;

      v22 = objc_msgSend(v17, "featuredTitle");
      if (v22)
      {
        v23 = v22;
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        v26 = v25;

      }
      else
      {

        v24 = 0;
        v26 = 0xE000000000000000;
      }
      v28 = _swiftEmptyArrayStorage[2];
      v27 = _swiftEmptyArrayStorage[3];
      if (v28 >= v27 >> 1)
        sub_100018250((char *)(v27 > 1), v28 + 1, 1);
      ++v15;
      _swiftEmptyArrayStorage[2] = v28 + 1;
      v29 = &_swiftEmptyArrayStorage[4 * v28];
      v29[4] = v19;
      v29[5] = v21;
      v29[6] = v24;
      v29[7] = v26;
    }
    while (v13 != v15);
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t *sub_10005CF28(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  id v34;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_1000187A4(&qword_1000B41B8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for UserInterfaceSizeClass(0);
      v9 = *(_QWORD *)(v8 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
        v10 = sub_1000187A4(&qword_1000B41C8);
        memcpy(v4, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(v4, a2, v8);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
      }
      v13 = v4;
      v14 = v7;
      v15 = 1;
    }
    else
    {
      v12 = *a2;
      *v4 = *a2;
      swift_retain(v12);
      v13 = v4;
      v14 = v7;
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v14, v15);
    v16 = a3[5];
    v17 = (uint64_t *)((char *)v4 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = sub_1000187A4(&qword_1000B41C0);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v20 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
      v21 = v17;
      v22 = v19;
      v23 = 1;
    }
    else
    {
      v24 = *v18;
      *v17 = *v18;
      swift_retain(v24);
      v21 = v17;
      v22 = v19;
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v21, v22, v23);
    v25 = a3[6];
    v26 = a3[7];
    v27 = (uint64_t *)((char *)v4 + v25);
    v28 = (uint64_t *)((char *)a2 + v25);
    v30 = *v28;
    v29 = (void *)v28[1];
    *v27 = v30;
    v27[1] = v29;
    v31 = (uint64_t *)((char *)v4 + v26);
    v32 = (uint64_t *)((char *)a2 + v26);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v11 = v32[2];
    v31[2] = v11;
    v34 = v29;
    swift_bridgeObjectRetain(v33);
  }
  swift_retain(v11);
  return v4;
}

uint64_t *sub_10005D10C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B41B8);
    v6 = sub_1000187A4(&qword_1000B41B8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for UserInterfaceSizeClass(0);
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_1000187A4(&qword_1000B41C8);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      v11 = a1;
      v12 = v6;
      v13 = 1;
    }
    else
    {
      v10 = *a2;
      *a1 = *a2;
      swift_retain(v10);
      v11 = a1;
      v12 = v6;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
    v14 = a3[5];
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    sub_100011DE0((uint64_t)a1 + v14, &qword_1000B41C0);
    v17 = sub_1000187A4(&qword_1000B41C0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
  }
  v23 = a3[6];
  v24 = (uint64_t *)((char *)a1 + v23);
  v25 = (uint64_t *)((char *)a2 + v23);
  *v24 = *v25;
  v26 = (void *)v25[1];
  v27 = (void *)v24[1];
  v24[1] = v26;
  v28 = v26;

  v29 = a3[7];
  v30 = (uint64_t *)((char *)a1 + v29);
  v31 = (char *)a2 + v29;
  *v30 = *(uint64_t *)((char *)a2 + v29);
  v32 = *(uint64_t *)((char *)a2 + v29 + 8);
  v33 = *(uint64_t *)((char *)a1 + v29 + 8);
  v30[1] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v34 = v30[2];
  v35 = *((_QWORD *)v31 + 2);
  v30[2] = v35;
  swift_retain(v35);
  swift_release(v34);
  return a1;
}

char *sub_10005D31C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  v6 = sub_1000187A4(&qword_1000B41B8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for UserInterfaceSizeClass(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_1000187A4(&qword_1000B41C8);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v10 = a3[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
    swift_storeEnumTagMultiPayload(v11, v13, 1);
  }
  else
  {
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  v15 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_QWORD *)v16 + 2) = *((_QWORD *)v17 + 2);
  return a1;
}

char *sub_10005D4B4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B41B8);
    v6 = sub_1000187A4(&qword_1000B41B8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for UserInterfaceSizeClass(0);
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_1000187A4(&qword_1000B41C8);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v10 = a3[5];
    v11 = &a1[v10];
    v12 = &a2[v10];
    sub_100011DE0((uint64_t)&a1[v10], &qword_1000B41C0);
    v13 = sub_1000187A4(&qword_1000B41C0);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v19 = *(_QWORD *)v17;
  v18 = *((_QWORD *)v17 + 1);
  v20 = (void *)*((_QWORD *)v16 + 1);
  *(_QWORD *)v16 = v19;
  *((_QWORD *)v16 + 1) = v18;

  v21 = a3[7];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = *((_QWORD *)v23 + 1);
  v25 = *(_QWORD *)&a1[v21 + 8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_QWORD *)v22 + 1) = v24;
  swift_bridgeObjectRelease(v25);
  v26 = *((_QWORD *)v22 + 2);
  *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
  swift_release(v26);
  return a1;
}

uint64_t sub_10005D698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005D6A4);
}

uint64_t sub_10005D6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_1000187A4(&qword_1000B41B0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1000187A4(&qword_1000B45E0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_10005D758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005D764);
}

uint64_t sub_10005D764(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_1000187A4(&qword_1000B41B0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_1000187A4(&qword_1000B45E0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10005D814(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008F260, 1);
}

uint64_t sub_10005D824@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (**v64)();
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92[16];
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;

  v90 = a1;
  v2 = type metadata accessor for SearchResultsView(0);
  v80 = *(_QWORD *)(v2 - 8);
  v3 = v2;
  v69 = v2;
  v81 = *(_QWORD *)(v80 + 64);
  __chkstk_darwin(v2);
  v77 = (uint64_t)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for LocalCoordinateSpace(0);
  __chkstk_darwin(v76);
  v74 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for DragGesture(0);
  v85 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v70 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000187A4(&qword_1000B62F0);
  v8 = *(_QWORD *)(v7 - 8);
  v86 = v7;
  v87 = v8;
  __chkstk_darwin(v7);
  v78 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000187A4(&qword_1000B62F8);
  v68 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000187A4(&qword_1000B6300);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000187A4(&qword_1000B6308);
  v67 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_1000187A4(&qword_1000B6310);
  v79 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v71 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_1000187A4(&qword_1000B62D0);
  __chkstk_darwin(v91);
  v75 = (char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1000187A4(&qword_1000B6318);
  v88 = *(_QWORD *)(v22 - 8);
  v89 = v22;
  __chkstk_darwin(v22);
  v84 = (char *)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = v1 + *(int *)(v3 + 28);
  v24 = *(_QWORD *)(v73 + 16);
  v94 = *(_OWORD *)v73;
  v95 = v24;
  v72 = sub_1000187A4(&qword_1000B4FC0);
  State.projectedValue.getter(&v96, v72);
  v93 = v1;
  v25 = sub_1000187A4(&qword_1000B6320);
  v26 = sub_1000086E8(&qword_1000B6328, &qword_1000B6320, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  List.init(selection:content:)(&v96, sub_10005F624, v92, &type metadata for String, v25, &protocol witness table for String, v26);
  v27 = objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
  v28 = Color.init(_:)(v27);
  *(_QWORD *)&v96 = v28;
  v29 = sub_1000086E8(&qword_1000B6330, &qword_1000B62F8, (uint64_t)&protocol conformance descriptor for List<A, B>);
  View.scrollContentBackground<A>(_:)(&v96, v10, &type metadata for Color, v29, &protocol witness table for Color);
  swift_release(v28);
  v30 = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v12, v10);
  LOBYTE(v28) = static Edge.Set.all.getter(v30);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v19, v16, v13);
  v19[*(int *)(v17 + 36)] = v28;
  v31 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v32 = v74;
  static CoordinateSpaceProtocol<>.local.getter(v31);
  v33 = v70;
  DragGesture.init<A>(minimumDistance:coordinateSpace:)(v32, v76, &protocol witness table for LocalCoordinateSpace, 10.0);
  v34 = v1;
  v35 = v77;
  sub_10005F62C(v1, v77);
  v36 = *(unsigned __int8 *)(v80 + 80);
  v37 = ((v36 + 16) & ~v36) + v81;
  v38 = (v36 + 16) & ~v36;
  v80 = v38;
  v81 = v36 | 7;
  v39 = swift_allocObject(&unk_1000A4C90, v37, v36 | 7);
  sub_10005F674(v35, v39 + v38);
  v40 = sub_1000041E8(&qword_1000B6338, (uint64_t (*)(uint64_t))&type metadata accessor for DragGesture, (uint64_t)&protocol conformance descriptor for DragGesture);
  v41 = sub_1000041E8(&qword_1000B6340, (uint64_t (*)(uint64_t))&type metadata accessor for DragGesture.Value, (uint64_t)&protocol conformance descriptor for DragGesture.Value);
  v42 = v78;
  v43 = v83;
  Gesture<>.onChanged(_:)(sub_10005F6B8, v39, v83, v40, v41);
  swift_release(v39);
  v44 = (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v33, v43);
  v45 = static GestureMask.all.getter(v44);
  v46 = sub_10005F6F4();
  v47 = sub_1000086E8(&qword_1000B6350, &qword_1000B62F0, (uint64_t)&protocol conformance descriptor for _ChangedGesture<A>);
  v48 = v71;
  v49 = v45;
  v50 = v86;
  View.simultaneousGesture<A>(_:including:)(v42, v49, v67, v86, v46, v47);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v42, v50);
  sub_100011DE0((uint64_t)v19, &qword_1000B6308);
  v66 = v34;
  v51 = (uint64_t)v75;
  sub_100011FB4(&qword_1000B41C0, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, (char *)0x686353726F6C6F43, (char *)0xEB00000000656D65, (uint64_t)&v75[*(int *)(v91 + 52)]);
  (*(void (**)(uint64_t, char *, uint64_t))(v79 + 32))(v51, v48, v82);
  v52 = *(_QWORD *)(v73 + 16);
  v96 = *(_OWORD *)v73;
  *(_QWORD *)&v97 = v52;
  State.wrappedValue.getter(&v94, v72);
  v96 = v94;
  sub_10005F62C(v34, v35);
  v53 = v81;
  v54 = swift_allocObject(&unk_1000A4CB8, v37, v81);
  v55 = v80;
  sub_10005F674(v35, v54 + v80);
  v56 = sub_1000187A4(&qword_1000B4198);
  v57 = sub_1000086E8(&qword_1000B62D8, &qword_1000B62D0, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
  v58 = sub_100041E94();
  v59 = v84;
  View.onChange<A>(of:initial:_:)(&v96, 0, sub_10005F7D8, v54, v91, v56, v57, v58);
  swift_release(v54);
  swift_bridgeObjectRelease(*((_QWORD *)&v96 + 1));
  sub_100011DE0(v51, &qword_1000B62D0);
  sub_10005F62C(v66, v35);
  v60 = swift_allocObject(&unk_1000A4CE0, v37, v53);
  sub_10005F674(v35, v60 + v55);
  v62 = v88;
  v61 = v89;
  v63 = v90;
  (*(void (**)(uint64_t, char *, uint64_t))(v88 + 16))(v90, v59, v89);
  v64 = (uint64_t (**)())(v63 + *(int *)(sub_1000187A4(&qword_1000B62B0) + 36));
  *v64 = sub_10005F828;
  v64[1] = (uint64_t (*)())v60;
  v64[2] = 0;
  v64[3] = 0;
  return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v59, v61);
}

uint64_t sub_10005E054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  int64x2_t v24;
  char v25;
  uint64_t v26;

  v3 = a1 + *(int *)(type metadata accessor for SearchResultsView(0) + 24);
  v4 = *(id *)(v3 + 8);
  v5 = dispatch thunk of TipNavigationViewModel.tips.getter(v4);
  v6 = v5;
  if ((unint64_t)v5 >> 62)
  {
    if (v5 >= 0)
      v5 &= 0xFFFFFFFFFFFFFF8uLL;
    v7 = _CocoaArrayWrapper.endIndex.getter(v5);
  }
  else
  {
    v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }

  swift_bridgeObjectRelease(v6);
  if (v7)
  {
    v8 = type metadata accessor for SearchResultsViewModel(0);
    v9 = sub_1000041E8((unint64_t *)&qword_1000B41A0, type metadata accessor for SearchResultsViewModel, (uint64_t)&protocol conformance descriptor for TipNavigationViewModel);
    v10 = ObservedObject.init(wrappedValue:)(v4, v8, v9);
    v7 = v11;
    v12 = 1;
    v13 = 3;
  }
  else
  {
    v10 = 0;
    v13 = 0;
    v12 = 0;
  }
  KeyPath = swift_getKeyPath(&unk_10007BD38);
  v15 = swift_getKeyPath(&unk_10007BD60);
  v16 = v4;
  static Published.subscript.getter(&v26, v16, KeyPath, v15);
  swift_release(KeyPath);
  v17 = swift_release(v15);
  v18 = v26;
  LOBYTE(KeyPath) = dispatch thunk of SearchResultsModel.hasTopics.getter(v17);

  swift_release(v18);
  if ((KeyPath & 1) != 0)
  {
    v19 = *(void **)(v3 + 8);
    v20 = type metadata accessor for SearchResultsViewModel(0);
    v21 = sub_1000041E8((unint64_t *)&qword_1000B41A0, type metadata accessor for SearchResultsViewModel, (uint64_t)&protocol conformance descriptor for TipNavigationViewModel);
    result = ObservedObject.init(wrappedValue:)(v19, v20, v21);
    v24 = vdupq_n_s64(3uLL);
    v24.i64[0] = v23;
    v25 = 1;
  }
  else
  {
    result = 0;
    v25 = 0;
    v24 = 0uLL;
  }
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v13;
  *(_BYTE *)(a2 + 24) = v12;
  *(_QWORD *)(a2 + 32) = result;
  *(int64x2_t *)(a2 + 40) = v24;
  *(_BYTE *)(a2 + 56) = v25;
  return result;
}

uint64_t sub_10005E230(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t KeyPath;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v2 = *(void **)(a2 + *(int *)(type metadata accessor for SearchResultsView(0) + 24) + 8);
  KeyPath = swift_getKeyPath(&unk_10007BD38);
  v4 = swift_getKeyPath(&unk_10007BD60);
  v5 = v2;
  static Published.subscript.getter(&v12, v5, KeyPath, v4);
  swift_release(KeyPath);
  v6 = swift_release(v4);
  v7 = v12;
  v8 = (void (*)(uint64_t))dispatch thunk of SearchResultsModel.searchResultScrollHandler.getter(v6);
  v10 = v9;

  result = swift_release(v7);
  if (v8)
  {
    v8(result);
    return sub_100005500((uint64_t)v8, v10);
  }
  return result;
}

uint64_t sub_10005E2EC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t KeyPath;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_BYTE *, uint64_t);
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  int v46;
  uint64_t v47;
  _BYTE *v48;
  int v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  _BYTE *v53;
  void (*v54)(_BYTE *, uint64_t);
  __int128 *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v59[4];
  int v60;
  void (*v61)(_BYTE *, uint64_t);
  _BYTE *v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  _QWORD v72[2];
  __int128 v73;
  uint64_t v74;

  v71 = a3;
  v5 = type metadata accessor for UserInterfaceSizeClass(0);
  v67 = *(_QWORD *)(v5 - 8);
  v68 = v5;
  __chkstk_darwin(v5);
  v62 = &v59[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v65 = sub_1000187A4(&qword_1000B6358);
  __chkstk_darwin(v65);
  v66 = &v59[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_1000187A4(&qword_1000B41C8);
  v9 = __chkstk_darwin(v8);
  v64 = &v59[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __chkstk_darwin(v9);
  v70 = &v59[-v12];
  __chkstk_darwin(v11);
  v69 = &v59[-v13];
  v14 = type metadata accessor for SearchResultsView(0);
  __chkstk_darwin(v14);
  v16 = &v59[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for SearchResult.Item.Category(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = &v59[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19);
  v23 = &v59[-v22];
  v25 = *a2;
  v24 = a2[1];
  v63 = v14;
  v26 = *(void **)(a3 + *(int *)(v14 + 24) + 8);
  KeyPath = swift_getKeyPath(&unk_10007BD38);
  v28 = swift_getKeyPath(&unk_10007BD60);
  v29 = v26;
  static Published.subscript.getter(&v73, v29, KeyPath, v28);
  swift_release(KeyPath);
  v30 = v28;
  v31 = v23;
  swift_release(v30);
  v32 = v73;
  dispatch thunk of SearchResultsModel.updateSelection(to:)(v25, v24);

  swift_release(v32);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v18 + 104))(v21, enum case for SearchResult.Item.Category.userGuideTopic(_:), v17);
  v33 = sub_1000041E8(&qword_1000B6360, (uint64_t (*)(uint64_t))&type metadata accessor for SearchResult.Item.Category, (uint64_t)&protocol conformance descriptor for SearchResult.Item.Category);
  dispatch thunk of RawRepresentable.rawValue.getter(&v73, v17, v33);
  dispatch thunk of RawRepresentable.rawValue.getter(v72, v17, v33);
  v34 = v73;
  v35 = v72[0];
  v36 = *(void (**)(_BYTE *, uint64_t))(v18 + 8);
  v36(v21, v17);
  sub_10005F62C(v71, (uint64_t)v16);
  if (v34 == v35)
  {
    v61 = v36;
    v37 = v69;
    sub_10005F0E8((uint64_t)v69);
    v38 = v67;
    v39 = v70;
    v40 = (uint64_t)v16;
    v41 = v68;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v67 + 104))(v70, enum case for UserInterfaceSizeClass.compact(_:), v68);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v41);
    v42 = v66;
    v43 = (uint64_t)&v66[*(int *)(v65 + 48)];
    sub_1000121BC((uint64_t)v37, (uint64_t)v66, &qword_1000B41C8);
    sub_1000121BC((uint64_t)v39, v43, &qword_1000B41C8);
    v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
    v45 = (uint64_t)v42;
    if (v44((uint64_t)v42, 1, v41) == 1)
    {
      sub_100011DE0((uint64_t)v70, &qword_1000B41C8);
      sub_100011DE0((uint64_t)v69, &qword_1000B41C8);
      sub_10005F880(v40);
      v46 = v44(v43, 1, v41);
      v36 = v61;
      if (v46 == 1)
      {
        sub_100011DE0((uint64_t)v42, &qword_1000B41C8);
LABEL_10:
        v55 = (__int128 *)(v71 + *(int *)(v63 + 28));
        v56 = *((_QWORD *)v55 + 2);
        v73 = *v55;
        v74 = v56;
        v72[0] = 0;
        v72[1] = 0;
        v57 = sub_1000187A4(&qword_1000B4FC0);
        State.wrappedValue.setter(v72, v57);
        return ((uint64_t (*)(_BYTE *, uint64_t))v36)(v31, v17);
      }
      goto LABEL_8;
    }
    v65 = v40;
    v47 = (uint64_t)v42;
    v48 = v64;
    sub_1000121BC(v47, (uint64_t)v64, &qword_1000B41C8);
    v49 = v44(v43, 1, v41);
    v50 = v69;
    v36 = v61;
    if (v49 == 1)
    {
      sub_100011DE0((uint64_t)v70, &qword_1000B41C8);
      sub_100011DE0((uint64_t)v50, &qword_1000B41C8);
      sub_10005F880(v65);
      (*(void (**)(_BYTE *, uint64_t))(v38 + 8))(v48, v41);
LABEL_8:
      sub_100011DE0(v45, &qword_1000B6358);
      return ((uint64_t (*)(_BYTE *, uint64_t))v36)(v31, v17);
    }
    v51 = v62;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v38 + 32))(v62, v43, v41);
    v52 = sub_1000041E8(&qword_1000B6368, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
    v60 = dispatch thunk of static Equatable.== infix(_:_:)(v48, v51, v41, v52);
    v53 = v48;
    v54 = *(void (**)(_BYTE *, uint64_t))(v38 + 8);
    v54(v51, v41);
    sub_100011DE0((uint64_t)v70, &qword_1000B41C8);
    sub_100011DE0((uint64_t)v50, &qword_1000B41C8);
    sub_10005F880(v65);
    v54(v53, v41);
    sub_100011DE0(v45, &qword_1000B41C8);
    if ((v60 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    sub_10005F880((uint64_t)v16);
  }
  return ((uint64_t (*)(_QWORD, _QWORD))v36)(v31, v17);
}

uint64_t sub_10005E860(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[5];
  uint64_t v36;

  v27 = a1;
  v31 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v2 = (char *)&v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SearchResultsView(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  v30 = v9;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v27 - v14;
  sub_100010CA8();
  v28 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)(v13, 0.15);
  v29 = *(void (**)(char *, uint64_t))(v10 + 8);
  v29(v13, v9);
  sub_10005F62C(v27, (uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(unsigned __int8 *)(v7 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = swift_allocObject(&unk_1000A4D08, v17 + v8, v16 | 7);
  sub_10005F674((uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17);
  aBlock[4] = sub_10005F838;
  v36 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100003DA8;
  aBlock[3] = &unk_1000A4D20;
  v19 = _Block_copy(aBlock);
  v20 = swift_release(v36);
  static DispatchQoS.unspecified.getter(v20);
  aBlock[0] = _swiftEmptyArrayStorage;
  v21 = sub_1000041E8((unint64_t *)&qword_1000B44A8, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_1000187A4(&qword_1000B44B0);
  v23 = sub_1000086E8((unint64_t *)&qword_1000B44B8, &qword_1000B44B0, (uint64_t)&protocol conformance descriptor for [A]);
  v24 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v22, v23, v31, v21);
  v25 = (void *)v28;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v15, v5, v2, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v2, v24);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v33);
  return ((uint64_t (*)(char *, uint64_t))v29)(v15, v30);
}

uint64_t sub_10005EB4C(uint64_t a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  __int128 v6;
  uint64_t v7;

  v1 = (__int128 *)(a1 + *(int *)(type metadata accessor for SearchResultsView(0) + 28));
  v2 = *((_QWORD *)v1 + 2);
  v6 = *v1;
  v7 = v2;
  v5[0] = 0;
  v5[1] = 0;
  v3 = sub_1000187A4(&qword_1000B4FC0);
  return State.wrappedValue.setter(v5, v3);
}

double sub_10005EBB0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double result;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  char v24;

  v3 = *(void **)(v1 + *(int *)(type metadata accessor for SearchResultsView(0) + 24) + 8);
  KeyPath = swift_getKeyPath(&unk_10007BD38);
  v5 = swift_getKeyPath(&unk_10007BD60);
  v6 = v3;
  static Published.subscript.getter(&v23, v6, KeyPath, v5);
  swift_release(KeyPath);
  v7 = swift_release(v5);
  v8 = v23;
  LOBYTE(v5) = dispatch thunk of SearchResultsModel.hasStartedSearch.getter(v7);

  swift_release(v8);
  if ((v5 & 1) != 0)
  {
    v9 = swift_getKeyPath(&unk_10007BD38);
    v10 = swift_getKeyPath(&unk_10007BD60);
    v11 = v6;
    static Published.subscript.getter(&v23, v11, v9, v10);
    swift_release(v9);
    v12 = swift_release(v10);
    v13 = v23;
    v14 = dispatch thunk of SearchResultsModel.searchTerm.getter(v12);
    v16 = v15;

    swift_release(v13);
    v20 = v14;
    v21 = v16;
    v22 = 0;
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 1;
  }
  v17 = sub_10005F5E0();
  _ConditionalContent<>.init(storage:)(&v20, &type metadata for SearchResultsEmptyView, &type metadata for EmptyView, v17, &protocol witness table for EmptyView);
  result = *(double *)&v23;
  v19 = v24;
  *(_OWORD *)a1 = v23;
  *(_BYTE *)(a1 + 16) = v19;
  return result;
}

uint64_t sub_10005ED14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t KeyPath;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t OpaqueTypeConformance2;
  unint64_t v27;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  void *v42;

  v39 = a1;
  v37 = sub_1000187A4(&qword_1000B62A8);
  __chkstk_darwin(v37);
  v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for PlainListStyle(0);
  v34 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_1000187A4(&qword_1000B62B0);
  __chkstk_darwin(v36);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000187A4(&qword_1000B62B8);
  v35 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v34 - v12;
  v14 = *(void **)(v1 + *(int *)(type metadata accessor for SearchResultsView(0) + 24) + 8);
  KeyPath = swift_getKeyPath(&unk_10007BD38);
  v16 = swift_getKeyPath(&unk_10007BD60);
  v17 = v14;
  static Published.subscript.getter(&v40, v17, KeyPath, v16);
  swift_release(KeyPath);
  v18 = swift_release(v16);
  v19 = v40;
  LOBYTE(v16) = dispatch thunk of SearchResultsModel.hasSearchResults.getter(v18);

  swift_release(v19);
  if ((v16 & 1) != 0)
  {
    v20 = sub_10005D824((uint64_t)v7);
    PlainListStyle.init()(v20);
    v21 = sub_10005F4A4();
    v22 = v36;
    v23 = v38;
    View.listStyle<A>(_:)(v5, v36, v38, v21, &protocol witness table for PlainListStyle);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v5, v23);
    sub_100011DE0((uint64_t)v7, &qword_1000B62B0);
    v24 = v35;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v13, v11, v8);
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v3, v13, v8);
    swift_storeEnumTagMultiPayload(v3, v37, 0);
    v25 = sub_1000187A4(&qword_1000B62C0);
    *(_QWORD *)&v40 = v22;
    *((_QWORD *)&v40 + 1) = v23;
    v41 = v21;
    v42 = &protocol witness table for PlainListStyle;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v40, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    v27 = sub_10005F574();
    _ConditionalContent<>.init(storage:)(v3, v8, v25, OpaqueTypeConformance2, v27);
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v13, v8);
  }
  else
  {
    sub_10005EBB0((uint64_t)&v40);
    v29 = v41;
    *(_OWORD *)v3 = v40;
    v3[16] = v29;
    swift_storeEnumTagMultiPayload(v3, v37, 1);
    v30 = sub_1000187A4(&qword_1000B62C0);
    v31 = sub_10005F4A4();
    *(_QWORD *)&v40 = v36;
    *((_QWORD *)&v40 + 1) = v38;
    v41 = v31;
    v42 = &protocol witness table for PlainListStyle;
    v32 = swift_getOpaqueTypeConformance2(&v40, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    v33 = sub_10005F574();
    return _ConditionalContent<>.init(storage:)(v3, v8, v30, v32, v33);
  }
}

uint64_t sub_10005F090@<X0>(uint64_t a1@<X8>)
{
  return sub_100011FB4(&qword_1000B5260, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, (char *)0xD000000000000013, (char *)0x800000010008D5D0, a1);
}

uint64_t sub_10005F0BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100011FB4(&qword_1000B5950, (uint64_t (*)(_QWORD))&type metadata accessor for BackgroundProminence, (char *)0xD000000000000014, (char *)0x800000010008D5F0, a1);
}

uint64_t sub_10005F0E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v12;
  os_log_type_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000187A4(&qword_1000B41B8);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000121BC(v2, (uint64_t)v10, &qword_1000B41B8);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
    return sub_10005F98C((uint64_t)v10, a1);
  v12 = *v10;
  v13 = static os_log_type_t.fault.getter();
  v14 = static Log.runtimeIssuesLog.getter();
  if (os_log_type_enabled(v14, v13))
  {
    v15 = swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v18 = v16;
    *(_DWORD *)v15 = 136315138;
    *(_QWORD *)(v15 + 4) = sub_10005F8BC((char *)0xD000000000000020, (char *)0x800000010008D5A0, &v18);
    _os_log_impl((void *)&_mh_execute_header, v14, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v7, v12);
  swift_release(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10005F2E4@<X0>(uint64_t a1@<X8>)
{
  return sub_100011FB4(&qword_1000B6388, (uint64_t (*)(_QWORD))&type metadata accessor for ScenePhase, (char *)0x616850656E656353, (char *)0xEA00000000006573, a1);
}

uint64_t sub_10005F310(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unsigned __int8 v15;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  if (os_log_type_enabled(v10, v9))
  {
    v11 = swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v14 = v12;
    *(_DWORD *)v11 = 136315138;
    *(_QWORD *)(v11 + 4) = sub_10005F8BC((char *)0x6C6F6F42, (char *)0xE400000000000000, &v14);
    _os_log_impl((void *)&_mh_execute_header, v10, v9, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v7, a1);
  sub_10005FE00(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v15;
}

unint64_t sub_10005F4A4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1000B62C8;
  if (!qword_1000B62C8)
  {
    v1 = sub_1000176F8(&qword_1000B62B0);
    v2[0] = sub_1000176F8(&qword_1000B62D0);
    v2[1] = sub_1000176F8(&qword_1000B4198);
    v2[2] = sub_1000086E8(&qword_1000B62D8, &qword_1000B62D0, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    v2[3] = sub_100041E94();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B62C8);
  }
  return result;
}

unint64_t sub_10005F574()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B62E0;
  if (!qword_1000B62E0)
  {
    v1 = sub_1000176F8(&qword_1000B62C0);
    sub_10005F5E0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B62E0);
  }
  return result;
}

unint64_t sub_10005F5E0()
{
  unint64_t result;

  result = qword_1000B62E8;
  if (!qword_1000B62E8)
  {
    result = swift_getWitnessTable(&unk_10007A0D8, &type metadata for SearchResultsEmptyView);
    atomic_store(result, (unint64_t *)&qword_1000B62E8);
  }
  return result;
}

uint64_t sub_10005F624@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005E054(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10005F62C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchResultsView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005F674(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchResultsView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005F6B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SearchResultsView(0) - 8) + 80);
  return sub_10005E230(a1, v1 + ((v3 + 16) & ~v3));
}

unint64_t sub_10005F6F4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1000B6348;
  if (!qword_1000B6348)
  {
    v1 = sub_1000176F8(&qword_1000B6308);
    v2[0] = sub_1000176F8(&qword_1000B62F8);
    v2[1] = &type metadata for Color;
    v2[2] = sub_1000086E8(&qword_1000B6330, &qword_1000B62F8, (uint64_t)&protocol conformance descriptor for List<A, B>);
    v2[3] = &protocol witness table for Color;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.scrollContentBackground<A>(_:)>>, 1);
    sub_1000086E8(&qword_1000B4FB8, &qword_1000B4FA8, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B6348);
  }
  return result;
}

uint64_t sub_10005F7D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SearchResultsView(0) - 8) + 80);
  return sub_10005E2EC(a1, a2, v2 + ((v5 + 16) & ~v5));
}

uint64_t sub_10005F828()
{
  return sub_10005F844(sub_10005E860);
}

uint64_t sub_10005F838()
{
  return sub_10005F844(sub_10005EB4C);
}

uint64_t sub_10005F844(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SearchResultsView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_10005F880(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SearchResultsView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_10005F8BC(char *a1, char *a2, uint64_t *a3)
{
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v13[3];
  void *ObjectType;

  v6 = sub_10005F9D4(v13, 0, 0, 1, (uint64_t)a1, (unint64_t)a2);
  v8 = v13[0];
  if (v6)
  {
    v9 = v6;
    ObjectType = (void *)swift_getObjectType(v6, v7);
    v13[0] = v9;
    v10 = *a3;
    if (*a3)
    {
      sub_10004A184((uint64_t)v13, *a3);
      *a3 = v10 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v13[0] = a1;
    v13[1] = a2;
    v11 = *a3;
    if (*a3)
    {
      sub_10004A184((uint64_t)v13, *a3);
      *a3 = v11 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100033DE4(v13);
  return v8;
}

uint64_t sub_10005F98C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000187A4(&qword_1000B41C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

char *sub_10005F9D4(char **a1, void *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  char *result;
  uint64_t v10;
  char *v11;
  _QWORD v12[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v10 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v10)
        {
          v12[0] = a5;
          v12[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          memcpy(__dst, v12, HIBYTE(a6) & 0xF);
          result = 0;
          *((_BYTE *)__dst + v10) = 0;
          *a1 = (char *)__dst;
          return result;
        }
      }
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_10005FAD0(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    result = (char *)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    result = (char *)_StringObject.sharedUTF8.getter(a5, a6);
    if (!result)
    {
      __break(1u);
      return result;
    }
  }
  *a1 = result;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return (char *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
}

char *sub_10005FAD0(uint64_t a1, unint64_t a2)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (char *)sub_10005FB64(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10005FC60(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = sub_10005FC60((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 0;
  return v2;
}

_QWORD *sub_10005FB64(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  char v7;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_9;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10005FBFC(v4, 0);
      result = (_QWORD *)_StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v7 & 1) != 0)
        break;
      if (result == (_QWORD *)v4)
        return v5;
      __break(1u);
LABEL_9:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10005FBFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_1000187A4(&qword_1000B6370);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_10005FC60(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000187A4(&qword_1000B6370);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

unint64_t sub_10005FD4C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1000B6378;
  if (!qword_1000B6378)
  {
    v1 = sub_1000176F8(&qword_1000B6380);
    v2[0] = sub_1000176F8(&qword_1000B62B0);
    v2[1] = type metadata accessor for PlainListStyle(255);
    v2[2] = sub_10005F4A4();
    v2[3] = &protocol witness table for PlainListStyle;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    sub_10005F574();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B6378);
  }
  return result;
}

uint64_t sub_10005FE00(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t sub_10005FE0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  Swift::String v8;
  uint64_t KeyPath;
  unint64_t v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  Swift::String v20;
  void (*v21)(char *, uint64_t);
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  Swift::String v40;
  unint64_t v41;
  uint64_t v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v73 = a1;
  v72 = sub_1000187A4(&qword_1000B63A8);
  v1 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v3 = (char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000187A4(&qword_1000B63B0);
  __chkstk_darwin(v4);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100018888();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 1, &type metadata for CollectionOpenIntent, v7);
  v8._countAndFlagsBits = 0x20656D20776F6853;
  v8._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v8);
  KeyPath = swift_getKeyPath(&unk_10007BE00);
  v10 = sub_100018A0C();
  v11 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v10);
  swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v11, v4);
  swift_release(v11);
  v12._countAndFlagsBits = 0x7370697420;
  v12._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v6, &type metadata for CollectionOpenIntent, v7);
  v13 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CollectionOpenIntent, v7);
  v14 = *(void (**)(char *, uint64_t))(v1 + 8);
  v69 = v13;
  v70 = v14;
  v15 = v72;
  v14(v3, v72);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(17, 1, &type metadata for CollectionOpenIntent, v7);
  v16._countAndFlagsBits = 0xD000000000000011;
  v16._object = (void *)0x800000010008D690;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v16);
  v17 = swift_getKeyPath(&unk_10007BE00);
  v18 = v10;
  v71 = v10;
  v19 = _AssistantIntent.IntentProjection.subscript.getter(v17, v10);
  swift_release(v17);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v19, v4);
  swift_release(v19);
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v6, &type metadata for CollectionOpenIntent, v7);
  v68 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CollectionOpenIntent, v7);
  v21 = v70;
  v70(v3, v15);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(16, 1, &type metadata for CollectionOpenIntent, v7);
  v22._countAndFlagsBits = 0xD000000000000010;
  v22._object = (void *)0x800000010008D6B0;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v22);
  v23 = swift_getKeyPath(&unk_10007BE00);
  v24 = _AssistantIntent.IntentProjection.subscript.getter(v23, v18);
  swift_release(v23);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v24, v4);
  swift_release(v24);
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v25);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v6, &type metadata for CollectionOpenIntent, v7);
  v67 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CollectionOpenIntent, v7);
  v21(v3, v72);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(19, 1, &type metadata for CollectionOpenIntent, v7);
  v26._object = (void *)0x800000010008D6D0;
  v26._countAndFlagsBits = 0xD000000000000013;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v26);
  v27 = swift_getKeyPath(&unk_10007BE00);
  v28 = _AssistantIntent.IntentProjection.subscript.getter(v27, v71);
  swift_release(v27);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v28, v4);
  swift_release(v28);
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v29);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v6, &type metadata for CollectionOpenIntent, v7);
  v66 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CollectionOpenIntent, v7);
  v30 = v72;
  v31 = v70;
  v70(v3, v72);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(14, 1, &type metadata for CollectionOpenIntent, v7);
  v32._countAndFlagsBits = 0x7069742077656956;
  v32._object = (void *)0xEE0020726F662073;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v32);
  v33 = swift_getKeyPath(&unk_10007BE00);
  v34 = _AssistantIntent.IntentProjection.subscript.getter(v33, v71);
  swift_release(v33);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v34, v4);
  swift_release(v34);
  v35._countAndFlagsBits = 0;
  v35._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v35);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v6, &type metadata for CollectionOpenIntent, v7);
  v65 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CollectionOpenIntent, v7);
  v31(v3, v30);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(10, 1, &type metadata for CollectionOpenIntent, v7);
  v36._countAndFlagsBits = 0x2077656956;
  v36._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v36);
  v37 = swift_getKeyPath(&unk_10007BE00);
  v38 = v71;
  v39 = _AssistantIntent.IntentProjection.subscript.getter(v37, v71);
  swift_release(v37);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v39, v4);
  swift_release(v39);
  v40._countAndFlagsBits = 0x7370697420;
  v40._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v40);
  v41 = v7;
  _AssistantIntent.Phrase.init(stringInterpolation:)(v6, &type metadata for CollectionOpenIntent, v7);
  v64 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CollectionOpenIntent, v7);
  v42 = v72;
  v70(v3, v72);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(19, 1, &type metadata for CollectionOpenIntent, v41);
  v43._object = (void *)0x800000010008D6F0;
  v43._countAndFlagsBits = 0xD000000000000013;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v43);
  v44 = swift_getKeyPath(&unk_10007BE00);
  v45 = _AssistantIntent.IntentProjection.subscript.getter(v44, v38);
  swift_release(v44);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v45, v4);
  swift_release(v45);
  v46._countAndFlagsBits = 0;
  v46._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v46);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v6, &type metadata for CollectionOpenIntent, v41);
  v63 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CollectionOpenIntent, v41);
  v47 = v42;
  v48 = v42;
  v49 = v70;
  v70(v3, v47);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(14, 1, &type metadata for CollectionOpenIntent, v41);
  v50._countAndFlagsBits = 0x49206F6420776F48;
  v50._object = (void *)0xED00002065737520;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v50);
  v51 = swift_getKeyPath(&unk_10007BE00);
  v52 = _AssistantIntent.IntentProjection.subscript.getter(v51, v71);
  swift_release(v51);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v52, v4);
  swift_release(v52);
  v53._countAndFlagsBits = 63;
  v53._object = (void *)0xE100000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v53);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v6, &type metadata for CollectionOpenIntent, v41);
  v54 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CollectionOpenIntent, v41);
  v49(v3, v48);
  v55 = sub_1000187A4(&qword_1000B63B8);
  v56 = swift_allocObject(v55, 96, 7);
  *(_OWORD *)(v56 + 16) = xmmword_10007BD80;
  v57 = v68;
  *(_QWORD *)(v56 + 32) = v69;
  *(_QWORD *)(v56 + 40) = v57;
  v58 = v66;
  *(_QWORD *)(v56 + 48) = v67;
  *(_QWORD *)(v56 + 56) = v58;
  v59 = v64;
  *(_QWORD *)(v56 + 64) = v65;
  *(_QWORD *)(v56 + 72) = v59;
  *(_QWORD *)(v56 + 80) = v63;
  *(_QWORD *)(v56 + 88) = v54;
  v60 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v56);
  return v60;
}

uint64_t sub_1000605E4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  v1 = a1[1];
  v2 = a1[2];
  v3 = a1[3];
  v5[0] = *a1;
  v5[1] = v1;
  v5[2] = v2;
  v5[3] = v3;
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v3);
  return IntentParameter.wrappedValue.setter(v5);
}

uint64_t sub_100060630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v0 = type metadata accessor for _AssistantIntent.Value(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_10007BE00);
  v5 = sub_100018A0C();
  v6 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v5);
  swift_release(KeyPath);
  v7 = sub_100018888();
  _AssistantIntent.Value.init<A>(for:builder:)(v6, sub_100060740, 0, v7);
  v8 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v9 = sub_1000187A4(&qword_1000B6398);
  v10 = swift_allocObject(v9, 40, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1000791F0;
  *(_QWORD *)(v10 + 32) = v8;
  v11 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v10);
  return v11;
}

uint64_t sub_100060740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x1000000000000016, 0x800000010008D610);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x1000000000000019, 0x800000010008D630);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x1000000000000015, 0x800000010008D650);
  v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x736F746F6870, 0xE600000000000000);
  v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6172656D6163, 0xE600000000000000);
  v5 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x615720656C707041, 0xEB00000000686374);
  v6 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x646F50656D6F48, 0xE700000000000000);
  v7 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x73646F50726941, 0xE700000000000000);
  v8 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000018, 0x800000010008D670);
  v9 = sub_1000187A4(&qword_1000B63A0);
  v10 = swift_allocObject(v9, 104, 7);
  *(_OWORD *)(v10 + 16) = xmmword_10007BD90;
  *(_QWORD *)(v10 + 32) = v0;
  *(_QWORD *)(v10 + 40) = v1;
  *(_QWORD *)(v10 + 48) = v2;
  *(_QWORD *)(v10 + 56) = v3;
  *(_QWORD *)(v10 + 64) = v4;
  *(_QWORD *)(v10 + 72) = v5;
  *(_QWORD *)(v10 + 80) = v6;
  *(_QWORD *)(v10 + 88) = v7;
  *(_QWORD *)(v10 + 96) = v8;
  v11 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v10);
  return v11;
}

uint64_t sub_1000608D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v0 = type metadata accessor for _AssistantIntent(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000065B0();
  v4 = sub_100018888();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v11, sub_10005FE0C, 0, sub_100060630, 0, &type metadata for CollectionOpenIntent, v4);
  v5 = static _AssistantIntent.Builder.buildExpression(_:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v6 = sub_1000187A4(&qword_1000B6390);
  v7 = swift_allocObject(v6, 40, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1000791F0;
  *(_QWORD *)(v7 + 32) = v5;
  v8 = static _AssistantIntent.Builder.buildBlock(_:)();
  swift_bridgeObjectRelease(v7);
  return v8;
}

_QWORD *sub_1000609D0()
{
  return _swiftEmptyArrayStorage;
}

ValueMetadata *type metadata accessor for CollectionAssistantIntent()
{
  return &type metadata for CollectionAssistantIntent;
}

double sub_1000609EC@<D0>(uint64_t a1@<X8>)
{
  double result;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  IntentParameter.wrappedValue.getter(&v5);
  result = *(double *)&v5;
  v3 = v6;
  v4 = v7;
  *(_OWORD *)a1 = v5;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  return result;
}

uint64_t sub_100060A30@<X0>(void *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  char *v59;
  unint64_t v60;
  id v61;
  int *v62;
  _QWORD v63[2];
  __int128 v64;
  uint64_t v65;

  *a3 = swift_getKeyPath(&unk_10007BE30);
  v6 = sub_1000187A4(&qword_1000B6388);
  swift_storeEnumTagMultiPayload(a3, v6, 0);
  v7 = (int *)type metadata accessor for UserGuideSearchResultItemView(0);
  Text.Measurements.init()();
  v8 = v7[10];
  v63[0] = 2;
  State.init(wrappedValue:)(&v64, v63, &type metadata for Int);
  *(_OWORD *)((char *)a3 + v8) = v64;
  v9 = v7[11];
  v63[0] = 2;
  State.init(wrappedValue:)(&v64, v63, &type metadata for Int);
  *(_OWORD *)((char *)a3 + v9) = v64;
  v10 = (char *)a3 + v7[12];
  type metadata accessor for CGSize(0);
  v63[0] = 0;
  v63[1] = 0;
  State.init(wrappedValue:)(&v64, v63, v11);
  v12 = v65;
  *(_OWORD *)v10 = v64;
  *((_QWORD *)v10 + 2) = v12;
  v13 = (_QWORD *)((char *)a3 + v7[5]);
  v14 = type metadata accessor for SearchResultsViewModel(0);
  v15 = sub_1000041E8((unint64_t *)&qword_1000B41A0, type metadata accessor for SearchResultsViewModel, (uint64_t)&protocol conformance descriptor for TipNavigationViewModel);
  v61 = a1;
  *v13 = ObservedObject.init(wrappedValue:)(v61, v14, v15);
  v13[1] = v16;
  v62 = v7;
  *(_QWORD *)((char *)a3 + v7[6]) = a2;
  v17 = a2;
  v18 = dispatch thunk of UserGuideTopic.title.getter();
  if (v19)
    v20 = v18;
  else
    v20 = 0;
  v21 = 0xE000000000000000;
  if (v19)
    v21 = v19;
  *(_QWORD *)&v64 = v20;
  *((_QWORD *)&v64 + 1) = v21;
  v60 = sub_100014614();
  v22 = Text.init<A>(_:)(&v64, &type metadata for String, v60);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  if (qword_1000B3FD0 != -1)
    swift_once(&qword_1000B3FD0, sub_100061CA4);
  v29 = v26 & 1;
  v30 = Text.font(_:)(qword_1000B63C0, v22, v24, v29, v28);
  v32 = v31;
  v34 = v33;
  v36 = v35;
  sub_100014658(v22, v24, v29);
  v37 = swift_bridgeObjectRelease(v28);
  v38 = (char *)a3 + v62[8];
  *(_QWORD *)v38 = v30;
  *((_QWORD *)v38 + 1) = v32;
  v38[16] = v34 & 1;
  *((_QWORD *)v38 + 3) = v36;
  v39 = dispatch thunk of UserGuideTopic.body.getter(v37);
  if (v40)
    v41 = v39;
  else
    v41 = 0;
  v42 = 0xE000000000000000;
  if (v40)
    v42 = v40;
  *(_QWORD *)&v64 = v41;
  *((_QWORD *)&v64 + 1) = v42;
  v43 = Text.init<A>(_:)(&v64, &type metadata for String, v60);
  v45 = v44;
  v47 = v46;
  v49 = v48;
  if (qword_1000B3FD8 != -1)
    swift_once(&qword_1000B3FD8, sub_100061D70);
  v50 = v47 & 1;
  v51 = Text.font(_:)(qword_1000B63C8, v43, v45, v47 & 1, v49);
  v53 = v52;
  v55 = v54;
  v57 = v56;

  sub_100014658(v43, v45, v50);
  result = swift_bridgeObjectRelease(v49);
  v59 = (char *)a3 + v62[9];
  *(_QWORD *)v59 = v51;
  *((_QWORD *)v59 + 1) = v53;
  v59[16] = v55 & 1;
  *((_QWORD *)v59 + 3) = v57;
  return result;
}

uint64_t sub_100060D44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t OpaqueTypeConformance2;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  __int128 v65;
  _OWORD v66[12];
  _OWORD v67[11];
  uint64_t v68;
  _OWORD v69[12];
  char v70;
  _OWORD v71[14];

  v63 = a1;
  v59 = type metadata accessor for ScenePhase(0);
  v62 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v55 = (uint64_t)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UserGuideSearchResultItemView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000187A4(&qword_1000B64E8);
  v52 = *(_QWORD *)(v7 - 8);
  v53 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_1000187A4(&qword_1000B64C0);
  __chkstk_darwin(v51);
  v64 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000187A4(&qword_1000B64B8);
  v12 = *(_QWORD *)(v11 - 8);
  v57 = v11;
  v58 = v12;
  __chkstk_darwin(v11);
  v54 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000187A4(&qword_1000B52F0);
  v60 = *(_QWORD *)(v14 - 8);
  v61 = v14;
  v15 = __chkstk_darwin(v14);
  v56 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = static HorizontalAlignment.leading.getter(v15);
  sub_100061394(v1, (uint64_t)v67);
  *(_OWORD *)((char *)&v69[8] + 7) = v67[8];
  *(_OWORD *)((char *)&v69[9] + 7) = v67[9];
  *(_OWORD *)((char *)&v69[10] + 7) = v67[10];
  *(_QWORD *)((char *)&v69[11] + 7) = v68;
  *(_OWORD *)((char *)&v69[4] + 7) = v67[4];
  *(_OWORD *)((char *)&v69[5] + 7) = v67[5];
  *(_OWORD *)((char *)&v69[6] + 7) = v67[6];
  *(_OWORD *)((char *)&v69[7] + 7) = v67[7];
  *(_OWORD *)((char *)v69 + 7) = v67[0];
  *(_OWORD *)((char *)&v69[1] + 7) = v67[1];
  *(_OWORD *)((char *)&v69[2] + 7) = v67[2];
  *(_OWORD *)((char *)&v69[3] + 7) = v67[3];
  *(_OWORD *)((char *)&v66[8] + 1) = v69[8];
  *(_OWORD *)((char *)&v66[9] + 1) = v69[9];
  *(_OWORD *)((char *)&v66[10] + 1) = v69[10];
  v66[11] = *(_OWORD *)((char *)&v69[10] + 15);
  *(_OWORD *)((char *)&v66[4] + 1) = v69[4];
  *(_OWORD *)((char *)&v66[5] + 1) = v69[5];
  *(_OWORD *)((char *)&v66[6] + 1) = v69[6];
  *(_OWORD *)((char *)&v66[7] + 1) = v69[7];
  *(_OWORD *)((char *)v66 + 1) = v69[0];
  *(_OWORD *)((char *)&v66[1] + 1) = v69[1];
  *(_OWORD *)((char *)&v66[2] + 1) = v69[2];
  v70 = 0;
  *(_QWORD *)&v65 = v17;
  *((_QWORD *)&v65 + 1) = 0x4008000000000000;
  LOBYTE(v66[0]) = 0;
  *(_OWORD *)((char *)&v66[3] + 1) = v69[3];
  v18 = v1;
  sub_10003199C(v1, (uint64_t)v6);
  v19 = *(unsigned __int8 *)(v4 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = v20 + v5;
  v22 = v19 | 7;
  v49 = v20 + v5;
  v50 = v19 | 7;
  v23 = swift_allocObject(&unk_1000A4DD8, v20 + v5, v19 | 7);
  sub_100062DD8((uint64_t)v6, v23 + v20);
  v24 = sub_1000187A4(&qword_1000B64D0);
  v25 = sub_100062D88();
  View.readSize(onChange:)(sub_100062E1C, v23, v24, v25);
  swift_release(v23);
  v71[10] = v66[9];
  v71[11] = v66[10];
  v71[12] = v66[11];
  v71[6] = v66[5];
  v71[7] = v66[6];
  v71[8] = v66[7];
  v71[9] = v66[8];
  v71[2] = v66[1];
  v71[3] = v66[2];
  v71[4] = v66[3];
  v71[5] = v66[4];
  v71[0] = v65;
  v71[1] = v66[0];
  sub_100062E60((uint64_t)v71);
  sub_10003199C(v1, (uint64_t)v6);
  v26 = swift_allocObject(&unk_1000A4E00, v21, v22);
  v27 = (uint64_t)v6;
  sub_100062DD8((uint64_t)v6, v26 + v20);
  v28 = v52;
  v29 = v53;
  v30 = v64;
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v64, v9, v53);
  v31 = v51;
  v32 = &v30[*(int *)(v51 + 36)];
  *(_QWORD *)v32 = sub_100062F4C;
  *((_QWORD *)v32 + 1) = v26;
  *((_QWORD *)v32 + 2) = 0;
  *((_QWORD *)v32 + 3) = 0;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v29);
  v33 = v55;
  sub_10005F2E4(v55);
  sub_10003199C(v18, v27);
  v34 = swift_allocObject(&unk_1000A4E28, v49, v50);
  sub_100062DD8(v27, v34 + v20);
  v35 = sub_100062CF4();
  v36 = sub_1000041E8(&qword_1000B64E0, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t)&protocol conformance descriptor for ScenePhase);
  v37 = v54;
  v38 = v59;
  v39 = (uint64_t)v64;
  View.onChange<A>(of:initial:_:)(v33, 0, sub_100062F4C, v34, v31, v59, v35, v36);
  swift_release(v34);
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v33, v38);
  sub_100011DE0(v39, &qword_1000B64C0);
  sub_100062F84();
  v40 = static UIFont.defaultHyphenationFactor.getter();
  *(_QWORD *)&v65 = v31;
  *((_QWORD *)&v65 + 1) = v38;
  *(_QWORD *)&v66[0] = v35;
  *((_QWORD *)&v66[0] + 1) = v36;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v65, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v42 = v56;
  v43 = v57;
  View.hyphenationFactor(_:)(v57, OpaqueTypeConformance2, v40);
  v44 = (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v37, v43);
  v45 = static Alignment.leading.getter(v44);
  v47 = sub_100043554(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v63, 0.0, 1, INFINITY, 0, v45, v46);
  return (*(uint64_t (**)(char *, uint64_t, double))(v60 + 8))(v42, v61, v47);
}

uint64_t sub_10006129C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v0 = type metadata accessor for AccessibilityChildBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000187A4(&qword_1000B52F8);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100060D44((uint64_t)v6);
  static AccessibilityChildBehavior.combine.getter(v7);
  v8 = sub_100062BF4();
  View.accessibilityElement(children:)(v3, v4, v8);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return sub_100011DE0((uint64_t)v6, &qword_1000B52F8);
}

uint64_t sub_100061394@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t KeyPath;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  __int128 v97;
  _QWORD v98[2];

  v78 = type metadata accessor for Font.Leading(0);
  v77 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v76 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (int *)type metadata accessor for UserGuideSearchResultItemView(0);
  v6 = a1 + v5[8];
  v7 = *(_QWORD *)v6;
  v8 = *(_QWORD *)(v6 + 8);
  v9 = *(unsigned __int8 *)(v6 + 16);
  v10 = *(_QWORD *)(v6 + 24);
  v97 = *(_OWORD *)(a1 + v5[10]);
  v11 = v7;
  v92 = v8;
  v91 = v9;
  sub_100031A98(v7, v8, v9);
  v94 = v10;
  swift_bridgeObjectRetain(v10);
  v12 = sub_1000187A4(&qword_1000B64F8);
  State.wrappedValue.getter(v98, v12);
  v80 = v98[0];
  KeyPath = swift_getKeyPath(&unk_10007BF30);
  v13 = 0;
  v14 = *(_BYTE **)(a1 + v5[5] + 8);
  if ((v14[qword_1000B90B0] & 1) == 0)
    v13 = static Color.primary.getter(0);
  v89 = v13;
  v93 = swift_getKeyPath(&unk_10007BF60);
  v15 = a1 + v5[9];
  v16 = *(_QWORD *)v15;
  v17 = *(_QWORD *)(v15 + 8);
  v18 = *(unsigned __int8 *)(v15 + 16);
  v19 = *(_QWORD *)(v15 + 24);
  v97 = *(_OWORD *)(a1 + v5[11]);
  v88 = v19;
  swift_bridgeObjectRetain(v19);
  v87 = v16;
  v82 = v17;
  v81 = v18;
  sub_100031A98(v16, v17, v18);
  State.wrappedValue.getter(v98, v12);
  v79 = v98[0];
  v86 = swift_getKeyPath(&unk_10007BF30);
  v20 = (void *)objc_opt_self(UIColor);
  v85 = Color.init(_:)(objc_msgSend(v20, "secondaryLabelColor"));
  v84 = swift_getKeyPath(&unk_10007BF60);
  v21 = objc_msgSend(v14, "footerForTopic:", *(_QWORD *)(a1 + v5[6]));
  v83 = v11;
  if (v21)
  {
    v22 = v21;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v25 = v24;

    *(_QWORD *)&v97 = v23;
    *((_QWORD *)&v97 + 1) = v25;
    v26 = sub_100014614();
    v27 = Text.init<A>(_:)(&v97, &type metadata for String, v26);
    v29 = v28;
    v31 = v30;
    v33 = v32 & 1;
    v34 = Color.init(_:)(objc_msgSend(v20, "tertiaryLabelColor"));
    v35 = Text.foregroundColor(_:)(v34, v27, v29, v33, v31);
    v37 = v36;
    v39 = v38;
    v75 = v40;
    swift_release(v34);
    v41 = v39 & 1;
    sub_100014658(v27, v29, v33);
    v42 = swift_bridgeObjectRelease(v31);
    v43 = static Font.footnote.getter(v42);
    v44 = v77;
    v45 = v76;
    v46 = v78;
    (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v76, enum case for Font.Leading.tight(_:), v78);
    v47 = Font.leading(_:)(v45, v43);
    swift_release(v43);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
    v48 = v75;
    v78 = Text.font(_:)(v47, v35, v37, v39 & 1, v75);
    v77 = v49;
    LOBYTE(v43) = v50;
    v76 = v51;
    swift_release(v47);
    v52 = v43 & 1;
    v53 = v37;
    v11 = v83;
    sub_100014658(v35, v53, v41);
    swift_bridgeObjectRelease(v48);
  }
  else
  {
    v78 = 0;
    v77 = 0;
    v52 = 0;
    v76 = 0;
  }
  v54 = v91;
  LOBYTE(v97) = v91;
  LOBYTE(v98[0]) = 0;
  v55 = v81;
  v96 = v81;
  v95 = 0;
  v56 = v11;
  v57 = v92;
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v57;
  v58 = v57;
  *(_BYTE *)(a2 + 16) = v54;
  v59 = v54;
  v60 = v89;
  v61 = KeyPath;
  *(_QWORD *)(a2 + 24) = v94;
  *(_QWORD *)(a2 + 32) = v61;
  *(_QWORD *)(a2 + 40) = v80;
  *(_BYTE *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = v93;
  *(_QWORD *)(a2 + 64) = v60;
  *(_WORD *)(a2 + 72) = 256;
  v63 = v87;
  v62 = v88;
  v64 = v82;
  *(_QWORD *)(a2 + 80) = v87;
  *(_QWORD *)(a2 + 88) = v64;
  *(_BYTE *)(a2 + 96) = v55;
  v65 = v86;
  *(_QWORD *)(a2 + 104) = v62;
  *(_QWORD *)(a2 + 112) = v65;
  *(_QWORD *)(a2 + 120) = v79;
  *(_BYTE *)(a2 + 128) = 0;
  v66 = v85;
  *(_QWORD *)(a2 + 136) = v84;
  *(_QWORD *)(a2 + 144) = v66;
  v67 = v78;
  v68 = v77;
  *(_QWORD *)(a2 + 152) = v78;
  *(_QWORD *)(a2 + 160) = v68;
  v69 = (uint64_t)v76;
  *(_QWORD *)(a2 + 168) = v52;
  *(_QWORD *)(a2 + 176) = v69;
  sub_100031A98(v56, v58, v59);
  swift_retain(v60);
  swift_bridgeObjectRetain(v94);
  swift_retain(v61);
  swift_retain(v93);
  sub_100031A98(v63, v64, v55);
  v70 = v88;
  swift_bridgeObjectRetain(v88);
  v71 = v86;
  swift_retain(v86);
  v72 = v84;
  swift_retain(v84);
  v73 = v85;
  swift_retain(v85);
  sub_1000147C4(v67, v68, v52, v69);
  sub_1000147F4(v67, v68, v52, v69);
  sub_100014658(v87, v64, v55);
  swift_release(v73);
  swift_release(v72);
  swift_release(v71);
  swift_bridgeObjectRelease(v70);
  sub_100014658(v83, v92, v91);
  swift_release(v89);
  swift_release(v93);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v94);
}

uint64_t sub_1000618E8(uint64_t a1, double a2, double a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = (uint64_t *)(a1 + *(int *)(type metadata accessor for UserGuideSearchResultItemView(0) + 48));
  v7 = v5[1];
  v8 = v5[2];
  v13 = *v5;
  v6 = v13;
  v14 = v7;
  v15 = v8;
  v11 = a2;
  v12 = a3;
  v9 = sub_1000187A4(&qword_1000B5940);
  State.wrappedValue.setter(&v11, v9);
  v13 = v6;
  v14 = v7;
  v15 = v8;
  State.wrappedValue.getter(&v11, v9);
  return sub_100061994(v11, v12);
}

uint64_t sub_100061994(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  double v16;
  double v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;

  v5 = sub_1000187A4(&qword_1000B64F0);
  result = __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 != 0.0 || a2 != 0.0)
  {
    v9 = type metadata accessor for UserGuideSearchResultItemView(0);
    if (qword_1000B3FE0 != -1)
      swift_once(&qword_1000B3FE0, sub_100061D8C);
    v10 = qword_1000B63D0;
    v11 = *(_QWORD *)algn_1000B63D8;
    v12 = byte_1000B63E0;
    v13 = qword_1000B63E8;
    v14 = type metadata accessor for Text.WritingMode(0);
    v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
    v15(v8, 1, 1, v14);
    Text.Measurements.size(of:in:writingMode:)(v10, v11, v12, v13, v8, INFINITY, INFINITY);
    v17 = v16;
    sub_100011DE0((uint64_t)v8, &qword_1000B64F0);
    v31 = v9;
    v18 = (uint64_t *)(v2 + *(int *)(v9 + 32));
    v19 = *v18;
    v20 = v18[1];
    v21 = *((unsigned __int8 *)v18 + 16);
    v22 = v18[3];
    v15(v8, 1, 1, v14);
    Text.Measurements.size(of:in:writingMode:)(v19, v20, v21, v22, v8, a1, 1.79769313e308);
    v24 = v23;
    result = sub_100011DE0((uint64_t)v8, &qword_1000B64F0);
    v25 = round(v24 / v17);
    if ((~*(_QWORD *)&v25 & 0x7FF0000000000000) != 0)
    {
      if (v25 > -9.22337204e18)
      {
        if (v25 < 9.22337204e18)
        {
          v26 = (uint64_t)v25;
          if ((uint64_t)v25 >= 2)
          {
            v27 = v31;
            v33 = *(_OWORD *)(v2 + *(int *)(v31 + 44));
            v32 = 1;
            v29 = sub_1000187A4(&qword_1000B64F8);
            State.wrappedValue.setter(&v32, v29);
            v26 = 2;
            goto LABEL_12;
          }
          v27 = v31;
          if (!__OFSUB__(3, v26))
          {
            v33 = *(_OWORD *)(v2 + *(int *)(v31 + 44));
            v32 = 3 - v26;
            v28 = sub_1000187A4(&qword_1000B64F8);
            State.wrappedValue.setter(&v32, v28);
LABEL_12:
            v33 = *(_OWORD *)(v2 + *(int *)(v27 + 40));
            v32 = v26;
            v30 = sub_1000187A4(&qword_1000B64F8);
            return State.wrappedValue.setter(&v32, v30);
          }
LABEL_17:
          __break(1u);
          return result;
        }
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_100061C3C()
{
  uint64_t v0;
  double v2[2];

  type metadata accessor for UserGuideSearchResultItemView(0);
  v0 = sub_1000187A4(&qword_1000B5940);
  State.wrappedValue.getter(v2, v0);
  return sub_100061994(v2[0], v2[1]);
}

uint64_t sub_100061CA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v0 = type metadata accessor for Font.Leading(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = static Font.body.getter(v2);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for Font.Leading.tight(_:), v0);
  v6 = Font.leading(_:)(v4, v5);
  swift_release(v5);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  v7 = Font.bold()(v6);
  result = swift_release(v6);
  qword_1000B63C0 = v7;
  return result;
}

uint64_t sub_100061D70()
{
  uint64_t result;

  result = static Font.footnote.getter();
  qword_1000B63C8 = result;
  return result;
}

uint64_t sub_100061D8C()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  if (qword_1000B3FD0 != -1)
    swift_once(&qword_1000B3FD0, sub_100061CA4);
  result = Text.font(_:)(qword_1000B63C0, 32, 0xE100000000000000, 0, _swiftEmptyArrayStorage);
  qword_1000B63D0 = result;
  *(_QWORD *)algn_1000B63D8 = v1;
  byte_1000B63E0 = v2 & 1;
  qword_1000B63E8 = v3;
  return result;
}

uint64_t sub_100061E04()
{
  return EnvironmentValues.scenePhase.getter();
}

uint64_t sub_100061E24()
{
  return EnvironmentValues.scenePhase.getter();
}

uint64_t sub_100061E44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ScenePhase(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.scenePhase.setter(v4);
}

uint64_t type metadata accessor for UserGuideSearchResultItemView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B6450;
  if (!qword_1000B6450)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UserGuideSearchResultItemView);
  return result;
}

_QWORD *sub_100061F00(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  id v25;
  id v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_1000187A4(&qword_1000B6388);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ScenePhase(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v4, a2, v8);
      v9 = v4;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *v4 = *a2;
      swift_retain(v13);
      v9 = v4;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = a3[6];
    v16 = (_QWORD *)((char *)v4 + v14);
    v17 = (_QWORD *)((char *)a2 + v14);
    v18 = (void *)v17[1];
    v19 = *(void **)((char *)a2 + v15);
    *v16 = *v17;
    v16[1] = v18;
    *(_QWORD *)((char *)v4 + v15) = v19;
    v20 = a3[7];
    v21 = (char *)v4 + v20;
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for Text.Measurements(0);
    v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
    v25 = v18;
    v26 = v19;
    v24(v21, v22, v23);
    v27 = a3[8];
    v28 = (char *)v4 + v27;
    v29 = (char *)a2 + v27;
    v30 = *(_QWORD *)((char *)a2 + v27);
    v31 = *(_QWORD *)((char *)a2 + v27 + 8);
    LOBYTE(v23) = *((_BYTE *)a2 + v27 + 16);
    sub_100031A98(v30, v31, v23);
    *(_QWORD *)v28 = v30;
    *((_QWORD *)v28 + 1) = v31;
    v28[16] = v23;
    v32 = *((_QWORD *)v29 + 3);
    *((_QWORD *)v28 + 3) = v32;
    v33 = a3[9];
    v34 = (char *)v4 + v33;
    v35 = (char *)a2 + v33;
    v36 = *(_QWORD *)((char *)a2 + v33);
    v37 = *(_QWORD *)((char *)a2 + v33 + 8);
    LOBYTE(v23) = *((_BYTE *)a2 + v33 + 16);
    swift_bridgeObjectRetain(v32);
    sub_100031A98(v36, v37, v23);
    *(_QWORD *)v34 = v36;
    *((_QWORD *)v34 + 1) = v37;
    v34[16] = v23;
    v38 = *((_QWORD *)v35 + 3);
    *((_QWORD *)v34 + 3) = v38;
    v39 = a3[10];
    v40 = a3[11];
    v41 = (_QWORD *)((char *)v4 + v39);
    v42 = (_QWORD *)((char *)a2 + v39);
    v43 = v42[1];
    *v41 = *v42;
    v41[1] = v43;
    v44 = (_QWORD *)((char *)v4 + v40);
    v45 = (_QWORD *)((char *)a2 + v40);
    v46 = v45[1];
    *v44 = *v45;
    v44[1] = v46;
    v47 = a3[12];
    v48 = (char *)v4 + v47;
    v49 = (char *)a2 + v47;
    *(_OWORD *)v48 = *(_OWORD *)v49;
    v12 = *((_QWORD *)v49 + 2);
    *((_QWORD *)v48 + 2) = v12;
    swift_bridgeObjectRetain(v38);
    swift_retain(v43);
    swift_retain(v46);
  }
  swift_retain(v12);
  return v4;
}

uint64_t sub_1000620FC(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;

  v4 = sub_1000187A4(&qword_1000B6388);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ScenePhase(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }

  v6 = (char *)a1 + a2[7];
  v7 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = (char *)a1 + a2[8];
  sub_100014658(*(_QWORD *)v8, *((_QWORD *)v8 + 1), v8[16]);
  swift_bridgeObjectRelease(*((_QWORD *)v8 + 3));
  v9 = (char *)a1 + a2[9];
  sub_100014658(*(_QWORD *)v9, *((_QWORD *)v9 + 1), v9[16]);
  swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
  swift_release(*(_QWORD *)((char *)a1 + a2[10] + 8));
  swift_release(*(_QWORD *)((char *)a1 + a2[11] + 8));
  return swift_release(*(_QWORD *)((char *)a1 + a2[12] + 16));
}

_QWORD *sub_100062210(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  id v23;
  id v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;

  v6 = sub_1000187A4(&qword_1000B6388);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ScenePhase(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a3[6];
  v14 = (_QWORD *)((char *)a1 + v12);
  v15 = (_QWORD *)((char *)a2 + v12);
  v16 = (void *)v15[1];
  v17 = *(void **)((char *)a2 + v13);
  *v14 = *v15;
  v14[1] = v16;
  *(_QWORD *)((char *)a1 + v13) = v17;
  v18 = a3[7];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for Text.Measurements(0);
  v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
  v23 = v16;
  v24 = v17;
  v22(v19, v20, v21);
  v25 = a3[8];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = *(_QWORD *)((char *)a2 + v25);
  v29 = *(_QWORD *)((char *)a2 + v25 + 8);
  LOBYTE(v21) = *((_BYTE *)a2 + v25 + 16);
  sub_100031A98(v28, v29, v21);
  *(_QWORD *)v26 = v28;
  *((_QWORD *)v26 + 1) = v29;
  v26[16] = v21;
  v30 = *((_QWORD *)v27 + 3);
  *((_QWORD *)v26 + 3) = v30;
  v31 = a3[9];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)((char *)a2 + v31);
  v35 = *(_QWORD *)((char *)a2 + v31 + 8);
  LOBYTE(v21) = *((_BYTE *)a2 + v31 + 16);
  swift_bridgeObjectRetain(v30);
  sub_100031A98(v34, v35, v21);
  *(_QWORD *)v32 = v34;
  *((_QWORD *)v32 + 1) = v35;
  v32[16] = v21;
  v36 = *((_QWORD *)v33 + 3);
  *((_QWORD *)v32 + 3) = v36;
  v37 = a3[10];
  v38 = a3[11];
  v39 = (_QWORD *)((char *)a1 + v37);
  v40 = (_QWORD *)((char *)a2 + v37);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  v42 = (_QWORD *)((char *)a1 + v38);
  v43 = (_QWORD *)((char *)a2 + v38);
  v44 = v43[1];
  *v42 = *v43;
  v42[1] = v44;
  v45 = a3[12];
  v46 = (char *)a1 + v45;
  v47 = (char *)a2 + v45;
  *(_OWORD *)v46 = *(_OWORD *)v47;
  v48 = *((_QWORD *)v47 + 2);
  *((_QWORD *)v46 + 2) = v48;
  swift_bridgeObjectRetain(v36);
  swift_retain(v41);
  swift_retain(v44);
  swift_retain(v48);
  return a1;
}

_QWORD *sub_1000623E4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B6388);
    v6 = sub_1000187A4(&qword_1000B6388);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ScenePhase(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  *v13 = *v14;
  v15 = (void *)v14[1];
  v16 = (void *)v13[1];
  v13[1] = v15;
  v17 = v15;

  v18 = a3[6];
  v19 = *(void **)((char *)a2 + v18);
  v20 = *(void **)((char *)a1 + v18);
  *(_QWORD *)((char *)a1 + v18) = v19;
  v21 = v19;

  v22 = a3[7];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v23, v24, v25);
  v26 = a3[8];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = *(_QWORD *)((char *)a2 + v26);
  v30 = *(_QWORD *)((char *)a2 + v26 + 8);
  v31 = *((_BYTE *)a2 + v26 + 16);
  sub_100031A98(v29, v30, v31);
  v32 = *(_QWORD *)v27;
  v33 = *((_QWORD *)v27 + 1);
  v34 = v27[16];
  *(_QWORD *)v27 = v29;
  *((_QWORD *)v27 + 1) = v30;
  v27[16] = v31;
  sub_100014658(v32, v33, v34);
  v35 = *((_QWORD *)v28 + 3);
  v36 = *((_QWORD *)v27 + 3);
  *((_QWORD *)v27 + 3) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  v37 = a3[9];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = *(_QWORD *)((char *)a2 + v37);
  v41 = *(_QWORD *)((char *)a2 + v37 + 8);
  v42 = *((_BYTE *)a2 + v37 + 16);
  sub_100031A98(v40, v41, v42);
  v43 = *(_QWORD *)v38;
  v44 = *((_QWORD *)v38 + 1);
  v45 = v38[16];
  *(_QWORD *)v38 = v40;
  *((_QWORD *)v38 + 1) = v41;
  v38[16] = v42;
  sub_100014658(v43, v44, v45);
  v46 = *((_QWORD *)v39 + 3);
  v47 = *((_QWORD *)v38 + 3);
  *((_QWORD *)v38 + 3) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  v48 = a3[10];
  v49 = (_QWORD *)((char *)a1 + v48);
  v50 = (_QWORD *)((char *)a2 + v48);
  *v49 = *v50;
  v51 = v49[1];
  v52 = v50[1];
  v49[1] = v52;
  swift_retain(v52);
  swift_release(v51);
  v53 = a3[11];
  v54 = (_QWORD *)((char *)a1 + v53);
  v55 = (_QWORD *)((char *)a2 + v53);
  *v54 = *v55;
  v56 = v54[1];
  v57 = v55[1];
  v54[1] = v57;
  swift_retain(v57);
  swift_release(v56);
  v58 = a3[12];
  v59 = (_QWORD *)((char *)a1 + v58);
  v60 = (_QWORD *)((char *)a2 + v58);
  *v59 = *v60;
  v59[1] = v60[1];
  v61 = v59[2];
  v62 = v60[2];
  v59[2] = v62;
  swift_retain(v62);
  swift_release(v61);
  return a1;
}

char *sub_100062644(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v6 = sub_1000187A4(&qword_1000B6388);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ScenePhase(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  v9 = a3[7];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = a3[8];
  v14 = a3[9];
  v15 = *(_OWORD *)&a2[v13];
  v16 = *(_OWORD *)&a2[v13 + 16];
  v17 = &a1[v13];
  *(_OWORD *)v17 = v15;
  *((_OWORD *)v17 + 1) = v16;
  v18 = &a1[v14];
  v19 = &a2[v14];
  v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  v21 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(_OWORD *)&a1[v21] = *(_OWORD *)&a2[v21];
  v22 = a3[12];
  v23 = &a1[v22];
  v24 = &a2[v22];
  *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  return a1;
}

char *sub_10006277C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B6388);
    v6 = sub_1000187A4(&qword_1000B6388);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ScenePhase(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v12 = *(_QWORD *)v10;
  v11 = *((_QWORD *)v10 + 1);
  v13 = (void *)*((_QWORD *)v9 + 1);
  *(_QWORD *)v9 = v12;
  *((_QWORD *)v9 + 1) = v11;

  v14 = a3[6];
  v15 = *(void **)&a1[v14];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];

  v16 = a3[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  v20 = a3[8];
  v21 = &a1[v20];
  v22 = &a2[v20];
  LOBYTE(v20) = a2[v20 + 16];
  v23 = *(_QWORD *)v21;
  v24 = *((_QWORD *)v21 + 1);
  v25 = v21[16];
  *(_OWORD *)v21 = *(_OWORD *)v22;
  v21[16] = v20;
  sub_100014658(v23, v24, v25);
  v26 = *((_QWORD *)v21 + 3);
  *((_QWORD *)v21 + 3) = *((_QWORD *)v22 + 3);
  swift_bridgeObjectRelease(v26);
  v27 = a3[9];
  v28 = &a1[v27];
  v29 = &a2[v27];
  LOBYTE(v27) = a2[v27 + 16];
  v30 = *(_QWORD *)v28;
  v31 = *((_QWORD *)v28 + 1);
  v32 = v28[16];
  *(_OWORD *)v28 = *(_OWORD *)v29;
  v28[16] = v27;
  sub_100014658(v30, v31, v32);
  v33 = *((_QWORD *)v28 + 3);
  *((_QWORD *)v28 + 3) = *((_QWORD *)v29 + 3);
  swift_bridgeObjectRelease(v33);
  v34 = a3[10];
  v35 = &a1[v34];
  v36 = &a2[v34];
  v37 = *((_QWORD *)v35 + 1);
  v39 = *(_QWORD *)v36;
  v38 = *((_QWORD *)v36 + 1);
  *(_QWORD *)v35 = v39;
  *((_QWORD *)v35 + 1) = v38;
  swift_release(v37);
  v40 = a3[11];
  v41 = &a1[v40];
  v42 = &a2[v40];
  v43 = *((_QWORD *)v41 + 1);
  v45 = *(_QWORD *)v42;
  v44 = *((_QWORD *)v42 + 1);
  *(_QWORD *)v41 = v45;
  *((_QWORD *)v41 + 1) = v44;
  swift_release(v43);
  v46 = a3[12];
  v47 = &a1[v46];
  v48 = &a2[v46];
  *(_OWORD *)v47 = *(_OWORD *)v48;
  v49 = *((_QWORD *)v47 + 2);
  *((_QWORD *)v47 + 2) = *((_QWORD *)v48 + 2);
  swift_release(v49);
  return a1;
}

uint64_t sub_100062960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006296C);
}

uint64_t sub_10006296C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_1000187A4(&qword_1000B63F0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for Text.Measurements(0);
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_100062A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100062A28);
}

uint64_t sub_100062A28(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_1000187A4(&qword_1000B63F0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for Text.Measurements(0);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100062AD4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[9];

  sub_100062B90(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_10007BE80;
    v6[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4 = type metadata accessor for Text.Measurements(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = &unk_10007BE98;
      v6[5] = &unk_10007BE98;
      v6[6] = &unk_10007BEB0;
      v6[7] = &unk_10007BEB0;
      v6[8] = &unk_10007BEC8;
      swift_initStructMetadata(a1, 256, 9, v6, a1 + 16);
    }
  }
}

void sub_100062B90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000B6460)
  {
    v2 = type metadata accessor for ScenePhase(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000B6460);
  }
}

uint64_t sub_100062BE4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008F2CC, 1);
}

unint64_t sub_100062BF4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  result = qword_1000B64B0;
  if (!qword_1000B64B0)
  {
    v1 = sub_1000176F8(&qword_1000B52F8);
    v2 = sub_1000176F8(&qword_1000B64B8);
    v4 = sub_1000176F8(&qword_1000B64C0);
    v5 = type metadata accessor for ScenePhase(255);
    v6 = sub_100062CF4();
    v7 = sub_1000041E8(&qword_1000B64E0, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t)&protocol conformance descriptor for ScenePhase);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.hyphenationFactor(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B64B0);
  }
  return result;
}

unint64_t sub_100062CF4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000B64C8;
  if (!qword_1000B64C8)
  {
    v1 = sub_1000176F8(&qword_1000B64C0);
    v2[0] = sub_1000176F8(&qword_1000B64D0);
    v2[1] = sub_100062D88();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.readSize(onChange:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B64C8);
  }
  return result;
}

unint64_t sub_100062D88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B64D8;
  if (!qword_1000B64D8)
  {
    v1 = sub_1000176F8(&qword_1000B64D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B64D8);
  }
  return result;
}

uint64_t sub_100062DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UserGuideSearchResultItemView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100062E1C(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UserGuideSearchResultItemView(0) - 8) + 80);
  return sub_1000618E8(v2 + ((v5 + 16) & ~v5), a1, a2);
}

uint64_t sub_100062E60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_BYTE *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 136);
  v10 = *(_QWORD *)(a1 + 160);
  v12 = *(_QWORD *)(a1 + 128);
  v13 = *(_QWORD *)(a1 + 168);
  v16 = *(_QWORD *)(a1 + 184);
  v17 = *(_QWORD *)(a1 + 176);
  v14 = *(_QWORD *)(a1 + 200);
  v15 = *(_QWORD *)(a1 + 192);
  sub_100014658(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v5);
  sub_100014658(v6, v7, v8);
  swift_release(v10);
  swift_release(v9);
  swift_bridgeObjectRelease(v12);
  swift_release(v13);
  sub_1000147F4(v17, v16, v15, v14);
  return a1;
}

uint64_t sub_100062F54()
{
  type metadata accessor for UserGuideSearchResultItemView(0);
  return sub_100061C3C();
}

unint64_t sub_100062F84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B4958;
  if (!qword_1000B4958)
  {
    v1 = objc_opt_self(UIFont);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000B4958);
  }
  return result;
}

uint64_t sub_100062FD0()
{
  _QWORD v1[2];

  v1[0] = sub_1000176F8(&qword_1000B52F8);
  v1[1] = sub_100062BF4();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
}

id sub_100063094()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSString v11;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC4Tips28TPSSharingActivityItemSource_assetsConfiguration);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend(v2, "cacheIdentifierForType:", 0);
  if (!v3)
  {

    goto LABEL_6;
  }
  v4 = v3;
  v5 = objc_msgSend((id)objc_opt_self(TPSImageAssetController), "imageFromMemoryCacheForIdentifier:", v3);

  if (!v5)
  {
LABEL_6:
    v6 = objc_msgSend(v2, "identifierForType:", 0);
    if (v6)
    {
      v7 = v6;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      v9 = v8;

      v10 = (void *)objc_opt_self(TPSImageAssetController);
      v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v9);
      v5 = objc_msgSend(v10, "getImageForIdentifier:", v11);

      return v5;
    }
    return 0;
  }
  return v5;
}

id sub_10006325C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TPSSharingActivityItemSource();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TPSSharingActivityItemSource()
{
  return objc_opt_self(_TtC4Tips28TPSSharingActivityItemSource);
}

id sub_1000632E4(void *a1)
{
  char *v1;
  char *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  objc_super v17;

  *(_QWORD *)&v1[OBJC_IVAR____TtC4Tips28TPSSharingActivityItemSource_tip] = a1;
  v3 = v1;
  v4 = a1;
  v5 = objc_msgSend(v4, "assetFileInfoManager");
  if (v5)
  {
    v6 = v5;
    type metadata accessor for TPSUIAppController(0);
    v7 = (void *)static TPSUIAppController.shared.getter();
    v8 = objc_msgSend(v4, "fullContentAssets");
    v9 = objc_msgSend(v4, "language");
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

    v13 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
    v14 = objc_msgSend(v13, "userInterfaceStyle");

    v15 = dispatch thunk of TPSUIAppController.assetConfiguration(assets:language:sizeClass:style:assetFileInfoManager:)(v8, v10, v12, 2, v14, v6);
    swift_bridgeObjectRelease(v12);

  }
  else
  {
    v15 = 0;
  }
  *(_QWORD *)&v3[OBJC_IVAR____TtC4Tips28TPSSharingActivityItemSource_assetsConfiguration] = v15;

  v17.receiver = v3;
  v17.super_class = (Class)type metadata accessor for TPSSharingActivityItemSource();
  return objc_msgSendSuper2(&v17, "init");
}

id sub_100063450()
{
  id v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  id v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = objc_msgSend(v0, "infoDictionary");

  if (!v1)
  {
    v19 = 0u;
    v20 = 0u;
    goto LABEL_11;
  }
  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (!*(_QWORD *)(v2 + 16) || (v3 = sub_10001023C(0x656C646E75424643, 0xED0000736E6F6349), (v4 & 1) == 0))
  {
    v19 = 0u;
    v20 = 0u;
    swift_bridgeObjectRelease(v2);
    goto LABEL_11;
  }
  sub_10004A184(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)&v19);
  swift_bridgeObjectRelease(v2);
  if (!*((_QWORD *)&v20 + 1))
    goto LABEL_11;
  v5 = sub_1000187A4(&qword_1000B48D8);
  if ((swift_dynamicCast(&v18, &v19, (char *)&type metadata for Any + 8, v5, 6) & 1) == 0)
    return 0;
  v6 = v18;
  if (*(_QWORD *)(v18 + 16) && (v7 = sub_10001023C(0xD000000000000013, 0x800000010008D7C0), (v8 & 1) != 0))
  {
    sub_10004A184(*(_QWORD *)(v6 + 56) + 32 * v7, (uint64_t)&v19);
  }
  else
  {
    v19 = 0u;
    v20 = 0u;
  }
  swift_bridgeObjectRelease(v6);
  if (!*((_QWORD *)&v20 + 1))
    goto LABEL_11;
  if ((swift_dynamicCast(&v18, &v19, (char *)&type metadata for Any + 8, v5, 6) & 1) == 0)
    return 0;
  v11 = v18;
  if (*(_QWORD *)(v18 + 16) && (v12 = sub_10001023C(0xD000000000000011, 0x800000010008D7E0), (v13 & 1) != 0))
  {
    sub_10004A184(*(_QWORD *)(v11 + 56) + 32 * v12, (uint64_t)&v19);
  }
  else
  {
    v19 = 0u;
    v20 = 0u;
  }
  swift_bridgeObjectRelease(v11);
  if (!*((_QWORD *)&v20 + 1))
  {
LABEL_11:
    sub_100033D80((uint64_t)&v19);
    return 0;
  }
  v14 = sub_1000187A4((uint64_t *)&unk_1000B6540);
  if ((swift_dynamicCast(&v18, &v19, (char *)&type metadata for Any + 8, v14, 6) & 1) != 0)
  {
    v15 = v18;
    if (*(_QWORD *)(v18 + 16))
    {
      v16 = *(_QWORD *)(v18 + 40);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v15);
      v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v16);
      v9 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v17);

      return v9;
    }
    swift_bridgeObjectRelease(v18);
  }
  return 0;
}

id sub_1000636FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  NSURL *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSURL *v24;
  void *v25;
  void *v26;
  id v28;
  void *v29;
  uint64_t v30;
  id v31;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000187A4(&qword_1000B4698);
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100063450();
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(objc_allocWithZone((Class)LPLinkMetadata), "init");
    v31 = objc_msgSend(objc_allocWithZone((Class)NSItemProvider), "initWithObject:", v9);
    objc_msgSend(v10, "setIconProvider:");
    v11 = sub_100063094();
    if (v11)
    {
      v12 = v11;
      v13 = objc_msgSend(objc_allocWithZone((Class)NSItemProvider), "initWithObject:", v11);
      objc_msgSend(v10, "setImageProvider:", v13);

    }
    v14 = *(void **)(v0 + OBJC_IVAR____TtC4Tips28TPSSharingActivityItemSource_tip);
    v15 = objc_msgSend(v14, "title");
    objc_msgSend(v10, "setTitle:", v15);

    sub_100042454();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
    {
      v17 = 0;
    }
    else
    {
      URL._bridgeToObjectiveC()(v16);
      v17 = v18;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
    }
    objc_msgSend(v10, "setURL:", v17);

    v19 = objc_msgSend(v14, "bodyText");
    if (v19)
    {
      v20 = v19;
    }
    else
    {
      v28 = objc_msgSend(v14, "bodyContent");
      if (!v28)
        goto LABEL_11;
      v29 = v28;
      v20 = objc_msgSend((id)objc_opt_self(TPSConstellationContentUtilities), "altTextRepresentationForContent:", v28);

      if (!v20)
        goto LABEL_11;
    }
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    URL.init(fileURLWithPath:)(v21, v23);
    swift_bridgeObjectRelease(v23);
    URL._bridgeToObjectiveC()(v24);
    v26 = v25;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    objc_msgSend(v10, "setOriginalURL:", v26);

LABEL_11:
    return v10;
  }
  return 0;
}

uint64_t *sub_1000639D8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_1000187A4(&qword_1000B41C0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = a3[6];
    v16 = (uint64_t *)((char *)a1 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v19 = *v17;
    v18 = (void *)v17[1];
    *v16 = v19;
    v16[1] = v18;
    v20 = *(void **)((char *)a2 + v15);
    *(uint64_t *)((char *)a1 + v15) = (uint64_t)v20;
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v21 = v18;
    v22 = v20;
  }
  return a1;
}

void sub_100063AD4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }

}

uint64_t *sub_100063B54(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;

  v6 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a3[6];
  v14 = (uint64_t *)((char *)a1 + v12);
  v15 = (uint64_t *)((char *)a2 + v12);
  v17 = *v15;
  v16 = (void *)v15[1];
  *v14 = v17;
  v14[1] = v16;
  v18 = *(void **)((char *)a2 + v13);
  *(uint64_t *)((char *)a1 + v13) = (uint64_t)v18;
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  v19 = v16;
  v20 = v18;
  return a1;
}

uint64_t *sub_100063C24(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B41C0);
    v6 = sub_1000187A4(&qword_1000B41C0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  *v13 = *v14;
  v15 = (void *)v14[1];
  v16 = (void *)v13[1];
  v13[1] = v15;
  v17 = v15;

  v18 = a3[6];
  v19 = *(void **)((char *)a2 + v18);
  v20 = *(void **)((char *)a1 + v18);
  *(uint64_t *)((char *)a1 + v18) = (uint64_t)v19;
  v21 = v19;

  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  return a1;
}

char *sub_100063D28(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

char *sub_100063DE4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B41C0);
    v6 = sub_1000187A4(&qword_1000B41C0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v12 = *(_QWORD *)v10;
  v11 = *((_QWORD *)v10 + 1);
  v13 = (void *)*((_QWORD *)v9 + 1);
  *(_QWORD *)v9 = v12;
  *((_QWORD *)v9 + 1) = v11;

  v14 = a3[6];
  v15 = *(void **)&a1[v14];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];

  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

uint64_t sub_100063ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100063EE0);
}

uint64_t sub_100063EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1000187A4(&qword_1000B45E0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100063F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100063F70);
}

uint64_t sub_100063F70(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1000187A4(&qword_1000B45E0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for TipListItemView(uint64_t a1)
{
  return sub_1000181CC(a1, qword_1000B65D0, (uint64_t)&nominal type descriptor for TipListItemView);
}

void sub_100064004(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  sub_100003770(319, (unint64_t *)&qword_1000B4650, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_10007BFC8;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

uint64_t sub_1000640A0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008F3E8, 1);
}

uint64_t sub_1000640B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];

  v2 = v1;
  v24 = a1;
  v25 = type metadata accessor for AccessibilityTraits(0);
  v23 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AccessibilityChildBehavior(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000187A4(&qword_1000B6618);
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000187A4(&qword_1000B6620);
  v22 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v11 = static VerticalAlignment.center.getter(v13);
  *((_QWORD *)v11 + 1) = 0x4028000000000000;
  v11[16] = 0;
  v16 = sub_1000187A4(&qword_1000B6628);
  v17 = sub_100064310(v2, (uint64_t)&v11[*(int *)(v16 + 44)]);
  static AccessibilityChildBehavior.combine.getter(v17);
  v18 = sub_1000086E8(&qword_1000B6630, &qword_1000B6618, (uint64_t)&protocol conformance descriptor for HStack<A>);
  View.accessibilityElement(children:)(v8, v9, v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v19 = sub_100011DE0((uint64_t)v11, &qword_1000B6618);
  static AccessibilityTraits.isButton.getter(v19);
  v26[0] = v9;
  v26[1] = v18;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v26, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityAddTraits(_:)(v4, v12, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v4, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v15, v12);
}

uint64_t sub_1000642CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v3 = sub_1000187A4(&qword_1000B6610);
  return sub_1000640B0(a2 + *(int *)(v3 + 44));
}

uint64_t sub_100064310@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  id v38;
  _QWORD *v39;
  uint64_t v40;
  char v41;
  uint64_t KeyPath;
  uint64_t v43;
  id v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  _BYTE v113[7];
  char v114;
  char v115;
  _BYTE v116[133];
  _BYTE v117[133];
  _QWORD v118[6];
  char v119;
  _BYTE v120[7];
  uint64_t v121;
  char v122;
  _BYTE v123[7];
  uint64_t v124;
  uint64_t v125;
  char v126;
  _BYTE v127[7];
  double v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  _QWORD v133[17];
  uint64_t v134;
  char v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;

  v110 = a2;
  v3 = sub_1000187A4(&qword_1000B42D8);
  __chkstk_darwin(v3);
  v98 = (char *)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Font.TextStyle(0);
  v96 = *(_QWORD *)(v5 - 8);
  v97 = v5;
  __chkstk_darwin(v5);
  v95 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TipListItemTipBodyView(0);
  __chkstk_darwin(v7);
  v102 = (uint64_t *)((char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v105 = sub_1000187A4(&qword_1000B6638);
  __chkstk_darwin(v105);
  v104 = (uint64_t)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_1000187A4(&qword_1000B6640);
  v10 = __chkstk_darwin(v106);
  v109 = (uint64_t)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v103 = (uint64_t)&v94 - v13;
  __chkstk_darwin(v12);
  v111 = (uint64_t)&v94 - v14;
  v15 = (int *)type metadata accessor for TipListItemTipImageView(0);
  v16 = __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  v20 = (char *)&v94 - v19;
  v21 = (int *)type metadata accessor for TipListItemView(0);
  v22 = v21[5];
  v23 = v21[6];
  v99 = a1;
  v100 = a1 + v22;
  v101 = v23;
  v24 = *(void **)(a1 + v22 + 8);
  v25 = *(void **)(a1 + v23);
  *v18 = swift_getKeyPath(&unk_10007C030);
  v26 = sub_1000187A4(&qword_1000B41C0);
  swift_storeEnumTagMultiPayload(v18, v26, 0);
  v27 = (_QWORD *)((char *)v18 + v15[5]);
  *v27 = swift_getKeyPath(&unk_10007C060);
  v28 = sub_1000187A4(&qword_1000B5950);
  swift_storeEnumTagMultiPayload(v27, v28, 0);
  v29 = (_QWORD *)((char *)v18 + v15[6]);
  v30 = type metadata accessor for TipListViewModel(0);
  v31 = sub_1000041E8(&qword_1000B4BE0, type metadata accessor for TipListViewModel, (uint64_t)&protocol conformance descriptor for TipNavigationViewModel);
  v32 = v24;
  v33 = v25;
  *v29 = ObservedObject.init(wrappedValue:)(v32, v30, v31);
  v29[1] = v34;
  *(_QWORD *)((char *)v18 + v15[7]) = v33;
  v107 = v20;
  v108 = v18;
  sub_100047934((uint64_t)v18, (uint64_t)v20, type metadata accessor for TipListItemTipImageView);
  v35 = *(void **)(v99 + v101);
  v36 = *(_QWORD *)(v99 + v21[7]);
  v37 = *(id *)(v100 + 8);
  v38 = v35;
  v39 = v102;
  v40 = sub_100064B28(v37, v38, v36, v102);
  v41 = static Edge.Set.trailing.getter(v40);
  KeyPath = swift_getKeyPath(&unk_10007C0A0);
  v43 = swift_getKeyPath(&unk_10007C0C8);
  v44 = v37;
  static Published.subscript.getter(v133, v44, KeyPath, v43);

  swift_release(KeyPath);
  swift_release(v43);
  v45 = 20.0;
  if (LOBYTE(v133[0]))
    v45 = 0.0;
  v46 = EdgeInsets.init(_all:)(v45);
  v48 = v47;
  v50 = v49;
  v52 = v51;
  v53 = v104;
  sub_10000A968((uint64_t)v39, v104, type metadata accessor for TipListItemTipBodyView);
  v54 = v53 + *(int *)(v105 + 36);
  *(_BYTE *)v54 = v41;
  *(double *)(v54 + 8) = v46;
  *(_QWORD *)(v54 + 16) = v48;
  *(_QWORD *)(v54 + 24) = v50;
  *(_QWORD *)(v54 + 32) = v52;
  *(_BYTE *)(v54 + 40) = 0;
  v55 = sub_10000A92C((uint64_t)v39, type metadata accessor for TipListItemTipBodyView);
  v56 = static HorizontalAlignment.listRowSeparatorLeading.getter(v55);
  v57 = v103;
  sub_1000121BC(v53, v103, &qword_1000B6638);
  v58 = (uint64_t *)(v57 + *(int *)(v106 + 36));
  *v58 = v56;
  v58[1] = (uint64_t)sub_100064DE8;
  v58[2] = 0;
  sub_100011DE0(v53, &qword_1000B6638);
  sub_100014780(v57, v111, &qword_1000B6640);
  v59 = swift_getKeyPath(&unk_10007C0F8);
  v60 = swift_getKeyPath(&unk_10007C120);
  v61 = v44;
  static Published.subscript.getter(v133, v61, v59, v60);

  swift_release(v59);
  swift_release(v60);
  if (LOBYTE(v133[0]) == 1)
  {
    v106 = Image.init(systemName:)(0x2E6E6F7276656863, 0xEF64726177726F66);
    v63 = v95;
    v62 = v96;
    v64 = v97;
    (*(void (**)(char *, _QWORD, uint64_t))(v96 + 104))(v95, enum case for Font.TextStyle.footnote(_:), v97);
    v65 = type metadata accessor for Font.Design(0);
    v66 = (uint64_t)v98;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v98, 1, 1, v65);
    v67 = static Font.system(_:design:weight:)(v63, v66, 0, 1);
    sub_100011DE0(v66, &qword_1000B42D8);
    v68 = (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v63, v64);
    static Font.Weight.bold.getter(v68);
    v105 = Font.weight(_:)(v67);
    swift_release(v67);
    v104 = swift_getKeyPath(&unk_10007C140);
    v69 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
    v70 = Color.init(_:)(v69);
    v71 = swift_getKeyPath(&unk_10007C170);
    v72 = static Alignment.trailing.getter();
    v74 = _FrameLayout.init(width:height:alignment:)(&v134, 0, 1, 0, 1, v72, v73);
    v75 = v134;
    v76 = v135;
    v77 = v136;
    v78 = v137;
    v79 = v138;
    v80 = v139;
    v81 = static Edge.Set.leading.getter(v74);
    v82 = EdgeInsets.init(_all:)(2.0);
    v115 = v76;
    v114 = v78;
    v112 = 0;
    v118[0] = v106;
    v118[1] = v104;
    v118[2] = v105;
    v118[3] = v71;
    v118[4] = v70;
    v118[5] = v75;
    v119 = v76;
    *(_DWORD *)v120 = *(_DWORD *)v117;
    *(_DWORD *)&v120[3] = *(_DWORD *)&v117[3];
    v121 = v77;
    v122 = v78;
    *(_DWORD *)&v123[3] = *(_DWORD *)&v116[3];
    *(_DWORD *)v123 = *(_DWORD *)v116;
    v124 = v79;
    v125 = v80;
    v126 = v81;
    *(_DWORD *)&v127[3] = *(_DWORD *)&v113[3];
    *(_DWORD *)v127 = *(_DWORD *)v113;
    v128 = v82;
    v129 = v83;
    v130 = v84;
    v131 = v85;
    v132 = 0;
    nullsub_1(v118);
  }
  else
  {
    sub_100066F94((uint64_t)v118);
  }
  sub_100014780((uint64_t)v118, (uint64_t)v133, &qword_1000B6648);
  v87 = (uint64_t)v107;
  v86 = (uint64_t)v108;
  sub_10000A968((uint64_t)v107, (uint64_t)v108, type metadata accessor for TipListItemTipImageView);
  v88 = v111;
  v89 = v109;
  sub_1000121BC(v111, v109, &qword_1000B6640);
  sub_100014780((uint64_t)v133, (uint64_t)v116, &qword_1000B6648);
  v90 = v110;
  sub_10000A968(v86, v110, type metadata accessor for TipListItemTipImageView);
  v91 = sub_1000187A4(&qword_1000B6650);
  sub_1000121BC(v89, v90 + *(int *)(v91 + 48), &qword_1000B6640);
  v92 = v90 + *(int *)(v91 + 64);
  sub_100014780((uint64_t)v116, (uint64_t)v117, &qword_1000B6648);
  sub_100014780((uint64_t)v117, v92, &qword_1000B6648);
  sub_10006700C((uint64_t)v117, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100066FB0);
  sub_100011DE0(v88, &qword_1000B6640);
  sub_10000A92C(v87, type metadata accessor for TipListItemTipImageView);
  sub_100014780((uint64_t)v116, (uint64_t)v118, &qword_1000B6648);
  sub_10006700C((uint64_t)v118, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100067070);
  sub_100011DE0(v89, &qword_1000B6640);
  return sub_10000A92C(v86, type metadata accessor for TipListItemTipImageView);
}

uint64_t type metadata accessor for TipListItemTipBodyView(uint64_t a1)
{
  return sub_1000181CC(a1, qword_1000B66B0, (uint64_t)&nominal type descriptor for TipListItemTipBodyView);
}

uint64_t type metadata accessor for TipListItemTipImageView(uint64_t a1)
{
  return sub_1000181CC(a1, qword_1000B6768, (uint64_t)&nominal type descriptor for TipListItemTipImageView);
}

uint64_t sub_100064B28@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  char *v43;
  id v44;
  void *v45;
  _QWORD v47[2];
  __int128 v48;
  uint64_t v49;

  *a4 = swift_getKeyPath(&unk_10007C060);
  v7 = sub_1000187A4(&qword_1000B5950);
  swift_storeEnumTagMultiPayload(a4, v7, 0);
  v8 = (int *)type metadata accessor for TipListItemTipBodyView(0);
  v9 = (_QWORD *)((char *)a4 + v8[5]);
  *v9 = swift_getKeyPath(&unk_10007C1A0);
  v10 = sub_1000187A4(&qword_1000B6388);
  swift_storeEnumTagMultiPayload(v9, v10, 0);
  v11 = (char *)a4 + v8[6];
  *(_QWORD *)v11 = swift_getKeyPath(&unk_10007C1D0);
  v11[8] = 0;
  Text.Measurements.init()();
  v12 = v8[12];
  v47[0] = 2;
  State.init(wrappedValue:)(&v48, v47, &type metadata for Int);
  *(_OWORD *)((char *)a4 + v12) = v48;
  v13 = v8[13];
  v47[0] = 2;
  State.init(wrappedValue:)(&v48, v47, &type metadata for Int);
  *(_OWORD *)((char *)a4 + v13) = v48;
  v14 = (char *)a4 + v8[14];
  type metadata accessor for CGSize(0);
  v47[0] = 0;
  v47[1] = 0;
  State.init(wrappedValue:)(&v48, v47, v15);
  v16 = v49;
  *(_OWORD *)v14 = v48;
  *((_QWORD *)v14 + 2) = v16;
  v17 = (_QWORD *)((char *)a4 + v8[7]);
  v18 = type metadata accessor for TipListViewModel(0);
  v19 = sub_1000041E8(&qword_1000B4BE0, type metadata accessor for TipListViewModel, (uint64_t)&protocol conformance descriptor for TipNavigationViewModel);
  v20 = a1;
  *v17 = ObservedObject.init(wrappedValue:)(v20, v18, v19);
  v17[1] = v21;
  *(_QWORD *)((char *)a4 + v8[8]) = a2;
  v44 = a2;
  v45 = v20;
  v22 = objc_msgSend(v20, "titleFor:");
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  *(_QWORD *)&v48 = v23;
  *((_QWORD *)&v48 + 1) = v25;
  v26 = sub_100014614();
  v27 = Text.init<A>(_:)(&v48, &type metadata for String, v26);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  if (qword_1000B3FE8 != -1)
    swift_once(&qword_1000B3FE8, sub_1000655E0);
  v34 = v31 & 1;
  v35 = Text.font(_:)(qword_1000B6550, v27, v29, v34, v33);
  v37 = v36;
  v39 = v38;
  v41 = v40;

  sub_100014658(v27, v29, v34);
  result = swift_bridgeObjectRelease(v33);
  v43 = (char *)a4 + v8[10];
  *(_QWORD *)v43 = v35;
  *((_QWORD *)v43 + 1) = v37;
  v43[16] = v39 & 1;
  *((_QWORD *)v43 + 3) = v41;
  *(_QWORD *)((char *)a4 + v8[11]) = a3;
  return result;
}

uint64_t sub_100064DE8()
{
  uint64_t v0;

  v0 = static HorizontalAlignment.leading.getter();
  return ViewDimensions.subscript.getter(v0);
}

uint64_t sub_100064E0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  id v30;
  char v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  uint64_t v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char **v52;
  id v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  __int128 v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v75;
  uint64_t v76;
  _QWORD v78[2];
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  _OWORD v104[3];

  v2 = v1;
  v102 = a1;
  v101 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v101);
  v85 = (char *)v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for BackgroundProminence(0);
  v81 = *(_QWORD *)(v82 - 8);
  v4 = __chkstk_darwin(v82);
  v80 = (char *)v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v79 = (uint64_t)v78 - v6;
  v7 = type metadata accessor for TipListItemTipImageView(0);
  __chkstk_darwin(v7);
  v88 = (char *)v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000187A4(&qword_1000B4698);
  __chkstk_darwin(v9);
  v89 = (uint64_t)v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_1000187A4(&qword_1000B5520);
  v96 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v87 = (char *)v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000187A4(&qword_1000B6808);
  v94 = *(_QWORD *)(v12 - 8);
  v95 = v12;
  __chkstk_darwin(v12);
  v103 = (char *)v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_1000187A4(&qword_1000B6810);
  __chkstk_darwin(v92);
  v98 = (char *)v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_1000187A4(&qword_1000B6818);
  __chkstk_darwin(v93);
  v84 = (char *)v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_1000187A4(&qword_1000B6820);
  __chkstk_darwin(v97);
  v83 = (char *)v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_1000187A4(&qword_1000B6828);
  __chkstk_darwin(v99);
  v100 = (char *)v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ColorScheme(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)v78 - v23;
  v25 = type metadata accessor for TipListViewModel.AssetConfiguration(0);
  __chkstk_darwin(v25);
  v27 = (_QWORD *)((char *)v78 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v78[1] = v7;
  v28 = *(int *)(v7 + 28);
  v86 = v1 + *(int *)(v7 + 24);
  v29 = *(void **)(v1 + v28);
  v30 = *(id *)(v86 + 8);
  sub_100012200((uint64_t)v24);
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v22, enum case for ColorScheme.dark(_:), v18);
  v31 = static ColorScheme.== infix(_:_:)(v24, v22);
  v32 = *(void (**)(char *, uint64_t))(v19 + 8);
  v32(v22, v18);
  v33 = v24;
  v34 = (uint64_t)v88;
  v32(v33, v18);
  v35 = v2;
  sub_100051190(v29, v31 & 1, v27);

  v36 = *v27;
  v37 = v27[1];
  v90 = v25;
  v38 = v89;
  sub_1000121BC((uint64_t)v27 + *(int *)(v25 + 20), v89, &qword_1000B4698);
  swift_bridgeObjectRetain(v37);
  v39 = v87;
  RemoteImageView<>.init(identifier:url:isLoaded:)(v36, v37, v38, 0, 0, 0);
  v40 = sub_1000086E8(&qword_1000B5518, &qword_1000B5520, (uint64_t)&protocol conformance descriptor for RemoteImageView<A>);
  v41 = v91;
  View.assetContentMode(_:)(1, v91, v40);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v39, v41);
  LODWORD(v41) = *(unsigned __int8 *)(*(_QWORD *)(v86 + 8) + qword_1000B90B0);
  v96 = v35;
  sub_10000A968(v35, v34, type metadata accessor for TipListItemTipImageView);
  if ((_DWORD)v41 != 1)
  {
    sub_10000A92C(v34, type metadata accessor for TipListItemTipImageView);
    v49 = v85;
    v50 = (uint64_t)v84;
    v51 = (uint64_t)v83;
    goto LABEL_5;
  }
  v42 = v79;
  v43 = sub_10005F0BC(v79);
  v44 = v80;
  static BackgroundProminence.increased.getter(v43);
  v45 = static BackgroundProminence.== infix(_:_:)(v42, v44);
  v46 = *(void (**)(char *, uint64_t))(v81 + 8);
  v47 = v44;
  v48 = v82;
  v46(v47, v82);
  v46((char *)v42, v48);
  sub_10000A92C(v34, type metadata accessor for TipListItemTipImageView);
  v49 = v85;
  v50 = (uint64_t)v84;
  v51 = (uint64_t)v83;
  if ((v45 & 1) == 0)
  {
LABEL_5:
    v52 = &selRef_tertiarySystemFillColor;
    goto LABEL_6;
  }
  v52 = &selRef_clearColor;
LABEL_6:
  v53 = objc_msgSend((id)objc_opt_self(UIColor), *v52);
  v54 = Color.init(_:)(v53);
  v55 = static Edge.Set.all.getter(v54);
  v57 = v94;
  v56 = v95;
  v58 = (uint64_t)v98;
  v59 = v103;
  (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v98, v103, v95);
  v60 = v58 + *(int *)(v92 + 36);
  *(_QWORD *)v60 = v54;
  *(_BYTE *)(v60 + 8) = v55;
  v61 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v59, v56);
  v62 = 102.0 / *(double *)((char *)v27 + *(int *)(v90 + 24));
  v63 = static Alignment.center.getter(v61);
  _FrameLayout.init(width:height:alignment:)(v104, *(_QWORD *)&v62, 0, 0x4059800000000000, 0, v63, v64);
  sub_1000121BC(v58, v50, &qword_1000B6810);
  v65 = (_OWORD *)(v50 + *(int *)(v93 + 36));
  v66 = v104[1];
  *v65 = v104[0];
  v65[1] = v66;
  v65[2] = v104[2];
  sub_100011DE0(v58, &qword_1000B6810);
  v67 = (char *)v49 + *(int *)(v101 + 20);
  v68 = enum case for RoundedCornerStyle.continuous(_:);
  v69 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 104))(v67, v68, v69);
  __asm { FMOV            V0.2D, #10.0 }
  *v49 = _Q0;
  v75 = v51 + *(int *)(v97 + 36);
  sub_10000A968((uint64_t)v49, v75, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v75 + *(int *)(sub_1000187A4(&qword_1000B4790) + 36)) = 256;
  sub_1000121BC(v50, v51, &qword_1000B6818);
  sub_10000A92C((uint64_t)v49, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_100011DE0(v50, &qword_1000B6818);
  v76 = (uint64_t)v100;
  sub_100012200((uint64_t)&v100[*(int *)(v99 + 52)]);
  sub_100014780(v51, v76, &qword_1000B6820);
  sub_10000A92C((uint64_t)v27, type metadata accessor for TipListViewModel.AssetConfiguration);
  return sub_100014780(v76, v102, &qword_1000B6828);
}

uint64_t sub_1000655E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v0 = type metadata accessor for Font.Leading(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = static Font.body.getter(v2);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for Font.Leading.tight(_:), v0);
  v6 = Font.leading(_:)(v4, v5);
  swift_release(v5);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  v7 = Font.bold()(v6);
  result = swift_release(v6);
  qword_1000B6550 = v7;
  return result;
}

uint64_t sub_1000656AC()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  if (qword_1000B3FE8 != -1)
    swift_once(&qword_1000B3FE8, sub_1000655E0);
  result = Text.font(_:)(qword_1000B6550, 32, 0xE100000000000000, 0, _swiftEmptyArrayStorage);
  qword_1000B6558 = result;
  unk_1000B6560 = v1;
  byte_1000B6568 = v2 & 1;
  qword_1000B6570 = v3;
  return result;
}

uint64_t sub_100065724@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v19;

  v3 = sub_1000187A4(&qword_1000B67B8);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000187A4(&qword_1000B5300);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v5 = static HorizontalAlignment.leading.getter(v8);
  *((_QWORD *)v5 + 1) = 0x4008000000000000;
  v5[16] = 0;
  v11 = sub_1000187A4(&qword_1000B67C0);
  sub_1000658C0(v1, (uint64_t *)&v5[*(int *)(v11 + 44)]);
  sub_100062F84();
  v12 = static UIFont.defaultHyphenationFactor.getter();
  v13 = sub_1000086E8(&qword_1000B67C8, &qword_1000B67B8, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.hyphenationFactor(_:)(v3, v13, v12);
  v14 = sub_100011DE0((uint64_t)v5, &qword_1000B67B8);
  v15 = static Alignment.leading.getter(v14);
  v17 = sub_1000435AC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a1, 0.0, 1, INFINITY, 0, v15, v16);
  return (*(uint64_t (**)(char *, uint64_t, double))(v7 + 8))(v10, v6, v17);
}

uint64_t sub_1000658C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  uint64_t KeyPath;
  uint64_t v40;
  id v41;
  char v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  __int128 v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  char *v54;
  uint64_t v55;
  char v56;
  char v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char v62;
  void (*v63)(char *, uint64_t);
  char *v64;
  uint64_t v65;
  char v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  void (*v84)(char *, _QWORD, uint64_t);
  char *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  double v94;
  char *v95;
  id v96;
  uint64_t v97;
  char *v98;
  id v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  id v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  double v114;
  char *v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  void *v122;
  Swift::String v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  id v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  id v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char v184;
  uint64_t v185;
  char v186;
  void (*v187)(char *, char *, uint64_t);
  char *v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int **v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void (*v201)(char *, uint64_t);
  int v203;
  int v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  int *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD v253[2];
  _OWORD v254[2];
  uint64_t v255;

  v238 = a2;
  v207 = type metadata accessor for Font.Leading(0);
  v206 = *(_QWORD *)(v207 - 8);
  __chkstk_darwin(v207);
  v205 = (char *)&v205 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v237 = type metadata accessor for ScenePhase(0);
  v236 = *(_QWORD *)(v237 - 8);
  __chkstk_darwin(v237);
  v235 = (uint64_t)&v205 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000187A4(&qword_1000B5B88);
  __chkstk_darwin(v5);
  v219 = (char *)&v205 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000187A4(&qword_1000B4698);
  __chkstk_darwin(v7);
  v240 = (char *)&v205 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v226 = type metadata accessor for ConstellationContentView(0);
  v225 = *(_QWORD *)(v226 - 8);
  __chkstk_darwin(v226);
  v224 = (char *)&v205 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v227 = sub_1000187A4(&qword_1000B67D0);
  __chkstk_darwin(v227);
  v228 = (char *)&v205 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = sub_1000187A4(&qword_1000B67D8);
  v231 = *(_QWORD *)(v232 - 8);
  __chkstk_darwin(v232);
  v229 = (char *)&v205 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v230 = sub_1000187A4(&qword_1000B67E0);
  __chkstk_darwin(v230);
  v234 = (char *)&v205 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v245 = sub_1000187A4(&qword_1000B67E8);
  v247 = *(_QWORD *)(v245 - 8);
  v13 = __chkstk_darwin(v245);
  v244 = (char *)&v205 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v233 = (char *)&v205 - v16;
  __chkstk_darwin(v15);
  v246 = (char *)&v205 - v17;
  v18 = sub_1000187A4(&qword_1000B5B90);
  __chkstk_darwin(v18);
  v213 = (char *)&v205 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = type metadata accessor for ConstellationContentParagraphStyle(0);
  v223 = *(_QWORD *)(v209 - 8);
  __chkstk_darwin(v209);
  v211 = (char *)&v205 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v243 = type metadata accessor for ConstellationContentAttributes(0);
  v242 = *(_QWORD *)(v243 - 8);
  __chkstk_darwin(v243);
  v241 = (char *)&v205 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v222 = type metadata accessor for BackgroundProminence(0);
  v221 = *(_QWORD *)(v222 - 8);
  v22 = __chkstk_darwin(v222);
  v218 = (char *)&v205 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v217 = (uint64_t)&v205 - v24;
  v25 = (int *)type metadata accessor for TipListItemTipBodyView(0);
  v215 = *((_QWORD *)v25 - 1);
  v26 = __chkstk_darwin(v25);
  v220 = (uint64_t)&v205 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v205 - v29;
  v31 = __chkstk_darwin(v28);
  v33 = (char *)&v205 - v32;
  v216 = v34;
  v35 = __chkstk_darwin(v31);
  v37 = (char *)&v205 - v36;
  v239 = a1 + *(int *)(v35 + 28);
  v38 = *(void **)(v239 + 8);
  KeyPath = swift_getKeyPath(&unk_10007C0A0);
  v40 = swift_getKeyPath(&unk_10007C0C8);
  v41 = v38;
  static Published.subscript.getter(v254, v41, KeyPath, v40);

  swift_release(KeyPath);
  swift_release(v40);
  LOBYTE(v38) = v254[0];
  sub_10000A968(a1, (uint64_t)v37, type metadata accessor for TipListItemTipBodyView);
  v248 = v25;
  v249 = a1;
  if ((v38 & 1) != 0)
  {
    sub_10000A92C((uint64_t)v37, type metadata accessor for TipListItemTipBodyView);
    v42 = 0;
  }
  else
  {
    v43 = *(void **)&v37[v25[7] + 8];
    v44 = swift_getKeyPath(&unk_10007C358);
    v45 = swift_getKeyPath(&unk_10007C380);
    v46 = v43;
    static Published.subscript.getter(v254, v46, v44, v45);

    swift_release(v44);
    swift_release(v45);
    v47 = v254[0];
    v48 = objc_msgSend(*(id *)&v37[v25[8]], "identifier");
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v51 = v50;

    if (*((_QWORD *)&v47 + 1))
    {
      if (v47 == __PAIR128__(v51, v49))
        v42 = 1;
      else
        v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, *((_QWORD *)&v47 + 1), v49, v51, 0);
      swift_bridgeObjectRelease(v51);
      sub_10000A92C((uint64_t)v37, type metadata accessor for TipListItemTipBodyView);
      swift_bridgeObjectRelease(*((_QWORD *)&v47 + 1));
    }
    else
    {
      sub_10000A92C((uint64_t)v37, type metadata accessor for TipListItemTipBodyView);
      swift_bridgeObjectRelease(v51);
      v42 = 0;
    }
    v25 = v248;
    a1 = v249;
  }
  v52 = v239;
  v53 = *(unsigned __int8 *)(*(_QWORD *)(v239 + 8) + qword_1000B90B0);
  sub_10000A968(a1, (uint64_t)v33, type metadata accessor for TipListItemTipBodyView);
  if (v53 == 1)
  {
    v54 = &v33[v25[6]];
    v55 = *(_QWORD *)v54;
    v56 = v54[8];
    sub_10006737C(*(_QWORD *)v54, v56);
    v57 = sub_10005F310(v55, v56);
    a1 = v249;
    sub_10005FE00(v55, v56);
    sub_10000A92C((uint64_t)v33, type metadata accessor for TipListItemTipBodyView);
    sub_10000A968(a1, (uint64_t)v30, type metadata accessor for TipListItemTipBodyView);
    v58 = v240;
    if ((v57 & 1) != 0)
    {
      v59 = v217;
      v60 = sub_10005F0BC(v217);
      v61 = v218;
      static BackgroundProminence.increased.getter(v60);
      v62 = static BackgroundProminence.== infix(_:_:)(v59, v61);
      v63 = *(void (**)(char *, uint64_t))(v221 + 8);
      v64 = v61;
      v65 = v222;
      v63(v64, v222);
      v63((char *)v59, v65);
      a1 = v249;
      sub_10000A92C((uint64_t)v30, type metadata accessor for TipListItemTipBodyView);
      v66 = v62 | v42;
      goto LABEL_15;
    }
  }
  else
  {
    sub_10000A92C((uint64_t)v33, type metadata accessor for TipListItemTipBodyView);
    sub_10000A968(a1, (uint64_t)v30, type metadata accessor for TipListItemTipBodyView);
    v58 = v240;
  }
  sub_10000A92C((uint64_t)v30, type metadata accessor for TipListItemTipBodyView);
  v66 = 0;
LABEL_15:
  v67 = v248;
  v68 = v223;
  v69 = a1 + v248[10];
  v70 = *(_QWORD *)v69;
  v71 = *(_QWORD *)(v69 + 8);
  v72 = *(unsigned __int8 *)(v69 + 16);
  v73 = *(_QWORD *)(v69 + 24);
  v254[0] = *(_OWORD *)(a1 + v248[12]);
  v222 = v70;
  v221 = v71;
  LODWORD(v218) = v72;
  sub_100031A98(v70, v71, v72);
  swift_bridgeObjectRetain(v73);
  v240 = (char *)sub_1000187A4(&qword_1000B64F8);
  State.wrappedValue.getter(&v250, v240);
  v214 = v250;
  v74 = swift_getKeyPath(&unk_10007C3A0);
  v75 = *(void **)(v52 + 8);
  v212 = v67[8];
  v76 = *(void **)(a1 + v212);
  v77 = objc_msgSend(v75, "bodyContentFor:", v76);
  v78 = sub_1000187A4(&qword_1000B48D8);
  v210 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v77, v78);

  v223 = v73;
  v217 = v74;
  if ((v66 & 1) != 0)
  {
    v80 = static Color.white.getter(v79);
    v81 = Color.opacity(_:)(0.6);
    swift_release(v80);
  }
  else
  {
    v81 = static Color.secondary.getter();
  }
  v82 = v209;
  v83 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleFootnote);
  memset(v254, 0, sizeof(v254));
  v255 = 0;
  v84 = *(void (**)(char *, _QWORD, uint64_t))(v68 + 104);
  v85 = v211;
  v84(v211, enum case for ConstellationContentParagraphStyle.space(_:), v82);
  v86 = (uint64_t *)(a1 + v67[13]);
  v88 = *v86;
  v87 = v86[1];
  v209 = v88;
  v250 = v88;
  v251 = v87;
  v208 = v87;
  swift_retain(v81);
  v89 = (char *)v81;
  State.wrappedValue.getter(v253, v240);
  v90 = v253[0];
  v91 = type metadata accessor for Locale.Language(0);
  v92 = v213;
  v93 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 56))(v213, 1, 1, v91);
  v94 = defaultParagraphSpacing.getter(v93);
  *(_WORD *)((char *)&v204 + 1) = v66 & 1;
  LOBYTE(v204) = 0;
  v95 = v241;
  v213 = v89;
  ConstellationContentAttributes.init(font:foregroundColor:accentColor:titleGradientStyle:textAlignment:paragraphSpacing:paragraphStyle:numberOfLines:lineBreakMode:symbolScale:useForegroundColorForSymbol:displayLinkStyle:typeSettingLanguage:supportsLinks:)(v83, v89, 0, v254, 4, v85, v90, 4, v94, 1, v204, v92, 1);
  v96 = objc_msgSend(v76, "language");
  v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
  v211 = v98;

  v99 = objc_msgSend(v75, "assetsBaseURLFor:", v76);
  if (v99)
  {
    v100 = v99;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v99);

    v101 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 56))(v58, 0, 1, v101);
  }
  else
  {
    v102 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 56))(v58, 1, 1, v102);
  }
  v103 = v58;
  v104 = objc_msgSend(v76, "assetFileInfoManager");
  v105 = v242;
  v106 = v219;
  v107 = v243;
  (*(void (**)(char *, char *, uint64_t))(v242 + 16))(v219, v95, v243);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v106, 0, 1, v107);
  v108 = (uint64_t *)(v249 + v248[14]);
  v110 = v108[1];
  v111 = v108[2];
  v250 = *v108;
  v109 = v250;
  v251 = v110;
  v252 = v111;
  v112 = sub_1000187A4(&qword_1000B5940);
  State.wrappedValue.getter(v253, v112);
  v113 = *(double *)v253;
  v114 = *(double *)&v253[1];
  v250 = v109;
  v251 = v110;
  v252 = v111;
  State.wrappedValue.getter(v253, v112);
  LOBYTE(v203) = 1;
  v115 = v224;
  ConstellationContentView.init(rawContent:language:assetsBaseURL:assetFileInfoManager:attributes:size:maxWidth:textIsSelectable:delegate:)(v210, v97, v211, v103, v104, v106, v253[0], 0, v113, v114, v203, 0, 0);
  v116 = objc_msgSend(v76, "identifier");
  v117 = static String._unconditionallyBridgeFromObjectiveC(_:)(v116);
  v119 = v118;

  v250 = v209;
  v251 = v208;
  State.wrappedValue.getter(v253, v240);
  v120 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v122 = v121;
  v250 = v117;
  v251 = v119;
  swift_bridgeObjectRetain(v119);
  v123._countAndFlagsBits = v120;
  v123._object = v122;
  String.append(_:)(v123);
  swift_bridgeObjectRelease(v119);
  swift_bridgeObjectRelease(v122);
  v124 = v250;
  v125 = v251;
  v126 = v225;
  v127 = (uint64_t)v228;
  v128 = v226;
  (*(void (**)(char *, char *, uint64_t))(v225 + 16))(v228, v115, v226);
  v129 = v227;
  v130 = (uint64_t *)(v127 + *(int *)(v227 + 52));
  *v130 = v124;
  v130[1] = v125;
  (*(void (**)(char *, uint64_t))(v126 + 8))(v115, v128);
  v131 = v249;
  v132 = v220;
  sub_10000A968(v249, v220, type metadata accessor for TipListItemTipBodyView);
  v133 = *(unsigned __int8 *)(v215 + 80);
  v134 = (v133 + 16) & ~v133;
  v135 = v134 + v216;
  v136 = v133 | 7;
  v137 = swift_allocObject(&unk_1000A4EA0, v134 + v216, v133 | 7);
  sub_100047934(v132, v137 + v134, type metadata accessor for TipListItemTipBodyView);
  v138 = sub_1000086E8(&qword_1000B67F0, &qword_1000B67D0, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
  v139 = v229;
  View.readSize(onChange:)(sub_100068B58, v137, v129, v138);
  swift_release(v137);
  sub_100011DE0(v127, &qword_1000B67D0);
  sub_10000A968(v131, v132, type metadata accessor for TipListItemTipBodyView);
  v140 = swift_allocObject(&unk_1000A4EC8, v135, v136);
  sub_100047934(v132, v140 + v134, type metadata accessor for TipListItemTipBodyView);
  v141 = v231;
  v142 = (uint64_t)v234;
  v143 = v232;
  (*(void (**)(char *, char *, uint64_t))(v231 + 16))(v234, v139, v232);
  v144 = v230;
  v145 = (_QWORD *)(v142 + *(int *)(v230 + 36));
  *v145 = sub_100068BA0;
  v145[1] = v140;
  v145[2] = 0;
  v145[3] = 0;
  (*(void (**)(char *, uint64_t))(v141 + 8))(v139, v143);
  v146 = v249;
  v147 = v235;
  sub_10005F2E4(v235);
  v148 = v146;
  sub_10000A968(v146, v132, type metadata accessor for TipListItemTipBodyView);
  v149 = swift_allocObject(&unk_1000A4EF0, v135, v136);
  sub_100047934(v132, v149 + v134, type metadata accessor for TipListItemTipBodyView);
  v150 = sub_100068BD8();
  v151 = sub_1000041E8(&qword_1000B64E0, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t)&protocol conformance descriptor for ScenePhase);
  v152 = v233;
  v153 = v237;
  View.onChange<A>(of:initial:_:)(v147, 0, sub_100068BA0, v149, v144, v237, v150, v151);
  swift_release(v149);
  (*(void (**)(uint64_t, uint64_t))(v236 + 8))(v147, v153);
  sub_100011DE0(v142, &qword_1000B67E0);
  (*(void (**)(char *, char *, uint64_t))(v247 + 32))(v246, v152, v245);
  v154 = objc_msgSend(*(id *)(v239 + 8), "footerFor:", *(_QWORD *)(v148 + v212));
  if (v154)
  {
    v155 = v154;
    v156 = static String._unconditionallyBridgeFromObjectiveC(_:)(v154);
    v158 = v157;

    v250 = v156;
    v251 = v158;
    v159 = sub_100014614();
    v160 = Text.init<A>(_:)(&v250, &type metadata for String, v159);
    v162 = v161;
    v164 = v163;
    v166 = v165 & 1;
    v167 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
    v168 = Color.init(_:)(v167);
    v169 = Text.foregroundColor(_:)(v168, v160, v162, v166, v164);
    v171 = v170;
    v173 = v172;
    v175 = v174;
    swift_release(v168);
    v176 = v173 & 1;
    sub_100014658(v160, v162, v166);
    v177 = swift_bridgeObjectRelease(v164);
    v178 = static Font.footnote.getter(v177);
    v179 = v206;
    v180 = v205;
    v181 = v207;
    (*(void (**)(char *, _QWORD, uint64_t))(v206 + 104))(v205, enum case for Font.Leading.tight(_:), v207);
    v182 = Font.leading(_:)(v180, v178);
    swift_release(v178);
    (*(void (**)(char *, uint64_t))(v179 + 8))(v180, v181);
    v248 = (int *)Text.font(_:)(v182, v169, v171, v176, v175);
    v240 = v183;
    LOBYTE(v180) = v184;
    v239 = v185;
    swift_release(v182);
    v249 = v180 & 1;
    sub_100014658(v169, v171, v176);
    swift_bridgeObjectRelease(v175);
  }
  else
  {
    v248 = 0;
    v240 = 0;
    v249 = 0;
    v239 = 0;
  }
  v186 = (char)v218;
  LOBYTE(v250) = (_BYTE)v218;
  v187 = *(void (**)(char *, char *, uint64_t))(v247 + 16);
  v188 = v244;
  v189 = v245;
  v187(v244, v246, v245);
  v190 = v238;
  v191 = v222;
  v192 = v221;
  *v238 = v222;
  v190[1] = v192;
  *((_BYTE *)v190 + 16) = v186;
  v193 = v223;
  v194 = v217;
  v190[3] = v223;
  v190[4] = v194;
  v190[5] = v214;
  *((_BYTE *)v190 + 48) = 0;
  *(_WORD *)((char *)v190 + 49) = 256;
  v195 = sub_1000187A4(&qword_1000B6800);
  v187((char *)v190 + *(int *)(v195 + 48), v188, v189);
  v196 = (int **)((char *)v190 + *(int *)(v195 + 64));
  v198 = (uint64_t)v248;
  v197 = v249;
  v199 = (uint64_t)v240;
  *v196 = v248;
  v196[1] = (int *)v199;
  v249 = v197;
  v200 = v239;
  v196[2] = (int *)v197;
  v196[3] = (int *)v200;
  sub_100031A98(v191, v192, v186);
  swift_bridgeObjectRetain(v193);
  sub_100031A98(v191, v192, v186);
  swift_bridgeObjectRetain(v193);
  swift_retain(v194);
  sub_1000147C4(v198, v199, v197, v200);
  swift_retain(v194);
  swift_release(v213);
  v201 = *(void (**)(char *, uint64_t))(v247 + 8);
  v201(v246, v189);
  (*(void (**)(char *, uint64_t))(v242 + 8))(v241, v243);
  sub_100014658(v191, v192, v186);
  swift_release(v194);
  swift_bridgeObjectRelease(v193);
  sub_1000147F4(v198, v199, v249, v200);
  v201(v244, v189);
  sub_100014658(v191, v192, v250);
  swift_release(v194);
  return swift_bridgeObjectRelease(v193);
}

uint64_t sub_100066BB8(uint64_t a1, double a2, double a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = (uint64_t *)(a1 + *(int *)(type metadata accessor for TipListItemTipBodyView(0) + 56));
  v7 = v5[1];
  v8 = v5[2];
  v13 = *v5;
  v6 = v13;
  v14 = v7;
  v15 = v8;
  v11 = a2;
  v12 = a3;
  v9 = sub_1000187A4(&qword_1000B5940);
  State.wrappedValue.setter(&v11, v9);
  v13 = v6;
  v14 = v7;
  v15 = v8;
  State.wrappedValue.getter(&v11, v9);
  return sub_100066C64(v11, v12);
}

uint64_t sub_100066C64(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  double v16;
  double v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;

  v5 = sub_1000187A4(&qword_1000B64F0);
  result = __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 != 0.0 || a2 != 0.0)
  {
    v9 = (int *)type metadata accessor for TipListItemTipBodyView(0);
    if (qword_1000B3FF0 != -1)
      swift_once(&qword_1000B3FF0, sub_1000656AC);
    v10 = qword_1000B6558;
    v11 = unk_1000B6560;
    v12 = byte_1000B6568;
    v13 = qword_1000B6570;
    v14 = type metadata accessor for Text.WritingMode(0);
    v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
    v15(v8, 1, 1, v14);
    Text.Measurements.size(of:in:writingMode:)(v10, v11, v12, v13, v8, INFINITY, INFINITY);
    v17 = v16;
    sub_100011DE0((uint64_t)v8, &qword_1000B64F0);
    v18 = v9[10];
    v33 = v2;
    v19 = (uint64_t *)(v2 + v18);
    v20 = *v19;
    v21 = v19[1];
    v22 = *((unsigned __int8 *)v19 + 16);
    v23 = v19[3];
    v15(v8, 1, 1, v14);
    Text.Measurements.size(of:in:writingMode:)(v20, v21, v22, v23, v8, a1, 1.79769313e308);
    v25 = v24;
    result = sub_100011DE0((uint64_t)v8, &qword_1000B64F0);
    v26 = round(v25 / v17);
    if ((~*(_QWORD *)&v26 & 0x7FF0000000000000) != 0)
    {
      if (v26 > -9.22337204e18)
      {
        if (v26 < 9.22337204e18)
        {
          v27 = (uint64_t)v26;
          v28 = v33;
          v29 = *(_QWORD *)(v33 + v9[11]);
          if (v29 <= (uint64_t)v26)
          {
            v35 = *(_OWORD *)(v33 + v9[13]);
            v34 = 1;
            v31 = sub_1000187A4(&qword_1000B64F8);
            State.wrappedValue.setter(&v34, v31);
            goto LABEL_12;
          }
          if (!__OFSUB__(v29, (uint64_t)v26))
          {
            v35 = *(_OWORD *)(v33 + v9[13]);
            v34 = v29 - (uint64_t)v26;
            v30 = sub_1000187A4(&qword_1000B64F8);
            State.wrappedValue.setter(&v34, v30);
            v29 = v27;
LABEL_12:
            v35 = *(_OWORD *)(v28 + v9[12]);
            v34 = v29;
            v32 = sub_1000187A4(&qword_1000B64F8);
            return State.wrappedValue.setter(&v34, v32);
          }
LABEL_17:
          __break(1u);
          return result;
        }
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_100066F08()
{
  uint64_t v0;
  double v2[2];

  type metadata accessor for TipListItemTipBodyView(0);
  v0 = sub_1000187A4(&qword_1000B5940);
  State.wrappedValue.getter(v2, v0);
  return sub_100066C64(v2[0], v2[1]);
}

double sub_100066F94(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_100066FB0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  if (result)
  {
    v8 = result;
    swift_retain(a5);
    swift_retain(v8);
    swift_retain(a2);
    swift_retain(a3);
    return swift_retain(a4);
  }
  return result;
}

uint64_t sub_10006700C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 128);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), v4);
  return a1;
}

uint64_t sub_100067070(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    swift_release(result);
    swift_release(a2);
    swift_release(a4);
    swift_release(a3);
    return swift_release(a5);
  }
  return result;
}

uint64_t sub_1000670E0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isFocused.getter();
  *a1 = result & 1;
  return result;
}

_QWORD *sub_10006710C(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  id v39;
  id v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  char *v57;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_1000187A4(&qword_1000B5950);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for BackgroundProminence(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v4, a2, v8);
      v9 = v4;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *v4 = *a2;
      swift_retain(v13);
      v9 = v4;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (_QWORD *)((char *)v4 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = sub_1000187A4(&qword_1000B6388);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for ScenePhase(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = a3[6];
    v24 = (char *)v4 + v23;
    v25 = (char *)a2 + v23;
    v26 = *(_QWORD *)v25;
    v27 = v25[8];
    sub_10006737C(*(_QWORD *)v25, v27);
    *(_QWORD *)v24 = v26;
    v24[8] = v27;
    v28 = a3[7];
    v29 = a3[8];
    v30 = (_QWORD *)((char *)v4 + v28);
    v31 = (_QWORD *)((char *)a2 + v28);
    v32 = (void *)v31[1];
    v33 = *(void **)((char *)a2 + v29);
    *v30 = *v31;
    v30[1] = v32;
    *(_QWORD *)((char *)v4 + v29) = v33;
    v34 = a3[9];
    v35 = (char *)v4 + v34;
    v36 = (char *)a2 + v34;
    v37 = type metadata accessor for Text.Measurements(0);
    v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
    v39 = v32;
    v40 = v33;
    v38(v35, v36, v37);
    v41 = a3[10];
    v42 = (char *)v4 + v41;
    v43 = (char *)a2 + v41;
    v44 = *(_QWORD *)((char *)a2 + v41);
    v45 = *(_QWORD *)((char *)a2 + v41 + 8);
    LOBYTE(v37) = *((_BYTE *)a2 + v41 + 16);
    sub_100031A98(v44, v45, v37);
    *(_QWORD *)v42 = v44;
    *((_QWORD *)v42 + 1) = v45;
    v42[16] = v37;
    v46 = *((_QWORD *)v43 + 3);
    *((_QWORD *)v42 + 3) = v46;
    v47 = a3[12];
    *(_QWORD *)((char *)v4 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
    v48 = (_QWORD *)((char *)v4 + v47);
    v49 = (_QWORD *)((char *)a2 + v47);
    v50 = v49[1];
    *v48 = *v49;
    v48[1] = v50;
    v51 = a3[13];
    v52 = a3[14];
    v53 = (_QWORD *)((char *)v4 + v51);
    v54 = (_QWORD *)((char *)a2 + v51);
    v55 = v54[1];
    *v53 = *v54;
    v53[1] = v55;
    v56 = (char *)v4 + v52;
    v57 = (char *)a2 + v52;
    *(_OWORD *)v56 = *(_OWORD *)v57;
    v12 = *((_QWORD *)v57 + 2);
    *((_QWORD *)v56 + 2) = v12;
    swift_bridgeObjectRetain(v46);
    swift_retain(v50);
    swift_retain(v55);
  }
  swift_retain(v12);
  return v4;
}

uint64_t sub_10006737C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t sub_100067388(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  v4 = sub_1000187A4(&qword_1000B5950);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for BackgroundProminence(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_1000187A4(&qword_1000B6388);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ScenePhase(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  sub_10005FE00(*(_QWORD *)((char *)a1 + a2[6]), *((_BYTE *)a1 + a2[6] + 8));

  v9 = (char *)a1 + a2[9];
  v10 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (char *)a1 + a2[10];
  sub_100014658(*(_QWORD *)v11, *((_QWORD *)v11 + 1), v11[16]);
  swift_bridgeObjectRelease(*((_QWORD *)v11 + 3));
  swift_release(*(_QWORD *)((char *)a1 + a2[12] + 8));
  swift_release(*(_QWORD *)((char *)a1 + a2[13] + 8));
  return swift_release(*(_QWORD *)((char *)a1 + a2[14] + 16));
}

_QWORD *sub_1000674E4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  id v37;
  id v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;

  v6 = sub_1000187A4(&qword_1000B5950);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for BackgroundProminence(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = sub_1000187A4(&qword_1000B6388);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for ScenePhase(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  sub_10006737C(*(_QWORD *)v23, v25);
  *(_QWORD *)v22 = v24;
  v22[8] = v25;
  v26 = a3[7];
  v27 = a3[8];
  v28 = (_QWORD *)((char *)a1 + v26);
  v29 = (_QWORD *)((char *)a2 + v26);
  v30 = (void *)v29[1];
  v31 = *(void **)((char *)a2 + v27);
  *v28 = *v29;
  v28[1] = v30;
  *(_QWORD *)((char *)a1 + v27) = v31;
  v32 = a3[9];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = type metadata accessor for Text.Measurements(0);
  v36 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
  v37 = v30;
  v38 = v31;
  v36(v33, v34, v35);
  v39 = a3[10];
  v40 = (char *)a1 + v39;
  v41 = (char *)a2 + v39;
  v42 = *(_QWORD *)((char *)a2 + v39);
  v43 = *(_QWORD *)((char *)a2 + v39 + 8);
  LOBYTE(v35) = *((_BYTE *)a2 + v39 + 16);
  sub_100031A98(v42, v43, v35);
  *(_QWORD *)v40 = v42;
  *((_QWORD *)v40 + 1) = v43;
  v40[16] = v35;
  v44 = *((_QWORD *)v41 + 3);
  *((_QWORD *)v40 + 3) = v44;
  v45 = a3[12];
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  v46 = (_QWORD *)((char *)a1 + v45);
  v47 = (_QWORD *)((char *)a2 + v45);
  v48 = v47[1];
  *v46 = *v47;
  v46[1] = v48;
  v49 = a3[13];
  v50 = a3[14];
  v51 = (_QWORD *)((char *)a1 + v49);
  v52 = (_QWORD *)((char *)a2 + v49);
  v53 = v52[1];
  *v51 = *v52;
  v51[1] = v53;
  v54 = (char *)a1 + v50;
  v55 = (char *)a2 + v50;
  *(_OWORD *)v54 = *(_OWORD *)v55;
  v56 = *((_QWORD *)v55 + 2);
  *((_QWORD *)v54 + 2) = v56;
  swift_bridgeObjectRetain(v44);
  swift_retain(v48);
  swift_retain(v53);
  swift_retain(v56);
  return a1;
}

_QWORD *sub_10006772C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B5950);
    v6 = sub_1000187A4(&qword_1000B5950);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for BackgroundProminence(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    sub_100011DE0((uint64_t)a1 + v12, &qword_1000B6388);
    v15 = sub_1000187A4(&qword_1000B6388);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for ScenePhase(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  sub_10006737C(*(_QWORD *)v23, v25);
  v26 = *(_QWORD *)v22;
  v27 = v22[8];
  *(_QWORD *)v22 = v24;
  v22[8] = v25;
  sub_10005FE00(v26, v27);
  v28 = a3[7];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  *v29 = *v30;
  v31 = (void *)v30[1];
  v32 = (void *)v29[1];
  v29[1] = v31;
  v33 = v31;

  v34 = a3[8];
  v35 = *(void **)((char *)a2 + v34);
  v36 = *(void **)((char *)a1 + v34);
  *(_QWORD *)((char *)a1 + v34) = v35;
  v37 = v35;

  v38 = a3[9];
  v39 = (char *)a1 + v38;
  v40 = (char *)a2 + v38;
  v41 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 24))(v39, v40, v41);
  v42 = a3[10];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = *(_QWORD *)((char *)a2 + v42);
  v46 = *(_QWORD *)((char *)a2 + v42 + 8);
  LOBYTE(v22) = *((_BYTE *)a2 + v42 + 16);
  sub_100031A98(v45, v46, (char)v22);
  v47 = *(_QWORD *)v43;
  v48 = *((_QWORD *)v43 + 1);
  v49 = v43[16];
  *(_QWORD *)v43 = v45;
  *((_QWORD *)v43 + 1) = v46;
  v43[16] = (char)v22;
  sub_100014658(v47, v48, v49);
  v50 = *((_QWORD *)v44 + 3);
  v51 = *((_QWORD *)v43 + 3);
  *((_QWORD *)v43 + 3) = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  v52 = a3[12];
  v53 = (_QWORD *)((char *)a1 + v52);
  v54 = (_QWORD *)((char *)a2 + v52);
  *v53 = *v54;
  v55 = v53[1];
  v56 = v54[1];
  v53[1] = v56;
  swift_retain(v56);
  swift_release(v55);
  v57 = a3[13];
  v58 = (_QWORD *)((char *)a1 + v57);
  v59 = (_QWORD *)((char *)a2 + v57);
  *v58 = *v59;
  v60 = v58[1];
  v61 = v59[1];
  v58[1] = v61;
  swift_retain(v61);
  swift_release(v60);
  v62 = a3[14];
  v63 = (_QWORD *)((char *)a1 + v62);
  v64 = (_QWORD *)((char *)a2 + v62);
  *v63 = *v64;
  v63[1] = v64[1];
  v65 = v63[2];
  v66 = v64[2];
  v63[2] = v66;
  swift_retain(v66);
  swift_release(v65);
  return a1;
}

char *sub_100067A08(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;

  v6 = sub_1000187A4(&qword_1000B5950);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for BackgroundProminence(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_1000187A4(&qword_1000B6388);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ScenePhase(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = a3[7];
  v15 = &a1[v13];
  v16 = &a2[v13];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  *(_OWORD *)&a1[v14] = *(_OWORD *)&a2[v14];
  v17 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  v21 = a3[10];
  v22 = a3[11];
  v23 = *(_OWORD *)&a2[v21];
  v24 = *(_OWORD *)&a2[v21 + 16];
  v25 = &a1[v21];
  *(_OWORD *)v25 = v23;
  *((_OWORD *)v25 + 1) = v24;
  *(_QWORD *)&a1[v22] = *(_QWORD *)&a2[v22];
  v26 = a3[13];
  *(_OWORD *)&a1[a3[12]] = *(_OWORD *)&a2[a3[12]];
  *(_OWORD *)&a1[v26] = *(_OWORD *)&a2[v26];
  v27 = a3[14];
  v28 = &a1[v27];
  v29 = &a2[v27];
  *((_QWORD *)v28 + 2) = *((_QWORD *)v29 + 2);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  return a1;
}

char *sub_100067BC8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B5950);
    v6 = sub_1000187A4(&qword_1000B5950);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for BackgroundProminence(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100011DE0((uint64_t)&a1[v8], &qword_1000B6388);
    v11 = sub_1000187A4(&qword_1000B6388);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for ScenePhase(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = v15[8];
  v17 = *(_QWORD *)v14;
  v18 = v14[8];
  *(_QWORD *)v14 = v16;
  v14[8] = (char)v15;
  sub_10005FE00(v17, v18);
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v23 = *(_QWORD *)v21;
  v22 = *((_QWORD *)v21 + 1);
  v24 = (void *)*((_QWORD *)v20 + 1);
  *(_QWORD *)v20 = v23;
  *((_QWORD *)v20 + 1) = v22;

  v25 = a3[8];
  v26 = *(void **)&a1[v25];
  *(_QWORD *)&a1[v25] = *(_QWORD *)&a2[v25];

  v27 = a3[9];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  v31 = a3[10];
  v32 = &a1[v31];
  v33 = &a2[v31];
  LOBYTE(v31) = a2[v31 + 16];
  v34 = *(_QWORD *)v32;
  v35 = *((_QWORD *)v32 + 1);
  v36 = v32[16];
  *(_OWORD *)v32 = *(_OWORD *)v33;
  v32[16] = v31;
  sub_100014658(v34, v35, v36);
  v37 = *((_QWORD *)v32 + 3);
  *((_QWORD *)v32 + 3) = *((_QWORD *)v33 + 3);
  swift_bridgeObjectRelease(v37);
  v38 = a3[12];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v41 = *((_QWORD *)v39 + 1);
  v43 = *(_QWORD *)v40;
  v42 = *((_QWORD *)v40 + 1);
  *(_QWORD *)v39 = v43;
  *((_QWORD *)v39 + 1) = v42;
  swift_release(v41);
  v44 = a3[13];
  v45 = &a1[v44];
  v46 = &a2[v44];
  v47 = *((_QWORD *)v45 + 1);
  v49 = *(_QWORD *)v46;
  v48 = *((_QWORD *)v46 + 1);
  *(_QWORD *)v45 = v49;
  *((_QWORD *)v45 + 1) = v48;
  swift_release(v47);
  v50 = a3[14];
  v51 = &a1[v50];
  v52 = &a2[v50];
  *(_OWORD *)v51 = *(_OWORD *)v52;
  v53 = *((_QWORD *)v51 + 2);
  *((_QWORD *)v51 + 2) = *((_QWORD *)v52 + 2);
  swift_release(v53);
  return a1;
}

uint64_t sub_100067E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100067E38);
}

uint64_t sub_100067E38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = sub_1000187A4(&qword_1000B5A10);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1000187A4(&qword_1000B63F0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_10:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for Text.Measurements(0);
    v12 = *(_QWORD *)(v8 - 8);
    v13 = a3[9];
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a1 + a3[7] + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100067F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100067F1C);
}

uint64_t sub_100067F1C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_1000187A4(&qword_1000B5A10);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_1000187A4(&qword_1000B63F0);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[7] + 8) = (a2 - 1);
        return result;
      }
      v10 = type metadata accessor for Text.Measurements(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[9];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100067FF0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[11];

  sub_100003770(319, (unint64_t *)&unk_1000B5A80, (uint64_t (*)(uint64_t))&type metadata accessor for BackgroundProminence);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100003770(319, (unint64_t *)&qword_1000B6460, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = "\t";
      v8[3] = &unk_10007BFC8;
      v8[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6 = type metadata accessor for Text.Measurements(319);
      if (v7 <= 0x3F)
      {
        v8[5] = *(_QWORD *)(v6 - 8) + 64;
        v8[6] = &unk_10007C230;
        v8[7] = (char *)&value witness table for Builtin.Int64 + 64;
        v8[8] = &unk_10007C248;
        v8[9] = &unk_10007C248;
        v8[10] = &unk_10007C260;
        swift_initStructMetadata(a1, 256, 11, v8, a1 + 16);
      }
    }
  }
}

uint64_t *sub_1000680FC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_1000187A4(&qword_1000B41C0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_1000187A4(&qword_1000B5950);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for BackgroundProminence(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = a3[6];
    v24 = a3[7];
    v25 = (uint64_t *)((char *)a1 + v23);
    v26 = (uint64_t *)((char *)a2 + v23);
    v28 = *v26;
    v27 = (void *)v26[1];
    *v25 = v28;
    v25[1] = v27;
    v29 = *(void **)((char *)a2 + v24);
    *(uint64_t *)((char *)a1 + v24) = (uint64_t)v29;
    v30 = v27;
    v31 = v29;
  }
  return a1;
}

void sub_100068270(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_1000187A4(&qword_1000B5950);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for BackgroundProminence(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }

}

uint64_t *sub_100068348(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;

  v6 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = sub_1000187A4(&qword_1000B5950);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for BackgroundProminence(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[6];
  v22 = a3[7];
  v23 = (uint64_t *)((char *)a1 + v21);
  v24 = (uint64_t *)((char *)a2 + v21);
  v26 = *v24;
  v25 = (void *)v24[1];
  *v23 = v26;
  v23[1] = v25;
  v27 = *(void **)((char *)a2 + v22);
  *(uint64_t *)((char *)a1 + v22) = (uint64_t)v27;
  v28 = v25;
  v29 = v27;
  return a1;
}

uint64_t *sub_100068490(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B41C0);
    v6 = sub_1000187A4(&qword_1000B41C0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_100011DE0((uint64_t)a1 + v12, &qword_1000B5950);
    v15 = sub_1000187A4(&qword_1000B5950);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for BackgroundProminence(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = a3[6];
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  *v22 = *v23;
  v24 = (void *)v23[1];
  v25 = (void *)v22[1];
  v22[1] = v24;
  v26 = v24;

  v27 = a3[7];
  v28 = *(void **)((char *)a2 + v27);
  v29 = *(void **)((char *)a1 + v27);
  *(uint64_t *)((char *)a1 + v27) = (uint64_t)v28;
  v30 = v28;

  return a1;
}

char *sub_10006861C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_1000187A4(&qword_1000B5950);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for BackgroundProminence(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];
  return a1;
}

char *sub_10006874C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B41C0);
    v6 = sub_1000187A4(&qword_1000B41C0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100011DE0((uint64_t)&a1[v8], &qword_1000B5950);
    v11 = sub_1000187A4(&qword_1000B5950);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for BackgroundProminence(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v17 = *(_QWORD *)v15;
  v16 = *((_QWORD *)v15 + 1);
  v18 = (void *)*((_QWORD *)v14 + 1);
  *(_QWORD *)v14 = v17;
  *((_QWORD *)v14 + 1) = v16;

  v19 = a3[7];
  v20 = *(void **)&a1[v19];
  *(_QWORD *)&a1[v19] = *(_QWORD *)&a2[v19];

  return a1;
}

uint64_t sub_1000688C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000688CC);
}

uint64_t sub_1000688CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_1000187A4(&qword_1000B45E0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1000187A4(&qword_1000B5A10);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100068980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006898C);
}

uint64_t sub_10006898C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_1000187A4(&qword_1000B45E0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_1000187A4(&qword_1000B5A10);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

void sub_100068A3C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_100003770(319, (unint64_t *)&qword_1000B4650, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100003770(319, (unint64_t *)&unk_1000B5A80, (uint64_t (*)(uint64_t))&type metadata accessor for BackgroundProminence);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_10007BFC8;
      v6[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t sub_100068AF8()
{
  return sub_1000086E8(&qword_1000B67A8, &qword_1000B67B0, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_100068B24(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008F438, 1);
}

uint64_t sub_100068B34(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008F410, 1);
}

uint64_t sub_100068B58(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TipListItemTipBodyView(0) - 8) + 80);
  return sub_100066BB8(v2 + ((v5 + 16) & ~v5), a1, a2);
}

uint64_t sub_100068BA8()
{
  type metadata accessor for TipListItemTipBodyView(0);
  return sub_100066F08();
}

unint64_t sub_100068BD8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000B67F8;
  if (!qword_1000B67F8)
  {
    v1 = sub_1000176F8(&qword_1000B67E0);
    v2[0] = sub_1000176F8(&qword_1000B67D0);
    v2[1] = sub_1000086E8(&qword_1000B67F0, &qword_1000B67D0, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.readSize(onChange:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B67F8);
  }
  return result;
}

unint64_t sub_100068C90()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000B6830;
  if (!qword_1000B6830)
  {
    v1 = sub_1000176F8(&qword_1000B5308);
    v2[0] = sub_1000176F8(&qword_1000B67B8);
    v2[1] = sub_1000086E8(&qword_1000B67C8, &qword_1000B67B8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.hyphenationFactor(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B6830);
  }
  return result;
}

uint64_t sub_100068D44()
{
  return sub_1000086E8(&qword_1000B6838, &qword_1000B6828, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
}

uint64_t *sub_100068D70(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_1000187A4(&qword_1000B5260);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_1000187A4(&qword_1000B41C0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = a3[6];
    v24 = a3[7];
    v25 = (uint64_t *)((char *)a1 + v23);
    v26 = (uint64_t *)((char *)a2 + v23);
    v28 = *v26;
    v27 = (void *)v26[1];
    *v25 = v28;
    v25[1] = v27;
    v29 = *(void **)((char *)a2 + v24);
    *(uint64_t *)((char *)a1 + v24) = (uint64_t)v29;
    v30 = v27;
    v31 = v29;
  }
  return a1;
}

uint64_t *sub_100068EE4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B5260);
    v6 = sub_1000187A4(&qword_1000B5260);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_100011DE0((uint64_t)a1 + v12, &qword_1000B41C0);
    v15 = sub_1000187A4(&qword_1000B41C0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = a3[6];
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  *v22 = *v23;
  v24 = (void *)v23[1];
  v25 = (void *)v22[1];
  v22[1] = v24;
  v26 = v24;

  v27 = a3[7];
  v28 = *(void **)((char *)a2 + v27);
  v29 = *(void **)((char *)a1 + v27);
  *(uint64_t *)((char *)a1 + v27) = (uint64_t)v28;
  v30 = v28;

  return a1;
}

char *sub_100069070(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_1000187A4(&qword_1000B5260);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];
  return a1;
}

char *sub_1000691A0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;

  if (a1 != a2)
  {
    sub_100011DE0((uint64_t)a1, &qword_1000B5260);
    v6 = sub_1000187A4(&qword_1000B5260);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100011DE0((uint64_t)&a1[v8], &qword_1000B41C0);
    v11 = sub_1000187A4(&qword_1000B41C0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v17 = *(_QWORD *)v15;
  v16 = *((_QWORD *)v15 + 1);
  v18 = (void *)*((_QWORD *)v14 + 1);
  *(_QWORD *)v14 = v17;
  *((_QWORD *)v14 + 1) = v16;

  v19 = a3[7];
  v20 = *(void **)&a1[v19];
  *(_QWORD *)&a1[v19] = *(_QWORD *)&a2[v19];

  return a1;
}

uint64_t sub_100069314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100069320);
}

uint64_t sub_100069320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_1000187A4(&qword_1000B53A8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1000187A4(&qword_1000B45E0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_1000693D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000693E0);
}

uint64_t sub_1000693E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_1000187A4(&qword_1000B53A8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_1000187A4(&qword_1000B45E0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100069490(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  result = type metadata accessor for UserGuideListItemView(0);
  v3 = *(_QWORD *)(a1 + *(int *)(result + 24) + 8) + OBJC_IVAR___CollectionListViewModel_userGuideHandler;
  v4 = *(void (**)(uint64_t))v3;
  if (*(_QWORD *)v3)
  {
    v5 = *(_QWORD *)(v3 + 8);
    v6 = *(_QWORD *)(a1 + *(int *)(result + 28));
    swift_retain(v5);
    v4(v6);
    return sub_100005500((uint64_t)v4, v5);
  }
  return result;
}

uint64_t sub_100069514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v4 = sub_1000187A4(&qword_1000B68E8);
  return sub_10006982C(a1, a2 + *(int *)(v4 + 44));
}

uint64_t sub_100069560(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  __chkstk_darwin(a1);
  v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100069654(v1, (uint64_t)v4);
  v5 = *(unsigned __int8 *)(v2 + 80);
  v6 = (v5 + 16) & ~v5;
  v7 = swift_allocObject(&unk_1000A4FA0, v6 + v3, v5 | 7);
  sub_1000697B4((uint64_t)v4, v7 + v6);
  v12 = v1;
  v8 = sub_1000187A4(&qword_1000B68D8);
  v9 = sub_1000086E8(&qword_1000B68E0, &qword_1000B68D8, (uint64_t)&protocol conformance descriptor for HStack<A>);
  return Button.init(action:label:)(sub_1000697F8, v7, sub_100069824, v11, v8, v9);
}

uint64_t sub_100069654(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UserGuideListItemView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100069698()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for UserGuideListItemView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_1000187A4(&qword_1000B5260);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)((char *)v6 + v1[5]);
  v10 = sub_1000187A4(&qword_1000B41C0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }

  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1000697B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UserGuideListItemView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000697F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UserGuideListItemView(0) - 8) + 80);
  return sub_100069490(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_100069824@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100069514(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10006982C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v77[2];
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t KeyPath;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[2];
  __int128 v87;
  __int128 v88;
  __int128 v89;

  v85 = a2;
  v77[0] = sub_1000187A4(&qword_1000B68F0);
  __chkstk_darwin(v77[0]);
  v4 = (char *)v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000187A4(&qword_1000B68F8);
  __chkstk_darwin(v5);
  v7 = (char *)v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_1000187A4(&qword_1000B6900);
  __chkstk_darwin(v78);
  v9 = (char *)v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_1000187A4(&qword_1000B6908);
  v10 = __chkstk_darwin(v80);
  v84 = (uint64_t)v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v77 - v13;
  __chkstk_darwin(v12);
  v79 = (uint64_t)v77 - v15;
  v16 = sub_1000187A4(&qword_1000B42D8);
  __chkstk_darwin(v16);
  v18 = (char *)v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UserGuideListItemView(0);
  v77[1] = *(int *)(v19 + 28);
  v20 = UserGuide.symbol.getter();
  v22 = Image.init(_internalSystemName:)(v20, v21);
  v83 = v22;
  v23 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v18, 1, 1, v23);
  v24 = static Font.system(size:weight:design:)(0, 1, v18, 22.0);
  v81 = v24;
  sub_100011DE0((uint64_t)v18, &qword_1000B42D8);
  KeyPath = swift_getKeyPath(&unk_10007C450);
  *(_QWORD *)&v87 = v22;
  *((_QWORD *)&v87 + 1) = KeyPath;
  *(_QWORD *)&v88 = v24;
  sub_100069DA0(a1, (uint64_t *)&v87, (uint64_t)v4);
  v25 = sub_10006A100();
  View.accessibilityHidden(_:)(1, v77[0], v25);
  v26 = sub_100011DE0((uint64_t)v4, &qword_1000B68F0);
  v27 = static Edge.Set.leading.getter(v26);
  v28 = *(void **)(a1 + *(int *)(v19 + 24) + 8);
  v29 = swift_getKeyPath(&unk_10007C490);
  v30 = swift_getKeyPath(&unk_10007C4B8);
  v31 = v28;
  static Published.subscript.getter(v86, v31, v29, v30);

  swift_release(v29);
  swift_release(v30);
  v32 = -4.0;
  if (LOBYTE(v86[0]))
    v32 = -8.0;
  v33 = EdgeInsets.init(_all:)(v32);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  sub_1000121BC((uint64_t)v7, (uint64_t)v9, &qword_1000B68F8);
  v40 = &v9[*(int *)(v78 + 36)];
  *v40 = v27;
  *((double *)v40 + 1) = v33;
  *((_QWORD *)v40 + 2) = v35;
  *((_QWORD *)v40 + 3) = v37;
  *((_QWORD *)v40 + 4) = v39;
  v40[40] = 0;
  v41 = sub_100011DE0((uint64_t)v7, &qword_1000B68F8);
  v42 = static Alignment.center.getter(v41);
  _FrameLayout.init(width:height:alignment:)(&v87, 0x4040000000000000, 0, 0x4040000000000000, 0, v42, v43);
  sub_1000121BC((uint64_t)v9, (uint64_t)v14, &qword_1000B6900);
  v44 = &v14[*(int *)(v80 + 36)];
  v45 = v88;
  *(_OWORD *)v44 = v87;
  *((_OWORD *)v44 + 1) = v45;
  *((_OWORD *)v44 + 2) = v89;
  sub_100011DE0((uint64_t)v9, &qword_1000B6900);
  v46 = v79;
  v47 = sub_10006A1F0((uint64_t)v14, v79);
  v86[0] = UserGuide.text.getter(v47);
  v86[1] = v48;
  v49 = sub_100014614();
  v50 = Text.init<A>(_:)(v86, &type metadata for String, v49);
  v52 = v51;
  v54 = v53;
  v56 = v55 & 1;
  v57 = static Color.primary.getter(v50);
  v58 = Text.foregroundColor(_:)(v57, v50, v52, v56, v54);
  v60 = v59;
  v62 = v61;
  v64 = v63;
  swift_release(v57);
  sub_100014658(v50, v52, v56);
  v65 = swift_bridgeObjectRelease(v54);
  LOBYTE(v50) = static Edge.Set.trailing.getter(v65);
  v66 = EdgeInsets.init(_all:)(12.0);
  v68 = v67;
  v70 = v69;
  v72 = v71;
  v73 = v84;
  sub_1000121BC(v46, v84, &qword_1000B6908);
  LOBYTE(v86[0]) = v62 & 1;
  v74 = v85;
  sub_1000121BC(v73, v85, &qword_1000B6908);
  v75 = v74 + *(int *)(sub_1000187A4(&qword_1000B6938) + 48);
  *(_QWORD *)v75 = v58;
  *(_QWORD *)(v75 + 8) = v60;
  *(_BYTE *)(v75 + 16) = v62 & 1;
  *(_QWORD *)(v75 + 24) = v64;
  *(_BYTE *)(v75 + 32) = v50;
  *(double *)(v75 + 40) = v66;
  *(_QWORD *)(v75 + 48) = v68;
  *(_QWORD *)(v75 + 56) = v70;
  *(_QWORD *)(v75 + 64) = v72;
  *(_BYTE *)(v75 + 72) = 0;
  sub_100031A98(v58, v60, v62 & 1);
  swift_bridgeObjectRetain(v64);
  sub_100031A98(v58, v60, v62 & 1);
  swift_bridgeObjectRetain(v64);
  swift_release(v81);
  swift_release(KeyPath);
  swift_release(v83);
  sub_100014658(v58, v60, v62 & 1);
  swift_bridgeObjectRelease(v64);
  sub_100011DE0(v46, &qword_1000B6908);
  sub_100014658(v58, v60, v86[0]);
  swift_bridgeObjectRelease(v64);
  return sub_100011DE0(v73, &qword_1000B6908);
}

uint64_t sub_100069DA0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t KeyPath;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v41 = a3;
  v40 = sub_1000187A4(&qword_1000B6940);
  __chkstk_darwin(v40);
  v6 = (uint64_t *)((char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_1000187A4(&qword_1000B6930);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)(a1 + *(int *)(type metadata accessor for UserGuideListItemView(0) + 24) + 8);
  KeyPath = swift_getKeyPath(&unk_10007C490);
  v13 = swift_getKeyPath(&unk_10007C4B8);
  v14 = v11;
  static Published.subscript.getter(&v42, v14, KeyPath, v13);

  swift_release(KeyPath);
  v15 = swift_release(v13);
  if (v42 == 1)
  {
    v16 = UserGuide.gradient.getter(v15);
    v17 = __chkstk_darwin(v16);
    *(&v39 - 2) = (uint64_t)a2;
    v18 = static UnitPoint.topTrailing.getter(v17);
    v20 = v19;
    v21 = static UnitPoint.bottomLeading.getter();
    v23 = v22;
    v24 = sub_1000187A4(&qword_1000B5510);
    v25 = sub_1000154C8();
    TipGradientView.init(_:startPoint:endPoint:gradientView:)(v16, sub_10006A240, &v39 - 4, v24, v25, v18, v20, v21, v23);
    (*(void (**)(_QWORD *, char *, uint64_t))(v8 + 16))(v6, v10, v7);
    swift_storeEnumTagMultiPayload(v6, v40, 0);
    v26 = sub_1000187A4(&qword_1000B5580);
    v27 = sub_1000086E8(&qword_1000B6928, &qword_1000B6930, (uint64_t)&protocol conformance descriptor for TipGradientView<A>);
    v28 = sub_100019598();
    _ConditionalContent<>.init(storage:)(v6, v7, v26, v27, v28);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    v30 = *a2;
    v31 = a2[1];
    v32 = a2[2];
    v33 = objc_msgSend((id)objc_opt_self(UIColor), "systemBlueColor");
    v34 = Color.init(_:)(v33);
    v35 = swift_getKeyPath(&unk_10007C4D8);
    *v6 = v30;
    v6[1] = v31;
    v6[2] = v32;
    v6[3] = v35;
    v6[4] = v34;
    swift_storeEnumTagMultiPayload(v6, v40, 1);
    swift_retain(v32);
    swift_retain(v30);
    swift_retain(v31);
    v36 = sub_1000187A4(&qword_1000B5580);
    v37 = sub_1000086E8(&qword_1000B6928, &qword_1000B6930, (uint64_t)&protocol conformance descriptor for TipGradientView<A>);
    v38 = sub_100019598();
    return _ConditionalContent<>.init(storage:)(v6, v7, v36, v37, v38);
  }
}

uint64_t sub_10006A0C0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  *a2 = v2;
  a2[1] = v3;
  a2[2] = v4;
  swift_retain(v4);
  swift_retain(v2);
  return swift_retain(v3);
}

unint64_t sub_10006A100()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B6910;
  if (!qword_1000B6910)
  {
    v1 = sub_1000176F8(&qword_1000B68F0);
    sub_10006A164();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B6910);
  }
  return result;
}

unint64_t sub_10006A164()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B6918;
  if (!qword_1000B6918)
  {
    v1 = sub_1000176F8(&qword_1000B6920);
    sub_1000086E8(&qword_1000B6928, &qword_1000B6930, (uint64_t)&protocol conformance descriptor for TipGradientView<A>);
    sub_100019598();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B6918);
  }
  return result;
}

uint64_t sub_10006A1F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000187A4(&qword_1000B6908);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006A240@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10006A0C0(*(uint64_t **)(v1 + 16), a1);
}

uint64_t sub_10006A248()
{
  return sub_1000086E8(&qword_1000B6948, &qword_1000B6950, (uint64_t)&protocol conformance descriptor for Button<A>);
}

ValueMetadata *type metadata accessor for TipSearchResultsItemsView()
{
  return &type metadata for TipSearchResultsItemsView;
}

uint64_t sub_10006A284(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008F4CC, 1);
}

uint64_t sub_10006A294()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[16];

  v0 = type metadata accessor for Locale(0);
  __chkstk_darwin(v0);
  v2 = &v9[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v3);
  v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000027, 0x800000010008D800);
  static Locale.current.getter(v6);
  result = String.init(localized:table:bundle:locale:comment:)(v5, 0, 0, 0, v2, "Search Result Section Header Title for Tips", 43, 2);
  qword_1000B9128 = result;
  unk_1000B9130 = v8;
  return result;
}

uint64_t sub_10006A378(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t KeyPath;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *);
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v3 = type metadata accessor for SearchResult.Item.Category(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_10007C660);
  v8 = swift_getKeyPath(&unk_10007C688);
  v9 = a2;
  static Published.subscript.getter(&v17, v9, KeyPath, v8);
  swift_release(KeyPath);
  v10 = swift_release(v8);
  v11 = v17;
  v12 = (void (*)(char *))dispatch thunk of SearchResultsModel.searchResultsSeeAllHandler.getter(v10);
  v14 = v13;

  result = swift_release(v11);
  if (v12)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for SearchResult.Item.Category.tip(_:), v3);
    v12(v6);
    sub_100005500((uint64_t)v12, v14);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

uint64_t sub_10006A498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, char a8)
{
  uint64_t KeyPath;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t OpaqueTypeConformance2;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[4];

  v28[0] = a1;
  v28[1] = a2;
  v28[2] = a3;
  v28[3] = a4;
  KeyPath = swift_getKeyPath(&unk_10007C5A8);
  v17 = swift_allocObject(&unk_1000A50A0, 80, 7);
  *(_QWORD *)(v17 + 16) = a5;
  *(_QWORD *)(v17 + 24) = a6;
  *(_QWORD *)(v17 + 32) = a7;
  *(_BYTE *)(v17 + 40) = a8;
  *(_QWORD *)(v17 + 48) = a1;
  *(_QWORD *)(v17 + 56) = a2;
  *(_QWORD *)(v17 + 64) = a3;
  *(_QWORD *)(v17 + 72) = a4;
  swift_unknownObjectRetain_n(a1, 2);
  v18 = a6;
  v19 = sub_1000187A4(&qword_1000B69F0);
  v20 = sub_1000187A4(&qword_1000B69F8);
  v21 = sub_1000086E8(&qword_1000B6A00, &qword_1000B69F0, (uint64_t)&protocol conformance descriptor for ArraySlice<A>);
  v22 = sub_1000176F8(&qword_1000B69D8);
  v26 = sub_1000176F8(&qword_1000B69E0);
  v27 = sub_10006AD9C();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v26, &opaque type descriptor for <<opaque return type of View.listRowSeparator(_:edges:)>>, 1);
  v26 = v22;
  v27 = OpaqueTypeConformance2;
  v24 = swift_getOpaqueTypeConformance2(&v26, &opaque type descriptor for <<opaque return type of View.listRowSeparator(_:edges:)>>, 1);
  return ForEach<>.init(_:id:content:)(v28, KeyPath, sub_10006AE6C, v17, v19, v20, v21, &protocol witness table for String, v24);
}

uint64_t sub_10006A618@<X0>(void **a1@<X0>, void *a2@<X2>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, unint64_t a6)
{
  int *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  int64_t v38;
  void *v39;
  id v40;
  id v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  id v47;
  id v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t OpaqueTypeConformance2;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[2];

  v56 = a3;
  v62 = a5;
  v63 = a6;
  v64 = a4;
  v8 = (int *)type metadata accessor for TipListItemView(0);
  v9 = __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v13 = (char *)&v56 - v12;
  v65 = sub_1000187A4(&qword_1000B69E0);
  __chkstk_darwin(v65);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000187A4(&qword_1000B69D8);
  v60 = *(_QWORD *)(v16 - 8);
  v61 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000187A4(&qword_1000B69F8);
  v58 = *(_QWORD *)(v19 - 8);
  v59 = v19;
  __chkstk_darwin(v19);
  v57 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *a1;
  *v11 = swift_getKeyPath(&unk_10007C5D0);
  v22 = sub_1000187A4(&qword_1000B41C0);
  swift_storeEnumTagMultiPayload(v11, v22, 0);
  v23 = (_QWORD *)((char *)v11 + v8[5]);
  v24 = type metadata accessor for TipListViewModel(0);
  v25 = sub_1000041E8(&qword_1000B4BE0, type metadata accessor for TipListViewModel, (uint64_t)&protocol conformance descriptor for TipNavigationViewModel);
  v26 = a2;
  v27 = v21;
  *v23 = ObservedObject.init(wrappedValue:)(v26, v24, v25);
  v23[1] = v28;
  *(_QWORD *)((char *)v11 + v8[6]) = v27;
  *(_QWORD *)((char *)v11 + v8[7]) = 3;
  sub_100040CD0((uint64_t)v11, (uint64_t)v13);
  KeyPath = swift_getKeyPath(&unk_10007C618);
  v30 = swift_getKeyPath(&unk_10007C640);
  v31 = v26;
  static Published.subscript.getter(v66, v31, KeyPath, v30);

  swift_release(KeyPath);
  v32 = swift_release(v30);
  if (LOBYTE(v66[0]) == 1)
  {
    v33 = static Color.clear.getter(v32);
    v66[0] = v33;
    swift_retain(v33);
    v34 = AnyView.init<A>(_:)(v66, &type metadata for Color, &protocol witness table for Color);
  }
  else
  {
    v34 = 0;
    v33 = 0;
  }
  sub_10006AEB0((uint64_t)v13, (uint64_t)v15);
  swift_release(v33);
  v35 = v65;
  *(_QWORD *)&v15[*(int *)(v65 + 36)] = v34;
  result = sub_100040D14((uint64_t)v13);
  v37 = v64;
  v38 = v63 >> 1;
  if (v63 >> 1 == v64)
    goto LABEL_8;
  if ((uint64_t)(v63 >> 1) <= v64)
  {
    __break(1u);
    goto LABEL_16;
  }
  v39 = *(void **)(v56 + 8 * v64);
  sub_100031C64();
  v40 = v27;
  v41 = v39;
  v42 = static NSObject.== infix(_:_:)(v41, v40);

  if ((v42 & 1) == 0)
LABEL_8:
    v43 = 0;
  else
    v43 = 2;
  v44 = static VerticalEdge.Set.top.getter();
  v45 = sub_10006AD9C();
  View.listRowSeparator(_:edges:)(v43, v44, v35, v45);
  result = sub_10006AEF4((uint64_t)v15);
  if (v38 == v37)
    goto LABEL_13;
  if (v38 > v37)
  {
    v46 = *(void **)(v56 + 8 * v38 - 8);
    sub_100031C64();
    v47 = v27;
    v48 = v46;
    v49 = static NSObject.== infix(_:_:)(v48, v47);

    if ((v49 & 1) != 0)
    {
      v50 = 2;
LABEL_14:
      v51 = static VerticalEdge.Set.bottom.getter();
      v66[0] = v35;
      v66[1] = v45;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v66, &opaque type descriptor for <<opaque return type of View.listRowSeparator(_:edges:)>>, 1);
      v53 = v57;
      v54 = v50;
      v55 = v61;
      View.listRowSeparator(_:edges:)(v54, v51, v61, OpaqueTypeConformance2);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v18, v55);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v58 + 32))(v62, v53, v59);
    }
LABEL_13:
    v50 = 0;
    goto LABEL_14;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_10006AA38()
{
  uint64_t v0;

  if (qword_1000B3FF8 != -1)
    swift_once(&qword_1000B3FF8, sub_10006A294);
  v0 = qword_1000B9128;
  swift_bridgeObjectRetain(unk_1000B9130);
  return v0;
}

uint64_t sub_10006AA94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v21[2];
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  char v30;

  v21[1] = a1;
  v21[0] = sub_1000187A4(&qword_1000B4240);
  __chkstk_darwin(v21[0]);
  v3 = (char *)v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)v1;
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_BYTE *)(v1 + 24);
  v7 = *(id *)(v1 + 8);
  v8 = dispatch thunk of TipNavigationViewModel.tips.getter(v7);

  v9 = sub_100031AB8(v5, v8);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  swift_bridgeObjectRelease(v8);
  v16 = v7;
  sub_1000302EC(v4, (uint64_t)v16, v5, v6);

  v23 = v9;
  v24 = v11;
  v25 = v13;
  v26 = v15;
  v27 = v4;
  v28 = v16;
  v29 = v5;
  v30 = v6;
  v17 = sub_1000187A4(&qword_1000B69C8);
  v18 = sub_100031700();
  v19 = sub_10006ACE0();
  Section<>.init(header:content:)(v3, sub_10006ACC8, v22, v21[0], v17, v18, v19);
  return swift_unknownObjectRelease(v9);
}

uint64_t sub_10006ABDC(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10006AC1C();
  return swift_getOpaqueTypeConformance2(v3, &unk_10008E70C, 1);
}

unint64_t sub_10006AC1C()
{
  unint64_t result;

  result = qword_1000B6958;
  if (!qword_1000B6958)
  {
    result = swift_getWitnessTable(&unk_10007C57C, &type metadata for TipSearchResultsItemsView);
    atomic_store(result, (unint64_t *)&qword_1000B6958);
  }
  return result;
}

unint64_t sub_10006AC60(uint64_t a1)
{
  unint64_t result;

  result = sub_10006AC84();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10006AC84()
{
  unint64_t result;

  result = qword_1000B69C0;
  if (!qword_1000B69C0)
  {
    result = swift_getWitnessTable(&unk_10007C52C, &type metadata for TipSearchResultsItemsView);
    atomic_store(result, (unint64_t *)&qword_1000B69C0);
  }
  return result;
}

uint64_t sub_10006ACC8()
{
  uint64_t v0;

  return sub_10006A498(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(void **)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
}

unint64_t sub_10006ACE0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  unint64_t v5;

  result = qword_1000B69D0;
  if (!qword_1000B69D0)
  {
    v1 = sub_1000176F8(&qword_1000B69C8);
    v2 = sub_1000176F8(&qword_1000B69D8);
    v4 = sub_1000176F8(&qword_1000B69E0);
    v5 = sub_10006AD9C();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.listRowSeparator(_:edges:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.listRowSeparator(_:edges:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B69D0);
  }
  return result;
}

unint64_t sub_10006AD9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B69E8;
  if (!qword_1000B69E8)
  {
    v1 = sub_1000176F8(&qword_1000B69E0);
    sub_1000041E8(&qword_1000B4EE8, type metadata accessor for TipListItemView, (uint64_t)&unk_10007BFE0);
    sub_1000086E8(&qword_1000B4290, &qword_1000B4298, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B69E8);
  }
  return result;
}

uint64_t sub_10006AE40()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10006AE6C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10006A618(a1, *(void **)(v2 + 24), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), a2, *(_QWORD *)(v2 + 72));
}

uint64_t sub_10006AEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TipListItemView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006AEF4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000187A4(&qword_1000B69E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10006AF40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B6A08;
  if (!qword_1000B6A08)
  {
    v1 = sub_1000176F8(&qword_1000B6A10);
    sub_100031700();
    sub_10006ACE0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B6A08);
  }
  return result;
}

uint64_t sub_10006AFB8(uint64_t a1)
{
  return sub_10006B048(a1, qword_1000B6A18, 0xD00000000000001BLL, 0x800000010008D940);
}

uint64_t sub_10006AFDC(uint64_t a1)
{
  return sub_10006B048(a1, qword_1000B6A30, 0xD000000000000015, 0x800000010008D920);
}

uint64_t sub_10006B000(uint64_t a1)
{
  return sub_10006B048(a1, qword_1000B6A48, 0xD000000000000017, 0x800000010008D900);
}

uint64_t sub_10006B024(uint64_t a1)
{
  return sub_10006B048(a1, qword_1000B6A60, 0xD000000000000011, 0x800000010008D8E0);
}

uint64_t sub_10006B048(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for PPTTestCase.Name(0);
  sub_10005A15C(v7, a2);
  sub_1000479CC(v7, (uint64_t)a2);
  return PPTTestCase.Name.init(_:)(a3, a4);
}

uint64_t sub_10006B0A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;

  v2 = v1;
  v51 = a1;
  v3 = type metadata accessor for ScrollVerticallyTestSupport(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PPTTestCase.Name(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000187A4(&qword_1000B6B18);
  v43 = *(_QWORD *)(v11 - 8);
  v44 = v11;
  __chkstk_darwin(v11);
  v52 = (uint64_t)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000187A4(&qword_1000B6B20);
  v46 = *(_QWORD *)(v13 - 8);
  v47 = v13;
  __chkstk_darwin(v13);
  v45 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000187A4(&qword_1000B6B28);
  v49 = *(_QWORD *)(v15 - 8);
  v50 = v15;
  __chkstk_darwin(v15);
  v48 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000B4000 != -1)
    swift_once(&qword_1000B4000, sub_10006AFB8);
  v17 = sub_1000479CC(v7, (uint64_t)qword_1000B6A18);
  v56 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v56(v10, v17, v7);
  sub_10006BDDC(v1, (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(unsigned __int8 *)(v4 + 80);
  v19 = ((v18 + 16) & ~v18) + v5;
  v20 = (v18 + 16) & ~v18;
  v54 = v18 | 7;
  v55 = v19;
  v21 = swift_allocObject(&unk_1000A5120, v19, v18 | 7);
  sub_10006BE24((uint64_t)v6, v21 + v20);
  v22 = sub_1000187A4(&qword_1000B6B30);
  v23 = sub_1000086E8(&qword_1000B6B38, &qword_1000B6B30, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  View.onTest(_:handler:)(v10, sub_10006BE68, v21, v22, v23);
  swift_release(v21);
  v24 = *(void (**)(char *, uint64_t))(v8 + 8);
  v24(v10, v7);
  if (qword_1000B4008 != -1)
    swift_once(&qword_1000B4008, sub_10006AFDC);
  v25 = sub_1000479CC(v7, (uint64_t)qword_1000B6A30);
  v56(v10, v25, v7);
  sub_10006BDDC(v1, (uint64_t)v6);
  v26 = swift_allocObject(&unk_1000A5148, v55, v54);
  sub_10006BE24((uint64_t)v6, v26 + v20);
  v57 = v22;
  v58 = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v57, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v53 = v20;
  v29 = v44;
  v28 = v45;
  v30 = v52;
  View.onTest(_:handler:)(v10, sub_10006BE68, v26, v44, OpaqueTypeConformance2);
  swift_release(v26);
  v24(v10, v7);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v30, v29);
  v31 = v2;
  if (qword_1000B4010 != -1)
    swift_once(&qword_1000B4010, sub_10006B000);
  v32 = sub_1000479CC(v7, (uint64_t)qword_1000B6A48);
  v56(v10, v32, v7);
  sub_10006BDDC(v2, (uint64_t)v6);
  v33 = swift_allocObject(&unk_1000A5170, v55, v54);
  sub_10006BE24((uint64_t)v6, v33 + v53);
  v57 = v29;
  v58 = OpaqueTypeConformance2;
  v34 = swift_getOpaqueTypeConformance2(&v57, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v52 = v31;
  v35 = v34;
  v37 = v47;
  v36 = v48;
  View.onTest(_:handler:)(v10, sub_10006BE68, v33, v47, v34);
  swift_release(v33);
  v24(v10, v7);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v28, v37);
  if (qword_1000B4018 != -1)
    swift_once(&qword_1000B4018, sub_10006B024);
  v38 = sub_1000479CC(v7, (uint64_t)qword_1000B6A60);
  v56(v10, v38, v7);
  sub_10006BDDC(v52, (uint64_t)v6);
  v39 = swift_allocObject(&unk_1000A5198, v55, v54);
  sub_10006BE24((uint64_t)v6, v39 + v53);
  v57 = v37;
  v58 = v35;
  v40 = swift_getOpaqueTypeConformance2(&v57, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v41 = v50;
  View.onTest(_:handler:)(v10, sub_10006BE68, v39, v50, v40);
  swift_release(v39);
  v24(v10, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v36, v41);
}

uint64_t sub_10006B5D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD aBlock[5];
  uint64_t v51;

  v46 = type metadata accessor for DispatchWorkItemFlags(0);
  v49 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v45 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v47 = *(_QWORD *)(v3 - 8);
  v48 = v3;
  __chkstk_darwin(v3);
  v44 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ScrollVerticallyTestSupport(0);
  v39 = *(_QWORD *)(v5 - 8);
  v6 = *(_QWORD *)(v39 + 64);
  __chkstk_darwin(v5);
  v38 = (uint64_t)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for PPTTestCase(0);
  v7 = *(_QWORD *)(v37 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v37);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTime(0);
  v11 = *(_QWORD *)(v10 - 8);
  v43 = v10;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v40 = (char *)&v37 - v15;
  PPTTestCase.startTest()();
  sub_100006578(0, (unint64_t *)&qword_1000B44A0, OS_dispatch_queue_ptr);
  v41 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)(v14, 0.2);
  v16 = *(void (**)(char *, uint64_t))(v11 + 8);
  v16(v14, v10);
  v17 = (uint64_t (*)(char *, uint64_t))v16;
  v18 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v37);
  v19 = v38;
  sub_10006BDDC(v42, v38);
  v20 = *(unsigned __int8 *)(v7 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = *(unsigned __int8 *)(v39 + 80);
  v23 = (v8 + v22 + v21) & ~v22;
  v24 = swift_allocObject(&unk_1000A51C0, v23 + v6, v20 | v22 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v24 + v21, v9, v18);
  sub_10006BE24(v19, v24 + v23);
  aBlock[4] = sub_10006BF70;
  v51 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100003DA8;
  aBlock[3] = &unk_1000A51D8;
  v25 = _Block_copy(aBlock);
  v26 = swift_release(v51);
  v27 = v44;
  static DispatchQoS.unspecified.getter(v26);
  aBlock[0] = _swiftEmptyArrayStorage;
  v28 = sub_10004B018();
  v29 = sub_1000187A4(&qword_1000B44B0);
  v30 = sub_1000086E8((unint64_t *)&qword_1000B44B8, &qword_1000B44B0, (uint64_t)&protocol conformance descriptor for [A]);
  v31 = v45;
  v32 = v29;
  v33 = v46;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v32, v30, v46, v28);
  v35 = v40;
  v34 = (void *)v41;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v40, v27, v31, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v49 + 8))(v31, v33);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v27, v48);
  return v17(v35, v43);
}

uint64_t sub_10006B95C()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_10006B988(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  __int128 v16[2];
  uint64_t v17;
  id v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v18 = *(id *)(v5 + *a4);
  v10 = sub_100006578(0, (unint64_t *)&qword_1000B4800, UIViewController_ptr);
  v11 = v18;
  v12 = sub_1000187A4(&qword_1000B6A78);
  if (swift_dynamicCast(v16, &v18, v10, v12, 6))
  {
    sub_10006BBB0(v16, (uint64_t)v19);
    v13 = v20;
    v14 = v21;
    sub_100033DC0(v19, v20);
    dispatch thunk of PPTTestHost.runTest(_:options:)(a1, a2, a3, v13, v14);
    return sub_100033DE4(v19);
  }
  else
  {
    v17 = 0;
    memset(v16, 0, sizeof(v16));
    sub_10006BB70((uint64_t)v16);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x800000010008D8B0, "Tips/ScrollVerticallyTestSupport.swift", 38, 2, a5, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_10006BAC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v12 = v11;
  v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a4, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v14 = a1;
  sub_10006B988(v10, v12, v13, a5, a6);

  swift_bridgeObjectRelease(v12);
  return swift_bridgeObjectRelease(v13);
}

uint64_t sub_10006BB70(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000187A4(&qword_1000B6A80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006BBB0(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10006BBC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ScrollViewProxy(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_10006BC04(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ScrollViewProxy(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_10006BC38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ScrollViewProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_10006BC7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ScrollViewProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_10006BCC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ScrollViewProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_10006BD04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ScrollViewProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_10006BD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006BD54);
}

uint64_t sub_10006BD54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ScrollViewProxy(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10006BD90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006BD9C);
}

uint64_t sub_10006BD9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ScrollViewProxy(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_10006BDDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ScrollVerticallyTestSupport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006BE24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ScrollVerticallyTestSupport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006BE78(uint64_t a1)
{
  type metadata accessor for ScrollVerticallyTestSupport(0);
  return sub_10006B5D0(a1);
}

uint64_t sub_10006BEB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for PPTTestCase(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = *(_QWORD *)(type metadata accessor for ScrollVerticallyTestSupport(0) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v4 + v5 + v7) & ~v7;
  v9 = v8 + *(_QWORD *)(v6 + 64);
  v10 = v3 | v7 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v11 = type metadata accessor for ScrollViewProxy(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v0 + v8, v11);
  return swift_deallocObject(v0, v9, v10);
}

uint64_t sub_10006BF70()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for PPTTestCase(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ScrollVerticallyTestSupport(0) - 8) + 80);
  return PPTTestCase.performScrollTest(_:)(v0 + ((v2 + v3 + v4) & ~v4));
}

uint64_t sub_10006BFD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v0 = sub_1000176F8(&qword_1000B6B28);
  v1 = sub_1000176F8(&qword_1000B6B20);
  v2 = sub_1000176F8(&qword_1000B6B18);
  v7 = sub_1000176F8(&qword_1000B6B30);
  v8 = sub_1000086E8(&qword_1000B6B38, &qword_1000B6B30, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v7 = v2;
  v8 = OpaqueTypeConformance2;
  v4 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v7 = v1;
  v8 = v4;
  v5 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v7 = v0;
  v8 = v5;
  return swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
}

uint64_t sub_10006C0BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD v21[2];

  v21[0] = a3;
  v5 = sub_1000187A4(&qword_1000B6B40);
  __chkstk_darwin(v5);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttributeContainer(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v12(v11, a1, v8);
  v13 = type metadata accessor for AttributeScopes.UIKitAttributes(0);
  v14 = sub_10006C290();
  v15 = Dictionary<>.init<A>(_:including:)(v11, v13, v13, v14);
  v16 = swift_bridgeObjectRetain(a2);
  v17 = sub_10006C2D8(v16, v15);
  AttributeContainer.init<A>(_:including:)(v17, v13, v13, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  v19 = v21[0];
  if (v18 != 1)
    return (*(uint64_t (**)(_QWORD, char *, uint64_t))(v9 + 32))(v21[0], v7, v8);
  sub_100011DE0((uint64_t)v7, &qword_1000B6B40);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v12)(v19, a1, v8);
}

unint64_t sub_10006C290()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B6B48;
  if (!qword_1000B6B48)
  {
    v1 = type metadata accessor for AttributeScopes.UIKitAttributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.UIKitAttributes, v1);
    atomic_store(result, (unint64_t *)&qword_1000B6B48);
  }
  return result;
}

uint64_t sub_10006C2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  v8 = a2;
  sub_10006C390(a1, (uint64_t)sub_10006C354, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v8);
  v6 = v8;
  swift_bridgeObjectRelease(0x8000000000000000);
  if (v2)
    swift_bridgeObjectRelease(v6);
  return v6;
}

id sub_10006C354@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;

  v4 = *a1;
  sub_10004A184((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v4;
  return v4;
}

uint64_t sub_10006C390(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  void *i;
  _QWORD *v30;
  _QWORD *v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  _OWORD v45[2];
  _OWORD v46[2];
  void *v47;
  _OWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v9 = -1 << *(_BYTE *)(a1 + 32);
  v10 = ~v9;
  v11 = *(_QWORD *)(a1 + 64);
  v12 = -v9;
  v49 = a1;
  v50 = a1 + 64;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  else
    v13 = -1;
  v51 = v10;
  v52 = 0;
  v53 = v13 & v11;
  v54 = a2;
  v55 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  sub_10006C6B8((uint64_t)&v47);
  v14 = v47;
  if (!v47)
    goto LABEL_27;
  sub_100018DC8(v48, v46);
  v15 = *(_QWORD **)a5;
  v17 = sub_1000044D4((uint64_t)v14);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v21 = v16;
  if (v15[3] >= v20)
  {
    if ((a4 & 1) != 0)
    {
      if ((v16 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      sub_100049FC0();
      if ((v21 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v25 = *(_QWORD **)a5;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * (v17 >> 6) + 64) |= 1 << v17;
    *(_QWORD *)(v25[6] + 8 * v17) = v14;
    sub_100018DC8(v46, (_OWORD *)(v25[7] + 32 * v17));
    v26 = v25[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v25[2] = v28;
LABEL_16:
    sub_10006C6B8((uint64_t)&v47);
    for (i = v47; v47; i = v47)
    {
      sub_100018DC8(v48, v46);
      v31 = *(_QWORD **)a5;
      v33 = sub_1000044D4((uint64_t)i);
      v34 = v31[2];
      v35 = (v32 & 1) == 0;
      v36 = v34 + v35;
      if (__OFADD__(v34, v35))
        goto LABEL_28;
      v37 = v32;
      if (v31[3] < v36)
      {
        sub_1000494C0(v36, 1);
        v38 = sub_1000044D4((uint64_t)i);
        if ((v37 & 1) != (v39 & 1))
          goto LABEL_30;
        v33 = v38;
      }
      if ((v37 & 1) != 0)
      {
        sub_10004A184((uint64_t)v46, (uint64_t)v45);
        sub_100033DE4(v46);

        v30 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v33);
        sub_100033DE4(v30);
        sub_100018DC8(v45, v30);
      }
      else
      {
        v40 = *(_QWORD **)a5;
        *(_QWORD *)(*(_QWORD *)a5 + 8 * (v33 >> 6) + 64) |= 1 << v33;
        *(_QWORD *)(v40[6] + 8 * v33) = i;
        sub_100018DC8(v46, (_OWORD *)(v40[7] + 32 * v33));
        v41 = v40[2];
        v27 = __OFADD__(v41, 1);
        v42 = v41 + 1;
        if (v27)
          goto LABEL_29;
        v40[2] = v42;
      }
      sub_10006C6B8((uint64_t)&v47);
    }
LABEL_27:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_10006C888(v49);
    return swift_release(v55);
  }
  sub_1000494C0(v20, a4 & 1);
  v22 = sub_1000044D4((uint64_t)v14);
  if ((v21 & 1) == (v23 & 1))
  {
    v17 = v22;
    if ((v21 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    sub_10004A184((uint64_t)v46, (uint64_t)v45);
    sub_100033DE4(v46);

    v24 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v17);
    sub_100033DE4(v24);
    sub_100018DC8(v45, v24);
    goto LABEL_16;
  }
LABEL_30:
  type metadata accessor for Key(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v44);
  __break(1u);
  return result;
}

uint64_t sub_10006C6B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  void (*v18)(_OWORD *);
  uint64_t result;
  _OWORD v20[2];
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v10);
    sub_10004A184(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v24 + 8);
    *(_QWORD *)&v24[0] = v11;
    v12 = v11;
    goto LABEL_23;
  }
  v13 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v14 = (unint64_t)(v6 + 64) >> 6;
  if (v13 < v14)
  {
    v15 = *(_QWORD *)(v4 + 8 * v13);
    if (v15)
    {
LABEL_7:
      v9 = (v15 - 1) & v15;
      v10 = __clz(__rbit64(v15)) + (v13 << 6);
      v7 = v13;
      goto LABEL_3;
    }
    v16 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v14)
    {
      v15 = *(_QWORD *)(v4 + 8 * v16);
      if (v15)
      {
LABEL_10:
        v13 = v16;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v14)
      {
        v15 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v15)
        {
          v13 = v5 + 3;
          goto LABEL_7;
        }
        v16 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v14)
        {
          v15 = *(_QWORD *)(v4 + 8 * v16);
          if (v15)
            goto LABEL_10;
          v13 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v14)
          {
            v15 = *(_QWORD *)(v4 + 8 * v13);
            if (v15)
              goto LABEL_7;
            v7 = v14 - 1;
            v17 = v5 + 6;
            while (v14 != v17)
            {
              v15 = *(_QWORD *)(v4 + 8 * v17++);
              if (v15)
              {
                v13 = v17 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  v25 = 0;
  memset(v24, 0, sizeof(v24));
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v18 = (void (*)(_OWORD *))v1[5];
  result = sub_10006C890((uint64_t)v24, (uint64_t)v22);
  if (*(_QWORD *)&v22[0])
  {
    v20[0] = v22[0];
    v20[1] = v22[1];
    v21 = v23;
    v18(v20);
    return sub_100011DE0((uint64_t)v20, &qword_1000B6B58);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10006C888(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10006C890(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000187A4(&qword_1000B6B50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006C8D8()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC4TipsP33_A1F0057596BD173B41AF4E929BDC48CB19ResourceBundleClass);
}

id sub_10006C908()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id result;

  v0 = type metadata accessor for ResourceBundleClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  result = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  qword_1000B6B60 = (uint64_t)result;
  return result;
}

uint64_t sub_10006C95C()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_10005A15C(v0, qword_1000B9138);
  sub_1000479CC(v0, (uint64_t)qword_1000B9138);
  if (qword_1000B4020 != -1)
    swift_once(&qword_1000B4020, sub_10006C908);
  return ImageResource.init(name:bundle:)(0x6568437075746553, 0xEE007473696C6B63, (id)qword_1000B6B60);
}

void sub_10006CA00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001F5F0();
  sub_10001F5D8((void *)&_mh_execute_header, v0, v1, "Tips App Starting...", v2, v3, v4, v5, v6);
  sub_10001F5E8();
}

void sub_10006CA2C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001F5F0();
  sub_10001F5D8((void *)&_mh_execute_header, v0, v1, "Tips App will terminate...", v2, v3, v4, v5, v6);
  sub_10001F5E8();
}

void sub_10006CA58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001F5F0();
  sub_10001F5D8((void *)&_mh_execute_header, v0, v1, "will enter foreground", v2, v3, v4, v5, v6);
  sub_10001F5E8();
}

void sub_10006CA84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001F5F0();
  sub_10001F5D8((void *)&_mh_execute_header, v0, v1, "did enter background", v2, v3, v4, v5, v6);
  sub_10001F5E8();
}

void sub_10006CAB0(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "identifier"));
  v4 = 138412290;
  v5 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Set current tip to %@.", (uint8_t *)&v4, 0xCu);

}

void sub_10006CB44(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002DF60((void *)&_mh_execute_header, a2, a3, "CoreSpotlight continuation with search term: %@", a5, a6, a7, a8, 2u);
  sub_10002DF70();
}

void sub_10006CBA8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002DF60((void *)&_mh_execute_header, a2, a3, "Handling user activity with searchableItem identifier: %@", a5, a6, a7, a8, 2u);
  sub_10002DF70();
}

void sub_10006CC0C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002DF60((void *)&_mh_execute_header, a2, a3, "In-app search term: %@", a5, a6, a7, a8, 2u);
  sub_10002DF70();
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URL");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend__adjustScrollViewPagingDecelerationForSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustScrollViewPagingDecelerationForSize:");
}

id objc_msgSend__applicationIconImageForBundleIdentifier_format_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applicationIconImageForBundleIdentifier:format:scale:");
}

id objc_msgSend__currentViewMethod(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentViewMethod");
}

id objc_msgSend__interpageSpacing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_interpageSpacing");
}

id objc_msgSend__isAppContentLoaded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isAppContentLoaded");
}

id objc_msgSend__launchTestName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_launchTestName");
}

id objc_msgSend__logTimeSpentBeforeCurrentTip_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_logTimeSpentBeforeCurrentTip:");
}

id objc_msgSend__makeSearchResultsViewControllerWithViewModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeSearchResultsViewControllerWithViewModel:");
}

id objc_msgSend__manualScrollEdgeAppearanceProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_manualScrollEdgeAppearanceProgress");
}

id objc_msgSend__performScrollTest_iterations_delta_scrollAxis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performScrollTest:iterations:delta:scrollAxis:");
}

id objc_msgSend__setHyphenationFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setHyphenationFactor:");
}

id objc_msgSend__setInteractiveTextSelectionDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setInteractiveTextSelectionDisabled:");
}

id objc_msgSend__setInterpageSpacing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setInterpageSpacing:");
}

id objc_msgSend__setManualScrollEdgeAppearanceEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setManualScrollEdgeAppearanceEnabled:");
}

id objc_msgSend__setManualScrollEdgeAppearanceProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setManualScrollEdgeAppearanceProgress:");
}

id objc_msgSend__showAccessibilityHUDItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showAccessibilityHUDItem:");
}

id objc_msgSend__systemImageNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_systemImageNamed:");
}

id objc_msgSend__updateParallaxForLayoutAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateParallaxForLayoutAttributes:");
}

id objc_msgSend_actionButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionButton");
}

id objc_msgSend_actionType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionType");
}

id objc_msgSend_actionWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithHandler:");
}

id objc_msgSend_actions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actions");
}

id objc_msgSend_activateConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateConstraints:");
}

id objc_msgSend_activityType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityType");
}

id objc_msgSend_addAttribute_value_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttribute:value:range:");
}

id objc_msgSend_addChildViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addChildViewController:");
}

id objc_msgSend_addDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDelegate:");
}

id objc_msgSend_addExecutionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addExecutionBlock:");
}

id objc_msgSend_addGestureRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addGestureRecognizer:");
}

id objc_msgSend_addKVOObject_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addKVOObject:forKeyPath:options:context:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addObserverForKey_using_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserverForKey:using:");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addSubview_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSubview:");
}

id objc_msgSend_addTarget_action_forControlEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTarget:action:forControlEvents:");
}

id objc_msgSend_adjustedContentInset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustedContentInset");
}

id objc_msgSend_allowBookmarks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowBookmarks");
}

id objc_msgSend_allowPaging(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowPaging");
}

id objc_msgSend_allowsTipsSharing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsTipsSharing");
}

id objc_msgSend_analyticsIncreaseCountViewForCollectionsViewDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsIncreaseCountViewForCollectionsViewDelay:");
}

id objc_msgSend_analyticsIncreaseCountViewForCurrentTipDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsIncreaseCountViewForCurrentTipDelay:");
}

id objc_msgSend_analyticsIncreaseCountViewForNilTipIDWithLaunchType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsIncreaseCountViewForNilTipIDWithLaunchType:");
}

id objc_msgSend_analyticsViewModeForTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsViewModeForTraitCollection:");
}

id objc_msgSend_animateAlongsideTransition_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateAlongsideTransition:completion:");
}

id objc_msgSend_animationSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animationSource");
}

id objc_msgSend_appBundleIDMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appBundleIDMap");
}

id objc_msgSend_appController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appController");
}

id objc_msgSend_appController_loadingContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appController:loadingContent:");
}

id objc_msgSend_appControllerContentUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appControllerContentUpdated:");
}

id objc_msgSend_appDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appDelegate");
}

id objc_msgSend_appInBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appInBackground");
}

id objc_msgSend_appSessionEndedWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appSessionEndedWithType:");
}

id objc_msgSend_appViewControllerViewWillAppear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appViewControllerViewWillAppear:");
}

id objc_msgSend_appViewControllerViewWillDisappear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appViewControllerViewWillDisappear:");
}

id objc_msgSend_appendAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendAttributedString:");
}

id objc_msgSend_applicationDidBecomeActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationDidBecomeActive");
}

id objc_msgSend_applicationDidEnterBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationDidEnterBackground");
}

id objc_msgSend_applicationState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationState");
}

id objc_msgSend_applicationWillEnterForeground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationWillEnterForeground");
}

id objc_msgSend_applicationWillTerminate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationWillTerminate");
}

id objc_msgSend_archivedDataWithRootObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:forKey:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "array");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_assetConfigurationForAssets_language_sizeClass_style_assetFileInfoManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetConfigurationForAssets:language:sizeClass:style:assetFileInfoManager:");
}

id objc_msgSend_assetFileInfoManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetFileInfoManager");
}

id objc_msgSend_assetHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetHeight");
}

id objc_msgSend_assetPathFromAssetConfiguration_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetPathFromAssetConfiguration:type:");
}

id objc_msgSend_assetPrefetchingManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetPrefetchingManager");
}

id objc_msgSend_assetRatioType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetRatioType");
}

id objc_msgSend_assetSizes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetSizes");
}

id objc_msgSend_assetViewHeightConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetViewHeightConstraint");
}

id objc_msgSend_assetsConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetsConfiguration");
}

id objc_msgSend_attributedString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedString");
}

id objc_msgSend_attributedStringForConstellationContent_defaultAttributes_identifier_language_assetsBaseURL_assetFileInfoManager_supportsLinks_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedStringForConstellationContent:defaultAttributes:identifier:language:assetsBaseURL:assetFileInfoManager:supportsLinks:error:");
}

id objc_msgSend_attributedStringForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedStringForIdentifier:");
}

id objc_msgSend_attributedStringOperationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedStringOperationQueue");
}

id objc_msgSend_attributedText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedText");
}

id objc_msgSend_autoplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoplay:");
}

id objc_msgSend_axis(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axis");
}

id objc_msgSend_backgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundColor");
}

id objc_msgSend_baseURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baseURL");
}

id objc_msgSend_becomeFirstResponder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "becomeFirstResponder");
}

id objc_msgSend_blackColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blackColor");
}

id objc_msgSend_bodyContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bodyContent");
}

id objc_msgSend_bodyContentProcessingCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bodyContentProcessingCount");
}

id objc_msgSend_bodyFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bodyFont");
}

id objc_msgSend_bodyText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bodyText");
}

id objc_msgSend_bookendAssetUnderTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bookendAssetUnderTitle");
}

id objc_msgSend_bookendsContentSidePadding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bookendsContentSidePadding");
}

id objc_msgSend_bookendsHeightMultiplier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bookendsHeightMultiplier");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_bottomAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomAnchor");
}

id objc_msgSend_bottomPadding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomPadding");
}

id objc_msgSend_bounds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bounds");
}

id objc_msgSend_bringSubviewToFront_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bringSubviewToFront:");
}

id objc_msgSend_bundleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleID");
}

id objc_msgSend_buttonWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonWithType:");
}

id objc_msgSend_cacheCellSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cacheCellSize");
}

id objc_msgSend_cacheIdentifierForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cacheIdentifierForType:");
}

id objc_msgSend_cacheImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cacheImage");
}

id objc_msgSend_cacheVideoIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cacheVideoIdentifier");
}

id objc_msgSend_canDisplayColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canDisplayColumn:");
}

id objc_msgSend_canSearch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canSearch");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancel");
}

id objc_msgSend_cancelAssetFetches(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelAssetFetches");
}

id objc_msgSend_cancelAssetsPrefetch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelAssetsPrefetch");
}

id objc_msgSend_cancelFootnoteParsingOperation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelFootnoteParsingOperation");
}

id objc_msgSend_cancelPreviousPerformRequestsWithTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelPreviousPerformRequestsWithTarget:");
}

id objc_msgSend_cancelPreviousPerformRequestsWithTarget_selector_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelPreviousPerformRequestsWithTarget:selector:object:");
}

id objc_msgSend_cancelReplayButtonTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelReplayButtonTimer");
}

id objc_msgSend_cellAppearance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellAppearance");
}

id objc_msgSend_cellContentLoaded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellContentLoaded:");
}

id objc_msgSend_cellForCurrentTip(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellForCurrentTip");
}

id objc_msgSend_cellForItemAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellForItemAtIndexPath:");
}

id objc_msgSend_center(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "center");
}

id objc_msgSend_centerCell(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerCell");
}

id objc_msgSend_centerCellIndexPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerCellIndexPath");
}

id objc_msgSend_centerXAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerXAnchor");
}

id objc_msgSend_centerYAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerYAnchor");
}

id objc_msgSend_checklistCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checklistCollection");
}

id objc_msgSend_checklistCollectionIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checklistCollectionIdentifier");
}

id objc_msgSend_checklistViewModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checklistViewModel");
}

id objc_msgSend_clearBadgeCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearBadgeCount");
}

id objc_msgSend_clearColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearColor");
}

id objc_msgSend_clientBundleIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientBundleIdentifier");
}

id objc_msgSend_clientConditionID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientConditionID");
}

id objc_msgSend_collection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collection");
}

id objc_msgSend_collectionForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionForIdentifier:");
}

id objc_msgSend_collectionID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionID");
}

id objc_msgSend_collectionIDForTipID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionIDForTipID:");
}

id objc_msgSend_collectionId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionId");
}

id objc_msgSend_collectionIdentifierForCurrentUserType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionIdentifierForCurrentUserType");
}

id objc_msgSend_collectionIdentifierForTipIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionIdentifierForTipIdentifier:");
}

id objc_msgSend_collectionIdentifierToUseForCollectionIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionIdentifierToUseForCollectionIdentifiers:");
}

id objc_msgSend_collectionIdentifierViewed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionIdentifierViewed:");
}

id objc_msgSend_collectionIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionIdentifiers");
}

id objc_msgSend_collectionListViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionListViewController");
}

id objc_msgSend_collectionSections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionSections");
}

id objc_msgSend_collectionView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionView");
}

id objc_msgSend_collections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collections");
}

id objc_msgSend_colorWithWhite_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithWhite:alpha:");
}

id objc_msgSend_commonInit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commonInit");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_componentsWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsWithString:");
}

id objc_msgSend_componentsWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsWithURL:");
}

id objc_msgSend_componentsWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configuration");
}

id objc_msgSend_configureWithDefaultBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithDefaultBackground");
}

id objc_msgSend_constraintEqualToAnchor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToAnchor:");
}

id objc_msgSend_constraintEqualToAnchor_constant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToAnchor:constant:");
}

id objc_msgSend_constraintEqualToConstant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToConstant:");
}

id objc_msgSend_constraintGreaterThanOrEqualToConstant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintGreaterThanOrEqualToConstant:");
}

id objc_msgSend_constraintLessThanOrEqualToAnchor_multiplier_constant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintLessThanOrEqualToAnchor:multiplier:constant:");
}

id objc_msgSend_constraintLessThanOrEqualToConstant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintLessThanOrEqualToConstant:");
}

id objc_msgSend_containsLinks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsLinks");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsString:");
}

id objc_msgSend_contentDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentDelegate");
}

id objc_msgSend_contentFinishedLoading(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentFinishedLoading");
}

id objc_msgSend_contentHasLoaded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentHasLoaded");
}

id objc_msgSend_contentID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentID");
}

id objc_msgSend_contentInsetAdjustmentBehavior(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentInsetAdjustmentBehavior");
}

id objc_msgSend_contentLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentLabel");
}

id objc_msgSend_contentOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentOffset");
}

id objc_msgSend_contentParallaxOffsetForViewFrame_visibleRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentParallaxOffsetForViewFrame:visibleRect:");
}

id objc_msgSend_contentParser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentParser");
}

id objc_msgSend_contentSafeAreaInsets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentSafeAreaInsets");
}

id objc_msgSend_contentScrollView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentScrollView");
}

id objc_msgSend_contentSidePadding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentSidePadding");
}

id objc_msgSend_contentSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentSize");
}

id objc_msgSend_contentTextView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentTextView");
}

id objc_msgSend_contentType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentType");
}

id objc_msgSend_contentView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentView");
}

id objc_msgSend_continuePlayVideo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continuePlayVideo");
}

id objc_msgSend_continueSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continueSession");
}

id objc_msgSend_continueVideoForCurrentTip(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continueVideoForCurrentTip");
}

id objc_msgSend_convertRect_fromView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertRect:fromView:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_correlationID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "correlationID");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_createFootnoteTextView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFootnoteTextView");
}

id objc_msgSend_createSearchController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSearchController");
}

id objc_msgSend_createViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createViews");
}

id objc_msgSend_currentCollapsedDisplayColumn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentCollapsedDisplayColumn");
}

id objc_msgSend_currentCollectionID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentCollectionID");
}

id objc_msgSend_currentDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDevice");
}

id objc_msgSend_currentDisplayMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDisplayMode");
}

id objc_msgSend_currentDisplayTips(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDisplayTips");
}

id objc_msgSend_currentNotificationCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentNotificationCenter");
}

id objc_msgSend_currentPage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentPage");
}

id objc_msgSend_currentSwipeEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentSwipeEvent");
}

id objc_msgSend_currentTip(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentTip");
}

id objc_msgSend_dataCacheForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataCacheForIdentifier:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "date");
}

id objc_msgSend_deactivateConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deactivateConstraints:");
}

id objc_msgSend_default(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "default");
}

id objc_msgSend_defaultBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultBackgroundColor");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultContext");
}

id objc_msgSend_defaultErrorTitleText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultErrorTitleText");
}

id objc_msgSend_defaultLabelColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultLabelColor");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_defaultNavigationTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultNavigationTitle");
}

id objc_msgSend_defaultTextLabelFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultTextLabelFont");
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultWorkspace");
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegate");
}

id objc_msgSend_dequeueReusableCellWithReuseIdentifier_forIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dequeueReusableCellWithReuseIdentifier:forIndexPath:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_didMoveToParentViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didMoveToParentViewController:");
}

id objc_msgSend_dismissPresentedSearchResultsViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissPresentedSearchResultsViewController:");
}

id objc_msgSend_dismissSearch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissSearch");
}

id objc_msgSend_dismissViewControllerAnimated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissViewControllerAnimated:completion:");
}

id objc_msgSend_displayCollectionID_tipID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayCollectionID:tipID:");
}

id objc_msgSend_displayCollectionID_tipID_preferredColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayCollectionID:tipID:preferredColumn:");
}

id objc_msgSend_displayMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayMode");
}

id objc_msgSend_displayUserGuideWithIdentifier_topicId_version_platformIndependent_prefersLandingPage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayUserGuideWithIdentifier:topicId:version:platformIndependent:prefersLandingPage:");
}

id objc_msgSend_downloadedVideoPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadedVideoPath");
}

id objc_msgSend_edgeParallaxOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "edgeParallaxOffset");
}

id objc_msgSend_eligibleToPlayVideo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eligibleToPlayVideo");
}

id objc_msgSend_endSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endSession");
}

id objc_msgSend_ensureCurrentTipPositionWithViewSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ensureCurrentTipPositionWithViewSize:");
}

id objc_msgSend_ensureCurrentTipVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ensureCurrentTipVisible");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_event(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "event");
}

id objc_msgSend_eventWithContentID_collectionID_correlationID_clientConditionID_url_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventWithContentID:collectionID:correlationID:clientConditionID:url:");
}

id objc_msgSend_eventWithContentID_collectionID_correlationID_clientConditionID_viewMethod_viewMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventWithContentID:collectionID:correlationID:clientConditionID:viewMethod:viewMode:");
}

id objc_msgSend_eventWithContentID_collectionID_correlationID_launchType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventWithContentID:collectionID:correlationID:launchType:");
}

id objc_msgSend_eventWithTipID_actionName_actionDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventWithTipID:actionName:actionDirection:");
}

id objc_msgSend_eventWithTipID_animationFinished_animationSource_collectionID_correlationID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventWithTipID:animationFinished:animationSource:collectionID:correlationID:");
}

id objc_msgSend_eventWithTipID_animationLoadTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventWithTipID:animationLoadTime:");
}

id objc_msgSend_eventWithTipID_collectionID_correlationID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventWithTipID:collectionID:correlationID:");
}

id objc_msgSend_eventWithTipID_saved_correlationID_collectionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventWithTipID:saved:correlationID:collectionID:");
}

id objc_msgSend_eventWithTopicID_topicTitle_source_interfaceStyle_fromTopicID_externalURLString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventWithTopicID:topicTitle:source:interfaceStyle:fromTopicID:externalURLString:");
}

id objc_msgSend_eyebrowText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eyebrowText");
}

id objc_msgSend_featuredCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "featuredCollection");
}

id objc_msgSend_fetchImageWithIdentifier_path_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchImageWithIdentifier:path:");
}

id objc_msgSend_finishedTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishedTest:");
}

id objc_msgSend_firstLaunchEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstLaunchEvent");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstObject");
}

id objc_msgSend_firstTip(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstTip");
}

id objc_msgSend_footNoteAttributedStringForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "footNoteAttributedStringForIdentifier:");
}

id objc_msgSend_footnoteBoldTextFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "footnoteBoldTextFont");
}

id objc_msgSend_footnoteBottomConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "footnoteBottomConstraint");
}

id objc_msgSend_footnoteContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "footnoteContent");
}

id objc_msgSend_footnoteContentParser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "footnoteContentParser");
}

id objc_msgSend_footnoteContentTextOperation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "footnoteContentTextOperation");
}

id objc_msgSend_footnoteContentTextOperationID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "footnoteContentTextOperationID");
}

id objc_msgSend_footnoteFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "footnoteFont");
}

id objc_msgSend_footnoteItalicTextFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "footnoteItalicTextFont");
}

id objc_msgSend_footnoteTextView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "footnoteTextView");
}

id objc_msgSend_frame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frame");
}

id objc_msgSend_frameLayoutGuide(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameLayoutGuide");
}

id objc_msgSend_fullContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fullContent");
}

id objc_msgSend_fullContentAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fullContentAssets");
}

id objc_msgSend_fullTipContentManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fullTipContentManager");
}

id objc_msgSend_getImageForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getImageForIdentifier:");
}

id objc_msgSend_getUserGuideFromURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUserGuideFromURL:");
}

id objc_msgSend_getValuesFromOpenURLSchemeQueryItems_tipIdentifier_collectionIdentifier_referrer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getValuesFromOpenURLSchemeQueryItems:tipIdentifier:collectionIdentifier:referrer:");
}

id objc_msgSend_handleContinueCoreSpotlightSearchActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleContinueCoreSpotlightSearchActivity:");
}

id objc_msgSend_handleCoreSpotlightItemActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleCoreSpotlightItemActivity:");
}

id objc_msgSend_handleSearchWithSearchQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleSearchWithSearchQuery:");
}

id objc_msgSend_handleTipsURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleTipsURL:");
}

id objc_msgSend_handleURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleURL:");
}

id objc_msgSend_handleUniversalLinkWithUserActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleUniversalLinkWithUserActivity:");
}

id objc_msgSend_handleUserActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleUserActivity:");
}

id objc_msgSend_hardwareChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hardwareChanged");
}

id objc_msgSend_hasActiveSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasActiveSession");
}

id objc_msgSend_hasContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasContent");
}

id objc_msgSend_hasDifferentColorAppearanceComparedToTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasDifferentColorAppearanceComparedToTraitCollection:");
}

id objc_msgSend_hasImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasImage");
}

id objc_msgSend_hasLoaded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasLoaded");
}

id objc_msgSend_hasLocalVariant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasLocalVariant:");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasStartedSearch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasStartedSearch");
}

id objc_msgSend_hasVideo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasVideo");
}

id objc_msgSend_heightAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightAnchor");
}

id objc_msgSend_heightToWidthRatioFromSizes_mediaSizeType_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightToWidthRatioFromSizes:mediaSizeType:defaultValue:");
}

id objc_msgSend_helpViewControllerWithTitle_identifier_version_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "helpViewControllerWithTitle:identifier:version:");
}

id objc_msgSend_heroAssetView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heroAssetView");
}

id objc_msgSend_heroImageUpdated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heroImageUpdated");
}

id objc_msgSend_hideColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideColumn:");
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "host");
}

id objc_msgSend_hudDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hudDelegate");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifier");
}

id objc_msgSend_image(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "image");
}

id objc_msgSend_imageFromMemoryCacheForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageFromMemoryCacheForIdentifier:");
}

id objc_msgSend_imageLoadingFinished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageLoadingFinished");
}

id objc_msgSend_imageNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageNamed:");
}

id objc_msgSend_imagePath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imagePath");
}

id objc_msgSend_imageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageView");
}

id objc_msgSend_incrementCollectionsViewedCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementCollectionsViewedCount");
}

id objc_msgSend_incrementTipsViewedCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementTipsViewedCount");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexPathForRow_inSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathForRow:inSection:");
}

id objc_msgSend_indexPathsForVisibleItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathsForVisibleItems");
}

id objc_msgSend_infoDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "infoDictionary");
}

id objc_msgSend_initAppearanceWithTraits_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initAppearanceWithTraits:size:");
}

id objc_msgSend_initCellAppearanceWithTrait_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initCellAppearanceWithTrait:size:");
}

id objc_msgSend_initWithActivityItems_applicationActivities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithActivityItems:applicationActivities:");
}

id objc_msgSend_initWithAppController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAppController:");
}

id objc_msgSend_initWithAuthenticationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAuthenticationContext:");
}

id objc_msgSend_initWithCustomView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCustomView:");
}

id objc_msgSend_initWithFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:");
}

id objc_msgSend_initWithFrame_collectionViewLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:collectionViewLayout:");
}

id objc_msgSend_initWithImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithImage:");
}

id objc_msgSend_initWithImage_style_target_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithImage:style:target:action:");
}

id objc_msgSend_initWithLessonURL_tipID_collectionID_correlationID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLessonURL:tipID:collectionID:correlationID:");
}

id objc_msgSend_initWithObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObserver:");
}

id objc_msgSend_initWithPlatformImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPlatformImage:");
}

id objc_msgSend_initWithRootViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRootViewController:");
}

id objc_msgSend_initWithSearchResultsController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSearchResultsController:");
}

id objc_msgSend_initWithSearchableItemUniqueIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSearchableItemUniqueIdentifier:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithString_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:attributes:");
}

id objc_msgSend_initWithStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStyle:");
}

id objc_msgSend_initWithTarget_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTarget:action:");
}

id objc_msgSend_initWithTestName_scrollView_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTestName:scrollView:completionHandler:");
}

id objc_msgSend_initWithTestName_window_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTestName:window:completionHandler:");
}

id objc_msgSend_initWithTip_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTip:");
}

id objc_msgSend_initWithTip_appController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTip:appController:");
}

id objc_msgSend_initWithTitle_image_imageInsets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:image:imageInsets:");
}

id objc_msgSend_initWithType_localizedTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:localizedTitle:");
}

id objc_msgSend_initWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:");
}

id objc_msgSend_initWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_initWithViewModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithViewModel:");
}

id objc_msgSend_installCACommitCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installCACommitCompletionBlock:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intValue");
}

id objc_msgSend_invalidateItemsAtIndexPaths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateItemsAtIndexPaths:");
}

id objc_msgSend_invalidateLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateLayout");
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isActive");
}

id objc_msgSend_isBookendsCompactLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBookendsCompactLayout");
}

id objc_msgSend_isChecklist(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isChecklist");
}

id objc_msgSend_isChecklistCollectionWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isChecklistCollectionWithIdentifier:");
}

id objc_msgSend_isChecklistTip(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isChecklistTip");
}

id objc_msgSend_isCollapsed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCollapsed");
}

id objc_msgSend_isCollectionsViewVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCollectionsViewVisible");
}

id objc_msgSend_isCompactLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCompactLayout");
}

id objc_msgSend_isCompleted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCompleted");
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEnabled");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isHidden(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHidden");
}

id objc_msgSend_isInternalBuild(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInternalBuild");
}

id objc_msgSend_isInternalDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInternalDevice");
}

id objc_msgSend_isIntro(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isIntro");
}

id objc_msgSend_isNetworkError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNetworkError:");
}

id objc_msgSend_isOutro(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOutro");
}

id objc_msgSend_isPadUI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPadUI");
}

id objc_msgSend_isPhoneUI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPhoneUI");
}

id objc_msgSend_isSavedWithTipIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSavedWithTipIdentifier:");
}

id objc_msgSend_isSearchViewControllerPresented(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSearchViewControllerPresented");
}

id objc_msgSend_isSharedVariant(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSharedVariant");
}

id objc_msgSend_isSiriSuggestion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSiriSuggestion");
}

id objc_msgSend_isTip(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTip");
}

id objc_msgSend_labelColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "labelColor");
}

id objc_msgSend_labelHyphenationFactor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "labelHyphenationFactor");
}

id objc_msgSend_labelStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "labelStyle");
}

id objc_msgSend_language(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "language");
}

id objc_msgSend_lastDisplayedContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastDisplayedContent");
}

id objc_msgSend_lastFetchError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastFetchError");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lastRecordedLaunchType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastRecordedLaunchType");
}

id objc_msgSend_layer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layer");
}

id objc_msgSend_layoutAttributesForItemAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutAttributesForItemAtIndexPath:");
}

id objc_msgSend_leadingAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leadingAnchor");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_link(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "link");
}

id objc_msgSend_loadBodyContentIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadBodyContentIfNeeded");
}

id objc_msgSend_loadBookWithTitle_identifier_topicID_version_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadBookWithTitle:identifier:topicID:version:");
}

id objc_msgSend_loadContentIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadContentIfNeeded");
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_localizedStringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringWithFormat:");
}

id objc_msgSend_log(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "log");
}

id objc_msgSend_logAnalyticsEventForAppForeground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logAnalyticsEventForAppForeground");
}

id objc_msgSend_logAnalyticsEventForChecklistSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logAnalyticsEventForChecklistSession");
}

id objc_msgSend_logAnimationFinished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logAnimationFinished");
}

id objc_msgSend_logEndSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logEndSession");
}

id objc_msgSend_logSharedTipDisplayed_isEligible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logSharedTipDisplayed:isEligible:");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainBundle");
}

id objc_msgSend_mainScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainScreen");
}

id objc_msgSend_mainUserGuide(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainUserGuide");
}

id objc_msgSend_mainViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainViewController");
}

id objc_msgSend_makeKeyAndVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeKeyAndVisible");
}

id objc_msgSend_mediaSizeType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mediaSizeType");
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "model");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_na_firstObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "na_firstObjectPassingTest:");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "name");
}

id objc_msgSend_navigationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationController");
}

id objc_msgSend_navigationItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationItem");
}

id objc_msgSend_networkMonitorToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "networkMonitorToken");
}

id objc_msgSend_networkStateDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "networkStateDidChange:");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "now");
}

id objc_msgSend_numOfActiveRemoteURLSessions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numOfActiveRemoteURLSessions");
}

id objc_msgSend_numberOfItemsInSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfItemsInSection:");
}

id objc_msgSend_numberOfPages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfPages");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_openApplicationWithBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openApplicationWithBundleID:");
}

id objc_msgSend_openURL_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openURL:options:");
}

id objc_msgSend_openURL_options_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openURL:options:completionHandler:");
}

id objc_msgSend_outroTextLabelTopPadding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outroTextLabelTopPadding");
}

id objc_msgSend_outroWidthMultiplier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outroWidthMultiplier");
}

id objc_msgSend_overrideWidgetWithTip_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overrideWidgetWithTip:");
}

id objc_msgSend_pageControl(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pageControl");
}

id objc_msgSend_pageControlBottomConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pageControlBottomConstraint");
}

id objc_msgSend_pageControlCancelLongPressedForHUD_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pageControlCancelLongPressedForHUD:");
}

id objc_msgSend_pageControlLongPressedForHUD_withText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pageControlLongPressedForHUD:withText:");
}

id objc_msgSend_parallaxFactor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parallaxFactor");
}

id objc_msgSend_parallaxOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parallaxOffset");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "path");
}

id objc_msgSend_pendingColumnSwitching(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingColumnSwitching");
}

id objc_msgSend_pendingContentUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingContentUpdate");
}

id objc_msgSend_pendingReload(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingReload");
}

id objc_msgSend_performSelector_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:");
}

id objc_msgSend_performSelector_withObject_afterDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:afterDelay:");
}

id objc_msgSend_performWithoutAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWithoutAnimation:");
}

id objc_msgSend_platformIndependent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "platformIndependent");
}

id objc_msgSend_playVideo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playVideo");
}

id objc_msgSend_playerController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playerController");
}

id objc_msgSend_playerWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playerWithURL:");
}

id objc_msgSend_popToRootViewControllerAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popToRootViewControllerAnimated:");
}

id objc_msgSend_popoverPresentationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popoverPresentationController");
}

id objc_msgSend_preferredContentSizeCategory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredContentSizeCategory");
}

id objc_msgSend_preferredFontForTextStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredFontForTextStyle:");
}

id objc_msgSend_prefetchAssetsFromTip_tips_assetUserInterfaceStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prefetchAssetsFromTip:tips:assetUserInterfaceStyle:");
}

id objc_msgSend_prepareSharedTipForReuse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareSharedTipForReuse");
}

id objc_msgSend_presentViewController_animated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentViewController:animated:completion:");
}

id objc_msgSend_presentedViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentedViewController");
}

id objc_msgSend_productId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productId");
}

id objc_msgSend_proxyWithViewMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyWithViewMethod:");
}

id objc_msgSend_queryItemWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryItemWithName:value:");
}

id objc_msgSend_queryItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryItems");
}

id objc_msgSend_queryWithSearchTerm_origin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryWithSearchTerm:origin:");
}

id objc_msgSend_reconfigureAllCollectionViewItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reconfigureAllCollectionViewItems");
}

id objc_msgSend_reconfigureItemsAtIndexPaths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reconfigureItemsAtIndexPaths:");
}

id objc_msgSend_referrer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "referrer");
}

id objc_msgSend_registerClass_forCellWithReuseIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClass:forCellWithReuseIdentifier:");
}

id objc_msgSend_registerDefaults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerDefaults:");
}

id objc_msgSend_registerForTraitChanges_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForTraitChanges:withHandler:");
}

id objc_msgSend_registerTraitChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerTraitChanges");
}

id objc_msgSend_reloadAppGroupDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadAppGroupDefaults");
}

id objc_msgSend_reloadData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadData");
}

id objc_msgSend_reloadDataCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadDataCache");
}

id objc_msgSend_removeAllDataCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllDataCache");
}

id objc_msgSend_removeAllKVOObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllKVOObjects");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeCollection:");
}

id objc_msgSend_removeContentParser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeContentParser");
}

id objc_msgSend_removeDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDelegate:");
}

id objc_msgSend_removeFootnoteContentParser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFootnoteContentParser");
}

id objc_msgSend_removeFromSuperview(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFromSuperview");
}

id objc_msgSend_removeInlineMessageLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeInlineMessageLabel");
}

id objc_msgSend_removeNotificationForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeNotificationForIdentifier:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removeObserverForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserverForKey:");
}

id objc_msgSend_replayButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replayButton");
}

id objc_msgSend_replayVideo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replayVideo");
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reset");
}

id objc_msgSend_resetAttributedStringCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetAttributedStringCache");
}

id objc_msgSend_resetCacheDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetCacheDefaults");
}

id objc_msgSend_resetDataCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetDataCache");
}

id objc_msgSend_resetSearchController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetSearchController");
}

id objc_msgSend_resetTips(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetTips");
}

id objc_msgSend_resetVideoPlayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetVideoPlayer");
}

id objc_msgSend_rightBarButtonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rightBarButtonItem");
}

id objc_msgSend_row(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "row");
}

id objc_msgSend_runTest_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runTest:options:");
}

id objc_msgSend_runTestWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runTestWithParameters:");
}

id objc_msgSend_safeAreaInsets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safeAreaInsets");
}

id objc_msgSend_saveBarButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveBarButton");
}

id objc_msgSend_savedTipsCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "savedTipsCollection");
}

id objc_msgSend_savedTipsManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "savedTipsManager");
}

id objc_msgSend_scale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scale");
}

id objc_msgSend_scheduleNextRunLoop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleNextRunLoop");
}

id objc_msgSend_scheme(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheme");
}

id objc_msgSend_scrollToItemAtIndexPath_atScrollPosition_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollToItemAtIndexPath:atScrollPosition:animated:");
}

id objc_msgSend_scrollToTop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollToTop");
}

id objc_msgSend_scrolledDeferredAction(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrolledDeferredAction");
}

id objc_msgSend_scrubVideoToFirstFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrubVideoToFirstFrame");
}

id objc_msgSend_search(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "search");
}

id objc_msgSend_searchBar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchBar");
}

id objc_msgSend_searchBarButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchBarButton");
}

id objc_msgSend_searchController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchController");
}

id objc_msgSend_searchQuery(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchQuery");
}

id objc_msgSend_searchResultViewModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchResultViewModel");
}

id objc_msgSend_searchResultsNavigationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchResultsNavigationController");
}

id objc_msgSend_searchTerm(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchTerm");
}

id objc_msgSend_searchWithSearchQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchWithSearchQuery:");
}

id objc_msgSend_secondaryBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryBackgroundColor");
}

id objc_msgSend_secondaryLabelColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryLabelColor");
}

id objc_msgSend_setAccessibilityIgnoresInvertColors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityIgnoresInvertColors:");
}

id objc_msgSend_setActionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionHandler:");
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActive:");
}

id objc_msgSend_setAdditionalBottomOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdditionalBottomOffset:");
}

id objc_msgSend_setAdjustsFontForContentSizeCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustsFontForContentSizeCategory:");
}

id objc_msgSend_setAlignment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlignment:");
}

id objc_msgSend_setAllowPaging_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowPaging:");
}

id objc_msgSend_setAlpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlpha:");
}

id objc_msgSend_setAlwaysBounceHorizontal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlwaysBounceHorizontal:");
}

id objc_msgSend_setAnimationSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnimationSource:");
}

id objc_msgSend_setAppController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppController:");
}

id objc_msgSend_setAppInBackground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppInBackground:");
}

id objc_msgSend_setAppReferrer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppReferrer:");
}

id objc_msgSend_setAspectFillAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAspectFillAsset:");
}

id objc_msgSend_setAssetViewHeightConstraint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetViewHeightConstraint:");
}

id objc_msgSend_setAssetViewLayoutGuideCenterXConstraint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetViewLayoutGuideCenterXConstraint:");
}

id objc_msgSend_setAssetsConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetsConfiguration:");
}

id objc_msgSend_setAttributedText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributedText:");
}

id objc_msgSend_setAuthenticationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthenticationHandler:");
}

id objc_msgSend_setAutocapitalizationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutocapitalizationType:");
}

id objc_msgSend_setAutocorrectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutocorrectionType:");
}

id objc_msgSend_setAxis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAxis:");
}

id objc_msgSend_setBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundColor:");
}

id objc_msgSend_setBackgroundStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundStyle:");
}

id objc_msgSend_setBadgeCount_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBadgeCount:withCompletionHandler:");
}

id objc_msgSend_setBodyContentProcessingCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBodyContentProcessingCount:");
}

id objc_msgSend_setCacheVideoIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCacheVideoIdentifier:");
}

id objc_msgSend_setCategory_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCategory:error:");
}

id objc_msgSend_setChecklistCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChecklistCollection:");
}

id objc_msgSend_setChecklistHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChecklistHandler:");
}

id objc_msgSend_setClientConditionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientConditionID:");
}

id objc_msgSend_setClipsToBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClipsToBounds:");
}

id objc_msgSend_setCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCollection:");
}

id objc_msgSend_setCollectionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCollectionID:");
}

id objc_msgSend_setCollectionId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCollectionId:");
}

id objc_msgSend_setCollectionListViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCollectionListViewController:");
}

id objc_msgSend_setCollectionSections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCollectionSections:");
}

id objc_msgSend_setCollections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCollections:");
}

id objc_msgSend_setConstant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConstant:");
}

id objc_msgSend_setContentCompressionResistancePriority_forAxis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentCompressionResistancePriority:forAxis:");
}

id objc_msgSend_setContentDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentDelegate:");
}

id objc_msgSend_setContentFinishedLoading_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentFinishedLoading:");
}

id objc_msgSend_setContentID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentID:");
}

id objc_msgSend_setContentInsetAdjustmentBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentInsetAdjustmentBehavior:");
}

id objc_msgSend_setContentLabelConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentLabelConstraints:");
}

id objc_msgSend_setContentParser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentParser:");
}

id objc_msgSend_setContentSafeAreaInsets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentSafeAreaInsets:");
}

id objc_msgSend_setContentTextOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentTextOperation:");
}

id objc_msgSend_setContentTextOperationID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentTextOperationID:");
}

id objc_msgSend_setContentTextViewConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentTextViewConstraints:");
}

id objc_msgSend_setCorrelationID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCorrelationID:");
}

id objc_msgSend_setCurrentCollapsedDisplayColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentCollapsedDisplayColumn:");
}

id objc_msgSend_setCurrentCollectionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentCollectionID:");
}

id objc_msgSend_setCurrentDisplayMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentDisplayMode:");
}

id objc_msgSend_setCurrentDisplayTips_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentDisplayTips:");
}

id objc_msgSend_setCurrentPage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentPage:");
}

id objc_msgSend_setCurrentPageIndicatorTintColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentPageIndicatorTintColor:");
}

id objc_msgSend_setCurrentSwipeEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentSwipeEvent:");
}

id objc_msgSend_setCurrentTip_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentTip:");
}

id objc_msgSend_setDataDetectorTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataDetectorTypes:");
}

id objc_msgSend_setDataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataSource:");
}

id objc_msgSend_setDefaultBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultBackgroundColor:");
}

id objc_msgSend_setDefaultSessionDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultSessionDelegate:");
}

id objc_msgSend_setDefinesPresentationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefinesPresentationContext:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDirection:");
}

id objc_msgSend_setDirectionalLockEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDirectionalLockEnabled:");
}

id objc_msgSend_setDisplayChevron_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayChevron:");
}

id objc_msgSend_setEdgeParallaxOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEdgeParallaxOffset:");
}

id objc_msgSend_setEditable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEditable:");
}

id objc_msgSend_setEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabled:");
}

id objc_msgSend_setExcludedActivityTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExcludedActivityTypes:");
}

id objc_msgSend_setFeaturedCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeaturedCollection:");
}

id objc_msgSend_setFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFont:");
}

id objc_msgSend_setFootnoteBottomConstraint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFootnoteBottomConstraint:");
}

id objc_msgSend_setFootnoteContentParser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFootnoteContentParser:");
}

id objc_msgSend_setFootnoteContentTextOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFootnoteContentTextOperation:");
}

id objc_msgSend_setFootnoteContentTextOperationID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFootnoteContentTextOperationID:");
}

id objc_msgSend_setFootnoteTextView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFootnoteTextView:");
}

id objc_msgSend_setFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFrame:");
}

id objc_msgSend_setHasBodyContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasBodyContent:");
}

id objc_msgSend_setHasLoaded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasLoaded:");
}

id objc_msgSend_setHasNotifiedDelegateContentLoaded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasNotifiedDelegateContentLoaded:");
}

id objc_msgSend_setHeightTracksTextView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeightTracksTextView:");
}

id objc_msgSend_setHeroImageUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeroImageUpdated:");
}

id objc_msgSend_setHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidden:");
}

id objc_msgSend_setHidesNavigationBarDuringPresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidesNavigationBarDuringPresentation:");
}

id objc_msgSend_setHidesSearchBarWhenScrolling_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidesSearchBarWhenScrolling:");
}

id objc_msgSend_setHudDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHudDelegate:");
}

id objc_msgSend_setImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImage:");
}

id objc_msgSend_setImageLoadingFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageLoadingFinished:");
}

id objc_msgSend_setImageParallaxMultiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageParallaxMultiplier:");
}

id objc_msgSend_setInvalidateFlowLayoutAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidateFlowLayoutAttributes:");
}

id objc_msgSend_setInvalidateFlowLayoutDelegateMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidateFlowLayoutDelegateMetrics:");
}

id objc_msgSend_setIsFirstLaunch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFirstLaunch:");
}

id objc_msgSend_setIsSharedVariant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSharedVariant:");
}

id objc_msgSend_setLargeTitleDisplayMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLargeTitleDisplayMode:");
}

id objc_msgSend_setLineBreakMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineBreakMode:");
}

id objc_msgSend_setLineBreakStrategy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineBreakStrategy:");
}

id objc_msgSend_setLineFragmentPadding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineFragmentPadding:");
}

id objc_msgSend_setLoading_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLoading:");
}

id objc_msgSend_setMainViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMainViewController:");
}

id objc_msgSend_setMaximumWindowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumWindowSize:");
}

id objc_msgSend_setMediaSizeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaSizeType:");
}

id objc_msgSend_setMinimumLineSpacing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumLineSpacing:");
}

id objc_msgSend_setMinimumWindowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumWindowSize:");
}

id objc_msgSend_setModalInPresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModalInPresentation:");
}

id objc_msgSend_setModalPresentationStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModalPresentationStyle:");
}

id objc_msgSend_setModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModel:");
}

id objc_msgSend_setNeedsLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsLayout");
}

id objc_msgSend_setNeedsTextView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsTextView:");
}

id objc_msgSend_setNeedsUpdateConstraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsUpdateConstraints");
}

id objc_msgSend_setNoImageBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNoImageBackgroundColor:");
}

id objc_msgSend_setNoImageBackgroundColorOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNoImageBackgroundColorOverride:");
}

id objc_msgSend_setNumberOfLines_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfLines:");
}

id objc_msgSend_setNumberOfPages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfPages:");
}

id objc_msgSend_setNumberOfTapsRequired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfTapsRequired:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setObscuresBackgroundDuringPresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObscuresBackgroundDuringPresentation:");
}

id objc_msgSend_setOpaque_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOpaque:");
}

id objc_msgSend_setPageIndicatorTintColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPageIndicatorTintColor:");
}

id objc_msgSend_setPagingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPagingEnabled:");
}

id objc_msgSend_setParagraphSpacing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParagraphSpacing:");
}

id objc_msgSend_setParallaxFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParallaxFactor:");
}

id objc_msgSend_setParallaxOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParallaxOffset:");
}

id objc_msgSend_setPassthroughViews_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPassthroughViews:");
}

id objc_msgSend_setPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPath:");
}

id objc_msgSend_setPendingAppLaunchEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingAppLaunchEvent:");
}

id objc_msgSend_setPendingColumnSwitching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingColumnSwitching:");
}

id objc_msgSend_setPendingOpenUniversalURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingOpenUniversalURL:");
}

id objc_msgSend_setPendingReload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingReload:");
}

id objc_msgSend_setPendingSharedTipVariantID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingSharedTipVariantID:");
}

id objc_msgSend_setPendingShowTipIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingShowTipIdentifier:");
}

id objc_msgSend_setPermittedArrowDirections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPermittedArrowDirections:");
}

id objc_msgSend_setPlatformIndependent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlatformIndependent:");
}

id objc_msgSend_setPlayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlayer:");
}

id objc_msgSend_setPopoverLayoutMargins_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPopoverLayoutMargins:");
}

id objc_msgSend_setPreferredBehavioralStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredBehavioralStyle:");
}

id objc_msgSend_setPreferredSplitBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredSplitBehavior:");
}

id objc_msgSend_setPreferredViewMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredViewMethod:");
}

id objc_msgSend_setPrefersLandingViewOnLoad_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrefersLandingViewOnLoad:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setQueryItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryItems:");
}

id objc_msgSend_setReplayButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReplayButton:");
}

id objc_msgSend_setReplayGradientView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReplayGradientView:");
}

id objc_msgSend_setRespectLoadingStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRespectLoadingStatus:");
}

id objc_msgSend_setRightBarButtonItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRightBarButtonItem:");
}

id objc_msgSend_setRightBarButtonItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRightBarButtonItems:");
}

id objc_msgSend_setRootViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRootViewController:");
}

id objc_msgSend_setSaveBarButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSaveBarButton:");
}

id objc_msgSend_setSavedTipsCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSavedTipsCollection:");
}

id objc_msgSend_setScheme_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScheme:");
}

id objc_msgSend_setScrollDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollDirection:");
}

id objc_msgSend_setScrollEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollEnabled:");
}

id objc_msgSend_setScrollingBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollingBounds:");
}

id objc_msgSend_setScrollingTipContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollingTipContent:");
}

id objc_msgSend_setSearchBarButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchBarButton:");
}

id objc_msgSend_setSearchController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchController:");
}

id objc_msgSend_setSearchQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchQuery:");
}

id objc_msgSend_setSearchResultsNavigationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchResultsNavigationController:");
}

id objc_msgSend_setSearchResultsUpdater_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchResultsUpdater:");
}

id objc_msgSend_setSelectedHelpTopicID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedHelpTopicID:");
}

id objc_msgSend_setSelectedTipIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedTipIdentifier:");
}

id objc_msgSend_setShadowColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShadowColor:");
}

id objc_msgSend_setShadowImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShadowImage:");
}

id objc_msgSend_setShadowOpacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShadowOpacity:");
}

id objc_msgSend_setShadowPathIsBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShadowPathIsBounds:");
}

id objc_msgSend_setShadowRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShadowRadius:");
}

id objc_msgSend_setShareBarButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShareBarButton:");
}

id objc_msgSend_setShortcutItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShortcutItems:");
}

id objc_msgSend_setShouldDisplayNavigationTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldDisplayNavigationTitle:");
}

id objc_msgSend_setShouldFlick_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldFlick:");
}

id objc_msgSend_setShouldHoldOffVideo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldHoldOffVideo:");
}

id objc_msgSend_setShouldLogAnimationFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldLogAnimationFinished:");
}

id objc_msgSend_setShouldUseDefaultNavBar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldUseDefaultNavBar:");
}

id objc_msgSend_setShowTopicViewOnLoad_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowTopicViewOnLoad:");
}

id objc_msgSend_setShowsHorizontalScrollIndicator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsHorizontalScrollIndicator:");
}

id objc_msgSend_setShowsVerticalScrollIndicator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsVerticalScrollIndicator:");
}

id objc_msgSend_setSourceView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceView:");
}

id objc_msgSend_setSplitViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSplitViewController:");
}

id objc_msgSend_setStandardAppearance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStandardAppearance:");
}

id objc_msgSend_setSwipeSpeedFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwipeSpeedFactor:");
}

id objc_msgSend_setText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setText:");
}

id objc_msgSend_setTextAlignment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextAlignment:");
}

id objc_msgSend_setTextColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextColor:");
}

id objc_msgSend_setTextContainerInset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextContainerInset:");
}

id objc_msgSend_setTimeSpent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeSpent:");
}

id objc_msgSend_setTintColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTintColor:");
}

id objc_msgSend_setTip_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTip:");
}

id objc_msgSend_setTip_withCellAppearance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTip:withCellAppearance:");
}

id objc_msgSend_setTipID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTipID:");
}

id objc_msgSend_setTipId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTipId:");
}

id objc_msgSend_setTipListViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTipListViewController:");
}

id objc_msgSend_setTipSizes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTipSizes:");
}

id objc_msgSend_setTips_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTips:");
}

id objc_msgSend_setTipsByCollectionViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTipsByCollectionViewController:");
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitle:");
}

id objc_msgSend_setTitleText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitleText:");
}

id objc_msgSend_setTopSafeAreaHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTopSafeAreaHeight:");
}

id objc_msgSend_setTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTraitCollection:");
}

id objc_msgSend_setTranslatesAutoresizingMaskIntoConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTranslatesAutoresizingMaskIntoConstraints:");
}

id objc_msgSend_setTryItViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTryItViewController:");
}

id objc_msgSend_setUpdatingSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdatingSize:");
}

id objc_msgSend_setUseStandardNavBarBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseStandardNavBarBehavior:");
}

id objc_msgSend_setUserGuideDisplayed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserGuideDisplayed:");
}

id objc_msgSend_setUserGuideHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserGuideHandler:");
}

id objc_msgSend_setUserGuides_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserGuides:");
}

id objc_msgSend_setUserInteractionEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInteractionEnabled:");
}

id objc_msgSend_setUserInterfaceStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInterfaceStyle:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setVideoDelayTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVideoDelayTime:");
}

id objc_msgSend_setVideoDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVideoDelegate:");
}

id objc_msgSend_setVideoLoadingFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVideoLoadingFinished:");
}

id objc_msgSend_setVideoPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVideoPath:");
}

id objc_msgSend_setViewCollapsed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewCollapsed:");
}

id objc_msgSend_setViewController_forColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewController:forColumn:");
}

id objc_msgSend_setViewCycleDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewCycleDelegate:");
}

id objc_msgSend_setViewNavigationCollapsed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewNavigationCollapsed:");
}

id objc_msgSend_setWindow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWindow:");
}

id objc_msgSend_setupActionButtonConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupActionButtonConfiguration");
}

id objc_msgSend_setupActionButtonConfigurationWithTitle_foregroundColor_backgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupActionButtonConfigurationWithTitle:foregroundColor:backgroundColor:");
}

id objc_msgSend_setupActionButtonConfigurationWithTitle_foregroundColor_backgroundColor_symbolName_fontWeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupActionButtonConfigurationWithTitle:foregroundColor:backgroundColor:symbolName:fontWeight:");
}

id objc_msgSend_setupActionButtonConfigurationWithTitle_isEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupActionButtonConfigurationWithTitle:isEnabled:");
}

id objc_msgSend_setupCollectionListView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupCollectionListView");
}

id objc_msgSend_setupReplayButtonConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupReplayButtonConfiguration");
}

id objc_msgSend_setupSearch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupSearch");
}

id objc_msgSend_setupSearchResultSelectedHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupSearchResultSelectedHandler");
}

id objc_msgSend_setupSearchViewModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupSearchViewModel");
}

id objc_msgSend_setupSharedTipMessaging(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupSharedTipMessaging");
}

id objc_msgSend_setupSplitView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupSplitView");
}

id objc_msgSend_setupTipListView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupTipListView");
}

id objc_msgSend_setupTipsByCollectionView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupTipsByCollectionView");
}

id objc_msgSend_shareBarButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shareBarButton");
}

id objc_msgSend_shareText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shareText");
}

id objc_msgSend_sharedApplication(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedApplication");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_sharedMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedMonitor");
}

id objc_msgSend_shortTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shortTitle");
}

id objc_msgSend_shouldDisplayNavigationTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldDisplayNavigationTitle");
}

id objc_msgSend_shouldHoldOffVideo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldHoldOffVideo");
}

id objc_msgSend_shouldLogAnimationFinished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldLogAnimationFinished");
}

id objc_msgSend_showCollectionWithIdentifier_launchType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showCollectionWithIdentifier:launchType:");
}

id objc_msgSend_showCollectionsView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showCollectionsView");
}

id objc_msgSend_showColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showColumn:");
}

id objc_msgSend_showInlineLabelWithTitle_message_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showInlineLabelWithTitle:message:");
}

id objc_msgSend_showInlineMessageForError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showInlineMessageForError:");
}

id objc_msgSend_showModalTipWithVariantID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showModalTipWithVariantID:");
}

id objc_msgSend_showPagingLabelOnLongPress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showPagingLabelOnLongPress");
}

id objc_msgSend_showTOCView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showTOCView");
}

id objc_msgSend_showTipWithID_launchType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showTipWithID:launchType:");
}

id objc_msgSend_showTipsView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showTipsView");
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "size");
}

id objc_msgSend_sizeForNumberOfPages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeForNumberOfPages:");
}

id objc_msgSend_softwareWelcomeCollectionIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "softwareWelcomeCollectionIdentifier");
}

id objc_msgSend_splitViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "splitViewController");
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "standardUserDefaults");
}

id objc_msgSend_startSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSession");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "state");
}

id objc_msgSend_stopSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopSession");
}

id objc_msgSend_stopVideoPlayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopVideoPlayer");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "string");
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByRemovingPercentEncoding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByRemovingPercentEncoding");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_summary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "summary");
}

id objc_msgSend_superview(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "superview");
}

id objc_msgSend_supportedInterfaceOrientations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportedInterfaceOrientations");
}

id objc_msgSend_syncCacheImmediately(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncCacheImmediately");
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronize");
}

id objc_msgSend_systemBlueColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemBlueColor");
}

id objc_msgSend_systemGray2Color(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemGray2Color");
}

id objc_msgSend_systemGrayColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemGrayColor");
}

id objc_msgSend_tertiaryLabelColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tertiaryLabelColor");
}

id objc_msgSend_text(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "text");
}

id objc_msgSend_textColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textColor");
}

id objc_msgSend_textContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textContainer");
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_tip(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tip");
}

id objc_msgSend_tipCollectionViewCell_linkTappedForURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipCollectionViewCell:linkTappedForURL:");
}

id objc_msgSend_tipCollectionViewCell_showSafariViewForURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipCollectionViewCell:showSafariViewForURL:");
}

id objc_msgSend_tipCollectionViewCell_showTryItModeForURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipCollectionViewCell:showTryItModeForURL:");
}

id objc_msgSend_tipCollectionViewCell_showUserGuideWithIdentifier_topicId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipCollectionViewCell:showUserGuideWithIdentifier:topicId:");
}

id objc_msgSend_tipCollectionViewCell_showVideoForURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipCollectionViewCell:showVideoForURL:");
}

id objc_msgSend_tipCollectionViewCellCanDisplayAssets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipCollectionViewCellCanDisplayAssets:");
}

id objc_msgSend_tipCollectionViewCellContentLayoutChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipCollectionViewCellContentLayoutChanged:");
}

id objc_msgSend_tipCollectionViewCellHandleTripleTapInternalGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipCollectionViewCellHandleTripleTapInternalGesture:");
}

id objc_msgSend_tipForCorrelationIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipForCorrelationIdentifier:");
}

id objc_msgSend_tipForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipForIdentifier:");
}

id objc_msgSend_tipForIdentifier_includingCorrelation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipForIdentifier:includingCorrelation:");
}

id objc_msgSend_tipForTipID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipForTipID:");
}

id objc_msgSend_tipForVariantIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipForVariantIdentifier:");
}

id objc_msgSend_tipID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipID");
}

id objc_msgSend_tipId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipId");
}

id objc_msgSend_tipIntro(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipIntro");
}

id objc_msgSend_tipListViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipListViewController");
}

id objc_msgSend_tipSizes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipSizes");
}

id objc_msgSend_tipViewed_collectionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipViewed:collectionIdentifier:");
}

id objc_msgSend_tips(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tips");
}

id objc_msgSend_tipsAppActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipsAppActive");
}

id objc_msgSend_tipsByCollectionViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipsByCollectionViewController");
}

id objc_msgSend_tipsByCollectionViewController_tipsForCollectionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipsByCollectionViewController:tipsForCollectionID:");
}

id objc_msgSend_tipsForCollectionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipsForCollectionIdentifier:");
}

id objc_msgSend_tipsViewController_loadMainUserGuideWithIdentifier_topicId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipsViewController:loadMainUserGuideWithIdentifier:topicId:");
}

id objc_msgSend_tipsViewController_showSharedTipWithTipIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipsViewController:showSharedTipWithTipIdentifier:");
}

id objc_msgSend_tipsViewControllerContentUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipsViewControllerContentUpdated:");
}

id objc_msgSend_tipsViewControllerCurrentTipUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipsViewControllerCurrentTipUpdated:");
}

id objc_msgSend_tipsViewControllerShouldShowSearch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipsViewControllerShouldShowSearch:");
}

id objc_msgSend_tipsViewControllerShouldStartVideo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipsViewControllerShouldStartVideo:");
}

id objc_msgSend_title(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "title");
}

id objc_msgSend_titleFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleFont");
}

id objc_msgSend_titleLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleLabel");
}

id objc_msgSend_titleLabelCenterXConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleLabelCenterXConstraint");
}

id objc_msgSend_titleText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleText");
}

id objc_msgSend_toggleSavedTipWithCorrelationId_tipIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleSavedTipWithCorrelationId:tipIdentifier:");
}

id objc_msgSend_topAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topAnchor");
}

id objc_msgSend_topSafeAreaHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topSafeAreaHeight");
}

id objc_msgSend_topViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topViewController");
}

id objc_msgSend_topicId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicId");
}

id objc_msgSend_topicIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicIdentifier");
}

id objc_msgSend_trackSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackSession");
}

id objc_msgSend_trailingAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trailingAnchor");
}

id objc_msgSend_traitCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traitCollection");
}

id objc_msgSend_tryItViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tryItViewController");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "type");
}

id objc_msgSend_unarchivedObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClass:forKey:");
}

id objc_msgSend_uniqueIdentifierForCurrentTip(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueIdentifierForCurrentTip");
}

id objc_msgSend_updateActionButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateActionButton");
}

id objc_msgSend_updateAppInBackground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAppInBackground:");
}

id objc_msgSend_updateAppShortcutSuggestions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAppShortcutSuggestions");
}

id objc_msgSend_updateAppearanceWithSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAppearanceWithSize:");
}

id objc_msgSend_updateAssetIfAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAssetIfAllowed");
}

id objc_msgSend_updateAssetViewBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAssetViewBackground");
}

id objc_msgSend_updateAssetsConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAssetsConfiguration");
}

id objc_msgSend_updateAttributedString_forIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAttributedString:forIdentifier:");
}

id objc_msgSend_updateAttributedStringWithCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAttributedStringWithCache");
}

id objc_msgSend_updateBarAppearance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBarAppearance");
}

id objc_msgSend_updateBarButtonsForTip(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBarButtonsForTip");
}

id objc_msgSend_updateCollectionListModelDynamicSections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCollectionListModelDynamicSections");
}

id objc_msgSend_updateContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateContent");
}

id objc_msgSend_updateContentBackgroundWithTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateContentBackgroundWithTraitCollection:");
}

id objc_msgSend_updateContentLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateContentLabel");
}

id objc_msgSend_updateFonts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateFonts");
}

id objc_msgSend_updateFootnoteAttributedString_forIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateFootnoteAttributedString:forIdentifier:");
}

id objc_msgSend_updateHeroHeightConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateHeroHeightConstraint");
}

id objc_msgSend_updateImageReadyStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateImageReadyStatus");
}

id objc_msgSend_updateImageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateImageView");
}

id objc_msgSend_updateLayoutAttributesCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLayoutAttributesCache");
}

id objc_msgSend_updateLoadingStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLoadingStatus");
}

id objc_msgSend_updateMediaSizeType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateMediaSizeType");
}

id objc_msgSend_updateNavigationBarButtons(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateNavigationBarButtons");
}

id objc_msgSend_updateNavigationTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateNavigationTitle:");
}

id objc_msgSend_updatePageControlToTip_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePageControlToTip:");
}

id objc_msgSend_updatePagingScrollState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePagingScrollState");
}

id objc_msgSend_updateSavedTipsContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSavedTipsContent");
}

id objc_msgSend_updateShortcutItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateShortcutItems");
}

id objc_msgSend_updateShouldHoldOffVideo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateShouldHoldOffVideo");
}

id objc_msgSend_updateSupplementaryColumnForCollectionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSupplementaryColumnForCollectionID:");
}

id objc_msgSend_updateTipForCell_startVideo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTipForCell:startVideo:");
}

id objc_msgSend_updateTips(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTips");
}

id objc_msgSend_updateTipsForCurrentCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTipsForCurrentCollection");
}

id objc_msgSend_updateTitleTextForCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTitleTextForCollection:");
}

id objc_msgSend_updateVideoPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateVideoPath");
}

id objc_msgSend_updateViewCollapsed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateViewCollapsed:");
}

id objc_msgSend_updateWithCollectionID_tipID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithCollectionID:tipID:");
}

id objc_msgSend_updatingContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatingContent");
}

id objc_msgSend_userGuideDisplayed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userGuideDisplayed");
}

id objc_msgSend_userGuideWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userGuideWithIdentifier:");
}

id objc_msgSend_userGuides(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userGuides");
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInfo");
}

id objc_msgSend_userInterfaceIdiom(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInterfaceIdiom");
}

id objc_msgSend_userInterfaceStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInterfaceStyle");
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "value");
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "version");
}

id objc_msgSend_videoHasFinished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "videoHasFinished");
}

id objc_msgSend_videoLoadingFinished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "videoLoadingFinished");
}

id objc_msgSend_view(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "view");
}

id objc_msgSend_viewCollapsed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewCollapsed");
}

id objc_msgSend_viewControllerForColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewControllerForColumn:");
}

id objc_msgSend_viewControllers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewControllers");
}

id objc_msgSend_viewCycleDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewCycleDelegate");
}

id objc_msgSend_viewMethod(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewMethod");
}

id objc_msgSend_viewModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewModel");
}

id objc_msgSend_viewNavigationCollapsed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewNavigationCollapsed");
}

id objc_msgSend_viewWillAppear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewWillAppear");
}

id objc_msgSend_visibleCells(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleCells");
}

id objc_msgSend_webURLPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "webURLPath");
}

id objc_msgSend_webpageURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "webpageURL");
}

id objc_msgSend_whiteColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "whiteColor");
}

id objc_msgSend_widthAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "widthAnchor");
}

id objc_msgSend_window(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "window");
}
