void sub_100132A2C(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;
  _QWORD v6[7];

  v4 = objc_autoreleasePoolPush();
  if (!a1)
  {
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: manager is null", "__WiFiDeviceManagerAsyncQueryLOITypeForLatestLocation");
    goto LABEL_11;
  }
  if (!+[WiFiLOIManager sharedWiFiLOIManager](WiFiLOIManager, "sharedWiFiLOIManager"))
  {
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: sharedWiFiLOIManager is nil", "__WiFiDeviceManagerAsyncQueryLOITypeForLatestLocation");
LABEL_11:
    objc_autoreleasePoolPop(v5);
    goto LABEL_6;
  }
  if (a2)
    CFRetain(a2);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100132DC8;
  v6[3] = &unk_100231898;
  v6[5] = a1;
  v6[6] = a2;
  v6[4] = 0;
  objc_msgSend(+[WiFiLOIManager sharedWiFiLOIManager](WiFiLOIManager, "sharedWiFiLOIManager"), "asyncQueryLOITypeAtLatestLocationWithCompletion:", v6);
LABEL_6:
  objc_autoreleasePoolPop(v4);
}

void sub_100132B40(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  _WORD *v13;
  char *v15;
  NSString *v16;
  id v17;
  void *v18;
  _WORD *v19;
  id v20;
  unint64_t v21;
  id v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;

  v4 = objc_autoreleasePoolPush();
  if (sub_100075280(*(_QWORD *)(a1 + 64)))
  {
    v5 = (void *)sub_10002BE64(a2, CFSTR("JOIN_STATUS_SUBSTATE_INFO"));
    if (!v5)
    {
      v24 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s substatesArray for join status is nil", "__WiFiDeviceManagerProcessJoinStatusSubState");
      objc_autoreleasePoolPop(v24);
      if (a2)
        goto LABEL_29;
      goto LABEL_30;
    }
    v6 = v5;
    if (objc_msgSend(v5, "count"))
    {
      v7 = 0;
      v25 = a2;
      v26 = v4;
      do
      {
        v8 = objc_msgSend(v6, "objectAtIndex:", v7);
        if (v8)
        {
          v9 = v8;
          v10 = objc_msgSend(v8, "objectForKey:", CFSTR("JOIN_STATUS_SUBSTATE_FLAGS"));
          if (v10)
          {
            if (objc_msgSend(v10, "intValue"))
            {
              v11 = objc_msgSend(v9, "objectForKey:", CFSTR("BSSID"));
              if (v11)
              {
                v12 = v11;
                v13 = objc_msgSend(v11, "bytes");
                if (*(_DWORD *)v13 || v13[2] != 0)
                {
                  v15 = ether_ntoa((const ether_addr *)objc_msgSend(v12, "bytes"));
                  v16 = v15
                      ? +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15)
                      : 0;
                  v17 = sub_100132F18(v9, (uint64_t)v16);
                  if (v17)
                  {
                    v18 = v17;
                    if (objc_msgSend(v17, "count"))
                    {
                      v19 = sub_10002B2DC((uint64_t)kCFAllocatorDefault, a2);
                      sub_10002C478((uint64_t)v19, CFSTR("BSSID"), v16);
                      v20 = sub_100027D10((uint64_t)v19);
                      if (objc_msgSend(v18, "count"))
                      {
                        v21 = 0;
                        do
                        {
                          v22 = sub_1000FCB38(a1, 8, (uint64_t)objc_msgSend(v18, "objectAtIndex:", v21), (uint64_t)v16, 2);
                          objc_msgSend(*(id *)(a1 + 6648), "setNetworkDenyListInfo:forScanResult:", v22, v20);

                          ++v21;
                        }
                        while (v21 < (unint64_t)objc_msgSend(v18, "count"));
                      }
                      v23 = *(void **)(a1 + 7368);
                      if (v23)
                        objc_msgSend(v23, "addFaultEvent:forInterface:", 9, sub_100025C3C(*(_QWORD *)(a1 + 64)));
                      v4 = v26;
                      if (v19)
                        CFRelease(v19);

                      a2 = v25;
                    }

                  }
                }
              }
            }
          }
        }
        ++v7;
      }
      while (v7 < (unint64_t)objc_msgSend(v6, "count"));
    }
  }
  if (a2)
LABEL_29:
    sub_10002C478(a2, CFSTR("JOIN_STATUS_SUBSTATE_INFO"), 0);
LABEL_30:
  objc_autoreleasePoolPop(v4);
}

void sub_100132DC8(_QWORD *a1, int a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  const void *v6;
  _QWORD v7[7];
  int v8;

  v3 = a1[5];
  v4 = *(NSObject **)(v3 + 240);
  if (v4)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100132E4C;
    v7[3] = &unk_100231870;
    v5 = a1[6];
    v8 = a2;
    v7[5] = v5;
    v7[6] = v3;
    v7[4] = a1[4];
    dispatch_sync(v4, v7);
  }
  else
  {
    v6 = (const void *)a1[6];
    if (v6)
      CFRelease(v6);
  }
}

uint64_t sub_100132E4C(uint64_t a1)
{
  void *v2;
  void *v3;
  const void *v4;
  const void *v5;
  unsigned int v6;
  uint64_t result;

  v2 = objc_autoreleasePoolPush();
  v3 = (void *)qword_10026DD20;
  if (qword_10026DD20)
  {
    v4 = sub_10002B088(*(const void **)(a1 + 40));
    objc_msgSend(v3, "WFLog:message:", 3, "%s: LOI Type for '%@' = %@(%d)", "__WiFiDeviceManagerAsyncQueryLOITypeForLatestLocation_block_invoke_2", v4, sub_100064DE4(*(_DWORD *)(a1 + 56)), *(unsigned int *)(a1 + 56));
  }
  objc_autoreleasePoolPop(v2);
  v5 = *(const void **)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(a1 + 48) + 6664) = *(_DWORD *)(a1 + 56);
  if (v5)
  {
    v6 = *(_DWORD *)(a1 + 56);
    if (v6)
    {
      sub_1000CC35C(v5, v6);
      v5 = *(const void **)(a1 + 40);
    }
    CFRelease(v5);
  }
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_100132F18(void *a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned int v18;
  unsigned int v19;
  void *v20;
  void *v22;
  id v23;
  id v24;
  id v25;

  v4 = objc_autoreleasePoolPush();
  if (!a1)
  {
    v22 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s dict is nil", "__CopyReasonsFromSubStatesForBssBlacklist");
    goto LABEL_51;
  }
  if (!a2)
  {
    v22 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s bssid is nil", "__CopyReasonsFromSubStatesForBssBlacklist");
LABEL_51:
    objc_autoreleasePoolPop(v22);
    v12 = 0;
    goto LABEL_46;
  }
  v5 = objc_msgSend(a1, "objectForKey:", CFSTR("AUTHEVENT_STATUS"));
  v6 = objc_msgSend(a1, "objectForKey:", CFSTR("AUTHEVENT_REASON"));
  v7 = objc_msgSend(a1, "objectForKey:", CFSTR("ASSOCEVENT_STATUS"));
  v8 = objc_msgSend(a1, "objectForKey:", CFSTR("ASSOCEVENT_REASON"));
  v23 = objc_msgSend(a1, "objectForKey:", CFSTR("SETSSID_STATUS"));
  v24 = objc_msgSend(a1, "objectForKey:", CFSTR("SETSSID_REASON"));
  v9 = objc_msgSend(a1, "objectForKey:", CFSTR("SUPPLICANTEVENT_STATUS"));
  v10 = objc_msgSend(a1, "objectForKey:", CFSTR("SUPPLICANTEVENT_REASON"));
  v11 = objc_msgSend(a1, "objectForKey:", CFSTR("REASSOCEVENT_STATUS"));
  v25 = objc_msgSend(a1, "objectForKey:", CFSTR("REASSOCEVENT_REASON"));
  v12 = 0;
  if (v5 && v6)
  {
    if (sub_100133504((int)objc_msgSend(v5, "intValue"), (int)objc_msgSend(v6, "intValue")))
    {
      v13 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s Auth Status/Reason for %@ BssBlacklist Eligible - Status:%d ieeeStatus:%d", "__CopyReasonsFromSubStatesForBssBlacklist", a2, (unint64_t)objc_msgSend(v5, "intValue") & 0x1FF, (unint64_t)objc_msgSend(v6, "intValue") & 0x1FF);
      objc_autoreleasePoolPop(v13);
      v12 = objc_alloc_init((Class)NSMutableArray);
      objc_msgSend(v12, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v6, "intValue")));
    }
    else
    {
      v12 = 0;
    }
  }
  if (v7 && v8 && sub_100133504((int)objc_msgSend(v7, "intValue"), (int)objc_msgSend(v8, "intValue")))
  {
    v14 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s Assoc Status/Reason for %@ BssBlacklist Eligible - Status:%d ieeeStatus:%d", "__CopyReasonsFromSubStatesForBssBlacklist", a2, (unint64_t)objc_msgSend(v7, "intValue") & 0x1FF, (unint64_t)objc_msgSend(v8, "intValue") & 0x1FF);
    objc_autoreleasePoolPop(v14);
    if (!v12)
      v12 = objc_alloc_init((Class)NSMutableArray);
    objc_msgSend(v12, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v8, "intValue")));
  }
  if (v11 && v25 && sub_100133504((int)objc_msgSend(v11, "intValue"), (int)objc_msgSend(v25, "intValue")))
  {
    v15 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s Reassoc Status/Reason for %@ BssBlacklist Eligible - Status:%d ieeeStatus:%d", "__CopyReasonsFromSubStatesForBssBlacklist", a2, (unint64_t)objc_msgSend(v11, "intValue") & 0x1FF, (unint64_t)objc_msgSend(v25, "intValue") & 0x1FF);
    objc_autoreleasePoolPop(v15);
    v16 = v24;
    if (!v12)
      v12 = objc_alloc_init((Class)NSMutableArray);
    objc_msgSend(v12, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v25, "intValue")));
    if (!v23)
      goto LABEL_35;
    goto LABEL_28;
  }
  v16 = v24;
  if (v23)
  {
LABEL_28:
    if (v16 && sub_100133504((int)objc_msgSend(v23, "intValue"), (int)objc_msgSend(v16, "intValue")))
    {
      v17 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s SetSsid Status/Reason for %@ BssBlacklist Eligible - Status:%d ieeeStatus:%d", "__CopyReasonsFromSubStatesForBssBlacklist", a2, (unint64_t)objc_msgSend(v23, "intValue") & 0x1FF, (unint64_t)objc_msgSend(v16, "intValue") & 0x1FF);
      objc_autoreleasePoolPop(v17);
      if (!v12)
        v12 = objc_alloc_init((Class)NSMutableArray);
      objc_msgSend(v12, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v16, "intValue")));
    }
  }
LABEL_35:
  if (v9 && v10)
  {
    if ((v18 = objc_msgSend(v9, "intValue"),
          v19 = objc_msgSend(v10, "intValue"),
          v18 + 528350207 <= 7)
      && ((1 << (v18 - 1)) & 0x9F) != 0
      || v18 == -528350133)
    {
      if (v19 + 528339945 >= 0xFFFFFFE9)
      {
        v20 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s Supplicant Event Status/Reason for %@ BssBlacklist Eligible - Status:%d ieeeStatus:%d", "__CopyReasonsFromSubStatesForBssBlacklist", a2, (unint64_t)objc_msgSend(v9, "intValue") & 0x1FF, (unint64_t)objc_msgSend(v10, "intValue") & 0x1FF);
        objc_autoreleasePoolPop(v20);
        if (!v12)
          v12 = objc_alloc_init((Class)NSMutableArray);
        objc_msgSend(v12, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v10, "intValue")));
      }
    }
  }
LABEL_46:
  objc_autoreleasePoolPop(v4);
  return v12;
}

uint64_t sub_100133504(int a1, int a2)
{
  uint64_t result;

  if (((a1 + 528350207) > 7 || ((1 << (a1 - 1)) & 0x9F) == 0) && a1 != -528350133)
    return 0;
  result = 1;
  if (((a2 + 528347119) > 0x14 || ((1 << (a2 - 17)) & 0x172001) == 0)
    && ((a2 + 528347054) > 0x11 || ((1 << (a2 - 82)) & 0x20C03) == 0))
  {
    return 0;
  }
  return result;
}

void sub_10013359C(uint64_t a1)
{
  uint64_t v2;
  CFTypeRef *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  const void *v7;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v2 + 240))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v3 = (CFTypeRef *)(a1 + 32);
    (*(void (**)(uint64_t, _QWORD, const __CFString *, const CFBooleanRef, _QWORD))(v2 + 4744))(v2, *(_QWORD *)(*(_QWORD *)(v4 + 8) + 24), CFSTR("FailureCountCurrent"), kCFBooleanTrue, *(_QWORD *)(v2 + 4752));
    CFRelease(v3[1]);
    v5 = *v3;
  }
  else
  {
    CFRelease((CFTypeRef)v2);
    v6 = *(_QWORD **)(a1 + 32);
    v3 = (CFTypeRef *)(a1 + 32);
    v5 = v6;
  }
  v7 = *(const void **)(v5[1] + 24);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(*((_QWORD *)*v3 + 1) + 24) = 0;
  }
}

void sub_100133624(uint64_t a1, void *a2)
{
  if (a2)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 7368), "setJoinEvent:withReason:lastDisconnectReason:lastJoinFailure:andNetworkDetails:forInterface:", 0, 1, 0, *(int *)(a1 + 40), a2, sub_100025C3C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64)));

  }
}

uint64_t sub_100133688(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const __CFDictionary *v10;
  const __CFArray *v11;
  CFTypeID TypeID;
  const void *ValueAtIndex;
  const __CFArray *v14;
  CFIndex v15;
  id v16;
  const void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  CFTypeID v22;
  const void *v23;
  const __CFString *v24;
  NSError *v25;

  v4 = objc_autoreleasePoolPush();
  v5 = *(unsigned int *)(a1 + 3280);
  v6 = sub_1000D71FC(a2);
  v7 = sub_1000C053C(a2);
  if (v7)
  {
    v8 = (void *)v7;
    v9 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: responseType=%d ssid=%@", "__WiFiDeviceManagerProcessPasswordNotification", v6, sub_10002B088(v8));
    objc_autoreleasePoolPop(v9);
    switch((int)v6)
    {
      case 1:
        v10 = sub_1000D74A0(a2, kCFUserNotificationTextFieldValuesKey);
        if (!v10)
          break;
        v11 = v10;
        TypeID = CFArrayGetTypeID();
        if (TypeID == CFGetTypeID(v11))
        {
          if (CFArrayGetCount(v11) <= 1)
          {
            if (CFArrayGetCount(v11) < 1)
              goto LABEL_24;
            v14 = v11;
            v15 = 0;
          }
          else
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v11, 0);
            sub_10002C478((uint64_t)v8, CFSTR("UserName"), ValueAtIndex);
            v14 = v11;
            v15 = 1;
          }
          v24 = (const __CFString *)CFArrayGetValueAtIndex(v14, v15);
          v23 = v8;
        }
        else
        {
          v22 = CFStringGetTypeID();
          if (v22 != CFGetTypeID(v11))
            goto LABEL_24;
          v23 = v8;
          v24 = (const __CFString *)v11;
        }
        sub_1000C64F0(v23, v24);
LABEL_24:
        v25 = sub_1001161F4(a1, v8, 1);
        if ((_DWORD)v25)
        {
          v19 = sub_100129744(a1, v8, 0, v25);
          goto LABEL_13;
        }
        break;
      case 2:
        sub_1001328A8(a1, v8, 1);
        v16 = sub_100027D10((uint64_t)v8);
        v17 = sub_10002BE64((uint64_t)v8, CFSTR("BSSID"));
        v18 = sub_1000FCB38(a1, 0, 0, (uint64_t)v17, 3);
        objc_msgSend(*(id *)(a1 + 6648), "setNetworkDenyListInfo:forScanResult:", v18, v16);

        goto LABEL_10;
      case 3:
LABEL_10:
        if (_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
          sub_100132420(a1, (uint64_t)v8, 89, 0, 0);
        v19 = sub_100130A04(a1);
LABEL_13:
        v5 = v19;
        break;
      case 4:
        v20 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: opening settings to collect credentials", "__WiFiDeviceManagerProcessPasswordNotification");
        objc_autoreleasePoolPop(v20);
        sub_10013427C(0, (CFDictionaryRef *)v8);
        v5 = 14;
        break;
      default:
        break;
    }
  }
  objc_autoreleasePoolPop(v4);
  return v5;
}

uint64_t sub_100133940(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  unsigned int v6;
  const void *v7;
  void *v8;
  const __CFDictionary *v9;
  const void *Value;
  const void *v11;
  const __CFDictionary *v12;
  const __CFDictionary *MutableCopy;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  __CFDictionary *v16;
  const __CFDictionary *v17;
  __CFDictionary *v18;
  __CFDictionary *v19;
  CFDictionaryRef *v20;
  CFDictionaryRef *v21;
  id v22;
  const void *v23;
  id v24;
  void *v25;
  NSError *v26;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;

  v4 = objc_autoreleasePoolPush();
  v5 = *(unsigned int *)(a1 + 3280);
  v6 = sub_1000D71FC(a2);
  v7 = (const void *)sub_1000C053C(a2);
  v8 = objc_autoreleasePoolPush();
  if (v7)
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: ResponseType=%@", "__WiFiDeviceManagerProcessEAPTrustNotification", sub_1000D75DC(v6));
    objc_autoreleasePoolPop(v8);
    switch(v6)
    {
      case 1u:
      case 4u:
        v9 = (const __CFDictionary *)sub_100029860(a2);
        if (v9)
        {
          Value = CFDictionaryGetValue(v9, CFSTR("TLSServerCertificateChain"));
          if (Value)
          {
            v11 = Value;
            v12 = sub_1000173C0((uint64_t)v7);
            MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v12);
            if (v12)
              CFRelease(v12);
            v14 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, CFSTR("EnterpriseProfile"));
            if (v14)
            {
              v15 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v14);
              if (v15)
              {
                v16 = v15;
                v17 = (const __CFDictionary *)CFDictionaryGetValue(v15, CFSTR("EAPClientConfiguration"));
                if (v17)
                {
                  v18 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v17);
                  if (v18)
                  {
                    v19 = v18;
                    CFDictionarySetValue(v18, CFSTR("TLSSaveTrustExceptions"), kCFBooleanTrue);
                    CFDictionarySetValue(v19, CFSTR("TLSUserTrustProceedCertificateChain"), v11);
                    CFDictionarySetValue(v16, CFSTR("EAPClientConfiguration"), v19);
                    CFRelease(v19);
                    CFDictionarySetValue(MutableCopy, CFSTR("EnterpriseProfile"), v16);
                    CFRelease(v16);
                    v20 = (CFDictionaryRef *)sub_10002B314((uint64_t)kCFAllocatorDefault, MutableCopy);
                    if (v20)
                    {
                      v21 = v20;
                      if (v6 == 4)
                      {
                        sub_10013427C(1, v20);
                        CFRelease(v21);
                        v16 = 0;
                        v5 = 14;
                        if (!MutableCopy)
                          goto LABEL_31;
LABEL_30:
                        CFRelease(MutableCopy);
                        goto LABEL_31;
                      }
                      v25 = objc_autoreleasePoolPush();
                      if (qword_10026DD20)
                        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: proceeding with joining %@", "__WiFiDeviceManagerProcessEAPTrustNotification", v21);
                      objc_autoreleasePoolPop(v25);
                      *(_QWORD *)(a1 + 1128) = 0;
                      v26 = sub_1001161F4(a1, v21, 1);
                      if (!(_DWORD)v26)
                      {
                        sub_100135D8C(a1, CFSTR("autoJoinAssociating"), v21, 0);
                        v16 = 0;
                        v5 = 12;
                        if (!MutableCopy)
                          goto LABEL_31;
                        goto LABEL_30;
                      }
                      v5 = sub_100129744(a1, v21, 0, v26);
                    }
                    else
                    {
                      v32 = objc_autoreleasePoolPush();
                      if (qword_10026DD20)
                        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: failed to create network", "__WiFiDeviceManagerProcessEAPTrustNotification");
                      objc_autoreleasePoolPop(v32);
                    }
                    v16 = 0;
                    if (MutableCopy)
                      goto LABEL_30;
LABEL_31:
                    if (v16)
                      CFRelease(v16);
                    goto LABEL_33;
                  }
                  v31 = objc_autoreleasePoolPush();
                  if (qword_10026DD20)
                    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: failed to make mutable copy of eap client config", "__WiFiDeviceManagerProcessEAPTrustNotification", v33);
                }
                else
                {
                  v31 = objc_autoreleasePoolPush();
                  if (qword_10026DD20)
                    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: eap client config is null for network %@", "__WiFiDeviceManagerProcessEAPTrustNotification", sub_10002B088(v7));
                }
                objc_autoreleasePoolPop(v31);
LABEL_53:
                if (MutableCopy)
                  goto LABEL_30;
                goto LABEL_31;
              }
              v30 = objc_autoreleasePoolPush();
              if (qword_10026DD20)
                objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: failed to make mutable copy of eap profile", "__WiFiDeviceManagerProcessEAPTrustNotification", v33);
            }
            else
            {
              v30 = objc_autoreleasePoolPush();
              if (qword_10026DD20)
                objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: eap profile is null for network %@", "__WiFiDeviceManagerProcessEAPTrustNotification", sub_10002B088(v7));
            }
            objc_autoreleasePoolPop(v30);
            v16 = 0;
            goto LABEL_53;
          }
          v29 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: certificateChain is null for network %@", "__WiFiDeviceManagerProcessEAPTrustNotification", sub_10002B088(v7));
        }
        else
        {
          v29 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: notification for %@ is missing additional information", "__WiFiDeviceManagerProcessEAPTrustNotification", sub_10002B088(v7));
        }
        v28 = v29;
        goto LABEL_42;
      case 2u:
        sub_1001328A8(a1, v7, 1);
        v22 = sub_100027D10((uint64_t)v7);
        v23 = sub_10002BE64((uint64_t)v7, CFSTR("BSSID"));
        v24 = sub_1000FCB38(a1, 0, 0, (uint64_t)v23, 3);
        objc_msgSend(*(id *)(a1 + 6648), "setNetworkDenyListInfo:forScanResult:", v24, v22);

        goto LABEL_18;
      case 3u:
LABEL_18:
        if (sub_10002DAB4((uint64_t)v7))
          sub_100072E44(*(_QWORD *)(a1 + 64), v7, 1);
        if (_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
          sub_100132420(a1, (uint64_t)v7, 89, 0, 0);
        v5 = sub_100130A04(a1);
        goto LABEL_33;
      default:
        goto LABEL_33;
    }
  }
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: network is null", "__WiFiDeviceManagerProcessEAPTrustNotification");
  v28 = v8;
LABEL_42:
  objc_autoreleasePoolPop(v28);
LABEL_33:
  objc_autoreleasePoolPop(v4);
  return v5;
}

const __CFArray *sub_100133EAC(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  const void *v6;
  CFTypeRef v7;
  NSObject *v8;
  void *v10;
  _QWORD block[6];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 3280);
  v5 = sub_1000D71FC(a2);
  if (v5 == 4)
  {
    sub_10013427C(0, 0);
  }
  else if (v5 == 1)
  {
    v6 = (const void *)sub_1000C053C(a2);
    if (*(_QWORD *)(a1 + 3872))
    {
      if (*(_QWORD *)(a1 + 240))
      {
        v12 = 0;
        v13 = &v12;
        v14 = 0x2020000000;
        v15 = 0;
        if (v6)
        {
          v7 = CFRetain(v6);
          v13[3] = (uint64_t)v7;
        }
        CFRetain((CFTypeRef)a1);
        v8 = *(NSObject **)(a1 + 240);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100134548;
        block[3] = &unk_10022F160;
        block[4] = &v12;
        block[5] = a1;
        dispatch_async(v8, block);
        _Block_object_dispose(&v12, 8);
      }
      else
      {
        v10 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: null queue.", "__WiFiDeviceManagerProcessAskToJoinNotification");
        objc_autoreleasePoolPop(v10);
      }
    }
    return 0;
  }
  if (v4)
    return sub_1000078D0(a1);
  return 0;
}

void sub_100133FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100134010(uint64_t a1, int a2)
{
  uint64_t v4;
  id v5;
  void *v7;
  void *v8;
  WiFiUserNotRespondedHotspotInfoType *v9;
  const __CFString *v10;
  const __CFString *v11;
  void *v12;

  v4 = *(unsigned int *)(a1 + 3280);
  v5 = objc_msgSend(*(id *)(a1 + 6744), "getHotspotDeviceName:", *(_QWORD *)(a1 + 6904));
  switch(a2)
  {
    case 3:
      v7 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: User response System timeout", "__WiFiDeviceManagerProcessAskToJoinHotspotNotification");
      objc_autoreleasePoolPop(v7);
      if (_os_feature_enabled_impl("WiFiManager", "AskToJoinPersonalHotspotBanner")
        && *(_QWORD *)(a1 + 6904))
      {
        v8 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Adding %@:[%@] to no response Hotspot List", "__WiFiDeviceManagerProcessAskToJoinHotspotNotification", v5, *(_QWORD *)(a1 + 6904));
        objc_autoreleasePoolPop(v8);
        v9 = -[WiFiUserNotRespondedHotspotInfoType initWithHotspot:]([WiFiUserNotRespondedHotspotInfoType alloc], "initWithHotspot:", *(_QWORD *)(a1 + 6904));
        objc_msgSend(*(id *)(a1 + 6936), "addObject:", v9);

      }
      sub_1000F48F0(a1, 0);
      v4 = *(unsigned int *)(a1 + 6892);
      sub_1001345E4((uint64_t *)a1, CFSTR("userJoinAborted"), 0);
      if (!_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
        return v4;
      v10 = (const __CFString *)NSPOSIXErrorDomain;
      v11 = CFSTR("System canceled hotspot notification");
LABEL_20:
      sub_100134768(a1, (uint64_t)v5, 89, v10, (uint64_t)v11);
      return v4;
    case 2:
      if (*(_QWORD *)(a1 + 6904))
      {
        v12 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Adding %@:[%@] to User Suppressed List until next link state change", "__WiFiDeviceManagerProcessAskToJoinHotspotNotification", v5, *(_QWORD *)(a1 + 6904));
        objc_autoreleasePoolPop(v12);
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 6912), *(const void **)(a1 + 6904));
      }
      *(_QWORD *)(a1 + 6904) = 0;
      *(_QWORD *)(a1 + 6872) = 0;
      sub_1000F48F0(a1, 0);
      v4 = *(unsigned int *)(a1 + 6892);
      *(_DWORD *)(a1 + 6456) = -3909;
      sub_10005C1E0((unsigned int *)(a1 + 6456));
      sub_1001345E4((uint64_t *)a1, CFSTR("userJoinAborted"), 0);
      if (!_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
        return v4;
      v10 = (const __CFString *)NSPOSIXErrorDomain;
      v11 = CFSTR("User canceled hotspot notification");
      goto LABEL_20;
    case 1:
      return sub_10012B860(a1, *(_QWORD *)(a1 + 6904));
  }
  return v4;
}

void sub_10013427C(uint64_t a1, CFDictionaryRef *a2)
{
  const __CFString *v4;
  const __CFString *v5;
  CFURLRef v6;
  void *v7;
  __CFString *v8;
  void *v9;
  __CFString *v10;
  void *v11;
  void *v12;
  void *v13;

  if (a1 > 2 || !*off_100232270[(int)a1])
  {
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: failed to create urlPathString for type %d", "__WiFiDeviceManagerOpenSettings", a1);
    goto LABEL_17;
  }
  v4 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("prefs:root=WIFI&path=%@"), *off_100232270[(int)a1]);
  if (!v4)
  {
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: failed to create urlString for type %d", "__WiFiDeviceManagerOpenSettings", a1);
LABEL_17:
    objc_autoreleasePoolPop(v11);
    return;
  }
  v5 = v4;
  v6 = CFURLCreateWithString(kCFAllocatorDefault, v4, 0);
  v7 = objc_autoreleasePoolPush();
  if (!v6)
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: failed to create url for type %d", "__WiFiDeviceManagerOpenSettings", a1);
    objc_autoreleasePoolPop(v7);
    v10 = (__CFString *)v5;
    goto LABEL_14;
  }
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: launching settings with url %@", "__WiFiDeviceManagerOpenSettings", v6);
  objc_autoreleasePoolPop(v7);
  if (!a2)
  {
    v12 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: skip persisting network to disk", "__WiFiDeviceManagerOpenSettings");
    objc_autoreleasePoolPop(v12);
    v8 = 0;
    goto LABEL_11;
  }
  v8 = (__CFString *)CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%@/%@"), CFSTR("/var/mobile/Library/Caches/com.apple.wifi/"), CFSTR("LastEnterpriseNetwork.plist"));
  v9 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: archiving network to path %@", "__WiFiDeviceManagerOpenSettings", v8);
  objc_autoreleasePoolPop(v9);
  if (sub_1000CBA0C(a2, v8))
  {
LABEL_11:
    objc_msgSend(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"), "openSensitiveURL:withOptions:", v6, 0);
    goto LABEL_12;
  }
  v13 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: failed to archive network to path %@", "__WiFiDeviceManagerOpenSettings", v8);
  objc_autoreleasePoolPop(v13);
LABEL_12:
  CFRelease(v5);
  CFRelease(v6);
  if (v8)
  {
    v10 = v8;
LABEL_14:
    CFRelease(v10);
  }
}

void sub_100134548(uint64_t a1)
{
  uint64_t *v2;
  void (*v3)(uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v4;
  CFTypeRef *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  const void *v9;

  v2 = *(uint64_t **)(a1 + 40);
  if (v2[30])
  {
    v3 = (void (*)(uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))v2[484];
    v4 = sub_100025C3C(v2[8]);
    v6 = *(_QWORD *)(a1 + 32);
    v5 = (CFTypeRef *)(a1 + 32);
    v3(v2, v4, *(_QWORD *)(*(_QWORD *)(v6 + 8) + 24), 0, 0, *((_QWORD *)v5[1] + 485));
    CFRelease(v5[1]);
    v7 = *v5;
  }
  else
  {
    CFRelease(*(CFTypeRef *)(a1 + 40));
    v8 = *(_QWORD **)(a1 + 32);
    v5 = (CFTypeRef *)(a1 + 32);
    v7 = v8;
  }
  v9 = *(const void **)(v7[1] + 24);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(*((_QWORD *)*v5 + 1) + 24) = 0;
  }
}

void sub_1001345E4(uint64_t *a1, const void *a2, const void *a3)
{
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  void (*v8)(uint64_t *, uint64_t, uint64_t, __CFDictionary *);
  uint64_t v9;
  void *v10;

  if (!a1)
  {
    v10 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null manager.", "__WiFiDeviceManagerPostUserJoinNotification");
    goto LABEL_15;
  }
  if (!a2)
  {
    v10 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null status.", "__WiFiDeviceManagerPostUserJoinNotification");
    goto LABEL_15;
  }
  if (!a1[511])
    return;
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    v10 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null detailedState.", "__WiFiDeviceManagerPostUserJoinNotification");
LABEL_15:
    objc_autoreleasePoolPop(v10);
    return;
  }
  v7 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("userJoinStatus"), a2);
  if (a3)
    CFDictionarySetValue(v7, CFSTR("userJoinNetwork"), a3);
  v8 = (void (*)(uint64_t *, uint64_t, uint64_t, __CFDictionary *))a1[511];
  v9 = sub_100025C3C(a1[8]);
  v8(a1, v9, a1[512], v7);
  CFRelease(v7);
}

void sub_100134768(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorDomain a4, uint64_t a5)
{
  void *v10;
  NSDictionary *v11;
  CFErrorDomain v12;
  uint64_t v13;
  NSErrorUserInfoKey v14;
  uint64_t v15;

  v10 = objc_autoreleasePoolPush();
  if (!a4)
    a4 = kCFErrorDomainPOSIX;
  if (a5)
  {
    v14 = NSLocalizedDescriptionKey;
    v15 = a5;
    v11 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1);
    v12 = a4;
    v13 = a3;
  }
  else
  {
    v12 = a4;
    v13 = a3;
    v11 = 0;
  }
  +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v12, v13, v11);
  sub_100134870(a1, a2);
  objc_autoreleasePoolPop(v10);
}

void sub_100134870(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  v4 = objc_autoreleasePoolPush();
  if (a1)
  {
    if (a2)
    {
      if (*(_QWORD *)(a1 + 8856))
      {
        v5 = *(_QWORD *)(a1 + 8848);
        if (v5)
        {
          if (objc_msgSend(*(id *)(a1 + 6744), "isEqualHotspotDevicesName:compareTo:", v5, a2))
          {
            (*(void (**)(void))(*(_QWORD *)(a1 + 8856) + 16))();
            _Block_release(*(const void **)(a1 + 8856));
            *(_QWORD *)(a1 + 8856) = 0;
            CFRelease(*(CFTypeRef *)(a1 + 8848));
            *(_QWORD *)(a1 + 8848) = 0;
          }
        }
      }
    }
  }
  objc_autoreleasePoolPop(v4);
}

void sub_1001348F8(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  _QWORD *v7;
  _QWORD *v8;
  const void *v9;

  v2 = *(_QWORD **)(a1 + 40);
  if (v2[30])
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: Adding network '%@' to known network list", "__WiFiDeviceManagerProcessAutoHotspotJoinRecommendationNotification_block_invoke", sub_10002B088(*(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)));
    objc_autoreleasePoolPop(v3);
    v5 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v6 = (CFTypeRef *)(a1 + 32);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v4 + 4584))(v4, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 24), *(_QWORD *)(v4 + 4592));
    CFRelease(v6[1]);
    v7 = *v6;
  }
  else
  {
    CFRelease(v2);
    v8 = *(_QWORD **)(a1 + 32);
    v6 = (CFTypeRef *)(a1 + 32);
    v7 = v8;
  }
  v9 = *(const void **)(v7[1] + 24);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(*((_QWORD *)*v6 + 1) + 24) = 0;
  }
}

void sub_1001349CC(_QWORD *a1)
{
  _QWORD *v2;
  NSObject *v3;
  _QWORD block[5];

  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40) = objc_msgSend(*(id *)(a1[7] + 6744), "newHotspot:error:", *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40), *(_QWORD *)(a1[6] + 8) + 40);
  v2 = (_QWORD *)a1[7];
  v2[874] = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40);
  v2[875] = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40);
  v3 = v2[30];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100134A84;
  block[3] = &unk_10022EA38;
  block[4] = v2;
  dispatch_sync(v3, block);

}

CFAbsoluteTime sub_100134A84(uint64_t a1)
{
  uint64_t v2;
  CFAbsoluteTime result;
  void *v4;

  v2 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v2 + 7008) = 0;
  if (*(_DWORD *)(v2 + 3280) == 19)
  {
    sub_1000F49C8(v2);
  }
  else
  {
    v4 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Received Enabled Hotspot Devices in state %d", "__WiFiDeviceManagerEnableRemoteHotspotDevice_block_invoke_2", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 3280));
    objc_autoreleasePoolPop(v4);
    return sub_1000F48F0(*(_QWORD *)(a1 + 32), 0);
  }
  return result;
}

void sub_100134B1C(uint64_t a1, const __CFString *a2, unsigned int a3)
{
  const void *v6;
  void *v7;
  _WORD *v8;
  const void *v9;
  uint64_t v10;

  *(_DWORD *)(a1 + 6972) = a3;
  if (_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
    sub_100134768(a1, (uint64_t)a2, a3, CWFManagerErrorDomain, 0);
  v6 = *(const void **)(a1 + 6856);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 6856) = 0;
  }
  v7 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Dispatch Notification: Auto Hotspot Failure %d", *(unsigned int *)(a1 + 6972));
  objc_autoreleasePoolPop(v7);
  if (!*(_BYTE *)(a1 + 6968) && *(_DWORD *)(a1 + 6804) == 1)
  {
    v8 = sub_1000C323C(a2);
    if (v8)
    {
      v9 = v8;
      v10 = sub_100025C3C(*(_QWORD *)(a1 + 64));
      sub_100119668(a1, v10, 11, 0, v9, 0);
      CFRelease(v9);
      sub_1001345E4((uint64_t *)a1, CFSTR("userJoinAssociationFailed"), 0);
    }
  }
}

uint64_t sub_100134C50(uint64_t a1, const __CFArray *a2, int a3)
{
  __CFDictionary *v5;
  CFDictionaryRef v6;
  CFNumberRef v7;
  CFMutableArrayRef Mutable;
  void *v9;
  uint64_t v10;
  CFNumberRef v11;
  void *v12;
  __CFDictionary *v13;
  _QWORD *v14;
  _BYTE *v15;
  BOOL v16;
  const void *v17;
  void *v19;
  void *v20;
  void *v21;
  int valuePtr;
  void *values[2];
  void *keys[2];

  valuePtr = 0;
  if (a1)
  {
    if (a3)
    {
      v5 = sub_100116F8C(a2, 0, *(_DWORD *)(a1 + 128), 0x6Eu, 1);
      v6 = 0;
      v7 = 0;
      Mutable = 0;
      if (!v5)
      {
LABEL_24:
        v19 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: failed to create scan request", "__WiFiDeviceManagerAutoInstantHotspotJoin");
        objc_autoreleasePoolPop(v19);
        v10 = 0;
        if (!v7)
          goto LABEL_19;
        goto LABEL_18;
      }
    }
    else
    {
      valuePtr = 130;
      v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
      if (!v11)
        return 0;
      v7 = v11;
      Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (!Mutable)
      {
        v6 = 0;
        v10 = 0;
LABEL_18:
        CFRelease(v7);
LABEL_19:
        if (v6)
          CFRelease(v6);
        if (Mutable)
          CFRelease(Mutable);
        return v10;
      }
      v12 = (void *)sub_10002BE64((uint64_t)a2, CFSTR("CHANNEL"));
      *(_OWORD *)keys = *(_OWORD *)&off_100231A60;
      values[0] = v12;
      values[1] = v7;
      v6 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFArrayAppendValue(Mutable, v6);
      v13 = sub_100116F8C(a2, Mutable, *(_DWORD *)(a1 + 128), 0x6Eu, 1);
      if (!v13)
        goto LABEL_24;
      v5 = v13;
      CFDictionarySetValue(v13, CFSTR("SCAN_LOW_LATENCY"), kCFBooleanTrue);
    }
    v14 = malloc_type_malloc(0x28uLL, 0x10E0040573E0799uLL);
    if (v14)
    {
      v15 = v14;
      *v14 = a1;
      v14[1] = 0;
      v14[3] = 0;
      if (CFDictionaryContainsKey(v5, CFSTR("SSID_STR")))
        v16 = 1;
      else
        v16 = CFDictionaryContainsKey(v5, CFSTR("SCAN_SSID_LIST")) != 0;
      v15[32] = v16;
      v17 = (const void *)sub_100025C3C(*(_QWORD *)(a1 + 64));
      v10 = sub_100018C78(a1, v17, v5, 0, (uint64_t)sub_100134FBC, (uint64_t)v15, 0, 18);
      if ((_DWORD)v10)
      {
        v21 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Error initiating scan request: %d", v10);
        objc_autoreleasePoolPop(v21);
        free(v15);
      }
    }
    else
    {
      v20 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: null scanData", "__WiFiDeviceManagerAutoInstantHotspotJoin");
      objc_autoreleasePoolPop(v20);
      v10 = 0;
    }
    CFRelease(v5);
    if (!v7)
      goto LABEL_19;
    goto LABEL_18;
  }
  v9 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: manager NULL", "__WiFiDeviceManagerAutoInstantHotspotJoin");
  objc_autoreleasePoolPop(v9);
  return 4294963396;
}

void sub_100134FBC(int a1, int a2, const __CFArray *a3, int a4, int a5, uint64_t *a6)
{
  uint64_t v6;
  const __CFString *v9;
  const __CFString *v10;
  void *v11;
  void *v12;
  CFIndex v13;
  const void *ValueAtIndex;
  const void *v15;
  void *v16;
  double Current;
  double v18;
  void *v20;
  unsigned int *v21;
  char v22;
  void *v23;
  dispatch_time_t v24;
  NSObject *global_queue;
  void *v26;
  const void *v27;
  _WORD *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  _QWORD block[6];
  char v35;

  v6 = *a6;
  if (!*(_QWORD *)(*a6 + 6856))
  {
    v33 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: No Network", "__WiFiDeviceManagerAutoInstantHotspotScanCallback");
    objc_autoreleasePoolPop(v33);
    return;
  }
  free(a6);
  v9 = (const __CFString *)sub_10002BE64(*(_QWORD *)(v6 + 6856), CFSTR("SSID_STR"));
  v10 = v9;
  if (v9)
    CFRetain(v9);
  if (a3 && CFArrayGetCount(a3))
  {
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Looking for autoInstantHotspot.hotspotAssocNetwork %@", "__WiFiDeviceManagerAutoInstantHotspotScanCallback", *(_QWORD *)(v6 + 6856));
    objc_autoreleasePoolPop(v11);
    v12 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: found %ld networks", "__WiFiDeviceManagerAutoInstantHotspotScanCallback", CFArrayGetCount(a3));
    objc_autoreleasePoolPop(v12);
    if (CFArrayGetCount(a3) < 1)
    {
LABEL_15:
      *(_DWORD *)(v6 + 3280) = *(_DWORD *)(v6 + 6892);
      sub_100134B1C(v6, v10, 3u);
      *(_DWORD *)(v6 + 6456) = -3906;
      sub_10005C1E0((unsigned int *)(v6 + 6456));
      v16 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: did not find the top network", "__WiFiDeviceManagerAutoInstantHotspotScanCallback");
      objc_autoreleasePoolPop(v16);
      if (!v10)
        return;
    }
    else
    {
      v13 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a3, v13);
        if (ValueAtIndex)
        {
          v15 = ValueAtIndex;
          if (sub_1000C6060(*(_QWORD *)(v6 + 6856), (uint64_t)ValueAtIndex))
            break;
        }
        if (CFArrayGetCount(a3) <= ++v13)
          goto LABEL_15;
      }
      v26 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: found the top network to match scanned network %@", "__WiFiDeviceManagerAutoInstantHotspotScanCallback", sub_10002B088(v15));
      objc_autoreleasePoolPop(v26);
      sub_1000C38BC((uint64_t)v15, *(_QWORD *)(v6 + 6856));
      if ((_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin") & 1) == 0)
        sub_1000FB408(v6);
      v27 = *(const void **)(v6 + 6856);
      if (v27)
        CFRelease(v27);
      *(_QWORD *)(v6 + 6856) = 0;
      v28 = sub_10002B2DC((uint64_t)kCFAllocatorDefault, (uint64_t)v15);
      *(_QWORD *)(v6 + 6856) = v28;
      sub_10002C478((uint64_t)v28, CFSTR("WiFiAutoInstantHotspotJoining"), kCFBooleanTrue);
      sub_10002C478(*(_QWORD *)(v6 + 6856), CFSTR("WiFiInstantHotspotJoining"), kCFBooleanFalse);
      v29 = (const void *)sub_100025C3C(*(_QWORD *)(v6 + 64));
      v30 = sub_10010AD4C(v6, v29, *(void **)(v6 + 6856), 0, 0, (uint64_t)sub_100135600, 0, 1018);
      if ((_DWORD)v30)
      {
        v31 = v30;
        v32 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Error returned by Associate Async %d", "__WiFiDeviceManagerAutoInstantHotspotAssociate", v31);
        objc_autoreleasePoolPop(v32);
        *(_QWORD *)(v6 + 6872) = 0;
        *(_DWORD *)(v6 + 3280) = *(_DWORD *)(v6 + 6892);
        sub_1000FB2E0(v6);
        *(_DWORD *)(v6 + 3280) = *(_DWORD *)(v6 + 6892);
        sub_100134B1C(v6, v10, 4u);
        v21 = (unsigned int *)(v6 + 6456);
        *(_DWORD *)(v6 + 6456) = v31;
        goto LABEL_26;
      }
      sub_1001345E4((uint64_t *)v6, CFSTR("userJoinAssociating"), *(const void **)(v6 + 6856));
      if (!v10)
        return;
    }
LABEL_31:
    CFRelease(v10);
    return;
  }
  Current = CFAbsoluteTimeGetCurrent();
  v18 = *(double *)(v6 + 7016);
  if (Current <= v18 || Current - v18 >= 20.0)
  {
    v20 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: no scan result. ", "__WiFiDeviceManagerAutoInstantHotspotScanCallback");
    objc_autoreleasePoolPop(v20);
    *(_DWORD *)(v6 + 3280) = *(_DWORD *)(v6 + 6892);
    sub_100134B1C(v6, v10, 3u);
    v21 = (unsigned int *)(v6 + 6456);
    *(_DWORD *)(v6 + 6456) = a5;
LABEL_26:
    sub_10005C1E0(v21);
    if (!v10)
      return;
    goto LABEL_31;
  }
  v22 = *(_BYTE *)(v6 + 6968);
  v23 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: no scan result. retry after 1 second", "__WiFiDeviceManagerAutoInstantHotspotScanCallback");
  objc_autoreleasePoolPop(v23);
  v24 = dispatch_time(0, 1000000000);
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100135484;
  block[3] = &unk_1002313F8;
  v35 = v22;
  block[4] = v6;
  block[5] = v10;
  dispatch_after(v24, global_queue, block);
  if (v10)
    goto LABEL_31;
}

void sub_100135484(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD block[4];
  char v5;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2[30])
  {
    CFRetain(v2);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10013554C;
    block[3] = &unk_1002313F8;
    v5 = *(_BYTE *)(a1 + 48);
    dispatch_async(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 240), block);
  }
  else
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: null queue.", "__WiFiDeviceManagerAutoInstantHotspotScanCallback_block_invoke");
    objc_autoreleasePoolPop(v3);
  }
}

void sub_10013554C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  const __CFString *v7;
  unsigned int *v8;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2[30])
  {
    v3 = sub_100134C50(v2, v2[857], *(unsigned __int8 *)(a1 + 48));
    if ((_DWORD)v3)
    {
      v4 = v3;
      v5 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: error initiating scan = %d", "__WiFiDeviceManagerAutoInstantHotspotScanCallback_block_invoke_2", v4);
      objc_autoreleasePoolPop(v5);
      v6 = *(_QWORD *)(a1 + 32);
      v7 = *(const __CFString **)(a1 + 40);
      *(_DWORD *)(v6 + 3280) = *(_DWORD *)(v6 + 6892);
      sub_100134B1C(v6, v7, 3u);
      v8 = (unsigned int *)(*(_QWORD *)(a1 + 32) + 6456);
      *v8 = v4;
      sub_10005C1E0(v8);
    }
    v2 = *(_QWORD **)(a1 + 32);
  }
  CFRelease(v2);
}

void sub_100135600(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  const __CFString *v8;
  const __CFString *v9;
  double v10;
  double v11;
  void *v12;
  void *v14;
  void *v15;
  CFAbsoluteTime Current;
  CFDateRef v17;
  CFDateRef v18;
  void *v19;
  const void *v20;
  NSObject *v21;
  dispatch_time_t v22;
  _WORD *v23;
  NSObject *v24;
  dispatch_time_t v25;
  NSObject *global_queue;
  void *v27;
  void *v28;
  _QWORD block[6];
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[6];

  if (!a1)
  {
    v14 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: manager is NULL", "__WiFiDeviceManagerAutoInstantHotspotAssociationCallback");
    objc_autoreleasePoolPop(v14);
    return;
  }
  if (!a3)
  {
    v28 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: No Network", "__WiFiDeviceManagerAutoInstantHotspotAssociationCallback");
    objc_autoreleasePoolPop(v28);
    v9 = 0;
LABEL_38:
    *(_QWORD *)(a1 + 6872) = 0;
    *(_DWORD *)(a1 + 3280) = *(_DWORD *)(a1 + 6892);
    sub_1000FB2E0(a1);
    if (!v9)
      return;
    goto LABEL_39;
  }
  v8 = (const __CFString *)sub_10002BE64(*(_QWORD *)(a1 + 6856), CFSTR("SSID_STR"));
  v9 = v8;
  if (v8)
    CFRetain(v8);
  if (!(_DWORD)a5)
  {
    v15 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Hotspot Association to %@ Success.", "__WiFiDeviceManagerAutoInstantHotspotAssociationCallback", sub_10002B088(a3));
    objc_autoreleasePoolPop(v15);
    *(_BYTE *)(a1 + 6896) = 1;
    *(_BYTE *)(a1 + 6987) = 1;
    Current = CFAbsoluteTimeGetCurrent();
    v17 = CFDateCreate(kCFAllocatorDefault, Current);
    if (v17)
    {
      v18 = v17;
      sub_1000C69F0(a3, 0, v17);
      v19 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: setting auto association date for %@ to %@", "__WiFiDeviceManagerAutoInstantHotspotAssociationCallback", sub_10002B088(a3), v18);
      objc_autoreleasePoolPop(v19);
      CFRelease(v18);
    }
    sub_1000FE5A4(a1, a3);
    sub_10002C478(*(_QWORD *)(a1 + 3512), CFSTR("WiFiAutoInstantHotspotJoining"), kCFBooleanTrue);
    sub_1001345E4((uint64_t *)a1, CFSTR("userJoinSuccess"), a3);
    if (_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
      sub_100134870(a1, (uint64_t)v9);
    v20 = *(const void **)(a1 + 6856);
    if (v20)
    {
      CFRelease(v20);
      *(_QWORD *)(a1 + 6856) = 0;
    }
    *(_BYTE *)(a1 + 5504) = 1;
    v21 = *(NSObject **)(a1 + 5512);
    v22 = dispatch_time(0, 10000000000);
    dispatch_source_set_timer(v21, v22, 0xFFFFFFFFFFFFFFFFLL, 0);
    *(_DWORD *)(a1 + 688) = 0;
    *(_QWORD *)(a1 + 680) = 0;
    *(_BYTE *)(a1 + 6465) = 1;
    if (*(_QWORD *)(a1 + 4584))
    {
      if (*(_QWORD *)(a1 + 240))
      {
        v30 = 0;
        v31 = &v30;
        v32 = 0x2020000000;
        v33 = 0;
        v23 = sub_10002B2DC((uint64_t)kCFAllocatorDefault, (uint64_t)a3);
        v31[3] = (uint64_t)v23;
        if (v23)
        {
          CFRetain((CFTypeRef)a1);
          v24 = *(NSObject **)(a1 + 240);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_100135C68;
          block[3] = &unk_10022F160;
          block[4] = &v30;
          block[5] = a1;
          dispatch_async(v24, block);
        }
        _Block_object_dispose(&v30, 8);
      }
      else
      {
        v27 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: null queue.", "__WiFiDeviceManagerAutoInstantHotspotAssociationCallback");
        objc_autoreleasePoolPop(v27);
      }
    }
    goto LABEL_38;
  }
  v10 = CFAbsoluteTimeGetCurrent();
  v11 = *(double *)(a1 + 7016);
  v12 = objc_autoreleasePoolPush();
  if (v10 <= v11 || v10 - v11 >= 20.0)
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Hotspot Association to %@ Failed. %d", "__WiFiDeviceManagerAutoInstantHotspotAssociationCallback", sub_10002B088(a3), a5);
    objc_autoreleasePoolPop(v12);
    sub_100134B1C(a1, v9, 4u);
    *(_DWORD *)(a1 + 6456) = a5;
    sub_10005C1E0((unsigned int *)(a1 + 6456));
    goto LABEL_38;
  }
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: retry Assoc after 1 second", "__WiFiDeviceManagerAutoInstantHotspotAssociationCallback");
  objc_autoreleasePoolPop(v12);
  v25 = dispatch_time(0, 1000000000);
  global_queue = dispatch_get_global_queue(0, 0);
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472;
  v34[2] = sub_100135AE8;
  v34[3] = &unk_10022EF88;
  v34[4] = a1;
  v34[5] = v9;
  dispatch_after(v25, global_queue, v34);
  if (v9)
LABEL_39:
    CFRelease(v9);
}

void sub_100135AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100135AE8(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD block[4];

  v2 = *(_QWORD **)(a1 + 32);
  if (v2[30])
  {
    CFRetain(v2);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100135BA8;
    block[3] = &unk_10022EF88;
    dispatch_async(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 240), block);
  }
  else
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: null queue.", "__WiFiDeviceManagerAutoInstantHotspotAssociationCallback_block_invoke");
    objc_autoreleasePoolPop(v3);
  }
}

void sub_100135BA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  const __CFString *v7;
  unsigned int *v8;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 240))
  {
    v3 = sub_100134C50(v2, *(_QWORD *)(v2 + 6856), *(unsigned __int8 *)(v2 + 6968));
    if ((_DWORD)v3)
    {
      v4 = v3;
      v5 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: error = %d", "__WiFiDeviceManagerAutoInstantHotspotAssociationCallback_block_invoke_2", v4);
      objc_autoreleasePoolPop(v5);
      v6 = *(_QWORD *)(a1 + 32);
      v7 = *(const __CFString **)(a1 + 40);
      *(_DWORD *)(v6 + 3280) = *(_DWORD *)(v6 + 6892);
      sub_100134B1C(v6, v7, 4u);
      v8 = (unsigned int *)(*(_QWORD *)(a1 + 32) + 6456);
      *v8 = v4;
      sub_10005C1E0(v8);
      sub_1000FB2E0(*(_QWORD *)(a1 + 32));
    }
    v2 = *(_QWORD *)(a1 + 32);
  }
  CFRelease((CFTypeRef)v2);
}

void sub_100135C68(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  _QWORD *v7;
  _QWORD *v8;
  const void *v9;

  v2 = *(_QWORD **)(a1 + 40);
  if (v2[30])
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: Adding network '%@' to known network list", "__WiFiDeviceManagerAutoInstantHotspotAssociationCallback_block_invoke_3", sub_10002B088(*(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)));
    objc_autoreleasePoolPop(v3);
    v5 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v6 = (CFTypeRef *)(a1 + 32);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v4 + 4584))(v4, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 24), *(_QWORD *)(v4 + 4592));
    CFRelease(v6[1]);
    v7 = *v6;
  }
  else
  {
    CFRelease(v2);
    v8 = *(_QWORD **)(a1 + 32);
    v6 = (CFTypeRef *)(a1 + 32);
    v7 = v8;
  }
  v9 = *(const void **)(v7[1] + 24);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(*((_QWORD *)*v6 + 1) + 24) = 0;
  }
}

void sub_100135D3C(uint64_t a1)
{
  uint64_t v2;
  CFTypeRef *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 240))
  {
    v4 = *(_QWORD *)(a1 + 40);
    v3 = (CFTypeRef *)(a1 + 40);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v2 + 4520))(v2, v4, *(_QWORD *)(v2 + 4528));
    CFRelease(*(v3 - 1));
  }
  else
  {
    CFRelease((CFTypeRef)v2);
    v3 = (CFTypeRef *)(a1 + 40);
  }
  CFRelease(*v3);
}

void sub_100135D8C(uint64_t a1, CFTypeRef cf1, const void *a3, uint64_t a4)
{
  void *v8;
  __CFDictionary *Mutable;
  __CFDictionary *v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, __CFDictionary *, uint64_t);
  uint64_t v12;
  void *v13;

  if (!a1)
  {
    v13 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null manager.", "__WiFiDeviceManagerPostAutoJoinNotificationWithMetric");
    goto LABEL_21;
  }
  if (!cf1)
  {
    v13 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null status.", "__WiFiDeviceManagerPostAutoJoinNotificationWithMetric");
    goto LABEL_21;
  }
  if (!*(_QWORD *)(a1 + 4072))
    return;
  if (CFEqual(cf1, CFSTR("autoJoinNetworkNotFound")))
  {
    v8 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: auto-join failed with no network found. Unsuitable network count:%d", "__WiFiDeviceManagerPostAutoJoinNotificationWithMetric", *(unsigned int *)(a1 + 1136));
    objc_autoreleasePoolPop(v8);
    if (!*(_DWORD *)(a1 + 1136))
    {
      *(_BYTE *)(a1 + 6897) = 1;
      if (sub_10011BAA8(a1))
        sub_10011B664(a1, 0);
    }
  }
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    v13 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null notificationDict.", "__WiFiDeviceManagerPostAutoJoinNotificationWithMetric");
LABEL_21:
    objc_autoreleasePoolPop(v13);
    return;
  }
  v10 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("autoJoinStatus"), cf1);
  if (a3)
    CFDictionarySetValue(v10, CFSTR("autoJoinNetwork"), a3);
  v11 = *(void (**)(uint64_t, uint64_t, _QWORD, __CFDictionary *, uint64_t))(a1 + 4072);
  v12 = sub_100025C3C(*(_QWORD *)(a1 + 64));
  v11(a1, v12, *(_QWORD *)(a1 + 4080), v10, a4);
  CFRelease(v10);
}

void sub_100135FAC(uint64_t a1, void *a2)
{
  if (a2)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 7368), "setJoinEvent:withReason:lastDisconnectReason:lastJoinFailure:andNetworkDetails:forInterface:", 0, 0, 0, *(int *)(a1 + 40), a2, sub_100025C3C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64)));

  }
}

void sub_100136010(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }
}

void sub_10013604C(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 240))
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v2 + 3920))(v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned int *)(a1 + 64), *(_QWORD *)(v2 + 3928));
    CFRelease(*(CFTypeRef *)(a1 + 32));
    v3 = *(const void **)(a1 + 40);
    if (v3)
      CFRelease(v3);
    v4 = *(const void **)(a1 + 48);
    if (v4)
      CFRelease(v4);
    v5 = *(const void **)(a1 + 56);
    if (v5)
      CFRelease(v5);
  }
  else
  {
    CFRelease((CFTypeRef)v2);
    v6 = *(const void **)(a1 + 40);
    if (v6)
      CFRetain(v6);
    v7 = *(const void **)(a1 + 48);
    if (v7)
      CFRetain(v7);
    v8 = *(const void **)(a1 + 56);
    if (v8)
      CFRetain(v8);
  }
}

void sub_1001360F0(uint64_t a1)
{
  uint64_t *v2;
  void (*v3)(uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;

  v2 = *(uint64_t **)(a1 + 40);
  if (v2[30])
  {
    v3 = (void (*)(uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))v2[484];
    v4 = sub_100025C3C(v2[8]);
    v6 = *(_QWORD *)(a1 + 32);
    v5 = (uint64_t *)(a1 + 32);
    v3(v2, v4, *(_QWORD *)(*(_QWORD *)(v6 + 8) + 24), 0, *((unsigned int *)v5 + 4), *(_QWORD *)(v5[1] + 3880));
    CFRelease((CFTypeRef)v5[1]);
    v7 = *v5;
  }
  else
  {
    CFRelease(*(CFTypeRef *)(a1 + 40));
    v8 = *(_QWORD *)(a1 + 32);
    v5 = (uint64_t *)(a1 + 32);
    v7 = v8;
  }
  v9 = *(const void **)(*(_QWORD *)(v7 + 8) + 24);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(*(_QWORD *)(*v5 + 8) + 24) = 0;
  }
}

void sub_10013618C(uint64_t a1)
{
  uint64_t v2;
  CFTypeRef *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  const void *v7;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v2 + 240))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v3 = (CFTypeRef *)(a1 + 32);
    (*(void (**)(uint64_t, _QWORD, const __CFString *, const CFBooleanRef, _QWORD))(v2 + 4744))(v2, *(_QWORD *)(*(_QWORD *)(v4 + 8) + 24), CFSTR("FailureCountCurrent"), kCFBooleanTrue, *(_QWORD *)(v2 + 4752));
    CFRelease(v3[1]);
    v5 = *v3;
  }
  else
  {
    CFRelease((CFTypeRef)v2);
    v6 = *(_QWORD **)(a1 + 32);
    v3 = (CFTypeRef *)(a1 + 32);
    v5 = v6;
  }
  v7 = *(const void **)(v5[1] + 24);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(*((_QWORD *)*v3 + 1) + 24) = 0;
  }
}

void sub_100136214(uint64_t a1)
{
  uint64_t v2;
  CFTypeRef *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  const void *v7;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v2 + 240))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v3 = (CFTypeRef *)(a1 + 32);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v2 + 4712))(v2, *(_QWORD *)(*(_QWORD *)(v4 + 8) + 24), *(_QWORD *)(v2 + 4720));
    CFRelease(v3[1]);
    v5 = *v3;
  }
  else
  {
    CFRelease((CFTypeRef)v2);
    v6 = *(_QWORD **)(a1 + 32);
    v3 = (CFTypeRef *)(a1 + 32);
    v5 = v6;
  }
  v7 = *(const void **)(v5[1] + 24);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(*((_QWORD *)*v3 + 1) + 24) = 0;
  }
}

BOOL sub_100136288(const __CFString *a1)
{
  void *v3;

  if (a1)
  {
    return CFStringCompare(a1, CFSTR("RU"), 0) == kCFCompareEqualTo
        || CFStringCompare(a1, CFSTR("KG"), 0) == kCFCompareEqualTo
        || CFStringCompare(a1, CFSTR("AM"), 0) == kCFCompareEqualTo
        || CFStringCompare(a1, CFSTR("KZ"), 0) == kCFCompareEqualTo;
  }
  else
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: countryCode is null\n", "__WiFiDeviceManagerIsRegulatoryUNII3Restricted");
    objc_autoreleasePoolPop(v3);
    return 0;
  }
}

void sub_10013635C(uint64_t a1)
{
  int v2;
  id v3;

  if (!objc_msgSend(objc_msgSend(*(id *)(a1 + 6752), "wapCfg"), "serviceName"))
  {
    v3 = objc_alloc_init((Class)NSMutableString);
    v2 = 16;
    do
    {
      objc_msgSend(v3, "appendString:", +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), arc4random_uniform(9u)));
      --v2;
    }
    while (v2);
    objc_msgSend(*(id *)(a1 + 6752), "createWAPConfig:", v3);

  }
}

void sub_100136418(unsigned int a1, _BYTE *a2, uint64_t a3)
{
  _BYTE *v6;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned __int16 v15;
  char v16;

  v6 = (_BYTE *)(a3 + 5217);
  v7 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s for stanum %d macAddress %@  \n", "__WiFiDeviceManagerNANPHSSTAArrivingCallback", a1, a2);
  objc_autoreleasePoolPop(v7);
  v15 = *(_WORD *)a2;
  v16 = a2[2];
  if (v6[2])
  {
    v8 = v6[1] + 1;
    v6[1] = v8;
    v6[143] = *v6 + v8;
    v9 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "MIS STA NAN Link Associated: %d associated clients", v6[1]);
    objc_autoreleasePoolPop(v9);
    v10 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
    {
      if (v6[43])
        v11 = " Hidden ";
      else
        v11 = "Broadcast";
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: MIS Mode: %s, Client Type: NAN Link Client client macAddr: %@", "__WiFiDeviceManagerNANPHSSTAArrivingCallback", v11, a2);
    }
    objc_autoreleasePoolPop(v10);
    CFSetAddValue(*(CFMutableSetRef *)(a3 + 5312), a2);
    sub_100107DE4(a3, 0);
    sub_1001074BC(a3, 0);
    *(CFAbsoluteTime *)(a3 + 5336) = CFAbsoluteTimeGetCurrent() + 3.0;
    v6[111] = 1;
    sub_100119020(a3, 1, &v15, 0, 1);
    v12 = objc_autoreleasePoolPush();
    v13 = *(void **)(a3 + 7368);
    if (v13)
      objc_msgSend(v13, "addSoftApClientEvent:identifier:isAppleClient:isInstantHotspot:isAutoHotspot:isHidden:", 1, a2, sub_10006495C(&v15) != 0, 0, 0, v6[43] != 0);
    objc_autoreleasePoolPop(v12);
  }
  else
  {
    v14 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: called while MIS is disabled", "__WiFiDeviceManagerNANPHSSTAArrivingCallback");
    objc_autoreleasePoolPop(v14);
  }
}

void sub_100136638(unsigned int a1, _BYTE *a2, uint64_t a3)
{
  _BYTE *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  _OWORD v18[7];
  uint64_t v19;
  CFStringRef v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unsigned __int16 v24;
  char v25;

  v6 = (_BYTE *)(a3 + 5217);
  v7 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, " %s for stanum %d macAddress %@ \n", "__WiFiDeviceManagerNANPHSSTALeavingCallback", a1, a2);
  objc_autoreleasePoolPop(v7);
  v24 = *(_WORD *)a2;
  v25 = a2[2];
  if (v6[2])
  {
    if (a1 == 255)
    {
      v10 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "MIS no traffic for long time. Tear down MIS");
      objc_autoreleasePoolPop(v10);
      v11 = v6[4];
      v6[1] = 0;
      if (v6[2] && !v11)
      {
        v12 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "MIS idle timer expired, disabling tethering");
        objc_autoreleasePoolPop(v12);
        sub_100107084(a3);
        v23 = 0;
        v21 = 0u;
        v22 = 0u;
        v19 = 7;
        memset(v18, 0, sizeof(v18));
        DWORD2(v18[0]) = 7;
        v20 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%@"), CFSTR("Last Client Left"));
        sub_100106C34(a3, (uint64_t)v18);
      }
    }
    else
    {
      --v6[1];
      v8 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "MIS STA NAN Client Disassociated: %d associated clients", v6[1]);
      objc_autoreleasePoolPop(v8);
    }
    v6[143] = v6[1] + *v6;
    v13 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: misIsHidden: %d, client macAddr: %@ setContainsValue %d", "__WiFiDeviceManagerNANPHSSTALeavingCallback", v6[43], a2, CFSetContainsValue(*(CFSetRef *)(a3 + 5312), a2));
    objc_autoreleasePoolPop(v13);
    CFSetRemoveValue(*(CFMutableSetRef *)(a3 + 5312), a2);
    sub_100107DE4(a3, 0);
    if (a1 == 255)
      goto LABEL_30;
    if (v6[1] == -*v6 && !v6[4])
    {
      v14 = objc_autoreleasePoolPush();
      v15 = 3;
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Starting MIS idle timer", "__WiFiDeviceManagerNANPHSSTALeavingCallback");
    }
    else
    {
      if (v6[1])
      {
LABEL_30:
        sub_100119020(a3, 0, &v24, 0, 1);
        v16 = objc_autoreleasePoolPush();
        v17 = *(void **)(a3 + 7368);
        if (v17)
          objc_msgSend(v17, "addSoftApClientEvent:identifier:isAppleClient:isInstantHotspot:isAutoHotspot:isHidden:", 0, a2, sub_10006495C(&v24) != 0, 0, 0, v6[43] != 0);
        objc_autoreleasePoolPop(v16);
        return;
      }
      v14 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "NANPHS: All nan clients have left. Should start idle timer for nan publisher");
      v15 = 6;
    }
    objc_autoreleasePoolPop(v14);
    sub_1001074BC(a3, v15);
    goto LABEL_30;
  }
  v9 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: called while MIS is disabled", "__WiFiDeviceManagerNANPHSSTALeavingCallback");
  objc_autoreleasePoolPop(v9);
}

double sub_1001369AC(int a1, unsigned int a2, uint64_t a3)
{
  char v4;
  const __CFString *v5;
  __int128 *v6;
  _OWORD v8[4];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v4 = a2;
  v15 = 0;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  memset(v8, 0, sizeof(v8));
  switch(a1)
  {
    case 2:
      *((_QWORD *)&v13 + 1) = sub_100136A94(a2);
      v6 = &v13;
LABEL_10:
      *(_BYTE *)v6 = v4;
      return sub_100106C34(a3, (uint64_t)v8);
    case 1:
      *((_QWORD *)&v14 + 1) = sub_100136A94(a2);
      v6 = &v14;
      goto LABEL_10;
    case 0:
      if (a2 > 8)
        v5 = CFSTR("Unknown");
      else
        v5 = off_100232288[(char)a2];
      *(_QWORD *)&v10 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%@"), v5);
      v6 = (__int128 *)((char *)&v9 + 8);
      goto LABEL_10;
  }
  return sub_100106C34(a3, (uint64_t)v8);
}

CFStringRef sub_100136A94(uint64_t a1)
{
  const __CFString *v1;

  if ((unint64_t)(a1 - 1) > 3)
    v1 = CFSTR("Success");
  else
    v1 = off_1002322D0[a1 - 1];
  return CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%@"), v1);
}

void sub_100136AF0(uint64_t a1)
{
  unsigned __int8 *v2;
  int v3;
  const __CFString *v4;
  _BOOL4 v5;
  uint64_t *v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  __CFDictionary *v17;
  char v18;
  __CFArray *v19;
  _BYTE *v20;
  void *v21;
  void *v22;
  const char *v23;
  uint64_t *v24;
  int v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  CFComparisonResult v36;
  void *v37;
  CFIndex Count;
  int v39;
  BOOL v40;
  int v41;
  const void *v42;
  void *v43;
  const void *v44;
  unsigned __int8 *v45;
  const __CFNumber *v46;
  const __CFNumber *v47;
  int v48;
  int v49;
  _BYTE *v50;
  int v51;
  void *v52;
  __CFDictionary *v53;
  const __CFString *v54;
  CFDictionaryRef *v55;
  CFStringRef v56;
  unsigned __int8 *v57;
  size_t v58;
  int v59;
  __int16 v61;
  void *v62;
  int v63;
  int v64;
  void *v65;
  void *v66;
  const char *v67;
  void *v68;
  void *v69;
  void *v70;
  const char *v71;
  CFDataRef v72;
  CFDataRef v73;
  const void *v74;
  const void *v75;
  void *v76;
  const void *v77;
  void *v78;
  void *v79;
  const void *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  char v93;
  uint64_t v94;
  char v95;
  int v96;
  void *v97;
  const void *v98;
  int v99;
  int v100;
  void *v101;
  __CFDictionary *Mutable;
  const __CFString *v103;
  unsigned __int8 *v104;
  CFDictionaryRef *v105;
  CFStringRef v106;
  size_t v107;
  void *v108;
  __int16 v109;
  int v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  unsigned __int8 *v120;
  uint64_t v121;
  char v122;
  char v123;
  char v124;
  int *v125;
  uint64_t v126;
  char v127;
  int v128;
  void *v129;
  uint64_t v130;
  BOOL v131;
  unsigned int v132;
  int v133;
  void *v134;
  const char *v135;
  const char *v136;
  const char *v137;
  const char *v138;
  void *v139;
  CFMutableArrayRef v140;
  __CFArray *v141;
  uint64_t v142;
  const void *v143;
  CFMutableArrayRef v144;
  CFIndex v145;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v147;
  const __CFNumber *v148;
  void *v149;
  void *v150;
  const __CFArray *v151;
  void *v152;
  CFDictionaryRef v153;
  CFDictionaryRef v154;
  _QWORD *v155;
  unsigned __int8 *v156;
  BOOL v157;
  const void *v158;
  uint64_t v159;
  int v160;
  void *v161;
  int v162;
  __int16 v163;
  void *v164;
  int v165;
  int v166;
  CFDataRef ExternalRepresentation;
  CFDataRef v168;
  const void *Value;
  const void *v170;
  void *v171;
  const void *v172;
  void *v173;
  void *v174;
  const void *v175;
  const void *v176;
  int v177;
  BOOL v178;
  IOPMAssertionID v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  uint64_t v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  char *v191;
  int v192;
  char v193;
  int v194;
  unsigned __int8 *v195;
  int allocator;
  unsigned int valuePtr;
  unsigned int v198;
  unsigned int v199;
  char buffer[16];
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  void *values[2];
  CFRange v212;

  v2 = (unsigned __int8 *)(a1 + 5216);
  v3 = *(_DWORD *)(a1 + 5344);
  if (v3 == 1)
  {
    if (!*(_BYTE *)(a1 + 5386) && (!objc_msgSend(*(id *)(a1 + 6752), "isNANPublisherStarted") || !v2[6]))
    {
      if (*(_DWORD *)(a1 + 20) != 1)
      {
        v68 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "WiFi is Powered OFF, Unable to start tethering on wifi");
        objc_autoreleasePoolPop(v68);
        v210 = 0;
        v208 = 0u;
        v209 = 0u;
        v206 = 0u;
        v207 = 0u;
        v204 = 0u;
        v205 = 0u;
        v202 = 0u;
        v203 = 0u;
        *(_OWORD *)buffer = 0u;
        v201 = 0u;
        *(_DWORD *)&buffer[4] = 8;
        goto LABEL_376;
      }
      v24 = (uint64_t *)(a1 + 4944);
      if (*(_QWORD *)(a1 + 4944))
      {
        if (v2[6])
          v25 = 0;
        else
          v25 = -1;
        v26 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "__WiFiDeviceManagerStartMISSession: Detected non-NULL misSession");
        objc_autoreleasePoolPop(v26);
LABEL_199:
        if (!*v24)
        {
          v189 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "misSession is NULL");
          objc_autoreleasePoolPop(v189);
          v119 = 9;
          goto LABEL_366;
        }
        if (!_MISIsServiceAvailable
          || !_MISIsServiceAvailable(*v24, v27, v28, v29, v30, v31, v32, v33))
        {
          v111 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "MIS Service is not available");
          objc_autoreleasePoolPop(v111);
          v119 = 11;
          goto LABEL_366;
        }
        v101 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Preparing MIS Network Configuration Parameters");
        LOWORD(v198) = -21846;
        LODWORD(values[0]) = -1431655766;
        v199 = -1431655766;
        objc_autoreleasePoolPop(v101);
        Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        if (Mutable)
        {
          allocator = v25;
          if (CFSetGetCount(*(CFSetRef *)(a1 + 5272)) > 0 || v2[8])
            CFDictionaryAddValue(Mutable, CFSTR("AP_MODE_FORCE_BI_100"), kCFBooleanTrue);
          LOWORD(v198) = 1;
          v103 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v198);
          if (v103)
          {
            v104 = v2;
            CFDictionaryAddValue(Mutable, CFSTR("AP_MODE_AUTH_LOWER"), v103);
            CFRelease(v103);
            CFDictionaryAddValue(Mutable, CFSTR("SSID_STR"), CFSTR("_AppleWi-FiInternetTetheringSSID_"));
            v105 = (CFDictionaryRef *)sub_10002B314((uint64_t)kCFAllocatorDefault, Mutable);
            v103 = (const __CFString *)v105;
            if (v105)
            {
              v106 = sub_1000C37A0(v105);
              if (!v106)
                goto LABEL_430;
              CFDictionaryAddValue(Mutable, CFSTR("AP_MODE_KEY"), v106);
              objc_msgSend(*(id *)(a1 + 6752), "setPasswordForPHSOverNAN:", v106);
              v206 = 0u;
              v207 = 0u;
              v204 = 0u;
              v205 = 0u;
              v202 = 0u;
              v203 = 0u;
              *(_OWORD *)buffer = 0u;
              v201 = 0u;
              if (!CFStringGetCString(v106, buffer, 128, 0x8000100u))
                goto LABEL_430;
              v107 = strlen(buffer);
              CFRelease(v106);
              CFRelease(v103);
              if (sub_10011AED0(a1) && !*(_DWORD *)(a1 + 7048))
              {
                v108 = objc_autoreleasePoolPush();
                if (qword_10026DD20)
                  objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Both WPA2+WPA3 enabled, softapUserPreferredBand is: %d", "__WiFiDeviceManagerCreateMISStartRequest", *(unsigned int *)(a1 + 7048));
                v110 = 0;
                v109 = 4104;
              }
              else
              {
                v108 = objc_autoreleasePoolPush();
                if (qword_10026DD20)
                  objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: softapUserPreferredBand is: %d. Allowing WPA2 keying only", "__WiFiDeviceManagerCreateMISStartRequest", *(unsigned int *)(a1 + 7048));
                v109 = 8;
                v110 = 1;
              }
              objc_autoreleasePoolPop(v108);
              if (v107 == 64)
                v162 = v110;
              else
                v162 = 1;
              if (v162)
                v163 = v109;
              else
                v163 = 8;
              LOWORD(v198) = v163;
              v164 = objc_autoreleasePoolPush();
              if (qword_10026DD20)
                objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: start hotspot using authtype 0x%X", "__WiFiDeviceManagerCreateMISStartRequest", (unsigned __int16)v198);
              objc_autoreleasePoolPop(v164);
              v103 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v198);
              if (v103)
              {
                v2 = v104;
                CFDictionaryAddValue(Mutable, CFSTR("AP_MODE_AUTH_UPPER"), v103);
                CFRelease(v103);
                v165 = (_WORD)v198 ? 10 : 0;
                LODWORD(values[0]) = v165;
                v103 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, values);
                if (v103)
                {
                  CFDictionaryAddValue(Mutable, CFSTR("AP_MODE_CYPHER_TYPE"), v103);
                  CFRelease(v103);
                  LODWORD(values[0]) = *v104;
                  v103 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, values);
                  if (v103)
                  {
                    if (LODWORD(values[0]) < 0xF)
                      v166 = 10;
                    else
                      v166 = *(_DWORD *)(a1 + 5264) == 80 ? 1040 : 18;
                    v199 = v166;
                    CFDictionaryAddValue(Mutable, CFSTR("CHANNEL"), v103);
                    CFRelease(v103);
                    v103 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v199);
                    if (v103)
                    {
                      CFDictionaryAddValue(Mutable, CFSTR("CHANNEL_FLAGS"), v103);
                      CFRelease(v103);
                      CFDictionaryRemoveValue(Mutable, CFSTR("SSID_STR"));
                      v103 = sub_10013932C();
                      if (v103)
                      {
                        CFDictionaryAddValue(Mutable, CFSTR("SSID_STR"), v103);
                        ExternalRepresentation = CFStringCreateExternalRepresentation(kCFAllocatorDefault, v103, 0x8000100u, 0);
                        if (ExternalRepresentation)
                        {
                          v168 = ExternalRepresentation;
                          CFDictionaryAddValue(Mutable, CFSTR("AP_MODE_SSID_BYTES"), ExternalRepresentation);
                          CFRelease(v168);
                        }
                        CFRelease(v103);
                        Value = CFDictionaryGetValue(Mutable, CFSTR("SSID_STR"));
                        if (!Value)
                        {
                          CFRelease(Mutable);
                          v119 = 13;
                          goto LABEL_366;
                        }
                        v170 = Value;
                        v171 = objc_autoreleasePoolPush();
                        if (qword_10026DD20)
                          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "MIS SSID: %@", v170);
                        objc_autoreleasePoolPop(v171);
                        v172 = (const void *)sub_100025C3C(*(_QWORD *)(a1 + 64));
                        v173 = sub_10002A21C(a1, v172, 1);
                        if (v173)
                        {
                          if (!sub_100107828(a1, 4) || v104[169])
                          {
                            v174 = objc_autoreleasePoolPush();
                            if (qword_10026DD20)
                              objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Enabling MIS. Now disconnecting from %@", sub_10002B088(v173));
                            objc_autoreleasePoolPop(v174);
                            v175 = (const void *)sub_100025C3C(*(_QWORD *)(a1 + 64));
                            sub_1000F7F48(a1, v175, 1007, "__WiFiDeviceManagerStartMISSession", 24398);
                          }
                        }
                        else
                        {
                          sub_1000FB44C(a1);
                        }
                        v104[1] = 0;
                        v104[144] = 0;
                        if (_os_feature_enabled_impl("WiFiManager", "EnableNANPHS")
                          && objc_msgSend(*(id *)(a1 + 6752), "checkDeviceNanCapabilities"))
                        {
                          sub_10013635C(a1);
                          sub_10006A940(*(_QWORD *)(a1 + 64), 1, objc_msgSend(objc_msgSend(*(id *)(a1 + 6752), "wapCfg"), "serviceName"));
                        }
                        v176 = (const void *)sub_100025C3C(*(_QWORD *)(a1 + 64));
                        v177 = sub_10010E720(a1, v176, Mutable, (uint64_t)sub_100138BEC, 0);
                        if (!v177)
                        {
                          sub_1000F9DAC((char *)a1, 4, 1);
                          v104[3] = 1;
                        }
                        CFRelease(Mutable);
                        if (v173)
                          CFRelease(v173);
                        if (v177 | allocator)
                        {
                          v119 = 0;
LABEL_366:
                          if (*v24)
                          {
                            if (_MISDetach)
                              _MISDetach(*v24, v112, v113, v114, v115, v116, v117, v118);
                            *v24 = 0;
                          }
                          v2[3] = 0;
                          if (v2[170])
                            v2[170] = 0;
                          if (_os_feature_enabled_impl("WiFiManager", "EnableNANPHS")
                            && objc_msgSend(*(id *)(a1 + 6752), "checkDeviceNanCapabilities"))
                          {
                            sub_10013635C(a1);
                            sub_10006A940(*(_QWORD *)(a1 + 64), 0, objc_msgSend(objc_msgSend(*(id *)(a1 + 6752), "wapCfg"), "serviceName"));
                          }
                          sub_100108298((_QWORD *)a1);
                          v210 = 0;
                          v208 = 0u;
                          v209 = 0u;
                          v206 = 0u;
                          v207 = 0u;
                          v204 = 0u;
                          v205 = 0u;
                          v202 = 0u;
                          v203 = 0u;
                          *(_OWORD *)buffer = 0u;
                          v201 = 0u;
                          *(_DWORD *)&buffer[4] = v119;
LABEL_376:
                          sub_100106C34(a1, (uint64_t)buffer);
                          goto LABEL_377;
                        }
LABEL_391:
                        v3 = 2;
                        goto LABEL_378;
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            v104 = v2;
          }
        }
        else
        {
          v104 = v2;
          v103 = 0;
        }
        v106 = 0;
LABEL_430:
        v190 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Error preparing MIS Network Configuration Parameters");
        objc_autoreleasePoolPop(v190);
        if (v106)
          CFRelease(v106);
        if (v103)
          CFRelease(v103);
        if (Mutable)
          CFRelease(Mutable);
        v119 = 12;
        v2 = v104;
        goto LABEL_366;
      }
      if (_MISAttach)
      {
        v100 = _MISAttach((_QWORD *)(a1 + 4944));
        if (!v100)
        {
          v25 = 0;
          goto LABEL_199;
        }
        v160 = v100;
      }
      else
      {
        v160 = -1;
      }
      v161 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "MISAttach failure: %s", strerror(v160));
      objc_autoreleasePoolPop(v161);
      v119 = 10;
      goto LABEL_366;
    }
    if (*(_DWORD *)(a1 + 20) != 1)
    {
      v21 = objc_autoreleasePoolPush();
      v22 = (void *)qword_10026DD20;
      if (!qword_10026DD20)
      {
LABEL_195:
        objc_autoreleasePoolPop(v21);
LABEL_377:
        v3 = 0;
        goto LABEL_378;
      }
      v23 = "WiFi is Powered OFF, Unable to start tethering on wifi";
LABEL_194:
      objc_msgSend(v22, "WFLog:message:", 3, v23);
      goto LABEL_195;
    }
    v6 = (uint64_t *)(a1 + 4944);
    if (*(_QWORD *)(a1 + 4944))
    {
      if (v2[6])
        v7 = 0;
      else
        v7 = -1;
      v8 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: Detected non-NULL misSession", "__WiFiDeviceManagerStartNANSession");
      objc_autoreleasePoolPop(v8);
LABEL_77:
      if (!*v6)
      {
        v65 = objc_autoreleasePoolPush();
        v66 = (void *)qword_10026DD20;
        if (!qword_10026DD20)
          goto LABEL_146;
        v67 = "misSession is NULL";
        goto LABEL_145;
      }
      if (_MISIsServiceAvailable && _MISIsServiceAvailable(*v6, v9, v10, v11, v12, v13, v14, v15))
      {
        v52 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "MIS Preparing NAN Publish  Configuration Parameters");
        LOWORD(v198) = -21846;
        LODWORD(values[0]) = -1431655766;
        v199 = -1431655766;
        objc_autoreleasePoolPop(v52);
        v53 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        if (v53)
        {
          if (CFSetGetCount(*(CFSetRef *)(a1 + 5272)) > 0 || v2[8])
            CFDictionaryAddValue(v53, CFSTR("AP_MODE_FORCE_BI_100"), kCFBooleanTrue);
          LOWORD(v198) = 1;
          v54 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v198);
          if (v54)
          {
            CFDictionaryAddValue(v53, CFSTR("AP_MODE_AUTH_LOWER"), v54);
            CFRelease(v54);
            CFDictionaryAddValue(v53, CFSTR("SSID_STR"), CFSTR("_AppleWi-FiInternetTetheringSSID_"));
            v55 = (CFDictionaryRef *)sub_10002B314((uint64_t)kCFAllocatorDefault, v53);
            v54 = (const __CFString *)v55;
            if (v55)
            {
              v56 = sub_1000C37A0(v55);
              if (!v56)
                goto LABEL_415;
              v57 = v2;
              objc_msgSend(*(id *)(a1 + 6752), "setPasswordForPHSOverNAN:", v56);
              sub_1001079C8(a1);
              CFDictionaryAddValue(v53, CFSTR("AP_MODE_KEY"), v56);
              v206 = 0u;
              v207 = 0u;
              v204 = 0u;
              v205 = 0u;
              v202 = 0u;
              v203 = 0u;
              *(_OWORD *)buffer = 0u;
              v201 = 0u;
              if (!CFStringGetCString(v56, buffer, 128, 0x8000100u))
              {
LABEL_415:
                v188 = objc_autoreleasePoolPush();
                if (qword_10026DD20)
                  objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Error preparing NAN Publish Configuration Parameters");
                objc_autoreleasePoolPop(v188);
                if (v56)
                  CFRelease(v56);
                if (v54)
                  CFRelease(v54);
                if (!v53)
                  goto LABEL_183;
                goto LABEL_422;
              }
              v58 = strlen(buffer);
              CFRelease(v56);
              CFRelease(v54);
              v59 = sub_10011AED0(a1);
              if (v58 == 64 || v59 == 0)
                v61 = 8;
              else
                v61 = 4104;
              LOWORD(v198) = v61;
              v62 = objc_autoreleasePoolPush();
              if (qword_10026DD20)
                objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: start hotspot using authtype 0x%X", "__WiFiDeviceManagerCreateNANStartRequest", (unsigned __int16)v198);
              objc_autoreleasePoolPop(v62);
              v54 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v198);
              v2 = v57;
              if (v54)
              {
                CFDictionaryAddValue(v53, CFSTR("AP_MODE_AUTH_UPPER"), v54);
                CFRelease(v54);
                v63 = (v198 & 0x1000) != 0 ? 10 : 6;
                LODWORD(values[0]) = v63;
                v54 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, values);
                if (v54)
                {
                  CFDictionaryAddValue(v53, CFSTR("AP_MODE_CYPHER_TYPE"), v54);
                  CFRelease(v54);
                  LODWORD(values[0]) = *v57;
                  v54 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, values);
                  if (v54)
                  {
                    if (LODWORD(values[0]) < 0xF)
                      v64 = 10;
                    else
                      v64 = *(_DWORD *)(a1 + 5264) == 80 ? 1040 : 18;
                    v199 = v64;
                    CFDictionaryAddValue(v53, CFSTR("CHANNEL"), v54);
                    CFRelease(v54);
                    v54 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v199);
                    if (v54)
                    {
                      CFDictionaryAddValue(v53, CFSTR("CHANNEL_FLAGS"), v54);
                      CFRelease(v54);
                      CFDictionaryRemoveValue(v53, CFSTR("SSID_STR"));
                      v54 = sub_10013932C();
                      if (v54)
                      {
                        CFDictionaryAddValue(v53, CFSTR("SSID_STR"), v54);
                        v72 = CFStringCreateExternalRepresentation(kCFAllocatorDefault, v54, 0x8000100u, 0);
                        if (v72)
                        {
                          v73 = v72;
                          CFDictionaryAddValue(v53, CFSTR("AP_MODE_SSID_BYTES"), v72);
                          CFRelease(v73);
                        }
                        CFRelease(v54);
                        v74 = CFDictionaryGetValue(v53, CFSTR("SSID_STR"));
                        if (v74)
                        {
                          v75 = v74;
                          v76 = objc_autoreleasePoolPush();
                          if (qword_10026DD20)
                            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "MIS SSID: %@", v75);
                          objc_autoreleasePoolPop(v76);
                          v77 = (const void *)sub_100025C3C(*(_QWORD *)(a1 + 64));
                          v78 = sub_10002A21C(a1, v77, 1);
                          if (v78)
                          {
                            if (!sub_100107828(a1, 8) || v57[169])
                            {
                              v79 = objc_autoreleasePoolPush();
                              if (qword_10026DD20)
                                objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Enabling MIS. Now disconnecting from %@", sub_10002B088(v78));
                              objc_autoreleasePoolPop(v79);
                              v80 = (const void *)sub_100025C3C(*(_QWORD *)(a1 + 64));
                              sub_1000F7F48(a1, v80, 1007, "__WiFiDeviceManagerStartNANSession", 24273);
                            }
                          }
                          else
                          {
                            sub_1000FB44C(a1);
                          }
                          v57[1] = 0;
                          v97 = objc_autoreleasePoolPush();
                          if (qword_10026DD20)
                            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s misKeepNanPhsDuringMISStop %d misNanNumAssociatedClients %d", "__WiFiDeviceManagerStartNANSession", v57[172], v57[2]);
                          objc_autoreleasePoolPop(v97);
                          if (!v57[172])
                            v57[2] = 0;
                          v57[144] = 0;
                          if (_os_feature_enabled_impl("WiFiManager", "EnableNANPHS")
                            && objc_msgSend(*(id *)(a1 + 6752), "checkDeviceNanCapabilities"))
                          {
                            sub_10013635C(a1);
                            sub_10006A940(*(_QWORD *)(a1 + 64), 1, objc_msgSend(objc_msgSend(*(id *)(a1 + 6752), "wapCfg"), "serviceName"));
                          }
                          v98 = (const void *)sub_100025C3C(*(_QWORD *)(a1 + 64));
                          v99 = sub_10010E720(a1, v98, v53, (uint64_t)sub_100138BEC, 0);
                          if (!v99)
                          {
                            sub_1000F9DAC((char *)a1, 8, 1);
                            v57[3] = 1;
                          }
                          CFRelease(v53);
                          if (v78)
                            CFRelease(v78);
                          if (!(v99 | v7))
                            goto LABEL_391;
                          goto LABEL_183;
                        }
LABEL_422:
                        CFRelease(v53);
                        goto LABEL_183;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          v54 = 0;
        }
        v56 = 0;
        goto LABEL_415;
      }
      v65 = objc_autoreleasePoolPush();
      v66 = (void *)qword_10026DD20;
      if (qword_10026DD20)
      {
        v67 = "MIS Service is not available";
LABEL_145:
        objc_msgSend(v66, "WFLog:message:", 4, v67, v191);
        goto LABEL_146;
      }
      goto LABEL_146;
    }
    if (_MISAttach)
    {
      v51 = _MISAttach((_QWORD *)(a1 + 4944));
      if (!v51)
      {
        v7 = 0;
        goto LABEL_77;
      }
      v81 = v51;
    }
    else
    {
      v81 = -1;
    }
    v65 = objc_autoreleasePoolPush();
    v82 = qword_10026DD20;
    if (qword_10026DD20)
    {
      v191 = strerror(v81);
      v67 = "MISAttach failure: %s";
      v66 = (void *)v82;
      goto LABEL_145;
    }
LABEL_146:
    objc_autoreleasePoolPop(v65);
LABEL_183:
    if (*v6)
    {
      if (_MISDetach)
        _MISDetach(*v6, v83, v84, v85, v86, v87, v88, v89);
      *v6 = 0;
    }
    v2[3] = 0;
    if (v2[170])
      v2[170] = 0;
    if (_os_feature_enabled_impl("WiFiManager", "EnableNANPHS")
      && objc_msgSend(*(id *)(a1 + 6752), "checkDeviceNanCapabilities"))
    {
      sub_10013635C(a1);
      sub_10006A940(*(_QWORD *)(a1 + 64), 0, objc_msgSend(objc_msgSend(*(id *)(a1 + 6752), "wapCfg"), "serviceName"));
    }
    sub_100108298((_QWORD *)a1);
    v21 = objc_autoreleasePoolPush();
    v22 = (void *)qword_10026DD20;
    if (!qword_10026DD20)
      goto LABEL_195;
    v23 = "Error on Starting NAN MIS session. Return to idle state";
    goto LABEL_194;
  }
  if (v3)
    goto LABEL_379;
  v4 = CFStringCreateMutable(kCFAllocatorDefault, 0);
  valuePtr = 0;
  v198 = 0;
  if (*(_DWORD *)(a1 + 20) != 1)
  {
    v16 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "WiFi is Powered OFF, Unable to start MIS Scan");
    objc_autoreleasePoolPop(v16);
    v210 = 0;
    v208 = 0u;
    v209 = 0u;
    v206 = 0u;
    v207 = 0u;
    v204 = 0u;
    v205 = 0u;
    v202 = 0u;
    v203 = 0u;
    *(_OWORD *)buffer = 0u;
    v201 = 0u;
    *(_DWORD *)&buffer[4] = 6;
    sub_100106C34(a1, (uint64_t)buffer);
    v17 = 0;
    v18 = 0;
    v19 = 0;
LABEL_18:
    v20 = 0;
    if (!v4)
      goto LABEL_20;
    goto LABEL_19;
  }
  if (sub_100032160(*(_QWORD *)(a1 + 64), (uint64_t)v4))
    v5 = 0;
  else
    v5 = CFStringCompare(v4, CFSTR("XZ"), 0) == kCFCompareEqualTo
      || CFStringCompare(v4, &stru_100238178, 0) == kCFCompareEqualTo
      || CFStringCompare(v4, CFSTR("JP"), 0) == kCFCompareEqualTo
      || CFStringCompare(v4, CFSTR("TN"), 0) == kCFCompareEqualTo
      || CFStringCompare(v4, CFSTR("YE"), 0) == kCFCompareEqualTo;
  v34 = sub_100136288(v4);
  v35 = 0;
  do
  {
    v36 = CFStringCompare(v4, off_100231928[v35], 0);
    if (v36 == kCFCompareEqualTo)
      break;
    v40 = v35++ == 37;
  }
  while (!v40);
  if (v5)
  {
    v37 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: usage is regulatory restricted. Defaulting to 2.4GHz only", "__WiFiDeviceManagerStartMISScan");
    objc_autoreleasePoolPop(v37);
  }
  else if (!v2[168])
  {
    Count = CFSetGetCount(*(CFSetRef *)(a1 + 5272));
    v39 = *(_DWORD *)(a1 + 7048);
    v40 = Count >= 1 && v39 == 1;
    if (!v40 && (v39 == 2 || v2[1824] && v2[1827]))
    {
      v41 = 1;
      goto LABEL_64;
    }
  }
  v41 = 0;
LABEL_64:
  v42 = (const void *)sub_100025C3C(*(_QWORD *)(a1 + 64));
  v43 = sub_10002A21C(a1, v42, 1);
  v44 = v43;
  v193 = v34;
  if (v43)
  {
    v45 = v2;
    v46 = (const __CFNumber *)sub_10002BE64((uint64_t)v43, CFSTR("CHANNEL"));
    v47 = (const __CFNumber *)sub_10002BE64((uint64_t)v44, CFSTR("CHANNEL_FLAGS"));
    if (v47)
      CFNumberGetValue(v47, kCFNumberSInt32Type, &valuePtr);
    if (v46)
      CFNumberGetValue(v46, kCFNumberSInt32Type, &v198);
    if ((valuePtr & 8) != 0)
    {
      v194 = 0;
      v48 = 0;
      v192 = 1;
      v2 = v45;
    }
    else
    {
      v2 = v45;
      v192 = 0;
      if ((valuePtr & 0x10) != 0)
      {
        v48 = 0;
        v194 = 1;
      }
      else
      {
        v194 = 0;
        v48 = (valuePtr >> 13) & 1;
      }
    }
    v49 = (valuePtr >> 11) & 1;
    v2[169] = 0;
    v50 = v2 + 169;
    if (!sub_100107828(a1, 4) || v2[170] && !sub_100107828(a1, 8))
    {
      *v50 = 1;
      v69 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s %u forceDisconnectInfra as PHS network going to be started", "__WiFiDeviceManagerStartMISScan", 24668);
      objc_autoreleasePoolPop(v69);
      v2 = v45;
    }
  }
  else
  {
    v49 = 0;
    v48 = 0;
    v194 = 0;
    v192 = 0;
    v2[169] = 0;
    v50 = v2 + 169;
  }
  *v2 = 0;
  *(_DWORD *)(a1 + 5264) = 20;
  v195 = v2;
  if (!v2[1840])
  {
    if (!v41 || *(_BYTE *)(a1 + 3414))
    {
      v71 = "2.4GHz";
      goto LABEL_256;
    }
    v120 = v2;
    v121 = 0;
    if (v36)
      v122 = v193;
    else
      v122 = 1;
    v123 = 1;
    v71 = "5GHz";
    while (1)
    {
      v124 = v123;
      v125 = &dword_10026CCE8[v121];
      if (sub_10006E3B0(*(_QWORD *)(a1 + 64), *v125))
      {
        v126 = *v125;
        if ((_DWORD)v126 == 138)
        {
          if ((v122 & 1) == 0)
            goto LABEL_232;
        }
        else
        {
          if ((v126 - 142) < 0x18)
            v127 = v122;
          else
            v127 = 0;
          if ((v127 & 1) == 0)
          {
LABEL_232:
            v128 = sub_1001102D8(a1, v126);
            if (v36 == kCFCompareEqualTo || !v128)
              goto LABEL_254;
          }
        }
      }
      v123 = 0;
      v121 = 1;
      if ((v124 & 1) == 0)
      {
        v2 = v120;
        goto LABEL_256;
      }
    }
  }
  if (!v41)
    goto LABEL_244;
  if (*(_BYTE *)(a1 + 3414))
  {
    v70 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: setting misBand to 2G due to AWDL RealTime", "__WiFiDeviceManagerStartMISScan");
LABEL_150:
    objc_autoreleasePoolPop(v70);
    v49 = 1;
    goto LABEL_151;
  }
  if (*(_DWORD *)(a1 + 7052) == 1)
  {
    v70 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: setting misBand to 2G due to NAN Concurrency", "__WiFiDeviceManagerStartMISScan");
    goto LABEL_150;
  }
  if (v44 && v194)
  {
    if (sub_10006E2B4(*(_QWORD *)(a1 + 64), v198) || sub_1001102D8(a1, v198))
    {
      *v50 = 1;
      v129 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s %u forceDisconnectInfra as its DFS Channel or Coex denylisted channel", "__WiFiDeviceManagerStartMISScan", 24686);
    }
    else
    {
      if (!v49)
      {
        *v2 = v198;
        goto LABEL_151;
      }
      *v50 = 1;
      v129 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s %u forceDisconnectInfra as its associated bandwidth is > 80MHz", "__WiFiDeviceManagerStartMISScan", 24689);
    }
    goto LABEL_320;
  }
  v49 = 0;
  if (v44 && v48)
  {
    *v50 = 1;
    v129 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s %u forceDisconnectInfra as connected to 6E ", "__WiFiDeviceManagerStartMISScan", 24697);
LABEL_320:
    objc_autoreleasePoolPop(v129);
    v49 = 0;
  }
LABEL_151:
  if (*v50 || !*v195)
  {
    v90 = 0;
    if (v36)
      v91 = v193;
    else
      v91 = 1;
    v92 = 1;
    do
    {
      v93 = v92;
      if (sub_10006E3B0(*(_QWORD *)(a1 + 64), dword_10026CCE8[v90]))
      {
        v94 = dword_10026CCE8[v90];
        if ((_DWORD)v94 == 138)
        {
          if ((v91 & 1) != 0)
            goto LABEL_166;
        }
        else
        {
          if ((v94 - 142) < 0x18)
            v95 = v91;
          else
            v95 = 0;
          if ((v95 & 1) != 0)
            goto LABEL_166;
        }
        v96 = sub_1001102D8(a1, v94);
        if (v36 == kCFCompareEqualTo || !v96)
        {
          *v195 = dword_10026CCE8[v90];
          break;
        }
      }
LABEL_166:
      v92 = 0;
      v90 = 1;
    }
    while ((v93 & 1) != 0);
  }
  v2 = v195;
  if (!v49)
  {
    v71 = "5GHz";
    goto LABEL_256;
  }
LABEL_244:
  if (!v44 || !v192 || *v50)
  {
    v120 = v2;
    v130 = 0;
    v125 = dword_10026CCDC;
    v71 = "2.4GHz";
    do
    {
      if (sub_10006E3B0(*(_QWORD *)(a1 + 64), dword_10026CCDC[v130]))
        v131 = 1;
      else
        v131 = v130 == 2;
      ++v130;
    }
    while (!v131);
LABEL_254:
    v2 = v120;
    *v120 = *v125;
LABEL_256:
    if (!v44)
      goto LABEL_258;
    goto LABEL_257;
  }
  *v2 = v198;
  v71 = "2.4GHz";
LABEL_257:
  CFRelease(v44);
LABEL_258:
  v132 = *v2;
  if (*v2)
  {
    v133 = 20;
    if (v132 >= 0xF)
    {
      if ((sub_10006E474(*(_QWORD *)(a1 + 64), v132) & 4) != 0)
        v133 = 80;
      else
        v133 = 20;
    }
    *(_DWORD *)(a1 + 5264) = v133;
    *(_DWORD *)(a1 + 5344) = 1;
  }
  v134 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
  {
    v135 = "YES";
    if ((v2[1841] & 2) != 0)
      v136 = "YES";
    else
      v136 = "NO";
    if ((v2[1841] & 1) != 0)
      v137 = "YES";
    else
      v137 = "NO";
    v138 = "5GHz";
    if (!v194)
      v138 = "2.4GHz";
    if (!v2[169])
      v135 = "NO";
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "MIS Channel Selection: MIS Ch = %d MIS Band = %s MIS BandWidth = %d AWDL state=%s Infra Connected %s Infra Band %s Should Disconnect Infra %s ", *v2, v71, *(unsigned int *)(a1 + 5264), v136, v137, v138, v135);
  }
  objc_autoreleasePoolPop(v134);
  if (*(_DWORD *)(a1 + 5344) && *v2)
  {
    sub_100136AF0(a1);
    if (v4)
      CFRelease(v4);
    v3 = *(_DWORD *)(a1 + 5344);
    goto LABEL_378;
  }
  v139 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Attempting MIS Scan");
  objc_autoreleasePoolPop(v139);
  v199 = 0;
  if (!*(_QWORD *)(a1 + 5368))
  {
    v183 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "MIS Scan: mis allowed channels list is empty");
    objc_autoreleasePoolPop(v183);
    goto LABEL_409;
  }
  v140 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!v140)
  {
LABEL_409:
    v19 = 0;
    goto LABEL_303;
  }
  v141 = v140;
  v142 = *(_QWORD *)(a1 + 64);
  v143 = (const void *)sub_100025C3C(v142);
  if (sub_100017A68(v142, v143, v141))
  {
    v185 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "MIS Scan: Failed to get supported channel list");
    objc_autoreleasePoolPop(v185);
    goto LABEL_408;
  }
  v144 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!v144)
  {
LABEL_408:
    CFRelease(v141);
    goto LABEL_409;
  }
  v19 = v144;
  if (CFArrayGetCount(v141) >= 1)
  {
    v145 = 0;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v141, v145);
      if (ValueAtIndex)
      {
        v147 = ValueAtIndex;
        v148 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("SUP_CHANNEL"));
        v149 = (void *)CFDictionaryGetValue(v147, CFSTR("SUP_CHANNEL_FLAGS"));
        if (v148)
        {
          v150 = v149;
          if (v149)
          {
            v151 = *(const __CFArray **)(a1 + 5368);
            v212.length = CFArrayGetCount(v151);
            v212.location = 0;
            if (CFArrayContainsValue(v151, v212, v148))
            {
              CFNumberGetValue(v148, kCFNumberIntType, &v199);
              if (sub_1001102D8(a1, v199))
              {
                v152 = objc_autoreleasePoolPush();
                if (qword_10026DD20)
                  objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: channel %d is blacklisted by coex manager", "__CreateMIS24GScanChanList", v199);
                objc_autoreleasePoolPop(v152);
              }
              else
              {
                *(_OWORD *)buffer = *(_OWORD *)&off_100231A60;
                values[0] = v148;
                values[1] = v150;
                v153 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)buffer, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                if (v153)
                {
                  v154 = v153;
                  CFArrayAppendValue(v19, v153);
                  CFRelease(v154);
                }
              }
            }
          }
        }
      }
      ++v145;
    }
    while (v145 < CFArrayGetCount(v141));
  }
  CFRelease(v141);
  if (!CFArrayGetCount(v19))
  {
    CFRelease(v19);
    v19 = 0;
  }
  v2 = v195;
LABEL_303:
  v17 = sub_100116F8C(0, v19, *(_DWORD *)(a1 + 128), 0, 1);
  if (!v17)
  {
LABEL_404:
    v18 = 0;
    goto LABEL_18;
  }
  v155 = malloc_type_malloc(0x28uLL, 0x10E0040573E0799uLL);
  if (!v155)
  {
    v184 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: null scanData", "__WiFiDeviceManagerStartMISScan");
    objc_autoreleasePoolPop(v184);
    goto LABEL_404;
  }
  v20 = v155;
  *v155 = a1;
  v155[1] = 0;
  v155[3] = 0;
  v156 = v2;
  if (CFDictionaryContainsKey(v17, CFSTR("SSID_STR")))
    v157 = 1;
  else
    v157 = CFDictionaryContainsKey(v17, CFSTR("SCAN_SSID_LIST")) != 0;
  v20[32] = v157;
  v158 = (const void *)sub_100025C3C(*(_QWORD *)(a1 + 64));
  v159 = sub_100018C78(a1, v158, v17, 0, (uint64_t)sub_10013880C, (uint64_t)v20, (_QWORD *)(a1 + 5352), 19);
  if ((_DWORD)v159)
  {
    v186 = v159;
    v187 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Error initiating MIS scan request: %d", v186);
    objc_autoreleasePoolPop(v187);
    v18 = 0;
  }
  else
  {
    v18 = 1;
  }
  v2 = v156;
  if (v4)
LABEL_19:
    CFRelease(v4);
LABEL_20:
  if (v19)
    CFRelease(v19);
  if (v17)
    CFRelease(v17);
  if ((v18 & 1) == 0)
  {
    if (v20)
      free(v20);
    goto LABEL_377;
  }
  v3 = 1;
LABEL_378:
  *(_DWORD *)(a1 + 5344) = v3;
LABEL_379:
  if (v2[3])
    v178 = 0;
  else
    v178 = v3 == 0;
  if (v178)
  {
    v179 = *(_DWORD *)(a1 + 5228);
    if (v179)
    {
      v180 = IOPMAssertionRelease(v179);
      if ((_DWORD)v180)
      {
        v181 = v180;
        v182 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: MIS session not active: release MIS PM Assertion, error=%d", "__WiFiDeviceManagerMISStateMachineRun", v181);
        objc_autoreleasePoolPop(v182);
      }
      *(_DWORD *)(a1 + 5228) = 0;
    }
  }
}

void sub_10013880C(uint64_t a1, uint64_t a2, const __CFArray *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  void *v13;
  BOOL v14;
  void *v15;
  void *v16;
  int Count;
  CFIndex v18;
  uint64_t v19;
  const void *ValueAtIndex;
  const void *v21;
  CFIndex v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  unsigned __int8 *v28;
  _OWORD v29[10];
  uint64_t v30;
  CFRange v31;

  v10 = *a6;
  v11 = sub_100070AFC(*(_QWORD *)(*a6 + 64));
  v12 = sub_1001076C4(v10);
  free(a6);
  v13 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "MIS scan completed (%d) with current state: %d", a5, *(unsigned int *)(v10 + 5344));
  objc_autoreleasePoolPop(v13);
  if (v11 == *(_QWORD *)(v10 + 5352))
  {
    if (*(_BYTE *)(v10 + 5223) && (*(_BYTE *)(v10 + 5221) ? (v14 = !v12) : (v14 = 1), v14))
    {
      v15 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Aborting MIS Start", "__WiFiDeviceManagerMISScanCallback");
      objc_autoreleasePoolPop(v15);
      *(_DWORD *)(v10 + 5344) = 0;
      v30 = 0;
      memset(v29, 0, sizeof(v29));
      DWORD1(v29[0]) = 7;
      sub_100106C34(v10, (uint64_t)v29);
    }
    else
    {
      v28 = (unsigned __int8 *)(v10 + 5216);
      if (a1 && a3 && *(_QWORD *)(v10 + 5368))
      {
        DWORD2(v29[0]) = 0;
        *(_QWORD *)&v29[0] = 0;
        Count = CFArrayGetCount(a3);
        if (Count >= 1)
        {
          v18 = 0;
          v19 = Count;
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(a3, v18);
            if (ValueAtIndex)
            {
              v21 = sub_10002BE64((uint64_t)ValueAtIndex, CFSTR("CHANNEL"));
              v31.location = 0;
              v31.length = 3;
              v22 = CFArrayBSearchValues(*(CFArrayRef *)(v10 + 5368), v31, v21, (CFComparatorFunction)&_CFNumberCompare, 0);
              if (v22 <= 2)
                ++*((_DWORD *)v29 + v22);
            }
            ++v18;
          }
          while (v19 != v18);
        }
        v23 = 0;
        LODWORD(v24) = 0;
        do
        {
          if (sub_1001102D8(v10, dword_10026CCDC[v23]))
            *((_DWORD *)v29 + v23) = 0xFFFF;
          v25 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: interfernce on channel %d = %d", "__FindLeastBusyChannelForMIS", dword_10026CCDC[v23], *((unsigned int *)v29 + v23));
          objc_autoreleasePoolPop(v25);
          if (*((_DWORD *)v29 + (int)v24) > *((_DWORD *)v29 + v23))
            LODWORD(v24) = v23;
          ++v23;
        }
        while (v23 != 3);
      }
      else
      {
        v24 = 0;
        while (sub_1001102D8(v10, dword_10026CCDC[v24]))
        {
          if (++v24 == 3)
          {
            LODWORD(v24) = 0;
            break;
          }
        }
        v27 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Error: %s: Using default hostAp channel %d", "__FindLeastBusyChannelForMIS", dword_10026CCDC[v24]);
        objc_autoreleasePoolPop(v27);
      }
      *v28 = dword_10026CCDC[(int)v24];
      v26 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Least Congested channel is %d", *v28);
      objc_autoreleasePoolPop(v26);
      if (*(_DWORD *)(v10 + 5344) == 1)
        sub_100136AF0(v10);
    }
  }
  else
  {
    v16 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Ignorning old MIS Scan request.  CurrentCommand=%lld PendingCommand=%lld", v11, *(_QWORD *)(v10 + 5352));
    objc_autoreleasePoolPop(v16);
  }
}

void sub_100138BEC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  _BOOL4 v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  void *v12;
  unsigned __int8 *v13;
  void *v14;
  void *v15;
  char *v16;
  int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const __CFString *v39;
  void *v40;
  int v41;
  void *v42;
  const void *v43;
  const __CFString *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  IOPMAssertionID v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  __int128 v63;
  uint64_t v64;
  double v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  char buffer[16];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;

  v7 = a1 + 5216;
  v8 = sub_1001076C4(a1);
  v9 = *(unsigned __int8 *)(v7 + 6);
  v10 = (unsigned __int8 *)v7;
  v11 = *(unsigned __int8 *)(v7 + 7);
  v12 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "_WiFiDeviceManagerStartMISCallback err=%d, network=%@ state=%d", a3, sub_10002B088(a4), *(unsigned int *)(a1 + 5344));
  objc_autoreleasePoolPop(v12);
  if (*(_DWORD *)(a1 + 5344) != 2)
  {
    v15 = objc_autoreleasePoolPush();
    v13 = v10;
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Start MIS Session, unexpected state %d", *(unsigned int *)(a1 + 5344));
    objc_autoreleasePoolPop(v15);
    if ((v10[1841] & 4) != 0)
    {
      v16 = (char *)a1;
      v17 = 0;
LABEL_19:
      sub_1000F9DAC(v16, 4, v17);
      goto LABEL_77;
    }
    goto LABEL_77;
  }
  *(_DWORD *)(a1 + 5344) = 0;
  v13 = v10;
  *((_WORD *)v10 + 3) = 0;
  v10[8] = 0;
  *(_WORD *)(v10 + 171) = 0;
  if ((_DWORD)a3 || !a4)
  {
    v18 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "__WiFiDeviceManagerStartMISCallback start network failed");
    objc_autoreleasePoolPop(v18);
    v13[3] = 0;
    if (v13[170])
      v13[170] = 0;
    sub_1000F9DAC((char *)a1, 4, 0);
    sub_100108298((_QWORD *)a1);
    v26 = *(_QWORD *)(a1 + 4944);
    if (v26)
    {
      if (_MISDetach)
        _MISDetach(v26, v19, v20, v21, v22, v23, v24, v25);
      *(_QWORD *)(a1 + 4944) = 0;
      *(_DWORD *)(a1 + 192) = 13;
      if (_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
      {
        sub_1000285E4(a1, 10);
      }
      else
      {
        objc_msgSend(+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"), "autoJoinStartedWithTrigger:interfaceName:", 10, a2);
        sub_1000FBA80(a1, 2, "__WiFiDeviceManagerStartMISSessionCallback");
      }
    }
    *(_QWORD *)&v85 = 0;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    *(_OWORD *)buffer = 0u;
    v76 = 0u;
    *(_DWORD *)&buffer[4] = 14;
    sub_100106C34(a1, (uint64_t)buffer);
    goto LABEL_77;
  }
  if (!*(_QWORD *)(a1 + 4944))
  {
    v27 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "__WiFiDeviceManagerStartMISCallback: MIS Session is NULL");
    objc_autoreleasePoolPop(v27);
    v28 = (const void *)sub_100025C3C(*(_QWORD *)(a1 + 64));
    sub_10010FABC(a1, v28, a4, 0, 0);
    v10[3] = 0;
    if (v10[170])
      v10[170] = 0;
    sub_100108298((_QWORD *)a1);
    goto LABEL_43;
  }
  if (!v8)
  {
    v29 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Aborting MIS Start", "__WiFiDeviceManagerStartMISSessionCallback");
    objc_autoreleasePoolPop(v29);
    v30 = (const void *)sub_100025C3C(*(_QWORD *)(a1 + 64));
    sub_10010FABC(a1, v30, a4, 0, 0);
    v10[3] = 0;
    if (v10[170])
      v10[170] = 0;
    sub_100108298((_QWORD *)a1);
    if (_MISDetach)
      _MISDetach(*(_QWORD *)(a1 + 4944), v31, v32, v33, v34, v35, v36, v37);
    *(_QWORD *)(a1 + 4944) = 0;
LABEL_43:
    *(_DWORD *)(a1 + 192) = 13;
    sub_1000F9DAC((char *)a1, 4, 0);
LABEL_74:
    if (_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
    {
      sub_1000285E4(a1, 10);
    }
    else
    {
      objc_msgSend(+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"), "autoJoinStartedWithTrigger:interfaceName:", 10, a2);
      sub_1000FBA80(a1, 2, "__WiFiDeviceManagerStartMISSessionCallback");
    }
    goto LABEL_77;
  }
  if (!v11 && !v9)
  {
    if (!v10[5] && !*(_DWORD *)(a1 + 5232))
    {
      v14 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Starting MIS idle timer", "__WiFiDeviceManagerStartMISSessionCallback");
      objc_autoreleasePoolPop(v14);
      sub_1001074BC(a1, 2);
    }
    goto LABEL_48;
  }
  if (!v9)
  {
LABEL_48:
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    *(_OWORD *)buffer = 0u;
    v76 = 0u;
    v39 = sub_100070E94();
    CFStringGetCString(v39, buffer, 256, 0);
    v40 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Attempting to start DHCP Service on %s", buffer);
    objc_autoreleasePoolPop(v40);
    if (_MISStartServiceDHCP)
    {
      v41 = _MISStartServiceDHCP(*(_QWORD *)(a1 + 4944), buffer, (_OWORD *)(a1 + 4952));
      if (!v41)
      {
        v42 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Successfully started DHCP Service on %@", sub_100070E94());
        objc_autoreleasePoolPop(v42);
        v43 = *(const void **)(a1 + 5208);
        if (v43)
          CFRelease(v43);
        *(_QWORD *)(a1 + 5208) = a4;
        CFRetain(a4);
        if (!*(_DWORD *)(a1 + 5228))
        {
          v44 = sub_100070E94();
          v45 = IOPMAssertionCreateWithName(CFSTR("NoIdleSleepAssertion"), 0xFFu, v44, (IOPMAssertionID *)(a1 + 5228));
          if ((_DWORD)v45)
          {
            v46 = v45;
            v47 = objc_autoreleasePoolPush();
            if (qword_10026DD20)
              objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Unable to prevent idle sleep during MIS Session, error=%d", v46);
            objc_autoreleasePoolPop(v47);
            *(_DWORD *)(a1 + 5228) = 0;
          }
        }
        v48 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Started Internet Connection Sharing over WiFi");
        objc_autoreleasePoolPop(v48);
        sub_10006A2DC(*(_QWORD *)(a1 + 64), v13[44]);
        v74 = 0;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        v63 = 0u;
        v64 = 0;
        v65 = sub_100064914();
        DWORD2(v67) = *v13;
        DWORD1(v63) = 1;
        if (v13[170])
          *(_QWORD *)&v70 = sub_100064914();
        sub_100106C34(a1, (uint64_t)&v63);
        v16 = (char *)a1;
        v17 = 1;
        goto LABEL_19;
      }
    }
    else
    {
      v41 = -1;
    }
    v49 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Can't start DHCP service: %s", strerror(v41));
    objc_autoreleasePoolPop(v49);
    v50 = (const void *)sub_100025C3C(*(_QWORD *)(a1 + 64));
    sub_10010FABC(a1, v50, a4, 0, 0);
    v13 = v10;
    v10[3] = 0;
    if (v10[170])
      v10[170] = 0;
    sub_100108298((_QWORD *)a1);
    if (_MISDetach)
      _MISDetach(*(_QWORD *)(a1 + 4944), v51, v52, v53, v54, v55, v56, v57);
    *(_QWORD *)(a1 + 4944) = 0;
    sub_1000F9DAC((char *)a1, 4, 0);
    *(_DWORD *)(a1 + 192) = 13;
    goto LABEL_74;
  }
  sub_10006A2DC(*(_QWORD *)(a1 + 64), v10[44]);
  v38 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: MIS successfully restarted.", "__WiFiDeviceManagerStartMISSessionCallback");
  objc_autoreleasePoolPop(v38);
LABEL_77:
  if (!v13[3])
  {
    v58 = *(_DWORD *)(a1 + 5228);
    if (v58)
    {
      v59 = IOPMAssertionRelease(v58);
      if ((_DWORD)v59)
      {
        v60 = v59;
        v61 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: MIS session start failed: release MIS PM Assertion, error=%d", "__WiFiDeviceManagerStartMISSessionCallbackWrapper", v60);
        objc_autoreleasePoolPop(v61);
      }
      *(_DWORD *)(a1 + 5228) = 0;
    }
  }
}

CFMutableStringRef sub_10013932C()
{
  uint64_t v0;
  uint64_t v1;
  const __CFString *v2;
  CFMutableStringRef MutableCopy;
  const __CFData *ExternalRepresentation;
  const __CFData *v5;
  CFIndex Length;
  void *v7;
  void *v9;
  CFRange v10;
  CFRange v11;

  if (!&_lockdown_connect || (v0 = lockdown_connect()) == 0)
  {
    v7 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Error connecting to LockDown");
    objc_autoreleasePoolPop(v7);
    return 0;
  }
  v1 = v0;
  v2 = (const __CFString *)MGCopyAnswer(CFSTR("UserAssignedDeviceName"), 0);
  if (&_lockdown_disconnect)
    lockdown_disconnect(v1);
  if (!v2)
    return 0;
  MutableCopy = CFStringCreateMutableCopy(kCFAllocatorDefault, 0, v2);
  CFRelease(v2);
  if (MutableCopy)
  {
    while (1)
    {
      if (!CFStringGetLength(MutableCopy))
      {
        CFRelease(MutableCopy);
        return 0;
      }
      ExternalRepresentation = CFStringCreateExternalRepresentation(kCFAllocatorDefault, MutableCopy, 0x8000100u, 0);
      if (ExternalRepresentation)
      {
        v5 = ExternalRepresentation;
        Length = CFDataGetLength(ExternalRepresentation);
        CFRelease(v5);
        if (Length <= 32)
          break;
      }
      v10.location = CFStringGetLength(MutableCopy) - 1;
      v10.length = 1;
      CFStringDelete(MutableCopy, v10);
    }
    v11.length = CFStringGetLength(MutableCopy);
    v11.location = 0;
    CFStringFindAndReplace(MutableCopy, CFSTR("\n"), CFSTR(" "), v11, 0);
    v9 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Using SSID %@ for MIS Session, SSID Length = %ld", MutableCopy, Length);
    objc_autoreleasePoolPop(v9);
  }
  return MutableCopy;
}

void sub_1001394CC(uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  void *v4;

  v2 = (_BYTE *)(a1 + 5219);
  v3 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: MIS stopped Callback", "__WiFiDeviceManagerStopNetworkCallback");
  objc_autoreleasePoolPop(v3);
  if (v2[4])
  {
    if (sub_1001076C4(a1) && !*v2)
    {
      v4 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Starting MIS", "__WiFiDeviceManagerStopNetworkCallback");
      objc_autoreleasePoolPop(v4);
      sub_100107ABC(a1);
    }
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 5272), CFSTR("wifid"));
    sub_100107DE4(a1, 0);
    sub_10006A2DC(*(_QWORD *)(a1 + 64), 0);
    sub_1001074BC(a1, 5);
  }
}

void sub_1001395D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  _BOOL4 v10;
  void *v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFStringRef v21;
  CFStringRef v22;
  _QWORD *v23;
  uint64_t v24;
  NSObject *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD block[7];
  uint64_t v35;
  char cStr[16];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v35 = 0;
  if (!_MISAttach)
  {
    v8 = -1;
    goto LABEL_6;
  }
  v8 = _MISAttach(&v35);
  if (v8)
  {
LABEL_6:
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Failed to attach to MIS Session with error %s", strerror(v8));
    objc_autoreleasePoolPop(v11);
    goto LABEL_9;
  }
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v50 = v9;
  v51 = v9;
  v48 = v9;
  v49 = v9;
  v46 = v9;
  v47 = v9;
  v44 = v9;
  v45 = v9;
  v42 = v9;
  v43 = v9;
  v40 = v9;
  v41 = v9;
  v38 = v9;
  v39 = v9;
  *(_OWORD *)cStr = v9;
  v37 = v9;
  if (_MISGetDynamicStoreKey)
    v10 = _MISGetDynamicStoreKey(v35, cStr, v2, v3, v4, v5, v6, v7) != 0;
  else
    v10 = 1;
  if (v35 && v10)
  {
    v13 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Failed to get the MIS key");
    objc_autoreleasePoolPop(v13);
    goto LABEL_23;
  }
  v21 = CFStringCreateWithCString(0, cStr, 0x600u);
  if (!v21)
  {
LABEL_23:
    if (_MISDetach)
      _MISDetach(v35, v14, v15, v16, v17, v18, v19, v20);
    goto LABEL_9;
  }
  v22 = v21;
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v21);
  v23 = *(_QWORD **)(a1 + 40);
  if (v23[30])
  {
    CFRetain(v23);
    v24 = *(_QWORD *)(a1 + 40);
    v25 = *(NSObject **)(v24 + 240);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10013987C;
    block[3] = &unk_100230AF0;
    block[4] = v24;
    block[5] = v22;
    block[6] = v35;
    dispatch_async(v25, block);
  }
  else
  {
    v26 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: null queue", "__WiFiDeviceManagerAttachToDynamicStore_block_invoke");
    objc_autoreleasePoolPop(v26);
    if (_MISDetach)
      _MISDetach(v35, v27, v28, v29, v30, v31, v32, v33);
    CFRelease(v22);
  }
LABEL_9:
  if (CFArrayGetCount(*(CFArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)) >= 1)
    SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(*(_QWORD *)(a1 + 40) + 5440), *(CFArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), 0);
  v12 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void sub_10013987C(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a1[4];
  if (*(_QWORD *)(v2 + 240))
  {
    qword_10026D760 = a1[5];
    if (!qword_10026D760)
    {
      v3 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Error transfering misKey to CFString");
      objc_autoreleasePoolPop(v3);
      v2 = a1[4];
    }
    v4 = sub_1001076C4(v2);
    v2 = a1[4];
    *(_BYTE *)(v2 + 5220) = v4;
    if (_MISDetach)
    {
      v5 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: MIS dynamic store key: %@", "__WiFiDeviceManagerAttachToDynamicStore_block_invoke_2", qword_10026D760);
      objc_autoreleasePoolPop(v5);
      _MISDetach(a1[6], v6, v7, v8, v9, v10, v11, v12);
      v2 = a1[4];
    }
  }
  CFRelease((CFTypeRef)v2);
}

void sub_100139964(id a1)
{
  void *v1;

  v1 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Requesting PersonalHotspotControl extension to reload because someone might change MIS state from NETRB");
  objc_autoreleasePoolPop(v1);
  -[CHSControlService reloadControlsForExtension:kind:reason:](+[CHSControlService sharedInstance](CHSControlService, "sharedInstance"), "reloadControlsForExtension:kind:reason:", CFSTR("com.apple.WiFiKit.PersonalHotspotControl"), CFSTR("PersonalHotspotControl"), CFSTR("Requesting PersonalHotspotControl extension to reload because MIS state might be changed from NETRB"));
}

void sub_1001399D0(uint64_t a1, CFArrayRef theArray)
{
  CFIndex Count;
  uint64_t v4;
  CFIndex v5;
  uint64_t v6;
  CFIndex v7;
  void *v8;
  void *v9;
  CFIndex v10;
  __CFArray *MutableCopy;
  const __CFArray *v12;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFArray *v15;
  CFIndex v16;
  const __CFString *v17;
  const __CFString *v18;
  void *v19;
  CFIndex j;
  const void *v21;
  const void *v22;
  const __CFDictionary *v23;
  const __CFArray *Value;
  void *v25;
  CFIndex v26;
  CFIndex v27;
  CFIndex v28;
  const __CFString *v29;
  void *v30;
  void *v31;
  void *v32;
  const void *v33;
  void *v34;
  __CFArray *v35;
  const __CFArray *v36;
  CFIndex v37;
  const void *v38;
  const void *v39;
  CFIndex v40;
  void *v41;
  const void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __CFArray *cf;
  uint64_t v52;
  CFIndex v53;
  void *v54;
  CFIndex v55;
  CFRange v57;
  CFRange v58;

  Count = CFArrayGetCount(theArray);
  if (!Count)
  {
    v44 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: No GAS responses received", "__WiFiDeviceManagerFindMatchingHS20Account");
    goto LABEL_81;
  }
  v4 = Count;
  v5 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3624));
  v6 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3632)) + v5;
  if (!v6)
  {
    v44 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: No HS2.0 accounts", "__WiFiDeviceManagerFindMatchingHS20Account");
LABEL_81:
    objc_autoreleasePoolPop(v44);
    return;
  }
  v55 = CFArrayGetCount(theArray);
  if (!v55)
  {
    v45 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: No GAS responses received", "__WiFiDeviceManagerSetHS20HomeOperatorNetwork");
    goto LABEL_86;
  }
  v7 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3624));
  v52 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3632)) + v7;
  v8 = objc_autoreleasePoolPush();
  v9 = (void *)qword_10026DD20;
  if (qword_10026DD20)
  {
    v10 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3624));
    objc_msgSend(v9, "WFLog:message:", 3, "%s: hs20Accounts: enabled %ld, disabled %ld", "__WiFiDeviceManagerSetHS20HomeOperatorNetwork", v10, CFArrayGetCount(*(CFArrayRef *)(a1 + 3632)));
  }
  objc_autoreleasePoolPop(v8);
  if (!v52)
  {
    v45 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: No HS2.0 accounts", "__WiFiDeviceManagerSetHS20HomeOperatorNetwork");
LABEL_86:
    objc_autoreleasePoolPop(v45);
    goto LABEL_56;
  }
  MutableCopy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, *(CFArrayRef *)(a1 + 3624));
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 3632)))
  {
    v12 = *(const __CFArray **)(a1 + 3632);
    v57.length = CFArrayGetCount(v12);
    v57.location = 0;
    CFArrayAppendArray(MutableCopy, v12, v57);
  }
  cf = MutableCopy;
  if (v55 >= 1)
  {
    for (i = 0; i != v55; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      if (ValueAtIndex)
        sub_1000C996C((uint64_t)ValueAtIndex, 0);
    }
  }
  v48 = a1;
  v49 = v6;
  v50 = v4;
  v15 = MutableCopy;
  if (v52 >= 1)
  {
    v16 = 0;
    do
    {
      v53 = v16;
      v54 = (void *)CFArrayGetValueAtIndex(v15, v16);
      if (v54)
      {
        v17 = (const __CFString *)sub_10002BE64((uint64_t)v54, CFSTR("DomainName"));
        if (v17)
        {
          v18 = v17;
          v19 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Home Domain name %@", "__WiFiDeviceManagerSetHS20HomeOperatorNetwork", v18);
          objc_autoreleasePoolPop(v19);
          if (sub_1000C66D0(v54))
          {
            if (v55 >= 1)
            {
              for (j = 0; j != v55; ++j)
              {
                v21 = CFArrayGetValueAtIndex(theArray, j);
                if (v21)
                {
                  v22 = v21;
                  v23 = (const __CFDictionary *)sub_1000C9A40((uint64_t)v21);
                  if (v23)
                  {
                    Value = (const __CFArray *)CFDictionaryGetValue(v23, CFSTR("ANQP_DOMAIN_NAME_LIST"));
                    v25 = objc_autoreleasePoolPush();
                    if (Value)
                    {
                      if (qword_10026DD20)
                        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Checking ANQP domain list against home domain %@", "__WiFiDeviceManagerSetHS20HomeOperatorNetwork", v18);
                      objc_autoreleasePoolPop(v25);
                      v26 = CFArrayGetCount(Value);
                      if (v26 >= 1)
                      {
                        v27 = v26;
                        v28 = 0;
                        while (1)
                        {
                          v29 = (const __CFString *)CFArrayGetValueAtIndex(Value, v28);
                          v30 = objc_autoreleasePoolPush();
                          if (qword_10026DD20)
                            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Comparing home domain %@ against ANQP domain result %@", "__WiFiDeviceManagerSetHS20HomeOperatorNetwork", v18, v29);
                          objc_autoreleasePoolPop(v30);
                          if (v29)
                          {
                            if (CFStringCompare(v18, v29, 0) == kCFCompareEqualTo)
                            {
                              sub_1000C996C((uint64_t)v22, 1);
                              sub_1000C9914((uint64_t)v22, 1);
                              sub_1000C38BC((uint64_t)v22, (uint64_t)v54);
                              v25 = objc_autoreleasePoolPush();
                              v32 = (void *)qword_10026DD20;
                              if (qword_10026DD20)
                              {
                                v33 = sub_10002BE64((uint64_t)v54, CFSTR("DomainName"));
                                objc_msgSend(v32, "WFLog:message:", 3, "%s: found response from home operator %@, marking %@ provisioned", "__WiFiDeviceManagerSetHS20HomeOperatorNetwork", v33, sub_10002B088(v22));
                              }
                              goto LABEL_47;
                            }
                            v31 = objc_autoreleasePoolPush();
                            if (qword_10026DD20)
                              objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: home domain %@ and ANQP domain result %@ were determined to be different", "__WiFiDeviceManagerSetHS20HomeOperatorNetwork", v18, v29);
                            objc_autoreleasePoolPop(v31);
                          }
                          if (v27 == ++v28)
                            goto LABEL_48;
                        }
                      }
                      continue;
                    }
                    if (qword_10026DD20)
                      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: ANQP domain list was NULL", "__WiFiDeviceManagerSetHS20HomeOperatorNetwork", v46, v47);
                  }
                  else
                  {
                    v25 = objc_autoreleasePoolPush();
                    if (qword_10026DD20)
                      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: result from WiFiNetworkGetGasResponse() was NULL", "__WiFiDeviceManagerSetHS20HomeOperatorNetwork", v46, v47);
                  }
                }
                else
                {
                  v25 = objc_autoreleasePoolPush();
                  if (qword_10026DD20)
                    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: network ref from responses was NULL.", "__WiFiDeviceManagerSetHS20HomeOperatorNetwork", v46, v47);
                }
LABEL_47:
                objc_autoreleasePoolPop(v25);
LABEL_48:
                ;
              }
            }
          }
          else
          {
            v34 = objc_autoreleasePoolPush();
            if (qword_10026DD20)
              objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: provisioned HS2.0 account %@ has no credentials.", "__WiFiDeviceManagerSetHS20HomeOperatorNetwork", sub_10002B088(v54));
            objc_autoreleasePoolPop(v34);
          }
        }
      }
      v16 = v53 + 1;
      v15 = cf;
    }
    while (v53 + 1 != v52);
  }
  v6 = v49;
  v4 = v50;
  a1 = v48;
  if (v15)
    CFRelease(v15);
LABEL_56:
  v35 = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, *(CFArrayRef *)(a1 + 3624));
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 3632)))
  {
    v36 = *(const __CFArray **)(a1 + 3632);
    v58.length = CFArrayGetCount(v36);
    v58.location = 0;
    CFArrayAppendArray(v35, v36, v58);
  }
  if (v4 < 1)
  {
LABEL_71:
    if (!v35)
      return;
    goto LABEL_72;
  }
  v37 = 0;
  while (1)
  {
    v38 = CFArrayGetValueAtIndex(theArray, v37);
    if (v38)
    {
      v39 = v38;
      if (!sub_1000C993C((uint64_t)v38) && v6 >= 1)
        break;
    }
LABEL_70:
    if (++v37 == v4)
      goto LABEL_71;
  }
  v40 = 0;
  while (1)
  {
    v41 = (void *)CFArrayGetValueAtIndex(v35, v40);
    if (!v41)
      goto LABEL_67;
    v42 = v41;
    if (!sub_1000C66D0(v41))
      break;
    if (sub_1000C9B20(v39, v42))
    {
      sub_1000C9914((uint64_t)v39, 1);
      sub_1000C38BC((uint64_t)v39, (uint64_t)v42);
      goto LABEL_70;
    }
LABEL_67:
    if (v6 == ++v40)
      goto LABEL_70;
  }
  v43 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: provisioned HS2.0 account %@ has no credentials.", "__WiFiDeviceManagerFindMatchingHS20Account", sub_10002B088(v42));
  objc_autoreleasePoolPop(v43);
  if (v35)
LABEL_72:
    CFRelease(v35);
}

void sub_10013A068(uint64_t a1, const void *a2, uint64_t a3, const __CFDictionary **a4)
{
  uint64_t v7;
  const void *v8;
  CFNumberRef v9;
  const __CFNumber *v10;
  const __CFDictionary *v11;
  const void *Value;
  const void *v13;
  const __CFString *v14;
  CFAbsoluteTime Current;
  CFDateRef v16;
  const __CFDictionary *v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  int valuePtr;

  v7 = (uint64_t)*a4;
  *((_BYTE *)*a4 + 5429) = 0;
  if ((_DWORD)a3)
  {
    sub_10010FBD8(v7, a2, 0, 0, 0);
    v8 = 0;
  }
  else
  {
    v8 = sub_10002BF8C(a1, a2);
    if (v8)
    {
      v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, a4 + 4);
      if (v9)
      {
        v10 = v9;
        valuePtr = -1431655766;
        sub_10002C478((uint64_t)v8, CFSTR("networkRole"), v9);
        CFNumberGetValue(v10, kCFNumberSInt32Type, &valuePtr);
        if (valuePtr == 4)
        {
          v11 = a4[3];
          if (v11)
          {
            Value = CFDictionaryGetValue(a4[3], CFSTR("APPLE80211KEY_AWDL_INFO_ASSISTED_DISCOVERY_FOLLOW"));
            if (Value)
              sub_10002C478((uint64_t)v8, CFSTR("APPLE80211KEY_AWDL_INFO_ASSISTED_DISCOVERY_FOLLOW"), Value);
            v13 = CFDictionaryGetValue(v11, CFSTR("AWDL_INFO_ASSISTED_DISCOVERY_METRIC"));
            if (v13)
            {
              sub_10002C478((uint64_t)v8, CFSTR("AWDL_INFO_ASSISTED_DISCOVERY_METRIC"), v13);
              v14 = (const __CFString *)a4[6];
              if (v14)
              {
                if (CFStringCompare(v14, CFSTR("mobilewifitool"), 0))
                {
                  Current = CFAbsoluteTimeGetCurrent();
                  v16 = CFDateCreate(kCFAllocatorDefault, Current);
                  sub_10002C478((uint64_t)v8, CFSTR("lastJoined"), v16);
                  if (v16)
                    CFRelease(v16);
                }
              }
            }
          }
        }
        CFRelease(v10);
      }
      CFSetAddValue(*(CFMutableSetRef *)(v7 + 3320), v8);
    }
  }
  v17 = a4[1];
  if (v17)
    ((void (*)(uint64_t, const void *, uint64_t, const void *, _QWORD, const __CFDictionary *))v17)(v7, a2, a3, v8, 0, a4[5]);
  v18 = a4[3];
  if (v18)
  {
    CFRelease(v18);
    a4[3] = 0;
  }
  v19 = a4[6];
  if (v19)
  {
    CFRelease(v19);
    a4[6] = 0;
  }
  if (v8)
    CFRelease(v8);
  free(a4);
}

void sub_10013A25C(int a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (*v5)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v6;
  const void *v7;
  void *v8;
  const void *v9;

  v6 = *a4;
  v5 = (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))a4[1];
  if (v5)
    v5(*a4, a2, a3, 0, a4[3]);
  v7 = (const void *)a4[2];
  if (v7 && CFSetContainsValue(*(CFSetRef *)(v6 + 3320), v7))
    CFSetRemoveValue(*(CFMutableSetRef *)(v6 + 3320), (const void *)a4[2]);
  if (*(_QWORD *)(v6 + 5408))
  {
    v8 = objc_autoreleasePoolPush();
    sub_1000FB8B8(v6);
    objc_autoreleasePoolPop(v8);
  }
  v9 = (const void *)a4[2];
  if (v9)
    CFRelease(v9);
  free(a4);
}

__CFDictionary *sub_10013A2E8(id *a1)
{
  id v2;
  id v3;
  __CFDictionary *Mutable;
  uint64_t v6;
  char *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  uint64_t v10;
  char *v11;
  CFNumberRef v12;
  CFNumberRef v13;
  uint64_t v14;
  char *v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  CFNumberRef v40;
  CFNumberRef v41;
  _QWORD v42[3];
  _QWORD v43[14];
  _QWORD v44[13];

  if (_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
  {
    v2 = objc_msgSend(objc_msgSend(a1[1103], "statistics"), "copy");
    v3 = objc_msgSend(objc_msgSend(v2, "debugInfo"), "copy");

    return (__CFDictionary *)v3;
  }
  else
  {
    if (!a1)
      return 0;
    v44[0] = CFSTR("PrevChannelScan");
    v44[1] = CFSTR("MRUChannelScan");
    v44[2] = CFSTR("RemChannelScan");
    v44[3] = CFSTR("Broadcast24GScan");
    v44[4] = CFSTR("Broadcast5GScan");
    v44[5] = CFSTR("BroadcastGeoBasedAllBandScan");
    v44[6] = CFSTR("BroadcastPeriodicAllBandScan");
    v44[7] = CFSTR("BroadcastLegacyAllBandScan");
    v44[8] = CFSTR("BroadcastLocnInvalidAllBandScan");
    v44[9] = CFSTR("BroadcastFake5GScan");
    v44[10] = CFSTR("HiddenNetworkScan");
    v44[11] = CFSTR("LocnPrevChannelScan");
    v44[12] = CFSTR("LocnMRUChannelScan");
    v43[0] = CFSTR("DeviceEnable");
    v43[1] = CFSTR("ATJOneShot");
    v43[2] = CFSTR("BTStateChange");
    v43[3] = CFSTR("PowerStateChange");
    v43[4] = CFSTR("LinkStateChange");
    v43[5] = CFSTR("WiFiDirectDisabled");
    v43[6] = CFSTR("ClientAssociateCallback");
    v43[7] = CFSTR("AdhocNetworkStopped");
    v43[8] = CFSTR("BatteryPowerResource");
    v43[9] = CFSTR("AWDLBringup");
    v43[10] = CFSTR("AWDLBringdown");
    v43[11] = CFSTR("AJDeferralTimer");
    v43[12] = CFSTR("MISEvent");
    v43[13] = CFSTR("SetNetworkCall");
    v42[0] = CFSTR("ResetTypeNone");
    v42[1] = CFSTR("ResetTypeModerate");
    v42[2] = CFSTR("ResetTypeFull");
    Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v6 = 0;
    v7 = (char *)(a1 + 740);
    do
    {
      v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, v7);
      if (v8)
      {
        v9 = v8;
        CFDictionarySetValue(Mutable, (const void *)v44[v6], v8);
        CFRelease(v9);
      }
      ++v6;
      v7 += 4;
    }
    while (v6 != 13);
    v10 = 0;
    v11 = (char *)a1 + 5676;
    do
    {
      v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, v11);
      if (v12)
      {
        v13 = v12;
        CFDictionarySetValue(Mutable, (const void *)v43[v10], v12);
        CFRelease(v13);
      }
      ++v10;
      v11 += 4;
    }
    while (v10 != 14);
    v14 = 0;
    v15 = (char *)a1 + 5652;
    do
    {
      v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, v15);
      if (v16)
      {
        v17 = v16;
        CFDictionarySetValue(Mutable, (const void *)v42[v14], v16);
        CFRelease(v17);
      }
      ++v14;
      v15 += 4;
    }
    while (v14 != 3);
    v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 759);
    if (v18)
    {
      v19 = v18;
      CFDictionarySetValue(Mutable, CFSTR("NetworkTransitionScan"), v18);
      CFRelease(v19);
    }
    v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 730);
    if (v20)
    {
      v21 = v20;
      CFDictionarySetValue(Mutable, CFSTR("AJNum5GhzOnlyNetworks"), v20);
      CFRelease(v21);
    }
    v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (char *)a1 + 5844);
    if (v22)
    {
      v23 = v22;
      CFDictionarySetValue(Mutable, CFSTR("AJNumDualBandNetworks"), v22);
      CFRelease(v23);
    }
    v24 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 731);
    if (v24)
    {
      v25 = v24;
      CFDictionarySetValue(Mutable, CFSTR("AJNum24GhzOnlyNetworks"), v24);
      CFRelease(v25);
    }
    v26 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 729);
    if (v26)
    {
      v27 = v26;
      CFDictionarySetValue(Mutable, CFSTR("AJ5GhzTriggerForBusy24GhzBand"), v26);
      CFRelease(v27);
    }
    v28 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 728);
    if (v28)
    {
      v29 = v28;
      CFDictionarySetValue(Mutable, CFSTR("AJ5GhzTriggerForHS20Networks"), v28);
      CFRelease(v29);
    }
    v30 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (char *)a1 + 5828);
    if (v30)
    {
      v31 = v30;
      CFDictionarySetValue(Mutable, CFSTR("AJ5GhzTriggerForLegacyHSNetworks"), v30);
      CFRelease(v31);
    }
    v32 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (char *)a1 + 5836);
    if (v32)
    {
      v33 = v32;
      CFDictionarySetValue(Mutable, CFSTR("AJ5GhzTriggerForNetworks"), v32);
      CFRelease(v33);
    }
    v34 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (char *)a1 + 5820);
    if (v34)
    {
      v35 = v34;
      CFDictionarySetValue(Mutable, CFSTR("AJ5GhzTriggerForHiddenNetworks"), v34);
      CFRelease(v35);
    }
    v36 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (char *)a1 + 6172);
    if (v36)
    {
      v37 = v36;
      CFDictionarySetValue(Mutable, CFSTR("AutoHotspotBTScanCount"), v36);
      CFRelease(v37);
    }
    v38 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 772);
    if (v38)
    {
      v39 = v38;
      CFDictionarySetValue(Mutable, CFSTR("AutoHotspotBTScanDuration"), v38);
      CFRelease(v39);
    }
    v40 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 862);
    if (v40)
    {
      v41 = v40;
      CFDictionarySetValue(Mutable, CFSTR("isADHSConnected"), v40);
      CFRelease(v41);
    }
    return Mutable;
  }
}

void sub_10013A94C(uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  void (*v4)(uint64_t, uint64_t, _QWORD, _QWORD);
  void *v5;

  if (a1)
  {
    *(_QWORD *)(a1 + 7224) = 0;
    v2 = (_BYTE *)(a1 + 7237);
    if (*(_BYTE *)(a1 + 7237))
    {
      v3 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "DPS/DNS Symptoms HUD: clearing display and stopping displayTimer");
      objc_autoreleasePoolPop(v3);
      *v2 = 0;
      dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 7216), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      if (MGGetBoolAnswer(CFSTR("InternalBuild")))
      {
        v4 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 4552);
        if (v4)
          v4(a1, 18, 0, *(_QWORD *)(a1 + 4560));
      }
    }
    if (*(_DWORD *)(a1 + 7232))
      sub_100047D88(*(_QWORD *)(a1 + 120));
  }
  else
  {
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: null manager.", "__WiFiDeviceManagerClearDpsHUD");
    objc_autoreleasePoolPop(v5);
  }
}

void sub_10013AA70(uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  void (*v4)(uint64_t, uint64_t, _QWORD, _QWORD);
  void *v5;

  if (a1)
  {
    v2 = (_BYTE *)(a1 + 7288);
    *(_QWORD *)(a1 + 7272) = 0;
    *(_QWORD *)(a1 + 7264) = 0;
    if (*(_BYTE *)(a1 + 7288))
    {
      v3 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "SlowWiFi HUD: clearing display and stopping displayTimer");
      objc_autoreleasePoolPop(v3);
      *v2 = 0;
      dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 7256), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      if (MGGetBoolAnswer(CFSTR("InternalBuild")))
      {
        v4 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 4552);
        if (v4)
          v4(a1, 17, 0, *(_QWORD *)(a1 + 4560));
      }
    }
  }
  else
  {
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: null manager.", "__WiFiDeviceManagerClearSlowWiFiHUD");
    objc_autoreleasePoolPop(v5);
  }
}

void sub_10013AB88(uint64_t a1)
{
  uint64_t v2;
  CFTypeRef *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  const void *v7;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v2 + 240))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v3 = (CFTypeRef *)(a1 + 32);
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v2 + 4728))(v2, *(_QWORD *)(*(_QWORD *)(v4 + 8) + 24), 0, 0, *(_QWORD *)(v2 + 4736));
    CFRelease(v3[1]);
    v5 = *v3;
  }
  else
  {
    CFRelease((CFTypeRef)v2);
    v6 = *(_QWORD **)(a1 + 32);
    v3 = (CFTypeRef *)(a1 + 32);
    v5 = v6;
  }
  v7 = *(const void **)(v5[1] + 24);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(*((_QWORD *)*v3 + 1) + 24) = 0;
  }
}

id sub_10013AC04(uint64_t a1, const void *a2, int a3)
{
  const void *v6;
  const void *v7;
  int v8;
  _BOOL4 v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  void *v14;
  void *v15;
  _BOOL8 v16;
  const __CFString *v17;
  _BOOL4 v18;
  unsigned int v19;
  const void *v20;
  const __CFString *v21;
  unsigned int v22;
  id v23;
  uint64_t v24;
  const void *v25;
  char v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  const void *v31;
  const __CFString *v32;
  _BOOL8 v33;
  int v34;
  int v35;
  _BYTE v36[4];
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = sub_10002BE64((uint64_t)a2, CFSTR("BSSID"));
  v7 = sub_10002B088(a2);
  v8 = sub_1000780A4(*(_QWORD *)(a1 + 64));
  v9 = sub_10002DAB4((uint64_t)a2);
  v10 = sub_10002A724(a1, a2);
  v11 = sub_1000C3F88((uint64_t)a2);
  v12 = sub_1000CC270((uint64_t)a2);
  v13 = v12;
  if (v8 && !v9 && v10 != 1 && (v11 == 1 || v12 == 2))
  {
    objc_msgSend(+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager"), "getAdaptiveRoamParams:ssid:", v6, v7);
    v26 = 1;
  }
  else
  {
    v35 = v12;
    v14 = objc_autoreleasePoolPush();
    v15 = (void *)qword_10026DD20;
    if (qword_10026DD20)
    {
      v16 = v9;
      v33 = v8 != 0;
      v17 = sub_10002B5A4(v10);
      v34 = v8;
      v18 = v9;
      v19 = v10;
      v20 = v7;
      v21 = v17;
      v32 = sub_100064D68(v11);
      v31 = v20;
      v10 = v19;
      v9 = v18;
      v8 = v34;
      objc_msgSend(v15, "WFLog:message:", 3, "%s: not enabling adaptive roaming on %@ (forceApply:%u deviceSupport:%u EAP:%u env:%@ networkOfInterestType:%@ LOIType:%@)", "__WiFiDeviceManagerGetAdaptiveRoamParams", v31, a3 != 0, v33, v16, v21, v32, sub_100064DE4(v35));
    }
    objc_autoreleasePoolPop(v14);
    if (a3)
    {
      v22 = v11;
      v23 = objc_alloc_init((Class)NSMutableDictionary);
      objc_msgSend(v23, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0), CFSTR("IO80211InterfaceAdaptiveRoamRSSITrigger"));
      v24 = *(_QWORD *)(a1 + 64);
      v25 = (const void *)sub_100025C3C(v24);
      sub_1000672C0(v24, v25, 532, 0, (uint64_t)v23);

      v11 = v22;
    }
    v26 = 0;
    v13 = v35;
  }
  v27 = v11;
  v28 = *(void **)(a1 + 7368);
  v29 = sub_100025C3C(*(_QWORD *)(a1 + 64));
  v36[0] = v26;
  v36[1] = a3 != 0;
  v36[2] = v8 != 0;
  v36[3] = v9;
  v37 = -1431655766;
  v38 = v10;
  v39 = v27;
  v40 = v13;
  return objc_msgSend(v28, "setRoamingARCriteria:forInterface:", v36, v29);
}

void sub_10013AE80(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  const void *v11;
  _QWORD block[7];
  char v13;

  v3 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v3 + 240) && *(_QWORD *)(v3 + 7072))
  {
    v5 = a2;
    v6 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: WFMeasure result: %@", "__WiFiDeviceManagerPerformThroughputMeasurement_block_invoke", a2);
    objc_autoreleasePoolPop(v6);
    CFRetain(*(CFTypeRef *)(a1 + 40));
    block[0] = _NSConcreteStackBlock;
    block[2] = sub_10013AFBC;
    block[3] = &unk_100231A98;
    v8 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v9 = *(NSObject **)(v7 + 240);
    block[1] = 3221225472;
    block[5] = v8;
    block[6] = v7;
    block[4] = v5;
    v13 = *(_BYTE *)(a1 + 48);
    dispatch_async(v9, block);
  }
  else
  {
    v10 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: null queue/measurement handle", "__WiFiDeviceManagerPerformThroughputMeasurement_block_invoke");
    objc_autoreleasePoolPop(v10);
    v11 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    }
  }
}

void sub_10013AFBC(uint64_t a1)
{
  _QWORD *v2;
  CFAbsoluteTime Current;
  CFDateRef v4;
  const __CFArray *v5;
  __CFArray *MutableCopy;
  const void *v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  CFNumberRef v12;
  CFNumberRef v13;
  _QWORD *v14;
  void (*v15)(_QWORD *, _QWORD, _QWORD);
  const void *v16;
  double valuePtr;

  v2 = *(_QWORD **)(a1 + 48);
  if (v2[30])
  {
    Current = CFAbsoluteTimeGetCurrent();
    v4 = CFDateCreate(kCFAllocatorDefault, Current);
    v5 = (const __CFArray *)sub_10002BE64(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), CFSTR("lastTputMeasurementResults"));
    if (v5)
    {
      MutableCopy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, v5);
      if (CFArrayGetCount(MutableCopy) >= 4)
        CFArrayRemoveValueAtIndex(MutableCopy, 0);
      if (!MutableCopy)
        goto LABEL_21;
    }
    else
    {
      MutableCopy = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (!MutableCopy)
      {
LABEL_21:
        sub_10002C478(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), CFSTR("lastTputMeasurementDate"), v4);
        v14 = *(_QWORD **)(a1 + 48);
        v15 = (void (*)(_QWORD *, _QWORD, _QWORD))v14[565];
        if (v15)
        {
          v15(v14, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), v14[566]);
          v14 = *(_QWORD **)(a1 + 48);
        }
        CFRelease(v14);
        if (v4)
          CFRelease(v4);
        v16 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
        if (v16)
        {
          CFRelease(v16);
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
        }

        return;
      }
    }
    if (objc_msgSend(*(id *)(a1 + 32), "downloadError"))
    {
      v8 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: throughput measurement completed for %@, errored out (%@)", "__WiFiDeviceManagerPerformThroughputMeasurement_block_invoke_2", sub_10002B088(*(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)), objc_msgSend(*(id *)(a1 + 32), "downloadError"));
      objc_autoreleasePoolPop(v8);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "backhaulThroughput");
      v10 = v9;
      valuePtr = v9;
      v11 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: throughput measurement completed for %@, result %f Mbps", "__WiFiDeviceManagerPerformThroughputMeasurement_block_invoke_2", sub_10002B088(*(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)), *(_QWORD *)&v10, *(_QWORD *)&valuePtr);
      objc_autoreleasePoolPop(v11);
      if (*(_BYTE *)(a1 + 56))
        sub_10013B264(*(_QWORD *)(a1 + 48), (int)v10);
      v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
      if (v12)
      {
        v13 = v12;
        CFArrayAppendValue(MutableCopy, v12);
        sub_10002C478(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), CFSTR("lastTputMeasurementResults"), MutableCopy);
        CFRelease(v13);
      }
    }
    CFRelease(MutableCopy);
    goto LABEL_21;
  }
  CFRelease(v2);
  v7 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_10013B264(uint64_t a1, int a2)
{
  CFNumberRef v3;
  uint64_t v4;
  const void *v5;
  int valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 64);
    v5 = (const void *)sub_100025C3C(v4);
    sub_1000672C0(v4, v5, 536, 0, (uint64_t)v3);
  }
  if (v3)
    CFRelease(v3);
}

void sub_10013B2DC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  const void *v6;
  const void *v8;
  id v9;
  void *v10;
  NSObject *v11;
  const void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  void *v17;
  char v18;
  id v19;
  void *v20;
  NSObject *v21;
  const void *v22;
  uint64_t v23;
  const void *v24;
  void *v25;
  void *v26;
  const void *v27;
  void *v28;
  _QWORD v30[6];
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _QWORD block[6];
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[128];

  if (a3)
  {
    v4 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: error (%@) fetching network: %@", "__WiFiDeviceManagerFetchCurrentNetworkFrom3Bars_block_invoke", a3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
    objc_autoreleasePoolPop(v4);
    goto LABEL_47;
  }
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v37 = 0;
  v38 = &v37;
  v39 = 0x2020000000;
  v40 = 0;
  if (v5)
  {
    if (v6)
    {
      if (objc_msgSend(objc_msgSend(a2, "results"), "count"))
      {
        v8 = sub_10002BE64((uint64_t)v6, CFSTR("BSSID"));
        if ((unint64_t)objc_msgSend(objc_msgSend(a2, "results"), "count") < 2)
          v9 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "results"), "allValues"), "firstObject");
        else
          v9 = objc_msgSend(objc_msgSend(a2, "results"), "objectForKey:", v8);
        v10 = v9;
        if (v9)
        {
          v11 = *(NSObject **)(v5 + 240);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10013BA64;
          block[3] = &unk_10022F160;
          block[4] = &v37;
          block[5] = v5;
          dispatch_sync(v11, block);
          v12 = (const void *)v38[3];
          if (v12)
          {
            if (CFEqual(v6, v12))
            {
              if (objc_msgSend(v10, "attributes"))
              {
                v34 = 0u;
                v35 = 0u;
                v32 = 0u;
                v33 = 0u;
                v13 = objc_msgSend(v10, "attributes");
                v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v32, v41, 16);
                if (v14)
                {
                  v28 = v10;
                  v15 = *(_QWORD *)v33;
                  do
                  {
                    for (i = 0; i != v14; i = (char *)i + 1)
                    {
                      if (*(_QWORD *)v33 != v15)
                        objc_enumerationMutation(v13);
                      switch(objc_msgSend(*(id *)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i), "intValue"))
                      {
                        case 1u:
                          sub_10002C478(v38[3], CFSTR("WiFiNetworkAttributeIsPotentiallyCaptive"), kCFBooleanTrue);
                          v17 = objc_autoreleasePoolPush();
                          if (qword_10026DD20)
                            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: '%@' isPotentiallyCaptive", "__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork", sub_10002B088((const void *)v38[3]));
                          goto LABEL_33;
                        case 2u:
                          sub_10002C478(v38[3], CFSTR("WiFiNetworkAttributeIsSuspicious"), kCFBooleanTrue);
                          v17 = objc_autoreleasePoolPush();
                          if (qword_10026DD20)
                            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: '%@' isSuspicious", "__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork", sub_10002B088((const void *)v38[3]));
                          goto LABEL_33;
                        case 4u:
                          sub_10002C478(v38[3], CFSTR("WiFiNetworkAttributeIsTCPGood"), kCFBooleanTrue);
                          v17 = objc_autoreleasePoolPush();
                          if (qword_10026DD20)
                            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: '%@' isTCPGood", "__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork", sub_10002B088((const void *)v38[3]));
                          goto LABEL_33;
                        case 5u:
                          sub_10002C478(v38[3], CFSTR("WiFiNetworkAttributeIsPotentiallyMoving"), kCFBooleanTrue);
                          v17 = objc_autoreleasePoolPush();
                          if (qword_10026DD20)
                            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: '%@' isPotentiallyMoving", "__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork", sub_10002B088((const void *)v38[3]));
                          goto LABEL_33;
                        case 6u:
                          sub_10002C478(v38[3], CFSTR("WiFiNetworkAttributeIsPublic"), kCFBooleanTrue);
                          v17 = objc_autoreleasePoolPush();
                          if (qword_10026DD20)
                            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: '%@' isPublic", "__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork", sub_10002B088((const void *)v38[3]));
                          goto LABEL_33;
                        case 7u:
                          sub_10002C478(v38[3], CFSTR("WiFiNetworkAttributeIsLowQuality"), kCFBooleanTrue);
                          v17 = objc_autoreleasePoolPush();
                          if (qword_10026DD20)
                            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: '%@' isLowQuality", "__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork", sub_10002B088((const void *)v38[3]));
LABEL_33:
                          objc_autoreleasePoolPop(v17);
                          break;
                        default:
                          continue;
                      }
                    }
                    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v32, v41, 16);
                  }
                  while (v14);
                  v18 = 1;
                  v10 = v28;
                }
                else
                {
                  v18 = 1;
                }
              }
              else
              {
                v18 = 0;
              }
              v19 = objc_msgSend(v10, "popularityScore");
              v20 = v19;
              if (v19)
              {
                sub_10002B698(v38[3], CFSTR("WiFiNetworkAttributePopularityScore"), (uint64_t)objc_msgSend(v19, "score"));
                if ((unint64_t)objc_msgSend(v20, "score") >= 0x3E8)
                  sub_10002C478(v38[3], CFSTR("WiFiNetworkAttributeHighPopularity"), kCFBooleanTrue);
                v18 = 1;
              }
              v21 = *(NSObject **)(v5 + 240);
              v30[0] = _NSConcreteStackBlock;
              v30[1] = 3221225472;
              v30[2] = sub_10013BAA8;
              v30[3] = &unk_100231B10;
              v31 = v18;
              v30[4] = &v37;
              v30[5] = v5;
              dispatch_sync(v21, v30);
              goto LABEL_44;
            }
            v25 = objc_autoreleasePoolPush();
            v26 = (void *)qword_10026DD20;
            if (qword_10026DD20)
            {
              v27 = sub_10002B088(v6);
              objc_msgSend(v26, "WFLog:message:", 4, "%s: no longer connected to %@ (connected to %@)", "__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork", v27, sub_10002B088((const void *)v38[3]));
            }
          }
          else
          {
            v25 = objc_autoreleasePoolPush();
            if (qword_10026DD20)
              objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: currentNetwork is null", "__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork");
          }
        }
        else
        {
          v25 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: fetchedNetwork is null", "__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork");
        }
      }
      else
      {
        v25 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: no results from 3bars for network %@", "__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork", v6);
      }
    }
    else
    {
      v25 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: network is null", "__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork");
    }
  }
  else
  {
    v25 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: manager is null", "__WiFiDeviceManagerIngest3BarsFetchForCurrentNetwork");
  }
  objc_autoreleasePoolPop(v25);
LABEL_44:
  v22 = (const void *)v38[3];
  if (v22)
  {
    CFRelease(v22);
    v38[3] = 0;
  }
  _Block_object_dispose(&v37, 8);
LABEL_47:
  v23 = a1;
  v24 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v24)
  {
    CFRelease(v24);
    v23 = a1;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }

}

void sub_10013BA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

const void *sub_10013BA64(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *result;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 64);
  v3 = (const void *)sub_100025C3C(v2);
  result = sub_10002BF8C(v2, v3);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_10013BAA8(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, _QWORD);
  uint64_t v4;
  const void *v5;
  const __CFArray *v6;
  const __CFArray *v7;
  void *v8;
  const void *v9;
  const __CFString *v10;
  const __CFString *v11;
  uint64_t v12;
  void (*v13)(uint64_t, const __CFArray *, _QWORD);
  void *v14;
  void *v15;
  CFOptionFlags responseFlags;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD *)(a1 + 40);
    v3 = *(void (**)(uint64_t, _QWORD, _QWORD))(v2 + 4520);
    if (v3)
      v3(v2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(_QWORD *)(v2 + 4528));
  }
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (MGGetBoolAnswer(CFSTR("InternalBuild")))
  {
    if (v4)
    {
      if (v5)
      {
        v6 = sub_10002B170(v4, v5, 1);
        if (v6)
        {
          v7 = v6;
          if (!sub_1000CC884((uint64_t)v6))
          {
            if (*(unsigned __int16 *)(v4 + 6600) <= 2u)
            {
              v14 = objc_autoreleasePoolPush();
              if (qword_10026DD20)
                objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: network is in top 2 of usage", "__WiFiDeviceManagerPromptToChangeSSIDHarvestStatus");
            }
            else if (sub_100077738(*(_QWORD *)(v4 + 64)) == 1)
            {
              if (sub_1000C3F88((uint64_t)v7) == 2 && sub_1000CBE60((uint64_t)v7) == 2)
              {
                v8 = objc_autoreleasePoolPush();
                if (qword_10026DD20)
                  objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: prompting for %@ (state %d)", "__WiFiDeviceManagerPromptToChangeSSIDHarvestStatus", v5, sub_1000CC884((uint64_t)v5));
                objc_autoreleasePoolPop(v8);
                v9 = sub_10002B088(v5);
                v10 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%@ “%@”?"), CFSTR("Allow Collection of "), v9);
                v11 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%@"), CFSTR("[Internal Only]\nThe WiFi team is collecting network names to help validate feature work."));
                responseFlags = 0;
                CFUserNotificationDisplayAlert(0.0, 0, 0, 0, 0, v10, v11, CFSTR("Allow"), CFSTR("Don't Allow"), 0, &responseFlags);
                if ((responseFlags & 3) != 0)
                  v12 = 1;
                else
                  v12 = 2;
                sub_10002B698((uint64_t)v7, CFSTR("kWiFiNetworkSSIDHarvestStatusKey"), v12);
                v13 = *(void (**)(uint64_t, const __CFArray *, _QWORD))(v4 + 4520);
                if (v13)
                  v13(v4, v7, *(_QWORD *)(v4 + 4528));
                if (v10)
                  CFRelease(v10);
                if (v11)
                  CFRelease(v11);
                goto LABEL_24;
              }
              v14 = objc_autoreleasePoolPush();
              if (qword_10026DD20)
                objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: network NOI type is home or work", "__WiFiDeviceManagerPromptToChangeSSIDHarvestStatus");
            }
            else
            {
              v14 = objc_autoreleasePoolPush();
              if (qword_10026DD20)
                objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: association was not manual", "__WiFiDeviceManagerPromptToChangeSSIDHarvestStatus");
            }
            objc_autoreleasePoolPop(v14);
          }
LABEL_24:
          CFRelease(v7);
          return;
        }
        v15 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: knownNetwork is null", "__WiFiDeviceManagerPromptToChangeSSIDHarvestStatus");
      }
      else
      {
        v15 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: network is null", "__WiFiDeviceManagerPromptToChangeSSIDHarvestStatus");
      }
    }
    else
    {
      v15 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: manager is null", "__WiFiDeviceManagerPromptToChangeSSIDHarvestStatus");
    }
    objc_autoreleasePoolPop(v15);
  }
}

void sub_10013BE14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[7];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  id v10;

  v5 = 0;
  v6 = &v5;
  v7 = 0x3052000000;
  v8 = sub_10002FAA8;
  v9 = sub_10002F9A4;
  v10 = (id)0xAAAAAAAAAAAAAAAALL;
  v10 = objc_alloc_init((Class)CWFLocalDeviceDiscovery);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10013BEF0;
  v4[3] = &unk_100231B60;
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4[5] = &v5;
  v4[6] = v2;
  v4[4] = v3;
  objc_msgSend((id)v6[5], "setHandler:", v4);
  objc_msgSend((id)v6[5], "discover");
  _Block_object_dispose(&v5, 8);
}

void sub_10013BED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10013BEF0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD block[9];

  v3 = a1[6];
  v4 = *(NSObject **)(v3 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10013BF58;
  block[3] = &unk_100231B38;
  block[8] = v3;
  v5 = a1[5];
  block[4] = a1[4];
  block[5] = a2;
  block[6] = a3;
  block[7] = v5;
  dispatch_async(v4, block);
}

void sub_10013BF58(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  CFDictionaryRef *v8;
  id v9;
  id v10;
  _BOOL4 v11;
  id v12;
  id v13;
  void *v14;
  char v15;
  void *v16;
  const char *v17;
  NSNumber *v18;
  NSDate *v19;
  void *v20;
  _WORD *v21;
  id v22;
  id v23;
  uint64_t v24;
  void *i;
  void *v26;
  NSNumber *v27;
  NSNumber *v28;
  void *v29;
  uint64_t v30;
  const void *v31;
  void *v32;
  void *v33;
  void *context;
  uint64_t v35;
  id cf;
  _QWORD v37[5];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD v42[6];
  _QWORD v43[16];
  _QWORD v44[4];
  _QWORD v45[4];

  v2 = *(_QWORD **)(a1 + 64);
  if (v2[30])
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: valid=%@", "__WiFiDeviceManagerUpdateLocalNetworkDiscoveredDevices_block_invoke_3", *(_QWORD *)(a1 + 40));
    objc_autoreleasePoolPop(v3);
    v4 = *(_QWORD *)(a1 + 64);
    v6 = *(void **)(a1 + 40);
    v5 = *(void **)(a1 + 48);
    v35 = a1;
    v7 = *(void **)(a1 + 32);
    context = objc_autoreleasePoolPush();
    v8 = sub_100122B08(v4);
    if ((objc_msgSend(-[CFDictionaryRef networkName](v8, "networkName"), "isEqualToString:", objc_msgSend(v7, "networkName")) & 1) != 0)
    {
      if (objc_msgSend(v7, "discoveredDevices")
        && ((v9 = objc_msgSend(v7, "discoveredDevices"),
             objc_msgSend(v9, "objectForKeyedSubscript:", CWFNetworkProfilePropertyDiscoveredDevicesCountKey))
         || (v10 = objc_msgSend(v7, "discoveredDevices"),
             objc_msgSend(v10, "objectForKeyedSubscript:", CWFNetworkProfilePropertyDiscoveredDevicesNamesKey)))
        && !objc_msgSend(v6, "count"))
      {
        v33 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: profile='%@' contains discovered devices (%@), disregarding empty update", "__WiFiDeviceManagerUpdateNetworkProfileWithDiscoveredDevices", v7, objc_msgSend(v7, "discoveredDevices"));
        objc_autoreleasePoolPop(v33);
      }
      else
      {
        v11 = objc_msgSend(v7, "publicAttribute") == (id)1
           || (objc_msgSend(v7, "isOpen") & 1) != 0
           || (objc_msgSend(v7, "isPublicAirPlayNetwork") & 1) != 0
           || (objc_msgSend(v7, "isPasspoint") & 1) != 0
           || objc_msgSend(v7, "addReason") == (id)10
           || objc_msgSend(v7, "addReason") == (id)17
           || objc_msgSend(v7, "addReason") == (id)16;
        v12 = objc_alloc_init((Class)NSMutableArray);
        v43[0] = 0;
        v43[1] = v43;
        v43[2] = 0x2020000000;
        v43[3] = 0;
        v42[0] = _NSConcreteStackBlock;
        v42[1] = 3221225472;
        v42[2] = sub_10013C800;
        v42[3] = &unk_100231B88;
        v42[4] = v12;
        v42[5] = v43;
        objc_msgSend(v6, "enumerateObjectsUsingBlock:", v42);
        if (objc_msgSend(v7, "discoveredDevices"))
          v13 = objc_msgSend(objc_msgSend(v7, "discoveredDevices"), "mutableCopy");
        else
          v13 = objc_alloc_init((Class)NSMutableDictionary);
        v14 = v13;
        if (objc_msgSend(v12, "count"))
          v15 = v11;
        else
          v15 = 1;
        if ((v15 & 1) != 0)
        {
          v16 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
          {
            if (v11)
              v17 = "%s: skipping device names for sensitive network profile='%@'";
            else
              v17 = "%s: no device names discovered for profile='%@'";
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, v17, "__WiFiDeviceManagerUpdateNetworkProfileWithDiscoveredDevices", v7);
          }
          objc_autoreleasePoolPop(v16);
        }
        else
        {
          objc_msgSend(v14, "setObject:forKey:", v12, CWFNetworkProfilePropertyDiscoveredDevicesNamesKey);
        }
        if (objc_msgSend(v6, "count"))
        {
          v18 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v6, "count"));
          objc_msgSend(v14, "setObject:forKey:", v18, CWFNetworkProfilePropertyDiscoveredDevicesCountKey);
        }
        v19 = +[NSDate date](NSDate, "date");
        objc_msgSend(v14, "setObject:forKey:", v19, CWFNetworkProfilePropertyDiscoveredDevicesTimestampKey);
        objc_msgSend(v7, "setDiscoveredDevices:", v14);
        v20 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: count='%lu' devices='%@' profile='%@'", "__WiFiDeviceManagerUpdateNetworkProfileWithDiscoveredDevices", objc_msgSend(v6, "count"), v12, v7);
        objc_autoreleasePoolPop(v20);
        v21 = sub_1000CCB10(v7, 0);
        (*(void (**)(uint64_t, _WORD *, _QWORD))(v4 + 4520))(v4, v21, *(_QWORD *)(v4 + 4528));
        if (v12)
          CFRelease(v12);
        if (v14)
          CFRelease(v14);
        if (v21)
          CFRelease(v21);
        if (v8)
          CFRelease(v8);
        _Block_object_dispose(v43, 8);
      }
      if (&_AnalyticsSendEventLazy)
      {
        cf = objc_alloc_init((Class)NSMutableDictionary);
        if (v5)
        {
          v44[0] = &off_100253278;
          v44[1] = &off_100253260;
          v45[0] = &off_1002532C0;
          v45[1] = &off_1002532C0;
          v44[2] = &off_1002532D8;
          v44[3] = &off_1002532F0;
          v45[2] = &off_1002532C0;
          v45[3] = &off_1002532C0;
          v22 = -[NSDictionary mutableCopy](+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v45, v44, 4), "mutableCopy");
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          v23 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
          if (v23)
          {
            v24 = *(_QWORD *)v39;
            do
            {
              for (i = 0; i != v23; i = (char *)i + 1)
              {
                if (*(_QWORD *)v39 != v24)
                  objc_enumerationMutation(v5);
                v26 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)i);
                if (objc_msgSend(v22, "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v26, "reason"))))
                {
                  objc_msgSend(v22, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (char *)objc_msgSend(objc_msgSend(v22, "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v26, "reason"))), "integerValue")+ 1), +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v26, "reason")));
                }
              }
              v23 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
            }
            while (v23);
          }
          objc_msgSend(cf, "setObject:forKey:", objc_msgSend(v22, "objectForKeyedSubscript:", &off_100253278), CFSTR("filteredServiceName"));
          objc_msgSend(cf, "setObject:forKey:", objc_msgSend(v22, "objectForKeyedSubscript:", &off_1002532F0), CFSTR("filteredLexical"));
          objc_msgSend(cf, "setObject:forKey:", objc_msgSend(v22, "objectForKeyedSubscript:", &off_1002532D8), CFSTR("filteredGenerated"));
          objc_msgSend(cf, "setObject:forKey:", objc_msgSend(v22, "objectForKeyedSubscript:", &off_100253260), CFSTR("filteredCharacters"));
          if (v22)
            CFRelease(v22);
        }
        if (v6)
          v27 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v6, "count"));
        else
          v27 = (NSNumber *)&off_1002532C0;
        objc_msgSend(cf, "setObject:forKey:", v27, CFSTR("totalCount"));
        if (v5)
          v28 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v5, "count"));
        else
          v28 = (NSNumber *)&off_1002532C0;
        objc_msgSend(cf, "setObject:forKey:", v28, CFSTR("filteredCount"));
        objc_msgSend(cf, "setObject:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v7, "isOpen")), CFSTR("open"));
        objc_msgSend(cf, "setObject:forKey:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v7, "publicAttribute")), CFSTR("public"));
        v29 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: sending metric='%@'", "__WiFiDeviceManagerUpdateNetworkProfileWithDiscoveredDevices", cf);
        objc_autoreleasePoolPop(v29);
        v37[0] = _NSConcreteStackBlock;
        v37[1] = 3221225472;
        v37[2] = sub_10013C864;
        v37[3] = &unk_100230830;
        v37[4] = cf;
        AnalyticsSendEventLazy(CFSTR("com.apple.wifi.local_network_discovery"), v37);
        if (cf)
          CFRelease(cf);
      }
    }
    else
    {
      v32 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: disregarding update, profile='%@' expected='%@'", "__WiFiDeviceManagerUpdateNetworkProfileWithDiscoveredDevices", v8, v7);
      objc_autoreleasePoolPop(v32);
    }
    objc_autoreleasePoolPop(context);
    v30 = v35;
    v31 = *(const void **)(*(_QWORD *)(*(_QWORD *)(v35 + 56) + 8) + 40);
    if (v31)
    {
      CFRelease(v31);
      v30 = v35;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 56) + 8) + 40) = 0;
    }
    CFRelease(*(CFTypeRef *)(v30 + 64));
    CFRelease(*(CFTypeRef *)(v35 + 32));
  }
  else
  {
    CFRelease(v2);
    CFRelease(*(CFTypeRef *)(a1 + 32));
  }
}

void sub_10013C7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

id sub_10013C800(uint64_t a1, void *a2, _BYTE *a3)
{
  id result;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == 10)
    *a3 = 1;
  result = objc_msgSend(*(id *)(a1 + 32), "addObject:", objc_msgSend(a2, "name"));
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  return result;
}

uint64_t sub_10013C864(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_10013C86C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;

  if (a3)
  {
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Couldn't send event (%@), error(%@) ", "__WiFiDeviceManagerSendCarConnectionTime_block_invoke", *(_QWORD *)(a1 + 32), a3);
    objc_autoreleasePoolPop(v5);
  }
}

void sub_10013C8E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;

  if (a3)
  {
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Couldn't send event (%@), error(%@) ", "__WiFiDeviceManagerSendCarConnectionTime_block_invoke_2", *(_QWORD *)(a1 + 32), a3);
    objc_autoreleasePoolPop(v5);
  }
}

void sub_10013C95C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;

  if (a3)
  {
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Couldn't send event (%@), error(%@) ", "__WiFiDeviceManagerSendCarConnectionTime_block_invoke_3", *(_QWORD *)(a1 + 32), a3);
    objc_autoreleasePoolPop(v5);
  }
}

double sub_10013C9D4(uint64_t a1, const void *a2, const void *a3, const void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  void *v12;
  const __CFString *v13;
  NSString *v14;
  NSObject *v15;
  CFAbsoluteTime Current;
  CFAbsoluteTime v17;
  uint64_t v18;
  const void *v19;
  void *v20;
  const void *v21;
  const __CFNumber *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  const __CFArray *v26;
  double result;
  CFTypeRef v28;
  int v29;
  _OWORD *v30;
  void *v31;
  const void *v32;
  void *v33;
  _QWORD block[8];
  int v36;
  unsigned __int16 valuePtr;
  uint8_t buf[4];
  const char *v39;
  CFRange v40;

  v11 = sub_100070AFC(*(_QWORD *)(a6 + 64));
  objc_msgSend(+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"), "associationDoneWithNetwork:error:interfaceName:", a3, a5, a2);
  v12 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
  {
    v13 = sub_100031FD0(*(_DWORD *)(a6 + 3280));
    v14 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s"), -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("{%@*} %@"), CFSTR("AUTOJOIN, ASSOC"), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Auto join association completed (%d) with current state: %@, network: %@"), a5, v13, sub_10002B088(a3))), "UTF8String"));
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v39 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("[WiFiPolicy] %s"), -[NSString UTF8String](v14, "UTF8String")), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    }
  }
  objc_autoreleasePoolPop(v12);
  if ((_DWORD)a5)
  {
    sub_1001147D4(a6, a3, 0);
  }
  else
  {
    if (sub_10002DAB4((uint64_t)a3))
      *(_BYTE *)(a6 + 3411) = 1;
    sub_100125A48(a6, a3, 0);
    if (a3)
    {
      if (sub_10003145C((uint64_t)a3) || sub_1000C433C((const __CFDictionary *)a3))
      {
        *(CFAbsoluteTime *)(a6 + 712) = CFAbsoluteTimeGetCurrent();
        Current = CFAbsoluteTimeGetCurrent();
        *(CFAbsoluteTime *)(a6 + 960) = Current;
        v17 = (Current - *(double *)(a6 + 952)) * 1000.0;
        v18 = v17;
        *(_DWORD *)buf = v17;
        v19 = (const void *)sub_100025C3C(*(_QWORD *)(a6 + 64));
        v20 = sub_10002A21C(a6, v19, 1);
        LODWORD(v39) = 0;
        if (v20)
        {
          v21 = v20;
          v22 = (const __CFNumber *)sub_1000316E0((uint64_t)v20);
          LODWORD(v23) = sub_10003153C((uint64_t)v21);
          if (v22)
          {
            valuePtr = -21846;
            CFNumberGetValue(v22, kCFNumberSInt16Type, &valuePtr);
            LODWORD(v22) = valuePtr;
            LOWORD(v39) = valuePtr;
          }
          if ((_DWORD)v23)
            WORD1(v39) = v23;
          CFRelease(v21);
          v23 = (unsigned __int16)v23;
        }
        else
        {
          v23 = 0;
          LODWORD(v22) = 0;
        }
        v31 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: time4WayHSTaken %u ms, channel %u, band %u", "__WiFiDeviceManagerSubmitInfraConnectionMetrics", v18, v22, v23);
        objc_autoreleasePoolPop(v31);
        sub_1000627BC((unsigned int *)buf);
      }
      if (sub_10000BE8C((uint64_t)a3)
        && (sub_1000CA53C((uint64_t)a3) && (_os_feature_enabled_impl("WiFiManager", "LMTPCFor24GHzCarPlay") & 1) != 0
         || !sub_1000CA53C((uint64_t)a3) && _os_feature_enabled_impl("WiFiManager", "LMTPCFor5GHzCarPlay")))
      {
        v32 = (const void *)sub_100025C3C(a1);
        sub_1000672C0(a1, v32, 513, 0, (uint64_t)kCFBooleanTrue);
        v33 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Enabled LMTPC for CarPlay", "__WiFiDeviceManagerAssociationCallback");
        objc_autoreleasePoolPop(v33);
      }
    }
  }
  if (*(_QWORD *)(a6 + 3920))
  {
    if (*(_QWORD *)(a6 + 240))
    {
      if (a2)
        CFRetain(a2);
      if (a3)
        CFRetain(a3);
      if (a4)
        CFRetain(a4);
      CFRetain((CFTypeRef)a6);
      v15 = *(NSObject **)(a6 + 240);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10013D01C;
      block[3] = &unk_1002315D0;
      block[4] = a6;
      block[5] = a2;
      block[6] = a3;
      block[7] = a4;
      v36 = a5;
      dispatch_async(v15, block);
    }
    else
    {
      v24 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: null queue.", "__WiFiDeviceManagerAssociationCallback");
      objc_autoreleasePoolPop(v24);
    }
  }
  if (v11 == *(_QWORD *)(a6 + 3312))
  {
    if ((_DWORD)a5)
    {
      if (*(_BYTE *)(a6 + 1200) == 1)
        sub_1000285E4(a6, 59);
    }
    else
    {
      *(_QWORD *)(a6 + 1184) = sub_10002A21C(a6, a2, 1);
    }
    v28 = *(CFTypeRef *)(a6 + 1184);
    if (a3 && !v28)
    {
      v28 = CFRetain(a3);
      *(_QWORD *)(a6 + 1184) = v28;
    }
    *(_QWORD *)(a6 + 1192) = a4;
    *(_DWORD *)(a6 + 1176) = a5;
    v29 = *(_DWORD *)(a6 + 3280);
    if (v29 == 15 || v29 == 12)
    {
      sub_1000F49C8(a6);
      v28 = *(CFTypeRef *)(a6 + 1184);
    }
    v30 = (_OWORD *)(a6 + 1176);
    if (v28)
      CFRelease(v28);
    result = 0.0;
    *v30 = 0u;
    v30[1] = 0u;
  }
  else
  {
    v25 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Ignoring old request.  CurrentCommand=%lld PendingCommand=%lld", v11, *(_QWORD *)(a6 + 3312));
    objc_autoreleasePoolPop(v25);
    if (a3)
    {
      v26 = *(const __CFArray **)(a6 + 3528);
      if (v26)
      {
        v40.length = CFArrayGetCount(*(CFArrayRef *)(a6 + 3528));
        v40.location = 0;
        if (CFArrayGetFirstIndexOfValue(v26, v40, a3) == -1 || sub_10002DAB4((uint64_t)a3) && !sub_100070734(a1))
          sub_1000F7F48(a6, a2, 1012, "__WiFiDeviceManagerAssociationCallback", 17389);
      }
    }
    if (_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
      sub_100132420(a6, (uint64_t)a3, (int)a5, CWFManagerErrorDomain, (uint64_t)CFSTR("Stale assoc command"));
  }
  return result;
}

void sub_10013CFBC(uint64_t a1, void *a2)
{
  if (a2)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 7368), "setJoinEvent:withReason:lastDisconnectReason:lastJoinFailure:andNetworkDetails:forInterface:", 1, *(_QWORD *)(a1 + 40), 0, 0, a2, sub_100025C3C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64)));

  }
}

void sub_10013D01C(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 240))
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v2 + 3920))(v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned int *)(a1 + 64), *(_QWORD *)(v2 + 3928));
    v2 = *(_QWORD *)(a1 + 32);
  }
  CFRelease((CFTypeRef)v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 48);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 56);
  if (v5)
    CFRelease(v5);
}

void sub_10013D090(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  void *v10;
  const __CFString *v11;
  const __CFString *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;

  v9 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: error %d reqInfo %@", "__WiFiDeviceManagerUserForcedAssociationCallback", a5, a4);
  objc_autoreleasePoolPop(v9);
  v10 = objc_autoreleasePoolPush();
  if (a1)
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: enabling device manager", "__WiFiDeviceManagerUserForcedAssociationCallback");
    objc_autoreleasePoolPop(v10);
    sub_1000FB2E0(a1);
    if (a3 && *(_QWORD *)(a1 + 6240))
    {
      if (!(_DWORD)a5)
      {
        v11 = (const __CFString *)sub_10002B088(a3);
        v12 = (const __CFString *)sub_10002B088(*(const void **)(a1 + 6240));
        if (CFStringCompare(v11, v12, 0) == kCFCompareEqualTo)
        {
          v18 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: finished forced association successfully", "__WiFiDeviceManagerUserForcedAssociationCallback");
          objc_autoreleasePoolPop(v18);
          v14 = (_QWORD *)a1;
          v15 = (uint64_t)a3;
          v17 = 0;
          goto LABEL_17;
        }
      }
      v13 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: failed forced association", "__WiFiDeviceManagerUserForcedAssociationCallback");
      objc_autoreleasePoolPop(v13);
      v14 = (_QWORD *)a1;
      v15 = (uint64_t)a3;
    }
    else
    {
      v16 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: network is NULL", "__WiFiDeviceManagerUserForcedAssociationCallback");
      objc_autoreleasePoolPop(v16);
      v14 = (_QWORD *)a1;
      v15 = 0;
    }
    v17 = 2;
LABEL_17:
    sub_100116E5C(v14, v15, v17);
    return;
  }
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: manager is NULL", "__WiFiDeviceManagerUserForcedAssociationCallback");
  objc_autoreleasePoolPop(v10);
}

void sub_10013D26C(uint64_t a1, uint64_t a2)
{
  int v2;
  const void *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  _QWORD block[5];
  int v10;

  v2 = a2;
  v4 = (const void *)MRMediaRemoteCopyPlaybackStateDescription(a2);
  v5 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: state is %@", "__WiFiDeviceManagerNowPlayingStateDidChange_block_invoke", v4);
  objc_autoreleasePoolPop(v5);
  if (v4)
    CFRelease(v4);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(NSObject **)(v6 + 240);
  if (v7)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10013D390;
    block[3] = &unk_100230B10;
    block[4] = v6;
    v10 = v2;
    dispatch_async(v7, block);
  }
  else
  {
    v8 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: null queue.", "__WiFiDeviceManagerNowPlayingStateDidChange_block_invoke");
    objc_autoreleasePoolPop(v8);
    CFRelease(*(CFTypeRef *)(a1 + 32));
  }
}

void sub_10013D390(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v2 + 240))
    goto LABEL_12;
  if (*(_DWORD *)(a1 + 40) == 1)
  {
    *(_BYTE *)(v2 + 3410) = 1;
    -[WiFiUserInteractionMonitor updateIsMediaPlaying:](+[WiFiUserInteractionMonitor sharedInstance](WiFiUserInteractionMonitor, "sharedInstance"), "updateIsMediaPlaying:", 1);
  }
  else
  {
    *(_BYTE *)(v2 + 3410) = 0;
    -[WiFiUserInteractionMonitor updateIsMediaPlaying:](+[WiFiUserInteractionMonitor sharedInstance](WiFiUserInteractionMonitor, "sharedInstance"), "updateIsMediaPlaying:", 0);
    v3 = *(_QWORD *)(a1 + 32);
    if (*(_BYTE *)(v3 + 6632))
    {
LABEL_7:
      if (*(_BYTE *)(v3 + 433))
      {
        sub_100024EE4(v3, 3);
        v3 = *(_QWORD *)(a1 + 32);
      }
      goto LABEL_9;
    }
    v4 = _os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin");
    v5 = *(_QWORD *)(a1 + 32);
    if (v4)
      sub_1000285E4(v5, 0x1BuLL);
    else
      sub_1000FA0A0(v5, 2);
  }
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    goto LABEL_7;
LABEL_9:
  if (*(_QWORD *)(v3 + 7368))
  {
    objc_msgSend(*(id *)(v3 + 7368), "setMediaState:", *(_BYTE *)(v3 + 3410) != 0);
    v3 = *(_QWORD *)(a1 + 32);
  }
  sub_1000FA884(v3, 0);
  v2 = *(_QWORD *)(a1 + 32);
LABEL_12:
  CFRelease((CFTypeRef)v2);
}

void sub_10013D488(CFArrayRef *a1, const void *a2)
{
  CFIndex v4;
  const void *ValueAtIndex;
  CFIndex v6;
  CFIndex v7;

  if (CFArrayGetCount(a1[441]) >= 1)
  {
    v4 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1[441], v4);
      if (CFEqual(a2, ValueAtIndex))
        goto LABEL_14;
    }
    while (CFArrayGetCount(a1[441]) > ++v4);
  }
  if (CFArrayGetCount(a1[442]) >= 1)
  {
    v6 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1[442], v6);
      if (CFEqual(a2, ValueAtIndex))
        goto LABEL_14;
    }
    while (CFArrayGetCount(a1[442]) > ++v6);
  }
  if (CFArrayGetCount(a1[455]) >= 1)
  {
    v7 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1[455], v7);
      if (CFEqual(a2, ValueAtIndex))
        break;
      if (CFArrayGetCount(a1[455]) <= ++v7)
        return;
    }
LABEL_14:
    sub_10002B290((uint64_t)a2, (uint64_t)ValueAtIndex);
  }
}

uint64_t sub_10013D5A0(uint64_t a1)
{
  void *v2;
  void *v3;
  double Current;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  void *v11;
  const void *v13;
  void *v14;
  const void *v15;
  void *v16;
  uint64_t v17;

  v2 = objc_autoreleasePoolPush();
  if (!a1)
  {
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: manager ref is null", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    goto LABEL_72;
  }
  if (*(_BYTE *)(a1 + 6896) && *(_QWORD *)(a1 + 6976))
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Transition OK. Auto Hotspot Network recommendation", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition");
LABEL_29:
    objc_autoreleasePoolPop(v3);
    v9 = 1;
    goto LABEL_30;
  }
  if (!*(_QWORD *)(a1 + 3528))
  {
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: no known networks", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    goto LABEL_72;
  }
  if (*(_DWORD *)(a1 + 20) != 1)
  {
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: wifi is off", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    goto LABEL_72;
  }
  if (!*(_BYTE *)(a1 + 3411))
  {
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: not associated", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    goto LABEL_72;
  }
  if (*(_BYTE *)(a1 + 3412))
  {
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: on a moving network", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    goto LABEL_72;
  }
  if (sub_100018FE4(a1) && sub_10010A034(a1))
  {
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Active Ranging Session", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    goto LABEL_72;
  }
  if (*(_BYTE *)(a1 + 6632))
    goto LABEL_13;
  if (*(_BYTE *)(a1 + 6616))
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Transition ok when its within colocated scope", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition");
    goto LABEL_29;
  }
  v13 = (const void *)sub_100029860(*(_QWORD *)(a1 + 64));
  v14 = sub_10002A21C(a1, v13, 1);
  v15 = v14;
  if (v14)
  {
    if (!sub_10001395C((uint64_t)v14) && *(_BYTE *)(a1 + 3413))
      goto LABEL_39;
    CFRelease(v15);
  }
  else if (*(_BYTE *)(a1 + 3413))
  {
LABEL_39:
    v16 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: network switched by user", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition");
    objc_autoreleasePoolPop(v16);
    if (v15)
      CFRelease(v15);
    goto LABEL_43;
  }
  if (*(_DWORD *)(a1 + 176) != 3)
  {
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: display is on", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    goto LABEL_72;
  }
LABEL_13:
  if (*(int *)(a1 + 3392) >= 5)
  {
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: already tried enough times", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    goto LABEL_72;
  }
  if (*(_BYTE *)(a1 + 5496))
  {
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: in carplay", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    goto LABEL_72;
  }
  if (*(_BYTE *)(a1 + 3408))
  {
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: voip on going", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    goto LABEL_72;
  }
  if (*(_BYTE *)(a1 + 3409))
  {
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: call on going", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    goto LABEL_72;
  }
  if (*(_BYTE *)(a1 + 3410))
  {
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: media playing", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    goto LABEL_72;
  }
  if (*(_BYTE *)(a1 + 3414))
  {
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Awdl RealTime is active", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    goto LABEL_72;
  }
  if (*(_BYTE *)(a1 + 5498))
  {
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Airplay over Infra is active", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", v17);
    goto LABEL_72;
  }
  Current = CFAbsoluteTimeGetCurrent();
  v5 = *(double *)(a1 + 3400);
  if (v5 != 0.0)
  {
    v6 = Current - v5;
    if (Current - v5 <= 30.0)
    {
      v11 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: timeSinceLastScan %f", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", *(_QWORD *)&v6);
      goto LABEL_72;
    }
  }
  v7 = CFAbsoluteTimeGetCurrent();
  v8 = *(double *)(a1 + 3416);
  v9 = 1;
  if (v8 != 0.0)
  {
    v10 = v7 - v8;
    if (v7 - v8 <= 10.0)
    {
      v11 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: timeSinceLinkUp %f", "__WiFiDeviceManagerIsStateSuitableForNetworkTransition", *(_QWORD *)&v10);
LABEL_72:
      objc_autoreleasePoolPop(v11);
LABEL_43:
      v9 = 0;
    }
  }
LABEL_30:
  objc_autoreleasePoolPop(v2);
  return v9;
}

void sub_10013DAFC(uint64_t a1, const void *a2)
{
  void *v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  void *v8;
  void *v9;
  const void *v10;
  void *v11;
  void *v12;
  __CFDictionary *v13;
  const __CFDictionary *v14;
  CFIndex Count;
  void *v16;
  uint64_t v17;
  const void **v18;
  size_t v19;
  const __CFArray *Mutable;
  id v21;
  uint64_t v22;
  const __CFDictionary *v23;
  const void *Value;
  const void *v25;
  const void *v27;
  const void *v28;
  const void *v29;
  __CFDictionary *v30;
  __CFDictionary *v31;
  char v32;
  void *v33;
  int v34;
  const __CFArray *v35;
  const __CFArray *v36;
  int v37;
  __CFDictionary *v38;
  _QWORD *v39;
  _BYTE *v40;
  char v41;
  BOOL v42;
  const void *v43;
  uint64_t v44;
  const void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  const __CFDictionary *v51;
  uint64_t *v52;

  v4 = objc_autoreleasePoolPush();
  if (a1)
  {
    v5 = *(_QWORD *)(a1 + 64);
    v6 = (const void *)sub_100025C3C(v5);
    v7 = sub_10002BF8C(v5, v6);
    v8 = objc_autoreleasePoolPush();
    v9 = (void *)qword_10026DD20;
    if (qword_10026DD20)
    {
      v10 = sub_10002B088(a2);
      objc_msgSend(v9, "WFLog:message:", 3, "%s: topNetwork: %@, current: %@", "__WiFiDeviceManagerTransitionToNetwork", v10, sub_10002B088(v7));
    }
    objc_autoreleasePoolPop(v8);
    if (v7)
    {
      if (!sub_10002B088(v7))
      {
LABEL_67:
        CFRelease(v7);
        goto LABEL_68;
      }
      if (CFEqual(v7, a2))
      {
        v11 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: no need for transition...", "__WiFiDeviceManagerTransitionToNetwork");
        objc_autoreleasePoolPop(v11);
        *(_DWORD *)(a1 + 3392) = 6;
        goto LABEL_67;
      }
      v13 = sub_1000C85C4((uint64_t)a2);
      v14 = v13;
      if (v13)
        Count = CFDictionaryGetCount(v13);
      else
        Count = 0;
      v16 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: channel count %d", "__WiFiDeviceManagerTransitionToNetwork", Count);
      objc_autoreleasePoolPop(v16);
      if ((_DWORD)Count)
      {
        v52 = &v50;
        __chkstk_darwin();
        v18 = (const void **)((char *)&v50 - v17);
        memset((char *)&v50 - v17, 170, v19);
        CFDictionaryGetKeysAndValues(v14, 0, v18);
        Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        if (Mutable)
        {
          v51 = v14;
          v21 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 2);
          v22 = (Count - 1);
          if ((int)Count >= 1)
          {
            do
            {
              if (CFArrayGetCount(Mutable) > 1)
                break;
              v23 = (const __CFDictionary *)v18[v22];
              if (v23)
              {
                Value = CFDictionaryGetValue(v23, CFSTR("CHANNEL"));
                if (Value)
                {
                  v25 = Value;
                  if ((objc_msgSend(v21, "containsObject:", Value) & 1) == 0)
                  {
                    objc_msgSend(v21, "addObject:", v25);
                    CFArrayAppendValue(Mutable, v18[v22]);
                  }
                }
              }
            }
            while (v22-- >= 1);
          }
          v14 = v51;
        }
        else
        {
          v21 = 0;
        }
      }
      else
      {
        v27 = sub_1000316E0((uint64_t)a2);
        v28 = sub_10002BE64((uint64_t)a2, CFSTR("CHANNEL_FLAGS"));
        if (!v27)
        {
          Mutable = 0;
          v21 = 0;
          goto LABEL_40;
        }
        v29 = v28;
        Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        v30 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        v21 = 0;
        if (v30 && Mutable)
        {
          v31 = v30;
          CFDictionaryAddValue(v30, CFSTR("CHANNEL"), v27);
          if (v29)
            CFDictionaryAddValue(v31, CFSTR("CHANNEL_FLAGS"), v29);
          v21 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 1);
          objc_msgSend(v21, "addObject:", v27);
          CFArrayAppendValue(Mutable, v31);
          CFRelease(v31);
LABEL_37:
          v32 = 0;
          if (CFArrayGetCount(Mutable))
            goto LABEL_42;
          goto LABEL_41;
        }
      }
      if (Mutable)
        goto LABEL_37;
LABEL_40:
      v32 = 1;
LABEL_41:
      if (!sub_1000C5378((uint64_t)a2))
      {
        v52 = (uint64_t *)v21;
        v41 = v32;
        v46 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: no mru channels found", "__WiFiDeviceManagerTransitionToNetwork");
        goto LABEL_81;
      }
LABEL_42:
      v33 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: mru channels: %@", "__WiFiDeviceManagerTransitionToNetwork", v21);
      objc_autoreleasePoolPop(v33);
      if (sub_1000C5378((uint64_t)a2))
      {
        v34 = *(_DWORD *)(a1 + 128);
        v35 = (const __CFArray *)a2;
        v36 = 0;
      }
      else
      {
        v37 = sub_100031670(a2);
        v34 = *(_DWORD *)(a1 + 128);
        if (v37)
          v35 = (const __CFArray *)a2;
        else
          v35 = 0;
        v36 = Mutable;
      }
      v38 = sub_100116F8C(v35, v36, v34, 0x6Eu, 1);
      v52 = (uint64_t *)v21;
      if (v38)
      {
        if (sub_10013D5A0(a1))
        {
          ++*(_DWORD *)(a1 + 6072);
          v39 = malloc_type_malloc(0x28uLL, 0x10E0040573E0799uLL);
          if (v39)
          {
            v40 = v39;
            *v39 = a1;
            v39[1] = 0;
            v39[3] = 0;
            v41 = v32;
            if (CFDictionaryContainsKey(v38, CFSTR("SSID_STR")))
              v42 = 1;
            else
              v42 = CFDictionaryContainsKey(v38, CFSTR("SCAN_SSID_LIST")) != 0;
            v40[32] = v42;
            v43 = (const void *)sub_100025C3C(*(_QWORD *)(a1 + 64));
            v44 = sub_100018C78(a1, v43, v38, 0, (uint64_t)sub_10013E1E8, (uint64_t)v40, 0, 15);
            if ((_DWORD)v44)
            {
              v48 = v44;
              v49 = objc_autoreleasePoolPush();
              if (qword_10026DD20)
                objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Error initiating scan request: %d", v48);
              objc_autoreleasePoolPop(v49);
              free(v40);
            }
            else
            {
              v45 = *(const void **)(a1 + 3376);
              if (v45)
                CFRelease(v45);
              *(_QWORD *)(a1 + 3376) = a2;
              CFRetain(a2);
            }
            goto LABEL_60;
          }
          v41 = v32;
          v47 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: null scanData", "__WiFiDeviceManagerTransitionToNetwork");
        }
        else
        {
          v41 = v32;
          v47 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: not now...", "__WiFiDeviceManagerTransitionToNetwork");
        }
        objc_autoreleasePoolPop(v47);
LABEL_60:
        CFRelease(v38);
LABEL_61:
        if (v52)
          CFRelease(v52);
        if ((v41 & 1) == 0)
          CFRelease(Mutable);
        if (v14)
          CFRelease(v14);
        goto LABEL_67;
      }
      v41 = v32;
      v46 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: failed to create scan request", "__WiFiDeviceManagerTransitionToNetwork");
LABEL_81:
      objc_autoreleasePoolPop(v46);
      goto LABEL_61;
    }
  }
  else
  {
    v12 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: invalid input", "__WiFiDeviceManagerTransitionToNetwork");
    objc_autoreleasePoolPop(v12);
  }
LABEL_68:
  objc_autoreleasePoolPop(v4);
}

void sub_10013E1E8(int a1, int a2, const __CFArray *a3, int a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v8;
  void *v9;
  CFIndex v10;
  _BYTE *v11;
  void *ValueAtIndex;
  void *v13;
  const void *v14;
  void *v15;
  void *v16;
  const char *v17;
  void *v18;
  const void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  const void *v23;
  void *v24;

  v8 = *a6;
  free(a6);
  if (!v8)
  {
    v15 = objc_autoreleasePoolPush();
    v16 = (void *)qword_10026DD20;
    if (!qword_10026DD20)
      goto LABEL_16;
    v17 = "%s: null manager";
    goto LABEL_15;
  }
  if ((_DWORD)a5)
  {
    v15 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Error in scan: %d", a5);
    goto LABEL_16;
  }
  if (!a3 || !CFArrayGetCount(a3))
  {
    v15 = objc_autoreleasePoolPush();
    v16 = (void *)qword_10026DD20;
    if (!qword_10026DD20)
      goto LABEL_16;
    v17 = "%s: no scan result";
    goto LABEL_15;
  }
  v9 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: found %ld networks", "__WiFiDeviceManagerNetworkTransitionScanCallback", CFArrayGetCount(a3));
  objc_autoreleasePoolPop(v9);
  sub_10012D59C(v8, a3);
  if (CFArrayGetCount(a3) < 1)
  {
LABEL_13:
    v15 = objc_autoreleasePoolPush();
    v16 = (void *)qword_10026DD20;
    if (!qword_10026DD20)
    {
LABEL_16:
      objc_autoreleasePoolPop(v15);
      return;
    }
    v17 = "%s: did not find the top network";
LABEL_15:
    objc_msgSend(v16, "WFLog:message:", 3, v17, "__WiFiDeviceManagerNetworkTransitionScanCallback");
    goto LABEL_16;
  }
  v10 = 0;
  v11 = (_BYTE *)(v8 + 6616);
  while (1)
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(a3, v10);
    if (ValueAtIndex)
    {
      v13 = ValueAtIndex;
      v14 = *(const void **)(v8 + 3376);
      if (v14)
      {
        if (CFEqual(v14, v13))
          break;
      }
    }
    if (CFArrayGetCount(a3) <= ++v10)
      goto LABEL_13;
  }
  v18 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: found the top network to match scanned network %@", "__WiFiDeviceManagerNetworkTransitionScanCallback", sub_10002B088(v13));
  objc_autoreleasePoolPop(v18);
  if (!sub_10013D5A0(v8))
  {
    v15 = objc_autoreleasePoolPush();
    v16 = (void *)qword_10026DD20;
    if (!qword_10026DD20)
      goto LABEL_16;
    v17 = "%s: not now...";
    goto LABEL_15;
  }
  if (!*(_BYTE *)(v8 + 6632) && (v23 = *(const void **)(v8 + 3440)) != 0 && CFEqual(v13, v23))
  {
    v24 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: target network %@ is the same as the one user left, not transitioning.", "__WiFiDeviceManagerNetworkTransitionScanCallback", sub_10002B088(v13));
    objc_autoreleasePoolPop(v24);
    if (*v11)
    {
      *v11 = 0;
      v15 = objc_autoreleasePoolPush();
      v16 = (void *)qword_10026DD20;
      if (!qword_10026DD20)
        goto LABEL_16;
      v17 = "%s:Clearing colocatedScopeTransition state";
      goto LABEL_15;
    }
  }
  else
  {
    ++*(_DWORD *)(v8 + 3392);
    *(CFAbsoluteTime *)(v8 + 3400) = CFAbsoluteTimeGetCurrent();
    sub_1000FB408(v8);
    v19 = (const void *)sub_100025C3C(*(_QWORD *)(v8 + 64));
    if (sub_10010AD4C(v8, v19, v13, 0, 0, (uint64_t)sub_10013E5A4, 0, 1013))
    {
      v20 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Error returned by Associate Async %d", "__WiFiDeviceManagerNetworkTransitionScanCallback", 0);
      objc_autoreleasePoolPop(v20);
      if (*v11)
      {
        *v11 = 0;
        v21 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s:Clearing colocatedScopeTransition state", "__WiFiDeviceManagerNetworkTransitionScanCallback");
        objc_autoreleasePoolPop(v21);
      }
      sub_1000FB2E0(v8);
      v22 = sub_100025C3C(*(_QWORD *)(v8 + 64));
      sub_100119668(v8, v22, 7, 0, v13, 0);
    }
  }
}

void sub_10013E5A4(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  const void *v9;

  v8 = objc_autoreleasePoolPush();
  if (a1)
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: network %@, error %d", "__WiFiDeviceManagerNetworkTransitionAssociationCallback", sub_10002B088(a3), a5);
    objc_autoreleasePoolPop(v8);
    *(_BYTE *)(a1 + 6616) = 0;
    v9 = *(const void **)(a1 + 6608);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(a1 + 6608) = 0;
    }
    sub_1000FB2E0(a1);
  }
  else
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: manager is NULL", "__WiFiDeviceManagerNetworkTransitionAssociationCallback");
    objc_autoreleasePoolPop(v8);
  }
}

id sub_10013E690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  id v5;
  void *v6;
  BOOL v7;
  id v8;
  id v9;
  void *v11;

  if (a1)
  {
    v4 = objc_msgSend(+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager"), "copyColocatedScopeIdForNetwork:", a2);
    v5 = objc_msgSend(+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager"), "copyColocatedScopeIdForNetwork:", a3);
    v6 = v5;
    if (v4)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (v7)
    {
      v9 = 0;
      v8 = 0;
      if (!v4)
      {
        if (!v5)
          return v8;
        goto LABEL_11;
      }
    }
    else
    {
      v9 = objc_msgSend(v4, "isEqualToString:", v5);
    }

    v8 = v9;
    if (v6)
LABEL_11:

  }
  else
  {
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: network1 is NULL!", "__WiFiDeviceManagerCompareColocatedScopeIds");
    objc_autoreleasePoolPop(v11);
    return 0;
  }
  return v8;
}

void sub_10013E778(const void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  void *v7;
  void *v8;
  const __CFString *v9;
  BOOL v10;
  char v11;
  int v12;
  void *v13;

  v4 = sub_1000D71EC((uint64_t)a1);
  v5 = sub_1000D71F4((uint64_t)a1);
  v6 = sub_1000D71FC((uint64_t)a1);
  v7 = objc_autoreleasePoolPush();
  v8 = (void *)qword_10026DD20;
  if (qword_10026DD20)
  {
    v9 = sub_100031FD0(*(_DWORD *)(a2 + 3280));
    objc_msgSend(v8, "WFLog:message:", 3, "%s: state=%@ type=%d responseType=%@ inputType=%d", "__WiFiDeviceManagerNotificationCallback", v9, v4, sub_1000D75DC(v6), v5);
  }
  objc_autoreleasePoolPop(v7);
  if ((_DWORD)v5 == 2
    || (!(_DWORD)v4 ? (v10 = v6 == 4) : (v10 = 0), v10 ? (v11 = 0) : (v11 = 1), (_DWORD)v4 == 13 || (v11 & 1) == 0))
  {
    if ((int)v4 > 1)
    {
      if ((_DWORD)v4 == 13)
      {
        sub_100122B58((_QWORD *)a2, (uint64_t)a1);
      }
      else if ((_DWORD)v4 == 2)
      {
        sub_100133940(a2, (uint64_t)a1);
      }
    }
    else if ((_DWORD)v4)
    {
      if ((_DWORD)v4 == 1)
        sub_100133688(a2, (uint64_t)a1);
    }
    else
    {
      sub_100133EAC(a2, (uint64_t)a1);
    }
  }
  if (*(const void **)(a2 + 224) == a1)
  {
    v12 = *(_DWORD *)(a2 + 3280);
    if (v12 == 17 || v12 == 14)
    {
      sub_1000F49C8(a2);
    }
    else if (a1)
    {
      CFRelease(a1);
      *(_QWORD *)(a2 + 224) = 0;
    }
  }
  else
  {
    v13 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: notification in callback is not pending", "__WiFiDeviceManagerNotificationCallback");
    objc_autoreleasePoolPop(v13);
  }
}

void *sub_10013E960(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;
  __int128 v5;
  uint64_t v6;

  v4 = 0;
  if (!qword_10026D768)
  {
    v5 = off_100231BF0;
    v6 = 0;
    qword_10026D768 = _sl_dlopen(&v5, &v4);
  }
  v2 = (void *)qword_10026D768;
  if (!qword_10026D768)
    sub_10018770C(&v4);
  if (v4)
    free(v4);
  result = dlsym(v2, "EAPClientConfigurationCopyAndImport");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  off_10026D770 = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_10013EA38(uint64_t *a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _WORD *v13;
  NSObject *v14;
  void *v15;
  _QWORD block[6];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v9 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: error %d reqInfo %@", "__WiFiDeviceManagerUserNotificationAssociationCallback", a5, a4);
  objc_autoreleasePoolPop(v9);
  v10 = objc_autoreleasePoolPush();
  if (a1)
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: enabling device manager", "__WiFiDeviceManagerUserNotificationAssociationCallback");
    objc_autoreleasePoolPop(v10);
    sub_1000FB2E0((uint64_t)a1);
    if (!a3)
    {
      v15 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: network is NULL", "__WiFiDeviceManagerUserNotificationAssociationCallback");
      goto LABEL_21;
    }
    v11 = objc_autoreleasePoolPush();
    if ((_DWORD)a5)
    {
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: failed user notification association", "__WiFiDeviceManagerUserNotificationAssociationCallback");
      objc_autoreleasePoolPop(v11);
      v12 = sub_100025C3C(a1[8]);
      sub_100119668((uint64_t)a1, v12, 7, 0, a3, 0);
      sub_1001345E4(a1, CFSTR("userJoinAssociationFailed"), a3);
      return;
    }
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: finished user notification association successfully", "__WiFiDeviceManagerUserNotificationAssociationCallback");
    objc_autoreleasePoolPop(v11);
    sub_1001345E4(a1, CFSTR("userJoinSuccess"), a3);
    if (a1[573])
    {
      if (a1[30])
      {
        v17 = 0;
        v18 = &v17;
        v19 = 0x2020000000;
        v20 = 0;
        v13 = sub_10002B2DC((uint64_t)kCFAllocatorDefault, (uint64_t)a3);
        v18[3] = (uint64_t)v13;
        if (v13)
        {
          CFRetain(a1);
          v14 = a1[30];
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10013ED80;
          block[3] = &unk_10022F160;
          block[4] = &v17;
          block[5] = a1;
          dispatch_async(v14, block);
        }
        _Block_object_dispose(&v17, 8);
        return;
      }
      v15 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: null queue.", "__WiFiDeviceManagerUserNotificationAssociationCallback");
LABEL_21:
      objc_autoreleasePoolPop(v15);
    }
  }
  else
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: manager is NULL", "__WiFiDeviceManagerUserNotificationAssociationCallback");
    objc_autoreleasePoolPop(v10);
  }
}

void sub_10013ECDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10013ECF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;

  if ((_DWORD)a2 == 5)
    return 3;
  v2 = a2;
  if ((_DWORD)a2 != 1)
  {
    if ((_DWORD)a2)
    {
      v3 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: Unexpected response type: %u", "__WiFiDeviceManagerHandleUserNotificationResponse_block_invoke", v2);
      objc_autoreleasePoolPop(v3);
      return 0;
    }
    else
    {
      return 2;
    }
  }
  return v2;
}

void sub_10013ED80(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  _QWORD *v7;
  _QWORD *v8;
  const void *v9;

  v2 = *(_QWORD **)(a1 + 40);
  if (v2[30])
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: Adding network '%@' to known network list", "__WiFiDeviceManagerUserNotificationAssociationCallback_block_invoke", sub_10002B088(*(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)));
    objc_autoreleasePoolPop(v3);
    v5 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v6 = (CFTypeRef *)(a1 + 32);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v4 + 4584))(v4, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 24), *(_QWORD *)(v4 + 4592));
    CFRelease(v6[1]);
    v7 = *v6;
  }
  else
  {
    CFRelease(v2);
    v8 = *(_QWORD **)(a1 + 32);
    v6 = (CFTypeRef *)(a1 + 32);
    v7 = v8;
  }
  v9 = *(const void **)(v7[1] + 24);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(*((_QWORD *)*v6 + 1) + 24) = 0;
  }
}

void sub_10013EE54(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  const void *v6;

  v2 = objc_autoreleasePoolPush();
  if (a1)
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "DPS Probe: Cancelling probe on all ACs");
    objc_autoreleasePoolPop(v2);
    v3 = 0;
    v4 = a1 + 7184;
    do
    {
      v5 = *(const void **)(v4 + v3);
      if (v5)
      {
        sub_100046514(*(_QWORD *)(a1 + 120), v5);
        v6 = *(const void **)(v4 + v3);
        if (v6)
        {
          CFRelease(v6);
          *(_QWORD *)(v4 + v3) = 0;
        }
      }
      v3 += 8;
    }
    while (v3 != 32);
    *(_BYTE *)(a1 + 7236) = 0;
  }
  else
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: manager is NULL !", "__WiFiDeviceManagerCancelDpsProbing");
    objc_autoreleasePoolPop(v2);
  }
}

void sub_10013EF2C(uint64_t a1, uint64_t a2)
{
  CFNumberRef v4;
  CFNumberRef v5;
  CFMutableArrayRef Mutable;
  __CFArray *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  __CFDictionary *v12;
  __CFDictionary *v13;
  void (*v14)(int, CFArrayRef, uint64_t, uint64_t);
  CFNumberRef v15;
  __CFDictionary *v16;
  uint64_t v17;
  CFTypeRef *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  __CFArray *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t valuePtr;

  v26 = 0;
  if (!a2)
  {
    v20 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: manager is NULL !", "__WiFiDeviceManagerTriggerDpsACProbe");
    objc_autoreleasePoolPop(v20);
    return;
  }
  v27 = 0xAAAAAAAAAAAAAAAALL;
  valuePtr = 1;
  v4 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
  if (!v4)
  {
    v21 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: numProbesRef is NULL !", "__WiFiDeviceManagerTriggerDpsACProbe");
    objc_autoreleasePoolPop(v21);
    return;
  }
  v5 = v4;
  Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!Mutable)
  {
    v22 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: probeSizeArrRef is NULL !", "__WiFiDeviceManagerTriggerDpsACProbe");
    objc_autoreleasePoolPop(v22);
    v23 = v5;
    goto LABEL_41;
  }
  v7 = Mutable;
  v28 = 1300;
  v8 = CFNumberCreate(0, kCFNumberCFIndexType, &v28);
  if (!v8)
  {
    v24 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: probeSizeRef is NULL !", "__WiFiDeviceManagerTriggerDpsACProbe");
    goto LABEL_32;
  }
  v9 = v8;
  CFArrayAppendValue(v7, v8);
  CFRelease(v9);
  v27 = 1;
  v10 = CFNumberCreate(0, kCFNumberCFIndexType, &v27);
  if (!v10)
  {
    v24 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: probeTimeoutSecsRef is NULL !", "__WiFiDeviceManagerTriggerDpsACProbe");
LABEL_32:
    objc_autoreleasePoolPop(v24);
    CFRelease(v5);
    v23 = v7;
LABEL_41:
    CFRelease(v23);
    return;
  }
  v11 = v10;
  v12 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v13 = v12;
  if (v12)
  {
    CFDictionarySetValue(v12, CFSTR("kWiFiLqaMgrNumProbes"), v5);
    CFDictionarySetValue(v13, CFSTR("kWiFiLqaMgrProbeSize"), v7);
    CFDictionarySetValue(v13, CFSTR("kWiFiLqaMgrProbeTimeoutSecs"), v11);
    switch((int)a1)
    {
      case 0:
        v26 = 0;
        v14 = sub_10013F374;
        break;
      case 1:
        v26 = 200;
        v14 = sub_10013F388;
        break;
      case 2:
        v26 = 700;
        v14 = sub_10013F39C;
        break;
      case 3:
        v26 = 800;
        v14 = sub_10013F3B0;
        break;
      default:
        goto LABEL_36;
    }
    v15 = CFNumberCreate(0, kCFNumberCFIndexType, &v26);
    if (v15)
      CFDictionarySetValue(v13, CFSTR("kWiFiLqaMgrProbeTrafficClass"), v15);
    v16 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v17 = a2 + 8 * a1;
    *(_QWORD *)(v17 + 7184) = v16;
    if (sub_100042AB8(*(_QWORD *)(a2 + 120), v13, v16, (uint64_t)v14, a2))
    {
      v18 = (CFTypeRef *)(v17 + 7184);
      v19 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: failed to enqueue DPS probe for ac:%d", "__WiFiDeviceManagerTriggerDpsACProbe", a1, v26);
      objc_autoreleasePoolPop(v19);
      if (*v18)
      {
        CFRelease(*v18);
        *v18 = 0;
      }
    }
  }
  else
  {
    v25 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: probeOptions is NULL !", "__WiFiDeviceManagerTriggerDpsACProbe");
    objc_autoreleasePoolPop(v25);
LABEL_36:
    v15 = 0;
  }
  CFRelease(v5);
  CFRelease(v11);
  if (v13)
    CFRelease(v13);
  CFRelease(v7);
  if (v15)
  {
    v23 = v15;
    goto LABEL_41;
  }
}

void sub_10013F374(int a1, CFArrayRef theArray, uint64_t a3, uint64_t a4)
{
  sub_10013F3C4(theArray, a3, a4, 0);
}

void sub_10013F388(int a1, CFArrayRef theArray, uint64_t a3, uint64_t a4)
{
  sub_10013F3C4(theArray, a3, a4, 1);
}

void sub_10013F39C(int a1, CFArrayRef theArray, uint64_t a3, uint64_t a4)
{
  sub_10013F3C4(theArray, a3, a4, 2);
}

void sub_10013F3B0(int a1, CFArrayRef theArray, uint64_t a3, uint64_t a4)
{
  sub_10013F3C4(theArray, a3, a4, 3);
}

void sub_10013F3C4(CFArrayRef theArray, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *Value;
  const __CFNumber *v11;
  _BOOL4 v12;
  double Current;
  double v14;
  uint64_t v15;
  const void *v16;
  _QWORD *v17;
  double v18;
  void *v19;
  const char *v20;
  const char *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  int64_t valuePtr;

  v25 = 0xAAAAAAAAAAAAAAAALL;
  valuePtr = 0xAAAAAAAAAAAAAAAALL;
  if (a2)
  {
    v7 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: diagnostic probe failed with error %ld", "__WiFiDeviceManagerUpdateProbeResults", a2);
LABEL_14:
    objc_autoreleasePoolPop(v7);
    goto LABEL_15;
  }
  if (!theArray || !CFArrayGetCount(theArray))
  {
    v7 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: empty DPS probe results.", "__WiFiDeviceManagerUpdateProbeResults", v24);
    goto LABEL_14;
  }
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, 0);
  v25 = 0;
  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("kWiFiLqaMgrNumProbesSent"));
  if (Value)
    CFNumberGetValue(Value, kCFNumberCFIndexType, &valuePtr);
  v11 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("kWiFiLqaMgrNumProbesFail"));
  if (v11)
    CFNumberGetValue(v11, kCFNumberCFIndexType, &v25);
  if (valuePtr)
  {
    v12 = (uint64_t)(100 * v25) / valuePtr == 0;
    goto LABEL_16;
  }
LABEL_15:
  v12 = 0;
LABEL_16:
  Current = CFAbsoluteTimeGetCurrent();
  if (a3)
  {
    v14 = Current;
    v15 = a3 + 8 * a4;
    v16 = *(const void **)(v15 + 7184);
    if (v16)
    {
      v17 = (_QWORD *)(v15 + 7184);
      CFRelease(v16);
      *v17 = 0;
    }
    if (!v12 && ((v18 = *(double *)(a3 + 7088), v18 == 0.0) || v18 + 10.0 >= v14))
    {
      sub_10013EF2C(a4, a3);
    }
    else
    {
      v19 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
      {
        v20 = "fail";
        if (v12)
          v20 = "success";
        v21 = "<10s";
        if (*(double *)(a3 + 7088) + 10.0 < v14)
          v21 = "timeout";
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "DPS Probe: probeResult:%s ac:%u with %s", v20, a4, v21);
      }
      objc_autoreleasePoolPop(v19);
      if (v12 && !*(_DWORD *)(a3 + 7232))
      {
        v22 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "DPS HUD: clearing on probe success");
        objc_autoreleasePoolPop(v22);
        sub_10013A94C(a3);
      }
      sub_10013EE54(a3);
    }
  }
  else
  {
    v23 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: null manager.", "__WiFiDeviceManagerTriggerOrSuppressSubsequentDpsProbes");
    objc_autoreleasePoolPop(v23);
  }
}

uint64_t sub_10013F644(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  if (a1)
  {
    if (a1[3408])
      v1 = (8 * (a1[5496] != 0)) | 4;
    else
      v1 = 8 * (a1[5496] != 0);
    v2 = v1 | (a1[5497] != 0);
    if (a1[3410])
      v2 |= 0x10uLL;
    if (a1[3409])
      v2 |= 2uLL;
    if (a1[5498])
      v2 |= 0x20uLL;
    if (a1[5499])
      return v2 | 0x40;
    else
      return v2;
  }
  else
  {
    v4 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: CATS Invalid arguments\n", "__WiFiDeviceManagerCatsTimeSensitiveAppBitmap");
    objc_autoreleasePoolPop(v4);
    return 0;
  }
}

void sub_10013F728(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  const __CFNumber *v32;
  id v33;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  id v44;
  _BOOL8 v45;
  void *v46;
  const void *v47;
  const void *v48;
  _BOOL8 v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  void *i;
  _BOOL8 v57;
  _BOOL8 v58;
  void *v59;
  id v60;
  uint64_t v61;
  __CFString *v62;
  const void *v63;
  id v64;
  void *v65;
  id v66;
  void *v67;
  char *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  id v72;
  const __CFString *v73;
  void *v74;
  const void *v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  id v79;
  uint64_t v80;
  id obj;
  id obja;
  uint64_t v83;
  id v84;
  const __CFArray *v85;
  int v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  unint64_t v95;
  int v96;
  _BYTE v97[128];
  _BYTE v98[128];

  v96 = -1431655766;
  v95 = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&stru_10026CB88);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 96) + 240))
  {
    v85 = sub_10001F1E8(*(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24));
    v80 = a1;
    v2 = objc_msgSend(+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager"), "copyGeoTagsForNetworkAtLocation:location:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24), *(_QWORD *)(a1 + 40));
    v91 = 0u;
    v92 = 0u;
    v93 = 0u;
    v94 = 0u;
    obj = v2;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v91, v98, 16);
    if (v3)
    {
      v4 = v3;
      v83 = *(_QWORD *)v92;
      v5 = WADeviceAnalyticsGeoTagInfo[0];
      v7 = WADeviceAnalyticsGeoTagInfo[4];
      v6 = WADeviceAnalyticsGeoTagInfo[5];
      v8 = WADeviceAnalyticsGeoTagInfo[3];
      v9 = 0.0;
      v10 = 1.79769313e308;
      v11 = 0.0;
LABEL_4:
      v12 = 0;
      while (1)
      {
        if (*(_QWORD *)v92 != v83)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v91 + 1) + 8 * v12);
        v14 = objc_msgSend(v13, "objectForKey:", v5);
        v15 = objc_msgSend(v13, "objectForKey:", v6);
        v16 = objc_msgSend(v13, "objectForKey:", v8);
        v17 = objc_msgSend(v13, "objectForKey:", v7);
        if (!v85)
          break;
        v18 = v17;
        if (objc_msgSend(v14, "isEqualToString:"))
        {
          objc_msgSend(v15, "doubleValue");
          if (v19 < v10)
          {
            objc_msgSend(v15, "doubleValue");
            v10 = v20;
            objc_msgSend(v16, "doubleValue");
            v11 = v21;
            objc_msgSend(v18, "doubleValue");
            v9 = v22;
          }
        }
        if (v4 == (id)++v12)
        {
          v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v91, v98, 16);
          if (v4)
            goto LABEL_4;
          goto LABEL_15;
        }
      }
    }
    v9 = 0.0;
    v11 = 0.0;
LABEL_15:

    v23 = v80;
    v24 = objc_msgSend(+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager"), "copyNetworksAvailableAtLocation:", *(_QWORD *)(v80 + 40));
    v25 = objc_msgSend(+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager"), "copyPreferenceScoreDictionaryForNetwork:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v80 + 80) + 8) + 24));
    v84 = objc_msgSend(v24, "count");
    obja = objc_msgSend(objc_msgSend(v25, "objectForKey:", WADeviceAnalyticsNetworkPreferenceScoreInfo[2]), "unsignedIntegerValue");
    v79 = objc_msgSend(objc_msgSend(v25, "objectForKey:", WADeviceAnalyticsNetworkPreferenceScoreInfo[3]), "unsignedIntegerValue");
    v26 = objc_msgSend(objc_msgSend(v25, "objectForKey:", WADeviceAnalyticsNetworkPreferenceScoreInfo[7]), "integerValue");
    v78 = objc_msgSend(objc_msgSend(v25, "objectForKey:", WADeviceAnalyticsNetworkPreferenceScoreInfo[0]), "BOOLValue");
    v77 = objc_msgSend(objc_msgSend(v25, "objectForKey:", WADeviceAnalyticsNetworkPreferenceScoreInfo[1]), "BOOLValue");

    v27 = (void *)sub_10002BE64(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v80 + 80) + 8) + 24), CFSTR("AP_MODE"));
    v28 = (void *)sub_1000316E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v80 + 80) + 8) + 24));
    v29 = (void *)sub_10002BE64(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v80 + 80) + 8) + 24), CFSTR("CHANNEL_FLAGS"));
    v30 = (void *)sub_10002BE64(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v80 + 80) + 8) + 24), CFSTR("RSSI"));
    v31 = objc_msgSend(v27, "integerValue");
    v32 = sub_1000C6B54(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v80 + 80) + 8) + 24));
    v33 = objc_msgSend(v28, "integerValue");
    v34 = objc_msgSend(v29, "integerValue");
    v35 = sub_100008CEC(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v80 + 80) + 8) + 24));
    v36 = objc_msgSend(v30, "integerValue");
    LOBYTE(v76) = sub_1000C86EC(*(const void **)(*(_QWORD *)(*(_QWORD *)(v80 + 80) + 8) + 24), v85) != 0;
    v37 = +[WiFiUsageBssDetails bssWithIdentifier:apProfile:apMode:phyMode:channel:channelFlags:channelWidth:rssi:latitude:longitude:isEdgeBss:](WiFiUsageBssDetails, "bssWithIdentifier:apProfile:apMode:phyMode:channel:channelFlags:channelWidth:rssi:latitude:longitude:isEdgeBss:", v85, 0, v31, v32, v33, v34, v11, v9, v35, v36, v76);
    objc_msgSend(v37, "setHasAppleIE:", sub_10002BE64(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v80 + 80) + 8) + 24), CFSTR("APPLE_IE")) != 0);
    objc_msgSend(v37, "setHasDomainName:", sub_10002BE64(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v80 + 80) + 8) + 24), CFSTR("DomainName")) != 0);
    objc_msgSend(v37, "setHasNaiRealms:", sub_10002BE64(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v80 + 80) + 8) + 24), CFSTR("NaiRealmName")) != 0);
    objc_msgSend(v37, "setHasRoamingOis:", sub_10002BE64(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v80 + 80) + 8) + 24), CFSTR("RoamingConsortiumOIs")) != 0);
    v38 = (void *)sub_10002BE64(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v80 + 80) + 8) + 24), CFSTR("11U_INTERWORKING_IE"));
    if (v38)
    {
      v39 = v38;
      objc_msgSend(v37, "setHasInterworkingIE:", 1);
      v40 = objc_msgSend(v39, "objectForKey:", CFSTR("INTERWORKING_ACCESS_NETWORK_TYPE"));
      v41 = objc_msgSend(v39, "objectForKey:", CFSTR("INTERWORKING_ACCESS_VENTURE_GRP"));
      v42 = objc_msgSend(v39, "objectForKey:", CFSTR("INTERWORKING_ACCESS_VENTURE_TYPE"));
      if (v40)
        objc_msgSend(v37, "setNetworkAccessCode:", objc_msgSend(v40, "integerValue"));
      if (v41)
        objc_msgSend(v37, "setVenueGroup:", objc_msgSend(v41, "integerValue"));
      v23 = v80;
      if (v42)
        objc_msgSend(v37, "setVenueCode:", objc_msgSend(v42, "integerValue"));
    }
    if (sub_10002BE64(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24), CFSTR("WPS_PROB_RESP_IE"))
      || sub_10002BE64(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24), CFSTR("WPS_BEACON_IE")))
    {
      objc_msgSend(v37, "setHasWpsIE:", 1);
      objc_msgSend(v37, "setModelName:", sub_1000CE458(*(const __CFDictionary **)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
      objc_msgSend(v37, "setModelNumber:", sub_1000CE4B0(*(const __CFDictionary **)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
      objc_msgSend(v37, "setManufacturerName:", sub_1000CE400(*(const __CFDictionary **)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
      objc_msgSend(v37, "setDeviceVersion:", sub_1000CE508(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
    }
    v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24);
    if (v43 && sub_10000BE8C(v43))
    {
      if (*(_QWORD *)(v23 + 48))
      {
        objc_msgSend(v37, "setModelName:");

      }
      if (*(_QWORD *)(v23 + 56))
      {
        objc_msgSend(v37, "setManufacturerName:");

      }
      if (*(_QWORD *)(v23 + 64))
      {
        objc_msgSend(v37, "setDeviceVersion:");

      }
    }
    v44 = objc_msgSend(objc_alloc((Class)WiFiUsageNetworkDetails), "initWithNetworkName:", sub_10002B088(*(const void **)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
    objc_msgSend(v44, "setConnectedBss:", v37);
    objc_msgSend(v44, "setColocatedNetworkCount:", v84);
    objc_msgSend(v44, "setSwitchedAwayCount:", obja);
    objc_msgSend(v44, "setSwitchedToCount:", v79);
    objc_msgSend(v44, "setNetworkScore:", v26);
    objc_msgSend(v44, "setIsKnown:", sub_1000C69C8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
    objc_msgSend(v44, "setIsOpen:", sub_1000C5C14(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)) == 0);
    objc_msgSend(v44, "setCaptiveStatus:", sub_1000C4820(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
    objc_msgSend(v44, "setIsPublic:", sub_10002BE64(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24), CFSTR("WiFiNetworkAttributeIsPublic")) == kCFBooleanTrue);
    objc_msgSend(v44, "setIsHome:", sub_1000C3F88(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)) == 1);
    objc_msgSend(v44, "setIsWork:", sub_1000CBE60(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)) == 1);
    objc_msgSend(v44, "setIsInternal:", sub_1000CC464(*(const void **)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
    objc_msgSend(v44, "setIsManaged:", sub_1000C5378(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
    objc_msgSend(v44, "setIsCarrierBased:", sub_1000CB2D0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)) == 2);
    objc_msgSend(v44, "setIsCarPlay:", sub_10000BE8C(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)) != 0);
    v45 = sub_1000CB2D0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)) == 1
       || sub_1000CB2D0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)) == 6;
    objc_msgSend(v44, "setIsAppBased:", v45);
    objc_msgSend(v44, "setIsWalletBased:", sub_1000CB2D0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)) == 3);
    objc_msgSend(v44, "setIsPersonalHotspot:", sub_10001395C(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)) != 0);
    objc_msgSend(v44, "setIsInstantHotspot:", sub_10002BE64(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24), CFSTR("WiFiInstantHotspotJoining")) == kCFBooleanTrue);
    objc_msgSend(v44, "setIsAutoHotspot:", sub_10002BE64(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24), CFSTR("WiFiAutoInstantHotspotJoining")) == kCFBooleanTrue);
    objc_msgSend(v44, "setIsMoving:", v78);
    objc_msgSend(v44, "setIsWidelyDeployed:", v77);
    objc_msgSend(v44, "setIsAutoJoined:", sub_10002BE64(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24), CFSTR("WiFiNetworkIsAutoJoined")) == kCFBooleanTrue);
    objc_msgSend(v44, "setIsAdhoc:", sub_10002B704(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)) != 0);
    objc_msgSend(v44, "setIsHidden:", sub_10001F440(*(const void **)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)) != 0);
    objc_msgSend(v44, "setIsPasspoint:", sub_10002DA5C(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
    objc_msgSend(v44, "setIsMetered:", sub_1000CAA94(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
    objc_msgSend(v44, "setHasWapi:", sub_10002DAF0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
    v49 = sub_1000C50A0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24))
       && !sub_10002BE64(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24), CFSTR("RSN_IE"))
       || sub_1000C3B8C(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24));
    objc_msgSend(v44, "setHasWeakSecurity:", v49);
    objc_msgSend(v44, "setHasWpa3:", sub_1000C433C(*(const __CFDictionary **)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)) != 0);
    objc_msgSend(v44, "setHasWep:", sub_1000C3B8C(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
    objc_msgSend(v44, "setHasEnterpriseSecurity:", sub_10002DAB4(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
    objc_msgSend(v44, "setHasNoMap:", sub_1000C4700(*(const void **)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
    objc_msgSend(v44, "setHasAmbiguousSsid:", sub_1000C46C8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
    objc_msgSend(v44, "setHasCustomNetworkSettings:", *(unsigned __int8 *)(v23 + 120));
    objc_msgSend(v44, "setRequiresUsername:", sub_1000C5AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
    objc_msgSend(v44, "setRequiresPassword:", sub_1000C5964(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
    objc_msgSend(v44, "setRequiresIdentity:", sub_1000C5A2C(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)) != 0);
    objc_msgSend(v44, "setRequiresOtp:", sub_1000C5BD8(*(const void **)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)) != 0);
    objc_msgSend(v44, "setCanExposeImsi:", sub_1000CB584(*(const void **)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)) != 0);
    objc_msgSend(v44, "setUsageRank:", sub_1000CBD04(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
    v50 = (void *)sub_10002BE64(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24), CFSTR("WiFiManagerKnownNetworksEventType"));
    if (v50)
    {
      v51 = v50;
      objc_msgSend(v44, "setAddedFromUI:", objc_msgSend(v50, "integerValue") == (id)1);
      objc_msgSend(v44, "setAddedFromApp:", objc_msgSend(v51, "integerValue") == (id)8);
      objc_msgSend(v44, "setAddedViaSync:", objc_msgSend(v51, "integerValue") == (id)3);
      objc_msgSend(v44, "setAddedViaATJ:", objc_msgSend(v51, "integerValue") == (id)6);
      objc_msgSend(v44, "setAddedViaRecommendation:", objc_msgSend(v51, "integerValue") == (id)14);
      objc_msgSend(v44, "setAddedViaSharing:", objc_msgSend(v51, "integerValue") == (id)11);
    }
    v52 = (void *)sub_10002BE64(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24), CFSTR("lastTputMeasurementResults"));
    v87 = 0u;
    v88 = 0u;
    v89 = 0u;
    v90 = 0u;
    v53 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v87, v97, 16);
    if (v53)
    {
      v54 = v53;
      v55 = *(_QWORD *)v88;
      do
      {
        for (i = 0; i != v54; i = (char *)i + 1)
        {
          if (*(_QWORD *)v88 != v55)
            objc_enumerationMutation(v52);
          objc_msgSend(*(id *)(*((_QWORD *)&v87 + 1) + 8 * (_QWORD)i), "doubleValue");
          objc_msgSend(v44, "addDownloadSpeed:");
        }
        v54 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v87, v97, 16);
      }
      while (v54);
    }
    v57 = !sub_100007F24(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24))
       && sub_1000CB504(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)) == 0;
    objc_msgSend(v44, "setAutoJoinDisabled:", v57);
    objc_msgSend(v44, "setAutoLoginDisabled:", sub_1000CB0A0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
    objc_msgSend(v44, "setLowDataModeEnabled:", sub_1000CAB28(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)) != 0);
    v58 = !sub_100007F24(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24))
       && sub_1000CB504(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)) != 0;
    objc_msgSend(v44, "setControlCenterDisabled:", v58);
    objc_msgSend(v44, "setPrivateRelayEnabled:", sub_1000081D8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
    objc_msgSend(v44, "setPrivateRelayBlockedReason:", sub_1000CCA90(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
    v86 = 0;
    v59 = (void *)sub_10002BE64(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24), CFSTR("80211D_IE"));
    if (v59)
    {
      v60 = objc_msgSend(v59, "objectForKey:", CFSTR("IE_KEY_80211D_COUNTRY_CODE"));
      if (v60)
      {
        objc_msgSend(v60, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", &v86, 4, 0, 4, 0, 0, objc_msgSend(v60, "length"), 0);
        objc_msgSend(v44, "setAdvertisedCountryCode:", v86);
      }
    }
    if (*(_DWORD *)(v23 + 112))
      objc_msgSend(v44, "setAppliedCountryCode:");
    objc_msgSend(v44, "setBssEnvironment:", sub_10002B5A4(*(_DWORD *)(v23 + 116)));
    objc_msgSend(v44, "setLocaleSource:", *(_QWORD *)(v23 + 104));
    objc_msgSend(v44, "setLastJoinDate:", sub_10002E000(*(const void **)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24)));
    v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 88) + 8) + 24);
    if (v61)
    {
      sub_100061728(v61, (uint64_t)&v95);
      v62 = HIDWORD(v95) > 2 ? CFSTR("UnknownAddr") : off_1002322F0[SHIDWORD(v95)];
      objc_msgSend(v44, "setPrivateMacType:", v62);
      objc_msgSend(v44, "setPrivateMacFeatureToggled:", v96 == 1);
      objc_msgSend(v44, "setPrivateMacUnderClassification:", BYTE1(v96) == 1);
      objc_msgSend(v44, "setPrivateMacDisabledByProfile:", BYTE2(v96) == 1);
      v63 = *(const void **)(*(_QWORD *)(*(_QWORD *)(v23 + 88) + 8) + 24);
      if (v63)
      {
        CFRelease(v63);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 88) + 8) + 24) = 0;
      }
    }
    objc_msgSend(v44, "setIsAtPrimaryHMHome:", *(unsigned __int8 *)(v23 + 121));
    objc_msgSend(v44, "setIsAtNonPrimaryHMHome:", *(unsigned __int8 *)(v23 + 122));
    v64 = objc_msgSend(+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager"), "copyColocatedScopeIdForNetwork:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24));
    if (v64)
    {
      v65 = v64;
      v66 = objc_msgSend(+[WiFiAnalyticsManager sharedWiFiAnalyticsManager](WiFiAnalyticsManager, "sharedWiFiAnalyticsManager"), "copyAllStoredNetworkSsidsWithColocatedScopeId:", v64);
      if (v66)
      {
        v67 = v66;
        if ((unint64_t)objc_msgSend(v66, "count") >= 2
          && objc_msgSend(v67, "containsObject:", sub_10002B088(*(const void **)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24))))
        {
          v68 = (char *)objc_msgSend(v67, "count") - 1;
        }
        else
        {
          v68 = 0;
        }

      }
      else
      {
        v68 = 0;
      }

    }
    else
    {
      v68 = 0;
    }
    objc_msgSend(v44, "setColocatedScopeCount:", v68);
    v69 = (void *)sub_10002BE64(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24), CWFCoreWiFiSpecificAttributesKey);
    if (v69)
    {
      v70 = v69;
      v71 = CWFNetworkProfilePropertyDisable6EModeKey;
      if (objc_msgSend(v69, "objectForKeyedSubscript:", CWFNetworkProfilePropertyDisable6EModeKey))
      {
        v72 = objc_msgSend(objc_msgSend(v70, "objectForKeyedSubscript:", v71), "integerValue");
        if (v72 == (id)2)
        {
          v73 = CFSTR("off");
          goto LABEL_92;
        }
        if (v72 == (id)1)
        {
          v73 = CFSTR("auto");
          goto LABEL_92;
        }
        if (!v72)
        {
          v73 = CFSTR("none");
LABEL_92:
          v74 = v44;
          goto LABEL_93;
        }
      }
    }
    v74 = v44;
    v73 = 0;
LABEL_93:
    objc_msgSend(v74, "setDisable6eMode:", v73);
    objc_msgSend(v44, "setIsStandalone6E:", objc_msgSend(*(id *)(v23 + 32), "isStandalone6G"));

    v75 = *(const void **)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24);
    if (v75)
    {
      CFRelease(v75);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 80) + 8) + 24) = 0;
    }
    (*(void (**)(void))(*(_QWORD *)(v23 + 72) + 16))();
    pthread_mutex_unlock(&stru_10026CB88);
    CFRelease(*(CFTypeRef *)(v23 + 96));
    return;
  }
  v46 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: null queue.", "__WiFiDeviceManagerCreateNetworkDetailsForUsageMonitor_block_invoke");
  objc_autoreleasePoolPop(v46);

  v47 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
  if (v47)
  {
    CFRelease(v47);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 0;
  }
  v48 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24);
  if (v48)
  {
    CFRelease(v48);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = 0;
  }
  pthread_mutex_unlock(&stru_10026CB88);
  CFRelease(*(CFTypeRef *)(a1 + 96));
}

void sub_1001408EC(uint64_t a1, void *a2)
{
  _BOOL8 v3;

  if (a2)
  {
    v3 = sub_100077738(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64)) != 1;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 7368), "setJoinEvent:withReason:lastDisconnectReason:lastJoinFailure:andNetworkDetails:forInterface:", 1, 0, 0, 0, a2, sub_100025C3C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64)));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 7368), "setLinkEvent:isInvoluntary:linkChangeReason:linkChangeSubreason:withNetworkDetails:forInterface:", 1, v3, 0, 0, a2, *(_QWORD *)(a1 + 40));

  }
}

uint64_t sub_10014098C(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v14;

  if (!a1 || !a3)
  {
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: CATS Register Client: Invalid arguments", "WifiDeviceManagerCatsRegisterClient", v14);
    goto LABEL_8;
  }
  v4 = *(unsigned __int8 *)(a1 + 40);
  if (v4 >= 3)
  {
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: CATS Register Client  Max %d clients registered ", "WifiDeviceManagerCatsRegisterClient", 3);
LABEL_8:
    v6 = 0xFFFFFFFFLL;
    goto LABEL_20;
  }
  if (*(_BYTE *)(a1 + 40))
  {
    v7 = 0;
    v8 = (int *)(a1 + 56);
    while (1)
    {
      v9 = *v8;
      v8 += 6;
      if (v9 == a2)
        break;
      if (v4 == ++v7)
      {
        v10 = *(unsigned __int8 *)(a1 + 40);
        goto LABEL_16;
      }
    }
    v10 = *(unsigned __int8 *)(a1 + 40);
    if ((v7 & 0x80000000) == 0)
      goto LABEL_17;
  }
  else
  {
    v10 = 0;
  }
LABEL_16:
  *(_BYTE *)(a1 + 40) = v4 + 1;
  LODWORD(v7) = v10;
LABEL_17:
  v11 = a1 + 24 * v7;
  *(_DWORD *)(v11 + 56) = a2;
  v12 = (unsigned int *)(v11 + 56);
  *((_QWORD *)v12 + 1) = a3;
  *((_QWORD *)v12 - 1) = 0;
  v5 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: CATS Register Client Type: %d nclients:%d", "WifiDeviceManagerCatsRegisterClient", *v12, *(unsigned __int8 *)(a1 + 40));
  v6 = 0;
LABEL_20:
  objc_autoreleasePoolPop(v5);
  return v6;
}

void sub_100140AF0(uint64_t a1, uint64_t a2)
{
  sub_100030D24(a2, *(_QWORD *)(a1 + 32));
}

void sub_100140B00(uint64_t a1, uint64_t a2)
{
  sub_100030D24(a2, *(_QWORD *)(a1 + 32));
}

void sub_100140B10(uint64_t a1, uint64_t a2)
{
  sub_100030D24(a2, *(_QWORD *)(a1 + 32));
}

void sub_100140B20(uint64_t a1, uint64_t a2)
{
  sub_100030D24(a2, *(_QWORD *)(a1 + 32));
}

void sub_100140B30(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  _BOOL4 v7;
  char v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  void *v12;
  void *v13;
  double Current;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  NSErrorDomain v21;
  const __CFString *v22;
  void *v23;
  uint64_t v24;
  NSError *v25;
  NSDictionary *v26;
  NSErrorDomain v27;
  uint64_t v28;
  const void *v29;
  void *v30;
  const void *v31;
  void *v32;
  NSDictionary *v33;
  NSErrorDomain v34;
  uint64_t v35;
  NSErrorDomain v36;
  const __CFString *v37;
  NSErrorDomain v38;
  const __CFString *v39;
  NSErrorDomain v40;
  NSErrorDomain v41;
  const __CFString *v42;
  uint64_t v43;
  double v44;
  double v45;
  NSErrorUserInfoKey v46;
  const __CFString *v47;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = objc_autoreleasePoolPush();
  if (a3)
  {
    if (!v5)
    {
      v46 = NSLocalizedDescriptionKey;
      v47 = CFSTR("No device manager configured");
      v25 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 6, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1));
      goto LABEL_79;
    }
    if (*(_QWORD *)(v5 + 8824))
    {
      if (*(_BYTE *)(v5 + 3305))
      {
        if (*(_BYTE *)(v5 + 6280) || *(_BYTE *)(v5 + 5504))
        {
          if (*(_DWORD *)(v5 + 20) == 1)
          {
            if (*(_BYTE *)(v5 + 248))
            {
              v38 = NSPOSIXErrorDomain;
              v46 = NSLocalizedDescriptionKey;
              v39 = CFSTR("WiFi adhoc is enabled");
            }
            else
            {
              if (!*(_BYTE *)(v5 + 249))
              {
                v7 = *(_BYTE *)(v5 + 5219)
                  || *(_DWORD *)(v5 + 5344)
                  || *(unsigned __int8 *)(v5 + 5361) != -*(_BYTE *)(v5 + 5360)
                  || sub_100018E14(v5);
                v8 = *(_BYTE *)(v5 + 7056);
                if (v8)
                  v8 = sub_100107828(v5, 1) != 0;
                if (!v7 || (v8 & 1) != 0)
                {
                  v9 = *(_QWORD *)(v5 + 64);
                  v10 = (const void *)sub_100025C3C(v9);
                  v11 = sub_10002BF8C(v9, v10);
                  if ((*(_DWORD *)(v5 + 5396) == 102 && (*(_BYTE *)(v5 + 5392) & 1) != 0 || *(_BYTE *)(v5 + 50))
                    && *(_DWORD *)(v5 + 5520) == 1
                    && !*(_BYTE *)(v5 + 37)
                    && (a2 > 0x37 || ((1 << a2) & 0xD0000000000000) == 0))
                  {
                    v21 = NSPOSIXErrorDomain;
                    v46 = NSLocalizedDescriptionKey;
                    v22 = CFSTR("BT SCO is enabled");
                  }
                  else if (*(_BYTE *)(v5 + 3414) && (a2 > 0x37 || ((1 << a2) & 0xD0012000000184) == 0))
                  {
                    v21 = NSPOSIXErrorDomain;
                    v46 = NSLocalizedDescriptionKey;
                    v22 = CFSTR("AWDL real time mode is active");
                  }
                  else
                  {
                    if (!sub_10010A010(v5))
                    {
                      if (sub_100018F14(v5))
                      {
                        v40 = NSPOSIXErrorDomain;
                        v46 = NSLocalizedDescriptionKey;
                        v47 = CFSTR("Auto-join deferral is active");
LABEL_120:
                        v26 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1);
                        v27 = v40;
                        v28 = 16;
                        goto LABEL_83;
                      }
                      if (!v11 || sub_10001395C((uint64_t)v11))
                      {
LABEL_69:
                        if (*(_DWORD *)(v5 + 5416))
                        {
                          v23 = *(void **)(v5 + 5408);
                          if (v23 && (objc_msgSend(v23, "isPowerResourceAvailable:", 0) & 1) == 0)
                          {
                            v41 = NSPOSIXErrorDomain;
                            v46 = NSLocalizedDescriptionKey;
                            v42 = CFSTR("Insufficient battery resource");
                          }
                          else if (!*(_BYTE *)(v5 + 3488) && *(_DWORD *)(v5 + 3492) == -528336895)
                          {
                            v41 = NSPOSIXErrorDomain;
                            v46 = NSLocalizedDescriptionKey;
                            v42 = CFSTR("Watchdog reset");
                          }
                          else if (sub_1001249C8(v5))
                          {
                            v41 = NSPOSIXErrorDomain;
                            v46 = NSLocalizedDescriptionKey;
                            v42 = CFSTR("Scan throttle limit exceeded");
                          }
                          else
                          {
                            if (*(_BYTE *)(v5 + 9000))
                            {
                              v24 = *(unsigned int *)(v5 + 3480);
                              if ((int)v24 < 1)
                              {
                                v25 = 0;
                                v5 = 1;
                                if (!v11)
                                {
LABEL_79:
                                  (*(void (**)(uint64_t, uint64_t, NSError *))(a3 + 16))(a3, v5, v25);
                                  goto LABEL_80;
                                }
LABEL_78:
                                CFRelease(v11);
                                goto LABEL_79;
                              }
                              v40 = NSPOSIXErrorDomain;
                              v46 = NSLocalizedDescriptionKey;
                              v47 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("User join is in progress (count=%d)"), v24);
                              goto LABEL_120;
                            }
                            v41 = NSPOSIXErrorDomain;
                            v46 = NSLocalizedDescriptionKey;
                            v42 = CFSTR("Interface not up");
                          }
                          v47 = v42;
                        }
                        else
                        {
                          v41 = NSPOSIXErrorDomain;
                          v46 = NSLocalizedDescriptionKey;
                          v47 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Thermal index (%d) is below disabled threshold (%d)"), 0, 0);
                        }
                        v26 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1);
                        v27 = v41;
                        v28 = 1;
LABEL_83:
                        v25 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v27, v28, v26);
                        v5 = 0;
                        if (!v11)
                          goto LABEL_79;
                        goto LABEL_78;
                      }
                      if ((a2 > 0x3A || ((1 << a2) & 0x6F0048F1C000200) == 0)
                        && !CWFIsAutoJoinRetryTrigger(a2))
                      {
                        goto LABEL_156;
                      }
                      v12 = objc_autoreleasePoolPush();
                      if (a2 == 28 && *(_BYTE *)(v5 + 6896) && *(_QWORD *)(v5 + 6976))
                      {
                        v13 = objc_autoreleasePoolPush();
                        if (qword_10026DD20)
                          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Transition OK. Auto Hotspot Network recommendation", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition");
LABEL_67:
                        objc_autoreleasePoolPop(v13);
                        goto LABEL_68;
                      }
                      if (!*(_QWORD *)(v5 + 3528))
                      {
                        v20 = objc_autoreleasePoolPush();
                        if (qword_10026DD20)
                          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: no known networks", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43);
                        goto LABEL_154;
                      }
                      if (*(_DWORD *)(v5 + 20) != 1)
                      {
                        v20 = objc_autoreleasePoolPush();
                        if (qword_10026DD20)
                          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: wifi is off", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43);
                        goto LABEL_154;
                      }
                      if (!*(_BYTE *)(v5 + 3411))
                      {
                        v20 = objc_autoreleasePoolPush();
                        if (qword_10026DD20)
                          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: not associated", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43);
                        goto LABEL_154;
                      }
                      if (sub_100018FE4(v5) && sub_10010A034(v5))
                      {
                        v20 = objc_autoreleasePoolPush();
                        if (qword_10026DD20)
                          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Active Ranging Session", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43);
                        goto LABEL_154;
                      }
                      if (*(_BYTE *)(v5 + 6632))
                      {
LABEL_46:
                        if (a2 - 56 > 0xFFFFFFFFFFFFFFFBLL)
                        {
LABEL_68:
                          objc_autoreleasePoolPop(v12);
                          goto LABEL_69;
                        }
                        if (*(_BYTE *)(v5 + 3408))
                        {
                          v20 = objc_autoreleasePoolPush();
                          if (qword_10026DD20)
                            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: voip on going", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43);
                        }
                        else if (*(_BYTE *)(v5 + 3409))
                        {
                          v20 = objc_autoreleasePoolPush();
                          if (qword_10026DD20)
                            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: call on going", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43);
                        }
                        else if (*(_BYTE *)(v5 + 3410))
                        {
                          v20 = objc_autoreleasePoolPush();
                          if (qword_10026DD20)
                            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: media playing", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43);
                        }
                        else if (*(_BYTE *)(v5 + 3414))
                        {
                          v20 = objc_autoreleasePoolPush();
                          if (qword_10026DD20)
                            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Awdl RealTime is active", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43);
                        }
                        else
                        {
                          if (a2 == 32 || a2 == 47)
                            goto LABEL_68;
                          if (*(_BYTE *)(v5 + 3412))
                          {
                            v20 = objc_autoreleasePoolPush();
                            if (qword_10026DD20)
                              objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: on a moving network", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43);
                          }
                          else if (*(_BYTE *)(v5 + 5498))
                          {
                            v20 = objc_autoreleasePoolPush();
                            if (qword_10026DD20)
                              objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Airplay over Infra is active", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43);
                          }
                          else if (*(_BYTE *)(v5 + 5496))
                          {
                            v20 = objc_autoreleasePoolPush();
                            if (qword_10026DD20)
                              objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: in carplay", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43);
                          }
                          else if (*(int *)(v5 + 3392) >= 5)
                          {
                            v20 = objc_autoreleasePoolPush();
                            if (qword_10026DD20)
                              objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: already tried enough times", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43);
                          }
                          else
                          {
                            Current = CFAbsoluteTimeGetCurrent();
                            v15 = *(double *)(v5 + 3400);
                            if (v15 == 0.0 || (v16 = Current - v15, v16 > 30.0))
                            {
                              v17 = CFAbsoluteTimeGetCurrent();
                              v18 = *(double *)(v5 + 3416);
                              if (v18 == 0.0)
                                goto LABEL_68;
                              v19 = v17 - v18;
                              if (v19 > 10.0)
                                goto LABEL_68;
                              v44 = v19;
                              v20 = objc_autoreleasePoolPush();
                              if (qword_10026DD20)
                                objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: timeSinceLinkUp %f", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", *(_QWORD *)&v44);
                            }
                            else
                            {
                              v45 = v16;
                              v20 = objc_autoreleasePoolPush();
                              if (qword_10026DD20)
                                objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: timeSinceLastScan %f", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", *(_QWORD *)&v45);
                            }
                          }
                        }
                        goto LABEL_154;
                      }
                      if (*(_BYTE *)(v5 + 6616))
                      {
                        v13 = objc_autoreleasePoolPush();
                        if (qword_10026DD20)
                          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Transition ok when its within colocated scope", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition");
                        goto LABEL_67;
                      }
                      v29 = (const void *)sub_100029860(*(_QWORD *)(v5 + 64));
                      v30 = sub_10002A21C(v5, v29, 1);
                      v31 = v30;
                      if (a2 > 0x37 || ((1 << a2) & 0xF0800100000000) == 0)
                      {
                        if (v30 && sub_10001395C((uint64_t)v30))
                        {
LABEL_88:
                          CFRelease(v31);
LABEL_89:
                          if (a2 == 47
                            || a2 == 32
                            || a2 == 45
                            || (a2 & 0xFFFFFFFFFFFFFFFCLL) == 0x34
                            || *(_DWORD *)(v5 + 176) == 3)
                          {
                            goto LABEL_46;
                          }
                          v20 = objc_autoreleasePoolPush();
                          if (qword_10026DD20)
                            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: display is on", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition", v43);
LABEL_154:
                          objc_autoreleasePoolPop(v20);
LABEL_155:
                          objc_autoreleasePoolPop(v12);
LABEL_156:
                          v46 = NSLocalizedDescriptionKey;
                          v47 = CFSTR("Already associated, and network transition not permitted");
                          v25 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 37, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1));
                          v5 = 0;
                          goto LABEL_78;
                        }
                        if (*(_BYTE *)(v5 + 3413))
                        {
                          v32 = objc_autoreleasePoolPush();
                          if (qword_10026DD20)
                            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: network switched by user", "__WiFiDeviceManagerUnifiedAutoJoinIsStateSuitableForNetworkTransition");
                          objc_autoreleasePoolPop(v32);
                          if (v31)
                            CFRelease(v31);
                          goto LABEL_155;
                        }
                      }
                      if (!v31)
                        goto LABEL_89;
                      goto LABEL_88;
                    }
                    v21 = NSPOSIXErrorDomain;
                    v46 = NSLocalizedDescriptionKey;
                    v22 = CFSTR("Hosted AWDL session is active");
                  }
                  v47 = v22;
                  v26 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1);
                  v27 = v21;
                  v28 = 37;
                  goto LABEL_83;
                }
                v38 = NSPOSIXErrorDomain;
                v46 = NSLocalizedDescriptionKey;
                v47 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("MIS is enabled (wifi_count=%d, bt_count=%d, block_scan=%d, mis_disc_state=%d)"), *(unsigned __int8 *)(v5 + 5360), *(unsigned __int8 *)(v5 + 5361), *(unsigned __int8 *)(v5 + 5328), *(unsigned __int8 *)(v5 + 5221));
                goto LABEL_113;
              }
              v38 = NSPOSIXErrorDomain;
              v46 = NSLocalizedDescriptionKey;
              v39 = CFSTR("WiFi direct mode is enabled");
            }
            v47 = v39;
LABEL_113:
            v33 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1);
            v34 = v38;
            v35 = 37;
            goto LABEL_124;
          }
          v46 = NSLocalizedDescriptionKey;
          v47 = CFSTR("WiFi is OFF");
          v33 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1);
          v34 = NSPOSIXErrorDomain;
          v35 = 82;
LABEL_124:
          v25 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v34, v35, v33);
          v5 = 0;
          goto LABEL_79;
        }
        v36 = NSPOSIXErrorDomain;
        v46 = NSLocalizedDescriptionKey;
        v37 = CFSTR("Auto-join is disabled by user (and not in priority link setup)");
      }
      else
      {
        v36 = NSPOSIXErrorDomain;
        v46 = NSLocalizedDescriptionKey;
        v37 = CFSTR("Auto-join is disabled");
      }
      v47 = v37;
      v33 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1);
      v34 = v36;
      v35 = 1;
      goto LABEL_124;
    }
    v46 = NSLocalizedDescriptionKey;
    v47 = CFSTR("No auto-join manager configured");
    v33 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1);
    v34 = NSPOSIXErrorDomain;
    v35 = 6;
    goto LABEL_124;
  }
LABEL_80:
  objc_autoreleasePoolPop(v6);
}

void sub_1001418B8(uint64_t a1, void *a2, uint64_t a3, const __CFDictionary **a4, uint64_t a5)
{
  uint64_t *v8;
  void *v9;
  _WORD *v10;
  void *v11;
  const __CFDictionary **v12;
  uint64_t v13;
  const void *v14;
  _BOOL8 v15;
  NSError *v16;
  NSError *v17;
  uint64_t v18;
  NSErrorDomain v19;
  const __CFString *v20;
  NSDictionary *v21;
  NSErrorDomain v22;
  uint64_t v23;
  NSErrorDomain v24;
  const __CFString *v25;
  NSDictionary *v26;
  NSErrorDomain v27;
  uint64_t v28;
  NSErrorDomain v29;
  const __CFString *v30;
  NSErrorUserInfoKey v31;
  const __CFString *v32;

  v8 = *(uint64_t **)(a1 + 32);
  v9 = objc_autoreleasePoolPush();
  if (a5)
  {
    if (v8)
    {
      if (v8[1103])
      {
        if (a2)
        {
          v10 = sub_1000CCB10(a2, 0);
          if (v10)
          {
            v11 = v10;
            if (sub_100124B34((uint64_t)v8, v10, 1u))
            {
              if (!a4)
                goto LABEL_11;
              v12 = (const __CFDictionary **)sub_1000CCB10(objc_msgSend(a4, "matchingKnownNetworkProfile"), 0);
              if (v12)
              {
                a4 = v12;
                if (sub_1000AB8F4(v8[849], (const __CFDictionary **)v11, v12))
                {
                  v13 = v8[849];
                  v14 = (const void *)sub_100025C3C(v8[8]);
                  if (sub_1000AB9C8(v13, v14, a4, v11))
                  {
LABEL_11:
                    v15 = sub_100144B5C((uint64_t)v8, v11);
                    CFRelease(v11);
                    v16 = 0;
                    v17 = 0;
                    v18 = 1;
                    if (!a4)
                    {
LABEL_13:
                      (*(void (**)(uint64_t, uint64_t, _BOOL8, NSError *))(a5 + 16))(a5, v18, v15, v17);
                      goto LABEL_14;
                    }
LABEL_12:
                    CFRelease(a4);
                    v17 = v16;
                    goto LABEL_13;
                  }
                  v29 = NSPOSIXErrorDomain;
                  v31 = NSLocalizedDescriptionKey;
                  v30 = CFSTR("IP configuration not matching for SSID transition");
                }
                else
                {
                  v29 = NSPOSIXErrorDomain;
                  v31 = NSLocalizedDescriptionKey;
                  v30 = CFSTR("Known network profile private MAC policy not matching for SSID transition");
                }
                v32 = v30;
                v16 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v29, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1));
                CFRelease(v11);
                v15 = 0;
                v18 = 0;
                goto LABEL_12;
              }
              v31 = NSLocalizedDescriptionKey;
              v32 = CFSTR("Failed to translate CWFNetworkProfile to WiFiNetworkRef");
              v26 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
              v27 = NSPOSIXErrorDomain;
              v28 = 22;
            }
            else
            {
              v31 = NSLocalizedDescriptionKey;
              v32 = CFSTR("Known network profile not suitable for auto-join");
              v26 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
              v27 = NSPOSIXErrorDomain;
              v28 = 1;
            }
            v17 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v27, v28, v26);
            CFRelease(v11);
LABEL_25:
            v15 = 0;
            v18 = 0;
            goto LABEL_13;
          }
          v24 = NSPOSIXErrorDomain;
          v31 = NSLocalizedDescriptionKey;
          v25 = CFSTR("Failed to translate CWFNetworkProfile to WiFiNetworkRef");
        }
        else
        {
          v24 = NSPOSIXErrorDomain;
          v31 = NSLocalizedDescriptionKey;
          v25 = CFSTR("No known network specified");
        }
        v32 = v25;
        v21 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
        v22 = v24;
        v23 = 22;
LABEL_21:
        v17 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v22, v23, v21);
        goto LABEL_25;
      }
      v19 = NSPOSIXErrorDomain;
      v31 = NSLocalizedDescriptionKey;
      v20 = CFSTR("No auto-join manager configured");
    }
    else
    {
      v19 = NSPOSIXErrorDomain;
      v31 = NSLocalizedDescriptionKey;
      v20 = CFSTR("No device manager configured");
    }
    v32 = v20;
    v21 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
    v22 = v19;
    v23 = 6;
    goto LABEL_21;
  }
LABEL_14:
  objc_autoreleasePoolPop(v9);
}

uint64_t sub_100141CA4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _WORD *v8;
  _WORD *v9;
  const void *v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = objc_autoreleasePoolPush();
  if (!v5 || !*(_QWORD *)(v5 + 8824))
  {
    v7 = 0;
    goto LABEL_13;
  }
  v7 = 0;
  if (a2 && a3)
  {
    v8 = sub_1000CCB10(a2, 0);
    v9 = sub_1000CCB10(a3, 0);
    v10 = v9;
    if (v8 && v9)
    {
      if (*(_BYTE *)(v5 + 6632))
        v11 = sub_1000C8C90((uint64_t)v9, (uint64_t)v8, 0);
      else
        v11 = 0;
    }
    else
    {
      v11 = 0;
      v7 = 0;
      if (!v8)
      {
LABEL_11:
        if (v10)
          CFRelease(v10);
        goto LABEL_13;
      }
    }
    CFRelease(v8);
    v7 = v11;
    goto LABEL_11;
  }
LABEL_13:
  objc_autoreleasePoolPop(v6);
  return v7;
}

void sub_100141D84(uint64_t a1, void *a2, void (**a3)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  void *v10;
  int v11;
  char v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  void *v18;
  NSNumber *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *j;
  uint64_t v27;
  NSNumber *v28;
  NSNumber *v29;
  NSNumber *v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  const void *v35;
  int v36;
  void *v37;
  NSErrorDomain v38;
  const __CFString *v39;
  NSDictionary *v40;
  NSErrorDomain v41;
  uint64_t v42;
  NSError *v43;
  NSErrorDomain v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void (**v48)(_QWORD, _QWORD, _QWORD, _QWORD);
  id v49;
  id obj;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  const __CFString *v60;
  const __CFString *v61;
  const __CFString *v62;
  uint64_t v63;
  _QWORD v64[16];
  _QWORD v65[2];
  _QWORD v66[2];
  _QWORD v67[16];

  v5 = *(_QWORD *)(a1 + 32);
  v6 = objc_autoreleasePoolPush();
  if (!a3)
    goto LABEL_66;
  if (!v5)
  {
    v38 = NSPOSIXErrorDomain;
    v64[0] = NSLocalizedDescriptionKey;
    v39 = CFSTR("No device manager configured");
LABEL_72:
    v67[0] = v39;
    v40 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v67, v64, 1);
    v41 = v38;
    v42 = 6;
LABEL_74:
    v43 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v41, v42, v40);
    v33 = 0;
    goto LABEL_79;
  }
  if (!*(_QWORD *)(v5 + 8824))
  {
    v38 = NSPOSIXErrorDomain;
    v64[0] = NSLocalizedDescriptionKey;
    v39 = CFSTR("No auto-join manager configured");
    goto LABEL_72;
  }
  if (!a2)
  {
    v64[0] = NSLocalizedDescriptionKey;
    v67[0] = CFSTR("No scan parameters specified");
    v40 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v67, v64, 1);
    v41 = NSPOSIXErrorDomain;
    v42 = 22;
    goto LABEL_74;
  }
  v7 = *(_QWORD *)(v5 + 8928);
  if (v7)
  {
    (*(void (**)(uint64_t, NSError *, _QWORD, _QWORD))(v7 + 16))(v7, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 89, 0), 0, 0);
    _Block_release(*(const void **)(v5 + 8928));
    *(_QWORD *)(v5 + 8928) = 0;
  }
  if (_os_feature_enabled_impl("CoreWiFi", "WiFi6EMaxCompatibility"))
  {
    v8 = a2;
    v9 = sub_100031A74(*(_QWORD *)(v5 + 6792));
    v10 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: prefer 6E enabled %d", "__WiFiDeviceManagerUnifiedAutoJoinScanForNetworks", v9 == 0);
    objc_autoreleasePoolPop(v10);
    objc_msgSend(*(id *)(v5 + 8824), "setMaxCompatibilityEnabled:", v9 == 0);
    a2 = v8;
  }
  *(_QWORD *)(v5 + 8928) = _Block_copy(a3);

  *(_QWORD *)(v5 + 8936) = objc_msgSend(a2, "copy");
  v49 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v51 = sub_10012C188(v5, 0);
  v11 = sub_10012C418((_BYTE *)v5, 0);
  v47 = v6;
  v48 = a3;
  v46 = v5;
  if (*(_BYTE *)(v5 + 7056)
    && *(_BYTE *)(v5 + 5219)
    && *(unsigned __int8 *)(v5 + 5216) >= 0xFu
    && (*(_BYTE *)(v5 + 7057) & 4) != 0)
  {
    v37 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "AJScan: Disallowing 6Ghz channels due to Active 5GHz MIS session");
    objc_autoreleasePoolPop(v37);
    v12 = 0;
  }
  else
  {
    v12 = 1;
  }
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  obj = objc_msgSend(a2, "channels");
  v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v67, 16);
  if (v13)
  {
    v14 = v13;
    v15 = 0;
    v16 = *(_QWORD *)v57;
    do
    {
      for (i = 0; i != v14; i = (char *)i + 1)
      {
        if (*(_QWORD *)v57 != v16)
          objc_enumerationMutation(obj);
        v18 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * (_QWORD)i);
        if ((!v51 || (objc_msgSend(*(id *)(*((_QWORD *)&v56 + 1) + 8 * (_QWORD)i), "is2GHz") & 1) == 0)
          && (!v11 || (objc_msgSend(v18, "is5GHz") & 1) == 0)
          && ((v12 & 1) != 0 || (objc_msgSend(v18, "is6GHz") & 1) == 0))
        {
          if (!v15)
            v15 = +[NSMutableArray array](NSMutableArray, "array");
          v65[0] = CFSTR("CHANNEL");
          v19 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v18, "channel"));
          v65[1] = CFSTR("CHANNEL_FLAGS");
          v66[0] = v19;
          v66[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v18, "flags"));
          objc_msgSend(v15, "addObject:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v66, v65, 2));
        }
      }
      v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v67, 16);
    }
    while (v14);
  }
  else
  {
    v15 = 0;
  }
  if (objc_msgSend(v15, "count"))
  {
    objc_msgSend(v49, "setObject:forKeyedSubscript:", v15, CFSTR("SCAN_CHANNELS"));
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v20 = objc_msgSend(a2, "SSIDList");
    v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v52, v64, 16);
    a3 = v48;
    if (v21)
    {
      v22 = v21;
      v23 = 0;
      v24 = *(_QWORD *)v53;
      v25 = v46;
      do
      {
        for (j = 0; j != v22; j = (char *)j + 1)
        {
          if (*(_QWORD *)v53 != v24)
            objc_enumerationMutation(v20);
          v27 = *(_QWORD *)(*((_QWORD *)&v52 + 1) + 8 * (_QWORD)j);
          if (!v23)
            v23 = +[NSMutableArray array](NSMutableArray, "array");
          v62 = CFSTR("SSID_STR");
          v63 = v27;
          objc_msgSend(v23, "addObject:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v63, &v62, 1));
        }
        v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v52, v64, 16);
      }
      while (v22);
    }
    else
    {
      v23 = 0;
      v25 = v46;
    }
    if (objc_msgSend(v23, "count"))
    {
      v60 = CFSTR("SSID_STR");
      v61 = &stru_100238178;
      objc_msgSend(v23, "addObject:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v61, &v60, 1));
    }
    objc_msgSend(v49, "setObject:forKeyedSubscript:", v23, CFSTR("SCAN_SSID_LIST"));
    objc_msgSend(v49, "setObject:forKeyedSubscript:", objc_msgSend(a2, "SSID"), CFSTR("SSID_STR"));
    objc_msgSend(v49, "setObject:forKeyedSubscript:", objc_msgSend(a2, "BSSID"), CFSTR("BSSID"));
    v6 = v47;
    if (objc_msgSend(a2, "shortSSID"))
      v28 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(a2, "shortSSID"));
    else
      v28 = 0;
    objc_msgSend(v49, "setObject:forKeyedSubscript:", v28, CFSTR("SCAN_SHORT_SSID"));
    objc_msgSend(v49, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(a2, "scanType")), CFSTR("SCAN_TYPE"));
    objc_msgSend(v49, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(a2, "BSSType")), CFSTR("SCAN_BSS_TYPE"));
    objc_msgSend(v49, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(a2, "PHYMode")), CFSTR("SCAN_PHY_MODE"));
    objc_msgSend(v49, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(a2, "restTime")), CFSTR("SCAN_REST_TIME"));
    objc_msgSend(v49, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(a2, "dwellTime")), CFSTR("SCAN_DWELL_TIME"));
    objc_msgSend(v49, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(a2, "mergeScanResults")), CFSTR("SCAN_MERGE"));
    if (objc_msgSend(a2, "numberOfScans"))
      v29 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(a2, "numberOfScans"));
    else
      v29 = (NSNumber *)&off_1002532A8;
    objc_msgSend(v49, "setObject:forKeyedSubscript:", v29, CFSTR("SCAN_NUM_SCANS"));
    if (objc_msgSend(a2, "acceptableCacheAge") == (id)-1)
    {
      objc_msgSend(v49, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("CacheOnly"));
      v30 = (NSNumber *)&off_100253308;
    }
    else
    {
      v30 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)(unint64_t)objc_msgSend(a2, "acceptableCacheAge") / 1000.0);
    }
    objc_msgSend(v49, "setObject:forKeyedSubscript:", v30, CFSTR("SCAN_MAXAGE"));
    objc_msgSend(v49, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(a2, "scanFlags")), CFSTR("SCAN_FLAGS"));
    if (objc_msgSend(a2, "scanType") != 3 && objc_msgSend(a2, "acceptableCacheAge") != (id)-1)
    {
      v31 = *(_QWORD *)(v25 + 8912);
      if ((unint64_t)objc_msgSend(objc_msgSend(a2, "channels"), "count") + v31 >= 7)
      {
        sub_10001E764(*(_QWORD *)(v25 + 64), 0, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@/%@"), CFSTR("AutoJoin"), objc_msgSend(*(id *)(v25 + 8904), "UUIDString")), 0);
        sub_10001E764(*(_QWORD *)(v25 + 64), 9, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@/%@"), CFSTR("AutoJoin"), objc_msgSend(*(id *)(v25 + 8904), "UUIDString")), 0);
      }
    }
    v32 = malloc_type_malloc(0x28uLL, 0x10E0040573E0799uLL);
    v33 = v32;
    if (v32)
    {
      *v32 = v25;
      v32[1] = 0;
      v32[3] = 0;
      if (objc_msgSend(v23, "count"))
        v34 = 21;
      else
        v34 = 20;
      v35 = (const void *)sub_100025C3C(*(_QWORD *)(v25 + 64));
      v36 = sub_100018C78(v25, v35, v49, 10, (uint64_t)sub_100144C54, (uint64_t)v33, 0, v34);
      if (!v36)
        goto LABEL_66;
      v44 = (NSErrorDomain)CWFManagerErrorDomain;
      v45 = v36;
    }
    else
    {
      v44 = NSPOSIXErrorDomain;
      v45 = 12;
    }
    v43 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v44, v45, 0);
  }
  else
  {
    v43 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 1, 0);
    v33 = 0;
    v6 = v47;
    a3 = v48;
  }
LABEL_79:
  if (v43)
  {
    if (v33)
      free(v33);
    ((void (**)(_QWORD, NSError *, _QWORD, _QWORD))a3)[2](a3, v43, 0, 0);
  }
LABEL_66:
  objc_autoreleasePoolPop(v6);
}

void sub_100142778(uint64_t a1, void *a2, void (**a3)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  id v15;
  __CFArray *v16;
  __CFArray *v17;
  NSNumber *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  const void *v22;
  int v23;
  NSErrorDomain v24;
  const __CFString *v25;
  NSDictionary *v26;
  NSErrorDomain v27;
  uint64_t v28;
  NSError *v29;
  NSErrorDomain v30;
  uint64_t v31;
  _QWORD v32[16];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = objc_autoreleasePoolPush();
  if (!a3)
    goto LABEL_22;
  if (!v5)
  {
    v24 = NSPOSIXErrorDomain;
    *(_QWORD *)&v33 = NSLocalizedDescriptionKey;
    v25 = CFSTR("No device manager configured");
LABEL_25:
    v32[0] = v25;
    v26 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v32, &v33, 1);
    v27 = v24;
    v28 = 6;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(v5 + 8824))
  {
    v24 = NSPOSIXErrorDomain;
    *(_QWORD *)&v33 = NSLocalizedDescriptionKey;
    v25 = CFSTR("No auto-join manager configured");
    goto LABEL_25;
  }
  if (a2)
  {
    v7 = *(_QWORD *)(v5 + 8944);
    if (v7)
    {
      (*(void (**)(uint64_t, NSError *, _QWORD, _QWORD))(v7 + 16))(v7, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 89, 0), 0, 0);
      _Block_release(*(const void **)(v5 + 8944));
      *(_QWORD *)(v5 + 8944) = 0;
    }
    *(_QWORD *)(v5 + 8944) = _Block_copy(a3);

    *(_QWORD *)(v5 + 8952) = objc_msgSend(a2, "copy");
    v8 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
    objc_msgSend(v8, "setObject:forKeyedSubscript:", &off_1002532C0, CFSTR("GAS_PROTOCOL"));
    objc_msgSend(v8, "setObject:forKeyedSubscript:", objc_msgSend(a2, "ANQPElementIDList"), CFSTR("GAS_QUERY"));
    v9 = +[NSMutableArray array](NSMutableArray, "array");
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v10 = objc_msgSend(a2, "scanResults");
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v33, v32, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v34;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(_QWORD *)v34 != v13)
            objc_enumerationMutation(v10);
          v15 = objc_msgSend(*(id *)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)i), "scanRecord");
          if (v15)
            objc_msgSend(v9, "addObject:", v15);
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v33, v32, 16);
      }
      while (v12);
    }
    v16 = sub_100064608((const __CFArray *)v9);
    if (v16)
    {
      v17 = v16;
      objc_msgSend(v8, "setObject:forKeyedSubscript:", v16, CFSTR("GAS_NETWORKS"));
      if (objc_msgSend(a2, "acceptableCacheAge") == (id)-1)
      {
        objc_msgSend(v8, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("CacheOnly"));
        v18 = (NSNumber *)&off_100253308;
      }
      else
      {
        v18 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)(unint64_t)objc_msgSend(a2, "acceptableCacheAge") / 1000.0);
      }
      objc_msgSend(v8, "setObject:forKeyedSubscript:", v18, CFSTR("SCAN_MAXAGE"));
      CFRelease(v17);
      v19 = malloc_type_malloc(0x18uLL, 0xA00402214FCE6uLL);
      v20 = v19;
      if (v19)
      {
        v19[1] = 0;
        v19[2] = 0;
        *v19 = v5;
        v21 = *(_QWORD *)(v5 + 64);
        v22 = (const void *)sub_100025C3C(v21);
        v23 = sub_1000746DC(v21, v22, v8, 10, (uint64_t)sub_100144F68, (uint64_t)v20);
        if (!v23)
          goto LABEL_22;
        v30 = (NSErrorDomain)CWFManagerErrorDomain;
        v31 = v23;
      }
      else
      {
        v30 = NSPOSIXErrorDomain;
        v31 = 12;
      }
      v29 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v30, v31, 0);
      goto LABEL_32;
    }
    v27 = NSPOSIXErrorDomain;
    v28 = 12;
    v26 = 0;
  }
  else
  {
    *(_QWORD *)&v33 = NSLocalizedDescriptionKey;
    v32[0] = CFSTR("No ANQP parameters specified");
    v26 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v32, &v33, 1);
    v27 = NSPOSIXErrorDomain;
    v28 = 22;
  }
LABEL_28:
  v29 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v27, v28, v26);
  v20 = 0;
LABEL_32:
  if (v29)
  {
    if (v20)
      free(v20);
    ((void (**)(_QWORD, NSError *, _QWORD, _QWORD))a3)[2](a3, v29, 0, 0);
  }
LABEL_22:
  objc_autoreleasePoolPop(v6);
}

void sub_100142BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;
  _WORD *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  NSError *v15;
  _BOOL8 v16;
  NSErrorDomain v17;
  const __CFString *v18;
  NSDictionary *v19;
  NSErrorDomain v20;
  uint64_t v21;
  NSErrorDomain v22;
  const __CFString *v23;
  NSErrorUserInfoKey v24;
  const __CFString *v25;

  v7 = *(_QWORD *)(a1 + 32);
  v8 = objc_autoreleasePoolPush();
  if (a4)
  {
    if (v7)
    {
      if (*(_QWORD *)(v7 + 8824))
      {
        if (!a2)
        {
          v24 = NSLocalizedDescriptionKey;
          v25 = CFSTR("No join candidate specified");
          v15 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 22, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1));
LABEL_27:
          v16 = 0;
          goto LABEL_19;
        }
        if (objc_msgSend((id)a2, "matchingKnownNetworkProfile"))
        {
          v9 = sub_100145150((_WORD *)a2);
          if (sub_100124B34(v7, v9, 0))
          {
            v10 = sub_100125CA4(v7, v9, 0, 0);
            if ((uint64_t)objc_msgSend((id)a2, "RSSI") < v10)
            {
              v22 = NSPOSIXErrorDomain;
              v24 = NSLocalizedDescriptionKey;
              v23 = CFSTR("Below minimum RSSI threshold");
            }
            else
            {
              v11 = objc_msgSend(objc_msgSend((id)a2, "matchingKnownNetworkProfile"), "isPasspoint");
              if (v11 == objc_msgSend((id)a2, "isPasspoint"))
              {
                if (a3 == 39)
                {
                  v12 = *(_QWORD *)(v7 + 64);
                  v13 = (const void *)sub_100025C3C(v12);
                  v14 = sub_10002BF8C(v12, v13);
                  if (!v14 || !sub_10013E690(v7, (uint64_t)v14, (uint64_t)v9))
                  {
                    v24 = NSLocalizedDescriptionKey;
                    v25 = CFSTR("Colocated scope ID does not match current network");
                    v15 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1));
                    v16 = 0;
                    a2 = 0;
                    goto LABEL_15;
                  }
                }
                else
                {
                  v14 = 0;
                }
                v16 = sub_100144B5C(v7, v9);
                v15 = 0;
                a2 = 1;
LABEL_15:
                if (v14)
                  CFRelease(v14);
                if (!v9)
                  goto LABEL_19;
LABEL_18:
                CFRelease(v9);
LABEL_19:
                (*(void (**)(uint64_t, uint64_t, _BOOL8, NSError *))(a4 + 16))(a4, a2, v16, v15);
                goto LABEL_20;
              }
              v22 = NSPOSIXErrorDomain;
              v24 = NSLocalizedDescriptionKey;
              v23 = CFSTR("Join candidate does not match known network passpoint state");
            }
          }
          else
          {
            v22 = NSPOSIXErrorDomain;
            v24 = NSLocalizedDescriptionKey;
            v23 = CFSTR("Join candidate not suitable for auto-join");
          }
          v25 = v23;
          v15 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v22, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1));
          a2 = 0;
          v16 = 0;
          if (!v9)
            goto LABEL_19;
          goto LABEL_18;
        }
        v24 = NSLocalizedDescriptionKey;
        v25 = CFSTR("No matching known network specified");
        v19 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1);
        v20 = NSPOSIXErrorDomain;
        v21 = 22;
LABEL_26:
        v15 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v20, v21, v19);
        a2 = 0;
        goto LABEL_27;
      }
      v17 = NSPOSIXErrorDomain;
      v24 = NSLocalizedDescriptionKey;
      v18 = CFSTR("No auto-join manager configured");
    }
    else
    {
      v17 = NSPOSIXErrorDomain;
      v24 = NSLocalizedDescriptionKey;
      v18 = CFSTR("No device manager configured");
    }
    v25 = v18;
    v19 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1);
    v20 = v17;
    v21 = 6;
    goto LABEL_26;
  }
LABEL_20:
  objc_autoreleasePoolPop(v8);
}

uint64_t sub_100143004(uint64_t a1, _WORD *a2, _WORD *a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _WORD *v8;
  _WORD *v9;
  const void *v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = objc_autoreleasePoolPush();
  if (!v5 || !*(_QWORD *)(v5 + 8824))
  {
    v7 = 0;
    goto LABEL_13;
  }
  v7 = 0;
  if (a2 && a3)
  {
    v8 = sub_100145150(a2);
    v9 = sub_100145150(a3);
    v10 = v9;
    if (v8 && v9)
    {
      if (*(_BYTE *)(v5 + 6632))
        v11 = sub_1000C8C90((uint64_t)v9, (uint64_t)v8, 0);
      else
        v11 = 0;
    }
    else
    {
      v11 = 0;
      v7 = 0;
      if (!v8)
      {
LABEL_11:
        if (v10)
          CFRelease(v10);
        goto LABEL_13;
      }
    }
    CFRelease(v8);
    v7 = v11;
    goto LABEL_11;
  }
LABEL_13:
  objc_autoreleasePoolPop(v6);
  return v7;
}

void sub_1001430DC(uint64_t a1, void *a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v5;
  void *v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  uint64_t v9;
  const void *v10;
  __CFArray *Mutable;
  unsigned int v12;
  const void *v13;
  void *v14;
  const void *v15;
  void *v16;
  const void *v17;
  CFNumberRef v18;
  NSNumber *v19;
  NSNumber *v20;
  NSNumber *v21;
  uint64_t v22;
  unint64_t v23;
  NSErrorDomain v24;
  const __CFString *v25;
  NSDictionary *v26;
  NSErrorDomain v27;
  uint64_t v28;
  NSErrorDomain v29;
  const __CFString *v30;
  NSError *v31;
  NSErrorUserInfoKey v32;
  const __CFString *v33;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = objc_autoreleasePoolPush();
  if (!a3)
    goto LABEL_32;
  if (!v5)
  {
    v24 = NSPOSIXErrorDomain;
    v32 = NSLocalizedDescriptionKey;
    v25 = CFSTR("No device manager configured");
LABEL_41:
    v33 = v25;
    v26 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1);
    v27 = v24;
    v28 = 6;
    goto LABEL_46;
  }
  if (!*(_QWORD *)(v5 + 8824))
  {
    v24 = NSPOSIXErrorDomain;
    v32 = NSLocalizedDescriptionKey;
    v25 = CFSTR("No auto-join manager configured");
    goto LABEL_41;
  }
  if (a2)
  {
    if (objc_msgSend(a2, "scanResult"))
    {
      v7 = (const __CFDictionary *)sub_100145150(objc_msgSend(a2, "scanResult"));
      if (v7)
      {
        v8 = v7;
        sub_10011EB98((const __CFDictionary *)objc_msgSend(objc_msgSend(a2, "scanResult"), "scanRecord"), v7);
        v9 = *(_QWORD *)(v5 + 8840);
        if (v9)
        {
          (*(void (**)(uint64_t, NSError *))(v9 + 16))(v9, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 89, 0));
          _Block_release(*(const void **)(v5 + 8840));
          v10 = *(const void **)(v5 + 8832);
          if (v10)
            CFRelease(v10);
        }
        *(_QWORD *)(v5 + 8840) = _Block_copy(a3);
        *(_QWORD *)(v5 + 8832) = CFRetain(v8);
        Mutable = *(__CFArray **)(v5 + 1112);
        if (!Mutable)
        {
          Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
          *(_QWORD *)(v5 + 1112) = Mutable;
        }
        if (*(_QWORD *)(v5 + 8920))
        {
          sub_10001E764(*(_QWORD *)(v5 + 64), 0, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@/%@"), CFSTR("AutoJoin"), objc_msgSend(*(id *)(v5 + 8904), "UUIDString")), 0);
          sub_10001E764(*(_QWORD *)(v5 + 64), 9, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@/%@"), CFSTR("AutoJoin"), objc_msgSend(*(id *)(v5 + 8904), "UUIDString")), 0);
          Mutable = *(__CFArray **)(v5 + 1112);
        }
        CFArrayRemoveAllValues(Mutable);
        if (objc_msgSend(a2, "forceBSSID"))
          sub_10002C478((uint64_t)v8, CFSTR("FORCE_BSSID"), kCFBooleanTrue);
        if (objc_msgSend(a2, "bandPreference"))
          sub_10002C478((uint64_t)v8, CFSTR("BAND_PREFERENCE"), +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(a2, "bandPreference")));
        if (objc_msgSend(a2, "colocatedScopeID"))
          sub_10002C478((uint64_t)v8, CFSTR("COLOCATED_NETWORK_SCOPE_ID"), objc_msgSend(a2, "colocatedScopeID"));
        if (objc_msgSend(a2, "has6GHzOnlyBSS"))
        {
          v12 = sub_100017A54((uint64_t)v8, CFSTR("ASSOC_FLAGS"));
          sub_10002B698((uint64_t)v8, CFSTR("ASSOC_FLAGS"), v12 | 0x100000);
        }
        v13 = (const void *)sub_100025C3C(*(_QWORD *)(v5 + 64));
        v14 = sub_10002A21C(v5, v13, 1);
        if (v14)
        {
          v15 = v14;
          v16 = (void *)sub_10002BE64((uint64_t)v14, CFSTR("SSID"));
          v17 = sub_10002BE64((uint64_t)v8, CFSTR("SSID"));
          if (v16 && v17 && objc_msgSend(v16, "isEqual:", v17))
          {
            v18 = CFNumberCreate(0, kCFNumberIntType, (const void *)(v5 + 3852));
            if (objc_msgSend(a2, "bandPreference"))
            {
              if (objc_msgSend(a2, "bandPreference"))
                v19 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(a2, "bandPreference"));
              else
                v19 = 0;
              v22 = v5;
              v23 = 0;
              v21 = 0;
            }
            else
            {
              v20 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(objc_msgSend(objc_msgSend(a2, "scanResult"), "channel"), "channel"));
              v21 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(objc_msgSend(objc_msgSend(a2, "scanResult"), "channel"), "band"));
              v22 = v5;
              v23 = (unint64_t)v20;
              v19 = 0;
            }
            sub_100117EC0(v22, CFSTR("FF:FF:FF:FF:FF:FF"), v23, v21, v19, v18);
            if (v18)
              CFRelease(v18);
            CFRelease(v15);
            *(_DWORD *)(v5 + 3280) = 0;
            a3[2](a3, 0);
            goto LABEL_31;
          }
          CFRelease(v15);
        }
        CFArrayAppendValue(*(CFMutableArrayRef *)(v5 + 1112), v8);
        *(_QWORD *)(v5 + 1128) = 0;
        *(_QWORD *)(v5 + 1120) = 0;
        *(_DWORD *)(v5 + 3280) = sub_100130A04(v5);
LABEL_31:
        CFRelease(v8);
        goto LABEL_32;
      }
      v27 = NSPOSIXErrorDomain;
      v28 = 22;
      v26 = 0;
      goto LABEL_46;
    }
    v29 = NSPOSIXErrorDomain;
    v32 = NSLocalizedDescriptionKey;
    v30 = CFSTR("No network specified");
  }
  else
  {
    v29 = NSPOSIXErrorDomain;
    v32 = NSLocalizedDescriptionKey;
    v30 = CFSTR("No assoc parameters specified");
  }
  v33 = v30;
  v26 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1);
  v27 = v29;
  v28 = 22;
LABEL_46:
  v31 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v27, v28, v26);
  if (v31)
    ((void (**)(_QWORD, NSError *))a3)[2](a3, v31);
LABEL_32:
  objc_autoreleasePoolPop(v6);
}

void sub_10014365C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  NSError *v13;
  uint64_t v14;
  NSErrorDomain v15;
  const __CFString *v16;
  NSDictionary *v17;
  NSErrorDomain v18;
  uint64_t v19;
  NSErrorDomain v20;
  const __CFString *v21;
  NSErrorDomain v22;
  NSString *v23;
  const __CFString *v24;
  const void *v25;
  NSErrorUserInfoKey v26;
  const __CFString *v27;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = objc_autoreleasePoolPush();
  if (!a3)
    goto LABEL_31;
  if (!v4)
  {
    v15 = NSPOSIXErrorDomain;
    v26 = NSLocalizedDescriptionKey;
    v16 = CFSTR("No device manager configured");
LABEL_34:
    v27 = v16;
    v13 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v15, 6, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1));
    v7 = 0;
    goto LABEL_27;
  }
  if (!*(_QWORD *)(v4 + 8824))
  {
    v15 = NSPOSIXErrorDomain;
    v26 = NSLocalizedDescriptionKey;
    v16 = CFSTR("No auto-join manager configured");
    goto LABEL_34;
  }
  v6 = *(unsigned int *)(v4 + 6804);
  if (v6 < 3)
    v7 = v6 + 1;
  else
    v7 = 0;
  if (!-[WiFiUserInteractionMonitor isSetupCompleted](+[WiFiUserInteractionMonitor sharedInstance](WiFiUserInteractionMonitor, "sharedInstance"), "isSetupCompleted"))
  {
    v26 = NSLocalizedDescriptionKey;
    v27 = CFSTR("Device setup not completed");
    v17 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
    v18 = NSPOSIXErrorDomain;
    v19 = 6;
LABEL_50:
    v13 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v18, v19, v17);
    goto LABEL_27;
  }
  if (!*(_DWORD *)(v4 + 6804))
  {
    v26 = NSLocalizedDescriptionKey;
    v27 = CFSTR("autoHotspotMode==Never");
    v17 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
    v18 = NSPOSIXErrorDomain;
    v19 = 1;
    goto LABEL_50;
  }
  if (sub_10007788C(*(_QWORD *)(v4 + 64)))
  {
    v20 = NSPOSIXErrorDomain;
    v26 = NSLocalizedDescriptionKey;
    v21 = CFSTR("IPv4/IPv6 network path already available on another interface");
LABEL_44:
    v27 = v21;
    v17 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
    v18 = v20;
    v19 = 37;
    goto LABEL_50;
  }
  if (*(_BYTE *)(v4 + 7024))
  {
    v22 = NSPOSIXErrorDomain;
    v23 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("AutoHotspot disabled via flags (0x%X)"), *(unsigned __int8 *)(v4 + 7024), NSLocalizedDescriptionKey);
LABEL_48:
    v27 = (const __CFString *)v23;
    goto LABEL_49;
  }
  if (!sub_10011BB88(v4))
  {
    if ((_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin") & 1) == 0
      && CFAbsoluteTimeGetCurrent() - *(double *)(v4 + 6952) <= 15.0)
    {
      v22 = NSPOSIXErrorDomain;
      v23 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("AutoHotspot triggered within %d seconds of previous link down"), 15, NSLocalizedDescriptionKey);
      goto LABEL_48;
    }
    v8 = *(unsigned __int8 *)(v4 + 6800);
    if (_os_feature_enabled_impl("WiFiManager", "AskToJoinPersonalHotspotBanner"))
    {
      if (-[WiFiUserInteractionMonitor isPersonalHotspotRecommendationAllowed](+[WiFiUserInteractionMonitor sharedInstance](WiFiUserInteractionMonitor, "sharedInstance"), "isPersonalHotspotRecommendationAllowed"))
      {
        goto LABEL_19;
      }
    }
    else if (v8)
    {
      goto LABEL_19;
    }
    if (*(_DWORD *)(v4 + 6804) == 1)
    {
      v22 = NSPOSIXErrorDomain;
      v26 = NSLocalizedDescriptionKey;
      v24 = CFSTR("No foreground networking app and autoHotspotMode==Ask");
      goto LABEL_42;
    }
  }
LABEL_19:
  if (-[WiFiUserInteractionMonitor isAnyCallInProgress](+[WiFiUserInteractionMonitor sharedInstance](WiFiUserInteractionMonitor, "sharedInstance"), "isAnyCallInProgress"))
  {
    v22 = NSPOSIXErrorDomain;
    v26 = NSLocalizedDescriptionKey;
    v24 = CFSTR("Call in progress");
LABEL_42:
    v27 = v24;
LABEL_49:
    v17 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
    v18 = v22;
    v19 = 35;
    goto LABEL_50;
  }
  v9 = *(_DWORD *)(v4 + 3280);
  if (v9 == 12)
  {
    v22 = NSPOSIXErrorDomain;
    v26 = NSLocalizedDescriptionKey;
    v24 = CFSTR("Association in progress");
    goto LABEL_42;
  }
  if ((v9 - 17) <= 3)
  {
    v22 = NSPOSIXErrorDomain;
    v26 = NSLocalizedDescriptionKey;
    v24 = CFSTR("AutoHotspot connection in progress");
    goto LABEL_42;
  }
  if (*(_BYTE *)(v4 + 6896))
  {
    v20 = NSPOSIXErrorDomain;
    v26 = NSLocalizedDescriptionKey;
    v21 = CFSTR("Already associated to hotspot");
    goto LABEL_44;
  }
  v10 = *(_QWORD *)(v4 + 64);
  v11 = (const void *)sub_100025C3C(v10);
  v12 = sub_10002BF8C(v10, v11);
  if (v12)
  {
    v25 = v12;
    v27 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Already associated to %@"), sub_10002B088(v12), NSLocalizedDescriptionKey);
    v13 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 37, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1));
    CFRelease(v25);
    goto LABEL_27;
  }
  if ((_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin") & 1) == 0
    && CFAbsoluteTimeGetCurrent() - *(double *)(v4 + 6944) <= 180.0)
  {
    v22 = NSPOSIXErrorDomain;
    v23 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("AutoHotspot triggered within %d seconds of previous browse attempt"), 180, NSLocalizedDescriptionKey);
    goto LABEL_48;
  }
  v13 = 0;
LABEL_27:
  if (v13)
    v14 = 0;
  else
    v14 = v7;
  (*(void (**)(uint64_t, uint64_t, NSError *))(a3 + 16))(a3, v14, v13);
LABEL_31:
  objc_autoreleasePoolPop(v5);
}

void sub_100143C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  id v10;
  NSErrorDomain v11;
  const __CFString *v12;
  CFIndex v13;
  uint64_t v15;
  id v16;
  void *v17;
  double v18;
  CFIndex v20;
  id v21;
  const void *v22;
  CFIndex v23;
  const void *ValueAtIndex;
  const void *v25;
  const void *v26;
  NSError *v27;
  uint64_t v28;
  void *v29;
  const __CFDate *v30;
  const __CFDate *v31;
  void *v32;
  NSDictionary *v33;
  NSErrorDomain v34;
  uint64_t v35;
  double Current;
  void *v37;
  NSErrorDomain v38;
  const __CFString *v39;
  NSErrorUserInfoKey v40;
  const __CFString *v41;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = objc_autoreleasePoolPush();
  if (a3)
  {
    if (v5)
    {
      if (*(_QWORD *)(v5 + 8824))
      {
        if (!a2)
        {
          v40 = NSLocalizedDescriptionKey;
          v41 = CFSTR("No hotspot specified");
          v33 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1);
          v34 = NSPOSIXErrorDomain;
          v35 = 22;
          goto LABEL_45;
        }
        Count = CFArrayGetCount(*(CFArrayRef *)(v5 + 6912));
        v8 = CFArrayGetCount(*(CFArrayRef *)(v5 + 6920));
        v9 = CFArrayGetCount(*(CFArrayRef *)(v5 + 6928));
        v10 = objc_msgSend(*(id *)(v5 + 6936), "count");
        if (Count >= 1)
        {
          if (objc_msgSend(*(id *)(v5 + 6744), "isEqualHotspotDevices:compareTo:", CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 6912), 0), a2))goto LABEL_7;
          v13 = 1;
          do
          {
            if (Count == v13)
              goto LABEL_12;
          }
          while (!objc_msgSend(*(id *)(v5 + 6744), "isEqualHotspotDevices:compareTo:", CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 6912), v13++), a2));
          if (Count > v13 - 1)
          {
LABEL_7:
            v11 = NSPOSIXErrorDomain;
            v40 = NSLocalizedDescriptionKey;
            v12 = CFSTR("Hotspot suppressed/canceled by user");
            goto LABEL_43;
          }
        }
LABEL_12:
        if (v10)
        {
          v15 = ((_DWORD)v10 - 1);
          if ((int)v10 - 1 >= 0)
          {
            do
            {
              v16 = objc_msgSend(*(id *)(v5 + 6936), "objectAtIndexedSubscript:", v15);
              if (v16
                && (v17 = v16, objc_msgSend(v16, "hotspotDevice"))
                && (-[NSDate timeIntervalSinceDate:](+[NSDate date](NSDate, "date"), "timeIntervalSinceDate:", objc_msgSend(v17, "lastNotifiedAt")), v18 <= 1800.0))
              {
                if (objc_msgSend(*(id *)(v5 + 6744), "isEqualHotspotDevices:compareTo:", objc_msgSend(v17, "hotspotDevice"), a2))
                {
                  v11 = NSPOSIXErrorDomain;
                  v40 = NSLocalizedDescriptionKey;
                  v12 = CFSTR("Hotspot not responded by user");
                  goto LABEL_43;
                }
              }
              else
              {
                objc_msgSend(*(id *)(v5 + 6936), "removeObjectAtIndex:", v15);
              }
            }
            while (v15-- >= 1);
          }
        }
        if (v8 >= 1)
        {
          v20 = 0;
          while (!objc_msgSend(*(id *)(v5 + 6744), "isEqualHotspotDevices:compareTo:", CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 6920), v20), a2))
          {
            if (v8 == ++v20)
              goto LABEL_27;
          }
          v29 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Hotspot blacklisted: Peer declined \n", "__WiFiDeviceManagerUnifiedAutoJoinAllowHotspot");
          objc_autoreleasePoolPop(v29);
          v11 = NSPOSIXErrorDomain;
          v40 = NSLocalizedDescriptionKey;
          v12 = CFSTR("Hotspot declined/rejected by peer");
          goto LABEL_43;
        }
LABEL_27:
        if (v9)
        {
          v21 = objc_msgSend(*(id *)(v5 + 6744), "getHotspotDeviceName:", a2);
          if (v9 >= 1)
          {
            v22 = v21;
            v23 = 0;
            while (1)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 6928), v23);
              if (ValueAtIndex)
              {
                v25 = ValueAtIndex;
                v26 = sub_10002B088(ValueAtIndex);
                if (CFEqual(v22, v26))
                  break;
              }
              if (v9 == ++v23)
                goto LABEL_33;
            }
            v30 = (const __CFDate *)sub_10002BE64((uint64_t)v25, CFSTR("lastDisconnectTimestampKey"));
            if (!v30 || (v31 = v30, sub_1000C4C88((uint64_t)v25)))
            {
              v32 = objc_autoreleasePoolPush();
              if (qword_10026DD20)
                objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Hotspot %@ denylisted until user Join\n", "__WiFiDeviceManagerUnifiedAutoJoinAllowHotspot", sub_10002B088(v25));
              objc_autoreleasePoolPop(v32);
              v11 = NSPOSIXErrorDomain;
              v40 = NSLocalizedDescriptionKey;
              v12 = CFSTR("Hotspot deauthed, disabled until next user join");
LABEL_43:
              v41 = v12;
LABEL_44:
              v33 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1);
              v34 = v11;
              v35 = 1;
LABEL_45:
              v27 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v34, v35, v33);
              v28 = 0;
              goto LABEL_46;
            }
            Current = CFAbsoluteTimeGetCurrent();
            if (Current - CFDateGetAbsoluteTime(v31) < 3600.0)
            {
              v37 = objc_autoreleasePoolPush();
              if (qword_10026DD20)
                objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Hotspot denylisted due to Deauth on %@\n", "__WiFiDeviceManagerUnifiedAutoJoinAllowHotspot", v31);
              objc_autoreleasePoolPop(v37);
              v11 = NSPOSIXErrorDomain;
              v40 = NSLocalizedDescriptionKey;
              v41 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Hotspot deauthed/disconnected within past %d seconds"), 3600);
              goto LABEL_44;
            }
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v5 + 6928), v23);
          }
        }
LABEL_33:
        if (objc_msgSend(*(id *)(v5 + 6744), "isHotspotDeviceSupportADHS:", a2))
        {
          v27 = 0;
          v28 = 1;
LABEL_46:
          (*(void (**)(uint64_t, uint64_t, NSError *))(a3 + 16))(a3, v28, v27);
          goto LABEL_47;
        }
        v11 = NSPOSIXErrorDomain;
        v40 = NSLocalizedDescriptionKey;
        v12 = CFSTR("ADHS not supported");
        goto LABEL_43;
      }
      v38 = NSPOSIXErrorDomain;
      v40 = NSLocalizedDescriptionKey;
      v39 = CFSTR("No auto-join manager configured");
    }
    else
    {
      v38 = NSPOSIXErrorDomain;
      v40 = NSLocalizedDescriptionKey;
      v39 = CFSTR("No device manager configured");
    }
    v41 = v39;
    v33 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1);
    v34 = v38;
    v35 = 6;
    goto LABEL_45;
  }
LABEL_47:
  objc_autoreleasePoolPop(v6);
}

void sub_100144230(uint64_t a1, uint64_t a2, unint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v9;
  void *v10;
  void (*v11)(_QWORD *, NSError *, _QWORD);
  _QWORD *v12;
  NSError *v13;
  uint64_t v14;
  NSObject *v15;
  dispatch_time_t v16;
  NSErrorDomain v17;
  const __CFString *v18;
  NSErrorUserInfoKey v19;
  const __CFString *v20;

  v9 = *(_QWORD *)(a1 + 32);
  v10 = objc_autoreleasePoolPush();
  if (!a5)
    goto LABEL_15;
  if (!v9)
  {
    v17 = NSPOSIXErrorDomain;
    v19 = NSLocalizedDescriptionKey;
    v18 = CFSTR("No device manager configured");
LABEL_19:
    v20 = v18;
    v13 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v17, 6, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
    if (!v13)
      goto LABEL_15;
    v11 = (void (*)(_QWORD *, NSError *, _QWORD))a5[2];
    v12 = a5;
LABEL_10:
    v11(v12, v13, 0);
    goto LABEL_15;
  }
  if (!*(_QWORD *)(v9 + 8824))
  {
    v17 = NSPOSIXErrorDomain;
    v19 = NSLocalizedDescriptionKey;
    v18 = CFSTR("No auto-join manager configured");
    goto LABEL_19;
  }
  if (!*(_QWORD *)(v9 + 6744))
  {
    v17 = NSPOSIXErrorDomain;
    v19 = NSLocalizedDescriptionKey;
    v18 = CFSTR("No hotspot interface manager configured");
    goto LABEL_19;
  }
  if (CFAbsoluteTimeGetCurrent() - *(double *)(v9 + 6848) <= (double)a3 && objc_msgSend(*(id *)(v9 + 6840), "count"))
  {
    ((void (*)(_QWORD *, _QWORD, id))a5[2])(a5, 0, objc_msgSend(*(id *)(v9 + 6840), "copy"));
    goto LABEL_15;
  }
  if ((a4 & 1) != 0)
  {
    v11 = (void (*)(_QWORD *, NSError *, _QWORD))a5[2];
    v12 = a5;
    v13 = 0;
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(v9 + 8864);
  if (v14)
  {
    (*(void (**)(uint64_t, NSError *, _QWORD))(v14 + 16))(v14, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 89, 0), 0);
    _Block_release(*(const void **)(v9 + 8864));
  }
  *(_QWORD *)(v9 + 8864) = _Block_copy(a5);
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v9 + 6840));
  v15 = *(NSObject **)(v9 + 6808);
  v16 = dispatch_time(0, 1000000000 * a2);
  dispatch_source_set_timer(v15, v16, 0xFFFFFFFFFFFFFFFFLL, 0);
  *(_DWORD *)(v9 + 3280) = 16;
  objc_msgSend(*(id *)(v9 + 6744), "startBrowsing");
  *(CFAbsoluteTime *)(v9 + 6960) = CFAbsoluteTimeGetCurrent();
  ++*(_DWORD *)(v9 + 6172);
LABEL_15:
  objc_autoreleasePoolPop(v10);
}

void sub_1001444A0(uint64_t a1, void *a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v5;
  void *v6;
  const void *v7;
  NSErrorDomain v8;
  const __CFString *v9;
  NSDictionary *v10;
  NSErrorDomain v11;
  uint64_t v12;
  NSErrorDomain v13;
  const __CFString *v14;
  NSError *v15;
  NSErrorUserInfoKey v16;
  const __CFString *v17;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = objc_autoreleasePoolPush();
  if (!a3)
    goto LABEL_9;
  if (!v5)
  {
    v8 = NSPOSIXErrorDomain;
    v16 = NSLocalizedDescriptionKey;
    v9 = CFSTR("No device manager configured");
LABEL_12:
    v17 = v9;
    v10 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
    v11 = v8;
    v12 = 6;
    goto LABEL_16;
  }
  if (!*(_QWORD *)(v5 + 8824))
  {
    v8 = NSPOSIXErrorDomain;
    v16 = NSLocalizedDescriptionKey;
    v9 = CFSTR("No auto-join manager configured");
    goto LABEL_12;
  }
  if (sub_10007788C(*(_QWORD *)(v5 + 64)))
  {
    v13 = NSPOSIXErrorDomain;
    v16 = NSLocalizedDescriptionKey;
    v14 = CFSTR("IPv4/IPv6 network path already available on another interface");
  }
  else
  {
    if (a2)
    {
      v7 = *(const void **)(v5 + 8856);
      if (v7)
      {
        _Block_release(v7);

      }
      *(_QWORD *)(v5 + 8856) = _Block_copy(a3);
      *(_QWORD *)(v5 + 8848) = a2;
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v5 + 6840));
      CFArrayAppendValue(*(CFMutableArrayRef *)(v5 + 6840), a2);
      *(_DWORD *)(v5 + 6888) = 2;
      *(_QWORD *)(v5 + 6880) = 0x300000002;
      *(_BYTE *)(v5 + 6968) = 0;
      *(_DWORD *)(v5 + 3280) = sub_10012B2AC(v5);
      goto LABEL_9;
    }
    v13 = NSPOSIXErrorDomain;
    v16 = NSLocalizedDescriptionKey;
    v14 = CFSTR("No hotspot specified");
  }
  v17 = v14;
  v10 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
  v11 = v13;
  v12 = 22;
LABEL_16:
  v15 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v11, v12, v10);
  if (v15)
    ((void (**)(_QWORD, NSError *))a3)[2](a3, v15);
LABEL_9:
  objc_autoreleasePoolPop(v6);
}

void sub_1001446C4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  _WORD *v13;
  __CFString **v14;
  double v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;

  v7 = *(_QWORD *)(a1 + 32);
  v8 = objc_autoreleasePoolPush();
  if (v7)
  {
    v9 = *(void **)(v7 + 8824);
    if (v9)
    {
      if (a4 != 1 || *(_QWORD *)(v7 + 8872))
      {
        if (a4)
        {
          objc_msgSend(+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"), "autoJoinUpdatedWithState:interfaceName:", a4, sub_100025C3C(*(_QWORD *)(v7 + 64)));
        }
        else
        {
          v12 = objc_msgSend(v9, "metric");
          objc_msgSend(+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"), "autoJoinEndedWithResult:interfaceName:", objc_msgSend(v12, "result"), sub_100025C3C(*(_QWORD *)(v7 + 64)));
          if (objc_msgSend(v12, "result"))
          {
            v13 = sub_100145150(objc_msgSend(v12, "network"));
            sub_100135D8C(v7, CFSTR("autoJoinSuccess"), v13, (uint64_t)v12);
            if (v13)
              CFRelease(v13);
          }
          else
          {
            if (objc_msgSend(v12, "error"))
            {
              v14 = off_10022FC98;
            }
            else if (objc_msgSend(v12, "wasAlreadyAssociated"))
            {
              v14 = off_10022FC70;
            }
            else
            {
              v14 = off_10022FC88;
            }
            sub_100135D8C(v7, *v14, 0, (uint64_t)v12);
          }
          if (_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
            v15 = 30.0;
          else
            v15 = 14.0;
          v16 = objc_msgSend(v12, "network");
          if (v16)
          {
            v17 = v16;
            if (objc_msgSend(objc_msgSend(v16, "matchingKnownNetworkProfile"), "addReason") == (id)8
              && !objc_msgSend(objc_msgSend(v17, "matchingKnownNetworkProfile"), "lastJoinedBySystemAt")
              && v15 > (double)((unint64_t)objc_msgSend(v12, "duration") / 0x3E8))
            {
              v18 = sub_1000CE200(v17);
              v19 = objc_autoreleasePoolPush();
              if (qword_10026DD20)
                objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s Updating 6G standalone property after iCloud sync on %@", "__WiFiDeviceManagerUnifiedAutoJoinCheckForStandalone6G", v18);
              objc_autoreleasePoolPop(v19);
              sub_1001055B4(v7, v18);
              if (v18)
                CFRelease(v18);
            }
          }
          sub_100127948(v7);
          if (*(_DWORD *)(v7 + 3280) == 16)
            sub_1000F48F0(v7, 0);
        }
      }
      else
      {
        v10 = *(void **)(v7 + 8904);
        if (v10)
        {
          sub_10001E764(*(_QWORD *)(v7 + 64), 0, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@/%@"), CFSTR("AutoJoin"), objc_msgSend(v10, "UUIDString")), 0);
          sub_10001E764(*(_QWORD *)(v7 + 64), 9, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@/%@"), CFSTR("AutoJoin"), objc_msgSend(*(id *)(v7 + 8904), "UUIDString")), 0);
          v11 = *(void **)(v7 + 8904);
        }
        else
        {
          v11 = 0;
        }
        *(_QWORD *)(v7 + 8920) = 0;
        *(_QWORD *)(v7 + 8912) = 0;

        *(_QWORD *)(v7 + 8904) = objc_msgSend(a2, "copy");
        objc_msgSend(+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"), "autoJoinStartedWithTrigger:interfaceName:", objc_msgSend(a3, "trigger"), sub_100025C3C(*(_QWORD *)(v7 + 64)));
        sub_100135D8C(v7, CFSTR("kWiFiAutoJoinStatusBegan"), 0, 0);
      }
      *(_QWORD *)(v7 + 8872) = a4;
      *(_QWORD *)(v7 + 8880) = objc_msgSend(a3, "trigger");
    }
  }
  objc_autoreleasePoolPop(v8);
}

void sub_100144A50(uint64_t a1, void *a2, uint64_t a3)
{
  _QWORD *v5;
  void *v6;
  void *v7;
  _WORD *v8;
  const void *v9;
  CFDictionaryRef *v10;
  CFDictionaryRef *v11;
  void *v12;
  _WORD *v13;

  v5 = *(_QWORD **)(a1 + 32);
  v6 = objc_autoreleasePoolPush();
  v7 = 0;
  if (a2 && a3 && v5)
  {
    if (!v5[1103] || !v5[565] || (v8 = sub_1000CCB10(a2, 0)) == 0)
    {
      v7 = 0;
      goto LABEL_14;
    }
    v9 = v8;
    v10 = (CFDictionaryRef *)sub_10002B170((uint64_t)v5, v8, 0);
    if (!v10)
    {
      v7 = 0;
LABEL_13:
      CFRelease(v9);
      goto LABEL_14;
    }
    v11 = v10;
    v7 = sub_100026664(v10);
    if (v7 && (v12 = (void *)(*(uint64_t (**)(uint64_t, void *))(a3 + 16))(a3, v7)) != 0)
    {
      v13 = sub_1000CCB10(v12, 0);
      if (v13)
        ((void (*)(_QWORD *, _WORD *, _QWORD))v5[565])(v5, v13, v5[566]);
    }
    else
    {
      v13 = 0;
    }
    CFRelease(v9);
    CFRelease(v11);
    v9 = v13;
    if (v13)
      goto LABEL_13;
  }
LABEL_14:

  objc_autoreleasePoolPop(v6);
}

BOOL sub_100144B5C(uint64_t a1, const void *a2)
{
  _BOOL8 v3;
  __CFArray *Mutable;

  if (!a1)
    return 0;
  v3 = 0;
  if (a2 && *(_QWORD *)(a1 + 8824))
  {
    Mutable = *(__CFArray **)(a1 + 1112);
    if (!Mutable)
    {
      Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      *(_QWORD *)(a1 + 1112) = Mutable;
    }
    CFArrayRemoveAllValues(Mutable);
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3560));
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3568));
    objc_msgSend(*(id *)(a1 + 3656), "clearScanResultsForAutoJoinSessionReset");
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 1112), a2);
    sub_10012F2B0(a1);
    v3 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3568)) > 0
      || CFArrayGetCount(*(CFArrayRef *)(a1 + 3560)) > 0
      || !CFArrayGetCount(*(CFArrayRef *)(a1 + 1112));
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3560));
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3568));
    objc_msgSend(*(id *)(a1 + 3656), "clearScanResultsForAutoJoinSessionReset");
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1112));
  }
  return v3;
}

void sub_100144C54(uint64_t a1, uint64_t a2, const __CFArray *a3, const __CFDictionary *a4, int a5, uint64_t *a6)
{
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const __CFBoolean *Value;
  unsigned int v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  CFIndex v20;
  void *v21;
  const void *ValueAtIndex;
  id v23;
  __CFArray *v24;
  char *v25;
  uint64_t v26;
  NSError *v27;
  id v28;
  const __CFBoolean *v29;
  CFRange v30;

  v10 = objc_autoreleasePoolPush();
  if (a6)
  {
    v11 = *a6;
    v12 = objc_autoreleasePoolPush();
    if (v11)
    {
      if (*(_QWORD *)(v11 + 8928))
      {
        v13 = *(void **)(v11 + 8936);
        if (v13)
        {
          if (a4)
          {
            Value = (const __CFBoolean *)CFDictionaryGetValue(a4, CFSTR("CompletedUsingCache"));
            v13 = *(void **)(v11 + 8936);
          }
          else
          {
            Value = kCFBooleanFalse;
          }
          v15 = objc_msgSend(v13, "scanType");
          if (a5 || (v17 = +[NSMutableArray array](NSMutableArray, "array"), !a3))
          {
            v16 = 0;
          }
          else
          {
            v18 = v17;
            v29 = Value;
            v19 = v12;
            if (CFArrayGetCount(a3) >= 1)
            {
              v20 = 0;
              do
              {
                v21 = objc_autoreleasePoolPush();
                ValueAtIndex = CFArrayGetValueAtIndex(a3, v20);
                if (ValueAtIndex)
                {
                  v23 = sub_100027D10((uint64_t)ValueAtIndex);
                  if (v23)
                    objc_msgSend(v18, "addObject:", v23);
                }
                objc_autoreleasePoolPop(v21);
                ++v20;
              }
              while (CFArrayGetCount(a3) > v20);
            }
            v16 = CWFFilteredScanResults(v18, *(_QWORD *)(v11 + 8936));
            v24 = *(__CFArray **)(v11 + 1104);
            v30.length = CFArrayGetCount(a3);
            v30.location = 0;
            CFArrayAppendArray(v24, a3, v30);
            v12 = v19;
            Value = v29;
          }
          if (v15 == 3 || Value != kCFBooleanFalse)
          {
            v25 = *(char **)(v11 + 8912);
          }
          else
          {
            v25 = (char *)objc_msgSend(objc_msgSend(*(id *)(v11 + 8936), "channels"), "count") + *(_QWORD *)(v11 + 8912);
            *(_QWORD *)(v11 + 8912) = v25;
            if (!*(_BYTE *)(v11 + 9060))
              *(_BYTE *)(v11 + 9060) = 1;
          }
          if ((unint64_t)v25 >= 6 && *(_QWORD *)(v11 + 8920))
          {
            sub_10001E764(*(_QWORD *)(v11 + 64), 0, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@/%@"), CFSTR("AutoJoin"), objc_msgSend(*(id *)(v11 + 8904), "UUIDString")), 0);
            sub_10001E764(*(_QWORD *)(v11 + 64), 9, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@/%@"), CFSTR("AutoJoin"), objc_msgSend(*(id *)(v11 + 8904), "UUIDString")), 0);
          }
          v26 = *(_QWORD *)(v11 + 8928);
          if (a5)
            v27 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CWFManagerErrorDomain, a5, 0);
          else
            v27 = 0;
          v28 = 0;
          if (v15 != 3 && Value != kCFBooleanTrue)
            v28 = objc_msgSend(*(id *)(v11 + 8936), "channels");
          (*(void (**)(uint64_t, NSError *, uint64_t, id))(v26 + 16))(v26, v27, v16, v28);
          _Block_release(*(const void **)(v11 + 8928));
          *(_QWORD *)(v11 + 8928) = 0;

          *(_QWORD *)(v11 + 8936) = 0;
        }
      }
    }
    objc_autoreleasePoolPop(v12);
    free(a6);
  }
  objc_autoreleasePoolPop(v10);
}

void sub_100144F68(uint64_t a1, uint64_t a2, const __CFArray *a3, const __CFDictionary *a4, int a5, uint64_t *a6)
{
  void *v10;
  uint64_t v11;
  void *v12;
  const __CFBoolean *Value;
  uint64_t v14;
  NSError *v15;
  uint64_t v16;
  id v17;
  void *v18;
  CFIndex v19;
  void *v20;
  const void *ValueAtIndex;
  id v22;
  id v23;

  v10 = objc_autoreleasePoolPush();
  if (a6)
  {
    if (a3 && CFArrayGetCount(a3))
      sub_1001399D0(*a6, a3);
    v11 = *a6;
    v12 = objc_autoreleasePoolPush();
    if (!v11 || !*(_QWORD *)(v11 + 8944) || !*(_QWORD *)(v11 + 8952))
      goto LABEL_26;
    if (a4)
    {
      Value = (const __CFBoolean *)CFDictionaryGetValue(a4, CFSTR("CompletedUsingCache"));
      if (a5)
      {
LABEL_10:
        v14 = *(_QWORD *)(v11 + 8944);
        v15 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CWFManagerErrorDomain, a5, 0);
        v16 = 0;
LABEL_22:
        if (Value == kCFBooleanTrue)
          v23 = 0;
        else
          v23 = objc_msgSend(*(id *)(v11 + 8952), "scanResults");
        (*(void (**)(uint64_t, NSError *, uint64_t, id))(v14 + 16))(v14, v15, v16, v23);
        _Block_release(*(const void **)(v11 + 8944));
        *(_QWORD *)(v11 + 8944) = 0;

        *(_QWORD *)(v11 + 8952) = 0;
LABEL_26:
        objc_autoreleasePoolPop(v12);
        free(a6);
        goto LABEL_27;
      }
    }
    else
    {
      Value = kCFBooleanFalse;
      if (a5)
        goto LABEL_10;
    }
    v17 = +[NSMutableArray array](NSMutableArray, "array");
    if (a3)
    {
      v18 = v17;
      if (CFArrayGetCount(a3) >= 1)
      {
        v19 = 0;
        do
        {
          v20 = objc_autoreleasePoolPush();
          ValueAtIndex = CFArrayGetValueAtIndex(a3, v19);
          if (ValueAtIndex)
          {
            v22 = sub_100027D10((uint64_t)ValueAtIndex);
            if (v22)
              objc_msgSend(v18, "addObject:", v22);
          }
          objc_autoreleasePoolPop(v20);
          ++v19;
        }
        while (CFArrayGetCount(a3) > v19);
      }
      v16 = CWFFilteredANQPResults(v18, *(_QWORD *)(v11 + 8952));
    }
    else
    {
      v16 = 0;
    }
    v15 = 0;
    v14 = *(_QWORD *)(v11 + 8944);
    goto LABEL_22;
  }
LABEL_27:
  objc_autoreleasePoolPop(v10);
}

_WORD *sub_100145150(_WORD *a1)
{
  void *v2;
  id v3;
  void *v4;
  const __CFDictionary *v5;
  CFDictionaryRef v6;
  CFDictionaryRef v7;
  CFDictionaryRef v8;
  id v9;

  v2 = objc_autoreleasePoolPush();
  if (a1)
  {
    v3 = objc_msgSend(a1, "matchingKnownNetworkProfile");
    if (!v3)
      goto LABEL_9;
    v4 = v3;
    a1 = objc_msgSend(a1, "scanRecord");
    if (!a1)
      goto LABEL_8;
    v5 = (const __CFDictionary *)sub_1000CCB10(v4, objc_msgSend(v4, "properties"));
    if (!v5)
    {
LABEL_9:
      a1 = 0;
      goto LABEL_8;
    }
    v6 = v5;
    v7 = sub_1000173C0((uint64_t)v5);
    if (v7)
    {
      v8 = v7;
      v9 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
      objc_msgSend(v9, "addEntriesFromDictionary:", v8);
      objc_msgSend(v9, "addEntriesFromDictionary:", a1);
      a1 = sub_10002B314((uint64_t)kCFAllocatorDefault, v9);
      sub_1000C38BC((uint64_t)a1, (uint64_t)v6);
      CFRelease(v6);
      v6 = v8;
    }
    else
    {
      a1 = 0;
    }
    CFRelease(v6);
  }
LABEL_8:
  objc_autoreleasePoolPop(v2);
  return a1;
}

uint64_t sub_100145244(uint64_t a1, const void *a2, uint64_t a3, void *a4, _QWORD *a5)
{
  uint64_t v9;
  void *v10;
  void (*v11)(_QWORD, const void *, void *, uint64_t, _QWORD);
  unsigned int v12;
  int v13;
  unsigned int v14;
  void *v15;
  NSDictionary *v16;
  NSDictionary *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *i;
  uint64_t v27;
  id v28;
  NSMutableDictionary *v29;
  void *v30;
  const void *v31;
  void (*v32)(_QWORD, const void *, void *, uint64_t, _QWORD);
  NSUserDefaults *v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  const void *v38;
  void *v39;
  uint64_t v40;
  id v41;
  _QWORD v42[5];
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  void (*v56)(uint64_t);
  id v57;
  _BYTE v58[128];
  _BYTE v59[128];

  v9 = a1;
  v10 = (void *)sub_100079324(a1);
  if (a5)
  {
    v11 = (void (*)(_QWORD, const void *, void *, uint64_t, _QWORD))a5[1];
    if (v11)
      v11(*a5, a2, v10, a3, a5[3]);
  }
  if (CFArrayGetCount((CFArrayRef)v10))
  {
    v12 = objc_msgSend(objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("SENSING_PARAMS_SUBMIT_METRIC")), "BOOLValue");
    if (_os_feature_enabled_impl("WiFiManager", "Sensing"))
    {
      v13 = MGGetBoolAnswer(CFSTR("InternalBuild"));
      v14 = v10 ? v12 : 0;
      if (v13 && v14)
      {
        v39 = a4;
        v15 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Sensing %s: submitMetric: %d", "__WiFiDeviceManagerSensingSubmitReport", 1);
        objc_autoreleasePoolPop(v15);
        v34 = +[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults");
        v16 = -[NSUserDefaults dictionaryForKey:](v34, "dictionaryForKey:", CFSTR("WIFI_SENSING"));
        v17 = v16;
        if (v16)
        {
          objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v16, "objectForKeyedSubscript:", CFSTR("SENSING_RESULTS_DATA_TIMESTAMP")), "doubleValue");
          v19 = v18;
          v20 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Sensing lastSensingSubmitTimestamp %lf", v19);
          objc_autoreleasePoolPop(v20);
        }
        v52 = 0;
        v53 = &v52;
        v54 = 0x3052000000;
        v55 = sub_10002FAA8;
        v56 = sub_10002F9A4;
        v57 = (id)0xAAAAAAAAAAAAAAAALL;
        v35 = a3;
        v36 = a5;
        v37 = v9;
        v38 = a2;
        v57 = objc_alloc_init((Class)NSMutableDictionary);
        v48 = 0u;
        v49 = 0u;
        v50 = 0u;
        v51 = 0u;
        v21 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v48, v59, 16);
        if (v21)
        {
          v40 = *(_QWORD *)v49;
          do
          {
            v22 = 0;
            v41 = v21;
            do
            {
              if (*(_QWORD *)v49 != v40)
                objc_enumerationMutation(v10);
              v23 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * (_QWORD)v22);
              v44 = 0u;
              v45 = 0u;
              v46 = 0u;
              v47 = 0u;
              v24 = objc_msgSend(&off_1002540D0, "countByEnumeratingWithState:objects:count:", &v44, v58, 16);
              if (v24)
              {
                v25 = *(_QWORD *)v45;
                do
                {
                  for (i = 0; i != v24; i = (char *)i + 1)
                  {
                    if (*(_QWORD *)v45 != v25)
                      objc_enumerationMutation(&off_1002540D0);
                    v27 = *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)i);
                    v28 = objc_msgSend(objc_msgSend(v23, "objectForKeyedSubscript:", v27), "componentsSeparatedByString:", CFSTR(":"));
                    if (objc_msgSend(v28, "count") == (id)6)
                      objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend(v28, "objectAtIndexedSubscript:", 5), v27);
                    else
                      objc_msgSend(v23, "setObject:forKeyedSubscript:", CFSTR("NA"), v27);
                  }
                  v24 = objc_msgSend(&off_1002540D0, "countByEnumeratingWithState:objects:count:", &v44, v58, 16);
                }
                while (v24);
              }
              v22 = (char *)v22 + 1;
            }
            while (v22 != v41);
            v21 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v48, v59, 16);
          }
          while (v21);
        }
        objc_msgSend((id)v53[5], "setObject:forKey:", v10, CFSTR("SENSING_RESULTS_DATA"));
        if (objc_msgSend(v39, "objectForKeyedSubscript:", CFSTR("SENSING_PARAMS_ACTIVITY_LABELS")))
          objc_msgSend((id)v53[5], "setObject:forKey:", objc_msgSend(v39, "objectForKeyedSubscript:", CFSTR("SENSING_PARAMS_ACTIVITY_LABELS")), CFSTR("SENSING_PARAMS_ACTIVITY_LABELS"));
        if (objc_msgSend(v39, "objectForKeyedSubscript:", CFSTR("SENSING_PARAMS_PLACE_LABELS")))
          objc_msgSend((id)v53[5], "setObject:forKey:", objc_msgSend(v39, "objectForKeyedSubscript:", CFSTR("SENSING_PARAMS_PLACE_LABELS")), CFSTR("SENSING_PARAMS_PLACE_LABELS"));
        if (objc_msgSend(v39, "objectForKeyedSubscript:", CFSTR("SENSING_PARAMS_ACTIVITY_VALUE")))
          objc_msgSend((id)v53[5], "setObject:forKey:", objc_msgSend(v39, "objectForKeyedSubscript:", CFSTR("SENSING_PARAMS_ACTIVITY_VALUE")), CFSTR("SENSING_PARAMS_ACTIVITY_VALUE"));
        if (objc_msgSend(v39, "objectForKeyedSubscript:", CFSTR("SENSING_PARAMS_COMMENT")))
          objc_msgSend((id)v53[5], "setObject:forKey:", objc_msgSend(v39, "objectForKeyedSubscript:", CFSTR("SENSING_PARAMS_COMMENT")), CFSTR("SENSING_PARAMS_COMMENT"));
        v43 = 0;
        v42[0] = _NSConcreteStackBlock;
        v42[1] = 3221225472;
        v42[2] = sub_1001458CC;
        v42[3] = &unk_100231E68;
        v42[4] = &v52;
        v9 = v37;
        a2 = v38;
        a5 = v36;
        a3 = v35;
        if (+[OSALog createForSubmission:metadata:options:error:writing:](OSALog, "createForSubmission:metadata:options:error:writing:", CFSTR("235"), 0, 0, &v43, v42))
        {
          v29 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v17);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v29, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent()), CFSTR("SENSING_RESULTS_DATA_TIMESTAMP"));
          -[NSUserDefaults setObject:forKey:](v34, "setObject:forKey:", v29, CFSTR("WIFI_SENSING"));
          v30 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Sensing submit - updating the last submitted timestamp %@", v29);
        }
        else
        {
          v30 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "WiFiSensing Failed to write 235 report: %@", objc_msgSend(v43, "localizedDescription"));
        }
        objc_autoreleasePoolPop(v30);
        v31 = (const void *)v53[5];
        if (v31)
        {
          CFRelease(v31);
          v53[5] = 0;
        }
        _Block_object_dispose(&v52, 8);
      }
    }
  }
  if (a5)
  {
    v32 = (void (*)(_QWORD, const void *, void *, uint64_t, _QWORD))a5[1];
    if (v32)
      v32(*a5, a2, v10, a3, a5[3]);
    CFRelease((CFTypeRef)a5[2]);
    free(a5);
  }
  sub_100079300(v9, 0);
  sub_1000792F0(v9);
  return sub_100079140(v9, a2);
}

void sub_10014588C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

void sub_1001458CC(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;

  v3 = 0;
  objc_msgSend(a2, "writeData:", +[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), 0, &v3));
  v2 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Sensing Finished submitting Record\n");
  objc_autoreleasePoolPop(v2);
}

uint64_t sub_100145954(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void sub_10014595C(uint64_t a1)
{
  ssize_t v2;
  ssize_t v3;
  ssize_t v4;
  _BYTE *v5;
  uint64_t v6;
  NSString *v7;
  NSString *v8;
  const void *v9;
  void *v10;
  char __str[16];
  _BYTE __b[1024];

  memset(__b, 170, sizeof(__b));
  v2 = read(*(_DWORD *)(a1 + 40), __b, 0x400uLL);
  if (v2 >= 1)
  {
    v3 = v2;
    v4 = 0;
    v5 = __b;
    while (1)
    {
      v6 = *(unsigned int *)&__b[v4];
      if (v4 + v6 > (unint64_t)v3)
        break;
      if (v6 <= 0x2F)
      {
        v10 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: not enough bytes read for event data", "__WiFiDeviceManagerSetupKernelEventMonitor_block_invoke_2");
        goto LABEL_17;
      }
      memset(__str, 170, sizeof(__str));
      snprintf(__str, 0x10uLL, "%s%u", v5 + 32, *((_DWORD *)v5 + 7));
      v7 = +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", __str, 4);
      if (!v7)
      {
        v10 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: null ifName", "__WiFiDeviceManagerSetupKernelEventMonitor_block_invoke_2");
        goto LABEL_17;
      }
      if (*((_DWORD *)v5 + 5) == 1)
      {
        v8 = v7;
        v9 = (const void *)sub_100029860(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
        if (CFEqual(v9, v8))
          sub_100145B44(*(_QWORD *)(a1 + 32));
      }
      v4 += *(unsigned int *)&__b[v4];
      v5 = &__b[v4];
      if (v4 >= v3)
        return;
    }
    v10 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: not enough bytes read", "__WiFiDeviceManagerSetupKernelEventMonitor_block_invoke_2");
LABEL_17:
    objc_autoreleasePoolPop(v10);
  }
}

void sub_100145B44(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  void *v4;
  int v5;
  int v6;
  void *v7;
  void *v8;
  __int128 v9;
  __int128 v10;

  v9 = 0u;
  v10 = 0u;
  if (a1)
  {
    v2 = (_BYTE *)(a1 + 9000);
    if (!*(_BYTE *)(a1 + 9000))
    {
      v3 = sub_100029860(*(_QWORD *)(a1 + 64));
      if (v3)
      {
        v4 = (void *)v3;
        v5 = socket(30, 2, 0);
        if ((v5 & 0x80000000) == 0)
        {
          v6 = v5;
          objc_msgSend(v4, "getCString:maxLength:encoding:", &v9, 16, 4);
          if (!ioctl(v6, 0xC0206911uLL, &v9) && (v10 & 1) != 0)
          {
            *v2 = 1;
            sub_1000FB144(a1);
            v7 = objc_autoreleasePoolPush();
            if (qword_10026DD20)
              objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: interface went up, starting auto-join", "__WiFiDeviceManagerUpdateInterfaceFlags");
            objc_autoreleasePoolPop(v7);
            sub_1000285E4(a1, 0x26uLL);
          }
          close(v6);
        }
      }
      else
      {
        v8 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: null ifName", "__WiFiDeviceManagerUpdateInterfaceFlags");
        objc_autoreleasePoolPop(v8);
      }
    }
  }
}

void sub_100145CE8(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  void *v9;
  int v10;
  void *v11;
  NSObject *v12;
  void *v13;
  _QWORD block[5];

  v6 = *a6;
  if (*a6)
  {
    *(_BYTE *)(v6 + 3760) = 0;
    v9 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "[NWTRANSIT]: %s: network %@, error %d", "__WiFiDeviceManagerColocatedNetworkTransitionAssociationCallback", sub_10002B088(a3), a5);
    objc_autoreleasePoolPop(v9);
    v10 = sub_10007946C(*(_QWORD *)(v6 + 64));
    if ((_DWORD)a5 && v10)
    {
      ++dword_10026DB78;
      v11 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "[NWTRANSIT]: Transition Attempt Failed. Retry after %d time", 30);
      objc_autoreleasePoolPop(v11);
      if (dword_10026DB78 <= 3)
      {
        CFRetain((CFTypeRef)v6);
        v12 = *(NSObject **)(v6 + 240);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100145E74;
        block[3] = &unk_10022EA38;
        block[4] = v6;
        dispatch_async(v12, block);
      }
    }
    else
    {
      dword_10026DB78 = 0;
    }
  }
  else
  {
    v13 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: manager is NULL", "__WiFiDeviceManagerColocatedNetworkTransitionAssociationCallback");
    objc_autoreleasePoolPop(v13);
  }
}

void sub_100145E74(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  dispatch_time_t v4;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2[30])
  {
    v3 = v2[471];
    v4 = dispatch_time(0, 30000000000);
    dispatch_source_set_timer(v3, v4, 0xFFFFFFFFFFFFFFFFLL, 0);
    v2 = *(_QWORD **)(a1 + 32);
  }
  CFRelease(v2);
}

uint64_t sub_100145ECC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  const void *v4;

  v2 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Dispatching join for =%@", *(_QWORD *)(a1 + 32));
  objc_autoreleasePoolPop(v2);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = (const void *)sub_100025C3C(*(_QWORD *)(v3 + 64));
  return sub_10010AD4C(v3, v4, *(void **)(a1 + 32), 0, 0, (uint64_t)sub_100123100, 0, 14);
}

void sub_100145F58(uint64_t a1)
{
  __CFString *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD v6[3];

  v2 = (__CFString *)sub_100029860(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 7368), "addFaultEvent:forInterface:", 25, sub_100029860(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64)));
  if (!v2 || !-[__CFString length](v2, "length"))
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Invalid interfaceName %@ reason %lu", "__WiFiDeviceManagerHandleSiriTimedOutNotification_block_invoke", v2, 25);
    objc_autoreleasePoolPop(v3);
    v2 = CFSTR("UnknownInterface");
  }
  v5[0] = kWAMessageKeyFaultDate;
  v6[0] = +[NSDate date](NSDate, "date");
  v5[1] = kWAMessageKeyFaultName;
  v4 = WiFiUsageFaultReasonStringMap(25);
  v5[2] = kWAMessageKeyFaultInterface;
  v6[1] = v4;
  v6[2] = v2;
  sub_100063478(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 3));
}

void sub_10014609C(uint64_t a1)
{
  __CFString *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD v6[3];

  v2 = (__CFString *)sub_100029860(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 7368), "addFaultEvent:forInterface:", 26, sub_100029860(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64)));
  if (!v2 || !-[__CFString length](v2, "length"))
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Invalid interfaceName %@ reason %lu", "__WiFiDeviceManagerHandleApsdTimedOutNotification_block_invoke", v2, 26);
    objc_autoreleasePoolPop(v3);
    v2 = CFSTR("UnknownInterface");
  }
  v5[0] = kWAMessageKeyFaultDate;
  v6[0] = +[NSDate date](NSDate, "date");
  v5[1] = kWAMessageKeyFaultName;
  v4 = WiFiUsageFaultReasonStringMap(26);
  v5[2] = kWAMessageKeyFaultInterface;
  v6[1] = v4;
  v6[2] = v2;
  sub_100063478(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 3));
}

void sub_1001461E0(uint64_t a1)
{
  __CFString *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD v6[3];

  v2 = (__CFString *)sub_100029860(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 7368), "addFaultEvent:forInterface:", 30, sub_100029860(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64)));
  if (!v2 || !-[__CFString length](v2, "length"))
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Invalid interfaceName %@ reason %lu", "__WiFiDeviceManagerHandleAirplayConnectionStallNotification_block_invoke", v2, 30);
    objc_autoreleasePoolPop(v3);
    v2 = CFSTR("UnknownInterface");
  }
  v5[0] = kWAMessageKeyFaultDate;
  v6[0] = +[NSDate date](NSDate, "date");
  v5[1] = kWAMessageKeyFaultName;
  v4 = WiFiUsageFaultReasonStringMap(30);
  v5[2] = kWAMessageKeyFaultInterface;
  v6[1] = v4;
  v6[2] = v2;
  sub_100063478(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 3));
}

void sub_100146324(uint64_t a1)
{
  __CFString *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD v6[3];

  v2 = (__CFString *)sub_100029860(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 7368), "addFaultEvent:forInterface:", 31, v2);
  if (!v2 || !-[__CFString length](v2, "length"))
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Invalid interfaceName %@ reason %lu", "__WiFiDeviceManagerHandleAirplayBufferedAudioUnderrunNotification_block_invoke", v2, 31);
    objc_autoreleasePoolPop(v3);
    v2 = CFSTR("UnknownInterface");
  }
  v5[0] = kWAMessageKeyFaultDate;
  v6[0] = +[NSDate date](NSDate, "date");
  v5[1] = kWAMessageKeyFaultName;
  v4 = WiFiUsageFaultReasonStringMap(31);
  v5[2] = kWAMessageKeyFaultInterface;
  v6[1] = v4;
  v6[2] = v2;
  sub_100063478(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 3));
}

void sub_10014645C(uint64_t a1)
{
  __CFString *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD v6[3];

  v2 = (__CFString *)sub_100029860(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 7368), "addFaultEvent:forInterface:", 32, v2);
  if (!v2 || !-[__CFString length](v2, "length"))
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Invalid interfaceName %@ reason %lu", "__WiFiDeviceManagerHandleAirplayRealtimeAudioUnderrunNotification_block_invoke", v2, 32);
    objc_autoreleasePoolPop(v3);
    v2 = CFSTR("UnknownInterface");
  }
  v5[0] = kWAMessageKeyFaultDate;
  v6[0] = +[NSDate date](NSDate, "date");
  v5[1] = kWAMessageKeyFaultName;
  v4 = WiFiUsageFaultReasonStringMap(32);
  v5[2] = kWAMessageKeyFaultInterface;
  v6[1] = v4;
  v6[2] = v2;
  sub_100063478(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 3));
}

uint64_t sub_10014765C()
{
  uint64_t result;

  result = qword_10026DB80;
  if (!qword_10026DB80)
  {
    pthread_once(&stru_10026CCF0, (void (*)(void))sub_100147698);
    return qword_10026DB80;
  }
  return result;
}

uint64_t sub_100147698()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass(&unk_100232330);
  qword_10026DB80 = result;
  return result;
}

char *sub_1001476BC(uint64_t a1, uint64_t a2)
{
  char *Instance;
  char *v5;
  const __CFString *v6;

  if (!&_EAPOLControlKeyCreate)
    return 0;
  if (!qword_10026DB80)
    pthread_once(&stru_10026CCF0, (void (*)(void))sub_100147698);
  Instance = (char *)_CFRuntimeCreateInstance(a1);
  v5 = Instance;
  if (Instance)
  {
    *((_OWORD *)Instance + 5) = 0u;
    *((_OWORD *)Instance + 6) = 0u;
    *((_OWORD *)Instance + 3) = 0u;
    *((_OWORD *)Instance + 4) = 0u;
    *((_OWORD *)Instance + 1) = 0u;
    *((_OWORD *)Instance + 2) = 0u;
    *((_QWORD *)Instance + 2) = a2;
    v6 = (const __CFString *)sub_100029860(a2);
    CFStringGetCString(v6, v5 + 24, 16, 0);
  }
  return v5;
}

uint64_t sub_100147764(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    *(_QWORD *)(result + 56) = a2;
    *(_QWORD *)(result + 64) = a3;
  }
  return result;
}

void sub_100147770(uint64_t a1, NSObject *a2)
{
  const __SCDynamicStore *v3;
  void *v4;
  const __CFString *v5;
  const __CFString *v6;
  void *v7;
  SCDynamicStoreContext context;
  char __str[16];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[31];

  if (a1 && a2)
  {
    *(_QWORD *)(a1 + 48) = a2;
    v3 = *(const __SCDynamicStore **)(a1 + 40);
    if (!v3)
    {
      v22 = 0u;
      memset(v23, 0, sizeof(v23));
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v10 = 0u;
      v11 = 0u;
      *(_OWORD *)__str = 0u;
      context.version = 0;
      memset(&context.retain, 0, 24);
      context.info = (void *)a1;
      snprintf(__str, 0xFFuLL, "WiFiDeviceEAP:%p", *(const void **)(a1 + 16));
      v5 = CFStringCreateWithCString(kCFAllocatorDefault, __str, 0);
      if (!v5)
        return;
      v6 = v5;
      *(_QWORD *)(a1 + 40) = SCDynamicStoreCreate(kCFAllocatorDefault, v5, (SCDynamicStoreCallBack)sub_100147910, &context);
      CFRelease(v6);
      if (!*(_QWORD *)(a1 + 40))
        return;
      sub_10014799C(a1);
      if (!SCDynamicStoreSetDisconnectCallBack(*(_QWORD *)(a1 + 40), sub_100147A14))
      {
        v7 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Error subscribing to the dynamic store disconnect event.");
        objc_autoreleasePoolPop(v7);
      }
      v3 = *(const __SCDynamicStore **)(a1 + 40);
      a2 = *(NSObject **)(a1 + 48);
    }
    if (!SCDynamicStoreSetDispatchQueue(v3, a2))
    {
      v4 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Error setting dynamic store queue.");
      objc_autoreleasePoolPop(v4);
    }
  }
}

void sub_100147910(int a1, CFArrayRef theArray, uint64_t a3)
{
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  const __CFString *v8;
  const __CFString *v9;

  if (*(_DWORD *)(a3 + 96))
  {
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v6 = Count;
      for (i = 0; i != v6; ++i)
      {
        if (CFArrayGetValueAtIndex(theArray, i))
        {
          v8 = (const __CFString *)EAPOLControlKeyCopyInterface();
          if (v8)
          {
            v9 = v8;
            sub_10014886C(a3, v8);
            CFRelease(v9);
          }
        }
      }
    }
  }
}

void sub_10014799C(uint64_t a1)
{
  const __CFArray *v2;
  void *values;

  values = (void *)EAPOLControlKeyCreate(a1 + 24);
  v2 = CFArrayCreate(0, (const void **)&values, 1, &kCFTypeArrayCallBacks);
  if (values)
  {
    CFRelease(values);
    values = 0;
  }
  SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 40), v2, 0);
  if (v2)
    CFRelease(v2);
}

void sub_100147A14(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    sub_10014799C(a2);
  }
  else
  {
    v2 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Cannot reconnect to the dynamic store - info is NULL");
    objc_autoreleasePoolPop(v2);
  }
}

uint64_t sub_100147A64(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (*(_QWORD *)(result + 48))
    {
      result = SCDynamicStoreSetDispatchQueue(*(SCDynamicStoreRef *)(result + 40), 0);
      *(_QWORD *)(v1 + 48) = 0;
    }
  }
  return result;
}

uint64_t sub_100147A9C(uint64_t a1, void *cf1, const void *a3)
{
  uint64_t v3;
  const void *v7;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  const void *v11;
  _DWORD *v12;
  NSObject *v13;
  NSObject *global_queue;
  dispatch_time_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  void *v19;
  void *v20;
  _QWORD block[7];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;

  v3 = 4294963396;
  if (a1 && cf1)
  {
    v7 = *(const void **)(a1 + 72);
    if (v7 && CFEqual(cf1, v7) && *(_DWORD *)(a1 + 96) == 5)
      return sub_100147D70(a1, cf1, a3);
    v9 = sub_1001482D4(a1, (CFDictionaryRef *)cf1, a3);
    if (v9)
    {
      v10 = v9;
      sub_1001484B4(a1, v9);
      sub_1001484F8(a1, cf1);
      v11 = *(const void **)(a1 + 88);
      if (v11)
        CFRelease(v11);
      *(_QWORD *)(a1 + 96) = 0;
      v12 = (_DWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 88) = 0;
      *(_QWORD *)(a1 + 104) = 0;
      v13 = dispatch_semaphore_create(0);
      v22 = 0;
      v23 = &v22;
      v24 = 0x2020000000;
      v25 = 0;
      global_queue = dispatch_get_global_queue(0, 0);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1001485CC;
      block[3] = &unk_100232310;
      block[5] = &v22;
      block[6] = a1 + 24;
      block[4] = v13;
      dispatch_async(global_queue, block);
      v15 = dispatch_time(0, 3000000000);
      if (dispatch_semaphore_wait(v13, v15))
      {
        v16 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Gave up waiting for EAPOLControlCopyStateAndStatus. Bailing");
        objc_autoreleasePoolPop(v16);
LABEL_14:
        *v12 = 0;
        v3 = 4294963394;
LABEL_27:
        dispatch_release(v13);
        CFRelease(v10);
        _Block_object_dispose(&v22, 8);
        return v3;
      }
      v17 = *((_DWORD *)v23 + 6);
      *(_DWORD *)(a1 + 104) = v17;
      if (v17 == 3)
      {
        *v12 = 1;
        v20 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "WiFiDeviceEAPAssociate: EAPOLControl already stopping");
        objc_autoreleasePoolPop(v20);
      }
      else
      {
        if (v17)
        {
          *v12 = 1;
          v18 = EAPOLControlStop(a1 + 24);
          v19 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "WiFiDeviceEAPAssociate: EAPOLControlStop result=%d", v18);
        }
        else
        {
          *(_DWORD *)(a1 + 96) = 2;
          v18 = EAPOLControlStart(a1 + 24, *(_QWORD *)(a1 + 80));
          v19 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "WiFiDeviceEAPAssociate: EAPOLControlStart result=%d", v18);
        }
        objc_autoreleasePoolPop(v19);
        if ((_DWORD)v18)
          goto LABEL_14;
      }
      v3 = 0;
      goto LABEL_27;
    }
  }
  return v3;
}

void sub_100147D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100147D70(uint64_t a1, void *cf1, const void *a3)
{
  uint64_t v3;
  const void *v7;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  unsigned int *v10;
  void *v11;
  unsigned int v12;
  void *v13;
  void *v15;
  const __CFDictionary *v16;
  const __CFDictionary *Value;
  const __CFDictionary *v18;
  CFIndex Count;
  void *v20;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v22;
  CFIndex v23;
  const void *ValueAtIndex;
  void *v25;
  const void *v26;
  const void *v27;
  void *v28;
  void *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  void *v33;
  const char *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  const __CFDictionary *v39;
  CFIndex v40;
  CFTypeRef cf;

  v3 = 4294963396;
  if (a1 && cf1)
  {
    v7 = *(const void **)(a1 + 72);
    if (!v7 || !CFEqual(cf1, v7))
      return sub_100147A9C(a1, cf1);
    v8 = sub_1001482D4(a1, (CFDictionaryRef *)cf1, a3);
    if (v8)
    {
      v9 = v8;
      sub_1001484B4(a1, v8);
      cf = 0;
      v10 = (unsigned int *)(a1 + 104);
      EAPOLControlCopyStateAndStatus(a1 + 24, a1 + 104, &cf);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      v11 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: EAPOLControlCopyStateAndStatus() returned state %d", "WiFiDeviceEAPUpdate", *v10);
      objc_autoreleasePoolPop(v11);
      v12 = *v10;
      if (*v10 == 3)
        goto LABEL_67;
      if (v12 != 2)
      {
        if (v12)
        {
          *(_DWORD *)(a1 + 96) = 1;
          v3 = EAPOLControlStop(a1 + 24);
          v13 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "WiFiDeviceEAPUpdate: EAPOLControlStop result=%d", v3);
        }
        else
        {
          *(_DWORD *)(a1 + 96) = 2;
          v3 = EAPOLControlStart(a1 + 24, *(_QWORD *)(a1 + 80));
          v13 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "WiFiDeviceEAPUpdate: EAPOLControlStart result=%d", v3);
        }
        objc_autoreleasePoolPop(v13);
        if (!(_DWORD)v3)
          goto LABEL_70;
        goto LABEL_66;
      }
      v15 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Starting...", "__WiFiDeviceEAPCopyUserInput");
      objc_autoreleasePoolPop(v15);
      if (*(_QWORD *)(a1 + 88) && (v16 = *(const __CFDictionary **)(a1 + 80)) != 0)
      {
        Value = (const __CFDictionary *)CFDictionaryGetValue(v16, CFSTR("EAPClientConfiguration"));
        v18 = Value;
        if (Value && CFDictionaryGetCount(Value))
        {
          Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 88));
          v20 = objc_autoreleasePoolPush();
          v40 = Count;
          if (Count)
          {
            if (qword_10026DD20)
              objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: required array count was %ld", "__WiFiDeviceEAPCopyUserInput", Count);
            objc_autoreleasePoolPop(v20);
            Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            if (Mutable)
            {
              v22 = Mutable;
              if (Count >= 1)
              {
                v23 = 0;
                v39 = v18;
                do
                {
                  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v23);
                  v25 = objc_autoreleasePoolPush();
                  if (qword_10026DD20)
                    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: key value at index %ld is %@", "__WiFiDeviceEAPCopyUserInput", v23, ValueAtIndex);
                  objc_autoreleasePoolPop(v25);
                  if (ValueAtIndex)
                  {
                    v26 = CFDictionaryGetValue(v18, ValueAtIndex);
                    if (v26)
                    {
                      v27 = v26;
                      v28 = objc_autoreleasePoolPush();
                      if (qword_10026DD20)
                        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: setting key-value pair in userInput for %@", "__WiFiDeviceEAPCopyUserInput", ValueAtIndex);
                      objc_autoreleasePoolPop(v28);
                      CFDictionarySetValue(v22, ValueAtIndex, v27);
                      v18 = v39;
                    }
                  }
                  ++v23;
                }
                while (v40 != v23);
              }
              if (CFDictionaryGetCount(v22))
              {
LABEL_58:
                v33 = objc_autoreleasePoolPush();
                if (qword_10026DD20)
                {
                  v34 = "non-NULL";
                  if (!v22)
                    v34 = "NULL";
                  objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: __WiFiDeviceEAPCopyUserInput() returned a %s userInput", "WiFiDeviceEAPUpdate", v34);
                }
                objc_autoreleasePoolPop(v33);
                if (v22)
                {
                  *(_DWORD *)(a1 + 96) = 4;
                  v3 = EAPOLControlProvideUserInput(a1 + 24, v22);
                  v35 = objc_autoreleasePoolPush();
                  if (qword_10026DD20)
                    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "WiFiDeviceEAPUpdate: EAPOLControlProvideUserInput result=%d", v3);
                  objc_autoreleasePoolPop(v35);
                  CFRelease(v22);
                  if (!(_DWORD)v3)
                    goto LABEL_70;
LABEL_66:
                  *(_DWORD *)(a1 + 96) = 0;
                  v3 = 4294963394;
LABEL_70:
                  CFRelease(v9);
                  return v3;
                }
LABEL_67:
                *(_DWORD *)(a1 + 96) = 1;
                v36 = objc_autoreleasePoolPush();
                if (qword_10026DD20)
                  objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "WiFiDeviceEAPUpdate: EAPOLControl already stopping");
                objc_autoreleasePoolPop(v36);
                v3 = 0;
                goto LABEL_70;
              }
              v29 = objc_autoreleasePoolPush();
              if (qword_10026DD20)
                objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: CFDictionaryGetCount() is zero for userInput", "__WiFiDeviceEAPCopyUserInput");
              objc_autoreleasePoolPop(v29);
              CFRelease(v22);
LABEL_57:
              v22 = 0;
              goto LABEL_58;
            }
            v20 = objc_autoreleasePoolPush();
            if (qword_10026DD20)
              objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Could not create the userInput dictionary", "__WiFiDeviceEAPCopyUserInput", v37, v38);
          }
          else if (qword_10026DD20)
          {
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: required array count was %ld, returning NULL userInput", "__WiFiDeviceEAPCopyUserInput", 0, v38);
          }
        }
        else
        {
          v20 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
          {
            if (v18)
              v32 = "non-NULL";
            else
              v32 = "null";
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: configuration (%s) was NULL or count was zero (%ld)", "__WiFiDeviceEAPCopyUserInput", v32, CFDictionaryGetCount(v18));
          }
        }
      }
      else
      {
        v20 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
        {
          v30 = "non-NULL";
          if (*(_QWORD *)(a1 + 88))
            v31 = "non-NULL";
          else
            v31 = "null";
          if (!*(_QWORD *)(a1 + 80))
            v30 = "null";
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: required (%s) or profile (%s) was NULL, returning null userInput", "__WiFiDeviceEAPCopyUserInput", v31, v30);
        }
      }
      objc_autoreleasePoolPop(v20);
      goto LABEL_57;
    }
  }
  return v3;
}

const __CFDictionary *sub_1001482D4(uint64_t a1, CFDictionaryRef *a2, const void *a3)
{
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  const __CFDictionary *Value;
  const void *v9;
  CFDictionaryRef *v10;
  CFDictionaryRef *v11;
  BOOL v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  CFDictionaryRef *v16;
  const __CFDictionary *v17;
  const __CFDictionary *v18;
  void *v19;

  v6 = sub_1000C34F4(a2, a3);
  v7 = v6;
  if (!a3)
  {
    if (v6)
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(v6, CFSTR("EAPClientConfiguration"));
      if (Value)
      {
        v9 = CFDictionaryGetValue(Value, CFSTR("UserPassword"));
        v10 = (CFDictionaryRef *)CFRetain(a2);
        if (v10)
        {
          v11 = v10;
          if (sub_10002DA5C((_BOOL8)v10))
          {
            v12 = v9 != 0;
            while (sub_1000C5964((uint64_t)v11) && !v12)
            {
              v13 = objc_autoreleasePoolPush();
              if (qword_10026DD20)
                objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: did not manage to find password for HS2.0 account %@. Looking for next matching account...", "__WiFiDeviceCopyPreparedEAPProfile", sub_10002B088(v11));
              objc_autoreleasePoolPop(v13);
              v14 = *(_QWORD *)(a1 + 16);
              v15 = sub_100029860(v14);
              v16 = (CFDictionaryRef *)sub_100070ABC(v14, v15, (uint64_t)v11);
              CFRelease(v11);
              if (!v16)
              {
                v19 = objc_autoreleasePoolPush();
                if (qword_10026DD20)
                  objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: did not manage to find password for HS2.0 network %@. No more matching HS2.0 account", "__WiFiDeviceCopyPreparedEAPProfile", sub_10002B088(a2));
                objc_autoreleasePoolPop(v19);
                return v7;
              }
              if (v7)
                CFRelease(v7);
              v11 = v16;
              v17 = sub_1000C34F4(v16, 0);
              v7 = v17;
              v12 = v17
                 && (v18 = (const __CFDictionary *)CFDictionaryGetValue(v17, CFSTR("EAPClientConfiguration"))) != 0
                 && CFDictionaryGetValue(v18, CFSTR("UserPassword")) != 0;
              if (!sub_10002DA5C((_BOOL8)v11))
                break;
            }
          }
          CFRelease(v11);
        }
      }
    }
  }
  return v7;
}

void sub_1001484B4(uint64_t a1, CFTypeRef cf)
{
  const void *v4;

  v4 = *(const void **)(a1 + 80);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(a1 + 80) = cf;
  if (cf)
    CFRetain(cf);
}

void sub_1001484F8(uint64_t a1, CFTypeRef cf)
{
  const void *v4;

  v4 = *(const void **)(a1 + 72);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(a1 + 72) = cf;
  if (cf)
    CFRetain(cf);
}

void sub_10014853C(uint64_t a1, CFTypeRef cf)
{
  const void *v4;
  void *v5;

  v4 = *(const void **)(a1 + 88);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(a1 + 88) = cf;
  if (cf)
  {
    CFRetain(cf);
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: eapRef required set to:\n%@", "__WiFiDeviceEAPSetRequired", *(_QWORD *)(a1 + 88));
    objc_autoreleasePoolPop(v5);
  }
}

intptr_t sub_1001485CC(uint64_t a1)
{
  CFTypeRef cf;

  cf = 0;
  EAPOLControlCopyStateAndStatus(*(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24, &cf);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_100148624(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

void sub_10014862C(uint64_t a1, const void *a2, int a3)
{
  const void *v4;
  const void *v5;
  const void *v6;

  if (a1)
  {
    sub_100148688(a1, a2, a3);
    if (!*(_DWORD *)(a1 + 96))
    {
      v4 = *(const void **)(a1 + 72);
      if (v4)
        CFRelease(v4);
      *(_QWORD *)(a1 + 72) = 0;
      v5 = *(const void **)(a1 + 80);
      if (v5)
        CFRelease(v5);
      *(_QWORD *)(a1 + 80) = 0;
      v6 = *(const void **)(a1 + 88);
      if (v6)
        CFRelease(v6);
      *(_QWORD *)(a1 + 88) = 0;
    }
  }
}

void sub_100148688(uint64_t a1, CFTypeRef cf1, int a3)
{
  const void *v4;
  uint64_t v6;
  const void *v7;
  unsigned int v8;
  void (*v9)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v10;
  _DWORD *v11;
  void *v12;
  CFTypeRef cf;

  cf = 0;
  if (a1)
  {
    v4 = *(const void **)(a1 + 72);
    if (v4)
    {
      if (!cf1 || CFEqual(cf1, v4))
      {
        if (a3)
        {
          v6 = *(_QWORD *)(a1 + 16);
          v7 = (const void *)sub_100025C3C(v6);
          sub_100072F84(v6, v7, 0, 1012, "__WiFiDeviceEAPCancel", 984);
        }
        v8 = *(_DWORD *)(a1 + 96);
        if (v8)
        {
          if (v8 <= 4 && (v9 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 56)) != 0)
          {
            *(_DWORD *)(a1 + 96) = 0;
            v9(a1, 4294963391, 0, *(_QWORD *)(a1 + 64));
            if (*(_DWORD *)(a1 + 96))
              return;
          }
          else
          {
            *(_DWORD *)(a1 + 96) = 0;
          }
        }
        v10 = a1 + 24;
        v11 = (_DWORD *)(a1 + 104);
        EAPOLControlCopyStateAndStatus(v10, v11, &cf);
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if ((*v11 - 1) <= 1)
        {
          EAPOLControlStop(v10);
          v12 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "WiFiDeviceEAPCancel: EAPOLControlStop");
          objc_autoreleasePoolPop(v12);
        }
      }
    }
  }
}

void sub_1001487B4(uint64_t a1)
{
  void *v2;
  const void *v3;

  if (a1)
  {
    v2 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Aborting EAP");
    objc_autoreleasePoolPop(v2);
    v3 = *(const void **)(a1 + 72);
    if (v3)
      sub_10014862C(a1, v3, 1);
  }
}

void sub_100148820(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[9];
  if (v2)
  {
    CFRelease(v2);
    a1[9] = 0;
  }
  v3 = (const void *)a1[10];
  if (v3)
  {
    CFRelease(v3);
    a1[10] = 0;
  }
  v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
}

void sub_10014886C(uint64_t a1, const __CFString *a2)
{
  const __CFDictionary *Value;
  const __CFDictionary *v5;
  const __CFNumber *v6;
  const __CFNumber *v7;
  void *v8;
  const __CFDictionary *v9;
  int v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  const __CFNumber *v24;
  const __CFNumber *v25;
  const __CFNumber *v26;
  unsigned int v27;
  void *v28;
  const char *v29;
  void *v30;
  int v31;
  const __CFNumber *v32;
  CFNumberRef v33;
  CFNumberRef v34;
  void *v35;
  NSString *v36;
  const char *v37;
  uint64_t v38;
  const __CFArray *v39;
  CFMutableArrayRef MutableCopy;
  CFMutableArrayRef v41;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v43;
  const __CFDictionary *v44;
  const void *v45;
  void (*v46)(uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v47;
  void *v48;
  void *v49;
  ManagedConfigWrapper *v50;
  void *v51;
  const __CFNumber *v52;
  CFNumberRef v53;
  uint64_t v54;
  uint64_t v55;
  const void *v56;
  void *v57;
  const void *v58;
  const __CFNumber *v59;
  unsigned int v60;
  const void *v61;
  void (*v62)(uint64_t, uint64_t, __CFDictionary *, _QWORD);
  CFDictionaryRef theDict;
  unsigned int v64;
  char buffer[8];
  uint64_t v66;
  unsigned int valuePtr;
  const char *v68;
  CFRange v69;
  CFRange v70;
  CFRange v71;

  v64 = 0;
  theDict = 0;
  *(_QWORD *)buffer = 0;
  v66 = 0;
  if (!*(_QWORD *)(a1 + 72))
    goto LABEL_98;
  CFStringGetCString(a2, buffer, 16, 0);
  if (EAPOLControlCopyStateAndStatus(buffer, &v64, &theDict))
    goto LABEL_98;
  if (theDict)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("AdditionalProperties"));
    if (Value)
    {
      v5 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("EAPAKASIMNotificationActionInfo"));
      if (v5)
      {
        v6 = (const __CFNumber *)CFDictionaryGetValue(v5, CFSTR("Code"));
        v7 = sub_10001F500(v6);
        sub_10002C478(*(_QWORD *)(a1 + 72), CFSTR("JOIN_EXTENDED_STATUS"), +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v7));
      }
    }
  }
  v8 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "EAP: eapState=%d", v64);
  objc_autoreleasePoolPop(v8);
  if (!v64)
  {
    v16 = *(_QWORD *)(a1 + 80);
    if (!v16)
      goto LABEL_98;
    if (*(_DWORD *)(a1 + 96) == 1)
    {
      *(_DWORD *)(a1 + 108) = 0;
      *(_QWORD *)(a1 + 100) = 0;
      *(_DWORD *)(a1 + 96) = 2;
      v17 = EAPOLControlStart(a1 + 24, v16);
      v18 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "WiFiDeviceEAPAssociate: EAPOLControlStart from Idle result=%d", v17);
      objc_autoreleasePoolPop(v18);
      if ((_DWORD)v17)
        v19 = -369033216;
      else
        v19 = 0;
      v20 = v19 | v17;
      if (!(_DWORD)v20)
        goto LABEL_98;
    }
    else
    {
      v21 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "WiFiDeviceEAP: EAPOLControl state went Idle while joining");
      objc_autoreleasePoolPop(v21);
      v20 = 4294963391;
    }
    v22 = a1;
    v23 = 0;
LABEL_32:
    sub_10014946C(v22, 0, v20, v23);
    goto LABEL_98;
  }
  if (v64 != 2)
    goto LABEL_98;
  v9 = theDict;
  v10 = *(_DWORD *)(a1 + 96);
  if (v10 == 4)
  {
    if (!theDict)
    {
      *(_DWORD *)(a1 + 104) = 2;
      return;
    }
    v24 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("ClientStatus"));
    if (!v24)
      goto LABEL_98;
    v25 = sub_10001F500(v24);
    v26 = (const __CFNumber *)CFDictionaryGetValue(v9, CFSTR("SupplicantState"));
    v27 = sub_10001F500(v26);
    v28 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
    {
      if (v27 > 8)
        v29 = "<unknown>";
      else
        v29 = off_100232390[v27];
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "EAP: Status=%u SupplicationStatus=%s", v25, v29);
    }
    objc_autoreleasePoolPop(v28);
    if ((_DWORD)v25 == 20)
      goto LABEL_97;
    if ((_DWORD)v25 != 3)
    {
      if (!(_DWORD)v25)
      {
        if (v27 - 7 < 2)
        {
          if ((*(_DWORD *)(a1 + 108) - 1) <= 6)
            sub_10014946C(a1, 0, 4294963391, 1);
          goto LABEL_97;
        }
        if (v27 != 4)
          goto LABEL_97;
        *(_DWORD *)(a1 + 96) = 0;
        v46 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 56);
        if (v46)
          v46(a1, 0, 0, *(_QWORD *)(a1 + 64));
        if (*(_QWORD *)(a1 + 72))
        {
          v47 = *(_QWORD *)(a1 + 16);
          v48 = objc_autoreleasePoolPush();
          if (v47)
          {
            if (qword_10026DD20)
              objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Checking if EAP network requires WoW Eapol filter to be set", "__WiFiDeviceEAPConfigureWoWEapolFilterIfNeeded");
            objc_autoreleasePoolPop(v48);
            v49 = objc_autoreleasePoolPush();
            v50 = +[ManagedConfigWrapper sharedInstance](ManagedConfigWrapper, "sharedInstance");
            if (v50
              && -[ManagedConfigWrapper isWiFiNetworkMDMNetwork:](v50, "isWiFiNetworkMDMNetwork:", *(_QWORD *)(a1 + 72)))
            {
              v51 = objc_autoreleasePoolPush();
              if (qword_10026DD20)
                objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: EAP network was added by MDM", "__WiFiDeviceEAPConfigureWoWEapolFilterIfNeeded");
              objc_autoreleasePoolPop(v51);
            }
            else
            {
              objc_autoreleasePoolPop(v49);
              v52 = (const __CFNumber *)sub_10002BE64(*(_QWORD *)(a1 + 72), CFSTR("WiFiManagerKnownNetworksEventType"));
              if (!v52)
                goto LABEL_97;
              valuePtr = 0;
              CFNumberGetValue(v52, kCFNumberIntType, &valuePtr);
              if (valuePtr != 17)
                goto LABEL_97;
              v49 = objc_autoreleasePoolPush();
              if (qword_10026DD20)
                objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: EAP network was added via .mobileconfig profile", "__WiFiDeviceEAPConfigureWoWEapolFilterIfNeeded");
            }
            objc_autoreleasePoolPop(v49);
            valuePtr = 1;
            v53 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
            if (v53)
            {
              v54 = (uint64_t)v53;
              v55 = *(_QWORD *)(a1 + 16);
              v56 = (const void *)sub_100025C3C(v55);
              sub_1000672C0(v55, v56, 497, 0, v54);
              v57 = objc_autoreleasePoolPush();
              if (qword_10026DD20)
                objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Enabling Eapol filter for WoW", "__WiFiDeviceEAPConfigureWoWEapolFilterIfNeeded");
              objc_autoreleasePoolPop(v57);
              v58 = (const void *)v54;
LABEL_96:
              CFRelease(v58);
            }
LABEL_97:
            *(_DWORD *)(a1 + 108) = v27;
            goto LABEL_98;
          }
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: device is null.", "__WiFiDeviceEAPConfigureWoWEapolFilterIfNeeded");
        }
        else
        {
          v48 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: network is null.", "__WiFiDeviceEAPConfigureWoWEapolFilterIfNeeded");
        }
        objc_autoreleasePoolPop(v48);
        goto LABEL_97;
      }
      goto LABEL_105;
    }
    if ((v27 & 0xFFFFFFFE) != 2)
      goto LABEL_97;
    v39 = (const __CFArray *)CFDictionaryGetValue(v9, CFSTR("RequiredProperties"));
    if (!v39 || (MutableCopy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, v39)) == 0)
    {
LABEL_104:
      LODWORD(v25) = 15;
LABEL_105:
      *(_DWORD *)(a1 + 108) = v27;
      v20 = v25 | 0xEA010000;
      v22 = a1;
      v23 = 1;
      goto LABEL_32;
    }
    v41 = MutableCopy;
    Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (!Mutable)
    {
LABEL_103:
      CFRelease(v41);
      goto LABEL_104;
    }
    v43 = Mutable;
    v69.length = CFArrayGetCount(v41);
    v69.location = 0;
    if (CFArrayGetFirstIndexOfValue(v41, v69, CFSTR("TLSUserTrustProceedCertificateChain")) == -1)
    {
      v70.length = CFArrayGetCount(v41);
      v70.location = 0;
      if (CFArrayGetFirstIndexOfValue(v41, v70, CFSTR("UserName")) == -1)
      {
        v71.length = CFArrayGetCount(v41);
        v71.location = 0;
        if (CFArrayGetFirstIndexOfValue(v41, v71, CFSTR("UserPassword")) == -1)
          goto LABEL_91;
      }
    }
    else
    {
      v44 = (const __CFDictionary *)CFDictionaryGetValue(v9, CFSTR("AdditionalProperties"));
      if (v44)
      {
        v45 = CFDictionaryGetValue(v44, CFSTR("TLSServerCertificateChain"));
        CFDictionarySetValue(v43, CFSTR("TLSServerCertificateChain"), v45);
      }
      CFArrayAppendValue(v41, CFSTR("TLSSaveTrustExceptions"));
    }
    CFDictionarySetValue(v43, CFSTR("RequiredProperties"), v41);
LABEL_91:
    if (CFDictionaryGetCount(v43))
    {
      CFRelease(v41);
      v59 = (const __CFNumber *)CFDictionaryGetValue(v9, CFSTR("ConfigurationGeneration"));
      v60 = sub_10001F500(v59);
      if (*(_DWORD *)(a1 + 100) != v60)
      {
        *(_DWORD *)(a1 + 100) = v60;
        v61 = CFDictionaryGetValue(v43, CFSTR("RequiredProperties"));
        sub_10014853C(a1, v61);
        *(_DWORD *)(a1 + 96) = 5;
        v62 = *(void (**)(uint64_t, uint64_t, __CFDictionary *, _QWORD))(a1 + 56);
        if (v62)
          v62(a1, 3925934083, v43, *(_QWORD *)(a1 + 64));
      }
      v58 = v43;
      goto LABEL_96;
    }
    CFRelease(v43);
    goto LABEL_103;
  }
  if (v10 == 3)
  {
    v30 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "EAP: Waiting for inner association completion");
    objc_autoreleasePoolPop(v30);
    goto LABEL_98;
  }
  if (v10 != 2)
  {
    v31 = 2;
    goto LABEL_99;
  }
  v11 = *(_QWORD *)(a1 + 16);
  v12 = (const void *)sub_100025C3C(v11);
  v13 = sub_10002BF8C(v11, v12);
  if (v13 && CFEqual(*(CFTypeRef *)(a1 + 72), v13))
  {
    v14 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "EAP: already connected to %@", sub_10002B088(v13));
    objc_autoreleasePoolPop(v14);
    *(_DWORD *)(a1 + 96) = 4;
    v15 = sub_100029860(*(_QWORD *)(a1 + 16));
    sub_10014886C(a1, v15);
  }
  else
  {
    v32 = (const __CFNumber *)sub_10002BE64(*(_QWORD *)(a1 + 72), CFSTR("ASSOC_FLAGS"));
    valuePtr = sub_10001F500(v32) | 8;
    v33 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (v33)
    {
      v34 = v33;
      sub_10002C478(*(_QWORD *)(a1 + 72), CFSTR("ASSOC_FLAGS"), v33);
      CFRelease(v34);
    }
    *(_DWORD *)(a1 + 96) = 3;
    v35 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
    {
      v36 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s"), -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("{%@+} %@"), CFSTR("EAP"), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("EAP: Performing Inner Association of %@"), sub_10002B088(*(const void **)(a1 + 72)))), "UTF8String"));
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        v37 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("[WiFiPolicy] %s"), -[NSString UTF8String](v36, "UTF8String")), "UTF8String");
        valuePtr = 136446210;
        v68 = v37;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&valuePtr, 0xCu);
      }
    }
    objc_autoreleasePoolPop(v35);
    v38 = sub_1000723D8(*(_QWORD *)(a1 + 16), a2, *(_QWORD *)(a1 + 72), 0, sub_1001491D0, a1);
    if ((_DWORD)v38)
      sub_10014946C(a1, 0, v38, 0);
    if (!v13)
      goto LABEL_98;
  }
  CFRelease(v13);
LABEL_98:
  v9 = theDict;
  v31 = v64;
LABEL_99:
  *(_DWORD *)(a1 + 104) = v31;
  if (v9)
    CFRelease(v9);
}

void sub_1001491D0(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v9;
  const void *v10;
  const char *v11;
  NSString *v12;
  const char *v13;
  uint64_t v14;
  uint8_t buf[4];
  const char *v16;

  v9 = objc_autoreleasePoolPush();
  if (a3)
  {
    if (qword_10026DD20)
    {
      v10 = sub_10002B088(a3);
      v11 = "failed";
      if (!(_DWORD)a5)
        v11 = "succeeded";
      v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s"), -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("{%@-} %@"), CFSTR("EAP"), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("EAP: Inner Association of %@ %s (%d)"), v10, v11, a5)), "UTF8String"));
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_11:
        *(_DWORD *)buf = 136446210;
        v16 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("[WiFiPolicy] %s"), -[NSString UTF8String](v12, "UTF8String")), "UTF8String");
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%{public}s", buf, 0xCu);
      }
    }
  }
  else if (qword_10026DD20)
  {
    v13 = "failed";
    if (!(_DWORD)a5)
      v13 = "succeeded";
    v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s"), -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("{%@-} %@"), CFSTR("EAP"), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("EAP: Inner Association %s (%d)"), v13, a5)), "UTF8String"));
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      goto LABEL_11;
  }
  objc_autoreleasePoolPop(v9);
  if (*(_DWORD *)(a6 + 96) == 3)
  {
    if ((_DWORD)a5)
    {
      sub_10014946C(a6, 0, a5, 0);
    }
    else
    {
      *(_DWORD *)(a6 + 96) = 4;
      v14 = sub_100029860(*(_QWORD *)(a6 + 16));
      sub_10014886C(a6, v14);
    }
  }
}

void sub_10014946C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  void (*v7)(uint64_t, uint64_t, uint64_t, _QWORD);
  void (*v8)(uint64_t, uint64_t, uint64_t, _QWORD);
  const void *v9;
  const void *v10;
  const void *v11;

  *(_DWORD *)(a1 + 96) = 0;
  switch((_DWORD)a3)
  {
    case 0:
      goto LABEL_5;
    case 0xEA010014:
      return;
    case 0xEA010003:
      *(_DWORD *)(a1 + 96) = 5;
LABEL_5:
      v7 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 56);
      if (v7)
        v7(a1, a3, a2, *(_QWORD *)(a1 + 64));
      return;
  }
  sub_100148688(a1, 0, a4);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 56);
  if (v8)
    v8(a1, a3, a2, *(_QWORD *)(a1 + 64));
  if (!*(_DWORD *)(a1 + 96))
  {
    v9 = *(const void **)(a1 + 72);
    if (v9)
      CFRelease(v9);
    *(_QWORD *)(a1 + 72) = 0;
    v10 = *(const void **)(a1 + 80);
    if (v10)
      CFRelease(v10);
    *(_QWORD *)(a1 + 80) = 0;
    v11 = *(const void **)(a1 + 88);
    if (v11)
      CFRelease(v11);
    *(_QWORD *)(a1 + 88) = 0;
  }
}

void sub_1001498E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100149988(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100149A00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100149AA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100149AF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100149B60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100149BC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100149C2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014A7E4(_QWORD *a1)
{
  void *v2;
  id v3;

  v2 = objc_autoreleasePoolPush();
  if (a1[4] && a1[5])
  {
    v3 = objc_msgSend(*(id *)(a1[6] + 48), "objectForKeyedSubscript:");
    if (!v3)
    {
      v3 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
      objc_msgSend(*(id *)(a1[6] + 48), "setObject:forKeyedSubscript:", v3, a1[5]);
    }
    objc_msgSend(v3, "setObject:forKeyedSubscript:", a1[7], a1[4]);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_10014AD28(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  CFDictionaryRef v7;
  CFDictionaryRef v8;
  void (**v9)(id, NSError *, _QWORD);
  NSError *v10;

  if (!a4)
  {
    if (a5)
    {
      v7 = sub_1000173C0(a5);
      if (v7)
      {
        v8 = v7;
        objc_msgSend(*(id *)(a1 + 32), "__setPeerAssistedDiscoveryNetwork:interfaceName:UUID:", v7, *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 48), "UUID"));
        CFRelease(v8);
      }
    }
  }
  if (objc_msgSend(*(id *)(a1 + 56), "response"))
  {
    v9 = (void (**)(id, NSError *, _QWORD))objc_msgSend(*(id *)(a1 + 56), "response");
    if (a4)
      v10 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CWFManagerErrorDomain, a4, 0);
    else
      v10 = 0;
    v9[2](v9, v10, 0);
  }

}

void sub_10014ADF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (**a6)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  void *v12;

  v12 = objc_autoreleasePoolPush();
  if (a6)
  {
    a6[2](a6, a1, a2, a3, a4, a5);
    _Block_release(a6);
  }
  objc_autoreleasePoolPop(v12);
}

void sub_10014B058(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  void (**v6)(id, NSError *, _QWORD);
  NSError *v7;

  if (!a4)
    objc_msgSend(*(id *)(a1 + 32), "__setPeerAssistedDiscoveryNetwork:interfaceName:UUID:", 0, *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 48), "UUID"));
  if (objc_msgSend(*(id *)(a1 + 56), "response"))
  {
    v6 = (void (**)(id, NSError *, _QWORD))objc_msgSend(*(id *)(a1 + 56), "response");
    if (a4)
      v7 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CWFManagerErrorDomain, a4, 0);
    else
      v7 = 0;
    v6[2](v6, v7, 0);
  }

}

void sub_10014B100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  void *v10;

  v10 = objc_autoreleasePoolPush();
  if (a5)
  {
    a5[2](a5, a1, a2, a3, a4);
    _Block_release(a5);
  }
  objc_autoreleasePoolPop(v10);
}

void sub_10014B580(uint64_t a1, uint64_t a2, unsigned int a3, void *a4)
{
  void *v6;
  void (**v7)(id, NSError *, _QWORD);
  NSError *v8;

  v6 = objc_autoreleasePoolPush();
  if (objc_msgSend(a4, "response"))
  {
    v7 = (void (**)(id, NSError *, _QWORD))objc_msgSend(a4, "response");
    if (a3)
      v8 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CWFManagerErrorDomain, a3, 0);
    else
      v8 = 0;
    v7[2](v7, v8, 0);
  }

  objc_autoreleasePoolPop(v6);
}

void sub_10014D438(uint64_t a1, const void *a2, void *a3, uint64_t a4, int a5, void *a6)
{
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  NSError *v17;
  id v18;
  const void *v19;
  uint64_t v20;
  NSObject *v21;
  const void *v22;
  void *v23;
  const void *v24;
  id v25;
  void *v26;
  int v27;
  double v28;
  CLLocationDegrees v29;
  double v30;
  CLLocationDegrees v31;
  double v32;
  CFAbsoluteTime Current;
  CFDateRef v34;
  CFDateRef v35;
  _BOOL4 v36;
  uint64_t v37;
  NSObject *v38;
  const void *v39;
  _BOOL8 v40;
  const __CFString *v41;
  void (**v42)(id, NSError *, _QWORD);
  uint64_t v43;
  NSObject *v44;
  const void *v45;
  uint64_t v46;
  int v47;
  const char *v48;
  __int16 v49;
  const void *v50;
  __int16 v51;
  const void *v52;

  v12 = objc_autoreleasePoolPush();
  v13 = objc_msgSend(a6, "info");
  v14 = objc_msgSend(v13, "objectForKeyedSubscript:", CWFXPCAssocParamsKey);
  v15 = CWFGetOSLog(v14);
  if (v15)
    v16 = CWFGetOSLog(v15);
  else
    v16 = &_os_log_default;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v47 = 67109120;
    LODWORD(v48) = a5;
    _os_log_send_and_compose_impl(1, 0, 0, 0, &_mh_execute_header, v16, 0, "[corewifi] __WiFiDeviceManagerAssociationCallback to CoreWiFi with error:%d\n", &v47);
  }
  if (a5)
  {
    v17 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CWFManagerErrorDomain, a5, a4);
    goto LABEL_47;
  }
  if (objc_msgSend(v14, "rememberUponSuccessfulAssociation"))
  {
    v18 = objc_msgSend((id)sub_10002BE64((uint64_t)a3, CFSTR("WiFiManagerKnownNetworksEventType")), "intValue");
    sub_1000C69F0(a3, 1, +[NSDate date](NSDate, "date"));
    v19 = sub_100103568(a1, a3);
    v20 = CWFGetOSLog(v19);
    if (v20)
      v21 = CWFGetOSLog(v20);
    else
      v21 = &_os_log_default;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = sub_10002B088(v19);
      v47 = 136315394;
      v48 = "__WiFiDeviceManagerAssociationCallback";
      v49 = 2112;
      v50 = v22;
      _os_log_send_and_compose_impl(1, 0, 0, 0, &_mh_execute_header, v21, 1, "[corewifi] %s: WiFiDeviceManagerCopyMatchingMergedNetwork() returned known network %@", &v47, 22);
    }
    if (v19)
    {
      if (sub_1000CA608((uint64_t)a3) == 2)
        sub_100099EA4((uint64_t)objc_msgSend(+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"), "getWiFiManager"), a3, 1u);
      if (sub_10002BE64((uint64_t)a3, CFSTR("WiFiNetworkNANServiceID")))
        sub_100099EA4((uint64_t)objc_msgSend(+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"), "getWiFiManager"), a3, 1u);
      sub_1001055B4(a1, a3);
    }
    else
    {
      v23 = sub_1000169FC(a1, a2);
      if (v23)
      {
        v24 = v23;
        sub_1000C71DC(a3, v23);
        CFRelease(v24);
      }
      if (_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
      {
        v25 = sub_100009ACC(a1);
        if (v25)
        {
          v26 = v25;
          v27 = objc_msgSend(+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"), "getWiFiManager");
          objc_msgSend(v26, "coordinate");
          v29 = v28;
          objc_msgSend(v26, "coordinate");
          v31 = v30;
          objc_msgSend(v26, "horizontalAccuracy");
          sub_1000A10CC(v27, a3, v29, v31, v32, objc_msgSend(v26, "timestamp"));

        }
        if (sub_10010AD44(a1))
        {
          Current = CFAbsoluteTimeGetCurrent();
          v34 = CFDateCreate(kCFAllocatorDefault, Current);
          if (v34)
          {
            v35 = v34;
            sub_1000C79E0(a3, v34);
            CFRelease(v35);
          }
        }
      }
      if (objc_msgSend(objc_msgSend(v14, "knownNetworkProfile"), "isPublicAirPlayNetwork"))
        sub_1000CFA18((uint64_t)a3, (int)objc_msgSend(objc_msgSend(v14, "knownNetworkProfile"), "isPublicAirPlayNetwork"));
      sub_100094420((uint64_t)objc_msgSend(+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"), "getWiFiManager"), a3, (uint64_t)v18);
      v36 = sub_1000302BC((uint64_t)objc_msgSend(+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"), "getWiFiManager"))&& sub_1001055B4(a1, a3);
      sub_100121648(a1, a3, v36);
      sub_1001228AC(a1);
      v19 = CFRetain(a3);
      v37 = CWFGetOSLog(v19);
      if (v37)
        v38 = CWFGetOSLog(v37);
      else
        v38 = &_os_log_default;
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        v39 = sub_10002B088(v19);
        v47 = 136315394;
        v48 = "__WiFiDeviceManagerAssociationCallback";
        v49 = 2112;
        v50 = v39;
        LODWORD(v46) = 22;
        _os_log_send_and_compose_impl(1, 0, 0, 0, &_mh_execute_header, v38, 1, "[corewifi] %s: knownNetwork now points to %@", &v47, v46);
      }
    }
    if (sub_1000C5964((uint64_t)v19) || (v40 = sub_1000C52F4((_BOOL8)v19)))
    {
      v41 = (const __CFString *)objc_msgSend(objc_msgSend(v14, "EAPCredentials"), "password");
      if (v41 || (v41 = (const __CFString *)objc_msgSend(v14, "password")) != 0)
        sub_1000C64F0(v19, v41);
      if (!v19)
        goto LABEL_46;
    }
    else
    {
      v43 = CWFGetOSLog(v40);
      if (v43)
        v44 = CWFGetOSLog(v43);
      else
        v44 = &_os_log_default;
      if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
      {
        v45 = sub_10002B088(v19);
        v47 = 136315650;
        v48 = "__WiFiDeviceManagerAssociationCallback";
        v49 = 2112;
        v50 = v45;
        v51 = 2112;
        v52 = v19;
        LODWORD(v46) = 32;
        _os_log_send_and_compose_impl(1, 0, 0, 0, &_mh_execute_header, v44, 1, "[corewifi] %s: deleting password for known network %@ as that network does not use a password. Network spec: %@", &v47, v46);
      }
      sub_1000C65D8(v19);
      if (!v19)
        goto LABEL_46;
    }
    CFRelease(v19);
  }
LABEL_46:
  v17 = 0;
LABEL_47:
  if (objc_msgSend(a6, "response"))
  {
    v42 = (void (**)(id, NSError *, _QWORD))objc_msgSend(a6, "response");
    v42[2](v42, v17, 0);
  }

  objc_autoreleasePoolPop(v12);
}

void sub_10014E2F0(uint64_t a1, uint64_t a2, const __CFArray *a3, int a4, void *a5)
{
  void *v9;
  void (**v10)(id, NSError *, _QWORD);
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  id v18;
  id v19;
  void (**v20)(id, _QWORD, id);
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  v9 = objc_autoreleasePoolPush();
  if (a4)
  {
    if (objc_msgSend(a5, "response"))
    {
      v10 = (void (**)(id, NSError *, _QWORD))objc_msgSend(a5, "response");
      v10[2](v10, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CWFManagerErrorDomain, a4, 0), 0);
    }
  }
  else
  {
    v11 = objc_msgSend(a5, "info");
    v12 = objc_msgSend(v11, "objectForKeyedSubscript:", CWFXPCScanParamsKey);
    if (_os_feature_enabled_impl("CoreWiFi", "WiFi6EMaxCompatibility"))
    {
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v13 = objc_msgSend(v12, "channels", 0);
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      if (v14)
      {
        v15 = v14;
        v16 = *(_QWORD *)v22;
        while (2)
        {
          for (i = 0; i != v15; i = (char *)i + 1)
          {
            if (*(_QWORD *)v22 != v16)
              objc_enumerationMutation(v13);
            if (objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i), "band") == 2)
            {
              if (objc_msgSend(v12, "mergeScanResults"))
                sub_100104FBC(a1, a3);
              goto LABEL_16;
            }
          }
          v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
          if (v15)
            continue;
          break;
        }
      }
      objc_msgSend(v12, "mergeScanResults");
    }
LABEL_16:
    v18 = +[WiFiXPCManager __filteredScanResults:scanParameters:](WiFiXPCManager, "__filteredScanResults:scanParameters:", a3, v12);
    v19 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
    objc_msgSend(v19, "setObject:forKeyedSubscript:", v18, CWFXPCResultKey);
    if (objc_msgSend(a5, "response"))
    {
      v20 = (void (**)(id, _QWORD, id))objc_msgSend(a5, "response");
      v20[2](v20, 0, v19);
    }
  }

  objc_autoreleasePoolPop(v9);
}

void sub_10014E840(uint64_t a1, uint64_t a2, const __CFArray *a3, int a4, void *a5)
{
  void *v8;
  void (**v9)(id, NSError *, _QWORD);
  id v10;
  CFIndex v11;
  const void *ValueAtIndex;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  void (**v17)(id, _QWORD, id);

  v8 = objc_autoreleasePoolPush();
  if (a4)
  {
    if (objc_msgSend(a5, "response"))
    {
      v9 = (void (**)(id, NSError *, _QWORD))objc_msgSend(a5, "response");
      v9[2](v9, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CWFManagerErrorDomain, a4, 0), 0);
    }
  }
  else
  {
    v10 = +[NSMutableArray array](NSMutableArray, "array");
    if (a3 && CFArrayGetCount(a3) >= 1)
    {
      v11 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a3, v11);
        if (ValueAtIndex)
        {
          v13 = sub_100027D10((uint64_t)ValueAtIndex);
          if (v13)
            objc_msgSend(v10, "addObject:", v13);
        }
        ++v11;
      }
      while (CFArrayGetCount(a3) > v11);
    }
    v14 = objc_msgSend(a5, "info");
    v15 = CWFFilteredANQPResults(v10, objc_msgSend(v14, "objectForKeyedSubscript:", CWFXPCANQPParamsKey));
    v16 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v15, CWFXPCResultKey);
    if (objc_msgSend(a5, "response"))
    {
      v17 = (void (**)(id, _QWORD, id))objc_msgSend(a5, "response");
      v17[2](v17, 0, v16);
    }
  }

  objc_autoreleasePoolPop(v8);
}

void sub_10014ECC8(uint64_t a1, uint64_t a2, const __CFArray *a3, int a4, void *a5)
{
  void *v8;
  void (**v9)(id, NSError *, _QWORD);
  id v10;
  CFIndex v11;
  void *ValueAtIndex;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  void (**v24)(id, _QWORD, id);
  void *v25;
  void *v26;
  const __CFArray *v27;
  void *v28;
  void *v29;
  CFIndex v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];

  v8 = objc_autoreleasePoolPush();
  if (a4)
  {
    if (objc_msgSend(a5, "response"))
    {
      v9 = (void (**)(id, NSError *, _QWORD))objc_msgSend(a5, "response");
      v9[2](v9, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CWFManagerErrorDomain, a4, 0), 0);
    }
  }
  else
  {
    if (a3)
    {
      v10 = +[NSMutableArray array](NSMutableArray, "array");
      if (CFArrayGetCount(a3) >= 1)
      {
        v25 = v8;
        v26 = a5;
        v11 = 0;
        v27 = a3;
        v28 = v10;
        do
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(a3, v11);
          if (ValueAtIndex)
          {
            v13 = ValueAtIndex;
            v30 = v11;
            v14 = objc_alloc_init((Class)CWFRangingResult);
            objc_msgSend(v14, "setMACAddress:", objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("STATION_MAC")));
            objc_msgSend(v14, "setIdentifier:", objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("RANGING_TOKEN_ID")));
            objc_msgSend(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("RANGING_DISTANCE")), "doubleValue");
            objc_msgSend(v14, "setDistance:");
            objc_msgSend(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("RANGING_SD")), "doubleValue");
            objc_msgSend(v14, "setStandardDeviation:");
            objc_msgSend(v14, "setStatus:", objc_msgSend(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("RANGING_STATUS")), "intValue"));
            v29 = v14;
            objc_msgSend(v14, "setNumberOfValidMeasurements:", objc_msgSend(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("RANGING_VALID_COUNT")), "unsignedIntegerValue"));
            v15 = +[NSMutableArray array](NSMutableArray, "array");
            v16 = objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("RANGING_RESULTS"));
            v31 = 0u;
            v32 = 0u;
            v33 = 0u;
            v34 = 0u;
            v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
            if (v17)
            {
              v18 = v17;
              v19 = *(_QWORD *)v32;
              do
              {
                v20 = 0;
                do
                {
                  if (*(_QWORD *)v32 != v19)
                    objc_enumerationMutation(v16);
                  v21 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)v20);
                  v22 = objc_alloc_init((Class)CWFRangingMeasurement);
                  objc_msgSend(v22, "setRoundTripTime:", objc_msgSend(objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("RANGING_RTT")), "integerValue"));
                  objc_msgSend(v22, "setRSSI:", objc_msgSend(objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("RANGING_RSSI")), "integerValue"));
                  objc_msgSend(v22, "setChannel:", objc_msgSend(objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("RANGING_CHANNEL")), "unsignedIntegerValue"));
                  objc_msgSend(v22, "setSNR:", objc_msgSend(objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("RANGING_SNR")), "integerValue"));
                  objc_msgSend(v22, "setCoreID:", objc_msgSend(objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("RANGING_CORE_ID")), "unsignedIntegerValue"));
                  objc_msgSend(v15, "addObject:", v22);
                  v20 = (char *)v20 + 1;
                }
                while (v18 != v20);
                v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
              }
              while (v18);
            }
            objc_msgSend(v29, "setMeasurements:", v15, v25, v26);
            v10 = v28;
            objc_msgSend(v28, "addObject:", v29);
            a3 = v27;
            v11 = v30;
          }
          ++v11;
        }
        while (CFArrayGetCount(a3) > v11);
        v8 = v25;
        a5 = v26;
      }
    }
    else
    {
      v10 = 0;
    }
    v23 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary", v25, v26);
    objc_msgSend(v23, "setObject:forKeyedSubscript:", v10, CWFXPCResultKey);
    if (objc_msgSend(a5, "response"))
    {
      v24 = (void (**)(id, _QWORD, id))objc_msgSend(a5, "response");
      v24[2](v24, 0, v23);
    }
  }

  objc_autoreleasePoolPop(v8);
}

id sub_10014F868(uint64_t a1, uint64_t a2)
{
  id result;
  uint64_t (**v5)(id, uint64_t, _QWORD);

  result = objc_msgSend(*(id *)(a1 + 32), "response");
  if (result)
  {
    v5 = (uint64_t (**)(id, uint64_t, _QWORD))objc_msgSend(*(id *)(a1 + 32), "response");
    return (id)v5[2](v5, a2, 0);
  }
  return result;
}

void sub_100150518(id a1)
{
  qword_10026DB88 = objc_alloc_init(WiFiXPCManager);
}

void sub_1001515E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  _Unwind_Resume(exception_object);
}

void sub_10015160C(uint64_t a1)
{
  void *v2;
  id v3;
  BOOL v4;

  v2 = objc_autoreleasePoolPush();
  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40));
  if (objc_msgSend(*(id *)(a1 + 48), "array") != v3)
  {
    if (objc_msgSend(*(id *)(a1 + 48), "array"))
      v4 = v3 == 0;
    else
      v4 = 1;
    if (v4 || (objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "array"), "isEqual:", v3) & 1) == 0)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(a1 + 48), "array"), *(_QWORD *)(a1 + 40));
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    }
  }
  objc_autoreleasePoolPop(v2);
}

void sub_100151B68(uint64_t a1, uint64_t a2, void *a3, int a4, void *a5)
{
  void *v8;
  void (**v9)(id, NSError *, _QWORD);
  id v10;
  id v11;
  void (**v12)(id, _QWORD, id);

  v8 = objc_autoreleasePoolPush();
  if (a4)
  {
    if (objc_msgSend(a5, "response"))
    {
      v9 = (void (**)(id, NSError *, _QWORD))objc_msgSend(a5, "response");
      v9[2](v9, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CWFManagerErrorDomain, a4, 0), 0);
    }
  }
  else
  {
    v10 = objc_alloc_init((Class)CWFSensingResult);
    objc_msgSend(v10, "setData:", objc_msgSend(a3, "copy"));
    v11 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
    objc_msgSend(v11, "setObject:forKeyedSubscript:", v10, CWFXPCResultKey);
    if (objc_msgSend(a5, "response"))
    {
      v12 = (void (**)(id, _QWORD, id))objc_msgSend(a5, "response");
      v12[2](v12, 0, v11);
    }
  }

  objc_autoreleasePoolPop(v8);
}

void sub_1001525D8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  void (**v6)(id, NSError *, _QWORD);
  NSError *v7;

  if (objc_msgSend(*(id *)(a1 + 32), "response"))
  {
    v6 = (void (**)(id, NSError *, _QWORD))objc_msgSend(*(id *)(a1 + 32), "response");
    if (a4)
      v7 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CWFManagerErrorDomain, a4, 0);
    else
      v7 = 0;
    v6[2](v6, v7, 0);
  }

}

void sub_1001527A0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  void (**v6)(id, NSError *, _QWORD);
  NSError *v7;

  if (objc_msgSend(*(id *)(a1 + 32), "response"))
  {
    v6 = (void (**)(id, NSError *, _QWORD))objc_msgSend(*(id *)(a1 + 32), "response");
    if (a4)
      v7 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CWFManagerErrorDomain, a4, 0);
    else
      v7 = 0;
    v6[2](v6, v7, 0);
  }

}

void sub_10015291C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100152934(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40) = objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "objectForKeyedSubscript:", objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "requestParameters"), "interfaceName")), "copy");
  objc_autoreleasePoolPop(v2);
}

void sub_1001531BC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void (**v11)(id, NSError *, _QWORD);
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  qos_class_t v16;

  v2 = CWFGetOSLog(a1);
  if (v2)
    v3 = CWFGetOSLog(v2);
  else
    v3 = &_os_log_default;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v13 = 138543618;
    v14 = v4;
    v15 = 1024;
    v16 = qos_class_self();
    _os_log_send_and_compose_impl(1, 0, 0, 0, &_mh_execute_header, v3, 0, "[corewifi] Will process CoreWiFi XPC request (req=%{public}@, qos=%d)", &v13, 18);
  }
  v5 = objc_autoreleasePoolPush();
  v6 = (uint64_t)objc_msgSend(*(id *)(a1 + 32), "type");
  if (v6 <= 144)
  {
    if (v6 <= 35)
    {
      switch(v6)
      {
        case 6:
          objc_msgSend(*(id *)(a1 + 40), "__setPower:XPCConnection:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
          break;
        case 23:
          objc_msgSend(*(id *)(a1 + 40), "__setCompanionCountryCode:", *(_QWORD *)(a1 + 32));
          break;
        case 35:
          objc_msgSend(*(id *)(a1 + 40), "__getThermalIndex:", *(_QWORD *)(a1 + 32));
          break;
        default:
LABEL_25:
          v8 = CWFGetOSLog(v6);
          if (v8)
            v9 = CWFGetOSLog(v8);
          else
            v9 = &_os_log_default;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            v10 = *(_QWORD *)(a1 + 32);
            v13 = 138412290;
            v14 = v10;
            LODWORD(v12) = 12;
            _os_log_send_and_compose_impl(1, 0, 0, 0, &_mh_execute_header, v9, 0, "[corewifi] Sensing in wifiManager unsupported (%@)", &v13, v12);
          }
          if (objc_msgSend(*(id *)(a1 + 32), "response"))
          {
            v11 = (void (**)(id, NSError *, _QWORD))objc_msgSend(*(id *)(a1 + 32), "response");
            v11[2](v11, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 45, 0), 0);
          }
          break;
      }
    }
    else
    {
      switch(v6)
      {
        case '6':
          objc_msgSend(*(id *)(a1 + 40), "__getKnownNetworkProfiles:", *(_QWORD *)(a1 + 32));
          break;
        case '7':
        case '8':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case '[':
        case '\\':
        case ']':
        case '^':
        case 'b':
        case 'c':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
          goto LABEL_25;
        case '9':
          objc_msgSend(*(id *)(a1 + 40), "__getCurrentScanResult:", *(_QWORD *)(a1 + 32));
          break;
        case ':':
          objc_msgSend(*(id *)(a1 + 40), "__getCurrentNetworkProfile:XPCConnection:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
          break;
        case ';':
          objc_msgSend(*(id *)(a1 + 40), "__addKnownNetworkProfile:", *(_QWORD *)(a1 + 32));
          break;
        case '<':
          objc_msgSend(*(id *)(a1 + 40), "__removeKnownNetworkProfile:", *(_QWORD *)(a1 + 32));
          break;
        case '=':
          objc_msgSend(*(id *)(a1 + 40), "__updateKnownNetworkProfile:XPCConnection:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
          break;
        case '>':
          objc_msgSend(*(id *)(a1 + 40), "__associate:XPCConnection:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
          break;
        case '?':
          objc_msgSend(*(id *)(a1 + 40), "__disassociate:XPCConnection:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
          break;
        case '@':
          objc_msgSend(*(id *)(a1 + 40), "__performScan:XPCConnection:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
          break;
        case 'A':
          objc_msgSend(*(id *)(a1 + 40), "__performANQP:", *(_QWORD *)(a1 + 32));
          break;
        case 'B':
          objc_msgSend(*(id *)(a1 + 40), "__startAWDLPeerAssistedDiscovery:XPCConnection:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
          break;
        case 'C':
          objc_msgSend(*(id *)(a1 + 40), "__stopAWDLPeerAssistedDiscovery:XPCConnection:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
          break;
        case 'D':
          objc_msgSend(*(id *)(a1 + 40), "__setRangeable:", *(_QWORD *)(a1 + 32));
          break;
        case 'E':
          objc_msgSend(*(id *)(a1 + 40), "__performRanging:", *(_QWORD *)(a1 + 32));
          break;
        case 'O':
        case '_':
        case 'a':
LABEL_12:
          if (objc_msgSend(*(id *)(a1 + 32), "response"))
          {
            v7 = objc_msgSend(*(id *)(a1 + 32), "response");
            (*((void (**)(id, _QWORD, _QWORD))v7 + 2))(v7, 0, 0);
          }
          break;
        case 'd':
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'l':
        case 'o':
          objc_msgSend(*(id *)(a1 + 40), "__handleActivity:", *(_QWORD *)(a1 + 32));
          break;
        default:
          if (v6 != 36)
            goto LABEL_25;
          objc_msgSend(*(id *)(a1 + 40), "__setThermalIndex:", *(_QWORD *)(a1 + 32));
          break;
      }
    }
  }
  else
  {
    switch(v6)
    {
      case 174:
        objc_msgSend(*(id *)(a1 + 40), "__setRangingIdentifier:", *(_QWORD *)(a1 + 32));
        break;
      case 175:
      case 176:
      case 178:
      case 185:
      case 186:
      case 187:
      case 192:
      case 196:
      case 203:
      case 204:
      case 205:
      case 206:
      case 207:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 222:
      case 223:
      case 224:
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 239:
      case 240:
      case 241:
      case 242:
        goto LABEL_25;
      case 177:
        objc_msgSend(*(id *)(a1 + 40), "__performAutoJoin:", *(_QWORD *)(a1 + 32));
        break;
      case 179:
        objc_msgSend(*(id *)(a1 + 40), "__getUserAutoJoinState:", *(_QWORD *)(a1 + 32));
        break;
      case 180:
        objc_msgSend(*(id *)(a1 + 40), "__setUserAutoJoinState:XPCConnection:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
        break;
      case 181:
      case 184:
      case 191:
      case 237:
        goto LABEL_12;
      case 182:
        objc_msgSend(*(id *)(a1 + 40), "__getAutoHotspotMode:", *(_QWORD *)(a1 + 32));
        break;
      case 183:
        objc_msgSend(*(id *)(a1 + 40), "__setAutoHotspotMode:", *(_QWORD *)(a1 + 32));
        break;
      case 188:
        objc_msgSend(*(id *)(a1 + 40), "__performSensing:", *(_QWORD *)(a1 + 32));
        break;
      case 189:
        objc_msgSend(*(id *)(a1 + 40), "__getUserSettings:", *(_QWORD *)(a1 + 32));
        break;
      case 190:
        objc_msgSend(*(id *)(a1 + 40), "__setUserSettings:", *(_QWORD *)(a1 + 32));
        break;
      case 193:
        objc_msgSend(*(id *)(a1 + 40), "__getAutoJoinMetric:", *(_QWORD *)(a1 + 32));
        break;
      case 194:
        objc_msgSend(*(id *)(a1 + 40), "__getAutoJoinStatistics:", *(_QWORD *)(a1 + 32));
        break;
      case 195:
        objc_msgSend(*(id *)(a1 + 40), "__resetAutoJoinStatistics:", *(_QWORD *)(a1 + 32));
        break;
      case 197:
        objc_msgSend(*(id *)(a1 + 40), "__getCountryBandSupport:", *(_QWORD *)(a1 + 32));
        break;
      case 198:
        objc_msgSend(*(id *)(a1 + 40), "__addKnownBSS:", *(_QWORD *)(a1 + 32));
        break;
      case 199:
        objc_msgSend(*(id *)(a1 + 40), "__removeKnownBSS:", *(_QWORD *)(a1 + 32));
        break;
      case 200:
        objc_msgSend(*(id *)(a1 + 40), "__updateKnownBSS:", *(_QWORD *)(a1 + 32));
        break;
      case 201:
        objc_msgSend(*(id *)(a1 + 40), "__getPassword:", *(_QWORD *)(a1 + 32));
        break;
      case 202:
        objc_msgSend(*(id *)(a1 + 40), "__setPassword:", *(_QWORD *)(a1 + 32));
        break;
      case 218:
        objc_msgSend(*(id *)(a1 + 40), "__setBlockedBands:", *(_QWORD *)(a1 + 32));
        break;
      case 219:
        objc_msgSend(*(id *)(a1 + 40), "__updateSoftAPBand:XPCConnection:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
        break;
      case 220:
        objc_msgSend(*(id *)(a1 + 40), "__startHostAPMode:XPCConnection:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
        break;
      case 221:
        objc_msgSend(*(id *)(a1 + 40), "__stopHostAPMode:XPCConnection:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
        break;
      case 236:
        objc_msgSend(*(id *)(a1 + 40), "__getWiFiAssistOverrideReasons:", *(_QWORD *)(a1 + 32));
        break;
      case 238:
        objc_msgSend(*(id *)(a1 + 40), "__performNDD:XPCConnection:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
        break;
      case 243:
        objc_msgSend(*(id *)(a1 + 40), "__getBackgroundScanConfiguration:", *(_QWORD *)(a1 + 32));
        break;
      case 244:
        objc_msgSend(*(id *)(a1 + 40), "__setBackgroundScanConfiguration:", *(_QWORD *)(a1 + 32));
        break;
      case 245:
        objc_msgSend(*(id *)(a1 + 40), "__getAutoJoinDenyList:", *(_QWORD *)(a1 + 32));
        break;
      case 246:
        objc_msgSend(*(id *)(a1 + 40), "__setAutoJoinDenyList:", *(_QWORD *)(a1 + 32));
        break;
      case 247:
        objc_msgSend(*(id *)(a1 + 40), "__clearAutoJoinDenyList:", *(_QWORD *)(a1 + 32));
        break;
      default:
        if (v6 != 145)
          goto LABEL_25;
        objc_msgSend(*(id *)(a1 + 40), "__getDeviceUUID:", *(_QWORD *)(a1 + 32));
        break;
    }
  }
  objc_autoreleasePoolPop(v5);
}

void sub_1001536E4(id a1)
{
  if (objc_opt_class(BKSApplicationStateMonitor))
    qword_10026DB98 = objc_alloc_init(WiFiAppStateManager);
}

void sub_100153758(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    objc_msgSend(a2, "externalAppUnregistered:", a5);
}

void sub_100153B14(uint64_t a1)
{
  const void *v2;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 120))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
  v2 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_100153CE8(uint64_t a1)
{
  CFNumberRef v2;

  v2 = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 40));
  (*(void (**)(_QWORD, CFNumberRef))(*(_QWORD *)(a1 + 32) + 96))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 88), v2);
  if (v2)
    CFRelease(v2);
}

void sub_100153D3C(uint64_t a1)
{
  CFNumberRef v2;

  v2 = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 40));
  (*(void (**)(_QWORD, CFNumberRef))(*(_QWORD *)(a1 + 32) + 96))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 88), v2);
  if (v2)
    CFRelease(v2);
}

WiFiDriverTriggeredTTR *sub_100154084(uint64_t a1)
{
  WiFiDriverTriggeredTTR *result;

  result = -[WiFiDriverTriggeredTTR initWithWiFiManagerwithStringRef:withInterval:]([WiFiDriverTriggeredTTR alloc], "initWithWiFiManagerwithStringRef:withInterval:", *(_QWORD *)(a1 + 32), *(double *)(a1 + 40));
  qword_10026DBA8 = (uint64_t)result;
  return result;
}

void sub_1001545B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_1001545D4(uint64_t a1, uint64_t a2, void *a3)
{
  void *v6;
  id result;

  v6 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s _WiFiDriverTriggeredTTRHandler askToLaunchTapToRadarWithMessage result:%@, error:%@", "-[WiFiDriverTriggeredTTR WiFiDriverTriggeredTTRForReason:]_block_invoke", a2, a3);
  objc_autoreleasePoolPop(v6);
  result = objc_msgSend(objc_msgSend(a3, "userInfo"), "objectForKey:", CFSTR("deviceNotInteractive"));
  if (result)
  {
    result = objc_msgSend(objc_msgSend(objc_msgSend(a3, "userInfo"), "objectForKey:", CFSTR("deviceNotInteractive")), "BOOLValue");
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (_BYTE)result;
  }
  return result;
}

id sub_100154684(uint64_t a1, uint64_t a2, void *a3)
{
  void *v6;
  id result;

  v6 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s WiFiDextCrashSoftError tapToRadarWithURL result:%@, error:%@", "-[WiFiDriverTriggeredTTR WiFiDriverTriggeredTTRForReason:]_block_invoke_2", a2, a3);
  objc_autoreleasePoolPop(v6);
  result = objc_msgSend(objc_msgSend(a3, "userInfo"), "objectForKey:", CFSTR("deviceNotInteractive"));
  if (result)
  {
    result = objc_msgSend(objc_msgSend(objc_msgSend(a3, "userInfo"), "objectForKey:", CFSTR("deviceNotInteractive")), "BOOLValue");
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (_BYTE)result;
  }
  return result;
}

uint64_t sub_10015475C()
{
  uint64_t result;

  result = qword_10026DBB8;
  if (!qword_10026DBB8)
  {
    pthread_once(&stru_10026CDC0, (void (*)(void))sub_100154798);
    return qword_10026DBB8;
  }
  return result;
}

uint64_t sub_100154798()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass(&unk_1002326B0);
  qword_10026DBB8 = result;
  return result;
}

uint64_t sub_1001547BC(const __CFAllocator *a1, CFIndex a2)
{
  uint64_t Instance;
  uint64_t v5;
  CFMutableArrayRef Mutable;
  CFMutableSetRef v7;

  if (!qword_10026DBB8)
    pthread_once(&stru_10026CDC0, (void (*)(void))sub_100154798);
  Instance = _CFRuntimeCreateInstance(a1);
  v5 = Instance;
  if (Instance)
  {
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 80) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_QWORD *)(Instance + 24) = a2;
    Mutable = CFArrayCreateMutable(a1, a2, &kCFTypeArrayCallBacks);
    *(_QWORD *)(v5 + 16) = Mutable;
    if (Mutable
      && (v7 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks), (*(_QWORD *)(v5 + 80) = v7) != 0))
    {
      *(_BYTE *)(v5 + 72) = 0;
    }
    else
    {
      CFRelease((CFTypeRef)v5);
      return 0;
    }
  }
  return v5;
}

uint64_t sub_10015488C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 32) = a2;
  *(_QWORD *)(result + 40) = a3;
  return result;
}

void sub_100154894(uint64_t a1)
{
  NSObject *v1;

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 64);
    if (v1)
      dispatch_source_set_timer(v1, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
}

void sub_1001548B4(uint64_t a1)
{
  NSObject *v2;
  dispatch_time_t v3;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    v3 = dispatch_time(0, 500000000);
    dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  *(_BYTE *)(a1 + 72) = 1;
}

void sub_100154904(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
    dispatch_source_set_timer(v2, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  *(_BYTE *)(a1 + 72) = 0;
}

void sub_10015493C(void *context, dispatch_queue_t queue, void (__cdecl *a3)(void *), void *a4)
{
  NSObject *v8;
  NSObject *v9;

  *((_QWORD *)context + 6) = queue;
  v8 = *((_QWORD *)context + 7);
  if (v8
    || (v8 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, queue),
        (*((_QWORD *)context + 7) = v8) != 0))
  {
    dispatch_set_context(v8, context);
    dispatch_source_set_event_handler_f(*((dispatch_source_t *)context + 7), (dispatch_function_t)sub_100154A08);
    dispatch_activate(*((dispatch_object_t *)context + 7));
  }
  v9 = *((_QWORD *)context + 8);
  if (v9
    || (v9 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, queue),
        (*((_QWORD *)context + 8) = v9) != 0))
  {
    dispatch_set_context(v9, a4);
    dispatch_source_set_event_handler_f(*((dispatch_source_t *)context + 8), a3);
    dispatch_activate(*((dispatch_object_t *)context + 8));
  }
}

void sub_100154A08(uint64_t a1)
{
  void *v2;

  *(_BYTE *)(a1 + 72) = 0;
  v2 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: retrying command", "__WiFiCommandQueueTimerCallback");
  objc_autoreleasePoolPop(v2);
  sub_10001C868(a1);
}

void sub_100154A70(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 56));
    *(_QWORD *)(a1 + 56) = 0;
  }
  v3 = *(NSObject **)(a1 + 64);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*(dispatch_object_t *)(a1 + 64));
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_QWORD *)(a1 + 48) = 0;
}

void sub_100154AC0(uint64_t a1, uint64_t a2)
{
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  const __CFData *ValueAtIndex;
  CFNumberRef v7;
  CFNumberRef v8;
  unint64_t v9;
  uint64_t valuePtr;
  CFRange v11;

  valuePtr = a2;
  if (a1)
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
    if (Count >= 1)
    {
      v4 = Count;
      v5 = 0;
      while (1)
      {
        v9 = 0xAAAAAAAAAAAAAAAALL;
        ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v5);
        if (ValueAtIndex)
        {
          v11.location = 0;
          v11.length = 8;
          CFDataGetBytes(ValueAtIndex, v11, (UInt8 *)&v9);
          if (valuePtr == v9)
          {
            v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &valuePtr);
            if (v7)
              break;
          }
        }
        if (v4 == ++v5)
          return;
      }
      v8 = v7;
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 80), v7);
      CFRelease(v8);
    }
  }
}

void sub_100154B90(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  const void *ValueAtIndex;
  CFIndex idx;

  if (a1)
  {
    v2 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Resetting deferred command queue IDs");
    objc_autoreleasePoolPop(v2);
    idx = -1;
    v3 = sub_10001C904(a1, &idx);
    CFSetRemoveAllValues(*(CFMutableSetRef *)(a1 + 80));
    if (v3)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx);
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), 0, ValueAtIndex);
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), idx + 1);
    }
    else
    {
      sub_100019C54(a1, 0);
    }
  }
}

void sub_100154C48(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  dispatch_time_t v3;

  if (a1)
  {
    v2 = *(NSObject **)(a1 + 64);
    if (v2)
    {
      v3 = dispatch_time(0, 1000000000 * a2);
      dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
  }
}

void sub_100154C9C(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = *(const void **)(a1 + 80);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 80) = 0;
  }
}

void sub_100155550(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10015556C(uint64_t a1, void *a2, uint64_t a3)
{
  id *v4;
  id v5;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend(WeakRetained, "_kvsDidChangeWithKeys:isExternal:", v5, a3);

}

void sub_100155B8C(id a1)
{
  id v1;
  void *v2;

  if (objc_opt_class(WAClient))
  {
    v1 = -[WiFiManagerAnalytics _initPrivate]([WiFiManagerAnalytics alloc], "_initPrivate");
    v2 = (void *)qword_10026DBD0;
    qword_10026DBD0 = (uint64_t)v1;

  }
}

void sub_100155C98(id a1, id a2, NSError *a3)
{
  NSError *v4;
  void *v5;
  id v6;

  v6 = a2;
  v4 = a3;
  if (v4)
  {
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Failed to register for WAGroupTypeWiFi with the WA daemon (wifianalyticsd). Error code: %ld. *** All message/metric submission is likely broken.", -[NSError code](v4, "code"), v6);
    objc_autoreleasePoolPop(v5);
  }

}

void sub_100155D20(id a1, id a2, NSError *a3)
{
  NSError *v4;
  void *v5;
  id v6;

  v6 = a2;
  v4 = a3;
  if (v4)
  {
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Failed to register for WAGroupTypeWiFi with the WA daemon (wifianalyticsd). Error code: %ld. *** All message/metric submission is likely broken.", -[NSError code](v4, "code"), v6);
    objc_autoreleasePoolPop(v5);
  }

}

void sub_100155DA8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Failed to register for WAGroupTypeWiFi with the WA daemon (wifianalyticsd). Error code: %ld. *** All message/metric submission is likely broken.", objc_msgSend(v5, "code"), v7);
    objc_autoreleasePoolPop(v6);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setHasRegisteredWithDaemon:", 1);
  }

}

void sub_100156004(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  if (objc_msgSend(v5, "code") == (id)9009)
  {
    objc_msgSend(*(id *)(a1 + 32), "_register");
  }
  else
  {
    v6 = objc_autoreleasePoolPush();
    v7 = (void *)qword_10026DD20;
    if (v5)
    {
      if (qword_10026DD20)
      {
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "key"));
        objc_msgSend(v7, "WFLog:message:", 4, "FAILED to submit GeoServices message with key: %@. Error: %@", v8, v5);

      }
    }
    else if (qword_10026DD20)
    {
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s Successfully submitted GEOWiFiConnectionQuality instance", "-[WiFiManagerAnalytics submitGeoServicesMessage:]_block_invoke");
    }
    objc_autoreleasePoolPop(v6);
  }

}

void sub_100156178(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  v6 = objc_autoreleasePoolPush();
  v7 = (void *)qword_10026DD20;
  if (v5)
  {
    if (qword_10026DD20)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "key"));
      objc_msgSend(v7, "WFLog:message:", 4, "FAILED to submit datapath diagnostics message with key: %@. Error: %@", v8, v5);

    }
  }
  else if (qword_10026DD20)
  {
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s Successfully submitted WiFiDiagnostics instance", "-[WiFiManagerAnalytics triggerDatapathDiagnosticsNoReply:]_block_invoke");
  }
  objc_autoreleasePoolPop(v6);

}

void sub_1001562F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10015631C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (objc_msgSend(v5, "code") == (id)9009)
  {
    objc_msgSend(WeakRetained, "_register");
  }
  else if (v5)
  {
    v7 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "FAILED to  set Device Analytics config.");
    objc_autoreleasePoolPop(v7);
  }

}

void sub_100156458(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Failed to trigger perf study! Error: %@ -  %s", v5, "-[WiFiManagerAnalytics getDeviceAnalyticsConfigurationWithCompletion:]_block_invoke");
LABEL_4:
    objc_autoreleasePoolPop(v6);
    v7 = 0;
    goto LABEL_7;
  }
  if (!v10)
  {
    v6 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s result is nil", "-[WiFiManagerAnalytics getDeviceAnalyticsConfigurationWithCompletion:]_block_invoke", v9);
    goto LABEL_4;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:"));
LABEL_7:
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v7);

}

void sub_1001565E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  const char *v9;
  void *v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Failed to trigger DeviceAnalyticsStore! Error: %@ -  %s", v5, "-[WiFiManagerAnalytics triggerDeviceAnalyticsStoreMigrationWithCompletion:]_block_invoke");
    objc_autoreleasePoolPop(v6);
    if (objc_msgSend(v5, "code") == (id)9009)
      objc_msgSend(*(id *)(a1 + 32), "_register");
LABEL_15:
    v7 = 0;
    goto LABEL_16;
  }
  if (!v12)
  {
    v10 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s result for triggerDeviceAnalyticsStoreMigration is nil", "-[WiFiManagerAnalytics triggerDeviceAnalyticsStoreMigrationWithCompletion:]_block_invoke");
    objc_autoreleasePoolPop(v10);
    goto LABEL_15;
  }
  v7 = objc_msgSend(v12, "BOOLValue");
  v8 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
  {
    v9 = "NO";
    if ((_DWORD)v7)
      v9 = "YES";
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s triggerDeviceAnalyticsStoreMigration success? %s", "-[WiFiManagerAnalytics triggerDeviceAnalyticsStoreMigrationWithCompletion:]_block_invoke", v9);
  }
  objc_autoreleasePoolPop(v8);
LABEL_16:
  v11 = *(_QWORD *)(a1 + 40);
  if (v11)
    (*(void (**)(uint64_t, id))(v11 + 16))(v11, v7);

}

void sub_100156940(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  _QWORD block[5];
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  if (!v5)
  {
    v7 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "standard reply produced a null message.. identifier: %u", *(unsigned int *)(a1 + 48));
    objc_autoreleasePoolPop(v7);
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "serialQ"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100156A94;
    block[3] = &unk_100232898;
    v9 = *(void **)(a1 + 40);
    block[4] = *(_QWORD *)(a1 + 32);
    v14 = v9;
    v12 = v5;
    v13 = v6;
    dispatch_async(v8, block);

  }
  else
  {
    v10 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s NULL reply supplied trying to process: %u", "-[WiFiManagerAnalytics prepareMessageForSubmission:withData:andReply:]_block_invoke", *(unsigned int *)(a1 + 48));
    objc_autoreleasePoolPop(v10);
  }

}

void sub_100156A94(_QWORD *a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  NSObject *v7;
  id v8;
  dispatch_block_t v9;
  _QWORD block[4];
  id v11;

  v2 = objc_autoreleasePoolPush();
  v3 = objc_msgSend((id)objc_opt_class(a1[4]), "instanceMethodSignatureForSelector:", "_runReplyBlock:withMessage:andError:");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSInvocation invocationWithMethodSignature:](NSInvocation, "invocationWithMethodSignature:", v4));

  objc_msgSend(v5, "setSelector:", "_runReplyBlock:withMessage:andError:");
  objc_msgSend(v5, "setTarget:", a1[4]);
  if (a1[7])
    objc_msgSend(v5, "setArgument:atIndex:", a1 + 7, 2);
  if (a1[5])
    objc_msgSend(v5, "setArgument:atIndex:", a1 + 5, 3);
  v6 = a1 + 6;
  if (a1[6])
    objc_msgSend(v5, "setArgument:atIndex:", v6, 4);
  objc_msgSend(v5, "retainArguments", v6);
  v7 = *(NSObject **)(a1[4] + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100156BF4;
  block[3] = &unk_10022E8F8;
  v11 = v5;
  v8 = v5;
  v9 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_BACKGROUND, 0, block);
  dispatch_sync(v7, v9);

  objc_autoreleasePoolPop(v2);
}

id sub_100156BF4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invoke");
}

void sub_100156BFC(uint64_t a1)
{
  void *v2;
  int v3;
  void *v4;

  v2 = objc_autoreleasePoolPush();
  v3 = *(_DWORD *)(a1 + 56);
  switch(v3)
  {
    case 11075584:
      objc_msgSend(*(id *)(a1 + 32), "_populateDPSNotificationMessage:andReply:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
      break;
    case 11075585:
      objc_msgSend(*(id *)(a1 + 32), "_populateDPSProbeResultMessage:andReply:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
      break;
    case 11075586:
      objc_msgSend(*(id *)(a1 + 32), "_populateDPSLinkStateChangeMessage:andReply:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
      break;
    case 11075587:
      objc_msgSend(*(id *)(a1 + 32), "_populateDPSAPInfoMessage:andReply:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
      break;
    case 11075588:
      objc_msgSend(*(id *)(a1 + 32), "_populateSlowWiFiNotificationMessage:andReply:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
      break;
    default:
      if (v3 == 10027009)
      {
        objc_msgSend(*(id *)(a1 + 32), "_populateWiFiConnectionQualityMessageWithScorecard:andReply:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
      }
      else
      {
        v4 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "[WiFiManagerAnalytics prepareMessageForSubmission] Unhandled message ID: %u", *(unsigned int *)(a1 + 56));
        objc_autoreleasePoolPop(v4);
      }
      break;
  }
  objc_autoreleasePoolPop(v2);
}

void sub_1001570A0(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  id v15;
  _QWORD *v16;
  _QWORD block[4];
  id v18;
  _QWORD *v19;
  _QWORD v20[4];
  id v21;
  id v22;
  NSObject *v23;
  _QWORD *v24;
  _QWORD v25[5];
  id v26;

  v5 = a2;
  v6 = a3;
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x3032000000;
  v25[3] = sub_10002FAD8;
  v25[4] = sub_10002F9C8;
  v26 = 0;
  if (v6)
  {
    v12 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Failed to register for WAGroupTypeWiFiGeoServices, can't submit ConnectionQuality message");
    objc_autoreleasePoolPop(v12);
    (*((void (**)(void))a1[6] + 2))();
  }
  else
  {
    v7 = dispatch_group_create();
    dispatch_group_enter(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAClient sharedClient](WAClient, "sharedClient"));
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100157314;
    v20[3] = &unk_100232910;
    v24 = v25;
    v21 = 0;
    v22 = a1[4];
    v9 = v7;
    v23 = v9;
    objc_msgSend(v8, "getNewMessageForKey:groupType:andReply:", CFSTR("CQ"), 2, v20);

    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "serialQ"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001584D4;
    block[3] = &unk_100232960;
    v19 = v25;
    v18 = a1[4];
    dispatch_group_notify(v9, v10, block);

    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "serialQ"));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100158A10;
    v13[3] = &unk_1002329B0;
    v16 = v25;
    v14 = a1[4];
    v15 = a1[6];
    dispatch_group_notify(v9, v11, v13);

  }
  _Block_object_dispose(v25, 8);

}

void sub_1001572FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100157314(uint64_t a1, void *a2, void *a3)
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  _BYTE *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  unsigned __int8 v97;
  uint64_t v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  unsigned int v119;
  uint64_t v120;
  void *v121;
  void *v122;
  id v123;

  v123 = a2;
  v6 = a3;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a2);
  if (v6 || (v7 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40)) == 0)
  {
    v122 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s failed to get CQ message instance, error: %@", "-[WiFiManagerAnalytics _populateWiFiConnectionQualityMessageWithScorecard:andReply:]_block_invoke", *(_QWORD *)(a1 + 32));
    objc_autoreleasePoolPop(v122);
  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "fieldForKey:", CFSTR("CQ_overAllStay")));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("overallStay")));
    objc_msgSend(v8, "setUint64Value:", objc_msgSend(v9, "unsignedLongLongValue"));

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_lowLQMStay")));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("lowLqmStay")));
    objc_msgSend(v10, "setUint64Value:", objc_msgSend(v11, "unsignedLongLongValue"));

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_faultyStay")));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("faultyStay")));
    objc_msgSend(v12, "setUint64Value:", objc_msgSend(v13, "unsignedLongLongValue"));

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_lqmTranCount")));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("lqmTransitionCount")));
    objc_msgSend(v14, "setUint64Value:", objc_msgSend(v15, "unsignedLongLongValue"));

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_packetsIn")));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("packetsIn")));
    objc_msgSend(v16, "setUint64Value:", objc_msgSend(v17, "unsignedLongLongValue"));

    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_packetsOut")));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("packetsOut")));
    objc_msgSend(v18, "setUint64Value:", objc_msgSend(v19, "unsignedLongLongValue"));

    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_bytesInTotal")));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("bytesIn")));
    objc_msgSend(v20, "setUint64Value:", objc_msgSend(v21, "unsignedLongLongValue"));

    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_bytesOutTotal")));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("bytesOut")));
    objc_msgSend(v22, "setUint64Value:", objc_msgSend(v23, "unsignedLongLongValue"));

    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_reTxBytes")));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("reTxBytes")));
    objc_msgSend(v24, "setUint64Value:", objc_msgSend(v25, "unsignedLongLongValue"));

    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_dataStalls")));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("dataStalls")));
    objc_msgSend(v26, "setUint64Value:", objc_msgSend(v27, "unsignedLongLongValue"));

    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_receivedDupes")));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("rxDupeBytes")));
    objc_msgSend(v28, "setUint64Value:", objc_msgSend(v29, "unsignedLongLongValue"));

    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_rxOutOfOrderBytes")));
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("rxOOOBytes")));
    objc_msgSend(v30, "setUint64Value:", objc_msgSend(v31, "unsignedLongLongValue"));

    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_roundTripTimeMin")));
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("rttMin")));
    objc_msgSend(v33, "floatValue");
    objc_msgSend(v32, "setFloatValue:");

    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_roundTripTimeAvg")));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("rttAvg")));
    objc_msgSend(v35, "floatValue");
    objc_msgSend(v34, "setFloatValue:");

    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_roundTripTimeVar")));
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("rttVar")));
    objc_msgSend(v37, "floatValue");
    objc_msgSend(v36, "setFloatValue:");

    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_successfulConnections")));
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("connSuccesses")));
    objc_msgSend(v38, "setUint64Value:", objc_msgSend(v39, "unsignedLongLongValue"));

    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_failedConnections")));
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("connAttempts")));
    v42 = objc_msgSend(v41, "unsignedLongLongValue");
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("connSuccesses")));
    objc_msgSend(v40, "setUint64Value:", v42 - (_BYTE *)objc_msgSend(v43, "unsignedLongLongValue"));

    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_sslConnectionCount")));
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("connAttempts")));
    objc_msgSend(v44, "setUint32Value:", objc_msgSend(v45, "unsignedIntegerValue"));

    v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_sslErrorCount")));
    v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("certErrors")));
    objc_msgSend(v46, "setUint32Value:", objc_msgSend(v47, "unsignedIntegerValue"));

    v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_bytesInActive")));
    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaActiveUseBytesIn")));
    objc_msgSend(v48, "setUint64Value:", objc_msgSend(v49, "unsignedLongLongValue"));

    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_bytesOutActive")));
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaActiveUseBytesOut")));
    objc_msgSend(v50, "setUint64Value:", objc_msgSend(v51, "unsignedLongLongValue"));

    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_roundTripTimeAvgActive")));
    v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaActiveUseRttAvg")));
    objc_msgSend(v53, "floatValue");
    objc_msgSend(v52, "setFloatValue:");

    v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_roundTripTimeMinActive")));
    v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaActiveUseRttMin")));
    objc_msgSend(v55, "floatValue");
    objc_msgSend(v54, "setFloatValue:");

    v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_roundTripTimeVarActive")));
    v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaAactiveUseRttVar")));
    objc_msgSend(v57, "floatValue");
    objc_msgSend(v56, "setFloatValue:");

    v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_cca")));
    v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaCCA")));
    objc_msgSend(v58, "setInt32Value:", objc_msgSend(v59, "integerValue"));

    v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_rssi")));
    v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaRSSI")));
    objc_msgSend(v60, "setInt32Value:", objc_msgSend(v61, "integerValue"));

    v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_snr")));
    v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaSNR")));
    objc_msgSend(v62, "setInt32Value:", objc_msgSend(v63, "integerValue"));

    v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_uniqueID")));
    v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaBSSIDConnected")));
    objc_msgSend(v64, "setStringValue:", v65);

    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_hotspot20")));
    v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaHS2")));
    objc_msgSend(v66, "setBoolValue:", objc_msgSend(v67, "BOOLValue"));

    v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_band")));
    v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaBand")));
    objc_msgSend(v68, "setUint32Value:", objc_msgSend(v69, "unsignedIntegerValue"));

    v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_channel")));
    v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaChannel")));
    objc_msgSend(v70, "setUint32Value:", objc_msgSend(v71, "unsignedIntegerValue"));

    v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_channelWidth")));
    v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaChWidth")));
    objc_msgSend(v72, "setUint32Value:", objc_msgSend(v73, "unsignedIntegerValue"));

    v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_phyMode")));
    v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaPhyMode")));
    objc_msgSend(v74, "setUint32Value:", objc_msgSend(v75, "unsignedIntegerValue"));

    v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_timeOfDay")));
    v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaTimeOfDay")));
    objc_msgSend(v76, "setUint64Value:", objc_msgSend(v77, "unsignedLongLongValue"));

    v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_networkType")));
    v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaAdvertisedNetworkType")));
    objc_msgSend(v78, "setInt32Value:", objc_msgSend(v79, "unsignedIntegerValue"));

    v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_wasCaptiveFlag")));
    v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaWasCaptive")));
    objc_msgSend(v80, "setUint32Value:", objc_msgSend(v81, "BOOLValue"));

    v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_networkOrigin")));
    v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaNetworkOriginator")));
    objc_msgSend(v82, "setInt32Value:", objc_msgSend(v83, "intValue") + 1);

    v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_topDLRate")));
    v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("topDownloadRate")));
    objc_msgSend(v85, "floatValue");
    objc_msgSend(v84, "setFloatValue:");

    v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_isKnownGood")));
    v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("isKnownGood")));
    objc_msgSend(v86, "setBoolValue:", objc_msgSend(v87, "intValue") != 0);

    v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_lowInternetDL")));
    v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("isLowInternetDL")));
    objc_msgSend(v88, "setBoolValue:", objc_msgSend(v89, "BOOLValue"));

    v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_lowInternetUL")));
    v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("isLowInternetUL")));
    objc_msgSend(v90, "setBoolValue:", objc_msgSend(v91, "BOOLValue"));

    v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_isEdgeBSS")));
    v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaIsEdgeBSS")));
    objc_msgSend(v92, "setBoolValue:", objc_msgSend(v93, "BOOLValue"));

    v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_authTraits")));
    v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaSecType")));
    if (v95)
    {
      v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaSecType")));
      v97 = objc_msgSend(v96, "unsignedIntegerValue");
      if ((v97 & 8) != 0)
      {
        v98 = 4;
      }
      else if ((v97 & 2) != 0)
      {
        v98 = 3;
      }
      else if ((v97 & 1) != 0)
      {
        v98 = 2;
      }
      else
      {
        v98 = 1;
      }
      objc_msgSend(v94, "addRepeatableInt32Value:", v98);

    }
    else
    {
      objc_msgSend(v94, "addRepeatableInt32Value:", 1);
    }

    v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_associationReason")));
    v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaAssocReason")));
    objc_msgSend(v99, "setInt32Value:", objc_msgSend(v100, "integerValue"));

    v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_disassociationReason")));
    v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaDisassocReason")));
    objc_msgSend(v101, "setInt32Value:", objc_msgSend(v102, "integerValue"));

    v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_captiveDetermination")));
    v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaCaptiveFlag")));
    objc_msgSend(v103, "setInt32Value:", objc_msgSend(v104, "integerValue"));

    v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_apMode")));
    v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaAPMode")));
    objc_msgSend(v105, "setInt32Value:", objc_msgSend(v106, "integerValue"));

    v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_associationLength")));
    v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaAssociatedTime")));
    objc_msgSend(v107, "setInt32Value:", objc_msgSend(v108, "integerValue"));

    v109 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_location")));
    v110 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v109, "subMessageValue"));
    v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "fieldForKey:", CFSTR("GEOL_latLng")));
    v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v111, "subMessageValue"));

    v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "fieldForKey:", CFSTR("GEOLL_lat")));
    v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaLat")));
    objc_msgSend(v114, "doubleValue");
    objc_msgSend(v113, "setDoubleValue:");

    v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "fieldForKey:", CFSTR("GEOLL_lng")));
    v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaLon")));
    objc_msgSend(v116, "doubleValue");
    objc_msgSend(v115, "setDoubleValue:");

    v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_identifier")));
    v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaSSID")));
    objc_msgSend(v117, "setStringValue:", v118);

    v120 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("ppaColoState")));
    v119 = objc_msgSend((id)v120, "unsignedIntegerValue");

    LODWORD(v120) = 0;
    do
    {
      if (((v119 >> v120) & 1) != 0)
      {
        v121 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("CQ_traits")));
        v120 = (v120 + 1);
        objc_msgSend(v121, "addRepeatableInt32Value:", v120);

      }
      else
      {
        LODWORD(v120) = v120 + 1;
      }
    }
    while ((_DWORD)v120 != 5);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void sub_1001584D4(uint64_t a1)
{
  void *v2;
  id v3;
  __int128 v4;
  _QWORD v5[4];
  __int128 v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[WAClient sharedClient](WAClient, "sharedClient"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100158574;
  v5[3] = &unk_100232938;
  v4 = *(_OWORD *)(a1 + 32);
  v3 = (id)v4;
  v6 = v4;
  objc_msgSend(v2, "getNewMessageForKey:groupType:andReply:", CFSTR("AP2"), 2, v5);

}

void sub_100158574(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  void *j;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  id obj;
  id obja;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[128];
  _BYTE v51[128];

  v5 = a2;
  v6 = a3;
  if (!v6 && v5 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("ppaBSSIDsMatchingSSID")));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "allObjects"));

    obj = v8;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v46, v51, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v47;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v47 != v11)
            objc_enumerationMutation(obj);
          v13 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)i);
          v14 = objc_msgSend(v5, "copy");
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fieldForKey:", CFSTR("AP2_uniqueID")));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "bssid"));
          objc_msgSend(v15, "setStringValue:", v16);

          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fieldForKey:", CFSTR("AP2_channel")));
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "channel"));
          objc_msgSend(v17, "setUint32Value:", objc_msgSend(v18, "unsignedIntValue"));

          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fieldForKey:", CFSTR("AP2_rssi")));
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "rssi"));
          objc_msgSend(v19, "setInt32Value:", objc_msgSend(v20, "intValue"));

          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fieldForKey:", CFSTR("AP2_origin")));
          objc_msgSend(v21, "setInt32Value:", objc_msgSend(v13, "origin"));

          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "fieldForKey:", CFSTR("CQ_essMembers")));
          objc_msgSend(v22, "addRepeatableSubMessageValue:", v14);

        }
        v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v51, 16);
      }
      while (v10);
    }

    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("ppaBSSIDsNotMatchSSID")));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "allObjects"));

    obja = v24;
    v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v42, v50, 16);
    if (v25)
    {
      v26 = v25;
      v27 = *(_QWORD *)v43;
      do
      {
        for (j = 0; j != v26; j = (char *)j + 1)
        {
          if (*(_QWORD *)v43 != v27)
            objc_enumerationMutation(obja);
          v29 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)j);
          v30 = objc_msgSend(v5, "copy");
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "fieldForKey:", CFSTR("AP2_uniqueID")));
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "bssid"));
          objc_msgSend(v31, "setStringValue:", v32);

          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "fieldForKey:", CFSTR("AP2_channel")));
          v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "channel"));
          objc_msgSend(v33, "setUint32Value:", objc_msgSend(v34, "unsignedIntValue"));

          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "fieldForKey:", CFSTR("AP2_rssi")));
          v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "rssi"));
          objc_msgSend(v35, "setInt32Value:", objc_msgSend(v36, "intValue"));

          v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "fieldForKey:", CFSTR("AP2_origin")));
          objc_msgSend(v37, "setInt32Value:", objc_msgSend(v29, "origin"));

          v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "fieldForKey:", CFSTR("CQ_nearbyBSSs")));
          objc_msgSend(v38, "addRepeatableSubMessageValue:", v30);

        }
        v26 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v42, v50, 16);
      }
      while (v26);
    }

    v6 = 0;
  }
  else
  {
    v39 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s Failed to get CQ or AP2 instance: %@", "-[WiFiManagerAnalytics _populateWiFiConnectionQualityMessageWithScorecard:andReply:]_block_invoke_3", v6);
    objc_autoreleasePoolPop(v39);
  }

}

void sub_100158A10(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;
  uint64_t v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[WAClient sharedClient](WAClient, "sharedClient"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100158AC0;
  v3[3] = &unk_100232988;
  v6 = *(_QWORD *)(a1 + 48);
  v4 = *(id *)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  objc_msgSend(v2, "getNewMessageForKey:groupType:andReply:", CFSTR("CST"), 2, v3);

}

void sub_100158AC0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = a3;
  if (!v5 && v12 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("ppaDLSpeed")));

    if (v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("ppaDLSpeed")));
      v8 = objc_msgSend(v12, "copy");
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "fieldForKey:", CFSTR("CST_avgDL")));
      objc_msgSend(v7, "floatValue");
      objc_msgSend(v9, "setFloatValue:");

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "fieldForKey:", CFSTR("CQ_speedTests")));
      objc_msgSend(v10, "addRepeatableSubMessageValue:", v8);

    }
  }
  else
  {
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s Failed to get CQ or CST instance: %@", "-[WiFiManagerAnalytics _populateWiFiConnectionQualityMessageWithScorecard:andReply:]_block_invoke_5", v5);
    objc_autoreleasePoolPop(v11);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100158DA4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t valuePtr;
  CFBooleanRef BOOLean;
  void *value;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: getNewMessageForKey DPSN message error: %@", "-[WiFiManagerAnalytics _populateDPSNotificationMessage:andReply:]_block_invoke", v6);
LABEL_4:
    objc_autoreleasePoolPop(v7);
    goto LABEL_20;
  }
  BOOLean = 0;
  value = 0;
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), CFSTR("symptom"), (const void **)&value))
  {
    v7 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s Failed to get key kWiFiDPSSypmtom", "-[WiFiManagerAnalytics _populateDPSNotificationMessage:andReply:]_block_invoke", v14);
    goto LABEL_4;
  }
  if (value)
  {
    LODWORD(valuePtr) = 0;
    CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "fieldForKey:", CFSTR("DPSN_symptom")));
    objc_msgSend(v8, "setInt32Value:", valuePtr);

  }
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), CFSTR("DPS_AC"), (const void **)&value) && value)
  {
    LODWORD(valuePtr) = 0;
    CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "fieldForKey:", CFSTR("DPSN_problemAC")));
    objc_msgSend(v9, "setUint32Value:", valuePtr);

  }
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), CFSTR("DPS_CCA"), (const void **)&value) && value)
  {
    LODWORD(valuePtr) = 0;
    CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "fieldForKey:", CFSTR("DPSN_cca")));
    objc_msgSend(v10, "setUint32Value:", valuePtr);

  }
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), CFSTR("DPS_TIMESTAMP"), (const void **)&value)
    && value)
  {
    valuePtr = 0;
    CFNumberGetValue((CFNumberRef)value, kCFNumberLongLongType, &valuePtr);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "fieldForKey:", CFSTR("DPSN_timestamp")));
    objc_msgSend(v11, "setUint64Value:", valuePtr);

  }
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), CFSTR("facetimeCallInProgress"), (const void **)&BOOLean)&& BOOLean)
  {
    v12 = CFBooleanGetValue(BOOLean);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "fieldForKey:", CFSTR("DPSN_facetimeCallInProgress")));
    objc_msgSend(v13, "setBoolValue:", v12 != 0);

  }
LABEL_20:
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1001590C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v15 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: getNewMessageForKey DPSAPS message error: %@", "-[WiFiManagerAnalytics _populateDPSProbeResultMessage:andReply:]_block_invoke", v5);
    objc_autoreleasePoolPop(v6);
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "fieldForKey:", CFSTR("DPSAPS_rttGatewayBE")));
    objc_msgSend(v7, "setUint32Value:", **(unsigned int **)(a1 + 40));

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "fieldForKey:", CFSTR("DPSAPS_rttGatewayBK")));
    objc_msgSend(v8, "setUint32Value:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4));

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "fieldForKey:", CFSTR("DPSAPS_rttGatewayVO")));
    objc_msgSend(v9, "setUint32Value:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 8));

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "fieldForKey:", CFSTR("DPSAPS_rttGatewayVI")));
    objc_msgSend(v10, "setUint32Value:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 12));

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "fieldForKey:", CFSTR("DPSAPS_rttPrimaryDnsBE")));
    objc_msgSend(v11, "setUint32Value:", 0);

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "fieldForKey:", CFSTR("DPSAPS_rttPrimaryDnsBK")));
    objc_msgSend(v12, "setUint32Value:", 0);

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "fieldForKey:", CFSTR("DPSAPS_rttPrimaryDnsVO")));
    objc_msgSend(v13, "setUint32Value:", 0);

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "fieldForKey:", CFSTR("DPSAPS_rttPrimaryDnsVI")));
    objc_msgSend(v14, "setUint32Value:", 0);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100159340(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: getNewMessageForKey WFAAWDWADAAD message error: %@", "-[WiFiManagerAnalytics _populateDPSLinkStateChangeMessage:andReply:]_block_invoke", v5);
    objc_autoreleasePoolPop(v6);
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fieldForKey:", CFSTR("WFAAWDWADAAD_newBSSID")));
    objc_msgSend(v7, "setBoolValue:", *(_BYTE *)(*(_QWORD *)(a1 + 40) + 1) != 0);

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fieldForKey:", CFSTR("WFAAWDWADAAD_changedChannel")));
    objc_msgSend(v8, "setBoolValue:", *(_BYTE *)(*(_QWORD *)(a1 + 40) + 2) != 0);

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fieldForKey:", CFSTR("WFAAWDWADAAD_changedDNSPrimary")));
    objc_msgSend(v9, "setBoolValue:", **(_BYTE **)(a1 + 40) != 0);

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fieldForKey:", CFSTR("WFAAWDWADAAD_changedDNSSecondary")));
    objc_msgSend(v10, "setBoolValue:", **(_BYTE **)(a1 + 40) != 0);

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fieldForKey:", CFSTR("WFAAWDWADAAD_changedMAC")));
    objc_msgSend(v11, "setBoolValue:", *(_BYTE *)(*(_QWORD *)(a1 + 40) + 3) != 0);

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fieldForKey:", CFSTR("WFAAWDWADAAD_eventType")));
    objc_msgSend(v12, "setInt32Value:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 8));

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fieldForKey:", CFSTR("WFAAWDWADAAD_additionalInfo")));
    objc_msgSend(v13, "setUint32Value:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 12));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1001595C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  const void *Value;
  const void *v8;
  void *v9;
  const void *v10;
  const void *v11;
  void *v12;
  const void *v13;
  const void *v14;
  void *v15;
  const void *v16;
  const void *v17;
  void *v18;
  const void *v19;
  const void *v20;
  void *v21;
  id v22;

  v22 = a2;
  v5 = a3;
  v6 = objc_autoreleasePoolPush();
  if (v5)
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: getNewMessageForKey WFAAWDWAAAPI message error: %@", "-[WiFiManagerAnalytics _populateDPSAPInfoMessage:andReply:]_block_invoke", v5);
    objc_autoreleasePoolPop(v6);
  }
  else
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Got WFAAWDWAAAPI WAGroupTypeWiFiDatapathDiagnostics WAMessage");
    objc_autoreleasePoolPop(v6);
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), CFSTR("ManufacturerElement"));
    if (Value)
    {
      v8 = Value;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "fieldForKey:", CFSTR("WFAAWDWAAAPI_manufacturerElement")));
      objc_msgSend(v9, "setStringValue:", v8);

    }
    v10 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), CFSTR("ModelName"));
    if (v10)
    {
      v11 = v10;
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "fieldForKey:", CFSTR("WFAAWDWAAAPI_modelName")));
      objc_msgSend(v12, "setStringValue:", v11);

    }
    v13 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), CFSTR("ModelNumber"));
    if (v13)
    {
      v14 = v13;
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "fieldForKey:", CFSTR("WFAAWDWAAAPI_modelNumber")));
      objc_msgSend(v15, "setStringValue:", v14);

    }
    v16 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), CFSTR("DeviceNameElement"));
    if (v16)
    {
      v17 = v16;
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "fieldForKey:", CFSTR("WFAAWDWAAAPI_deviceNameElement")));
      objc_msgSend(v18, "setStringValue:", v17);

    }
    v19 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), CFSTR("DeviceNameData"));
    if (v19)
    {
      v20 = v19;
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "fieldForKey:", CFSTR("WFAAWDWAAAPI_deviceNameData")));
      objc_msgSend(v21, "setStringValue:", v20);

    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100159858(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  BOOL v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  unsigned int valuePtr;
  CFBooleanRef BOOLean;
  void *value;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: getNewMessageForKey WFAAWDSWFN message error: %@", "-[WiFiManagerAnalytics _populateSlowWiFiNotificationMessage:andReply:]_block_invoke", v6);
    objc_autoreleasePoolPop(v7);
  }
  else
  {
    BOOLean = 0;
    value = 0;
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), CFSTR("SLOWWIFI_ACTION_STAGE"), (const void **)&value))
    {
      v8 = value == 0;
    }
    else
    {
      v8 = 1;
    }
    if (!v8)
    {
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "fieldForKey:", CFSTR("WFAAWDSWFN_actionField")));
      objc_msgSend(v9, "setUint32Value:", valuePtr);

    }
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), CFSTR("SLOWWIFI_ACTION_TYPE"), (const void **)&value)&& value)
    {
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "fieldForKey:", CFSTR("WFAAWDSWFN_recoveryAction")));
      objc_msgSend(v10, "setUint32Value:", valuePtr);

    }
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), CFSTR("SLOWWIFI_ACTION_REASON"), (const void **)&value)&& value)
    {
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "fieldForKey:", CFSTR("WFAAWDSWFN_recoveryReason")));
      objc_msgSend(v11, "setUint32Value:", valuePtr);

    }
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), CFSTR("SLOWWIFI_USER_INPUT"), (const void **)&value)&& value)
    {
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "fieldForKey:", CFSTR("WFAAWDSWFN_userInput")));
      objc_msgSend(v12, "setUint32Value:", valuePtr);

    }
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), CFSTR("facetimeCallInProgress"), (const void **)&BOOLean)&& BOOLean)
    {
      v13 = CFBooleanGetValue(BOOLean);
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "fieldForKey:", CFSTR("WFAAWDSWFN_facetimeCallInProgress")));
      objc_msgSend(v14, "setBoolValue:", v13 != 0);

    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

id sub_100159B4C(uint64_t a1)
{
  const void *v1;
  id v2;
  void *v3;
  id v4;
  NSString *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;

  v1 = *(const void **)a1;
  v2 = *(id *)(a1 + 8);
  v3 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Enter", "WiFiMissingPasswordSoftErrorHandler");
  objc_autoreleasePoolPop(v3);
  if (v2)
    v4 = objc_msgSend(v2, "incrementCount");
  v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Password for WiFi network '%@' is not in the keychain. If you did not recently delete or forget this network, please tap Yes to TTR and use \"Add Devices\" to collect data from *all* devices"), sub_10002B088(v1));
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = objc_msgSend(v2, "askToLaunchTapToRadarWithMessage:timeout:completionHandler:", v6, &stru_100232A40, 60.0);
  if ((v7 & 1) != 0)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("tap-to-radar://new?Title=WiFi%20Password%20Missing%20From%20Keychain&AutoDiagnostics=phone&Description=WiFi%20Password%20Missing%20From%20Keychain&ComponentID=621547&ComponentName=WiFi%20Connectivity&ComponentVersion=iOS&Classification=Serious%20Bug%20&ExtensionIdentifiers=com.apple.DiagnosticExtensions.WiFi")));
    v9 = objc_msgSend(v2, "tapToRadarWithURL:completionHandler:", v8, &stru_100232A60);

  }
  else
  {
    v10 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: User declined the TTR", "WiFiMissingPasswordSoftErrorHandler");
    objc_autoreleasePoolPop(v10);
  }

  return v7;
}

void sub_100159CA8(id a1, NSDictionary *a2, NSError *a3)
{
  NSError *v4;
  void *v5;
  NSDictionary *v6;

  v6 = a2;
  v4 = a3;
  v5 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: askToLaunchTapToRadarWithMessage result:%@, error:%@", "WiFiMissingPasswordSoftErrorHandler_block_invoke", v6, v4);
  objc_autoreleasePoolPop(v5);

}

void sub_100159D28(id a1, NSDictionary *a2, NSError *a3)
{
  NSError *v4;
  void *v5;
  NSDictionary *v6;

  v6 = a2;
  v4 = a3;
  v5 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: WiFiMissingPasswordSoftError tapToRadarWithURL result:%@, error:%@", "WiFiMissingPasswordSoftErrorHandler_block_invoke_2", v6, v4);
  objc_autoreleasePoolPop(v5);

}

void sub_100159E94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10015A208(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;

  v2 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 48))
      v3 = "Started";
    else
      v3 = "Stopped";
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: %s tracking NOIs.", "-[WiFiNOIManager asyncTrackNetworksOfInterest:]_block_invoke", v3);
  }
  objc_autoreleasePoolPop(v2);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 8);
  if (*(_BYTE *)(v4 + 48))
    return objc_msgSend(v5, "trackAllBuiltinNOIsForInterfaceType:options:", 1, 0);
  objc_msgSend(v5, "stopTrackingNOIs:", *(_QWORD *)(v4 + 16));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "stopTrackingNOIs:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
}

void sub_10015A3BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

id sub_10015A3D4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  unsigned __int8 v5;
  uint64_t v6;
  void *v7;

  v2 = (void *)sub_10002B088(*(const void **)(a1 + 48));
  if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "count"))
  {
    v3 = 0;
    goto LABEL_11;
  }
  v3 = 1;
  if ((objc_msgSend(v2, "isEqualToString:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "firstObject")) & 1) == 0)
  {
    if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "containsObject:", v2))
    {
      v3 = 0;
      goto LABEL_8;
    }
    v3 = 2;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
LABEL_8:
  v4 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Setting home NOI for %s to : %@(%d)", "-[WiFiNOIManager setNetworkOfInterest:]_block_invoke", objc_msgSend(v2, "UTF8String"), sub_100064D68(v3), v3);
  objc_autoreleasePoolPop(v4);
  sub_1000CBF00(*(const void **)(a1 + 48), v3);
LABEL_11:
  if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "count"))
    return objc_msgSend(*(id *)(a1 + 32), "asyncTrackNetworksOfInterest:", 0);
  v5 = objc_msgSend(v2, "isEqualToString:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "firstObject"));
  v6 = 1;
  if ((v5 & 1) != 0)
    goto LABEL_15;
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "containsObject:", v2))
  {
    v6 = 2;
LABEL_15:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    v3 = v6;
  }
  v7 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Setting work NOI for %s to : %@(%d)", "-[WiFiNOIManager setNetworkOfInterest:]_block_invoke", objc_msgSend(v2, "UTF8String"), sub_100064D94(v3), v3);
  objc_autoreleasePoolPop(v7);
  sub_1000CBD0C(*(const void **)(a1 + 48), v3);
  return objc_msgSend(*(id *)(a1 + 32), "asyncTrackNetworksOfInterest:", 0);
}

id sub_10015A604(uint64_t a1)
{
  void *v2;
  id result;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "networkAttachmentInfoForScopedNOI:reply:", _NSConcreteStackBlock, 3221225472, sub_10015A740, &unk_100232AF0, *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6), *(_QWORD *)(a1 + 32));
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

void sub_10015A740(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;

  if (a3)
  {
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: %s: error: %s\n", "-[WiFiNOIManager asyncScopeHomeNetworks]_block_invoke_2", objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "typePrettyPrint"), "UTF8String"), objc_msgSend(objc_msgSend(a3, "description"), "UTF8String"));
    objc_autoreleasePoolPop(v5);
  }
  else
  {
    v6 = objc_msgSend(a2, "keysSortedByValueUsingComparator:", &stru_100232AC8);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 72), "removeAllObjects");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 72), "setArray:", v6);
  }
}

int64_t sub_10015A810(id a1, id a2, id a3)
{
  double v4;
  double v5;
  double v6;

  objc_msgSend(a2, "doubleValue");
  v5 = v4;
  objc_msgSend(a3, "doubleValue");
  if (v5 > v6)
    return -1;
  else
    return v5 < v6;
}

id sub_10015A8AC(uint64_t a1)
{
  void *v2;
  id result;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "networkAttachmentInfoForScopedNOI:reply:", _NSConcreteStackBlock, 3221225472, sub_10015A9E8, &unk_100232AF0, *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6), *(_QWORD *)(a1 + 32));
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

void sub_10015A9E8(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;

  if (a3)
  {
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: %s: error: %s\n", "-[WiFiNOIManager asyncScopeWorkNetworks]_block_invoke_2", objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "typePrettyPrint"), "UTF8String"), objc_msgSend(objc_msgSend(a3, "description"), "UTF8String"));
    objc_autoreleasePoolPop(v5);
  }
  else
  {
    v6 = objc_msgSend(a2, "keysSortedByValueUsingComparator:", &stru_100232B10);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 80), "removeAllObjects");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 80), "setArray:", v6);
  }
}

int64_t sub_10015AAB8(id a1, id a2, id a3)
{
  double v4;
  double v5;
  double v6;

  objc_msgSend(a2, "doubleValue");
  v5 = v4;
  objc_msgSend(a3, "doubleValue");
  if (v5 > v6)
    return -1;
  else
    return v5 < v6;
}

void sub_10015AB54(uint64_t a1)
{
  void *v2;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 52) == 7)
  {
    v2 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "NOI Transition Check Timer fired. Triggering NOI Transition Check.");
    objc_autoreleasePoolPop(v2);
    sub_10011A1AC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
  }
}

uint64_t sub_10015B130()
{
  uint64_t result;

  result = qword_10026DBE8;
  if (!qword_10026DBE8)
  {
    pthread_once(&stru_10026CE90, (void (*)(void))sub_10015B16C);
    return qword_10026DBE8;
  }
  return result;
}

uint64_t sub_10015B16C()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass(&unk_100232B30);
  qword_10026DBE8 = result;
  return result;
}

_QWORD *sub_10015B190(uint64_t a1)
{
  _QWORD *result;

  if (!qword_10026DBE8)
    pthread_once(&stru_10026CE90, (void (*)(void))sub_10015B16C);
  result = (_QWORD *)_CFRuntimeCreateInstance(a1);
  if (result)
  {
    result[2] = 0;
    result[3] = 0;
    result[4] = 0;
  }
  return result;
}

BOOL sub_10015B1F0(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3;

  v3 = CFRetain(cf);
  *(_QWORD *)(a1 + 16) = v3;
  return v3 != 0;
}

BOOL sub_10015B220(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3;

  v3 = CFRetain(cf);
  *(_QWORD *)(a1 + 24) = v3;
  return v3 != 0;
}

BOOL sub_10015B250(uint64_t a1)
{
  CFAbsoluteTime Current;

  Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a1 + 32) = Current;
  return Current != 0.0;
}

double sub_10015B27C(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

void sub_10015B284(_QWORD *a1)
{
  CFTypeID v2;
  uint64_t v3;
  const void *v4;
  _QWORD *v5;
  const void *v6;

  if (!a1)
    sub_1001877EC();
  v2 = CFGetTypeID(a1);
  v3 = qword_10026DBE8;
  if (!qword_10026DBE8)
  {
    pthread_once(&stru_10026CE90, (void (*)(void))sub_10015B16C);
    v3 = qword_10026DBE8;
  }
  if (v2 != v3)
    sub_100187814();
  v5 = a1 + 2;
  v4 = (const void *)a1[2];
  if (v4)
  {
    CFRelease(v4);
    *v5 = 0;
  }
  v6 = (const void *)a1[3];
  if (v6)
    CFRelease(v6);
  *v5 = 0;
  a1[3] = 0;
  a1[4] = 0;
}

uint64_t sub_10015B310(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16));
  if ((_DWORD)result)
  {
    result = CFEqual(*(CFTypeRef *)(a1 + 24), *(CFTypeRef *)(a2 + 24));
    if ((_DWORD)result)
      return *(double *)(a1 + 32) == *(double *)(a2 + 32);
  }
  return result;
}

CFStringRef sub_10015B364(uint64_t a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(kCFAllocatorDefault, a2, CFSTR("WiFiCacheEntry@%p"), a1);
}

CFStringRef sub_10015B39C(uint64_t a1)
{
  return CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("WiFiCacheEntry@%p"), a1);
}

void sub_10015B5B8()
{
  __CFNotificationCenter *DarwinNotifyCenter;

  sub_10015B5EC();
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)sub_10015B898, CFSTR("com.apple.language.changed"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void sub_10015B5EC()
{
  const __CFURL *v0;
  __CFBundle *v1;
  const __CFArray *v2;
  void *v3;
  const __CFArray *v4;
  const __CFArray *v5;
  const __CFArray *v6;
  const __CFArray *v7;
  void *v8;
  void *v9;
  void *v10;
  const char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v0 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, CFSTR("/System/Library/PrivateFrameworks/MobileWiFi.framework"), kCFURLPOSIXPathStyle, 0);
  v1 = CFBundleCreate(kCFAllocatorDefault, v0);
  if (v0)
    CFRelease(v0);
  if (v1)
  {
    CFPreferencesSynchronize(CFSTR(".GlobalPreferences"), CFSTR("mobile"), kCFPreferencesAnyHost);
    if (qword_10026DBF8)
      CFRelease((CFTypeRef)qword_10026DBF8);
    qword_10026DBF8 = (uint64_t)v1;
    v2 = (const __CFArray *)CFPreferencesCopyValue(CFSTR("AppleLanguages"), CFSTR(".GlobalPreferences"), CFSTR("mobile"), kCFPreferencesAnyHost);
    if (v2)
      goto LABEL_10;
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "could not get apple languages array, assuming english\n");
    objc_autoreleasePoolPop(v3);
    v2 = CFArrayCreate(kCFAllocatorDefault, (const void **)&off_100232BA8, 1, &kCFTypeArrayCallBacks);
    if (v2)
    {
LABEL_10:
      v4 = CFBundleCopyBundleLocalizations(v1);
      if (v4)
      {
        v5 = v4;
        v6 = CFBundleCopyLocalizationsForPreferences(v4, v2);
        v7 = v6;
        if (v6)
        {
          if (CFArrayGetCount(v6))
          {
            if (qword_10026DBF0)
            {
              CFRelease((CFTypeRef)qword_10026DBF0);
              qword_10026DBF0 = 0;
            }
            qword_10026DBF0 = (uint64_t)CFArrayGetValueAtIndex(v7, 0);
            CFRetain((CFTypeRef)qword_10026DBF0);
            v8 = objc_autoreleasePoolPush();
            if (qword_10026DD20)
              objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: preferred language='%@'", "WiFiLocalizationUpdatePreferredLanguage", qword_10026DBF0);
            goto LABEL_28;
          }
          v8 = objc_autoreleasePoolPush();
          v10 = (void *)qword_10026DD20;
          if (!qword_10026DD20)
          {
LABEL_28:
            objc_autoreleasePoolPop(v8);
            CFRelease(v2);
            CFRelease(v5);
            if (v7)
              CFRelease(v7);
            return;
          }
          v11 = "no localizations for preferred languages\n";
        }
        else
        {
          v8 = objc_autoreleasePoolPush();
          v10 = (void *)qword_10026DD20;
          if (!qword_10026DD20)
            goto LABEL_28;
          v11 = "could not get localizations for preferred languages\n";
        }
        objc_msgSend(v10, "WFLog:message:", 3, v11, v13, v14);
        goto LABEL_28;
      }
      v9 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "could not get localizations array from bundle\n");
      objc_autoreleasePoolPop(v9);
      CFRelease(v2);
    }
    else
    {
      v12 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "could not use english as default language\n");
      objc_autoreleasePoolPop(v12);
    }
  }
}

void sub_10015B898()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "language changed - refresh preferred language");
  objc_autoreleasePoolPop(v0);
  sub_10015B5EC();
}

void sub_10015B8E0()
{
  if (qword_10026DBF0)
  {
    CFRelease((CFTypeRef)qword_10026DBF0);
    qword_10026DBF0 = 0;
  }
  if (qword_10026DBF8)
  {
    CFRelease((CFTypeRef)qword_10026DBF8);
    qword_10026DBF8 = 0;
  }
}

BOOL sub_10015B920()
{
  return qword_10026DBF0 != 0;
}

id sub_10015B934(uint64_t a1)
{
  void *v2;
  void *v3;

  if (qword_10026DBF0)
  {
    v2 = (void *)CFBundleCopyLocalizedStringForLocalization(qword_10026DBF8, a1, 0, 0);
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: lang='%@' key='%@' value='%@'", "WiFiLocalizationGetLocalizedString", qword_10026DBF0, a1, v2);
  }
  else
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "WiFiLocalizationGetLocalizedString");
    v2 = 0;
  }
  objc_autoreleasePoolPop(v3);
  return v2;
}

uint64_t sub_10015BA10()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass(&unk_100232DB8);
  qword_10026DC00 = result;
  return result;
}

_OWORD *sub_10015BA34(uint64_t a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4)
{
  return sub_10015BA3C(a1, a2, a3, a4, 0);
}

_OWORD *sub_10015BA3C(uint64_t a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4, void (*a5)(uint64_t, _OWORD *))
{
  CFNumberRef v10;
  CFNumberRef v11;
  _OWORD *Instance;
  _OWORD *v13;
  _OWORD *v14;
  const __CFDictionary *MutableCopy;
  const void *Value;
  WiFiVirtualInterfaceWeakWrapper *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  const __CFDictionary *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  const char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[5];
  id v39;
  _QWORD v40[5];
  id v41;
  _QWORD v42[5];
  id v43;
  _QWORD v44[5];
  id v45;
  _QWORD v46[5];
  id v47;
  _QWORD v48[5];
  id v49[2];
  _QWORD v50[5];
  id v51;
  id location;
  uint64_t valuePtr;

  valuePtr = 6;
  v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
  if (!v10)
    return 0;
  v11 = v10;
  if (!a3)
  {
    v34 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: null intfDictionary.", "WiFiVirtualInterfaceCreateWithCompletion");
    goto LABEL_33;
  }
  if (!a1)
  {
    v34 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: null device.", "WiFiVirtualInterfaceCreateWithCompletion");
    goto LABEL_33;
  }
  if (!qword_10026DC00)
    pthread_once(&stru_10026CF00, (void (*)(void))sub_10015BA10);
  Instance = (_OWORD *)_CFRuntimeCreateInstance(a2);
  if (!Instance)
  {
    v34 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Cannot create interface instance", v37);
LABEL_33:
    objc_autoreleasePoolPop(v34);
    goto LABEL_25;
  }
  v13 = Instance;
  Instance[1] = 0u;
  v14 = Instance + 1;
  Instance[13] = 0u;
  Instance[14] = 0u;
  Instance[11] = 0u;
  Instance[12] = 0u;
  Instance[9] = 0u;
  Instance[10] = 0u;
  Instance[7] = 0u;
  Instance[8] = 0u;
  Instance[5] = 0u;
  Instance[6] = 0u;
  Instance[3] = 0u;
  Instance[4] = 0u;
  Instance[2] = 0u;
  MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, a3);
  *((_QWORD *)v14 + 2) = MutableCopy;
  if (!MutableCopy)
  {
    v31 = objc_autoreleasePoolPush();
    v32 = (void *)qword_10026DD20;
    if (!qword_10026DD20)
      goto LABEL_24;
    v33 = "Cannot create interface parameters dictionary copy";
    goto LABEL_23;
  }
  *((_QWORD *)v13 + 3) = a1;
  *((_QWORD *)v13 + 6) = a4;
  Value = CFDictionaryGetValue(MutableCopy, CFSTR("VIRT_IF_ROLE"));
  if (!CFEqual(v11, Value))
  {
    v26 = (const __CFDictionary *)*((_QWORD *)v13 + 4);
    if (v26)
    {
      v27 = CFDictionaryGetValue(v26, CFSTR("VIRT_IF_NAME"));
      *((_QWORD *)v13 + 5) = v27;
      if (v27)
      {
        v28 = Apple80211Open(v14);
        if ((_DWORD)v28)
        {
          v35 = v28;
          v31 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Cannot open 80211 device, err %d", v35);
          goto LABEL_24;
        }
        v29 = Apple80211BindToInterfaceWithParams(*((_QWORD *)v13 + 2), *((_QWORD *)v13 + 5), 0, 0, a4);
        if ((_DWORD)v29)
        {
          v36 = v29;
          v31 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Cannot bind 80211 device, err %d", v36);
          goto LABEL_24;
        }
        v30 = sub_10015C930(v13);
        *((_QWORD *)v13 + 2) = v30;
        if (v30)
        {
          if (a5)
            a5(a1, v13);
          goto LABEL_10;
        }
        v31 = objc_autoreleasePoolPush();
        v32 = (void *)qword_10026DD20;
        if (!qword_10026DD20)
          goto LABEL_24;
        v33 = "Unable to start monitoring events";
        goto LABEL_23;
      }
    }
    else
    {
      *((_QWORD *)v13 + 5) = 0;
    }
    v31 = objc_autoreleasePoolPush();
    v32 = (void *)qword_10026DD20;
    if (!qword_10026DD20)
    {
LABEL_24:
      objc_autoreleasePoolPop(v31);
      CFRelease(v11);
      v11 = (CFNumberRef)v13;
LABEL_25:
      v13 = 0;
      goto LABEL_11;
    }
    v33 = "No virtual interface name returned.";
LABEL_23:
    objc_msgSend(v32, "WFLog:message:", 4, v33, v37);
    goto LABEL_24;
  }
  v17 = objc_alloc_init(WiFiVirtualInterfaceWeakWrapper);
  *((_QWORD *)v13 + 27) = v17;
  -[WiFiVirtualInterfaceWeakWrapper setVirtualInterface:](v17, "setVirtualInterface:", v13);
  location = (id)0xAAAAAAAAAAAAAAAALL;
  objc_initWeak(&location, *((id *)v13 + 27));
  *((_QWORD *)v13 + 25) = objc_alloc_init((Class)AWDLServiceDiscoveryManager);
  *((_QWORD *)v13 + 24) = objc_alloc_init((Class)WiFiP2PAWDLStateMonitor);
  v18 = objc_alloc((Class)WiFiP2PDNSServiceDiscoveryManager);
  v50[0] = _NSConcreteStackBlock;
  v50[1] = 3221225472;
  v50[2] = sub_10015C094;
  v50[3] = &unk_100232BE0;
  v50[4] = a4;
  objc_copyWeak(&v51, &location);
  *((_QWORD *)v13 + 26) = objc_msgSend(v18, "initUsingWiFiAware:serviceCallback:", 0, v50);
  *((_QWORD *)v13 + 23) = 0;
  v19 = (void *)*((_QWORD *)v13 + 24);
  v48[0] = _NSConcreteStackBlock;
  v48[1] = 3221225472;
  v48[2] = sub_10015C1A0;
  v48[3] = &unk_100232C30;
  v48[4] = a4;
  objc_copyWeak(v49, &location);
  v49[1] = a5;
  objc_msgSend(v19, "setStateUpdatedHandler:", v48);
  v20 = (void *)*((_QWORD *)v13 + 24);
  v46[0] = _NSConcreteStackBlock;
  v46[1] = 3221225472;
  v46[2] = sub_10015C374;
  v46[3] = &unk_100232C58;
  v46[4] = a4;
  objc_copyWeak(&v47, &location);
  objc_msgSend(v20, "setStatisticsUpdatedHandler:", v46);
  v21 = (void *)*((_QWORD *)v13 + 24);
  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3221225472;
  v44[2] = sub_10015C470;
  v44[3] = &unk_100232CA8;
  v44[4] = a4;
  objc_copyWeak(&v45, &location);
  objc_msgSend(v21, "setRealtimeModeUpdatedHandler:", v44);
  v22 = (void *)*((_QWORD *)v13 + 24);
  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472;
  v42[2] = sub_10015C5A0;
  v42[3] = &unk_100232CF8;
  v42[4] = a4;
  objc_copyWeak(&v43, &location);
  objc_msgSend(v22, "setThreadCoexistenceEventHandler:", v42);
  v23 = (void *)*((_QWORD *)v13 + 24);
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_10015C6CC;
  v40[3] = &unk_100232D48;
  v40[4] = a4;
  objc_copyWeak(&v41, &location);
  objc_msgSend(v23, "setSoftAPChannelChangedEventHandler:", v40);
  v24 = (void *)*((_QWORD *)v13 + 24);
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472;
  v38[2] = sub_10015C848;
  v38[3] = &unk_100232D98;
  v38[4] = a4;
  objc_copyWeak(&v39, &location);
  objc_msgSend(v24, "setChannelSequenceUpdatedEventHandler:", v38);
  objc_msgSend(*((id *)v13 + 24), "beginMonitoring");
  objc_destroyWeak(&v39);
  objc_destroyWeak(&v41);
  objc_destroyWeak(&v43);
  objc_destroyWeak(&v45);
  objc_destroyWeak(&v47);
  objc_destroyWeak(v49);
  objc_destroyWeak(&v51);
  objc_destroyWeak(&location);
LABEL_10:
  *((_QWORD *)v13 + 29) = 0;
LABEL_11:
  CFRelease(v11);
  return v13;
}

void sub_10015C008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
  id *v10;
  id *v11;
  id *v12;
  id *v13;
  id *v14;
  id *v15;
  uint64_t v16;

  objc_destroyWeak(v10);
  objc_destroyWeak(v15);
  objc_destroyWeak(v14);
  objc_destroyWeak(v13);
  objc_destroyWeak(v11);
  objc_destroyWeak(v12);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v16 - 120));
  _Unwind_Resume(a1);
}

void sub_10015C094(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[4];
  id v3;

  v1 = *(NSObject **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10015C10C;
  block[3] = &unk_100232BB8;
  objc_copyWeak(&v3, (id *)(a1 + 40));
  dispatch_async(v1, block);
  objc_destroyWeak(&v3);
}

void sub_10015C10C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, const void *, CFTypeRef, uint64_t, _QWORD);
  uint64_t v5;
  const __CFDictionary *v6;
  uint64_t v7;
  const void *Value;
  CFTypeRef cf;

  v1 = objc_msgSend(objc_loadWeak((id *)(a1 + 32)), "virtualInterface");
  if (v1)
  {
    v2 = v1;
    cf = 0;
    v3 = sub_10015CF9C((uint64_t)v1, (__CFDictionary **)&cf);
    v4 = (void (*)(uint64_t, const void *, CFTypeRef, uint64_t, _QWORD))v2[15];
    if (v4)
    {
      v5 = v3;
      v7 = v2[3];
      v6 = (const __CFDictionary *)v2[4];
      if (v6)
        Value = CFDictionaryGetValue(v6, CFSTR("VIRT_IF_NAME"));
      else
        Value = 0;
      v4(v7, Value, cf, v5, v2[16]);
    }
    if (cf)
      CFRelease(cf);
  }
}

void sub_10015C1A0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  _QWORD block[5];
  id v7[2];

  v3 = a2;
  v4 = *(NSObject **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10015C238;
  block[3] = &unk_100232C08;
  objc_copyWeak(v7, (id *)(a1 + 40));
  v5 = *(void **)(a1 + 48);
  block[4] = v3;
  v7[1] = v5;
  dispatch_async(v4, block);
  objc_destroyWeak(v7);
}

void sub_10015C238(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  const __CFDictionary *Value;
  void (*v7)(_QWORD, uint64_t);
  uint64_t v8;
  void (*v9)(uint64_t, const void *, CFTypeRef, uint64_t, _QWORD);
  uint64_t v10;
  const __CFDictionary *v11;
  uint64_t v12;
  const void *v13;
  CFTypeRef cf;

  v2 = objc_msgSend(objc_loadWeak((id *)(a1 + 40)), "virtualInterface");
  if (v2)
  {
    v3 = (uint64_t)v2;
    v4 = (void *)v2[23];

    v5 = *(void **)(a1 + 32);
    *(_QWORD *)(v3 + 184) = v5;
    if (v5)
    {
      if (!v4)
      {
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 32), CFSTR("VIRT_IF_NAME"), objc_msgSend(v5, "interfaceName"));
        Value = *(const __CFDictionary **)(v3 + 32);
        if (Value)
          Value = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("VIRT_IF_NAME"));
        *(_QWORD *)(v3 + 40) = Value;
        v7 = *(void (**)(_QWORD, uint64_t))(a1 + 48);
        if (v7)
          v7(*(_QWORD *)(v3 + 24), v3);
        sub_100068D10(*(_QWORD *)(v3 + 24));
      }
      cf = 0;
      v8 = sub_10015CF9C(v3, (__CFDictionary **)&cf);
      v9 = *(void (**)(uint64_t, const void *, CFTypeRef, uint64_t, _QWORD))(v3 + 104);
      if (v9)
      {
        v10 = v8;
        v12 = *(_QWORD *)(v3 + 24);
        v11 = *(const __CFDictionary **)(v3 + 32);
        if (v11)
          v13 = CFDictionaryGetValue(v11, CFSTR("VIRT_IF_NAME"));
        else
          v13 = 0;
        v9(v12, v13, cf, v10, *(_QWORD *)(v3 + 112));
      }
      if (cf)
        CFRelease(cf);
    }
  }
  else
  {

  }
}

const void *sub_10015C354(uint64_t a1)
{
  const __CFDictionary *v1;

  if (a1 && (v1 = *(const __CFDictionary **)(a1 + 32)) != 0)
    return CFDictionaryGetValue(v1, CFSTR("VIRT_IF_NAME"));
  else
    return 0;
}

void sub_10015C374(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[4];
  id v3;

  v1 = *(NSObject **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10015C3EC;
  block[3] = &unk_100232BB8;
  objc_copyWeak(&v3, (id *)(a1 + 40));
  dispatch_async(v1, block);
  objc_destroyWeak(&v3);
}

void sub_10015C3EC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;

  v1 = objc_msgSend(objc_loadWeak((id *)(a1 + 32)), "virtualInterface");
  if (v1)
  {
    v2 = v1;
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: received APPLE80211_M_AWDL_STATISTICS event.", "__WiFiVirtualInterfaceProcessAwdlStatisticsEvent");
    objc_autoreleasePoolPop(v3);
    sub_100054454(v2[3]);
  }
}

void sub_10015C470(uint64_t a1, char a2)
{
  NSObject *v3;
  _QWORD v4[4];
  id v5;
  char v6;

  v3 = *(NSObject **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10015C4F8;
  v4[3] = &unk_100232C80;
  objc_copyWeak(&v5, (id *)(a1 + 40));
  v6 = a2;
  dispatch_async(v3, v4);
  objc_destroyWeak(&v5);
}

void sub_10015C4F8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void (*v6)(_QWORD, uint64_t, _QWORD);

  v2 = objc_msgSend(objc_loadWeak((id *)(a1 + 32)), "virtualInterface");
  if (v2)
  {
    v3 = v2;
    v4 = *(unsigned __int8 *)(a1 + 40);
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: didStart %d", "__WiFiVirtualInterfaceProcessAWDLRealTimeModeEvent", v4);
    objc_autoreleasePoolPop(v5);
    v6 = (void (*)(_QWORD, uint64_t, _QWORD))v3[17];
    if (v6)
      v6(v3[3], v4, v3[18]);
  }
}

void sub_10015C5A0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  _QWORD v5[4];
  id v6[2];

  v3 = a2;
  v4 = *(NSObject **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10015C630;
  v5[3] = &unk_100232CD0;
  objc_copyWeak(v6, (id *)(a1 + 40));
  v6[1] = v3;
  dispatch_async(v4, v5);
  objc_destroyWeak(v6);
}

void sub_10015C630(uint64_t a1)
{
  const void *v2;
  void *v3;

  if (objc_msgSend(objc_loadWeak((id *)(a1 + 32)), "virtualInterface") && !*(_QWORD *)(a1 + 40))
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "invalid args: virtInf:%s, eventDict:%s", "Null", "non-Null");
    objc_autoreleasePoolPop(v3);
  }
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
}

void sub_10015C6CC(uint64_t a1, char a2, __int16 a3)
{
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  __int16 v8;
  char v9;

  v5 = *(NSObject **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10015C75C;
  v6[3] = &unk_100232D20;
  objc_copyWeak(&v7, (id *)(a1 + 40));
  v9 = a2;
  v8 = a3;
  dispatch_async(v5, v6);
  objc_destroyWeak(&v7);
}

void sub_10015C75C(uint64_t a1)
{
  id v2;
  _QWORD *v3;
  const __CFDictionary *v4;
  unint64_t v5;
  unint64_t v6;

  v2 = objc_msgSend(objc_loadWeak((id *)(a1 + 32)), "virtualInterface");
  v5 = 0xAAAAAAAAAAAAAAAALL;
  v6 = 0xAAAAAAAAAAAAAAAALL;
  HIDWORD(v5) = *(unsigned __int8 *)(a1 + 42);
  LOWORD(v6) = *(_WORD *)(a1 + 40);
  if (v2)
  {
    v3 = v2;
    v4 = (const __CFDictionary *)*((_QWORD *)v2 + 4);
    if (v4)
      CFDictionaryGetValue(v4, CFSTR("VIRT_IF_NAME"));
    sub_10015C7CC(v3, (uint64_t)&v5);
  }
}

void sub_10015C7CC(_QWORD *a1, uint64_t a2)
{
  void (*v3)(_QWORD, _QWORD, _QWORD);
  void *v4;

  v3 = (void (*)(_QWORD, _QWORD, _QWORD))a1[19];
  if (v3)
    v3(a1[3], *(unsigned __int16 *)(a2 + 8), a1[20]);
  v4 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: received APPLE80211_M_SOFTAP_CH_CHANGED_EVENT(%u) event", "__WiFiVirtualInterfaceProcessSoftAPChannelChangedEvent", *(unsigned __int16 *)(a2 + 8));
  objc_autoreleasePoolPop(v4);
}

void sub_10015C848(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  _QWORD v5[5];
  id v6;

  v3 = a2;
  v4 = *(NSObject **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10015C8D8;
  v5[3] = &unk_100232D70;
  objc_copyWeak(&v6, (id *)(a1 + 40));
  v5[4] = v3;
  dispatch_async(v4, v5);
  objc_destroyWeak(&v6);
}

void sub_10015C8D8(uint64_t a1)
{
  const void *v2;

  if (objc_msgSend(objc_loadWeak((id *)(a1 + 40)), "virtualInterface"))
    -[WiFiUsageMonitor setAwdlSequence:](+[WiFiUsageMonitor sharedInstance](WiFiUsageMonitor, "sharedInstance"), "setAwdlSequence:", *(_QWORD *)(a1 + 32));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

uint64_t sub_10015C930(_QWORD *a1)
{
  uint64_t result;
  void *v3;
  void *v4;

  result = a1[2];
  if (result)
  {
    if (Apple80211EventMonitoringInit2(result, sub_10015DD30, a1, a1[6]))
    {
      v4 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: Unable to init event monitoring", "WiFiVirtualInterfaceMonitorEvents");
      objc_autoreleasePoolPop(v4);
    }
    else if (!Apple80211StartMonitoringEvent(a1[2], 9)
           && !Apple80211StartMonitoringEvent(a1[2], 10)
           && !Apple80211StartMonitoringEvent(a1[2], 172))
    {
      return a1[2];
    }
    if (a1[2])
    {
      v3 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: failed to start event monitoring on %@", "WiFiVirtualInterfaceMonitorEvents", a1[5]);
      objc_autoreleasePoolPop(v3);
      Apple80211EventMonitoringHalt(a1[2]);
      result = 0;
      a1[2] = 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10015CA4C(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

CFDataRef sub_10015CA58(uint64_t a1)
{
  void *v2;
  id v3;
  const __CFDictionary *v5;
  const __CFString *Value;
  const __CFString *v7;
  CFStringEncoding SystemEncoding;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  CFDataRef v11;
  void *v12;
  void *v13;
  size_t size;
  char buffer[8];
  uint64_t v16;
  int v17[4];
  int v18;
  unsigned int v19;

  *(_QWORD *)buffer = 0;
  v16 = 0;
  v2 = *(void **)(a1 + 184);
  if (v2 && objc_msgSend(v2, "isEnabled"))
  {
    v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 184), "macAddress"), "data");
    if (v3)
      return (CFDataRef)CFRetain(v3);
  }
  else
  {
    v5 = *(const __CFDictionary **)(a1 + 32);
    if (v5)
    {
      Value = (const __CFString *)CFDictionaryGetValue(v5, CFSTR("VIRT_IF_NAME"));
      if (Value)
      {
        v7 = Value;
        SystemEncoding = CFStringGetSystemEncoding();
        CFStringGetCString(v7, buffer, 16, SystemEncoding);
        *(_OWORD *)v17 = xmmword_1001BBE40;
        v18 = 3;
        v19 = if_nametoindex(buffer);
        size = 0;
        sysctl(v17, 6u, 0, &size, 0, 0);
        if (size)
        {
          v9 = (unsigned __int8 *)malloc_type_malloc(size, 0x992853B0uLL);
          if (v9)
          {
            v10 = v9;
            if (sysctl(v17, 6u, v9, &size, 0, 0) < 0)
            {
              v13 = objc_autoreleasePoolPush();
              if (qword_10026DD20)
                objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: sysctl failed.", "WiFiVirtualInterfaceCopyMACAddress");
              objc_autoreleasePoolPop(v13);
              v11 = 0;
            }
            else
            {
              v11 = CFDataCreate(kCFAllocatorDefault, &v10[v10[117] + 120], 6);
            }
            free(v10);
            return v11;
          }
          v12 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: reqBuff is NULL.", "WiFiVirtualInterfaceCopyMACAddress");
        }
        else
        {
          v12 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: failed to get mib length.", "WiFiVirtualInterfaceCopyMACAddress");
        }
        objc_autoreleasePoolPop(v12);
      }
    }
  }
  return 0;
}

uint64_t sub_10015CC8C(uint64_t a1, CFTypeRef cf, uint64_t a3)
{
  CFTypeID v6;
  int i;
  uint64_t result;
  void *v10;
  void *v11;
  unsigned int valuePtr;

  if (!a1)
  {
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null virtInf.", "WiFiVirtualInterfaceSetProperty");
    goto LABEL_26;
  }
  if (!cf)
  {
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null key.", "WiFiVirtualInterfaceSetProperty");
    goto LABEL_26;
  }
  if (!a3)
  {
    v11 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null property.", "WiFiVirtualInterfaceSetProperty");
LABEL_26:
    objc_autoreleasePoolPop(v11);
    return 4294963396;
  }
  v6 = CFGetTypeID(cf);
  if (v6 == CFNumberGetTypeID() && *(_QWORD *)(a1 + 16))
  {
    valuePtr = 0;
    if (CFNumberGetValue((CFNumberRef)cf, kCFNumberIntType, &valuePtr))
    {
      for (i = 6; ; --i)
      {
        result = Apple80211Set(*(_QWORD *)(a1 + 16), valuePtr, 0, a3, 8);
        if ((_DWORD)result != -3905 && (_DWORD)result != 61 && (_DWORD)result != 16)
          break;
        if (!i)
          break;
        usleep(0x7A120u);
      }
      return result;
    }
    return 4294963396;
  }
  v10 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: unsupported key type for key %@", "WiFiVirtualInterfaceSetProperty", cf);
  objc_autoreleasePoolPop(v10);
  return 4294963393;
}

uint64_t sub_10015CE30(uint64_t a1, uint64_t a2, uint64_t a3, CFDictionaryRef *a4)
{
  uint64_t v6;
  int i;
  uint64_t result;
  const __CFString *v11;
  uint64_t v12;
  const void *v13;
  CFDictionaryRef v14;
  int valuePtr;

  valuePtr = a2;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    for (i = 6; ; --i)
    {
      result = Apple80211CopyValue(v6, a2, a3, a4);
      if ((_DWORD)result != -3905 && (_DWORD)result != 61 && (_DWORD)result != 16)
        break;
      if (!i)
        break;
      usleep(0x7A120u);
      v6 = *(_QWORD *)(a1 + 16);
    }
  }
  else if (a4)
  {
    v11 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    v12 = *(_QWORD *)(a1 + 24);
    v13 = (const void *)sub_100025C3C(v12);
    v14 = sub_100008514(v12, v13, v11);
    *a4 = v14;
    if (v11)
    {
      CFRelease(v11);
      v14 = *a4;
    }
    if (v14)
      return 0;
    else
      return 4294963365;
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t sub_10015CF28(uint64_t a1)
{
  int i;
  uint64_t result;

  if (!*(_QWORD *)(a1 + 16))
    return 4294963393;
  for (i = 6; ; --i)
  {
    result = Apple80211GetInfoCopy();
    if ((_DWORD)result != -3905 && (_DWORD)result != 61 && (_DWORD)result != 16)
      break;
    if (!i)
      break;
    usleep(0x7A120u);
  }
  return result;
}

uint64_t sub_10015CF9C(uint64_t a1, __CFDictionary **a2)
{
  uint64_t result;
  const __CFDictionary *v5;
  const __CFNumber *Value;
  void *v7;
  unsigned int v8;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v10;
  CFBooleanRef v11;
  CFBooleanRef v12;
  id v13;
  CFTypeRef v14;
  const void *v15;
  CFMutableDictionaryRef v16;
  __CFDictionary *v17;
  CFDataRef v18;
  CFDataRef v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  int v28;
  int v29;
  CFDictionaryRef theDict;
  int valuePtr;

  valuePtr = 0;
  result = 4294963396;
  if (!a1 || !a2)
    return result;
  v5 = *(const __CFDictionary **)(a1 + 32);
  if (!v5)
    return 4294963393;
  Value = (const __CFNumber *)CFDictionaryGetValue(v5, CFSTR("VIRT_IF_ROLE"));
  if (!Value)
    return 4294963393;
  CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr != 6)
    return 4294963393;
  v7 = *(void **)(a1 + 184);
  if (v7)
    v8 = objc_msgSend(v7, "isEnabled") ^ 1;
  else
    v8 = 1;
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
    return 4294963395;
  v10 = Mutable;
  if (sub_100073FF0(*(_QWORD *)(a1 + 24), *(const __CFString **)(a1 + 40)))
    v11 = kCFBooleanTrue;
  else
    v11 = kCFBooleanFalse;
  CFDictionarySetValue(v10, CFSTR("LINK_CHANGED_IS_AVAILABLE"), v11);
  if (v8)
    v12 = kCFBooleanTrue;
  else
    v12 = kCFBooleanFalse;
  CFDictionarySetValue(v10, CFSTR("LINK_CHANGED_IS_LINKDOWN"), v12);
  if (*(_BYTE *)(a1 + 224))
  {
    v13 = objc_msgSend(*(id *)(a1 + 192), "queryPeerDatabase");
    if (v13)
    {
      v14 = CFRetain(v13);
      if (v14)
      {
        v15 = v14;
        CFDictionarySetValue(v10, CFSTR("LINK_CHANGED_PEER_LIST"), v14);
        CFRelease(v15);
      }
    }
  }
  v16 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v16)
  {
    CFRelease(v10);
    return 4294963395;
  }
  v17 = v16;
  v18 = sub_10015CA58(a1);
  if (v18)
  {
    v19 = v18;
    CFDictionarySetValue(v17, CFSTR("AWDL_IF_MAC_ADDRESS"), v18);
    CFRelease(v19);
  }
  theDict = 0;
  sub_10015D358(a1, &theDict);
  if (theDict)
  {
    v20 = CFDictionaryGetValue(theDict, CFSTR("AWDL_INFO_PREFERRED_CHANNEL"));
    v21 = CFDictionaryGetValue(theDict, CFSTR("AWDL_INFO_PEER_MASTER_CHANNEL"));
    v22 = CFDictionaryGetValue(theDict, CFSTR("AWDL_INFO_EXT"));
    if (v20)
      CFDictionarySetValue(v17, CFSTR("AWDL_INFO_PREFERRED_CHANNEL"), v20);
    if (v21)
      CFDictionarySetValue(v17, CFSTR("AWDL_INFO_PEER_MASTER_CHANNEL"), v21);
    if (sub_1000702B8(*(_QWORD *)(a1 + 24)) && v22)
      CFDictionarySetValue(v17, CFSTR("AWDL_INFO_EXT"), v22);
    v23 = *(const void **)(a1 + 232);
    if (v23)
    {
      CFRelease(v23);
      *(_QWORD *)(a1 + 232) = 0;
    }
    *(_QWORD *)(a1 + 232) = CFRetain(theDict);
    if (theDict)
    {
      CFRelease(theDict);
      theDict = 0;
    }
  }
  v29 = sub_10015D558(a1);
  v24 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v29);
  if (v24)
  {
    v25 = v24;
    CFDictionarySetValue(v17, CFSTR("AWDL_INFO_SUPPORTED_CHANNEL_FLAGS"), v24);
    CFRelease(v25);
  }
  v28 = 2;
  v26 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v28);
  if (v26)
  {
    v27 = v26;
    CFDictionarySetValue(v17, CFSTR("AWDL_INFO_ASSISTED_DISCOVERY_METRIC"), v26);
    CFRelease(v27);
  }
  CFDictionarySetValue(v10, CFSTR("AWDL_INFO"), v17);
  CFRelease(v17);
  result = 0;
  *a2 = v10;
  return result;
}

uint64_t sub_10015D2CC(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  void *v5;

  result = *(_QWORD *)(a1 + 184);
  if (result)
  {
    result = (uint64_t)objc_msgSend((id)result, "isEnabled");
    if (a2)
    {
      if ((_DWORD)result)
      {
        *a2 = objc_msgSend(*(id *)(a1 + 184), "substate");
        v5 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: AWDL sync state is enabled with schedule state = %d", "WiFiVirtualInterfaceGetAwdlSyncState", *a2);
        objc_autoreleasePoolPop(v5);
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_10015D358(uint64_t a1, __CFDictionary **a2)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFDataRef v10;
  CFDataRef v11;
  uint64_t result;
  void *v13;
  unsigned __int16 v14;
  unsigned __int16 valuePtr;
  UInt8 bytes[2];

  if (!a1 || !a2)
  {
    v13 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null params.", "WiFiVirtualInterfaceCopyAwdlPreferredChannels");
    goto LABEL_18;
  }
  if (!*(_QWORD *)(a1 + 184))
  {
    v13 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: no awdl state", "WiFiVirtualInterfaceCopyAwdlPreferredChannels");
LABEL_18:
    objc_autoreleasePoolPop(v13);
    return 4294963396;
  }
  *a2 = 0;
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
    return 4294963395;
  v5 = Mutable;
  *(_WORD *)bytes = -21846;
  valuePtr = (unsigned __int16)objc_msgSend(objc_msgSend(*(id *)(a1 + 184), "peerPrimaryPreferredChannel"), "channelNumber");
  v14 = 0;
  if (!sub_1000704B8(*(_QWORD *)(a1 + 24), valuePtr, &v14))
    valuePtr = v14;
  v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
  if (!v6)
    goto LABEL_12;
  v7 = v6;
  CFDictionarySetValue(v5, CFSTR("AWDL_INFO_PREFERRED_CHANNEL"), v6);
  CFRelease(v7);
  valuePtr = (unsigned __int16)objc_msgSend(objc_msgSend(*(id *)(a1 + 184), "peerMasterChannel"), "channelNumber");
  v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
  if (!v8
    || (v9 = v8,
        CFDictionarySetValue(v5, CFSTR("AWDL_INFO_PEER_MASTER_CHANNEL"), v8),
        CFRelease(v9),
        *(_WORD *)bytes = (unsigned __int16)objc_msgSend(objc_msgSend(*(id *)(a1 + 184), "peerSecondaryPreferredChannel"), "channelNumber"), (v10 = CFDataCreate(kCFAllocatorDefault, bytes, 2)) == 0))
  {
LABEL_12:
    CFRelease(v5);
    return 4294963395;
  }
  v11 = v10;
  CFDictionarySetValue(v5, CFSTR("AWDL_INFO_EXT"), v10);
  CFRelease(v11);
  result = 0;
  *a2 = v5;
  return result;
}

uint64_t sub_10015D558(uint64_t a1)
{
  CFIndex v2;
  unsigned int v3;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *Value;
  int v6;
  unsigned int valuePtr;
  CFArrayRef theArray;

  theArray = 0;
  sub_10015CE30(a1, 27, 0, &theArray);
  if (theArray)
  {
    if (CFArrayGetCount(theArray) < 1)
    {
      v3 = 0;
    }
    else
    {
      v2 = 0;
      v3 = 0;
      do
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v2);
        if (ValueAtIndex)
        {
          Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("SUP_CHANNEL"));
          if (Value)
          {
            valuePtr = -1431655766;
            CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
            if (valuePtr >= 0xF)
            {
              v6 = v3 | (valuePtr - 36 < 0xF);
              if (valuePtr - 50 < 0xF)
                v6 |= 2u;
              if (valuePtr - 100 < 0x2D)
                v6 |= 4u;
              if (valuePtr - 142 < 0x18 || valuePtr == 138)
                v3 = v6 | 8;
              else
                v3 = v6;
            }
          }
        }
        ++v2;
      }
      while (v2 < CFArrayGetCount(theArray));
    }
    if (theArray)
    {
      CFRelease(theArray);
      theArray = 0;
    }
  }
  else
  {
    v3 = 0;
  }
  if (sub_1000703B8(*(_QWORD *)(a1 + 24)))
    return v3 | 0x20000;
  else
    return v3;
}

uint64_t sub_10015D690(uint64_t a1, __CFDictionary **a2)
{
  const __CFDictionary *v4;
  const __CFNumber *Value;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  const __CFData *v8;
  const __CFData *v9;
  const ether_addr *BytePtr;
  char *v11;
  const char *v12;
  CFStringEncoding SystemEncoding;
  CFStringRef v14;
  CFStringRef v15;
  CFDataRef v16;
  __CFDictionary *v17;
  uint64_t v18;
  int i;
  uint64_t v21;
  int valuePtr;
  UInt8 bytes[16];
  __int128 v25;

  if (!a1 || (v4 = *(const __CFDictionary **)(a1 + 32)) == 0)
  {
    valuePtr = 0;
    goto LABEL_16;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(v4, CFSTR("VIRT_IF_ROLE"));
  valuePtr = 0;
  if (!Value || (CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr), valuePtr != 6))
  {
LABEL_16:
    for (i = 6; ; --i)
    {
      v21 = Apple80211CopyCurrentNetwork(*(_QWORD *)(a1 + 16), a2);
      v18 = v21;
      if ((_DWORD)v21 != -3905 && (_DWORD)v21 != 61 && (_DWORD)v21 != 16)
        break;
      if (!i)
        break;
      usleep(0x7A120u);
    }
    return v18;
  }
  *(_OWORD *)bytes = 0u;
  v25 = 0u;
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
    return 4294963395;
  v7 = Mutable;
  v8 = sub_10015CA58(a1);
  if (v8)
  {
    v9 = v8;
    BytePtr = (const ether_addr *)CFDataGetBytePtr(v8);
    v11 = ether_ntoa(BytePtr);
    if (v11)
    {
      v12 = v11;
      SystemEncoding = CFStringGetSystemEncoding();
      v14 = CFStringCreateWithCString(kCFAllocatorDefault, v12, SystemEncoding);
      if (v14)
      {
        v15 = v14;
        CFDictionarySetValue(v7, CFSTR("BSSID"), v14);
        CFRelease(v15);
      }
    }
    CFDictionarySetValue(v7, CFSTR("STATION_MAC"), v9);
    CFRelease(v9);
  }
  CFDictionarySetValue(v7, CFSTR("SSID_STR"), &stru_100238178);
  v16 = CFDataCreate(kCFAllocatorDefault, bytes, 32);
  if (v16)
  {
    v17 = v16;
    CFDictionarySetValue(v7, CFSTR("SSID"), v16);
    v18 = 0;
    *a2 = v7;
    v7 = v17;
  }
  else
  {
    v18 = 4294963395;
  }
  CFRelease(v7);
  return v18;
}

uint64_t sub_10015D888(uint64_t a1)
{
  int i;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 16))
  {
    for (i = 6; ; --i)
    {
      result = Apple80211GetPowerState();
      if ((_DWORD)result != -3905 && (_DWORD)result != 61 && (_DWORD)result != 16)
        break;
      if (!i)
        break;
      usleep(0x7A120u);
    }
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = sub_100025C3C(v3);
    sub_100070EB0(v3, v4);
    return 0;
  }
  return result;
}

uint64_t sub_10015D914(uint64_t a1)
{
  int i;
  uint64_t result;

  if (!*(_QWORD *)(a1 + 16))
    return 4294963393;
  for (i = 6; ; --i)
  {
    result = Apple80211SetPowerState();
    if ((_DWORD)result != -3905 && (_DWORD)result != 61 && (_DWORD)result != 16)
      break;
    if (!i)
      break;
    usleep(0x7A120u);
  }
  return result;
}

uint64_t sub_10015D988(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int i;
  uint64_t v6;
  uint64_t v7;

  if (!a1[2])
    return 4294963393;
  a1[9] = a3;
  a1[10] = a4;
  for (i = 6; ; --i)
  {
    v6 = Apple80211ScanAsync();
    v7 = v6;
    if ((int)v6 <= 15)
    {
      if ((_DWORD)v6 != -3905)
        break;
    }
    else if ((_DWORD)v6 != 61 && (_DWORD)v6 != 16)
    {
      goto LABEL_11;
    }
    if (!i)
      break;
    usleep(0x7A120u);
  }
  if (!(_DWORD)v6)
    return v7;
LABEL_11:
  sub_10015DA30(a1, a1[5], 0, v6);
  return v7;
}

void sub_10015DA30(uint64_t *a1, uint64_t a2, __CFArray *a3, uint64_t a4)
{
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, __CFArray *, _QWORD, uint64_t, uint64_t);
  _QWORD *v10;
  void *v11;
  CFTypeID v12;

  v9 = (void (*)(uint64_t, uint64_t, __CFArray *, _QWORD, uint64_t, uint64_t))a1[9];
  v8 = a1[10];
  v10 = a1 + 9;
  v11 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Completed Apple80211ScanAsync on %@ (0x%x)", a2, a4);
  objc_autoreleasePoolPop(v11);
  if (a3)
  {
    v12 = CFGetTypeID(a3);
    if (v12 == CFArrayGetTypeID())
      a3 = sub_100064608(a3);
    else
      a3 = 0;
  }
  *v10 = 0;
  v10[1] = 0;
  if (v9)
    v9(a1[3], a2, a3, 0, a4, v8);
  if (a3)
    CFRelease(a3);
  sub_100017CB0(a1[3]);
}

uint64_t sub_10015DB18(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  int v11;
  uint64_t result;

  v8 = a1[2];
  if (!v8)
    return 4294963393;
  a1[7] = a6;
  a1[8] = a7;
  v11 = 6;
  if (a5)
  {
    while (1)
    {
      result = Apple80211AssociateAsync();
      if ((_DWORD)result != -3905 && (_DWORD)result != 61 && (_DWORD)result != 16)
        break;
      if (!v11)
        break;
      usleep(0x7A120u);
      --v11;
    }
  }
  else
  {
    while (1)
    {
      result = Apple80211Associate(v8, a3, a4);
      if ((_DWORD)result != -3905 && (_DWORD)result != 61 && (_DWORD)result != 16)
        break;
      if (!v11)
        break;
      usleep(0x7A120u);
      v8 = a1[2];
      --v11;
    }
  }
  return result;
}

uint64_t sub_10015DBDC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  int i;
  uint64_t v10;
  uint64_t v11;

  v6 = a1[2];
  if (!v6)
    return 4294963393;
  a1[11] = a4;
  a1[12] = a5;
  for (i = 6; ; --i)
  {
    v10 = Apple80211Set(v6, 24, 1, a3, 8);
    v11 = v10;
    if ((int)v10 <= 15)
    {
      if ((_DWORD)v10 != -3905)
        break;
    }
    else if ((_DWORD)v10 != 61 && (_DWORD)v10 != 16)
    {
      goto LABEL_11;
    }
    if (!i)
      break;
    usleep(0x7A120u);
    v6 = a1[2];
  }
  if (!(_DWORD)v10)
    return v11;
LABEL_11:
  sub_10015DC98(a1, a2, v10);
  return v11;
}

void sub_10015DC98(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);

  v5 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))a1[11];
  v4 = a1[12];
  a1[11] = 0;
  a1[12] = 0;
  if (v5)
    v5(a1[3], a2, a3, v4);
  sub_100017CB0(a1[3]);
}

uint64_t sub_10015DCCC(uint64_t a1)
{
  int i;
  uint64_t result;

  if (!*(_QWORD *)(a1 + 16))
    return 4294963393;
  for (i = 6; ; --i)
  {
    result = Apple80211Disassociate();
    if ((_DWORD)result != -3905 && (_DWORD)result != 61 && (_DWORD)result != 16)
      break;
    if (!i)
      break;
    usleep(0x7A120u);
  }
  return result;
}

void sub_10015DD30(uint64_t a1, uint64_t a2, int a3, __CFArray *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD, uint64_t, __CFArray *, _QWORD, uint64_t, uint64_t);
  CFTypeID v13;
  id v14;

  if (a6)
  {
    v14 = (id)sub_10001E1C8((uint64_t)"__WiFiVirtualInterfaceEventCallback");
    if (sub_10001E224(*(uint64_t **)(a6 + 24), a3) == 1)
    {
      if (a3 > 9)
      {
        if (a3 == 10)
        {
          sub_10015DA30((uint64_t *)a6, *(_QWORD *)(a6 + 40), a4, a1);
        }
        else if (a3 == 172)
        {
          sub_10015C7CC((_QWORD *)a6, (uint64_t)a4);
        }
      }
      else if (a3 == 8)
      {
        sub_10015DC98((uint64_t *)a6, *(_QWORD *)(a6 + 40), a1);
      }
      else if (a3 == 9)
      {
        v10 = *(_QWORD *)(a6 + 40);
        v12 = *(void (**)(_QWORD, uint64_t, __CFArray *, _QWORD, uint64_t, uint64_t))(a6 + 56);
        v11 = *(_QWORD *)(a6 + 64);
        *(_QWORD *)(a6 + 56) = 0;
        *(_QWORD *)(a6 + 64) = 0;
        if (a4)
        {
          v13 = CFGetTypeID(a4);
          if (v13 == CFDictionaryGetTypeID())
            a4 = (__CFArray *)sub_10002B314((uint64_t)kCFAllocatorDefault, a4);
          else
            a4 = 0;
        }
        if (v12)
          v12(*(_QWORD *)(a6 + 24), v10, a4, 0, a1, v11);
        if (a4)
          CFRelease(a4);
      }
    }

  }
}

uint64_t sub_10015DE80(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 104) = a2;
  *(_QWORD *)(result + 112) = a3;
  return result;
}

uint64_t sub_10015DE88(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 120) = a2;
  *(_QWORD *)(result + 128) = a3;
  return result;
}

uint64_t sub_10015DE90(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 136) = a2;
  *(_QWORD *)(result + 144) = a3;
  return result;
}

uint64_t sub_10015DE98(int a1, const void *a2, CFTypeRef cf1)
{
  _BOOL4 v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  id v8;
  _QWORD v10[5];

  if (cf1)
    v4 = CFEqual(cf1, kCFBooleanTrue) == 0;
  else
    v4 = 1;
  v5 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
  {
    v6 = "Y";
    if (v4)
      v6 = "N";
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: UUID %@, active %s", "WiFiVirtualInterfaceSetAppTrafficPolicy", a2, v6);
  }
  objc_autoreleasePoolPop(v5);
  if (CFEqual(a2, CFSTR("CARPLAY_UUID")))
  {
    v7 = 6;
  }
  else if (CFEqual(a2, CFSTR("FACETIME_UUID")))
  {
    v7 = 10;
  }
  else
  {
    if (!CFEqual(a2, CFSTR("WiFiCallingUUID")))
    {
      if (CFEqual(a2, CFSTR("airplay")))
        return 0;
      else
        return 4294963396;
    }
    v7 = 11;
  }
  v8 = +[WiFiP2PSPITransactionRequestor shared](WiFiP2PSPITransactionRequestor, "shared");
  if (v4)
  {
    objc_msgSend(v8, "endTransaction:", v7);
  }
  else
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10015E010;
    v10[3] = &unk_100231C30;
    v10[4] = v7;
    objc_msgSend(v8, "beginTransaction:completionHandler:", v7, v10);
  }
  return 0;
}

void sub_10015E010(uint64_t a1, uint64_t a2)
{
  void *v4;

  if (a2)
  {
    v4 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Transaction %d abruptly ended because %d", *(_QWORD *)(a1 + 32), a2);
    objc_autoreleasePoolPop(v4);
  }
}

uint64_t sub_10015E07C(uint64_t a1, CFArrayRef theArray)
{
  unsigned int Count;
  id v5;
  uint64_t v6;
  CFIndex v7;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v9;
  CFTypeID v10;
  const __CFNumber *Value;
  const __CFNumber *v12;
  CFTypeID v13;
  id v14;
  id v15;
  uint64_t v17;
  unsigned int valuePtr;

  Count = CFArrayGetCount(theArray);
  v5 = +[NSMutableArray array](NSMutableArray, "array");
  v6 = Count;
  if (Count)
  {
    v7 = 0;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v7);
      if (ValueAtIndex)
      {
        v9 = ValueAtIndex;
        v10 = CFGetTypeID(ValueAtIndex);
        if (v10 == CFDictionaryGetTypeID())
        {
          Value = (const __CFNumber *)CFDictionaryGetValue(v9, CFSTR("MWS_Channel_Number"));
          valuePtr = -1431655766;
          if (Value)
          {
            v12 = Value;
            v13 = CFGetTypeID(Value);
            if (v13 == CFNumberGetTypeID())
            {
              CFNumberGetValue(v12, kCFNumberSInt32Type, &valuePtr);
              v14 = objc_alloc((Class)WiFiChannel);
              LOBYTE(v17) = 0;
              v15 = objc_msgSend(v14, "initWithChannelNumber:bandwidth:is2_4GHz:is5GHz:is6GHz:isDFS:extensionChannelAbove:", valuePtr, 1, valuePtr < 0xF, valuePtr > 0xE, 0, 0, v17);
              objc_msgSend(v5, "addObject:", v15);

            }
          }
        }
      }
      ++v7;
    }
    while (v6 != v7);
  }
  if (objc_msgSend(*(id *)(a1 + 192), "updateLTERestrictedChannels:error:", v5, 0))
    return 0;
  else
    return 4294963365;
}

uint64_t sub_10015E1CC(uint64_t a1, const void *a2, const __CFDictionary *a3, void (*a4)(_QWORD, const void *, _QWORD, _QWORD), uint64_t a5, const __CFString *a6)
{
  NSObject *v11;
  const __CFAllocator *v12;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v14;
  CFNumberRef v15;
  CFNumberRef v16;
  const __CFNumber *Value;
  CFNumberRef v18;
  __CFDictionary *v19;
  int v20;
  CFDataRef v21;
  id v22;
  void *v23;
  dispatch_time_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v29;
  void *v30;
  const void *v31;
  _QWORD v32[5];
  _BOOL4 v33;
  int valuePtr;
  UInt8 bytes[8];
  int v36;

  v11 = dispatch_semaphore_create(0);
  v31 = a2;
  if (a3 && CFDictionaryGetValue(a3, CFSTR("APPLE80211KEY_AWDL_INFO_ASSISTED_DISCOVERY_FOLLOW")))
  {
    valuePtr = 1;
    v12 = kCFAllocatorDefault;
    Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (!Mutable)
    {
      v30 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null follow mode policy.", "WiFiVirtualInterfaceStartAwdl");
      objc_autoreleasePoolPop(v30);
      v25 = 4294963396;
      if (v11)
        goto LABEL_30;
      return v25;
    }
    v14 = Mutable;
    v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
    if (v15)
    {
      v16 = v15;
      CFDictionarySetValue(v14, CFSTR("APPLE80211KEY_RANGING_FOLLOW_MODE"), v15);
      CFRelease(v16);
    }
    Value = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("AWDL_INFO_PEER_PREFERRED_BAND"));
    if (Value)
    {
      v33 = 0;
      CFNumberGetValue(Value, kCFNumberSInt32Type, &v33);
      v33 = v33;
      v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v33);
      CFDictionarySetValue(v14, CFSTR("APPLE80211KEY_RANGING_FOLLOW_MODE_BAND"), v18);
      if (v18)
        CFRelease(v18);
    }
    v19 = sub_10015E5F4(a1, a2, (uint64_t)a3, kCFBooleanTrue);
    v20 = 1;
  }
  else
  {
    v19 = sub_10015E860((_QWORD *)a1, a2, a3, kCFBooleanTrue, a6);
    v14 = 0;
    v20 = 0;
    v12 = kCFAllocatorDefault;
  }
  v36 = 17563660;
  *(_QWORD *)bytes = 0xC064696669775F06;
  v21 = CFDataCreate(v12, bytes, 12);
  if (!v21)
    goto LABEL_35;
  v22 = objc_msgSend(objc_alloc((Class)AWDLServiceDiscoveryConfiguration), "initWithKey:", v21);
  v23 = *(void **)(a1 + 208);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_10015F33C;
  v32[3] = &unk_10022EEE8;
  v32[4] = v11;
  objc_msgSend(v23, "startServiceDiscoveryWithConfiguration:completionHandler:", v22, v32);

  v24 = dispatch_time(0, 2000000000);
  if (dispatch_semaphore_wait(v11, v24))
  {
    v29 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: timed out waiting for assisted discovery registration", "WiFiVirtualInterfaceStartAwdl");
    objc_autoreleasePoolPop(v29);
LABEL_35:
    v25 = 4294963396;
    goto LABEL_23;
  }
  v25 = sub_10015F344(a1, (uint64_t)v19);
  v26 = objc_autoreleasePoolPush();
  if ((_DWORD)v25)
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: APPLE80211_IOC_AWDL_PEER_TRAFFIC_REGISTRATION returned error %d.", "WiFiVirtualInterfaceStartAwdl", v25);
    objc_autoreleasePoolPop(v26);
  }
  else
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: AWDL brought up with wifid assisted policy %@", "WiFiVirtualInterfaceStartAwdl", v19);
    objc_autoreleasePoolPop(v26);
    if (v20)
    {
      sub_100074C58(*(_QWORD *)(a1 + 24), (uint64_t)v14);
      v27 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: AWDL brought up with wifid follow mode %@", "WiFiVirtualInterfaceStartAwdl", v14);
      objc_autoreleasePoolPop(v27);
    }
    if (a4)
    {
      *(_BYTE *)(a1 + 224) = 1;
      a4(*(_QWORD *)(a1 + 24), v31, 0, 0);
    }
    v25 = 0;
  }
LABEL_23:
  if (v19)
    CFRelease(v19);
  if (v14)
    CFRelease(v14);
  if (v21)
    CFRelease(v21);
  if (v11)
LABEL_30:
    dispatch_release(v11);
  return v25;
}

__CFDictionary *sub_10015E5F4(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  CFArrayRef v9;
  CFArrayRef v10;
  void *v12;
  void *v13;
  void *values;

  values = 0;
  if (!a1)
  {
    v12 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null AWDL interface.", "__WiFiVirtualInterfaceCreateFollowModePolicyFromRequest");
    goto LABEL_16;
  }
  if (!a2)
  {
    v12 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null ifname.", "__WiFiVirtualInterfaceCreateFollowModePolicyFromRequest");
    goto LABEL_16;
  }
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    v12 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null policy.", "__WiFiVirtualInterfaceCreateFollowModePolicyFromRequest");
LABEL_16:
    objc_autoreleasePoolPop(v12);
    v8 = 0;
    goto LABEL_7;
  }
  v8 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("TR_SRV_NAME"), CFSTR("ranging-Intiator"));
  values = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (values)
  {
    v9 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
    if (v9)
    {
      v10 = v9;
      CFDictionarySetValue(v8, CFSTR("TR_PEER_CONTEXTS"), v9);
      CFRelease(v10);
      CFDictionarySetValue((CFMutableDictionaryRef)values, CFSTR("TR_IFNAME"), a2);
      CFDictionarySetValue(v8, CFSTR("TR_ACTIVE"), a4);
      if (a3)
        goto LABEL_7;
      v13 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: no AWDL request", "__WiFiVirtualInterfaceCreateFollowModePolicyFromRequest");
    }
    else
    {
      v13 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null peer Context array.", "__WiFiVirtualInterfaceCreateFollowModePolicyFromRequest");
    }
  }
  else
  {
    v13 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null peerContext.", "__WiFiVirtualInterfaceCreateFollowModePolicyFromRequest");
  }
  objc_autoreleasePoolPop(v13);
LABEL_7:
  if (values)
    CFRelease(values);
  return v8;
}

__CFDictionary *sub_10015E860(_QWORD *a1, const void *a2, const __CFDictionary *a3, const void *a4, const __CFString *a5)
{
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  CFArrayRef v12;
  CFArrayRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  const __CFDictionary *Value;
  const __CFDictionary *v17;
  const __CFNumber *v18;
  const __CFNumber *v19;
  const __CFDictionary *v20;
  const void *v21;
  const __CFDictionary *v22;
  const __CFNumber *v23;
  const __CFNumber *v24;
  const __CFData *v25;
  unsigned int v26;
  unsigned __int16 v27;
  const __CFNumber *v28;
  const __CFNumber *v29;
  uint64_t v30;
  const __CFNumber *v31;
  BOOL v32;
  const __CFNumber *v33;
  const __CFData *v34;
  unsigned __int16 v35;
  CFIndex Length;
  const __CFNumber *v37;
  void *v38;
  void *v39;
  void *v42;
  unsigned int v43;
  void *v44;
  CFDataRef v45;
  const __CFString *v46;
  const void *v47;
  const __CFData *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  BOOL v52;
  void *v53;
  CFNumberRef v54;
  CFNumberRef v55;
  void *v56;
  WiFiUsageMonitor *v57;
  void *v59;
  void *v60;
  const void *v61;
  const __CFString *v62;
  __CFDictionary *v63;
  uint64_t v64;
  __int16 v65;
  __int16 v66;
  UInt8 buffer[2];
  CFDictionaryRef theDict;
  int v69;
  uint64_t v70;
  int v71;
  int valuePtr;
  void *values;
  CFRange v74;
  CFRange v75;

  values = 0;
  if (!a1)
  {
    v59 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null AWDL interface.", "__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest");
    goto LABEL_172;
  }
  if (!a2)
  {
    v59 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null ifname.", "__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest");
    goto LABEL_172;
  }
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    v59 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null policy.", "__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest");
LABEL_172:
    objc_autoreleasePoolPop(v59);
    v11 = 0;
    goto LABEL_149;
  }
  v11 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("TR_SRV_NAME"), CFSTR("wifid-assisted-discovery"));
  values = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!values)
  {
    v60 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null peerContext.", "__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest");
    goto LABEL_179;
  }
  v12 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
  if (!v12)
  {
    v60 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null peer Context array.", "__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest");
    goto LABEL_179;
  }
  v13 = v12;
  CFDictionarySetValue(v11, CFSTR("TR_PEER_CONTEXTS"), v12);
  CFRelease(v13);
  CFDictionarySetValue((CFMutableDictionaryRef)values, CFSTR("TR_IFNAME"), a2);
  CFDictionarySetValue(v11, CFSTR("TR_ACTIVE"), a4);
  if (!a3)
  {
    v60 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: no AWDL request", "__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest");
LABEL_179:
    objc_autoreleasePoolPop(v60);
    goto LABEL_149;
  }
  valuePtr = 1;
  if (a5 && CFStringCompare(a5, CFSTR("mobilewifitool"), 0) == kCFCompareEqualTo)
    valuePtr |= 0x80u;
  v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  if (v14)
  {
    v15 = v14;
    CFDictionarySetValue(v11, CFSTR("TR_SESSION_FLAGS"), v14);
    CFRelease(v15);
  }
  v71 = 0;
  v70 = 0;
  v69 = 0;
  v64 = sub_10015D558((uint64_t)a1);
  theDict = 0;
  Value = (const __CFDictionary *)CFDictionaryGetValue(a3, CFSTR("AWDL_INFO_SELF"));
  v62 = a5;
  v63 = v11;
  v61 = a4;
  if (!Value)
  {
    v21 = (const void *)a1[29];
    if (v21)
    {
      v22 = (const __CFDictionary *)CFRetain(v21);
      theDict = v22;
      if (v22)
      {
LABEL_20:
        v23 = (const __CFNumber *)CFDictionaryGetValue(v22, CFSTR("AWDL_INFO_PEER_MASTER_CHANNEL"));
        if (v23)
          CFNumberGetValue(v23, kCFNumberSInt16Type, &v69);
        v24 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("AWDL_INFO_PREFERRED_CHANNEL"));
        if (v24)
          CFNumberGetValue(v24, kCFNumberSInt16Type, (char *)&v69 + 2);
        v20 = theDict;
        goto LABEL_25;
      }
    }
    else
    {
      Apple80211CopyAwdlPreferredChannels(a1[2], &theDict);
      v22 = theDict;
      if (theDict)
        goto LABEL_20;
    }
    v25 = 0;
    goto LABEL_26;
  }
  v17 = Value;
  v18 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("AWDL_INFO_PEER_MASTER_CHANNEL"));
  if (v18)
    CFNumberGetValue(v18, kCFNumberSInt16Type, &v69);
  v19 = (const __CFNumber *)CFDictionaryGetValue(v17, CFSTR("AWDL_INFO_PREFERRED_CHANNEL"));
  if (v19)
    CFNumberGetValue(v19, kCFNumberSInt16Type, (char *)&v69 + 2);
  v20 = v17;
LABEL_25:
  v25 = (const __CFData *)CFDictionaryGetValue(v20, CFSTR("AWDL_INFO_EXT"));
LABEL_26:
  v26 = (unsigned __int16)v69;
  if (!sub_1000702B8(a1[3])
    || !v25
    || (*(_WORD *)buffer = -21846, CFDataGetLength(v25) != 2)
    || (v74.location = 0, v74.length = 2, CFDataGetBytes(v25, v74, buffer), (v27 = *(_WORD *)buffer) == 0))
  {
    v27 = HIWORD(v69);
  }
  if (theDict)
  {
    CFRelease(theDict);
    theDict = 0;
  }
  v28 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("AWDL_INFO_ASSISTED_DISCOVERY_METRIC"));
  v29 = v28;
  if (v28)
  {
    CFNumberGetValue(v28, kCFNumberSInt32Type, (char *)&v70 + 4);
    v30 = 2;
  }
  else
  {
    v30 = 0;
  }
  v31 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("AWDL_INFO_PEER_MASTER_CHANNEL"));
  if (v31)
  {
    CFNumberGetValue(v31, kCFNumberSInt16Type, &v71);
    v32 = (unsigned __int16)v71 > 0xEu;
  }
  else
  {
    v32 = 0;
  }
  v33 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("AWDL_INFO_PREFERRED_CHANNEL"));
  if (v33)
    CFNumberGetValue(v33, kCFNumberSInt16Type, (char *)&v71 + 2);
  v34 = (const __CFData *)CFDictionaryGetValue(a3, CFSTR("AWDL_INFO_EXT"));
  v35 = 255;
  if (sub_1000702B8(a1[3]) && v34)
  {
    Length = CFDataGetLength(v34);
    *(_WORD *)buffer = -21846;
    if (Length == 2)
    {
      v75.location = 0;
      v75.length = 2;
      CFDataGetBytes(v34, v75, buffer);
      if (*(_WORD *)buffer)
        v35 = *(_WORD *)buffer;
      else
        v35 = HIWORD(v71);
    }
    else
    {
      v35 = 0;
    }
  }
  v37 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("AWDL_INFO_SUPPORTED_CHANNEL_FLAGS"));
  if (v37)
  {
    CFNumberGetValue(v37, kCFNumberSInt32Type, &v70);
  }
  else
  {
    v38 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: supported channel flags key not found", "__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest");
    objc_autoreleasePoolPop(v38);
    LODWORD(v70) = v64;
  }
  v39 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: self(metric=%d): preferred=%d master=%d secondary channel=%d flags=0x%x; peer(metric=%d): preferred=%d master="
      "%d secondary channel=%d flags=0x%x",
      "__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest",
      v30,
      HIWORD(v69),
      (unsigned __int16)v69,
      v27,
      v64,
      HIDWORD(v70),
      HIWORD(v71),
      (unsigned __int16)v71,
      v35,
      v70);
  objc_autoreleasePoolPop(v39);
  if (v26 <= 0xE || !v32)
  {
    if (HIWORD(v69) >= 0xFu)
      HIWORD(v69) = 0;
    if (HIWORD(v71) >= 0xFu)
      HIWORD(v71) = 0;
    if ((unsigned __int16)v69 >= 0xFu)
      LOWORD(v69) = 0;
    if ((unsigned __int16)v71 >= 0xFu)
      LOWORD(v71) = 0;
    if (v27 > 0xEu)
      v27 = 0;
    if (v35 != 255 && v35 >= 0xFu)
      v35 = 0;
    v42 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: reset: self(metric=%d): preferred=%d master=%d secondary channel=%d; peer(metric=%d): preferred=%d  master=%"
        "d secondary channel=%d",
        "__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest",
        v30,
        HIWORD(v69),
        (unsigned __int16)v69,
        v27,
        HIDWORD(v70),
        HIWORD(v71),
        (unsigned __int16)v71,
        v35);
    objc_autoreleasePoolPop(v42);
  }
  v66 = 255;
  if (v29 || HIDWORD(v70) == 2)
  {
    v44 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: overriding preferred ranging channel to channel 6 for iPhone/iPad", "__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest");
    objc_autoreleasePoolPop(v44);
    v43 = 6;
    v66 = 6;
    if ((int)v30 < SHIDWORD(v70))
    {
LABEL_89:
      if (v35)
      {
        if (v35 == 255)
        {
          v65 = v43;
          v35 = v43;
LABEL_111:
          v46 = v62;
          v11 = v63;
          v47 = v61;
          goto LABEL_112;
        }
LABEL_110:
        v65 = v35;
        goto LABEL_111;
      }
      if (v27)
      {
        v65 = v27;
        v35 = v27;
        goto LABEL_111;
      }
      if (v43 == 1)
      {
        v35 = 6;
        goto LABEL_110;
      }
      v46 = v62;
      v11 = v63;
      v47 = v61;
      if (v43 > 6)
      {
        if (v43 > 0xB)
        {
          v65 = v43;
          v35 = v43;
LABEL_112:
          v48 = (const __CFData *)CFDictionaryGetValue(a3, CFSTR("AWDL_IF_MAC_ADDRESS"));
          v45 = v48;
          if (v48)
            CFRetain(v48);
          goto LABEL_114;
        }
        v35 = 1;
      }
      else
      {
        v35 = 11;
      }
      v65 = v35;
      goto LABEL_112;
    }
  }
  else
  {
    if ((int)v30 < SHIDWORD(v70))
    {
      v43 = HIWORD(v71);
      if (HIWORD(v71)
        || (v43 = HIWORD(v69), HIWORD(v69))
        || (v43 = (unsigned __int16)v71, (_WORD)v71)
        || (v43 = (unsigned __int16)v69, (_WORD)v69))
      {
        v66 = v43;
      }
      else
      {
        v43 = 255;
      }
      goto LABEL_89;
    }
    v43 = HIWORD(v69);
    if (HIWORD(v69)
      || (v43 = HIWORD(v71), HIWORD(v71))
      || (v43 = (unsigned __int16)v69, (_WORD)v69)
      || (v43 = (unsigned __int16)v71, (_WORD)v71))
    {
      v66 = v43;
    }
    else
    {
      v43 = 255;
    }
  }
  if (v35 == 255)
    goto LABEL_98;
  if (v27)
  {
LABEL_100:
    v65 = v27;
    goto LABEL_107;
  }
  if (v35)
  {
    v65 = v35;
    v27 = v35;
    goto LABEL_107;
  }
  if (v43 == 1)
  {
    v27 = 6;
    goto LABEL_100;
  }
  if (v43 <= 6)
  {
    v27 = 11;
    goto LABEL_100;
  }
  if (v43 <= 0xB)
  {
    v27 = 1;
    goto LABEL_100;
  }
LABEL_98:
  v65 = v43;
  v27 = v43;
LABEL_107:
  v45 = sub_10015CA58((uint64_t)a1);
  v35 = v27;
  v46 = v62;
  v11 = v63;
  v47 = v61;
LABEL_114:
  if (v43 >= 0xF)
  {
    v49 = v70 & v64;
    v50 = (v70 & v64 & 1) != 0 ? 44 : 6;
    v51 = (v70 & v64 & 8) != 0 ? 149 : v50;
    if (v43 - 36 <= 0xE && (v70 & v64 & 1) == 0
      || v43 - 50 <= 0xE && (v70 & v64 & 2) == 0
      || v43 - 100 <= 0x2C && (v70 & v64 & 4) == 0
      || ((unsigned __int16)(v43 - 166) < 0xFFE8u ? (v52 = v43 == 138) : (v52 = 1),
          v52 && (v70 & v64 & 8) == 0))
    {
      v53 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: using fallback channel %d because preferred channel %d is not supported (flags 0x%x)", "__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest", v51, v43, v49);
      objc_autoreleasePoolPop(v53);
      v66 = v51;
      LOWORD(v43) = v51;
    }
  }
  if (v35 >= 0xFu)
    v65 = v43;
  v54 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v66);
  v55 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v65);
  v56 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: preferred AWDL discovery channel = %@ secondary channel = %@ and sync-peer %@", "__WiFiVirtualInterfaceCreateAssistedDiscoveryPolicyFromRequest", v54, v55, v45);
  objc_autoreleasePoolPop(v56);
  if (v45)
  {
    CFDictionarySetValue((CFMutableDictionaryRef)values, CFSTR("TR_PEER_ADDRESS"), v45);
    CFRelease(v45);
  }
  if (v54)
  {
    CFDictionarySetValue(v11, CFSTR("AWDL_TR_CHANNEL"), v54);
    CFRelease(v54);
  }
  if (v55)
  {
    CFDictionarySetValue(v11, CFSTR("AWDL_TR_SEC_CHANNEL"), v55);
    CFRelease(v55);
  }
  if (v47 && CFEqual(v47, kCFBooleanTrue))
  {
    v57 = +[WiFiUsageMonitor sharedInstance](WiFiUsageMonitor, "sharedInstance");
    -[WiFiUsageMonitor rangingSessionRequestedWithSelfPreferredChannel:selfMainChannel:selfChannelFlags:peerPreferredChannel:peerMainChannel:peerChannelFlags:requester:](v57, "rangingSessionRequestedWithSelfPreferredChannel:selfMainChannel:selfChannelFlags:peerPreferredChannel:peerMainChannel:peerChannelFlags:requester:", HIWORD(v69), (unsigned __int16)v69, v64, HIWORD(v71), (unsigned __int16)v71, v70, v46);
  }
LABEL_149:
  if (values)
    CFRelease(values);
  return v11;
}

intptr_t sub_10015F33C(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_10015F344(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  void *v8;
  char v9;

  v9 = 0;
  v3 = objc_msgSend(objc_alloc((Class)AWDLTrafficRegistrationConfiguration), "initWithDictionary:isActive:", a2, &v9);
  if (v3)
  {
    v4 = *(void **)(a1 + 200);
    if (v9)
      v5 = objc_msgSend(v4, "setTrafficRegistration:error:", v3, 0);
    else
      v5 = objc_msgSend(v4, "clearTrafficRegistration:error:", v3, 0);
    if (v5)
      v6 = 0;
    else
      v6 = 4294963365;
  }
  else
  {
    v8 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "Failed to send traffic registration because failed to parse dictionary");
    objc_autoreleasePoolPop(v8);
    v6 = 4294963396;
  }

  return v6;
}

uint64_t sub_10015F3FC(uint64_t a1, const void *a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  void *v9;
  __CFDictionary *v10;
  __CFDictionary *v11;
  CFDataRef v12;
  CFDataRef v13;
  id v14;
  void *v16;
  int valuePtr;
  UInt8 bytes[8];
  int v19;

  *(_QWORD *)bytes = 0xC064696669775F06;
  v19 = 17563660;
  if (a3 && sub_10002BE64(a3, CFSTR("APPLE80211KEY_AWDL_INFO_ASSISTED_DISCOVERY_FOLLOW")))
  {
    valuePtr = 0;
    Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (!Mutable)
    {
      v16 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null follow mode policy.", "WiFiVirtualInterfaceStopAwdl");
      objc_autoreleasePoolPop(v16);
      goto LABEL_18;
    }
    v6 = Mutable;
    v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
    if (v7)
    {
      v8 = v7;
      CFDictionarySetValue(v6, CFSTR("APPLE80211KEY_RANGING_FOLLOW_MODE"), v7);
      CFRelease(v8);
    }
    sub_100074C58(*(_QWORD *)(a1 + 24), (uint64_t)v6);
    v9 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: AWDL bringdown with wifid follow mode %@", "WiFiVirtualInterfaceStopAwdl", v6);
    objc_autoreleasePoolPop(v9);
    CFRelease(v6);
    v10 = sub_10015E5F4(a1, a2, 0, kCFBooleanFalse);
  }
  else
  {
    v10 = sub_10015E860((_QWORD *)a1, a2, 0, kCFBooleanFalse, 0);
  }
  v11 = v10;
  if (v10)
  {
    sub_10015F344(a1, (uint64_t)v10);
    CFRelease(v11);
  }
  v12 = CFDataCreate(kCFAllocatorDefault, bytes, 12);
  if (!v12)
  {
LABEL_18:
    *(_BYTE *)(a1 + 224) = 0;
    return 4294963396;
  }
  v13 = v12;
  v14 = objc_msgSend(objc_alloc((Class)AWDLServiceDiscoveryConfiguration), "initWithKey:", v12);
  objc_msgSend(*(id *)(a1 + 208), "stopServiceDiscoveryWithConfiguration:", v14);

  *(_BYTE *)(a1 + 224) = 0;
  CFRelease(v13);
  return 0;
}

uint64_t sub_10015F640(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  void *v4;
  id v6;

  result = 4294963396;
  if (a2)
  {
    v4 = *(void **)(a1 + 192);
    if (v4)
    {
      v6 = objc_msgSend(v4, "copyStatistics");
      *a2 = v6;
      if (v6)
        return 0;
      else
        return 4294963365;
    }
  }
  return result;
}

uint64_t sub_10015F688(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 152) = a2;
  *(_QWORD *)(result + 160) = a3;
  return result;
}

uint64_t sub_10015F690(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 168) = a2;
  *(_QWORD *)(result + 176) = a3;
  return result;
}

uint64_t sub_10015F698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int i;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  if (!a1)
  {
    v12 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null virtInf.", "WiFiVirtualInterfaceSetIoctl");
    goto LABEL_14;
  }
  if (!a4)
  {
    v12 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null property.", "WiFiVirtualInterfaceSetIoctl");
LABEL_14:
    v11 = 4294963396;
LABEL_18:
    objc_autoreleasePoolPop(v12);
    return v11;
  }
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v12 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Ioctls are not supported on this interface", "WiFiVirtualInterfaceSetIoctl");
    v11 = 4294963393;
    goto LABEL_18;
  }
  for (i = 6; ; --i)
  {
    v10 = Apple80211Set(v6, a2, a3, a4, 8);
    v11 = v10;
    if ((_DWORD)v10 != -3905 && (_DWORD)v10 != 61 && (_DWORD)v10 != 16)
      break;
    if (!i)
      break;
    usleep(0x7A120u);
    v6 = *(_QWORD *)(a1 + 16);
  }
  return v11;
}

void sub_10015F7E8(uint64_t a1)
{
  CFTypeID v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  void *v6;
  const void *v7;

  if (!a1)
    sub_10018783C();
  v2 = CFGetTypeID((CFTypeRef)a1);
  v3 = qword_10026DC00;
  if (!qword_10026DC00)
  {
    pthread_once(&stru_10026CF00, (void (*)(void))sub_10015BA10);
    v3 = qword_10026DC00;
  }
  if (v2 != v3)
    sub_100187864();
  v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    Apple80211EventMonitoringHalt(v5);
    Apple80211Close(*(_QWORD *)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
  }
  v6 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: calling WiFiP2PAWDLStateMonitor endMonitoring.", "__WiFiVirtualInterfaceRelease");
  objc_autoreleasePoolPop(v6);
  objc_msgSend(*(id *)(a1 + 192), "endMonitoring");

  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;

  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  objc_msgSend(*(id *)(a1 + 216), "setVirtualInterface:", 0);

  *(_QWORD *)(a1 + 216) = 0;
  v7 = *(const void **)(a1 + 232);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 232) = 0;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 24) = 0;
}

uint64_t sub_10015F920(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const __CFDictionary *v5;
  BOOL v6;
  const void *Value;
  const __CFDictionary *v8;
  const void *v9;
  const __CFDictionary *v10;
  const void *v11;
  const __CFDictionary *v12;
  const void *v13;
  CFDataRef v14;
  CFDataRef v15;
  uint64_t v16;

  result = 0;
  if (a1 && a2)
  {
    v5 = *(const __CFDictionary **)(a1 + 32);
    if (v5)
      v6 = *(_QWORD *)(a2 + 32) == 0;
    else
      v6 = 1;
    if (v6)
      return 0;
    Value = CFDictionaryGetValue(v5, CFSTR("VIRT_IF_ROLE"));
    v8 = *(const __CFDictionary **)(a2 + 32);
    v9 = v8 ? CFDictionaryGetValue(v8, CFSTR("VIRT_IF_ROLE")) : 0;
    result = CFEqual(Value, v9);
    if ((_DWORD)result)
    {
      v10 = *(const __CFDictionary **)(a1 + 32);
      v11 = v10 ? CFDictionaryGetValue(v10, CFSTR("VIRT_IF_NAME")) : 0;
      v12 = *(const __CFDictionary **)(a2 + 32);
      v13 = v12 ? CFDictionaryGetValue(v12, CFSTR("VIRT_IF_NAME")) : 0;
      result = CFEqual(v11, v13);
      if ((_DWORD)result)
      {
        v14 = sub_10015CA58(a1);
        v15 = sub_10015CA58(a2);
        if (CFEqual(v14, v15))
        {
          if (v14)
            CFRelease(v14);
          v16 = 1;
          result = 1;
          if (v15)
          {
LABEL_24:
            CFRelease(v15);
            return v16;
          }
        }
        else
        {
          if (v14)
            CFRelease(v14);
          v16 = 0;
          result = 0;
          if (v15)
            goto LABEL_24;
        }
      }
    }
  }
  return result;
}

CFHashCode sub_10015FA60(uint64_t a1)
{
  CFDataRef v1;
  CFHashCode v2;

  v1 = sub_10015CA58(a1);
  v2 = CFHash(v1);
  if (v1)
    CFRelease(v1);
  return v2;
}

CFStringRef sub_10015FA98(uint64_t a1)
{
  const __CFDictionary *v2;
  const __CFString *Value;
  const __CFDictionary *v4;
  const __CFNumber *v5;
  uint64_t v6;
  unsigned int valuePtr;
  char buffer[8];
  uint64_t v10;

  valuePtr = -1431655766;
  *(_QWORD *)buffer = 0;
  v10 = 0;
  if (!a1)
    goto LABEL_8;
  v2 = *(const __CFDictionary **)(a1 + 32);
  if (!v2)
    goto LABEL_8;
  Value = (const __CFString *)CFDictionaryGetValue(v2, CFSTR("VIRT_IF_NAME"));
  if (Value)
    CFStringGetCString(Value, buffer, 16, 0);
  v4 = *(const __CFDictionary **)(a1 + 32);
  if (v4 && (v5 = (const __CFNumber *)CFDictionaryGetValue(v4, CFSTR("VIRT_IF_ROLE"))) != 0)
  {
    CFNumberGetValue(v5, kCFNumberSInt32Type, &valuePtr);
    v6 = valuePtr;
  }
  else
  {
LABEL_8:
    v6 = 0;
    valuePtr = 0;
  }
  return CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%-40s: ROLE: %d"), buffer, v6);
}

uint64_t sub_10015FB78()
{
  uint64_t result;

  result = qword_10026DC08;
  if (!qword_10026DC08)
  {
    pthread_once(&stru_10026CF10, (void (*)(void))sub_10015FBB4);
    return qword_10026DC08;
  }
  return result;
}

uint64_t sub_10015FBB4()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass(&unk_100232E18);
  qword_10026DC08 = result;
  return result;
}

_OWORD *sub_10015FBD8(uint64_t a1)
{
  _OWORD *Instance;
  _OWORD *v3;
  CFMutableArrayRef Mutable;

  if (!qword_10026DC08)
    pthread_once(&stru_10026CF10, (void (*)(void))sub_10015FBB4);
  Instance = (_OWORD *)_CFRuntimeCreateInstance(a1);
  v3 = Instance;
  if (Instance)
  {
    Instance[2] = 0u;
    Instance[3] = 0u;
    Instance[1] = 0u;
    *((_BYTE *)Instance + 16) = 0;
    Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    *((_QWORD *)v3 + 3) = Mutable;
    if (Mutable)
    {
      *((_BYTE *)v3 + 57) = 0;
      if (objc_opt_class(LockdownModeManager))
        *((_BYTE *)v3 + 58) = objc_msgSend(+[LockdownModeManager shared](LockdownModeManager, "shared"), "enabled");
    }
    else
    {
      CFRelease(v3);
      return 0;
    }
  }
  return v3;
}

void sub_10015FC9C(uint64_t a1, int a2)
{
  void *v4;
  const char *v5;

  if (a1 && *(_DWORD *)(a1 + 20) != a2)
  {
    v4 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
    {
      v5 = "NonInteractive";
      if (a2 == 1)
        v5 = "Interactive";
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "ATJManager: setting ask-to-join interaction mode to %s", v5);
    }
    objc_autoreleasePoolPop(v4);
    *(_DWORD *)(a1 + 20) = a2;
    *(_QWORD *)(a1 + 40) = 0;
    sub_10015FD48(a1);
  }
}

void sub_10015FD48(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v6;
  double Current;
  double v8;
  const __CFDate *Value;
  double AbsoluteTime;
  double v12;
  double v13;
  const __CFDate *v14;
  double v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  CFIndex v22;
  CFIndex v23;
  void *v24;

  if (a1)
  {
    v2 = *(const __CFArray **)(a1 + 24);
    if (v2 && CFArrayGetCount(v2))
    {
      Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
      if (CFArrayGetCount(*(CFArrayRef *)(a1 + 24)) >= 1)
      {
        for (i = 0; i < CFArrayGetCount(*(CFArrayRef *)(a1 + 24)); ++i)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), i);
          if (ValueAtIndex)
          {
            v6 = ValueAtIndex;
            Current = CFAbsoluteTimeGetCurrent();
            v8 = sub_100160AA8(v6);
            Value = (const __CFDate *)CFDictionaryGetValue(v6, CFSTR("atjHistTblEntCreationTimeStamp"));
            if (!Value)
              goto LABEL_19;
            AbsoluteTime = CFDateGetAbsoluteTime(Value);
            if (AbsoluteTime == 0.0 || Current <= AbsoluteTime)
            {
              v16 = objc_autoreleasePoolPush();
              if (qword_10026DD20)
              {
                v24 = v16;
                objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: current time is less than creation time", "__WiFiATJMgrATJHistTblEntGetAverageInRangeTime");
                v16 = v24;
              }
              objc_autoreleasePoolPop(v16);
LABEL_19:
              if (!CFEqual(v6, *(CFTypeRef *)(a1 + 32)))
                CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), i--);
              continue;
            }
            v12 = (Current - AbsoluteTime) / 86400.0;
            if (v12 == 0.0)
              v12 = 1.0;
            if (v8 / v12 < dbl_1001BBE60[*(_BYTE *)(a1 + 57) == 0])
              goto LABEL_19;
            v13 = CFAbsoluteTimeGetCurrent();
            v14 = (const __CFDate *)CFDictionaryGetValue(v6, CFSTR("atjHistTblEntCreationTimeStamp"));
            if (v14)
            {
              v15 = CFDateGetAbsoluteTime(v14);
              if (v15 == 0.0 || v13 <= v15)
              {
                v17 = objc_autoreleasePoolPush();
                if (qword_10026DD20)
                  objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: current time is less than last seen time", "__WiFiATJMgrATJHistTblEntGetTimeElapsedSinceLastSeen");
                objc_autoreleasePoolPop(v17);
                continue;
              }
              if (v13 - v15 > dbl_1001BBE70[*(_BYTE *)(a1 + 57) == 0])
                goto LABEL_19;
            }
          }
        }
      }
      v18 = objc_autoreleasePoolPush();
      v19 = qword_10026DD20;
      if (!qword_10026DD20)
        goto LABEL_32;
      v22 = Count;
      v23 = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
      v20 = "ATJManager: entries before cleanup %ld, entries after cleanup %ld";
      v21 = (void *)v19;
    }
    else
    {
      v18 = objc_autoreleasePoolPush();
      v21 = (void *)qword_10026DD20;
      if (!qword_10026DD20)
        goto LABEL_32;
      v20 = "ATJManager: no entries to purge";
    }
    objc_msgSend(v21, "WFLog:message:", 3, v20, v22, v23);
LABEL_32:
    objc_autoreleasePoolPop(v18);
  }
}

void sub_10015FFC8(uint64_t a1, unsigned int a2)
{
  void *v4;
  const void *v5;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 58))
    {
      v4 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Lockdown Mode is enabled, ignoring SetATJMode %ld", "WiFiATJMgrSetATJMode", a2);
      objc_autoreleasePoolPop(v4);
    }
    else if (*(unsigned __int8 *)(a1 + 16) != a2)
    {
      *(_BYTE *)(a1 + 16) = a2;
      if (!a2)
      {
        v5 = *(const void **)(a1 + 32);
        if (v5)
        {
          CFRelease(v5);
          *(_QWORD *)(a1 + 32) = 0;
        }
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 48) = 0;
        *(_BYTE *)(a1 + 56) = 0;
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 24));
      }
    }
  }
}

void sub_100160088(uint64_t a1, int a2)
{
  void *v3;
  const char *v4;

  if (a1)
  {
    *(_BYTE *)(a1 + 57) = a2;
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
    {
      v4 = "enabled";
      if (!a2)
        v4 = "disabled";
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "ATJManager: atj test mode %s ", v4);
    }
    objc_autoreleasePoolPop(v3);
  }
}

uint64_t sub_100160100(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(result + 57);
  return result;
}

uint64_t sub_10016010C(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 20);
  return result;
}

uint64_t sub_100160118(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(result + 16);
  return result;
}

BOOL sub_100160124(uint64_t a1, _BOOL8 a2, const __CFArray *a3, uint64_t a4)
{
  double Current;
  double v9;
  void *v10;
  const char *v11;
  CFIndex Count;
  CFIndex v13;
  const void *ValueAtIndex;
  const void *v15;
  const __CFDictionary *v16;
  double v17;
  double v18;
  BOOL v19;
  double v20;
  void *v21;
  const char *v22;
  __CFDictionary *v23;
  void *v24;
  double v25;
  double v26;
  __CFDictionary *v27;
  CFNumberRef v28;
  CFNumberRef v29;
  const __CFArray *v30;
  const void *v31;
  void *v32;
  void *v33;
  const char *v34;
  CFIndex v35;
  uint64_t v36;
  const __CFArray *v37;
  const __CFArray *v38;
  CFIndex FirstIndexOfValue;
  __CFArray *v40;
  CFIndex v41;
  CFIndex v42;
  uint64_t v43;
  uint64_t v44;
  CFIndex v45;
  void *v46;
  const char *v47;
  const void *v48;
  CFIndex v49;
  CFIndex v50;
  CFIndex v51;
  const __CFDictionary *v52;
  CFIndex v53;
  uint64_t v54;
  CFDateRef v55;
  CFDateRef v56;
  CFNumberRef v57;
  CFNumberRef v58;
  CFMutableArrayRef Mutable;
  const __CFArray *v60;
  __CFDictionary *v61;
  __CFDictionary *v62;
  CFIndex i;
  const void *v64;
  const void *v65;
  const void *v66;
  void *v67;
  const char *v68;
  CFAbsoluteTime v69;
  CFDateRef v70;
  CFDateRef v71;
  const __CFDictionary *v72;
  int v73;
  int v74;
  const __CFDictionary *v75;
  void *v76;
  const void *v78;
  CFIndex v79;
  const void *v80;
  uint64_t v81;
  uint64_t v82;
  double valuePtr;
  CFRange v84;
  CFRange v85;
  CFRange v86;
  CFRange v87;
  CFRange v88;
  CFRange v89;
  CFRange v90;

  Current = CFAbsoluteTimeGetCurrent();
  if (!a1)
    return 0;
  v9 = Current;
  v10 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
  {
    if (*(_DWORD *)(a1 + 20) == 1)
      v11 = "Interactive";
    else
      v11 = "NonInteractive";
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "ATJManager: atjAction=%d atjEnabled=%d userInteractionMode=%s discovered %ld networks", a4, *(unsigned __int8 *)(a1 + 16), v11, CFArrayGetCount((CFArrayRef)a2));
  }
  objc_autoreleasePoolPop(v10);
  if (a2)
  {
    if (!CFArrayGetCount((CFArrayRef)a2) || *(_DWORD *)(a1 + 20) != 1)
    {
LABEL_33:
      a2 = 0;
      goto LABEL_118;
    }
    Count = CFArrayGetCount((CFArrayRef)a2);
    if (a3 && Count && CFArrayGetCount(a3) && CFArrayGetCount((CFArrayRef)a2) >= 1)
    {
      v13 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v13);
        if (ValueAtIndex)
        {
          v15 = ValueAtIndex;
          v84.length = CFArrayGetCount(a3);
          v84.location = 0;
          if (CFArrayContainsValue(a3, v84, v15))
            break;
        }
        if (++v13 >= CFArrayGetCount((CFArrayRef)a2))
          goto LABEL_18;
      }
      v24 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: in range of preferred network.", "__WiFiATJMgrIsPreferredNetworkInRange");
      objc_autoreleasePoolPop(v24);
      goto LABEL_33;
    }
LABEL_18:
    v85.length = CFArrayGetCount((CFArrayRef)a2);
    v85.location = 0;
    CFArraySortValues((CFMutableArrayRef)a2, v85, (CFComparatorFunction)sub_1000C8AAC, 0);
    v16 = *(const __CFDictionary **)(a1 + 32);
    if (!v16)
      goto LABEL_69;
    if (sub_1001609B0(v16, (CFArrayRef)a2))
    {
      v17 = *(double *)(a1 + 40);
      v18 = v9 - v17;
      v19 = v17 == 0.0;
      v20 = 0.0;
      if (!v19)
        v20 = v18;
      if (v20 > 1800.0)
        v20 = 1800.0;
      *(double *)(a1 + 48) = *(double *)(a1 + 48) + v20;
      v21 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
      {
        v22 = "monitored";
        if (!*(_BYTE *)(a1 + 56))
          v22 = "unmonitored";
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "ATJManager: device still at %s atj point for %f seconds", v22, *(_QWORD *)(a1 + 48));
      }
      objc_autoreleasePoolPop(v21);
      v23 = *(__CFDictionary **)(a1 + 32);
      if (v23)
      {
        a2 = 0;
LABEL_101:
        v69 = CFAbsoluteTimeGetCurrent();
        v70 = CFDateCreate(kCFAllocatorDefault, v69);
        if (v70)
        {
          v71 = v70;
          CFDictionarySetValue(v23, CFSTR("atjHistTblEntLastSeenTimeStamp"), v70);
          CFRelease(v71);
        }
LABEL_103:
        v72 = *(const __CFDictionary **)(a1 + 32);
        if (v72)
        {
          if (*(_BYTE *)(a1 + 57))
            v73 = 120;
          else
            v73 = 18000;
          if (*(_BYTE *)(a1 + 57))
            v74 = 5;
          else
            v74 = 60;
          if ((_DWORD)a4 != 2)
            v73 = v74;
          if (sub_100160AA8(v72) + *(double *)(a1 + 48) > (double)v73)
          {
            v75 = *(const __CFDictionary **)(a1 + 32);
            if (v75)
            {
              if (CFDictionaryGetValue(v75, CFSTR("atjHistTblEntUserPromptPending")) == kCFBooleanTrue)
              {
                v76 = objc_autoreleasePoolPush();
                if (qword_10026DD20)
                  objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "ATJManager: prompt user for action=%d", a4);
                objc_autoreleasePoolPop(v76);
                a2 = 1;
              }
            }
          }
        }
        goto LABEL_118;
      }
LABEL_69:
      if (CFArrayGetCount((CFArrayRef)a2) && (v49 = CFArrayGetCount(*(CFArrayRef *)(a1 + 24)), v49 >= 1))
      {
        v50 = v49;
        v51 = 0;
        while (1)
        {
          v52 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v51);
          if (v52)
          {
            if (sub_1001609B0(v52, (CFArrayRef)a2))
              break;
          }
          if (v50 == ++v51)
            goto LABEL_75;
        }
        v78 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v51);
        a2 = 0;
        *(_QWORD *)(a1 + 32) = CFRetain(v78);
        *(_BYTE *)(a1 + 56) = 1;
      }
      else
      {
LABEL_75:
        valuePtr = 0.0;
        v53 = CFArrayGetCount((CFArrayRef)a2);
        if (v53 && (v54 = v53, (v55 = CFDateCreate(kCFAllocatorDefault, v9)) != 0))
        {
          v56 = v55;
          v57 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
          if (v57)
          {
            v58 = v57;
            Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
            if (Mutable)
            {
              v60 = Mutable;
              v61 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
              v62 = v61;
              if (v61)
              {
                v82 = a4;
                CFDictionaryAddValue(v61, CFSTR("atjHistTblEntCreationTimeStamp"), v56);
                CFDictionaryAddValue(v62, CFSTR("atjHistTblEntLastSeenTimeStamp"), v56);
                CFDictionaryAddValue(v62, CFSTR("atjHistTblEntInRangeTime"), v58);
                CFDictionarySetValue(v62, CFSTR("atjHistTblEntUserPromptPending"), kCFBooleanTrue);
                if (v54 >= 1)
                {
                  for (i = 0; i != v54; ++i)
                  {
                    if (CFArrayGetCount(v60) > 4)
                      break;
                    v64 = CFArrayGetValueAtIndex((CFArrayRef)a2, i);
                    if (v64)
                    {
                      v65 = sub_10002BE64((uint64_t)v64, CFSTR("BSSID"));
                      if (v65)
                      {
                        v66 = v65;
                        v90.length = CFArrayGetCount(v60);
                        v90.location = 0;
                        if (!CFArrayContainsValue(v60, v90, v66))
                          CFArrayAppendValue(v60, v66);
                      }
                    }
                  }
                }
                CFDictionaryAddValue(v62, CFSTR("atjHistTblEntBSSIDList"), v60);
                if (!CFArrayGetCount(v60))
                {
                  CFRelease(v62);
                  v62 = 0;
                }
                a4 = v82;
              }
              CFRelease(v60);
            }
            else
            {
              v62 = 0;
            }
            CFRelease(v58);
          }
          else
          {
            v62 = 0;
          }
          CFRelease(v56);
        }
        else
        {
          v62 = 0;
        }
        *(_QWORD *)(a1 + 32) = v62;
        *(_BYTE *)(a1 + 56) = 0;
        a2 = (_DWORD)a4 == 2;
      }
      *(_QWORD *)(a1 + 48) = 0;
      v67 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
      {
        if (*(_BYTE *)(a1 + 56))
          v68 = "monitored";
        else
          v68 = "unmonitored";
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "ATJManager: device detected at a previously %s atj point", v68);
      }
      objc_autoreleasePoolPop(v67);
      v23 = *(__CFDictionary **)(a1 + 32);
      if (!v23)
        goto LABEL_103;
      goto LABEL_101;
    }
    v25 = *(double *)(a1 + 48);
    v26 = 60.0;
    if (*(_BYTE *)(a1 + 57))
      v26 = 25.0;
    if (v25 <= v26)
      goto LABEL_62;
    v27 = *(__CFDictionary **)(a1 + 32);
    if (v27)
    {
      valuePtr = v25 + sub_100160AA8(*(const __CFDictionary **)(a1 + 32));
      v28 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
      if (v28)
      {
        v29 = v28;
        CFDictionarySetValue(v27, CFSTR("atjHistTblEntInRangeTime"), v28);
        CFRelease(v29);
      }
    }
    if (*(_BYTE *)(a1 + 56))
    {
LABEL_62:
      v46 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
      {
        v47 = "monitored";
        if (!*(_BYTE *)(a1 + 56))
          v47 = "unmonitored";
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "ATJManager: device moved from %s atj point after %f seconds", v47, *(_QWORD *)(a1 + 48));
      }
      objc_autoreleasePoolPop(v46);
      v48 = *(const void **)(a1 + 32);
      if (v48)
      {
        CFRelease(v48);
        *(_QWORD *)(a1 + 32) = 0;
      }
      *(_QWORD *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 56) = 0;
      goto LABEL_69;
    }
    v30 = *(const __CFArray **)(a1 + 24);
    if (!v30)
    {
      v32 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s, ATJManager: atj table is NULL", "__WiFiATJMgrATJHistTblAddEntry");
      goto LABEL_61;
    }
    v31 = *(const void **)(a1 + 32);
    v86.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
    v86.location = 0;
    if (CFArrayContainsValue(v30, v86, v31))
    {
      v32 = objc_autoreleasePoolPush();
      v33 = (void *)qword_10026DD20;
      if (!qword_10026DD20)
      {
LABEL_61:
        objc_autoreleasePoolPop(v32);
        goto LABEL_62;
      }
      v34 = "ATJManager: atjTableEntry already exists in table";
    }
    else
    {
      v35 = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
      v36 = 5;
      if (!*(_BYTE *)(a1 + 57))
        v36 = 64;
      if (v35 >= v36)
      {
        v37 = *(const __CFArray **)(a1 + 24);
        v87.length = CFArrayGetCount(v37);
        v87.location = 0;
        CFArraySortValues(v37, v87, (CFComparatorFunction)sub_100160BE0, 0);
        if (*(_QWORD *)(a1 + 32))
        {
          if (*(_BYTE *)(a1 + 56))
          {
            v38 = *(const __CFArray **)(a1 + 24);
            v88.length = CFArrayGetCount(v38);
            v88.location = 0;
            FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v38, v88, *(const void **)(a1 + 32));
            if (FirstIndexOfValue != -1)
            {
              CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), FirstIndexOfValue);
              CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), 0, *(const void **)(a1 + 32));
            }
          }
        }
        v40 = *(__CFArray **)(a1 + 24);
        if (*(_BYTE *)(a1 + 57))
          v41 = 4;
        else
          v41 = 63;
        v42 = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
        v43 = -5;
        if (!*(_BYTE *)(a1 + 57))
          v43 = -64;
        v89.length = v42 + v43 + 1;
        v89.location = v41;
        CFArrayReplaceValues(v40, v89, 0, 0);
      }
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 24), v31);
      v32 = objc_autoreleasePoolPush();
      v44 = qword_10026DD20;
      if (!qword_10026DD20)
        goto LABEL_61;
      v45 = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
      v80 = v31;
      v81 = *(_QWORD *)(a1 + 24);
      v79 = v45;
      v34 = "ATJManager: %ld entries in atjHistory Table, add %@ to %@";
      v33 = (void *)v44;
    }
    objc_msgSend(v33, "WFLog:message:", 3, v34, v79, v80, v81);
    goto LABEL_61;
  }
LABEL_118:
  *(double *)(a1 + 40) = v9;
  sub_10015FD48(a1);
  return a2;
}

uint64_t sub_1001609B0(const __CFDictionary *a1, CFArrayRef theArray)
{
  CFIndex Count;
  uint64_t result;
  const __CFArray *v6;
  CFIndex v7;
  CFIndex v8;
  CFIndex v9;
  const void *ValueAtIndex;
  const void *v11;
  CFIndex v12;
  const void *v13;
  const void *v14;

  Count = CFArrayGetCount(theArray);
  result = 0;
  if (theArray)
  {
    if (Count)
    {
      result = (uint64_t)CFDictionaryGetValue(a1, CFSTR("atjHistTblEntBSSIDList"));
      if (result)
      {
        v6 = (const __CFArray *)result;
        v7 = CFArrayGetCount((CFArrayRef)result);
        if (v7 >= 1)
        {
          v8 = v7;
          v9 = 0;
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v6, v9);
            if (ValueAtIndex)
            {
              if (Count >= 1)
                break;
            }
LABEL_14:
            if (++v9 == v8)
              return 0;
          }
          v11 = ValueAtIndex;
          v12 = 0;
          while (1)
          {
            v13 = CFArrayGetValueAtIndex(theArray, v12);
            if (v13)
            {
              v14 = sub_10002BE64((uint64_t)v13, CFSTR("BSSID"));
              if (v14)
              {
                if (CFEqual(v11, v14))
                  return 1;
              }
            }
            if (Count == ++v12)
              goto LABEL_14;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

double sub_100160AA8(const __CFDictionary *a1)
{
  double v1;
  const __CFNumber *Value;
  void *v4;
  uint64_t valuePtr;

  valuePtr = 0;
  v1 = 0.0;
  if (a1)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("atjHistTblEntInRangeTime"));
    if (Value)
    {
      return (double)CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
    }
    else
    {
      v4 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "atjTableEntry does not have in range time");
      objc_autoreleasePoolPop(v4);
    }
  }
  return v1;
}

void sub_100160B34(uint64_t a1)
{
  __CFDictionary *v1;

  if (a1)
  {
    v1 = *(__CFDictionary **)(a1 + 32);
    if (v1)
      CFDictionarySetValue(v1, CFSTR("atjHistTblEntUserPromptPending"), kCFBooleanFalse);
  }
}

void sub_100160B5C(_QWORD *a1)
{
  CFTypeID v2;
  uint64_t v3;
  const void *v4;
  const void *v5;

  if (!a1)
    sub_10018788C();
  v2 = CFGetTypeID(a1);
  v3 = qword_10026DC08;
  if (!qword_10026DC08)
  {
    pthread_once(&stru_10026CF10, (void (*)(void))sub_10015FBB4);
    v3 = qword_10026DC08;
  }
  if (v2 != v3)
    sub_1001878B4();
  v4 = (const void *)a1[3];
  if (v4)
  {
    CFRelease(v4);
    a1[3] = 0;
  }
  v5 = (const void *)a1[4];
  if (v5)
  {
    CFRelease(v5);
    a1[4] = 0;
  }
}

uint64_t sub_100160BE0(const __CFDictionary *a1, const __CFDictionary *a2)
{
  uint64_t v2;
  const __CFDate *Value;
  double v5;
  double AbsoluteTime;
  const __CFDate *v7;

  if ((unint64_t)a1 | (unint64_t)a2)
    v2 = -1;
  else
    v2 = 0;
  if (a2)
    v2 = 1;
  if (a1 && a2)
  {
    Value = (const __CFDate *)CFDictionaryGetValue(a1, CFSTR("atjHistTblEntLastSeenTimeStamp"));
    v5 = 0.0;
    AbsoluteTime = 0.0;
    if (Value)
      AbsoluteTime = CFDateGetAbsoluteTime(Value);
    v7 = (const __CFDate *)CFDictionaryGetValue(a2, CFSTR("atjHistTblEntLastSeenTimeStamp"));
    if (v7)
      v5 = CFDateGetAbsoluteTime(v7);
    v2 = -1;
    if (AbsoluteTime <= v5)
      return 0;
  }
  return v2;
}

void sub_100160D5C(id a1, BOOL a2, NSError *a3)
{
  _BOOL4 v4;
  void *v5;

  v4 = a2;
  v5 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: granted %d error %@", "-[WiFiUserNotificationManager initWithQueue:supportsWAPI:]_block_invoke", v4, a3);
  objc_autoreleasePoolPop(v5);
}

uint64_t sub_100161884(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 32), "callback");
  return (*((uint64_t (**)(id, _QWORD, _QWORD, _QWORD, id))v2 + 2))(v2, *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 52), objc_msgSend(*(id *)(a1 + 32), "callbackContext"));
}

void sub_100161DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100161DC0(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  void *v6;
  _QWORD block[4];
  __int128 v8;
  uint64_t v9;
  char v10;

  if (objc_msgSend(a2, "count"))
  {
    v4 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: delivered notification is still visible %@", "-[WiFiUserNotificationManager dispatchNotificationWithRecommendation:currentLocation:force:]_block_invoke", a2);
    objc_autoreleasePoolPop(v4);
  }
  else
  {
    v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "notificationMapping"), "objectForKey:", objc_msgSend(*(id *)(a1 + 32), "visibleRequest"));
    v6 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: no delivered notifications, clearing visible request (%@) for recommendation %@", "-[WiFiUserNotificationManager dispatchNotificationWithRecommendation:currentLocation:force:]_block_invoke", objc_msgSend(*(id *)(a1 + 32), "visibleRequest"), v5);
    objc_autoreleasePoolPop(v6);
    objc_msgSend(*(id *)(a1 + 32), "setVisibleRequest:", 0);
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "notificationMapping"), "removeAllObjects");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100161F28;
    block[3] = &unk_100232EC0;
    v8 = *(_OWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(_BYTE *)(a1 + 56);
    dispatch_async((dispatch_queue_t)qword_10026DD40, block);
  }
}

id sub_100161F28(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dispatchNotificationWithRecommendation:currentLocation:force:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
}

void sub_100161F3C(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  v5 = objc_autoreleasePoolPush();
  if (a2)
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Error: %@", "-[WiFiUserNotificationManager dispatchNotificationWithRecommendation:currentLocation:force:]_block_invoke", objc_msgSend(a2, "localizedDescription"));
    objc_autoreleasePoolPop(v5);
  }
  else
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Added RequestId: %@", "-[WiFiUserNotificationManager dispatchNotificationWithRecommendation:currentLocation:force:]_block_invoke", *(_QWORD *)(a1 + 32));
    objc_autoreleasePoolPop(v5);
    objc_msgSend(v4, "setVisibleRequest:", *(_QWORD *)(a1 + 32));
    if (*(_BYTE *)(a1 + 64))
    {
      v6 = objc_alloc_init((Class)NSMutableDictionary);
      objc_msgSend(v6, "setObject:forKey:", objc_msgSend(*(id *)(a1 + 40), "SSID"), CFSTR("ssid"));
      objc_msgSend(v6, "setObject:forKey:", *(_QWORD *)(a1 + 32), CFSTR("identifier"));
      objc_msgSend(v6, "setObject:forKey:", &off_100253A70, CFSTR("type"));
      v7 = *(_QWORD *)(a1 + 48);
      if (v7)
        objc_msgSend(v6, "setObject:forKey:", v7, CFSTR("location"));
      objc_msgSend(v4, "_startTimerForNotificationWithUserInfo:", v6);
      if (v6)
        CFRelease(v6);
    }
  }
}

void sub_100162390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

void sub_1001623B0(uint64_t a1, void *a2)
{
  void *v4;
  _QWORD block[4];
  __int128 v6;

  if (objc_msgSend(a2, "count"))
  {
    v4 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: delivered notification is still visible %@", "-[WiFiUserNotificationManager dispatchNotificationWithRandomMAC:]_block_invoke", a2);
    objc_autoreleasePoolPop(v4);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setVisibleRequest:", 0);
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "notificationMapping"), "removeAllObjects");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10016248C;
    block[3] = &unk_10022EB70;
    v6 = *(_OWORD *)(a1 + 32);
    dispatch_async((dispatch_queue_t)qword_10026DD40, block);
  }
}

id sub_10016248C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dispatchNotificationWithRandomMAC:", *(_QWORD *)(a1 + 40));
}

void sub_100162498(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v5 = objc_autoreleasePoolPush();
  if (a2)
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Error: %@", "-[WiFiUserNotificationManager dispatchNotificationWithRandomMAC:]_block_invoke_3", objc_msgSend(a2, "localizedDescription"));
    objc_autoreleasePoolPop(v5);
  }
  else
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Added RequestId: %@", "-[WiFiUserNotificationManager dispatchNotificationWithRandomMAC:]_block_invoke_3", *(_QWORD *)(a1 + 32));
    objc_autoreleasePoolPop(v5);
    objc_msgSend(v4, "setVisibleRequest:", *(_QWORD *)(a1 + 32));
  }
}

void sub_100162970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  _Unwind_Resume(exception_object);
}

void sub_100162990(uint64_t a1, void *a2)
{
  void *v4;
  _QWORD block[4];
  __int128 v6;
  uint64_t v7;
  int v8;

  if (objc_msgSend(a2, "count"))
  {
    v4 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: delivered notification is still visible %@", "-[WiFiUserNotificationManager dispatchJoinAlertForNetwork:withProviderName:andReason:]_block_invoke", a2);
    objc_autoreleasePoolPop(v4);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setVisibleRequest:", 0);
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "notificationMapping"), "removeAllObjects");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100162A7C;
    block[3] = &unk_100232F88;
    v6 = *(_OWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 48);
    v8 = *(_DWORD *)(a1 + 56);
    dispatch_async((dispatch_queue_t)qword_10026DD40, block);
  }
}

id sub_100162A7C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dispatchJoinAlertForNetwork:withProviderName:andReason:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56));
}

void sub_100162A90(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v5 = objc_autoreleasePoolPush();
  if (a2)
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Error: %@", "-[WiFiUserNotificationManager dispatchJoinAlertForNetwork:withProviderName:andReason:]_block_invoke_3", objc_msgSend(a2, "localizedDescription"));
    objc_autoreleasePoolPop(v5);
  }
  else
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Added RequestId: %@", "-[WiFiUserNotificationManager dispatchJoinAlertForNetwork:withProviderName:andReason:]_block_invoke_3", *(_QWORD *)(a1 + 32));
    objc_autoreleasePoolPop(v5);
    objc_msgSend(v4, "setVisibleRequest:", *(_QWORD *)(a1 + 32));
  }
}

void sub_100162F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _Unwind_Resume(exception_object);
}

void sub_100162F2C(uint64_t a1, void *a2)
{
  void *v4;
  _QWORD block[4];
  __int128 v6;
  int v7;

  if (objc_msgSend(a2, "count"))
  {
    v4 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: delivered notification is still visible %@", "-[WiFiUserNotificationManager dispatchLowDataModeAlertForNetwork:withReason:]_block_invoke", a2);
    objc_autoreleasePoolPop(v4);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setVisibleRequest:", 0);
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "notificationMapping"), "removeAllObjects");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100163010;
    block[3] = &unk_100230FF0;
    v6 = *(_OWORD *)(a1 + 32);
    v7 = *(_DWORD *)(a1 + 48);
    dispatch_async((dispatch_queue_t)qword_10026DD40, block);
  }
}

id sub_100163010(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dispatchLowDataModeAlertForNetwork:withReason:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48));
}

void sub_100163020(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v5 = objc_autoreleasePoolPush();
  if (a2)
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Error: %@", "-[WiFiUserNotificationManager dispatchLowDataModeAlertForNetwork:withReason:]_block_invoke_3", objc_msgSend(a2, "localizedDescription"));
    objc_autoreleasePoolPop(v5);
  }
  else
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Added RequestId: %@", "-[WiFiUserNotificationManager dispatchLowDataModeAlertForNetwork:withReason:]_block_invoke_3", *(_QWORD *)(a1 + 32));
    objc_autoreleasePoolPop(v5);
    objc_msgSend(v4, "setVisibleRequest:", *(_QWORD *)(a1 + 32));
  }
}

void sub_10016360C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10016362C(uint64_t a1, void *a2)
{
  void *v4;
  _QWORD block[4];
  __int128 v6;
  uint64_t v7;

  if (objc_msgSend(a2, "count"))
  {
    v4 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: delivered notification is still visible %@", "-[WiFiUserNotificationManager dispatchNotificationWithColocatedScanResult:fromScanResult:]_block_invoke", a2);
    objc_autoreleasePoolPop(v4);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setVisibleRequest:", 0);
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "notificationMapping"), "removeAllObjects");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100163710;
    block[3] = &unk_100232518;
    v6 = *(_OWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 48);
    dispatch_async((dispatch_queue_t)qword_10026DD40, block);
  }
}

id sub_100163710(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dispatchNotificationWithColocatedScanResult:fromScanResult:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_100163720(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Did invoke -[UNUserNotificationCenter didReceiveNotificationResponse:withCompletionHandler:] with test action %@", "-[WiFiUserNotificationManager dispatchNotificationWithColocatedScanResult:fromScanResult:]_block_invoke_3", *(_QWORD *)(a1 + 32));
  objc_autoreleasePoolPop(v2);
}

void sub_100163780(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v5 = objc_autoreleasePoolPush();
  if (a2)
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Error: %@", "-[WiFiUserNotificationManager dispatchNotificationWithColocatedScanResult:fromScanResult:]_block_invoke_4", objc_msgSend(a2, "localizedDescription"));
    objc_autoreleasePoolPop(v5);
  }
  else
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Added RequestId: %@", "-[WiFiUserNotificationManager dispatchNotificationWithColocatedScanResult:fromScanResult:]_block_invoke_4", *(_QWORD *)(a1 + 32));
    objc_autoreleasePoolPop(v5);
    objc_msgSend(v4, "setVisibleRequest:", *(_QWORD *)(a1 + 32));
  }
}

void sub_100163B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100163B2C(uint64_t a1, void *a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;

  if (objc_msgSend(a2, "count"))
  {
    v4 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: delivered notification is still visible %@", "-[WiFiUserNotificationManager dispatchNotificationWithAskToJoinHotspotRecommendation:]_block_invoke", a2);
    objc_autoreleasePoolPop(v4);
  }
  else
  {
    v5 = *(_QWORD **)(a1 + 32);
    if (v5[8])
    {
      v6 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: canceling timer", "-[WiFiUserNotificationManager dispatchNotificationWithAskToJoinHotspotRecommendation:]_block_invoke");
      objc_autoreleasePoolPop(v6);
      dispatch_source_cancel(*(dispatch_source_t *)(*(_QWORD *)(a1 + 32) + 64));
      v5 = *(_QWORD **)(a1 + 32);
    }
    objc_msgSend(v5, "setVisibleRequest:", 0);
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "notificationMapping"), "removeAllObjects");
  }
}

void sub_100163C10(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v5 = objc_autoreleasePoolPush();
  if (a2)
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Error: %@", "-[WiFiUserNotificationManager dispatchNotificationWithAskToJoinHotspotRecommendation:]_block_invoke_2", objc_msgSend(a2, "localizedDescription"));
    objc_autoreleasePoolPop(v5);
  }
  else
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Added RequestId: %@", "-[WiFiUserNotificationManager dispatchNotificationWithAskToJoinHotspotRecommendation:]_block_invoke_2", *(_QWORD *)(a1 + 32));
    objc_autoreleasePoolPop(v5);
    objc_msgSend(v4, "setVisibleRequest:", *(_QWORD *)(a1 + 32));
    if (*(_BYTE *)(a1 + 56))
    {
      v6 = objc_alloc_init((Class)NSMutableDictionary);
      objc_msgSend(v6, "setObject:forKey:", *(_QWORD *)(a1 + 40), CFSTR("ssid"));
      objc_msgSend(v6, "setObject:forKey:", *(_QWORD *)(a1 + 32), CFSTR("identifier"));
      objc_msgSend(v6, "setObject:forKey:", &off_100253A88, CFSTR("type"));
      objc_msgSend(v4, "_startTimerForNotificationWithUserInfo:", v6);
      if (v6)
        CFRelease(v6);
    }
  }
}

id sub_1001640E0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_timeoutTimerDidFire:", *(_QWORD *)(a1 + 40));
}

void sub_1001640EC(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 64));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) = 0;
}

void sub_1001650D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

id sub_100165114(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;
  uint64_t v9;
  double v10;
  double v11;
  void *v12;

  result = objc_msgSend(a2, "doesContain:", *(_QWORD *)(a1 + 64));
  if ((_DWORD)result)
  {
    objc_msgSend(a2, "timeSinceFirstDeferral:", *(_QWORD *)(a1 + 64));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v9;
    v10 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    result = objc_msgSend(*(id *)(a1 + 32), "deferIntervalSecs");
    if (v10 >= v11)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = a3;
      if ((objc_msgSend(objc_msgSend(a2, "ssid"), "isEqualToString:", sub_10002B088(*(const void **)(*(_QWORD *)(a1 + 32) + 32))) & 1) == 0)
      {
        v12 = objc_autoreleasePoolPush();
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: %@ was a time-deferred network for %2.1f secs. No longer time-deferring", "-[WiFiTimeDeferredNetworksAJManager canDeferNetwork:withUsageRank:andMotionState:]_block_invoke", sub_10002B088(*(const void **)(a1 + 64)), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
        objc_autoreleasePoolPop(v12);
      }
      result = objc_msgSend(a2, "reset");
      *a4 = 1;
    }
  }
  return result;
}

id sub_1001653C0(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v8 = *(void **)(a1[4] + 24);
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v15;
LABEL_3:
    v12 = 0;
    while (1)
    {
      if (*(_QWORD *)v15 != v11)
        objc_enumerationMutation(v8);
      result = objc_msgSend(a2, "doesContain:", *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v12));
      if ((result & 1) != 0)
        break;
      if (v10 == (id)++v12)
      {
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        if (v10)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "addIndex:", a3);
    objc_msgSend(objc_msgSend(*(id *)(a1[4] + 16), "objectAtIndex:", a3), "reset");
    result = objc_msgSend(objc_msgSend(*(id *)(a1[4] + 16), "objectAtIndex:", a3), "ssid");
    if (result)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "appendFormat:", CFSTR("%@"), objc_msgSend(objc_msgSend(*(id *)(a1[4] + 16), "objectAtIndex:", a3), "ssid"));
      result = objc_msgSend(*(id *)(a1[4] + 16), "count");
      if ((id)(a3 + 1) == result)
        *a4 = 1;
      else
        return objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "appendString:", CFSTR(", "));
    }
  }
  return result;
}

void sub_100165668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100165680(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a2, "doesContain:", *(_QWORD *)(a1 + 40));
  if ((_DWORD)result)
  {
    result = objc_msgSend(a2, "reset");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
    *a4 = 1;
  }
  return result;
}

void sub_1001657AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001657C4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a2, "doesContain:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
  if ((_DWORD)result)
  {
    result = objc_msgSend(a2, "reset");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
    *a4 = 1;
  }
  return result;
}

void sub_1001659E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

id sub_100165A10(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a2, "ssid");
  if (result)
  {
    result = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "appendFormat:", CFSTR("%@"), objc_msgSend(a2, "ssid"));
    if (a3 + 1 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      *a4 = 1;
    else
      return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "appendString:", CFSTR(", "));
  }
  return result;
}

int64_t sub_100165F14(id a1, id a2, id a3)
{
  unint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned __int8 v15;
  void *v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  void *v19;
  unsigned __int8 v20;
  uint64_t v21;

  v4 = (unint64_t)a2;
  v5 = (unint64_t)a3;
  v6 = (void *)v5;
  if (v4 | v5)
    v7 = -1;
  else
    v7 = 0;
  if (v4)
    v8 = 1;
  else
    v8 = v7;
  if (v4 && v5)
  {
    if (objc_msgSend((id)v4, "group"))
      v9 = (100 * (3 - objc_msgSend((id)v4, "group"))) & 0xFCLL;
    else
      v9 = 0;
    if (objc_msgSend(v6, "group"))
      v10 = (100 * (3 - objc_msgSend(v6, "group"))) & 0xFCLL;
    else
      v10 = 0;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v4, "batteryLife"));
    if ((uint64_t)objc_msgSend(v11, "integerValue") >= 20)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v4, "batteryLife"));
      v9 += (uint64_t)objc_msgSend(v12, "integerValue") / 10;

    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "batteryLife"));
    if ((uint64_t)objc_msgSend(v13, "integerValue") >= 20)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "batteryLife"));
      v10 += (uint64_t)objc_msgSend(v14, "integerValue") / 10;

    }
    v15 = objc_msgSend((id)v4, "networkType");
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v4, "signalStrength"));
    v17 = v9 + v15 + objc_msgSend(v16, "integerValue");

    v18 = objc_msgSend(v6, "networkType");
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "signalStrength"));
    v20 = v10 + v18 + objc_msgSend(v19, "integerValue");

    if (v20 <= v17)
      v21 = 0;
    else
      v21 = -1;
    if (v20 < v17)
      v8 = 1;
    else
      v8 = v21;
  }

  return v8;
}

void sub_100166448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100166478(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void **v7;
  void *v8;
  id v9;
  void *v10;
  id v11;

  v11 = a2;
  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7 = (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v8 = v5;
  }
  else
  {
    v7 = (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v8 = v11;
  }
  v9 = v8;
  v10 = *v7;
  *v7 = v9;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_100166594(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 8);
  return result;
}

id sub_100166640(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "hotspotSession"));
  objc_msgSend(v2, "startBrowsing");

  return objc_msgSend(*(id *)(a1 + 32), "setScanning:", 1);
}

id sub_1001666E8(uint64_t a1)
{
  void *v2;
  void *v3;
  id result;

  v2 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Stopping hotspot browsing (isBrowsing %d removeCache %d)", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 40));
  objc_autoreleasePoolPop(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "hotspotSession"));
  objc_msgSend(v3, "stopBrowsing");

  result = objc_msgSend(*(id *)(a1 + 32), "setScanning:", 0);
  if (*(_BYTE *)(a1 + 40))
    return objc_msgSend(*(id *)(a1 + 32), "setNetworks:", 0);
  return result;
}

uint64_t sub_100166EEC()
{
  uint64_t result;

  result = qword_10026DC10;
  if (!qword_10026DC10)
  {
    pthread_once(&stru_10026CFE0, (void (*)(void))sub_100166F28);
    return qword_10026DC10;
  }
  return result;
}

uint64_t sub_100166F28()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass(&unk_100233158);
  qword_10026DC10 = result;
  return result;
}

uint64_t sub_100166F4C(uint64_t a1)
{
  void *v2;
  uint64_t Instance;
  uint64_t v4;
  AudioRouteMonitor *v5;

  v2 = objc_autoreleasePoolPush();
  if (objc_opt_class(AVAudioSessionRouteDescription))
  {
    if (!qword_10026DC10)
      pthread_once(&stru_10026CFE0, (void (*)(void))sub_100166F28);
    Instance = _CFRuntimeCreateInstance(a1);
    v4 = Instance;
    if (Instance)
    {
      *(_OWORD *)(Instance + 16) = 0u;
      *(_OWORD *)(Instance + 32) = 0u;
      v5 = objc_alloc_init(AudioRouteMonitor);
      *(_QWORD *)(v4 + 40) = v5;
      -[AudioRouteMonitor initializeWithHandler:](v5, "initializeWithHandler:", v4);
    }
  }
  else
  {
    v4 = 0;
  }
  objc_autoreleasePoolPop(v2);
  return v4;
}

void sub_100166FF8(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *global_queue;
  _QWORD block[5];

  v4 = objc_autoreleasePoolPush();
  if (a1)
  {
    *(_QWORD *)(a1 + 16) = a2;
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100167084;
    block[3] = &unk_10022EA38;
    block[4] = a1;
    dispatch_async(global_queue, block);
  }
  objc_autoreleasePoolPop(v4);
}

void sub_100167084(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "startMonitoring");
  sub_1001670B0(*(_QWORD *)(a1 + 32));
}

void sub_1001670B0(uint64_t a1)
{
  void *v2;
  NSArray *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  char v8;
  NSObject *v9;
  _QWORD v10[5];
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v2 = objc_autoreleasePoolPush();
  if (a1 && *(_QWORD *)(a1 + 24))
  {
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v3 = -[AVAudioSessionRouteDescription outputs](-[AVAudioSession currentRoute](+[AVAudioSession sharedInstance](AVAudioSession, "sharedInstance"), "currentRoute"), "outputs");
    v4 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v13;
      while (2)
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v13 != v6)
            objc_enumerationMutation(v3);
          if ((objc_msgSend(objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v7), "portType"), "isEqualToString:", AVAudioSessionPortBuiltInReceiver) & 1) != 0)
          {
            v8 = 1;
            goto LABEL_13;
          }
          v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        v5 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        if (v5)
          continue;
        break;
      }
    }
    v8 = 0;
LABEL_13:
    v9 = *(NSObject **)(a1 + 16);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100167270;
    v10[3] = &unk_1002306A0;
    v10[4] = a1;
    v11 = v8;
    dispatch_async(v9, v10);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_10016722C(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 40), "stopMonitoring");
    *(_QWORD *)(a1 + 16) = 0;
  }
  objc_autoreleasePoolPop(v2);
}

uint64_t sub_100167264(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    *(_QWORD *)(result + 24) = a2;
    *(_QWORD *)(result + 32) = a3;
  }
  return result;
}

uint64_t sub_100167270(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
}

double sub_100167284(uint64_t a1)
{
  CFTypeID v2;
  uint64_t v3;
  double result;

  if (!a1)
    sub_1001878DC();
  v2 = CFGetTypeID((CFTypeRef)a1);
  v3 = qword_10026DC10;
  if (!qword_10026DC10)
  {
    pthread_once(&stru_10026CFE0, (void (*)(void))sub_100166F28);
    v3 = qword_10026DC10;
  }
  if (v2 != v3)
    sub_100187904();

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

BOOL sub_1001672F8(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

CFStringRef sub_100167308(uint64_t a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(kCFAllocatorDefault, a2, CFSTR("WiFiAudioRoute@%p"), a1);
}

CFStringRef sub_100167340(uint64_t a1)
{
  return CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("WiFiAudioRoute@%p"), a1);
}

BOOL sub_10016737C()
{
  void *v0;
  void *v1;
  void *v2;
  _BOOL8 v3;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "stringForKey:", CFSTR("DextCrashBoostMode")));
  v2 = v1;
  v3 = v1 && !objc_msgSend(v1, "caseInsensitiveCompare:", CFSTR("Enable"));

  return v3;
}

id sub_1001673F8()
{
  void *v0;
  id v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v1 = objc_msgSend(v0, "integerForKey:", CFSTR("DextCrashPurgePeriodInMinutes"));

  return v1;
}

id sub_100167440()
{
  void *v0;
  id v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v1 = objc_msgSend(v0, "integerForKey:", CFSTR("DextCrashMaxFilesCount"));

  return v1;
}

void sub_100167488(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  void *v3;
  void **v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  id v38;
  id v39;
  void *v40;
  void **v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  __int16 v52;
  id v53;
  uint64_t v54;
  id v55;
  id v56;
  id v57;
  NSFileAttributeKey v58;
  _UNKNOWN **v59;
  NSURLResourceKey v60;

  v1 = *a1;
  *((_WORD *)a1 + 25) = 0;
  if (*((_BYTE *)a1 + 48))
  {
    v2 = a1;
    v3 = objc_autoreleasePoolPush();
    v4 = (void **)&qword_10026DD20;
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s Begin", "dextCoreFileProcess");
    objc_autoreleasePoolPop(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v1, 4));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v5));

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v60 = NSURLCreationDateKey;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v60, 1));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v6, v8, 4, 0));

    if (v9 && objc_msgSend(v9, "count"))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithBlock:](NSPredicate, "predicateWithBlock:", &stru_1002331D8));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "filteredArrayUsingPredicate:", v10));

      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "sortedArrayUsingComparator:", &stru_100233218));
      LODWORD(v10) = *((_DWORD *)v2 + 8);
      v13 = objc_msgSend(v12, "count");
      v51 = v12;
      if ((int)v10 < 1441)
      {
        v14 = *((_DWORD *)v2 + 9);
        if ((int)objc_msgSend(v12, "count") < 1)
        {
          LOWORD(v13) = 0;
        }
        else
        {
          v44 = v11;
          v45 = v9;
          v46 = v6;
          v47 = v2;
          v15 = v13;
          v16 = 0;
          v17 = 0;
          v49 = v15 - v14;
          v52 = 0;
          v18 = v12;
          do
          {
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectAtIndexedSubscript:", v16));
            if (v16 >= (int)v49)
            {
              v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1));
              v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithString:](NSMutableString, "stringWithString:", v24));

              objc_msgSend(v25, "appendString:", CFSTR("/"));
              objc_msgSend(v25, "appendString:", CFSTR("wifi-bcmwlan-dextcrash-"));
              v55 = 0;
              v56 = 0;
              objc_msgSend(v19, "getResourceValue:forKey:error:", &v56, NSURLCreationDateKey, &v55);
              v26 = v56;
              v27 = v55;

              v28 = v26;
              v29 = objc_alloc_init((Class)NSDateFormatter);
              objc_msgSend(v29, "setDateFormat:", CFSTR("yyyy-MM-dd'T'HH:mm:ss"));
              v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone systemTimeZone](NSTimeZone, "systemTimeZone"));
              objc_msgSend(v29, "setTimeZone:", v30);

              v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "stringFromDate:", v28));
              objc_msgSend(v25, "appendString:", v31);

              objc_msgSend(v25, "appendString:", CFSTR(".core"));
              v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "path"));
              objc_msgSend(v7, "moveItemAtPath:toPath:error:", v32, v25, 0);

              v54 = 66565;
              v33 = objc_retainAutorelease(v25);
              v50 = fsctl((const char *)objc_msgSend(v33, "cStringUsingEncoding:", 4), 0xC0084A44uLL, &v54, 0);
              v58 = NSFilePosixPermissions;
              v59 = &off_100253AA0;
              v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v59, &v58, 1));
              v53 = v27;
              objc_msgSend(v7, "setAttributes:ofItemAtPath:error:", v34, v33, &v53);
              v17 = v53;

              v35 = objc_autoreleasePoolPush();
              v36 = *v4;
              if (*v4)
              {
                v37 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "path"));
                v48 = v19;
                v38 = v17;
                v39 = v28;
                v40 = v7;
                v41 = v4;
                v42 = v1;
                v43 = (void *)v37;
                objc_msgSend(v36, "WFLog:message:", 3, "%s:process File:'%@' original path:'%@' fsctl ret:%d total_cnt:%lu purge_count:%d", "dextCoreFileProcess", v33, v37, v50, objc_msgSend(v51, "count"), v49);

                v1 = v42;
                v4 = v41;
                v7 = v40;
                v28 = v39;
                v17 = v38;
                v19 = v48;
              }
              objc_autoreleasePoolPop(v35);
              ++v52;

              v18 = v51;
            }
            else
            {
              v57 = v17;
              objc_msgSend(v7, "removeItemAtURL:error:", v19, &v57);
              v20 = v57;

              v21 = objc_autoreleasePoolPush();
              v22 = *v4;
              if (*v4)
              {
                v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "path"));
                objc_msgSend(v22, "WFLog:message:", 3, "%s removeFile path:'%@' error:%@ total_cnt:%lu purge_count:%d", "dextCoreFileProcess", v23, v20, objc_msgSend(v18, "count"), v49);

              }
              objc_autoreleasePoolPop(v21);
              v17 = v20;
            }

            ++v16;
          }
          while (v16 < (int)objc_msgSend(v18, "count"));

          v6 = v46;
          v2 = v47;
          v11 = v44;
          v9 = v45;
          LOWORD(v13) = v52;
        }
      }
      *((_WORD *)v2 + 25) = v13;

    }
  }
}

BOOL sub_100167A20(id a1, id a2, NSDictionary *a3)
{
  void *v3;
  unsigned __int8 v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "lastPathComponent", a3));
  v4 = objc_msgSend(v3, "hasPrefix:", CFSTR("wifi-"));

  return v4;
}

int64_t sub_100167A60(id a1, NSURL *a2, NSURL *a3)
{
  NSURL *v4;
  id v5;
  id v6;
  uint64_t v8;
  id v9;

  v9 = 0;
  v4 = a3;
  -[NSURL getResourceValue:forKey:error:](a2, "getResourceValue:forKey:error:", &v9, NSURLCreationDateKey, 0);
  v8 = 0;
  v5 = v9;
  -[NSURL getResourceValue:forKey:error:](v4, "getResourceValue:forKey:error:", &v8, NSURLCreationDateKey, 0);

  v6 = objc_msgSend(v5, "compare:", v8);
  return (int64_t)v6;
}

BOOL sub_100167AF8(uint64_t a1, char a2)
{
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  BOOL v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  int v20;
  void *v21;
  _BOOL8 v22;
  _QWORD v24[5];
  _QWORD v25[5];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  NSURLResourceKey v30;

  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 0;
  v4 = *(id *)(a1 + 40);
  v5 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: WiFiDextCrashSoftError Enter", "WiFiDextCrashedSoftErrorHandler");
  objc_autoreleasePoolPop(v5);
  if (v4 && (a2 & 1) == 0)
  {
    v6 = objc_msgSend(v4, "incrementCount");
    v7 = objc_msgSend(v4, "submitMetric");
    v8 = objc_msgSend(v4, "submitABCReportWithReason:", 0);
  }
  if ((a2 & 1) != 0)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", *(_QWORD *)a1, 4));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v9));

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v30 = NSURLCreationDateKey;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v30, 1));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v10, v12, 4, 0));

    if (v13)
    {
      v14 = objc_msgSend(v13, "count") == 0;

      if (v14)
        goto LABEL_11;
    }
    else
    {

    }
    v21 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: No Dext corefiles found isRetry:%d", "WiFiDextCrashedSoftErrorHandler", 1);
    goto LABEL_28;
  }
  sub_100167488((uint64_t *)a1);
  if (!*(_WORD *)(a1 + 50))
  {
    v21 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: No Dext corefiles found isRetry:%d", "WiFiDextCrashedSoftErrorHandler", 0);
    goto LABEL_28;
  }
LABEL_11:
  if (!v4)
    goto LABEL_26;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "stringForKey:", CFSTR("DextCrashUserNotification")));
  v17 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 2, "%s WiFiDextCrashSoftError UserNotification setting:%@", "WiFiDextCrashSoftErrorPopupDisabled", v16);
  objc_autoreleasePoolPop(v17);
  if (v16 && !objc_msgSend(v16, "caseInsensitiveCompare:", CFSTR("Disable")))
  {

LABEL_26:
    v21 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: WiFiDextCrashSoftError Disabled", "WiFiDextCrashedSoftErrorHandler");
LABEL_28:
    objc_autoreleasePoolPop(v21);
    v22 = 0;
    goto LABEL_29;
  }

  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_100167F08;
  v25[3] = &unk_100232690;
  v25[4] = &v26;
  if ((objc_msgSend(v4, "askToLaunchTapToRadarWithMessage:completionHandler:", CFSTR("WiFi DriverKit Processs Crash Detected"), v25) & 1) != 0)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("tap-to-radar://new?Title=WiFi%20Dext%20Crash%20Detected&AutoDiagnostics=phone&Description=Dext%20crash%20detected%20Attaching%20coredumps&ComponentID=621547&ComponentName=WiFi%20Connectivity&ComponentVersion=iOS&Classification=Crash/Hang/Data%20Loss&ExtensionIdentifiers=com.apple.DiagnosticExtensions.WiFi")));
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100168000;
    v24[3] = &unk_100232690;
    v24[4] = &v26;
    v19 = objc_msgSend(v4, "tapToRadarWithURL:completionHandler:", v18, v24);
    v20 = *((unsigned __int8 *)v27 + 24);

  }
  else
  {
    v20 = *((unsigned __int8 *)v27 + 24);
  }
  v22 = v20 != 0;
LABEL_29:

  _Block_object_dispose(&v26, 8);
  return v22;
}

void sub_100167EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100167F08(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  v5 = a3;
  v6 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s WiFiDextCrashSoftError askToLaunchTapToRadarWithMessage result:%@, error:%@", "WiFiDextCrashedSoftErrorHandler_block_invoke", v11, v5);
  objc_autoreleasePoolPop(v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userInfo"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", CFSTR("deviceNotInteractive")));

  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userInfo"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("deviceNotInteractive")));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v10, "BOOLValue");

  }
}

void sub_100168000(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  v5 = a3;
  v6 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s WiFiDextCrashSoftError tapToRadarWithURL result:%@, error:%@", "WiFiDextCrashedSoftErrorHandler_block_invoke_2", v11, v5);
  objc_autoreleasePoolPop(v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userInfo"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", CFSTR("deviceNotInteractive")));

  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userInfo"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("deviceNotInteractive")));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v10, "BOOLValue");

  }
}

void sub_1001680F8(id a1)
{
  qword_10026DC18 = objc_alloc_init(WiFi3BarsObserver);
}

void sub_100168238(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016829C;
  block[3] = &unk_10022EEE8;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)qword_10026DD40, block);
}

id sub_10016829C(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: xpc connection got invalidated", "-[WiFi3BarsObserver init]_block_invoke_2");
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 32), "_cleanupMaintenanceTask");
}

void sub_100168300(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100168364;
  block[3] = &unk_10022EEE8;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)qword_10026DD40, block);
}

id sub_100168364(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: xpc connection got interrupted", "-[WiFi3BarsObserver init]_block_invoke_4");
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 32), "_cleanupMaintenanceTask");
}

void sub_100168534(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 24));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = 0;
}

void sub_100168564(uint64_t a1)
{
  double v2;
  void *v3;
  void *v4;
  void *v5;

  -[NSDate timeIntervalSinceDate:](+[NSDate date](NSDate, "date"), "timeIntervalSinceDate:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
  if (v2 >= 120.0)
  {
    v4 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: activity exceeded max time of %d secs", "-[WiFi3BarsObserver _installDeferMonitorForActivity:proxy:]_block_invoke_2", 120);
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 40), "cancelMaintenanceTask");
    objc_msgSend(*(id *)(a1 + 32), "_cleanupMaintenanceTask");
    if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 48), 5))
    {
      v5 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: xpc_activity_set_state to \"Done\" failed", "-[WiFi3BarsObserver _installDeferMonitorForActivity:proxy:]_block_invoke_2");
      objc_autoreleasePoolPop(v5);
    }
  }
  else if (xpc_activity_should_defer(*(xpc_activity_t *)(a1 + 48)))
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: xpc wants to defer activity", "-[WiFi3BarsObserver _installDeferMonitorForActivity:proxy:]_block_invoke_2");
    objc_autoreleasePoolPop(v3);
    if (xpc_activity_set_state(*(xpc_activity_t *)(a1 + 48), 3))
    {
      objc_msgSend(*(id *)(a1 + 40), "cancelMaintenanceTask");
      objc_msgSend(*(id *)(a1 + 32), "_cleanupMaintenanceTask");
    }
  }
}

uint64_t sub_100168874(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: error getting remote object: %@", "-[WiFi3BarsObserver run3BarsObserver:withActivity:withCompletion:]_block_invoke", a2);
  objc_autoreleasePoolPop(v4);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1001688EC(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: finished running maintenance task", "-[WiFi3BarsObserver run3BarsObserver:withActivity:withCompletion:]_block_invoke_2");
  objc_autoreleasePoolPop(v2);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "_cleanupMaintenanceTask");
}

void sub_1001689D8(id a1, NSError *a2)
{
  void *v3;

  v3 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: error getting synchronous remote object: %@", "-[WiFi3BarsObserver fetch3BarsNetworksForLocation:]_block_invoke", a2);
  objc_autoreleasePoolPop(v3);
}

void sub_100168A74(id a1, NSError *a2)
{
  void *v3;

  v3 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: error getting synchronous remote object: %@", "-[WiFi3BarsObserver prune3BarsNetworks:]_block_invoke", a2);
  objc_autoreleasePoolPop(v3);
}

void sub_100168B18(id a1, NSError *a2)
{
  void *v3;

  v3 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: error getting synchronous remote object: %@", "-[WiFi3BarsObserver forceFetch3BarsNetworkMatchingBSSID:completionHandler:]_block_invoke", a2);
  objc_autoreleasePoolPop(v3);
}

uint64_t sub_100168DFC(uint64_t a1)
{
  uint64_t result;

  result = sub_10009C488(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(const __CFString **)(a1 + 40), (char)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "getLocaleSource"), *(_BYTE *)(a1 + 56));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = result;
  return result;
}

void sub_100169014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100169038(_QWORD *a1)
{
  uint64_t result;

  result = sub_10009C6EC(*(_QWORD *)(a1[4] + 8), *(CFMutableStringRef *)(*(_QWORD *)(a1[6] + 8) + 40));
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = result;
  return result;
}

void sub_1001691A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

id sub_1001691C8(_QWORD *a1)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "setSet:", *(_QWORD *)(a1[4] + 24));
  *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = *(_QWORD *)(a1[4] + 32);
  return result;
}

void sub_100169418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10016943C(_QWORD *a1)
{
  uint64_t result;

  result = sub_10009C718(*(_QWORD *)(a1[4] + 8), *(__CFString **)(*(_QWORD *)(a1[6] + 8) + 40));
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = result;
  return result;
}

void sub_10016947C(id a1)
{
  qword_10026DC38 = sub_10001E1C8((uint64_t)"+[WiFiPerfPerAssoc sharedInstance]_block_invoke");
  qword_10026DC30 = -[WiFiPerfPerAssoc _initPrivate]([WiFiPerfPerAssoc alloc], "_initPrivate");
}

void sub_100169904(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

id sub_10016991C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "_handleDisplayStateChange");
}

void sub_100169AD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_100169AEC(uint64_t a1)
{
  double v2;
  WiFiPerfPerAssocSession *v3;
  double v4;
  void *v5;
  id v6;
  const void *v7;
  _QWORD v8[5];

  if (!*(_BYTE *)(a1 + 52))
  {
LABEL_4:
    if (objc_msgSend(*(id *)(a1 + 32), "deviceIsAssociated")
      && objc_msgSend(*(id *)(a1 + 32), "currentSession"))
    {
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
        objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "currentSession"), "ingestCurrentNetwork:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "currentSession"), "setDisAssocReason:", *(unsigned int *)(a1 + 48));
      objc_msgSend(*(id *)(a1 + 32), "_endActiveUsageForSession:", objc_msgSend(*(id *)(a1 + 32), "currentSession"));
      -[NSDate timeIntervalSince1970](+[NSDate date](NSDate, "date"), "timeIntervalSince1970");
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "currentSession"), "setDoNotFinalizePriorToEpoch:", v2 + 20.0);
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "sessionsWaitingForFinalization"), "addObject:", objc_msgSend(*(id *)(a1 + 32), "currentSession"));
      objc_msgSend(*(id *)(a1 + 32), "_stopPollingForInstantaneousScorecards");
      objc_msgSend(*(id *)(a1 + 32), "setDeviceIsAssociated:", 0);
      objc_msgSend(*(id *)(a1 + 32), "setCurrentSession:", 0);
      objc_msgSend(*(id *)(a1 + 32), "finalizeFirstSessionThatRequiresItWhenAppropriate");
    }
    goto LABEL_12;
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "deviceIsAssociated") & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 52))
      goto LABEL_12;
    goto LABEL_4;
  }
  v3 = [WiFiPerfPerAssocSession alloc];
  objc_msgSend(*(id *)(a1 + 32), "setCurrentSession:", -[WiFiPerfPerAssocSession initWithNetworkRecord:managerRef:andManagerQueue:](v3, "initWithNetworkRecord:managerRef:andManagerQueue:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), qword_10026DC40, qword_10026DC48));
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "currentSession"), "setAssocReason:", *(unsigned int *)(a1 + 48));
  -[NSDate timeIntervalSince1970](+[NSDate date](NSDate, "date"), "timeIntervalSince1970");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "currentSession"), "setEpochAtAssoc:", v4);
  objc_msgSend(*(id *)(a1 + 32), "setDeviceIsAssociated:", 1);
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "currentSession"), "ingestCurrentNetwork:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
  objc_msgSend(*(id *)(a1 + 32), "_beginPollingForInstantaenousScorecards");
  if (objc_msgSend(*(id *)(a1 + 32), "deviceUnderActiveUse"))
    objc_msgSend(*(id *)(a1 + 32), "_beginActiveUsageForSession:", objc_msgSend(*(id *)(a1 + 32), "currentSession"));
  v5 = *(void **)(a1 + 32);
  v6 = objc_msgSend(v5, "currentSession");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100169D48;
  v8[3] = &unk_100232560;
  v8[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v5, "_getHistoricalScorecardSession:andReply:", v6, v8);
LABEL_12:
  v7 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_100169D48(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD v5[6];

  v4 = objc_msgSend(*(id *)(a1 + 32), "wifiPPASerialQ");
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100169DB4;
  v5[3] = &unk_10022EB70;
  v5[4] = *(_QWORD *)(a1 + 32);
  v5[5] = a2;
  dispatch_async(v4, v5);
}

id sub_100169DB4(uint64_t a1)
{
  id result;
  BOOL v3;
  void *v4;
  uint64_t state64;

  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "currentSession"), "setHistoricalScorecardAtAssoc:", *(_QWORD *)(a1 + 40));
  state64 = 0;
  result = (id)notify_get_state((int)objc_msgSend(*(id *)(a1 + 32), "displayStateToken"), &state64);
  if ((_DWORD)result)
    v3 = 1;
  else
    v3 = state64 == 0;
  if (!v3)
  {
    v4 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s display on at start of WiFiPerfPerAssocSession, begin tracking active usage", "-[WiFiPerfPerAssoc _associatedStateDidChange:withAssociatedNetworkRecord:withChangeReason:]_block_invoke_3");
    objc_autoreleasePoolPop(v4);
    return objc_msgSend(*(id *)(a1 + 32), "_beginActiveUsageForSession:", objc_msgSend(*(id *)(a1 + 32), "currentSession"));
  }
  return result;
}

void sub_100169F58(uint64_t a1)
{
  id v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  dispatch_time_t v9;
  NSObject *v10;
  _QWORD block[5];

  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "sessionsWaitingForFinalization"), "count"))
  {
    v2 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "sessionsWaitingForFinalization"), "firstObject");
    -[NSDate timeIntervalSince1970](+[NSDate date](NSDate, "date"), "timeIntervalSince1970");
    v4 = v3;
    objc_msgSend(v2, "doNotFinalizePriorToEpoch");
    if (v4 >= v5)
    {
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "sessionsWaitingForFinalization"), "removeObjectAtIndex:", 0);
      objc_msgSend(*(id *)(a1 + 32), "finalizeSession:", v2);
      objc_msgSend(*(id *)(a1 + 32), "finalizeFirstSessionThatRequiresItWhenAppropriate");
    }
    else
    {
      objc_msgSend(v2, "doNotFinalizePriorToEpoch");
      v7 = v6;
      -[NSDate timeIntervalSince1970](+[NSDate date](NSDate, "date"), "timeIntervalSince1970");
      v9 = dispatch_time(0, (uint64_t)((v7 - v8 + 0.25) * 1000000000.0));
      v10 = objc_msgSend(*(id *)(a1 + 32), "utilityConcurrent");
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10016A0D0;
      block[3] = &unk_10022EEE8;
      block[4] = *(_QWORD *)(a1 + 32);
      dispatch_after(v9, v10, block);
    }

  }
  else
  {
    fprintf(__stderrp, "AssertMacros: %s, %s file: %s, line: %d, value: %lld\n", "self.sessionsWaitingForFinalization.count", "", "/Library/Caches/com.apple.xbs/Sources/WiFiManager/WiFiPerfPerAssoc.m", 239, 0);
  }
}

id sub_10016A0D0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finalizeFirstSessionThatRequiresItWhenAppropriate");
}

void sub_10016A240(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10016A258(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;

  objc_msgSend(*(id *)(a1 + 32), "calculateTimes");
  if (a2)
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "finalizeWithEndScorecard:", a2);
    if (v4)
      sub_10005C850(+[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", v4));
  }
  else
  {
    fprintf(__stderrp, "AssertMacros: %s, %s file: %s, line: %d, value: %lld\n", "scoreCard", "", "/Library/Caches/com.apple.xbs/Sources/WiFiManager/WiFiPerfPerAssoc.m", 269, 0);
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Null scorecard", "-[WiFiPerfPerAssoc finalizeSession:]_block_invoke");
    objc_autoreleasePoolPop(v5);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = 0;
}

void sub_10016A420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10016A44C(_QWORD *a1)
{
  void *v2;
  void *v3;
  NSDictionary *v4;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t v7;

  objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "setDeviceUnderActiveUse:", 1);
  if ((objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "activeUseBeingTracked") & 1) != 0
    || (objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "deviceIsAssociated") & 1) == 0)
  {
    fprintf(__stderrp, "AssertMacros: %s, %s file: %s, line: %d, value: %lld\n", "!weakSelf.activeUseBeingTracked && weakSelf.deviceIsAssociated", "", "/Library/Caches/com.apple.xbs/Sources/WiFiManager/WiFiPerfPerAssoc.m", 288, 0);

    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40) = 0;
  }
  else
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "setActiveUseBeingTracked:", 1);
    v2 = objc_autoreleasePoolPush();
    v3 = *(void **)(a1[4] + 56);
    v6 = kSymptomAnalyticsServiceNetworkAttachmentInstant;
    v7 = kSymptomAnalyticsServiceNetworkAttachmentCurrent;
    v4 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10016A5EC;
    v5[3] = &unk_100232690;
    v5[4] = a1[6];
    objc_msgSend(v3, "fullScorecardFor:options:reply:", 1, v4, v5);
    objc_autoreleasePoolPop(v2);
  }
}

void sub_10016A5EC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;

  if (a3)
  {
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s - [NetworkPerformanceFeed fullScorecardFor: options: reply:] failed. Error: %@", "-[WiFiPerfPerAssoc _beginActiveUsageForSession:]_block_invoke_2", a3);
    objc_autoreleasePoolPop(v5);
  }
  else if (a2
         && objc_msgSend(objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("instant")), "allValues"), "objectAtIndex:", 0))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "beginTrackingActiveUsageWithScorecard:", a2);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = 0;
}

void sub_10016A78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10016A7B8(_QWORD *a1)
{
  void *v2;
  void *v3;
  NSDictionary *v4;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t v7;

  if ((objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "deviceUnderActiveUse") & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "setDeviceUnderActiveUse:", 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "setActiveUseBeingTracked:", 0);
    v2 = objc_autoreleasePoolPush();
    v3 = *(void **)(a1[4] + 56);
    v6 = kSymptomAnalyticsServiceNetworkAttachmentInstant;
    v7 = kSymptomAnalyticsServiceNetworkAttachmentCurrent;
    v4 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10016A944;
    v5[3] = &unk_100232690;
    v5[4] = a1[6];
    objc_msgSend(v3, "fullScorecardFor:options:reply:", 1, v4, v5);
    objc_autoreleasePoolPop(v2);
  }
  else
  {
    fprintf(__stderrp, "AssertMacros: %s, %s file: %s, line: %d, value: %lld\n", "weakSelf.deviceUnderActiveUse", "", "/Library/Caches/com.apple.xbs/Sources/WiFiManager/WiFiPerfPerAssoc.m", 317, 0);

    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40) = 0;
  }
}

void sub_10016A944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;

  if (a3)
  {
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s - [NetworkPerformanceFeed fullScorecardFor: options: reply:] failed. Error: %@", "-[WiFiPerfPerAssoc _endActiveUsageForSession:]_block_invoke_2", a3);
    objc_autoreleasePoolPop(v5);
  }
  else
  {
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "accumulateActiveUsageWithScorecard:", a2);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "resetActiveUsageStats");

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = 0;
}

void sub_10016AA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10016AAA8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t state64;

  state64 = 0;
  if (notify_get_state((int)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "displayStateToken"), &state64))
  {
    fprintf(__stderrp, "AssertMacros: %s, %s file: %s, line: %d, value: %lld\n", "notify_get_state(weakSelf.displayStateToken, &currentDisplayState) == NOTIFY_STATUS_OK", "", "/Library/Caches/com.apple.xbs/Sources/WiFiManager/WiFiPerfPerAssoc.m", 347, 0);
    v6 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "notify_get_state() failed trying to determine display state");
    objc_autoreleasePoolPop(v6);
  }
  else
  {
    v2 = state64;
    v3 = *(void **)(a1 + 32);
    v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v5 = objc_msgSend(v3, "currentSession");
    if (v2)
      objc_msgSend(v4, "_beginActiveUsageForSession:", v5);
    else
      objc_msgSend(v4, "_endActiveUsageForSession:", v5);
  }
}

void sub_10016AC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10016AC94(uint64_t a1)
{
  objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "currentSession"), "ingestLQMUpdate:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

}

id sub_10016AE1C(uint64_t a1)
{
  id v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;

  v2 = objc_msgSend(*(id *)(a1 + 32), "currentSession");
  objc_msgSend(*(id *)(a1 + 40), "coordinate");
  v4 = v3;
  objc_msgSend(*(id *)(a1 + 40), "coordinate");
  v6 = v5;
  objc_msgSend(*(id *)(a1 + 40), "horizontalAccuracy");
  return objc_msgSend(v2, "ingestLocationUpdateWithLat:andLon:andAccuracy:", v4, v6, v7);
}

void sub_10016AF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10016AF48(_QWORD *a1)
{
  if (a1[4])
  {
    if (a1[5])
      objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "currentSession"), "ingestScanResults:currentSSID:", a1[4], a1[5]);
    else
      fprintf(__stderrp, "AssertMacros: %s, %s file: %s, line: %d, value: %lld\n", "currentSSID", "", "/Library/Caches/com.apple.xbs/Sources/WiFiManager/WiFiPerfPerAssoc.m", 402, 0);
  }
  else
  {
    fprintf(__stderrp, "AssertMacros: %s, %s file: %s, line: %d, value: %lld\n", "scanCache", "", "/Library/Caches/com.apple.xbs/Sources/WiFiManager/WiFiPerfPerAssoc.m", 401, 0);
  }
  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

id sub_10016B0B8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_pollInstantaenousAndUpdateValues");
  return objc_msgSend(*(id *)(a1 + 32), "_beginPollingForInstantaenousScorecards");
}

void sub_10016B228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10016B240(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "currentSession"), "ingestInstantaneousScorecardFromPolling:", a2);
}

uint64_t sub_10016B3C4(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;

  if (!a2)
  {
    v4 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s didn't get a scorecard for query string: %@", "-[WiFiPerfPerAssoc _getHistoricalScorecardSession:andReply:]_block_invoke", objc_msgSend(*(id *)(a1 + 32), "scorecardIdentifier"));
    objc_autoreleasePoolPop(v4);
  }
  if ((unint64_t)objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("historical")), "count") >= 2)
  {
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s AMBIGUOUS HISTORICAL SCORECARD QUERY (multiple results). THIS IS A CRITICAL ERROR", "-[WiFiPerfPerAssoc _getHistoricalScorecardSession:andReply:]_block_invoke");
    objc_autoreleasePoolPop(v5);
  }
  return (*(uint64_t (**)(_QWORD, id))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), objc_msgSend(objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("historical")), "allValues"), "firstObject"));
}

uint64_t sub_10016B740()
{
  if (qword_10026DC58 != -1)
    dispatch_once(&qword_10026DC58, &stru_100233480);
  return byte_10026DC60;
}

void sub_10016B780(id a1)
{
  void *v1;

  v1 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s WiFiConnectionQuality collection disabled as DNU switch is OFF", "+[WiFiPerfPerAssoc _isCollectionEnabled]_block_invoke");
  objc_autoreleasePoolPop(v1);
}

void sub_10016B98C(id a1)
{
  void *v1;

  if (&_DiagnosticLogSubmissionEnabled)
    byte_10026DC60 = DiagnosticLogSubmissionEnabled(a1);
  v1 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: DiagnosticLogSubmissionEnabled: %d", "_DiagnosticLogSubmissionEnabled_block_invoke", byte_10026DC60);
  objc_autoreleasePoolPop(v1);
}

id sub_10016BA00(_BYTE *a1)
{
  __CFString *v1;
  id result;
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[2];
  _QWORD v7[2];
  const __CFString *v8;
  __CFString *v9;

  if (*a1)
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1);
  else
    v1 = CFSTR("??????");
  result = -[__CFString hasPrefix:](v1, "hasPrefix:", CFSTR("WiFiDebug"));
  if ((result & 1) == 0)
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 2, "Log collection started (event=DumpLogs, reason=%@)", v1);
    objc_autoreleasePoolPop(v3);
    result = objc_alloc_init((Class)sub_10016BB84());
    if (result)
    {
      v4 = result;
      v8 = CFSTR("Reason");
      v9 = v1;
      result = objc_msgSend((id)sub_10016BC4C(), "requestWithItemID:configuration:", 71, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1));
      if (result)
      {
        v6[0] = CFSTR("Reason");
        v6[1] = CFSTR("Compress");
        v7[0] = v1;
        v7[1] = &__kCFBooleanTrue;
        v5 = result;
        return objc_msgSend(v4, "collectLogs:configuration:update:reply:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v5, 1), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 2), 0, &stru_1002334C0);
      }
    }
  }
  return result;
}

uint64_t sub_10016BB84()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = sub_10002FB38;
  v7 = sub_10002FA08;
  v0 = qword_10026DC68;
  v8 = qword_10026DC68;
  if (!qword_10026DC68)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_10016BF64;
    v2[3] = &unk_100230858;
    v2[4] = &v3;
    sub_10016BF64((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_10016BC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10016BC4C()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = sub_10002FB38;
  v7 = sub_10002FA08;
  v0 = qword_10026DC78;
  v8 = qword_10026DC78;
  if (!qword_10026DC78)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_10016C05C;
    v2[3] = &unk_100230858;
    v2[4] = &v3;
    sub_10016C05C((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_10016BCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10016BD14(id a1, NSError *a2, NSArray *a3, NSURL *a4)
{
  void *v6;

  v6 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 2, "Log collection completed (event=DumpLogs error=%ld url=%@)", -[NSError code](a2, "code"), -[NSURL path](a4, "path"));
  objc_autoreleasePoolPop(v6);
}

id sub_10016BD8C(_BYTE *a1)
{
  __CFString *v1;
  id result;
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[2];
  _QWORD v7[2];

  if (*a1)
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1);
  else
    v1 = CFSTR("??????");
  result = -[__CFString hasPrefix:](v1, "hasPrefix:", CFSTR("WiFiDebug"));
  if ((result & 1) == 0)
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 2, "Log collection started (event=DatapathStall, reason=%@)", v1);
    objc_autoreleasePoolPop(v3);
    result = objc_alloc_init((Class)sub_10016BB84());
    if (result)
    {
      v4 = result;
      result = objc_msgSend((id)sub_10016BC4C(), "requestWithItemID:configuration:", 72, 0);
      if (result)
      {
        v6[0] = CFSTR("Reason");
        v6[1] = CFSTR("Compress");
        v7[0] = v1;
        v7[1] = &__kCFBooleanTrue;
        v5 = result;
        return objc_msgSend(v4, "collectLogs:configuration:update:reply:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v5, 1), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 2), 0, &stru_1002334E0);
      }
    }
  }
  return result;
}

void sub_10016BEEC(id a1, NSError *a2, NSArray *a3, NSURL *a4)
{
  void *v6;

  v6 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 2, "Log collection completed (event=DatapathStall, error=%ld url=%@)", -[NSError code](a2, "code"), -[NSURL path](a4, "path"));
  objc_autoreleasePoolPop(v6);
}

Class sub_10016BF64(uint64_t a1)
{
  Class result;

  sub_10016BFB8();
  result = objc_getClass("W5Client");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_10018792C();
  qword_10026DC68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void sub_10016BFB8()
{
  void *v0;
  __int128 v1;
  uint64_t v2;

  v0 = 0;
  if (!qword_10026DC70)
  {
    v1 = off_100233500;
    v2 = 0;
    qword_10026DC70 = _sl_dlopen(&v1, &v0);
  }
  if (!qword_10026DC70)
    sub_100187990(&v0);
  if (v0)
    free(v0);
}

Class sub_10016C05C(uint64_t a1)
{
  Class result;

  sub_10016BFB8();
  result = objc_getClass("W5LogItemRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_1001879F4();
  qword_10026DC78 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void sub_10016C834(id a1)
{
  id v1;
  void *v2;

  v1 = -[WiFiUserInteractionMonitor _initPrivate]([WiFiUserInteractionMonitor alloc], "_initPrivate");
  v2 = (void *)qword_10026DC80;
  qword_10026DC80 = (uint64_t)v1;

}

void sub_10016CE7C(id a1, void *a2, unint64_t a3)
{
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "clients", 0));
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
        v10 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "callback"));
        ((void (**)(_QWORD, id, unint64_t))v10)[2](v10, objc_msgSend(v9, "context"), a3);

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }

}

void sub_10016CFA0(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;

  v2 = objc_alloc_init((Class)CXCallObserver);
  objc_msgSend(*(id *)(a1 + 32), "setCallObserver:", v2);

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "callObserver"));
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "internalQueue"));
  objc_msgSend(v5, "setDelegate:queue:", v3, v4);

}

void sub_10016D020(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void (**v11)(_QWORD, _QWORD, _QWORD);
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t state64;
  _BYTE v17[128];

  state64 = 0;
  if (notify_get_state(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 48), &state64))
    return;
  v2 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: received com.apple.system.console_mode_changed (%llu)", "-[WiFiUserInteractionMonitor _initPrivate]_block_invoke_3", state64);
  objc_autoreleasePoolPop(v2);
  v3 = state64;
  if (state64 != 1)
    goto LABEL_7;
  if (objc_msgSend(*(id *)(a1 + 32), "isInGameMode"))
  {
    v3 = state64;
LABEL_7:
    if (v3 || !objc_msgSend(*(id *)(a1 + 32), "isInGameMode"))
      return;
    v4 = 0;
    goto LABEL_11;
  }
  v4 = 1;
LABEL_11:
  objc_msgSend(*(id *)(a1 + 32), "setIsInGameMode:", v4);
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clients"));
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        v11 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "callback"));
        ((void (**)(_QWORD, id, uint64_t))v11)[2](v11, objc_msgSend(v10, "context"), 16);

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
    }
    while (v7);
  }

}

void sub_10016E408(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v2 = objc_msgSend(objc_alloc((Class)LSApplicationRecord), "initWithBundleIdentifier:allowPlaceholder:error:", *(_QWORD *)(a1 + 32), 0, 0);
  v3 = v2;
  if (v2)
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "infoDictionary"));
    v5 = objc_msgSend(v4, "objectForKey:ofClass:", CFSTR("UIBackgroundModes"), objc_opt_class(NSArray));
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v16;
      while (2)
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v16 != v9)
            objc_enumerationMutation(v6);
          if (objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i), "isEqualToString:", CFSTR("voip")))
          {
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
            v11 = objc_autoreleasePoolPush();
            if (qword_10026DD20)
              objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: detected %@ as VOIP app", "-[WiFiUserInteractionMonitor hasRealTimeAppProperty:]_block_invoke", *(_QWORD *)(a1 + 32));
            objc_autoreleasePoolPop(v11);
            goto LABEL_14;
          }
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        if (v8)
          continue;
        break;
      }
    }
LABEL_14:

  }
  v12 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24)));
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v12;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_10016F948(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  _QWORD block[7];

  objc_msgSend(*(id *)(a1 + 32), "updateConnectionState:waitUntilDone:", objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "idsService"), "devices"), 1);
  v4 = objc_msgSend(*(id *)(a1 + 32), "copyPairedDestinationID");
  v2 = objc_msgSend(*(id *)(a1 + 32), "getPairedVersionID");
  if (v4)
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "managerQueue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10016FA0C;
    block[3] = &unk_100232518;
    block[4] = *(_QWORD *)(a1 + 32);
    block[5] = v4;
    block[6] = v2;
    dispatch_sync(v3, block);

  }
}

id sub_10016FA0C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updatePairedDeviceID:versionID:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_10016FA1C(uint64_t a1)
{
  void *v2;
  void *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;

  v2 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: knownNetworkStartPoint = %lu, knownNetworkList count= %lu, newReceivedNetworkRecords count = %lu", "__WiFiProcessKnownNetworkTimerCallback", *(_QWORD *)(a1 + 280), objc_msgSend(*(id *)(a1 + 264), "count"), objc_msgSend(*(id *)(a1 + 272), "count"));
  objc_autoreleasePoolPop(v2);
  if (*(_QWORD *)(a1 + 272))
  {

    *(_QWORD *)(a1 + 264) = objc_msgSend(objc_alloc((Class)NSArray), "initWithArray:copyItems:", *(_QWORD *)(a1 + 272), 1);
    *(_QWORD *)(a1 + 272) = 0;
  }
  v3 = *(void **)(a1 + 264);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 280);
    if (v4 >= (unint64_t)objc_msgSend(v3, "count"))
    {
      v9 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: KnownNetworkList has been processed", "__WiFiProcessKnownNetworkTimerCallback");
      objc_autoreleasePoolPop(v9);
      dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 256), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);

      *(_QWORD *)(a1 + 264) = 0;
      *(_QWORD *)(a1 + 280) = 0;
    }
    else
    {
      v5 = (char *)objc_msgSend(*(id *)(a1 + 264), "count");
      v6 = *(_QWORD *)(a1 + 280);
      if ((unint64_t)&v5[-v6] >= 0xA)
        v7 = 10;
      else
        v7 = (uint64_t)&v5[-v6];
      v8 = objc_msgSend(*(id *)(a1 + 264), "subarrayWithRange:");
      *(_QWORD *)(a1 + 280) += v7;
      objc_msgSend((id)a1, "processReceivedKnownNetworksInBatch:", v8);
    }
  }
}

void sub_10016FEB4(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  _QWORD block[5];

  v2 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: devicePairedNanoregistryNotification from nanoregistry", "-[WiFiIDSSyncEngine registerForInitialSyncTrigger]_block_invoke");
  objc_autoreleasePoolPop(v2);
  notify_cancel(*(_DWORD *)(a1 + 40));
  v3 = objc_msgSend(*(id *)(a1 + 32), "managerQueue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016FF60;
  block[3] = &unk_10022EEE8;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_sync(v3, block);
}

id sub_10016FF60(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "knownNetworksListChanged");
}

id sub_10016FFE0(uint64_t a1)
{
  NSNotificationCenter *v2;

  v2 = +[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter");
  -[NSNotificationCenter addObserver:selector:name:object:](v2, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "enteredCompatibilityState:", NRPairedDeviceRegistryDeviceDidEnterCompatibilityStateNotification, 0);
  return objc_msgSend(*(id *)(a1 + 32), "checkIfSoftwareUpdateStateEntered:", -[NRPairedDeviceRegistry compatibilityState](+[NRPairedDeviceRegistry sharedInstance](NRPairedDeviceRegistry, "sharedInstance"), "compatibilityState"));
}

id sub_100170188(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "knownNetworksListChanged");
}

id sub_100170498(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "processReceivedKnownNetworks:", *(_QWORD *)(a1 + 40));
}

id sub_1001704A4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "processReceivedKnownNetwork:", objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("V2")));
}

id sub_1001704D4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "processReceivedAutoJoinAssist:", *(_QWORD *)(a1 + 40));
}

id sub_1001704E0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "processReceivedLocaleString:", *(_QWORD *)(a1 + 40));
}

id sub_100170884(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "reSendIdsMessage:", *(_QWORD *)(a1 + 40));
}

id sub_100170EDC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "notifyStateChanged");
}

id sub_100170EE4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "notifyStateChanged");
}

id sub_10017115C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updatePairedDeviceID:versionID:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_100171334(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "notifyStateChanged");
}

id sub_1001718C4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "sendToGizmoOfDataType:", *(_QWORD *)(a1 + 40));
}

void sub_1001718D0(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  objc_msgSend(*(id *)(a1 + 32), "sendCurrentCompanionNetworkWithChannelUpdate:", 0);
  objc_autoreleasePoolPop(v2);
}

void sub_100172598(void *a1, const void *a2)
{
  id v4;
  id v5;
  void *v6;
  void *v7;

  v4 = objc_msgSend(a1, "objectForKey:", CFSTR("NetworkAtLocationOfInterestType"));
  v5 = objc_msgSend(a1, "objectForKey:", CFSTR("NetworkOfInterestHomeState"));
  if (v4)
  {
    sub_10002C478((uint64_t)a2, CFSTR("NetworkAtLocationOfInterestType"), v4);
    v6 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: WFMacRandomisation : received LOI for network : <%@>", "__WiFiIDSSyncPopulateHomeProperty", sub_10002B088(a2));
    objc_autoreleasePoolPop(v6);
  }
  if (v5)
  {
    sub_10002C478((uint64_t)a2, CFSTR("NetworkOfInterestHomeState"), v5);
    v7 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: WFMacRandomisation : received NOI for network : <%@>", "__WiFiIDSSyncPopulateHomeProperty", sub_10002B088(a2));
    objc_autoreleasePoolPop(v7);
  }
}

void sub_10017379C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_1001737D0(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;

  if (objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("IS_NETWORK_CAPTIVE")))
  {
    v2 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithObjectsAndKeys:", +[NSNull null](NSNull, "null"), CFSTR("V2"), 0);
    v3 = objc_alloc_init((Class)NSMutableDictionary);
    v4 = v3;
    v5 = *(int *)(a1 + 56);
    if (v5 <= 2)
    {
      objc_msgSend(v3, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), off_100233670[v5]);
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, CFSTR("V2"));
    }
    NSLog(CFSTR("%s %@"), "-[WiFiIDSSyncEngine syncKnownWiFiNetwork:withOperation:]_block_invoke", v2);
    objc_msgSend(*(id *)(a1 + 40), "setLastSyncedKnownNetworkPayloadData:", +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v2, 1, 0));
    objc_msgSend(*(id *)(a1 + 40), "sendToGizmoOfDataType:", 3);

  }
  else
  {
    v6 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: captive determination is not present for %@ , not syncing the network to gizmo yet!!", "-[WiFiIDSSyncEngine syncKnownWiFiNetwork:withOperation:]_block_invoke", objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("SSID_STR")));
    objc_autoreleasePoolPop(v6);
  }
}

void sub_1001739A8(uint64_t a1)
{
  void *v2;
  id *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  unint64_t j;
  id v13;
  void *v14;
  void *v15;
  id *v16;
  CFStringRef v17;
  id v18;
  const void *v19;
  void *v20;
  id v21;
  const void *v22;
  void *v23;
  unsigned int v24;
  void *v25;
  void *v26;
  NSObject *v27;
  char v28;
  void *context;
  id v30;
  uint64_t v31;
  _QWORD block[7];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _QWORD v37[5];
  uint64_t v38;
  _BYTE v39[128];

  context = objc_autoreleasePoolPush();
  v2 = objc_autoreleasePoolPush();
  v3 = (id *)&qword_10026DD20;
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: role %ld, destinationID %@", "-[WiFiIDSSyncEngine syncKnownWiFiNetworks:]_block_invoke", objc_msgSend(*(id *)(a1 + 32), "role"), objc_msgSend(*(id *)(a1 + 32), "pairedDeviceDestinationID"));
  objc_autoreleasePoolPop(v2);
  if (objc_msgSend(*(id *)(a1 + 32), "role"))
  {
    if (!objc_msgSend(*(id *)(a1 + 32), "pairedDeviceDestinationID"))
    {
      objc_msgSend(*(id *)(a1 + 32), "setIsWaitingForIdsMessageDelivery:", 1);
      goto LABEL_47;
    }
    v31 = a1;
    v37[0] = 0;
    v37[1] = v37;
    v37[2] = 0x3052000000;
    v37[3] = sub_10002FB58;
    v37[4] = sub_10002FA1C;
    v38 = 0xAAAAAAAAAAAAAAAALL;
    v38 = sub_10001E1C8((uint64_t)"-[WiFiIDSSyncEngine syncKnownWiFiNetworks:]_block_invoke");
    v4 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
    v5 = (void *)sub_1000D94B8();
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v33, v39, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v34;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v34 != v7)
            objc_enumerationMutation(v5);
          objc_msgSend(v4, "setObject:forKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)i), objc_msgSend(*(id *)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)i), "objectForKeyedSubscript:", kSecAttrAccount));
        }
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v33, v39, 16);
      }
      while (v6);
    }
    v30 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 0);
    v9 = (void *)sub_10008674C((uint64_t)objc_msgSend(*(id *)(a1 + 32), "manager"));
    v10 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: plist network count %lu", "-[WiFiIDSSyncEngine syncKnownWiFiNetworks:]_block_invoke", objc_msgSend(v9, "count"));
    objc_autoreleasePoolPop(v10);
    v11 = 0;
    v28 = 0;
    for (j = 0; ; ++j)
    {
      if (j >= (unint64_t)objc_msgSend(v9, "count"))
      {
        if ((v28 & 1) != 0)
        {
          v24 = sub_100095610((uint64_t)objc_msgSend(*(id *)(v31 + 32), "manager"), (const __CFArray *)v9);
          v25 = objc_autoreleasePoolPush();
          if (*v3)
            objc_msgSend(*v3, "WFLog:message:", 3, "%s: modDates have been added to network, changes written to plist: %d", "-[WiFiIDSSyncEngine syncKnownWiFiNetworks:]_block_invoke", v24);
          objc_autoreleasePoolPop(v25);
        }
        v26 = objc_autoreleasePoolPush();
        if (*v3)
          objc_msgSend(*v3, "WFLog:message:", 3, "%s: ids sync %lu networks", "-[WiFiIDSSyncEngine syncKnownWiFiNetworks:]_block_invoke", objc_msgSend(v30, "count"));
        objc_autoreleasePoolPop(v26);
        v27 = objc_msgSend(*(id *)(v31 + 32), "serialIdsDispatchQ");
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100173FCC;
        block[3] = &unk_1002323E0;
        block[4] = *(_QWORD *)(v31 + 32);
        block[5] = v30;
        block[6] = v37;
        dispatch_async(v27, block);

        _Block_object_dispose(v37, 8);
        break;
      }
      v13 = objc_msgSend(v9, "objectAtIndex:", j);
      if (objc_msgSend(*(id *)(v31 + 32), "skipSyncForNetwork:", v13))
      {
        v14 = objc_autoreleasePoolPush();
        if (*v3)
          objc_msgSend(*v3, "WFLog:message:", 3, "%s: Skipping sync for network: <%@>", "-[WiFiIDSSyncEngine syncKnownWiFiNetworks:]_block_invoke", sub_10002B088(v13));
        objc_autoreleasePoolPop(v14);
      }
      else
      {

        v15 = sub_100177254(v13, (uint64_t)objc_msgSend(*(id *)(v31 + 32), "manager"));
        v11 = v15;
        if (v15 && sub_1001788C0(v15))
        {
          v16 = v3;
          if (sub_100178BEC(v11))
          {
            v17 = sub_1000C37A0((CFDictionaryRef *)v13);
            if (v17)
            {
              objc_msgSend(v11, "setObject:forKey:", v17, CFSTR("WiFiNetworkPasswordString"));
              if (!sub_1000CA3FC((uint64_t)v13))
              {
                v18 = objc_msgSend(objc_msgSend(v4, "objectForKeyedSubscript:", sub_10002B088(v13)), "objectForKeyedSubscript:", kSecAttrModificationDate);
                sub_1000CA2C0(v13, v18);
                sub_100094200((uint64_t)objc_msgSend(*(id *)(v31 + 32), "manager"), (CFDictionaryRef *)v13, 0);
                v28 = 1;
              }
              goto LABEL_27;
            }
          }
          else
          {
            v17 = 0;
LABEL_27:
            v19 = sub_10002BE64((uint64_t)v13, CFSTR("NetworkOfInterestHomeState"));
            if (v19)
            {
              objc_msgSend(v11, "setObject:forKey:", v19, CFSTR("NetworkOfInterestHomeState"));
              v20 = objc_autoreleasePoolPush();
              v21 = *v3;
              if (*v16)
                objc_msgSend(v21, "WFLog:message:", 3, "%s: WFMacRandomisation : syncing NOI for network : <%@>", "-[WiFiIDSSyncEngine syncKnownWiFiNetworks:]_block_invoke", sub_10002B088(v13));
              objc_autoreleasePoolPop(v20);
            }
            v22 = sub_10002BE64((uint64_t)v13, CFSTR("NetworkAtLocationOfInterestType"));
            if (v22)
            {
              objc_msgSend(v11, "setObject:forKey:", v22, CFSTR("NetworkAtLocationOfInterestType"));
              v23 = objc_autoreleasePoolPush();
              if (*v16)
                objc_msgSend(*v16, "WFLog:message:", 3, "%s: WFMacRandomisation : syncing LOI for network : <%@>", "-[WiFiIDSSyncEngine syncKnownWiFiNetworks:]_block_invoke", sub_10002B088(v13));
              objc_autoreleasePoolPop(v23);
            }
            objc_msgSend(v30, "addObject:", v11);
            if (v17)
            {
              CFRelease(v17);
              v3 = v16;
              continue;
            }
          }
          v3 = v16;
          continue;
        }
      }
    }
  }
LABEL_47:
  objc_autoreleasePoolPop(context);
}

void sub_100173F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_100173FCC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setLastSyncedKnownNetworksData:", +[NSKeyedArchiver archivedDataWithRootObject:](NSKeyedArchiver, "archivedDataWithRootObject:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(*(id *)(a1 + 32), "sendToGizmoOfDataType:", 0);

}

void sub_1001744D0(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  _QWORD block[5];

  v2 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: keychainChangedNotification from securityd", "-[WiFiIDSSyncEngine subscribeToKeychainChanges]_block_invoke");
  objc_autoreleasePoolPop(v2);
  v3 = objc_msgSend(*(id *)(a1 + 32), "managerQueue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100174574;
  block[3] = &unk_10022EEE8;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(v3, block);
}

id sub_100174574(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "checkForWiFiPasswordChange");
}

void sub_10017457C(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  _QWORD block[5];

  v2 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: kWiFiNotificationWiFiPasswordChanged from wifid", "-[WiFiIDSSyncEngine subscribeToKeychainChanges]_block_invoke_3");
  objc_autoreleasePoolPop(v2);
  v3 = objc_msgSend(*(id *)(a1 + 32), "managerQueue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100174620;
  block[3] = &unk_10022EEE8;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(v3, block);
}

id sub_100174620(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "knownNetworksListChanged");
}

void sub_10017491C(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  objc_msgSend(*(id *)(a1 + 32), "sendCurrentCompanionNetworkWithChannelUpdate:", 0);
  objc_autoreleasePoolPop(v2);
}

void sub_100174D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100174D98(uint64_t a1)
{
  NSData *v2;
  void *v3;

  if (!objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "objectForKey:", CFSTR("SSID_STR")))
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 4, "%s: ssid is not present for current network , not syncing the network to gizmo !!", "-[WiFiIDSSyncEngine sendCurrentCompanionNetworkWithChannelUpdate:]_block_invoke");
    goto LABEL_10;
  }
  v2 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), 1, 0);
  if (v2
    && objc_msgSend(*(id *)(a1 + 32), "lastSyncedKnownNetworksData")
    && objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "lastSyncedKnownNetworksData"), "isEqual:", v2))
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: no new assisted autojoin data. Not sending.", "-[WiFiIDSSyncEngine sendCurrentCompanionNetworkWithChannelUpdate:]_block_invoke");
LABEL_10:
    objc_autoreleasePoolPop(v3);
    goto LABEL_11;
  }
  objc_msgSend(*(id *)(a1 + 32), "setLastSyncedCompanionAssistedAutoJoinData:", v2);
  objc_msgSend(*(id *)(a1 + 32), "sendToGizmoOfDataType:", 1);
LABEL_11:

}

void sub_100174EB8(uint64_t a1)
{
  NSData *v2;
  void *v3;

  v2 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), 1, 0);
  if (v2
    && objc_msgSend(*(id *)(a1 + 32), "lastSyncedKnownNetworksData")
    && objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "lastSyncedKnownNetworksData"), "isEqual:", v2))
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: no new assisted autojoin data. Not sending.", "-[WiFiIDSSyncEngine sendCurrentCompanionNetworkWithChannelUpdate:]_block_invoke_2");
    objc_autoreleasePoolPop(v3);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setLastSyncedCompanionAssistedAutoJoinData:", v2);
    objc_msgSend(*(id *)(a1 + 32), "sendToGizmoOfDataType:", 1);
  }

}

id sub_100175058(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setLastSyncedCompanionLocaleData:", +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 208), 1, 0));
  return objc_msgSend(*(id *)(a1 + 32), "sendToGizmoOfDataType:", 2);
}

void sub_1001769E0(void *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;

  v6 = objc_autoreleasePoolPush();
  if (a1)
  {
    objc_msgSend(a1, "setStateChangeCallback:", a2);
    objc_msgSend(a1, "setStateChangeContext:", a3);
  }
  else
  {
    v7 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null wifiIDSSyncEngine", "WiFiIDSSyncEngineRegisterStateChangeCallback");
    objc_autoreleasePoolPop(v7);
  }
  objc_autoreleasePoolPop(v6);
}

WiFiIDSSyncEngine *sub_100176A7C(uint64_t a1, uint64_t a2)
{
  void *v4;
  WiFiIDSSyncEngine *v5;

  v4 = objc_autoreleasePoolPush();
  if (objc_opt_class(IDSService))
  {
    v5 = objc_alloc_init(WiFiIDSSyncEngine);
    -[WiFiIDSSyncEngine initializeWithWiFiManager:queue:](v5, "initializeWithWiFiManager:queue:", a1, a2);
  }
  else
  {
    v5 = 0;
  }
  objc_autoreleasePoolPop(v4);
  return v5;
}

void sub_100176AEC(void *a1)
{
  void *v2;
  void *v3;

  v2 = objc_autoreleasePoolPush();
  if (a1)
  {
    objc_msgSend(a1, "keychainAccessibleNow");
  }
  else
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null wifiIDSSyncEngine", "WiFiIDSSyncEngineNotifyKeychainAccessibleNow");
    objc_autoreleasePoolPop(v3);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_100176B68(void *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  float v7;
  void *v8;

  v6 = objc_autoreleasePoolPush();
  if (a1)
  {
    if (objc_msgSend(a1, "role") && objc_msgSend(a1, "isKeychainUnlocked"))
    {
      objc_msgSend(objc_msgSend(a1, "pairedDeviceVersionID"), "floatValue");
      if (v7 >= 10.0)
        objc_msgSend(a1, "syncKnownWiFiNetwork:withOperation:", a2, a3);
      else
        objc_msgSend(a1, "knownNetworksListChanged");
    }
  }
  else
  {
    v8 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null wifiIDSSyncEngine", "WiFiIDSSyncEngineNotifyKnownNetworksChanged");
    objc_autoreleasePoolPop(v8);
  }
  objc_autoreleasePoolPop(v6);
}

void sub_100176C34(void *a1, const void *a2)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = objc_autoreleasePoolPush();
  if (!a1)
  {
    v8 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null wifiIDSSyncEngine", "WiFiIDSSyncEngineNotifyCurrentNetworkChange");
    v7 = v8;
    goto LABEL_16;
  }
  v5 = objc_msgSend(a1, "currentNetwork");
  if (a2 && v5 && CFEqual(objc_msgSend(a1, "currentNetwork"), a2))
  {
    v6 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: same network (%@), not notifying network change.", "WiFiIDSSyncEngineNotifyCurrentNetworkChange", sub_10002B088(a2));
    v7 = v6;
LABEL_16:
    objc_autoreleasePoolPop(v7);
    goto LABEL_17;
  }
  if (objc_msgSend(a1, "currentNetwork"))
  {
    CFRelease(objc_msgSend(a1, "currentNetwork"));
    objc_msgSend(a1, "setCurrentNetwork:", 0);
  }
  objc_msgSend(a1, "setCurrentNetwork:", a2);
  if (a2)
    CFRetain(objc_msgSend(a1, "currentNetwork"));
  objc_msgSend(a1, "currentNetworkChanged");
LABEL_17:
  objc_autoreleasePoolPop(v4);
}

void sub_100176D68(void *a1)
{
  void *v2;
  void *v3;

  v2 = objc_autoreleasePoolPush();
  if (a1)
  {
    objc_msgSend(a1, "currentNetworkChannelChanged");
  }
  else
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null wifiIDSSyncEngine", "WiFiIDSSyncEngineNotifyCurrentChannelChange");
    objc_autoreleasePoolPop(v3);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_100176DE4(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = objc_autoreleasePoolPush();
  if (a1)
  {
    objc_msgSend(a1, "networkRemoved:", a2);
  }
  else
  {
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null wifiIDSSyncEngine", "WiFiIDSSyncEngineNetworkRemoved");
    objc_autoreleasePoolPop(v5);
  }
  objc_autoreleasePoolPop(v4);
}

void sub_100176E70(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = objc_autoreleasePoolPush();
  if (a1)
  {
    objc_msgSend(a1, "sendLocaleToGizmo:", a2);
  }
  else
  {
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null wifiIDSSyncEngine", "WiFiIDSSyncEngineNotifyLocaleChange");
    objc_autoreleasePoolPop(v5);
  }
  objc_autoreleasePoolPop(v4);
}

void sub_100176EFC(void *a1)
{
  void *v2;
  void *v3;

  v2 = objc_autoreleasePoolPush();
  if (a1)
  {

  }
  else
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null wifiIDSSyncEngine", "WiFiIDSSyncEngineRelease");
    objc_autoreleasePoolPop(v3);
  }
  objc_autoreleasePoolPop(v2);
}

id sub_100176F74(void *a1, uint64_t a2)
{
  void *v4;
  id v5;
  void *v6;

  v4 = objc_autoreleasePoolPush();
  if (a1)
  {
    v5 = objc_msgSend(a1, "canAttemptAssociationBasedOnBssidGuessingForScannedNetwork:", a2);
  }
  else
  {
    v6 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null wifiIDSSyncEngine", "WiFiIDSSyncEngineCanAttemptAssociationBasedOnBssidGuessing");
    objc_autoreleasePoolPop(v6);
    v5 = 0;
  }
  objc_autoreleasePoolPop(v4);
  return v5;
}

void sub_100177010(void *a1, uint64_t a2)
{
  void *v4;
  const __CFNumber *v5;
  void *v6;
  uint64_t v7;
  float valuePtr;

  v4 = objc_autoreleasePoolPush();
  if (!a1)
  {
    v6 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null wifiIDSSyncEngine", "WiFiIDSSyncEngineSignalGuessingFailed", v7);
    goto LABEL_9;
  }
  v5 = (const __CFNumber *)sub_10002BE64(a2, CFSTR("RSSI"));
  if (v5)
  {
    valuePtr = 0.0;
    CFNumberGetValue(v5, kCFNumberFloatType, &valuePtr);
    if (valuePtr < -75.0)
    {
      v6 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: ignoring this failure due to poor rssi %f", "WiFiIDSSyncEngineSignalGuessingFailed", valuePtr);
LABEL_9:
      objc_autoreleasePoolPop(v6);
      goto LABEL_10;
    }
  }
  objc_msgSend(a1, "incrementGuessingFailedCountForScannedNetworkWithBssid:", sub_10002BE64(a2, CFSTR("BSSID")));
LABEL_10:
  objc_autoreleasePoolPop(v4);
}

void sub_100177124(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = objc_autoreleasePoolPush();
  if (a1)
  {
    objc_msgSend(a1, "addToKnownNetworkGuessingDictionaryTheNetwork:", a2);
  }
  else
  {
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null wifiIDSSyncEngine", "WiFiIDSSyncEngineSignalGuessingSucceeded");
    objc_autoreleasePoolPop(v5);
  }
  objc_autoreleasePoolPop(v4);
}

void sub_1001771B0(void *a1)
{
  void *v2;
  void *v3;

  v2 = objc_autoreleasePoolPush();
  if (objc_msgSend(a1, "receivedKnownNetworks") && sub_1000A4BC4((uint64_t)objc_msgSend(a1, "manager")))
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: apply receivedKnownNetworks", "WiFiIDSSyncReapplyLastSyncKnownNetworks");
    objc_autoreleasePoolPop(v3);
    objc_msgSend(a1, "processReceivedKnownNetworks:", objc_msgSend(a1, "receivedKnownNetworks"));
  }
  objc_autoreleasePoolPop(v2);
}

void *sub_100177254(void *a1, uint64_t a2)
{
  void *v4;
  NSNumber *v5;
  NSNumber *v6;
  NSNumber *v7;
  uint64_t v8;
  id v9;
  void *v10;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  const void *Value;
  const void *v14;
  const __CFArray *v15;
  const __CFArray *v16;
  const void *v17;
  const __CFBoolean *v18;
  NSNumber *v19;
  const __CFBoolean *v20;
  int v21;
  NSNumber *v22;
  _BOOL4 v23;
  const __CFString *v24;
  const void *v25;
  NSNumber *v26;
  NSNumber *v27;
  void *v28;
  unsigned int v29;
  int v30;
  const void *v31;
  const void *v32;
  const __CFString *v33;
  void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  CFTypeID TypeID;
  const void *v39;
  void *v40;
  _WORD *v41;
  const __CFDictionary *v42;
  const void *v43;
  void *v44;
  NSNumber *v45;
  NSNumber *v46;
  NSNumber *v47;
  const __CFDictionary *v48;
  const __CFDictionary *Copy;
  const __CFDictionary *v50;
  int v51;
  NSNumber *v52;
  NSNumber *v53;
  _BOOL4 v54;
  const __CFString *v55;
  void *v56;
  NSNumber *v57;
  NSNumber *v58;
  const __CFArray *v59;
  const __CFArray *v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  NSString *v78;
  void *v79;
  void *v80;
  NSNumber *v81;
  NSNumber *v82;
  const void *v83;
  NSNumber *v84;
  const void *v85;
  NSNumber *v86;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  id v93;
  id v94;
  id v95;
  NSString *v96;
  id v97;
  NSString *v98;
  void *contexta;
  NSString *context;
  void *v101;
  int v102;

  v4 = objc_autoreleasePoolPush();
  v5 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1);
  v6 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 0);
  if (!a1)
  {
    v88 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null networkRef ", "WiFiNetworkSyncHelperCreateSyncableNetworkRecord");
    goto LABEL_110;
  }
  if (!a2)
  {
    v88 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null manager", "WiFiNetworkSyncHelperCreateSyncableNetworkRecord");
    goto LABEL_110;
  }
  v7 = v6;
  v8 = sub_1000C312C();
  if (v8 != CFGetTypeID(a1))
  {
    v88 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: network object passed in is not WiFiNetwork type", "WiFiNetworkSyncHelperCreateSyncableNetworkRecord");
    goto LABEL_110;
  }
  v9 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 7);
  if (!v9)
  {
    v88 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null cloudNetwork", "WiFiNetworkSyncHelperCreateSyncableNetworkRecord");
LABEL_110:
    objc_autoreleasePoolPop(v88);
    v10 = 0;
    goto LABEL_101;
  }
  v10 = v9;
  v11 = sub_1000173C0((uint64_t)a1);
  if (v11)
  {
    v12 = v11;
    Value = CFDictionaryGetValue(v11, CFSTR("SSID_STR"));
    if (!Value)
    {
      v90 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null ssid... abort", "WiFiNetworkSyncHelperCreateSyncableNetworkRecord");
      objc_autoreleasePoolPop(v90);
      goto LABEL_100;
    }
    v14 = Value;
    v101 = v4;
    objc_msgSend(v10, "setObject:forKey:", Value, CFSTR("SSID_STR"));
    v15 = sub_10001F1E8((const __CFArray *)a1);
    v16 = v15;
    if (v15 && -[__CFArray length](v15, "length"))
      objc_msgSend(v10, "setObject:forKey:", v16, CFSTR("BSSID"));
    v17 = CFDictionaryGetValue(v12, CFSTR("AP_MODE"));
    if (!v17)
    {
      v91 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: error - null apMode", "WiFiNetworkSyncHelperCreateSyncableNetworkRecord");
      objc_autoreleasePoolPop(v91);
      v4 = v101;
      goto LABEL_100;
    }
    objc_msgSend(v10, "setObject:forKey:", v17, CFSTR("AP_MODE"));
    v18 = (const __CFBoolean *)CFDictionaryGetValue(v12, CFSTR("UserDirected"));
    v19 = v7;
    if (v18)
    {
      if (CFBooleanGetValue(v18))
        v19 = v5;
      else
        v19 = v7;
    }
    objc_msgSend(v10, "setObject:forKey:", v19, CFSTR("UserDirected"));
    v20 = (const __CFBoolean *)CFDictionaryGetValue(v12, CFSTR("enabled"));
    if (!v20 || (v21 = CFBooleanGetValue(v20), v22 = v7, v21))
      v22 = v5;
    objc_msgSend(v10, "setObject:forKey:", v22, CFSTR("enabled"));
    v23 = sub_1000C3B8C((_BOOL8)a1);
    v24 = CFSTR("WEP");
    if (v23)
    {
      objc_msgSend(v10, "setObject:forKey:", v5, CFSTR("WEP"));
      v25 = CFDictionaryGetValue(v12, CFSTR("WEPType"));
      if (v25)
        objc_msgSend(v10, "setObject:forKey:", v25, CFSTR("WEPType"));
      v26 = (NSNumber *)CFDictionaryGetValue(v12, CFSTR("WEP_AUTH_Flags"));
      if (!v26)
      {
LABEL_25:
        v29 = sub_1000C433C((const __CFDictionary *)a1);
        v30 = sub_10003145C((uint64_t)a1);
        if (v29)
        {
          if (v30)
          {
            if (sub_1000C5114((const __CFDictionary *)a1))
            {
              v31 = CFDictionaryGetValue(v12, CFSTR("RSN_IE"));
              if (!v31)
                goto LABEL_50;
              v32 = v31;
              v33 = CFSTR("RSN_IE");
              v34 = v10;
              goto LABEL_36;
            }
            if (sub_10002BE64((uint64_t)a1, CFSTR("ALLOW_WPA2_PSK")))
            {
              v41 = sub_10002B2DC((uint64_t)kCFAllocatorDefault, (uint64_t)a1);
              sub_1000C434C((int)v41, 1, 1);
              v42 = sub_1000173C0((uint64_t)v41);
              v43 = CFDictionaryGetValue(v42, CFSTR("RSN_IE"));
              if (v43)
              {
                objc_msgSend(v10, "setObject:forKey:", v43, CFSTR("RSN_IE"));
                v44 = objc_autoreleasePoolPush();
                if (qword_10026DD20)
                {
                  contexta = v44;
                  objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: inserted WPA2 auth, <%@> will be synced as a WPA2/WPA3 network", "WiFiNetworkSyncHelperCreateSyncableNetworkRecord", sub_10002B088(a1));
                  v44 = contexta;
                }
                objc_autoreleasePoolPop(v44);
              }
              if (v42)
                CFRelease(v42);
              if (v41)
                CFRelease(v41);
            }
          }
          else
          {
            v39 = CFDictionaryGetValue(v12, CFSTR("RSN_IE"));
            if (v39)
            {
              objc_msgSend(v10, "setObject:forKey:", v39, CFSTR("WPA3_RSN_IE"));
              v40 = objc_autoreleasePoolPush();
              if (qword_10026DD20)
                objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: <%@> will be synced as a WPA3-only network", "WiFiNetworkSyncHelperCreateSyncableNetworkRecord", sub_10002B088(a1));
              objc_autoreleasePoolPop(v40);
            }
          }
        }
        else if (v30)
        {
          v35 = CFDictionaryGetValue(v12, CFSTR("RSN_IE"));
          if (v35)
            objc_msgSend(v10, "setObject:forKey:", v35, CFSTR("RSN_IE"));
          v36 = CFDictionaryGetValue(v12, CFSTR("WPA_IE"));
          if (v36)
          {
            v37 = v36;
            TypeID = CFDictionaryGetTypeID();
            if (sub_1000648AC(TypeID, v37))
            {
              v33 = CFSTR("WPA_IE");
              v34 = v10;
              v32 = v37;
LABEL_36:
              objc_msgSend(v34, "setObject:forKey:", v32, v33);
            }
          }
        }
LABEL_50:
        if (sub_10002DAB4((uint64_t)a1))
          v45 = v5;
        else
          v45 = v7;
        objc_msgSend(v10, "setObject:forKey:", v45, CFSTR("IS_NETWORK_EAP"));
        if (sub_10001395C((uint64_t)a1))
          v46 = v5;
        else
          v46 = v7;
        objc_msgSend(v10, "setObject:forKey:", v46, CFSTR("IS_PERSONAL_HOTSPOT"));
        if (sub_1000C5378((uint64_t)a1))
          v47 = v5;
        else
          v47 = v7;
        objc_msgSend(v10, "setObject:forKey:", v47, CFSTR("IS_NETWORK_CONFIGURED"));
        v48 = (const __CFDictionary *)sub_1000427F0(a2);
        if (v48)
        {
          Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, v48);
          if (Copy)
          {
            v50 = Copy;
            v51 = CFDictionaryContainsKey(Copy, v14);
            CFRelease(v50);
            v52 = v5;
            if (v51)
              goto LABEL_63;
          }
        }
        else
        {
          v92 = objc_autoreleasePoolPush();
          if (qword_10026DD20)
            objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null customNetworkSetDictRef", "__WiFiNetworkSyncHelperIsCustomNetwork");
          objc_autoreleasePoolPop(v92);
        }
        v52 = v7;
LABEL_63:
        objc_msgSend(v10, "setObject:forKey:", v52, CFSTR("IS_NETWORK_CUSTOMIZED"));
        if (sub_1000C55BC((uint64_t)a1))
          v53 = v5;
        else
          v53 = v7;
        objc_msgSend(v10, "setObject:forKey:", v53, CFSTR("IS_NETWORK_EXPIRABLE"));
        if (!&_CNForgetSSID)
          goto LABEL_74;
        if (sub_10002BE64((uint64_t)a1, kCNSIsWhitelistedCaptiveNetworkProperty) == kCFBooleanTrue)
        {
          v55 = CFSTR("IS_NETWORK_WHITELISTING_CAPTIVE");
        }
        else
        {
          if (!sub_1000C4820((uint64_t)a1))
          {
LABEL_74:
            if (sub_1000C5408((uint64_t)a1))
              v58 = v5;
            else
              v58 = v7;
            objc_msgSend(v10, "setObject:forKey:", v58, CFSTR("IS_NETWORK_APPBASED"));
            v59 = sub_1000C41D4((const __CFArray *)a1);
            if (v16)
            {
              v60 = v59;
              if (-[__CFArray length](v16, "length"))
              {
                if (v60)
                {
                  if ((int)-[__CFArray intValue](v60, "intValue") >= 15)
                  {
                    v61 = -[__CFArray componentsSeparatedByString:](v16, "componentsSeparatedByString:", CFSTR(":"));
                    if (objc_msgSend(v61, "count") == (id)6)
                    {
                      v102 = -1431655766;
                      -[NSScanner scanHexInt:](+[NSScanner scannerWithString:](NSScanner, "scannerWithString:", objc_msgSend(v61, "lastObject")), "scanHexInt:", &v102);
                      v97 = objc_msgSend(v61, "objectAtIndex:", 0);
                      v62 = objc_msgSend(v61, "objectAtIndex:", 1);
                      v63 = objc_msgSend(v61, "objectAtIndex:", 2);
                      v64 = objc_msgSend(v61, "objectAtIndex:", 3);
                      v65 = objc_msgSend(v61, "objectAtIndex:", 4);
                      v98 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@:%@:%@:%@:%@:%x"), v97, v62, v63, v64, v65, (v102 - 1));
                      v95 = objc_msgSend(v61, "objectAtIndex:", 0);
                      v66 = objc_msgSend(v61, "objectAtIndex:", 1);
                      v67 = objc_msgSend(v61, "objectAtIndex:", 2);
                      v68 = objc_msgSend(v61, "objectAtIndex:", 3);
                      v69 = objc_msgSend(v61, "objectAtIndex:", 4);
                      v96 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@:%@:%@:%@:%@:%x"), v95, v66, v67, v68, v69, (v102 - 2));
                      v94 = objc_msgSend(v61, "objectAtIndex:", 0);
                      v70 = objc_msgSend(v61, "objectAtIndex:", 1);
                      v71 = objc_msgSend(v61, "objectAtIndex:", 2);
                      v72 = objc_msgSend(v61, "objectAtIndex:", 3);
                      v73 = objc_msgSend(v61, "objectAtIndex:", 4);
                      context = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@:%@:%@:%@:%@:%x"), v94, v70, v71, v72, v73, (v102 + 1));
                      v93 = objc_msgSend(v61, "objectAtIndex:", 0);
                      v74 = objc_msgSend(v61, "objectAtIndex:", 1);
                      v75 = objc_msgSend(v61, "objectAtIndex:", 2);
                      v76 = objc_msgSend(v61, "objectAtIndex:", 3);
                      v77 = objc_msgSend(v61, "objectAtIndex:", 4);
                      v78 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@:%@:%@:%@:%@:%x"), v93, v74, v75, v76, v77, (v102 + 2));
                      objc_msgSend(v10, "setObject:forKey:", v98, CFSTR("GUESSED_2ghzBSSID1"));
                      objc_msgSend(v10, "setObject:forKey:", v96, CFSTR("GUESSED_2ghzBSSID2"));
                      objc_msgSend(v10, "setObject:forKey:", context, CFSTR("GUESSED_2ghzBSSID3"));
                      objc_msgSend(v10, "setObject:forKey:", v78, CFSTR("GUESSED_2ghzBSSID4"));
                      v79 = objc_autoreleasePoolPush();
                      if (qword_10026DD20)
                        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: for 5ghz network <%@> %@: guess1 %@, guess2 %@, guess3 %@, guess4 %@", "WiFiNetworkSyncHelperCreateSyncableNetworkRecord", v14, v16, v98, v96, context, v78);
                      objc_autoreleasePoolPop(v79);
                    }
                  }
                }
              }
            }
            if (sub_1000CA608((uint64_t)a1) == 1)
              objc_msgSend(v10, "setObject:forKey:", v5, CFSTR("IS_NETWORK_CARPLAY_ONLY"));
            objc_msgSend(v10, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", sub_100007E20((uint64_t)a1)), CFSTR("SHARE_MODE"));
            objc_msgSend(v10, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", sub_1000CB34C((uint64_t)a1)), CFSTR("USER_ROLE"));
            v4 = v101;
            if (sub_10002BE64((uint64_t)a1, CFSTR("SaveDataMode")))
              objc_msgSend(v10, "setObject:forKey:", sub_10002BE64((uint64_t)a1, CFSTR("SaveDataMode")), CFSTR("LOW_DATA_MODE"));
            objc_msgSend(v10, "setValue:forKey:", sub_10002BE64((uint64_t)a1, CFSTR("addedAt")), CFSTR("AddedAt"));
            objc_msgSend(v10, "setValue:forKey:", sub_10002BE64((uint64_t)a1, CFSTR("lastJoined")), CFSTR("UserJoinedAt"));
            v80 = sub_100026664((CFDictionaryRef *)a1);
            v81 = (NSNumber *)objc_msgSend(v80, "lastJoinedBySystemAtWeek");
            if (v81)
              v81 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v81);
            objc_msgSend(v10, "setValue:forKey:", v81, CFSTR("lastJoinedBySystemAtWeek"));
            v82 = (NSNumber *)objc_msgSend(v80, "was6GHzOnlyAtWeek");
            if (v82)
              v82 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v82);
            objc_msgSend(v10, "setValue:forKey:", v82, CFSTR("was6GHzOnlyAtWeek"));
            objc_msgSend(v10, "setValue:forKey:", objc_msgSend(v80, "seamlessSSIDList"), CFSTR("seamlessSSIDList"));

            objc_msgSend(v10, "setObject:forKey:", +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", sub_1000081D8((uint64_t)a1)), CFSTR("IS_PRIVACY_PROXY_ENABLED"));
            if (sub_10002BE64((uint64_t)a1, CFSTR("WiFiNetworkAttributeIsMoving")))
            {
              v83 = sub_10002BE64((uint64_t)a1, CFSTR("WiFiNetworkAttributeIsMoving"));
              v84 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", CFEqual(v83, kCFBooleanTrue) != 0);
            }
            else
            {
              v84 = 0;
            }
            if (sub_10002BE64((uint64_t)a1, CFSTR("WiFiNetworkAttributeIsPublic")))
            {
              v85 = sub_10002BE64((uint64_t)a1, CFSTR("WiFiNetworkAttributeIsPublic"));
              v86 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", CFEqual(v85, kCFBooleanTrue) != 0);
            }
            else
            {
              v86 = 0;
            }
            objc_msgSend(v10, "setValue:forKey:", v84, CFSTR("IS_MOVING"));
            objc_msgSend(v10, "setValue:forKey:", v86, CFSTR("IS_PUBLIC"));
LABEL_100:
            CFRelease(v12);
            goto LABEL_101;
          }
          v54 = sub_1000C475C((uint64_t)a1);
          v55 = CFSTR("IS_NETWORK_CAPTIVE");
          if (!v54)
          {
            v56 = v10;
            v57 = v7;
LABEL_73:
            objc_msgSend(v56, "setObject:forKey:", v57, v55);
            goto LABEL_74;
          }
        }
        v56 = v10;
        v57 = v5;
        goto LABEL_73;
      }
      v27 = v26;
      v24 = CFSTR("WEP_AUTH_Flags");
      v28 = v10;
    }
    else
    {
      v28 = v10;
      v27 = v7;
    }
    objc_msgSend(v28, "setObject:forKey:", v27, v24);
    goto LABEL_25;
  }
  v89 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null networkRecord", "WiFiNetworkSyncHelperCreateSyncableNetworkRecord");
  objc_autoreleasePoolPop(v89);
LABEL_101:
  objc_autoreleasePoolPop(v4);
  return v10;
}

void sub_100177F70(uint64_t a1)
{
  void *v1;

  if (a1)
  {
    sub_1000CC95C(a1);
  }
  else
  {
    v1 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null network", "WiFiNetworkSyncHelperSanitizeNetwork");
    objc_autoreleasePoolPop(v1);
  }
}

_WORD *sub_100177FD0(void *a1)
{
  void *v2;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  const void **v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  const void **v23;
  id v24;
  id v25;
  id v26;
  const void **v27;
  CFDictionaryRef *v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  _WORD *v39;
  void *v40;
  void *v42;
  void *v43;

  v2 = objc_autoreleasePoolPush();
  if (!a1)
  {
    v42 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null cloudNetworkDict", "WiFiNetworkSyncHelperCreateNetworkRef");
    goto LABEL_77;
  }
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    v42 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null networkRecord", "WiFiNetworkSyncHelperCreateNetworkRef");
LABEL_77:
    objc_autoreleasePoolPop(v42);
    v39 = 0;
    goto LABEL_70;
  }
  v4 = Mutable;
  v5 = objc_msgSend(a1, "objectForKey:", CFSTR("SSID_STR"));
  if (v5)
  {
    CFDictionarySetValue(v4, CFSTR("SSID_STR"), v5);
    v6 = objc_msgSend(a1, "objectForKey:", CFSTR("BSSID"));
    if (v6)
      CFDictionarySetValue(v4, CFSTR("BSSID"), v6);
    v7 = objc_msgSend(a1, "objectForKey:", CFSTR("AP_MODE"));
    if (v7)
      CFDictionarySetValue(v4, CFSTR("AP_MODE"), v7);
    v8 = objc_msgSend(a1, "objectForKey:", CFSTR("UserDirected"));
    if (v8)
    {
      if (objc_msgSend(v8, "BOOLValue"))
        v9 = (const void **)&kCFBooleanTrue;
      else
        v9 = (const void **)&kCFBooleanFalse;
      CFDictionarySetValue(v4, CFSTR("UserDirected"), *v9);
    }
    v10 = objc_msgSend(a1, "objectForKey:", CFSTR("WEP"));
    if (v10 && objc_msgSend(v10, "BOOLValue"))
    {
      CFDictionarySetValue(v4, CFSTR("WEP"), kCFBooleanTrue);
      v11 = objc_msgSend(a1, "objectForKey:", CFSTR("WEPType"));
      if (v11)
        CFDictionarySetValue(v4, CFSTR("WEPType"), v11);
      v12 = objc_msgSend(a1, "objectForKey:", CFSTR("WEP_AUTH_Flags"));
      if (v12)
        CFDictionarySetValue(v4, CFSTR("WEP_AUTH_Flags"), v12);
    }
    v13 = objc_msgSend(a1, "objectForKey:", CFSTR("WPA_IE"));
    if (v13)
      CFDictionarySetValue(v4, CFSTR("WPA_IE"), v13);
    v14 = objc_msgSend(a1, "objectForKey:", CFSTR("RSN_IE"));
    if (v14)
      CFDictionarySetValue(v4, CFSTR("RSN_IE"), v14);
    v15 = objc_msgSend(a1, "objectForKey:", CFSTR("WPA3_RSN_IE"));
    if (v15)
      CFDictionarySetValue(v4, CFSTR("RSN_IE"), v15);
    v16 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s for <%@>", "WiFiNetworkSyncHelperCreateNetworkRef", objc_msgSend(a1, "objectForKey:", CFSTR("SSID_STR")));
    objc_autoreleasePoolPop(v16);
    v17 = objc_msgSend(a1, "objectForKey:", CFSTR("SHARE_MODE"));
    if (v17)
      CFDictionarySetValue(v4, CFSTR("ShareMode"), v17);
    v18 = objc_msgSend(a1, "objectForKey:", CFSTR("USER_ROLE"));
    if (v18)
      CFDictionarySetValue(v4, CFSTR("UserRole"), v18);
    v19 = objc_msgSend(a1, "objectForKey:", CFSTR("LOW_DATA_MODE"));
    if (v19)
      CFDictionarySetValue(v4, CFSTR("SaveDataMode"), v19);
    if (&_CNForgetSSID)
    {
      v20 = objc_msgSend(a1, "objectForKey:", CFSTR("IS_NETWORK_WHITELISTING_CAPTIVE"));
      if (v20 && objc_msgSend(v20, "BOOLValue"))
        CFDictionarySetValue(v4, kCNSIsWhitelistedCaptiveNetworkProperty, kCFBooleanTrue);
      v21 = objc_msgSend(a1, "objectForKey:", CFSTR("IS_NETWORK_CAPTIVE"));
      if (v21 && objc_msgSend(v21, "BOOLValue"))
        CFDictionarySetValue(v4, kCNSCaptiveNetworkProperty, kCFBooleanTrue);
    }
    v22 = objc_msgSend(a1, "objectForKey:", CFSTR("IS_PERSONAL_HOTSPOT"));
    if (v22)
    {
      if (objc_msgSend(v22, "BOOLValue"))
        v23 = (const void **)&kCFBooleanTrue;
      else
        v23 = (const void **)&kCFBooleanFalse;
      CFDictionarySetValue(v4, CFSTR("IsPersonalHotspot"), *v23);
    }
    v24 = objc_msgSend(a1, "objectForKey:", CFSTR("AddedAt"));
    if (v24)
      CFDictionarySetValue(v4, CFSTR("addedAt"), v24);
    v25 = objc_msgSend(a1, "objectForKey:", CFSTR("UserJoinedAt"));
    if (v25)
      CFDictionarySetValue(v4, CFSTR("lastJoined"), v25);
    v26 = objc_msgSend(a1, "objectForKey:", CFSTR("IS_PRIVACY_PROXY_ENABLED"));
    if (v26)
    {
      if (objc_msgSend(v26, "BOOLValue"))
        v27 = (const void **)&kCFBooleanTrue;
      else
        v27 = (const void **)&kCFBooleanFalse;
      CFDictionarySetValue(v4, CFSTR("PrivacyProxyEnabled"), *v27);
    }
    v28 = (CFDictionaryRef *)sub_10002B314((uint64_t)kCFAllocatorDefault, v4);
    v29 = sub_100026664(v28);
    v30 = objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("lastJoinedBySystemAtWeek"));
    if (v30)
    {
      v31 = v30;
      v32 = objc_msgSend(v30, "unsignedIntegerValue");
      if (v32 <= objc_msgSend(v29, "lastJoinedBySystemAtWeek"))
        v33 = objc_msgSend(v29, "lastJoinedBySystemAtWeek");
      else
        v33 = objc_msgSend(v31, "unsignedIntegerValue");
      objc_msgSend(v29, "setLastJoinedBySystemAtWeek:", v33);
    }
    v34 = objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("was6GHzOnlyAtWeek"));
    if (v34)
    {
      v35 = v34;
      v36 = objc_msgSend(v34, "unsignedIntegerValue");
      if (v36 <= objc_msgSend(v29, "was6GHzOnlyAtWeek"))
        v37 = objc_msgSend(v29, "was6GHzOnlyAtWeek");
      else
        v37 = objc_msgSend(v35, "unsignedIntegerValue");
      objc_msgSend(v29, "setWas6GHzOnlyAtWeek:", v37);
    }
    v38 = objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("seamlessSSIDList"));
    if (v38)
      objc_msgSend(v29, "setSeamlessSSIDList:", v38);
    if (v28)
      CFRelease(v28);
    v39 = sub_1000CCB10(v29, 0);

  }
  else
  {
    v43 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null WIFICLOUDSYNC_NETWORKKEY_SSID", "WiFiNetworkSyncHelperCreateNetworkRef");
    objc_autoreleasePoolPop(v43);
    v39 = 0;
  }
  CFRelease(v4);
LABEL_70:
  sub_100177F70((uint64_t)v39);
  v40 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: network content to be returned to caller: %@", "WiFiNetworkSyncHelperCreateNetworkRef", v39);
  objc_autoreleasePoolPop(v40);
  objc_autoreleasePoolPop(v2);
  return v39;
}

void sub_1001785DC(void *a1, uint64_t a2)
{
  uint64_t v4;
  CFTypeID v5;
  void *v6;
  void *v7;
  void *v8;

  if (a1)
  {
    if (a2)
    {
      v4 = sub_1000C312C();
      v5 = CFGetTypeID(a1);
      v6 = objc_autoreleasePoolPush();
      if (v4 != v5)
      {
        if (qword_10026DD20)
          objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: network object passed in is not WiFiNetwork type", "WiFiNetworkSyncHelperAddNetworkToPlist");
        v8 = v6;
        goto LABEL_13;
      }
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s", "WiFiNetworkSyncHelperAddNetworkToPlist");
      objc_autoreleasePoolPop(v6);
      if (!sub_1000C433C((const __CFDictionary *)a1)
        || sub_10003145C((uint64_t)a1)
        || sub_1000A5114(a2))
      {
        sub_100094420(a2, a1, 3);
        return;
      }
      v7 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: WPA3 not supported, will not add WPA3-only network", "WiFiNetworkSyncHelperAddNetworkToPlist");
    }
    else
    {
      v7 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null manager", "WiFiNetworkSyncHelperAddNetworkToPlist");
    }
  }
  else
  {
    v7 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null networkRef ", "WiFiNetworkSyncHelperAddNetworkToPlist");
  }
  v8 = v7;
LABEL_13:
  objc_autoreleasePoolPop(v8);
}

void sub_100178774(void *a1, uint64_t a2)
{
  uint64_t v4;
  CFTypeID v5;
  void *v6;
  void *v7;
  void *v8;

  if (!a1)
  {
    v7 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null networkRef ", "WiFiNetworkSyncHelperRemoveNetworkFromPlist");
    goto LABEL_11;
  }
  if (!a2)
  {
    v7 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null manager", "WiFiNetworkSyncHelperRemoveNetworkFromPlist");
LABEL_11:
    v8 = v7;
LABEL_15:
    objc_autoreleasePoolPop(v8);
    return;
  }
  v4 = sub_1000C312C();
  v5 = CFGetTypeID(a1);
  v6 = objc_autoreleasePoolPush();
  if (v4 != v5)
  {
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: network object passed in is not WiFiNetwork type", "WiFiNetworkSyncHelperRemoveNetworkFromPlist");
    v8 = v6;
    goto LABEL_15;
  }
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s", "WiFiNetworkSyncHelperRemoveNetworkFromPlist");
  objc_autoreleasePoolPop(v6);
  sub_100098DBC(a2, a1, (const void *)4);
}

uint64_t sub_1001788C0(void *a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v12;

  v2 = objc_autoreleasePoolPush();
  if (!a1)
  {
    v12 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null syncFormattedNetworkRecord", "WiFiNetworkSyncHelperIsNetworkSyncable");
    goto LABEL_40;
  }
  v3 = objc_msgSend(a1, "objectForKey:", CFSTR("IS_NETWORK_EAP"));
  if (!v3)
  {
    v12 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: missing WIFICLOUDSYNC_NETWORKKEY_ISEAP key, not syncable", "WiFiNetworkSyncHelperIsNetworkSyncable");
    goto LABEL_40;
  }
  if (objc_msgSend(v3, "BOOLValue"))
  {
    v12 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: EAP network, not syncable", "WiFiNetworkSyncHelperIsNetworkSyncable");
    goto LABEL_40;
  }
  v4 = objc_msgSend(a1, "objectForKey:", CFSTR("IS_NETWORK_CUSTOMIZED"));
  if (!v4)
  {
    v12 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: missing WIFICLOUDSYNC_NETWORKKEY_ISCUSTOMIZED key, not syncable", "WiFiNetworkSyncHelperIsNetworkSyncable");
    goto LABEL_40;
  }
  if (objc_msgSend(v4, "BOOLValue"))
  {
    v12 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: customized network, not syncable", "WiFiNetworkSyncHelperIsNetworkSyncable");
    goto LABEL_40;
  }
  v5 = objc_msgSend(a1, "objectForKey:", CFSTR("IS_NETWORK_CONFIGURED"));
  if (!v5)
  {
    v12 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: missing WIFICLOUDSYNC_NETWORKKEY_ISCONFIGURED key, not syncable", "WiFiNetworkSyncHelperIsNetworkSyncable");
    goto LABEL_40;
  }
  if (objc_msgSend(v5, "BOOLValue"))
  {
    v12 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: configured network, not syncable", "WiFiNetworkSyncHelperIsNetworkSyncable");
    goto LABEL_40;
  }
  v6 = objc_msgSend(a1, "objectForKey:", CFSTR("AP_MODE"));
  if (v6 && objc_msgSend(v6, "intValue") != 2)
  {
    v12 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: non-infrastructure network, not syncable", "WiFiNetworkSyncHelperIsNetworkSyncable");
    goto LABEL_40;
  }
  v7 = objc_msgSend(a1, "objectForKey:", CFSTR("IS_NETWORK_APPBASED"));
  if (v7 && objc_msgSend(v7, "BOOLValue"))
  {
    v12 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: app based network, not syncable", "WiFiNetworkSyncHelperIsNetworkSyncable");
    goto LABEL_40;
  }
  v8 = objc_msgSend(a1, "objectForKey:", CFSTR("IS_NETWORK_EXPIRABLE"));
  if (v8 && objc_msgSend(v8, "BOOLValue"))
  {
    v12 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: expirable network, not syncable", "WiFiNetworkSyncHelperIsNetworkSyncable");
    goto LABEL_40;
  }
  v9 = objc_msgSend(a1, "objectForKey:", CFSTR("IS_NETWORK_CARPLAY_ONLY"));
  if (v9 && objc_msgSend(v9, "BOOLValue"))
  {
    v12 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: carplay only network, not syncable", "WiFiNetworkSyncHelperIsNetworkSyncable");
LABEL_40:
    objc_autoreleasePoolPop(v12);
    v10 = 0;
    goto LABEL_17;
  }
  v10 = 1;
LABEL_17:
  objc_autoreleasePoolPop(v2);
  return v10;
}

uint64_t sub_100178BEC(void *a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v7;

  v2 = objc_autoreleasePoolPush();
  if (!a1)
  {
    v7 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: null syncFormattedNetworkRecord", "WiFiNetworkSyncHelperGetNetworkSecurity");
    objc_autoreleasePoolPop(v7);
    goto LABEL_7;
  }
  v3 = objc_msgSend(a1, "objectForKey:", CFSTR("WEP"));
  if (v3 && (objc_msgSend(v3, "BOOLValue") & 1) != 0)
  {
    v4 = 1;
  }
  else if (objc_msgSend(a1, "objectForKey:", CFSTR("WPA3_RSN_IE")))
  {
    v4 = 4;
  }
  else if (objc_msgSend(a1, "objectForKey:", CFSTR("RSN_IE")))
  {
    v4 = 3;
  }
  else
  {
    if (!objc_msgSend(a1, "objectForKey:", CFSTR("WPA_IE")))
    {
LABEL_7:
      v4 = 0;
      goto LABEL_8;
    }
    v4 = 2;
  }
LABEL_8:
  v5 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: <%@> security %d", "WiFiNetworkSyncHelperGetNetworkSecurity", objc_msgSend(a1, "objectForKey:", CFSTR("SSID_STR")), v4);
  objc_autoreleasePoolPop(v5);
  objc_autoreleasePoolPop(v2);
  return v4;
}

void sub_100178D40(uint64_t a1)
{
  void *v2;
  NSObject *global_queue;
  _xpc_connection_s *mach_service;
  _xpc_connection_s *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  _QWORD handler[5];
  xpc_object_t object[2];
  char *v11[2];
  xpc_object_t values;
  char *keys;

  v2 = objc_autoreleasePoolPush();
  if (qword_10026DD20)
    objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s", "WiFiCoexManagerRegister");
  objc_autoreleasePoolPop(v2);
  if (&WCMEnabled)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    mach_service = xpc_connection_create_mach_service("com.apple.WirelessCoexManager", global_queue, 0);
    if (mach_service)
    {
      v5 = mach_service;
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_100178F60;
      handler[3] = &unk_100233688;
      handler[4] = a1;
      xpc_connection_set_event_handler(mach_service, handler);
      xpc_connection_resume(v5);
      keys = "kWCMRegisterProcess_ProcessId";
      values = xpc_uint64_create(1uLL);
      v6 = xpc_dictionary_create((const char *const *)&keys, &values, 1uLL);
      *(_OWORD *)v11 = *(_OWORD *)off_1002336A8;
      object[0] = xpc_uint64_create(1uLL);
      object[1] = v6;
      v7 = xpc_dictionary_create((const char *const *)v11, object, 2uLL);
      xpc_connection_send_message(v5, v7);
      xpc_release(values);
      xpc_release(object[0]);
      xpc_release(v6);
      xpc_release(v7);
      sub_10009EE54(a1, (uint64_t)v5);
      return;
    }
    v8 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Error: %s: failed to create xpc connection", "WiFiCoexManagerRegister");
  }
  else
  {
    v8 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: WCM is disabled ", "WiFiCoexManagerRegister");
  }
  objc_autoreleasePoolPop(v8);
}

void sub_100178F60(uint64_t a1, xpc_object_t object)
{
  uint64_t v3;
  void *v4;
  void *v5;

  if (!object)
  {
    v4 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Error: %s: eventObject is null", "__WiFiCoexManagerHandleEvent");
    goto LABEL_14;
  }
  v3 = *(_QWORD *)(a1 + 32);
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_error)
    return;
  if (object == &_xpc_error_connection_interrupted)
  {
    v5 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: Re-Register", "__WiFiCoexManagerHandleEvent");
    objc_autoreleasePoolPop(v5);
    sub_100178D40(v3);
  }
  else
  {
    if (object == &_xpc_error_termination_imminent)
    {
      v4 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: about to Die", "__WiFiCoexManagerHandleEvent");
      goto LABEL_14;
    }
    if (object == &_xpc_error_connection_invalid)
    {
      v4 = objc_autoreleasePoolPush();
      if (qword_10026DD20)
        objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, " %s: Invalid XPC Connection", "__WiFiCoexManagerHandleEvent");
LABEL_14:
      objc_autoreleasePoolPop(v4);
    }
  }
}

void sub_1001790CC(xpc_object_t *a1)
{
  _xpc_connection_s *v2;
  void *v3;

  if (&WCMEnabled)
  {
    v2 = (_xpc_connection_s *)*a1;
    if (v2)
    {
      xpc_connection_cancel(v2);
      xpc_release(*a1);
      *a1 = 0;
      return;
    }
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "Error: %s: coexMgrXpcConnection is null", "WiFiCoexManagerUnRegister");
  }
  else
  {
    v3 = objc_autoreleasePoolPush();
    if (qword_10026DD20)
      objc_msgSend((id)qword_10026DD20, "WFLog:message:", 3, "%s: WCM is disabled ", "WiFiCoexManagerUnRegister");
  }
  objc_autoreleasePoolPop(v3);
}

uint64_t sub_10017949C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 69846) >= 0xFFFFFF64)
    return (uint64_t)*(&off_1002336B8 + 5 * (v1 - 69690) + 5);
  else
    return 0;
}

_DWORD *sub_1001794DC(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)sub_1000DCCF0(result[3], result[8], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_100179588(uint64_t result, uint64_t a2)
{
  int v3;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    v3 = -300;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = sub_1000DC7E8(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(_DWORD *)(result + 40), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_100179668(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  NDR_record_t v5;
  int v6;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    v6 = -300;
    goto LABEL_11;
  }
  result = sub_1000DC9B8(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v5 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_100179738(uint64_t result, uint64_t a2)
{
  CFIndex v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(unsigned int *)(result + 40);
      if ((_DWORD)v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000DCE00(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_1001797C8(uint64_t result, uint64_t a2)
{
  CFIndex v3;
  unsigned int v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 2 && *(_DWORD *)(result + 4) == 76)
  {
    if (*(_BYTE *)(result + 39) == 1 && *(_BYTE *)(result + 55) == 1)
    {
      v3 = *(unsigned int *)(result + 40);
      if ((_DWORD)v3 == *(_DWORD *)(result + 68))
      {
        v4 = *(_DWORD *)(result + 56);
        if (v4 == *(_DWORD *)(result + 72))
        {
          result = sub_1000DD044(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4);
          *(_DWORD *)(a2 + 32) = result;
          return result;
        }
      }
    }
    v5 = -300;
  }
  else
  {
    v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_100179878(uint64_t result, uint64_t a2)
{
  CFIndex v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(unsigned int *)(result + 40);
      if ((_DWORD)v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000DD1AC(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_100179908(uint64_t result, uint64_t a2)
{
  CFIndex v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 60)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(unsigned int *)(result + 40);
      if ((_DWORD)v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000DD358(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, (const void *)*(unsigned int *)(result + 56));
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10017999C(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000DD4B4(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_100179A2C(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 60)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000DD5C4(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(_DWORD *)(result + 56));
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_100179AC0(uint64_t result, uint64_t a2)
{
  CFIndex v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 64)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(unsigned int *)(result + 40);
      if ((_DWORD)v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000DD73C(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(_DWORD *)(result + 56), *(_DWORD *)(result + 60));
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_100179B54(uint64_t result, uint64_t a2)
{
  CFIndex v3;
  NDR_record_t v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || (v3 = *(unsigned int *)(result + 40), (_DWORD)v3 != *(_DWORD *)(result + 52)))
  {
    v5 = -300;
    goto LABEL_9;
  }
  result = sub_1000DD8FC(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v4 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_100179C04(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 64)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 60))
      {
        result = sub_1000DDB44(*(_DWORD *)(result + 12), *(unsigned int *)(result + 52), *(unsigned int *)(result + 56), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_100179C98(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 64)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 60))
      {
        result = sub_1000DDA00(*(_DWORD *)(result + 12), *(unsigned int *)(result + 52), *(unsigned int *)(result + 56), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_100179D2C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DDC88(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *sub_100179D8C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DABC0(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *sub_100179DEC(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DACF0(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_100179E64(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DADB0(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *sub_100179EC4(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DAEE0(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_100179F3C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DB2BC(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *sub_100179F9C(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DB3E4(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_10017A014(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 96)
  {
    v5 = -304;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v5;
    goto LABEL_11;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 84))
    || (v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 88)))
  {
    v5 = -300;
    goto LABEL_10;
  }
  result = sub_1000DB4F4(*(_DWORD *)(result + 12), *(_DWORD *)(result + 68), *(unsigned int *)(result + 72), *(_DWORD *)(result + 76), *(unsigned int *)(result + 80), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4, *(_DWORD *)(result + 92));
  *(_DWORD *)(a2 + 32) = result;
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10017A0DC(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DB718(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017A154(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DB7D8(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *sub_10017A1B4(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)sub_1000DB904(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_10017A258(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DBBBC(result[3], result[8], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017A2D8(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DBCF8(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017A350(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DBDB8(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017A3C8(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DE2B8(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017A440(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DC66C(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *sub_10017A4A0(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DC728(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017A518(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DDDE0(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *sub_10017A578(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DDEF0(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017A5F0(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DAFA0(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_10017A668(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 40)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = sub_1000DB0B0(*(_DWORD *)(result + 12), *(double *)(result + 32));
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_10017A6C8(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DB1C0(result[3], (_QWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 44;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017A740(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DDFB4(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *sub_10017A7A0(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DE0C8(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017A818(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DBF7C(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017A890(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)sub_1000DC03C(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_10017A934(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
  }
  else
  {
    result = (_DWORD *)sub_1000DC168(result[3]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10017A98C(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DC258(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017AA04(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)sub_1000DC318(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10017AAA8(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  NDR_record_t v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    v5 = -300;
    goto LABEL_9;
  }
  result = sub_1000DC42C(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v4 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

_DWORD *sub_10017AB58(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)sub_1000DC568(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10017ABFC(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 3 && *(_DWORD *)(result + 4) == 96)
  {
    if (*(_BYTE *)(result + 39) == 1 && *(_BYTE *)(result + 55) == 1 && *(_BYTE *)(result + 71) == 1)
    {
      v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 84))
      {
        v4 = *(_DWORD *)(result + 56);
        if (v4 == *(_DWORD *)(result + 88))
        {
          v5 = *(_DWORD *)(result + 72);
          if (v5 == *(_DWORD *)(result + 92))
          {
            result = sub_1000DEA78(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4, *(UInt8 **)(result + 60), v5);
            *(_DWORD *)(a2 + 32) = result;
            return result;
          }
        }
      }
    }
    v6 = -300;
  }
  else
  {
    v6 = -304;
  }
  *(_DWORD *)(a2 + 32) = v6;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10017ACCC(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  NDR_record_t v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    v5 = -300;
    goto LABEL_9;
  }
  result = sub_1000DF510(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(unsigned int *)(result + 56), (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v4 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_10017AD80(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000DEC70(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10017AE10(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 60)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000DEDC4(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(_DWORD *)(result + 56));
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10017AEA4(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  NDR_record_t v5;
  int v6;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    v6 = -300;
    goto LABEL_11;
  }
  result = sub_1000DEF34(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v5 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_10017AF74(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  NDR_record_t v5;
  int v6;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 80)
  {
    v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 76)))
  {
    v6 = -300;
    goto LABEL_11;
  }
  result = sub_1000DF6C4(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(unsigned int *)(result + 72), *(UInt8 **)(result + 44), v4, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v5 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_10017B048(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  NDR_record_t v5;
  int v6;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    v6 = -300;
    goto LABEL_11;
  }
  result = sub_1000DFE78(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4, (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v5 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_10017B118(uint64_t result, uint64_t a2)
{
  int v3;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    v3 = -300;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = sub_1000E03C4(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(_DWORD *)(result + 40), *(unsigned int *)(result + 56), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52), (int *)(a2 + 56));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10017B200(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  NDR_record_t v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    v5 = -300;
    goto LABEL_9;
  }
  result = sub_1000E06D0(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(unsigned int *)(result + 56), (unsigned int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v4 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_10017B2B4(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000DE18C(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10017B344(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000DE378(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10017B3D4(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000DE470(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

uint64_t sub_10017B434(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000DE594(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10017B4C4(uint64_t result, uint64_t a2)
{
  int v3;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    v3 = -300;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = sub_1000DE68C(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(_DWORD *)(result + 40), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_10017B5A4(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)sub_1000DE870(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_10017B648(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)sub_1000DE974(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10017B6EC(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  NDR_record_t v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    v5 = -300;
    goto LABEL_9;
  }
  result = sub_1000DBE78(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v4 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_10017B79C(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  NDR_record_t v6;
  int v7;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 3 || *(_DWORD *)(result + 4) != 96)
  {
    v7 = -304;
LABEL_13:
    *(_DWORD *)(a2 + 32) = v7;
    v6 = NDR_record;
    goto LABEL_14;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || *(_BYTE *)(result + 71) != 1
    || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 84))
    || (v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 88))
    || (v5 = *(_DWORD *)(result + 72), v5 != *(_DWORD *)(result + 92)))
  {
    v7 = -300;
    goto LABEL_13;
  }
  result = sub_1000E08A8(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4, *(UInt8 **)(result + 60), v5, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v6 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_14:
  *(NDR_record_t *)(a2 + 24) = v6;
  return result;
}

uint64_t sub_10017B88C(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  NDR_record_t v5;
  int v6;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 80)
  {
    v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 76)))
  {
    v6 = -300;
    goto LABEL_11;
  }
  result = sub_1000E0CD4(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(unsigned int *)(result + 72), *(UInt8 **)(result + 44), v4, (unsigned int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v5 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_10017B960(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  NDR_record_t v5;
  int v6;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 80)
  {
    v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 76)))
  {
    v6 = -300;
    goto LABEL_11;
  }
  result = sub_1000E0F10(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(_DWORD *)(result + 72), *(UInt8 **)(result + 44), v4, (unsigned int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v5 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_10017BA34(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  NDR_record_t v5;
  int v6;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 80)
  {
    v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    v6 = -300;
    goto LABEL_11;
  }
  result = sub_1000E10F0(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4, *(unsigned int *)(result + 76), (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v5 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_10017BB08(uint64_t result, uint64_t a2)
{
  int v3;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    v3 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_12;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 68)
    || *(_DWORD *)(result + 56) != *(_DWORD *)(result + 72))
  {
    v3 = -300;
    goto LABEL_11;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = sub_1000E1610(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(_DWORD *)(result + 40), *(UInt8 **)(result + 44), *(_DWORD *)(result + 56), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52), (_DWORD *)(a2 + 56));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_12:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10017BC10(uint64_t result, uint64_t a2)
{
  int v3;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    v3 = -300;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = sub_1000E1830(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(_DWORD *)(result + 40), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10017BCF0(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  NDR_record_t v5;
  int v6;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    v6 = -300;
    goto LABEL_11;
  }
  result = sub_1000E1960(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v5 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_10017BDC0(uint64_t result, uint64_t a2)
{
  int v3;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    v3 = -300;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = sub_1000E0268(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(_DWORD *)(result + 40), *(unsigned int *)(result + 56), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52), (int *)(a2 + 56));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10017BEA8(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000E1AE8(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10017BF38(uint64_t result, uint64_t a2)
{
  CFIndex v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 60)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(unsigned int *)(result + 40);
      if ((_DWORD)v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000E1BE0(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10017BFCC(uint64_t result, uint64_t a2)
{
  CFIndex v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 60)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(unsigned int *)(result + 40);
      if ((_DWORD)v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000E1D4C(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10017C060(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)sub_1000E1E44(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_10017C104(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E1F40(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_10017C17C(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 60)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 56))
      {
        result = sub_1000E2000(*(_DWORD *)(result + 12), *(_DWORD *)(result + 52), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10017C210(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E1490(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *sub_10017C270(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E154C(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_10017C2E8(uint64_t result, uint64_t a2)
{
  int v3;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    v3 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_12;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 68)
    || *(_DWORD *)(result + 56) != *(_DWORD *)(result + 72))
  {
    v3 = -300;
    goto LABEL_11;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = sub_1000E21B0(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(_DWORD *)(result + 40), *(UInt8 **)(result + 44), *(_DWORD *)(result + 56), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52), (_DWORD *)(a2 + 56));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_12:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_10017C3F0(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)sub_1000E23E8(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10017C494(uint64_t result, uint64_t a2)
{
  int v3;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    v3 = -300;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = sub_1000E251C(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(unsigned int *)(result + 40), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10017C574(uint64_t result, uint64_t a2)
{
  CFIndex v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 72)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(unsigned int *)(result + 40);
      if ((_DWORD)v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000E26A8(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(double *)(result + 56), *(double *)(result + 64));
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10017C608(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 52)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = sub_1000E28C8(*(_DWORD *)(result + 12), *(_DWORD *)(result + 48), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52), *(double *)(result + 32), *(double *)(result + 40));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10017C6B8(uint64_t result, uint64_t a2)
{
  int v3;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    v3 = -300;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = sub_1000E2AFC(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(unsigned int *)(result + 40), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10017C798(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  NDR_record_t v5;
  int v6;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    v6 = -300;
    goto LABEL_11;
  }
  result = sub_1000E2C88(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v5 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

_DWORD *sub_10017C868(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)sub_1000E2EF8(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_10017C90C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)sub_1000E2FD8(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_10017C9B0(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E30D4(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *sub_10017CA10(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E31F0(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017CA88(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E32FC(result[3]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *sub_10017CAE0(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E33F8(result[3]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

uint64_t sub_10017CB38(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 40)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = sub_1000E34F4(*(_DWORD *)(result + 12), *(double *)(result + 32));
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t sub_10017CB98(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 44)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = sub_1000E3604(*(_DWORD *)(result + 12), *(unsigned int *)(result + 40), *(double *)(result + 32));
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *sub_10017CBFC(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E3728(result[3]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

uint64_t sub_10017CC54(uint64_t result, uint64_t a2)
{
  int v3;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    v3 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_12;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 68)
    || *(_DWORD *)(result + 56) != *(_DWORD *)(result + 72))
  {
    v3 = -300;
    goto LABEL_11;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = sub_1000E3824(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(_DWORD *)(result + 40), *(UInt8 **)(result + 44), *(_DWORD *)(result + 56), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_12:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10017CD58(uint64_t result, uint64_t a2)
{
  CFIndex v3;
  unsigned int v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 2 && *(_DWORD *)(result + 4) == 80)
  {
    if (*(_BYTE *)(result + 39) == 1 && *(_BYTE *)(result + 55) == 1)
    {
      v3 = *(unsigned int *)(result + 40);
      if ((_DWORD)v3 == *(_DWORD *)(result + 68))
      {
        v4 = *(_DWORD *)(result + 56);
        if (v4 == *(_DWORD *)(result + 76))
        {
          result = sub_1000E3B50(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(unsigned int *)(result + 72), *(UInt8 **)(result + 44), v4);
          *(_DWORD *)(a2 + 32) = result;
          return result;
        }
      }
    }
    v5 = -300;
  }
  else
  {
    v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10017CE0C(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  NDR_record_t v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    v5 = -300;
    goto LABEL_9;
  }
  result = sub_1000E3C8C(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v4 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

_DWORD *sub_10017CEBC(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E3EB0(result[3]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *sub_10017CF14(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)sub_1000E3FAC(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_10017CFB8(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E40B0(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017D030(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E418C(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017D0A8(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E4344(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017D120(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E4420(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017D198(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E44FC(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *sub_10017D1F8(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E4610(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017D270(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E46D4(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *sub_10017D2D0(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E47E4(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017D348(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E48A8(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

uint64_t sub_10017D3A8(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 40)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = sub_1000E49B8(*(_DWORD *)(result + 12), *(double *)(result + 32));
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t sub_10017D408(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  NDR_record_t v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    v5 = -300;
    goto LABEL_9;
  }
  result = sub_1000E4AC8(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(unsigned int *)(result + 56), (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v4 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_10017D4BC(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  NDR_record_t v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 68)
  {
    v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    v5 = -300;
    goto LABEL_9;
  }
  result = sub_1000E4BEC(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(_QWORD *)(result + 56), *(unsigned int *)(result + 64), (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v4 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

_DWORD *sub_10017D574(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E4D40(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017D5EC(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E4E04(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_10017D664(uint64_t result, uint64_t a2)
{
  CFIndex v3;
  unsigned int v4;
  unsigned int v5;
  NDR_record_t v6;
  int v7;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 3 || *(_DWORD *)(result + 4) != 96)
  {
    v7 = -304;
LABEL_13:
    *(_DWORD *)(a2 + 32) = v7;
    v6 = NDR_record;
    goto LABEL_14;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || *(_BYTE *)(result + 71) != 1
    || (v3 = *(unsigned int *)(result + 40), (_DWORD)v3 != *(_DWORD *)(result + 84))
    || (v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 88))
    || (v5 = *(_DWORD *)(result + 72), v5 != *(_DWORD *)(result + 92)))
  {
    v7 = -300;
    goto LABEL_13;
  }
  result = sub_1000E4EC8(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4, *(UInt8 **)(result + 60), v5, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v6 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_14:
  *(NDR_record_t *)(a2 + 24) = v6;
  return result;
}

_DWORD *sub_10017D754(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)sub_1000E50F4(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_10017D7F8(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E51D8(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017D870(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E4268(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017D8E8(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E5298(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *sub_10017D948(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E53A4(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_10017D9C0(uint64_t result, uint64_t a2)
{
  int v3;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    v3 = -300;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = sub_1000E5464(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(_DWORD *)(result + 40), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10017DAA0(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000E559C(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10017DB30(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000E569C(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10017DBC0(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000E5794(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10017DC50(uint64_t result, uint64_t a2)
{
  int v3;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    v3 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_12;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 68)
    || *(_DWORD *)(result + 56) != *(_DWORD *)(result + 72))
  {
    v3 = -300;
    goto LABEL_11;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = sub_1000E5A0C(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), *(_DWORD *)(result + 40), *(UInt8 **)(result + 44), *(_DWORD *)(result + 56), (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_12:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10017DD54(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  NDR_record_t v5;
  int v6;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 80)
  {
    v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 76)))
  {
    v6 = -300;
    goto LABEL_11;
  }
  result = sub_1000E588C(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(_DWORD *)(result + 72), *(UInt8 **)(result + 44), v4, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v5 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_10017DE28(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000E5FA4(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10017DEB8(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  CFIndex v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 2 && *(_DWORD *)(result + 4) == 76)
  {
    if (*(_BYTE *)(result + 39) == 1 && *(_BYTE *)(result + 55) == 1)
    {
      v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 68))
      {
        v4 = *(unsigned int *)(result + 56);
        if ((_DWORD)v4 == *(_DWORD *)(result + 72))
        {
          result = sub_1000E5DC0(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, *(UInt8 **)(result + 44), v4);
          *(_DWORD *)(a2 + 32) = result;
          return result;
        }
      }
    }
    v5 = -300;
  }
  else
  {
    v5 = -304;
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10017DF68(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)sub_1000DB9E4(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10017E00C(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  NDR_record_t v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    v5 = -300;
    goto LABEL_9;
  }
  result = sub_1000DBAC4(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v4 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_10017E0BC(uint64_t result, uint64_t a2)
{
  CFIndex v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(unsigned int *)(result + 40);
      if ((_DWORD)v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000E609C(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10017E14C(uint64_t result, uint64_t a2)
{
  CFIndex v3;
  NDR_record_t v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || (v3 = *(unsigned int *)(result + 40), (_DWORD)v3 != *(_DWORD *)(result + 52)))
  {
    v5 = -300;
    goto LABEL_9;
  }
  result = sub_1000E61E8(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v4 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_10017E1FC(uint64_t result, uint64_t a2)
{
  CFIndex v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    v4 = -304;
LABEL_8:
    *(_DWORD *)(a2 + 32) = v4;
    goto LABEL_9;
  }
  if (*(_BYTE *)(result + 39) != 1 || (v3 = *(unsigned int *)(result + 40), (_DWORD)v3 != *(_DWORD *)(result + 56)))
  {
    v4 = -300;
    goto LABEL_8;
  }
  result = sub_1000E633C(*(_DWORD *)(result + 12), *(unsigned int *)(result + 52), *(UInt8 **)(result + 28), v3);
  *(_DWORD *)(a2 + 32) = result;
LABEL_9:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10017E290(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000E6488(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10017E320(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E6580(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017E398(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E6640(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_10017E410(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E6700(result[3]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *sub_10017E468(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E680C(result[3]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *sub_10017E4C0(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E68CC(result[3]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

uint64_t sub_10017E518(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  NDR_record_t v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    v5 = -300;
    goto LABEL_9;
  }
  result = sub_1000E69A4(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3, (unsigned int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v4 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

_DWORD *sub_10017E5C8(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
  }
  else
  {
    result = (_DWORD *)sub_1000E6AA4(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10017E628(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000E6BC4(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10017E6B8(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777472;
  result = (_DWORD *)sub_1000E6CB8(result[3], (vm_offset_t *)(a2 + 28), (mach_msg_type_number_t *)(a2 + 52));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10017E758(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    v4 = -304;
LABEL_8:
    *(_DWORD *)(a2 + 32) = v4;
    goto LABEL_9;
  }
  if (*(_BYTE *)(result + 39) != 1 || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    v4 = -300;
    goto LABEL_8;
  }
  result = sub_1000E6DF0(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
  *(_DWORD *)(a2 + 32) = result;
LABEL_9:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10017E7E8(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E6ED0(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *sub_10017E848(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_1000E7000(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_10017E8C0(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 56)
  {
    if (*(_BYTE *)(result + 39) == 1)
    {
      v3 = *(_DWORD *)(result + 40);
      if (v3 == *(_DWORD *)(result + 52))
      {
        result = sub_1000E70BC(*(_DWORD *)(result + 12), *(UInt8 **)(result + 28), v3);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
    }
    v4 = -300;
  }
  else
  {
    v4 = -304;
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10017E950(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  void (*v5)(void);
  uint64_t result;

  v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  v4 = a1[5];
  if ((v4 - 69846) >= 0xFFFFFF64
    && (v5 = (void (*)(void))*(&off_1002336B8 + 5 * (v4 - 69690) + 5)) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    result = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

uint64_t sub_10017E9E4(int a1, vm_address_t a2, int a3, int a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, mach_msg_timeout_t a10)
{
  uint64_t v13;
  _BYTE msg[28];
  vm_address_t v16;
  int v17;
  _DWORD v18[4];
  _DWORD v19[4];
  _DWORD v20[8];

  v16 = a2;
  v17 = 27918592;
  v18[0] = a3;
  *(_QWORD *)&v18[1] = a6;
  v18[3] = 27918592;
  v19[0] = a7;
  *(_QWORD *)&v19[1] = a8;
  v19[3] = 27918592;
  v20[0] = a9;
  *(NDR_record_t *)&v20[1] = NDR_record;
  v20[3] = a3;
  v20[4] = a4;
  v20[5] = a5;
  v20[6] = a7;
  v20[7] = a9;
  *(_QWORD *)msg = 0xAAAAAAAA80000013;
  *(_DWORD *)&msg[8] = a1;
  *(_OWORD *)&msg[12] = xmmword_1001BBEC0;
  if (&_voucher_mach_msg_set)
    voucher_mach_msg_set((mach_msg_header_t *)msg);
  v13 = mach_msg((mach_msg_header_t *)msg, 2097169, 0x68u, 0, 0, a10, 0);
  if ((_DWORD)v13 == 268435460)
  {
    if (v16 != a2)
      mig_deallocate(v16, v18[0]);
    if (*(_QWORD *)&v18[1] != a6)
      mig_deallocate(*(vm_address_t *)&v18[1], v19[0]);
    if (*(_QWORD *)&v19[1] != a8)
      mig_deallocate(*(vm_address_t *)&v19[1], v20[0]);
  }
  return v13;
}

uint64_t sub_10017EB00(int a1, vm_address_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, mach_msg_timeout_t timeout)
{
  uint64_t v12;
  _BYTE msg[28];
  vm_address_t v15;
  int v16;
  _DWORD v17[4];
  _DWORD v18[4];
  _DWORD v19[8];

  v15 = a2;
  v16 = 27918592;
  v17[0] = a3;
  *(_QWORD *)&v17[1] = a4;
  v17[3] = 27918592;
  v18[0] = a5;
  *(_QWORD *)&v18[1] = a6;
  v18[3] = 27918592;
  v19[0] = a7;
  *(NDR_record_t *)&v19[1] = NDR_record;
  v19[3] = a3;
  v19[4] = a5;
  v19[5] = a7;
  v19[6] = a8;
  *(_QWORD *)msg = 0xAAAAAAAA80000013;
  *(_DWORD *)&msg[8] = a1;
  *(_OWORD *)&msg[12] = xmmword_1001BBEE0;
  if (&_voucher_mach_msg_set)
    voucher_mach_msg_set((mach_msg_header_t *)msg);
  v12 = mach_msg((mach_msg_header_t *)msg, 2097169, 0x64u, 0, 0, timeout, 0);
  if ((_DWORD)v12 == 268435460)
  {
    if (v15 != a2)
      mig_deallocate(v15, v17[0]);
    if (*(_QWORD *)&v17[1] != a4)
      mig_deallocate(*(vm_address_t *)&v17[1], v18[0]);
    if (*(_QWORD *)&v18[1] != a6)
      mig_deallocate(*(vm_address_t *)&v18[1], v19[0]);
  }
  return v12;
}

uint64_t sub_10017EC18(int a1, vm_address_t a2, int a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8, mach_msg_timeout_t timeout)
{
  uint64_t v12;
  _BYTE msg[28];
  vm_address_t v15;
  int v16;
  _DWORD v17[4];
  _DWORD v18[4];
  _DWORD v19[8];

  v15 = a2;
  v16 = 27918592;
  v17[0] = a3;
  *(_QWORD *)&v17[1] = a5;
  v17[3] = 27918592;
  v18[0] = a6;
  *(_QWORD *)&v18[1] = a7;
  v18[3] = 27918592;
  v19[0] = a8;
  *(NDR_record_t *)&v19[1] = NDR_record;
  v19[3] = a3;
  v19[4] = a4;
  v19[5] = a6;
  v19[6] = a8;
  *(_QWORD *)msg = 0xAAAAAAAA80000013;
  *(_DWORD *)&msg[8] = a1;
  *(_OWORD *)&msg[12] = xmmword_1001BBEF0;
  if (&_voucher_mach_msg_set)
    voucher_mach_msg_set((mach_msg_header_t *)msg);
  v12 = mach_msg((mach_msg_header_t *)msg, 2097169, 0x64u, 0, 0, timeout, 0);
  if ((_DWORD)v12 == 268435460)
  {
    if (v15 != a2)
      mig_deallocate(v15, v17[0]);
    if (*(_QWORD *)&v17[1] != a5)
      mig_deallocate(*(vm_address_t *)&v17[1], v18[0]);
    if (*(_QWORD *)&v18[1] != a7)
      mig_deallocate(*(vm_address_t *)&v18[1], v19[0]);
  }
  return v12;
}

uint64_t sub_10017ED30(int a1, vm_address_t a2, int a3, int a4, uint64_t a5, int a6, mach_msg_timeout_t timeout)
{
  uint64_t v10;
  unint64_t v12;
  int v13;
  __int128 v14;
  vm_address_t v15;
  int v16;
  _DWORD v17[4];
  _DWORD v18[6];

  v15 = a2;
  v16 = 27918592;
  v17[0] = a3;
  *(_QWORD *)&v17[1] = a5;
  v17[3] = 27918592;
  v18[0] = a6;
  *(NDR_record_t *)&v18[1] = NDR_record;
  v18[3] = a3;
  v18[4] = a4;
  v18[5] = a6;
  v12 = 0xAAAAAAAA80000013;
  v13 = a1;
  v14 = xmmword_1001BBF00;
  if (&_voucher_mach_msg_set)
    voucher_mach_msg_set((mach_msg_header_t *)&v12);
  v10 = mach_msg((mach_msg_header_t *)&v12, 2097169, 0x50u, 0, 0, timeout, 0);
  if ((_DWORD)v10 == 268435460)
  {
    if (v15 != a2)
      mig_deallocate(v15, v17[0]);
    if (*(_QWORD *)&v17[1] != a5)
      mig_deallocate(*(vm_address_t *)&v17[1], v18[0]);
  }
  return v10;
}

uint64_t sub_10017EE28(mach_port_t a1, int a2, mach_msg_timeout_t timeout)
{
  mach_msg_header_t msg;
  NDR_record_t v6;
  int v7;

  v6 = NDR_record;
  v7 = a2;
  *(_QWORD *)&msg.msgh_bits = 0xAAAAAAAA00000013;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 96966;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  if (&_voucher_mach_msg_set)
    voucher_mach_msg_set(&msg);
  return mach_msg(&msg, 2097169, 0x24u, 0, 0, timeout, 0);
}

uint64_t sub_10017EEB4(int a1, vm_address_t a2, int a3, uint64_t a4, int a5, int a6, mach_msg_timeout_t timeout)
{
  uint64_t v10;
  unint64_t v12;
  int v13;
  __int128 v14;
  vm_address_t v15;
  int v16;
  _DWORD v17[4];
  _DWORD v18[6];

  v15 = a2;
  v16 = 27918592;
  v17[0] = a3;
  *(_QWORD *)&v17[1] = a4;
  v17[3] = 27918592;
  v18[0] = a5;
  *(NDR_record_t *)&v18[1] = NDR_record;
  v18[3] = a3;
  v18[4] = a5;
  v18[5] = a6;
  v12 = 0xAAAAAAAA80000013;
  v13 = a1;
  v14 = xmmword_1001BBF20;
  if (&_voucher_mach_msg_set)
    voucher_mach_msg_set((mach_msg_header_t *)&v12);
  v10 = mach_msg((mach_msg_header_t *)&v12, 2097169, 0x50u, 0, 0, timeout, 0);
  if ((_DWORD)v10 == 268435460)
  {
    if (v15 != a2)
      mig_deallocate(v15, v17[0]);
    if (*(_QWORD *)&v17[1] != a4)
      mig_deallocate(*(vm_address_t *)&v17[1], v18[0]);
  }
  return v10;
}

uint64_t sub_10017EFAC(int a1, vm_address_t a2, int a3, uint64_t a4, int a5, int a6, mach_msg_timeout_t timeout)
{
  uint64_t v10;
  unint64_t v12;
  int v13;
  __int128 v14;
  vm_address_t v15;
  int v16;
  _DWORD v17[4];
  _DWORD v18[6];

  v15 = a2;
  v16 = 27918592;
  v17[0] = a3;
  *(_QWORD *)&v17[1] = a4;
  v17[3] = 27918592;
  v18[0] = a5;
  *(NDR_record_t *)&v18[1] = NDR_record;
  v18[3] = a3;
  v18[4] = a5;
  v18[5] = a6;
  v12 = 0xAAAAAAAA80000013;
  v13 = a1;
  v14 = xmmword_1001BBF30;
  if (&_voucher_mach_msg_set)
    voucher_mach_msg_set((mach_msg_header_t *)&v12);
  v10 = mach_msg((mach_msg_header_t *)&v12, 2097169, 0x50u, 0, 0, timeout, 0);
  if ((_DWORD)v10 == 268435460)
  {
    if (v15 != a2)
      mig_deallocate(v15, v17[0]);
    if (*(_QWORD *)&v17[1] != a4)
      mig_deallocate(*(vm_address_t *)&v17[1], v18[0]);
  }
  return v10;
}

uint64_t sub_10017F0A4(int a1, vm_address_t a2, int a3, int a4, mach_msg_timeout_t timeout)
{
  uint64_t v7;
  unint64_t v9;
  int v10;
  __int128 v11;
  vm_address_t v12;
  int v13;
  _DWORD v14[6];

  v12 = a2;
  v13 = 27918592;
  v14[0] = a3;
  *(NDR_record_t *)&v14[1] = NDR_record;
  v14[3] = a3;
  v14[4] = a4;
  v9 = 0xAAAAAAAA80000013;
  v10 = a1;
  v11 = xmmword_1001BBF40;
  if (&_voucher_mach_msg_set)
    voucher_mach_msg_set((mach_msg_header_t *)&v9);
  v7 = mach_msg((mach_msg_header_t *)&v9, 2097169, 0x3Cu, 0, 0, timeout, 0);
  if ((_DWORD)v7 == 268435460 && v12 != a2)
    mig_deallocate(v12, v14[0]);
  return v7;
}

uint64_t sub_10017F170(int a1, int a2, vm_address_t a3, int a4, mach_msg_timeout_t timeout)
{
  uint64_t v7;
  unint64_t v9;
  int v10;
  __int128 v11;
  vm_address_t v12;
  int v13;
  _DWORD v14[6];

  v12 = a3;
  v13 = 27918592;
  v14[0] = a4;
  *(NDR_record_t *)&v14[1] = NDR_record;
  v14[3] = a2;
  v14[4] = a4;
  v9 = 0xAAAAAAAA80000013;
  v10 = a1;
  v11 = xmmword_1001BBF50;
  if (&_voucher_mach_msg_set)
    voucher_mach_msg_set((mach_msg_header_t *)&v9);
  v7 = mach_msg((mach_msg_header_t *)&v9, 2097169, 0x3Cu, 0, 0, timeout, 0);
  if ((_DWORD)v7 == 268435460 && v12 != a3)
    mig_deallocate(v12, v14[0]);
  return v7;
}

uint64_t sub_10017F23C(int a1, vm_address_t a2, int a3, mach_msg_timeout_t timeout)
{
  uint64_t v6;
  _BYTE msg[28];
  vm_address_t v9;
  int v10;
  _DWORD v11[4];

  v9 = a2;
  v10 = 27918592;
  v11[0] = a3;
  *(NDR_record_t *)&v11[1] = NDR_record;
  v11[3] = a3;
  *(_QWORD *)msg = 0xAAAAAAAA80000013;
  *(_DWORD *)&msg[8] = a1;
  *(_OWORD *)&msg[12] = xmmword_1001BBF60;
  if (&_voucher_mach_msg_set)
    voucher_mach_msg_set((mach_msg_header_t *)msg);
  v6 = mach_msg((mach_msg_header_t *)msg, 2097169, 0x38u, 0, 0, timeout, 0);
  if ((_DWORD)v6 == 268435460 && v9 != a2)
    mig_deallocate(v9, v11[0]);
  return v6;
}

uint64_t sub_10017F308(mach_port_t a1, int a2, mach_msg_timeout_t timeout)
{
  mach_msg_header_t msg;
  NDR_record_t v6;
  int v7;

  v6 = NDR_record;
  v7 = a2;
  *(_QWORD *)&msg.msgh_bits = 0xAAAAAAAA00000013;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 96972;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  if (&_voucher_mach_msg_set)
    voucher_mach_msg_set(&msg);
  return mach_msg(&msg, 2097169, 0x24u, 0, 0, timeout, 0);
}

uint64_t sub_10017F394(int a1, vm_address_t a2, int a3, mach_msg_timeout_t timeout)
{
  uint64_t v6;
  _BYTE msg[28];
  vm_address_t v9;
  int v10;
  _DWORD v11[4];

  v9 = a2;
  v10 = 27918592;
  v11[0] = a3;
  *(NDR_record_t *)&v11[1] = NDR_record;
  v11[3] = a3;
  *(_QWORD *)msg = 0xAAAAAAAA80000013;
  *(_DWORD *)&msg[8] = a1;
  *(_OWORD *)&msg[12] = xmmword_1001BBF70;
  if (&_voucher_mach_msg_set)
    voucher_mach_msg_set((mach_msg_header_t *)msg);
  v6 = mach_msg((mach_msg_header_t *)msg, 2097169, 0x38u, 0, 0, timeout, 0);
  if ((_DWORD)v6 == 268435460 && v9 != a2)
    mig_deallocate(v9, v11[0]);
  return v6;
}

uint64_t netrbInitIfnetTrafficDescriptor(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v10;
  xpc_object_t value;
  void *v13;
  xpc_object_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  xpc_object_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  xpc_object_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  xpc_object_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  xpc_object_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *string_ptr;
  xpc_object_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  char v87;
  xpc_object_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;

  if (!a1 || xpc_get_type(a1) != (xpc_type_t)&_xpc_type_dictionary)
  {
    v10 = "metadata is not dictionary object";
LABEL_4:
    NETRBErrorLog((uint64_t)v10, a2, a3, a4, a5, a6, a7, a8, v106);
    return 0;
  }
  value = xpc_dictionary_get_value(a1, netrbClientLowLatencyFlowParam);
  if (!value || (v13 = value, xpc_get_type(value) != (xpc_type_t)&_xpc_type_dictionary))
  {
    v10 = "metadata does not contain low latency flow parameter dictionary.";
    goto LABEL_4;
  }
  v108 = 0uLL;
  v107 = 0uLL;
  v14 = xpc_dictionary_get_value(v13, netrbClientIfnetTrafficDescriptorIpVersion);
  if (v14 && (v22 = v14, xpc_get_type(v14) == (xpc_type_t)&_xpc_type_uint64))
  {
    v58 = xpc_uint64_get_value(v22);
    v66 = v58;
    if (v58 != 4 && v58 != 96)
    {
      NETRBErrorLog((uint64_t)"IP version (%hhu) is not supported or is invalid", v59, v60, v61, v62, v63, v64, v65, v58);
      return 0;
    }
    if (a2)
    {
      *(_BYTE *)(a2 + 8) |= 1u;
      *(_BYTE *)(a2 + 9) = v58;
    }
    v67 = xpc_dictionary_get_value(v13, netrbClientIfnetTrafficDescriptorLocalIp);
    if (v67 && (v75 = v67, xpc_get_type(v67) == (xpc_type_t)&_xpc_type_string))
    {
      string_ptr = xpc_string_get_string_ptr(v75);
      if (a2)
        *(_BYTE *)(a2 + 8) |= 4u;
    }
    else
    {
      NETRBInfoLog((uint64_t)"local IP is not present or has incorrect type", v68, v69, v70, v71, v72, v73, v74, v106);
      string_ptr = 0;
    }
    v77 = xpc_dictionary_get_value(v13, netrbClientIfnetTrafficDescriptorRemoteIp);
    if (v77 && (v85 = v77, xpc_get_type(v77) == (xpc_type_t)&_xpc_type_string))
    {
      v86 = xpc_string_get_string_ptr(v85);
      if (a2)
        *(_BYTE *)(a2 + 8) |= 8u;
    }
    else
    {
      NETRBInfoLog((uint64_t)"remote IP is not present or has incorrect type", v78, v79, v80, v81, v82, v83, v84, v106);
      v86 = 0;
    }
    if (v66 == 4)
    {
      if (string_ptr && inet_pton(2, string_ptr, (char *)&v108 + 12) != 1
        || v86 && inet_pton(2, v86, (char *)&v107 + 12) != 1)
      {
        v10 = "local or remote IPv4 address is malformed.";
        goto LABEL_4;
      }
      if (a2)
      {
        *(_DWORD *)(a2 + 24) = HIDWORD(v108);
        *(_DWORD *)(a2 + 40) = HIDWORD(v107);
      }
    }
    else
    {
      if (string_ptr && inet_pton(30, string_ptr, &v108) != 1 || v86 && inet_pton(30, v86, &v107) != 1)
      {
        v10 = "local or remote IPv6 address is malformed.";
        goto LABEL_4;
      }
      if (a2)
      {
        *(_OWORD *)(a2 + 12) = v108;
        *(_OWORD *)(a2 + 28) = v107;
      }
    }
  }
  else
  {
    NETRBErrorLog((uint64_t)"IP version is not present", v15, v16, v17, v18, v19, v20, v21, v106);
  }
  v23 = xpc_dictionary_get_value(v13, netrbClientIfnetTrafficDescriptorIpProtocol);
  if (v23 && (v31 = v23, xpc_get_type(v23) == (xpc_type_t)&_xpc_type_uint64))
  {
    v87 = xpc_uint64_get_value(v31);
    if (v87 != 17 && v87 != 6)
    {
      v10 = "IP protocol is not supported or is invalid.";
      goto LABEL_4;
    }
    if (a2)
    {
      *(_BYTE *)(a2 + 8) |= 2u;
      *(_BYTE *)(a2 + 10) = v87;
    }
  }
  else
  {
    NETRBInfoLog((uint64_t)"IP protocol is not present or has incorrect type", v24, v25, v26, v27, v28, v29, v30, v106);
  }
  v32 = xpc_dictionary_get_value(v13, netrbClientIfnetTrafficDescriptorLocalPort);
  if (v32)
  {
    v40 = v32;
    if (xpc_get_type(v32) != (xpc_type_t)&_xpc_type_uint64)
    {
LABEL_22:
      v10 = "Local port specified does not have UINT64 type.";
      goto LABEL_4;
    }
    v41 = xpc_uint64_get_value(v40);
    if (v41 - 0x10000 < 0xFFFFFFFFFFFF0001)
    {
      NETRBErrorLog((uint64_t)"Illegal local port %llu", v42, v43, v44, v45, v46, v47, v48, v41);
      return 0;
    }
    if (a2)
    {
      *(_BYTE *)(a2 + 8) |= 0x10u;
      *(_WORD *)(a2 + 44) = bswap32(v41) >> 16;
    }
  }
  else
  {
    NETRBInfoLog((uint64_t)"No local port specified.", v33, v34, v35, v36, v37, v38, v39, v106);
  }
  v49 = xpc_dictionary_get_value(v13, netrbClientIfnetTrafficDescriptorRemotePort);
  if (v49)
  {
    v57 = v49;
    if (xpc_get_type(v49) != (xpc_type_t)&_xpc_type_uint64)
      goto LABEL_22;
    v91 = xpc_uint64_get_value(v57);
    if (v91 - 0x10000 < 0xFFFFFFFFFFFF0001)
    {
      NETRBErrorLog((uint64_t)"Illegal remote port %llu", v92, v93, v94, v95, v96, v97, v98, v91);
      return 0;
    }
    if (a2)
    {
      *(_BYTE *)(a2 + 8) |= 0x20u;
      *(_WORD *)(a2 + 46) = bswap32(v91) >> 16;
    }
  }
  else
  {
    NETRBErrorLog((uint64_t)"No local port specified.", v50, v51, v52, v53, v54, v55, v56, v106);
  }
  v89 = xpc_dictionary_get_value(v13, netrbClientIfnetTrafficDescriptorConnectionIdleTimeout);
  if (v89)
  {
    v90 = v89;
    if (xpc_get_type(v89) != (xpc_type_t)&_xpc_type_uint64)
    {
      v10 = "Connection idle timeout does not have UINT64 type.";
      goto LABEL_4;
    }
    if (xpc_uint64_get_value(v90) >= 0x69781)
    {
      NETRBErrorLog((uint64_t)"Connection idle timeout exceeds max limit of %u seconds", v99, v100, v101, v102, v103, v104, v105, 432000);
      return 0;
    }
  }
  return 1;
}

_QWORD *_NETRBClientCreateInternal(NSObject *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t Instance;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  int *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  _QWORD block[10];
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v34 = 0;
  v35 = &v34;
  v36 = 0x2000000000;
  v37 = 0;
  v30 = 0;
  v31 = &v30;
  v32 = 0x2000000000;
  v33 = 2000;
  v7 = 0;
  if (NETRBLogCreate())
    goto LABEL_2;
  if (qword_10026DCA8 != -1)
    dispatch_once(&qword_10026DCA8, &stru_1002355C8);
  Instance = _CFRuntimeCreateInstance(kCFAllocatorDefault);
  v7 = (_QWORD *)Instance;
  if (!Instance)
  {
    v18 = __error();
    v19 = strerror(*v18);
    NETRBErrorLog((uint64_t)"unable to create client object %s", v20, v21, v22, v23, v24, v25, v26, (uint64_t)v19);
    goto LABEL_2;
  }
  bzero((void *)(Instance + 16), 0x218uLL);
  if (a1)
  {
    v7[2] = a1;
    dispatch_retain(a1);
    if (a2)
      v7[3] = _Block_copy(a2);
  }
  if (qword_10026DCB8 != -1)
    dispatch_once(&qword_10026DCB8, &stru_100235668);
  v17 = qword_10026DCC0;
  if (qword_10026DCC0)
  {
    if (qword_10026DCC8 != -1)
      dispatch_once(&qword_10026DCC8, &stru_1002356A8);
    if (qword_10026DCD0)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000;
      block[2] = sub_10017FB24;
      block[3] = &unk_100234F68;
      block[6] = v7;
      block[7] = qword_10026DCD0;
      block[4] = &v34;
      block[5] = &v30;
      block[8] = v17;
      block[9] = a4;
      dispatch_sync(v17, block);
      if (*((_BYTE *)v35 + 24) && (v31[3] | 2) == 0x7D2)
        *((_BYTE *)v35 + 24) = 0;
      goto LABEL_22;
    }
    v27 = "unable to create XPC queue";
  }
  else
  {
    v27 = "unable to create framework queue";
  }
  NETRBErrorLog((uint64_t)v27, v10, v11, v12, v13, v14, v15, v16, v28);
LABEL_22:
  if (!*((_BYTE *)v35 + 24))
  {
    CFRelease(v7);
    v7 = 0;
  }
LABEL_2:
  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v34, 8);
  return v7;
}

void sub_10017FB24(uint64_t a1)
{
  const void *v2;
  __CFArray *v3;
  xpc_object_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _QWORD v53[4];
  __int128 v54;
  uint64_t v55;

  v2 = *(const void **)(a1 + 48);
  v3 = (__CFArray *)qword_10026DCA0;
  if (!qword_10026DCA0)
  {
    v14 = *(NSObject **)(a1 + 56);
    v13 = *(NSObject **)(a1 + 64);
    qword_10026DCA0 = (uint64_t)CFArrayCreateMutable(kCFAllocatorDefault, 0, 0);
    if (!qword_10026DCA0)
    {
      v43 = __error();
      v52 = strerror(*v43);
      v42 = "unable to create client list %s";
      goto LABEL_12;
    }
    if (NETRBXPCCreate(v14, (uint64_t)v13, v15, v16, v17, v18, v19, v20))
    {
      if (NETRBXPCEndPointCreate(v13, v21, v22, v23, v24, v25, v26, v27))
      {
        v3 = (__CFArray *)qword_10026DCA0;
        goto LABEL_2;
      }
      v44 = NETRBErrorLog((uint64_t)"unable to create xpc endpoint connection", v28, v29, v30, v31, v32, v33, v34, (uint64_t)v52);
      NETRBXPCCleanup(v44, v45, v46, v47, v48, v49, v50, v51);
    }
    else
    {
      NETRBErrorLog((uint64_t)"unable to create xpc connnection to daemon", v21, v22, v23, v24, v25, v26, v27, (uint64_t)v52);
    }
    CFRelease((CFTypeRef)qword_10026DCA0);
    qword_10026DCA0 = 0;
    goto LABEL_16;
  }
LABEL_2:
  CFArrayAppendValue(v3, v2);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  v4 = xpc_dictionary_create(0, 0, 0);
  if (!v4)
  {
    sub_10017FCF0(*(const void **)(a1 + 48));
    v42 = "xpc_dictionary_create() failed";
LABEL_12:
    NETRBErrorLog((uint64_t)v42, v35, v36, v37, v38, v39, v40, v41, (uint64_t)v52);
LABEL_16:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    return;
  }
  v5 = v4;
  xpc_dictionary_set_uint64(v4, off_10026D390, 0x3E8uLL);
  NETRBInfoLog((uint64_t)"client %p xpc send -> client create", v6, v7, v8, v9, v10, v11, v12, *(_QWORD *)(a1 + 48));
  v53[0] = _NSConcreteStackBlock;
  v53[1] = 0x40000000;
  v53[2] = sub_10017FD88;
  v53[3] = &unk_100234F40;
  v54 = *(_OWORD *)(a1 + 40);
  v55 = *(_QWORD *)(a1 + 72);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v5, (uint64_t)v53);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_10017FCF0(*(const void **)(a1 + 48));
  xpc_release(v5);
}

void sub_10017FCF0(const void *a1)
{
  CFIndex v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (qword_10026DCA0 && CFArrayGetCount((CFArrayRef)qword_10026DCA0) >= 1)
  {
    v2 = 0;
    while (CFArrayGetValueAtIndex((CFArrayRef)qword_10026DCA0, v2) != a1)
    {
      if (++v2 >= CFArrayGetCount((CFArrayRef)qword_10026DCA0))
        return;
    }
    CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_10026DCA0, v2);
    if (!CFArrayGetCount((CFArrayRef)qword_10026DCA0))
    {
      v10 = NETRBXPCCleanup(0, v3, v4, v5, v6, v7, v8, v9);
      NETRBEndPointCleanup(v10, v11, v12, v13, v14, v15, v16, v17);
      CFRelease((CFTypeRef)qword_10026DCA0);
      qword_10026DCA0 = 0;
    }
  }
}

void sub_10017FD88(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  const char *string;

  NETRBInfoLog((uint64_t)"client %p create xpc response received", (uint64_t)a2, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40));
  if (!a2)
    goto LABEL_6;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = xpc_dictionary_get_uint64(a2, off_10026D3F0);
  if (*(_QWORD *)(a1 + 48))
    **(_DWORD **)(a1 + 48) = xpc_dictionary_get_uint64(a2, off_10026D3E0);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 2001
    || (v10 = (char *)(*(_QWORD *)(a1 + 40) + 32),
        string = xpc_dictionary_get_string(a2, off_10026D398),
        snprintf(v10, 0x100uLL, "%s", string),
        *(_BYTE *)(*(_QWORD *)(a1 + 40) + 288) = 1,
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 2001))
  {
LABEL_6:
    sub_10017FCF0(*(const void **)(a1 + 40));
  }
}

_QWORD *_NETRBClientCreate(NSObject *a1, const void *a2, uint64_t a3)
{
  return _NETRBClientCreateInternal(a1, a2, a3, 0);
}

uint64_t _NETRBClientDestroy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD block[7];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;

  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 2000;
  if (!a1)
  {
    v9 = "client handle cannot be NULL";
LABEL_9:
    NETRBErrorLog((uint64_t)v9, a2, a3, a4, a5, a6, a7, a8, v12);
    goto LABEL_10;
  }
  if (qword_10026DCB8 != -1)
    dispatch_once(&qword_10026DCB8, &stru_100235668);
  if (!qword_10026DCC0)
  {
    v9 = "unable to create framework queue";
    goto LABEL_9;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10017FFC8;
  block[3] = &unk_100234FB8;
  block[4] = &v18;
  block[5] = &v14;
  block[6] = a1;
  dispatch_sync((dispatch_queue_t)qword_10026DCC0, block);
  if (*((_BYTE *)v19 + 24))
    *((_BYTE *)v19 + 24) = v15[3] == 2001;
LABEL_10:
  v10 = *((unsigned __int8 *)v19 + 24);
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);
  return v10;
}

void sub_10017FFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  xpc_object_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];
  __int128 v34;

  if (sub_100180114(*(_BYTE **)(a1 + 48), a2, a3, a4, a5, a6, a7, a8))
  {
    NETRBErrorLog((uint64_t)"invalid client %p", v9, v10, v11, v12, v13, v14, v15, *(_QWORD *)(a1 + 48));
LABEL_3:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    return;
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 48) + 288) = 0;
  v16 = xpc_dictionary_create(0, 0, 0);
  if (!v16)
  {
    NETRBErrorLog((uint64_t)"xpc_dictionary_create() failed", v17, v18, v19, v20, v21, v22, v23, v32);
    sub_10017FCF0(*(const void **)(a1 + 48));
    CFRelease(*(CFTypeRef *)(a1 + 48));
    goto LABEL_3;
  }
  v24 = v16;
  xpc_dictionary_set_uint64(v16, off_10026D390, 0x3F4uLL);
  xpc_dictionary_set_string(v24, off_10026D398, (const char *)(*(_QWORD *)(a1 + 48) + 32));
  NETRBInfoLog((uint64_t)"client %p xpc send -> destroy client", v25, v26, v27, v28, v29, v30, v31, *(_QWORD *)(a1 + 48));
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 0x40000000;
  v33[2] = sub_1001801DC;
  v33[3] = &unk_100234F90;
  v34 = *(_OWORD *)(a1 + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v24, (uint64_t)v33);
  xpc_release(v24);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    sub_10017FCF0(*(const void **)(a1 + 48));
    CFRelease(*(CFTypeRef *)(a1 + 48));
  }
}

uint64_t sub_100180114(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  const char *v12;
  uint64_t v14;

  if (!a1)
  {
    v12 = "client handler is NULL";
LABEL_14:
    NETRBNoticeLog((uint64_t)v12, a2, a3, a4, a5, a6, a7, a8, v14);
    return 22;
  }
  if (!a1[288])
    return 22;
  if (!qword_10026DCA0)
  {
    v12 = "client list is empty";
    goto LABEL_14;
  }
  Count = CFArrayGetCount((CFArrayRef)qword_10026DCA0);
  if (!Count)
  {
    v12 = "client is not added to the list";
    goto LABEL_14;
  }
  v10 = Count;
  if (Count < 1)
  {
    v12 = "unknown client";
    goto LABEL_14;
  }
  v11 = 0;
  v12 = "unknown client";
  while (CFArrayGetValueAtIndex((CFArrayRef)qword_10026DCA0, v11) != a1)
  {
    if (v10 == ++v11)
      goto LABEL_14;
  }
  return 0;
}

void sub_1001801DC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NETRBInfoLog((uint64_t)"client %p destroy xpc response received", (uint64_t)a2, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40));
  if (a2)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = xpc_dictionary_get_uint64(a2, off_10026D3F0);
  sub_10017FCF0(*(const void **)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t _NETRBClientStartService(uint64_t a1, char *__s1, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  const char *v9;
  int v10;
  xpc_object_t v14;
  void *v15;
  const char *v16;
  xpc_object_t value;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v23;
  xpc_object_t v24;
  void *v25;
  xpc_object_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  xpc_object_t v30;
  void *v31;
  const char *string_ptr;
  const char *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  xpc_object_t v37;
  void *v38;
  const char *v39;
  const char *v40;
  xpc_object_t v41;
  void *v42;
  const char *v43;
  const char *v44;
  xpc_object_t v45;
  void *v46;
  const char *v47;
  const char *v48;
  xpc_object_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  void *v67;
  xpc_object_t v68;
  void *v69;
  xpc_object_t v70;
  xpc_object_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  const char *v81;
  const char *v82;
  xpc_object_t v83;
  void *v84;
  const char *v85;
  const char *v86;
  char *v87;
  _QWORD block[9];
  int v89;
  int v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  char v94;

  v91 = 0;
  v92 = &v91;
  v93 = 0x2000000000;
  v94 = 0;
  if (!a1)
  {
    v9 = "client handle cannot be NULL";
LABEL_24:
    NETRBErrorLog((uint64_t)v9, (uint64_t)__s1, a3, a4, (uint64_t)a5, a6, a7, a8, (uint64_t)v87);
    goto LABEL_25;
  }
  v8 = a3;
  if ((a3 - 205) <= 0xFFFFFFFA)
  {
    NETRBErrorLog((uint64_t)"incorrect operation mode %d", (uint64_t)__s1, a3, a4, (uint64_t)a5, a6, a7, a8, a3);
    goto LABEL_25;
  }
  v10 = a4;
  if ((a4 - 304) <= 0xFFFFFFFB)
  {
    NETRBErrorLog((uint64_t)"incorrect bridge type %d", (uint64_t)__s1, a3, a4, (uint64_t)a5, a6, a7, a8, a4);
    goto LABEL_25;
  }
  if (__s1 && *__s1 && strncmp(__s1, netrbClientAnyExternal, 0x10uLL) && !if_nametoindex(__s1))
  {
    v87 = __s1;
    v9 = "incorrect external interface name %s";
    goto LABEL_24;
  }
  v14 = xpc_dictionary_create(0, 0, 0);
  if (!v14)
  {
    v9 = "xpc_dictionary_create() failed";
    goto LABEL_24;
  }
  v15 = v14;
  if (!a5 || xpc_get_type(a5) != (xpc_type_t)&_xpc_type_dictionary)
  {
    v16 = "incorrect interface object";
LABEL_20:
    NETRBErrorLog((uint64_t)v16, (uint64_t)__s1, a3, a4, (uint64_t)a5, a6, a7, a8, (uint64_t)v87);
LABEL_21:
    v20 = v15;
LABEL_22:
    xpc_release(v20);
    goto LABEL_25;
  }
  value = xpc_dictionary_get_value(a5, netrbClientDeviceType);
  if (!value
    || (v18 = value, xpc_get_type(value) != (xpc_type_t)&_xpc_type_uint64)
    || (v19 = xpc_uint64_get_value(v18), v19 >= 7))
  {
    v16 = "device type is incorrect";
    goto LABEL_20;
  }
  v23 = v19;
  xpc_dictionary_set_uint64(v15, off_10026D468, v19);
  if (v23 != 1)
  {
    v26 = xpc_dictionary_get_value(a5, netrbClientInterfaceName);
    if (!v26
      || (v27 = v26, xpc_get_type(v26) != (xpc_type_t)&_xpc_type_string)
      || (string_ptr = xpc_string_get_string_ptr(v27), !if_nametoindex(string_ptr)))
    {
      v16 = "interface name is incorrect";
      goto LABEL_20;
    }
    v33 = off_10026D460;
    v34 = xpc_string_get_string_ptr(v27);
    xpc_dictionary_set_string(v15, v33, v34);
  }
  v24 = xpc_dictionary_get_value(a5, netrbClientInterfaceMTU);
  if (v24)
  {
    v25 = v24;
    if (xpc_get_type(v24) != (xpc_type_t)&_xpc_type_uint64)
    {
      v16 = "incorrect format for interface mtu";
      goto LABEL_20;
    }
    v28 = off_10026D478;
    v29 = xpc_uint64_get_value(v25);
    xpc_dictionary_set_uint64(v15, v28, v29);
  }
  v30 = xpc_dictionary_get_value(a5, netrbClientInterfaceInstance);
  if (v30)
  {
    v31 = v30;
    if (xpc_get_type(v30) != (xpc_type_t)&_xpc_type_uint64)
    {
      v16 = "incorrect format for interface instance";
      goto LABEL_20;
    }
    v35 = off_10026D480;
    v36 = xpc_uint64_get_value(v31);
    xpc_dictionary_set_uint64(v15, v35, v36);
  }
  v37 = xpc_dictionary_get_value(a5, netrbClientInterfaceStartAddress);
  if (v37)
  {
    v38 = v37;
    if (xpc_get_type(v37) != (xpc_type_t)&_xpc_type_string)
    {
      v16 = "incorrect format for interface start address";
      goto LABEL_20;
    }
    v39 = off_10026D488;
    v40 = xpc_string_get_string_ptr(v38);
    xpc_dictionary_set_string(v15, v39, v40);
  }
  v41 = xpc_dictionary_get_value(a5, netrbClientInterfaceEndAddress);
  if (v41)
  {
    v42 = v41;
    if (xpc_get_type(v41) != (xpc_type_t)&_xpc_type_string)
    {
      v16 = "incorrect format for interface end address";
      goto LABEL_20;
    }
    v43 = off_10026D490;
    v44 = xpc_string_get_string_ptr(v42);
    xpc_dictionary_set_string(v15, v43, v44);
  }
  v45 = xpc_dictionary_get_value(a5, netrbClientInterfaceNetworkMask);
  if (v45)
  {
    v46 = v45;
    if (xpc_get_type(v45) != (xpc_type_t)&_xpc_type_string)
    {
      v16 = "incorrect format for interface network mask";
      goto LABEL_20;
    }
    v47 = off_10026D498;
    v48 = xpc_string_get_string_ptr(v46);
    xpc_dictionary_set_string(v15, v47, v48);
  }
  v49 = xpc_dictionary_get_value(a5, netrbClientNatType);
  if (!v49)
  {
    if (v8 != 201)
    {
      xpc_dictionary_set_uint64(v15, off_10026D4B0, 0x1F5uLL);
LABEL_62:
      v67 = 0;
      goto LABEL_63;
    }
    xpc_dictionary_set_uint64(v15, off_10026D4B0, 0x1F4uLL);
LABEL_57:
    if (!sub_1001808D8(a5, v15))
      goto LABEL_21;
    goto LABEL_62;
  }
  v50 = v49;
  if (xpc_get_type(v49) != (xpc_type_t)&_xpc_type_uint64)
  {
    v16 = "incorrect format for nat type";
    goto LABEL_20;
  }
  v58 = xpc_uint64_get_value(v50);
  v66 = v58;
  if ((v58 - 503) <= 0xFFFFFFFC)
  {
    NETRBErrorLog((uint64_t)"incorrect nat type %d", v59, v60, v61, v62, v63, v64, v65, v58);
    goto LABEL_21;
  }
  xpc_dictionary_set_uint64(v15, off_10026D4B0, v58);
  if (v66 == 500)
    goto LABEL_57;
  if (v66 != 502)
    goto LABEL_62;
  v68 = xpc_dictionary_get_value(a5, netrbClientNat64Param);
  if (!v68)
    goto LABEL_62;
  v69 = v68;
  if (xpc_get_type(v68) != (xpc_type_t)&_xpc_type_dictionary)
  {
    v16 = "incorrect format for nat64 param dictionary";
    goto LABEL_20;
  }
  v70 = xpc_dictionary_create(0, 0, 0);
  if (!v70)
  {
    v16 = "xpc_dictionary_create() failed for NAT64 dictionary";
    goto LABEL_20;
  }
  v67 = v70;
  v71 = xpc_dictionary_get_value(v69, netrbClientDns64Prefix);
  if (v71)
  {
    v72 = v71;
    if (xpc_get_type(v71) != (xpc_type_t)&_xpc_type_string)
    {
      v80 = "incorrect format for dns64 prefix";
LABEL_84:
      NETRBErrorLog((uint64_t)v80, v73, v74, v75, v76, v77, v78, v79, (uint64_t)v87);
      xpc_release(v15);
LABEL_69:
      v20 = v67;
      goto LABEL_22;
    }
    v81 = off_10026D4C8;
    v82 = xpc_string_get_string_ptr(v72);
    xpc_dictionary_set_string(v67, v81, v82);
  }
  v83 = xpc_dictionary_get_value(v69, netrbClientRaPrefix);
  if (v83)
  {
    v84 = v83;
    if (xpc_get_type(v83) != (xpc_type_t)&_xpc_type_string)
    {
      v80 = "incorrect format for NAT64 RA prefix";
      goto LABEL_84;
    }
    v85 = off_10026D4D0;
    v86 = xpc_string_get_string_ptr(v84);
    xpc_dictionary_set_string(v67, v85, v86);
  }
  xpc_dictionary_set_value(v15, off_10026D4B8, v67);
LABEL_63:
  if (qword_10026DCB8 != -1)
    dispatch_once(&qword_10026DCB8, &stru_100235668);
  if (qword_10026DCC0)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_1001809A0;
    block[3] = &unk_100235000;
    block[4] = &v91;
    block[5] = a1;
    v89 = v8;
    v90 = v10;
    block[6] = v15;
    block[7] = __s1;
    block[8] = qword_10026DCC0;
    dispatch_sync((dispatch_queue_t)qword_10026DCC0, block);
  }
  else
  {
    NETRBErrorLog((uint64_t)"unable to create framework queue", v51, v52, v53, v54, v55, v56, v57, (uint64_t)v87);
  }
  xpc_release(v15);
  if (v67)
    goto LABEL_69;
LABEL_25:
  v21 = *((unsigned __int8 *)v92 + 24);
  _Block_object_dispose(&v91, 8);
  return v21;
}

uint64_t sub_1001808D8(void *a1, void *a2)
{
  xpc_object_t value;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *string;
  const char *v15;
  xpc_object_t v16;
  uint64_t v17;

  value = xpc_dictionary_get_value(a1, netrbClientNat66Param);
  if (value)
  {
    v4 = value;
    if (xpc_get_type(value) != (xpc_type_t)&_xpc_type_dictionary)
    {
      v12 = "incorrect format for nat66 param dictionary";
LABEL_4:
      NETRBErrorLog((uint64_t)v12, v5, v6, v7, v8, v9, v10, v11, v17);
      return 0;
    }
    string = xpc_dictionary_get_string(v4, netrbClientRaPrefix);
    if (!string)
    {
      v12 = "NAT66 RA prefix is invalid/missing";
      goto LABEL_4;
    }
    v15 = string;
    v16 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v16, off_10026D4D0, v15);
    xpc_dictionary_set_value(a2, off_10026D4C0, v16);
  }
  return 1;
}

double sub_1001809A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  const char *v17;
  xpc_object_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  void *v28;
  const char *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];

  if (sub_100180114(*(_BYTE **)(a1 + 40), a2, a3, a4, a5, a6, a7, a8))
  {
    NETRBErrorLog((uint64_t)"invalid client %p", v9, v10, v11, v12, v13, v14, v15, *(_QWORD *)(a1 + 40));
LABEL_6:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    return result;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 289))
  {
    v17 = "client already started a service";
LABEL_5:
    NETRBErrorLog((uint64_t)v17, v9, v10, v11, v12, v13, v14, v15, v32);
    goto LABEL_6;
  }
  v18 = xpc_dictionary_create(0, 0, 0);
  if (!v18)
  {
    v17 = "xpc_dictionary_create() failed";
    goto LABEL_5;
  }
  v19 = v18;
  xpc_dictionary_set_uint64(v18, off_10026D390, 0x3E9uLL);
  xpc_dictionary_set_string(v19, off_10026D398, (const char *)(*(_QWORD *)(a1 + 40) + 32));
  xpc_dictionary_set_uint64(v19, off_10026D3F8, *(unsigned int *)(a1 + 72));
  xpc_dictionary_set_uint64(v19, off_10026D400, *(unsigned int *)(a1 + 76));
  xpc_dictionary_set_value(v19, off_10026D458, *(xpc_object_t *)(a1 + 48));
  v27 = *(const char **)(a1 + 56);
  if (v27 && *v27)
  {
    if (!strncmp(*(const char **)(a1 + 56), netrbClientAnyExternal, 0x10uLL))
    {
      v29 = off_10026D4A8;
      v28 = v19;
    }
    else
    {
      v28 = v19;
      v29 = v27;
    }
    xpc_dictionary_set_string(v28, off_10026D418, v29);
  }
  NETRBInfoLog((uint64_t)"client %p xpc send -> start service", v20, v21, v22, v23, v24, v25, v26, *(_QWORD *)(a1 + 40));
  snprintf((char *)(*(_QWORD *)(a1 + 40) + 289), 0x100uLL, "%s-%p-%u", "com.apple.netrb", *(const void **)(a1 + 40), dword_10026DC98);
  ++dword_10026DC98;
  v30 = *(NSObject **)(a1 + 64);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 0x40000000;
  v33[2] = sub_100180BE8;
  v33[3] = &unk_100234FD8;
  v33[4] = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(v30, v19, (uint64_t)v33);
  xpc_release(v19);
  v31 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    CFRetain((CFTypeRef)v31);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(v31 + 513) = 0u;
    *(_OWORD *)(v31 + 529) = 0u;
    *(_OWORD *)(v31 + 481) = 0u;
    *(_OWORD *)(v31 + 497) = 0u;
    *(_OWORD *)(v31 + 449) = 0u;
    *(_OWORD *)(v31 + 465) = 0u;
    *(_OWORD *)(v31 + 417) = 0u;
    *(_OWORD *)(v31 + 433) = 0u;
    *(_OWORD *)(v31 + 385) = 0u;
    *(_OWORD *)(v31 + 401) = 0u;
    *(_OWORD *)(v31 + 353) = 0u;
    *(_OWORD *)(v31 + 369) = 0u;
    *(_OWORD *)(v31 + 321) = 0u;
    *(_OWORD *)(v31 + 337) = 0u;
    *(_OWORD *)(v31 + 289) = 0u;
    *(_OWORD *)(v31 + 305) = 0u;
  }
  return result;
}

void sub_100180BE8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100180BFC(*(_QWORD **)(a1 + 32), 1001, a2, *(_QWORD *)(a1 + 32) + 289, a5, a6, a7, a8);
}

void sub_100180BFC(_QWORD *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  const char *v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t uint64;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD block[7];
  int v45;

  v10 = a2;
  NETRBInfoLog((uint64_t)"client %p %s xpc response received", a2, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)a1);
  if (sub_100180114(a1, v12, v13, v14, v15, v16, v17, v18))
  {
    v26 = "client already destroyed";
LABEL_9:
    NETRBDebugLog((uint64_t)v26, v19, v20, v21, v22, v23, v24, v25, v43);
LABEL_10:
    CFRelease(a1);
    return;
  }
  if (!a1[2] || !a1[3])
  {
    v26 = "no queue or handler block to send response";
    goto LABEL_9;
  }
  if (!a3)
  {
    v34 = xpc_dictionary_create(0, 0, 0);
    if (v34)
    {
LABEL_15:
      v36 = netrbClientNotificationKey;
      v37 = v34;
      v38 = 5003;
LABEL_16:
      xpc_dictionary_set_uint64(v37, v36, v38);
      goto LABEL_17;
    }
LABEL_18:
    NETRBErrorLog((uint64_t)"xpc_dictionary_create() failed", v27, v28, v29, v30, v31, v32, v33, v43);
    goto LABEL_10;
  }
  if (xpc_dictionary_get_uint64(a3, off_10026D3F0) == 2003)
  {
    v26 = "service object destroyed before service completed";
    goto LABEL_9;
  }
  v35 = xpc_dictionary_create(0, 0, 0);
  if (!v35)
    goto LABEL_18;
  v34 = v35;
  if (xpc_dictionary_get_uint64(a3, off_10026D3F0) == 2002)
    goto LABEL_15;
  uint64 = xpc_dictionary_get_uint64(a3, off_10026D3F0);
  if (uint64 == 2001)
    v41 = 5002;
  else
    v41 = 5003;
  xpc_dictionary_set_uint64(v34, netrbClientNotificationKey, v41);
  if (v10 != 1014 || uint64 != 2000)
  {
    if (v10 == 1014 && uint64 == 2001)
      sub_100184E2C(v34, a3);
    goto LABEL_17;
  }
  v42 = xpc_dictionary_get_uint64(a3, off_10026D3E0);
  if (v42)
  {
    v38 = v42;
    v36 = netrbClientErrorCode;
    v37 = v34;
    goto LABEL_16;
  }
LABEL_17:
  v39 = a1[2];
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100185010;
  block[3] = &unk_1002356F0;
  v45 = v10;
  block[4] = a1;
  block[5] = a4;
  block[6] = v34;
  dispatch_async(v39, block);
}

uint64_t _NETRBClientStopService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD block[7];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;

  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  if (!a1)
  {
    v9 = "client handle cannot be NULL";
LABEL_8:
    NETRBErrorLog((uint64_t)v9, a2, a3, a4, a5, a6, a7, a8, v12);
    goto LABEL_9;
  }
  if (qword_10026DCB8 != -1)
    dispatch_once(&qword_10026DCB8, &stru_100235668);
  if (!qword_10026DCC0)
  {
    v9 = "unable to create framework queue";
    goto LABEL_8;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100180F0C;
  block[3] = &unk_100235048;
  block[4] = &v14;
  block[5] = a1;
  block[6] = qword_10026DCC0;
  dispatch_sync((dispatch_queue_t)qword_10026DCC0, block);
LABEL_9:
  v10 = *((unsigned __int8 *)v15 + 24);
  _Block_object_dispose(&v14, 8);
  return v10;
}

void sub_100180F0C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  xpc_object_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  NSObject *v27;
  uint64_t v28;
  _QWORD v29[5];

  if (sub_100180114((_BYTE *)a1[5], a2, a3, a4, a5, a6, a7, a8))
  {
    v28 = a1[5];
    v16 = "invalid client %p";
LABEL_3:
    NETRBErrorLog((uint64_t)v16, v9, v10, v11, v12, v13, v14, v15, v28);
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
    return;
  }
  if (!*(_BYTE *)(a1[5] + 289))
  {
    v16 = "no service to stop";
    goto LABEL_3;
  }
  v17 = xpc_dictionary_create(0, 0, 0);
  if (!v17)
  {
    v16 = "xpc_dictionary_create() failed";
    goto LABEL_3;
  }
  v18 = v17;
  xpc_dictionary_set_uint64(v17, off_10026D390, 0x3EAuLL);
  xpc_dictionary_set_string(v18, off_10026D398, (const char *)(a1[5] + 32));
  NETRBInfoLog((uint64_t)"client %p xpc send -> stop service", v19, v20, v21, v22, v23, v24, v25, a1[5]);
  v26 = (_OWORD *)(a1[5] + 289);
  v26[14] = 0u;
  v26[15] = 0u;
  v26[12] = 0u;
  v26[13] = 0u;
  v26[10] = 0u;
  v26[11] = 0u;
  v26[8] = 0u;
  v26[9] = 0u;
  v26[6] = 0u;
  v26[7] = 0u;
  v26[4] = 0u;
  v26[5] = 0u;
  v26[2] = 0u;
  v26[3] = 0u;
  *v26 = 0u;
  v26[1] = 0u;
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 0x40000000;
  v29[2] = sub_100181074;
  v29[3] = &unk_100235020;
  v27 = a1[6];
  v29[4] = a1[5];
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = NETRBXPCSetupAndSend(v27, v18, (uint64_t)v29);
  xpc_release(v18);
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
    CFRetain((CFTypeRef)a1[5]);
}

void sub_100181074(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100180BFC(*(_QWORD **)(a1 + 32), 1002, a2, *(_QWORD *)(a1 + 32) + 289, a5, a6, a7, a8);
}

uint64_t _NETRBClientGetDynamicStoreKey(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v10;
  uint64_t v11;
  uint64_t v13[6];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;

  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  if (!a1)
  {
    v10 = "client handle cannot be NULL";
LABEL_11:
    NETRBErrorLog((uint64_t)v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8, v13[0]);
    goto LABEL_12;
  }
  if (!a2)
  {
    v10 = "key cannot be NULL";
    goto LABEL_11;
  }
  if (qword_10026DCB8 != -1)
    dispatch_once(&qword_10026DCB8, &stru_100235668);
  if (!qword_10026DCC0)
  {
    v10 = "unable to create framework queue";
    goto LABEL_11;
  }
  v13[0] = (uint64_t)_NSConcreteStackBlock;
  v13[1] = 0x40000000;
  v13[2] = (uint64_t)sub_10018119C;
  v13[3] = (uint64_t)&unk_100235070;
  v13[4] = (uint64_t)&v14;
  v13[5] = a1;
  dispatch_sync((dispatch_queue_t)qword_10026DCC0, v13);
  if (*((_BYTE *)v15 + 24))
    strcpy(a2, "com.apple.MobileInternetSharing");
LABEL_12:
  v11 = *((unsigned __int8 *)v15 + 24);
  _Block_object_dispose(&v14, 8);
  return v11;
}

uint64_t sub_10018119C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = sub_100180114(*(_BYTE **)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
    return NETRBErrorLog((uint64_t)"invalid client %p", v10, v11, v12, v13, v14, v15, v16, *(_QWORD *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return result;
}

uint64_t _NETRBClientGetGlobalServiceState(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD block[9];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;

  v27 = 0;
  v28 = &v27;
  v29 = 0x2000000000;
  v30 = 0;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = 0;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v18 = 2000;
  if (!a1)
  {
    v10 = "client handle cannot be NULL";
LABEL_13:
    NETRBErrorLog((uint64_t)v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8, v13);
    goto LABEL_14;
  }
  if (!a2)
  {
    v10 = "state cannot be NULL";
    goto LABEL_13;
  }
  if (!a3)
  {
    v10 = "reason cannot be NULL";
    goto LABEL_13;
  }
  if (qword_10026DCB8 != -1)
  {
    v13 = a1;
    dispatch_once(&qword_10026DCB8, &stru_100235668);
    a1 = v13;
  }
  if (!qword_10026DCC0)
  {
    v10 = "unable to create framework queue";
    goto LABEL_13;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1001813B0;
  block[3] = &unk_1002350C0;
  block[4] = &v19;
  block[5] = &v15;
  block[6] = &v27;
  block[7] = &v23;
  block[8] = a1;
  dispatch_sync((dispatch_queue_t)qword_10026DCC0, block);
  if (*((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v20 + 24) = v16[3] == 2001;
    *a2 = *((_DWORD *)v28 + 6);
    *a3 = *((_DWORD *)v24 + 6);
  }
LABEL_14:
  v11 = *((unsigned __int8 *)v20 + 24);
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  return v11;
}

void sub_1001813B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  xpc_object_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[4];
  __int128 v29;
  __int128 v30;

  if (sub_100180114(*(_BYTE **)(a1 + 64), a2, a3, a4, a5, a6, a7, a8))
  {
    v27 = *(_QWORD *)(a1 + 64);
    v16 = "invalid client %p";
LABEL_3:
    NETRBErrorLog((uint64_t)v16, v9, v10, v11, v12, v13, v14, v15, v27);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    return;
  }
  v17 = xpc_dictionary_create(0, 0, 0);
  if (!v17)
  {
    v16 = "xpc_dictionary_create() failed";
    goto LABEL_3;
  }
  v18 = v17;
  xpc_dictionary_set_uint64(v17, off_10026D390, 0x3EBuLL);
  xpc_dictionary_set_string(v18, off_10026D398, (const char *)(*(_QWORD *)(a1 + 64) + 32));
  NETRBInfoLog((uint64_t)"client %p xpc send -> get state", v19, v20, v21, v22, v23, v24, v25, *(_QWORD *)(a1 + 64));
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 0x40000000;
  v28[2] = sub_1001814C8;
  v28[3] = &unk_100235098;
  v26 = *(_OWORD *)(a1 + 56);
  v29 = *(_OWORD *)(a1 + 40);
  v30 = v26;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v18, (uint64_t)v28);
  xpc_release(v18);
}

uint64_t sub_1001814C8(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = NETRBInfoLog((uint64_t)"client %p get state xpc response received", (uint64_t)a2, a3, a4, a5, a6, a7, a8, a1[7]);
  if (a2)
  {
    result = xpc_dictionary_get_uint64(a2, off_10026D3F0);
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) == 2001)
    {
      *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = xpc_dictionary_get_uint64(a2, off_10026D410);
      result = xpc_dictionary_get_uint64(a2, off_10026D420);
      *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = result;
    }
  }
  return result;
}

uint64_t _NETRBClientSetGlobalServiceState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  const char *v9;
  uint64_t v11;
  uint64_t v13;
  _QWORD block[7];
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;

  v20 = 0;
  v21 = &v20;
  v22 = 0x2000000000;
  v23 = 0;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2000000000;
  v19 = 2000;
  if (!a1)
  {
    v9 = "client handle cannot be NULL";
LABEL_11:
    NETRBErrorLog((uint64_t)v9, a2, a3, a4, a5, a6, a7, a8, v13);
    goto LABEL_12;
  }
  v8 = a2;
  if ((a2 - 1024) <= 0xFFFFFFFB)
  {
    NETRBErrorLog((uint64_t)"incorrect state %d", a2, a3, a4, a5, a6, a7, a8, a2);
    goto LABEL_12;
  }
  if (qword_10026DCB8 != -1)
    dispatch_once(&qword_10026DCB8, &stru_100235668);
  if (!qword_10026DCC0)
  {
    v9 = "unable to create framework queue";
    goto LABEL_11;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1001816CC;
  block[3] = &unk_100235110;
  v15 = v8;
  block[4] = &v20;
  block[5] = &v16;
  block[6] = a1;
  dispatch_sync((dispatch_queue_t)qword_10026DCC0, block);
  if (*((_BYTE *)v21 + 24))
    *((_BYTE *)v21 + 24) = v17[3] == 2001;
LABEL_12:
  v11 = *((unsigned __int8 *)v21 + 24);
  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v20, 8);
  return v11;
}

void sub_1001816CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  xpc_object_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[4];
  __int128 v28;

  if (sub_100180114(*(_BYTE **)(a1 + 48), a2, a3, a4, a5, a6, a7, a8))
  {
    v26 = *(_QWORD *)(a1 + 48);
    v16 = "invalid client %p";
LABEL_3:
    NETRBErrorLog((uint64_t)v16, v9, v10, v11, v12, v13, v14, v15, v26);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    return;
  }
  v17 = xpc_dictionary_create(0, 0, 0);
  if (!v17)
  {
    v16 = "xpc_dictionary_create() failed";
    goto LABEL_3;
  }
  v18 = v17;
  xpc_dictionary_set_uint64(v17, off_10026D390, 0x3ECuLL);
  xpc_dictionary_set_string(v18, off_10026D398, (const char *)(*(_QWORD *)(a1 + 48) + 32));
  xpc_dictionary_set_uint64(v18, off_10026D410, *(unsigned int *)(a1 + 56));
  NETRBInfoLog((uint64_t)"client %p xpc send -> set state", v19, v20, v21, v22, v23, v24, v25, *(_QWORD *)(a1 + 48));
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 0x40000000;
  v27[2] = sub_1001817F8;
  v27[3] = &unk_1002350E8;
  v28 = *(_OWORD *)(a1 + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v18, (uint64_t)v27);
  xpc_release(v18);
}

uint64_t sub_1001817F8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = NETRBInfoLog((uint64_t)"client %p set state xpc response received", (uint64_t)a2, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40));
  if (a2)
  {
    result = xpc_dictionary_get_uint64(a2, off_10026D3F0);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t _NETRBClientGetExtName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v10;
  uint64_t v11;
  uint64_t v13[8];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;

  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 2000;
  if (!a1)
  {
    v10 = "client handle cannot be NULL";
LABEL_11:
    NETRBErrorLog((uint64_t)v10, a2, a3, a4, a5, a6, a7, a8, v13[0]);
    goto LABEL_12;
  }
  if (!a2)
  {
    v10 = "external name cannot be NULL";
    goto LABEL_11;
  }
  if (qword_10026DCB8 != -1)
    dispatch_once(&qword_10026DCB8, &stru_100235668);
  if (!qword_10026DCC0)
  {
    v10 = "unable to create framework queue";
    goto LABEL_11;
  }
  v13[0] = (uint64_t)_NSConcreteStackBlock;
  v13[1] = 0x40000000;
  v13[2] = (uint64_t)sub_100181998;
  v13[3] = (uint64_t)&unk_100235160;
  v13[4] = (uint64_t)&v18;
  v13[5] = (uint64_t)&v14;
  v13[6] = a1;
  v13[7] = a2;
  dispatch_sync((dispatch_queue_t)qword_10026DCC0, v13);
  if (*((_BYTE *)v19 + 24))
    *((_BYTE *)v19 + 24) = v15[3] == 2001;
LABEL_12:
  v11 = *((unsigned __int8 *)v19 + 24);
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);
  return v11;
}

void sub_100181998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  xpc_object_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[4];
  __int128 v28;
  uint64_t v29;

  if (sub_100180114(*(_BYTE **)(a1 + 48), a2, a3, a4, a5, a6, a7, a8))
  {
    v26 = *(_QWORD *)(a1 + 48);
    v16 = "invalid client %p";
LABEL_3:
    NETRBErrorLog((uint64_t)v16, v9, v10, v11, v12, v13, v14, v15, v26);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    return;
  }
  v17 = xpc_dictionary_create(0, 0, 0);
  if (!v17)
  {
    v16 = "xpc_dictionary_create() failed";
    goto LABEL_3;
  }
  v18 = v17;
  xpc_dictionary_set_uint64(v17, off_10026D390, 0x3F5uLL);
  xpc_dictionary_set_string(v18, off_10026D398, (const char *)(*(_QWORD *)(a1 + 48) + 32));
  NETRBInfoLog((uint64_t)"client %p xpc send -> get external name", v19, v20, v21, v22, v23, v24, v25, *(_QWORD *)(a1 + 48));
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 0x40000000;
  v27[2] = sub_100181AB4;
  v27[3] = &unk_100235138;
  v28 = *(_OWORD *)(a1 + 40);
  v29 = *(_QWORD *)(a1 + 56);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v18, (uint64_t)v27);
  xpc_release(v18);
}

uint64_t sub_100181AB4(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  char *v11;
  const char *string;

  result = NETRBInfoLog((uint64_t)"client %p get external name xpc response received", (uint64_t)a2, a3, a4, a5, a6, a7, a8, a1[5]);
  if (a2)
  {
    result = xpc_dictionary_get_uint64(a2, off_10026D3F0);
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) == 2001)
    {
      v11 = (char *)a1[6];
      string = xpc_dictionary_get_string(a2, off_10026D418);
      return snprintf(v11, 0x10uLL, "%s", string);
    }
  }
  return result;
}

void *_NETRBClientCopyFixtureForwardedPorts(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  xpc_object_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD block[9];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  __int16 v35;

  v8 = a1;
  v32 = 0;
  v33 = &v32;
  v34 = 0x2000000000;
  v35 = 0;
  v28 = 0;
  v29 = &v28;
  v30 = 0x2000000000;
  v31 = 0;
  v24 = 0;
  v25 = &v24;
  v26 = 0x2000000000;
  v27 = 0;
  v20 = 0;
  v21 = &v20;
  v22 = 0x2000000000;
  v23 = 2000;
  if (!a1)
  {
    NETRBErrorLog((uint64_t)"client handle cannot be NULL", a2, a3, a4, a5, a6, a7, a8, v18);
    goto LABEL_12;
  }
  if (qword_10026DCB8 != -1)
    dispatch_once(&qword_10026DCB8, &stru_100235668);
  if (!qword_10026DCC0)
  {
    NETRBErrorLog((uint64_t)"unable to create framework queue", a2, a3, a4, a5, a6, a7, a8, v18);
LABEL_11:
    v8 = 0;
    goto LABEL_12;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100181D24;
  block[3] = &unk_1002351B0;
  block[4] = &v24;
  block[5] = &v20;
  block[6] = &v32;
  block[7] = &v28;
  block[8] = v8;
  dispatch_sync((dispatch_queue_t)qword_10026DCC0, block);
  if (!*((_BYTE *)v25 + 24) || v21[3] != 2001)
    goto LABEL_11;
  v9 = xpc_dictionary_create(0, 0, 0);
  v8 = v9;
  if (v9)
  {
    xpc_dictionary_set_uint64(v9, netrbClientForwardedLowPort, *((unsigned __int16 *)v33 + 12));
    xpc_dictionary_set_uint64(v8, netrbClientForwardedHighPort, *((unsigned __int16 *)v29 + 12));
  }
  else
  {
    NETRBErrorLog((uint64_t)"xpc_dictionary_create() failed", v10, v11, v12, v13, v14, v15, v16, v18);
    *((_BYTE *)v25 + 24) = 0;
  }
LABEL_12:
  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v24, 8);
  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(&v32, 8);
  return v8;
}

void sub_100181D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  xpc_object_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[4];
  __int128 v29;
  __int128 v30;

  if (sub_100180114(*(_BYTE **)(a1 + 64), a2, a3, a4, a5, a6, a7, a8))
  {
    v27 = *(_QWORD *)(a1 + 64);
    v16 = "invalid client %p";
LABEL_3:
    NETRBErrorLog((uint64_t)v16, v9, v10, v11, v12, v13, v14, v15, v27);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    return;
  }
  v17 = xpc_dictionary_create(0, 0, 0);
  if (!v17)
  {
    v16 = "xpc_dictionary_create() failed";
    goto LABEL_3;
  }
  v18 = v17;
  xpc_dictionary_set_uint64(v17, off_10026D390, 0x3EDuLL);
  xpc_dictionary_set_string(v18, off_10026D398, (const char *)(*(_QWORD *)(a1 + 64) + 32));
  NETRBInfoLog((uint64_t)"client %p xpc send -> get forwarded ports", v19, v20, v21, v22, v23, v24, v25, *(_QWORD *)(a1 + 64));
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 0x40000000;
  v28[2] = sub_100181E3C;
  v28[3] = &unk_100235188;
  v26 = *(_OWORD *)(a1 + 56);
  v29 = *(_OWORD *)(a1 + 40);
  v30 = v26;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v18, (uint64_t)v28);
  xpc_release(v18);
}

uint64_t sub_100181E3C(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = NETRBInfoLog((uint64_t)"client %p get forwarded ports xpc response received", (uint64_t)a2, a3, a4, a5, a6, a7, a8, a1[7]);
  if (a2)
  {
    result = xpc_dictionary_get_uint64(a2, off_10026D3F0);
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) == 2001)
    {
      *(_WORD *)(*(_QWORD *)(a1[5] + 8) + 24) = xpc_dictionary_get_uint64(a2, off_10026D428);
      result = xpc_dictionary_get_uint64(a2, off_10026D430);
      *(_WORD *)(*(_QWORD *)(a1[6] + 8) + 24) = result;
    }
  }
  return result;
}

uint64_t _NETRBClientSetFixtureForwardedPorts(uint64_t a1, xpc_object_t object, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v10;
  uint64_t v11;
  uint64_t v13[8];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;

  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 2000;
  if (!a1)
  {
    v10 = "client handle cannot be NULL";
    goto LABEL_6;
  }
  if (!object || xpc_get_type(object) != (xpc_type_t)&_xpc_type_dictionary)
  {
    v10 = "forwarded ports should be a xpc dictionary";
LABEL_6:
    NETRBErrorLog((uint64_t)v10, (uint64_t)object, a3, a4, a5, a6, a7, a8, v13[0]);
    goto LABEL_7;
  }
  if (qword_10026DCB8 != -1)
    dispatch_once(&qword_10026DCB8, &stru_100235668);
  if (!qword_10026DCC0)
  {
    v10 = "unable to create framework queue";
    goto LABEL_6;
  }
  v13[0] = (uint64_t)_NSConcreteStackBlock;
  v13[1] = 0x40000000;
  v13[2] = (uint64_t)sub_100182048;
  v13[3] = (uint64_t)&unk_100235200;
  v13[6] = a1;
  v13[7] = (uint64_t)object;
  v13[4] = (uint64_t)&v18;
  v13[5] = (uint64_t)&v14;
  dispatch_sync((dispatch_queue_t)qword_10026DCC0, v13);
  if (*((_BYTE *)v19 + 24))
    *((_BYTE *)v19 + 24) = v15[3] == 2001;
LABEL_7:
  v11 = *((unsigned __int8 *)v19 + 24);
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);
  return v11;
}

void sub_100182048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  xpc_object_t v17;
  void *v18;
  const char *v19;
  uint64_t uint64;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];
  __int128 v32;

  if (sub_100180114(*(_BYTE **)(a1 + 48), a2, a3, a4, a5, a6, a7, a8))
  {
    v30 = *(_QWORD *)(a1 + 48);
    v16 = "invalid client %p";
LABEL_3:
    NETRBErrorLog((uint64_t)v16, v9, v10, v11, v12, v13, v14, v15, v30);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    return;
  }
  v17 = xpc_dictionary_create(0, 0, 0);
  if (!v17)
  {
    v16 = "xpc_dictionary_create() failed";
    goto LABEL_3;
  }
  v18 = v17;
  xpc_dictionary_set_uint64(v17, off_10026D390, 0x3EEuLL);
  xpc_dictionary_set_string(v18, off_10026D398, (const char *)(*(_QWORD *)(a1 + 48) + 32));
  v19 = off_10026D428;
  uint64 = xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 56), netrbClientForwardedLowPort);
  xpc_dictionary_set_uint64(v18, v19, uint64);
  v21 = off_10026D430;
  v22 = xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 56), netrbClientForwardedHighPort);
  xpc_dictionary_set_uint64(v18, v21, v22);
  NETRBInfoLog((uint64_t)"client %p xpc send -> set forwarded ports", v23, v24, v25, v26, v27, v28, v29, *(_QWORD *)(a1 + 48));
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 0x40000000;
  v31[2] = sub_1001821BC;
  v31[3] = &unk_1002351D8;
  v32 = *(_OWORD *)(a1 + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v18, (uint64_t)v31);
  xpc_release(v18);
}

uint64_t sub_1001821BC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = NETRBInfoLog((uint64_t)"client %p set forwarded ports xpc response received", (uint64_t)a2, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40));
  if (a2)
  {
    result = xpc_dictionary_get_uint64(a2, off_10026D3F0);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t _NETRBClientIsAllowedMoreHost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD block[7];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;

  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 2000;
  if (!a1)
  {
    v9 = "client handle cannot be NULL";
LABEL_9:
    NETRBErrorLog((uint64_t)v9, a2, a3, a4, a5, a6, a7, a8, v12);
    goto LABEL_10;
  }
  if (qword_10026DCB8 != -1)
    dispatch_once(&qword_10026DCB8, &stru_100235668);
  if (!qword_10026DCC0)
  {
    v9 = "unable to create framework queue";
    goto LABEL_9;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100182348;
  block[3] = &unk_100235250;
  block[4] = &v18;
  block[5] = &v14;
  block[6] = a1;
  dispatch_sync((dispatch_queue_t)qword_10026DCC0, block);
  if (*((_BYTE *)v19 + 24))
    *((_BYTE *)v19 + 24) = v15[3] == 2001;
LABEL_10:
  v10 = *((unsigned __int8 *)v19 + 24);
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);
  return v10;
}

void sub_100182348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  xpc_object_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[4];
  __int128 v28;

  if (sub_100180114(*(_BYTE **)(a1 + 48), a2, a3, a4, a5, a6, a7, a8))
  {
    v26 = *(_QWORD *)(a1 + 48);
    v16 = "invalid client %p";
LABEL_3:
    NETRBErrorLog((uint64_t)v16, v9, v10, v11, v12, v13, v14, v15, v26);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    return;
  }
  v17 = xpc_dictionary_create(0, 0, 0);
  if (!v17)
  {
    v16 = "xpc_dictionary_create() failed";
    goto LABEL_3;
  }
  v18 = v17;
  xpc_dictionary_set_uint64(v17, off_10026D390, 0x3EFuLL);
  xpc_dictionary_set_string(v18, off_10026D398, (const char *)(*(_QWORD *)(a1 + 48) + 32));
  NETRBInfoLog((uint64_t)"client %p xpc send -> allowed more host", v19, v20, v21, v22, v23, v24, v25, *(_QWORD *)(a1 + 48));
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 0x40000000;
  v27[2] = sub_10018245C;
  v27[3] = &unk_100235228;
  v28 = *(_OWORD *)(a1 + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v18, (uint64_t)v27);
  xpc_release(v18);
}

uint64_t sub_10018245C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = NETRBInfoLog((uint64_t)"client %p allowed more host xpc response received", (uint64_t)a2, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40));
  if (a2)
  {
    result = xpc_dictionary_get_uint64(a2, off_10026D3F0);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t _NETRBClientAddHost(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v12 = v4;
    xpc_dictionary_set_uint64(v4, netrbClientHostIftype, a2);
    xpc_dictionary_set_uint64(v12, netrbClientHostDeviceId, 0xFFFFFFFFuLL);
    v19 = _NETRBClientAddHostExt(a1, v12, v13, v14, v15, v16, v17, v18);
    xpc_release(v12);
    return v19;
  }
  else
  {
    NETRBErrorLog((uint64_t)"failed to create xpc dictionary for add host.", v5, v6, v7, v8, v9, v10, v11, v21);
    return 0;
  }
}

uint64_t _NETRBClientAddHostExt(uint64_t a1, xpc_object_t object, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v10;
  uint64_t v11;
  xpc_object_t value;
  void *v14;
  uint64_t v15;
  xpc_object_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD block[8];
  int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;

  v35 = 0;
  v36 = &v35;
  v37 = 0x2000000000;
  v38 = 0;
  v31 = 0;
  v32 = &v31;
  v33 = 0x2000000000;
  v34 = 2000;
  if (!object || xpc_get_type(object) != (xpc_type_t)&_xpc_type_dictionary)
  {
    v10 = "request is not dictionary object";
LABEL_4:
    NETRBErrorLog((uint64_t)v10, (uint64_t)object, a3, a4, a5, a6, a7, a8, v28);
    *((_BYTE *)v36 + 24) = 0;
    goto LABEL_5;
  }
  value = xpc_dictionary_get_value(object, netrbClientHostIftype);
  if (!value || (v14 = value, xpc_get_type(value) != (xpc_type_t)&_xpc_type_uint64))
  {
    v10 = "netrbIftype does not exist in request.";
    goto LABEL_4;
  }
  v15 = xpc_uint64_get_value(v14);
  v16 = xpc_dictionary_get_value(object, netrbClientHostDeviceId);
  if (!v16 || (v17 = v16, xpc_get_type(v16) != (xpc_type_t)&_xpc_type_uint64))
  {
    v10 = "device ID does not exist in request.";
    goto LABEL_4;
  }
  v18 = xpc_uint64_get_value(v17);
  if (!a1)
  {
    v26 = "client handle cannot be NULL";
LABEL_22:
    NETRBErrorLog((uint64_t)v26, v19, v20, v21, v22, v23, v24, v25, v28);
    goto LABEL_5;
  }
  if ((v15 - 7) <= 0xFFFFFFFA)
  {
    NETRBErrorLog((uint64_t)"incorrect device type value %d", v19, v20, v21, v22, v23, v24, v25, v15);
    goto LABEL_5;
  }
  v27 = v18;
  if (qword_10026DCB8 != -1)
    dispatch_once(&qword_10026DCB8, &stru_100235668);
  if (!qword_10026DCC0)
  {
    v26 = "unable to create framework queue";
    goto LABEL_22;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10018275C;
  block[3] = &unk_1002352A0;
  v30 = v15;
  block[6] = a1;
  block[7] = v27;
  block[4] = &v35;
  block[5] = &v31;
  dispatch_sync((dispatch_queue_t)qword_10026DCC0, block);
  if (*((_BYTE *)v36 + 24))
    *((_BYTE *)v36 + 24) = v32[3] == 2001;
LABEL_5:
  v11 = *((unsigned __int8 *)v36 + 24);
  _Block_object_dispose(&v31, 8);
  _Block_object_dispose(&v35, 8);
  return v11;
}

void sub_10018275C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  xpc_object_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[4];
  __int128 v28;

  if (sub_100180114(*(_BYTE **)(a1 + 48), a2, a3, a4, a5, a6, a7, a8))
  {
    v26 = *(_QWORD *)(a1 + 48);
    v16 = "invalid client %p";
LABEL_3:
    NETRBErrorLog((uint64_t)v16, v9, v10, v11, v12, v13, v14, v15, v26);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    return;
  }
  v17 = xpc_dictionary_create(0, 0, 0);
  if (!v17)
  {
    v16 = "xpc_dictionary_create() failed";
    goto LABEL_3;
  }
  v18 = v17;
  xpc_dictionary_set_uint64(v17, off_10026D390, 0x3F0uLL);
  xpc_dictionary_set_string(v18, off_10026D398, (const char *)(*(_QWORD *)(a1 + 48) + 32));
  xpc_dictionary_set_uint64(v18, off_10026D438, *(unsigned int *)(a1 + 64));
  xpc_dictionary_set_uint64(v18, off_10026D470, *(_QWORD *)(a1 + 56));
  NETRBInfoLog((uint64_t)"client %p xpc send -> add host", v19, v20, v21, v22, v23, v24, v25, *(_QWORD *)(a1 + 48));
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 0x40000000;
  v27[2] = sub_1001828A0;
  v27[3] = &unk_100235278;
  v28 = *(_OWORD *)(a1 + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v18, (uint64_t)v27);
  xpc_release(v18);
}

uint64_t sub_1001828A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = NETRBInfoLog((uint64_t)"client %p add host xpc response received", (uint64_t)a2, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40));
  if (a2)
  {
    result = xpc_dictionary_get_uint64(a2, off_10026D3F0);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t _NETRBClientRemoveHostExt(uint64_t a1, xpc_object_t object, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v10;
  uint64_t v11;
  xpc_object_t value;
  void *v14;
  uint64_t v15;
  xpc_object_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD block[8];
  int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;

  v35 = 0;
  v36 = &v35;
  v37 = 0x2000000000;
  v38 = 0;
  v31 = 0;
  v32 = &v31;
  v33 = 0x2000000000;
  v34 = 2000;
  if (!object || xpc_get_type(object) != (xpc_type_t)&_xpc_type_dictionary)
  {
    v10 = "request is not dictionary object";
LABEL_4:
    NETRBErrorLog((uint64_t)v10, (uint64_t)object, a3, a4, a5, a6, a7, a8, v28);
    *((_BYTE *)v36 + 24) = 0;
    goto LABEL_5;
  }
  value = xpc_dictionary_get_value(object, netrbClientHostIftype);
  if (!value || (v14 = value, xpc_get_type(value) != (xpc_type_t)&_xpc_type_uint64))
  {
    v10 = "netrbIftype does not exist in request.";
    goto LABEL_4;
  }
  v15 = xpc_uint64_get_value(v14);
  v16 = xpc_dictionary_get_value(object, netrbClientHostDeviceId);
  if (!v16 || (v17 = v16, xpc_get_type(v16) != (xpc_type_t)&_xpc_type_uint64))
  {
    v10 = "device ID does not exist in request.";
    goto LABEL_4;
  }
  v18 = xpc_uint64_get_value(v17);
  if (!a1)
  {
    v26 = "client handle cannot be NULL";
LABEL_22:
    NETRBErrorLog((uint64_t)v26, v19, v20, v21, v22, v23, v24, v25, v28);
    goto LABEL_5;
  }
  if ((v15 - 7) <= 0xFFFFFFFA)
  {
    NETRBErrorLog((uint64_t)"incorrect device type value %d", v19, v20, v21, v22, v23, v24, v25, v15);
    goto LABEL_5;
  }
  v27 = v18;
  if (qword_10026DCB8 != -1)
    dispatch_once(&qword_10026DCB8, &stru_100235668);
  if (!qword_10026DCC0)
  {
    v26 = "unable to create framework queue";
    goto LABEL_22;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100182B0C;
  block[3] = &unk_1002352F0;
  v30 = v15;
  block[6] = a1;
  block[7] = v27;
  block[4] = &v35;
  block[5] = &v31;
  dispatch_sync((dispatch_queue_t)qword_10026DCC0, block);
  if (*((_BYTE *)v36 + 24))
    *((_BYTE *)v36 + 24) = v32[3] == 2001;
LABEL_5:
  v11 = *((unsigned __int8 *)v36 + 24);
  _Block_object_dispose(&v31, 8);
  _Block_object_dispose(&v35, 8);
  return v11;
}

void sub_100182B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  xpc_object_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[4];
  __int128 v28;

  if (sub_100180114(*(_BYTE **)(a1 + 48), a2, a3, a4, a5, a6, a7, a8))
  {
    v26 = *(_QWORD *)(a1 + 48);
    v16 = "invalid client %p";
LABEL_3:
    NETRBErrorLog((uint64_t)v16, v9, v10, v11, v12, v13, v14, v15, v26);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    return;
  }
  v17 = xpc_dictionary_create(0, 0, 0);
  if (!v17)
  {
    v16 = "xpc_dictionary_create() failed";
    goto LABEL_3;
  }
  v18 = v17;
  xpc_dictionary_set_uint64(v17, off_10026D390, 0x3F1uLL);
  xpc_dictionary_set_string(v18, off_10026D398, (const char *)(*(_QWORD *)(a1 + 48) + 32));
  xpc_dictionary_set_uint64(v18, off_10026D438, *(unsigned int *)(a1 + 64));
  xpc_dictionary_set_uint64(v18, off_10026D468, *(_QWORD *)(a1 + 56));
  NETRBInfoLog((uint64_t)"client %p xpc send -> remove host", v19, v20, v21, v22, v23, v24, v25, *(_QWORD *)(a1 + 48));
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 0x40000000;
  v27[2] = sub_100182C50;
  v27[3] = &unk_1002352C8;
  v28 = *(_OWORD *)(a1 + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v18, (uint64_t)v27);
  xpc_release(v18);
}

uint64_t sub_100182C50(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = NETRBInfoLog((uint64_t)"client %p remove host xpc response received", (uint64_t)a2, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40));
  if (a2)
  {
    result = xpc_dictionary_get_uint64(a2, off_10026D3F0);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t _NETRBClientRemoveHost(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v12 = v4;
    xpc_dictionary_set_uint64(v4, netrbClientHostIftype, a2);
    xpc_dictionary_set_uint64(v12, netrbClientHostDeviceId, 0xFFFFFFFFuLL);
    v19 = _NETRBClientRemoveHostExt(a1, v12, v13, v14, v15, v16, v17, v18);
    xpc_release(v12);
    return v19;
  }
  else
  {
    NETRBErrorLog((uint64_t)"failed to create xpc dictionary for remove host.", v5, v6, v7, v8, v9, v10, v11, v21);
    return 0;
  }
}

uint64_t _NETRBClientGetHostCount(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD block[9];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;

  v27 = 0;
  v28 = &v27;
  v29 = 0x2000000000;
  v30 = 0;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = 0;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v18 = 2000;
  if (!a1)
  {
    v10 = "client handle cannot be NULL";
LABEL_13:
    NETRBErrorLog((uint64_t)v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8, v13);
    goto LABEL_14;
  }
  if (!a2)
  {
    v10 = "max cannot be NULL";
    goto LABEL_13;
  }
  if (!a3)
  {
    v10 = "current cannot be NULL";
    goto LABEL_13;
  }
  if (qword_10026DCB8 != -1)
  {
    v13 = a1;
    dispatch_once(&qword_10026DCB8, &stru_100235668);
    a1 = v13;
  }
  if (!qword_10026DCC0)
  {
    v10 = "unable to create framework queue";
    goto LABEL_13;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100182F00;
  block[3] = &unk_100235340;
  block[4] = &v19;
  block[5] = &v15;
  block[6] = &v27;
  block[7] = &v23;
  block[8] = a1;
  dispatch_sync((dispatch_queue_t)qword_10026DCC0, block);
  if (*((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v20 + 24) = v16[3] == 2001;
    *a2 = *((_DWORD *)v28 + 6);
    *a3 = *((_DWORD *)v24 + 6);
  }
LABEL_14:
  v11 = *((unsigned __int8 *)v20 + 24);
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  return v11;
}

void sub_100182F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  xpc_object_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[4];
  __int128 v29;
  __int128 v30;

  if (sub_100180114(*(_BYTE **)(a1 + 64), a2, a3, a4, a5, a6, a7, a8))
  {
    v27 = *(_QWORD *)(a1 + 64);
    v16 = "invalid client %p";
LABEL_3:
    NETRBErrorLog((uint64_t)v16, v9, v10, v11, v12, v13, v14, v15, v27);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    return;
  }
  v17 = xpc_dictionary_create(0, 0, 0);
  if (!v17)
  {
    v16 = "xpc_dictionary_create() failed";
    goto LABEL_3;
  }
  v18 = v17;
  xpc_dictionary_set_uint64(v17, off_10026D390, 0x3F2uLL);
  xpc_dictionary_set_string(v18, off_10026D398, (const char *)(*(_QWORD *)(a1 + 64) + 32));
  NETRBInfoLog((uint64_t)"client %p xpc send -> get host count", v19, v20, v21, v22, v23, v24, v25, *(_QWORD *)(a1 + 64));
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 0x40000000;
  v28[2] = sub_100183018;
  v28[3] = &unk_100235318;
  v26 = *(_OWORD *)(a1 + 56);
  v29 = *(_OWORD *)(a1 + 40);
  v30 = v26;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v18, (uint64_t)v28);
  xpc_release(v18);
}

uint64_t sub_100183018(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = NETRBInfoLog((uint64_t)"client %p get host count xpc response received", (uint64_t)a2, a3, a4, a5, a6, a7, a8, a1[7]);
  if (a2)
  {
    result = xpc_dictionary_get_uint64(a2, off_10026D3F0);
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) == 2001)
    {
      *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = xpc_dictionary_get_uint64(a2, off_10026D440);
      result = xpc_dictionary_get_uint64(a2, off_10026D448);
      *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = result;
    }
  }
  return result;
}

uint64_t _NETRBClientSetHostCount(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  const char *v9;
  int v10;
  uint64_t v12;
  uint64_t v14;
  _QWORD block[7];
  int v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;

  v22 = 0;
  v23 = &v22;
  v24 = 0x2000000000;
  v25 = 0;
  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 2000;
  if (!a1)
  {
    v9 = "client handle cannot be NULL";
LABEL_11:
    NETRBErrorLog((uint64_t)v9, a2, a3, a4, a5, a6, a7, a8, v14);
    goto LABEL_12;
  }
  v8 = a2;
  if ((a2 - 7) <= 0xFFFFFFFA)
  {
    NETRBErrorLog((uint64_t)"incorrect device type value %d", a2, a3, a4, a5, a6, a7, a8, a2);
    goto LABEL_12;
  }
  v10 = a3;
  if (qword_10026DCB8 != -1)
    dispatch_once(&qword_10026DCB8, &stru_100235668);
  if (!qword_10026DCC0)
  {
    v9 = "unable to create framework queue";
    goto LABEL_11;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100183228;
  block[3] = &unk_100235390;
  v16 = v8;
  v17 = v10;
  block[4] = &v22;
  block[5] = &v18;
  block[6] = a1;
  dispatch_sync((dispatch_queue_t)qword_10026DCC0, block);
  if (*((_BYTE *)v23 + 24))
    *((_BYTE *)v23 + 24) = v19[3] == 2001;
LABEL_12:
  v12 = *((unsigned __int8 *)v23 + 24);
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  return v12;
}

void sub_100183228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  xpc_object_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[4];
  __int128 v28;

  if (sub_100180114(*(_BYTE **)(a1 + 48), a2, a3, a4, a5, a6, a7, a8))
  {
    v26 = *(_QWORD *)(a1 + 48);
    v16 = "invalid client %p";
LABEL_3:
    NETRBErrorLog((uint64_t)v16, v9, v10, v11, v12, v13, v14, v15, v26);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    return;
  }
  v17 = xpc_dictionary_create(0, 0, 0);
  if (!v17)
  {
    v16 = "xpc_dictionary_create() failed";
    goto LABEL_3;
  }
  v18 = v17;
  xpc_dictionary_set_uint64(v17, off_10026D390, 0x3F3uLL);
  xpc_dictionary_set_string(v18, off_10026D398, (const char *)(*(_QWORD *)(a1 + 48) + 32));
  xpc_dictionary_set_uint64(v18, off_10026D438, *(unsigned int *)(a1 + 56));
  xpc_dictionary_set_uint64(v18, off_10026D450, *(unsigned int *)(a1 + 60));
  NETRBInfoLog((uint64_t)"client %p xpc send -> set host count", v19, v20, v21, v22, v23, v24, v25, *(_QWORD *)(a1 + 48));
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 0x40000000;
  v27[2] = sub_10018336C;
  v27[3] = &unk_100235368;
  v28 = *(_OWORD *)(a1 + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = NETRBXPCSetupAndSend(0, v18, (uint64_t)v27);
  xpc_release(v18);
}

uint64_t sub_10018336C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = NETRBInfoLog((uint64_t)"client %p set host count xpc response received", (uint64_t)a2, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40));
  if (a2)
  {
    result = xpc_dictionary_get_uint64(a2, off_10026D3F0);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t _NETRBClientNewInterface(uint64_t a1, uint64_t a2, uint64_t a3, xpc_object_t xdict, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *string;
  const char *v13;
  int uint64;
  NSObject *v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  char v20;
  void *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  void *v26;
  uint64_t v27;
  void *v29;
  const unsigned __int8 *uuid;
  const char *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  char *v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  NSObject *v48;
  _QWORD block[10];
  int v50;
  int v51;
  char v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  BOOL v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  char v64;

  v61 = 0;
  v62 = &v61;
  v63 = 0x2000000000;
  v64 = 0;
  v57 = 0;
  v58 = &v57;
  v59 = 0x2000000000;
  v60 = 0;
  if (!a1)
  {
    v13 = "client handle cannot be NULL";
LABEL_41:
    NETRBErrorLog((uint64_t)v13, a2, a3, (uint64_t)xdict, a5, a6, a7, a8, (uint64_t)v42);
    goto LABEL_42;
  }
  if (xdict)
    string = xpc_dictionary_get_string(xdict, netrbClientExternalInterface);
  else
    string = 0;
  if ((a2 - 201) >= 3)
  {
    if ((_DWORD)a2 != 204)
    {
      NETRBErrorLog((uint64_t)"incorrect operation mode %d", a2, a3, (uint64_t)xdict, a5, a6, a7, a8, a2);
      goto LABEL_42;
    }
    if (!string || !*string)
    {
      v13 = "interface must be specified";
      goto LABEL_41;
    }
  }
  else
  {
    if (string)
    {
      v13 = "specifying external interface not supported";
      goto LABEL_41;
    }
    if (xdict)
    {
      uint64 = xpc_dictionary_get_uint64(xdict, netrbClientInterfaceMTU);
      goto LABEL_17;
    }
  }
  uint64 = 0;
LABEL_17:
  if (qword_10026DCB8 != -1)
    dispatch_once(&qword_10026DCB8, &stru_100235668);
  v15 = qword_10026DCC0;
  if (!qword_10026DCC0)
  {
    v13 = "unable to create framework queue";
    goto LABEL_41;
  }
  v58[3] = (uint64_t)xpc_dictionary_create(0, 0, 0);
  if (!xdict)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 1;
LABEL_55:
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_100183894;
    block[3] = &unk_1002353D8;
    v52 = v20;
    block[6] = a1;
    block[7] = a3;
    v53 = v18;
    v54 = v19;
    v55 = v17;
    v56 = v16;
    v50 = a2;
    v51 = uint64;
    block[4] = &v57;
    block[5] = &v61;
    block[8] = string;
    block[9] = v15;
    dispatch_sync(v15, block);
    goto LABEL_42;
  }
  if (xpc_dictionary_get_value(xdict, netrbClientAllocateMACAddress))
    v46 = xpc_dictionary_get_BOOL(xdict, netrbClientAllocateMACAddress);
  else
    v46 = 1;
  if (xpc_dictionary_get_value(xdict, netrbClientEnableTSO))
    v45 = xpc_dictionary_get_BOOL(xdict, netrbClientEnableTSO);
  else
    v45 = 0;
  if (xpc_dictionary_get_value(xdict, netrbClientEnableIsolation))
    v44 = xpc_dictionary_get_BOOL(xdict, netrbClientEnableIsolation);
  else
    v44 = 0;
  v48 = v15;
  if (xpc_dictionary_get_value(xdict, netrbClientEnableChecksumOffload))
    v43 = xpc_dictionary_get_BOOL(xdict, netrbClientEnableChecksumOffload);
  else
    v43 = 0;
  v47 = xpc_dictionary_get_BOOL(xdict, netrbClientEnableMACNAT);
  v21 = (void *)v58[3];
  v22 = xpc_dictionary_get_string(xdict, netrbClientInterfaceStartAddress);
  v23 = xpc_dictionary_get_string(xdict, netrbClientInterfaceEndAddress);
  v24 = xpc_dictionary_get_string(xdict, netrbClientInterfaceNetworkMask);
  if (v22 && v23 && (v25 = v24) != 0)
  {
    xpc_dictionary_set_string(v21, off_10026D488, v22);
    xpc_dictionary_set_string(v21, off_10026D490, v23);
    xpc_dictionary_set_string(v21, off_10026D498, v25);
  }
  else if ((unint64_t)v22 | (unint64_t)v23)
  {
    v42 = netrbClientInterfaceStartAddress;
    v13 = "All of %s, %s, and %s must be specified";
    goto LABEL_41;
  }
  if (sub_1001808D8(xdict, (void *)v58[3]))
  {
    v29 = (void *)v58[3];
    uuid = xpc_dictionary_get_uuid(xdict, netrbClientNetworkIdentifier);
    if (uuid)
    {
      xpc_dictionary_set_uuid(v29, off_10026D4E0, uuid);
      v31 = xpc_dictionary_get_string(xdict, netrbClientInterfaceIPv4Address);
      v32 = xpc_dictionary_get_string(xdict, netrbClientInterfaceNetworkMask);
      v40 = v32;
      if (v31 && v32)
      {
        xpc_dictionary_set_string(v29, off_10026D4E8, v31);
        xpc_dictionary_set_string(v29, off_10026D498, v40);
      }
      else if ((unint64_t)v31 | (unint64_t)v32)
      {
        NETRBErrorLog((uint64_t)"%s, and %s must be specified", v33, v34, v35, v36, v37, v38, v39, (uint64_t)netrbClientInterfaceIPv4Address);
        goto LABEL_42;
      }
      v41 = xpc_dictionary_get_string(xdict, netrbClientInterfaceIPv6Address);
      if (v41)
        xpc_dictionary_set_string(v29, off_10026D4F0, v41);
    }
    v15 = v48;
    v18 = v45;
    v20 = v46;
    v16 = v43;
    v17 = v44;
    v19 = v47;
    goto LABEL_55;
  }
LABEL_42:
  v26 = (void *)v58[3];
  if (v26)
    xpc_release(v26);
  v27 = *((unsigned __int8 *)v62 + 24);
  _Block_object_dispose(&v57, 8);
  _Block_object_dispose(&v61, 8);
  return v27;
}

_BYTE *sub_100183894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  void *v28;
  BOOL v29;
  _QWORD v30[5];

  if (sub_100180114(*(_BYTE **)(a1 + 48), a2, a3, a4, a5, a6, a7, a8))
    return (_BYTE *)NETRBErrorLog((uint64_t)"invalid client %p", v10, v11, v12, v13, v14, v15, v16, *(_QWORD *)(a1 + 48));
  if (*(_BYTE *)(*(_QWORD *)(a1 + 48) + 545))
    return (_BYTE *)NETRBErrorLog((uint64_t)"client already requested interface", v10, v11, v12, v13, v14, v15, v16, a9);
  xpc_dictionary_set_uint64(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), off_10026D390, 0x3F6uLL);
  xpc_dictionary_set_uint64(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), off_10026D3F8, *(unsigned int *)(a1 + 80));
  xpc_dictionary_set_string(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), off_10026D398, (const char *)(*(_QWORD *)(a1 + 48) + 32));
  if (*(_BYTE *)(a1 + 88))
  {
    if (!uuid_is_null(*(const unsigned __int8 **)(a1 + 56)))
      xpc_dictionary_set_uuid(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), off_10026D3A0, *(const unsigned __int8 **)(a1 + 56));
  }
  else
  {
    xpc_dictionary_set_BOOL(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), off_10026D3B8, 0);
  }
  v24 = *(const char **)(a1 + 64);
  if (v24)
    xpc_dictionary_set_string(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), off_10026D418, v24);
  if (*(_BYTE *)(a1 + 89))
    xpc_dictionary_set_BOOL(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), off_10026D3C0, 1);
  if (*(_BYTE *)(a1 + 90))
    xpc_dictionary_set_BOOL(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), off_10026D3C8, 1);
  if (*(_BYTE *)(a1 + 91))
    xpc_dictionary_set_BOOL(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), off_10026D3D0, 1);
  if (*(_BYTE *)(a1 + 92))
    xpc_dictionary_set_BOOL(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), off_10026D3D8, 1);
  v25 = *(int *)(a1 + 84);
  if ((_DWORD)v25)
    xpc_dictionary_set_uint64(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), off_10026D478, v25);
  NETRBInfoLog((uint64_t)"client %p xpc send -> create interface [%s%s%s%s ]", v18, v25, v19, v20, v21, v22, v23, *(_QWORD *)(a1 + 48));
  v26 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(v26 + 545) = 1;
  v27 = *(NSObject **)(a1 + 72);
  v28 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 0x40000000;
  v30[2] = sub_100183B94;
  v30[3] = &unk_1002353B0;
  v30[4] = v26;
  v29 = NETRBXPCSetupAndSend(v27, v28, (uint64_t)v30);
  result = *(_BYTE **)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v29;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    return CFRetain(result);
  result[545] = 0;
  return result;
}

void sub_100183B94(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100180BFC(*(_QWORD **)(a1 + 32), 1014, a2, *(_QWORD *)(a1 + 32) + 289, a5, a6, a7, a8);
}

uint64_t _NETRBClientAddIPPortForwardingRule(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v9;
  char v11;
  __int16 v12;
  char v13;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD block[9];
  __int16 v21;
  __int16 v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char v28;

  v25 = 0;
  v26 = &v25;
  v27 = 0x2000000000;
  v28 = 0;
  if (!cf)
  {
    v16 = "client handle cannot be NULL";
LABEL_12:
    NETRBErrorLog((uint64_t)v16, a2, a3, a4, a5, a6, a7, a8, v19);
    goto LABEL_13;
  }
  v9 = a6;
  v11 = a4;
  v12 = a3;
  v13 = a2;
  if ((_DWORD)a4 != 2 && (_DWORD)a4 != 30)
  {
    NETRBErrorLog((uint64_t)"invalid address family %d", a2, a3, a4, a5, a6, a7, a8, a4);
    goto LABEL_13;
  }
  if (qword_10026DCB8 != -1)
    dispatch_once(&qword_10026DCB8, &stru_100235668);
  v15 = qword_10026DCC0;
  if (!qword_10026DCC0)
  {
    v16 = "unable to create framework queue";
    goto LABEL_12;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100183D18;
  block[3] = &unk_100235450;
  v23 = v13;
  v21 = v12;
  v24 = v11;
  block[6] = cf;
  block[7] = a5;
  v22 = v9;
  block[4] = a7;
  block[5] = &v25;
  block[8] = qword_10026DCC0;
  CFRetain(cf);
  dispatch_sync(v15, block);
  if (!*((_BYTE *)v26 + 24))
    CFRelease(cf);
LABEL_13:
  v17 = *((unsigned __int8 *)v26 + 24);
  _Block_object_dispose(&v25, 8);
  return v17;
}

void sub_100183D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  xpc_object_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[6];

  if (sub_100180114(*(_BYTE **)(a1 + 48), a2, a3, a4, a5, a6, a7, a8))
  {
    NETRBErrorLog((uint64_t)"invalid client %p", v9, v10, v11, v12, v13, v14, v15, *(_QWORD *)(a1 + 48));
  }
  else
  {
    v16 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v16, off_10026D398, (const char *)(*(_QWORD *)(a1 + 48) + 32));
    xpc_dictionary_set_uint64(v16, off_10026D390, 0x3F7uLL);
    v17 = sub_100183E54(*(unsigned __int8 *)(a1 + 76), *(unsigned __int16 *)(a1 + 72), *(unsigned __int8 *)(a1 + 77), *(void **)(a1 + 56), *(unsigned __int16 *)(a1 + 74));
    xpc_dictionary_set_value(v16, off_10026D4F8, v17);
    xpc_release(v17);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 0x40000000;
    v26[2] = sub_100183FA8;
    v26[3] = &unk_100235428;
    v18 = *(_QWORD *)(a1 + 48);
    v26[4] = *(_QWORD *)(a1 + 32);
    v26[5] = v18;
    NETRBInfoLog((uint64_t)"client %p xpc send -> add port forwarding rule", v19, v20, v21, v22, v23, v24, v25, v18);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = NETRBXPCSetupAndSend(*(NSObject **)(a1 + 64), v16, (uint64_t)v26);
    xpc_release(v16);
  }
}

void *sub_100183E54(unsigned int a1, unsigned int a2, unsigned int a3, void *a4, unsigned int a5)
{
  void *v10;
  xpc_object_t v12;
  char string[46];

  if (a3 != 30 && a3 != 2 || !a4 && a5 || a4 && !a5 || a4 && !inet_ntop(a3, a4, string, 0x2Eu))
    return 0;
  v12 = xpc_dictionary_create(0, 0, 0);
  v10 = v12;
  if (a1)
    xpc_dictionary_set_uint64(v12, off_10026D508, a1);
  if (a2)
    xpc_dictionary_set_uint64(v10, off_10026D510, a2);
  xpc_dictionary_set_uint64(v10, off_10026D520, a3);
  if (a5)
    xpc_dictionary_set_uint64(v10, off_10026D528, a5);
  if (a4)
    xpc_dictionary_set_string(v10, off_10026D518, string);
  return v10;
}

void sub_100183FA8(uint64_t a1, void *a2)
{
  uint64_t v4;
  NSObject *global_queue;
  _QWORD v6[5];
  char v7;

  CFRelease(*(CFTypeRef *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (a2)
    {
      LOBYTE(a2) = xpc_dictionary_get_uint64(a2, off_10026D3F0) == 2001;
      v4 = *(_QWORD *)(a1 + 32);
    }
    global_queue = dispatch_get_global_queue(0, 0);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 0x40000000;
    v6[2] = sub_100184054;
    v6[3] = &unk_100235400;
    v6[4] = v4;
    v7 = (char)a2;
    dispatch_async(global_queue, v6);
  }
}

uint64_t sub_100184054(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t _NETRBClientRemoveIPPortForwardingRule(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  __int16 v10;
  char v11;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD block[8];
  __int16 v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;

  v22 = 0;
  v23 = &v22;
  v24 = 0x2000000000;
  v25 = 0;
  if (!cf)
  {
    v14 = "client handle cannot be NULL";
LABEL_12:
    NETRBErrorLog((uint64_t)v14, a2, a3, a4, a5, a6, a7, a8, v17);
    goto LABEL_13;
  }
  v9 = a4;
  v10 = a3;
  v11 = a2;
  if ((_DWORD)a4 != 2 && (_DWORD)a4 != 30)
  {
    NETRBErrorLog((uint64_t)"invalid address family %d", a2, a3, a4, a5, a6, a7, a8, a4);
    goto LABEL_13;
  }
  if (qword_10026DCB8 != -1)
    dispatch_once(&qword_10026DCB8, &stru_100235668);
  v13 = qword_10026DCC0;
  if (!qword_10026DCC0)
  {
    v14 = "unable to create framework queue";
    goto LABEL_12;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1001841C0;
  block[3] = &unk_1002354C8;
  v20 = v11;
  v19 = v10;
  v21 = v9;
  block[4] = a5;
  block[5] = &v22;
  block[6] = cf;
  block[7] = qword_10026DCC0;
  CFRetain(cf);
  dispatch_sync(v13, block);
  if (!*((_BYTE *)v23 + 24))
    CFRelease(cf);
LABEL_13:
  v15 = *((unsigned __int8 *)v23 + 24);
  _Block_object_dispose(&v22, 8);
  return v15;
}

void sub_1001841C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  xpc_object_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  xpc_object_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[6];

  if (sub_100180114(*(_BYTE **)(a1 + 48), a2, a3, a4, a5, a6, a7, a8))
  {
    NETRBErrorLog((uint64_t)"invalid client %p", v9, v10, v11, v12, v13, v14, v15, *(_QWORD *)(a1 + 48));
  }
  else
  {
    v16 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v16, off_10026D398, (const char *)(*(_QWORD *)(a1 + 48) + 32));
    xpc_dictionary_set_uint64(v16, off_10026D390, 0x3F8uLL);
    v17 = *(unsigned __int8 *)(a1 + 67);
    if ((_DWORD)v17 == 30 || (_DWORD)v17 == 2)
    {
      v19 = *(unsigned __int8 *)(a1 + 66);
      v20 = *(unsigned __int16 *)(a1 + 64);
      v21 = xpc_dictionary_create(0, 0, 0);
      v22 = v21;
      if ((_DWORD)v19)
        xpc_dictionary_set_uint64(v21, off_10026D508, v19);
      if ((_DWORD)v20)
        xpc_dictionary_set_uint64(v22, off_10026D510, v20);
      xpc_dictionary_set_uint64(v22, off_10026D520, v17);
    }
    else
    {
      v22 = 0;
    }
    xpc_dictionary_set_value(v16, off_10026D4F8, v22);
    xpc_release(v22);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 0x40000000;
    v31[2] = sub_10018436C;
    v31[3] = &unk_1002354A0;
    v23 = *(_QWORD *)(a1 + 48);
    v31[4] = *(_QWORD *)(a1 + 32);
    v31[5] = v23;
    NETRBInfoLog((uint64_t)"client %p xpc send -> remove port forwarding rule", v24, v25, v26, v27, v28, v29, v30, v23);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = NETRBXPCSetupAndSend(*(NSObject **)(a1 + 56), v16, (uint64_t)v31);
    xpc_release(v16);
  }
}

void sub_10018436C(uint64_t a1, void *a2)
{
  uint64_t v4;
  NSObject *global_queue;
  _QWORD v6[5];
  char v7;

  CFRelease(*(CFTypeRef *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (a2)
    {
      LOBYTE(a2) = xpc_dictionary_get_uint64(a2, off_10026D3F0) == 2001;
      v4 = *(_QWORD *)(a1 + 32);
    }
    global_queue = dispatch_get_global_queue(0, 0);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 0x40000000;
    v6[2] = sub_100184418;
    v6[3] = &unk_100235478;
    v6[4] = v4;
    v7 = (char)a2;
    dispatch_async(global_queue, v6);
  }
}

uint64_t sub_100184418(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t _NETRBClientGetIPPortForwardingRules(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD block[8];
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;

  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  if (!cf)
  {
    v12 = "client handle cannot be NULL";
LABEL_12:
    NETRBErrorLog((uint64_t)v12, a2, a3, a4, a5, a6, a7, a8, v15);
    goto LABEL_13;
  }
  v9 = a2;
  if ((_DWORD)a2 != 2 && (_DWORD)a2 != 30)
  {
    NETRBErrorLog((uint64_t)"invalid address family %d", a2, a3, a4, a5, a6, a7, a8, a2);
    goto LABEL_13;
  }
  if (qword_10026DCB8 != -1)
    dispatch_once(&qword_10026DCB8, &stru_100235668);
  v11 = qword_10026DCC0;
  if (!qword_10026DCC0)
  {
    v12 = "unable to create framework queue";
    goto LABEL_12;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10018456C;
  block[3] = &unk_100235540;
  v17 = v9;
  block[4] = a3;
  block[5] = &v18;
  block[6] = cf;
  block[7] = qword_10026DCC0;
  CFRetain(cf);
  dispatch_sync(v11, block);
  if (!*((_BYTE *)v19 + 24))
    CFRelease(cf);
LABEL_13:
  v13 = *((unsigned __int8 *)v19 + 24);
  _Block_object_dispose(&v18, 8);
  return v13;
}

void sub_10018456C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  xpc_object_t v16;
  uint64_t v17;
  xpc_object_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[6];

  if (sub_100180114(*(_BYTE **)(a1 + 48), a2, a3, a4, a5, a6, a7, a8))
  {
    NETRBErrorLog((uint64_t)"invalid client %p", v9, v10, v11, v12, v13, v14, v15, *(_QWORD *)(a1 + 48));
  }
  else
  {
    v16 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v16, off_10026D398, (const char *)(*(_QWORD *)(a1 + 48) + 32));
    xpc_dictionary_set_uint64(v16, off_10026D390, 0x3F9uLL);
    v17 = *(unsigned __int8 *)(a1 + 64);
    if ((_DWORD)v17 == 30 || (_DWORD)v17 == 2)
    {
      v19 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v19, off_10026D520, v17);
    }
    else
    {
      v19 = 0;
    }
    xpc_dictionary_set_value(v16, off_10026D4F8, v19);
    xpc_release(v19);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 0x40000000;
    v28[2] = sub_1001846CC;
    v28[3] = &unk_100235518;
    v20 = *(_QWORD *)(a1 + 48);
    v28[4] = *(_QWORD *)(a1 + 32);
    v28[5] = v20;
    NETRBInfoLog((uint64_t)"client %p xpc send -> get port forwarding rules", v21, v22, v23, v24, v25, v26, v27, v20);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = NETRBXPCSetupAndSend(*(NSObject **)(a1 + 56), v16, (uint64_t)v28);
    xpc_release(v16);
  }
}

void sub_1001846CC(uint64_t a1, void *a2)
{
  xpc_object_t value;
  NSObject *global_queue;
  _QWORD v6[6];

  CFRelease(*(CFTypeRef *)(a1 + 40));
  if (a2)
  {
    value = xpc_dictionary_get_value(a2, off_10026D500);
    a2 = value;
    if (value)
      xpc_retain(value);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  v6[2] = sub_10018476C;
  v6[3] = &unk_1002354F0;
  v6[4] = *(_QWORD *)(a1 + 32);
  v6[5] = a2;
  dispatch_async(global_queue, v6);
}

void sub_10018476C(uint64_t a1)
{
  void *v2;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = *(void **)(a1 + 40);
  if (v2)
    xpc_release(v2);
}

const char *_NETRBIPPortForwardingDictGetDetails(xpc_object_t xdict, _BYTE *a2, _WORD *a3, uint64_t a4, void *a5, _WORD *a6, uint64_t a7, uint64_t a8)
{
  int v10;
  char uint64;
  __int16 v15;
  __int16 v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *result;
  const char *v26;
  uint64_t v27;

  if (!xdict)
  {
    v26 = "rule is NULL";
LABEL_12:
    NETRBErrorLog((uint64_t)v26, (uint64_t)a2, (uint64_t)a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8, v27);
    return 0;
  }
  v10 = a4;
  if ((_DWORD)a4 != 2 && (_DWORD)a4 != 30)
  {
    v27 = a4;
    v26 = "invalid address family %d";
    goto LABEL_12;
  }
  uint64 = xpc_dictionary_get_uint64(xdict, off_10026D508);
  *a2 = uint64;
  if (!uint64)
    return 0;
  v15 = xpc_dictionary_get_uint64(xdict, off_10026D510);
  *a3 = v15;
  if (!v15)
    return 0;
  v16 = xpc_dictionary_get_uint64(xdict, off_10026D528);
  *a6 = v16;
  if (!v16)
    return 0;
  v17 = xpc_dictionary_get_uint64(xdict, off_10026D520);
  if (v17 != v10)
  {
    NETRBErrorLog((uint64_t)"returned address family %d != %d", v18, v19, v20, v21, v22, v23, v24, v17);
    return 0;
  }
  result = xpc_dictionary_get_string(xdict, off_10026D518);
  if (result)
    return (const char *)(inet_pton(v10, result, a5) != 0);
  return result;
}

uint64_t NETRBClientSendNotification(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Count;
  uint64_t v10;
  xpc_object_t v11;
  void *v12;
  const char *v13;
  uint64_t uint64;
  CFIndex i;
  _QWORD *ValueAtIndex;
  _QWORD *v17;
  NSObject *v18;
  const char *v20;
  uint64_t v21[6];

  if (!qword_10026DCA0 || (Count = CFArrayGetCount((CFArrayRef)qword_10026DCA0)) == 0)
  {
    v20 = "received notification but no clients";
LABEL_14:
    NETRBErrorLog((uint64_t)v20, a2, a3, a4, a5, a6, a7, a8, v21[0]);
    return 0;
  }
  v10 = Count;
  v11 = xpc_dictionary_create(0, 0, 0);
  if (!v11)
  {
    v20 = "xpc_dictionary_create() failed";
    goto LABEL_14;
  }
  v12 = v11;
  v13 = netrbClientNotificationKey;
  uint64 = xpc_dictionary_get_uint64(a1, off_10026D4A0);
  xpc_dictionary_set_uint64(v12, v13, uint64);
  if (v10 >= 1)
  {
    for (i = 0; i != v10; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)qword_10026DCA0, i);
      if (ValueAtIndex)
      {
        v17 = ValueAtIndex;
        if (ValueAtIndex[2])
        {
          if (ValueAtIndex[3])
          {
            xpc_retain(v12);
            CFRetain(v17);
            v18 = v17[2];
            v21[0] = (uint64_t)_NSConcreteStackBlock;
            v21[1] = 0x40000000;
            v21[2] = (uint64_t)sub_100184A40;
            v21[3] = (uint64_t)&unk_100235588;
            v21[4] = (uint64_t)v17;
            v21[5] = (uint64_t)v12;
            dispatch_async(v18, v21);
          }
        }
      }
    }
  }
  xpc_release(v12);
  return 1;
}

void sub_100184A40(uint64_t a1)
{
  _QWORD block[5];
  __int128 v3;
  _QWORD v4[3];
  int v5;

  v4[0] = 0;
  v4[1] = v4;
  v4[2] = 0x2000000000;
  v5 = 0;
  if (qword_10026DCB8 != -1)
    dispatch_once(&qword_10026DCB8, &stru_100235668);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100184B0C;
  block[3] = &unk_100235568;
  block[4] = v4;
  v3 = *(_OWORD *)(a1 + 32);
  dispatch_sync((dispatch_queue_t)qword_10026DCC0, block);
  xpc_release(*(xpc_object_t *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  _Block_object_dispose(v4, 8);
}

uint64_t sub_100184B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_100180114(*(_BYTE **)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!(_DWORD)result)
    return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 16))();
  return result;
}

uint64_t _NETRBClientAddLowLatencyFlow(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100184B64(a1, a2, 0, a4, a5, a6, a7, a8);
}

uint64_t sub_100184B64(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v22[7];
  char v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;

  v8 = a3;
  v24 = 0;
  v25 = &v24;
  v26 = 0x2000000000;
  v27 = 0;
  inited = netrbInitIfnetTrafficDescriptor(a2, 0, a3, a4, a5, a6, a7, a8);
  *((_BYTE *)v25 + 24) = inited;
  if ((inited & 1) == 0)
  {
    v19 = "input xpc dictionary is malformed.";
LABEL_8:
    NETRBErrorLog((uint64_t)v19, v12, v13, v14, v15, v16, v17, v18, v22[0]);
    goto LABEL_9;
  }
  if (qword_10026DCB8 != -1)
    dispatch_once(&qword_10026DCB8, &stru_100235668);
  if (!qword_10026DCC0)
  {
    v19 = "unable to create framework queue";
    goto LABEL_8;
  }
  v22[0] = (uint64_t)_NSConcreteStackBlock;
  v22[1] = 0x40000000;
  v22[2] = (uint64_t)sub_1001851F0;
  v22[3] = (uint64_t)&unk_100235740;
  v22[4] = (uint64_t)&v24;
  v22[5] = a1;
  v22[6] = (uint64_t)a2;
  v23 = v8;
  dispatch_sync((dispatch_queue_t)qword_10026DCC0, v22);
LABEL_9:
  v20 = *((unsigned __int8 *)v25 + 24);
  _Block_object_dispose(&v24, 8);
  return v20;
}

uint64_t _NETRBClientRemoveLowLatencyFlow(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100184B64(a1, a2, 1, a4, a5, a6, a7, a8);
}

void sub_100184C7C(id a1)
{
  qword_10026DCB0 = _CFRuntimeRegisterClass(&unk_1002355E8);
}

uint64_t sub_100184CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;
  NSObject *v10;

  v9 = *(const void **)(a1 + 24);
  if (v9)
  {
    _Block_release(v9);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v10 = *(NSObject **)(a1 + 16);
  if (v10)
  {
    dispatch_release(v10);
    *(_QWORD *)(a1 + 16) = 0;
  }
  return NETRBInfoLog((uint64_t)"releasing client %p", a2, a3, a4, a5, a6, a7, a8, a1);
}

void sub_100184CF4(id a1)
{
  int *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char __str[45];

  snprintf(__str, 0x2DuLL, "com.apple.framework.netrb.%p", &qword_10026DCB0);
  __str[44] = 0;
  qword_10026DCC0 = (uint64_t)dispatch_queue_create(__str, 0);
  if (!qword_10026DCC0)
  {
    v1 = __error();
    v2 = strerror(*v1);
    NETRBErrorLog((uint64_t)"creating framework queue failed %s", v3, v4, v5, v6, v7, v8, v9, (uint64_t)v2);
  }
}

void sub_100184D90(id a1)
{
  int *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char __str[49];

  snprintf(__str, 0x31uLL, "com.apple.framework.netrb.xpc.%p", &qword_10026DCB0);
  __str[48] = 0;
  qword_10026DCD0 = (uint64_t)dispatch_queue_create(__str, 0);
  if (!qword_10026DCD0)
  {
    v1 = __error();
    v2 = strerror(*v1);
    NETRBErrorLog((uint64_t)"creating client XPC queue failed %s", v3, v4, v5, v6, v7, v8, v9, (uint64_t)v2);
  }
}

void sub_100184E2C(void *a1, xpc_object_t xdict)
{
  const char *string;
  const uint8_t *uuid;
  int v6;
  const char *v7;
  const char *v8;
  const char *v9;
  BOOL v10;
  const char *v12;
  xpc_object_t value;
  xpc_object_t v14;
  unsigned __int8 v15[24];

  string = xpc_dictionary_get_string(xdict, off_10026D3A8);
  if (string)
    xpc_dictionary_set_string(a1, netrbClientMACAddress, string);
  *(_OWORD *)v15 = 0uLL;
  uuid = xpc_dictionary_get_uuid(xdict, off_10026D3A0);
  if (uuid)
  {
    *(_OWORD *)v15 = *(_OWORD *)uuid;
    xpc_dictionary_set_uuid(a1, netrbClientMACUUID, v15);
  }
  v6 = xpc_dictionary_dup_fd(xdict, off_10026D3B0);
  if (v6 != -1)
    xpc_dictionary_set_uint64(a1, netrbClientSocketFD, v6);
  v7 = xpc_dictionary_get_string(xdict, off_10026D488);
  v8 = xpc_dictionary_get_string(xdict, off_10026D490);
  v9 = xpc_dictionary_get_string(xdict, off_10026D498);
  if (v7)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (!v10 && v9 != 0)
  {
    v12 = v9;
    xpc_dictionary_set_string(a1, netrbClientInterfaceStartAddress, v7);
    xpc_dictionary_set_string(a1, netrbClientInterfaceEndAddress, v8);
    xpc_dictionary_set_string(a1, netrbClientInterfaceNetworkMask, v12);
  }
  value = xpc_dictionary_get_value(xdict, off_10026D478);
  if (value)
    xpc_dictionary_set_value(a1, netrbClientInterfaceMTU, value);
  v14 = xpc_dictionary_get_value(xdict, off_10026D4C0);
  if (v14)
    xpc_dictionary_set_value(a1, netrbClientNat66Param, v14);
}

void sub_100185010(uint64_t a1)
{
  void *v2;
  _QWORD block[5];
  __int128 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  if (qword_10026DCB8 != -1)
    dispatch_once(&qword_10026DCB8, &stru_100235668);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100185138;
  block[3] = &unk_1002356D0;
  block[4] = &v7;
  v6 = *(_DWORD *)(a1 + 56);
  v4 = *(_OWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  dispatch_sync((dispatch_queue_t)qword_10026DCC0, block);
  if (!*((_DWORD *)v8 + 6))
    (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 16))();
  v2 = *(void **)(a1 + 48);
  if (v2)
    xpc_release(v2);
  CFRelease(*(CFTypeRef *)(a1 + 32));
  _Block_object_dispose(&v7, 8);
}

double sub_100185138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  double result;
  _OWORD *v11;

  v9 = sub_100180114(*(_BYTE **)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v9;
  if (!v9 && *(_DWORD *)(a1 + 64) == 1001)
  {
    if (!strncmp(*(const char **)(a1 + 48), (const char *)(*(_QWORD *)(a1 + 40) + 289), 0x100uLL)
      || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1, *(_DWORD *)(a1 + 64) == 1001))
    {
      if (xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 56), netrbClientNotificationKey) == 5003)
      {
        v11 = (_OWORD *)(*(_QWORD *)(a1 + 40) + 289);
        result = 0.0;
        v11[14] = 0u;
        v11[15] = 0u;
        v11[12] = 0u;
        v11[13] = 0u;
        v11[10] = 0u;
        v11[11] = 0u;
        v11[8] = 0u;
        v11[9] = 0u;
        v11[6] = 0u;
        v11[7] = 0u;
        v11[4] = 0u;
        v11[5] = 0u;
        v11[2] = 0u;
        v11[3] = 0u;
        *v11 = 0u;
        v11[1] = 0u;
      }
    }
  }
  return result;
}

uint64_t sub_1001851F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD v27[4];
  __int128 v28;

  if (sub_100180114(*(_BYTE **)(a1 + 40), a2, a3, a4, a5, a6, a7, a8))
  {
    result = NETRBErrorLog((uint64_t)"invalid client %p", v9, v10, v11, v12, v13, v14, v15, *(_QWORD *)(a1 + 40));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }
  else
  {
    xpc_dictionary_set_string(*(xpc_object_t *)(a1 + 48), off_10026D398, (const char *)(*(_QWORD *)(a1 + 40) + 32));
    if (*(_BYTE *)(a1 + 56))
      v17 = 1019;
    else
      v17 = 1018;
    if (*(_BYTE *)(a1 + 56))
      v18 = "client %p xpc send -> remove low latency flow";
    else
      v18 = "client %p xpc send -> add low latency flow";
    xpc_dictionary_set_uint64(*(xpc_object_t *)(a1 + 48), off_10026D390, v17);
    NETRBInfoLog((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25, *(_QWORD *)(a1 + 40));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    v26 = *(void **)(a1 + 48);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 0x40000000;
    v27[2] = sub_1001852F4;
    v27[3] = &unk_100235718;
    v28 = *(_OWORD *)(a1 + 32);
    return NETRBXPCSetupAndSend(0, v26, (uint64_t)v27);
  }
  return result;
}

uint64_t sub_1001852F4(uint64_t a1, xpc_object_t object, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  xpc_object_t value;
  void *v20;
  uint64_t v21;

  if (!object || xpc_get_type(object) != (xpc_type_t)&_xpc_type_dictionary)
  {
    v10 = "response is not a dictionary type";
LABEL_4:
    NETRBErrorLog((uint64_t)v10, (uint64_t)object, a3, a4, a5, a6, a7, a8, v21);
    return NETRBInfoLog((uint64_t)"client %p set low latency flow reponse received, result %u", v11, v12, v13, v14, v15, v16, v17, *(_QWORD *)(a1 + 40));
  }
  value = xpc_dictionary_get_value(object, off_10026D3F0);
  if (!value || (v20 = value, xpc_get_type(value) != (xpc_type_t)&_xpc_type_uint64))
  {
    v10 = "response does not contain the success status";
    goto LABEL_4;
  }
  if (xpc_uint64_get_value(v20) == 2001)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return NETRBInfoLog((uint64_t)"client %p set low latency flow reponse received, result %u", v11, v12, v13, v14, v15, v16, v17, *(_QWORD *)(a1 + 40));
}

uint64_t NETRBLogCreate()
{
  if (qword_10026DCD8 != -1)
    dispatch_once(&qword_10026DCD8, &stru_1002357F0);
  if (byte_10026DCE0)
    return 12;
  else
    return 0;
}

void sub_10018540C(id a1)
{
  qword_10026DCE8 = (uint64_t)os_log_create("com.apple.MobileInternetSharing", "framework.netrb");
  if (!qword_10026DCE8)
  {
    byte_10026DCE0 = 1;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100187A58();
  }
}

uint64_t NETRBErrorLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return os_log_with_args(qword_10026DCE8, 0, a1, &a9, v9);
}

uint64_t NETRBNoticeLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return os_log_with_args(qword_10026DCE8, 0, a1, &a9, v9);
}

uint64_t NETRBInfoLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return os_log_with_args(qword_10026DCE8, 1, a1, &a9, v9);
}

uint64_t NETRBDebugLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return os_log_with_args(qword_10026DCE8, 2, a1, &a9, v9);
}

uint64_t NETRBXPCEndPointCreate(dispatch_queue_t targetq, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  xpc_connection_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _xpc_connection_s *v17;
  uint64_t v19;
  _QWORD handler[6];

  if (qword_10026DCF0)
  {
    NETRBDebugLog((uint64_t)"xpc endpoint connection already exists", a2, a3, a4, a5, a6, a7, a8, v19);
  }
  else
  {
    v9 = xpc_connection_create(0, targetq);
    qword_10026DCF0 = (uint64_t)v9;
    if (!v9)
    {
      NETRBErrorLog((uint64_t)"unable to create xpc endpoint connection", v10, v11, v12, v13, v14, v15, v16, v19);
      return 0;
    }
    v17 = v9;
    NETRBInfoLog((uint64_t)"listener connection %p created", v10, v11, v12, v13, v14, v15, v16, (uint64_t)v9);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000;
    handler[2] = sub_100185620;
    handler[3] = &unk_100235810;
    handler[4] = v17;
    handler[5] = targetq;
    xpc_connection_set_event_handler(v17, handler);
    xpc_connection_resume((xpc_connection_t)qword_10026DCF0);
  }
  return 1;
}

void sub_100185620(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  NSObject *v14;
  _QWORD handler[5];

  type = xpc_get_type(object);
  v12 = *(_QWORD *)(a1 + 32);
  if (v12 && (v12 == qword_10026DCF0 ? (v13 = type == (xpc_type_t)&_xpc_type_error) : (v13 = 0), v13))
  {
    if (object == &_xpc_error_termination_imminent)
    {
      NETRBInfoLog((uint64_t)"received XPC_ERROR_TERMINATION_IMMINENT for %p", v5, v6, v7, v8, v9, v10, v11, *(_QWORD *)(a1 + 32));
    }
    else if (object == &_xpc_error_connection_invalid)
    {
      NETRBInfoLog((uint64_t)"XPC_ERROR_CONNECTION_INVALID for %p", v5, v6, v7, v8, v9, v10, v11, *(_QWORD *)(a1 + 32));
    }
  }
  else if (type == (xpc_type_t)&_xpc_type_connection)
  {
    v14 = *(NSObject **)(a1 + 40);
    NETRBInfoLog((uint64_t)"new notification connection %p from daemon", v5, v6, v7, v8, v9, v10, v11, (uint64_t)object);
    if (qword_10026DD00)
    {
      xpc_connection_cancel((xpc_connection_t)qword_10026DD00);
      xpc_release((xpc_object_t)qword_10026DD00);
      qword_10026DD00 = 0;
    }
    qword_10026DD00 = (uint64_t)xpc_retain(object);
    xpc_connection_set_target_queue((xpc_connection_t)object, v14);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000;
    handler[2] = sub_100185BF8;
    handler[3] = &unk_100235870;
    handler[4] = object;
    xpc_connection_set_event_handler((xpc_connection_t)object, handler);
    xpc_connection_resume((xpc_connection_t)object);
  }
}

BOOL NETRBXPCCreate(dispatch_queue_t targetq, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 result;
  xpc_connection_t mach_service;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD handler[6];

  if (qword_10026DCF8)
  {
    NETRBDebugLog((uint64_t)"xpc connection %p to daemon already exists", a2, a3, a4, a5, a6, a7, a8, qword_10026DCF8);
    return 1;
  }
  mach_service = xpc_connection_create_mach_service(off_10026D388, targetq, 2uLL);
  qword_10026DCF8 = (uint64_t)mach_service;
  if (!mach_service)
    goto LABEL_7;
  if (xpc_get_type(mach_service) != (xpc_type_t)&_xpc_type_connection)
  {
    if (qword_10026DCF8)
    {
      xpc_release((xpc_object_t)qword_10026DCF8);
LABEL_8:
      result = 0;
      qword_10026DCF8 = 0;
      return result;
    }
LABEL_7:
    NETRBErrorLog((uint64_t)"unable to create connection to daemon %s", v11, v12, v13, v14, v15, v16, v17, (uint64_t)off_10026D388);
    goto LABEL_8;
  }
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 0x40000000;
  handler[2] = sub_100185870;
  handler[3] = &unk_100235850;
  handler[4] = qword_10026DCF8;
  handler[5] = a2;
  xpc_connection_set_event_handler((xpc_connection_t)qword_10026DCF8, handler);
  NETRBInfoLog((uint64_t)"connection %p to daemon created", v18, v19, v20, v21, v22, v23, v24, qword_10026DCF8);
  xpc_connection_resume((xpc_connection_t)qword_10026DCF8);
  return qword_10026DCF8 != 0;
}

void sub_100185870(uint64_t a1, xpc_object_t object)
{
  uint64_t v3;
  _QWORD v4[6];

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = sub_1001858DC;
  v4[3] = &unk_100235830;
  v3 = *(_QWORD *)(a1 + 32);
  v4[4] = object;
  v4[5] = v3;
  xpc_retain(object);
  dispatch_async(*(dispatch_queue_t *)(a1 + 40), v4);
}

void sub_1001858DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (xpc_get_type(*(xpc_object_t *)(a1 + 32)) == (xpc_type_t)&_xpc_type_error)
  {
    v9 = *(_QWORD *)(a1 + 40);
    if (v9 == qword_10026DCF8)
    {
      xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 32), _xpc_error_key_description);
      v17 = NETRBErrorLog((uint64_t)"xpc connection %p to daemon error: %s", v10, v11, v12, v13, v14, v15, v16, v9);
      NETRBXPCCleanup(v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  else
  {
    NETRBErrorLog((uint64_t)"unrecognized event", v2, v3, v4, v5, v6, v7, v8, v25);
  }
  xpc_release(*(xpc_object_t *)(a1 + 32));
}

BOOL NETRBXPCCleanup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = qword_10026DCF8;
  if (qword_10026DCF8)
  {
    NETRBInfoLog((uint64_t)"cleaning up connection %p to daemon", a2, a3, a4, a5, a6, a7, a8, qword_10026DCF8);
    xpc_connection_cancel((xpc_connection_t)qword_10026DCF8);
    xpc_release((xpc_object_t)qword_10026DCF8);
    qword_10026DCF8 = 0;
  }
  return v8 != 0;
}

BOOL NETRBXPCSetupAndSend(NSObject *a1, xpc_object_t xdict, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  xpc_object_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  xpc_type_t type;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  xpc_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *string;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD handler[5];

  if (xpc_dictionary_get_uint64(xdict, off_10026D390) == 1000)
  {
    if (!qword_10026DCF0)
      return 0;
    xpc_dictionary_set_connection(xdict, off_10026D3E8, (xpc_connection_t)qword_10026DCF0);
  }
  if (a1)
  {
    v13 = qword_10026DCF8 != 0;
    if (qword_10026DCF8)
    {
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 0x40000000;
      handler[2] = sub_100185D10;
      handler[3] = &unk_100235898;
      handler[4] = a3;
      xpc_connection_send_message_with_reply((xpc_connection_t)qword_10026DCF8, xdict, a1, handler);
    }
    else
    {
      NETRBDebugLog((uint64_t)"connection to daemon does not exist", v6, v7, v8, v9, v10, v11, v12, v80);
    }
    return v13;
  }
  if (!qword_10026DCF8)
  {
    NETRBDebugLog((uint64_t)"connection to daemon does not exist", v6, v7, v8, v9, v10, v11, v12, v80);
    return 0;
  }
  v14 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_10026DCF8, xdict);
  v22 = v14;
  if (v14)
  {
    type = xpc_get_type(v14);
    if (type != (xpc_type_t)&_xpc_type_error)
    {
      v31 = type;
      if (type == (xpc_type_t)&_xpc_type_dictionary)
      {
        if (xpc_dictionary_get_uint64(v22, off_10026D3F0) == 2002)
        {
          v72 = NETRBErrorLog((uint64_t)"error: aborting XPC connection to daemon", v65, v66, v67, v68, v69, v70, v71, v80);
          NETRBXPCCleanup(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        v31 = (xpc_type_t)&_xpc_type_dictionary;
      }
      else
      {
        v32 = NETRBErrorLog((uint64_t)"unknown response", v24, v25, v26, v27, v28, v29, v30, v80);
        NETRBXPCCleanup(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      goto LABEL_18;
    }
    string = xpc_dictionary_get_string(v22, _xpc_error_key_description);
    v55 = NETRBErrorLog((uint64_t)"xpc_connection_send_message_with_reply_sync() received %s", v48, v49, v50, v51, v52, v53, v54, (uint64_t)string);
    NETRBXPCCleanup(v55, v56, v57, v58, v59, v60, v61, v62);
  }
  else
  {
    NETRBXPCCleanup(0, v15, v16, v17, v18, v19, v20, v21);
    NETRBErrorLog((uint64_t)"NULL response from xpc_connection_send_message_with_reply_sync", v40, v41, v42, v43, v44, v45, v46, v80);
  }
  v31 = (xpc_type_t)&_xpc_type_error;
LABEL_18:
  if (v31 == (xpc_type_t)&_xpc_type_dictionary)
    v63 = v22;
  else
    v63 = 0;
  (*(void (**)(uint64_t, void *))(a3 + 16))(a3, v63);
  if (v22)
    xpc_release(v22);
  return 1;
}

BOOL NETRBEndPointCleanup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = qword_10026DCF0;
  if (qword_10026DCF0)
  {
    NETRBInfoLog((uint64_t)"cleaning up listener connection %p", a2, a3, a4, a5, a6, a7, a8, qword_10026DCF0);
    xpc_connection_cancel((xpc_connection_t)qword_10026DCF0);
    xpc_release((xpc_object_t)qword_10026DCF0);
    qword_10026DCF0 = 0;
  }
  return v8 != 0;
}

void sub_100185BF8(uint64_t a1, xpc_object_t object, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  xpc_type_t type;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  BOOL v22;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  type = xpc_get_type(object);
  v12 = xpc_copy_description(object);
  if (v12)
  {
    v20 = v12;
    NETRBInfoLog((uint64_t)"received event on notification connection %s", v13, v14, v15, v16, v17, v18, v19, (uint64_t)v12);
    free(v20);
  }
  v21 = *(_QWORD *)(a1 + 32);
  if (v21)
    v22 = v21 == qword_10026DD00;
  else
    v22 = 0;
  if (v22 && type == (xpc_type_t)&_xpc_type_error)
  {
    xpc_dictionary_get_string(object, _xpc_error_key_description);
    NETRBInfoLog((uint64_t)"error %p:%s", v25, v26, v27, v28, v29, v30, v31, v21);
    xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
    xpc_release(*(xpc_object_t *)(a1 + 32));
    qword_10026DD00 = 0;
  }
  else
  {
    if (qword_10026DD00)
      v24 = type == (xpc_type_t)&_xpc_type_dictionary;
    else
      v24 = 0;
    if (v24)
      NETRBClientSendNotification(object, v13, v14, v15, v16, v17, v18, v19);
    else
      NETRBNoticeLog((uint64_t)"unknown event", v13, v14, v15, v16, v17, v18, v19, a9);
  }
}

uint64_t sub_100185D10(uint64_t a1, xpc_object_t object, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  xpc_type_t type;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *string;

  if (object)
  {
    type = xpc_get_type(object);
    if (type == (xpc_type_t)&_xpc_type_dictionary)
    {
      if (xpc_dictionary_get_uint64(object, off_10026D3F0) != 2002)
      {
LABEL_11:
        v26 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16);
        return v26();
      }
      v34 = NETRBErrorLog((uint64_t)"error: aborting XPC connection to daemon", v27, v28, v29, v30, v31, v32, v33, (uint64_t)string);
    }
    else
    {
      if (type == (xpc_type_t)&_xpc_type_error)
      {
        string = xpc_dictionary_get_string(object, _xpc_error_key_description);
        v18 = "error: %s";
      }
      else
      {
        v18 = "unknown response";
      }
      v34 = NETRBErrorLog((uint64_t)v18, v11, v12, v13, v14, v15, v16, v17, (uint64_t)string);
    }
    NETRBXPCCleanup(v34, v35, v36, v37, v38, v39, v40, v41);
    goto LABEL_11;
  }
  NETRBXPCCleanup(a1, 0, a3, a4, a5, a6, a7, a8);
  NETRBErrorLog((uint64_t)"NULL response from xpc_connection_send_message_with_reply()", v19, v20, v21, v22, v23, v24, v25, (uint64_t)string);
  v26 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16);
  return v26();
}

uint64_t _MISAttach(_QWORD *a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;

  if (!a1)
    return 22;
  if (qword_10026DD08 != -1)
    dispatch_once(&qword_10026DD08, &stru_100235918);
  v2 = qword_10026DD10;
  if (!qword_10026DD10)
    return 12;
  *a1 = 0;
  v3 = _NETRBClientCreate(v2, &stru_1002358D8, 0);
  if (!v3)
    return 12;
  v4 = v3;
  result = 0;
  *a1 = v4;
  return result;
}

int sub_100185E78(id a1, int a2, void *a3)
{
  return 0;
}

uint64_t _MISDetach(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = 22;
  if (a1)
  {
    if (_NETRBClientDestroy(a1, a2, a3, a4, a5, a6, a7, a8))
      return 0;
    else
      return 22;
  }
  return v8;
}

uint64_t _MISIsServiceAvailable(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int GlobalServiceState;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int started;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (result)
  {
    v8 = result;
    v20 = 0;
    GlobalServiceState = _NETRBClientGetGlobalServiceState(result, (_DWORD *)&v20 + 1, &v20, a4, a5, a6, a7, a8);
    result = 0;
    if (GlobalServiceState)
    {
      if (HIDWORD(v20) == 1022)
        return 0;
      if (HIDWORD(v20) == 1023)
        return 1;
      result = (uint64_t)xpc_dictionary_create(0, 0, 0);
      if (result)
      {
        v10 = (void *)result;
        xpc_dictionary_set_uint64((xpc_object_t)result, netrbClientDeviceType, 1uLL);
        started = _NETRBClientStartService(v8, 0, 201, 301, v10, v11, v12, v13);
        xpc_release(v10);
        if (started)
        {
          result = _NETRBClientGetGlobalServiceState(v8, (_DWORD *)&v20 + 1, &v20, v15, v16, v17, v18, v19);
          if ((_DWORD)result)
            return HIDWORD(v20) == 1023;
          return result;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t _MISGetGlobalServiceState(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;

  v10 = 0;
  v8 = 22;
  if (a1)
  {
    if (!a3)
      a3 = &v10;
    if (_NETRBClientGetGlobalServiceState(a1, a2, a3, a4, a5, a6, a7, a8))
      return 0;
    else
      return 22;
  }
  return v8;
}

uint64_t _MISGetDynamicStoreKey(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD v10[16];

  if (!a1)
    return 22;
  memset(v10, 0, sizeof(v10));
  if (!_NETRBClientGetDynamicStoreKey(a1, (char *)v10, a3, a4, a5, a6, a7, a8))
    return 22;
  snprintf(a2, 0x100uLL, "%s", (const char *)v10);
  return 0;
}

uint64_t _MISSetGlobalServiceState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = 22;
  if (a1)
  {
    if (_NETRBClientSetGlobalServiceState(a1, a2, a3, a4, a5, a6, a7, a8))
      return 0;
    else
      return 22;
  }
  return v8;
}

uint64_t _MISStartServiceDHCP(uint64_t a1, const char *a2, _OWORD *a3)
{
  xpc_object_t v5;
  void *v6;
  const char *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int started;

  if (!a1)
    return 22;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  v5 = xpc_dictionary_create(0, 0, 0);
  if (!v5)
    return 12;
  v6 = v5;
  xpc_dictionary_set_string(v5, netrbClientInterfaceName, a2);
  v7 = netrbClientDeviceType;
  v8 = strlen(a2);
  if (!strncmp("ap1", a2, v8))
    v9 = 3;
  else
    v9 = 0;
  xpc_dictionary_set_uint64(v6, v7, v9);
  started = _NETRBClientStartService(a1, 0, 201, 302, v6, v10, v11, v12);
  xpc_release(v6);
  if (started)
    return 0;
  else
    return 22;
}

uint64_t _MISStartServiceDHCPLocal(uint64_t a1, const char *a2, _OWORD *a3)
{
  xpc_object_t v5;
  void *v6;
  const char *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int started;

  if (!a1)
    return 22;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  v5 = xpc_dictionary_create(0, 0, 0);
  if (!v5)
    return 12;
  v6 = v5;
  xpc_dictionary_set_string(v5, netrbClientInterfaceName, a2);
  v7 = netrbClientDeviceType;
  v8 = strlen(a2);
  if (!strncmp("ap1", a2, v8))
    v9 = 3;
  else
    v9 = 0;
  xpc_dictionary_set_uint64(v6, v7, v9);
  started = _NETRBClientStartService(a1, 0, 203, 302, v6, v10, v11, v12);
  xpc_release(v6);
  if (started)
    return 0;
  else
    return 22;
}

uint64_t _MISStartServiceDHCPCustom(uint64_t a1, const char *a2, unsigned int a3, unsigned int a4, int a5, _OWORD *a6)
{
  xpc_object_t v11;
  void *v12;
  const char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int started;

  if (!a1)
    return 22;
  a6[14] = 0u;
  a6[15] = 0u;
  a6[12] = 0u;
  a6[13] = 0u;
  a6[10] = 0u;
  a6[11] = 0u;
  a6[8] = 0u;
  a6[9] = 0u;
  a6[6] = 0u;
  a6[7] = 0u;
  a6[4] = 0u;
  a6[5] = 0u;
  a6[2] = 0u;
  a6[3] = 0u;
  *a6 = 0u;
  a6[1] = 0u;
  v11 = xpc_dictionary_create(0, 0, 0);
  if (!v11)
    return 12;
  v12 = v11;
  xpc_dictionary_set_string(v11, netrbClientInterfaceName, a2);
  xpc_dictionary_set_uint64(v12, netrbClientInterfaceMTU, a3);
  xpc_dictionary_set_uint64(v12, netrbClientInterfaceInstance, a4);
  v13 = netrbClientDeviceType;
  v14 = strlen(a2);
  if (!strncmp("ap1", a2, v14))
    v15 = 3;
  else
    v15 = 0;
  xpc_dictionary_set_uint64(v12, v13, v15);
  if (a5 == 1)
    v19 = 203;
  else
    v19 = 201;
  started = _NETRBClientStartService(a1, 0, v19, 302, v12, v16, v17, v18);
  xpc_release(v12);
  if (started)
    return 0;
  else
    return 22;
}

uint64_t _MISStartServiceDHCPWithOptions(uint64_t a1, const char *a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, uint64_t a7, uint64_t a8, _OWORD *a9)
{
  xpc_object_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int started;

  if (!a1)
    return 22;
  a9[14] = 0u;
  a9[15] = 0u;
  a9[12] = 0u;
  a9[13] = 0u;
  a9[10] = 0u;
  a9[11] = 0u;
  a9[8] = 0u;
  a9[9] = 0u;
  a9[6] = 0u;
  a9[7] = 0u;
  a9[4] = 0u;
  a9[5] = 0u;
  a9[2] = 0u;
  a9[3] = 0u;
  *a9 = 0u;
  a9[1] = 0u;
  v15 = xpc_dictionary_create(0, 0, 0);
  if (!v15)
    return 12;
  v16 = v15;
  xpc_dictionary_set_string(v15, netrbClientInterfaceName, a2);
  xpc_dictionary_set_uint64(v16, netrbClientDeviceType, a3);
  xpc_dictionary_set_uint64(v16, netrbClientInterfaceMTU, a4);
  xpc_dictionary_set_uint64(v16, netrbClientInterfaceInstance, a5);
  if (a6 == 1)
    v20 = 203;
  else
    v20 = 201;
  started = _NETRBClientStartService(a1, 0, v20, 302, v16, v17, v18, v19);
  xpc_release(v16);
  if (started)
    return 0;
  else
    return 22;
}

uint64_t _MISStopService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = 22;
  if (a1)
  {
    if (_NETRBClientStopService(a1, a2, a3, a4, a5, a6, a7, a8))
      return 0;
    else
      return 22;
  }
  return v8;
}

uint64_t _MISSetFixtureForwardedPorts(uint64_t a1, unsigned int a2, unsigned int a3)
{
  xpc_object_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if (!a1)
    return 22;
  v6 = xpc_dictionary_create(0, 0, 0);
  if (!v6)
    return 12;
  v7 = v6;
  xpc_dictionary_set_uint64(v6, netrbClientForwardedLowPort, a2);
  xpc_dictionary_set_uint64(v7, netrbClientForwardedHighPort, a3);
  v14 = _NETRBClientSetFixtureForwardedPorts(a1, v7, v8, v9, v10, v11, v12, v13);
  xpc_release(v7);
  if (v14)
    return 0;
  else
    return 22;
}

uint64_t _MISGetFixtureForwardedPorts(void *a1, _WORD *a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  void *v11;
  uint64_t result;
  __int16 uint64;

  if (!a1)
    return 22;
  v10 = _NETRBClientCopyFixtureForwardedPorts(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!v10)
    return 22;
  v11 = v10;
  if (xpc_get_type(v10) != (xpc_type_t)&_xpc_type_dictionary)
    return 22;
  *a2 = xpc_dictionary_get_uint64(v11, netrbClientForwardedLowPort);
  uint64 = xpc_dictionary_get_uint64(v11, netrbClientForwardedHighPort);
  result = 0;
  *a3 = uint64;
  return result;
}

uint64_t _MISIsAllowedMoreHost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
    return _NETRBClientIsAllowedMoreHost(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    return 22;
}

uint64_t _MISAddHost(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int v3;

  v2 = 22;
  if (a1)
  {
    if ((a2 - 1) < 5)
      v3 = a2 + 1;
    else
      v3 = 0;
    if (_NETRBClientAddHost(a1, v3))
      return 0;
    else
      return 22;
  }
  return v2;
}

uint64_t _MISRemoveHost(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int v3;

  v2 = 22;
  if (a1)
  {
    if ((a2 - 1) < 5)
      v3 = a2 + 1;
    else
      v3 = 0;
    if (_NETRBClientRemoveHost(a1, v3))
      return 0;
    else
      return 22;
  }
  return v2;
}

uint64_t _MISGetHostCount(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = 22;
  if (a1)
  {
    if (_NETRBClientGetHostCount(a1, a2, a3, a4, a5, a6, a7, a8))
      return 0;
    else
      return 22;
  }
  return v8;
}

uint64_t _MISSetHostCount(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  v8 = 22;
  if (a1)
  {
    if ((a2 - 1) < 5)
      v9 = (a2 + 1);
    else
      v9 = 0;
    if (_NETRBClientSetHostCount(a1, v9, a3, a4, a5, a6, a7, a8))
      return 0;
    else
      return 22;
  }
  return v8;
}

uint64_t _MISGetExt(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v10[2];

  if (!a1)
    return 22;
  v10[0] = 0;
  v10[1] = 0;
  if (!_NETRBClientGetExtName(a1, (uint64_t)v10, a3, a4, a5, a6, a7, a8))
    return 22;
  snprintf(a2, 0x10uLL, "%s", (const char *)v10);
  return 0;
}

void sub_100186834(id a1)
{
  char __str[34];

  snprintf(__str, 0x22uLL, "com.apple.misd.%p", &qword_10026DD10);
  __str[33] = 0;
  qword_10026DD10 = (uint64_t)dispatch_queue_create(__str, 0);
}

void sub_1001868B8()
{
  __assert_rtn("__WiFiPolicyRelease", "WiFiPolicy.c", 199, "object");
}

void sub_1001868E0()
{
  __assert_rtn("__WiFiPolicyRelease", "WiFiPolicy.c", 200, "CFGetTypeID(object) == WiFiPolicyGetTypeID()");
}

void sub_100186908()
{
  __assert_rtn("__WiFiLQAMgrAvgValidPerCoreRssiSamples", "WiFiLinkQualityManager.c", 4117, "validCore0RssiCount <= arrayCount");
}

void sub_100186930()
{
  __assert_rtn("__WiFiLQAMgrAvgValidPerCoreRssiSamples", "WiFiLinkQualityManager.c", 4118, "validCore1RssiCount <= arrayCount");
}

void sub_100186958()
{
  __assert_rtn("__WiFiLQAMgrRelease", "WiFiLinkQualityManager.c", 1230, "object");
}

void sub_100186980()
{
  __assert_rtn("__WiFiLQAMgrRelease", "WiFiLinkQualityManager.c", 1231, "CFGetTypeID(object) == WiFiLQAMgrGetTypeID()");
}

void sub_1001869A8()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "Fatal chip watchdog with missing reason or subreason", v0, 2u);
}

void sub_1001869EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100065024();
  sub_100065014((void *)&_mh_execute_header, &_os_log_default, v0, "%s: CFPropertyListCreateWithData returned with error %@", v1, v2, v3, v4, 2u);
  sub_100065038();
}

void sub_100186A64()
{
  int v0;
  const char *v1;

  v0 = 136315138;
  v1 = "_WiFiCopyUnserialized";
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%s: Invalid buffer/buffersize.", (uint8_t *)&v0, 0xCu);
  sub_100065038();
}

void sub_100186AE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100065024();
  sub_100065014((void *)&_mh_execute_header, &_os_log_default, v0, "%s: CFPropertyListWrite returned with error %@", v1, v2, v3, v4, 2u);
  sub_100065038();
}

void sub_100186B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100082DB0((void *)&_mh_execute_header, &_os_log_default, a3, "%s: CWFInterface initWithServiceType: failed", a5, a6, a7, a8, 2u);
  sub_100065038();
}

void sub_100186BD0(uint64_t a1, char a2, char a3)
{
  const char *v3;
  const char *v4;
  int v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;

  v3 = "NO";
  v6 = "-[WiFiFindAndJoinRequest _canPerformRetry:]";
  v7 = 2112;
  if ((a2 & 1) != 0)
    v4 = "YES";
  else
    v4 = "NO";
  v5 = 136315906;
  v8 = a1;
  v9 = 2080;
  v10 = v4;
  if ((a3 & 1) == 0)
    v3 = "YES";
  v11 = 2080;
  v12 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%s: last error (%@), retry expired=%s exceeded=%s", (uint8_t *)&v5, 0x2Au);
}

void sub_100186C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100082DB0((void *)&_mh_execute_header, &_os_log_default, a3, "%s: chip reset completed", a5, a6, a7, a8, 2u);
  sub_100065038();
}

void sub_100186D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100082DB0((void *)&_mh_execute_header, &_os_log_default, a3, "%s: timed out waiting for chip reset to complete", a5, a6, a7, a8, 2u);
  sub_100065038();
}

void sub_100186D7C(void *a1, double a2)
{
  void *v4;
  unsigned int v5;
  void *v6;
  int v7;
  const char *v8;
  __int16 v9;
  unsigned int v10;
  __int16 v11;
  int v12;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "scanFailureList"));
  v5 = objc_msgSend(v4, "count");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "joinFailureList"));
  v7 = 136315650;
  v8 = "-[WiFiFindAndJoinRequest _checkAndRequestChipResetIfNeeded]";
  v9 = 1024;
  v10 = objc_msgSend(v6, "count") + v5;
  v11 = 1024;
  v12 = (int)a2;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%s: encountered multiple (%d) failures, performing chip reset before retrying (remaining time %ds)...", (uint8_t *)&v7, 0x18u);

}

void sub_100186E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100082DB0((void *)&_mh_execute_header, &_os_log_default, a3, "%s: null network name", a5, a6, a7, a8, 2u);
  sub_100065038();
}

void sub_100186EE0(uint8_t *a1, _QWORD *a2, uint64_t a3)
{
  *(_DWORD *)a1 = 136315138;
  *a2 = "-[WiFiFindAndJoinRequest _runFindAndJoinOnInterface:outError:]";
  sub_100082DC0((void *)&_mh_execute_header, &_os_log_default, a3, "%s: no match in scan results, performing scan retry...", a1);
}

void sub_100186F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100082DB0((void *)&_mh_execute_header, &_os_log_default, a3, "%s: retry exhausted, exiting scan phase...", a5, a6, a7, a8, 2u);
  sub_100065038();
}

void sub_100186F9C(uint8_t *a1, _QWORD *a2, uint64_t a3)
{
  *(_DWORD *)a1 = 136315138;
  *a2 = "-[WiFiFindAndJoinRequest _runFindAndJoinOnInterface:outError:]";
  sub_100082DC0((void *)&_mh_execute_header, &_os_log_default, a3, "%s: no join candidate, performing scan retry...", a1);
}

void sub_100186FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100082DB0((void *)&_mh_execute_header, &_os_log_default, a3, "%s: retry exhausted, exiting join phase...", a5, a6, a7, a8, 2u);
  sub_100065038();
}

void sub_100187058(void *a1)
{
  int v1;
  const char *v2;
  __int16 v3;
  unsigned int v4;

  v1 = 136315394;
  v2 = "-[WiFiFindAndJoinRequest _runFindAndJoinOnInterface:outError:]";
  v3 = 1024;
  v4 = objc_msgSend(a1, "channelBand");
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%s: invalid band specified (%d), forcing to 2.4GHz", (uint8_t *)&v1, 0x12u);
  sub_100065038();
}

void sub_1001870E8()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "_set_user_dir_suffix failed!\n", v0, 2u);
}

void sub_10018712C(const void *a1, char a2, uint64_t a3)
{
  const void *v5;
  const char *v6;
  int v7;
  const char *v8;
  __int16 v9;
  const void *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  v5 = sub_10002B088(a1);
  v6 = "enabled";
  v7 = 136315906;
  v8 = "WiFiNetworkSetStateWithReason";
  v10 = v5;
  v9 = 2112;
  v11 = 2080;
  if (!a2)
    v6 = "disabled";
  v12 = v6;
  v13 = 2112;
  v14 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%s: Network '%@' %s for auto-join due to %@", (uint8_t *)&v7, 0x2Au);
}

void sub_1001871FC()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CLLocationCoordinate2D soft_CLLocationCoordinate2DMake(CLLocationDegrees, CLLocationDegrees)"), CFSTR("WiFiNetwork.c"), 51, CFSTR("%s"), dlerror());
  __break(1u);
}

void sub_100187260()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *getCWFScanResultPropertyOSSpecificAttributesKey(void)"), CFSTR("WiFiNetwork.c"), 39, CFSTR("%s"), dlerror());
  __break(1u);
}

void sub_1001872C4()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getCWFNetworkProfileClass(void)_block_invoke"), CFSTR("WiFiNetwork.c"), 35, CFSTR("Unable to find class %s"), "CWFNetworkProfile");
  __break(1u);
}

void sub_100187328(_QWORD *a1)
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *CoreWiFiLibrary(void)"), CFSTR("WiFiNetwork.c"), 34, CFSTR("%s"), *a1);
  __break(1u);
}

void sub_10018738C()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getCWFBSSClass(void)_block_invoke"), CFSTR("WiFiNetwork.c"), 43, CFSTR("Unable to find class %s"), "CWFBSS");
  __break(1u);
}

void sub_1001873F0()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getCWFChannelClass(void)_block_invoke"), CFSTR("WiFiNetwork.c"), 41, CFSTR("Unable to find class %s"), "CWFChannel");
  __break(1u);
}

void sub_100187454()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getCLLocationClass(void)_block_invoke"), CFSTR("WiFiNetwork.c"), 47, CFSTR("Unable to find class %s"), "CLLocation");
  __break(1u);
}

void sub_1001874B8(_QWORD *a1)
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *CoreLocationLibrary(void)"), CFSTR("WiFiNetwork.c"), 46, CFSTR("%s"), *a1);
  __break(1u);
}

void sub_10018751C()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getCWFScanResultClass(void)_block_invoke"), CFSTR("WiFiNetwork.c"), 37, CFSTR("Unable to find class %s"), "CWFScanResult");
  __break(1u);
}

void sub_100187580(int a1, uint64_t a2, uint64_t a3)
{
  const char *v4;
  int v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;

  if (a1)
    v4 = "ENABLED";
  else
    v4 = "DISABLED";
  v5 = 136315650;
  v6 = v4;
  v7 = 2112;
  v8 = sub_1000161D4(a2);
  v9 = 2112;
  v10 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Auto join %s by \"%@\" for %@", (uint8_t *)&v5, 0x20u);
}

void sub_10018763C()
{
  __assert_rtn("__WiFiDeviceManagerRegister", "WiFiDeviceManager.c", 2520, "__kWiFiDeviceManagerTypeID != _kCFRuntimeNotATypeID");
}

void sub_100187664()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "Will request to chip reset with no triggerReason", v0, 2u);
}

void sub_1001876A8()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CFDictionaryRef soft_EAPClientConfigurationCopyAndImport(CFDictionaryRef)"), CFSTR("WiFiDeviceManager.c"), 136, CFSTR("%s"), dlerror());
  __break(1u);
}

void sub_10018770C(_QWORD *a1)
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *EAP8021XLibrary(void)"), CFSTR("WiFiDeviceManager.c"), 130, CFSTR("%s"), *a1);
  __break(1u);
}

void sub_100187770(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *SpringBoardServicesLibrary(void)"));
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WiFiSmartCoverStateObserver.h"), 16, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_1001877EC()
{
  __assert_rtn("__WiFiCacheEntryRelease", "WiFiCacheEntry.c", 134, "object");
}

void sub_100187814()
{
  __assert_rtn("__WiFiCacheEntryRelease", "WiFiCacheEntry.c", 135, "CFGetTypeID(object) == WiFiCacheEntryGetTypeID()");
}

void sub_10018783C()
{
  __assert_rtn("__WiFiVirtualInterfaceRelease", "WiFiVirtualInterface.c", 341, "virtIntf");
}

void sub_100187864()
{
  __assert_rtn("__WiFiVirtualInterfaceRelease", "WiFiVirtualInterface.c", 342, "CFGetTypeID(virtIntf) == WiFiVirtualInterfaceGetTypeID()");
}

void sub_10018788C()
{
  __assert_rtn("__WiFiATJMgrRelease", "WiFiAskToJoinManager.c", 175, "object");
}

void sub_1001878B4()
{
  __assert_rtn("__WiFiATJMgrRelease", "WiFiAskToJoinManager.c", 176, "CFGetTypeID(object) == WiFiATJMgrGetTypeID()");
}

void sub_1001878DC()
{
  __assert_rtn("__WiFiAudioRouteRelease", "WiFiAudioRoute.c", 144, "object");
}

void sub_100187904()
{
  __assert_rtn("__WiFiAudioRouteRelease", "WiFiAudioRoute.c", 145, "CFGetTypeID(object) == WiFiAudioRouteGetTypeID()");
}

void sub_10018792C()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getW5ClientClass(void)_block_invoke"), CFSTR("WiFiVelocityService.m"), 13, CFSTR("Unable to find class %s"), "W5Client");
  __break(1u);
}

void sub_100187990(_QWORD *a1)
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *WiFiVelocityLibrary(void)"), CFSTR("WiFiVelocityService.m"), 11, CFSTR("%s"), *a1);
  __break(1u);
}

void sub_1001879F4()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getW5LogItemRequestClass(void)_block_invoke"), CFSTR("WiFiVelocityService.m"), 16, CFSTR("Unable to find class %s"), "W5LogItemRequest");
  __break(1u);
}

void sub_100187A58()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Couldn't create os log object", v0, 2u);
}

id objc_msgSend_ANQPElementIDList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ANQPElementIDList");
}

id objc_msgSend_AVSystemMonitorCb(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "AVSystemMonitorCb");
}

id objc_msgSend_AWDLRealTimeModeTimestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "AWDLRealTimeModeTimestamp");
}

id objc_msgSend_BSSID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BSSID");
}

id objc_msgSend_BSSIDThresholds(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BSSIDThresholds");
}

id objc_msgSend_BSSList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BSSList");
}

id objc_msgSend_BSSType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BSSType");
}

id objc_msgSend_DHCPServerID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "DHCPServerID");
}

id objc_msgSend_DHCPv6ServerID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "DHCPv6ServerID");
}

id objc_msgSend_DNSHeuristicsFailureStateInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "DNSHeuristicsFailureStateInfo");
}

id objc_msgSend_EAPCredentials(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "EAPCredentials");
}

id objc_msgSend_EAPProfile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "EAPProfile");
}

id objc_msgSend_IEList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "IEList");
}

id objc_msgSend_IPv4NetworkSignature(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "IPv4NetworkSignature");
}

id objc_msgSend_IPv6NetworkSignature(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "IPv6NetworkSignature");
}

id objc_msgSend_MACAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "MACAddress");
}

id objc_msgSend_MCInitialize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "MCInitialize");
}

id objc_msgSend_NAIRealmNameList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "NAIRealmNameList");
}

id objc_msgSend_NANServiceID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "NANServiceID");
}

id objc_msgSend_OSSpecificAttributes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "OSSpecificAttributes");
}

id objc_msgSend_PHYMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "PHYMode");
}

id objc_msgSend_PMK(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "PMK");
}

id objc_msgSend_RSSI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "RSSI");
}

id objc_msgSend_RSSIWhenNetworkWasDenyListed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "RSSIWhenNetworkWasDenyListed:");
}

id objc_msgSend_SSID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SSID");
}

id objc_msgSend_SSIDList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SSIDList");
}

id objc_msgSend_SSIDThresholds(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SSIDThresholds");
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_URLByAppendingPathComponent_isDirectory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLByAppendingPathComponent:isDirectory:");
}

id objc_msgSend_URLForDirectory_inDomain_appropriateForURL_create_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLForDirectory:inDomain:appropriateForURL:create:error:");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUIDString");
}

id objc_msgSend_WAPISubtype(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WAPISubtype");
}

id objc_msgSend_WEPSubtype(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WEPSubtype");
}

id objc_msgSend_WFLog_message_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WFLog:message:");
}

id objc_msgSend_WiFiBatteryManagerCpmsCallbackConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WiFiBatteryManagerCpmsCallbackConfiguration:");
}

id objc_msgSend_WiFiBatteryManagerHandleCpmsAllocatedBudgetReturnIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WiFiBatteryManagerHandleCpmsAllocatedBudgetReturnIndex:");
}

id objc_msgSend_WiFiBatteryManagerHandlePowerAdmissionResponse_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WiFiBatteryManagerHandlePowerAdmissionResponse:");
}

id objc_msgSend_WiFiBatteryManagerPopulatePowerTable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WiFiBatteryManagerPopulatePowerTable");
}

id objc_msgSend_WiFiBatteryManagerPpmCallbackConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WiFiBatteryManagerPpmCallbackConfiguration:");
}

id objc_msgSend_WiFiDeviceManagerHandleInterfaceAvailability_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WiFiDeviceManagerHandleInterfaceAvailability:");
}

id objc_msgSend_WiFiDeviceManagerHandlePowerBudgetChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WiFiDeviceManagerHandlePowerBudgetChange:");
}

id objc_msgSend_WiFiDeviceManagerHandlePowerUnchangedPowerBudget::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WiFiDeviceManagerHandlePowerUnchangedPowerBudget::");
}

id objc_msgSend_WiFiDriverTriggeredTTRHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WiFiDriverTriggeredTTRHandler:");
}

id objc_msgSend_WiFiDriverTriggeredTTRSoftErrorCreatewithStringRef_withInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WiFiDriverTriggeredTTRSoftErrorCreatewithStringRef:withInterval:");
}

id objc_msgSend_WiFiSoftErrorDriverAvailableEventhandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WiFiSoftErrorDriverAvailableEventhandler");
}

id objc_msgSend_WiFiSoftErrorDriverLinkupEventhandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WiFiSoftErrorDriverLinkupEventhandler");
}

id objc_msgSend_WiFiSoftErrorManagerLQMEventHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WiFiSoftErrorManagerLQMEventHandler:");
}

id objc_msgSend_WiFiSoftErrorReporting_deviceContext_displayString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WiFiSoftErrorReporting:deviceContext:displayString:");
}

id objc_msgSend_XPCConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "XPCConnection");
}

id objc_msgSend___OSSpecificAttributes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__OSSpecificAttributes");
}

id objc_msgSend___addKnownBSS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__addKnownBSS:");
}

id objc_msgSend___addKnownNetworkProfile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__addKnownNetworkProfile:");
}

id objc_msgSend___associate_XPCConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__associate:XPCConnection:");
}

id objc_msgSend___clearAutoJoinDenyList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__clearAutoJoinDenyList:");
}

id objc_msgSend___configureRapportDiscoveryClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__configureRapportDiscoveryClient");
}

id objc_msgSend___copyCurrentKnownNetworkRef(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__copyCurrentKnownNetworkRef");
}

id objc_msgSend___copyCurrentNetworkHotspotNetwork(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__copyCurrentNetworkHotspotNetwork");
}

id objc_msgSend___copyCurrentNetworkRef(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__copyCurrentNetworkRef");
}

id objc_msgSend___copyCurrentSessionBasedNetworkRef(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__copyCurrentSessionBasedNetworkRef");
}

id objc_msgSend___deviceManagerWithInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__deviceManagerWithInterfaceName:");
}

id objc_msgSend___disassociate_XPCConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__disassociate:XPCConnection:");
}

id objc_msgSend___filteredScanResults_scanParameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__filteredScanResults:scanParameters:");
}

id objc_msgSend___getAutoHotspotMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__getAutoHotspotMode:");
}

id objc_msgSend___getAutoJoinDenyList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__getAutoJoinDenyList:");
}

id objc_msgSend___getAutoJoinMetric_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__getAutoJoinMetric:");
}

id objc_msgSend___getAutoJoinStatistics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__getAutoJoinStatistics:");
}

id objc_msgSend___getBackgroundScanConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__getBackgroundScanConfiguration:");
}

id objc_msgSend___getCountryBandSupport_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__getCountryBandSupport:");
}

id objc_msgSend___getCurrentNetworkProfile_XPCConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__getCurrentNetworkProfile:XPCConnection:");
}

id objc_msgSend___getCurrentScanResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__getCurrentScanResult:");
}

id objc_msgSend___getDeviceUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__getDeviceUUID:");
}

id objc_msgSend___getKnownNetworkProfiles_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__getKnownNetworkProfiles:");
}

id objc_msgSend___getPassword_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__getPassword:");
}

id objc_msgSend___getSensingParams_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__getSensingParams:");
}

id objc_msgSend___getThermalIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__getThermalIndex:");
}

id objc_msgSend___getUserAutoJoinState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__getUserAutoJoinState:");
}

id objc_msgSend___getUserSettings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__getUserSettings:");
}

id objc_msgSend___getWiFiAssistOverrideReasons_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__getWiFiAssistOverrideReasons:");
}

id objc_msgSend___handleActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__handleActivity:");
}

id objc_msgSend___invalidateDiscovery(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__invalidateDiscovery");
}

id objc_msgSend___isActivityRegisteredWithType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__isActivityRegisteredWithType:");
}

id objc_msgSend___peerAssistedDiscoveryNetworksForUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__peerAssistedDiscoveryNetworksForUUID:");
}

id objc_msgSend___performANQP_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__performANQP:");
}

id objc_msgSend___performAutoJoin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__performAutoJoin:");
}

id objc_msgSend___performNDD_XPCConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__performNDD:XPCConnection:");
}

id objc_msgSend___performRanging_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__performRanging:");
}

id objc_msgSend___performScan_XPCConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__performScan:XPCConnection:");
}

id objc_msgSend___performSensing_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__performSensing:");
}

id objc_msgSend___queueForRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__queueForRequest:");
}

id objc_msgSend___removeKnownBSS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__removeKnownBSS:");
}

id objc_msgSend___removeKnownNetworkProfile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__removeKnownNetworkProfile:");
}

id objc_msgSend___resetAutoJoinStatistics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__resetAutoJoinStatistics:");
}

id objc_msgSend___sanitizeSensingParams_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__sanitizeSensingParams:");
}

id objc_msgSend___sendEventToPeers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__sendEventToPeers");
}

id objc_msgSend___setAutoHotspotMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__setAutoHotspotMode:");
}

id objc_msgSend___setAutoJoinDenyList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__setAutoJoinDenyList:");
}

id objc_msgSend___setBackgroundScanConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__setBackgroundScanConfiguration:");
}

id objc_msgSend___setBlockedBands_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__setBlockedBands:");
}

id objc_msgSend___setCompanionCountryCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__setCompanionCountryCode:");
}

id objc_msgSend___setOSSpecificAttributeForKey_attributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__setOSSpecificAttributeForKey:attributes:");
}

id objc_msgSend___setPassword_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__setPassword:");
}

id objc_msgSend___setPeerAssistedDiscoveryNetwork_interfaceName_UUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__setPeerAssistedDiscoveryNetwork:interfaceName:UUID:");
}

id objc_msgSend___setPower_XPCConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__setPower:XPCConnection:");
}

id objc_msgSend___setRangeable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__setRangeable:");
}

id objc_msgSend___setRangingIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__setRangingIdentifier:");
}

id objc_msgSend___setThermalIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__setThermalIndex:");
}

id objc_msgSend___setUserAutoJoinState_XPCConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__setUserAutoJoinState:XPCConnection:");
}

id objc_msgSend___setUserSettings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__setUserSettings:");
}

id objc_msgSend___startAWDLPeerAssistedDiscovery_XPCConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__startAWDLPeerAssistedDiscovery:XPCConnection:");
}

id objc_msgSend___startHostAPMode_XPCConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__startHostAPMode:XPCConnection:");
}

id objc_msgSend___stopAWDLPeerAssistedDiscovery_XPCConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__stopAWDLPeerAssistedDiscovery:XPCConnection:");
}

id objc_msgSend___stopHostAPMode_XPCConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__stopHostAPMode:XPCConnection:");
}

id objc_msgSend___supportedRequestTypes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__supportedRequestTypes");
}

id objc_msgSend___updateKnownBSS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__updateKnownBSS:");
}

id objc_msgSend___updateKnownNetworkProfile_XPCConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__updateKnownNetworkProfile:XPCConnection:");
}

id objc_msgSend___updateSoftAPBand_XPCConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__updateSoftAPBand:XPCConnection:");
}

id objc_msgSend__appStateChanged_bundleID_capabilities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_appStateChanged:bundleID:capabilities:");
}

id objc_msgSend__appUsesBackgroundNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_appUsesBackgroundNetwork:");
}

id objc_msgSend__appUsesWiFiNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_appUsesWiFiNetwork:");
}

id objc_msgSend__applicationNotifyState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_applicationNotifyState");
}

id objc_msgSend__assocReasonToGeoAssocReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_assocReasonToGeoAssocReason:");
}

id objc_msgSend__beginActiveUsageForSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_beginActiveUsageForSession:");
}

id objc_msgSend__beginPollingForInstantaenousScorecards(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_beginPollingForInstantaenousScorecards");
}

id objc_msgSend__canPerformRetry_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_canPerformRetry:");
}

id objc_msgSend__checkAndRequestChipResetIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_checkAndRequestChipResetIfNeeded");
}

id objc_msgSend__cleanup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_cleanup");
}

id objc_msgSend__cleanupExistingRetiredStores(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_cleanupExistingRetiredStores");
}

id objc_msgSend__cleanupMaintenanceTask(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_cleanupMaintenanceTask");
}

id objc_msgSend__copyCreateEquivalentWiFiNetwork_authFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_copyCreateEquivalentWiFiNetwork:authFlags:");
}

id objc_msgSend__createAlertDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_createAlertDictionary");
}

id objc_msgSend__deltaStartScorecard_fromEndScorecard_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_deltaStartScorecard:fromEndScorecard:");
}

id objc_msgSend__endActiveUsageForSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_endActiveUsageForSession:");
}

id objc_msgSend__evaluationComplete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_evaluationComplete:");
}

id objc_msgSend__eventHandlers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_eventHandlers");
}

id objc_msgSend__findMatchingPlistNetworkForNetworkRecord_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_findMatchingPlistNetworkForNetworkRecord:");
}

id objc_msgSend__geoHashToCoordinates_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_geoHashToCoordinates:");
}

id objc_msgSend__getAppCapabilitiesForBundleID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getAppCapabilitiesForBundleID:");
}

id objc_msgSend__getHistoricalScorecardSession_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getHistoricalScorecardSession:andReply:");
}

id objc_msgSend__homeManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_homeManager");
}

id objc_msgSend__initPrivate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_initPrivate");
}

id objc_msgSend__installDeferMonitorForActivity_proxy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_installDeferMonitorForActivity:proxy:");
}

id objc_msgSend__isCollectionEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_isCollectionEnabled");
}

id objc_msgSend__isMonitoringChangesForBundleID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_isMonitoringChangesForBundleID:");
}

id objc_msgSend__isSymptomTrackingRtTrafficForFlowNamed_withProperties_andClassification_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_isSymptomTrackingRtTrafficForFlowNamed:withProperties:andClassification:");
}

id objc_msgSend__kvsDidChangeWithKeys_isExternal_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_kvsDidChangeWithKeys:isExternal:");
}

id objc_msgSend__lastTriggeredTTR(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_lastTriggeredTTR");
}

id objc_msgSend__networkSuitableForCollection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_networkSuitableForCollection:");
}

id objc_msgSend__notifyCaptiveWithApplicationState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_notifyCaptiveWithApplicationState:");
}

id objc_msgSend__pollInstantaenousAndUpdateValues(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_pollInstantaenousAndUpdateValues");
}

id objc_msgSend__populateDPSAPInfoMessage_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_populateDPSAPInfoMessage:andReply:");
}

id objc_msgSend__populateDPSLinkStateChangeMessage_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_populateDPSLinkStateChangeMessage:andReply:");
}

id objc_msgSend__populateDPSNotificationMessage_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_populateDPSNotificationMessage:andReply:");
}

id objc_msgSend__populateDPSProbeResultMessage_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_populateDPSProbeResultMessage:andReply:");
}

id objc_msgSend__populateSlowWiFiNotificationMessage_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_populateSlowWiFiNotificationMessage:andReply:");
}

id objc_msgSend__populateSupportedChannels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_populateSupportedChannels");
}

id objc_msgSend__populateWiFiConnectionQualityMessageWithScorecard_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_populateWiFiConnectionQualityMessageWithScorecard:andReply:");
}

id objc_msgSend__prepareScanResults_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_prepareScanResults:");
}

id objc_msgSend__printSupportedChannels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_printSupportedChannels");
}

id objc_msgSend__reduceNetworks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_reduceNetworks");
}

id objc_msgSend__reduceNumberOfCandidatesTo_on_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_reduceNumberOfCandidatesTo:on:");
}

id objc_msgSend__register(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_register");
}

id objc_msgSend__registerApplication_capabilities_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_registerApplication:capabilities:");
}

id objc_msgSend__roundByteCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_roundByteCount:");
}

id objc_msgSend__roundPacketCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_roundPacketCount:");
}

id objc_msgSend__roundTimeInterval_toNearestNumberOfHours_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_roundTimeInterval:toNearestNumberOfHours:");
}

id objc_msgSend__runFindAndJoinOnInterface_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_runFindAndJoinOnInterface:outError:");
}

id objc_msgSend__setFileNameLocalizationEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setFileNameLocalizationEnabled:");
}

id objc_msgSend__setupKVSHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setupKVSHandler");
}

id objc_msgSend__softError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_softError");
}

id objc_msgSend__startTimerForNotificationWithUserInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_startTimerForNotificationWithUserInfo:");
}

id objc_msgSend__stateInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_stateInfo");
}

id objc_msgSend__stopPollingForInstantaneousScorecards(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_stopPollingForInstantaneousScorecards");
}

id objc_msgSend__submitAnalyticsEventForJoinAlertReason_action_visibleDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_submitAnalyticsEventForJoinAlertReason:action:visibleDuration:");
}

id objc_msgSend__submitAnalyticsEventForRecommendation_action_visibleDuration_location_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_submitAnalyticsEventForRecommendation:action:visibleDuration:location:");
}

id objc_msgSend__unRegisterApplication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_unRegisterApplication:");
}

id objc_msgSend__updateIsManagedAppleIDAndNotify_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_updateIsManagedAppleIDAndNotify:");
}

id objc_msgSend__userInteractivityChangedCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_userInteractivityChangedCallback:");
}

id objc_msgSend__valuesForRepeatedField_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_valuesForRepeatedField:");
}

id objc_msgSend_aa_isManagedAppleID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aa_isManagedAppleID");
}

id objc_msgSend_aa_primaryAppleAccount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aa_primaryAppleAccount");
}

id objc_msgSend_abort(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "abort");
}

id objc_msgSend_acceptableCacheAge(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "acceptableCacheAge");
}

id objc_msgSend_accessPoints(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessPoints");
}

id objc_msgSend_accountStore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountStore");
}

id objc_msgSend_accumulateActiveUsageWithScorecard_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accumulateActiveUsageWithScorecard:");
}

id objc_msgSend_acknowledgePowerBudget_forClientId_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "acknowledgePowerBudget:forClientId:error:");
}

id objc_msgSend_actionIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "actionIdentifier");
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activate");
}

id objc_msgSend_activeUseBeingTracked(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeUseBeingTracked");
}

id objc_msgSend_activityAlarmAvailable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityAlarmAvailable");
}

id objc_msgSend_activityLabels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityLabels");
}

id objc_msgSend_activityManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityManager");
}

id objc_msgSend_activityStoppedWithLevel_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityStoppedWithLevel:options:error:");
}

id objc_msgSend_addDelegate_queue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addDelegate:queue:");
}

id objc_msgSend_addDownloadSpeed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addDownloadSpeed:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addFaultEvent_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addFaultEvent:forInterface:");
}

id objc_msgSend_addFieldForKey_value_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addFieldForKey:value:options:");
}

id objc_msgSend_addFieldsFromDictionary_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addFieldsFromDictionary:options:");
}

id objc_msgSend_addIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addIndex:");
}

id objc_msgSend_addNetworkAgentToInterfaceNamed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addNetworkAgentToInterfaceNamed:");
}

id objc_msgSend_addNotificationRequest_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addNotificationRequest:withCompletionHandler:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addRangingRttSampleWithRssi_rtt_snr_flags_channel_coreId_bitErrorRate_phyError_andPeerSnr_andPeerCoreId_andPeerBitErrorRate_andPeerPhyError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addRangingRttSampleWithRssi:rtt:snr:flags:channel:coreId:bitErrorRate:phyError:andPeerSnr:andPeerCoreId:andPeerBitErrorRate:andPeerPhyError:");
}

id objc_msgSend_addReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addReason");
}

id objc_msgSend_addRepeatableInt32Value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addRepeatableInt32Value:");
}

id objc_msgSend_addRepeatableSubMessageValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addRepeatableSubMessageValue:");
}

id objc_msgSend_addSample_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addSample:");
}

id objc_msgSend_addSettlementCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addSettlementCallback:");
}

id objc_msgSend_addSoftApClientEvent_identifier_isAppleClient_isInstantHotspot_isAutoHotspot_isHidden_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addSoftApClientEvent:identifier:isAppleClient:isInstantHotspot:isAutoHotspot:isHidden:");
}

id objc_msgSend_addSoftApCoexEvent_deniedUnii1ChannelMap_deniedUnii2aChannelMap_deniedUnii2cChannelMap_deniedUnii3ChannelMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addSoftApCoexEvent:deniedUnii1ChannelMap:deniedUnii2aChannelMap:deniedUnii2cChannelMap:deniedUnii3ChannelMap:");
}

id objc_msgSend_addTimer_forMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addTimer:forMode:");
}

id objc_msgSend_addToKnownNetworkGuessingDictionaryTheNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addToKnownNetworkGuessingDictionaryTheNetwork:");
}

id objc_msgSend_addTriggerDisconnectEvent_isAlerted_isConfirmed_isExecuted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addTriggerDisconnectEvent:isAlerted:isConfirmed:isExecuted:");
}

id objc_msgSend_addedAt(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addedAt");
}

id objc_msgSend_admissionCheck(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "admissionCheck");
}

id objc_msgSend_admissionCheckWithLevel_options_error_handler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "admissionCheckWithLevel:options:error:handler:");
}

id objc_msgSend_agentUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "agentUUID");
}

id objc_msgSend_alertDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "alertDictionary");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allKeys");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allValues");
}

id objc_msgSend_allowRoam(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowRoam");
}

id objc_msgSend_altDSID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "altDSID");
}

id objc_msgSend_ambiguousSSIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ambiguousSSIDs");
}

id objc_msgSend_anyCallInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "anyCallInProgress");
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "anyObject");
}

id objc_msgSend_apMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "apMode");
}

id objc_msgSend_apProfileID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "apProfileID");
}

id objc_msgSend_apProfileWPSInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "apProfileWPSInfo");
}

id objc_msgSend_apProfile_shortID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "apProfile_shortID");
}

id objc_msgSend_appAccessInfoMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appAccessInfoMap");
}

id objc_msgSend_appAttributes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appAttributes");
}

id objc_msgSend_appAwareDetails(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appAwareDetails");
}

id objc_msgSend_appInForeground(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appInForeground");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendString:");
}

id objc_msgSend_applicationStateForApplication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applicationStateForApplication:");
}

id objc_msgSend_archivedDataWithRootObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "archivedDataWithRootObject:");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_armHomeNetworkTransitionTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "armHomeNetworkTransitionTimer:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "array");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayForKey:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_askToJoinMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "askToJoinMode");
}

id objc_msgSend_askToLaunchSlowWiFiRadar_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "askToLaunchSlowWiFiRadar:");
}

id objc_msgSend_askToLaunchTapToRadar_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "askToLaunchTapToRadar:");
}

id objc_msgSend_askToLaunchTapToRadarWithMessage_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "askToLaunchTapToRadarWithMessage:completionHandler:");
}

id objc_msgSend_askToLaunchTapToRadarWithMessage_timeout_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "askToLaunchTapToRadarWithMessage:timeout:completionHandler:");
}

id objc_msgSend_askToLaunchTriggerDisconnectRadar_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "askToLaunchTriggerDisconnectRadar:");
}

id objc_msgSend_askToLaunchUserDisconnectRadar(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "askToLaunchUserDisconnectRadar");
}

id objc_msgSend_assertCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "assertCount");
}

id objc_msgSend_assocIsToApplePH(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "assocIsToApplePH");
}

id objc_msgSend_assocIsToNoMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "assocIsToNoMap");
}

id objc_msgSend_assocReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "assocReason");
}

id objc_msgSend_associateWithParameters_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "associateWithParameters:error:");
}

id objc_msgSend_associatedStateDidChange_withAssociatedNetworkRecord_withChangeReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "associatedStateDidChange:withAssociatedNetworkRecord:withChangeReason:");
}

id objc_msgSend_associatedTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "associatedTime");
}

id objc_msgSend_associationDoneWithNetwork_error_interfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "associationDoneWithNetwork:error:interfaceName:");
}

id objc_msgSend_asyncPPMBudgetTimestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "asyncPPMBudgetTimestamp");
}

id objc_msgSend_asyncQueryLOITypeAtLatestLocationWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "asyncQueryLOITypeAtLatestLocationWithCompletion:");
}

id objc_msgSend_asyncScopeHomeNetworks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "asyncScopeHomeNetworks");
}

id objc_msgSend_asyncTrackNetworksOfInterest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "asyncTrackNetworksOfInterest:");
}

id objc_msgSend_atHomeScopedNOI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "atHomeScopedNOI");
}

id objc_msgSend_atWorkScopedNOI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "atWorkScopedNOI");
}

id objc_msgSend_attributes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "attributes");
}

id objc_msgSend_audioRouteHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "audioRouteHandler");
}

id objc_msgSend_authGuessingDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authGuessingDictionary");
}

id objc_msgSend_autoHotspotMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "autoHotspotMode");
}

id objc_msgSend_autoJoinEndedWithResult_interfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "autoJoinEndedWithResult:interfaceName:");
}

id objc_msgSend_autoJoinParameters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "autoJoinParameters");
}

id objc_msgSend_autoJoinStartedWithTrigger_interfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "autoJoinStartedWithTrigger:interfaceName:");
}

id objc_msgSend_autoJoinUpdatedWithState_interfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "autoJoinUpdatedWithState:interfaceName:");
}

id objc_msgSend_autoLeaveRssiForBSS_ssid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "autoLeaveRssiForBSS:ssid:");
}

id objc_msgSend_automotive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "automotive");
}

id objc_msgSend_availableNetworks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "availableNetworks");
}

id objc_msgSend_availableResource(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "availableResource");
}

id objc_msgSend_avcMinJB(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "avcMinJB");
}

id objc_msgSend_avgDLSpeed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "avgDLSpeed");
}

id objc_msgSend_awdlRealTimeModeActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "awdlRealTimeModeActive");
}

id objc_msgSend_backhaulThroughput(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backhaulThroughput");
}

id objc_msgSend_band(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "band");
}

id objc_msgSend_bandFromFlags_OrChannel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bandFromFlags:OrChannel:");
}

id objc_msgSend_bandPreference(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bandPreference");
}

id objc_msgSend_batteryLife(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "batteryLife");
}

id objc_msgSend_beacon(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "beacon");
}

id objc_msgSend_beaconsAndWPSInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "beaconsAndWPSInfo");
}

id objc_msgSend_beginMonitoring(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "beginMonitoring");
}

id objc_msgSend_beginTrackingActiveUsageWithScorecard_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "beginTrackingActiveUsageWithScorecard:");
}

id objc_msgSend_beginTransaction_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "beginTransaction:completionHandler:");
}

id objc_msgSend_bestLatitudeReading(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bestLatitudeReading");
}

id objc_msgSend_bestLongitudeReading(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bestLongitudeReading");
}

id objc_msgSend_billingCycleEndDatesForLastPeriods_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "billingCycleEndDatesForLastPeriods:error:");
}

id objc_msgSend_blacklistedSSIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "blacklistedSSIDs");
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_bssEnvironment(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bssEnvironment");
}

id objc_msgSend_bssWithIdentifier_apProfile_apMode_phyMode_channel_channelFlags_channelWidth_rssi_latitude_longitude_isEdgeBss_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bssWithIdentifier:apProfile:apMode:phyMode:channel:channelFlags:channelWidth:rssi:latitude:longitude:isEdgeBss:");
}

id objc_msgSend_bssWithIdentifier_channel_channelFlags_rssi_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bssWithIdentifier:channel:channelFlags:rssi:");
}

id objc_msgSend_bssid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bssid");
}

id objc_msgSend_bssidGuessingDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bssidGuessingDictionary");
}

id objc_msgSend_btState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btState");
}

id objc_msgSend_btType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btType");
}

id objc_msgSend_build(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "build");
}

id objc_msgSend_bundleID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleID");
}

id objc_msgSend_bundleId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleId");
}

id objc_msgSend_bundleInfoValueForKey_PID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleInfoValueForKey:PID:");
}

id objc_msgSend_bypassPrompt(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bypassPrompt");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bytes");
}

id objc_msgSend_bytesInTotalActiveUsageSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bytesInTotalActiveUsageSession");
}

id objc_msgSend_bytesOutTotalActiveUsageSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bytesOutTotalActiveUsageSession");
}

id objc_msgSend_cStringUsingEncoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cStringUsingEncoding:");
}

id objc_msgSend_cacheEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cacheEnabled");
}

id objc_msgSend_cacheRollover(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cacheRollover");
}

id objc_msgSend_cachedBudget(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedBudget");
}

id objc_msgSend_calculateTimes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "calculateTimes");
}

id objc_msgSend_callCenterWithQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "callCenterWithQueue:");
}

id objc_msgSend_callHostedOnThisDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "callHostedOnThisDevice");
}

id objc_msgSend_callObserver(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "callObserver");
}

id objc_msgSend_callback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "callback");
}

id objc_msgSend_callbackContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "callbackContext");
}

id objc_msgSend_callbacks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "callbacks");
}

id objc_msgSend_calls(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "calls");
}

id objc_msgSend_canAttemptAssociationBasedOnBssidGuessingForScannedNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canAttemptAssociationBasedOnBssidGuessingForScannedNetwork:");
}

id objc_msgSend_canDeferNetwork_withUsageRank_andMotionState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canDeferNetwork:withUsageRank:andMotionState:");
}

id objc_msgSend_canPerformActionWithSampleRate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canPerformActionWithSampleRate:");
}

id objc_msgSend_canPresentRecommendationForSSID_currentLocation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canPresentRecommendationForSSID:currentLocation:");
}

id objc_msgSend_canRepromptForNotificationType_blacklistType_atDate_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canRepromptForNotificationType:blacklistType:atDate:count:");
}

id objc_msgSend_canSubmitMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canSubmitMetrics");
}

id objc_msgSend_cancelAutoJoinWithUUID_error_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelAutoJoinWithUUID:error:reply:");
}

id objc_msgSend_cancelMaintenanceTask(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelMaintenanceTask");
}

id objc_msgSend_captiveFlag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "captiveFlag");
}

id objc_msgSend_captiveProfile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "captiveProfile");
}

id objc_msgSend_carModeActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "carModeActive");
}

id objc_msgSend_carplayUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "carplayUUID");
}

id objc_msgSend_caseInsensitiveCompare_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "caseInsensitiveCompare:");
}

id objc_msgSend_categoryIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "categoryIdentifier");
}

id objc_msgSend_ccaAverage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ccaAverage");
}

id objc_msgSend_cellularDataStatusMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularDataStatusMap");
}

id objc_msgSend_cellularICCID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularICCID");
}

id objc_msgSend_cellularIfTotalBytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularIfTotalBytes");
}

id objc_msgSend_cellularIfTotalPackets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularIfTotalPackets");
}

id objc_msgSend_cellularInterfaceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularInterfaceName");
}

id objc_msgSend_cellularL3MBPS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularL3MBPS");
}

id objc_msgSend_cellularL3PPS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularL3PPS");
}

id objc_msgSend_cellularNetworkInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularNetworkInfo");
}

id objc_msgSend_channel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channel");
}

id objc_msgSend_channelBand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channelBand");
}

id objc_msgSend_channelFlags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channelFlags");
}

id objc_msgSend_channelNumber(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channelNumber");
}

id objc_msgSend_channelWidth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channelWidth");
}

id objc_msgSend_channelWithNumber_band_width_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channelWithNumber:band:width:");
}

id objc_msgSend_channels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channels");
}

id objc_msgSend_checkDeviceNanCapabilities(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkDeviceNanCapabilities");
}

id objc_msgSend_checkForWiFiPasswordChange(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkForWiFiPasswordChange");
}

id objc_msgSend_checkIfMatchesHomeBundleIds_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkIfMatchesHomeBundleIds:");
}

id objc_msgSend_checkIfMatchesNonNetworkingBundleIds_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkIfMatchesNonNetworkingBundleIds:");
}

id objc_msgSend_checkIfSoftwareUpdateStateEntered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkIfSoftwareUpdateStateEntered:");
}

id objc_msgSend_checkInWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkInWithCompletion:");
}

id objc_msgSend_chipResetWaiter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "chipResetWaiter");
}

id objc_msgSend_claimedResource(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "claimedResource");
}

id objc_msgSend_clearScanResultsForAutoJoinSessionReset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearScanResultsForAutoJoinSessionReset");
}

id objc_msgSend_clearTrafficRegistration_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearTrafficRegistration:error:");
}

id objc_msgSend_client(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "client");
}

id objc_msgSend_clients(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clients");
}

id objc_msgSend_coalesceKnownNetworksSyncTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coalesceKnownNetworksSyncTimer");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "code");
}

id objc_msgSend_collectLogs_configuration_update_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "collectLogs:configuration:update:reply:");
}

id objc_msgSend_colocated2GHzRNRChannel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "colocated2GHzRNRChannel");
}

id objc_msgSend_colocated5GHzRNRChannel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "colocated5GHzRNRChannel");
}

id objc_msgSend_colocatedNetworks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "colocatedNetworks");
}

id objc_msgSend_colocatedScopeID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "colocatedScopeID");
}

id objc_msgSend_colocatedState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "colocatedState");
}

id objc_msgSend_comment(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "comment");
}

id objc_msgSend_commonPrefixWithString_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commonPrefixWithString:options:");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compare:");
}

id objc_msgSend_compatibilityMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compatibilityMode");
}

id objc_msgSend_compatibilityState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compatibilityState");
}

id objc_msgSend_components_fromDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "components:fromDate:");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_confidence(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "confidence");
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configuration");
}

id objc_msgSend_configureWiFiClientAndRegisterWithBatteryModule__::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureWiFiClientAndRegisterWithBatteryModule::::");
}

id objc_msgSend_connectedBSSID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectedBSSID");
}

id objc_msgSend_connectedSSID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectedSSID");
}

id objc_msgSend_connectionState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectionState");
}

id objc_msgSend_containerURLForSecurityApplicationGroupIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containerURLForSecurityApplicationGroupIdentifier:");
}

id objc_msgSend_containsIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsIndex:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsString:");
}

id objc_msgSend_content(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "content");
}

id objc_msgSend_contentsAtPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contentsAtPath:");
}

id objc_msgSend_contentsOfDirectoryAtPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contentsOfDirectoryAtPath:error:");
}

id objc_msgSend_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:");
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "context");
}

id objc_msgSend_convertFromNWReliabilityMonitorResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "convertFromNWReliabilityMonitorResult:");
}

id objc_msgSend_coordinate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coordinate");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copy");
}

id objc_msgSend_copyActiveServiceUniqueIdentifiers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyActiveServiceUniqueIdentifiers");
}

id objc_msgSend_copyAggregatePathRules(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyAggregatePathRules");
}

id objc_msgSend_copyAllStoredNetworkSsids(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyAllStoredNetworkSsids");
}

id objc_msgSend_copyAllStoredNetworkSsidsWithColocatedScopeId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyAllStoredNetworkSsidsWithColocatedScopeId:");
}

id objc_msgSend_copyAllStoredNetworkSsidsWithTrait_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyAllStoredNetworkSsidsWithTrait:");
}

id objc_msgSend_copyCachedCurrentHotspotNetwork(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyCachedCurrentHotspotNetwork");
}

id objc_msgSend_copyCachedCurrentKnownNetworkRef_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyCachedCurrentKnownNetworkRef:");
}

id objc_msgSend_copyCachedCurrentNetworkRef_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyCachedCurrentNetworkRef:");
}

id objc_msgSend_copyCachedCurrentSessionBasedNetworkRef(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyCachedCurrentSessionBasedNetworkRef");
}

id objc_msgSend_copyColocatedScopeIdForNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyColocatedScopeIdForNetwork:");
}

id objc_msgSend_copyColocatedScopeTransitionInfo_bssid_minRssi_maxRssi_band_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyColocatedScopeTransitionInfo:bssid:minRssi:maxRssi:band:");
}

id objc_msgSend_copyColocatedScopeTransitionNetwork_minRssi_maxRssi_band_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyColocatedScopeTransitionNetwork:minRssi:maxRssi:band:");
}

id objc_msgSend_copyGeoTagsForNetworkAtLocation_location_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyGeoTagsForNetworkAtLocation:location:");
}

id objc_msgSend_copyHigherBandNetworksAvailableAtLocation_intoArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyHigherBandNetworksAvailableAtLocation:intoArray:");
}

id objc_msgSend_copyHomeNetworkTransitionDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyHomeNetworkTransitionDate");
}

id objc_msgSend_copyItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyItemAtPath:toPath:error:");
}

id objc_msgSend_copyNetworkUsageDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyNetworkUsageDictionary:");
}

id objc_msgSend_copyNetworksAvailableAtLocation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyNetworksAvailableAtLocation:");
}

id objc_msgSend_copyNetworksAvailableAtLocationWithinDistanceInBand_distance_band_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyNetworksAvailableAtLocationWithinDistanceInBand:distance:band:");
}

id objc_msgSend_copyPairedDestinationID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyPairedDestinationID");
}

id objc_msgSend_copyPowerBudgetForRequest_forClient_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyPowerBudgetForRequest:forClient:error:");
}

id objc_msgSend_copyPreferenceScoreDictionaryForNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyPreferenceScoreDictionaryForNetwork:");
}

id objc_msgSend_copyRoamStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyRoamStatus");
}

id objc_msgSend_copyScoreSortedNetworksAvailableAtLocation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyScoreSortedNetworksAvailableAtLocation:");
}

id objc_msgSend_copyScoreSortedNetworksAvailableAtLocationWithinDistance_distance_authComparator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyScoreSortedNetworksAvailableAtLocationWithinDistance:distance:authComparator:");
}

id objc_msgSend_copySoftErrorEventDescription_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copySoftErrorEventDescription:");
}

id objc_msgSend_copySortedHotspotDevicesByAutoPreferences(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copySortedHotspotDevicesByAutoPreferences");
}

id objc_msgSend_copyStatistics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyStatistics");
}

id objc_msgSend_copyStoredNetworksAvailableAtLocationWithinDistanceInBand_distance_band_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyStoredNetworksAvailableAtLocationWithinDistanceInBand:distance:band:");
}

id objc_msgSend_coreWiFiSpecificAttributes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coreWiFiSpecificAttributes");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countForObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countForObject:");
}

id objc_msgSend_countryCodeStr(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countryCodeStr");
}

id objc_msgSend_cpmsActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cpmsActive");
}

id objc_msgSend_cpmsAsyncNotificationCallback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cpmsAsyncNotificationCallback");
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createFileAtPath_contents_attributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createFileAtPath:contents:attributes:");
}

id objc_msgSend_createForSubmission_metadata_options_error_writing_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createForSubmission:metadata:options:error:writing:");
}

id objc_msgSend_createWAPConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createWAPConfig:");
}

id objc_msgSend_ctServerConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ctServerConnection");
}

id objc_msgSend_currentBand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentBand");
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentCalendar");
}

id objc_msgSend_currentCalls(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentCalls");
}

id objc_msgSend_currentDeviceCapabilities(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentDeviceCapabilities");
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentHandler");
}

id objc_msgSend_currentNetwork(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentNetwork");
}

id objc_msgSend_currentNetworkChanged(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentNetworkChanged");
}

id objc_msgSend_currentNetworkChannelChanged(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentNetworkChannelChanged");
}

id objc_msgSend_currentRoute(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentRoute");
}

id objc_msgSend_currentSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentSession");
}

id objc_msgSend_currentState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentState");
}

id objc_msgSend_cwfHomeManagerWithDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cwfHomeManagerWithDelegate:");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "data");
}

id objc_msgSend_dataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataTaskWithRequest:completionHandler:");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithContentsOfURL:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_datapathID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "datapathID");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "date");
}

id objc_msgSend_dateByAddingComponents_toDate_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateByAddingComponents:toDate:options:");
}

id objc_msgSend_dateFromComponents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateFromComponents:");
}

id objc_msgSend_dateTraitCachesUpdated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateTraitCachesUpdated");
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_debugInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "debugInfo");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_defaultThrottlingPeriodForBlacklistingType_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultThrottlingPeriodForBlacklistingType:count:");
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultWorkspace");
}

id objc_msgSend_deferIntervalSecs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deferIntervalSecs");
}

id objc_msgSend_deferNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deferNetwork:");
}

id objc_msgSend_denyListThresholdForReason_forSSIDThresholds_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "denyListThresholdForReason:forSSIDThresholds:");
}

id objc_msgSend_denyListedNetworkCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "denyListedNetworkCount");
}

id objc_msgSend_denyListedNetworkSSIDs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "denyListedNetworkSSIDs:");
}

id objc_msgSend_denyListedReasonHistoryForNetwork_state_timestamps_reasonData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "denyListedReasonHistoryForNetwork:state:timestamps:reasonData:");
}

id objc_msgSend_denyMulticast(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "denyMulticast");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "description");
}

id objc_msgSend_destroyPersistentStoreAtURL_withType_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "destroyPersistentStoreAtURL:withType:options:error:");
}

id objc_msgSend_detectLateRoam(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "detectLateRoam");
}

id objc_msgSend_detectPingPong(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "detectPingPong");
}

id objc_msgSend_determineAndSetLocale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "determineAndSetLocale:");
}

id objc_msgSend_deviceAnalyticsClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceAnalyticsClient");
}

id objc_msgSend_deviceClass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceClass");
}

id objc_msgSend_deviceIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceIdentifier");
}

id objc_msgSend_deviceIdentifierForVendor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceIdentifierForVendor");
}

id objc_msgSend_deviceIsAssociated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceIsAssociated");
}

id objc_msgSend_deviceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceName");
}

id objc_msgSend_deviceStationary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceStationary");
}

id objc_msgSend_deviceUnderActiveUse(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceUnderActiveUse");
}

id objc_msgSend_devices(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "devices");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryForKey:");
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryRepresentation");
}

id objc_msgSend_dictionaryWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithContentsOfFile:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObject:forKey:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObjects:forKeys:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_didSubmitMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didSubmitMetrics");
}

id objc_msgSend_disAssocReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disAssocReason");
}

id objc_msgSend_disable6EMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disable6EMode");
}

id objc_msgSend_disableProminentFiltering(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableProminentFiltering");
}

id objc_msgSend_disarmHomeNetworkTransitionTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disarmHomeNetworkTransitionTimer");
}

id objc_msgSend_discover(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "discover");
}

id objc_msgSend_discoveredDevices(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "discoveredDevices");
}

id objc_msgSend_discoveryResult(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "discoveryResult");
}

id objc_msgSend_dismissJoinAlerts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dismissJoinAlerts");
}

id objc_msgSend_dispatchAccessoryJoinAlertForNetwork_unsecured_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchAccessoryJoinAlertForNetwork:unsecured:");
}

id objc_msgSend_dispatchJoinAlertForNetwork_withProviderName_andReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchJoinAlertForNetwork:withProviderName:andReason:");
}

id objc_msgSend_dispatchLowDataModeAlertForNetwork_withReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchLowDataModeAlertForNetwork:withReason:");
}

id objc_msgSend_dispatchNotificationWithAskToJoinHotspotRecommendation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchNotificationWithAskToJoinHotspotRecommendation:");
}

id objc_msgSend_dispatchNotificationWithColocatedScanResult_fromScanResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchNotificationWithColocatedScanResult:fromScanResult:");
}

id objc_msgSend_dispatchNotificationWithRandomMAC_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchNotificationWithRandomMAC:");
}

id objc_msgSend_dispatchNotificationWithRecommendation_currentLocation_force_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchNotificationWithRecommendation:currentLocation:force:");
}

id objc_msgSend_dispatchQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchQueue");
}

id objc_msgSend_displayStateToken(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "displayStateToken");
}

id objc_msgSend_displayedOperatorName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "displayedOperatorName");
}

id objc_msgSend_distanceFromLocation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "distanceFromLocation:");
}

id objc_msgSend_dndStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dndStatus");
}

id objc_msgSend_doNotFinalizePriorToEpoch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doNotFinalizePriorToEpoch");
}

id objc_msgSend_doesContain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doesContain:");
}

id objc_msgSend_doesNetworkContainBssidForGuessing2GhzNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doesNetworkContainBssidForGuessing2GhzNetwork:");
}

id objc_msgSend_domainName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domainName");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_downloadError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downloadError");
}

id objc_msgSend_drain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drain");
}

id objc_msgSend_drivingEndedAlarmTriggerDuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drivingEndedAlarmTriggerDuration");
}

id objc_msgSend_drivingStartedAlarmTriggerDuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drivingStartedAlarmTriggerDuration");
}

id objc_msgSend_dumpDeviceAnalyticsToFileWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dumpDeviceAnalyticsToFileWithCompletion:");
}

id objc_msgSend_dumpOverrideNetworkState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dumpOverrideNetworkState");
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "duration");
}

id objc_msgSend_dwellTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dwellTime");
}

id objc_msgSend_elements(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "elements");
}

id objc_msgSend_enableRemoteHotspotForDevice_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableRemoteHotspotForDevice:withCompletionHandler:");
}

id objc_msgSend_enableSoftErrorMitigation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableSoftErrorMitigation:");
}

id objc_msgSend_enableTestMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableTestMode:");
}

id objc_msgSend_enableXCTestNotifications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableXCTestNotifications");
}

id objc_msgSend_enabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enabled");
}

id objc_msgSend_endMonitoring(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endMonitoring");
}

id objc_msgSend_endTransaction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endTransaction:");
}

id objc_msgSend_endTransaction_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endTransaction:completionHandler:");
}

id objc_msgSend_endpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endpoint");
}

id objc_msgSend_engine(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "engine");
}

id objc_msgSend_entry(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "entry");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsWithOptions_usingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateObjectsWithOptions:usingBlock:");
}

id objc_msgSend_ephemeralSessionConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ephemeralSessionConfiguration");
}

id objc_msgSend_epochAtAssoc(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "epochAtAssoc");
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "error");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_essMembers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "essMembers");
}

id objc_msgSend_establishedLinkNetwork(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "establishedLinkNetwork");
}

id objc_msgSend_eventWithName_type_date_payload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eventWithName:type:date:payload:");
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_exit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "exit");
}

id objc_msgSend_expiredWalletIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "expiredWalletIDs");
}

id objc_msgSend_externalForm(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "externalForm");
}

id objc_msgSend_fetch3BarsNetworksForLocation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetch3BarsNetworksForLocation:");
}

id objc_msgSend_fetchAutomaticDNDAssertionWithReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchAutomaticDNDAssertionWithReply:");
}

id objc_msgSend_fetchLocationsOfInterestVisitedSinceDate_withHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchLocationsOfInterestVisitedSinceDate:withHandler:");
}

id objc_msgSend_fetchLocationsOfInterestWithinDistance_ofLocation_withHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchLocationsOfInterestWithinDistance:ofLocation:withHandler:");
}

id objc_msgSend_fetchSoftErrorContext_softErrorType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchSoftErrorContext:softErrorType:");
}

id objc_msgSend_fetchSoftErrorContextData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchSoftErrorContextData");
}

id objc_msgSend_fetchWiFiAssetsFromServer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchWiFiAssetsFromServer");
}

id objc_msgSend_fetchWiFiBehaviorWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchWiFiBehaviorWithCompletion:");
}

id objc_msgSend_fieldForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fieldForKey:");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filteredArrayUsingPredicate:");
}

id objc_msgSend_filteredBSSWithProperties_OSSpecificKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filteredBSSWithProperties:OSSpecificKeys:");
}

id objc_msgSend_filteredNetworkProfileWithProperties_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filteredNetworkProfileWithProperties:");
}

id objc_msgSend_filteredNetworkProfileWithProperties_OSSpecificKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filteredNetworkProfileWithProperties:OSSpecificKeys:");
}

id objc_msgSend_finalizeFirstSessionThatRequiresItWhenAppropriate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "finalizeFirstSessionThatRequiresItWhenAppropriate");
}

id objc_msgSend_finalizeSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "finalizeSession:");
}

id objc_msgSend_finalizeWithEndScorecard_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "finalizeWithEndScorecard:");
}

id objc_msgSend_findRecommendationForScannedNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findRecommendationForScannedNetwork:");
}

id objc_msgSend_findRecommendationsForScannedNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findRecommendationsForScannedNetwork:");
}

id objc_msgSend_firstName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "firstName");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "firstObject");
}

id objc_msgSend_flags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flags");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "floatValue");
}

id objc_msgSend_followMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "followMode");
}

id objc_msgSend_followModePreferredBand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "followModePreferredBand");
}

id objc_msgSend_forceBSSID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceBSSID");
}

id objc_msgSend_forceBeaconInterval100ms(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceBeaconInterval100ms");
}

id objc_msgSend_forceFetch3BarsNetworkMatchingBSSID_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceFetch3BarsNetworkMatchingBSSID:completionHandler:");
}

id objc_msgSend_forceHiddenMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceHiddenMode");
}

id objc_msgSend_fullScorecardFor_options_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fullScorecardFor:options:reply:");
}

id objc_msgSend_generateCurrentNetworkRecordForInternetSharingSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generateCurrentNetworkRecordForInternetSharingSession:");
}

id objc_msgSend_getAdaptiveRoamParams_ssid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAdaptiveRoamParams:ssid:");
}

id objc_msgSend_getBSSIDForCurrentSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBSSIDForCurrentSession");
}

id objc_msgSend_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:");
}

id objc_msgSend_getCString_maxLength_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCString:maxLength:encoding:");
}

id objc_msgSend_getClosestAllowedLowerPowerNumber_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getClosestAllowedLowerPowerNumber:");
}

id objc_msgSend_getColocatedStateFromPreferenceScoreDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getColocatedStateFromPreferenceScoreDictionary:");
}

id objc_msgSend_getCorresponding5GhzSsidInPlistFor2GhzNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCorresponding5GhzSsidInPlistFor2GhzNetwork:");
}

id objc_msgSend_getDeliveredNotificationsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDeliveredNotificationsWithCompletionHandler:");
}

id objc_msgSend_getDeviceAnalyticsConfigurationAndReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDeviceAnalyticsConfigurationAndReply:");
}

id objc_msgSend_getDeviceAnalyticsConfigurationWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDeviceAnalyticsConfigurationWithCompletion:");
}

id objc_msgSend_getDevicesWithFlags_session_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDevicesWithFlags:session:error:");
}

id objc_msgSend_getDutyCycleForPowerNumber_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDutyCycleForPowerNumber:");
}

id objc_msgSend_getErrorCounters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getErrorCounters");
}

id objc_msgSend_getHomeBundleIds(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getHomeBundleIds");
}

id objc_msgSend_getHomeNetworkNextTransitionDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getHomeNetworkNextTransitionDate:");
}

id objc_msgSend_getHotspotDeviceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getHotspotDeviceName:");
}

id objc_msgSend_getKnownNonNetworkingBundleIds(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getKnownNonNetworkingBundleIds");
}

id objc_msgSend_getLocaleCountryCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLocaleCountryCode");
}

id objc_msgSend_getLocaleLastUpdatedTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLocaleLastUpdatedTime");
}

id objc_msgSend_getLocaleSource(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLocaleSource");
}

id objc_msgSend_getLogLevelEnable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLogLevelEnable");
}

id objc_msgSend_getNewMessageForKey_groupType_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNewMessageForKey:groupType:andReply:");
}

id objc_msgSend_getPairedVersionID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPairedVersionID");
}

id objc_msgSend_getPowerNumberForDutyCycle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPowerNumberForDutyCycle:");
}

id objc_msgSend_getReachabilityStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getReachabilityStatus");
}

id objc_msgSend_getResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getResourceValue:forKey:error:");
}

id objc_msgSend_getSampleCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSampleCount:");
}

id objc_msgSend_getSamples_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSamples:");
}

id objc_msgSend_getStringForDataType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getStringForDataType:");
}

id objc_msgSend_getStringOfCallbackType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getStringOfCallbackType:");
}

id objc_msgSend_getWiFiManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWiFiManager");
}

id objc_msgSend_group(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "group");
}

id objc_msgSend_handleEvent_withData_interface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleEvent:withData:interface:");
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_handleNotificationResponseForSSID_type_response_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleNotificationResponseForSSID:type:response:");
}

id objc_msgSend_handleRequest_withData_interface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleRequest:withData:interface:");
}

id objc_msgSend_handleSignal_onQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSignal:onQueue:");
}

id objc_msgSend_has6GHzOnlyBSS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "has6GHzOnlyBSS");
}

id objc_msgSend_hasBeenFinalized(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasBeenFinalized");
}

id objc_msgSend_hasConnected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasConnected");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasRealTimeAppProperty_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasRealTimeAppProperty:");
}

id objc_msgSend_hasRegisteredWithDaemon(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasRegisteredWithDaemon");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hash");
}

id objc_msgSend_hiddenState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hiddenState");
}

id objc_msgSend_historicalScorecardAtAssoc(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "historicalScorecardAtAssoc");
}

id objc_msgSend_historicallyBadLinkQualityNetworkSsidsCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "historicallyBadLinkQualityNetworkSsidsCache");
}

id objc_msgSend_horizontalAccuracy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "horizontalAccuracy");
}

id objc_msgSend_hotspotDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hotspotDevice");
}

id objc_msgSend_hotspotSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hotspotSession");
}

id objc_msgSend_hotspotUpdateNetworkcallback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hotspotUpdateNetworkcallback");
}

id objc_msgSend_hour(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hour");
}

id objc_msgSend_iconNamed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iconNamed:");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identifier");
}

id objc_msgSend_idsSendFailureCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsSendFailureCount");
}

id objc_msgSend_idsService(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsService");
}

id objc_msgSend_incrementCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "incrementCount");
}

id objc_msgSend_incrementGuessingFailedCountForScannedNetworkWithBssid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "incrementGuessingFailedCountForScannedNetworkWithBssid:");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indexSet");
}

id objc_msgSend_info(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "info");
}

id objc_msgSend_infoDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "infoDictionary");
}

id objc_msgSend_ingestCurrentNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ingestCurrentNetwork:");
}

id objc_msgSend_ingestLQMUpdate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ingestLQMUpdate:");
}

id objc_msgSend_ingestLocationUpdateWithLat_andLon_andAccuracy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ingestLocationUpdateWithLat:andLon:andAccuracy:");
}

id objc_msgSend_ingestScanResults_currentSSID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ingestScanResults:currentSSID:");
}

id objc_msgSend_ingestScanResults_currentSSID_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ingestScanResults:currentSSID:andReply:");
}

id objc_msgSend_ingestScanResults_ofType_clientName_directed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ingestScanResults:ofType:clientName:directed:");
}

id objc_msgSend_init_withTimestamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "init:withTimestamp:");
}

id objc_msgSend_initErrorArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initErrorArray:");
}

id objc_msgSend_initEventMitigation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initEventMitigation");
}

id objc_msgSend_initUsingWiFiAware_serviceCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initUsingWiFiAware:serviceCallback:");
}

id objc_msgSend_initWithAddress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAddress:");
}

id objc_msgSend_initWithArgs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithArgs:");
}

id objc_msgSend_initWithArgs_interfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithArgs:interfaceName:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithArray_copyItems_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithArray:copyItems:");
}

id objc_msgSend_initWithBool_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBool:");
}

id objc_msgSend_initWithBssid_andReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBssid:andReason:");
}

id objc_msgSend_initWithBundleIDs_states_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBundleIDs:states:");
}

id objc_msgSend_initWithBundleIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBundleIdentifier:");
}

id objc_msgSend_initWithBundleIdentifier_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBundleIdentifier:allowPlaceholder:error:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithCString_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCString:encoding:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithChangeHandler_localStoreType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithChangeHandler:localStoreType:");
}

id objc_msgSend_initWithChannelNumber_bandwidth_is2_4GHz_is5GHz_is6GHz_isDFS_extensionChannelAbove_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithChannelNumber:bandwidth:is2_4GHz:is5GHz:is6GHz:isDFS:extensionChannelAbove:");
}

id objc_msgSend_initWithClient_network_bundleId_localizedAppName_originator_poweredOff_wapi_sessionBased_useSSIDPrefix_callback_context_bypassPrompt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithClient:network:bundleId:localizedAppName:originator:poweredOff:wapi:sessionBased:useSSIDPrefix:callback:context:bypassPrompt:");
}

id objc_msgSend_initWithConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithConfiguration:");
}

id objc_msgSend_initWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContentsOfURL:");
}

id objc_msgSend_initWithContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContext:");
}

id objc_msgSend_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_timestamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithDenyListDeviceProfile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDenyListDeviceProfile:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDictionary_isActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDictionary:isActive:");
}

id objc_msgSend_initWithDiscoveryResult_serviceType_serviceSpecificInfo_passphrase_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDiscoveryResult:serviceType:serviceSpecificInfo:passphrase:");
}

id objc_msgSend_initWithDisplayType_handler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDisplayType:handler:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithDouble_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDouble:");
}

id objc_msgSend_initWithErrorType_deviceContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithErrorType:deviceContext:");
}

id objc_msgSend_initWithExternalForm_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithExternalForm:");
}

id objc_msgSend_initWithFireDate_interval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFireDate:interval:target:selector:userInfo:repeats:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithHotspot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithHotspot:");
}

id objc_msgSend_initWithInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithInteger:");
}

id objc_msgSend_initWithInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithInterfaceName:");
}

id objc_msgSend_initWithKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithKey:");
}

id objc_msgSend_initWithKey_ascending_comparator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithKey:ascending:comparator:");
}

id objc_msgSend_initWithLatitude_longitude_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithLatitude:longitude:");
}

id objc_msgSend_initWithManagedObjectModel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithManagedObjectModel:");
}

id objc_msgSend_initWithManager_availabilityEngine_scanResults_disableProminentFiltering_blacklistedSSIDs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithManager:availabilityEngine:scanResults:disableProminentFiltering:blacklistedSSIDs:");
}

id objc_msgSend_initWithManagerQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithManagerQueue:");
}

id objc_msgSend_initWithMetric_withMaxSamples_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMetric:withMaxSamples:");
}

id objc_msgSend_initWithMetricName_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMetricName:options:");
}

id objc_msgSend_initWithName_andParams_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:andParams:");
}

id objc_msgSend_initWithName_vid_isApple_locationID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:vid:isApple:locationID:");
}

id objc_msgSend_initWithNetwork_colocatedNetworks_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNetwork:colocatedNetworks:");
}

id objc_msgSend_initWithNetworkAgentClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNetworkAgentClass:");
}

id objc_msgSend_initWithNetworkName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNetworkName:");
}

id objc_msgSend_initWithNetworkRecord_managerRef_andManagerQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNetworkRecord:managerRef:andManagerQueue:");
}

id objc_msgSend_initWithNetworkRecord_withMetrics_withMaxSamples_withMinSampleThresh_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNetworkRecord:withMetrics:withMaxSamples:withMinSampleThresh:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithObjectsAndKeys:");
}

id objc_msgSend_initWithPMKList_passphraseList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPMKList:passphraseList:");
}

id objc_msgSend_initWithProviders_sources_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithProviders:sources:");
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithQueue:");
}

id objc_msgSend_initWithQueue_supportsWAPI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithQueue:supportsWAPI:");
}

id objc_msgSend_initWithSSID_rssi_bssid_channel_channelFlags_andOrigin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSSID:rssi:bssid:channel:channelFlags:andOrigin:");
}

id objc_msgSend_initWithScanProvider_configuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithScanProvider:configuration:");
}

id objc_msgSend_initWithScanRecord_includeProperties_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithScanRecord:includeProperties:");
}

id objc_msgSend_initWithService_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithService:");
}

id objc_msgSend_initWithServiceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithServiceName:");
}

id objc_msgSend_initWithServiceType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithServiceType:");
}

id objc_msgSend_initWithServiceType_securityConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithServiceType:securityConfiguration:");
}

id objc_msgSend_initWithServiceTypes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithServiceTypes:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithSuiteName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSuiteName:");
}

id objc_msgSend_initWithTitle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithTitle:");
}

id objc_msgSend_initWithTrafficEngDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithTrafficEngDelegate:");
}

id objc_msgSend_initWithTrigger_duration_onQueue_withHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithTrigger:duration:onQueue:withHandler:");
}

id objc_msgSend_initWithType_andReason_prevTestedOptions_andInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithType:andReason:prevTestedOptions:andInterfaceName:");
}

id objc_msgSend_initWithType_identifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithType:identifier:");
}

id objc_msgSend_initWithUUID_andDescription_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUID:andDescription:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_initWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUnsignedInt:");
}

id objc_msgSend_initWithWiFiManager_queue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithWiFiManager:queue:");
}

id objc_msgSend_initWithWiFiManagerwithStringRef_withInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithWiFiManagerwithStringRef:withInterval:");
}

id objc_msgSend_initWithWiFiNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithWiFiNetwork:");
}

id objc_msgSend_initWithWiFiNetworkRef_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithWiFiNetworkRef:");
}

id objc_msgSend_initWithWorkspace_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithWorkspace:");
}

id objc_msgSend_initWorkspaceWithService_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWorkspaceWithService:");
}

id objc_msgSend_initialSetupCompleted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initialSetupCompleted");
}

id objc_msgSend_initializeDeviceLockState_displayState_motionState_callState_mediaState_chargingState_companionConnectionState_andSecondaryInterfaceName_compatibilityMode_badLinkRssi_goodLinkRssi_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializeDeviceLockState:displayState:motionState:callState:mediaState:chargingState:companionConnectionState:andSecondaryInterfaceName:compatibilityMode:badLinkRssi:goodLinkRssi:");
}

id objc_msgSend_initializeWithHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializeWithHandler:");
}

id objc_msgSend_initializeWithManager_queue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializeWithManager:queue:");
}

id objc_msgSend_initializeWithWiFiManager_queue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializeWithWiFiManager:queue:");
}

id objc_msgSend_initiatorDataAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initiatorDataAddress");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_installMegaWiFiProfile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installMegaWiFiProfile");
}

id objc_msgSend_installProfileData_outError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installProfileData:outError:");
}

id objc_msgSend_installedProfilesWithFilterFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installedProfilesWithFilterFlags:");
}

id objc_msgSend_instanceMethodSignatureForSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "instanceMethodSignatureForSelector:");
}

id objc_msgSend_instanceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "instanceName");
}

id objc_msgSend_int32Value(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "int32Value");
}

id objc_msgSend_int64Value(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "int64Value");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "integerForKey:");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "integerValue");
}

id objc_msgSend_interface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interface");
}

id objc_msgSend_interfaceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceName");
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_internalQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "internalQueue");
}

id objc_msgSend_intersectSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intersectSet:");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidate");
}

id objc_msgSend_invalidateAndCancel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidateAndCancel");
}

id objc_msgSend_invocationWithMethodSignature_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invocationWithMethodSignature:");
}

id objc_msgSend_ipAddrAssigned(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ipAddrAssigned");
}

id objc_msgSend_is2GHz(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "is2GHz");
}

id objc_msgSend_is5GHz(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "is5GHz");
}

id objc_msgSend_is6GHz(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "is6GHz");
}

id objc_msgSend_isAVConferenceActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAVConferenceActive");
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isActive");
}

id objc_msgSend_isActivityAvailable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isActivityAvailable");
}

id objc_msgSend_isAirplayActiveOverInfra(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAirplayActiveOverInfra");
}

id objc_msgSend_isAllowedInLockdownMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAllowedInLockdownMode");
}

id objc_msgSend_isAnyCallInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAnyCallInProgress");
}

id objc_msgSend_isAskToJoinAllowed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAskToJoinAllowed");
}

id objc_msgSend_isAtNonPrimaryHomeLocation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAtNonPrimaryHomeLocation");
}

id objc_msgSend_isAtPrimaryHomeLocation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAtPrimaryHomeLocation");
}

id objc_msgSend_isAuthorized(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAuthorized");
}

id objc_msgSend_isAutoJoinDisabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAutoJoinDisabled");
}

id objc_msgSend_isAutoJoined(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAutoJoined");
}

id objc_msgSend_isBackgroundActivityRegistered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isBackgroundActivityRegistered");
}

id objc_msgSend_isCPMSSupported(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCPMSSupported");
}

id objc_msgSend_isCallHostedOnThisDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCallHostedOnThisDevice");
}

id objc_msgSend_isCallKitActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCallKitActive");
}

id objc_msgSend_isCarDNDActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCarDNDActive");
}

id objc_msgSend_isCarModeActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCarModeActive");
}

id objc_msgSend_isCarPlay(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCarPlay");
}

id objc_msgSend_isCellularDataUsable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCellularDataUsable");
}

id objc_msgSend_isCellularInexpensive5G(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCellularInexpensive5G");
}

id objc_msgSend_isClientAssociated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isClientAssociated");
}

id objc_msgSend_isCoPresenceActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCoPresenceActive");
}

id objc_msgSend_isDNSHeuristicsFilteredNetwork(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDNSHeuristicsFilteredNetwork");
}

id objc_msgSend_isDefaultCountryCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDefaultCountryCode:");
}

id objc_msgSend_isDefaultPairedDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDefaultPairedDevice");
}

id objc_msgSend_isDeviceLocked(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDeviceLocked");
}

id objc_msgSend_isDisableAutoJoinActivityRegistered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDisableAutoJoinActivityRegistered");
}

id objc_msgSend_isDisplayOn(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDisplayOn");
}

id objc_msgSend_isEAP(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEAP");
}

id objc_msgSend_isEAPShareBlockedByManagedDefault(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEAPShareBlockedByManagedDefault");
}

id objc_msgSend_isEdgeBSS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEdgeBSS");
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEnabled");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualHotspotDevices_compareTo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualHotspotDevices:compareTo:");
}

id objc_msgSend_isEqualHotspotDevicesName_compareTo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualHotspotDevicesName:compareTo:");
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToData:");
}

id objc_msgSend_isEqualToDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToDictionary:");
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToSet:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isEventMitigationEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEventMitigationEnabled:");
}

id objc_msgSend_isFamilyHotspot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isFamilyHotspot:");
}

id objc_msgSend_isFirstUserUnlocked(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isFirstUserUnlocked");
}

id objc_msgSend_isForegroundActivityRegistered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isForegroundActivityRegistered");
}

id objc_msgSend_isGameModeActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isGameModeActive");
}

id objc_msgSend_isHS2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isHS2");
}

id objc_msgSend_isHistoricallyBadLinkQualityNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isHistoricallyBadLinkQualityNetwork:");
}

id objc_msgSend_isHostedOnCurrentDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isHostedOnCurrentDevice");
}

id objc_msgSend_isHotspotDeviceSupportADHS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isHotspotDeviceSupportADHS:");
}

id objc_msgSend_isInGameMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInGameMode");
}

id objc_msgSend_isInHomeScreen(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInHomeScreen");
}

id objc_msgSend_isInNonNetworkingApp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInNonNetworkingApp");
}

id objc_msgSend_isInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInProgress");
}

id objc_msgSend_isInitialSetupCompleted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInitialSetupCompleted");
}

id objc_msgSend_isInterfaceRankingInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInterfaceRankingInProgress");
}

id objc_msgSend_isKeychainUnlocked(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isKeychainUnlocked");
}

id objc_msgSend_isKnownNetworkDisallowed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isKnownNetworkDisallowed:");
}

id objc_msgSend_isLQAIndicatingTxStall(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLQAIndicatingTxStall");
}

id objc_msgSend_isLastRoamDueToBeaconLost(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLastRoamDueToBeaconLost");
}

id objc_msgSend_isLocationValid_uptoSeconds_isHighAccuracy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLocationValid:uptoSeconds:isHighAccuracy:");
}

id objc_msgSend_isLocationValid_uptoSeconds_requiredAccuracy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLocationValid:uptoSeconds:requiredAccuracy:");
}

id objc_msgSend_isLowQualityNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLowQualityNetwork:");
}

id objc_msgSend_isMCInitialized(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMCInitialized");
}

id objc_msgSend_isManagedAppleID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isManagedAppleID");
}

id objc_msgSend_isMe(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMe");
}

id objc_msgSend_isMediaPlaying(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMediaPlaying");
}

id objc_msgSend_isMegaWiFiProfileInstalled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMegaWiFiProfileInstalled");
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isMovingNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMovingNetwork:");
}

id objc_msgSend_isNANPublisherStarted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNANPublisherStarted");
}

id objc_msgSend_isNearby(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNearby");
}

id objc_msgSend_isNetwork_updatedSince_withinInterval_basedOn_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNetwork:updatedSince:withinInterval:basedOn:");
}

id objc_msgSend_isNetworkDenyListedForAutoJoinDueToTrigDisc_RSSI_timestamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNetworkDenyListedForAutoJoinDueToTrigDisc:RSSI:timestamp:");
}

id objc_msgSend_isNetworkInDenyListedState_scanResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNetworkInDenyListedState:scanResult:");
}

id objc_msgSend_isNetworkKnown_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNetworkKnown:");
}

id objc_msgSend_isNetworkRecommendationAllowed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNetworkRecommendationAllowed");
}

id objc_msgSend_isNetworkTemporarilyDenyListedForAutoJoin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNetworkTemporarilyDenyListedForAutoJoin:");
}

id objc_msgSend_isNetworkTraitsCacheValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNetworkTraitsCacheValid");
}

id objc_msgSend_isNetworkingAppInForeground(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNetworkingAppInForeground");
}

id objc_msgSend_isOmnipresentNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isOmnipresentNetwork:");
}

id objc_msgSend_isOpen(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isOpen");
}

id objc_msgSend_isPasspoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPasspoint");
}

id objc_msgSend_isPasswordSharingDisabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPasswordSharingDisabled");
}

id objc_msgSend_isPersonalHotspot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPersonalHotspot");
}

id objc_msgSend_isPersonalHotspotModificationAllowed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPersonalHotspotModificationAllowed");
}

id objc_msgSend_isPersonalHotspotRecommendationAllowed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPersonalHotspotRecommendationAllowed");
}

id objc_msgSend_isPowerResourceAvailable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPowerResourceAvailable:");
}

id objc_msgSend_isPriorityNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPriorityNetwork:");
}

id objc_msgSend_isPrivacyProxyEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPrivacyProxyEnabled");
}

id objc_msgSend_isProfileBased(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isProfileBased");
}

id objc_msgSend_isPublicAirPlayNetwork(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPublicAirPlayNetwork");
}

id objc_msgSend_isPublicNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPublicNetwork:");
}

id objc_msgSend_isQuiesceWiFiActivityRegistered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isQuiesceWiFiActivityRegistered");
}

id objc_msgSend_isRealTimeAppActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRealTimeAppActive");
}

id objc_msgSend_isRepeatable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRepeatable");
}

id objc_msgSend_isRoamLateDueToDelta(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRoamLateDueToDelta");
}

id objc_msgSend_isRxdNetwork_equalToPlistNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRxdNetwork:equalToPlistNetwork:");
}

id objc_msgSend_isScanning(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isScanning");
}

id objc_msgSend_isServiceProviderRoamingEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isServiceProviderRoamingEnabled");
}

id objc_msgSend_isSessionBased(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSessionBased");
}

id objc_msgSend_isSessionReliable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSessionReliable:");
}

id objc_msgSend_isSessionTerminated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSessionTerminated");
}

id objc_msgSend_isSetupCompleted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSetupCompleted");
}

id objc_msgSend_isStandalone6G(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isStandalone6G");
}

id objc_msgSend_isStoreDemoModeEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isStoreDemoModeEnabled:");
}

id objc_msgSend_isSubscriberStopped(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSubscriberStopped");
}

id objc_msgSend_isSupervised(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSupervised");
}

id objc_msgSend_isSupervisedDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSupervisedDevice");
}

id objc_msgSend_isTimeDeferredNetworksPresent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isTimeDeferredNetworksPresent");
}

id objc_msgSend_isTxStalled_rateType_size_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isTxStalled:rateType:size:");
}

id objc_msgSend_isUsingSustainedCellularData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isUsingSustainedCellularData");
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isValid");
}

id objc_msgSend_isValidJSONObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isValidJSONObject:");
}

id objc_msgSend_isWPA2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWPA2");
}

id objc_msgSend_isWaitingForIdsMessageDelivery(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWaitingForIdsMessageDelivery");
}

id objc_msgSend_isWaitingForIdsSendResponse(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWaitingForIdsSendResponse");
}

id objc_msgSend_isWiFiBoundActivityRegistered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiBoundActivityRegistered");
}

id objc_msgSend_isWiFiCallInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiCallInProgress");
}

id objc_msgSend_isWiFiNetworkMDMNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiNetworkMDMNetwork:");
}

id objc_msgSend_isWiFiNetworkSubjectToMDM_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiNetworkSubjectToMDM:");
}

id objc_msgSend_isWiFiPowerModificationAllowed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiPowerModificationAllowed");
}

id objc_msgSend_isWiFiPowerModificationDisabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiPowerModificationDisabled");
}

id objc_msgSend_isWiFiWithAllowedNetworksOnlyEnforced(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiWithAllowedNetworksOnlyEnforced");
}

id objc_msgSend_isWithin_fromLocation_forNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWithin:fromLocation:forNetwork:");
}

id objc_msgSend_isWoWActivityRegistered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWoWActivityRegistered");
}

id objc_msgSend_joinAlertEventWithSource_action_visibleDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "joinAlertEventWithSource:action:visibleDuration:");
}

id objc_msgSend_joinCandidates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "joinCandidates");
}

id objc_msgSend_joinFailureList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "joinFailureList");
}

id objc_msgSend_joinRecommendationEventWithSource_action_BSSID_latitude_longitude_score_visibleDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "joinRecommendationEventWithSource:action:BSSID:latitude:longitude:score:visibleDuration:");
}

id objc_msgSend_joinedNetwork(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "joinedNetwork");
}

id objc_msgSend_key(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "key");
}

id objc_msgSend_keyDidChangeHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyDidChangeHandler");
}

id objc_msgSend_keychainAccessibleNow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keychainAccessibleNow");
}

id objc_msgSend_keysSortedByValueUsingComparator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keysSortedByValueUsingComparator:");
}

id objc_msgSend_knownNetworkProfile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "knownNetworkProfile");
}

id objc_msgSend_knownNetworks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "knownNetworks");
}

id objc_msgSend_knownNetworksListChanged(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "knownNetworksListChanged");
}

id objc_msgSend_lastAssociatedAt(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastAssociatedAt");
}

id objc_msgSend_lastBssSessionInfoForInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastBssSessionInfoForInterface:");
}

id objc_msgSend_lastBytesInSample(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastBytesInSample");
}

id objc_msgSend_lastBytesOutSample(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastBytesOutSample");
}

id objc_msgSend_lastDiscoveredAt(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastDiscoveredAt");
}

id objc_msgSend_lastHostTriggeredRoamReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastHostTriggeredRoamReason");
}

id objc_msgSend_lastJoinedAt(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastJoinedAt");
}

id objc_msgSend_lastJoinedBySystemAt(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastJoinedBySystemAt");
}

id objc_msgSend_lastJoinedBySystemAtWeek(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastJoinedBySystemAtWeek");
}

id objc_msgSend_lastJoinedByUserAt(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastJoinedByUserAt");
}

id objc_msgSend_lastLocation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastLocation");
}

id objc_msgSend_lastName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastName");
}

id objc_msgSend_lastNotifiedAt(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastNotifiedAt");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastPathComponent");
}

id objc_msgSend_lastRangingSessionMetric(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastRangingSessionMetric");
}

id objc_msgSend_lastRecommendationLocation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastRecommendationLocation");
}

id objc_msgSend_lastRecommendedSSID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastRecommendedSSID");
}

id objc_msgSend_lastRoamAttemptTimestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastRoamAttemptTimestamp");
}

id objc_msgSend_lastRoamStatusFailedNoCandidateTs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastRoamStatusFailedNoCandidateTs");
}

id objc_msgSend_lastRoamSuppressionRemovalTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastRoamSuppressionRemovalTime");
}

id objc_msgSend_lastSyncedCompanionAssistedAutoJoinData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastSyncedCompanionAssistedAutoJoinData");
}

id objc_msgSend_lastSyncedCompanionAssistedAutoJoinDataGUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastSyncedCompanionAssistedAutoJoinDataGUID");
}

id objc_msgSend_lastSyncedCompanionLocaleData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastSyncedCompanionLocaleData");
}

id objc_msgSend_lastSyncedCompanionLocaleGUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastSyncedCompanionLocaleGUID");
}

id objc_msgSend_lastSyncedKnownNetworkPayloadData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastSyncedKnownNetworkPayloadData");
}

id objc_msgSend_lastSyncedKnownNetworkPayloadDataGUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastSyncedKnownNetworkPayloadDataGUID");
}

id objc_msgSend_lastSyncedKnownNetworksData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastSyncedKnownNetworksData");
}

id objc_msgSend_lastSyncedKnownNetworksDataGUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastSyncedKnownNetworksDataGUID");
}

id objc_msgSend_latestLocation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "latestLocation");
}

id objc_msgSend_launchTapToRadar_displayString_deviceContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchTapToRadar:displayString:deviceContext:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "length");
}

id objc_msgSend_linkEstablishedCallbackContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "linkEstablishedCallbackContext");
}

id objc_msgSend_linkTerminatedCallbackContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "linkTerminatedCallbackContext");
}

id objc_msgSend_linkUpTimestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "linkUpTimestamp");
}

id objc_msgSend_localAssistedDiscoveryMetric(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localAssistedDiscoveryMetric");
}

id objc_msgSend_localDataAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localDataAddress");
}

id objc_msgSend_localInterfaceIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localInterfaceIndex");
}

id objc_msgSend_localMasterChannel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localMasterChannel");
}

id objc_msgSend_localPreferredChannel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localPreferredChannel");
}

id objc_msgSend_localSecondaryPreferredChannel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localSecondaryPreferredChannel");
}

id objc_msgSend_localTimeZone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localTimeZone");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizedDescription");
}

id objc_msgSend_localizedName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizedName");
}

id objc_msgSend_localizedStringFromPersonNameComponents_style_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizedStringFromPersonNameComponents:style:options:");
}

id objc_msgSend_location(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "location");
}

id objc_msgSend_logLocation_addPrefixString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logLocation:addPrefixString:");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "longLongValue");
}

id objc_msgSend_lostNetworkScanCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lostNetworkScanCount");
}

id objc_msgSend_lowDataMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lowDataMode");
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lowercaseString");
}

id objc_msgSend_lqaMgr(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lqaMgr");
}

id objc_msgSend_lqmCrashTracerReceiveBlock_forInterfaceWithName_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lqmCrashTracerReceiveBlock:forInterfaceWithName:andReply:");
}

id objc_msgSend_macAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "macAddress");
}

id objc_msgSend_mainRunLoop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mainRunLoop");
}

id objc_msgSend_maintenanceTask_location_predictedForDuration_maxPredictedLocations_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maintenanceTask:location:predictedForDuration:maxPredictedLocations:completionHandler:");
}

id objc_msgSend_managedEventDispatchPort(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "managedEventDispatchPort");
}

id objc_msgSend_managedEventNotifyPort(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "managedEventNotifyPort");
}

id objc_msgSend_managedEventNotifyToken(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "managedEventNotifyToken");
}

id objc_msgSend_manager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "manager");
}

id objc_msgSend_managerQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "managerQueue");
}

id objc_msgSend_matchFrameType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchFrameType");
}

id objc_msgSend_matchMACAddresses(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchMACAddresses");
}

id objc_msgSend_matchSigningIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchSigningIdentifier");
}

id objc_msgSend_matchesInString_options_range_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchesInString:options:range:");
}

id objc_msgSend_matchingKnownBSS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchingKnownBSS:");
}

id objc_msgSend_matchingKnownNetworkProfile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchingKnownNetworkProfile");
}

id objc_msgSend_maxRssiDeltaInRoamCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxRssiDeltaInRoamCache");
}

id objc_msgSend_mcConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mcConnection");
}

id objc_msgSend_mcInitialized(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mcInitialized");
}

id objc_msgSend_members(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "members");
}

id objc_msgSend_mergeScanResults(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mergeScanResults");
}

id objc_msgSend_mergeWithBSS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mergeWithBSS:");
}

id objc_msgSend_mergeWithNetworkProfile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mergeWithNetworkProfile:");
}

id objc_msgSend_metric(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metric");
}

id objc_msgSend_metricName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metricName");
}

id objc_msgSend_minBatteryIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minBatteryIndex");
}

id objc_msgSend_minRssiDeltaInRoamCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minRssiDeltaInRoamCache");
}

id objc_msgSend_minimumTimestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minimumTimestamp");
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_minute(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minute");
}

id objc_msgSend_mode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mode");
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "model");
}

id objc_msgSend_modifyMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modifyMap");
}

id objc_msgSend_monitoredInterfaceNames(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "monitoredInterfaceNames");
}

id objc_msgSend_monitoring(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "monitoring");
}

id objc_msgSend_motionQ(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "motionQ");
}

id objc_msgSend_motionStartTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "motionStartTime");
}

id objc_msgSend_motionState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "motionState");
}

id objc_msgSend_motionStateChangeCb(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "motionStateChangeCb");
}

id objc_msgSend_moveItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "moveItemAtPath:toPath:error:");
}

id objc_msgSend_movingAttribute(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "movingAttribute");
}

id objc_msgSend_movingNetworkSsidsCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "movingNetworkSsidsCache");
}

id objc_msgSend_multicastPreferenceSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "multicastPreferenceSet");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_mutableFields(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mutableFields");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "name");
}

id objc_msgSend_nanAssocData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nanAssocData");
}

id objc_msgSend_navigating(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "navigating");
}

id objc_msgSend_navigationListener(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "navigationListener");
}

id objc_msgSend_neighborChannelsForBSS_ssid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "neighborChannelsForBSS:ssid:");
}

id objc_msgSend_neighborsForBSS_ssid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "neighborsForBSS:ssid:");
}

id objc_msgSend_network(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "network");
}

id objc_msgSend_networkAttachmentInfoForScopedNOI_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkAttachmentInfoForScopedNOI:reply:");
}

id objc_msgSend_networkDenyList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkDenyList");
}

id objc_msgSend_networkGroupID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkGroupID");
}

id objc_msgSend_networkGroupPriority(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkGroupPriority");
}

id objc_msgSend_networkName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkName");
}

id objc_msgSend_networkOriginator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkOriginator");
}

id objc_msgSend_networkRecord(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkRecord");
}

id objc_msgSend_networkRemoved_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkRemoved:");
}

id objc_msgSend_networkType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkType");
}

id objc_msgSend_networks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networks");
}

id objc_msgSend_networksInDenyListedState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networksInDenyListedState:");
}

id objc_msgSend_networksInDenyListedStateHistory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networksInDenyListedStateHistory:");
}

id objc_msgSend_newHotspot_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newHotspot:error:");
}

id objc_msgSend_nextDateAfterDate_matchingComponents_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextDateAfterDate:matchingComponents:options:");
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextObject");
}

id objc_msgSend_notification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notification");
}

id objc_msgSend_notificationHistory(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notificationHistory");
}

id objc_msgSend_notificationMapping(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notificationMapping");
}

id objc_msgSend_notificationWithRequest_date_sourceIdentifier_intentIdentifiers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notificationWithRequest:date:sourceIdentifier:intentIdentifiers:");
}

id objc_msgSend_notifications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifications");
}

id objc_msgSend_notifyDriverAvailability_available_version_flags_eventID_reason_subReason_minorReason_reasonString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyDriverAvailability:available:version:flags:eventID:reason:subReason:minorReason:reasonString:");
}

id objc_msgSend_notifyIPv4Changes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyIPv4Changes:");
}

id objc_msgSend_notifyIPv6Changes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyIPv6Changes:");
}

id objc_msgSend_notifyInterfaceRankingState_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyInterfaceRankingState:forInterface:");
}

id objc_msgSend_notifyIpConfigurationStateWithMethod_dhcpLeaseDuration_hasRoutableIpV4_hasRoutableIpV6_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyIpConfigurationStateWithMethod:dhcpLeaseDuration:hasRoutableIpV4:hasRoutableIpV6:");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "now");
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "null");
}

id objc_msgSend_numDaysSinceAssocOverrideDeferral(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numDaysSinceAssocOverrideDeferral");
}

id objc_msgSend_numberOfActiveEndpoints(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberOfActiveEndpoints");
}

id objc_msgSend_numberOfCandidates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberOfCandidates");
}

id objc_msgSend_numberOfMeasurements(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberOfMeasurements");
}

id objc_msgSend_numberOfReports(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberOfReports");
}

id objc_msgSend_numberOfScans(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberOfScans");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithChar_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithChar:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithShort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithShort:");
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedChar:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedShort:");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "object");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectEnumerator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectEnumerator");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKey_ofClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKey:ofClass:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_omnipresentNetworkSsidsCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "omnipresentNetworkSsidsCache");
}

id objc_msgSend_openSensitiveURL_withOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "openSensitiveURL:withOptions:");
}

id objc_msgSend_openURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "openURL:");
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "options");
}

id objc_msgSend_orderedSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "orderedSet");
}

id objc_msgSend_origin(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "origin");
}

id objc_msgSend_originator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "originator");
}

id objc_msgSend_osSupportsAutoHotspot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "osSupportsAutoHotspot");
}

id objc_msgSend_outputs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "outputs");
}

id objc_msgSend_overrideApplicationState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "overrideApplicationState");
}

id objc_msgSend_overrideNetworkState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "overrideNetworkState");
}

id objc_msgSend_pairedDeviceConnectionChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pairedDeviceConnectionChanged:");
}

id objc_msgSend_pairedDeviceDestinationID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pairedDeviceDestinationID");
}

id objc_msgSend_pairedDeviceVersionID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pairedDeviceVersionID");
}

id objc_msgSend_paramMaxRoamRetriesInWindow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "paramMaxRoamRetriesInWindow");
}

id objc_msgSend_paramMinRoamRetryWaitTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "paramMinRoamRetryWaitTime");
}

id objc_msgSend_paramMinRoamWaitTimeFromLinkUpInSec(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "paramMinRoamWaitTimeFromLinkUpInSec");
}

id objc_msgSend_paramWindowSizeInSec(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "paramWindowSizeInSec");
}

id objc_msgSend_parsedBeaconInfoIsStored_ssid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parsedBeaconInfoIsStored:ssid:");
}

id objc_msgSend_password(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "password");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "path");
}

id objc_msgSend_pathForClientID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathForClientID:");
}

id objc_msgSend_payloadUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "payloadUUID");
}

id objc_msgSend_peerAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerAddress");
}

id objc_msgSend_peerAssistedDiscoveryMetric(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerAssistedDiscoveryMetric");
}

id objc_msgSend_peerMACAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerMACAddress");
}

id objc_msgSend_peerMasterChannel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerMasterChannel");
}

id objc_msgSend_peerPreferredChannel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerPreferredChannel");
}

id objc_msgSend_peerPrimaryPreferredChannel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerPrimaryPreferredChannel");
}

id objc_msgSend_peerSecondaryPreferredChannel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerSecondaryPreferredChannel");
}

id objc_msgSend_peerSupportedChannelFlags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerSupportedChannelFlags");
}

id objc_msgSend_pendingRequests(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingRequests");
}

id objc_msgSend_performAutoJoinWithParameters_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performAutoJoinWithParameters:reply:");
}

id objc_msgSend_performScanWithParameters_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performScanWithParameters:error:");
}

id objc_msgSend_performSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performSelector:");
}

id objc_msgSend_performSensing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performSensing");
}

id objc_msgSend_periodicTasksLastRanAt(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "periodicTasksLastRanAt");
}

id objc_msgSend_phyMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "phyMode");
}

id objc_msgSend_placeLabels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "placeLabels");
}

id objc_msgSend_popularityScore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "popularityScore");
}

id objc_msgSend_populateTxFailHistory_failureHistoryArray_historyArraySz_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "populateTxFailHistory:failureHistoryArray:historyArraySz:");
}

id objc_msgSend_populateWithMotionState_andAppState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "populateWithMotionState:andAppState:");
}

id objc_msgSend_populateWithPerMLOLinkStats_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "populateWithPerMLOLinkStats:");
}

id objc_msgSend_populateWithRssi_rssi0_rssi1_rssiMode_noise_noise0_noise1_snr_selfCca_otherCca_interference_totalReportedCca_beaconPer_rxCrsGlitch_rxBadPLCP_rxStart_rxBphyCrsGlitch_rxBphyBadPLCP_sampleDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "populateWithRssi:rssi0:rssi1:rssiMode:noise:noise0:noise1:snr:selfCca:otherCca:interference:totalReportedCca:beaconPer:rxCrsGlitch:rxBadPLCP:rxStart:rxBphyCrsGlitch:rxBphyBadPLCP:sampleDuration:");
}

id objc_msgSend_populateWithTxFrames_RxFrames_TxFails_TxRetries_RxRetries_TxRate_RxRate_txRTS_txRTSFail_txMpdu_txAMPDU_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "populateWithTxFrames:RxFrames:TxFails:TxRetries:RxRetries:TxRate:RxRate:txRTS:txRTSFail:txMpdu:txAMPDU:");
}

id objc_msgSend_portType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "portType");
}

id objc_msgSend_postComponentStatusEventFor_status_withReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postComponentStatusEventFor:status:withReply:");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_predicateWithBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateWithBlock:");
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateWithFormat:");
}

id objc_msgSend_prepareMessageForSubmission_withData_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prepareMessageForSubmission:withData:andReply:");
}

id objc_msgSend_preparedScanResults(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preparedScanResults");
}

id objc_msgSend_presentedNotificationForSSID_type_currentLocation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "presentedNotificationForSSID:type:currentLocation:");
}

id objc_msgSend_previousRoams(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "previousRoams");
}

id objc_msgSend_printDeferredNetworks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "printDeferredNetworks");
}

id objc_msgSend_privacyProxyBlockedReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "privacyProxyBlockedReason");
}

id objc_msgSend_processDenyListedBSSForMetrics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processDenyListedBSSForMetrics:");
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processIdentifier");
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processInfo");
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processName");
}

id objc_msgSend_processReceivedKnownNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processReceivedKnownNetwork:");
}

id objc_msgSend_processReceivedKnownNetworks_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processReceivedKnownNetworks:");
}

id objc_msgSend_processRoamEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processRoamEvent:");
}

id objc_msgSend_processWAMessageMetric_data_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processWAMessageMetric:data:");
}

id objc_msgSend_productVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "productVersion");
}

id objc_msgSend_profileForBSSID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "profileForBSSID:");
}

id objc_msgSend_profileIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "profileIdentifier");
}

id objc_msgSend_prominentScanResultsCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prominentScanResultsCount");
}

id objc_msgSend_properties(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "properties");
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_provideInternetToInitiatorsFromInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "provideInternetToInitiatorsFromInterface:");
}

id objc_msgSend_providerContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "providerContext");
}

id objc_msgSend_prune3BarsNetworks_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prune3BarsNetworks:");
}

id objc_msgSend_publicAttribute(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publicAttribute");
}

id objc_msgSend_publisherMetricsCallback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publisherMetricsCallback");
}

id objc_msgSend_publisherMetricsCallbackContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publisherMetricsCallbackContext");
}

id objc_msgSend_purgeOutdatedEvents_currTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "purgeOutdatedEvents:currTime:");
}

id objc_msgSend_query_andMaximumDistanceInMeters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "query:andMaximumDistanceInMeters:");
}

id objc_msgSend_queryLOITypeAtLastLocation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queryLOITypeAtLastLocation");
}

id objc_msgSend_queryLOITypeAtLatestLocation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queryLOITypeAtLatestLocation");
}

id objc_msgSend_queryPeerDatabase(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queryPeerDatabase");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queue");
}

id objc_msgSend_rangeAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rangeAtIndex:");
}

id objc_msgSend_rangeOfString_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rangeOfString:options:");
}

id objc_msgSend_rangingCompletedWithValidCount_resultStatus_resultFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rangingCompletedWithValidCount:resultStatus:resultFlags:");
}

id objc_msgSend_rangingSessionRequestedWithSelfPreferredChannel_selfMainChannel_selfChannelFlags_peerPreferredChannel_peerMainChannel_peerChannelFlags_requester_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rangingSessionRequestedWithSelfPreferredChannel:selfMainChannel:selfChannelFlags:peerPreferredChannel:peerMainChannel:peerChannelFlags:requester:");
}

id objc_msgSend_rangingStartedWithNumMeasurements_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rangingStartedWithNumMeasurements:");
}

id objc_msgSend_reSendIdsMessageBitMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reSendIdsMessageBitMap");
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reason");
}

id objc_msgSend_reasonsForNetworkInDenyListedState_state_timestamps_reasonData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reasonsForNetworkInDenyListedState:state:timestamps:reasonData:");
}

id objc_msgSend_receiveKernelLQMRollingWindow_ForInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "receiveKernelLQMRollingWindow:ForInterface:");
}

id objc_msgSend_receivedAt(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "receivedAt");
}

id objc_msgSend_receivedBssTransitionRequest_candidateListIncluded_isAbridged_disassociationImminent_bssTerminationIncluded_essDisassociationImminent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "receivedBssTransitionRequest:candidateListIncluded:isAbridged:disassociationImminent:bssTerminationIncluded:essDisassociationImminent:");
}

id objc_msgSend_receivedKnownNetworks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "receivedKnownNetworks");
}

id objc_msgSend_recentNotifications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recentNotifications");
}

id objc_msgSend_registerAppReporterCallbackFunctionPtr_withContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerAppReporterCallbackFunctionPtr:withContext:");
}

id objc_msgSend_registerAppUnregistrationFunctionPtr_withContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerAppUnregistrationFunctionPtr:withContext:");
}

id objc_msgSend_registerBundleCallbackFunctionPtr_withContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerBundleCallbackFunctionPtr:withContext:");
}

id objc_msgSend_registerCallback_withContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerCallback:withContext:");
}

id objc_msgSend_registerCallbackFunctionPtr_withContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerCallbackFunctionPtr:withContext:");
}

id objc_msgSend_registerClientWithDescription_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerClientWithDescription:error:");
}

id objc_msgSend_registerForInitialSyncTrigger(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForInitialSyncTrigger");
}

id objc_msgSend_registerForNotificationsWithError_handler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForNotificationsWithError:handler:");
}

id objc_msgSend_registerForSoftwareUpdateTrigger(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForSoftwareUpdateTrigger");
}

id objc_msgSend_registerForegroundAppTrackerFunctionPtr_withContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForegroundAppTrackerFunctionPtr:withContext:");
}

id objc_msgSend_registerHotspotInterfaceUpdateNetworkCallback_withCallbackContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerHotspotInterfaceUpdateNetworkCallback:withCallbackContext:");
}

id objc_msgSend_registerMessageGroup_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerMessageGroup:andReply:");
}

id objc_msgSend_registerNetworkAgent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerNetworkAgent:");
}

id objc_msgSend_registerPublisherMetricCallback_withContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerPublisherMetricCallback:withContext:");
}

id objc_msgSend_registerSmartCoverStateCallback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerSmartCoverStateCallback");
}

id objc_msgSend_registerSmartCoverStateObserver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerSmartCoverStateObserver:");
}

id objc_msgSend_registerStaArriveCallback_withContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerStaArriveCallback:withContext:");
}

id objc_msgSend_registerStaLeaveCallback_withContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerStaLeaveCallback:withContext:");
}

id objc_msgSend_registerStateChangeCallback_withCallbackContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerStateChangeCallback:withCallbackContext:");
}

id objc_msgSend_registeredActivities(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registeredActivities");
}

id objc_msgSend_registration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registration");
}

id objc_msgSend_regularExpressionWithPattern_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "regularExpressionWithPattern:options:error:");
}

id objc_msgSend_releaseKnownNetworkGuessingDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "releaseKnownNetworkGuessingDictionary");
}

id objc_msgSend_releasePowerResources(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "releasePowerResources");
}

id objc_msgSend_rememberUponSuccessfulAssociation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rememberUponSuccessfulAssociation");
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_removeAllDeliveredNotifications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllDeliveredNotifications");
}

id objc_msgSend_removeAllDenyListEntriesWithNetworkName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllDenyListEntriesWithNetworkName:");
}

id objc_msgSend_removeAllDenyListedItems(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllDenyListedItems");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeDeliveredNotificationsWithIdentifiers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeDeliveredNotificationsWithIdentifiers:");
}

id objc_msgSend_removeDenyListStateWithDenyListRemoveReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeDenyListStateWithDenyListRemoveReason:");
}

id objc_msgSend_removeExpiredDenyListedState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeExpiredDenyListedState:");
}

id objc_msgSend_removeFromKnownNetworkGuessingDictionaryTheNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeFromKnownNetworkGuessingDictionaryTheNetwork:");
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeItemAtPath:error:");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeLastObject");
}

id objc_msgSend_removeNetworkAgentFromInterfaceNamed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeNetworkAgentFromInterfaceNamed:");
}

id objc_msgSend_removeNetworkDenyListInfoForTrigger_forNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeNetworkDenyListInfoForTrigger:forNetwork:");
}

id objc_msgSend_removeNetworkDenyListInfoWithReason_forScanResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeNetworkDenyListInfoWithReason:forScanResult:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsAtIndexes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectsAtIndexes:");
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectsInRange:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removeProfileWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeProfileWithIdentifier:");
}

id objc_msgSend_repeatableValues(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "repeatableValues");
}

id objc_msgSend_replaceObjectsInRange_withObjectsFromArray_range_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "replaceObjectsInRange:withObjectsFromArray:range:");
}

id objc_msgSend_replayLinkUpEventWithInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "replayLinkUpEventWithInterfaceName:");
}

id objc_msgSend_request(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "request");
}

id objc_msgSend_requestAuthorizationWithOptions_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestAuthorizationWithOptions:completionHandler:");
}

id objc_msgSend_requestHighAccuracyLocationUpdate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestHighAccuracyLocationUpdate");
}

id objc_msgSend_requestInterentFromResponder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestInterentFromResponder");
}

id objc_msgSend_requestParameters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestParameters");
}

id objc_msgSend_requestPowerResource_withDetails_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestPowerResource:withDetails:");
}

id objc_msgSend_requestWithIdentifier_content_trigger_destinations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestWithIdentifier:content:trigger:destinations:");
}

id objc_msgSend_requestWithItemID_configuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestWithItemID:configuration:");
}

id objc_msgSend_requestWithURL_cachePolicy_timeoutInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestWithURL:cachePolicy:timeoutInterval:");
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reset");
}

id objc_msgSend_resetActiveUsageStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetActiveUsageStats");
}

id objc_msgSend_resetAttemptsForSSID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetAttemptsForSSID:");
}

id objc_msgSend_resetBackgroundApps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetBackgroundApps");
}

id objc_msgSend_resetDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetDevice");
}

id objc_msgSend_resetDeviceSessionforInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetDeviceSessionforInterface:");
}

id objc_msgSend_resetSettlement(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetSettlement");
}

id objc_msgSend_resetStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetStats");
}

id objc_msgSend_resetWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetWithCompletionHandler:");
}

id objc_msgSend_response(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "response");
}

id objc_msgSend_responseWithNotification_actionIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "responseWithNotification:actionIdentifier:");
}

id objc_msgSend_restTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "restTime");
}

id objc_msgSend_result(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "result");
}

id objc_msgSend_results(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "results");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resume");
}

id objc_msgSend_resumeAWDLWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resumeAWDLWithError:");
}

id objc_msgSend_retainArguments(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retainArguments");
}

id objc_msgSend_retrieveNextCandidate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retrieveNextCandidate");
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reverseObjectEnumerator");
}

id objc_msgSend_roamAttemptCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "roamAttemptCount");
}

id objc_msgSend_roamParamsQueryPending(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "roamParamsQueryPending");
}

id objc_msgSend_roamScanEndTimestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "roamScanEndTimestamp");
}

id objc_msgSend_roamState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "roamState");
}

id objc_msgSend_roamWithBssid_andReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "roamWithBssid:andReason:");
}

id objc_msgSend_roamWithReason_bandPreference_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "roamWithReason:bandPreference:");
}

id objc_msgSend_roamingConsortiumList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "roamingConsortiumList");
}

id objc_msgSend_role(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "role");
}

id objc_msgSend_roundCoordinateValuesToGeohashOfLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "roundCoordinateValuesToGeohashOfLength:");
}

id objc_msgSend_rssi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rssi");
}

id objc_msgSend_rssiAverage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rssiAverage");
}

id objc_msgSend_rssiRoamTriggerForBSS_ssid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rssiRoamTriggerForBSS:ssid:");
}

id objc_msgSend_rtTrafficAgent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rtTrafficAgent");
}

id objc_msgSend_rttAverageActiveSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rttAverageActiveSession");
}

id objc_msgSend_rttAverageAsPolledViaInstantaneousScorecard(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rttAverageAsPolledViaInstantaneousScorecard");
}

id objc_msgSend_rttAverageAtBeginActiveSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rttAverageAtBeginActiveSession");
}

id objc_msgSend_rttMinActiveSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rttMinActiveSession");
}

id objc_msgSend_rttMinAtBeginActiveSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rttMinAtBeginActiveSession");
}

id objc_msgSend_rttVarianceActiveSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rttVarianceActiveSession");
}

id objc_msgSend_rttVarianceAsPolledViaInstantaneousScorecard(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rttVarianceAsPolledViaInstantaneousScorecard");
}

id objc_msgSend_rttVarianceAtBeginActiveSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rttVarianceAtBeginActiveSession");
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "run");
}

id objc_msgSend_run3BarsObserver_withActivity_withCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "run3BarsObserver:withActivity:withCompletion:");
}

id objc_msgSend_runAsynchronouslyOnQueue_onInterface_withReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runAsynchronouslyOnQueue:onInterface:withReply:");
}

id objc_msgSend_runPeriodicTasks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runPeriodicTasks");
}

id objc_msgSend_running(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "running");
}

id objc_msgSend_runningForegroundApps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runningForegroundApps");
}

id objc_msgSend_runningNetworkingApps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runningNetworkingApps");
}

id objc_msgSend_scanFailureList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scanFailureList");
}

id objc_msgSend_scanFlags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scanFlags");
}

id objc_msgSend_scanFrequency(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scanFrequency");
}

id objc_msgSend_scanHexInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scanHexInt:");
}

id objc_msgSend_scanProperties(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scanProperties");
}

id objc_msgSend_scanRecord(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scanRecord");
}

id objc_msgSend_scanResult(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scanResult");
}

id objc_msgSend_scanResultWithMatchingKnownNetworkProfile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scanResultWithMatchingKnownNetworkProfile:");
}

id objc_msgSend_scanResults(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scanResults");
}

id objc_msgSend_scanType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scanType");
}

id objc_msgSend_scannedChannels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scannedChannels");
}

id objc_msgSend_scannedNetwork(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scannedNetwork");
}

id objc_msgSend_scannerWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scannerWithString:");
}

id objc_msgSend_schedule3BarsObserver(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "schedule3BarsObserver");
}

id objc_msgSend_scheduleDailyAt(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduleDailyAt");
}

id objc_msgSend_scheduleHistoricNetworkPerformanceFeedSync(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduleHistoricNetworkPerformanceFeedSync");
}

id objc_msgSend_scheduleOnceAfter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduleOnceAfter");
}

id objc_msgSend_scheduleOrphanedSetsCleanUp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduleOrphanedSetsCleanUp");
}

id objc_msgSend_scheduleOutdatedListEntriesCleanUp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduleOutdatedListEntriesCleanUp");
}

id objc_msgSend_schedulePNLMigration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "schedulePNLMigration");
}

id objc_msgSend_scheduleWCADownloadObserver(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduleWCADownloadObserver");
}

id objc_msgSend_scheduleWithQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduleWithQueue:");
}

id objc_msgSend_score(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "score");
}

id objc_msgSend_scorecardIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scorecardIdentifier");
}

id objc_msgSend_seamlessSSIDList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "seamlessSSIDList");
}

id objc_msgSend_securityType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "securityType");
}

id objc_msgSend_sendAutoHotspotModeDidChangeEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendAutoHotspotModeDidChangeEvent");
}

id objc_msgSend_sendConnectionEvent_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendConnectionEvent:completion:");
}

id objc_msgSend_sendCurrentCompanionNetworkWithChannelUpdate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendCurrentCompanionNetworkWithChannelUpdate:");
}

id objc_msgSend_sendData_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendData:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_sendKnownNetworkDidChangeEventForProfile_eventType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendKnownNetworkDidChangeEventForProfile:eventType:");
}

id objc_msgSend_sendLocaleToGizmo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendLocaleToGizmo:");
}

id objc_msgSend_sendToGizmoOfDataType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendToGizmoOfDataType:");
}

id objc_msgSend_sendUserAutoJoinStateDidChangeEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendUserAutoJoinStateDidChangeEvent");
}

id objc_msgSend_sendUserSettingsDidChangeEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendUserSettingsDidChangeEvent");
}

id objc_msgSend_sendWiFiAssistEventWithInterfaceName_linkQualityMetricInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendWiFiAssistEventWithInterfaceName:linkQualityMetricInfo:");
}

id objc_msgSend_sendWoWDidChangeEventWithInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendWoWDidChangeEventWithInterfaceName:");
}

id objc_msgSend_sendXPCEvent_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendXPCEvent:reply:");
}

id objc_msgSend_sentBssTransitionResponse_status_terminationDelayRequested_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sentBssTransitionResponse:status:terminationDelayRequested:");
}

id objc_msgSend_serialActivityDispatchQ(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serialActivityDispatchQ");
}

id objc_msgSend_serialIdsDispatchQ(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serialIdsDispatchQ");
}

id objc_msgSend_serialQ(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serialQ");
}

id objc_msgSend_serialQForNetworkPerformanceFeed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serialQForNetworkPerformanceFeed");
}

id objc_msgSend_serviceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceName");
}

id objc_msgSend_serviceSpecificInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceSpecificInfo");
}

id objc_msgSend_sessionBased(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionBased");
}

id objc_msgSend_sessionWithConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionWithConfiguration:");
}

id objc_msgSend_sessionsWaitingForFinalization(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionsWaitingForFinalization");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "set");
}

id objc_msgSend_setAVSystemMonitorCb_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAVSystemMonitorCb:");
}

id objc_msgSend_setAWDLRealTimeModeTimestamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAWDLRealTimeModeTimestamp:");
}

id objc_msgSend_setAccuracyOfBestReading_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAccuracyOfBestReading:");
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActive:");
}

id objc_msgSend_setActiveUseBeingTracked_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActiveUseBeingTracked:");
}

id objc_msgSend_setAddReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAddReason:");
}

id objc_msgSend_setAddedAt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAddedAt:");
}

id objc_msgSend_setAddedFromApp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAddedFromApp:");
}

id objc_msgSend_setAddedFromUI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAddedFromUI:");
}

id objc_msgSend_setAddedViaATJ_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAddedViaATJ:");
}

id objc_msgSend_setAddedViaRecommendation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAddedViaRecommendation:");
}

id objc_msgSend_setAddedViaSharing_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAddedViaSharing:");
}

id objc_msgSend_setAddedViaSync_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAddedViaSync:");
}

id objc_msgSend_setAdvertisedCountryCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAdvertisedCountryCode:");
}

id objc_msgSend_setAgentDescription_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAgentDescription:");
}

id objc_msgSend_setAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAgentUUID:");
}

id objc_msgSend_setAllowAutoHotspotHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowAutoHotspotHandler:");
}

id objc_msgSend_setAllowAutoJoinHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowAutoJoinHandler:");
}

id objc_msgSend_setAllowHotspotHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowHotspotHandler:");
}

id objc_msgSend_setAllowJoinCandidateHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowJoinCandidateHandler:");
}

id objc_msgSend_setAllowKnownNetworkHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowKnownNetworkHandler:");
}

id objc_msgSend_setAllowsCellularAccess_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowsCellularAccess:");
}

id objc_msgSend_setAnyCallInProgress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAnyCallInProgress:");
}

id objc_msgSend_setApMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setApMode:");
}

id objc_msgSend_setAppAttributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAppAttributes:");
}

id objc_msgSend_setAppAwareDetails_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAppAwareDetails:");
}

id objc_msgSend_setAppInForeground_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAppInForeground:");
}

id objc_msgSend_setApplicationRunningState_foregroundState_andNetworkingState_forBundleId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setApplicationRunningState:foregroundState:andNetworkingState:forBundleId:");
}

id objc_msgSend_setAppliedCountryCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAppliedCountryCode:");
}

id objc_msgSend_setArgument_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setArgument:atIndex:");
}

id objc_msgSend_setAskToJoinMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAskToJoinMode:");
}

id objc_msgSend_setAssertCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAssertCount:");
}

id objc_msgSend_setAssocIsToApplePH_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAssocIsToApplePH:");
}

id objc_msgSend_setAssocIsToNoMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAssocIsToNoMap:");
}

id objc_msgSend_setAssocReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAssocReason:");
}

id objc_msgSend_setAssociateToNetworkHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAssociateToNetworkHandler:");
}

id objc_msgSend_setAssociatedNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAssociatedNetwork:");
}

id objc_msgSend_setAsyncPPMBudgetTimestamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAsyncPPMBudgetTimestamp:");
}

id objc_msgSend_setAttribute_forKey_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAttribute:forKey:error:");
}

id objc_msgSend_setAttributes_ofItemAtPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAttributes:ofItemAtPath:error:");
}

id objc_msgSend_setAudioRouteHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAudioRouteHandler:");
}

id objc_msgSend_setAuthenticationType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAuthenticationType:");
}

id objc_msgSend_setAutoHotspotMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAutoHotspotMode:");
}

id objc_msgSend_setAutoJoinDisabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAutoJoinDisabled:");
}

id objc_msgSend_setAutoLoginDisabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAutoLoginDisabled:");
}

id objc_msgSend_setAvailabilityChangedCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAvailabilityChangedCallback:");
}

id objc_msgSend_setAvailableResource_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAvailableResource:");
}

id objc_msgSend_setAvcMinJB_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAvcMinJB:");
}

id objc_msgSend_setAvgDLSpeed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAvgDLSpeed:");
}

id objc_msgSend_setAwdlRealTimeModeActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAwdlRealTimeModeActive:");
}

id objc_msgSend_setAwdlSequence_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAwdlSequence:");
}

id objc_msgSend_setAwdlState_inMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAwdlState:inMode:");
}

id objc_msgSend_setBSSID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBSSID:");
}

id objc_msgSend_setBSSList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBSSList:");
}

id objc_msgSend_setBSSType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBSSType:");
}

id objc_msgSend_setBTState_type_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBTState:type:");
}

id objc_msgSend_setBand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBand:");
}

id objc_msgSend_setBatteryInfoHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBatteryInfoHandler:");
}

id objc_msgSend_setBestLatitudeReading_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBestLatitudeReading:");
}

id objc_msgSend_setBestLongitudeReading_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBestLongitudeReading:");
}

id objc_msgSend_setBluetoothState_connectedDeviceCount_inA2dp_inSco_inUniAoS_inBiAoS_btAudioBand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBluetoothState:connectedDeviceCount:inA2dp:inSco:inUniAoS:inBiAoS:btAudioBand:");
}

id objc_msgSend_setBody_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBody:");
}

id objc_msgSend_setBool_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBool:forKey:");
}

id objc_msgSend_setBoolValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBoolValue:");
}

id objc_msgSend_setBrowseForHotspotsHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBrowseForHotspotsHandler:");
}

id objc_msgSend_setBssEnvironment_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBssEnvironment:");
}

id objc_msgSend_setBssid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBssid:");
}

id objc_msgSend_setBtState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtState:");
}

id objc_msgSend_setBtStateChangeTimestamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtStateChangeTimestamp:");
}

id objc_msgSend_setBtType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtType:");
}

id objc_msgSend_setBundleID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBundleID:");
}

id objc_msgSend_setByAddingObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setByAddingObject:");
}

id objc_msgSend_setBytesInAtBeginActiveUsageSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBytesInAtBeginActiveUsageSession:");
}

id objc_msgSend_setBytesInTotalActiveUsageSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBytesInTotalActiveUsageSession:");
}

id objc_msgSend_setBytesOutAtBeginActiveUsageSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBytesOutAtBeginActiveUsageSession:");
}

id objc_msgSend_setBytesOutTotalActiveUsageSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBytesOutTotalActiveUsageSession:");
}

id objc_msgSend_setCacheEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCacheEnabled:");
}

id objc_msgSend_setCachePolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachePolicy:");
}

id objc_msgSend_setCacheRollover_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCacheRollover:");
}

id objc_msgSend_setCachedCurrentKnownNetworkRef_interfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachedCurrentKnownNetworkRef:interfaceName:");
}

id objc_msgSend_setCachedCurrentNetworkRef_interfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachedCurrentNetworkRef:interfaceName:");
}

id objc_msgSend_setCachedCurrentSessionBasedNetworkRef_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachedCurrentSessionBasedNetworkRef:");
}

id objc_msgSend_setCallHostedOnThisDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCallHostedOnThisDevice:");
}

id objc_msgSend_setCallObserver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCallObserver:");
}

id objc_msgSend_setCallState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCallState:");
}

id objc_msgSend_setCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCallback:");
}

id objc_msgSend_setCallbackContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCallbackContext:");
}

id objc_msgSend_setCanExposeImsi_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCanExposeImsi:");
}

id objc_msgSend_setCaptiveFlag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCaptiveFlag:");
}

id objc_msgSend_setCaptiveProfile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCaptiveProfile:");
}

id objc_msgSend_setCaptiveStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCaptiveStatus:");
}

id objc_msgSend_setCarDNDActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCarDNDActive:");
}

id objc_msgSend_setCarModeActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCarModeActive:");
}

id objc_msgSend_setCarplayNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCarplayNetwork:");
}

id objc_msgSend_setCarplayUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCarplayUUID:");
}

id objc_msgSend_setCategoryIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCategoryIdentifier:");
}

id objc_msgSend_setCcaAverage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCcaAverage:");
}

id objc_msgSend_setCellularDataStatus_inAirplaneMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularDataStatus:inAirplaneMode:");
}

id objc_msgSend_setCellularDataStatusChangedHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularDataStatusChangedHandler:");
}

id objc_msgSend_setCellularDataStatusMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularDataStatusMap:");
}

id objc_msgSend_setCellularFallbackStatusChangedHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularFallbackStatusChangedHandler:");
}

id objc_msgSend_setCellularIfTotalBytes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularIfTotalBytes:");
}

id objc_msgSend_setCellularIfTotalPackets_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularIfTotalPackets:");
}

id objc_msgSend_setCellularInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularInterfaceName:");
}

id objc_msgSend_setCellularL3MBPS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularL3MBPS:");
}

id objc_msgSend_setCellularL3PPS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularL3PPS:");
}

id objc_msgSend_setCellularNetworkInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularNetworkInfo:");
}

id objc_msgSend_setChannel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannel:");
}

id objc_msgSend_setChannelBand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannelBand:");
}

id objc_msgSend_setChannelNumber_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannelNumber:");
}

id objc_msgSend_setChannelSequenceUpdatedEventHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannelSequenceUpdatedEventHandler:");
}

id objc_msgSend_setChannelWidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannelWidth:");
}

id objc_msgSend_setChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannels:");
}

id objc_msgSend_setChipResetWaiter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChipResetWaiter:");
}

id objc_msgSend_setClaimedResource_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClaimedResource:");
}

id objc_msgSend_setClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClient:");
}

id objc_msgSend_setClientId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClientId:");
}

id objc_msgSend_setClients_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClients:");
}

id objc_msgSend_setColocated2GHzRNRChannel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setColocated2GHzRNRChannel:");
}

id objc_msgSend_setColocated5GHzRNRChannel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setColocated5GHzRNRChannel:");
}

id objc_msgSend_setColocatedNetworkCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setColocatedNetworkCount:");
}

id objc_msgSend_setColocatedNetworks_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setColocatedNetworks:");
}

id objc_msgSend_setColocatedScopeCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setColocatedScopeCount:");
}

id objc_msgSend_setColocatedState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setColocatedState:");
}

id objc_msgSend_setCompatibilityMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCompatibilityMode:");
}

id objc_msgSend_setConnectToHotspotHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConnectToHotspotHandler:");
}

id objc_msgSend_setConnectedBss_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConnectedBss:");
}

id objc_msgSend_setConnectionState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConnectionState:");
}

id objc_msgSend_setContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setContext:");
}

id objc_msgSend_setControlCenterDisabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setControlCenterDisabled:");
}

id objc_msgSend_setControlCenterState_withKnownLocation_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setControlCenterState:withKnownLocation:forInterface:");
}

id objc_msgSend_setCoreID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCoreID:");
}

id objc_msgSend_setCoreWiFiSpecificAttributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCoreWiFiSpecificAttributes:");
}

id objc_msgSend_setCpmsActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCpmsActive:");
}

id objc_msgSend_setCurrentApplicationName_withAttributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentApplicationName:withAttributes:");
}

id objc_msgSend_setCurrentBand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentBand:");
}

id objc_msgSend_setCurrentDisplayState_andLockState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentDisplayState:andLockState:");
}

id objc_msgSend_setCurrentNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentNetwork:");
}

id objc_msgSend_setCurrentSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentSession:");
}

id objc_msgSend_setDHCPServerID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDHCPServerID:");
}

id objc_msgSend_setDHCPv6ServerID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDHCPv6ServerID:");
}

id objc_msgSend_setDNSHeuristicsFailureStateInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDNSHeuristicsFailureStateInfo:");
}

id objc_msgSend_setDNSHeuristicsFilteredNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDNSHeuristicsFilteredNetwork:");
}

id objc_msgSend_setData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setData:");
}

id objc_msgSend_setDataPathSecCfgForPHSOverNAN_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataPathSecCfgForPHSOverNAN:");
}

id objc_msgSend_setDatapathConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDatapathConfiguration:");
}

id objc_msgSend_setDateFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDateFormat:");
}

id objc_msgSend_setDateTraitCachesUpdated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDateTraitCachesUpdated:");
}

id objc_msgSend_setDay_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDay:");
}

id objc_msgSend_setDefaultDenyListThresholds(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDefaultDenyListThresholds");
}

id objc_msgSend_setDeferIntervalSecs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeferIntervalSecs:");
}

id objc_msgSend_setDeferredNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeferredNetwork:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDelegate_queue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDelegate:queue:");
}

id objc_msgSend_setDenyListDidUpdateHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDenyListDidUpdateHandler:");
}

id objc_msgSend_setDenyListedStateExpiryIntervalInSec_state_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDenyListedStateExpiryIntervalInSec:state:");
}

id objc_msgSend_setDenyListingThresholds_value_forSSIDThresholds_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDenyListingThresholds:value:forSSIDThresholds:");
}

id objc_msgSend_setDestinationFile_runLoopRef_runLoopMode_classC_dateFormatter_maxFileSizeInMB_logLifespanInDays_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDestinationFile:runLoopRef:runLoopMode:classC:dateFormatter:maxFileSizeInMB:logLifespanInDays:");
}

id objc_msgSend_setDestinationFileLocation_fileNamePrefix_runLoopRef_runLoopMode_classC_dateFormatter_maxFileSizeInMB_logLifespanInDays_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDestinationFileLocation:fileNamePrefix:runLoopRef:runLoopMode:classC:dateFormatter:maxFileSizeInMB:logLifespanInDays:");
}

id objc_msgSend_setDestinationOsLog_category_logLifespanInDays_logLevel_logPrivacy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDestinationOsLog:category:logLifespanInDays:logLevel:logPrivacy:");
}

id objc_msgSend_setDetectionTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDetectionTime:");
}

id objc_msgSend_setDeviceAnalyticsConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceAnalyticsConfiguration:");
}

id objc_msgSend_setDeviceAnalyticsConfiguration_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceAnalyticsConfiguration:andReply:");
}

id objc_msgSend_setDeviceAppAccessInfo_device_session_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceAppAccessInfo:device:session:error:");
}

id objc_msgSend_setDeviceChargingState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceChargingState:");
}

id objc_msgSend_setDeviceInitializationFailureReason_timeSinceBoot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceInitializationFailureReason:timeSinceBoot:");
}

id objc_msgSend_setDeviceIsAssociated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceIsAssociated:");
}

id objc_msgSend_setDeviceLockState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceLockState:");
}

id objc_msgSend_setDeviceMgr_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceMgr:");
}

id objc_msgSend_setDeviceMotionState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceMotionState:");
}

id objc_msgSend_setDeviceNameForPHSOverNAN_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceNameForPHSOverNAN:");
}

id objc_msgSend_setDeviceStationary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceStationary:");
}

id objc_msgSend_setDeviceUnderActiveUse_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceUnderActiveUse:");
}

id objc_msgSend_setDeviceVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceVersion:");
}

id objc_msgSend_setDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDictionary:");
}

id objc_msgSend_setDisAssocReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisAssocReason:");
}

id objc_msgSend_setDisable6eMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisable6eMode:");
}

id objc_msgSend_setDiscoveredDevices_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDiscoveredDevices:");
}

id objc_msgSend_setDisplayState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisplayState:");
}

id objc_msgSend_setDisplayedOperatorName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisplayedOperatorName:");
}

id objc_msgSend_setDistance_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDistance:");
}

id objc_msgSend_setDndStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDndStatus:");
}

id objc_msgSend_setDoNotFinalizePriorToEpoch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDoNotFinalizePriorToEpoch:");
}

id objc_msgSend_setDomainName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDomainName:");
}

id objc_msgSend_setDoubleValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDoubleValue:");
}

id objc_msgSend_setDutyCycleToPowerTable100ms_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDutyCycleToPowerTable100ms:");
}

id objc_msgSend_setDwellTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDwellTime:");
}

id objc_msgSend_setEAPProfile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEAPProfile:");
}

id objc_msgSend_setEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEnabled:");
}

id objc_msgSend_setEntry_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEntry:");
}

id objc_msgSend_setEpochAtAssoc_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEpochAtAssoc:");
}

id objc_msgSend_setErrorState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setErrorState:");
}

id objc_msgSend_setEstablishedLinkNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEstablishedLinkNetwork:");
}

id objc_msgSend_setEventHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEventHandler:");
}

id objc_msgSend_setExit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExit:");
}

id objc_msgSend_setFamilyName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFamilyName:");
}

id objc_msgSend_setFaultEventHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFaultEventHandler:");
}

id objc_msgSend_setFireDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFireDate:");
}

id objc_msgSend_setFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFlags:");
}

id objc_msgSend_setFloatValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFloatValue:");
}

id objc_msgSend_setForceBSSID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setForceBSSID:");
}

id objc_msgSend_setForgetNetworkEvent_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setForgetNetworkEvent:forInterface:");
}

id objc_msgSend_setFurtherServiceDiscoveryRequired_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFurtherServiceDiscoveryRequired:");
}

id objc_msgSend_setGameNotifyToken_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGameNotifyToken:");
}

id objc_msgSend_setGetCurrentPower_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGetCurrentPower:");
}

id objc_msgSend_setGivenName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGivenName:");
}

id objc_msgSend_setHTTPMaximumConnectionsPerHost_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHTTPMaximumConnectionsPerHost:");
}

id objc_msgSend_setHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHandler:");
}

id objc_msgSend_setHasAmbiguousSsid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasAmbiguousSsid:");
}

id objc_msgSend_setHasAppleIE_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasAppleIE:");
}

id objc_msgSend_setHasBeenFinalized_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasBeenFinalized:");
}

id objc_msgSend_setHasCustomNetworkSettings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasCustomNetworkSettings:");
}

id objc_msgSend_setHasDomainName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasDomainName:");
}

id objc_msgSend_setHasEnterpriseSecurity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasEnterpriseSecurity:");
}

id objc_msgSend_setHasInterworkingIE_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasInterworkingIE:");
}

id objc_msgSend_setHasNaiRealms_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasNaiRealms:");
}

id objc_msgSend_setHasNoMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasNoMap:");
}

id objc_msgSend_setHasRegisteredWithDaemon_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasRegisteredWithDaemon:");
}

id objc_msgSend_setHasRoamingOis_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasRoamingOis:");
}

id objc_msgSend_setHasWapi_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasWapi:");
}

id objc_msgSend_setHasWeakSecurity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasWeakSecurity:");
}

id objc_msgSend_setHasWep_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasWep:");
}

id objc_msgSend_setHasWpa3_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasWpa3:");
}

id objc_msgSend_setHasWpsIE_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasWpsIE:");
}

id objc_msgSend_setHiddenState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHiddenState:");
}

id objc_msgSend_setHistoricalScorecardAtAssoc_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHistoricalScorecardAtAssoc:");
}

id objc_msgSend_setHotspotUpdateNetworkcallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHotspotUpdateNetworkcallback:");
}

id objc_msgSend_setHour_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHour:");
}

id objc_msgSend_setIPv4NetworkSignature_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIPv4NetworkSignature:");
}

id objc_msgSend_setIPv6NetworkSignature_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIPv6NetworkSignature:");
}

id objc_msgSend_setIcon_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIcon:");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setIdsSendFailureCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsSendFailureCount:");
}

id objc_msgSend_setIfName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIfName:");
}

id objc_msgSend_setImsRegistrationStatusChangedHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setImsRegistrationStatusChangedHandler:");
}

id objc_msgSend_setIncludeHiddenNetworks_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIncludeHiddenNetworks:");
}

id objc_msgSend_setInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInfo:");
}

id objc_msgSend_setInitialSetupCompleted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInitialSetupCompleted:");
}

id objc_msgSend_setInstanceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstanceName:");
}

id objc_msgSend_setInt32Value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInt32Value:");
}

id objc_msgSend_setInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterface:");
}

id objc_msgSend_setInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterfaceName:");
}

id objc_msgSend_setInternalQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInternalQueue:");
}

id objc_msgSend_setInternalType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInternalType:");
}

id objc_msgSend_setInternetSharingConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInternetSharingConfiguration:");
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterruptionHandler:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setIpAddrAssigned_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIpAddrAssigned:");
}

id objc_msgSend_setIsAdhoc_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsAdhoc:");
}

id objc_msgSend_setIsAirplayActiveOverInfra_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsAirplayActiveOverInfra:");
}

id objc_msgSend_setIsAppBased_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsAppBased:");
}

id objc_msgSend_setIsAtNonPrimaryHMHome_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsAtNonPrimaryHMHome:");
}

id objc_msgSend_setIsAtPrimaryHMHome_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsAtPrimaryHMHome:");
}

id objc_msgSend_setIsAutoHotspot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsAutoHotspot:");
}

id objc_msgSend_setIsAutoJoined_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsAutoJoined:");
}

id objc_msgSend_setIsCarPlay_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsCarPlay:");
}

id objc_msgSend_setIsCarrierBased_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsCarrierBased:");
}

id objc_msgSend_setIsContinuous_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsContinuous:");
}

id objc_msgSend_setIsDeviceLocked_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsDeviceLocked:");
}

id objc_msgSend_setIsDisplayOn_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsDisplayOn:");
}

id objc_msgSend_setIsEdgeBSS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsEdgeBSS:");
}

id objc_msgSend_setIsFirstUserUnlocked_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsFirstUserUnlocked:");
}

id objc_msgSend_setIsHS2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsHS2:");
}

id objc_msgSend_setIsHidden_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsHidden:");
}

id objc_msgSend_setIsHome_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsHome:");
}

id objc_msgSend_setIsInGameMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsInGameMode:");
}

id objc_msgSend_setIsInstantHotspot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsInstantHotspot:");
}

id objc_msgSend_setIsInternal_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsInternal:");
}

id objc_msgSend_setIsKeychainUnlocked_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsKeychainUnlocked:");
}

id objc_msgSend_setIsKnown_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsKnown:");
}

id objc_msgSend_setIsManaged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsManaged:");
}

id objc_msgSend_setIsMediaPlaying_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsMediaPlaying:");
}

id objc_msgSend_setIsMetered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsMetered:");
}

id objc_msgSend_setIsMoving_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsMoving:");
}

id objc_msgSend_setIsNDDAllowed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsNDDAllowed:");
}

id objc_msgSend_setIsOpen_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsOpen:");
}

id objc_msgSend_setIsPasspoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsPasspoint:");
}

id objc_msgSend_setIsPersonalHotspot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsPersonalHotspot:");
}

id objc_msgSend_setIsPreferredButton_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsPreferredButton:");
}

id objc_msgSend_setIsPublic_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsPublic:");
}

id objc_msgSend_setIsRoamLateDueToDelta_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsRoamLateDueToDelta:");
}

id objc_msgSend_setIsStandalone6E_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsStandalone6E:");
}

id objc_msgSend_setIsUserModeInteractiveHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsUserModeInteractiveHandler:");
}

id objc_msgSend_setIsWaitingForIdsMessageDelivery_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsWaitingForIdsMessageDelivery:");
}

id objc_msgSend_setIsWaitingForIdsSendResponse_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsWaitingForIdsSendResponse:");
}

id objc_msgSend_setIsWalletBased_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsWalletBased:");
}

id objc_msgSend_setIsWidelyDeployed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsWidelyDeployed:");
}

id objc_msgSend_setIsWork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsWork:");
}

id objc_msgSend_setJoinCandidateComparator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setJoinCandidateComparator:");
}

id objc_msgSend_setJoinCandidates_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setJoinCandidates:");
}

id objc_msgSend_setJoinEvent_withReason_lastDisconnectReason_lastJoinFailure_andNetworkDetails_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setJoinEvent:withReason:lastDisconnectReason:lastJoinFailure:andNetworkDetails:forInterface:");
}

id objc_msgSend_setJoinFailureList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setJoinFailureList:");
}

id objc_msgSend_setJoinedNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setJoinedNetwork:");
}

id objc_msgSend_setKernelActivated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setKernelActivated:");
}

id objc_msgSend_setKnownNetworkComparator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setKnownNetworkComparator:");
}

id objc_msgSend_setKnownNetworkProfile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setKnownNetworkProfile:");
}

id objc_msgSend_setKnownNetworks_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setKnownNetworks:");
}

id objc_msgSend_setLastAssociatedAt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastAssociatedAt:");
}

id objc_msgSend_setLastBytesInSample_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastBytesInSample:");
}

id objc_msgSend_setLastBytesOutSample_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastBytesOutSample:");
}

id objc_msgSend_setLastDiscoveredAt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastDiscoveredAt:");
}

id objc_msgSend_setLastHostTriggeredRoamReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastHostTriggeredRoamReason:");
}

id objc_msgSend_setLastJoinDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastJoinDate:");
}

id objc_msgSend_setLastJoinedBySystemAt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastJoinedBySystemAt:");
}

id objc_msgSend_setLastJoinedBySystemAtWeek_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastJoinedBySystemAtWeek:");
}

id objc_msgSend_setLastJoinedByUserAt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastJoinedByUserAt:");
}

id objc_msgSend_setLastRecommendationLocation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastRecommendationLocation:");
}

id objc_msgSend_setLastRecommendedSSID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastRecommendedSSID:");
}

id objc_msgSend_setLastRoamAttemptTimestamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastRoamAttemptTimestamp:");
}

id objc_msgSend_setLastRoamStatusFailedNoCandidateTs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastRoamStatusFailedNoCandidateTs:");
}

id objc_msgSend_setLastRoamSuppressionRemovalTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastRoamSuppressionRemovalTime:");
}

id objc_msgSend_setLastSyncedCompanionAssistedAutoJoinData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastSyncedCompanionAssistedAutoJoinData:");
}

id objc_msgSend_setLastSyncedCompanionAssistedAutoJoinDataGUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastSyncedCompanionAssistedAutoJoinDataGUID:");
}

id objc_msgSend_setLastSyncedCompanionLocaleData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastSyncedCompanionLocaleData:");
}

id objc_msgSend_setLastSyncedCompanionLocaleGUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastSyncedCompanionLocaleGUID:");
}

id objc_msgSend_setLastSyncedKnownNetworkPayloadData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastSyncedKnownNetworkPayloadData:");
}

id objc_msgSend_setLastSyncedKnownNetworkPayloadDataGUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastSyncedKnownNetworkPayloadDataGUID:");
}

id objc_msgSend_setLastSyncedKnownNetworksData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastSyncedKnownNetworksData:");
}

id objc_msgSend_setLastSyncedKnownNetworksDataGUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastSyncedKnownNetworksDataGUID:");
}

id objc_msgSend_setLinkDown(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLinkDown");
}

id objc_msgSend_setLinkDown_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLinkDown:");
}

id objc_msgSend_setLinkEstablishedCallbackContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLinkEstablishedCallbackContext:");
}

id objc_msgSend_setLinkEvent_isInvoluntary_linkChangeReason_linkChangeSubreason_withNetworkDetails_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLinkEvent:isInvoluntary:linkChangeReason:linkChangeSubreason:withNetworkDetails:forInterface:");
}

id objc_msgSend_setLinkUpForNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLinkUpForNetwork:");
}

id objc_msgSend_setLinkUpTimestamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLinkUpTimestamp:");
}

id objc_msgSend_setLinkUpWithBSSEnvironment_band_roam_inCharging_motionState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLinkUpWithBSSEnvironment:band:roam:inCharging:motionState:");
}

id objc_msgSend_setLocaleSource_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocaleSource:");
}

id objc_msgSend_setLocaleTestParams_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocaleTestParams:");
}

id objc_msgSend_setLocation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocation:");
}

id objc_msgSend_setLockdownModeEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLockdownModeEnabled:");
}

id objc_msgSend_setLostNetworkScanCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLostNetworkScanCount:");
}

id objc_msgSend_setLowDataMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLowDataMode:");
}

id objc_msgSend_setLowDataModeEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLowDataModeEnabled:");
}

id objc_msgSend_setLqaMgr_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLqaMgr:");
}

id objc_msgSend_setMACAddress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMACAddress:");
}

id objc_msgSend_setManagedEventDispatchPort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setManagedEventDispatchPort:");
}

id objc_msgSend_setManagedEventNotifyToken_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setManagedEventNotifyToken:");
}

id objc_msgSend_setManager_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setManager:");
}

id objc_msgSend_setManagerQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setManagerQueue:");
}

id objc_msgSend_setManufacturerName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setManufacturerName:");
}

id objc_msgSend_setMaxCompatibilityEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxCompatibilityEnabled:");
}

id objc_msgSend_setMaxConcurrentOperationCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxConcurrentOperationCount:");
}

id objc_msgSend_setMaxRssiDeltaInRoamCache_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxRssiDeltaInRoamCache:");
}

id objc_msgSend_setMcConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMcConnection:");
}

id objc_msgSend_setMcInitialized_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMcInitialized:");
}

id objc_msgSend_setMeasurements_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMeasurements:");
}

id objc_msgSend_setMediaState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMediaState:");
}

id objc_msgSend_setMinRssiDeltaInRoamCache_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinRssiDeltaInRoamCache:");
}

id objc_msgSend_setMinute_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinute:");
}

id objc_msgSend_setMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMode:");
}

id objc_msgSend_setModelName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setModelName:");
}

id objc_msgSend_setModelNumber_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setModelNumber:");
}

id objc_msgSend_setModifyMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setModifyMap:");
}

id objc_msgSend_setMonitoredInterfaceNames_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMonitoredInterfaceNames:");
}

id objc_msgSend_setMonitoring_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMonitoring:");
}

id objc_msgSend_setMotionStartTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMotionStartTime:");
}

id objc_msgSend_setMotionState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMotionState:");
}

id objc_msgSend_setMotionStateChangeCb_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMotionStateChangeCb:");
}

id objc_msgSend_setMovingAttribute_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMovingAttribute:");
}

id objc_msgSend_setNAIRealmNameList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNAIRealmNameList:");
}

id objc_msgSend_setNANServiceID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNANServiceID:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNanAssocData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNanAssocData:");
}

id objc_msgSend_setNavigating_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNavigating:");
}

id objc_msgSend_setNavigationListener_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNavigationListener:");
}

id objc_msgSend_setNearbyShareableStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNearbyShareableStatus:");
}

id objc_msgSend_setNetworkAccessCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkAccessCode:");
}

id objc_msgSend_setNetworkDenyList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkDenyList:");
}

id objc_msgSend_setNetworkDenyListInfo_forScanResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkDenyListInfo:forScanResult:");
}

id objc_msgSend_setNetworkGroupID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkGroupID:");
}

id objc_msgSend_setNetworkGroupPriority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkGroupPriority:");
}

id objc_msgSend_setNetworkMatchingPrefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkMatchingPrefix:");
}

id objc_msgSend_setNetworkName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkName:");
}

id objc_msgSend_setNetworkOfInterest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkOfInterest:");
}

id objc_msgSend_setNetworkOriginator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkOriginator:");
}

id objc_msgSend_setNetworkProvider_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkProvider:");
}

id objc_msgSend_setNetworkRecord_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkRecord:");
}

id objc_msgSend_setNetworkScore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkScore:");
}

id objc_msgSend_setNetworkType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkType:");
}

id objc_msgSend_setNetworks_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworks:");
}

id objc_msgSend_setNotificationCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNotificationCallback:");
}

id objc_msgSend_setNumDaysSinceAssocOverrideDeferral_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNumDaysSinceAssocOverrideDeferral:");
}

id objc_msgSend_setNumberOfScans_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNumberOfScans:");
}

id objc_msgSend_setNumberOfValidMeasurements_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNumberOfValidMeasurements:");
}

id objc_msgSend_setOSSpecificAttributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOSSpecificAttributes:");
}

id objc_msgSend_setOSSpecificValue_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOSSpecificValue:forKey:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOverrideApplicationState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOverrideApplicationState:");
}

id objc_msgSend_setOverrideNetworkState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOverrideNetworkState:");
}

id objc_msgSend_setPHYMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPHYMode:");
}

id objc_msgSend_setPairedDeviceDestinationID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPairedDeviceDestinationID:");
}

id objc_msgSend_setPairedDeviceVersionID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPairedDeviceVersionID:");
}

id objc_msgSend_setParamMaxRoamRetriesInWindow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParamMaxRoamRetriesInWindow:");
}

id objc_msgSend_setParamMinRoamRetryWaitTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParamMinRoamRetryWaitTime:");
}

id objc_msgSend_setParamMinRoamWaitTimeFromLinkUpInSec_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParamMinRoamWaitTimeFromLinkUpInSec:");
}

id objc_msgSend_setParamWindowSizeInSec_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParamWindowSizeInSec:");
}

id objc_msgSend_setPassword_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPassword:");
}

id objc_msgSend_setPasswordForPHSOverNAN_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPasswordForPHSOverNAN:");
}

id objc_msgSend_setPasswordSharingDisabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPasswordSharingDisabled:");
}

id objc_msgSend_setPayloadUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPayloadUUID:");
}

id objc_msgSend_setPerformGASQueryHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPerformGASQueryHandler:");
}

id objc_msgSend_setPeriodicTasksLastRanAt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPeriodicTasksLastRanAt:");
}

id objc_msgSend_setPersonalHotspot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPersonalHotspot:");
}

id objc_msgSend_setPhyMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPhyMode:");
}

id objc_msgSend_setPowerBudget_andThermalIndex_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPowerBudget:andThermalIndex:forInterface:");
}

id objc_msgSend_setPowerBudgetUpdateMinimumPeriod_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPowerBudgetUpdateMinimumPeriod:");
}

id objc_msgSend_setPowerLevels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPowerLevels:");
}

id objc_msgSend_setPowerState_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPowerState:forInterface:");
}

id objc_msgSend_setPowerToDutyCycleTable100ms_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPowerToDutyCycleTable100ms:");
}

id objc_msgSend_setPreferredChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPreferredChannels:");
}

id objc_msgSend_setPreparedScanResults_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPreparedScanResults:");
}

id objc_msgSend_setPresentationStyle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPresentationStyle:");
}

id objc_msgSend_setPrivacyProxyBlockedReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrivacyProxyBlockedReason:");
}

id objc_msgSend_setPrivacyProxyEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrivacyProxyEnabled:");
}

id objc_msgSend_setPrivateMacDisabledByProfile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrivateMacDisabledByProfile:");
}

id objc_msgSend_setPrivateMacFeatureToggled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrivateMacFeatureToggled:");
}

id objc_msgSend_setPrivateMacType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrivateMacType:");
}

id objc_msgSend_setPrivateMacUnderClassification_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrivateMacUnderClassification:");
}

id objc_msgSend_setPrivateRelayBlockedReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrivateRelayBlockedReason:");
}

id objc_msgSend_setPrivateRelayEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrivateRelayEnabled:");
}

id objc_msgSend_setProfileIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProfileIdentifier:");
}

id objc_msgSend_setProminentScanResultsCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProminentScanResultsCount:");
}

id objc_msgSend_setPublicAirPlayNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPublicAirPlayNetwork:");
}

id objc_msgSend_setPublicAttribute_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPublicAttribute:");
}

id objc_msgSend_setPublisherMetricsCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPublisherMetricsCallback:");
}

id objc_msgSend_setQualityOfService_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setQualityOfService:");
}

id objc_msgSend_setQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setQueue:");
}

id objc_msgSend_setRSSI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRSSI:");
}

id objc_msgSend_setReSendIdsMessageBitMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReSendIdsMessageBitMap:");
}

id objc_msgSend_setRealtimeModeUpdatedHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRealtimeModeUpdatedHandler:");
}

id objc_msgSend_setReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReason:");
}

id objc_msgSend_setReasonData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReasonData:");
}

id objc_msgSend_setReceivedKnownNetworks_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReceivedKnownNetworks:");
}

id objc_msgSend_setRegistration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRegistration:");
}

id objc_msgSend_setRememberUponSuccessfulAssociation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRememberUponSuccessfulAssociation:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setRequestCachePolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequestCachePolicy:");
}

id objc_msgSend_setRequiresIdentity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequiresIdentity:");
}

id objc_msgSend_setRequiresOtp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequiresOtp:");
}

id objc_msgSend_setRequiresPassword_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequiresPassword:");
}

id objc_msgSend_setRequiresUsername_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequiresUsername:");
}

id objc_msgSend_setRetrySchedule_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRetrySchedule:");
}

id objc_msgSend_setRoamAttemptCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRoamAttemptCount:");
}

id objc_msgSend_setRoamEndState_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRoamEndState:forInterface:");
}

id objc_msgSend_setRoamParamsQueryPending_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRoamParamsQueryPending:");
}

id objc_msgSend_setRoamStart_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRoamStart:forInterface:");
}

id objc_msgSend_setRoamStatus_withBeaconCache_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRoamStatus:withBeaconCache:forInterface:");
}

id objc_msgSend_setRoamingARCriteria_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRoamingARCriteria:forInterface:");
}

id objc_msgSend_setRoamingConfiguration_withChannelList_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRoamingConfiguration:withChannelList:forInterface:");
}

id objc_msgSend_setRoamingConsortiumList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRoamingConsortiumList:");
}

id objc_msgSend_setRoamingState_withReason_asString_andStatus_asString_andLatency_andRoamData_andPingPongSequence_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRoamingState:withReason:asString:andStatus:asString:andLatency:andRoamData:andPingPongSequence:forInterface:");
}

id objc_msgSend_setRole_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRole:");
}

id objc_msgSend_setRoundTripTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRoundTripTime:");
}

id objc_msgSend_setRssiAverage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRssiAverage:");
}

id objc_msgSend_setRtTrafficAgent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRtTrafficAgent:");
}

id objc_msgSend_setRttAverageActiveSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRttAverageActiveSession:");
}

id objc_msgSend_setRttAverageAsPolledViaInstantaneousScorecard_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRttAverageAsPolledViaInstantaneousScorecard:");
}

id objc_msgSend_setRttAverageAtBeginActiveSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRttAverageAtBeginActiveSession:");
}

id objc_msgSend_setRttMinActiveSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRttMinActiveSession:");
}

id objc_msgSend_setRttMinAtBeginActiveSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRttMinAtBeginActiveSession:");
}

id objc_msgSend_setRttVarianceActiveSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRttVarianceActiveSession:");
}

id objc_msgSend_setRttVarianceAsPolledViaInstantaneousScorecard_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRttVarianceAsPolledViaInstantaneousScorecard:");
}

id objc_msgSend_setRttVarianceAtBeginActiveSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRttVarianceAtBeginActiveSession:");
}

id objc_msgSend_setRunningForegroundApps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRunningForegroundApps:");
}

id objc_msgSend_setRunningNetworkingApps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRunningNetworkingApps:");
}

id objc_msgSend_setSNR_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSNR:");
}

id objc_msgSend_setSSID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSSID:");
}

id objc_msgSend_setScanFailureList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setScanFailureList:");
}

id objc_msgSend_setScanFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setScanFlags:");
}

id objc_msgSend_setScanForNetworksHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setScanForNetworksHandler:");
}

id objc_msgSend_setScanFrequency_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setScanFrequency:");
}

id objc_msgSend_setScanResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setScanResult:");
}

id objc_msgSend_setScanResultsWithAutoJoinSessionCompletion_complete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setScanResultsWithAutoJoinSessionCompletion:complete:");
}

id objc_msgSend_setScanType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setScanType:");
}

id objc_msgSend_setScannedChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setScannedChannels:");
}

id objc_msgSend_setScanning_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setScanning:");
}

id objc_msgSend_setScanningState_client_neighborBSS_otherBSS_withChannelInfoList_withRequest_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setScanningState:client:neighborBSS:otherBSS:withChannelInfoList:withRequest:forInterface:");
}

id objc_msgSend_setSeamlessSSIDList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSeamlessSSIDList:");
}

id objc_msgSend_setSecond_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSecond:");
}

id objc_msgSend_setSecurityType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSecurityType:");
}

id objc_msgSend_setSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSelector:");
}

id objc_msgSend_setSendNDDRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSendNDDRequest:");
}

id objc_msgSend_setSendNDDXPCEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSendNDDXPCEvent:");
}

id objc_msgSend_setServiceProviderRoamingEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceProviderRoamingEnabled:");
}

id objc_msgSend_setServiceSpecificInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceSpecificInfo:");
}

id objc_msgSend_setSessionBased_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSessionBased:");
}

id objc_msgSend_setSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSet:");
}

id objc_msgSend_setSetupCompleted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSetupCompleted:");
}

id objc_msgSend_setShouldIgnoreDoNotDisturb_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setShouldIgnoreDoNotDisturb:");
}

id objc_msgSend_setShouldSuppressDefaultAction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setShouldSuppressDefaultAction:");
}

id objc_msgSend_setSmartCoverState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSmartCoverState:");
}

id objc_msgSend_setSnrAverage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSnrAverage:");
}

id objc_msgSend_setSoftAPChannelChangedEventHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSoftAPChannelChangedEventHandler:");
}

id objc_msgSend_setSoftApState_requester_status_changeReason_channelNumber_countryCode_isHidden_isInfraConnected_isAwdlUp_lowPowerModeDuration_compatibilityMode_requestToUpLatency_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSoftApState:requester:status:changeReason:channelNumber:countryCode:isHidden:isInfraConnected:isAwdlUp:lowPowerModeDuration:compatibilityMode:requestToUpLatency:");
}

id objc_msgSend_setSource_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSource:");
}

id objc_msgSend_setSpecificUseOnly_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSpecificUseOnly:");
}

id objc_msgSend_setSsidHarvestStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSsidHarvestStatus:");
}

id objc_msgSend_setStaArrivecallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStaArrivecallback:");
}

id objc_msgSend_setStaDatapathEstablishedcallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStaDatapathEstablishedcallback:");
}

id objc_msgSend_setStaDatapathTerminatedcallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStaDatapathTerminatedcallback:");
}

id objc_msgSend_setStaLeavecallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStaLeavecallback:");
}

id objc_msgSend_setStandalone6G_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStandalone6G:");
}

id objc_msgSend_setStandardDeviation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStandardDeviation:");
}

id objc_msgSend_setStartedAt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStartedAt:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setState:");
}

id objc_msgSend_setStateChangeCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStateChangeCallback:");
}

id objc_msgSend_setStateChangeContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStateChangeContext:");
}

id objc_msgSend_setStateFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStateFlags:");
}

id objc_msgSend_setStateUpdatedHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStateUpdatedHandler:");
}

id objc_msgSend_setStatisticsUpdatedHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStatisticsUpdatedHandler:");
}

id objc_msgSend_setStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStatus:");
}

id objc_msgSend_setSteeringRequest_preferredChannel_preferredBand_preferredSSID_targetSSIDDiffersFromCurrent_preferredBSS_ssidIsSplit_transitionCandidates_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSteeringRequest:preferredChannel:preferredBand:preferredSSID:targetSSIDDiffersFromCurrent:preferredBSS:ssidIsSplit:transitionCandidates:");
}

id objc_msgSend_setString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setString:");
}

id objc_msgSend_setStringValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStringValue:");
}

id objc_msgSend_setSubscriberCancelTimerCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSubscriberCancelTimerCallback:");
}

id objc_msgSend_setSubscriberMetricsCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSubscriberMetricsCallback:");
}

id objc_msgSend_setSupported2GHzChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSupported2GHzChannels:");
}

id objc_msgSend_setSupported5GHzChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSupported5GHzChannels:");
}

id objc_msgSend_setSupported6GHzChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSupported6GHzChannels:");
}

id objc_msgSend_setSupportedChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSupportedChannels:");
}

id objc_msgSend_setSupportedRequestTypes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSupportedRequestTypes:");
}

id objc_msgSend_setSupportedSecurityTypes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSupportedSecurityTypes:");
}

id objc_msgSend_setSwitchedAwayCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSwitchedAwayCount:");
}

id objc_msgSend_setSwitchedToCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSwitchedToCount:");
}

id objc_msgSend_setSymptomBackgroundFlowClassification_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSymptomBackgroundFlowClassification:");
}

id objc_msgSend_setSymptomBackgroundFlowProperties_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSymptomBackgroundFlowProperties:");
}

id objc_msgSend_setSymptomForegroundFlowClassification_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSymptomForegroundFlowClassification:");
}

id objc_msgSend_setSymptomForegroundFlowProperties_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSymptomForegroundFlowProperties:");
}

id objc_msgSend_setSystemWakeState_wokenByWiFi_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSystemWakeState:wokenByWiFi:");
}

id objc_msgSend_setTarget_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTarget:");
}

id objc_msgSend_setTargetNetworkProfile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTargetNetworkProfile:");
}

id objc_msgSend_setTargetQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTargetQueue:");
}

id objc_msgSend_setTargetQueue_requestType_interfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTargetQueue:requestType:interfaceName:");
}

id objc_msgSend_setTdLogic_alertedBy_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTdLogic_alertedBy:forInterface:");
}

id objc_msgSend_setTdLogic_badRssiThreshold_goodRssiThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTdLogic_badRssiThreshold:goodRssiThreshold:");
}

id objc_msgSend_setTdLogic_decisionState_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTdLogic_decisionState:forInterface:");
}

id objc_msgSend_setTdLogic_deferJoin_perBSSID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTdLogic_deferJoin:perBSSID:");
}

id objc_msgSend_setTdLogic_end_evalTime_rssi_roamTime_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTdLogic_end:evalTime:rssi:roamTime:forInterface:");
}

id objc_msgSend_setTdLogic_execState_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTdLogic_execState:forInterface:");
}

id objc_msgSend_setTdLogic_fastTdState_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTdLogic_fastTdState:forInterface:");
}

id objc_msgSend_setThreadCoexistenceEventHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setThreadCoexistenceEventHandler:");
}

id objc_msgSend_setTimeOfDay_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimeOfDay:");
}

id objc_msgSend_setTimeZone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimeZone:");
}

id objc_msgSend_setTimeout_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimeout:");
}

id objc_msgSend_setTimeoutIntervalForRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimeoutIntervalForRequest:");
}

id objc_msgSend_setTimeoutIntervalForResource_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimeoutIntervalForResource:");
}

id objc_msgSend_setTimestamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimestamp:");
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTitle:");
}

id objc_msgSend_setTotalJoinTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalJoinTime:");
}

id objc_msgSend_setTotalScanTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalScanTime:");
}

id objc_msgSend_setTrafficEng_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTrafficEng:");
}

id objc_msgSend_setTrafficRegistration_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTrafficRegistration:error:");
}

id objc_msgSend_setTraitsCacheUpdateBusy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTraitsCacheUpdateBusy:");
}

id objc_msgSend_setTransitionDisabledFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTransitionDisabledFlags:");
}

id objc_msgSend_setTrigger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTrigger:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setType:");
}

id objc_msgSend_setUint32Value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUint32Value:");
}

id objc_msgSend_setUint64Value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUint64Value:");
}

id objc_msgSend_setUpIDS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUpIDS");
}

id objc_msgSend_setUpdateKnownNetworkHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUpdateKnownNetworkHandler:");
}

id objc_msgSend_setUpdatedAt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUpdatedAt:");
}

id objc_msgSend_setUsageRank_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUsageRank:");
}

id objc_msgSend_setUsageRankForDeferral_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUsageRankForDeferral:");
}

id objc_msgSend_setUsbStatus_currentDevices_currentNoiseDelta_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUsbStatus:currentDevices:currentNoiseDelta:");
}

id objc_msgSend_setUserActivated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUserActivated:");
}

id objc_msgSend_setUserInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUserInfo:");
}

id objc_msgSend_setUserPreferredNetworkNames_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUserPreferredNetworkNames:");
}

id objc_msgSend_setUserPreferredPasspointDomains_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUserPreferredPasspointDomains:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setVenueCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVenueCode:");
}

id objc_msgSend_setVenueGroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVenueGroup:");
}

id objc_msgSend_setVirtualInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVirtualInterface:");
}

id objc_msgSend_setVisibleRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVisibleRequest:");
}

id objc_msgSend_setVoluntary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVoluntary:");
}

id objc_msgSend_setWAPISubtype_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWAPISubtype:");
}

id objc_msgSend_setWEPSubtype_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWEPSubtype:");
}

id objc_msgSend_setWaitForReAssociationTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWaitForReAssociationTimer:");
}

id objc_msgSend_setWantsNotificationResponsesDelivered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWantsNotificationResponsesDelivered");
}

id objc_msgSend_setWantsPeerRSSIUpdates_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWantsPeerRSSIUpdates:withCompletionHandler:");
}

id objc_msgSend_setWas6GHzOnlyAt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWas6GHzOnlyAt:");
}

id objc_msgSend_setWas6GHzOnlyAtWeek_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWas6GHzOnlyAtWeek:");
}

id objc_msgSend_setWasCaptive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWasCaptive:");
}

id objc_msgSend_setWiFiManager_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWiFiManager:");
}

id objc_msgSend_setWiFiManagerQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWiFiManagerQueue:");
}

id objc_msgSend_setWifiCallInProgress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiCallInProgress:");
}

id objc_msgSend_setWifiDevicePowerLevels100ms_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiDevicePowerLevels100ms:");
}

id objc_msgSend_setWifiIfTotalBytes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiIfTotalBytes:");
}

id objc_msgSend_setWifiIfTotalInputBytes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiIfTotalInputBytes:");
}

id objc_msgSend_setWifiIfTotalInputPackets_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiIfTotalInputPackets:");
}

id objc_msgSend_setWifiIfTotalOutputBytes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiIfTotalOutputBytes:");
}

id objc_msgSend_setWifiIfTotalOutputPackets_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiIfTotalOutputPackets:");
}

id objc_msgSend_setWifiIfTotalPackets_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiIfTotalPackets:");
}

id objc_msgSend_setWifiL3MBPS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiL3MBPS:");
}

id objc_msgSend_setWifiL3PPS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiL3PPS:");
}

id objc_msgSend_setWifiManager_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiManager:");
}

id objc_msgSend_setWindowTimestamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWindowTimestamp:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithCapacity:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setWithSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithSet:");
}

id objc_msgSend_set_eventHandlers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "set_eventHandlers:");
}

id objc_msgSend_set_homeManager_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "set_homeManager:");
}

id objc_msgSend_set_lastTriggeredTTR_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "set_lastTriggeredTTR:");
}

id objc_msgSend_set_softError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "set_softError:");
}

id objc_msgSend_settledDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "settledDate");
}

id objc_msgSend_setupCompleted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupCompleted");
}

id objc_msgSend_setupDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupDevice:");
}

id objc_msgSend_setupDrivingEndedAlarm(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupDrivingEndedAlarm");
}

id objc_msgSend_setupDrivingStartedAlarm(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupDrivingStartedAlarm");
}

id objc_msgSend_setupWalkingEndedAlarm(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupWalkingEndedAlarm");
}

id objc_msgSend_setupWalkingStartedAlarm(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupWalkingStartedAlarm");
}

id objc_msgSend_shared(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shared");
}

id objc_msgSend_sharedAVSystemController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedAVSystemController");
}

id objc_msgSend_sharedAnalyticsProcessor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedAnalyticsProcessor");
}

id objc_msgSend_sharedCPMSAgent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedCPMSAgent");
}

id objc_msgSend_sharedClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedClient");
}

id objc_msgSend_sharedClientWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedClientWithIdentifier:");
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedConnection");
}

id objc_msgSend_sharedDeviceAnalyticsClientWithPersist(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedDeviceAnalyticsClientWithPersist");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_sharedInstanceWithClientRepresentation_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedInstanceWithClientRepresentation:error:");
}

id objc_msgSend_sharedWiFi3BarsObserver(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedWiFi3BarsObserver");
}

id objc_msgSend_sharedWiFiAccountStoreManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedWiFiAccountStoreManager");
}

id objc_msgSend_sharedWiFiAnalyticsManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedWiFiAnalyticsManager");
}

id objc_msgSend_sharedWiFiAppStateManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedWiFiAppStateManager");
}

id objc_msgSend_sharedWiFiDriverTriggeredTTRManagerwithStringRef_withInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedWiFiDriverTriggeredTTRManagerwithStringRef:withInterval:");
}

id objc_msgSend_sharedWiFiLOIManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedWiFiLOIManager");
}

id objc_msgSend_sharedWiFiLocationManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedWiFiLocationManager");
}

id objc_msgSend_sharedWiFiMaintenanceTaskManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedWiFiMaintenanceTaskManager");
}

id objc_msgSend_sharedWiFiNOIManagerWithQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedWiFiNOIManagerWithQueue:");
}

id objc_msgSend_sharedWiFiRoamManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedWiFiRoamManager");
}

id objc_msgSend_sharedXPCManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedXPCManager");
}

id objc_msgSend_shortSSID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shortSSID");
}

id objc_msgSend_shouldSupressErrorReporting_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldSupressErrorReporting:");
}

id objc_msgSend_shouldTimeOutRecommendation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldTimeOutRecommendation");
}

id objc_msgSend_signalStrength(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signalStrength");
}

id objc_msgSend_skipSyncForNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "skipSyncForNetwork:");
}

id objc_msgSend_snrAverage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "snrAverage");
}

id objc_msgSend_softErrorTypeIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "softErrorTypeIndex:");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_sortedArrayUsingDescriptors_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortedArrayUsingDescriptors:");
}

id objc_msgSend_sortedArrayUsingSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortedArrayUsingSelector:");
}

id objc_msgSend_source(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "source");
}

id objc_msgSend_ssid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ssid");
}

id objc_msgSend_ssidHarvestStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ssidHarvestStatus");
}

id objc_msgSend_staArrivecallback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "staArrivecallback");
}

id objc_msgSend_staDatapathEstablishedcallback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "staDatapathEstablishedcallback");
}

id objc_msgSend_staDatapathTerminatedcallback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "staDatapathTerminatedcallback");
}

id objc_msgSend_staLeavecallback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "staLeavecallback");
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "standardUserDefaults");
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "start");
}

id objc_msgSend_start_withCompletionQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "start:withCompletionQueue:");
}

id objc_msgSend_startActivityUpdatesToQueue_withHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startActivityUpdatesToQueue:withHandler:");
}

id objc_msgSend_startBrowsing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startBrowsing");
}

id objc_msgSend_startDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startDate");
}

id objc_msgSend_startListening(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startListening");
}

id objc_msgSend_startMonitoring(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startMonitoring");
}

id objc_msgSend_startMonitoringAVSystem(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startMonitoringAVSystem");
}

id objc_msgSend_startMonitoringBundleId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startMonitoringBundleId:");
}

id objc_msgSend_startMonitoringInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startMonitoringInterface:");
}

id objc_msgSend_startMonitoringMotionState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startMonitoringMotionState");
}

id objc_msgSend_startMonitoringWiFiInterface_withLinkSessionOnly_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startMonitoringWiFiInterface:withLinkSessionOnly:");
}

id objc_msgSend_startOfDayForDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startOfDayForDate:");
}

id objc_msgSend_startPublisherForPHSOverNAN(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startPublisherForPHSOverNAN");
}

id objc_msgSend_startRequestWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startRequestWithCompletionHandler:");
}

id objc_msgSend_startServiceDiscoveryWithConfiguration_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startServiceDiscoveryWithConfiguration:completionHandler:");
}

id objc_msgSend_startedAt(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startedAt");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "state");
}

id objc_msgSend_stateChangeCallback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stateChangeCallback");
}

id objc_msgSend_stateChangeContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stateChangeContext");
}

id objc_msgSend_stateFlags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stateFlags");
}

id objc_msgSend_stateUpdatedCallback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stateUpdatedCallback");
}

id objc_msgSend_stationary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stationary");
}

id objc_msgSend_statistics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "statistics");
}

id objc_msgSend_statsDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "statsDictionary");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "status");
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stop");
}

id objc_msgSend_stopActivityUpdates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopActivityUpdates");
}

id objc_msgSend_stopBrowsing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopBrowsing");
}

id objc_msgSend_stopMonitoring(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopMonitoring");
}

id objc_msgSend_stopMonitoringAVSystem(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopMonitoringAVSystem");
}

id objc_msgSend_stopMonitoringCarSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopMonitoringCarSession");
}

id objc_msgSend_stopMonitoringMotionState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopMonitoringMotionState");
}

id objc_msgSend_stopOnQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopOnQueue:");
}

id objc_msgSend_stopPublisherForPHSOverNAN(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopPublisherForPHSOverNAN");
}

id objc_msgSend_stopServiceDiscoveryWithConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopServiceDiscoveryWithConfiguration:");
}

id objc_msgSend_stopSubscriberForPHSOverNAN(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopSubscriberForPHSOverNAN");
}

id objc_msgSend_stopTrackingNOIs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopTrackingNOIs:");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "string");
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByAppendingPathComponent:");
}

id objc_msgSend_stringByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByAppendingPathExtension:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByDeletingLastPathComponent");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringForKey:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringRepresentationWithHostReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringRepresentationWithHostReason:");
}

id objc_msgSend_stringRepresentationWithReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringRepresentationWithReason:");
}

id objc_msgSend_stringRepresentationWithStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringRepresentationWithStatus:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringValue");
}

id objc_msgSend_stringWithCString_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithCString:encoding:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithString:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_subMessageValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subMessageValue");
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_submitABCReportWithReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitABCReportWithReason:");
}

id objc_msgSend_submitGeoServicesMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitGeoServicesMessage:");
}

id objc_msgSend_submitMessage_groupType_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitMessage:groupType:andReply:");
}

id objc_msgSend_submitMetric(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitMetric");
}

id objc_msgSend_submitWiFiAnalyticsMessageAdvanced_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitWiFiAnalyticsMessageAdvanced:");
}

id objc_msgSend_subscribeToKeychainChanges(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subscribeToKeychainChanges");
}

id objc_msgSend_subscriberCancelTimerCallback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subscriberCancelTimerCallback");
}

id objc_msgSend_subscriberCancelTimerCallbackContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subscriberCancelTimerCallbackContext");
}

id objc_msgSend_subscriberMetricsCallback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subscriberMetricsCallback");
}

id objc_msgSend_subscriberMetricsCallbackContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subscriberMetricsCallbackContext");
}

id objc_msgSend_subscriber_ifindex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subscriber_ifindex");
}

id objc_msgSend_substate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "substate");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_summaryForInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "summaryForInterface:");
}

id objc_msgSend_supported2GHzChannels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supported2GHzChannels");
}

id objc_msgSend_supported5GHzChannels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supported5GHzChannels");
}

id objc_msgSend_supported6GHzChannels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supported6GHzChannels");
}

id objc_msgSend_supportedChannelsWithCountryCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportedChannelsWithCountryCode:");
}

id objc_msgSend_supportedOSSpecificKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportedOSSpecificKeys");
}

id objc_msgSend_supportedSecurityTypes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportedSecurityTypes");
}

id objc_msgSend_supressEventDetectionProcesssing_deviceContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supressEventDetectionProcesssing:deviceContext:");
}

id objc_msgSend_supressSoftErrorMitigation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supressSoftErrorMitigation:");
}

id objc_msgSend_supressTapToRadar_deviceContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supressTapToRadar:deviceContext:");
}

id objc_msgSend_suspendAWDLWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suspendAWDLWithError:");
}

id objc_msgSend_symptomBackgroundFlowClassification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "symptomBackgroundFlowClassification");
}

id objc_msgSend_symptomBackgroundFlowProperties(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "symptomBackgroundFlowProperties");
}

id objc_msgSend_symptomForegroundFlowClassification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "symptomForegroundFlowClassification");
}

id objc_msgSend_symptomForegroundFlowProperties(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "symptomForegroundFlowProperties");
}

id objc_msgSend_symptomsNetworkHistoryFeed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "symptomsNetworkHistoryFeed");
}

id objc_msgSend_syncKnownWiFiNetwork_withOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "syncKnownWiFiNetwork:withOperation:");
}

id objc_msgSend_syncKnownWiFiNetworks_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "syncKnownWiFiNetworks:");
}

id objc_msgSend_syncMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "syncMode");
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "synchronize");
}

id objc_msgSend_syncingEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "syncingEnabled");
}

id objc_msgSend_systemTimeZone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "systemTimeZone");
}

id objc_msgSend_systemUptime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "systemUptime");
}

id objc_msgSend_tapToRadarWithURL_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tapToRadarWithURL:completionHandler:");
}

id objc_msgSend_terminateDataSession_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "terminateDataSession:completionHandler:");
}

id objc_msgSend_terminateNetworkReliabilityEvaluation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "terminateNetworkReliabilityEvaluation");
}

id objc_msgSend_terminateRequest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "terminateRequest");
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSince1970");
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceNow");
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceReferenceDate");
}

id objc_msgSend_timeOfDay(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeOfDay");
}

id objc_msgSend_timeSinceFirstDeferral_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeSinceFirstDeferral:");
}

id objc_msgSend_timeout(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeout");
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timestamp");
}

id objc_msgSend_toHEXString_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "toHEXString:length:");
}

id objc_msgSend_topRecommendableNetwork(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "topRecommendableNetwork");
}

id objc_msgSend_totalJoinTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalJoinTime");
}

id objc_msgSend_totalScanTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalScanTime");
}

id objc_msgSend_trafficEng(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trafficEng");
}

id objc_msgSend_traitsCacheUpdateBusy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "traitsCacheUpdateBusy");
}

id objc_msgSend_transitionDisabledFlags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transitionDisabledFlags");
}

id objc_msgSend_trapCrashMiniTracerDumpReadyForInterfaceWithName_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trapCrashMiniTracerDumpReadyForInterfaceWithName:andReply:");
}

id objc_msgSend_trigger(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trigger");
}

id objc_msgSend_triggerDatapathDiagnosticsAndCollectUpdates_waMessage_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggerDatapathDiagnosticsAndCollectUpdates:waMessage:andReply:");
}

id objc_msgSend_triggerDatapathDiagnosticsNoReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggerDatapathDiagnosticsNoReply:");
}

id objc_msgSend_triggerDeviceAnalyticsStoreMigrationAndReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggerDeviceAnalyticsStoreMigrationAndReply:");
}

id objc_msgSend_triggerDeviceAnalyticsStoreMigrationWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggerDeviceAnalyticsStoreMigrationWithCompletion:");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "type");
}

id objc_msgSend_typePrettyPrint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "typePrettyPrint");
}

id objc_msgSend_uint32Value(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uint32Value");
}

id objc_msgSend_uint64Value(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uint64Value");
}

id objc_msgSend_unSchedule3BarsObserver(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unSchedule3BarsObserver");
}

id objc_msgSend_unScheduleHistoricNetworkPerformanceFeedSync(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unScheduleHistoricNetworkPerformanceFeedSync");
}

id objc_msgSend_unScheduleOrphanedSetsCleanUp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unScheduleOrphanedSetsCleanUp");
}

id objc_msgSend_unSchedulePNLMigration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unSchedulePNLMigration");
}

id objc_msgSend_unScheduleWCADownloadObserver(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unScheduleWCADownloadObserver");
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unarchivedObjectOfClass:fromData:error:");
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_uninstallMegaWiFiProfile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uninstallMegaWiFiProfile");
}

id objc_msgSend_uniqueIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uniqueIdentifier");
}

id objc_msgSend_unregisterStateChangeCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterStateChangeCallback:");
}

id objc_msgSend_unscheduleFromQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unscheduleFromQueue:");
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedIntValue");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedLongLongValue");
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedLongValue");
}

id objc_msgSend_unwantedNetworkName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unwantedNetworkName");
}

id objc_msgSend_update80211dCountryCodes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "update80211dCountryCodes:");
}

id objc_msgSend_updateBeaconCache_afterRoamAttempt_whileCurrentBSSID_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateBeaconCache:afterRoamAttempt:whileCurrentBSSID:forInterface:");
}

id objc_msgSend_updateBeaconInfo_andParsedIE_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateBeaconInfo:andParsedIE:forInterface:");
}

id objc_msgSend_updateBssidGuessingDictForBssid_guessingFailureCountDict_forNetworkSsid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateBssidGuessingDictForBssid:guessingFailureCountDict:forNetworkSsid:");
}

id objc_msgSend_updateConnectionState_waitUntilDone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateConnectionState:waitUntilDone:");
}

id objc_msgSend_updateCurrentNetworkDetails_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateCurrentNetworkDetails:");
}

id objc_msgSend_updateGuessedNetworkCredentials_password_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateGuessedNetworkCredentials:password:");
}

id objc_msgSend_updateIsAirplayActiveOverInfra_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateIsAirplayActiveOverInfra:");
}

id objc_msgSend_updateIsBSPActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateIsBSPActive:");
}

id objc_msgSend_updateIsCarPlay_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateIsCarPlay:");
}

id objc_msgSend_updateIsMediaPlaying_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateIsMediaPlaying:");
}

id objc_msgSend_updateKnownNetworksSupportingSeamless_forBSS_andSSID_beaconCache_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateKnownNetworksSupportingSeamless:forBSS:andSSID:beaconCache:");
}

id objc_msgSend_updateLTERestrictedChannels_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateLTERestrictedChannels:error:");
}

id objc_msgSend_updateLinkQuality_forInterface_supportsLinkRecommendations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateLinkQuality:forInterface:supportsLinkRecommendations:");
}

id objc_msgSend_updateLinkTestInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateLinkTestInterval:");
}

id objc_msgSend_updateNetworkAgent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateNetworkAgent:");
}

id objc_msgSend_updateNetworkTraitsCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateNetworkTraitsCache");
}

id objc_msgSend_updateNetworksWithHotspots_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateNetworksWithHotspots:");
}

id objc_msgSend_updateOverrideNetworkState_overrideValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateOverrideNetworkState:overrideValue:");
}

id objc_msgSend_updateRealTimeCoex_type_reasons_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateRealTimeCoex:type:reasons:");
}

id objc_msgSend_updateReportingPreference(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateReportingPreference");
}

id objc_msgSend_updateRoamCache_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateRoamCache:forInterface:");
}

id objc_msgSend_updateWPSInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWPSInfo:");
}

id objc_msgSend_updateWithBspOverflowed_IsBSPActive_BspTimeToTST_BspSampleDurationMS_IsScanActiveBSP_IsP2PActiveBSP_BspTriggerCount_BspMutePercentage_BspMaxMuteMS_BspAvgMuteMS_BspErrorPercentage_BspTimeOutPercentageOfTriggers_BspRejectOrFailPercentageOfTriggers_bspMaxConsecutiveFails_supportsLinkRecommendation_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWithBspOverflowed:IsBSPActive:BspTimeToTST:BspSampleDurationMS:IsScanActiveBSP:IsP2PActiveBSP:BspTriggerCount:BspMutePercentage:BspMaxMuteMS:BspAvgMuteMS:BspErrorPercentage:BspTimeOutPercentageOfTriggers:BspRejectOrFailPercentageOfTriggers:bspMaxConsecutiveFails:supportsLinkRecommendation:forInterface:");
}

id objc_msgSend_updateWithChQualScore_txLatencyScore_rxLatencyScore_txLossScore_rxLossScore_txLatencyP95_linkRecommendationFlags_rtTrafficStatus_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWithChQualScore:txLatencyScore:rxLatencyScore:txLossScore:rxLossScore:txLatencyP95:linkRecommendationFlags:rtTrafficStatus:forInterface:");
}

id objc_msgSend_updateWithCompatibilityMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWithCompatibilityMode:");
}

id objc_msgSend_updateWithMLORuntimeConfig_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWithMLORuntimeConfig:forInterface:");
}

id objc_msgSend_updateWithRoamingSuppression_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWithRoamingSuppression:");
}

id objc_msgSend_updateWowState_lpasState_lowPowerState_batterySaverState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWowState:lpasState:lowPowerState:batterySaverState:");
}

id objc_msgSend_updatedAt(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updatedAt");
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uppercaseString");
}

id objc_msgSend_usageCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "usageCache");
}

id objc_msgSend_usageRankForDeferral(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "usageRankForDeferral");
}

id objc_msgSend_useCoreRotation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "useCoreRotation");
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userInfo");
}

id objc_msgSend_userNotificationCenter_didReceiveNotificationResponse_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:");
}

id objc_msgSend_userNotificationCenterWiFi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userNotificationCenterWiFi");
}

id objc_msgSend_userPreferredNetworkNames(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userPreferredNetworkNames");
}

id objc_msgSend_userPreferredPasspointDomains(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userPreferredPasspointDomains");
}

id objc_msgSend_userSettingsKVS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userSettingsKVS");
}

id objc_msgSend_usingPrefix(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "usingPrefix");
}

id objc_msgSend_utilityConcurrent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "utilityConcurrent");
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForEntitlement:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_vehicleHardwareVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "vehicleHardwareVersion");
}

id objc_msgSend_vehicleManufacturer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "vehicleManufacturer");
}

id objc_msgSend_vehicleModelName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "vehicleModelName");
}

id objc_msgSend_virtualInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "virtualInterface");
}

id objc_msgSend_virtualInterfaceRole(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "virtualInterfaceRole");
}

id objc_msgSend_visibleRequest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "visibleRequest");
}

id objc_msgSend_waClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waClient");
}

id objc_msgSend_waDiscoveryResult(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waDiscoveryResult");
}

id objc_msgSend_waitForConfirmationWithTimeout_withBssEnvironment_withMgrCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitForConfirmationWithTimeout:withBssEnvironment:withMgrCallback:");
}

id objc_msgSend_waitForNetworkToBeReliableWithTimeout_withTimeout_withMgrCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitForNetworkToBeReliableWithTimeout:withTimeout:withMgrCallback:");
}

id objc_msgSend_waitForReAssociationTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitForReAssociationTimer");
}

id objc_msgSend_walking(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "walking");
}

id objc_msgSend_walkingEndedAlarmTriggerDuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "walkingEndedAlarmTriggerDuration");
}

id objc_msgSend_walkingStartedAlarmTriggerDuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "walkingStartedAlarmTriggerDuration");
}

id objc_msgSend_wapCfg(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wapCfg");
}

id objc_msgSend_was6GHzOnlyAtWeek(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "was6GHzOnlyAtWeek");
}

id objc_msgSend_wasAlreadyAssociated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wasAlreadyAssociated");
}

id objc_msgSend_wasCaptive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wasCaptive");
}

id objc_msgSend_wasRecently6GHzOnlyOnAnyDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wasRecently6GHzOnlyOnAnyDevice");
}

id objc_msgSend_whitespaceCharacterSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "whitespaceCharacterSet");
}

id objc_msgSend_width(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "width");
}

id objc_msgSend_wifiCPMSHandle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiCPMSHandle");
}

id objc_msgSend_wifiCallInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiCallInProgress");
}

id objc_msgSend_wifiDevicePowerLevels100ms(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiDevicePowerLevels100ms");
}

id objc_msgSend_wifiDisplayName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiDisplayName");
}

id objc_msgSend_wifiIfTotalBytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiIfTotalBytes");
}

id objc_msgSend_wifiIfTotalInputBytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiIfTotalInputBytes");
}

id objc_msgSend_wifiIfTotalInputPackets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiIfTotalInputPackets");
}

id objc_msgSend_wifiIfTotalOutputBytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiIfTotalOutputBytes");
}

id objc_msgSend_wifiIfTotalOutputPackets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiIfTotalOutputPackets");
}

id objc_msgSend_wifiIfTotalPackets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiIfTotalPackets");
}

id objc_msgSend_wifiL3MBPS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiL3MBPS");
}

id objc_msgSend_wifiL3PPS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiL3PPS");
}

id objc_msgSend_wifiManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiManager");
}

id objc_msgSend_wifiNetworkShouldBeProminentlyDisplayed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiNetworkShouldBeProminentlyDisplayed:");
}

id objc_msgSend_wifiPPASerialQ(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiPPASerialQ");
}

id objc_msgSend_wifiSoftErrorAwdlEventNotificationHandler_eventData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiSoftErrorAwdlEventNotificationHandler:eventData:");
}

id objc_msgSend_wifiSoftErrorCounterUpdate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiSoftErrorCounterUpdate:");
}

id objc_msgSend_wifiSoftErrorEventHandler_eventType_eventData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiSoftErrorEventHandler:eventType:eventData:");
}

id objc_msgSend_wifiSoftErrorMitigation_mitigationContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiSoftErrorMitigation:mitigationContext:");
}

id objc_msgSend_wifiSoftErrorRxDataStallEventHandler_eventData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiSoftErrorRxDataStallEventHandler:eventData:");
}

id objc_msgSend_wifiSoftErrorSlowWiFiEventHandler_eventData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiSoftErrorSlowWiFiEventHandler:eventData:");
}

id objc_msgSend_wifiSoftErrorTxDataStallEventHandler_eventData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiSoftErrorTxDataStallEventHandler:eventData:");
}

id objc_msgSend_wifiSoftErrorTxDataStallProcessHistory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiSoftErrorTxDataStallProcessHistory:");
}

id objc_msgSend_wifiSoftErrorUnexpectedClientAssertionHandler_eventData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiSoftErrorUnexpectedClientAssertionHandler:eventData:");
}

id objc_msgSend_wifiSoftErrorUserConfirmationFlagSetting_forError_withDeviceContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiSoftErrorUserConfirmationFlagSetting:forError:withDeviceContext:");
}

id objc_msgSend_wifiSoftErrorUserConfirmationUpdate_withDeviceContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiSoftErrorUserConfirmationUpdate:withDeviceContext:");
}

id objc_msgSend_wifiSoftErrorWiFiAutoJoinEventHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiSoftErrorWiFiAutoJoinEventHandler:");
}

id objc_msgSend_wifiSoftErrorWiFiScanEventHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiSoftErrorWiFiScanEventHandler:");
}

id objc_msgSend_wifiSoftErrorWiFiToggleEventHandler_deviceContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiSoftErrorWiFiToggleEventHandler:deviceContext:");
}

id objc_msgSend_wifiSoftErrorWiFiTriggerDisconnectEventHandler_eventData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiSoftErrorWiFiTriggerDisconnectEventHandler:eventData:");
}

id objc_msgSend_wifiSoftErrorsInProcessStateSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiSoftErrorsInProcessStateSet:");
}

id objc_msgSend_wifiSoftErrorsInProcessStateUnset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiSoftErrorsInProcessStateUnset:");
}

id objc_msgSend_willAssociateWithNetwork_isAutoJoin_interfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "willAssociateWithNetwork:isAutoJoin:interfaceName:");
}

id objc_msgSend_windowTimestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "windowTimestamp");
}

id objc_msgSend_wowDenyListExpiry(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wowDenyListExpiry");
}

id objc_msgSend_writeData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeData:");
}

id objc_msgSend_writeToFile_atomically_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToFile:atomically:");
}

id objc_msgSend_writeToURL_atomically_encoding_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToURL:atomically:encoding:error:");
}
