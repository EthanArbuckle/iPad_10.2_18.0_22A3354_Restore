void sub_100004FD4()
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("Received locationd bandstatus notifcation callback"));
  sub_100009020();
}

void sub_100005714(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
        goto LABEL_7;
      }
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
LABEL_7:
        sub_1000184EC(v5, (_BYTE *)(v5 + 120), a2);
    }
  }
}

void sub_100005844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000058F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100006224(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 512))
  {
    v2 = WiFiDeviceClientCopyCurrentNetwork();
    if (v2)
    {
      v3 = (const void *)v2;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = WiFiNetworkIsCaptive() != 0;
      CFRelease(v3);
    }
  }
}

id sub_100007038(uint64_t a1)
{
  id v2;
  id result;
  BOOL v4;
  uint64_t v5;
  _BOOL8 v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;

  v2 = +[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton](WRM_EnhancedCTService, "wrm_EnhancedCTServiceSingleton");
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 26, CFSTR("toggleSAState:mCallOnWiFi %d, mCallKitCallActive:%d,exitSaDepriotizationEval:%d"), byte_10027100D, byte_100270FF9, objc_msgSend(v2, "exitSaDepriotizationEval"));
  result = objc_msgSend(v2, "exitSaDepriotizationEval");
  if ((_DWORD)result)
    v4 = byte_10027100D == 0;
  else
    v4 = 0;
  if ((!v4 || !*(_BYTE *)(a1 + 40)) && (byte_10027100D || !byte_100270FF9))
  {
    if (objc_msgSend(v2, "isWiFiCallingSupportedAnySlot"))
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 26, CFSTR("toggleSAState: isWiFiCallingSupportedAnySlot true"));
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 26, CFSTR("evaluate toggleSAState: prev SA state disabled %d, wifiState: %d"), byte_100270DE8, *(unsigned __int8 *)(a1 + 40));
      v5 = *(unsigned __int8 *)(a1 + 40);
      v6 = *(_BYTE *)(a1 + 40) != 0;
    }
    else
    {
      v6 = 0;
      v5 = 0;
    }
    v7 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "isWiFiCallingSupportedSlot1");
    if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "isWiFiCallingSupportedSlot2"))
      v8 = 2;
    else
      v8 = 0;
    v9 = v8 | v7;
    if ((_DWORD)v5 != byte_100270DE8 || (v10 = v9, (_DWORD)v9 != byte_100270DE9))
    {
      objc_msgSend(*(id *)(a1 + 32), "setBBSAState:", v6);
      byte_100270DE8 = v5;
      v10 = byte_100270DE9;
    }
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 26, CFSTR("evaluate toggleSAState: current SA disabled %d, prev mSAMask %d, current saMask %d"), v5, v10, v9);
  }
  return result;
}

void sub_100007DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_100007FD0(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v13;

  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cellularController"), "updateWCI2CoexPolicy:", objc_msgSend(*(id *)(a1 + 32), "cellularWCI2CoexPolicyBitmap"));
  objc_msgSend(*(id *)(a1 + 32), "configureWifiAntennaSelectionForCoex");
  objc_msgSend(*(id *)(a1 + 32), "updateCellTxPowerLimit");
  v2 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeCoexFeatures"), "containsObject:", CFSTR("BTDiversityAFHMap"));
  v3 = objc_msgSend(*(id *)(a1 + 32), "gpsRadioActive");
  v4 = *(void **)(a1 + 32);
  if (v2)
  {
    v5 = objc_msgSend(v4, "btController");
    v6 = *(void **)(a1 + 32);
    if (v3)
    {
      v7 = objc_msgSend(v6, "btDiversityChannelMapOnGpsRadioActiveForC0B0");
      v8 = objc_msgSend(*(id *)(a1 + 32), "btDiversityChannelMapOnGpsRadioActiveForC0B1");
      v9 = objc_msgSend(*(id *)(a1 + 32), "btDiversityChannelMapOnGpsRadioActiveForC1B0");
      v10 = objc_msgSend(*(id *)(a1 + 32), "btDiversityChannelMapOnGpsRadioActiveForC1B1");
    }
    else
    {
      v7 = objc_msgSend(v6, "btDiversityChannelMapForC0B0");
      v8 = objc_msgSend(*(id *)(a1 + 32), "btDiversityChannelMapForC0B1");
      v9 = objc_msgSend(*(id *)(a1 + 32), "btDiversityChannelMapForC1B0");
      v10 = objc_msgSend(*(id *)(a1 + 32), "btDiversityChannelMapForC1B1");
    }
    return objc_msgSend(v5, "updateDiversityAFHMapForC0B0:C0B1:C1B0:C1B1:", v7, v8, v9, v10);
  }
  else
  {
    if (v3)
      v11 = objc_msgSend(v4, "btPreferredChannelMapOnGpsRadioActive");
    else
      v11 = objc_msgSend(v4, "btPreferredChannelMap");
    v13 = v11;
    if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeCoexFeatures"), "containsObject:", CFSTR("hpcellularstatemonitorsupport")))
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("HPCellular (updateGPSRadioActiveState): Bool flag self.hpCellNeed2SetBTAFH = (%d), Fixed AFH self.btPreferredChannelMapHPCellularActive = (%@)."), objc_msgSend(*(id *)(a1 + 32), "hpCellNeed2SetBTAFH"), objc_msgSend(*(id *)(a1 + 32), "btPreferredChannelMapHPCellularActive"));
      if (objc_msgSend(*(id *)(a1 + 32), "hpCellNeed2SetBTAFH"))
        v13 = objc_msgSend(*(id *)(a1 + 32), "btPreferredChannelMapHPCellularActive");
    }
    return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "btController"), "updatePreferredAFHMap:", v13);
  }
}

void sub_1000088FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100008BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_100008D80(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  id v4;

  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellRSRQ"), "objectAtIndex:", (char *)objc_msgSend(*(id *)(a1 + 32), "activeSlot") - 1), "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2;
  if (objc_msgSend(*(id *)(a1 + 32), "activeSlot"))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "activeSlot") == (id)1)
    {
      v3 = "CTSubscriptionSlotOne";
    }
    else
    {
      v4 = objc_msgSend(*(id *)(a1 + 32), "activeSlot");
      v3 = "Unknown CTSubscriptionSlot!!!";
      if (v4 == (id)2)
        v3 = "CTSubscriptionSlotTwo";
    }
  }
  else
  {
    v3 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: active slot %s RSRQ %f"), "-[WRM_EnhancedCTService getServingCellRSRQ]_block_invoke", v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

id sub_100008E60(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  id v4;

  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellRSRP"), "objectAtIndex:", (char *)objc_msgSend(*(id *)(a1 + 32), "activeSlot") - 1), "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2;
  if (objc_msgSend(*(id *)(a1 + 32), "activeSlot"))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "activeSlot") == (id)1)
    {
      v3 = "CTSubscriptionSlotOne";
    }
    else
    {
      v4 = objc_msgSend(*(id *)(a1 + 32), "activeSlot");
      v3 = "Unknown CTSubscriptionSlot!!!";
      if (v4 == (id)2)
        v3 = "CTSubscriptionSlotTwo";
    }
  }
  else
  {
    v3 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: active slot %s RSRP %f"), "-[WRM_EnhancedCTService getServingCellRSRP]_block_invoke", v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

id sub_100008F40(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  id v4;

  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellSNR"), "objectAtIndex:", (char *)objc_msgSend(*(id *)(a1 + 32), "activeSlot") - 1), "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2;
  if (objc_msgSend(*(id *)(a1 + 32), "activeSlot"))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "activeSlot") == (id)1)
    {
      v3 = "CTSubscriptionSlotOne";
    }
    else
    {
      v4 = objc_msgSend(*(id *)(a1 + 32), "activeSlot");
      v3 = "Unknown CTSubscriptionSlot!!!";
      if (v4 == (id)2)
        v3 = "CTSubscriptionSlotTwo";
    }
  }
  else
  {
    v3 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: active slot %s SNR %f"), "-[WRM_EnhancedCTService getServingCellSNR]_block_invoke", v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void sub_100009020()
{
  void *v0;
  id v1;
  _QWORD block[5];

  v0 = (void *)CLCopyGnssBandsInUse();
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("_getGpsBandInfo - bandInfo count %d"), objc_msgSend(v0, "count"));
  v1 = v0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000104FC;
  block[3] = &unk_1002019E8;
  block[4] = v0;
  dispatch_async((dispatch_queue_t)objc_msgSend(+[WCM_Server singleton](WCM_Server, "singleton"), "getQueue"), block);
  CFRelease(v0);
}

void sub_10000983C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10000A25C(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  id result;
  int ValueIfPresent;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int valuePtr;
  void *value;

  value = 0;
  valuePtr = 0;
  v9 = 0;
  v8 = 0;
  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 18, CFSTR("WiFiS: callbackWiFiDeviceClientWeightAvgLQMCallback"), a2);
  if (a2)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 19, CFSTR("%@"), a2);
    if (CFDictionaryGetValueIfPresent(a2, CFSTR("WEIGHT_AVG_RSSI"), (const void **)&value) && value)
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
    if (CFDictionaryGetValueIfPresent(a2, CFSTR("WEIGHT_AVG_SNR"), (const void **)&value) && value)
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v9);
    if (CFDictionaryGetValueIfPresent(a2, CFSTR("WEIGHT_AVG_TX_RATE"), (const void **)&value) && value)
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, (char *)&v8 + 4);
    ValueIfPresent = CFDictionaryGetValueIfPresent(a2, CFSTR("WEIGHT_AVG_RX_RATE"), (const void **)&value);
    v7 = 0;
    if (ValueIfPresent)
    {
      if (value)
      {
        CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v8);
        v7 = v8;
      }
    }
    objc_msgSend(a3, "updateWeightedAverageMetrics::::", valuePtr, v9, HIDWORD(v8), v7);
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: weightedWiFiAvgLQM RSSI: %d SNR: %d TX Rate: %d Rx Rate: %d"), valuePtr, v9, HIDWORD(v8), v8);
  }
  return result;
}

void sub_10000A840()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  dispatch_async((dispatch_queue_t)objc_msgSend(+[WCM_Server singleton](WCM_Server, "singleton"), "getQueue"), &stru_100205268);
  objc_autoreleasePoolPop(v0);
}

id sub_10000C180(uint64_t a1)
{
  id result;
  void *v3;

  result = objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "wifiController");
  if (result)
  {
    v3 = result;
    objc_msgSend(result, "setCatsAppPriority:", *(unsigned __int8 *)(a1 + 40));
    objc_msgSend(v3, "setCatsAppBitmap:", *(_QWORD *)(a1 + 32));
    objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "updateControllerState:", 2200);
    return objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "updateControllerState:", 1000);
  }
  return result;
}

id sub_10000C378(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "handleAppStateChange:", a2);
  return objc_msgSend(*(id *)(a1 + 32), "registerLPMNotifier");
}

id sub_10000C560(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  _BOOL8 v6;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("evaluateWiFiVersusCell: start evaluateCellularScore, PrivateNetwork:%d"), byte_100270F25);
  v2 = (void *)a1[4];
  v3 = *(_QWORD *)(a1[5] + 8) + 24;
  v4 = *(_QWORD *)(a1[6] + 8) + 24;
  v5 = byte_100270F41 != 0;
  v6 = byte_100270F40 != 0;
  if (byte_100270F25)
    objc_msgSend(v2, "evaluateCellularScorePrivateNw:currnetConf:score:conf:evalMode:outrankExit:", byte_100270F22, byte_100270F23, v3, v4, v6, v5);
  else
    objc_msgSend(v2, "evaluateCellularScore:currnetConf:score:conf:evalMode:outrankExit:", byte_100270F22, byte_100270F23, v3, v4, v6, v5);
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("evaluateWiFiVersusCell: end evaluateCellularScore, PrivateNetwork enabled: %d"), byte_100270F25);
}

void sub_10000C628(id a1)
{
  const __CFArray *v1;
  const __CFArray *v2;
  _BOOL8 v3;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Received locationd techstatus notifcation callback"));
  v1 = (const __CFArray *)CLCopyTechnologiesInUse(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("currentThread is %@, mainThread is %@"), +[NSThread currentThread](NSThread, "currentThread"), +[NSThread mainThread](NSThread, "mainThread")));
  if (v1)
  {
    v2 = v1;
    v3 = sub_10000C6E4(v1);
    CFRelease(v2);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("activeTechs is null"));
    v3 = 0;
  }
  objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "updateGPSRadioActiveState:", v3);
}

BOOL sub_10000C6E4(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  BOOL v4;
  const void *ValueAtIndex;
  CFTypeID v6;
  int valuePtr;

  Count = CFArrayGetCount(a1);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Location activeTechs contains %d elements"), Count);
  if (Count < 1)
  {
    return 0;
  }
  else
  {
    v3 = 0;
    v4 = 1;
    do
    {
      valuePtr = 0;
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v3);
      v6 = CFGetTypeID(ValueAtIndex);
      if (v6 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Location activeTechs element at index %d is %s"), v3, off_100205288[valuePtr]);
        if ((valuePtr & 0xFFFFFFF7) == 1)
          return v4;
      }
      else
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 0, CFSTR("Location activeTechs element at index %d is not number type"), v3);
      }
      v4 = Count > ++v3;
    }
    while (Count != v3);
  }
  return v4;
}

id sub_10000C80C(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  int ValueIfPresent;
  uint64_t v6;
  id result;
  uint64_t v8;
  unsigned __int8 valuePtr;
  void *value;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: callbackWiFiDeviceClientCatsUpdateCallback"));
  valuePtr = 0;
  v8 = 0;
  if (!a2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("Cats update dictionary is null"));
  value = 0;
  if (CFDictionaryGetValueIfPresent(a2, CFSTR("CATS_APP_PRIORITY"), (const void **)&value) && value)
    CFNumberGetValue((CFNumberRef)value, kCFNumberShortType, &valuePtr);
  ValueIfPresent = CFDictionaryGetValueIfPresent(a2, CFSTR("CATS_APP_BITMAP"), (const void **)&value);
  v6 = 0;
  if (ValueIfPresent && value)
  {
    CFNumberGetValue((CFNumberRef)value, kCFNumberLongLongType, &v8);
    v6 = v8;
  }
  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: Cats event: priority %d, bitmap 0x%x\n"), valuePtr, v6);
  if (a3)
    return objc_msgSend(a3, "setCatsState:bitmap:", valuePtr, v8);
  return result;
}

void sub_10000CAA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10000CCC0(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  NSObject *v11;
  _QWORD v12[8];

  v11 = objc_msgSend(*(id *)(a1 + 32), "queue");
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000182CC;
  v12[3] = &unk_100202040;
  v12[4] = *(_QWORD *)(a1 + 32);
  *(double *)&v12[5] = a7;
  *(double *)&v12[6] = a2;
  *(double *)&v12[7] = a3;
  dispatch_async(v11, v12);
}

void sub_10000CD54(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  const __CFNumber *v5;
  const __CFNumber *v6;
  const __CFNumber *v7;
  const __CFNumber *v8;
  const __CFNumber *v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  const __CFNumber *v14;
  const __CFNumber *v15;
  const __CFNumber *v16;
  int ValueIfPresent;
  uint64_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int valuePtr;
  void *v41;
  void *value;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  xpc_object_t v48[2];
  char *v49[2];
  xpc_object_t values[2];
  char *keys[2];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 18, CFSTR("WiFiS: callbackWiFiDeviceClientLQMCallback"), a2);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 19, CFSTR("%@"), a2);
  v46 = 0;
  v47 = 0;
  v44 = 0;
  v45 = 0;
  value = 0;
  v43 = 0;
  v41 = 0;
  valuePtr = -600;
  v38 = -600;
  v39 = -600;
  v36 = -600;
  v37 = -600;
  v35 = -600;
  v33 = -600;
  v34 = -600;
  v31 = -600;
  v32 = -600;
  v29 = -600;
  v30 = -600;
  v27 = -600;
  v28 = -600;
  v25 = -600;
  v26 = -600;
  v23 = -600;
  v24 = -600;
  v22 = 3;
  if (a2)
  {
    v5 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("RSSI"));
    if (v5)
      CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
    if (CFDictionaryGetValueIfPresent(a2, CFSTR("SNR"), (const void **)&value) && value)
      CFNumberGetValue((CFNumberRef)value, kCFNumberLongLongType, &v39);
    if ((valuePtr & 0x80000000) == 0)
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 18, CFSTR("WiFiS: callbackWiFiDeviceClientLQMCallback, ignoring invalid RSSI value"));
      valuePtr = -600;
      v39 = -600;
    }
    v6 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("TXFAIL"));
    if (v6)
      CFNumberGetValue(v6, kCFNumberLongLongType, &v37);
    v7 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("TXFRAMES"));
    if (v7)
      CFNumberGetValue(v7, kCFNumberLongLongType, &v36);
    v8 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("TXRETRANS"));
    if (v8)
      CFNumberGetValue(v8, kCFNumberLongLongType, &v35);
    v9 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("TXFWFAIL"));
    if (v9)
      CFNumberGetValue(v9, kCFNumberLongLongType, &v34);
    v10 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("TXFWFRAMES"));
    if (v10)
      CFNumberGetValue(v10, kCFNumberLongLongType, &v33);
    v11 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("TXFWRETRANS"));
    if (v11)
      CFNumberGetValue(v11, kCFNumberLongLongType, &v32);
    v12 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("RXFRAMES"));
    if (v12)
      CFNumberGetValue(v12, kCFNumberLongLongType, &v31);
    v13 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("RXRETRYFRMS"));
    if (v13)
      CFNumberGetValue(v13, kCFNumberLongLongType, &v30);
    v14 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("RXBEACONFRMS"));
    if (v14)
      CFNumberGetValue(v14, kCFNumberLongLongType, &v29);
    v15 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("RXBEACONSCHED"));
    if (v15)
      CFNumberGetValue(v15, kCFNumberLongLongType, &v28);
    v16 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("CCA"));
    if (v16)
      CFNumberGetValue(v16, kCFNumberLongLongType, &v38);
    if (CFDictionaryGetValueIfPresent(a2, CFSTR("TXRATE"), (const void **)&v45) && v45)
      CFNumberGetValue((CFNumberRef)v45, kCFNumberLongLongType, &v25);
    if (CFDictionaryGetValueIfPresent(a2, CFSTR("TXFBRATE"), (const void **)&v43) && v43)
      CFNumberGetValue((CFNumberRef)v43, kCFNumberLongLongType, &v24);
    if (CFDictionaryGetValueIfPresent(a2, CFSTR("RXRATE"), (const void **)&v44) && v44)
      CFNumberGetValue((CFNumberRef)v44, kCFNumberLongLongType, &v23);
    if (CFDictionaryGetValueIfPresent(a2, CFSTR("QBSS_STA_COUNT"), (const void **)&v47) && v47)
      CFNumberGetValue((CFNumberRef)v47, kCFNumberLongLongType, &v26);
    if (CFDictionaryGetValueIfPresent(a2, CFSTR("QBSS_CHAN_UTIL"), (const void **)&v46) && v46)
      CFNumberGetValue((CFNumberRef)v46, kCFNumberLongLongType, &v27);
    ValueIfPresent = CFDictionaryGetValueIfPresent(a2, CFSTR("kLQM_HOME_WORK_STATUS"), (const void **)&v41);
    v18 = 3;
    if (ValueIfPresent && v41)
    {
      CFNumberGetValue((CFNumberRef)v41, kCFNumberLongLongType, &v22);
      v18 = v22;
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 19, CFSTR("WiFiS: WiFiLQM rssi %d, snr %lld, txFail %lld, txFrame %lld, txRetran %lld, fwTxFail %lld, fwTxFrame %lld, fwTxRetran %lld, rxFrame %lld, rxRetry %lld, rxBeacon %lld, rxBeaconSched %lld, cca %lld, AP chn util %lld, station count %lld, TX Phy Rate %lld, TX FB Rate %lld, Rx PHY Rate %lld, POI %d"), valuePtr, v39, v37, v36, v35, v34, v33, v32, v31, v30, v29, v28, v38, v27, v26,
      v25,
      v24,
      v23,
      v18);
    objc_msgSend(a3, "updateLQMReceived");
    objc_msgSend(a3, "setRSSI:", valuePtr);
    if (v39)
      objc_msgSend(a3, "setSNR:");
    else
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 17, CFSTR("WiFiS: Check WiFi reported SNR 0"));
    objc_msgSend(a3, "updateTxStats:::", v36, v35, v37);
    objc_msgSend(a3, "updateTxPer");
    objc_msgSend(a3, "updateFwTxStats:::", v33, v32, v34);
    objc_msgSend(a3, "updateFwTxPer");
    objc_msgSend(a3, "updateRxStats::", v31, v30);
    objc_msgSend(a3, "updateRxRatio");
    objc_msgSend(a3, "updateRxBeacons::", v29, v28);
    objc_msgSend(a3, "updateRxBeaconPer");
    objc_msgSend(a3, "updateCCA:", v38);
    if (v47)
    {
      objc_msgSend(a3, "updateChanUtilization:", v27);
      objc_msgSend(a3, "updateStationCount:", v26);
    }
    else
    {
      objc_msgSend(a3, "updateChanUtilization:", 0);
      objc_msgSend(a3, "resetStationCount:", 0);
    }
    if (v45)
      objc_msgSend(a3, "updatePhyRates:::", v25, v24, v23);
    if (v41)
      objc_msgSend(a3, "updatePointOfInterest:", v22);
    if (v38 != -600)
    {
      objc_msgSend(a3, "setWiFiLinkUP");
      objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "setWiFiLinkDown:", 0);
      objc_msgSend(+[WRM_FT_HandoverManager WRM_FT_HandoverManagerSingleton](WRM_FT_HandoverManager, "WRM_FT_HandoverManagerSingleton"), "setWiFiLinkDown:", 0);
    }
    v19 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v19, "kWRMM_WIFI_NOTIFICATION_TYPE", 1);
    *(_OWORD *)keys = *(_OWORD *)off_100205A10;
    values[0] = xpc_uint64_create(0x3EBuLL);
    values[1] = v19;
    v20 = xpc_dictionary_create((const char *const *)keys, values, 2uLL);
    *(_OWORD *)v49 = *(_OWORD *)off_100205A20;
    v48[0] = xpc_uint64_create(0x3E8uLL);
    v48[1] = v20;
    v21 = xpc_dictionary_create((const char *const *)v49, v48, 2uLL);
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 19, CFSTR("%s: ready to send a xpc message: %@."), "NotifyiRATClients", v21);
    if (objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "needWiFiLQM"))
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 19, CFSTR("NotifyiRATClients - Sending to HandoverManager"));
      objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "updateControllerState:", v21);
    }
    if (objc_msgSend(+[WRM_IDSLinkEvalManager WRM_IDSLinkEvalManagerSingleton](WRM_IDSLinkEvalManager, "WRM_IDSLinkEvalManagerSingleton"), "needWiFiLQM"))
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 19, CFSTR("NotifyiRATClients - Sending to IDS link Evaluator"));
      objc_msgSend(+[WRM_IDSLinkEvalManager WRM_IDSLinkEvalManagerSingleton](WRM_IDSLinkEvalManager, "WRM_IDSLinkEvalManagerSingleton"), "updateControllerState:", v21);
    }
    if (objc_msgSend(+[WRM_BWEvalManager WRM_BWEvalManagerSingleton](WRM_BWEvalManager, "WRM_BWEvalManagerSingleton"), "needWiFiLQM"))
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 19, CFSTR("NotifyiRATClients - Sending to BW Evaluator"));
      objc_msgSend(+[WRM_BWEvalManager WRM_BWEvalManagerSingleton](WRM_BWEvalManager, "WRM_BWEvalManagerSingleton"), "updateControllerState:", v21);
    }
    if (objc_msgSend(+[WRM_FT_HandoverManager WRM_FT_HandoverManagerSingleton](WRM_FT_HandoverManager, "WRM_FT_HandoverManagerSingleton"), "needWiFiLQM"))
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 19, CFSTR("NotifyiRATClients - Sending to FaceTime link Evaluator"));
      objc_msgSend(+[WRM_FT_HandoverManager WRM_FT_HandoverManagerSingleton](WRM_FT_HandoverManager, "WRM_FT_HandoverManagerSingleton"), "updateControllerState:", v21);
    }
    xpc_release(v48[0]);
    xpc_release(v21);
    xpc_release(values[0]);
    xpc_release(v20);
    xpc_release(v19);
  }
}

void sub_10000D4E8(uint64_t a1)
{
  id v2;
  id v3;
  BOOL v4;
  unsigned __int8 v5;
  objc_class *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  void *j;
  void *v18;
  unsigned int v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD v29[5];
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  uint64_t v35;
  _BYTE v36[128];
  _BYTE v37[128];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("Received handleAppStateChange changeInfo: %@"), *(_QWORD *)(a1 + 32));
  v2 = objc_msgSend(*(id *)(a1 + 32), "objectForKey:", BKSApplicationStateDisplayIDKey);
  v3 = objc_msgSend(*(id *)(a1 + 32), "objectForKey:", BKSApplicationStateKey);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("invalid applicationBundleId or appState"));
    return;
  }
  v19 = objc_msgSend(v3, "unsignedIntValue");
  v5 = objc_msgSend(*(id *)(a1 + 40), "isCallKitAppInDenyList:", v2);
  if ((v5 & 1) == 0)
  {
    v30 = 0;
    v31 = &v30;
    v32 = 0x3052000000;
    v33 = sub_100031C9C;
    v34 = sub_100031CAC;
    v6 = (objc_class *)qword_100271070;
    v35 = qword_100271070;
    if (!qword_100271070)
    {
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_100031CB8;
      v29[3] = &unk_100201B40;
      v29[4] = &v30;
      sub_100031CB8((uint64_t)v29);
      v6 = (objc_class *)v31[5];
    }
    _Block_object_dispose(&v30, 8);
    v7 = objc_msgSend([v6 alloc], "initWithBundleIdentifier:allowPlaceholder:error:", v2, 0, 0);
    v20 = v7;
    if (v7)
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("app category %@, genreID: %llu"), objc_msgSend(objc_msgSend(v7, "iTunesMetadata"), "genre"), objc_msgSend(objc_msgSend(v7, "iTunesMetadata"), "genreIdentifier"));
      if (objc_msgSend(objc_msgSend(v20, "iTunesMetadata"), "genreIdentifier") == (id)6005
        || objc_msgSend(v2, "isEqualToString:", CFSTR("com.linkedin.LinkedIn")))
      {
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v8 = objc_msgSend(objc_msgSend(v20, "infoDictionary"), "objectForKey:ofClass:", CFSTR("UIBackgroundModes"), objc_opt_class(NSArray));
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v25, v37, 16);
        if (v9)
        {
          v10 = *(_QWORD *)v26;
          while (2)
          {
            for (i = 0; i != v9; i = (char *)i + 1)
            {
              if (*(_QWORD *)v26 != v10)
                objc_enumerationMutation(v8);
              v12 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i);
              +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("UIBackgroundModes: %@"), v12);
              if ((objc_msgSend(v12, "isEqualToString:", CFSTR("voip")) & 1) != 0
                || objc_msgSend(v12, "isEqualToString:", CFSTR("audio")))
              {
                objc_msgSend(*(id *)(a1 + 40), "handleVoIPStateChange:appId:", v19, v2);
                goto LABEL_24;
              }
            }
            v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v25, v37, 16);
            v13 = 0;
            if (v9)
              continue;
            goto LABEL_43;
          }
        }
        goto LABEL_42;
      }
      if (objc_msgSend(objc_msgSend(v20, "iTunesMetadata"), "genreIdentifier") == (id)6000)
      {
        v23 = 0u;
        v24 = 0u;
        v21 = 0u;
        v22 = 0u;
        v14 = objc_msgSend(objc_msgSend(v20, "infoDictionary"), "objectForKey:ofClass:", CFSTR("UIBackgroundModes"), objc_opt_class(NSArray));
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v21, v36, 16);
        if (v15)
        {
          v16 = *(_QWORD *)v22;
          while (2)
          {
            for (j = 0; j != v15; j = (char *)j + 1)
            {
              if (*(_QWORD *)v22 != v16)
                objc_enumerationMutation(v14);
              v18 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)j);
              +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("UIBackgroundModes: %@"), v18);
              if ((objc_msgSend(v18, "isEqualToString:", CFSTR("voip")) & 1) != 0
                || objc_msgSend(v18, "isEqualToString:", CFSTR("audio")))
              {
                objc_msgSend(*(id *)(a1 + 40), "handleVoIPStateChangeConference:appId:", v19, v2);
LABEL_24:
                v13 = 2;
                goto LABEL_43;
              }
            }
            v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v21, v36, 16);
            v13 = 0;
            if (v15)
              continue;
            goto LABEL_43;
          }
        }
        goto LABEL_42;
      }
      if (objc_msgSend(objc_msgSend(v20, "iTunesMetadata"), "genreIdentifier") == (id)6016
        || objc_msgSend(objc_msgSend(v20, "iTunesMetadata"), "genreIdentifier") == (id)6008)
      {
        objc_msgSend(*(id *)(a1 + 40), "handleStreamingStateChange:appId:", v19, v2);
        v13 = 1;
      }
      else
      {
        if (objc_msgSend(objc_msgSend(v20, "iTunesMetadata"), "genreIdentifier") != (id)6002)
        {
LABEL_42:
          v13 = 0;
          goto LABEL_43;
        }
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("Speed NSAppTransportSecurity: %@"), objc_msgSend(objc_msgSend(v20, "infoDictionary"), "objectForKey:ofClass:", CFSTR("NSAppTransportSecurity"), objc_opt_class(NSDictionary)));
        v13 = 4;
      }
LABEL_43:
      objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "updateAppState:Category:sessionType:", v19, objc_msgSend(objc_msgSend(v20, "iTunesMetadata"), "genre"), v13);

    }
  }
}

void sub_10000DA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_10000DE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000DF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10000EBBC(uint64_t a1, void *a2, void *a3)
{
  id v6;
  double v7;
  int v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  _QWORD *v35;
  id result;

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = objc_msgSend(a2, "copy");
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "getAgeOfMetricCurrInstant");
  *(double *)(*(_QWORD *)(a1 + 32) + 184) = fmax(v7, 0.0);
  v8 = *(_DWORD *)(a1 + 40);
  v9 = "WRM_NETWORK_TYPE_INVALID!!!";
  if (v8 == 1)
    v9 = "CELLULAR";
  if (v8)
    v10 = v9;
  else
    v10 = "WIFI";
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 20, CFSTR("iRAT: Symptom Framework returns full score for INSTANT %s (age %.2lfsec): data: %@ error: %@"), v10, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 184), a2, a3);

  objc_msgSend(*(id *)(a1 + 32), "getWifiNetMetricCurrInstant:", 1);
  v12 = v11;
  objc_msgSend(*(id *)(a1 + 32), "getWifiNetMetricCurrInstant:", 2);
  v14 = v13;
  objc_msgSend(*(id *)(a1 + 32), "getWifiNetMetricCurrInstant:", 3);
  v16 = v15;
  objc_msgSend(*(id *)(a1 + 32), "getWifiNetMetricCurrInstant:", 4);
  v18 = v17;
  objc_msgSend(*(id *)(a1 + 32), "getWifiNetMetricCurrInstant:", 5);
  v20 = v19;
  objc_msgSend(*(id *)(a1 + 32), "getWifiNetMetricCurrInstant:", 6);
  v22 = v21;
  objc_msgSend(*(id *)(a1 + 32), "getWifiNetMetricCurrInstant:", 7);
  v24 = v23;
  objc_msgSend(*(id *)(a1 + 32), "getWifiNetMetricCurrInstant:", 8);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("iRAT: Symptom Metrics for INSTANT: connFail %.2f faultyStay %.2f lowqStay %.2f txRetry %.2f rxDup %.2f minRTT %lf avgRTT %.2f varRTT %.2f"), v12, v14, v16, v18, v20, v22, v24, v25);
  objc_msgSend(*(id *)(a1 + 32), "getWifiNetMetricCurrInstant:", 6);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) = v26;
  objc_msgSend(*(id *)(a1 + 32), "getWifiNetMetricCurrInstant:", 7);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96) = v27;
  objc_msgSend(*(id *)(a1 + 32), "getWifiNetMetricCurrInstant:", 8);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 104) = v28;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 128) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136);
  objc_msgSend(*(id *)(a1 + 32), "getWifiNetMetricCurrInstant:", 5);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) = v29;
  objc_msgSend(*(id *)(a1 + 32), "getWifiNetMetricCurrInstant:", 4);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 120) = v30;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 152) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 144);
  objc_msgSend(*(id *)(a1 + 32), "getWifiNetMetricCurrInstant:", 9);
  if (v31 >= 0.0)
    *(double *)(*(_QWORD *)(a1 + 32) + 72) = v31;
  else
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 20, CFSTR("iRAT: Symptom Framework: Unable to  receive NETWORK_SYMPTOM_CONN_ATTEMPT"));
  objc_msgSend(*(id *)(a1 + 32), "getWifiNetMetricCurrInstant:", 10);
  if (v32 >= 0.0)
    *(double *)(*(_QWORD *)(a1 + 32) + 80) = v32;
  else
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 20, CFSTR("iRAT: Symptom Framework: Unable to receive NETWORK_SYMPTOM_CONN_SUCC"));
  objc_msgSend(*(id *)(a1 + 32), "getWifiNetMetricCurrInstant:", 11);
  if (v33 >= 0.0)
    *(double *)(*(_QWORD *)(a1 + 32) + 136) = v33;
  else
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 20, CFSTR("iRAT: Symptom Framework: Unable to receive NETWORK_SYMPTOM_INPUT_PKTS"));
  objc_msgSend(*(id *)(a1 + 32), "getWifiNetMetricCurrInstant:", 13);
  if (v34 >= 0.0)
    *(double *)(*(_QWORD *)(a1 + 32) + 144) = v34;
  else
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 20, CFSTR("iRAT: Symptom Framework: Unable to receive NETWORK_SYMPTOM_WIFI_IN_BYTES"));
  v35 = *(_QWORD **)(a1 + 32);
  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("iRAT: Symptom Metrics for INSTANT: PreConnAttempt %.2f Current Conn Attempt %.2f PrevConnSuccess %.2f CurrentConnSucc %.2f PrevInputPkts %.2f CurrentPacketsIn %lf CurrentBytesIn %lf BackHaulStatus %d"), v35[7], v35[9], v35[8], v35[10], v35[16], v35[17], v35[19], objc_msgSend(v35, "evaluateBackHaulLink"));
  ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 216);
  return result;
}

void sub_1000104FC(uint64_t a1)
{
  objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "updateGPSBandsInfo:CLUpdate:", *(_QWORD *)(a1 + 32), 1);

}

void sub_100010B6C(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  FreqRangeInfo *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("SAC Coex Manager received GNSS frequency update"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 184), "sacRemoveAllGnssFreq");
  if (objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    v2 = objc_alloc_init((Class)NSMutableArray);
    v3 = objc_alloc_init((Class)NSMutableArray);
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v4 = *(void **)(a1 + 40);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v15;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v15 != v7)
            objc_enumerationMutation(v4);
          v9 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
          v12 = 0u;
          v13 = 0u;
          objc_msgSend(v9, "getValue:", &v12);
          v10 = -[FreqRangeInfo initWithFreq:Bw:]([FreqRangeInfo alloc], "initWithFreq:Bw:", (unint64_t)(*((double *)&v12 + 1) * 1000000.0), (unint64_t)(*(double *)&v13 * 1000000.0));
          if ((_DWORD)v12 == 2)
            v11 = v3;
          else
            v11 = v2;
          objc_msgSend(v11, "addObject:", v10);

        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v6);
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("SAC Coex Manager add new GNSS frequency to SAC"));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 184), "sacUpdateGnssFreqInfo:L5Freq:", v2, v3);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 184), "sacReportGnssVictimFreqListOnTargetSac:action:", 1, 1);
    if (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "activeCoexFeatures"), "containsObject:", CFSTR("SacPolicyJasperSupport")))objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 184), "sacReportGnssVictimFreqListOnTargetSac:action:", 2, 1);

  }
}

id sub_100013084(uint64_t a1)
{
  id result;
  _BYTE v3[1024];

  result = objc_msgSend(*(id *)(a1 + 32), "sacCreateRawFreqList:bufferSize:buffer:", *(_QWORD *)(a1 + 40), 64, v3);
  if ((_DWORD)result)
    return (id)TelephonyBasebandAddFreqListExt(*(_QWORD *)(a1 + 48), result, v3, *(unsigned int *)(a1 + 56));
  return result;
}

id sub_100013100(uint64_t a1)
{
  id result;
  _BYTE v3[1024];

  result = objc_msgSend(*(id *)(a1 + 32), "sacCreateRawFreqList:bufferSize:buffer:", *(_QWORD *)(a1 + 40), 64, v3);
  if ((_DWORD)result)
    return (id)TelephonyBasebandRemoveFreqListExt(*(_QWORD *)(a1 + 48), result, v3, *(unsigned int *)(a1 + 56));
  return result;
}

id sub_10001317C(uint64_t a1)
{
  id result;
  _BYTE v3[1024];

  result = objc_msgSend(*(id *)(a1 + 32), "sacCreateRawFreqList:bufferSize:buffer:", *(_QWORD *)(a1 + 40), 64, v3);
  if ((_DWORD)result)
    return (id)TelephonyBasebandAddFreqListExt(*(_QWORD *)(a1 + 48), result, v3, *(unsigned int *)(a1 + 56));
  return result;
}

id sub_1000131F8(uint64_t a1)
{
  id result;
  _BYTE v3[1024];

  result = objc_msgSend(*(id *)(a1 + 32), "sacCreateRawFreqList:bufferSize:buffer:", *(_QWORD *)(a1 + 40), 64, v3);
  if ((_DWORD)result)
    return (id)TelephonyBasebandRemoveFreqListExt(*(_QWORD *)(a1 + 48), result, v3, *(unsigned int *)(a1 + 56));
  return result;
}

void sub_1000142A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100014F4C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  id v7;
  unsigned __int8 v8;
  id v9;
  int v10;
  uint64_t v11;
  double v12;
  double v13;
  int v14;
  uint64_t v15;
  BOOL v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  __objc2_class **p_superclass;
  unsigned __int8 v24;
  unsigned __int8 v25;
  _QWORD block[7];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;

  v31 = 0;
  v32 = &v31;
  v33 = 0x2020000000;
  v34 = 0;
  v27 = 0;
  v28 = &v27;
  v29 = 0x2020000000;
  v30 = 0;
  v2 = +[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton](WRM_EnhancedCTService, "wrm_EnhancedCTServiceSingleton");
  v3 = dword_100270B48;
  objc_msgSend(v2, "setActiveSlot:", objc_msgSend(v2, "getUserDataPreferredSlot"));
  objc_msgSend(v2, "getCTDataIndictor");
  v4 = objc_msgSend(v2, "getCurrentNRStatusDataSlot");
  v5 = objc_msgSend(v2, "getWiFiNRStatusDataSlot");
  v6 = objc_msgSend(v2, "isDeviceUsingFR2Radio");
  v7 = objc_msgSend(v2, "getBandWidthDataSlot");
  byte_100270F25 = objc_msgSend(v2, "isDataPreferredSlotCBRS");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000C560;
  block[3] = &unk_1002023A0;
  block[4] = v2;
  block[5] = &v31;
  block[6] = &v27;
  dispatch_sync((dispatch_queue_t)objc_msgSend(v2, "getClientQueue"), block);
  v8 = *((_BYTE *)v32 + 24);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("evaluateWiFiVersusCell: isCurrentCellNR: %d, iswifiCellNR: %d, isDeviceUsingFR2: %d, cellBandwidth: %d, cellScoreBad: %d"), v4 != 0, v5 != 0, v6, v7, v8);
  v9 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "wifiService");
  v10 = objc_msgSend(v9, "getWghtAverageRSSI");
  v11 = (uint64_t)objc_msgSend(v9, "getCCA");
  objc_msgSend(v9, "getTxPer");
  v13 = v12;
  v14 = objc_msgSend(v9, "getWghtAverageSNR");
  objc_msgSend(v9, "isSlowWiFi");
  if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "isWiFiPrimary"))
  {
    byte_100270F24 = 0;
    goto LABEL_20;
  }
  v15 = (uint64_t)(v13 * 100.0);
  if (!(_DWORD)v3)
  {
    v24 = objc_msgSend(*(id *)(a1 + 32), "isWiFiAppEntryCriteriaMet");
    if (v14 >= 11 && v10 >= -75 && v11 <= 70)
    {
      v25 = v15 >= 0 ? v24 : 0;
      if ((v25 & 1) != 0)
      {
        dword_100270B48 = 1;
        v21 = byte_100270F20;
LABEL_40:
        p_superclass = (__objc2_class **)(WRM_SCService + 8);
        v20 = 1;
        v22 = 1;
        goto LABEL_22;
      }
    }
    goto LABEL_20;
  }
  v19 = v14 > 5 && v10 > -80 && v11 < 86 && v15 < 20;
  if (v8 != 3 && !v19)
  {
LABEL_20:
    v20 = 0;
    dword_100270B48 = 0;
    v21 = byte_100270F20;
    goto LABEL_21;
  }
  v20 = 1;
  dword_100270B48 = 1;
  v21 = byte_100270F20;
  if (v19)
    goto LABEL_40;
LABEL_21:
  v22 = 3;
  p_superclass = WRM_SCService.superclass;
LABEL_22:
  byte_100270F20 = v22;
  byte_100270F21 = 2;
  objc_msgSend(p_superclass + 279, "logLevel:message:", 24, CFSTR("evaluateWiFiVersusCell:  mCellScore: %d, mWiFiScore: %d, mRecommendation: %d"), byte_100270F22, v22, v20);
  if ((_DWORD)v3 == dword_100270B48
    && *((unsigned __int8 *)v32 + 24) == byte_100270F22
    && v21 == byte_100270F20)
  {
    objc_msgSend(p_superclass + 279, "logLevel:message:", 24, CFSTR("evaluateWiFiVersusCell: no change in recommendation"));
  }
  else
  {
    objc_msgSend(p_superclass + 279, "logLevel:message:", 24, CFSTR("evaluateWiFiVersusCell: recommendation changed"));
    byte_100270F22 = *((_BYTE *)v32 + 24);
    byte_100270F23 = *((_BYTE *)v28 + 24);
    if (objc_msgSend(v2, "deviceICheapFR2CoverageSync"))
      byte_100270F24 = 1;
    objc_msgSend(*(id *)(a1 + 32), "notifyRecommendations");
    objc_msgSend(p_superclass + 279, "logLevel:message:", 24, CFSTR("evaluateWiFiVersusCell: m5GAvailable: %d"), byte_100270F24);
  }
  if ((_DWORD)v3 != dword_100270B48)
  {
    objc_msgSend(p_superclass + 279, "logLevel:message:", 24, CFSTR("evaluateWiFiVersusCell: awd: eval link changed: %d"), dword_100270B48);
    objc_msgSend(*(id *)(a1 + 32), "submitWiFiVersusCellAWDMetrics");
    v3 = dword_100270B48;
  }
  objc_msgSend(p_superclass + 279, "logLevel:message:", 24, CFSTR("evaluateWiFiVersusCell: current recommended link: %d"), v3);
  _Block_object_dispose(&v27, 8);
  _Block_object_dispose(&v31, 8);
}

void sub_10001534C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_1000155D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100017AF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100017CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

BOOL sub_100017F2C(id a1, FreqRangeInfo *a2, FreqRangeInfo *a3)
{
  return -[FreqRangeInfo isEqual:](a2, "isEqual:", a3);
}

BOOL sub_100017F34(id a1, FreqRangeInfo *a2, FreqRangeInfo *a3)
{
  return -[FreqRangeInfo isEqual:](a2, "isEqual:", a3);
}

id sub_100017F40(uint64_t a1)
{
  NSNumber *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: Update WiFi Limited Aggregation state (%d) and useCase (%d)"), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
  v4[0] = CFSTR("MWS_BT_SCO_HID_TRAFFIC_INDICATION");
  v2 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 40));
  v4[1] = CFSTR("MWS_BT_SCO_HID_TRAFFIC_USE_CASE");
  v5[0] = v2;
  v5[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 44));
  return objc_msgSend(*(id *)(a1 + 32), "sendMessage:withValue:", CFSTR("MWS_BT_SCO_HID_TRAFFIC_PARAM"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2));
}

id sub_100018014(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleSessionNotification:", *(_QWORD *)(a1 + 40));
}

void sub_1000182A8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

id sub_1000182CC(double *a1)
{
  id result;
  uint64_t v3;

  if (a1[5] <= 30.0)
  {
    *(double *)(*((_QWORD *)a1 + 4) + 332) = a1[6];
    *(double *)(*((_QWORD *)a1 + 4) + 340) = a1[7];
    result = -[NSDate timeIntervalSince1970](+[NSDate date](NSDate, "date"), "timeIntervalSince1970");
    *(_QWORD *)(*((_QWORD *)a1 + 4) + 348) = v3;
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)a1 + 4) + 332) = 0;
    *(_QWORD *)(*((_QWORD *)a1 + 4) + 340) = 0;
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("wrmSdmLocationController: invalidate location since speed %f> 30m/s"), *((_QWORD *)a1 + 5));
  }
  return result;
}

uint64_t sub_1000184B8(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 487);
  return result;
}

id sub_1000184D4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleMessage:", a2);
}

id sub_1000184E0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleXPCMessage:", *(_QWORD *)(a1 + 40));
}

void sub_1000184EC(uint64_t a1, _BYTE *a2, int a3)
{
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  NSObject *v13;
  dispatch_time_t v14;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD handler[6];
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v3 == a3)
  {
    if (!v4)
      return;
    goto LABEL_5;
  }
  if (v4)
  {
LABEL_5:
    *a2 = a3;
    return;
  }
  if (a3 || v3 != 1)
  {
    *a2 = a3;
    sub_10004641C(a1);
  }
  else
  {
    *a2 = 0;
    sub_100046734(&v20, (_QWORD *)a1);
    v7 = v20;
    v6 = v21;
    if (v21)
    {
      p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 1uLL, 0, *(dispatch_queue_t *)(a1 + 160));
    v13 = *(NSObject **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    if (v13)
    {
      dispatch_release(v13);
      v12 = *(NSObject **)(a1 + 32);
    }
    v14 = dispatch_time(0, 300000000);
    dispatch_source_set_timer(v12, v14, 0xFFFFFFFFFFFFFFFFLL, 0x1312D00uLL);
    v15 = *(NSObject **)(a1 + 32);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 1174405120;
    handler[2] = sub_1000467A8;
    handler[3] = &unk_100202530;
    handler[4] = a1;
    handler[5] = v7;
    v19 = v6;
    if (v6)
    {
      v16 = (unint64_t *)&v6->__shared_weak_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    dispatch_source_set_event_handler(v15, handler);
    dispatch_activate(*(dispatch_object_t *)(a1 + 32));
    if (v19)
      std::__shared_weak_count::__release_weak(v19);
    if (v6)
      std::__shared_weak_count::__release_weak(v6);
  }
}

id sub_100018694(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "sacHandleDesenseNetworkConfig:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_1000186A0()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = sub_1000634B8;
  v7 = sub_1000634C8;
  v0 = qword_100271158;
  v8 = qword_100271158;
  if (!qword_100271158)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_1000635CC;
    v2[3] = &unk_100201B40;
    v2[4] = &v3;
    sub_1000635CC((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_10001874C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100018764(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_100019B1C(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000187AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000187C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_100052D60(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_100018808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

id sub_10001881C(uint64_t a1)
{
  const char *v2;
  const char *v3;
  uint64_t v4;
  const char *v5;

  v2 = "CTSubscriptionSlotUnknown";
  v3 = "CTSubscriptionSlotOne";
  v4 = *(_QWORD *)(a1 + 40);
  v5 = "Unknown CTSubscriptionSlot!!!";
  if (v4 == 2)
    v5 = "CTSubscriptionSlotTwo";
  if (v4 != 1)
    v3 = v5;
  if (v4)
    v2 = v3;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: slot %s, NeighberNRCell %d"), "-[WRM_EnhancedCTService updateConnectedStateSummary:neighberNRCell:highrateIndicator:]_block_invoke", v2, *(unsigned int *)(a1 + 48));
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "neighberCellType"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 40) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
}

id sub_1000188E0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "processSessionStatusUpdate:", *(_QWORD *)(a1 + 40));
}

id sub_1000188EC(uint64_t a1)
{
  const char *v2;
  const char *v3;
  uint64_t v4;
  const char *v5;

  v2 = "CTSubscriptionSlotUnknown";
  v3 = "CTSubscriptionSlotOne";
  v4 = *(_QWORD *)(a1 + 40);
  v5 = "Unknown CTSubscriptionSlot!!!";
  if (v4 == 2)
    v5 = "CTSubscriptionSlotTwo";
  if (v4 != 1)
    v3 = v5;
  if (v4)
    v2 = v3;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: slot %s, High rate indictor:%d"), "-[WRM_EnhancedCTService updateHighRateLikely:highrateIndicator:]_block_invoke", v2, *(unsigned __int8 *)(a1 + 48));
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "highDataRateObserved"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 40) - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
}

id sub_1000189B0(uint64_t a1)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 452);
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellularProductExperimentsManager: getWRMCellOutrankWifiBWThreshold: mWRMCellOutrankWifiBWThreshold, value: %d"), *(unsigned int *)(*(_QWORD *)(a1 + 32) + 452));
}

id sub_100018A08(uint64_t a1, uint64_t a2)
{
  int v2;
  int v4;
  const char *v5;
  const char *v6;
  const char *v7;
  id result;
  int v9;
  uint64_t v10;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 40);
  v5 = "WRM_NETWORK_TYPE_INVALID!!!";
  if (v4 == 1)
    v5 = "CELLULAR";
  if (v4)
    v6 = v5;
  else
    v6 = "WIFI";
  if (a2 < 7 && ((0x7Du >> a2) & 1) != 0)
  {
    v7 = off_100205B88[(int)a2];
  }
  else
  {
    v7 = "SF_ADVICE_INVALID_VALUE!!!";
    if ((_DWORD)a2 == 7)
      v7 = "kNetworkAdvisoryDefiniteUse";
  }
  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("iRAT: Symptom Framework returns a network advice for %s: %d (%s)"), v6, a2, v7);
  v9 = *(_DWORD *)(a1 + 40);
  if (!v9)
  {
    v10 = 8;
    goto LABEL_16;
  }
  if (v9 == 1)
  {
    v10 = 12;
LABEL_16:
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + v10) = v2;
  }
  ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 200);
  return result;
}

id sub_100018AEC(uint64_t a1)
{
  const char *v2;
  const char *v3;
  uint64_t v4;
  const char *v5;

  v2 = "CTSubscriptionSlotUnknown";
  v3 = "CTSubscriptionSlotOne";
  v4 = *(_QWORD *)(a1 + 40);
  v5 = "Unknown CTSubscriptionSlot!!!";
  if (v4 == 2)
    v5 = "CTSubscriptionSlotTwo";
  if (v4 != 1)
    v3 = v5;
  if (v4)
    v2 = v3;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: slot %s DL Configued BW %d"), "-[WRM_EnhancedCTService updateLTEBandwidth:LTEBW:]_block_invoke", v2, *(unsigned int *)(a1 + 48));
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cellBandwidth"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 40) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
}

id sub_100018BB0(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  id v14;
  uint64_t v16;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u Max UE Rank: %u"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *a2);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u Max Network MIMO Layer: %u"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), a2[1]);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u Max Scheduled MIMO Layer: %u%"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), a2[2]);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u Max Downlink Modulation Scheme: %s"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), sub_100074CAC(*((_DWORD *)a2 + 1)));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u Max Uplink Modulation Scheme: %s"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), sub_100074CAC(*((_DWORD *)a2 + 2)));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u Total Downlink MIMO Layers: %u"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), a2[12]);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u Total Num of Component Carriers: %u"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), a2[13]);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u Downlink Bandwidth: %umHz"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *((unsigned int *)a2 + 4));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u Uplink Bandwidth %umHz"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *((unsigned int *)a2 + 5));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u 5G Neighbor Cell RAT: %s"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), sub_100074CD0(*((_DWORD *)a2 + 6)));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u RSRP: %d"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *((__int16 *)a2 + 14));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u SINR 10xDB: %u"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), a2[30]);
  v4 = *((_DWORD *)a2 + 4);
  v5 = objc_msgSend(*(id *)(a1 + 32), "getWRMCellOutrankWifiBWThreshold");
  v6 = 0;
  v7 = 0;
  v8 = 1;
  v9 = 1;
  switch(*((_DWORD *)a2 + 6))
  {
    case 2:
      v7 = 0;
      v9 = 3;
      v6 = 1;
      break;
    case 3:
      break;
    case 4:
      v6 = 0;
      v7 = 0;
      v9 = 2;
      break;
    case 5:
      v6 = 0;
      v7 = 0;
      v9 = 4;
      break;
    default:
      v8 = 0;
      v6 = 0;
      v9 = 0;
      v7 = 1;
      break;
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("updateConnectedStateSummary %d, Cell Changed %d, nrCellType: %d"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), v9);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  if ((v8 & 1) != 0 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Calling updateConnectedStateSummary %d, Cell Changed %d, nrCellType: %d"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), v9);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
      v11 = 2 * (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) == 1);
    else
      v11 = 1;
    objc_msgSend(*(id *)(a1 + 32), "updateConnectedStateSummary:neighberNRCell:highrateIndicator:", v11, v9, v4 >= v5);
    objc_msgSend(*(id *)(a1 + 40), "evaluateWiFiVersusCell");
    v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  }
  if (((v6 | v7) & 1) != 0 || (_DWORD)v10)
  {
    v12 = v4 >= v5;
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Calling updateHighRateLikely %d, Cell Changed %d, nrCellType: %d"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), v10, v9);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
      v13 = 2 * (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) == 1);
    else
      v13 = 1;
    objc_msgSend(*(id *)(a1 + 32), "updateHighRateLikely:highrateIndicator:", v13, v12);
  }
  v14 = +[WRM_BWEvalManager WRM_BWEvalManagerSingleton](WRM_BWEvalManager, "WRM_BWEvalManagerSingleton");
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
    return objc_msgSend(v14, "updateNRQSHMetrics:::", *((unsigned int *)a2 + 4), a2[2], *((unsigned int *)a2 + 1));
  objc_msgSend(v14, "updateQSHMetrics::::", a2[13], *((unsigned int *)a2 + 4), a2[12], a2[2]);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    v16 = 2 * (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) == 1);
  else
    v16 = 1;
  return objc_msgSend(*(id *)(a1 + 32), "updateLTEBandwidth:LTEBW:", v16, *((unsigned int *)a2 + 4));
}

id sub_100019024(uint64_t a1, uint64_t a2)
{
  const __CFString *v4;

  if ((_DWORD)a2)
    v4 = CFSTR("triggerHarvestedCellEval, CellStationManager: FR2 cell found: 1");
  else
    v4 = CFSTR("triggerHarvestedCellEval, CellStationManager: FR2 cell found: 0");
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v4);
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "currentHarvestedCellTypeFR2Capable"), "replaceObjectAtIndex:withObject:", (char *)objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot") - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2));
}

void sub_1000190A8(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  const __CFString *v5;
  _QWORD v6[5];

  if (!qword_100270F08)
  {
    v5 = CFSTR("CellStationManager: cell ID to check is nil");
LABEL_8:
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v5);
    return;
  }
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 300))
  {
    v5 = CFSTR("CellStationManager: cellStationManager is nil");
    goto LABEL_8;
  }
  v2 = objc_msgSend((id)qword_100270F08, "copy");
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellStationManager: cell ID to check: %@"), v2);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 300);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100019024;
  v6[3] = &unk_100202018;
  v6[4] = v3;
  objc_msgSend(v4, "isFR2:completionHandler:", v2, v6);
  if (v2)

}

void sub_1000191A0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  const __CFString *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", CFSTR("CellStationProperties")));
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K == %@"), CFSTR("gci"), *(_QWORD *)(a1 + 32)));
    objc_msgSend(v2, "setPredicate:", v3);

    objc_msgSend(v2, "setResultType:", 4);
    objc_msgSend(v2, "setFetchLimit:", 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "private_queue_context"));
    v13 = 0;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "executeFetchRequest:error:", v2, &v13));
    v6 = v13;

    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellStationManager: Created fetch request"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
    v8 = objc_msgSend(v7, "BOOLValue");

    if ((_DWORD)v8)
      v9 = CFSTR("CellStationManager: The given cellID %@ is FR2 Capable");
    else
      v9 = CFSTR("CellStationManager: The given cellID %@ is not FR2 Capable");
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v9, *(_QWORD *)(a1 + 32));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "private_queue_context"));
    objc_msgSend(v10, "reset");

    v11 = *(_QWORD *)(a1 + 48);
    if (v11)
      (*(void (**)(uint64_t, id))(v11 + 16))(v11, v8);

  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellStationManager: Error creating fetch request"));
    v12 = *(_QWORD *)(a1 + 48);
    if (v12)
      (*(void (**)(uint64_t, _QWORD))(v12 + 16))(v12, 0);
  }

}

void sub_100019350(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id sub_1000193FC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleSessionNotification:", *(_QWORD *)(a1 + 40));
}

id sub_100019408(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v3)
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 16, CFSTR("QMI.NAS.%d: failed to send EBH status message. Error %d %s"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), v3, qmi::asString(*(unsigned int *)(a2 + 4)));
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: Send fEBH message state."), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
}

id sub_100019498(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleSessionNotification:", *(_QWORD *)(a1 + 40));
}

id sub_1000194A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v3)
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 16, CFSTR("QMI.NAS.%d: failed to send AV status message. Error %d %s"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), v3, qmi::asString(*(unsigned int *)(a2 + 4)));
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: Send AVStatus message state."), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
}

void sub_100019534(uint64_t a1, _QWORD *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD v7[3];

  v2 = *(void **)(a1 + 32);
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v4 = a2[2];
  v7[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  objc_msgSend(v2, "handleBandwidthEstimationInd:", v7);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v7);
}

void sub_100019590(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000195A4()
{
  return sub_100019780();
}

uint64_t *sub_1000195AC(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10001974C(a2, a1 + 10);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

uint64_t sub_100019604()
{
  return sub_100019788();
}

_BYTE **sub_10001960C(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10001976C((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t sub_100019664(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (sub_100053534((uint64_t)a1, (tlv *)result, v7, a3))
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

BOOL sub_1000196F4(uint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  uint64_t v5;
  _BYTE v7[32];
  uint64_t v8;

  v8 = a2;
  sub_100098C58(&v8, a3, a4, (uint64_t)v7);
  v5 = v8;
  if (v8)
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  return v5 != 0;
}

uint64_t *sub_10001974C(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_BYTE *)v2 = *(_BYTE *)a2;
  *(_WORD *)(v2 + 1) = *(_WORD *)(a2 + 2);
  *result = v2 + 3;
  return result;
}

_BYTE **sub_10001976C(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t sub_100019780()
{
  return 6;
}

uint64_t sub_100019788()
{
  return 4;
}

qmi::ResponseBase *sub_100019790(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x5568u);
  return a1;
}

void sub_1000197BC(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1000197D0()
{
  operator new();
}

void sub_1000198F0()
{
  operator new();
}

char *sub_100019A0C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000197D0();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 10;
}

char *sub_100019A80(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000198F0();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_100019AF4()
{
  operator delete();
}

void sub_100019B08()
{
  operator delete();
}

void sub_100019B1C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_100019790(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000A2828((uint64_t)a2);
  }
}

void sub_100019BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10001A084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_10005294C((uint64_t *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v9 - 88));
  _Unwind_Resume(a1);
}

void sub_10001A1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_10005294C((uint64_t *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_10001A5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  uint64_t v66;

  _Block_object_dispose(&a66, 8);
  _Block_object_dispose((const void *)(v66 - 232), 8);
  _Block_object_dispose((const void *)(v66 - 200), 8);
  _Block_object_dispose((const void *)(v66 - 168), 8);
  _Block_object_dispose((const void *)(v66 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_10001BF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001C2B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10001C394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10001C6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v21 = v19;

  _Unwind_Resume(a1);
}

void sub_10001EEC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_10001EFCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001F070(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10001F1F8(void *a1, char *newValue)
{
  if (a1)
    objc_setProperty_nonatomic(a1, newValue, newValue, 8);
}

id *sub_10001F210(id *result)
{
  if (result)
    return (id *)objc_msgSend(result[1], "removeAllObjects");
  return result;
}

_QWORD *sub_10001F228(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  id v4;

  if (result)
  {
    v3 = result;
    v4 = (id)result[1];
    if (!v4)
    {
      v4 = objc_alloc_init((Class)NSMutableArray);
      v3[1] = v4;
    }
    return objc_msgSend(v4, "addObject:", a2);
  }
  return result;
}

id *sub_10001F280(id *result)
{
  if (result)
    return (id *)objc_msgSend(result[1], "count");
  return result;
}

id *sub_10001F298(id *result, uint64_t a2)
{
  if (result)
    return (id *)objc_msgSend(result[1], "objectAtIndex:", a2);
  return result;
}

uint64_t sub_10001F2B4()
{
  objc_opt_self();
  return objc_opt_class(DYNAMICRATSELECTIONDynamicRatSelectionMetrics);
}

uint64_t sub_10001F4A0(_QWORD *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  DYNAMICRATSELECTIONDynamicRatSelectionMetrics *v12;
  uint64_t result;
  _QWORD v14[2];

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      v12 = objc_alloc_init(DYNAMICRATSELECTIONDynamicRatSelectionMetrics);
      sub_10001F228(a1, (uint64_t)v12);

      v14[0] = 0;
      v14[1] = 0;
      if (!PBReaderPlaceMark(a2, v14) || (sub_10002DB20((uint64_t)v12, a2) & 1) == 0)
        return 0;
      PBReaderRecallMark(a2, v14);
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

_QWORD *sub_10001F764(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *i;

  if (result)
  {
    v3 = result;
    result = objc_msgSend((id)result[1], "count");
    if (result)
    {
      if (a2)
        objc_msgSend(*(id *)(a2 + 8), "removeAllObjects");
      result = objc_msgSend((id)v3[1], "count");
      if (result)
      {
        v4 = result;
        for (i = 0; i != v4; i = (_QWORD *)((char *)i + 1))
          result = sub_10001F228((_QWORD *)a2, (uint64_t)objc_msgSend((id)v3[1], "objectAtIndex:", i));
      }
    }
  }
  return result;
}

_QWORD *sub_10001F990(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  if (result)
  {
    v2 = result;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v3 = *(void **)(a2 + 8);
    result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    if (result)
    {
      v4 = result;
      v5 = *(_QWORD *)v8;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v8 != v5)
            objc_enumerationMutation(v3);
          sub_10001F228(v2, *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6));
          v6 = (_QWORD *)((char *)v6 + 1);
        }
        while (v4 != v6);
        result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
        v4 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t sub_10001FA84(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

void sub_10001FB1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001FB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10001FC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10001FCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10001FD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10001FDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10001FE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10001FF1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001FFC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10002006C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100020118(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000201C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100020710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_10002082C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100020A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

uint64_t sub_100020AA4(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

id sub_100020B08(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "clientStarted");
}

id sub_100020B10(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "clientStopped");
}

id sub_100020C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "UtaIdcCellConfigEventIndHandle:size:", a2, a3);
}

id sub_100020C68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "desenseCellConfigEventIndHandle:size:", a2, a3);
}

void sub_100020D80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t i;

  for (i = 16; i != -8; i -= 8)

  _Unwind_Resume(a1);
}

void sub_100020E9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100020F54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000210F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_100021220(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100021234(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleCoexManagerEvent:", *(_QWORD *)(a1 + 40));
}

void sub_1000215C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

id sub_10002167C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleGnssImdAntBlockPowerLimitConfig:", *(_QWORD *)(a1 + 40));
}

void sub_100021930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100021ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  void *v12;
  void *v13;
  uint64_t i;

  for (i = 16; i != -8; i -= 8)

  _Unwind_Resume(a1);
}

void sub_100021EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  AriSdk::ARI_UtaIdcConfigEventReq_SDK::~ARI_UtaIdcConfigEventReq_SDK((AriSdk::ARI_UtaIdcConfigEventReq_SDK *)va);
  AriSdk::ARI_UtaIdcConfigEventReq_SDK::~ARI_UtaIdcConfigEventReq_SDK((AriSdk::ARI_UtaIdcConfigEventReq_SDK *)(v16 - 120));
  _Unwind_Resume(a1);
}

void sub_100021F00()
{
  operator new();
}

void sub_100021F68()
{
  operator new();
}

void sub_100021FD0(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  _BYTE v10[72];
  unsigned int *v11;

  AriSdk::ARI_UtaIdcConfigEventRspCb_SDK::ARI_UtaIdcConfigEventRspCb_SDK((AriSdk::ARI_UtaIdcConfigEventRspCb_SDK *)v10, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x490A8000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1225424896, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcConfigEventRspCb_SDK::unpack((AriSdk::ARI_UtaIdcConfigEventRspCb_SDK *)v10))
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v9 = *v11;
      v7 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v9)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), 0, *(_QWORD *)(a1 + 40), v9);
        goto LABEL_6;
      }
      v8 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 0, v7);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), 0, *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcConfigEventRspCb_SDK::~ARI_UtaIdcConfigEventRspCb_SDK((AriSdk::ARI_UtaIdcConfigEventRspCb_SDK *)v10);
}

void sub_1000220D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcConfigEventRspCb_SDK::~ARI_UtaIdcConfigEventRspCb_SDK((AriSdk::ARI_UtaIdcConfigEventRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_1000220F0(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  _BYTE v10[72];
  unsigned int *v11;

  AriSdk::ARI_UtaIdcConfigEventRspCb_SDK::ARI_UtaIdcConfigEventRspCb_SDK((AriSdk::ARI_UtaIdcConfigEventRspCb_SDK *)v10, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x490A8000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1225424896, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcConfigEventRspCb_SDK::unpack((AriSdk::ARI_UtaIdcConfigEventRspCb_SDK *)v10))
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v9 = *v11;
      v7 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v9)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), 1, *(_QWORD *)(a1 + 40), v9);
        goto LABEL_6;
      }
      v8 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 1, v7);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), 1, *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcConfigEventRspCb_SDK::~ARI_UtaIdcConfigEventRspCb_SDK((AriSdk::ARI_UtaIdcConfigEventRspCb_SDK *)v10);
}

void sub_1000221FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcConfigEventRspCb_SDK::~ARI_UtaIdcConfigEventRspCb_SDK((AriSdk::ARI_UtaIdcConfigEventRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_1000227E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;

  AriSdk::ARI_UtaIdcSetTunerVoterConfigReq_SDK::~ARI_UtaIdcSetTunerVoterConfigReq_SDK((AriSdk::ARI_UtaIdcSetTunerVoterConfigReq_SDK *)&a28);

  _Unwind_Resume(a1);
}

void sub_100022828()
{
  operator new();
}

void sub_100022890(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49130000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1225981952, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK::~ARI_UtaIdcSetTunerVoterConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK *)v11);
}

void sub_100022994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK::~ARI_UtaIdcSetTunerVoterConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_1000229B4(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49130000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1225981952, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK::~ARI_UtaIdcSetTunerVoterConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK *)v11);
}

void sub_100022AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK::~ARI_UtaIdcSetTunerVoterConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTunerVoterConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100022BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100023164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  uint64_t v13;

  AriSdk::ARI_UtaIdcSetCameraStatusReq_SDK::~ARI_UtaIdcSetCameraStatusReq_SDK((AriSdk::ARI_UtaIdcSetCameraStatusReq_SDK *)(v13 - 216));

  _Unwind_Resume(a1);
}

void sub_1000231C8(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK::ARI_UtaIdcSetCameraStatusRspCb_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49108000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1225818112, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK::~ARI_UtaIdcSetCameraStatusRspCb_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK *)v11);
}

void sub_1000232D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK::~ARI_UtaIdcSetCameraStatusRspCb_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_1000232F4(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK::ARI_UtaIdcSetCameraStatusRspCb_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49108000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1225818112, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK::~ARI_UtaIdcSetCameraStatusRspCb_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK *)v11);
}

void sub_100023400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK::~ARI_UtaIdcSetCameraStatusRspCb_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100023420(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK::ARI_UtaIdcSetCameraStatusRspCb_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49108000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1225818112, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK::~ARI_UtaIdcSetCameraStatusRspCb_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK *)v11);
}

void sub_10002352C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK::~ARI_UtaIdcSetCameraStatusRspCb_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002354C(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK::ARI_UtaIdcSetCameraStatusRspCb_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49108000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1225818112, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK::~ARI_UtaIdcSetCameraStatusRspCb_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK *)v11);
}

void sub_100023658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK::~ARI_UtaIdcSetCameraStatusRspCb_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_1000236C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100023774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  AriSdk::ARI_UtaIdcGetLaaMeasInfoReq_SDK::~ARI_UtaIdcGetLaaMeasInfoReq_SDK((AriSdk::ARI_UtaIdcGetLaaMeasInfoReq_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002378C(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  const __CFString *v5;
  _DWORD *v6;
  uint64_t v7;
  xpc_object_t v8;
  _BYTE v9[64];
  unsigned int *v10;
  _DWORD *v11;
  _DWORD *v12;

  AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK((AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK *)v9, a2, a3);
  if (ice::isARIResponseValid((ice *)v9, (const AriSdk::MsgBase *)0x490B0000, v4))
  {
    if (AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK::unpack((AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK *)v9))
    {
      v5 = CFSTR("Coex ARI driver: Failed to get LAA Measurement Info (unpack error)");
    }
    else
    {
      if (!*v11)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver: get LAA Measurement Info (SUCCESS)"));
        v6 = v12;
        v7 = *v10;
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver: UtaIdcGetLaaMeasInfoRspCb SubId=%u\n"), v7);
        v8 = xpc_dictionary_create(0, 0, 0);
        xpc_dictionary_set_BOOL(v8, "kWCMCellularLaaMeasInfo_LaaMeasConfigured", *v6 != 0);
        objc_msgSend(*(id *)(a1 + 32), "sendMessage:withArgs:withSubId:", 1232, v8, v7);

        goto LABEL_8;
      }
      v5 = CFSTR("Coex ARI driver: Failed to get LAA Measurement Info (result error)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v5);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver: Failed to get LAA Measurement Info"));
  }
LABEL_8:
  AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK::~ARI_UtaIdcGetLaaMeasInfoRspCb_SDK((AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK *)v9);
}

void sub_1000238B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK::~ARI_UtaIdcGetLaaMeasInfoRspCb_SDK((AriSdk::ARI_UtaIdcGetLaaMeasInfoRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100023A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);
  AriSdk::ARI_UtaIdcConfigTxActParamReq_SDK::~ARI_UtaIdcConfigTxActParamReq_SDK((AriSdk::ARI_UtaIdcConfigTxActParamReq_SDK *)va);

  _Unwind_Resume(a1);
}

void sub_100023AAC()
{
  operator new();
}

void sub_100023B1C(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK::ARI_UtaIdcConfigTxActParamRspCb_SDK((AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49100000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1225785344, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK::unpack((AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK::~ARI_UtaIdcConfigTxActParamRspCb_SDK((AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK *)v11);
}

void sub_100023C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK::~ARI_UtaIdcConfigTxActParamRspCb_SDK((AriSdk::ARI_UtaIdcConfigTxActParamRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100023CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100023DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  AriSdk::ARI_UtaIdcConfigMiscParamReqV2_SDK::~ARI_UtaIdcConfigMiscParamReqV2_SDK((AriSdk::ARI_UtaIdcConfigMiscParamReqV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100023DF4(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK::ARI_UtaIdcConfigMiscParamRspCbV2_SDK((AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x491A8000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226473472, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK::~ARI_UtaIdcConfigMiscParamRspCbV2_SDK((AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK *)v11);
}

void sub_100023F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK::~ARI_UtaIdcConfigMiscParamRspCbV2_SDK((AriSdk::ARI_UtaIdcConfigMiscParamRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100024190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  va_list va;

  va_start(va, a14);
  AriSdk::ARI_UtaIdcSetTxAntMappingTableReq_SDK::~ARI_UtaIdcSetTxAntMappingTableReq_SDK((AriSdk::ARI_UtaIdcSetTxAntMappingTableReq_SDK *)va);

  _Unwind_Resume(a1);
}

void sub_1000241F4(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK((AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49110000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1225850880, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK::~ARI_UtaIdcSetTxAntMappingTableRspCb_SDK((AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK *)v11);
}

void sub_1000242F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK::~ARI_UtaIdcSetTxAntMappingTableRspCb_SDK((AriSdk::ARI_UtaIdcSetTxAntMappingTableRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100024B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  void *v68;
  void *v69;
  void *v70;

  AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxReqV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiRxReqV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxReqV3_SDK *)&a26);
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxReqV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiTxReqV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxReqV3_SDK *)&a36);
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxReqV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiRxReqV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxReqV3_SDK *)&a58);
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxReqV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiTxReqV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxReqV3_SDK *)&a68);

  _Unwind_Resume(a1);
}

void sub_100024C58()
{
  operator new();
}

void sub_100024CCC(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  _BYTE v10[72];
  unsigned int *v11;

  AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK *)v10, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x49198000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226407936, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK::unpack((AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK *)v10))
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v9 = *v11;
      v7 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v9)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), 0, *(_QWORD *)(a1 + 40), v9);
        goto LABEL_6;
      }
      v8 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 0, v7);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), 0, *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK *)v10);
}

void sub_100024DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100024DEC(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  _BYTE v10[72];
  unsigned int *v11;

  AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK *)v10, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x491A0000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226440704, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK::unpack((AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK *)v10))
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v9 = *v11;
      v7 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v9)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), 0, *(_QWORD *)(a1 + 40), v9);
        goto LABEL_6;
      }
      v8 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 0, v7);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), 0, *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK *)v10);
}

void sub_100024EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100024F04(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  _BYTE v10[72];
  unsigned int *v11;

  AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK *)v10, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x49198000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226407936, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK::unpack((AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK *)v10))
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v9 = *v11;
      v7 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v9)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), 1, *(_QWORD *)(a1 + 40), v9);
        goto LABEL_6;
      }
      v8 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 1, v7);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), 1, *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK *)v10);
}

void sub_100025010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiTxRspCbV3_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100025030(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  _BYTE v10[72];
  unsigned int *v11;

  AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK *)v10, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x491A0000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226440704, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK::unpack((AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK *)v10))
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v9 = *v11;
      v7 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v9)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), 1, *(_QWORD *)(a1 + 40), v9);
        goto LABEL_6;
      }
      v8 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 1, v7);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), 1, *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK *)v10);
}

void sub_100025134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK::~ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK((AriSdk::ARI_UtaIdcSetRTFeatureSpmiRxRspCbV3_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002559C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigReq_SDK::~ARI_UtaIdcSetCnvAntBlockPwrLmtConfigReq_SDK((AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigReq_SDK *)&a32);

  _Unwind_Resume(a1);
}

void sub_100025624()
{
  operator new();
}

void sub_100025698(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49138000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226014720, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK::~ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK *)v11);
}

void sub_1000257A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK::~ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCnvAntBlockPwrLmtConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100025B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void sub_100025E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a11);
  AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigReqV2_SDK::~ARI_UtaIdcSetCamAntBlockPwrLmtConfigReqV2_SDK((AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigReqV2_SDK *)va);

  _Unwind_Resume(a1);
}

void sub_100025EB4()
{
  JUMPOUT(0x100025EA4);
}

void sub_100025EBC()
{
  JUMPOUT(0x100025EA8);
}

void sub_100025EC4()
{
  operator new();
}

void sub_100025F38(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV2_SDK::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV2_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49180000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226309632, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV2_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV2_SDK::~ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV2_SDK *)v11);
}

void sub_10002603C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV2_SDK::~ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100026640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;

  AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigReqV2_SDK::~ARI_UtaIdcSetUwbAntBlockPwrLmtConfigReqV2_SDK((AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigReqV2_SDK *)&a33);

  _Unwind_Resume(a1);
}

void sub_1000266FC()
{
  operator new();
}

void sub_100026770(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49140000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226047488, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK::~ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK *)v11);
}

void sub_100026874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK::~ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetUwbAntBlockPwrLmtConfigRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100026C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigReq_SDK::~ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigReq_SDK((AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigReq_SDK *)&a28);

  _Unwind_Resume(a1);
}

void sub_100026CDC()
{
  operator new();
}

void sub_100026D50(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49178000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226276864, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK::~ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK *)v11);
}

void sub_100026E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK::~ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetUsbEnhAntBlockPwrLmtPolicyConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_1000271A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  AriSdk::ARI_UtaIdcSetTimeSharingConfigReq_SDK::~ARI_UtaIdcSetTimeSharingConfigReq_SDK((AriSdk::ARI_UtaIdcSetTimeSharingConfigReq_SDK *)&a27);

  _Unwind_Resume(a1);
}

void sub_10002721C()
{
  operator new();
}

void sub_100027294(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x490F0000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1225719808, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK::~ARI_UtaIdcSetTimeSharingConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK *)v11);
}

void sub_100027398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK::~ARI_UtaIdcSetTimeSharingConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTimeSharingConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_1000275C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{

  _Unwind_Resume(a1);
}

void sub_100027800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{

  _Unwind_Resume(a1);
}

void sub_100027C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  AriSdk::ARI_UtaIdcSetCriticalCarrierConfigReqV2_SDK::~ARI_UtaIdcSetCriticalCarrierConfigReqV2_SDK((AriSdk::ARI_UtaIdcSetCriticalCarrierConfigReqV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100027C50()
{
  operator new();
}

void sub_100027CC0(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49168000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226211328, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK::~ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK *)v11);
}

void sub_100027DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK::~ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCriticalCarrierConfigRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100028204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  void *v39;
  uint64_t v40;

  AriSdk::ARI_UtaIdcSetTxBlankingConfigReq_SDK::~ARI_UtaIdcSetTxBlankingConfigReq_SDK((AriSdk::ARI_UtaIdcSetTxBlankingConfigReq_SDK *)&a39);
  AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigReq_SDK::~ARI_UtaIdcSetTxPowerLimitingConfigReq_SDK((AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigReq_SDK *)(v40 - 224));

  _Unwind_Resume(a1);
}

void sub_100028288()
{
  operator new();
}

void sub_1000282F8()
{
  operator new();
}

void sub_100028360(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x490D0000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1225588736, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK::~ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK *)v11);
}

void sub_100028464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK::~ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTxPowerLimitingConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100028484(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x490C8000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1225555968, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK::~ARI_UtaIdcSetTxBlankingConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK *)v11);
}

void sub_100028590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK::~ARI_UtaIdcSetTxBlankingConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTxBlankingConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100028774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  AriSdk::ARI_UtaIdcRTSetScanFreqReqV2_SDK::~ARI_UtaIdcRTSetScanFreqReqV2_SDK((AriSdk::ARI_UtaIdcRTSetScanFreqReqV2_SDK *)va);

  _Unwind_Resume(a1);
}

void sub_1000287BC()
{
  operator new();
}

void sub_100028854(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK((AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x49158000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226145792, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK::~ARI_UtaIdcRTSetScanFreqRspCbV2_SDK((AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK *)v11);
}

void sub_100028960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK::~ARI_UtaIdcRTSetScanFreqRspCbV2_SDK((AriSdk::ARI_UtaIdcRTSetScanFreqRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100028CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  AriSdk::ARI_UtaIdcSetLaaConfigReq_SDK::~ARI_UtaIdcSetLaaConfigReq_SDK((AriSdk::ARI_UtaIdcSetLaaConfigReq_SDK *)va);

  _Unwind_Resume(a1);
}

void sub_100028CF4()
{
  operator new();
}

void sub_100028D5C(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK::ARI_UtaIdcSetLaaConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x490E0000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1225654272, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK::~ARI_UtaIdcSetLaaConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK *)v11);
}

void sub_100028E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK::~ARI_UtaIdcSetLaaConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_1000291B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  va_list va;

  va_start(va, a12);
  AriSdk::ARI_UtaIdcSetLaaConfigReq_SDK::~ARI_UtaIdcSetLaaConfigReq_SDK((AriSdk::ARI_UtaIdcSetLaaConfigReq_SDK *)va);

  _Unwind_Resume(a1);
}

void sub_1000291FC(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK::ARI_UtaIdcSetLaaConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x490E0000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1225654272, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK::~ARI_UtaIdcSetLaaConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK *)v11);
}

void sub_100029300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK::~ARI_UtaIdcSetLaaConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetLaaConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100029580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_100029720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100029A8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100029B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  AriSdk::ARI_UtaIdcGetCellConfigReq_SDK::~ARI_UtaIdcGetCellConfigReq_SDK((AriSdk::ARI_UtaIdcGetCellConfigReq_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100029B98(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  const __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _BYTE v9[64];
  unsigned int *v10;
  _DWORD *v11;
  uint64_t v12;

  AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK::ARI_UtaIdcGetCellConfigRspCb_SDK((AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK *)v9, a2, a3);
  if (ice::isARIResponseValid((ice *)v9, (const AriSdk::MsgBase *)0x490A0000, v4))
  {
    if (AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK *)v9))
    {
      v5 = CFSTR("Coex ARI driver: Failed to get cell config (unpack error)");
    }
    else
    {
      if (!*v11)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver: get cell config (SUCCESS)"));
        v6 = v12;
        v7 = *v10;
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver: UtaIdcGetCellConfigRspCb SubId=%u\n"), v7);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "assembleCellularConfigXpcMsg:", v6));
        objc_msgSend(*(id *)(a1 + 32), "sendMessage:withArgs:withSubId:", 300, v8, v7);

        goto LABEL_8;
      }
      v5 = CFSTR("Coex ARI driver: Failed to get cell config (result error)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v5);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver: Failed to get cell config"));
  }
LABEL_8:
  AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK::~ARI_UtaIdcGetCellConfigRspCb_SDK((AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK *)v9);
}

void sub_100029CA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK::~ARI_UtaIdcGetCellConfigRspCb_SDK((AriSdk::ARI_UtaIdcGetCellConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100029DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);

  AriSdk::ARI_UtaIdcCellConfigEventIndCb_SDK::~ARI_UtaIdcCellConfigEventIndCb_SDK((AriSdk::ARI_UtaIdcCellConfigEventIndCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100029F84(_Unwind_Exception *a1)
{
  uint64_t v1;

  AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK::~ARI_IBIMsAccCurrentFreqInfoReq_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_100029FAC(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  _BYTE v10[72];
  unsigned int *v11;

  AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)v10, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x25100000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 621805568, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::unpack((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)v10))
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v9 = *v11;
      v7 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v9)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), 0, *(_QWORD *)(a1 + 40), v9);
        goto LABEL_6;
      }
      v8 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 0, v7);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), 0, *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::~ARI_IBIMsAccCurrentFreqInfoRspCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)v10);
}

void sub_10002A0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::~ARI_IBIMsAccCurrentFreqInfoRspCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002A0C4(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  _BYTE v10[72];
  unsigned int *v11;

  AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)v10, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x25100000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 621805568, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::unpack((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)v10))
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v9 = *v11;
      v7 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v9)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), 1, *(_QWORD *)(a1 + 40), v9);
        goto LABEL_6;
      }
      v8 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 1, v7);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), 1, *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::~ARI_IBIMsAccCurrentFreqInfoRspCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)v10);
}

void sub_10002A1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::~ARI_IBIMsAccCurrentFreqInfoRspCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002A1E8(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _BYTE v10[64];
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)v10, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x25100000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 621805568, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::unpack((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)v10))
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver: Failed to set %s (unpack error)"), *(_QWORD *)(a1 + 40));
    }
    else
    {
      v7 = *v12;
      if ((_DWORD)v7)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver: Failed to set %s (error = %d)"), *(_QWORD *)(a1 + 40), v7);
      }
      else
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver: Set %s (SUCCESS)"), *(_QWORD *)(a1 + 40));
        v8 = *v11;
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "assembleDesenseCellularConfigXpcMsgwithDownlinkFreq:DownlinkFreqExt:UlFreq:UplinkFreqExt:SearchFreq:HoppingFreq:NeighborFreq:RPLMNFreq:", v13, v19, v14, v20, v15, v16, v17, v18));
        objc_msgSend(*(id *)(a1 + 32), "sendMessage:withArgs:withSubId:", 399, v9, v8);

      }
    }
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver: Failed to set %s, invalid response (NACK or wrong GMID)"), *(_QWORD *)(a1 + 40));
  }
  AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::~ARI_IBIMsAccCurrentFreqInfoRspCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)v10);
}

void sub_10002A334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::~ARI_IBIMsAccCurrentFreqInfoRspCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002A454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_10002A80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_10002A98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::~ARI_IBIMsAccCurrentFreqInfoIndCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002B958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  void *v57;

  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigReq_SDK::~ARI_UtaIdcSetTunerArbitrationConfigReq_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigReq_SDK *)&a25);
  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigReq_SDK::~ARI_UtaIdcSetTunerArbitrationConfigReq_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigReq_SDK *)&a41);
  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK::~ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK *)&a57);
  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK::~ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK *)&STACK[0x200]);

  _Unwind_Resume(a1);
}

void sub_10002BBD0()
{
  operator new();
}

void sub_10002BC44(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  _BYTE v10[72];
  unsigned int *v11;

  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)v10, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x49188000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226342400, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)v10))
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v9 = *v11;
      v7 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v9)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), 0, *(_QWORD *)(a1 + 40), v9);
        goto LABEL_6;
      }
      v8 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 0, v7);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), 0, *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::~ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)v10);
}

void sub_10002BD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::~ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002BD64(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  _BYTE v10[72];
  unsigned int *v11;

  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)v10, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x49188000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226342400, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)v10))
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v9 = *v11;
      v7 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v9)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), 1, *(_QWORD *)(a1 + 40), v9);
        goto LABEL_6;
      }
      v8 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 1, v7);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), 1, *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::~ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)v10);
}

void sub_10002BE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::~ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002BE90(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  _BYTE v10[72];
  unsigned int *v11;

  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCb_SDK::ARI_UtaIdcSetTunerArbitrationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCb_SDK *)v10, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x49190000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226375168, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCb_SDK *)v10))
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v9 = *v11;
      v7 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v9)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), 0, *(_QWORD *)(a1 + 40), v9);
        goto LABEL_6;
      }
      v8 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 0, v7);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), 0, *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCb_SDK::~ARI_UtaIdcSetTunerArbitrationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCb_SDK *)v10);
}

void sub_10002BF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCb_SDK::~ARI_UtaIdcSetTunerArbitrationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10002BFA8(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  _BYTE v10[72];
  unsigned int *v11;

  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCb_SDK::ARI_UtaIdcSetTunerArbitrationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCb_SDK *)v10, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x49190000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226375168, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCb_SDK *)v10))
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v9 = *v11;
      v7 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v9)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), 1, *(_QWORD *)(a1 + 40), v9);
        goto LABEL_6;
      }
      v8 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 1, v7);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), 1, *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCb_SDK::~ARI_UtaIdcSetTunerArbitrationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCb_SDK *)v10);
}

void sub_10002C0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCb_SDK::~ARI_UtaIdcSetTunerArbitrationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10002C140@<X0>(id *a1@<X1>, OS_dispatch_object *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x28uLL);
  result = sub_10002C1A0(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_10002C18C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10002C1A0(_QWORD *a1, id *a2, OS_dispatch_object *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100201920;
  sub_10002C24C((uint64_t)&v5, (_DWORD)a1 + 24, a2, a3);
  return a1;
}

void sub_10002C1EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10002C200(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100201920;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10002C210(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100201920;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10002C240(uint64_t a1)
{
  return sub_10002C2C4(a1 + 24);
}

void sub_10002C24C(uint64_t a1, int a2, id *a3, OS_dispatch_object *a4)
{
  queue v6;
  id v7;
  id v8;

  v8 = *a3;
  v6.fObj.fObj = a4;
  sub_1000CA88C(a2, (int)&v8, v6);
  v7 = v8;
  v8 = 0;

}

void sub_10002C2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_10002C2C4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_10002C31C()
{
  void *v0;
  _QWORD v1[24];
  _QWORD v2[24];

  v0 = objc_autoreleasePoolPush();
  v1[0] = &off_10022F178;
  v1[1] = &off_10022F1A8;
  v2[0] = &off_10022F190;
  v2[1] = &off_10022F190;
  v1[2] = &off_10022F1C0;
  v1[3] = &off_10022F1D8;
  v2[2] = &off_10022F190;
  v2[3] = &off_10022F1F0;
  v1[4] = &off_10022F208;
  v1[5] = &off_10022F220;
  v2[4] = &off_10022F1F0;
  v2[5] = &off_10022F1F0;
  v1[6] = &off_10022F238;
  v1[7] = &off_10022F250;
  v2[6] = &off_10022F1F0;
  v2[7] = &off_10022F1F0;
  v1[8] = &off_10022F268;
  v1[9] = &off_10022F280;
  v2[8] = &off_10022F1F0;
  v2[9] = &off_10022F1F0;
  v1[10] = &off_10022F298;
  v1[11] = &off_10022F2B0;
  v2[10] = &off_10022F1F0;
  v2[11] = &off_10022F1F0;
  v1[12] = &off_10022F2C8;
  v1[13] = &off_10022F2E0;
  v2[12] = &off_10022F1F0;
  v2[13] = &off_10022F2F8;
  v1[14] = &off_10022F310;
  v1[15] = &off_10022F340;
  v2[14] = &off_10022F328;
  v2[15] = &off_10022F358;
  v1[16] = &off_10022F370;
  v1[17] = &off_10022F388;
  v2[16] = &off_10022F358;
  v2[17] = &off_10022F3A0;
  v1[18] = &off_10022F3B8;
  v1[19] = &off_10022F3E8;
  v2[18] = &off_10022F3D0;
  v2[19] = &off_10022F400;
  v1[20] = &off_10022F418;
  v1[21] = &off_10022F430;
  v2[20] = &off_10022F400;
  v2[21] = &off_10022F448;
  v1[22] = &off_10022F460;
  v1[23] = &off_10022F490;
  v2[22] = &off_10022F478;
  v2[23] = &off_10022F478;
  qword_100270EC0 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v2, v1, 24));
  objc_autoreleasePoolPop(v0);
}

void sub_10002C578(void *a1, char *newValue)
{
  if (a1)
    objc_setProperty_nonatomic(a1, newValue, newValue, 8);
}

void sub_10002C590(void *a1, char *newValue)
{
  if (a1)
    objc_setProperty_nonatomic(a1, newValue, newValue, 16);
}

id *sub_10002C5A8(id *result)
{
  if (result)
    return (id *)objc_msgSend(result[1], "removeAllObjects");
  return result;
}

_QWORD *sub_10002C5C0(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  id v4;

  if (result)
  {
    v3 = result;
    v4 = (id)result[1];
    if (!v4)
    {
      v4 = objc_alloc_init((Class)NSMutableArray);
      v3[1] = v4;
    }
    return objc_msgSend(v4, "addObject:", a2);
  }
  return result;
}

id *sub_10002C618(id *result)
{
  if (result)
    return (id *)objc_msgSend(result[1], "count");
  return result;
}

id *sub_10002C630(id *result, uint64_t a2)
{
  if (result)
    return (id *)objc_msgSend(result[1], "objectAtIndex:", a2);
  return result;
}

uint64_t sub_10002C64C()
{
  objc_opt_self();
  return objc_opt_class(CellPerformanceMetrics);
}

id *sub_10002C668(id *result)
{
  if (result)
    return (id *)objc_msgSend(result[2], "removeAllObjects");
  return result;
}

_QWORD *sub_10002C680(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  id v4;

  if (result)
  {
    v3 = result;
    v4 = (id)result[2];
    if (!v4)
    {
      v4 = objc_alloc_init((Class)NSMutableArray);
      v3[2] = v4;
    }
    return objc_msgSend(v4, "addObject:", a2);
  }
  return result;
}

id *sub_10002C6D8(id *result)
{
  if (result)
    return (id *)objc_msgSend(result[2], "count");
  return result;
}

id *sub_10002C6F0(id *result, uint64_t a2)
{
  if (result)
    return (id *)objc_msgSend(result[2], "objectAtIndex:", a2);
  return result;
}

uint64_t sub_10002C9C4(_QWORD *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  CellPerformanceMetrics *v12;
  uint64_t result;
  _QWORD v14[2];

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    if ((v6 >> 3) == 2)
    {
      v12 = objc_alloc_init(CellPerformanceMetrics);
      sub_10002C680(a1, (uint64_t)v12);
    }
    else
    {
      if ((v6 >> 3) != 1)
      {
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
      }
      v12 = objc_alloc_init(CellPerformanceMetrics);
      sub_10002C5C0(a1, (uint64_t)v12);
    }

    v14[0] = 0;
    v14[1] = 0;
    if (!PBReaderPlaceMark(a2, v14) || (sub_10002F5EC((uint64_t)v12, a2) & 1) == 0)
      return 0;
    PBReaderRecallMark(a2, v14);
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

_QWORD *sub_10002CD4C(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  char *v4;
  char *v5;
  char *i;
  _QWORD *v7;
  _QWORD *j;

  if (result)
  {
    v3 = result;
    if (objc_msgSend((id)result[1], "count"))
    {
      if (a2)
        objc_msgSend(*(id *)(a2 + 8), "removeAllObjects");
      v4 = (char *)objc_msgSend((id)v3[1], "count");
      if (v4)
      {
        v5 = v4;
        for (i = 0; i != v5; ++i)
          sub_10002C5C0((_QWORD *)a2, (uint64_t)objc_msgSend((id)v3[1], "objectAtIndex:", i));
      }
    }
    result = objc_msgSend((id)v3[2], "count");
    if (result)
    {
      if (a2)
        objc_msgSend(*(id *)(a2 + 16), "removeAllObjects");
      result = objc_msgSend((id)v3[2], "count");
      if (result)
      {
        v7 = result;
        for (j = 0; j != v7; j = (_QWORD *)((char *)j + 1))
          result = sub_10002C680((_QWORD *)a2, (uint64_t)objc_msgSend((id)v3[2], "objectAtIndex:", j));
      }
    }
  }
  return result;
}

_QWORD *sub_10002D0DC(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  _BYTE v22[128];

  if (result)
  {
    v3 = result;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v4 = *(void **)(a2 + 8);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v18;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v18 != v7)
            objc_enumerationMutation(v4);
          sub_10002C5C0(v3, *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i));
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
      }
      while (v6);
    }
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v9 = *(void **)(a2 + 16);
    result = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v13, v21, 16);
    if (result)
    {
      v10 = result;
      v11 = *(_QWORD *)v14;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v14 != v11)
            objc_enumerationMutation(v9);
          sub_10002C680(v3, *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v12));
          v12 = (_QWORD *)((char *)v12 + 1);
        }
        while (v10 != v12);
        result = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v13, v21, 16);
        v10 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t sub_10002D26C(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

uint64_t sub_10002D280(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

uint64_t sub_10002D294(uint64_t result)
{
  if (result)
  {
    if ((*(_WORD *)(result + 44) & 0x40) != 0)
      return *(unsigned int *)(result + 32);
    else
      return 0;
  }
  return result;
}

uint64_t sub_10002D2C0(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 44) |= 0x40u;
    *(_DWORD *)(result + 32) = a2;
  }
  return result;
}

uint64_t sub_10002D2E8(uint64_t result, int a2)
{
  __int16 v2;

  if (result)
  {
    if (a2)
      v2 = 64;
    else
      v2 = 0;
    *(_WORD *)(result + 44) = *(_WORD *)(result + 44) & 0xFFBF | v2;
  }
  return result;
}

uint64_t sub_10002D314(uint64_t result)
{
  if (result)
    return (*(unsigned __int16 *)(result + 44) >> 6) & 1;
  return result;
}

__CFString *sub_10002D32C(__CFString *result, uint64_t a2)
{
  if (result)
  {
    if (a2 >= 4)
      return (__CFString *)+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), a2);
    else
      return off_100201980[(int)a2];
  }
  return result;
}

uint64_t sub_10002D378(uint64_t result, void *a2)
{
  if (result)
  {
    if ((objc_msgSend(a2, "isEqualToString:", CFSTR("DYNAMIC_RAT_SELECTION_RAT_TYPE_UNKNOWN")) & 1) != 0)
    {
      return 0;
    }
    else if ((objc_msgSend(a2, "isEqualToString:", CFSTR("DYNAMIC_RAT_SELECTION_RAT_TYPE_LTE")) & 1) != 0)
    {
      return 1;
    }
    else if ((objc_msgSend(a2, "isEqualToString:", CFSTR("DYNAMIC_RAT_SELECTION_RAT_TYPE_NR_SA")) & 1) != 0)
    {
      return 2;
    }
    else if (objc_msgSend(a2, "isEqualToString:", CFSTR("DYNAMIC_RAT_SELECTION_RAT_TYPE_NR_NSA")))
    {
      return 3;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10002D408(uint64_t result)
{
  if (result)
  {
    if ((*(_WORD *)(result + 44) & 2) != 0)
      return *(unsigned int *)(result + 12);
    else
      return 0;
  }
  return result;
}

uint64_t sub_10002D434(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 44) |= 2u;
    *(_DWORD *)(result + 12) = a2;
  }
  return result;
}

uint64_t sub_10002D45C(uint64_t result, int a2)
{
  __int16 v2;

  if (result)
  {
    if (a2)
      v2 = 2;
    else
      v2 = 0;
    *(_WORD *)(result + 44) = *(_WORD *)(result + 44) & 0xFFFD | v2;
  }
  return result;
}

uint64_t sub_10002D488(uint64_t result)
{
  if (result)
    return (*(unsigned __int16 *)(result + 44) >> 1) & 1;
  return result;
}

__CFString *sub_10002D4A0(__CFString *result, uint64_t a2)
{
  if (result)
  {
    if (a2 >= 3)
      return (__CFString *)+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), a2);
    else
      return off_1002019A0[(int)a2];
  }
  return result;
}

uint64_t sub_10002D4EC(uint64_t result, void *a2)
{
  if (result)
  {
    if ((objc_msgSend(a2, "isEqualToString:", CFSTR("DYNAMIC_RAT_SELECTION_BB_CHIPSET_TYPE_UNKNOWN")) & 1) != 0)
    {
      return 0;
    }
    else if ((objc_msgSend(a2, "isEqualToString:", CFSTR("DYNAMIC_RAT_SELECTION_BB_CHIPSET_TYPE_MAV21_22")) & 1) != 0)
    {
      return 1;
    }
    else if (objc_msgSend(a2, "isEqualToString:", CFSTR("DYNAMIC_RAT_SELECTION_BB_CHIPSET_TYPE_MAV30")))
    {
      return 2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10002D560(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 44) |= 0x10u;
    *(_DWORD *)(result + 24) = a2;
  }
  return result;
}

uint64_t sub_10002D588(uint64_t result, int a2)
{
  __int16 v2;

  if (result)
  {
    if (a2)
      v2 = 16;
    else
      v2 = 0;
    *(_WORD *)(result + 44) = *(_WORD *)(result + 44) & 0xFFEF | v2;
  }
  return result;
}

uint64_t sub_10002D5B4(uint64_t result)
{
  if (result)
    return (*(unsigned __int16 *)(result + 44) >> 4) & 1;
  return result;
}

uint64_t sub_10002D5CC(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 44) |= 0x20u;
    *(_DWORD *)(result + 28) = a2;
  }
  return result;
}

uint64_t sub_10002D5F4(uint64_t result, int a2)
{
  __int16 v2;

  if (result)
  {
    if (a2)
      v2 = 32;
    else
      v2 = 0;
    *(_WORD *)(result + 44) = *(_WORD *)(result + 44) & 0xFFDF | v2;
  }
  return result;
}

uint64_t sub_10002D620(uint64_t result)
{
  if (result)
    return (*(unsigned __int16 *)(result + 44) >> 5) & 1;
  return result;
}

uint64_t sub_10002D638(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 44) |= 1u;
    *(_DWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_10002D660(uint64_t result, __int16 a2)
{
  if (result)
    *(_WORD *)(result + 44) = *(_WORD *)(result + 44) & 0xFFFE | a2;
  return result;
}

uint64_t sub_10002D680(uint64_t result)
{
  if (result)
    return *(_WORD *)(result + 44) & 1;
  return result;
}

uint64_t sub_10002D698(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 44) |= 8u;
    *(_DWORD *)(result + 20) = a2;
  }
  return result;
}

uint64_t sub_10002D6C0(uint64_t result, int a2)
{
  __int16 v2;

  if (result)
  {
    if (a2)
      v2 = 8;
    else
      v2 = 0;
    *(_WORD *)(result + 44) = *(_WORD *)(result + 44) & 0xFFF7 | v2;
  }
  return result;
}

uint64_t sub_10002D6EC(uint64_t result)
{
  if (result)
    return (*(unsigned __int16 *)(result + 44) >> 3) & 1;
  return result;
}

uint64_t sub_10002D704(uint64_t result, char a2)
{
  if (result)
  {
    *(_WORD *)(result + 44) |= 0x100u;
    *(_BYTE *)(result + 40) = a2;
  }
  return result;
}

uint64_t sub_10002D72C(uint64_t result, int a2)
{
  __int16 v2;

  if (result)
  {
    if (a2)
      v2 = 256;
    else
      v2 = 0;
    *(_WORD *)(result + 44) = *(_WORD *)(result + 44) & 0xFEFF | v2;
  }
  return result;
}

uint64_t sub_10002D758(uint64_t result)
{
  if (result)
    return HIBYTE(*(unsigned __int16 *)(result + 44)) & 1;
  return result;
}

uint64_t sub_10002D770(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 44) |= 0x80u;
    *(_DWORD *)(result + 36) = a2;
  }
  return result;
}

uint64_t sub_10002D798(uint64_t result, int a2)
{
  __int16 v2;

  if (result)
  {
    if (a2)
      v2 = 128;
    else
      v2 = 0;
    *(_WORD *)(result + 44) = *(_WORD *)(result + 44) & 0xFF7F | v2;
  }
  return result;
}

uint64_t sub_10002D7C4(uint64_t result)
{
  if (result)
    return (*(unsigned __int16 *)(result + 44) >> 7) & 1;
  return result;
}

uint64_t sub_10002D7DC(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 44) |= 4u;
    *(_DWORD *)(result + 16) = a2;
  }
  return result;
}

uint64_t sub_10002D804(uint64_t result, int a2)
{
  __int16 v2;

  if (result)
  {
    if (a2)
      v2 = 4;
    else
      v2 = 0;
    *(_WORD *)(result + 44) = *(_WORD *)(result + 44) & 0xFFFB | v2;
  }
  return result;
}

uint64_t sub_10002D830(uint64_t result)
{
  if (result)
    return (*(unsigned __int16 *)(result + 44) >> 2) & 1;
  return result;
}

uint64_t sub_10002DB20(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  uint64_t v51;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_WORD *)(a1 + 44) |= 0x40u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_84;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_86;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_84:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_86:
        v51 = 32;
        goto LABEL_119;
      case 2u:
        v18 = 0;
        v19 = 0;
        v14 = 0;
        *(_WORD *)(a1 + 44) |= 2u;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_90;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_90:
        v51 = 12;
        goto LABEL_119;
      case 3u:
        v22 = 0;
        v23 = 0;
        v14 = 0;
        *(_WORD *)(a1 + 44) |= 0x10u;
        while (2)
        {
          v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v14 |= (unint64_t)(v25 & 0x7F) << v22;
            if (v25 < 0)
            {
              v22 += 7;
              v9 = v23++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_94;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_94:
        v51 = 24;
        goto LABEL_119;
      case 4u:
        v26 = 0;
        v27 = 0;
        v14 = 0;
        *(_WORD *)(a1 + 44) |= 0x20u;
        while (2)
        {
          v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v14 |= (unint64_t)(v29 & 0x7F) << v26;
            if (v29 < 0)
            {
              v26 += 7;
              v9 = v27++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_98;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_98:
        v51 = 28;
        goto LABEL_119;
      case 5u:
        v30 = 0;
        v31 = 0;
        v14 = 0;
        *(_WORD *)(a1 + 44) |= 1u;
        while (2)
        {
          v32 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v32 == -1 || v32 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32 + 1;
            v14 |= (unint64_t)(v33 & 0x7F) << v30;
            if (v33 < 0)
            {
              v30 += 7;
              v9 = v31++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_102;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_102:
        v51 = 8;
        goto LABEL_119;
      case 6u:
        v34 = 0;
        v35 = 0;
        v14 = 0;
        *(_WORD *)(a1 + 44) |= 8u;
        while (2)
        {
          v36 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36 + 1;
            v14 |= (unint64_t)(v37 & 0x7F) << v34;
            if (v37 < 0)
            {
              v34 += 7;
              v9 = v35++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_106;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_106:
        v51 = 20;
        goto LABEL_119;
      case 7u:
        v38 = 0;
        v39 = 0;
        v40 = 0;
        *(_WORD *)(a1 + 44) |= 0x100u;
        while (2)
        {
          v41 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v41 == -1 || v41 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41 + 1;
            v40 |= (unint64_t)(v42 & 0x7F) << v38;
            if (v42 < 0)
            {
              v38 += 7;
              v9 = v39++ >= 9;
              if (v9)
              {
                v40 = 0;
                goto LABEL_110;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v40 = 0;
LABEL_110:
        *(_BYTE *)(a1 + 40) = v40 != 0;
        continue;
      case 8u:
        v43 = 0;
        v44 = 0;
        v14 = 0;
        *(_WORD *)(a1 + 44) |= 0x80u;
        while (2)
        {
          v45 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v45 == -1 || v45 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v46 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v45);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45 + 1;
            v14 |= (unint64_t)(v46 & 0x7F) << v43;
            if (v46 < 0)
            {
              v43 += 7;
              v9 = v44++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_114;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_114:
        v51 = 36;
        goto LABEL_119;
      case 9u:
        v47 = 0;
        v48 = 0;
        v14 = 0;
        *(_WORD *)(a1 + 44) |= 4u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v49 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v49 == -1 || v49 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v50 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v49 + 1;
      v14 |= (unint64_t)(v50 & 0x7F) << v47;
      if ((v50 & 0x80) == 0)
        goto LABEL_116;
      v47 += 7;
      v9 = v48++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_118;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_116:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v14) = 0;
LABEL_118:
    v51 = 16;
LABEL_119:
    *(_DWORD *)(a1 + v51) = v14;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10002E3D8(uint64_t result, uint64_t a2)
{
  __int16 v2;

  if (result)
  {
    v2 = *(_WORD *)(result + 44);
    if ((v2 & 0x40) != 0)
    {
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32);
      *(_WORD *)(a2 + 44) |= 0x40u;
      v2 = *(_WORD *)(result + 44);
      if ((v2 & 2) == 0)
      {
LABEL_4:
        if ((v2 & 0x10) == 0)
          goto LABEL_5;
        goto LABEL_15;
      }
    }
    else if ((v2 & 2) == 0)
    {
      goto LABEL_4;
    }
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(result + 12);
    *(_WORD *)(a2 + 44) |= 2u;
    v2 = *(_WORD *)(result + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_5:
      if ((v2 & 0x20) == 0)
        goto LABEL_6;
      goto LABEL_16;
    }
LABEL_15:
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
    *(_WORD *)(a2 + 44) |= 0x10u;
    v2 = *(_WORD *)(result + 44);
    if ((v2 & 0x20) == 0)
    {
LABEL_6:
      if ((v2 & 1) == 0)
        goto LABEL_7;
      goto LABEL_17;
    }
LABEL_16:
    *(_DWORD *)(a2 + 28) = *(_DWORD *)(result + 28);
    *(_WORD *)(a2 + 44) |= 0x20u;
    v2 = *(_WORD *)(result + 44);
    if ((v2 & 1) == 0)
    {
LABEL_7:
      if ((v2 & 8) == 0)
        goto LABEL_8;
      goto LABEL_18;
    }
LABEL_17:
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
    *(_WORD *)(a2 + 44) |= 1u;
    v2 = *(_WORD *)(result + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
LABEL_18:
    *(_DWORD *)(a2 + 20) = *(_DWORD *)(result + 20);
    *(_WORD *)(a2 + 44) |= 8u;
    v2 = *(_WORD *)(result + 44);
    if ((v2 & 0x100) == 0)
    {
LABEL_9:
      if ((v2 & 0x80) == 0)
        goto LABEL_10;
      goto LABEL_20;
    }
LABEL_19:
    *(_BYTE *)(a2 + 40) = *(_BYTE *)(result + 40);
    *(_WORD *)(a2 + 44) |= 0x100u;
    v2 = *(_WORD *)(result + 44);
    if ((v2 & 0x80) == 0)
    {
LABEL_10:
      if ((v2 & 4) == 0)
        return result;
      goto LABEL_11;
    }
LABEL_20:
    *(_DWORD *)(a2 + 36) = *(_DWORD *)(result + 36);
    *(_WORD *)(a2 + 44) |= 0x80u;
    if ((*(_WORD *)(result + 44) & 4) == 0)
      return result;
LABEL_11:
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
    *(_WORD *)(a2 + 44) |= 4u;
  }
  return result;
}

uint64_t sub_10002EA28(uint64_t result, uint64_t a2)
{
  __int16 v2;

  if (result)
  {
    v2 = *(_WORD *)(a2 + 44);
    if ((v2 & 0x40) != 0)
    {
      *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
      *(_WORD *)(result + 44) |= 0x40u;
      v2 = *(_WORD *)(a2 + 44);
      if ((v2 & 2) == 0)
      {
LABEL_4:
        if ((v2 & 0x10) == 0)
          goto LABEL_5;
        goto LABEL_15;
      }
    }
    else if ((v2 & 2) == 0)
    {
      goto LABEL_4;
    }
    *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
    *(_WORD *)(result + 44) |= 2u;
    v2 = *(_WORD *)(a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_5:
      if ((v2 & 0x20) == 0)
        goto LABEL_6;
      goto LABEL_16;
    }
LABEL_15:
    *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
    *(_WORD *)(result + 44) |= 0x10u;
    v2 = *(_WORD *)(a2 + 44);
    if ((v2 & 0x20) == 0)
    {
LABEL_6:
      if ((v2 & 1) == 0)
        goto LABEL_7;
      goto LABEL_17;
    }
LABEL_16:
    *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
    *(_WORD *)(result + 44) |= 0x20u;
    v2 = *(_WORD *)(a2 + 44);
    if ((v2 & 1) == 0)
    {
LABEL_7:
      if ((v2 & 8) == 0)
        goto LABEL_8;
      goto LABEL_18;
    }
LABEL_17:
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
    *(_WORD *)(result + 44) |= 1u;
    v2 = *(_WORD *)(a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
LABEL_18:
    *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
    *(_WORD *)(result + 44) |= 8u;
    v2 = *(_WORD *)(a2 + 44);
    if ((v2 & 0x100) == 0)
    {
LABEL_9:
      if ((v2 & 0x80) == 0)
        goto LABEL_10;
      goto LABEL_20;
    }
LABEL_19:
    *(_BYTE *)(result + 40) = *(_BYTE *)(a2 + 40);
    *(_WORD *)(result + 44) |= 0x100u;
    v2 = *(_WORD *)(a2 + 44);
    if ((v2 & 0x80) == 0)
    {
LABEL_10:
      if ((v2 & 4) == 0)
        return result;
      goto LABEL_11;
    }
LABEL_20:
    *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
    *(_WORD *)(result + 44) |= 0x80u;
    if ((*(_WORD *)(a2 + 44) & 4) == 0)
      return result;
LABEL_11:
    *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
    *(_WORD *)(result + 44) |= 4u;
  }
  return result;
}

uint64_t sub_10002EBE4(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 24);
  return result;
}

uint64_t sub_10002EBF8(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 28);
  return result;
}

uint64_t sub_10002EC0C(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 8);
  return result;
}

uint64_t sub_10002EC20(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 20);
  return result;
}

BOOL sub_10002EC34(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 40) != 0;
  return result;
}

uint64_t sub_10002EC50(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 36);
  return result;
}

uint64_t sub_10002EC64(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 16);
  return result;
}

void sub_10002ECD0(void *a1, char *newValue)
{
  if (a1)
    objc_setProperty_nonatomic(a1, newValue, newValue, 16);
}

BOOL sub_10002ECE8(_BOOL8 result)
{
  if (result)
    return *(_QWORD *)(result + 16) != 0;
  return result;
}

uint64_t sub_10002ED04(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 2u;
    *(_DWORD *)(result + 12) = a2;
  }
  return result;
}

uint64_t sub_10002ED2C(uint64_t result, int a2)
{
  __int16 v2;

  if (result)
  {
    if (a2)
      v2 = 2;
    else
      v2 = 0;
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFFFD | v2;
  }
  return result;
}

uint64_t sub_10002ED58(uint64_t result)
{
  if (result)
    return (*(unsigned __int16 *)(result + 68) >> 1) & 1;
  return result;
}

uint64_t sub_10002ED70(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 0x40u;
    *(_DWORD *)(result + 40) = a2;
  }
  return result;
}

uint64_t sub_10002ED98(uint64_t result, int a2)
{
  __int16 v2;

  if (result)
  {
    if (a2)
      v2 = 64;
    else
      v2 = 0;
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFFBF | v2;
  }
  return result;
}

uint64_t sub_10002EDC4(uint64_t result)
{
  if (result)
    return (*(unsigned __int16 *)(result + 68) >> 6) & 1;
  return result;
}

uint64_t sub_10002EDDC(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 0x80u;
    *(_DWORD *)(result + 44) = a2;
  }
  return result;
}

uint64_t sub_10002EE04(uint64_t result, int a2)
{
  __int16 v2;

  if (result)
  {
    if (a2)
      v2 = 128;
    else
      v2 = 0;
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFF7F | v2;
  }
  return result;
}

uint64_t sub_10002EE30(uint64_t result)
{
  if (result)
    return (*(unsigned __int16 *)(result + 68) >> 7) & 1;
  return result;
}

uint64_t sub_10002EE48(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 0x100u;
    *(_DWORD *)(result + 48) = a2;
  }
  return result;
}

uint64_t sub_10002EE70(uint64_t result, int a2)
{
  __int16 v2;

  if (result)
  {
    if (a2)
      v2 = 256;
    else
      v2 = 0;
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFEFF | v2;
  }
  return result;
}

uint64_t sub_10002EE9C(uint64_t result)
{
  if (result)
    return HIBYTE(*(unsigned __int16 *)(result + 68)) & 1;
  return result;
}

uint64_t sub_10002EEB4(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 0x400u;
    *(_DWORD *)(result + 56) = a2;
  }
  return result;
}

uint64_t sub_10002EEDC(uint64_t result, int a2)
{
  __int16 v2;

  if (result)
  {
    if (a2)
      v2 = 1024;
    else
      v2 = 0;
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFBFF | v2;
  }
  return result;
}

uint64_t sub_10002EF08(uint64_t result)
{
  if (result)
    return (*(unsigned __int16 *)(result + 68) >> 10) & 1;
  return result;
}

uint64_t sub_10002EF20(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 0x20u;
    *(_DWORD *)(result + 36) = a2;
  }
  return result;
}

uint64_t sub_10002EF48(uint64_t result, int a2)
{
  __int16 v2;

  if (result)
  {
    if (a2)
      v2 = 32;
    else
      v2 = 0;
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFFDF | v2;
  }
  return result;
}

uint64_t sub_10002EF74(uint64_t result)
{
  if (result)
    return (*(unsigned __int16 *)(result + 68) >> 5) & 1;
  return result;
}

uint64_t sub_10002EF8C(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 0x1000u;
    *(_DWORD *)(result + 64) = a2;
  }
  return result;
}

uint64_t sub_10002EFB4(uint64_t result, int a2)
{
  __int16 v2;

  if (result)
  {
    if (a2)
      v2 = 4096;
    else
      v2 = 0;
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xEFFF | v2;
  }
  return result;
}

uint64_t sub_10002EFE0(uint64_t result)
{
  if (result)
    return (*(unsigned __int16 *)(result + 68) >> 12) & 1;
  return result;
}

uint64_t sub_10002EFF8(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 4u;
    *(_DWORD *)(result + 24) = a2;
  }
  return result;
}

uint64_t sub_10002F020(uint64_t result, int a2)
{
  __int16 v2;

  if (result)
  {
    if (a2)
      v2 = 4;
    else
      v2 = 0;
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFFFB | v2;
  }
  return result;
}

uint64_t sub_10002F04C(uint64_t result)
{
  if (result)
    return (*(unsigned __int16 *)(result + 68) >> 2) & 1;
  return result;
}

uint64_t sub_10002F064(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 0x800u;
    *(_DWORD *)(result + 60) = a2;
  }
  return result;
}

uint64_t sub_10002F08C(uint64_t result, int a2)
{
  __int16 v2;

  if (result)
  {
    if (a2)
      v2 = 2048;
    else
      v2 = 0;
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xF7FF | v2;
  }
  return result;
}

uint64_t sub_10002F0B8(uint64_t result)
{
  if (result)
    return (*(unsigned __int16 *)(result + 68) >> 11) & 1;
  return result;
}

uint64_t sub_10002F0D0(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 1u;
    *(_DWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_10002F0F8(uint64_t result, __int16 a2)
{
  if (result)
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFFFE | a2;
  return result;
}

uint64_t sub_10002F118(uint64_t result)
{
  if (result)
    return *(_WORD *)(result + 68) & 1;
  return result;
}

uint64_t sub_10002F130(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 8u;
    *(_DWORD *)(result + 28) = a2;
  }
  return result;
}

uint64_t sub_10002F158(uint64_t result, int a2)
{
  __int16 v2;

  if (result)
  {
    if (a2)
      v2 = 8;
    else
      v2 = 0;
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFFF7 | v2;
  }
  return result;
}

uint64_t sub_10002F184(uint64_t result)
{
  if (result)
    return (*(unsigned __int16 *)(result + 68) >> 3) & 1;
  return result;
}

uint64_t sub_10002F19C(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 0x10u;
    *(_DWORD *)(result + 32) = a2;
  }
  return result;
}

uint64_t sub_10002F1C4(uint64_t result, int a2)
{
  __int16 v2;

  if (result)
  {
    if (a2)
      v2 = 16;
    else
      v2 = 0;
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFFEF | v2;
  }
  return result;
}

uint64_t sub_10002F1F0(uint64_t result)
{
  if (result)
    return (*(unsigned __int16 *)(result + 68) >> 4) & 1;
  return result;
}

uint64_t sub_10002F208(uint64_t result, int a2)
{
  if (result)
  {
    *(_WORD *)(result + 68) |= 0x200u;
    *(_DWORD *)(result + 52) = a2;
  }
  return result;
}

uint64_t sub_10002F230(uint64_t result, int a2)
{
  __int16 v2;

  if (result)
  {
    if (a2)
      v2 = 512;
    else
      v2 = 0;
    *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xFDFF | v2;
  }
  return result;
}

uint64_t sub_10002F25C(uint64_t result)
{
  if (result)
    return (*(unsigned __int16 *)(result + 68) >> 9) & 1;
  return result;
}

uint64_t sub_10002F5EC(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  void *String;
  uint64_t result;
  char v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  int v70;
  uint64_t v71;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        String = (void *)PBReaderReadString(a2);

        *(_QWORD *)(a1 + 16) = String;
        continue;
      case 2u:
        v14 = 0;
        v15 = 0;
        v16 = 0;
        *(_WORD *)(a1 + 68) |= 2u;
        while (2)
        {
          v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v17 == -1 || v17 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v18 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 1;
            v16 |= (unint64_t)(v18 & 0x7F) << v14;
            if (v18 < 0)
            {
              v14 += 7;
              v9 = v15++ >= 9;
              if (v9)
              {
                LODWORD(v16) = 0;
                goto LABEL_115;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_115:
        v69 = 12;
        goto LABEL_165;
      case 3u:
        v19 = 0;
        v20 = 0;
        v16 = 0;
        *(_WORD *)(a1 + 68) |= 0x40u;
        while (2)
        {
          v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
            v16 |= (unint64_t)(v22 & 0x7F) << v19;
            if (v22 < 0)
            {
              v19 += 7;
              v9 = v20++ >= 9;
              if (v9)
              {
                LODWORD(v16) = 0;
                goto LABEL_119;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_119:
        v69 = 40;
        goto LABEL_165;
      case 4u:
        v23 = 0;
        v24 = 0;
        v16 = 0;
        *(_WORD *)(a1 + 68) |= 0x80u;
        while (2)
        {
          v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
            v16 |= (unint64_t)(v26 & 0x7F) << v23;
            if (v26 < 0)
            {
              v23 += 7;
              v9 = v24++ >= 9;
              if (v9)
              {
                LODWORD(v16) = 0;
                goto LABEL_123;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_123:
        v69 = 44;
        goto LABEL_165;
      case 5u:
        v27 = 0;
        v28 = 0;
        v16 = 0;
        *(_WORD *)(a1 + 68) |= 0x100u;
        while (2)
        {
          v29 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
            v16 |= (unint64_t)(v30 & 0x7F) << v27;
            if (v30 < 0)
            {
              v27 += 7;
              v9 = v28++ >= 9;
              if (v9)
              {
                LODWORD(v16) = 0;
                goto LABEL_127;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_127:
        v69 = 48;
        goto LABEL_165;
      case 6u:
        v31 = 0;
        v32 = 0;
        v16 = 0;
        *(_WORD *)(a1 + 68) |= 0x400u;
        while (2)
        {
          v33 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 1;
            v16 |= (unint64_t)(v34 & 0x7F) << v31;
            if (v34 < 0)
            {
              v31 += 7;
              v9 = v32++ >= 9;
              if (v9)
              {
                LODWORD(v16) = 0;
                goto LABEL_131;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_131:
        v69 = 56;
        goto LABEL_165;
      case 7u:
        v35 = 0;
        v36 = 0;
        v16 = 0;
        *(_WORD *)(a1 + 68) |= 0x20u;
        while (2)
        {
          v37 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37 + 1;
            v16 |= (unint64_t)(v38 & 0x7F) << v35;
            if (v38 < 0)
            {
              v35 += 7;
              v9 = v36++ >= 9;
              if (v9)
              {
                LODWORD(v16) = 0;
                goto LABEL_135;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_135:
        v69 = 36;
        goto LABEL_165;
      case 8u:
        v39 = 0;
        v40 = 0;
        v16 = 0;
        *(_WORD *)(a1 + 68) |= 0x1000u;
        while (2)
        {
          v41 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v41 == -1 || v41 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41 + 1;
            v16 |= (unint64_t)(v42 & 0x7F) << v39;
            if (v42 < 0)
            {
              v39 += 7;
              v9 = v40++ >= 9;
              if (v9)
              {
                LODWORD(v16) = 0;
                goto LABEL_139;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_139:
        v69 = 64;
        goto LABEL_165;
      case 9u:
        v43 = 0;
        v44 = 0;
        v16 = 0;
        *(_WORD *)(a1 + 68) |= 4u;
        while (2)
        {
          v45 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v45 == -1 || v45 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v46 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v45);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45 + 1;
            v16 |= (unint64_t)(v46 & 0x7F) << v43;
            if (v46 < 0)
            {
              v43 += 7;
              v9 = v44++ >= 9;
              if (v9)
              {
                LODWORD(v16) = 0;
                goto LABEL_143;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_143:
        v69 = 24;
        goto LABEL_165;
      case 0xAu:
        v47 = 0;
        v48 = 0;
        v16 = 0;
        *(_WORD *)(a1 + 68) |= 0x800u;
        while (2)
        {
          v49 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v49 == -1 || v49 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v49 + 1;
            v16 |= (unint64_t)(v50 & 0x7F) << v47;
            if (v50 < 0)
            {
              v47 += 7;
              v9 = v48++ >= 9;
              if (v9)
              {
                LODWORD(v16) = 0;
                goto LABEL_147;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_147:
        v69 = 60;
        goto LABEL_165;
      case 0xBu:
        v51 = 0;
        v52 = 0;
        v16 = 0;
        *(_WORD *)(a1 + 68) |= 1u;
        while (2)
        {
          v53 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v53 == -1 || v53 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v54 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v53);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v53 + 1;
            v16 |= (unint64_t)(v54 & 0x7F) << v51;
            if (v54 < 0)
            {
              v51 += 7;
              v9 = v52++ >= 9;
              if (v9)
              {
                LODWORD(v16) = 0;
                goto LABEL_151;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_151:
        v69 = 8;
        goto LABEL_165;
      case 0xCu:
        v55 = 0;
        v56 = 0;
        v57 = 0;
        *(_WORD *)(a1 + 68) |= 8u;
        while (2)
        {
          v58 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v58 == -1 || v58 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v59 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v58);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v58 + 1;
            v57 |= (unint64_t)(v59 & 0x7F) << v55;
            if (v59 < 0)
            {
              v55 += 7;
              v9 = v56++ >= 9;
              if (v9)
              {
                LODWORD(v57) = 0;
                goto LABEL_155;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v57) = 0;
LABEL_155:
        v70 = -(v57 & 1) ^ ((int)v57 >> 1);
        v71 = 28;
        goto LABEL_160;
      case 0xDu:
        v60 = 0;
        v61 = 0;
        v62 = 0;
        *(_WORD *)(a1 + 68) |= 0x10u;
        while (2)
        {
          v63 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v63 == -1 || v63 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v64 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v63);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v63 + 1;
            v62 |= (unint64_t)(v64 & 0x7F) << v60;
            if (v64 < 0)
            {
              v60 += 7;
              v9 = v61++ >= 9;
              if (v9)
              {
                LODWORD(v62) = 0;
                goto LABEL_159;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v62) = 0;
LABEL_159:
        v70 = -(v62 & 1) ^ ((int)v62 >> 1);
        v71 = 32;
LABEL_160:
        *(_DWORD *)(a1 + v71) = v70;
        continue;
      case 0xEu:
        v65 = 0;
        v66 = 0;
        v16 = 0;
        *(_WORD *)(a1 + 68) |= 0x200u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v67 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v67 == -1 || v67 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v68 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v67);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v67 + 1;
      v16 |= (unint64_t)(v68 & 0x7F) << v65;
      if ((v68 & 0x80) == 0)
        goto LABEL_162;
      v65 += 7;
      v9 = v66++ >= 9;
      if (v9)
      {
        LODWORD(v16) = 0;
        goto LABEL_164;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_162:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v16) = 0;
LABEL_164:
    v69 = 52;
LABEL_165:
    *(_DWORD *)(a1 + v69) = v16;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100030248(uint64_t a1, id self)
{
  void *v4;
  __int16 v5;

  if (a1)
  {
    if (self)
    {
      v4 = *(void **)(a1 + 16);
      if (v4)
        objc_setProperty_nonatomic(self, (SEL)self, v4, 16);
    }
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 2) != 0)
    {
      *((_DWORD *)self + 3) = *(_DWORD *)(a1 + 12);
      *((_WORD *)self + 34) |= 2u;
      v5 = *(_WORD *)(a1 + 68);
      if ((v5 & 0x40) == 0)
      {
LABEL_7:
        if ((v5 & 0x80) == 0)
          goto LABEL_8;
        goto LABEL_22;
      }
    }
    else if ((v5 & 0x40) == 0)
    {
      goto LABEL_7;
    }
    *((_DWORD *)self + 10) = *(_DWORD *)(a1 + 40);
    *((_WORD *)self + 34) |= 0x40u;
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 0x80) == 0)
    {
LABEL_8:
      if ((v5 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_23;
    }
LABEL_22:
    *((_DWORD *)self + 11) = *(_DWORD *)(a1 + 44);
    *((_WORD *)self + 34) |= 0x80u;
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 0x100) == 0)
    {
LABEL_9:
      if ((v5 & 0x400) == 0)
        goto LABEL_10;
      goto LABEL_24;
    }
LABEL_23:
    *((_DWORD *)self + 12) = *(_DWORD *)(a1 + 48);
    *((_WORD *)self + 34) |= 0x100u;
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 0x400) == 0)
    {
LABEL_10:
      if ((v5 & 0x20) == 0)
        goto LABEL_11;
      goto LABEL_25;
    }
LABEL_24:
    *((_DWORD *)self + 14) = *(_DWORD *)(a1 + 56);
    *((_WORD *)self + 34) |= 0x400u;
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 0x20) == 0)
    {
LABEL_11:
      if ((v5 & 0x1000) == 0)
        goto LABEL_12;
      goto LABEL_26;
    }
LABEL_25:
    *((_DWORD *)self + 9) = *(_DWORD *)(a1 + 36);
    *((_WORD *)self + 34) |= 0x20u;
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 0x1000) == 0)
    {
LABEL_12:
      if ((v5 & 4) == 0)
        goto LABEL_13;
      goto LABEL_27;
    }
LABEL_26:
    *((_DWORD *)self + 16) = *(_DWORD *)(a1 + 64);
    *((_WORD *)self + 34) |= 0x1000u;
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 4) == 0)
    {
LABEL_13:
      if ((v5 & 0x800) == 0)
        goto LABEL_14;
      goto LABEL_28;
    }
LABEL_27:
    *((_DWORD *)self + 6) = *(_DWORD *)(a1 + 24);
    *((_WORD *)self + 34) |= 4u;
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 0x800) == 0)
    {
LABEL_14:
      if ((v5 & 1) == 0)
        goto LABEL_15;
      goto LABEL_29;
    }
LABEL_28:
    *((_DWORD *)self + 15) = *(_DWORD *)(a1 + 60);
    *((_WORD *)self + 34) |= 0x800u;
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 1) == 0)
    {
LABEL_15:
      if ((v5 & 8) == 0)
        goto LABEL_16;
      goto LABEL_30;
    }
LABEL_29:
    *((_DWORD *)self + 2) = *(_DWORD *)(a1 + 8);
    *((_WORD *)self + 34) |= 1u;
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 8) == 0)
    {
LABEL_16:
      if ((v5 & 0x10) == 0)
        goto LABEL_17;
      goto LABEL_31;
    }
LABEL_30:
    *((_DWORD *)self + 7) = *(_DWORD *)(a1 + 28);
    *((_WORD *)self + 34) |= 8u;
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 0x10) == 0)
    {
LABEL_17:
      if ((v5 & 0x200) == 0)
        return;
      goto LABEL_18;
    }
LABEL_31:
    *((_DWORD *)self + 8) = *(_DWORD *)(a1 + 32);
    *((_WORD *)self + 34) |= 0x10u;
    if ((*(_WORD *)(a1 + 68) & 0x200) == 0)
      return;
LABEL_18:
    *((_DWORD *)self + 13) = *(_DWORD *)(a1 + 52);
    *((_WORD *)self + 34) |= 0x200u;
  }
}

void sub_100030BC4(id self, uint64_t a2)
{
  void *v4;
  __int16 v5;

  if (self)
  {
    v4 = *(void **)(a2 + 16);
    if (v4)
      objc_setProperty_nonatomic(self, (SEL)a2, v4, 16);
    v5 = *(_WORD *)(a2 + 68);
    if ((v5 & 2) != 0)
    {
      *((_DWORD *)self + 3) = *(_DWORD *)(a2 + 12);
      *((_WORD *)self + 34) |= 2u;
      v5 = *(_WORD *)(a2 + 68);
      if ((v5 & 0x40) == 0)
      {
LABEL_6:
        if ((v5 & 0x80) == 0)
          goto LABEL_7;
        goto LABEL_21;
      }
    }
    else if ((v5 & 0x40) == 0)
    {
      goto LABEL_6;
    }
    *((_DWORD *)self + 10) = *(_DWORD *)(a2 + 40);
    *((_WORD *)self + 34) |= 0x40u;
    v5 = *(_WORD *)(a2 + 68);
    if ((v5 & 0x80) == 0)
    {
LABEL_7:
      if ((v5 & 0x100) == 0)
        goto LABEL_8;
      goto LABEL_22;
    }
LABEL_21:
    *((_DWORD *)self + 11) = *(_DWORD *)(a2 + 44);
    *((_WORD *)self + 34) |= 0x80u;
    v5 = *(_WORD *)(a2 + 68);
    if ((v5 & 0x100) == 0)
    {
LABEL_8:
      if ((v5 & 0x400) == 0)
        goto LABEL_9;
      goto LABEL_23;
    }
LABEL_22:
    *((_DWORD *)self + 12) = *(_DWORD *)(a2 + 48);
    *((_WORD *)self + 34) |= 0x100u;
    v5 = *(_WORD *)(a2 + 68);
    if ((v5 & 0x400) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_24;
    }
LABEL_23:
    *((_DWORD *)self + 14) = *(_DWORD *)(a2 + 56);
    *((_WORD *)self + 34) |= 0x400u;
    v5 = *(_WORD *)(a2 + 68);
    if ((v5 & 0x20) == 0)
    {
LABEL_10:
      if ((v5 & 0x1000) == 0)
        goto LABEL_11;
      goto LABEL_25;
    }
LABEL_24:
    *((_DWORD *)self + 9) = *(_DWORD *)(a2 + 36);
    *((_WORD *)self + 34) |= 0x20u;
    v5 = *(_WORD *)(a2 + 68);
    if ((v5 & 0x1000) == 0)
    {
LABEL_11:
      if ((v5 & 4) == 0)
        goto LABEL_12;
      goto LABEL_26;
    }
LABEL_25:
    *((_DWORD *)self + 16) = *(_DWORD *)(a2 + 64);
    *((_WORD *)self + 34) |= 0x1000u;
    v5 = *(_WORD *)(a2 + 68);
    if ((v5 & 4) == 0)
    {
LABEL_12:
      if ((v5 & 0x800) == 0)
        goto LABEL_13;
      goto LABEL_27;
    }
LABEL_26:
    *((_DWORD *)self + 6) = *(_DWORD *)(a2 + 24);
    *((_WORD *)self + 34) |= 4u;
    v5 = *(_WORD *)(a2 + 68);
    if ((v5 & 0x800) == 0)
    {
LABEL_13:
      if ((v5 & 1) == 0)
        goto LABEL_14;
      goto LABEL_28;
    }
LABEL_27:
    *((_DWORD *)self + 15) = *(_DWORD *)(a2 + 60);
    *((_WORD *)self + 34) |= 0x800u;
    v5 = *(_WORD *)(a2 + 68);
    if ((v5 & 1) == 0)
    {
LABEL_14:
      if ((v5 & 8) == 0)
        goto LABEL_15;
      goto LABEL_29;
    }
LABEL_28:
    *((_DWORD *)self + 2) = *(_DWORD *)(a2 + 8);
    *((_WORD *)self + 34) |= 1u;
    v5 = *(_WORD *)(a2 + 68);
    if ((v5 & 8) == 0)
    {
LABEL_15:
      if ((v5 & 0x10) == 0)
        goto LABEL_16;
      goto LABEL_30;
    }
LABEL_29:
    *((_DWORD *)self + 7) = *(_DWORD *)(a2 + 28);
    *((_WORD *)self + 34) |= 8u;
    v5 = *(_WORD *)(a2 + 68);
    if ((v5 & 0x10) == 0)
    {
LABEL_16:
      if ((v5 & 0x200) == 0)
        return;
      goto LABEL_17;
    }
LABEL_30:
    *((_DWORD *)self + 8) = *(_DWORD *)(a2 + 32);
    *((_WORD *)self + 34) |= 0x10u;
    if ((*(_WORD *)(a2 + 68) & 0x200) == 0)
      return;
LABEL_17:
    *((_DWORD *)self + 13) = *(_DWORD *)(a2 + 52);
    *((_WORD *)self + 34) |= 0x200u;
  }
}

uint64_t sub_100030E74(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

uint64_t sub_100030E88(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 12);
  return result;
}

uint64_t sub_100030E9C(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 40);
  return result;
}

uint64_t sub_100030EB0(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 44);
  return result;
}

uint64_t sub_100030EC4(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 48);
  return result;
}

uint64_t sub_100030ED8(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 56);
  return result;
}

uint64_t sub_100030EEC(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 36);
  return result;
}

uint64_t sub_100030F00(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 64);
  return result;
}

uint64_t sub_100030F14(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 24);
  return result;
}

uint64_t sub_100030F28(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 60);
  return result;
}

uint64_t sub_100030F3C(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 8);
  return result;
}

uint64_t sub_100030F50(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 28);
  return result;
}

uint64_t sub_100030F64(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 32);
  return result;
}

uint64_t sub_100030F78(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 52);
  return result;
}

id *sub_100031024(id *result, int a2)
{
  id Weak;

  if (dword_100270EF8 == a2)
  {
    Weak = objc_loadWeak(result + 4);
    return (id *)objc_msgSend(Weak, "updateLPMState");
  }
  return result;
}

id sub_100031054(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "getLPMState");
  byte_100270EFC = result != 0;
  return result;
}

void sub_100031194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 72), 8);
  _Unwind_Resume(a1);
}

id sub_1000311B8(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t state64;

  state64 = 0;
  notify_get_state(dword_100270958, &state64);
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = state64 != 0;
  if (*(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24))
    v2 = (dword_100270F00 + 1);
  else
    v2 = (dword_100270F00 - 1);
  dword_100270F00 = v2;
  if ((_DWORD)v2 == 1)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("registerWebkitStreamingNotification: WebKit streaming Started"));
    v3 = (void *)a1[4];
    v4 = 1;
LABEL_9:
    objc_msgSend(v3, "notifyStreamingState::", v4, 0);
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("registerWebkitStreamingNotification isMediaStreamingChanged: %d, isMediaStreaming: %d"), *(unsigned __int8 *)(*(_QWORD *)(a1[5] + 8) + 24), *(unsigned __int8 *)(*(_QWORD *)(a1[6] + 8) + 24));
  }
  if ((int)v2 <= 0)
  {
    dword_100270F00 = 0;
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("registerWebkitStreamingNotification: WebKit streaming Ended"));
    v3 = (void *)a1[4];
    v4 = 2;
    goto LABEL_9;
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("registerWebkitStreamingNotification:refcount: %d"), v2);
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("registerWebkitStreamingNotification isMediaStreamingChanged: %d, isMediaStreaming: %d"), *(unsigned __int8 *)(*(_QWORD *)(a1[5] + 8) + 24), *(unsigned __int8 *)(*(_QWORD *)(a1[6] + 8) + 24));
}

void sub_10003171C(uint64_t a1)
{
  dispatch_time_t v2;
  _QWORD handler[4];
  __int128 v4;
  uint64_t v5;

  if (qword_100270EE8)
  {
    dispatch_source_cancel((dispatch_source_t)qword_100270EE8);
    dispatch_release((dispatch_object_t)qword_100270EE8);
    qword_100270EE8 = 0;
  }
  qword_100270EE8 = (uint64_t)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 32));
  v2 = dispatch_time(0, 0);
  dispatch_source_set_timer((dispatch_source_t)qword_100270EE8, v2, (uint64_t)(*(double *)(a1 + 56) * 1000000000.0), 0);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1000317F8;
  handler[3] = &unk_100201A60;
  v5 = *(_QWORD *)(a1 + 56);
  v4 = *(_OWORD *)(a1 + 40);
  dispatch_source_set_event_handler((dispatch_source_t)qword_100270EE8, handler);
  dispatch_resume((dispatch_object_t)qword_100270EE8);
}

id sub_1000317F8(uint64_t a1)
{
  unsigned int v2;
  double v3;
  float v4;
  float v5;
  id result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  v7 = 0;
  v8 = 0;
  v2 = objc_msgSend(*(id *)(a1 + 32), "getDeltaIPStats::::", &v10, &v9, &v8, &v7);
  v3 = *(double *)(a1 + 48) * 1000.0;
  v4 = (double)v7 / v3;
  v5 = (double)v8 / v3;
  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("Delta TX Rate: %f, RX Rate: %f"), v5, v4);
  if (v2 != 1)
    return (id)(*(uint64_t (**)(float, float))(*(_QWORD *)(a1 + 40) + 16))(v5, v4);
  return result;
}

void sub_1000319EC(id a1, unint64_t a2, unint64_t a3, float a4, float a5)
{
  int v9;
  int v10;
  float v11;

  v9 = (int)(float)(a5 - a4);
  if (v9 >= 0)
    v10 = (int)(float)(a5 - a4);
  else
    v10 = -v9;
  v11 = (float)v10;
  if (objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "isVoIPCallActive"))
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("VoIP Delta: TX rate: %f, RX Rate: %f, VoIP active Diff: %f"), a4, a5, v11);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("VoIP Delta: TX rate: %f, RX Rate: %f, Diff: %f"), a4, a5, v11);
    if (a4 > 7.0 && a2 >= 0x64 && a3 >= 0x64 && a5 > 7.0 && v10 <= 0x1D)
      objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "rxVoIPAppNotification:", 1);
  }
}

id sub_100031AFC(uint64_t a1)
{
  id result;
  _QWORD v3[4];
  id v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  v6 = 0;
  v5 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100031BDC;
  v3[3] = &unk_100201AF0;
  v4 = *(id *)(a1 + 32);
  objc_msgSend(v4, "getDeltaIPStats::::", &v8, &v7, &v5, &v6);
  result = objc_msgSend(*(id *)(a1 + 32), "isCoreMediaStreamingActive");
  if ((result & 1) == 0 && byte_100271048 == 1)
  {
    if (v6 >= 0x7C830 && !byte_100270EFC)
    {
      objc_msgSend(*(id *)(a1 + 32), "notifyStreamingState::", 1, 0);
      byte_100270ED1 = 1;
    }
    return objc_msgSend(*(id *)(a1 + 32), "startPeriodicTask::", v3, 10.0);
  }
  return result;
}

id sub_100031BDC(uint64_t a1, float a2, float a3)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("streaming Delta: TX rate: %f, RX Rate: %f"), a2, a3);
  if (byte_100271048 == 1 && a3 > 50.0 && byte_100270ED1 == 0 && byte_100270EFC == 0)
  {
    result = objc_msgSend(*(id *)(a1 + 32), "notifyStreamingState::", 1, 0);
    byte_100270ED1 = 1;
  }
  return result;
}

void sub_100031C9C(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_100031CAC(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

Class sub_100031CB8(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!qword_100271078)
  {
    v4 = off_100201B60;
    v5 = 0;
    qword_100271078 = _sl_dlopen(&v4, &v3);
  }
  if (!qword_100271078)
    sub_10012E40C(&v3);
  if (v3)
    free(v3);
  result = objc_getClass("LSApplicationRecord");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_10012E470();
  qword_100271070 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

id sub_1000322A8(uint64_t a1)
{
  objc_super v2;

  if (!qword_100271088)
  {
    v2.receiver = *(id *)(a1 + 32);
    v2.super_class = (Class)&OBJC_METACLASS___WRM_EnhancedCTService;
    qword_100271088 = (uint64_t)objc_msgSend(objc_msgSendSuper2(&v2, "allocWithZone:", 0), "init");
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s"), "+[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton]_block_invoke");
}

id sub_100033730(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 428) = +[WRM_SCService WRM_SCServiceControllerSingleton](WRM_SCService, "WRM_SCServiceControllerSingleton");
  return objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "setSCService:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 428));
}

void sub_100034530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100034548(uint64_t a1)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 456);
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellularProductExperimentsManager: getCellConfiguredBandwidthThreshold: mCellConfiguredBandwidth, value: %d"), *(unsigned int *)(*(_QWORD *)(a1 + 32) + 456));
}

void sub_100034630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100034648(uint64_t a1)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 460);
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellularProductExperimentsManager: getCellRSRP4G5GvsWiFiThreshold: mCellRSRP4G5GvsWiFiThreshold, value: %d"), *(unsigned int *)(*(_QWORD *)(a1 + 32) + 460));
}

void sub_100034730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100034748(uint64_t a1)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 464);
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellularProductExperimentsManager: getCellRSRQ4G5GvsWiFiThreshold: mCellRSRQ4G5GvsWiFiThreshold, value: %d"), *(unsigned int *)(*(_QWORD *)(a1 + 32) + 464));
}

id sub_100034804(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id result;

  v2 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("Cell_Outrank_WiFi_Bandwidth_Threshold"));
  if (v2)
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 40) + 452) = objc_msgSend(v2, "intValue");
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellularProductExperimentsManager: setTrialParameters: mWRMCellOutrankWifiBWThreshold, value: %d"), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 452));
  }
  v3 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("Cell_Configured_Bandwidth_Threshold"));
  if (v3)
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 40) + 456) = objc_msgSend(v3, "intValue");
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellularProductExperimentsManager: setTrialParameters: mCellConfiguredBandwidth, value: %d"), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 456));
  }
  v4 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("Cell_RSRP_4G5GvsWiFi_Threshold"));
  if (v4)
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 40) + 460) = objc_msgSend(v4, "intValue");
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellularProductExperimentsManager: setTrialParameters: mCellRSRP4G5GvsWiFiThreshold, value: %d"), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 460));
  }
  result = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("Cell_RSRQ_4G5GvsWiFi_Threshold"));
  if (result)
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 40) + 464) = objc_msgSend(result, "intValue");
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellularProductExperimentsManager: setTrialParameters: mCellRSRQ4G5GvsWiFiThreshold, value: %d"), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 464));
  }
  return result;
}

void sub_100034B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100034B4C(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  id v4;

  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "PrevAudioErasurePercent"), "objectAtIndex:", (char *)objc_msgSend(*(id *)(a1 + 32), "activeSlot") - 1), "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2;
  if (objc_msgSend(*(id *)(a1 + 32), "activeSlot"))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "activeSlot") == (id)1)
    {
      v3 = "CTSubscriptionSlotOne";
    }
    else
    {
      v4 = objc_msgSend(*(id *)(a1 + 32), "activeSlot");
      v3 = "Unknown CTSubscriptionSlot!!!";
      if (v4 == (id)2)
        v3 = "CTSubscriptionSlotTwo";
    }
  }
  else
  {
    v3 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: active slot %s Erasure %f"), "-[WRM_EnhancedCTService getCurrentAudioErasure]_block_invoke", v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

id sub_100034C9C(uint64_t a1)
{
  const char *v2;
  id v3;

  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "PrevAudioErasurePercent"), "replaceObjectAtIndex:withObject:", (char *)objc_msgSend(*(id *)(a1 + 32), "activeSlot") - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)*(unint64_t *)(a1 + 40)));
  if (objc_msgSend(*(id *)(a1 + 32), "activeSlot"))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "activeSlot") == (id)1)
    {
      v2 = "CTSubscriptionSlotOne";
    }
    else
    {
      v3 = objc_msgSend(*(id *)(a1 + 32), "activeSlot");
      v2 = "Unknown CTSubscriptionSlot!!!";
      if (v3 == (id)2)
        v2 = "CTSubscriptionSlotTwo";
    }
  }
  else
  {
    v2 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: active slot %s Erasure %f"), "-[WRM_EnhancedCTService updateVoLTESpeechErasure:]_block_invoke", v2, *(_QWORD *)(a1 + 40));
}

id sub_1000351E4(uint64_t a1)
{
  const char *v2;
  id result;
  int v4;

  if (objc_msgSend(*(id *)(a1 + 32), "activeSlot"))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "activeSlot") == (id)1)
    {
      v2 = "CTSubscriptionSlotOne";
    }
    else if (objc_msgSend(*(id *)(a1 + 32), "activeSlot") == (id)2)
    {
      v2 = "CTSubscriptionSlotTwo";
    }
    else
    {
      v2 = "Unknown CTSubscriptionSlot!!!";
    }
  }
  else
  {
    v2 = "CTSubscriptionSlotUnknown";
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: active slot %s MovAvgSignalBars %@"), "-[WRM_EnhancedCTService getCurrentMovAvgSignalBars]_block_invoke", v2, objc_msgSend(*(id *)(a1 + 32), "movingAverageSignalBars"));
  result = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "movingAverageSignalBars"), "objectAtIndex:", (char *)objc_msgSend(*(id *)(a1 + 32), "activeSlot") - 1), "floatValue");
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v4;
  return result;
}

id sub_100035328(uint64_t a1)
{
  float v2;
  id v3;
  double v4;
  float v5;
  id v6;
  double v7;

  v2 = (float)(int)objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "bars"), "objectAtIndex:", 0), "intValue");
  v3 = objc_msgSend(*(id *)(a1 + 32), "movingAverageSignalBars");
  *(float *)&v4 = v2;
  objc_msgSend(v3, "replaceObjectAtIndex:withObject:", 0, +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v4));
  v5 = (float)(int)objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "bars"), "objectAtIndex:", 1), "intValue");
  v6 = objc_msgSend(*(id *)(a1 + 32), "movingAverageSignalBars");
  *(float *)&v7 = v5;
  return objc_msgSend(v6, "replaceObjectAtIndex:withObject:", 1, +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v7));
}

id sub_100035434(uint64_t a1)
{
  id v2;
  double v3;
  id v4;
  double v5;

  v2 = objc_msgSend(*(id *)(a1 + 32), "movingAverageSignalBars");
  LODWORD(v3) = 5.0;
  objc_msgSend(v2, "replaceObjectAtIndex:withObject:", 0, +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3));
  v4 = objc_msgSend(*(id *)(a1 + 32), "movingAverageSignalBars");
  LODWORD(v5) = 5.0;
  return objc_msgSend(v4, "replaceObjectAtIndex:withObject:", 1, +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v5));
}

id sub_1000354A8(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  float v5;
  float v6;
  int v7;
  uint64_t v8;
  float v9;
  id v10;
  double v11;
  id result;

  v2 = 0;
  v3 = 1;
  do
  {
    v4 = v3;
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "movingAverageSignalBars"), "objectAtIndex:", v2), "floatValue");
    v6 = v5;
    v7 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "bars"), "objectAtIndex:", v2), "intValue");
    v8 = v7;
    v9 = (float)((float)v7 + (float)(v6 * 23.0)) / 24.0;
    v10 = objc_msgSend(*(id *)(a1 + 32), "movingAverageSignalBars");
    *(float *)&v11 = v9;
    objc_msgSend(v10, "replaceObjectAtIndex:withObject:", v2, +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v11));
    result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("%s Sampled Moving Average: %f, CurrentSignal Bars:%lld, Slot id: %d"), "-[WRM_EnhancedCTService updateMovAverageOfSignalBar]_block_invoke", v9, v8, (v2 + 1));
    v3 = 0;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
  return result;
}

void sub_100035730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100035748(uint64_t a1)
{
  id result;

  result = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "stallDetected"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_DWORD)result != 0;
  return result;
}

id sub_1000358A0(uint64_t a1)
{
  const char *v2;
  const char *v3;
  uint64_t v4;
  const char *v5;

  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellRSSI"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 40) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48)));
  v2 = "CTSubscriptionSlotUnknown";
  v3 = "CTSubscriptionSlotOne";
  v4 = *(_QWORD *)(a1 + 40);
  v5 = "Unknown CTSubscriptionSlot!!!";
  if (v4 == 2)
    v5 = "CTSubscriptionSlotTwo";
  if (v4 != 1)
    v3 = v5;
  if (v4)
    v2 = v3;
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: slot %s RSSI %f"), "-[WRM_EnhancedCTService setServingCellRSSI:forSim:]_block_invoke", v2, *(_QWORD *)(a1 + 48));
}

_DWORD *sub_1000359DC(uint64_t a1)
{
  const char *v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  _DWORD *result;

  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellRSRP"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 40) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48)));
  v2 = "CTSubscriptionSlotUnknown";
  v3 = "CTSubscriptionSlotOne";
  v4 = *(_QWORD *)(a1 + 40);
  v5 = "Unknown CTSubscriptionSlot!!!";
  if (v4 == 2)
    v5 = "CTSubscriptionSlotTwo";
  if (v4 != 1)
    v3 = v5;
  if (v4)
    v2 = v3;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: slot %d RSRP %f"), "-[WRM_EnhancedCTService setServingCellRSRP:forSim:]_block_invoke", v2, *(_QWORD *)(a1 + 48));
  result = *(_DWORD **)(a1 + 32);
  if (result[95] == 2)
    return objc_msgSend(result, "monitorStrongSOSSignal:", *(double *)(a1 + 48));
  return result;
}

id sub_100035B48(uint64_t a1)
{
  const char *v2;
  const char *v3;
  uint64_t v4;
  const char *v5;

  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellSNR"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 40) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48)));
  v2 = "CTSubscriptionSlotUnknown";
  v3 = "CTSubscriptionSlotOne";
  v4 = *(_QWORD *)(a1 + 40);
  v5 = "Unknown CTSubscriptionSlot!!!";
  if (v4 == 2)
    v5 = "CTSubscriptionSlotTwo";
  if (v4 != 1)
    v3 = v5;
  if (v4)
    v2 = v3;
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: slot %s SNR %f"), "-[WRM_EnhancedCTService setServingCellSNR:forSim:]_block_invoke", v2, *(_QWORD *)(a1 + 48));
}

id sub_100035C84(uint64_t a1)
{
  const char *v2;
  const char *v3;
  uint64_t v4;
  const char *v5;

  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellSINR"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 40) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48)));
  v2 = "CTSubscriptionSlotUnknown";
  v3 = "CTSubscriptionSlotOne";
  v4 = *(_QWORD *)(a1 + 40);
  v5 = "Unknown CTSubscriptionSlot!!!";
  if (v4 == 2)
    v5 = "CTSubscriptionSlotTwo";
  if (v4 != 1)
    v3 = v5;
  if (v4)
    v2 = v3;
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: slot %s SNR %f"), "-[WRM_EnhancedCTService setServingCellSINR:forSim:]_block_invoke", v2, *(_QWORD *)(a1 + 48));
}

id sub_100035DC0(uint64_t a1)
{
  const char *v2;
  const char *v3;
  uint64_t v4;
  const char *v5;

  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellRSRQ"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 40) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48)));
  v2 = "CTSubscriptionSlotUnknown";
  v3 = "CTSubscriptionSlotOne";
  v4 = *(_QWORD *)(a1 + 40);
  v5 = "Unknown CTSubscriptionSlot!!!";
  if (v4 == 2)
    v5 = "CTSubscriptionSlotTwo";
  if (v4 != 1)
    v3 = v5;
  if (v4)
    v2 = v3;
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: slot %s RSRQ %f"), "-[WRM_EnhancedCTService setServingCellRSRQ:forSim:]_block_invoke", v2, *(_QWORD *)(a1 + 48));
}

void sub_100035F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100035F38(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  id v4;

  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellRSSI"), "objectAtIndex:", (char *)objc_msgSend(*(id *)(a1 + 32), "activeSlot") - 1), "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2;
  if (objc_msgSend(*(id *)(a1 + 32), "activeSlot"))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "activeSlot") == (id)1)
    {
      v3 = "CTSubscriptionSlotOne";
    }
    else
    {
      v4 = objc_msgSend(*(id *)(a1 + 32), "activeSlot");
      v3 = "Unknown CTSubscriptionSlot!!!";
      if (v4 == (id)2)
        v3 = "CTSubscriptionSlotTwo";
    }
  }
  else
  {
    v3 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: active slot %s RSSI %f"), "-[WRM_EnhancedCTService getServingCellRSSI]_block_invoke", v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void sub_1000360C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000360D8(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;

  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellRSRP"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2;
  v3 = "CTSubscriptionSlotUnknown";
  v4 = "CTSubscriptionSlotOne";
  v5 = "Unknown CTSubscriptionSlot!!!";
  v6 = *(_QWORD *)(a1 + 48);
  if (v6 == 2)
    v5 = "CTSubscriptionSlotTwo";
  if (v6 != 1)
    v4 = v5;
  if (v6)
    v3 = v4;
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: sim slot %s RSRP %f"), "-[WRM_EnhancedCTService getServingCellRSRP:]_block_invoke", v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void sub_100036238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100036250(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;

  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellSNR"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2;
  v3 = "CTSubscriptionSlotUnknown";
  v4 = "CTSubscriptionSlotOne";
  v5 = "Unknown CTSubscriptionSlot!!!";
  v6 = *(_QWORD *)(a1 + 48);
  if (v6 == 2)
    v5 = "CTSubscriptionSlotTwo";
  if (v6 != 1)
    v4 = v5;
  if (v6)
    v3 = v4;
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: sim slot %s SNR %f"), "-[WRM_EnhancedCTService getServingCellSNR:]_block_invoke", v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void sub_10003639C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000363B4(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  id v4;

  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellSINR"), "objectAtIndex:", (char *)objc_msgSend(*(id *)(a1 + 32), "activeSlot") - 1), "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2;
  if (objc_msgSend(*(id *)(a1 + 32), "activeSlot"))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "activeSlot") == (id)1)
    {
      v3 = "CTSubscriptionSlotOne";
    }
    else
    {
      v4 = objc_msgSend(*(id *)(a1 + 32), "activeSlot");
      v3 = "Unknown CTSubscriptionSlot!!!";
      if (v4 == (id)2)
        v3 = "CTSubscriptionSlotTwo";
    }
  }
  else
  {
    v3 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: active slot %s SNR %f"), "-[WRM_EnhancedCTService getServingCellSINR]_block_invoke", v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void sub_10003653C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100036554(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;

  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellRSRQ"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2;
  v3 = "CTSubscriptionSlotUnknown";
  v4 = "CTSubscriptionSlotOne";
  v5 = "Unknown CTSubscriptionSlot!!!";
  v6 = *(_QWORD *)(a1 + 48);
  if (v6 == 2)
    v5 = "CTSubscriptionSlotTwo";
  if (v6 != 1)
    v4 = v5;
  if (v6)
    v3 = v4;
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: sim slot %s RSRQ %f"), "-[WRM_EnhancedCTService getServingCellRSRQ:]_block_invoke", v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void sub_1000366A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000366B8(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  id v4;

  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellRSCP"), "objectAtIndex:", (char *)objc_msgSend(*(id *)(a1 + 32), "activeSlot") - 1), "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2;
  if (objc_msgSend(*(id *)(a1 + 32), "activeSlot"))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "activeSlot") == (id)1)
    {
      v3 = "CTSubscriptionSlotOne";
    }
    else
    {
      v4 = objc_msgSend(*(id *)(a1 + 32), "activeSlot");
      v3 = "Unknown CTSubscriptionSlot!!!";
      if (v4 == (id)2)
        v3 = "CTSubscriptionSlotTwo";
    }
  }
  else
  {
    v3 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: active slot %s RSCP %f"), "-[WRM_EnhancedCTService getServingCellRSCP]_block_invoke", v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void sub_100036840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100036858(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;

  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellRSCP"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2;
  v3 = "CTSubscriptionSlotUnknown";
  v4 = "CTSubscriptionSlotOne";
  v5 = "Unknown CTSubscriptionSlot!!!";
  v6 = *(_QWORD *)(a1 + 48);
  if (v6 == 2)
    v5 = "CTSubscriptionSlotTwo";
  if (v6 != 1)
    v4 = v5;
  if (v6)
    v3 = v4;
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: sim slot %s RSCP %f"), "-[WRM_EnhancedCTService getServingCellRSCP:]_block_invoke", v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void sub_1000369A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000369BC(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  id v4;

  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellECIO"), "objectAtIndex:", (char *)objc_msgSend(*(id *)(a1 + 32), "activeSlot") - 1), "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2;
  if (objc_msgSend(*(id *)(a1 + 32), "activeSlot"))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "activeSlot") == (id)1)
    {
      v3 = "CTSubscriptionSlotOne";
    }
    else
    {
      v4 = objc_msgSend(*(id *)(a1 + 32), "activeSlot");
      v3 = "Unknown CTSubscriptionSlot!!!";
      if (v4 == (id)2)
        v3 = "CTSubscriptionSlotTwo";
    }
  }
  else
  {
    v3 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: active slot %s ECIO %f"), "-[WRM_EnhancedCTService getServingCellECIO]_block_invoke", v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void sub_100036B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100036B5C(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;

  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellECIO"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2;
  v3 = "CTSubscriptionSlotUnknown";
  v4 = "CTSubscriptionSlotOne";
  v5 = "Unknown CTSubscriptionSlot!!!";
  v6 = *(_QWORD *)(a1 + 48);
  if (v6 == 2)
    v5 = "CTSubscriptionSlotTwo";
  if (v6 != 1)
    v4 = v5;
  if (v6)
    v3 = v4;
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: sim slot %s ECIO %f"), "-[WRM_EnhancedCTService getServingCellECIO:]_block_invoke", v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

id sub_100036C10(uint64_t a1)
{
  const char *v2;
  id result;

  if (objc_msgSend(*(id *)(a1 + 32), "activeSlot"))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "activeSlot") == (id)1)
    {
      v2 = "CTSubscriptionSlotOne";
    }
    else if (objc_msgSend(*(id *)(a1 + 32), "activeSlot") == (id)2)
    {
      v2 = "CTSubscriptionSlotTwo";
    }
    else
    {
      v2 = "Unknown CTSubscriptionSlot!!!";
    }
  }
  else
  {
    v2 = "CTSubscriptionSlotUnknown";
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: active slot %s bars %@"), "-[WRM_EnhancedCTService getCurrentSignalBars]_block_invoke", v2, objc_msgSend(*(id *)(a1 + 32), "bars"));
  result = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "bars"), "objectAtIndex:", (char *)objc_msgSend(*(id *)(a1 + 32), "activeSlot") - 1), "intValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (int)result;
  return result;
}

void sub_100036D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100036DB0(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  const char *v4;
  const char *v5;
  id result;

  v2 = "CTSubscriptionSlotOne";
  v3 = *(_QWORD *)(a1 + 48);
  v4 = "Unknown CTSubscriptionSlot!!!";
  if (v3 == 2)
    v4 = "CTSubscriptionSlotTwo";
  if (v3 != 1)
    v2 = v4;
  if (v3)
    v5 = v2;
  else
    v5 = "CTSubscriptionSlotUnknown";
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: sim slot %s bars %@"), "-[WRM_EnhancedCTService getCurrentSignalBars:]_block_invoke", v5, objc_msgSend(*(id *)(a1 + 32), "bars"));
  result = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "bars"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (int)result;
  return result;
}

id sub_1000379CC(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CTSubscriptionSlotOne: CTSignalStrengthInfo %@ error %@"), a2, objc_msgSend(a3, "description"));
  if (a2)
  {
    if (!a3)
      return objc_msgSend(*(id *)(a1 + 32), "processSignalStrengthInfo::", a2, 1);
  }
  return result;
}

id sub_100037A50(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CTSubscriptionSlotOne: isDataAttached %d error %@"), a2, objc_msgSend(a3, "localizedDescription"));
  if (!a3)
    return objc_msgSend(*(id *)(a1 + 32), "processDataAttached::", a2, 1);
  return result;
}

id sub_100037AD4(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CTSubscriptionSlotOne:  Registration status %@ error %@"), a2, objc_msgSend(a3, "localizedDescription"));
  if (a2)
  {
    if (!a3)
      return objc_msgSend(*(id *)(a1 + 32), "processRegistrationStatus::", a2, 1);
  }
  return result;
}

id sub_100037B58(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CTSubscriptionSlotOne:  copyMobileCountryCode %@ error %@"), a2, objc_msgSend(a3, "localizedDescription"));
  if (a2)
  {
    if (!a3)
      return objc_msgSend(*(id *)(a1 + 32), "processMobileCountryCode::", a2, 1);
  }
  return result;
}

id sub_100037BDC(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CTSubscriptionSlotOne:  copyMobileNetworkCode %@ error %@"), a2, objc_msgSend(a3, "localizedDescription"));
  if (a2)
  {
    if (!a3)
      return objc_msgSend(*(id *)(a1 + 32), "processMobileNetworkCode::", a2, 1);
  }
  return result;
}

id sub_100037C60(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CTSubscriptionSlotOne: kCTCapabilityVoLTE %d info %@ error %@"), a2, a3, objc_msgSend(a4, "localizedDescription"));
  if (!a4)
    return objc_msgSend(*(id *)(a1 + 32), "processVolteStatus::", a2, 1);
  return result;
}

id sub_100037CF8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CTSubscriptionSlotOne: kCTCapabilityWiFiCalling %d info %@ error %@"), a2, a3, objc_msgSend(a4, "localizedDescription"));
  if (!a4)
    return objc_msgSend(*(id *)(a1 + 32), "processWiFiCallingStatus::", a2, 1);
  return result;
}

id sub_100037D90(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CTSubscriptionSlotOne:  RAT info %@ error %@"), a2, objc_msgSend(a3, "localizedDescription"));
  if (a2)
  {
    if (!a3)
      return objc_msgSend(*(id *)(a1 + 32), "processRadioTechnologyInfo::", a2, 1);
  }
  return result;
}

id sub_100037E14(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CTSubscriptionSlotOne:  Voice linkQuality %@ error %@"), a2, objc_msgSend(a3, "localizedDescription"));
  if (a2)
  {
    if (!a3)
      return objc_msgSend(*(id *)(a1 + 32), "processVoiceLinkQualityInfo::", a2, 1);
  }
  return result;
}

id sub_100037E98(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CTSubscriptionSlotOne:  Enhanced Voice linkQuality %@ error %@"), a2, objc_msgSend(a3, "localizedDescription"));
  if (a2)
  {
    if (!a3)
      return objc_msgSend(*(id *)(a1 + 32), "processEnhancedVoiceLinkQualityBlob::", a2, 1);
  }
  return result;
}

id sub_100037F1C(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CTSubscriptionSlotTwo: isDataattached %d error %@"), a2, objc_msgSend(a3, "localizedDescription"));
  if (!a3)
    return objc_msgSend(*(id *)(a1 + 32), "processDataAttached::", a2, 2);
  return result;
}

id sub_100037FA0(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CTSubscriptionSlotTwo: CTSignalStrengthInfo %@ error %@"), a2, objc_msgSend(a3, "localizedDescription"));
  if (a2)
  {
    if (!a3)
      return objc_msgSend(*(id *)(a1 + 32), "processSignalStrengthInfo::", a2, 2);
  }
  return result;
}

id sub_100038024(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CTSubscriptionSlotTwo:  Registration status %@ error %@"), a2, objc_msgSend(a3, "localizedDescription"));
  if (a2)
  {
    if (!a3)
      return objc_msgSend(*(id *)(a1 + 32), "processRegistrationStatus::", a2, 2);
  }
  return result;
}

id sub_1000380A8(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CTSubscriptionSlotTwo:  copyMobileCountryCode %@ error %@"), a2, objc_msgSend(a3, "localizedDescription"));
  if (a2)
  {
    if (!a3)
      return objc_msgSend(*(id *)(a1 + 32), "processMobileCountryCode::", a2, 2);
  }
  return result;
}

id sub_10003812C(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CTSubscriptionSlotTwo:  copyMobileNetworkCode %@ error %@"), a2, objc_msgSend(a3, "localizedDescription"));
  if (a2)
  {
    if (!a3)
      return objc_msgSend(*(id *)(a1 + 32), "processMobileNetworkCode::", a2, 2);
  }
  return result;
}

id sub_1000381B0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CTSubscriptionSlotTwo: kCTCapabilityVoLTE %d info %@ error %@"), a2, a3, objc_msgSend(a4, "localizedDescription"));
  if (!a4)
    return objc_msgSend(*(id *)(a1 + 32), "processVolteStatus::", a2, 2);
  return result;
}

id sub_100038248(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CTSubscriptionSlotTwo: kCTCapabilityWiFiCalling %d info %@ error %@"), a2, a3, objc_msgSend(a4, "localizedDescription"));
  if (!a4)
    return objc_msgSend(*(id *)(a1 + 32), "processWiFiCallingStatus::", a2, 2);
  return result;
}

id sub_1000382E0(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CTSubscriptionSlotTwo:  RAT info %@ error %@"), a2, objc_msgSend(a3, "localizedDescription"));
  if (a2)
  {
    if (!a3)
      return objc_msgSend(*(id *)(a1 + 32), "processRadioTechnologyInfo::", a2, 2);
  }
  return result;
}

id sub_100038364(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CTSubscriptionSlotTwo:  Voice linkQuality %@ error %@"), a2, objc_msgSend(a3, "localizedDescription"));
  if (a2)
  {
    if (!a3)
      return objc_msgSend(*(id *)(a1 + 32), "processVoiceLinkQualityInfo::", a2, 2);
  }
  return result;
}

id sub_1000383E8(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CTSubscriptionSlotTwo: Enhanced Voice linkQuality %@ error %@"), a2, objc_msgSend(a3, "localizedDescription"));
  if (a2)
  {
    if (!a3)
      return objc_msgSend(*(id *)(a1 + 32), "processEnhancedVoiceLinkQualityBlob::", a2, 2);
  }
  return result;
}

id sub_1000384E0(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "isDataAttached"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 40) - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
}

id sub_1000385A8(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "isVolteSupported"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 40) - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
}

id sub_100038670(uint64_t a1)
{
  const __CFString *v2;

  if (*(_BYTE *)(a1 + 48))
    v2 = CFSTR("expensive");
  else
    v2 = CFSTR("in-expensive");
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Interface cost is %@ for %s"), v2, CTSubscriptionSlotAsString(objc_msgSend(*(id *)(a1 + 32), "slotID")));
  objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "isExpensive"), "replaceObjectAtIndex:withObject:", (char *)objc_msgSend(*(id *)(a1 + 32), "slotID") - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
  return objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "evalFR2CoverageLikely:", objc_msgSend(*(id *)(a1 + 40), "deviceICheapFR2Coverage"));
}

id sub_1000387AC(uint64_t a1)
{
  const __CFString *v2;
  id v3;
  _QWORD v5[4];

  if (*(_BYTE *)(a1 + 48))
    v2 = CFSTR("enabled");
  else
    v2 = CFSTR("disabled");
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("smartDataModeChanged  %@ for %s"), v2, CTSubscriptionSlotAsString(objc_msgSend(*(id *)(a1 + 32), "slotID")));
  v3 = objc_msgSend(*(id *)(a1 + 40), "CTClient");
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100038868;
  v5[3] = &unk_100201DC0;
  return objc_msgSend(v3, "getMaxDataRate:completion:", *(_QWORD *)(a1 + 32), v5);
}

id sub_100038868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v5;

  if (a3)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("smartDataModeChanged: getMaxDataRate %@"), a3);
  v5 = a2 == 3;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("smartDataModeChanged: contenxt: %@: data mode LTE %d"), *(_QWORD *)(a1 + 32), v5);
  objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "dataModeLTE"), "replaceObjectAtIndex:withObject:", (char *)objc_msgSend(*(id *)(a1 + 32), "slotID") - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v5));
  return objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "evalFR2CoverageLikely:", objc_msgSend(*(id *)(a1 + 40), "deviceICheapFR2Coverage"));
}

id sub_1000389B8(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "isWiFiCallingSupported"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 40) - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
}

id sub_100038A80(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "isPrivateNetworkSim"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 40) - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
}

id sub_100038B48(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "isPrivateNetworkPreferredOverWifi"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 40) - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
}

id sub_100038C10(uint64_t a1)
{
  id v2;
  double v3;
  double v4;
  uint64_t v5;
  id v6;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 428), "getAirPlaneMode");
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 428), "isAirPlaneModeEnabled");
  -[NSDate timeIntervalSince1970](+[NSDate date](NSDate, "date"), "timeIntervalSince1970");
  v4 = v3;
  if ((objc_msgSend(*(id *)(a1 + 40), "isEqualToString:", CFSTR("kCTRegistrationStatusRegisteredHome")) & 1) != 0)
    v5 = 1;
  else
    v5 = (uint64_t)objc_msgSend(*(id *)(a1 + 40), "isEqualToString:", CFSTR("kCTRegistrationStatusRegisteredRoaming"));
  v6 = objc_msgSend(*(id *)(a1 + 40), "isEqualToString:", CFSTR("kCTRegistrationStatusRegisteredRoaming"));
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "isDeviceRegistered"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v5));
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "isRoaming"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v6));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: isDeviceRegistered %@ isRoaming %@"), "-[WRM_EnhancedCTService processRegistrationStatus::]_block_invoke", objc_msgSend(*(id *)(a1 + 32), "isDeviceRegistered"), objc_msgSend(*(id *)(a1 + 32), "isRoaming"));
  return objc_msgSend(*(id *)(a1 + 32), "updateCellularAvailabilityStatus::::", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v2, v4);
}

_BYTE *sub_100038FA0(uint64_t a1)
{
  _BYTE *result;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 372), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "parseRegistrationStatusForBiomeStream:", *(_QWORD *)(a1 + 40))));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: CTSubscriptionSlot %d mCellularAvailabilityStatus %@ (%@)"), "-[WRM_EnhancedCTService updateCellularAvailabilityStatus::::]_block_invoke", *(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 372), "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 48) - 1), *(_QWORD *)(a1 + 40));
  result = *(_BYTE **)(a1 + 32);
  if (result[420])
    return objc_msgSend(result, "writeToCellularAvailabilityStatusBiomeStream::", *(unsigned __int8 *)(a1 + 64), *(double *)(a1 + 56));
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 420) = objc_msgSend(result, "isWatchAssociated");
  result = *(_BYTE **)(a1 + 32);
  if (result[420])
    return objc_msgSend(result, "writeToCellularAvailabilityStatusBiomeStream::", *(unsigned __int8 *)(a1 + 64), *(double *)(a1 + 56));
  return result;
}

id sub_100039110(uint64_t a1)
{
  id result;
  id v3;

  result = objc_msgSend(*(id *)(a1 + 32), "intValue");
  if ((_DWORD)result != 0xFFFF)
  {
    v3 = result;
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("slot %d processMobileCountryCode current self.mcc=%@, new mcc=%d"), *(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(a1 + 40), "mcc"), result);
    return objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "mcc"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v3));
  }
  return result;
}

id sub_100039238(uint64_t a1)
{
  id result;
  id v3;

  result = objc_msgSend(*(id *)(a1 + 32), "intValue");
  if ((_DWORD)result != 0xFFFF)
  {
    v3 = result;
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("slot %d processMobileNetworkCode current self.mnc=%@, new mnc=%d"), *(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(a1 + 40), "mnc"), result);
    return objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "mnc"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v3));
  }
  return result;
}

id sub_100039360(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "linkQuality"), "intValue");
  v3 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "bars"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue");
  if ((_DWORD)v2 != 10 || (int)v3 < 3)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: Rcvd Voice LQM from CT: %d"), "-[WRM_EnhancedCTService processVoiceLinkQualityInfo::]_block_invoke", v2);
    if ((_DWORD)v2 && ((_DWORD)v2 + 2) <= 0x66)
    {
      objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "VoiceLqmValue"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v2));
      objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "VoiceLqmIsValid"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
    }
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: Ignoring Rcvd Voice LQM from CT: %d since signalbars %d"), "-[WRM_EnhancedCTService processVoiceLinkQualityInfo::]_block_invoke", 10, v3);
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: vLQM valid %d vLQM %d"), "-[WRM_EnhancedCTService processVoiceLinkQualityInfo::]_block_invoke", objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "VoiceLqmIsValid"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "BOOLValue"), objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "VoiceLqmValue"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue"));
}

id *sub_1000397EC(id *result)
{
  id *v1;
  int v2;
  const char *v3;
  id v4;
  id v5;
  id v6;
  _BYTE *v7;
  char *v8;
  id v9;
  unsigned __int8 v10;
  __int16 v11;
  char v12;
  unsigned __int8 v13;

  v13 = 0;
  v11 = 0;
  v10 = 0;
  if (result[6])
  {
    v1 = result;
    objc_msgSend(result[4], "checkAndScheduleSpeedTest");
    if (!objc_msgSend(v1[5], "enhancedLinkQuality"))
      return (id *)+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: Data LQM BLOB is empty"), "-[WRM_EnhancedCTService processEnhancedDataLQMBlob::]_block_invoke");
    v12 = 0;
    objc_msgSend(objc_msgSend(v1[5], "enhancedLinkQuality"), "getBytes:range:", &v13, 0, 1);
    if (v13 - 1 >= 2)
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s Data LQM version is not supported ver=%u"), "-[WRM_EnhancedCTService processEnhancedDataLQMBlob::]_block_invoke", v13);
      goto LABEL_36;
    }
    if (objc_msgSend(v1[5], "metricType") != (id)1)
    {
      if (objc_msgSend(v1[5], "metricType"))
      {
        if (objc_msgSend(v1[5], "metricType") == (id)1)
        {
          v3 = "CTEnhancedLQMIndicationTypeLinkState";
        }
        else if (objc_msgSend(v1[5], "metricType") == (id)2)
        {
          v3 = "CTEnhancedLQMIndicationTypeLinkQualityFingerprint";
        }
        else if (objc_msgSend(v1[5], "metricType") == (id)3)
        {
          v3 = "CTEnhancedLQMIndicationTypeTrafficClass";
        }
        else if (objc_msgSend(v1[5], "metricType") == (id)4)
        {
          v3 = "CTEnhancedLQMIndicationTypeDataTransferTime";
        }
        else
        {
          v9 = objc_msgSend(v1[5], "metricType");
          v3 = "Unknown CTEnhancedLQMIndicationType!!!";
          if (v9 == (id)5)
            v3 = "CTEnhancedLQMIndicationTypeLinkPowerCost";
        }
      }
      else
      {
        v3 = "CTEnhancedLQMIndicationTypeUnknown";
      }
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: metricType %s"), "-[WRM_EnhancedCTService processEnhancedDataLQMBlob::]_block_invoke", v3);
      goto LABEL_36;
    }
    objc_msgSend(objc_msgSend(v1[5], "enhancedLinkQuality"), "getBytes:range:", &v12, 1, 1);
    if ((v12 & 1) != 0)
    {
      v2 = 1;
      objc_msgSend(objc_msgSend(v1[5], "enhancedLinkQuality"), "getBytes:range:", (char *)&v11 + 1, 2, 1);
      if (HIBYTE(v11) > 9u)
        goto LABEL_9;
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Discarding invalid data LQM %d"), HIBYTE(v11));
    }
    v2 = 0;
LABEL_9:
    if ((v12 & 2) != 0)
    {
      objc_msgSend(objc_msgSend(v1[5], "enhancedLinkQuality"), "getBytes:range:", &v11, 3, 1);
      v4 = objc_msgSend(v1[4], "rrcState");
      objc_msgSend(v4, "replaceObjectAtIndex:withObject:", (char *)v1[6] - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11));
      if ((v12 & 4) == 0)
      {
LABEL_11:
        if (!v2)
        {
LABEL_36:
          result = (id *)objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "isRecentDevice");
          if ((_DWORD)result)
            return (id *)objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "evaluateWiFiVersusCell");
          return result;
        }
LABEL_20:
        v5 = objc_msgSend(v1[4], "DataLqmValue");
        objc_msgSend(v5, "replaceObjectAtIndex:withObject:", (char *)v1[6] - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", SHIBYTE(v11)));
        objc_msgSend(objc_msgSend(v1[4], "DataLqmIsValid"), "replaceObjectAtIndex:withObject:", (char *)v1[6] - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s Received eLQM notification from BB, Version: %d, LQM: %d, RRC state: %d, Cell interface state: %d"), "-[WRM_EnhancedCTService processEnhancedDataLQMBlob::]_block_invoke", v13, SHIBYTE(v11), v11, v10);
        v6 = +[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton");
        objc_msgSend(v6, "updateLqmState:deviceRRCState:subscriptionSlot:", SHIBYTE(v11), v11, v1[6]);
        v7 = v1[4];
        if (v7[484])
        {
          if (HIBYTE(v11) == 10
            && (objc_msgSend(objc_msgSend(objc_msgSend(v7, "cbrsCoreAnalyticsMetricsSent"), "objectAtIndex:", (char *)v1[6] - 1), "BOOLValue") & 1) == 0)
          {
            v8 = (char *)v1[4];
            if (v1[6] == *(id *)(v8 + 476) && (unint64_t)objc_msgSend(v8, "numberofSubscriptions") >= 2)
            {
              objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "submitMetricsCBRSWithDataSimRecommendation:forSimSlot:", 0, v1[6]);
              objc_msgSend(objc_msgSend(v1[4], "cbrsCoreAnalyticsMetricsSent"), "replaceObjectAtIndex:withObject:", (char *)v1[6] - 1, &__kCFBooleanTrue);
            }
          }
        }
        goto LABEL_36;
      }
    }
    else if ((v12 & 4) == 0)
    {
      goto LABEL_11;
    }
    objc_msgSend(objc_msgSend(v1[5], "enhancedLinkQuality"), "getBytes:range:", &v10, 4, 1);
    if (!v2)
      goto LABEL_36;
    goto LABEL_20;
  }
  return result;
}

id sub_100039C68(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  id result;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  double v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  double v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  double v36;
  id v37;
  id v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  _OWORD v47[5];
  unsigned int v48;
  unsigned __int8 v49;

  if (!objc_msgSend(*(id *)(a1 + 32), "enhancedLinkQuality"))
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: LQM BLOB is empty"), "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v40, v42, v43, v44);
  v2 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "enhancedLinkQuality"), "length");
  v3 = v2;
  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s Blob size: %d"), "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v2);
  if (!v2)
    return result;
  v49 = 0;
  v48 = 0;
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "enhancedLinkQuality"), "getBytes:range:", &v49, 0, 1);
  if (v49 <= 3u)
  {
    if (v49 == 1)
    {
      LOBYTE(v47[0]) = 0;
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "enhancedLinkQuality"), "getBytes:range:", v47, 1, 1);
      v37 = objc_msgSend(*(id *)(a1 + 40), "VoiceLqmValue");
      objc_msgSend(v37, "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", LOBYTE(v47[0])));
      objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "VoiceLqmIsValid"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "enhancedLinkQuality"), "getBytes:range:", &v48, 2, 1);
      v38 = objc_msgSend(*(id *)(a1 + 40), "VoiceLqmReasonCode");
      objc_msgSend(v38, "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v48));
      return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s BLOB Size: %d, Voice LQM BLOB Version: %d, VoiceLQM: %d, ReasonCode: %d"), "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v3, v49, LOBYTE(v47[0]), v48);
    }
    if (v49 != 2)
      return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s processVoiceLQMBlob: LQM version is not supported"), "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v41, v42, v43, v44);
    memset(v47, 0, 32);
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "enhancedLinkQuality"), "getBytes:length:", v47, 32);
    v14 = objc_msgSend(*(id *)(a1 + 40), "VoiceLqmValue");
    objc_msgSend(v14, "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", BYTE1(v47[0])));
    objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "VoiceLqmIsValid"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
    v15 = objc_msgSend(*(id *)(a1 + 40), "VoiceLqmReasonCode");
    objc_msgSend(v15, "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", BYTE2(v47[0])));
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s BLOB Size: %d, Expected size: %d, Voice LQM BLOB Version: %d, VoiceLQM: %d, ReasonCode: %d"), "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v3, 32, LOBYTE(v47[0]), BYTE1(v47[0]), BYTE2(v47[0]));
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s IMS preference: %d, CodecType: %d, Total Erasures: %u, Total PlayBacks:%u"), "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", BYTE3(v47[0]), HIDWORD(v47[0]), DWORD1(v47[0]), DWORD2(v47[0]));
    v16 = objc_msgSend(*(id *)(a1 + 40), "imsVoiceOverPSSupported");
    objc_msgSend(v16, "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", BYTE3(v47[0]) != 0));
    if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue") == 1)
    {
      v17 = (double)SLODWORD(v47[1]) * 0.2 + -20.0;
      v18 = objc_msgSend(*(id *)(a1 + 40), "servCellRSRP");
      objc_msgSend(v18, "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)SDWORD1(v47[1])));
      objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellSINR"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v17));
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRSRP"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "doubleValue");
      v20 = v19;
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellSINR"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "doubleValue");
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s RSRP: %f, SINR: %f"), "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v20, v21);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "dataPreferredSlot");
    }
    objc_msgSend(*(id *)(a1 + 40), "updateAudioQuality::", *(_QWORD *)((char *)v47 + 4), HIDWORD(v47[0]), *(_QWORD *)(a1 + 48));
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: DLBW: %d, ULBW: %d"), "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", DWORD2(v47[1]), HIDWORD(v47[1]));
    goto LABEL_24;
  }
  if (v49 == 4)
  {
    memset(v47, 0, 32);
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "enhancedLinkQuality"), "getBytes:length:", v47, 32);
    v22 = objc_msgSend(*(id *)(a1 + 40), "VoiceLqmValue");
    objc_msgSend(v22, "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", BYTE1(v47[0])));
    objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "VoiceLqmIsValid"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
    v23 = objc_msgSend(*(id *)(a1 + 40), "VoiceLqmReasonCode");
    objc_msgSend(v23, "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", BYTE2(v47[0])));
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s BLOB Size: %d, MavVoiceLqmBlob4: %d  Voice LQM BLOB Version: %d, VoiceLQM: %d, ReasonCode: %d"), "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v3, 32, LOBYTE(v47[0]), BYTE1(v47[0]), BYTE2(v47[0]));
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s IMS preference: %d, CodecType: %d, Total Erasures: %u, Total PlayBacks:%u"), "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", BYTE3(v47[0]), HIDWORD(v47[0]), DWORD1(v47[0]), DWORD2(v47[0]));
    v24 = objc_msgSend(*(id *)(a1 + 40), "imsVoiceOverPSSupported");
    objc_msgSend(v24, "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", BYTE3(v47[0]) != 0));
    if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue") == 1)
    {
      v25 = (double)SLODWORD(v47[1]) * 0.2 + -20.0;
      v26 = objc_msgSend(*(id *)(a1 + 40), "servCellRSRP");
      objc_msgSend(v26, "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)SDWORD1(v47[1])));
      objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellSINR"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v25));
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRSRP"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "doubleValue");
      v28 = v27;
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellSINR"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "doubleValue");
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s RSRP: %f, SINR: %f"), "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v28, v29);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "dataPreferredSlot");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: DLBW: %d, ULBW: %d"), "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", DWORD2(v47[1]), HIDWORD(v47[1]));
    objc_msgSend(*(id *)(a1 + 40), "updateAudioQuality::", *(_QWORD *)((char *)v47 + 4), HIDWORD(v47[0]), *(_QWORD *)(a1 + 48));
LABEL_24:
    result = objc_msgSend(*(id *)(a1 + 40), "dataPreferredSlot");
    if (result != *(id *)(a1 + 48))
      return result;
    v34 = objc_msgSend(*(id *)(a1 + 40), "dataBW");
    v35 = *(_QWORD *)(a1 + 48) - 1;
    LODWORD(v39) = DWORD2(v47[1]);
    v36 = (double)v39;
    return objc_msgSend(v34, "replaceObjectAtIndex:withObject:", v35, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v36));
  }
  if (v49 == 240)
  {
    memset(v47, 0, 37);
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "enhancedLinkQuality"), "getBytes:length:", v47, 37);
    v30 = BYTE1(v47[0]);
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s Init BLOB Size: %d, Version: %d"), "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v3, v49);
    objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "VoiceLqmValue"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v30));
    objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "VoiceLqmIsValid"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR(" %s Version %d, Voice LQM: %d, PDCP TX SDU Count: %d, PDCP TX discard count: %d, RLC RX PDU count: %d, RLC RX missing pdu count: %d, LQE: %d "), "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v49, v30, *(unsigned int *)((char *)v47 + 2), *(unsigned int *)((char *)v47 + 6), *(unsigned int *)((char *)v47 + 10), *(unsigned int *)((char *)v47 + 14), *(unsigned int *)((char *)&v47[1] + 2));
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s Meas Serving cell type : %d, SINR: %d, RSSI:%d, RSRP: %f, RSRQ: %f "), "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", *(unsigned int *)((char *)&v47[1] + 6), SBYTE10(v47[1]), *(__int16 *)((char *)&v47[1] + 11), *(float *)((char *)&v47[1] + 13), *(float *)((char *)&v47[2] + 1));
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s Voice LQM BLOB Version: %d, VoiceLQM: %d, "), "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v49, v30);
    v31 = objc_msgSend(*(id *)(a1 + 40), "servCellRSSI");
    objc_msgSend(v31, "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)*(__int16 *)((char *)&v47[1] + 11)));
    v32 = objc_msgSend(*(id *)(a1 + 40), "servCellRSRP");
    objc_msgSend(v32, "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)((char *)&v47[1] + 13)));
    v33 = objc_msgSend(*(id *)(a1 + 40), "servCellSINR");
    objc_msgSend(v33, "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)SBYTE10(v47[1])));
    v34 = objc_msgSend(*(id *)(a1 + 40), "servCellRSRQ");
    v35 = *(_QWORD *)(a1 + 48) - 1;
    v36 = *(float *)((char *)&v47[2] + 1);
    return objc_msgSend(v34, "replaceObjectAtIndex:withObject:", v35, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v36));
  }
  if (v49 != 241)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s processVoiceLQMBlob: LQM version is not supported"), "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v41, v42, v43, v44);
  memset(v47, 0, 74);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s Init BLOB Size: %d, Version: %d"), "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v2, 241);
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "enhancedLinkQuality"), "getBytes:length:", v47, 74);
  v5 = BYTE1(v47[0]);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR(" %s Version %d, Voice LQM: %d, PDCP TX SDU Count: %d, PDCP TX discard count: %d, RLC RX PDU count: %d, RLC RX missing pdu count: %d, LQE: %d "), "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", v49, BYTE1(v47[0]), *(unsigned int *)((char *)v47 + 2), *(unsigned int *)((char *)v47 + 6), *(unsigned int *)((char *)v47 + 10), *(unsigned int *)((char *)v47 + 14), *(unsigned int *)((char *)&v47[1] + 2));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s Meas Serving cell type : %d, SINR: %d, RSSI:%d, RSRP: %f, RSRQ: %f "), "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", *(unsigned int *)((char *)&v47[1] + 6), SLOBYTE(v47[4]), SWORD5(v47[1]), *((float *)&v47[1] + 3), *(float *)&v47[2]);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CodecType: %d, Total Erasures: %d, Total PlayBacks:%d, Audio Erasure Speech:%d,Audio Erasure Silence: %d"), DWORD1(v47[3]), HIDWORD(v47[2]), LODWORD(v47[3]), DWORD2(v47[3]), HIDWORD(v47[3]));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s IMS preference : %d, WCDMA RSCP: %d, WCDMA ECIO:%d"), "-[WRM_EnhancedCTService processEnhancedVoiceLinkQualityBlob::]_block_invoke", *(unsigned int *)((char *)&v47[4] + 1), DWORD2(v47[2]), DWORD1(v47[2]));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Voice LQM BLOB Version: %d, VoiceLQM: %d, "), v49, v5);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Voice LQM BLOB Cell load valid: %d, est cell load: %d, "), *(unsigned int *)((char *)&v47[4] + 5), SBYTE9(v47[4]));
  if (*(_DWORD *)((char *)&v47[4] + 5))
  {
    v6 = objc_msgSend(*(id *)(a1 + 40), "loads");
    objc_msgSend(v6, "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", SBYTE9(v47[4])));
  }
  v7 = objc_msgSend(*(id *)(a1 + 40), "servCellRSSI");
  objc_msgSend(v7, "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)SWORD5(v47[1])));
  v8 = objc_msgSend(*(id *)(a1 + 40), "servCellRSRP");
  objc_msgSend(v8, "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((float *)&v47[1] + 3)));
  v9 = objc_msgSend(*(id *)(a1 + 40), "servCellSINR");
  objc_msgSend(v9, "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)SLOBYTE(v47[4])));
  v10 = objc_msgSend(*(id *)(a1 + 40), "servCellRSRQ");
  objc_msgSend(v10, "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)&v47[2]));
  v11 = objc_msgSend(*(id *)(a1 + 40), "imsVoiceOverPSSupported");
  objc_msgSend(v11, "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_DWORD *)((char *)&v47[4] + 1) != 0));
  v12 = objc_msgSend(*(id *)(a1 + 40), "servCellRSCP");
  objc_msgSend(v12, "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)SDWORD2(v47[2])));
  v13 = objc_msgSend(*(id *)(a1 + 40), "servCellECIO");
  objc_msgSend(v13, "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)SDWORD1(v47[2])));
  v45 = *(_OWORD *)((char *)&v47[2] + 12);
  v46 = HIDWORD(v47[3]);
  return objc_msgSend(*(id *)(a1 + 40), "updateAudioQualityKaroo::", &v45, *(_QWORD *)(a1 + 48));
}

id sub_10003A930(uint64_t a1)
{
  id result;
  int v3;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("nrSliceAppStateChanged: APPID : %@, State : %d, refCount:%d"), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), dword_100271090);
  if (*(_BYTE *)(a1 + 40))
    v3 = dword_100271090 + 1;
  else
    v3 = dword_100271090 - 1;
  dword_100271090 = v3;
  if (v3 != 1)
  {
    if (v3 > 0)
      return result;
    dword_100271090 = 0;
    objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "evalSAStateSlice");
  }
  return objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "triggerEnableSA:", v3 == 1);
}

id sub_10003AA5C(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  id v7;
  id v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  unsigned int v17;
  const char *v18;

  v2 = objc_msgSend(*(id *)(a1 + 32), "indicator");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "dataIndicator"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v2));
  v3 = objc_msgSend(*(id *)(a1 + 32), "attached");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "isDataAttached"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v3));
  v4 = 4;
  if ((objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "newRadioCoverage") & 1) != 0)
  {
    if (objc_msgSend(*(id *)(a1 + 32), "newRadioCoverage"))
      v4 = 1;
    else
      v4 = 4;
  }
  if ((objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "newRadioSaCoverage") & 1) != 0
    && (objc_msgSend(*(id *)(a1 + 32), "newRadioSaCoverage") & 1) != 0)
  {
    v4 = 2;
  }
  else if ((objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "newRadioNsaCoverage") & 1) != 0)
  {
    if (objc_msgSend(*(id *)(a1 + 32), "newRadioNsaCoverage"))
      v4 = 3;
    else
      v4 = v4;
  }
  objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "radioCoverage"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v4));
  v5 = objc_msgSend(*(id *)(a1 + 32), "dataBearerTechnology") == 4;
  if (objc_msgSend(*(id *)(a1 + 32), "dataBearerTechnology") == 6)
  {
    if ((objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "newRadioMmWaveDataBearer") & 1) != 0)
    {
      if (objc_msgSend(*(id *)(a1 + 32), "newRadioMmWaveDataBearer"))
        v5 = 4;
      else
        v5 = v5;
    }
    if ((objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "newRadioSub6DataBearer") & 1) != 0)
    {
      if (objc_msgSend(*(id *)(a1 + 32), "newRadioSub6DataBearer"))
        v5 = 5;
      else
        v5 = v5;
    }
  }
  if (objc_msgSend(*(id *)(a1 + 32), "dataBearerTechnology") == 5)
  {
    if ((objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "newRadioMmWaveDataBearer") & 1) != 0)
    {
      if (objc_msgSend(*(id *)(a1 + 32), "newRadioMmWaveDataBearer"))
        v5 = 2;
      else
        v5 = v5;
    }
    if ((objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "newRadioSub6DataBearer") & 1) != 0)
    {
      if (objc_msgSend(*(id *)(a1 + 32), "newRadioSub6DataBearer"))
        v5 = 3;
      else
        v5 = v5;
    }
  }
  objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "radioFrequency"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v5));
  v6 = (objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "newRadioMmWaveDataBearer") & 1) != 0
    && (objc_msgSend(*(id *)(a1 + 32), "newRadioMmWaveDataBearer") & 1) != 0;
  objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "isFR2Radio"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v6));
  v7 = objc_msgSend(*(id *)(a1 + 32), "cellularDataPossible");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "isDataEnabled"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v7));
  if ((v3 & v7) == 1)
  {
    v8 = *(id *)(a1 + 48);
    if (v8 == objc_msgSend(*(id *)(a1 + 40), "dataPreferredSlot"))
    {
      v9 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "isPrivateNetworkSim"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "BOOLValue");
      v10 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "isPrivateNetworkPreferredOverWifi"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "BOOLValue");
      objc_msgSend(*(id *)(a1 + 40), "setDataPreferredSlotOnCBRS:", v9 & v10);
      v11 = *(_QWORD *)(a1 + 48);
      if (v11)
      {
        if (v11 == 1)
        {
          v12 = "CTSubscriptionSlotOne";
        }
        else if (v11 == 2)
        {
          v12 = "CTSubscriptionSlotTwo";
        }
        else
        {
          v12 = "Unknown CTSubscriptionSlot!!!";
        }
      }
      else
      {
        v12 = "CTSubscriptionSlotUnknown";
      }
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: isPrivateNwSim %d, isPrivateNwPreferredOverWifi: %d, dataPreferredSlotOnPrivateNetwork %d"), v12, v9, v10, objc_msgSend(*(id *)(a1 + 40), "dataPreferredSlotOnCBRS"));
    }
  }
  if (objc_msgSend(*(id *)(a1 + 32), "radioTechnology"))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "radioTechnology") == 2)
    {
      v13 = 2;
    }
    else if (objc_msgSend(*(id *)(a1 + 32), "radioTechnology") == 3)
    {
      v13 = 3;
    }
    else if (objc_msgSend(*(id *)(a1 + 32), "radioTechnology") == 4)
    {
      v13 = 4;
    }
    else if (objc_msgSend(*(id *)(a1 + 32), "radioTechnology") == 5)
    {
      v13 = 5;
    }
    else if (objc_msgSend(*(id *)(a1 + 32), "radioTechnology") == 7
           || objc_msgSend(*(id *)(a1 + 32), "radioTechnology") == 8)
    {
      v13 = 1;
    }
    else if (objc_msgSend(*(id *)(a1 + 32), "radioTechnology") == 9)
    {
      v13 = 7;
    }
    else if (objc_msgSend(*(id *)(a1 + 32), "radioTechnology") == 10)
    {
      v13 = 9;
    }
    else
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Unknown registered technology"));
      v13 = 10;
    }
  }
  else
  {
    v13 = 8;
  }
  objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v13));
  v14 = *(_QWORD *)(a1 + 48);
  if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", v14 - 1), "intValue") == 10)
  {
    v15 = "UNKNOWN_RADIO ";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue") == 1)
  {
    v15 = "LTE Radio";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue") == 2)
  {
    v15 = "UMTS_RADIO";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue") == 3)
  {
    v15 = "CDMA1X_RADIO";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue") == 4)
  {
    v15 = "CDMAEVDO";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue") == 5)
  {
    v15 = "CDMAHybrid";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue") == 6)
  {
    v15 = "eHRPD_RADIO";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue") == 7)
  {
    v15 = "TDSCDMA_RADIO";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue") == 8)
  {
    v15 = "GSM_RADIO";
  }
  else
  {
    v16 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue");
    v15 = "UNKNOWN_RADIO!!!";
    if (v16 == 9)
      v15 = "N_RADIO";
  }
  v17 = (_DWORD)v2 - 12;
  if (v2 < 0xC && ((0xFF7u >> (char)v2) & 1) != 0)
  {
    v18 = (&off_100202208)[(int)v2];
  }
  else if (v17 < 7 && ((0x5Fu >> v17) & 1) != 0)
  {
    v18 = (&off_100202268)[v17];
  }
  else
  {
    v18 = "Unknown kCTDataIndicatorStatusUnknown!!!";
    if ((_DWORD)v2 == 17)
      v18 = "5GUwb";
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: SIM %d servCellRadioTechnologyType %s Data Attached %d Data enabled %d, data indicator: %s"), "-[WRM_EnhancedCTService processDataStatus::]_block_invoke", v14, v15, v3, v7, v18);
  return objc_msgSend(*(id *)(a1 + 40), "evaluateCbrsInDualSimMode:", 0);
}

id sub_10003B20C(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  unsigned int v4;

  if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyGSM")) & 1) != 0)goto LABEL_5;
  if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyTDSCDMA")) & 1) != 0)
  {
    v2 = 7;
    goto LABEL_6;
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyGSMCompact")) & 1) != 0)
  {
LABEL_5:
    v2 = 8;
  }
  else if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyUTRAN")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyCDMA1x")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyCDMAEVDO")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyCDMAHybrid")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyeHRPD")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyLTE")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyNR")) & 1) != 0)
  {
    v2 = 9;
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Unknown registered technology"));
    v2 = 10;
  }
LABEL_6:
  objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v2));
  if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue") == 10)
  {
    v3 = "UNKNOWN_RADIO ";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue") == 1)
  {
    v3 = "LTE Radio";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue") == 2)
  {
    v3 = "UMTS_RADIO";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue") == 3)
  {
    v3 = "CDMA1X_RADIO";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue") == 4)
  {
    v3 = "CDMAEVDO";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue") == 5)
  {
    v3 = "CDMAHybrid";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue") == 6)
  {
    v3 = "eHRPD_RADIO";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue") == 7)
  {
    v3 = "TDSCDMA_RADIO";
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue") == 8)
  {
    v3 = "GSM_RADIO";
  }
  else
  {
    v4 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "servCellRadioTechnologyType"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue");
    v3 = "UNKNOWN_RADIO!!!";
    if (v4 == 9)
      v3 = "N_RADIO";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: servCellRadioTechnologyType %s"), "-[WRM_EnhancedCTService processRadioTechnologyInfo::]_block_invoke", v3);
}

id sub_10003B5F4(uint64_t a1)
{
  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "bars"), "intValue"))
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "bars"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, objc_msgSend(*(id *)(a1 + 32), "bars"));
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: update  bars %d"), "-[WRM_EnhancedCTService processSignalStrengthInfo::]_block_invoke", objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "bars"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "intValue"));
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("set signal bar 5"));
    return objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "bars"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 48) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 5));
  }
}

_BYTE *sub_10003B75C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  const char *v8;
  _BYTE *result;
  id v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "subscriptions"), "removeAllObjects");
  objc_msgSend(*(id *)(a1 + 32), "setNumberofSubscriptions:", 0);
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = objc_msgSend(*(id *)(a1 + 40), "subscriptions");
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v7, "slotID") && objc_msgSend(v7, "isSimPresent"))
        {
          objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "subscriptions"), "addObject:", v7);
          if (objc_msgSend(v7, "slotID"))
          {
            v8 = "CTSubscriptionSlotOne";
            if (objc_msgSend(v7, "slotID") != (id)1)
            {
              if (objc_msgSend(v7, "slotID") == (id)2)
                v8 = "CTSubscriptionSlotTwo";
              else
                v8 = "Unknown CTSubscriptionSlot!!!";
            }
          }
          else
          {
            v8 = "CTSubscriptionSlotUnknown";
          }
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s slotID %s current subscriptions %@"), "-[WRM_EnhancedCTService processSubscriptionInfo::]_block_invoke", v8, objc_msgSend(*(id *)(a1 + 32), "subscriptions"));
          objc_msgSend(*(id *)(a1 + 32), "setNumberofSubscriptions:", (char *)objc_msgSend(*(id *)(a1 + 32), "numberofSubscriptions") + 1);
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v4);
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s total numberofSubscriptions=%lu"), "-[WRM_EnhancedCTService processSubscriptionInfo::]_block_invoke", objc_msgSend(*(id *)(a1 + 32), "numberofSubscriptions"));
  objc_msgSend(*(id *)(a1 + 32), "setMSubscriptionInfoDidChange:", 1);
  objc_msgSend(*(id *)(a1 + 32), "getCurrentEnhancedCTMetrics");
  result = *(_BYTE **)(a1 + 32);
  if (result[484])
  {
    v10 = objc_msgSend(result, "numberofSubscriptions");
    v11 = *(void **)(a1 + 32);
    if (v10 == (id)1)
    {
      return objc_msgSend(v11, "evaluateCbrsInSingleSimMode");
    }
    else
    {
      result = objc_msgSend(v11, "numberofSubscriptions");
      if ((unint64_t)result >= 2)
        return objc_msgSend(*(id *)(a1 + 32), "evaluateCbrsInDualSimMode:", 1);
    }
  }
  return result;
}

id sub_10003BAD8(uint64_t a1)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[5];

  if (objc_msgSend(*(id *)(a1 + 32), "CTClientInitDone"))
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("enhancedCTService: Already initialized, returning"));
  objc_msgSend(*(id *)(a1 + 32), "setCTClient:", objc_msgSend(objc_alloc((Class)CoreTelephonyClient), "initWithQueue:", objc_msgSend(*(id *)(a1 + 32), "serverQueue")));
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "CTClient"), "setDelegate:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 32), "setMCTService:", +[WRM_CTService WRM_CTServiceControllerSingleton](WRM_CTService, "WRM_CTServiceControllerSingleton"));
  v3 = objc_msgSend(*(id *)(a1 + 32), "CTClient");
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10003BC54;
  v6[3] = &unk_100201E60;
  v6[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v3, "getSubscriptionInfo:", v6);
  v5 = 0;
  v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "CTClient"), "getCurrentDataSubscriptionContextSync:", &v5);
  if (v5 || !v4)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("getCurrentDataSubscriptionContextSync error %@"), objc_msgSend(v5, "localizedDescription"));
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setDataPreferredSlot:", objc_msgSend(v4, "slotID"));
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("getCurrentDataSubscriptionContextSync dataPreferredSlot=%lu"), objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot"));
  }
  return objc_msgSend(*(id *)(a1 + 32), "setCTClientInitDone:", 1);
}

id sub_10003BC54(uint64_t a1, void *a2, void *a3)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("getSubscriptionInfo Subscription info %@ count %lu error %@"), a2, objc_msgSend(objc_msgSend(a2, "subscriptions"), "count"), objc_msgSend(a3, "localizedDescription"));
  return objc_msgSend(*(id *)(a1 + 32), "processSubscriptionInfo::", a2, a3);
}

void sub_10003BD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003BD94(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_10003BDA4(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_10003BDB0(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40) = *(_QWORD *)(*(_QWORD *)(result + 32) + 444);
  return result;
}

id sub_10003BE30(uint64_t a1)
{
  id result;
  void *v3;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("dataConnectionStatusInfo %@"), *(_QWORD *)(a1 + 32));
  result = *(id *)(a1 + 32);
  if (result)
  {
    result = objc_msgSend(result, "interfaceName");
    if (result)
    {
      v3 = *(void **)(*(_QWORD *)(a1 + 40) + 444);
      if (v3)

      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 444) = objc_msgSend(objc_alloc((Class)NSString), "initWithString:", objc_msgSend(*(id *)(a1 + 32), "interfaceName"));
      return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("mInternetInterfaceName = %@"), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 444));
    }
  }
  return result;
}

id sub_10003BF78(uint64_t a1, void *a2, void *a3)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("getSubscriptionInfo Subscription info %@ count %lu error %@"), a2, objc_msgSend(objc_msgSend(a2, "subscriptions"), "count"), objc_msgSend(a3, "localizedDescription"));
  return objc_msgSend(*(id *)(a1 + 32), "processSubscriptionInfo::", a2, a3);
}

id sub_10003C130(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("copyRegistrationStatus:  Registration status %@ error %@"), a2, objc_msgSend(a3, "localizedDescription"));
  if (a2)
  {
    if (!a3)
      return objc_msgSend(*(id *)(a1 + 32), "processRegistrationStatus::", a2, objc_msgSend(*(id *)(a1 + 40), "slotID"));
  }
  return result;
}

uint64_t sub_10003C384(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v2 = off_1002710B0;
  v8 = off_1002710B0;
  if (!off_1002710B0)
  {
    v3 = (void *)sub_1000439BC();
    v2 = dlsym(v3, "BMDeviceCellularAvailabilityStatusStateAsString");
    v6[3] = (uint64_t)v2;
    off_1002710B0 = v2;
  }
  _Block_object_dispose(&v5, 8);
  if (!v2)
    sub_10012E4D4();
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

void sub_10003C414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_10003CD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10003CD4C()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = sub_10003BD94;
  v7 = sub_10003BDA4;
  v0 = qword_1002710C8;
  v8 = qword_1002710C8;
  if (!qword_1002710C8)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_100043A64;
    v2[3] = &unk_100201B40;
    v2[4] = &v3;
    sub_100043A64((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_10003CDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10003CE84(id *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(objc_msgSend(a1[4], "instance"), "intValue");
  v3 = (int)v2 - 1;
  objc_msgSend(objc_msgSend(a1[5], "mcc"), "replaceObjectAtIndex:withObject:", v3, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(objc_msgSend(a1[6], "mcc"), "intValue")));
  objc_msgSend(objc_msgSend(a1[5], "mnc"), "replaceObjectAtIndex:withObject:", v3, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(objc_msgSend(a1[6], "mnc"), "intValue")));
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: plmnChanged mcc=%s, mnc=%s, slot=%d"), "-[WRM_EnhancedCTService plmnChanged:plmn:]_block_invoke", objc_msgSend(objc_msgSend(a1[6], "mcc"), "UTF8String"), objc_msgSend(objc_msgSend(a1[6], "mnc"), "UTF8String"), v2);
}

void sub_10003D6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

char *sub_10003D6CC(uint64_t a1)
{
  char *result;
  char *v2;
  void *v3;

  result = (char *)objc_loadWeak((id *)(a1 + 32));
  if (result)
  {
    v2 = result;
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CBRS ping-pong timer expired"));
    v3 = *(void **)(v2 + 468);
    if (v3)
    {
      objc_msgSend(v3, "invalidate");

      *(_QWORD *)(v2 + 468) = 0;
    }
    return (char *)objc_msgSend(v2, "evaluateCbrsInDualSimMode:", 0);
  }
  return result;
}

_QWORD *sub_10003D8DC(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  const __CFString *v4;
  id v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  double v10;
  double v11;
  double v12;
  id v13;
  double v14;
  double v15;
  unsigned int v16;
  double v17;
  double v18;
  double v19;
  id v20;
  double v21;
  double v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  _QWORD *v31;
  _BOOL8 v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  _BOOL8 v36;
  unsigned int v37;
  _QWORD *v38;
  unsigned int v39;
  unsigned int v40;

  if (!*(_BYTE *)(result[4] + 484))
    return result;
  v1 = result;
  result = objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "isRecentDevice");
  if (!(_DWORD)result)
    return result;
  if (objc_msgSend((id)v1[4], "numberofSubscriptions") != (id)2)
  {
    v4 = CFSTR("evaluateCbrsInDualSimMode error: not in dual sim mode");
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v4);
  }
  if ((objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "isPrivateNetworkSim"), "objectAtIndex:", 0), "BOOLValue") & 1) != 0)
  {
    v2 = 2;
    v3 = 1;
  }
  else
  {
    v2 = 1;
    if ((objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "isPrivateNetworkSim"), "objectAtIndex:", 1), "BOOLValue") & 1) == 0)
    {
      v4 = CFSTR("evaluateCbrsInDualSimMode error: CBRS/PNW sim not present in dual sim mode");
      return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v4);
    }
    v3 = 2;
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("evaluateCbrsInDualSimMode forceRecommendation=%u, (priNwSlot=%d, nonpriNwSlot=%d), currentDataSlot=%d"), *((unsigned __int8 *)v1 + 40), v3, v2, objc_msgSend((id)v1[4], "dataPreferredSlot"));
  v5 = objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "getiRATConfigController");
  if (!v5)
  {
    v4 = CFSTR("evaluateCbrsInDualSimMode Error: invalid tempiRATConfig");
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v4);
  }
  v6 = v5;
  v7 = v2 - 1;
  v8 = objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "mcc"), "objectAtIndex:", v2 - 1), "intValue");
  v40 = objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "mnc"), "objectAtIndex:", v2 - 1), "intValue");
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: self.mcc = %@, self.mnc=%@"), "-[WRM_EnhancedCTService evaluateCbrsInDualSimMode:]_block_invoke", objc_msgSend((id)v1[4], "mcc"), objc_msgSend((id)v1[4], "mnc"));
  v9 = objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "servCellRadioTechnologyType"), "objectAtIndex:", v3 - 1), "intValue");
  if (v9 == 9)
  {
    objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "nrCellRSRP"), "objectAtIndex:", v3 - 1), "doubleValue");
    v11 = v14;
    v13 = objc_msgSend((id)v1[4], "nrCellRSRQ");
  }
  else
  {
    v10 = 0.0;
    v11 = 0.0;
    if (v9 != 1)
      goto LABEL_18;
    objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "servCellRSRP"), "objectAtIndex:", v3 - 1), "doubleValue");
    v11 = v12;
    v13 = objc_msgSend((id)v1[4], "servCellRSRQ");
  }
  objc_msgSend(objc_msgSend(v13, "objectAtIndex:", v3 - 1), "doubleValue");
  v10 = v15;
LABEL_18:
  v16 = objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "servCellRadioTechnologyType"), "objectAtIndex:", v2 - 1), "intValue");
  if (v16 == 9)
  {
    objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "nrCellRSRP"), "objectAtIndex:", v2 - 1), "doubleValue");
    v18 = v21;
    v20 = objc_msgSend((id)v1[4], "nrCellRSRQ");
    goto LABEL_22;
  }
  v17 = 0.0;
  v18 = 0.0;
  if (v16 == 1)
  {
    objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "servCellRSRP"), "objectAtIndex:", v2 - 1), "doubleValue");
    v18 = v19;
    v20 = objc_msgSend((id)v1[4], "servCellRSRQ");
LABEL_22:
    objc_msgSend(objc_msgSend(v20, "objectAtIndex:", v2 - 1), "doubleValue");
    v17 = v22;
  }
  v38 = (_QWORD *)v2;
  v23 = objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "isDataAttached"), "objectAtIndex:", v3 - 1), "BOOLValue");
  v24 = objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "isDataEnabled"), "objectAtIndex:", v3 - 1), "BOOLValue");
  v39 = v23;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s privNwRSRP=%f, privNwRSRQ=%f, nonPrivNwRSRP=%f, nonPrivNwRSRQ=%f, isCbrsDataAttached=%d, isCbrsDataEnabled=%d"), "-[WRM_EnhancedCTService evaluateCbrsInDualSimMode:]_block_invoke", *(_QWORD *)&v11, *(_QWORD *)&v10, *(_QWORD *)&v18, *(_QWORD *)&v17, v23, v24);
  v25 = objc_msgSend((id)v1[4], "getBandInfoOnSlot:", v3);
  v26 = (double)(uint64_t)objc_msgSend(v6, "cbrsEnterRsrqMin");
  v27 = (double)(uint64_t)objc_msgSend(v6, "cbrsEnterRsrpMin");
  v28 = (double)(uint64_t)objc_msgSend(v6, "cbrsExitRsrqMin");
  v29 = (double)(uint64_t)objc_msgSend(v6, "cbrsExitRsrpMin");
  v37 = v24;
  if (objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "servCellRadioTechnologyType"), "objectAtIndex:", v3 - 1), "intValue") == 9&& v25 == 71)
  {
    v30 = v7;
    v31 = (_QWORD *)v3;
    v27 = v27 + (double)(uint64_t)objc_msgSend(v6, "cbrsEnterRsrpOffset");
    v26 = v26 + (double)(uint64_t)objc_msgSend(v6, "cbrsEnterRsrqOffset");
    v29 = v29 + (double)(uint64_t)objc_msgSend(v6, "cbrsExitRsrpOffset");
    v28 = v28 + (double)(uint64_t)objc_msgSend(v6, "cbrsExitRsrqOffset");
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Band 71, applied offset enterRsrp:%f enterRsrq:%f exitRsrp:%f, exitRsrq:%f"), *(_QWORD *)&v27, *(_QWORD *)&v26, *(_QWORD *)&v29, *(_QWORD *)&v28);
  }
  else
  {
    v30 = v7;
    v31 = (_QWORD *)v3;
  }
  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s cbrsEnterRsrpMin=%f, cbrsEnterRsrqMin=%f, nonCbrsExitRsrpMin=%lld, nonCbrsExitRsrqMin=%lld, cbrsExitRsrpMin=%f, cbrsExitRsrqMin=%f, nonCbrsEnterRsrpMin=%lld,nonCbrsEnterRsrqMin=%lld"), "-[WRM_EnhancedCTService evaluateCbrsInDualSimMode:]_block_invoke", *(_QWORD *)&v27, *(_QWORD *)&v26, objc_msgSend(v6, "nonCbrsExitRsrpMin"), objc_msgSend(v6, "nonCbrsExitRsrqMin"), *(_QWORD *)&v29, *(_QWORD *)&v28, objc_msgSend(v6, "nonCbrsEnterRsrpMin"), objc_msgSend(v6, "nonCbrsEnterRsrqMin"));
  if (v10 != 0.0 && v10 > v26 && v11 != 0.0 && v11 > v27)
  {
    result = objc_msgSend((id)v1[4], "dataPreferredSlot");
    if (v31 != result)
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("evaluateCbrsInDualSimMode privateNw slot signal becomes good"));
      if ((objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "isRoaming"), "objectAtIndex:", v3 - 1), "BOOLValue") & 1) == 0&& ((v39 ^ 1) & 1) == 0&& ((v37 ^ 1) & 1) == 0)
      {
        v32 = v18 > (double)(uint64_t)objc_msgSend(v6, "nonCbrsExitRsrpMin")
           && v17 > (double)(uint64_t)objc_msgSend(v6, "nonCbrsExitRsrqMin");
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("evaluateCbrsInDualSimMode Recommend data on privateNwSlot %d, dataSlotQuality %llu, anyCallState %d"), v31, v32, *(unsigned int *)(v1[4] + 436));
        result = objc_msgSend((id)v1[4], "switchPrivateNwDataSim:currentSlotQuality:anyCallState:forceRecommend:", v31, v32, *(unsigned int *)(v1[4] + 436), *((unsigned __int8 *)v1 + 40));
        *(_QWORD *)(v1[4] + 476) = v31;
        return result;
      }
      result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("evaluateCbrsInDualSimMode PrivateNw SIM %d not attached yet"), v31);
    }
  }
  if (v8 && v40)
  {
    v33 = v10 > v28 ? v39 : 0;
    if ((v33 != 1 || v11 <= v29) && v17 != 0.0)
    {
      result = objc_msgSend(v6, "nonCbrsEnterRsrqMin");
      if (v17 >= (double)(uint64_t)result && v18 != 0.0)
      {
        result = objc_msgSend(v6, "nonCbrsEnterRsrpMin");
        if (v18 >= (double)(uint64_t)result)
        {
          result = objc_msgSend((id)v1[4], "dataPreferredSlot");
          if (v38 != result)
          {
            +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("evaluateCbrsInDualSimMode PrivateNw degrades while nonPrivateNw signal is good"));
            v34 = objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "isDataAttached"), "objectAtIndex:", v30), "BOOLValue");
            v35 = objc_msgSend(objc_msgSend(objc_msgSend((id)v1[4], "isDataEnabled"), "objectAtIndex:", v30), "BOOLValue");
            if (v34 && v35)
            {
              +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("evaluateCbrsInDualSimMode Recommend data on nonPrivateNw SIM %d anyCallState %d"), v38, *(unsigned int *)(v1[4] + 436));
              result = objc_msgSend((id)v1[4], "switchPrivateNwDataSim:currentSlotQuality:anyCallState:forceRecommend:", v38, 0, *(unsigned int *)(v1[4] + 436), *((unsigned __int8 *)v1 + 40));
              *(_QWORD *)(v1[4] + 476) = v38;
              return result;
            }
            result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("evaluateCbrsInDualSimMode nonPrivateNw SIM %d not attached yet"), v38);
          }
        }
      }
    }
  }
  if (*((_BYTE *)v1 + 40))
  {
    if (objc_msgSend((id)v1[4], "dataPreferredSlot") == v31)
      v36 = v11 > v29 && v10 > v28;
    else
      v36 = objc_msgSend((id)v1[4], "dataPreferredSlot") != v38
         || v18 > (double)(uint64_t)objc_msgSend(v6, "nonCbrsExitRsrpMin")
         && v17 > (double)(uint64_t)objc_msgSend(v6, "nonCbrsExitRsrqMin");
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("evaluateCbrsInDualSimMode Force Recommend dataSlotQuality=%d, anyCallState=%d"), v36, *(unsigned int *)(v1[4] + 436));
    return objc_msgSend((id)v1[4], "switchPrivateNwDataSim:currentSlotQuality:anyCallState:forceRecommend:", 0, v36, *(unsigned int *)(v1[4] + 436), 1);
  }
  return result;
}

_DWORD *sub_10003E690(uint64_t a1)
{
  _DWORD *result;

  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "nrCellRSRP"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 40) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48)));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: slot %d NrRSRP %f"), "-[WRM_EnhancedCTService setNrRSRP:forSim:]_block_invoke", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  result = *(_DWORD **)(a1 + 32);
  if (result[95] == 2)
    return objc_msgSend(result, "monitorStrongSOSSignal:", *(double *)(a1 + 48));
  return result;
}

id sub_10003E7C4(uint64_t a1)
{
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "nrCellSNR"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 40) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48)));
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: slot %d NrSNR %f"), "-[WRM_EnhancedCTService setNrSNR:forSim:]_block_invoke", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_10003E8C8(uint64_t a1)
{
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellECIO"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 40) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48)));
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: slot %d ECIO %f"), "-[WRM_EnhancedCTService setServingCellECIO:forSim:]_block_invoke", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_10003E9CC(uint64_t a1)
{
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellRSCP"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 40) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48)));
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: slot %d RSCP %f"), "-[WRM_EnhancedCTService setServingCellRSCP:forSim:]_block_invoke", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_10003EAD0(uint64_t a1)
{
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "nrCellRSRQ"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 40) - 1, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48)));
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: slot %d NrRSRQ %f"), "-[WRM_EnhancedCTService setNrRSRQ:forSim:]_block_invoke", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_10003EBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10003EC10(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  id v4;

  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "nrCellRSRP"), "objectAtIndex:", (char *)objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot") - 1), "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2;
  if (objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot"))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot") == (id)1)
    {
      v3 = "CTSubscriptionSlotOne";
    }
    else
    {
      v4 = objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot");
      v3 = "Unknown CTSubscriptionSlot!!!";
      if (v4 == (id)2)
        v3 = "CTSubscriptionSlotTwo";
    }
  }
  else
  {
    v3 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: active data slot %s RSRP %f"), "-[WRM_EnhancedCTService getNrRSRP]_block_invoke", v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void sub_10003ED98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10003EDB0(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;

  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "nrCellRSRP"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2;
  v3 = "CTSubscriptionSlotUnknown";
  v4 = "CTSubscriptionSlotOne";
  v5 = "Unknown CTSubscriptionSlot!!!";
  v6 = *(_QWORD *)(a1 + 48);
  if (v6 == 2)
    v5 = "CTSubscriptionSlotTwo";
  if (v6 != 1)
    v4 = v5;
  if (v6)
    v3 = v4;
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: sim slot %s NrRSRP %f"), "-[WRM_EnhancedCTService getNrRSRP:]_block_invoke", v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void sub_10003EEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10003EF14(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  id v4;

  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "nrCellSNR"), "objectAtIndex:", (char *)objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot") - 1), "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2;
  if (objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot"))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot") == (id)1)
    {
      v3 = "CTSubscriptionSlotOne";
    }
    else
    {
      v4 = objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot");
      v3 = "Unknown CTSubscriptionSlot!!!";
      if (v4 == (id)2)
        v3 = "CTSubscriptionSlotTwo";
    }
  }
  else
  {
    v3 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: active slot %s SNR %f"), "-[WRM_EnhancedCTService getNrSNR]_block_invoke", v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void sub_10003F09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10003F0B4(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;

  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "nrCellSNR"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2;
  v3 = "CTSubscriptionSlotUnknown";
  v4 = "CTSubscriptionSlotOne";
  v5 = "Unknown CTSubscriptionSlot!!!";
  v6 = *(_QWORD *)(a1 + 48);
  if (v6 == 2)
    v5 = "CTSubscriptionSlotTwo";
  if (v6 != 1)
    v4 = v5;
  if (v6)
    v3 = v4;
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: sim slot %s SNR %f"), "-[WRM_EnhancedCTService getNrSNR:]_block_invoke", v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void sub_10003F200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10003F218(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  id v4;

  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "nrCellRSRQ"), "objectAtIndex:", (char *)objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot") - 1), "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2;
  if (objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot"))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot") == (id)1)
    {
      v3 = "CTSubscriptionSlotOne";
    }
    else
    {
      v4 = objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot");
      v3 = "Unknown CTSubscriptionSlot!!!";
      if (v4 == (id)2)
        v3 = "CTSubscriptionSlotTwo";
    }
  }
  else
  {
    v3 = "CTSubscriptionSlotUnknown";
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: active slot %s RSRQ %f"), "-[WRM_EnhancedCTService getNrRSRQ]_block_invoke", v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void sub_10003F3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10003F3B8(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;

  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "nrCellRSRQ"), "objectAtIndex:", *(_QWORD *)(a1 + 48) - 1), "doubleValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2;
  v3 = "CTSubscriptionSlotUnknown";
  v4 = "CTSubscriptionSlotOne";
  v5 = "Unknown CTSubscriptionSlot!!!";
  v6 = *(_QWORD *)(a1 + 48);
  if (v6 == 2)
    v5 = "CTSubscriptionSlotTwo";
  if (v6 != 1)
    v4 = v5;
  if (v6)
    v3 = v4;
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: sim slot %s RSRQ %f"), "-[WRM_EnhancedCTService getNrRSRQ:]_block_invoke", v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

unint64_t sub_10003F99C(unint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  const char *v3;
  const char *v4;

  v1 = *(_QWORD *)(result + 40);
  if (v1)
  {
    v2 = result;
    v3 = "Unknown CTSubscriptionSlot!!!";
    if (v1 == 2)
      v3 = "CTSubscriptionSlotTwo";
    if (v1 == 1)
      v4 = "CTSubscriptionSlotOne";
    else
      v4 = v3;
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: slot %s stall detected %d"), "-[WRM_EnhancedCTService updateDataStallState:stall:]_block_invoke", v4, *(unsigned __int8 *)(result + 48));
    objc_msgSend(objc_msgSend(*(id *)(v2 + 32), "stallDetected"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(v2 + 40) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(v2 + 48)));
    result = *(_QWORD *)(v2 + 32);
    if (*(_BYTE *)(result + 484))
    {
      if (*(_BYTE *)(v2 + 48))
      {
        result = (unint64_t)objc_msgSend(objc_msgSend(objc_msgSend((id)result, "cbrsCoreAnalyticsMetricsSent"), "objectAtIndex:", *(_QWORD *)(v2 + 40) - 1), "BOOLValue");
        if ((result & 1) == 0)
        {
          result = *(_QWORD *)(v2 + 32);
          if (*(_QWORD *)(v2 + 40) == *(_QWORD *)(result + 476))
          {
            result = (unint64_t)objc_msgSend((id)result, "numberofSubscriptions");
            if (result >= 2)
            {
              objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "submitMetricsCBRSWithDataSimRecommendation:forSimSlot:", 0, *(_QWORD *)(v2 + 40));
              return (unint64_t)objc_msgSend(objc_msgSend(*(id *)(v2 + 32), "cbrsCoreAnalyticsMetricsSent"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(v2 + 40) - 1, &__kCFBooleanTrue);
            }
          }
        }
      }
    }
  }
  return result;
}

id sub_10003FB68(uint64_t a1)
{
  const char *v2;
  const char *v3;
  uint64_t v4;
  const char *v5;

  v2 = "CTSubscriptionSlotUnknown";
  v3 = "CTSubscriptionSlotOne";
  v4 = *(_QWORD *)(a1 + 40);
  v5 = "Unknown CTSubscriptionSlot!!!";
  if (v4 == 2)
    v5 = "CTSubscriptionSlotTwo";
  if (v4 != 1)
    v3 = v5;
  if (v4)
    v2 = v3;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: slot %s Current RAT %d"), "-[WRM_EnhancedCTService updateCurrentRatInfo:currentNRCell:]_block_invoke", v2, *(unsigned int *)(a1 + 48));
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "currentNRCellType"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 40) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
}

id sub_10003FCA4(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  const char *v4;
  const char *v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = "CTSubscriptionSlotOne";
  v4 = "Unknown CTSubscriptionSlot!!!";
  if (v2 == 2)
    v4 = "CTSubscriptionSlotTwo";
  if (v2 != 1)
    v3 = v4;
  if (v2)
    v5 = v3;
  else
    v5 = "CTSubscriptionSlotUnknown";
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: slot %s DL Configued BW %d, UL configued BW:%d"), "-[WRM_EnhancedCTService updateConfiguredMaxBW:dlbw:ulbw:]_block_invoke", v5, *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52));
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "configuredMaxDLBW"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 40) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "configuredMaxULBW"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 40) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 52)));
}

id sub_10003FE14(uint64_t a1)
{
  int v2;
  const char *v3;
  const char *v4;
  const char *v5;

  v2 = *(unsigned __int8 *)(a1 + 48);
  v3 = "CTSubscriptionSlotOne";
  v4 = "Unknown CTSubscriptionSlot!!!";
  if (v2 == 2)
    v4 = "CTSubscriptionSlotTwo";
  if (v2 != 1)
    v3 = v4;
  if (*(_BYTE *)(a1 + 48))
    v5 = v3;
  else
    v5 = "CTSubscriptionSlotUnknown";
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: slot %s DL BW %d, Conf:%d"), "-[WRM_EnhancedCTService updateDownlinkEstimatedBW:bw:conf:lte:nr:]_block_invoke", v5, *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "estimatedBWDL"), "replaceObjectAtIndex:withObject:", *(unsigned __int8 *)(a1 + 48) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40)));
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "estimatedBWDLConf"), "replaceObjectAtIndex:withObject:", *(unsigned __int8 *)(a1 + 48) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44)));
}

id sub_10003FF94(uint64_t a1)
{
  const char *v2;
  const char *v3;
  const char *v4;
  int v5;

  v2 = "CTSubscriptionSlotUnknown";
  v3 = "CTSubscriptionSlotOne";
  v4 = "Unknown CTSubscriptionSlot!!!";
  v5 = *(unsigned __int8 *)(a1 + 52);
  if (v5 == 2)
    v4 = "CTSubscriptionSlotTwo";
  if (v5 != 1)
    v3 = v4;
  if (*(_BYTE *)(a1 + 52))
    v2 = v3;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("%s: slot %s, UL BW %d, Conf:%d, Queue:%d"), "-[WRM_EnhancedCTService updateUplinkEstimatedBW:bw:conf:queue:]_block_invoke", v2, *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(unsigned int *)(a1 + 48));
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "estimatedBWUL"), "replaceObjectAtIndex:withObject:", *(unsigned __int8 *)(a1 + 52) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40)));
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "estimatedBWULConf"), "replaceObjectAtIndex:withObject:", *(unsigned __int8 *)(a1 + 52) - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44)));
}

void sub_100040204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100040370(id a1, NSString *a2)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellularThroughput: Cellular Speed Test Scheduled: %@"), a2);
  byte_1002710AA = 0;
}

id sub_100040F08(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "reloadCellularSpeedTestSettingsFromPreferences");
}

void sub_100041080(uint64_t a1, char a2)
{
  NSObject *v3;
  _QWORD block[4];
  char v5;

  v3 = objc_msgSend(*(id *)(a1 + 32), "queue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000410E4;
  block[3] = &unk_100201FF0;
  v5 = a2;
  dispatch_async(v3, block);
}

id sub_1000410E4(uint64_t a1)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("LocationController: ClientLocationAuthorized callback authorized: %d"), *(unsigned __int8 *)(a1 + 32));
  byte_100270960 = *(_BYTE *)(a1 + 32);
  return result;
}

void sub_100041134(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  NSObject *v11;
  _QWORD v12[8];

  v11 = objc_msgSend(*(id *)(a1 + 32), "queue");
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000411C0;
  v12[3] = &unk_100202040;
  *(double *)&v12[5] = a2;
  *(double *)&v12[6] = a3;
  *(double *)&v12[7] = a7;
  v12[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(v11, v12);
}

id sub_1000411C0(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("LocationController: ClientLocationHandler callback, latitude=%f, longitude=%f, speed=%f"), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 316) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 324) = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "queryLocationdDBForHarvestingData::", *(double *)(a1 + 40), *(double *)(a1 + 48));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 308), "stopMonitoring");
}

void sub_100041368(uint64_t a1, char a2)
{
  NSObject *v3;
  _QWORD block[4];
  char v5;

  v3 = objc_msgSend(*(id *)(a1 + 32), "queue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000413CC;
  block[3] = &unk_100201FF0;
  v5 = a2;
  dispatch_async(v3, block);
}

id sub_1000413CC(uint64_t a1)
{
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("wrmSdmLocationController: ClientLocationAuthorized callback authorized: %d"), *(unsigned __int8 *)(a1 + 32));
}

char *sub_10004147C(uint64_t a1)
{
  unsigned __int8 v2;
  char *result;
  unsigned int v4;

  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "locDbRequired"), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 40) - 1, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
  v2 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "locDbRequired"), "objectAtIndex:", 0), "BOOLValue");
  result = *(char **)(a1 + 32);
  if ((v2 & 1) != 0)
  {
    if (!*(_QWORD *)(result + 356))
      return (char *)+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("updateWrmSdmLocationDbInfoRegister Failed: locationController not initialized"));
LABEL_6:
    if (!result[364])
    {
      result[364] = 1;
      return (char *)+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("updateWrmSdmLocationDbInfoRegister for sub %d start location monitoring"), *(_QWORD *)(a1 + 40));
    }
    return result;
  }
  v4 = objc_msgSend(objc_msgSend(objc_msgSend(result, "locDbRequired"), "objectAtIndex:", 1), "BOOLValue");
  result = *(char **)(a1 + 32);
  if (!*(_QWORD *)(result + 356))
    return (char *)+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("updateWrmSdmLocationDbInfoRegister Failed: locationController not initialized"));
  if (v4)
    goto LABEL_6;
  if (result[364])
  {
    result[364] = 0;
    return (char *)+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("updateWrmSdmLocationDbInfoRegister for sub %d stop location monitoring"), *(_QWORD *)(a1 + 40));
  }
  return result;
}

id sub_100041654(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  id result;
  uint64_t v12;

  v2 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSince1970:", *(double *)(*(_QWORD *)(a1 + 32) + 348));
  v4 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 332);
  v7 = *(_QWORD *)(v5 + 340);
  v8 = *(unsigned int *)(a1 + 56);
  v9 = *(unsigned int *)(a1 + 60);
  objc_msgSend(v2, "timeIntervalSinceNow");
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("fetchWrmSdmLocationDbInfoWithMcc from BB: mcc=%u, mnc=%u, cellId=%llu, simSlot=%d, lastKnown latitude=%f, longitude=%f location obtained from %fsec before"), v8, v9, v4, v3, v6, v7, -v10);

  result = objc_msgSend(*(id *)(a1 + 32), "fetchSmartDataModeDataForLocation::::::", *(unsigned __int16 *)(a1 + 56), *(unsigned __int16 *)(a1 + 60), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(double *)(*(_QWORD *)(a1 + 32) + 332), *(double *)(*(_QWORD *)(a1 + 32) + 340));
  v12 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v12 + 356))
  {
    if (!*(_BYTE *)(v12 + 364))
    {
      *(_BYTE *)(v12 + 364) = 1;
      return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("fetchSmartDataModeDataForLocation for sub %d start location monitoring"), *(_QWORD *)(a1 + 48));
    }
  }
  return result;
}

id sub_1000417E4(uint64_t a1)
{
  id result;

  result = *(id *)(*(_QWORD *)(a1 + 32) + 308);
  if (result)
    return objc_msgSend(result, "startMonitoring");
  return result;
}

id sub_1000418EC(uint64_t a1)
{
  if (qword_100270F08)
  {

    qword_100270F08 = 0;
  }
  dword_100270F18 = *(_DWORD *)(a1 + 48);
  qword_100270F08 = (uint64_t)objc_msgSend(*(id *)(a1 + 32), "copy");
  qword_100270F10 = (uint64_t)objc_msgSend((id)qword_100270F08, "substringToIndex:", *(int *)(a1 + 48));
  if (objc_msgSend(objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "getSCService"), "isWiFiPrimary"))
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("triggerHarvestedCellEval, cell changed"));
    objc_msgSend(*(id *)(a1 + 40), "triggerHarvestedCellEval");
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("resetting updateGlobalCellID"));
    objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "detectedFR1CellCountLocDB"), "replaceObjectAtIndex:withObject:", (char *)objc_msgSend(*(id *)(a1 + 40), "dataPreferredSlot") - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
    objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "detectedFR2CellCountLocDB"), "replaceObjectAtIndex:withObject:", (char *)objc_msgSend(*(id *)(a1 + 40), "dataPreferredSlot") - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Global Cell ID: %@"), qword_100270F08);
}

uint64_t sub_100041AF0()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = sub_10003BD94;
  v7 = sub_10003BDA4;
  v0 = qword_1002710E0;
  v8 = qword_1002710E0;
  if (!qword_1002710E0)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_100043B94;
    v2[3] = &unk_100201B40;
    v2[4] = &v3;
    sub_100043B94((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100041B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100041BB4()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = sub_10003BD94;
  v7 = sub_10003BDA4;
  v0 = qword_1002710F0;
  v8 = qword_1002710F0;
  if (!qword_1002710F0)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_100043C8C;
    v2[3] = &unk_100201B40;
    v2[4] = &v3;
    sub_100043C8C((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100041C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100041C78(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  void **v6;
  id result;
  void **v8;
  void **p_vtable;
  void *v10;
  CellPreformanceTile *v11;
  id *v12;
  unint64_t v13;
  id *v14;
  void *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  char *v21;
  uint64_t v22;
  id v23;
  int v24;
  uint64_t v25;
  id *v26;
  unint64_t v27;
  id *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int v35;
  void *v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];

  v4 = a2;
  if (!objc_msgSend(a2, "count"))
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("queryLocationdDBForHarvestingData: returned empty BLOB, lat:%f, lon:%f, error %@"), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), objc_msgSend(a3, "description"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("queryLocationdDBForHarvestingData: results.count %lu, lat:%f, lon:%f"), objc_msgSend(v4, "count"), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v6 = (void **)&ADClientAddValueForScalarKey_ptr;
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "detectedFR1CellCountLocDB"), "replaceObjectAtIndex:withObject:", (char *)objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot") - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "detectedFR2CellCountLocDB"), "replaceObjectAtIndex:withObject:", (char *)objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot") - 1, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
  v38 = result;
  if (result)
  {
    v40 = 0;
    v41 = 0;
    v36 = v4;
    v37 = *(_QWORD *)v44;
    v8 = (void **)(&OBJC_METACLASS___WCM_UCMClientController + 24);
    p_vtable = &OBJC_METACLASS___WCM_UCMClientController.vtable;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v44 != v37)
          objc_enumerationMutation(v4);
        v11 = -[CellPreformanceTile initWithData:]([CellPreformanceTile alloc], "initWithData:", *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)v10));
        if (v11)
        {
          v39 = v10;
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("queryLocationdDBForHarvestingData: tile %@"), v11);
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("queryLocationdDBForHarvestingData: LTE CELL count: %lu"), sub_10002C618((id *)v11));
          v42 = (id *)v11;
          if (sub_10002C618((id *)v11))
          {
            v12 = (id *)v11;
            v13 = 0;
            do
            {
              v14 = sub_10002C630(v12, v13);
              +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("queryLocationdDBForHarvestingData: LTE CELL: %@"), v14);
              if (p_vtable[481])
              {
                v15 = (void *)sub_100030E74((uint64_t)v14);
                if (objc_msgSend(v15, "isEqualToString:", p_vtable[481]))
                {
                  v16 = v6;
                  v17 = sub_100030E9C((uint64_t)v14);
                  v18 = sub_100030EB0((uint64_t)v14);
                  v19 = sub_100030EEC((uint64_t)v14) / 0xF4240uLL;
                  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("queryLocationdDBForHarvestingData: GCI:%@ FR1 count: %d, FR2: %d,NRBW: %d"), v15, v17, v18, v19);
                  v20 = objc_msgSend(*(id *)(a1 + 32), "detectedFR1CellCountLocDB");
                  v21 = (char *)objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot") - 1;
                  v22 = v17;
                  v6 = v16;
                  objc_msgSend(v20, "replaceObjectAtIndex:withObject:", v21, objc_msgSend(v16[121], "numberWithInt:", v22));
                  if ((_DWORD)v18)
                    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "detectedFR2CellCountLocDB"), "replaceObjectAtIndex:withObject:", (char *)objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot") - 1, objc_msgSend(v16[121], "numberWithInt:", v18));
                  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "detectedFR1CellBW"), "replaceObjectAtIndex:withObject:", (char *)objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot") - 1, objc_msgSend(v16[121], "numberWithInt:", v19));
                  v8 = &OBJC_METACLASS___WCM_UCMClientController.vtable;
                  p_vtable = &OBJC_METACLASS___WCM_UCMClientController.vtable;
                  v12 = v42;
                }
                v23 = objc_msgSend(p_vtable[481], "substringToIndex:", dword_100270F18);
                v8[482] = v23;
                if (v23 && objc_msgSend(v15, "containsString:", v23))
                {
                  v24 = sub_100030EB0((uint64_t)v14);
                  v40 = sub_100030E9C((uint64_t)v14) + v40;
                  v25 = (v24 + v41);
                  v12 = v42;
                  v41 = v25;
                }
              }
              ++v13;
            }
            while ((unint64_t)sub_10002C618(v12) > v13);
          }
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("queryLocationdDBForHarvestingData: prefix GCI:%@ total FR2: %d, total FR1: %d"), v8[482], v41, v40);
          if (v41 > v40)
          {
            +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("queryLocationdDBForHarvestingData: updating FR2 count:%d"), v41);
            objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "detectedFR2CellCountLocDB"), "replaceObjectAtIndex:withObject:", (char *)objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot") - 1, objc_msgSend(v6[121], "numberWithInt:", v41));
          }
          v26 = v42;
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("queryLocationdDBForHarvestingData: NR CELL count: %lu"), sub_10002C6D8(v42));
          if (sub_10002C6D8(v42))
          {
            v27 = 0;
            do
            {
              v28 = sub_10002C6F0(v26, v27);
              +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("queryLocationdDBForHarvestingData: NR CELL: %@"), v28);
              v29 = objc_msgSend(p_vtable[481], "substringToIndex:", dword_100270F18);
              v8[482] = v29;
              if (v29)
              {
                v30 = (void *)sub_100030E74((uint64_t)v28);
                if (objc_msgSend(v30, "containsString:", v8[482]))
                {
                  v31 = sub_100030E9C((uint64_t)v28);
                  v32 = sub_100030EB0((uint64_t)v28);
                  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("queryLocationdDBForHarvestingData: NR GCI:%@ FR1 count: %d, FR2: %d, NRBW: %d"), v30, v31, v32, sub_100030F78((uint64_t)v28));
                  if (objc_msgSend(*(id *)(a1 + 32), "determineifSABWCriteriaMet"))
                  {
                    v33 = *(unsigned int **)(a1 + 32);
                    v34 = v33[113];
                  }
                  else
                  {
                    v35 = sub_100030F78((uint64_t)v28);
                    v33 = *(unsigned int **)(a1 + 32);
                    v34 = v33[113];
                    if (v35 < v34)
                      v34 = 10;
                  }
                  p_vtable = (void **)(&OBJC_METACLASS___WCM_UCMClientController + 24);
                  objc_msgSend(objc_msgSend(v33, "detectedFR1CellCountLocDB"), "replaceObjectAtIndex:withObject:", (char *)objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot") - 1, objc_msgSend(v6[121], "numberWithInt:", 1));
                  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "detectedFR1CellBW"), "replaceObjectAtIndex:withObject:", (char *)objc_msgSend(*(id *)(a1 + 32), "dataPreferredSlot") - 1, objc_msgSend(v6[121], "numberWithInt:", v34));
                  v26 = v42;
                }
              }
              ++v27;
            }
            while ((unint64_t)sub_10002C6D8(v26) > v27);
          }

          v4 = v36;
          v10 = v39;
        }
        else
        {
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("queryLocationdDBForHarvestingData: returned BLOB tile nil"));
        }
        v10 = (char *)v10 + 1;
      }
      while (v10 != v38);
      result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
      v38 = result;
    }
    while (result);
  }
  return result;
}

void sub_100042364(uint64_t a1)
{
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "VoiceLqmValue"), "replaceObjectAtIndex:withObject:", *(unsigned __int8 *)(a1 + 56), +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(a1 + 57)));
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "VoiceLqmIsValid"), "replaceObjectAtIndex:withObject:", *(unsigned __int8 *)(a1 + 56), +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "imsVoiceOverPSSupported"), "replaceObjectAtIndex:withObject:", *(unsigned __int8 *)(a1 + 56), +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 58)));
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "PrevAudioErasurePercent"), "replaceObjectAtIndex:withObject:", *(unsigned __int8 *)(a1 + 56), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 40)));
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "servCellRSRP"), "replaceObjectAtIndex:withObject:", *(unsigned __int8 *)(a1 + 56), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48)));
  dispatch_async((dispatch_queue_t)objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "getQueue"), &stru_1002020D8);
}

void sub_100042480(id a1)
{
  objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "evaluateHandover");
}

id sub_100042740(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  __objc2_class **p_superclass;
  void *v7;
  DYNAMICRATSELECTIONDynamicRatSelectionTile *v8;
  id *v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _BOOL8 v15;
  __objc2_class **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  id *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];

  v4 = a2;
  p_superclass = WRM_SCService.superclass;
  if (objc_msgSend(a2, "count"))
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("fetchSmartDataModeDataForLocation: results.count %lu, lat:%f, lon:%f"), objc_msgSend(v4, "count"), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v27 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
    if (!v27)
      return objc_msgSend(*(id *)(a1 + 32), "sendWrmSdmLocationDbInfo:dbAvailable:mcc:mnc:cellId:", *(_QWORD *)(a1 + 56), 1, *(unsigned __int16 *)(a1 + 72), *(unsigned __int16 *)(a1 + 74), *(_QWORD *)(a1 + 64));
    v25 = v4;
    v26 = *(_QWORD *)v32;
    while (1)
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v32 != v26)
          objc_enumerationMutation(v4);
        v8 = -[DYNAMICRATSELECTIONDynamicRatSelectionTile initWithData:]([DYNAMICRATSELECTIONDynamicRatSelectionTile alloc], "initWithData:", *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)v7));
        if (v8)
        {
          v9 = (id *)v8;
          v28 = v7;
          if (sub_10001F280((id *)v8))
          {
            v10 = 0;
            v29 = v9;
            while (1)
            {
              v11 = sub_10001F298(v9, v10);
              objc_msgSend(p_superclass + 279, "logLevel:message:", 22, CFSTR("fetchSmartDataModeDataForLocation: tile %@"), v11);
              if (sub_10002D294((uint64_t)v11) == 1)
              {
                v12 = 0;
                goto LABEL_16;
              }
              if (sub_10002D294((uint64_t)v11) == 3)
                break;
              if (sub_10002D294((uint64_t)v11) == 2)
              {
                v12 = 3;
LABEL_16:
                if (sub_10002D408((uint64_t)v11) != 2)
                {
                  v13 = *(void **)(a1 + 32);
                  v30 = *(_QWORD *)(a1 + 56);
                  v14 = sub_10002EC0C((uint64_t)v11);
                  v15 = sub_10002EC34((_BOOL8)v11);
                  v16 = p_superclass;
                  v17 = sub_10002EC20((uint64_t)v11);
                  v18 = a1;
                  v19 = sub_10002EC50((uint64_t)v11);
                  LODWORD(v24) = sub_10002EC64((uint64_t)v11);
                  v20 = v14;
                  v9 = v29;
                  v21 = v17;
                  p_superclass = v16;
                  v22 = v19;
                  a1 = v18;
                  objc_msgSend(v13, "setWrmSdmLocationDbPushOneEntryForCellType:cellType:anchorCellBandwidth:mmWavePresent:downlinkThroughput:sampleCount:deploymentCount:", v30, v12, v20, v15, v21, v22, v24);
                }
                goto LABEL_19;
              }
              objc_msgSend(p_superclass + 279, "logLevel:message:", 22, CFSTR("fetchSmartDataModeDataForLocation: returned BLOB rat type not correct"));
LABEL_19:
              if ((unint64_t)sub_10001F280(v9) <= ++v10)
                goto LABEL_20;
            }
            v12 = 4;
            goto LABEL_16;
          }
LABEL_20:

          v4 = v25;
          v7 = v28;
        }
        else
        {
          objc_msgSend(p_superclass + 279, "logLevel:message:", 22, CFSTR("fetchSmartDataModeDataForLocation: returned BLOB tile nil"));
        }
        v7 = (char *)v7 + 1;
      }
      while (v7 != v27);
      v27 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
      if (!v27)
        return objc_msgSend(*(id *)(a1 + 32), "sendWrmSdmLocationDbInfo:dbAvailable:mcc:mnc:cellId:", *(_QWORD *)(a1 + 56), 1, *(unsigned __int16 *)(a1 + 72), *(unsigned __int16 *)(a1 + 74), *(_QWORD *)(a1 + 64));
    }
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("fetchSmartDataModeDataForLocation: returned empty BLOB, lat:%f, lon:%f, error %@"), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), objc_msgSend(a3, "description"));
  return objc_msgSend(*(id *)(a1 + 32), "sendWrmSdmLocationDbInfo:dbAvailable:mcc:mnc:cellId:", *(_QWORD *)(a1 + 56), 0, *(unsigned __int16 *)(a1 + 72), *(unsigned __int16 *)(a1 + 74), *(_QWORD *)(a1 + 64));
}

void sub_100042B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double sub_100042B44(uint64_t a1)
{
  double result;

  result = *(double *)(*(_QWORD *)(a1 + 32) + 332);
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_100042BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double sub_100042C10(uint64_t a1)
{
  double result;

  result = *(double *)(*(_QWORD *)(a1 + 32) + 340);
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_100042CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double sub_100042CDC(uint64_t a1)
{
  double result;

  result = *(double *)(*(_QWORD *)(a1 + 32) + 348);
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

id *sub_100042DAC(id *result)
{
  if (result[5])
    return (id *)objc_msgSend(objc_msgSend(result[4], "cbrsCoreAnalyticsMetricsSent"), "replaceObjectAtIndex:withObject:", (char *)result[5] - 1, &__kCFBooleanFalse);
  return result;
}

void sub_1000430D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000430F4(uint64_t a1)
{
  id v2;
  id result;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  BOOL v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v2 = objc_msgSend(*(id *)(a1 + 32), "subscriptions");
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v16;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v16 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)v6);
        if (objc_msgSend(v7, "slotID"))
        {
          if (*(_QWORD *)(a1 + 40))
          {
            if (objc_msgSend(v7, "uuid"))
            {
              v8 = *(_QWORD *)(a1 + 40);
              v9 = objc_opt_class(NSUUID);
              if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0)
              {
                v10 = objc_msgSend(v7, "uuid");
                v11 = objc_opt_class(NSUUID);
                if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0
                  && !objc_msgSend(*(id *)(a1 + 40), "compare:", objc_msgSend(v7, "uuid")))
                {
                  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v7, "slotID");
                  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
                  if (v12)
                  {
                    if (v12 == 1)
                    {
                      v13 = "CTSubscriptionSlotOne";
                    }
                    else
                    {
                      v14 = v12 == 2;
                      v13 = "Unknown CTSubscriptionSlot!!!";
                      if (v14)
                        v13 = "CTSubscriptionSlotTwo";
                    }
                  }
                  else
                  {
                    v13 = "CTSubscriptionSlotUnknown";
                  }
                  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("feedCellularMetricsWithUUID found matching slot=%s"), v13);
                }
              }
            }
          }
        }
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1000439BC()
{
  uint64_t v0;
  void *v2;
  __int128 v3;
  uint64_t v4;

  v2 = 0;
  if (!qword_1002710B8)
  {
    v3 = off_100202170;
    v4 = 0;
    qword_1002710B8 = _sl_dlopen(&v3, &v2);
  }
  v0 = qword_1002710B8;
  if (!qword_1002710B8)
    sub_10012E59C(&v2);
  if (v2)
    free(v2);
  return v0;
}

Class sub_100043A64(uint64_t a1)
{
  Class result;

  sub_1000439BC();
  result = objc_getClass("BMDeviceCellularAvailabilityStatus");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_10012E600();
  qword_1002710C8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class sub_100043AB8(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!qword_1002710D8)
  {
    v4 = off_100202188;
    v5 = 0;
    qword_1002710D8 = _sl_dlopen(&v4, &v3);
  }
  if (!qword_1002710D8)
    sub_10012E664(&v3);
  if (v3)
    free(v3);
  result = objc_getClass("OSASystemConfiguration");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_10012E6C8();
  qword_1002710D0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class sub_100043B94(uint64_t a1)
{
  Class result;

  sub_100043BE8();
  result = objc_getClass("GEOLocation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_10012E72C();
  qword_1002710E0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void sub_100043BE8()
{
  void *v0;
  __int128 v1;
  uint64_t v2;

  v0 = 0;
  if (!qword_1002710E8)
  {
    v1 = off_1002021A0;
    v2 = 0;
    qword_1002710E8 = _sl_dlopen(&v1, &v0);
  }
  if (!qword_1002710E8)
    sub_10012E790(&v0);
  if (v0)
    free(v0);
}

Class sub_100043C8C(uint64_t a1)
{
  Class result;

  sub_100043BE8();
  result = objc_getClass("GEOGeographicMetadataRequester");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_10012E7F4();
  qword_1002710F0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t sub_100043DB4(uint64_t result)
{
  byte_100270F40 = *(_BYTE *)(result + 32);
  return result;
}

id sub_100043FE4(uint64_t a1)
{
  dispatch_time_t v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD block[5];
  uint64_t state64;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("registerSFOutrankDecisionNotification: received notification"));
  state64 = 0;
  notify_get_state(dword_100270F44, &state64);
  if ((state64 & 1) != 0)
  {
    byte_100270F54 = 1;
    v2 = dispatch_time(0, (uint64_t)(*(double *)&qword_100270B50 * 1000000000.0));
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("evaluateWiFiVersusCell: received cellular outrank notification from Symptoms, submit AWD metrics after waiting for %d seconds"), qword_100270B50);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(NSObject **)(v3 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10004411C;
    block[3] = &unk_1002019E8;
    block[4] = v3;
    dispatch_after(v2, v4, block);
  }
  else
  {
    byte_100270F54 = 0;
    objc_msgSend(*(id *)(a1 + 32), "triggerEnableSA:", 0);
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("registerSFOutrankDecisionNotification: state : %d, trigger reason: %d"), state64, byte_100270F54);
}

id sub_10004411C(uint64_t a1)
{
  id result;

  objc_msgSend(*(id *)(a1 + 32), "triggerEnableSA:", 1);
  objc_msgSend(*(id *)(a1 + 32), "evalExitForceOutranking");
  result = objc_msgSend(*(id *)(a1 + 32), "submitWiFiVersusCellAWDMetrics");
  byte_100270F54 = 0;
  return result;
}

id sub_1000441E0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "notifyRecommendations");
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("registerSFRestartNotification:Detected symptomsd restart"));
}

void sub_1000442C4(id a1, int a2)
{
  BOOL v3;
  _BOOL8 v6;
  uint64_t state64;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("registerThermalTimeToThrottleNotification:Detected time to throttle high temperature"));
  state64 = 0;
  notify_get_state(dword_100270F4C, &state64);
  v3 = state64 <= 0x1E && ((1 << state64) & 0x40100400) != 0;
  v6 = state64 == 30 || state64 == 20 || state64 == 10;
  byte_100270F42 = v3;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("registerThermalTimeToThrottleNotification: time : %d, %d"), state64, v6);
}

id sub_100044368()
{
  BOOL v1;
  _BOOL8 v4;
  uint64_t state64;

  state64 = 0;
  notify_get_state(dword_100270F4C, &state64);
  v1 = state64 <= 0x1E && ((1 << state64) & 0x40100400) != 0;
  v4 = state64 == 30 || state64 == 20 || state64 == 10;
  byte_100270F42 = v1;
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("registerThermalTimeToThrottleNotification: time : notifyCallback(): %d, %d"), state64, v4);
}

void sub_100044498(id a1, int a2)
{
  uint64_t state64;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("registerThermalNotificationReasonToThrottle:Detected reason to throttle high teperature"));
  state64 = 0;
  notify_get_state(dword_100270F48, &state64);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("registerThermalNotificationReasonToThrottle: reason : %d"), state64);
}

void sub_100044500()
{
  uint64_t state64;

  state64 = 0;
  notify_get_state(dword_100270F48, &state64);
  NSLog(CFSTR("notifyCallback(): %d"), state64);
}

id sub_100044A48(uint64_t a1)
{
  id v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  id result;

  v2 = +[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton](WRM_EnhancedCTService, "wrm_EnhancedCTServiceSingleton");
  v3 = objc_msgSend(v2, "getConfiguredMaxBW");
  v4 = objc_msgSend(v2, "getCellConfiguredBandwidthThreshold");
  if (v3)
    v5 = v3 >= v4;
  else
    v5 = 1;
  if (v5)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("evaluateWiFiVersusCell: do not evalExitForceOutranking"));
  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("evaluateWiFiVersusCell: evalExitForceOutranking, wifi state: %d"), byte_100270F20);
  if (byte_100270F20 == 1)
  {
    byte_100270F41 = 1;
    return objc_msgSend(*(id *)(a1 + 32), "evaluateWiFiVersusCell");
  }
  return result;
}

uint64_t sub_100044B34(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  dispatch_queue_t v10;
  NSObject *v11;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v4 = dispatch_queue_create("CoexMgr.IOKit.Camera", 0);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = v4;
    dispatch_retain(v4);
    *(_QWORD *)(a1 + 24) = 0;
    dispatch_release(v5);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 32) = 0;
  v13 = 0;
  v14 = 0;
  ctu::iokit::Controller::create(&v13, a2);
  v6 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 152) = a2;
  *(_QWORD *)(a1 + 160) = 0;
  v9 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  v10 = dispatch_queue_create("com.apple.CoexManager.Camera", v9);
  v11 = *(NSObject **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v10;
  if (v11)
    dispatch_release(v11);
  *(_WORD *)(a1 + 144) = 0;
  return a1;
}

void sub_100044C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  NSObject *v11;

  sub_10002C2C4((uint64_t)&a9);
  v11 = v9[4];
  if (v11)
    dispatch_release(v11);
  sub_100044D98(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_100044C6C(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t sub_100044CA8(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t sub_100044CE4(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t sub_100044D20(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t sub_100044D5C(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

_QWORD *sub_100044D98(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = a1[2];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_100044DE0(_QWORD *a1@<X8>)
{
  CFRunLoopRef Main;

  Main = CFRunLoopGetMain();
  sub_10004658C((uint64_t *)&Main, a1);
}

uint64_t sub_100044E1C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 144) = a2;
  return result;
}

uint64_t sub_100044E24(uint64_t result, char a2)
{
  *(_BYTE *)(result + 145) = a2;
  return result;
}

uint64_t sub_100044E2C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 146) = a2;
  return result;
}

uint64_t sub_100044E34(uint64_t result, char a2)
{
  *(_BYTE *)(result + 147) = a2;
  return result;
}

uint64_t sub_100044E3C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 148) = a2;
  return result;
}

void sub_100044E44(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(const void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (v5)
    _Block_release(v5);
  v6 = *(NSObject **)(a2 + 8);
  if (v6)
    dispatch_retain(v6);
  v7 = *(NSObject **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v6;
  if (v7)
    dispatch_release(v7);
}

void sub_100044EB4(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(const void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v4;
  if (v5)
    _Block_release(v5);
  v6 = *(NSObject **)(a2 + 8);
  if (v6)
    dispatch_retain(v6);
  v7 = *(NSObject **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v6;
  if (v7)
    dispatch_release(v7);
}

void sub_100044F24(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(const void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v4;
  if (v5)
    _Block_release(v5);
  v6 = *(NSObject **)(a2 + 8);
  if (v6)
    dispatch_retain(v6);
  v7 = *(NSObject **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v6;
  if (v7)
    dispatch_release(v7);
}

void sub_100044F94(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(const void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v4;
  if (v5)
    _Block_release(v5);
  v6 = *(NSObject **)(a2 + 8);
  if (v6)
    dispatch_retain(v6);
  v7 = *(NSObject **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v6;
  if (v7)
    dispatch_release(v7);
}

void sub_100045004(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(const void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v4;
  if (v5)
    _Block_release(v5);
  v6 = *(NSObject **)(a2 + 8);
  if (v6)
    dispatch_retain(v6);
  v7 = *(NSObject **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v6;
  if (v7)
    dispatch_release(v7);
}

uint64_t sub_100045074(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD aBlock[6];
  std::__shared_weak_count *v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  sub_100046734(&v19, (_QWORD *)a1);
  v3 = v19;
  v2 = v20;
  if (v20)
  {
    p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (!*(_BYTE *)(a1 + 148))
  {
    v13 = 0x1000000;
    if (!v2)
      return v13;
    goto LABEL_22;
  }
  *(_DWORD *)(a1 + 124) = 1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120;
  aBlock[2] = sub_1000451E0;
  aBlock[3] = &unk_1002023C0;
  aBlock[4] = a1;
  aBlock[5] = v3;
  v16 = v2;
  if (v2)
  {
    v8 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = _Block_copy(aBlock);
  v11 = v10;
  v12 = *(NSObject **)(a1 + 160);
  if (!v12)
  {
    v17 = v10;
    v18 = 0;
    sub_100045004(a1, (uint64_t)&v17);
    if (!v11)
      goto LABEL_19;
    goto LABEL_18;
  }
  dispatch_retain(*(dispatch_object_t *)(a1 + 160));
  v17 = v11;
  v18 = v12;
  sub_100045004(a1, (uint64_t)&v17);
  dispatch_release(v12);
  if (v11)
LABEL_18:
    _Block_release(v11);
LABEL_19:
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  v13 = 16;
  if (v2)
LABEL_22:
    std::__shared_weak_count::__release_weak(v2);
  return v13;
}

void sub_1000451E0(_QWORD *a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (v12)
      {
        if (!v10)
          return;
        goto LABEL_7;
      }
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
      if (v10)
LABEL_7:
        sub_100045288(v7, a2, a3);
    }
  }
}

void sub_100045288(uint64_t a1, uint64_t a2, int a3)
{
  int v3;

  if ((const mach_header_64 *)(a2 & 0xFFFFFFFF00000000) == &_mh_execute_header && (_DWORD)a2 == 1 && a3 == 257)
  {
    v3 = 2;
    goto LABEL_9;
  }
  if ((const mach_header_64 *)(a2 & 0xFFFFFFFF00000000) == &_mh_execute_header && (_DWORD)a2 == 2 && a3 == 257)
  {
    v3 = 4;
LABEL_9:
    if (v3 != *(_DWORD *)(a1 + 124))
    {
      *(_DWORD *)(a1 + 124) = v3;
      sub_1000464E4(a1);
    }
  }
}

uint64_t sub_1000452E8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_10004530C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t sub_10004531C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  void *v11;
  NSObject *v12;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  NSObject *v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  void *v23;
  NSObject *v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  void *v29;
  NSObject *v30;
  uint64_t v31;
  _QWORD v33[6];
  std::__shared_weak_count *v34;
  void *v35;
  NSObject *v36;
  _QWORD v37[6];
  std::__shared_weak_count *v38;
  void *v39;
  NSObject *v40;
  _QWORD v41[6];
  std::__shared_weak_count *v42;
  void *v43;
  NSObject *v44;
  _QWORD aBlock[6];
  std::__shared_weak_count *v46;
  void *v47;
  NSObject *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;

  sub_100046734(&v49, (_QWORD *)a1);
  v3 = v49;
  v2 = v50;
  if (v50)
  {
    p_shared_weak_owners = (unint64_t *)&v50->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (!*(_BYTE *)(a1 + 144))
  {
    v13 = 0x100000;
    goto LABEL_21;
  }
  *(_BYTE *)(a1 + 120) = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120;
  aBlock[2] = sub_100005714;
  aBlock[3] = &unk_1002023F0;
  aBlock[4] = a1;
  aBlock[5] = v3;
  v46 = v2;
  if (v2)
  {
    v8 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = _Block_copy(aBlock);
  v11 = v10;
  v12 = *(NSObject **)(a1 + 160);
  if (v12)
  {
    dispatch_retain(*(dispatch_object_t *)(a1 + 160));
    v47 = v11;
    v48 = v12;
    sub_100044E44(a1, (uint64_t)&v47);
    dispatch_release(v12);
    if (!v11)
      goto LABEL_18;
    goto LABEL_17;
  }
  v47 = v10;
  v48 = 0;
  sub_100044E44(a1, (uint64_t)&v47);
  if (v11)
LABEL_17:
    _Block_release(v11);
LABEL_18:
  if (v46)
    std::__shared_weak_count::__release_weak(v46);
  v13 = 1;
LABEL_21:
  if (!*(_BYTE *)(a1 + 145))
  {
    v19 = v13 | 0x200000;
    goto LABEL_33;
  }
  *(_BYTE *)(a1 + 121) = 0;
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 1174405120;
  v41[2] = sub_1000456E4;
  v41[3] = &unk_100202420;
  v41[4] = a1;
  v41[5] = v3;
  v42 = v2;
  if (v2)
  {
    v14 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = _Block_copy(v41);
  v17 = v16;
  v18 = *(NSObject **)(a1 + 160);
  if (!v18)
  {
    v43 = v16;
    v44 = 0;
    sub_100044EB4(a1, (uint64_t)&v43);
    if (!v17)
      goto LABEL_31;
    goto LABEL_30;
  }
  dispatch_retain(*(dispatch_object_t *)(a1 + 160));
  v43 = v17;
  v44 = v18;
  sub_100044EB4(a1, (uint64_t)&v43);
  dispatch_release(v18);
  if (v17)
LABEL_30:
    _Block_release(v17);
LABEL_31:
  v19 = v13 | 2;
  if (v42)
    std::__shared_weak_count::__release_weak(v42);
LABEL_33:
  if (!*(_BYTE *)(a1 + 146))
  {
    v25 = v19 | 0x400000;
    goto LABEL_45;
  }
  *(_BYTE *)(a1 + 122) = 0;
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 1174405120;
  v37[2] = sub_100045920;
  v37[3] = &unk_100202450;
  v37[4] = a1;
  v37[5] = v3;
  v38 = v2;
  if (v2)
  {
    v20 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = _Block_copy(v37);
  v23 = v22;
  v24 = *(NSObject **)(a1 + 160);
  if (!v24)
  {
    v39 = v22;
    v40 = 0;
    sub_100044F24(a1, (uint64_t)&v39);
    if (!v23)
      goto LABEL_43;
    goto LABEL_42;
  }
  dispatch_retain(*(dispatch_object_t *)(a1 + 160));
  v39 = v23;
  v40 = v24;
  sub_100044F24(a1, (uint64_t)&v39);
  dispatch_release(v24);
  if (v23)
LABEL_42:
    _Block_release(v23);
LABEL_43:
  v25 = v19 | 4;
  if (v38)
    std::__shared_weak_count::__release_weak(v38);
LABEL_45:
  if (!*(_BYTE *)(a1 + 147))
  {
    v31 = v25 | 0x800000u;
    goto LABEL_57;
  }
  *(_BYTE *)(a1 + 123) = 0;
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 1174405120;
  v33[2] = sub_100045B5C;
  v33[3] = &unk_100202480;
  v33[4] = a1;
  v33[5] = v3;
  v34 = v2;
  if (v2)
  {
    v26 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = _Block_copy(v33);
  v29 = v28;
  v30 = *(NSObject **)(a1 + 160);
  if (!v30)
  {
    v35 = v28;
    v36 = 0;
    sub_100044F94(a1, (uint64_t)&v35);
    if (!v29)
      goto LABEL_55;
    goto LABEL_54;
  }
  dispatch_retain(*(dispatch_object_t *)(a1 + 160));
  v35 = v29;
  v36 = v30;
  sub_100044F94(a1, (uint64_t)&v35);
  dispatch_release(v30);
  if (v29)
LABEL_54:
    _Block_release(v29);
LABEL_55:
  v31 = v25 | 8u;
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
LABEL_57:
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return v31;
}

void sub_1000456E4(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
        goto LABEL_7;
      }
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
LABEL_7:
        sub_10004577C(v5, (_BYTE *)(v5 + 121), a2);
    }
  }
}

void sub_10004577C(uint64_t a1, _BYTE *a2, int a3)
{
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  NSObject *v13;
  dispatch_time_t v14;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD handler[6];
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v3 == a3)
  {
    if (!v4)
      return;
    goto LABEL_5;
  }
  if (v4)
  {
LABEL_5:
    *a2 = a3;
    return;
  }
  if (a3 || v3 != 1)
  {
    *a2 = a3;
    sub_10004641C(a1);
  }
  else
  {
    *a2 = 0;
    sub_100046734(&v20, (_QWORD *)a1);
    v7 = v20;
    v6 = v21;
    if (v21)
    {
      p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 1uLL, 0, *(dispatch_queue_t *)(a1 + 160));
    v13 = *(NSObject **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    if (v13)
    {
      dispatch_release(v13);
      v12 = *(NSObject **)(a1 + 32);
    }
    v14 = dispatch_time(0, 300000000);
    dispatch_source_set_timer(v12, v14, 0xFFFFFFFFFFFFFFFFLL, 0x1312D00uLL);
    v15 = *(NSObject **)(a1 + 32);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 1174405120;
    handler[2] = sub_100046850;
    handler[3] = &unk_100202560;
    handler[4] = a1;
    handler[5] = v7;
    v19 = v6;
    if (v6)
    {
      v16 = (unint64_t *)&v6->__shared_weak_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    dispatch_source_set_event_handler(v15, handler);
    dispatch_activate(*(dispatch_object_t *)(a1 + 32));
    if (v19)
      std::__shared_weak_count::__release_weak(v19);
    if (v6)
      std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_100045920(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
        goto LABEL_7;
      }
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
LABEL_7:
        sub_1000459B8(v5, (_BYTE *)(v5 + 122), a2);
    }
  }
}

void sub_1000459B8(uint64_t a1, _BYTE *a2, int a3)
{
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  NSObject *v13;
  dispatch_time_t v14;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD handler[6];
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v3 == a3)
  {
    if (!v4)
      return;
    goto LABEL_5;
  }
  if (v4)
  {
LABEL_5:
    *a2 = a3;
    return;
  }
  if (a3 || v3 != 1)
  {
    *a2 = a3;
    sub_10004641C(a1);
  }
  else
  {
    *a2 = 0;
    sub_100046734(&v20, (_QWORD *)a1);
    v7 = v20;
    v6 = v21;
    if (v21)
    {
      p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 1uLL, 0, *(dispatch_queue_t *)(a1 + 160));
    v13 = *(NSObject **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    if (v13)
    {
      dispatch_release(v13);
      v12 = *(NSObject **)(a1 + 32);
    }
    v14 = dispatch_time(0, 300000000);
    dispatch_source_set_timer(v12, v14, 0xFFFFFFFFFFFFFFFFLL, 0x1312D00uLL);
    v15 = *(NSObject **)(a1 + 32);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 1174405120;
    handler[2] = sub_1000468F8;
    handler[3] = &unk_100202590;
    handler[4] = a1;
    handler[5] = v7;
    v19 = v6;
    if (v6)
    {
      v16 = (unint64_t *)&v6->__shared_weak_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    dispatch_source_set_event_handler(v15, handler);
    dispatch_activate(*(dispatch_object_t *)(a1 + 32));
    if (v19)
      std::__shared_weak_count::__release_weak(v19);
    if (v6)
      std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_100045B5C(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
        goto LABEL_7;
      }
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
LABEL_7:
        sub_100045BF4(v5, (_BYTE *)(v5 + 123), a2);
    }
  }
}

void sub_100045BF4(uint64_t a1, _BYTE *a2, int a3)
{
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  NSObject *v13;
  dispatch_time_t v14;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD handler[6];
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v3 == a3)
  {
    if (!v4)
      return;
    goto LABEL_5;
  }
  if (v4)
  {
LABEL_5:
    *a2 = a3;
    return;
  }
  if (a3 || v3 != 1)
  {
    *a2 = a3;
    sub_10004641C(a1);
  }
  else
  {
    *a2 = 0;
    sub_100046734(&v20, (_QWORD *)a1);
    v7 = v20;
    v6 = v21;
    if (v21)
    {
      p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 1uLL, 0, *(dispatch_queue_t *)(a1 + 160));
    v13 = *(NSObject **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    if (v13)
    {
      dispatch_release(v13);
      v12 = *(NSObject **)(a1 + 32);
    }
    v14 = dispatch_time(0, 300000000);
    dispatch_source_set_timer(v12, v14, 0xFFFFFFFFFFFFFFFFLL, 0x1312D00uLL);
    v15 = *(NSObject **)(a1 + 32);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 1174405120;
    handler[2] = sub_1000469A0;
    handler[3] = &unk_1002025C0;
    handler[4] = a1;
    handler[5] = v7;
    v19 = v6;
    if (v6)
    {
      v16 = (unint64_t *)&v6->__shared_weak_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    dispatch_source_set_event_handler(v15, handler);
    dispatch_activate(*(dispatch_object_t *)(a1 + 32));
    if (v19)
      std::__shared_weak_count::__release_weak(v19);
    if (v6)
      std::__shared_weak_count::__release_weak(v6);
  }
}

uint64_t sub_100045D98(_QWORD *a1)
{
  ctu::iokit::Controller *v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  char v15;
  const void *v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  char v20;
  const void *v21;
  uint64_t v22;
  void *v23;
  NSObject *v24;
  char v25;
  const void *v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  char v30;
  void *v32;
  dispatch_object_t v33;
  void *v34;
  dispatch_object_t v35;
  void *v36;
  dispatch_object_t v37;
  void *aBlock;
  dispatch_object_t object;
  const void *v40;
  dispatch_object_t v41;

  v2 = (ctu::iokit::Controller *)a1[5];
  if (!v2)
    return 0x40000;
  v3 = a1[7];
  if (v3 && a1[8])
    goto LABEL_21;
  v4 = a1[9];
  if ((!v4 || !a1[10]) && (!a1[11] || !a1[12]) && (!a1[13] || !a1[14]) && (!a1[16] || !a1[17]))
    return 0x80000;
  if (v3)
  {
    if (a1[8])
    {
LABEL_21:
      if (!ctu::iokit::Controller::setupCameraService(v2))
        return 0x20000;
      v5 = (const void *)a1[7];
      if (v5 && a1[8])
      {
        v6 = a1[5];
        v7 = _Block_copy(v5);
        v8 = a1[8];
        v40 = v7;
        v41 = v8;
        if (v8)
          dispatch_retain(v8);
        v9 = ctu::iokit::Controller::setFaceIDCallback(v6, &v40);
        if (v41)
          dispatch_release(v41);
        if (v40)
          _Block_release(v40);
        if (v9)
          v10 = 1;
        else
          v10 = 0x100000;
      }
      else
      {
        v10 = 0;
      }
      v11 = (const void *)a1[9];
      if (v11 && a1[10])
      {
        v12 = a1[5];
        v13 = _Block_copy(v11);
        v14 = a1[10];
        aBlock = v13;
        object = v14;
        if (v14)
          dispatch_retain(v14);
        v15 = ctu::iokit::Controller::setFrontCameraCallback(v12, &aBlock);
        if (object)
          dispatch_release(object);
        if (aBlock)
          _Block_release(aBlock);
        if ((v15 & 1) != 0)
          v10 = v10 | 2;
        else
          v10 = v10 | 0x200000;
      }
      v16 = (const void *)a1[11];
      if (v16 && a1[12])
      {
        v17 = a1[5];
        v18 = _Block_copy(v16);
        v19 = a1[12];
        v36 = v18;
        v37 = v19;
        if (v19)
          dispatch_retain(v19);
        v20 = ctu::iokit::Controller::setBackTeleCameraCallback(v17, &v36);
        if (v37)
          dispatch_release(v37);
        if (v36)
          _Block_release(v36);
        if ((v20 & 1) != 0)
          v10 = v10 | 4;
        else
          v10 = v10 | 0x400000;
      }
      v21 = (const void *)a1[13];
      if (v21 && a1[14])
      {
        v22 = a1[5];
        v23 = _Block_copy(v21);
        v24 = a1[14];
        v34 = v23;
        v35 = v24;
        if (v24)
          dispatch_retain(v24);
        v25 = ctu::iokit::Controller::setBackSuperWideCameraCallback(v22, &v34);
        if (v35)
          dispatch_release(v35);
        if (v34)
          _Block_release(v34);
        if ((v25 & 1) != 0)
          v10 = v10 | 8;
        else
          v10 = v10 | 0x800000;
      }
      goto LABEL_71;
    }
    v4 = a1[9];
  }
  if (v4 && a1[10] || a1[11] && a1[12] || a1[13] && a1[14])
    goto LABEL_21;
  v10 = 0;
LABEL_71:
  v26 = (const void *)a1[16];
  if (v26 && a1[17])
  {
    v27 = a1[5];
    v28 = _Block_copy(v26);
    v29 = a1[17];
    v32 = v28;
    v33 = v29;
    if (v29)
      dispatch_retain(v29);
    v30 = ctu::iokit::Controller::setAccessoryCallback(v27, &v32);
    if (v33)
      dispatch_release(v33);
    if (v32)
      _Block_release(v32);
    if ((v30 & 1) != 0)
      return v10 | 0x10;
    else
      return v10 | 0x1000000;
  }
  return v10;
}

void sub_100046090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100044CA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000460F8(uint64_t a1)
{
  __CFRunLoop *v2;
  NSObject *v3;
  NSObject *v4;
  __CFRunLoop *v5;
  _QWORD block[4];
  dispatch_group_t group;

  sub_100046258((_QWORD *)(a1 + 40));
  v2 = *(__CFRunLoop **)(a1 + 152);
  if (v2 && CFRunLoopIsWaiting(v2))
  {
    v3 = dispatch_group_create();
    v4 = v3;
    if (v3)
    {
      dispatch_retain(v3);
      dispatch_group_enter(v4);
    }
    v5 = *(__CFRunLoop **)(a1 + 152);
    block[0] = _NSConcreteStackBlock;
    block[1] = 1174405120;
    block[2] = nullsub_3;
    block[3] = &unk_1002024B0;
    group = v4;
    if (v4)
    {
      dispatch_retain(v4);
      dispatch_group_enter(v4);
    }
    CFRunLoopPerformBlock(v5, kCFRunLoopDefaultMode, block);
    CFRunLoopWakeUp(*(CFRunLoopRef *)(a1 + 152));
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    if (v4)
    {
      dispatch_group_leave(v4);
      dispatch_release(v4);
      dispatch_group_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v4);
    }
    else
    {
      dispatch_group_wait(0, 0xFFFFFFFFFFFFFFFFLL);
    }
  }
}

void sub_100046214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group)
{
  NSObject *v14;

  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
    dispatch_release(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_100046258(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1000462B8(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 32);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void sub_1000462F8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 32);
    if (v3)
      dispatch_release(v3);
  }
}

_QWORD *sub_100046334(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  const void *v4;
  NSObject *v5;
  const void *v6;
  NSObject *v7;
  const void *v8;
  NSObject *v9;
  const void *v10;
  NSObject *v11;
  const void *v12;
  NSObject *v13;

  sub_1000460F8((uint64_t)a1);
  v2 = a1[20];
  if (v2)
    dispatch_release(v2);
  v3 = a1[17];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[16];
  if (v4)
    _Block_release(v4);
  v5 = a1[14];
  if (v5)
    dispatch_release(v5);
  v6 = (const void *)a1[13];
  if (v6)
    _Block_release(v6);
  v7 = a1[12];
  if (v7)
    dispatch_release(v7);
  v8 = (const void *)a1[11];
  if (v8)
    _Block_release(v8);
  v9 = a1[10];
  if (v9)
    dispatch_release(v9);
  v10 = (const void *)a1[9];
  if (v10)
    _Block_release(v10);
  v11 = a1[8];
  if (v11)
    dispatch_release(v11);
  v12 = (const void *)a1[7];
  if (v12)
    _Block_release(v12);
  sub_10002C2C4((uint64_t)(a1 + 5));
  v13 = a1[4];
  if (v13)
    dispatch_release(v13);
  return sub_100044D98(a1);
}

void sub_100046408(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_10004641C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_weak_owners;
  unint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  sub_100046734(&v7, (_QWORD *)a1);
  v2 = v8;
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v4 = __ldxr(p_shared_weak_owners);
    while (__stxr(v4 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_100048B78(((*(_BYTE *)(a1 + 122) & 7) << 6) & 0xF1C0 | ((*(_BYTE *)(a1 + 123) & 7) << 9) | (8
                                                                                                * (*(_BYTE *)(a1 + 121) & 7)) | *(_BYTE *)(a1 + 120) & 7u);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_1000464CC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

void sub_1000464E4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_weak_owners;
  unint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  sub_100046734(&v7, (_QWORD *)a1);
  v2 = v8;
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v4 = __ldxr(p_shared_weak_owners);
    while (__stxr(v4 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_100048CE0(*(unsigned int *)(a1 + 124));
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_100046574(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

void sub_10004658C(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0xC0uLL);
  sub_1000465EC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_100046684((uint64_t)a2, v4 + 3, (uint64_t)(v4 + 3));
}

void sub_1000465D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000465EC(_QWORD *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1002024F0;
  sub_100044B34((uint64_t)(a1 + 3), *a2);
  return a1;
}

void sub_100046624(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100046638(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1002024F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100046648(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1002024F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

_QWORD *sub_100046678(uint64_t a1)
{
  return sub_100046334((_QWORD *)(a1 + 24));
}

void sub_100046684(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

_QWORD *sub_100046734(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    sub_100046774();
  }
  v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4)
    goto LABEL_5;
  return a1;
}

void sub_100046774()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void sub_1000467A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!v6)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6)
          return;
      }
      sub_10004641C(v3);
      dispatch_source_cancel(*(dispatch_source_t *)(v3 + 32));
      v9 = *(NSObject **)(v3 + 32);
      *(_QWORD *)(v3 + 32) = 0;
      if (v9)
        dispatch_release(v9);
    }
  }
}

void sub_100046850(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!v6)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6)
          return;
      }
      sub_10004641C(v3);
      dispatch_source_cancel(*(dispatch_source_t *)(v3 + 32));
      v9 = *(NSObject **)(v3 + 32);
      *(_QWORD *)(v3 + 32) = 0;
      if (v9)
        dispatch_release(v9);
    }
  }
}

void sub_1000468F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!v6)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6)
          return;
      }
      sub_10004641C(v3);
      dispatch_source_cancel(*(dispatch_source_t *)(v3 + 32));
      v9 = *(NSObject **)(v3 + 32);
      *(_QWORD *)(v3 + 32) = 0;
      if (v9)
        dispatch_release(v9);
    }
  }
}

void sub_1000469A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!v6)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6)
          return;
      }
      sub_10004641C(v3);
      dispatch_source_cancel(*(dispatch_source_t *)(v3 + 32));
      v9 = *(NSObject **)(v3 + 32);
      *(_QWORD *)(v3 + 32) = 0;
      if (v9)
        dispatch_release(v9);
    }
  }
}

const char *sub_1000470AC(int a1)
{
  const char *v1;
  const char *v2;

  v1 = "kGood";
  v2 = "Unknown";
  if (a1 == 50)
    v2 = "kPoor";
  if (a1 != 100)
    v1 = v2;
  if (a1 == 10)
    return "kBad";
  else
    return v1;
}

const char *sub_1000470E8(int a1)
{
  const char *result;

  result = "kNone";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = "kPdcp_Uplink";
      break;
    case 2:
      result = "kRlc_Downlink";
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_6;
    case 4:
      result = "kLqe";
      break;
    case 8:
      result = "kRach";
      break;
    default:
      if (a1 == 16)
      {
        result = "kRF";
      }
      else if (a1 == 32)
      {
        result = "kNWReject";
      }
      else
      {
LABEL_6:
        result = "Unknown";
      }
      break;
  }
  return result;
}

const char *sub_10004717C(int a1)
{
  if (a1 > 1)
  {
    if (a1 != 2)
    {
      if (a1 == 255)
        return "kMax";
      return "Unknown";
    }
    return "kEVS";
  }
  else
  {
    if (a1)
    {
      if (a1 == 1)
        return "kWBAMR";
      return "Unknown";
    }
    return "kNBAMR";
  }
}

const char *sub_1000471DC(unsigned int a1)
{
  if (a1 > 3)
    return "Unknown";
  else
    return off_1002025F0[(char)a1];
}

id sub_100047940(id result)
{
  objc_super v1;

  if (!qword_100271100)
  {
    v1.receiver = (id)*((_QWORD *)result + 4);
    v1.super_class = (Class)&OBJC_METACLASS___WRM_IDSP2PController;
    result = objc_msgSend(objc_msgSendSuper2(&v1, "allocWithZone:", 0), "init");
    qword_100271100 = (uint64_t)result;
  }
  return result;
}

id sub_100047D30(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  NSSet *v8;
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[128];

  v17 = 0;
  v18 = 0;
  if (objc_msgSend(*(id *)(a1 + 32), "ConnectedDevices")
    && objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "ConnectedDevices"), "count")
    && (sub_100047F0C(objc_msgSend(*(id *)(a1 + 32), "ConnectedDevices")),
        v15 = 0u,
        v16 = 0u,
        v13 = 0u,
        v14 = 0u,
        v2 = objc_msgSend(*(id *)(a1 + 32), "ConnectedDevices"),
        (v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v19, 16)) != 0))
  {
    v4 = v3;
    v5 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v5)
          objc_enumerationMutation(v2);
        v7 = (void *)IDSCopyIDForDevice(*(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i));
        v8 = +[NSSet setWithObject:](NSSet, "setWithObject:", v7);

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v19, 16);
    }
    while (v4);
  }
  else
  {
    v8 = 0;
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("IDSP2PSync: Destination count is %d device(s)"), -[NSSet count](v8, "count"));
  if (v8)
  {
    if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "service"), "sendMessage:toDestinations:priority:options:identifier:error:", *(_QWORD *)(a1 + 40), v8, 300, *(_QWORD *)(a1 + 48), &v17, &v18))return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("IDSP2PSync: Requested IDS to send message with uuid %@"), v17, v12);
    v11 = v17;
    v12 = v18;
    v10 = CFSTR("IDSP2PSync: Failed to send with uuid %@ error %@");
  }
  else
  {
    v10 = CFSTR("IDSP2PSync: Not sending message due to issue with destination!!!");
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, v10, v11, v12);
}

void sub_100047F0C(void *a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *i;
  void *v6;
  void *v7;
  void *context;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  context = objc_autoreleasePoolPush();
  if (a1)
  {
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v2 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v2)
    {
      v3 = v2;
      v4 = *(_QWORD *)v10;
      do
      {
        for (i = 0; i != v3; i = (char *)i + 1)
        {
          if (*(_QWORD *)v10 != v4)
            objc_enumerationMutation(a1);
          v6 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i);
          v7 = (void *)IDSCopyIDForDevice(v6);
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("WRM_IDSP2PController (%p) - %s %s %s (%s)"), v6, objc_msgSend(objc_msgSend(v6, "uniqueIDOverride"), "UTF8String"), objc_msgSend(v7, "UTF8String"), objc_msgSend(objc_msgSend(v6, "name"), "UTF8String"), objc_msgSend(objc_msgSend(v6, "modelIdentifier"), "UTF8String"), context);

        }
        v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      }
      while (v3);
    }
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("WRM_IDSP2PController: No Devices !!"));
  }
  objc_autoreleasePoolPop(context);
}

void sub_10004853C(uint64_t a1)
{
  NSMutableArray *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("IDSP2PSync: Set of registered devices changed: %lu device(s)"), objc_msgSend(*(id *)(a1 + 32), "count"));
  v2 = objc_opt_new(NSMutableArray);
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v3 = *(void **)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v9;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v3);
        if (*(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)i))
          -[NSMutableArray addObject:](v2, "addObject:");
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v5);
  }
  objc_msgSend(*(id *)(a1 + 40), "setConnectedDevices:", v2);
  objc_msgSend(*(id *)(a1 + 40), "setDevicePaired:", objc_msgSend(*(id *)(a1 + 40), "updateDevicePairingState"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("IDSP2PSync: Set of registered devices changed (devicesChanged): %lu device(s)"), objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "ConnectedDevices"), "count"));
  sub_100047F0C(objc_msgSend(*(id *)(a1 + 40), "ConnectedDevices"));

}

void sub_100048748(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("IDSP2PSync: Set of connected devices changed: %lu device(s)"), objc_msgSend(*(id *)(a1 + 32), "count"));

}

void sub_1000488B8(uint64_t a1)
{
  id v2;
  NSMutableArray *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  if (objc_msgSend(*(id *)(a1 + 32), "IsIDSInitDone") == 1)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("IDSP2PSync: Already initialized, returning"));
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setService:", objc_msgSend(objc_alloc((Class)IDSService), "initWithService:", CFSTR("com.apple.private.alloy.iratmanager")));
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "service"), "addDelegate:queue:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 32), "queue"));
    objc_msgSend(*(id *)(a1 + 32), "setServiceInitDone:", 1);
    v2 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "service"), "devices");
    v3 = objc_opt_new(NSMutableArray);
    v8 = 0u;
    v9 = 0u;
    v10 = 0u;
    v11 = 0u;
    v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v9;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v9 != v6)
            objc_enumerationMutation(v2);
          if (*(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v7))
            -[NSMutableArray addObject:](v3, "addObject:");
          v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      }
      while (v5);
    }
    objc_msgSend(*(id *)(a1 + 32), "setConnectedDevices:", v3);
    objc_msgSend(*(id *)(a1 + 32), "setDevicePaired:", objc_msgSend(*(id *)(a1 + 32), "updateDevicePairingState"));
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("IDSP2PSync: Initial set of connected devices: %lu devices"), -[NSMutableArray count](v3, "count"));
    sub_100047F0C(objc_msgSend(*(id *)(a1 + 32), "ConnectedDevices"));

  }
}

void sub_100048B78(uint64_t a1)
{
  xpc_object_t v2;
  xpc_object_t v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  _QWORD block[4];
  id v9;

  v2 = xpc_uint64_create(0);
  v3 = xpc_dictionary_create(0, 0, 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("IOKIT callback camera state = %d"), a1);
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"));
    v5 = v4;
    if (v4 && objc_msgSend(v4, "cameraState") != (_DWORD)a1)
    {
      objc_msgSend(v5, "setCameraState:", a1);
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[WCM_Server singleton](WCM_Server, "singleton"));
      v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "getQueue"));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100048CD4;
      block[3] = &unk_100201838;
      v9 = v5;
      dispatch_async(v7, block);

    }
  }

}

void sub_100048C9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id sub_100048CD4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleSessionNotification:", 2800);
}

void sub_100048CE0(uint64_t a1)
{
  xpc_object_t v2;
  xpc_object_t v3;
  void *v4;
  uint64_t v5;
  const __CFString *v6;
  void *v7;
  NSObject *v8;
  _QWORD block[4];
  id v10;

  v2 = xpc_uint64_create(0);
  v3 = xpc_dictionary_create(0, 0, 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("YYDebug_ IOKIT callback pencil state [state = %d]"), a1);
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"));
    switch((_DWORD)a1)
    {
      case 1:
        v6 = CFSTR("YYDebug_ Pencil state unknown");
        break;
      case 2:
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("YYDebug_ Pencil state attached"));
        v5 = 1;
        if (!v4)
          goto LABEL_14;
        goto LABEL_12;
      case 4:
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("YYDebug_ Pencil state detached"));
        v5 = 0;
        if (!v4)
          goto LABEL_14;
        goto LABEL_12;
      default:
        v6 = CFSTR("YYDebug_ Cannot determine pencil state. This should never happen.");
        break;
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v6);
    v5 = 100;
    if (!v4)
    {
LABEL_14:

      goto LABEL_15;
    }
LABEL_12:
    if (objc_msgSend(v4, "pencilState") != (_DWORD)v5)
    {
      objc_msgSend(v4, "setPencilState:", v5);
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[WCM_Server singleton](WCM_Server, "singleton"));
      v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "getQueue"));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100048EB8;
      block[3] = &unk_100201838;
      v10 = v4;
      dispatch_async(v8, block);

    }
    goto LABEL_14;
  }
LABEL_15:

}

void sub_100048E80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id sub_100048EB8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleSessionNotification:", 2801);
}

void sub_10004981C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_100049850(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[6];
  __CFString *v9;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellularProductExperimentsManager: checkTreatmentUpdate: Trial Treatment Updated"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellularProductExperimentsManager: checkTreatmentUpdate: trialCallbackReceived : YES"));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = (void *)WeakRetained[1];
    v9 = off_100270BB8;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v9, 1));
    v6 = v3[2];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100049970;
    v8[3] = &unk_100202620;
    v7 = *(_QWORD *)(a1 + 32);
    v8[4] = v3;
    v8[5] = v7;
    objc_msgSend(v4, "downloadLevelsForFactors:withNamespace:queue:options:progress:completion:", v5, CFSTR("WIRELESS_DATA_ANALYTICS_CELLULAR_PRODUCT_EXPERIMENTATION_INTERNAL"), v6, 0, 0, v8);

  }
}

id sub_100049970(uint64_t a1, int a2)
{
  id result;

  if (!a2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellularProductExperimentsManager: checkTreatmentUpdate: downloadLevelsForFactors failed"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellularProductExperimentsManager: checkTreatmentUpdate: Downloaded modified asset"));
  result = objc_msgSend(*(id *)(a1 + 32), "updateTreatment");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return result;
}

char *sub_10004A054(tlv *a1, const unsigned __int8 *a2, _WORD *a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2, a4);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

_WORD *sub_10004A088(_WORD *a1, __int16 a2)
{
  *a1 = a2;
  return a1 + 1;
}

uint64_t sub_10004A090()
{
  return 2;
}

uint64_t sub_10004A098(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1, a4);
  *(_BYTE *)a3 = *(_BYTE *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)2, v7);
  *(_WORD *)(a3 + 2) = *(_WORD *)(a1 + 1);
  return a1 + 3;
}

uint64_t sub_10004A0F0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 2);
  return a1 + 3;
}

uint64_t sub_10004A108()
{
  return 3;
}

uint64_t sub_10004A110(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unsigned int v7;
  unint64_t v8;
  int v9;

  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)2, v8);
  v9 = *(unsigned __int16 *)((char *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 3);
  return (v9 << 16) | v7;
}

void sub_10004A178(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004A164);
}

uint64_t sub_10004A18C(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1, a4);
  *(_BYTE *)a3 = *(_BYTE *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)2, v7);
  *(_WORD *)(a3 + 2) = *(_WORD *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 3), a2, (const unsigned __int8 *)1, v8);
  *(_BYTE *)(a3 + 4) = *(_BYTE *)(a1 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4, v9);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

uint64_t sub_10004A214(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 8);
  return a1 + 8;
}

uint64_t sub_10004A23C()
{
  return 8;
}

uint64_t sub_10004A244(uint64_t *a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5;
  int v6;

  LOBYTE(v5) = 0;
  WORD1(v5) = 0;
  BYTE4(v5) = 0;
  v6 = 0;
  *a1 = sub_10004A18C(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)&v5, a4);
  return v5;
}

void sub_10004A294(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004A27CLL);
}

uint64_t sub_10004A2A4()
{
  return 11;
}

uint64_t *sub_10004A2AC(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_BYTE *)v2 = *(_BYTE *)a2;
  *(_WORD *)(v2 + 1) = *(_WORD *)(a2 + 2);
  *(_BYTE *)(v2 + 3) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 8);
  *result = v2 + 8;
  return result;
}

char *sub_10004A2DC(tlv *a1, const unsigned __int8 *a2, _BYTE *a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1, a4);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

_BYTE *sub_10004A310(_BYTE *a1, _BYTE *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t sub_10004A31C()
{
  return 1;
}

uint64_t sub_10004A324(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_10004A35C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004A350);
}

uint64_t sub_10004A370(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unsigned int v7;
  unint64_t v8;
  int v9;

  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)2, v8);
  v9 = *(unsigned __int16 *)((char *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 3);
  return (v9 << 16) | v7;
}

void sub_10004A3D8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004A3C4);
}

uint64_t sub_10004A3EC(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1, a4);
  *(_BYTE *)a3 = *(_BYTE *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1, v7);
  *(_BYTE *)(a3 + 1) = *(_BYTE *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2, v8);
  *(_WORD *)(a3 + 2) = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2, v9);
  *(_WORD *)(a3 + 4) = *(_WORD *)(a1 + 4);
  return a1 + 6;
}

uint64_t sub_10004A474(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  return a1 + 6;
}

unint64_t sub_10004A49C(uint64_t *a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5;
  unsigned __int16 v6;

  v6 = 0;
  v5 = 0;
  *a1 = sub_10004A3EC(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)&v5, a4);
  return v5 | ((unint64_t)v6 << 32);
}

void sub_10004A4E8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004A4CCLL);
}

uint64_t sub_10004A4F8()
{
  return 9;
}

uint64_t *sub_10004A500(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_BYTE *)v2 = *(_BYTE *)a2;
  *(_BYTE *)(v2 + 1) = *(_BYTE *)(a2 + 1);
  *(_WORD *)(v2 + 2) = *(_WORD *)(a2 + 2);
  *(_WORD *)(v2 + 4) = *(_WORD *)(a2 + 4);
  *result = v2 + 6;
  return result;
}

uint64_t sub_10004A530(uint64_t a1, const unsigned __int8 *a2, _WORD *a3, unint64_t a4)
{
  unint64_t v7;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2, a4);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2, v7);
  a3[1] = *(_WORD *)(a1 + 2);
  return a1 + 4;
}

_WORD *sub_10004A588(_WORD *a1, _WORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

uint64_t sub_10004A5A0(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unsigned int v7;
  unint64_t v8;
  int v9;

  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2, a4);
  v7 = *(unsigned __int16 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 2), v6, (const unsigned __int8 *)2, v8);
  v9 = *((unsigned __int16 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 4);
  return (v9 << 16) | v7;
}

void sub_10004A608(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004A5F4);
}

uint64_t sub_10004A61C()
{
  return 7;
}

_WORD **sub_10004A624(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

_WORD *sub_10004A644(_WORD *a1, _WORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t sub_10004A650(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_10004A688(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004A67CLL);
}

uint64_t sub_10004A69C()
{
  return 5;
}

_WORD **sub_10004A6A4(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t sub_10004A6B8(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unsigned int v7;
  unint64_t v8;
  int v9;

  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)2, v8);
  v9 = *(unsigned __int16 *)((char *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 3);
  return (v9 << 16) | v7;
}

void sub_10004A720(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004A70CLL);
}

uint64_t sub_10004A734(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_10004A76C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004A760);
}

uint64_t sub_10004A780(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_10004A7B8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004A7ACLL);
}

uint64_t sub_10004A7CC(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_10004A804(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004A7F8);
}

uint64_t sub_10004A818(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_10004A850(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004A844);
}

uint64_t sub_10004A864(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_10004A89C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004A890);
}

uint64_t sub_10004A8B0(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_10004A8E8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004A8DCLL);
}

uint64_t sub_10004A8FC(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_10004A934(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004A928);
}

uint64_t sub_10004A948(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_10004A980(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004A974);
}

tlv *sub_10004A994(tlv *a1, const unsigned __int8 *a2, _QWORD *a3, unint64_t a4)
{
  tlv *v7;
  unsigned int v8;
  unint64_t v9;
  _WORD *v10;
  _WORD *v11;
  __int16 v12;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1, a4);
  v8 = *(unsigned __int8 *)a1;
  v7 = (tlv *)((char *)a1 + 1);
  sub_10004B308((uint64_t)a3, v8);
  v11 = (_WORD *)*a3;
  v10 = (_WORD *)a3[1];
  while (v11 != v10)
  {
    tlv::throwIfNotEnoughBytes(v7, a2, (const unsigned __int8 *)2, v9);
    v12 = *(_WORD *)v7;
    v7 = (tlv *)((char *)v7 + 2);
    *v11++ = v12;
  }
  return v7;
}

_WORD *sub_10004AA00(_BYTE *a1, _DWORD *a2)
{
  _WORD *result;
  __int16 *v3;
  __int16 *v4;
  __int16 v5;

  *a1 = (a2[2] - *a2) >> 1;
  result = a1 + 1;
  v3 = *(__int16 **)a2;
  v4 = (__int16 *)*((_QWORD *)a2 + 1);
  while (v3 != v4)
  {
    v5 = *v3++;
    *result++ = v5;
  }
  return result;
}

uint64_t sub_10004AA30(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (v1 == *a1)
    return 1;
  else
    return (v1 - *a1) | 1;
}

tlv *sub_10004AA44@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  tlv *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  result = sub_10004A994(*a1, (const unsigned __int8 *)*a1 + a2, a4, a3);
  *a1 = result;
  return result;
}

void sub_10004AA80(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004AA74);
}

void sub_10004AA90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004AAAC(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (v1 == *a1)
    return 4;
  else
    return ((v1 - *a1) | 1) + 3;
}

_BYTE **sub_10004AAC8(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _WORD *v3;
  __int16 *v4;
  __int16 *v5;
  __int16 v6;

  v2 = *result;
  *v2 = (a2[2] - *a2) >> 1;
  v3 = v2 + 1;
  v4 = *(__int16 **)a2;
  v5 = (__int16 *)*((_QWORD *)a2 + 1);
  while (v4 != v5)
  {
    v6 = *v4++;
    *v3++ = v6;
  }
  *result = v3;
  return result;
}

uint64_t sub_10004AB00(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_10004AB38(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004AB2CLL);
}

tlv *sub_10004AB4C@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  tlv *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  result = sub_10004A994(*a1, (const unsigned __int8 *)*a1 + a2, a4, a3);
  *a1 = result;
  return result;
}

void sub_10004AB88(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004AB7CLL);
}

void sub_10004AB98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004ABB4(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_10004ABEC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004ABE0);
}

tlv *sub_10004AC00@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  tlv *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  result = sub_10004A994(*a1, (const unsigned __int8 *)*a1 + a2, a4, a3);
  *a1 = result;
  return result;
}

void sub_10004AC3C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004AC30);
}

void sub_10004AC4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004AC68(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_10004ACA0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004AC94);
}

tlv *sub_10004ACB4@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  tlv *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  result = sub_10004A994(*a1, (const unsigned __int8 *)*a1 + a2, a4, a3);
  *a1 = result;
  return result;
}

void sub_10004ACF0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004ACE4);
}

void sub_10004AD00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004AD1C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_10004AD54(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004AD48);
}

tlv *sub_10004AD68@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  tlv *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  result = sub_10004A994(*a1, (const unsigned __int8 *)*a1 + a2, a4, a3);
  *a1 = result;
  return result;
}

void sub_10004ADA4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004AD98);
}

void sub_10004ADB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004ADD0(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_10004AE08(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004ADFCLL);
}

tlv *sub_10004AE1C@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  tlv *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  result = sub_10004A994(*a1, (const unsigned __int8 *)*a1 + a2, a4, a3);
  *a1 = result;
  return result;
}

void sub_10004AE58(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004AE4CLL);
}

void sub_10004AE68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004AE84(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_10004AEBC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004AEB0);
}

uint64_t sub_10004AED0(uint64_t a1, const unsigned __int8 *a2, _BYTE *a3, unint64_t a4)
{
  unint64_t v7;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1, a4);
  *a3 = *(_BYTE *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1, v7);
  a3[1] = *(_BYTE *)(a1 + 1);
  return a1 + 2;
}

_BYTE *sub_10004AF28(_BYTE *a1, _BYTE *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

uint64_t sub_10004AF44(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  const unsigned __int8 *v6;
  int v7;
  unint64_t v8;
  int v9;

  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_10004AFA8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004AF94);
}

_BYTE **sub_10004AFBC(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

tlv *sub_10004AFDC@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  tlv *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  result = sub_10004A994(*a1, (const unsigned __int8 *)*a1 + a2, a4, a3);
  *a1 = result;
  return result;
}

void sub_10004B018(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004B00CLL);
}

void sub_10004B028(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004B044(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_10004B07C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004B070);
}

tlv *sub_10004B090@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  tlv *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  result = sub_10004A994(*a1, (const unsigned __int8 *)*a1 + a2, a4, a3);
  *a1 = result;
  return result;
}

void sub_10004B0CC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004B0C0);
}

void sub_10004B0DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004B0F8(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_10004B130(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004B124);
}

uint64_t sub_10004B144(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  const unsigned __int8 *v6;
  int v7;
  unint64_t v8;
  int v9;

  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_10004B1A8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004B194);
}

tlv *sub_10004B1BC@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  tlv *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  result = sub_10004A994(*a1, (const unsigned __int8 *)*a1 + a2, a4, a3);
  *a1 = result;
  return result;
}

void sub_10004B1F8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004B1ECLL);
}

void sub_10004B208(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004B224(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_10004B25C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004B250);
}

uint64_t sub_10004B270(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_10004B2A8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004B29CLL);
}

uint64_t sub_10004B2BC(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_10004B2F4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10004B2E8);
}

void sub_10004B308(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    sub_10004B338((char **)a1, a2 - v2);
  }
}

void sub_10004B338(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      sub_10004B438();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_10004B4C0(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sub_10004B438()
{
  sub_10004B44C("vector");
}

void sub_10004B44C(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_10004B49C(exception, a1);
}

void sub_10004B488(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_10004B49C(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  return result;
}

void *sub_10004B4C0(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    sub_10004B4F0();
  return operator new(2 * a2);
}

void sub_10004B4F0()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

id sub_10004B5F4()
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 0, CFSTR("WCMBSP:%s"), "_RegulatoryDomainUpdateCallback");
  return objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "bspMonitor"), "handleRDCountryCodeChangedEvent");
}

void sub_10004CA08(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10004E45C;
  block[3] = &unk_100202710;
  block[4] = a1;
  dispatch_async((dispatch_queue_t)objc_msgSend(+[WCM_Server singleton](WCM_Server, "singleton"), "getQueue"), block);
}

id sub_10004CA74(uint64_t a1)
{
  _DWORD *v2;
  int v3;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WCMBSP:%s powerState=0x%x"), "-[WCM_BSPMonitorIOS handleWiFiStatusUpdateEvent:]_block_invoke", *(unsigned __int8 *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "printStatus:", "Before WiFiStatusUpdate");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = *(_BYTE *)(a1 + 40);
  v2 = *(_DWORD **)(a1 + 32);
  v3 = v2[41];
  objc_msgSend(v2, "updateBSPState");
  switch(v3)
  {
    case 0:
      if (*(_BYTE *)(a1 + 40))
      {
        objc_msgSend(*(id *)(a1 + 32), "sendGetRegulatoryInfoToWiFi");
        objc_msgSend(*(id *)(a1 + 32), "sendGetNanPhsStateToWiFi");
        objc_msgSend(*(id *)(a1 + 32), "sendGetBandSwitchStatusToWiFi");
        objc_msgSend(*(id *)(a1 + 32), "sendGetChannelQualityInfoToWiFi");
        objc_msgSend(*(id *)(a1 + 32), "sendBTStatusToWiFi");
      }
      break;
    case 1:
      if (!*(_BYTE *)(a1 + 40))
        objc_msgSend(*(id *)(a1 + 32), "initWiFiStatus");
      break;
    case 2:
      if (*(_BYTE *)(a1 + 40))
      {
        objc_msgSend(*(id *)(a1 + 32), "sendGetRegulatoryInfoToWiFi");
        objc_msgSend(*(id *)(a1 + 32), "sendGetNanPhsStateToWiFi");
        objc_msgSend(*(id *)(a1 + 32), "sendGetBandSwitchStatusToWiFi");
        objc_msgSend(*(id *)(a1 + 32), "sendGetChannelQualityInfoToWiFi");
        objc_msgSend(*(id *)(a1 + 32), "sendBTStatusToWiFi");
        goto LABEL_12;
      }
      break;
    case 3:
      if (!*(_BYTE *)(a1 + 40))
      {
        objc_msgSend(*(id *)(a1 + 32), "initWiFiStatus");
        objc_msgSend(*(id *)(a1 + 32), "sendWiFiStatusToBT");
        objc_msgSend(*(id *)(a1 + 32), "updateFrequencyBandForBT");
      }
      break;
    case 4:
      if (!*(_BYTE *)(a1 + 40))
      {
        objc_msgSend(*(id *)(a1 + 32), "initWiFiStatus");
LABEL_12:
        objc_msgSend(*(id *)(a1 + 32), "sendWiFiStatusToBT");
      }
      break;
    default:
      return objc_msgSend(*(id *)(a1 + 32), "printStatus:", "After WiFiStatusUpdate");
  }
  return objc_msgSend(*(id *)(a1 + 32), "printStatus:", "After WiFiStatusUpdate");
}

id sub_10004CC30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WCMBSP:%s band=0x%x"), "-[WCM_BSPMonitorIOS handleWiFiFrequencyBandForBTEvent:]_block_invoke", *(unsigned int *)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 8))
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("WCMBSP:%s unexpected event, mBSPState=%d"), "-[WCM_BSPMonitorIOS handleWiFiFrequencyBandForBTEvent:]_block_invoke", *(unsigned int *)(v2 + 164));
  objc_msgSend((id)v2, "printStatus:", "Before WiFiFrequencyBandForBT");
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 32) = *(_DWORD *)(a1 + 40);
  +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = v3;
  v4 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v4 + 128))
  {
    if (*(_DWORD *)(v4 + 164) != 4)
    {
      objc_msgSend((id)v4, "sendSetFrequencyBandToBT:", *(unsigned int *)(v4 + 32));
      v4 = *(_QWORD *)(a1 + 32);
    }
  }
  return objc_msgSend((id)v4, "printStatus:", "After WiFiFrequencyBandForBT");
}

id sub_10004CD9C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WCMBSP:%s band=0x%x, quality=0x%x"), "-[WCM_BSPMonitorIOS handleWiFiChannelQualityEvent:quality:]_block_invoke", *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 8))
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("WCMBSP:%s unexpected event, mBSPState=%d"), "-[WCM_BSPMonitorIOS handleWiFiChannelQualityEvent:quality:]_block_invoke", *(unsigned int *)(v2 + 164));
  objc_msgSend((id)v2, "printStatus:", "Before WiFiChannelQuality");
  v3 = *(_DWORD *)(a1 + 48);
  switch(v3)
  {
    case 16:
      v7 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 96) = 16;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 104) = v7;
      +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) = v8;
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 72) = 2;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) = v9;
      +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) = v10;
      break;
    case 1:
      v4 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 48) = 1;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = v4;
      +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) = v5;
      break;
    default:
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("WCMBSP:%s unknown band=0x%x, quality=0x%x"), "-[WCM_BSPMonitorIOS handleWiFiChannelQualityEvent:quality:]_block_invoke", *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
      break;
  }
  v11 = *(_BYTE **)(a1 + 32);
  if (v11[128])
  {
    objc_msgSend(v11, "sendChannelQualityToBT:quality:", *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
    v11 = *(_BYTE **)(a1 + 32);
  }
  return objc_msgSend(v11, "printStatus:", "After WiFiChannelQuality");
}

id sub_10004CFB4(uint64_t a1)
{
  uint64_t v2;
  int v3;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WCMBSP:%s regulatoryInfo=0x%x"), "-[WCM_BSPMonitorIOS handleWiFiRegulatoryInfoEvent:]_block_invoke", *(_QWORD *)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 8))
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("WCMBSP:%s unexpected event, mBSPState=%d"), "-[WCM_BSPMonitorIOS handleWiFiRegulatoryInfoEvent:]_block_invoke", *(unsigned int *)(v2 + 164));
  objc_msgSend((id)v2, "printStatus:", "Before WiFiRegulatoryInfo");
  v3 = *(_DWORD *)(a1 + 40);
  if (v3)
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 24) = v3;
  objc_msgSend(*(id *)(a1 + 32), "updateBSPState");
  objc_msgSend(*(id *)(a1 + 32), "updateFrequencyBandForBT");
  return objc_msgSend(*(id *)(a1 + 32), "printStatus:", "After WiFiRegulatoryInfo");
}

id sub_10004D0EC(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  const char *v8;

  v2 = *(int *)(a1 + 40);
  if (v2 >= 4)
  {
    if ((_DWORD)v2 == 4)
      v3 = "ASSOCIATED_6G";
    else
      v3 = "INVALID_STATE!!!";
  }
  else
  {
    v3 = off_100202730[v2];
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WCMBSP:%s wifiState=%s, wifiChannel=%u, isNanPhs=%u"), "-[WCM_BSPMonitorIOS handleWiFiStateEvent:wifiChannel:isNanPhs:]_block_invoke", v3, *(unsigned int *)(a1 + 44), *(unsigned __int8 *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "printStatus:", "Before WiFiStateEvent");
  v4 = *(_DWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(unsigned __int8 *)(a1 + 48);
  if (v4 > 1 || *(unsigned __int8 *)(v5 + 20) == (_DWORD)v6)
  {
    *(_DWORD *)(v5 + 12) = v4;
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 16) = *(_DWORD *)(a1 + 44);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 20) = v6;
    objc_msgSend(*(id *)(a1 + 32), "updateFrequencyBandForBT");
  }
  else
  {
    v7 = "ENABLED";
    if (v4 != 1)
      v7 = "INVALID_STATE!!!";
    if (v4)
      v8 = v7;
    else
      v8 = "DISABLED";
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WCMBSP:%s ignoring late update wifiState=%s, wifiChannel=%u, isNanPhs=%u"), "-[WCM_BSPMonitorIOS handleWiFiStateEvent:wifiChannel:isNanPhs:]_block_invoke", v8, *(unsigned int *)(a1 + 44), v6);
  }
  return objc_msgSend(*(id *)(a1 + 32), "printStatus:", "After WiFiStateEvent");
}

id sub_10004D29C(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WCMBSP:%s"), "-[WCM_BSPMonitorIOS handleWiFiCountryCodeChangedEvent]_block_invoke");
  return objc_msgSend(*(id *)(a1 + 32), "sendGetRegulatoryInfoToWiFi");
}

void sub_10004D384(uint64_t a1, uint64_t a2)
{
  dispatch_time_t v3;
  _QWORD v4[5];
  _QWORD block[5];

  if (a1)
  {
    v3 = dispatch_time(0, 1000000 * a1);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10004E468;
    block[3] = &unk_100202710;
    block[4] = a2;
    dispatch_after(v3, (dispatch_queue_t)objc_msgSend(+[WCM_Server singleton](WCM_Server, "singleton"), "getQueue"), block);
  }
  else
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10004E474;
    v4[3] = &unk_100202710;
    v4[4] = a2;
    dispatch_async((dispatch_queue_t)objc_msgSend(+[WCM_Server singleton](WCM_Server, "singleton"), "getQueue"), v4);
  }
}

id sub_10004D460(uint64_t a1)
{
  id result;
  uint64_t v3;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WCMBSP:%s"), "-[WCM_BSPMonitorIOS handleBandSwitchStatusUpdatedEvent]_block_invoke");
  objc_msgSend(*(id *)(a1 + 32), "sendGetBandSwitchStatusToWiFi");
  result = +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 184) = v3;
  return result;
}

id sub_10004D568(uint64_t a1)
{
  id result;
  uint64_t v3;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WCMBSP:%s"), "-[WCM_BSPMonitorIOS handleChannelQualityInfoUpdatedEvent]_block_invoke");
  objc_msgSend(*(id *)(a1 + 32), "sendGetChannelQualityInfoToWiFi");
  result = +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 192) = v3;
  return result;
}

id sub_10004D630(uint64_t a1)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WCMBSP:%s coexMode=%d, btSubband=0x%x, successCount=%llu, failCount=%llu"), "-[WCM_BSPMonitorIOS handleBandSwitchStatusEvent:btSubband:successCount:failCount:]_block_invoke", *(unsigned __int8 *)(a1 + 60), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 120) = *(_BYTE *)(a1 + 60);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 124) = *(_DWORD *)(a1 + 56);
  return result;
}

void sub_10004D850(uint64_t a1)
{
  double v2;
  double v3;

  +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
  v3 = v2;
  objc_msgSend(*(id *)(a1 + 32), "updateChannelQualityInfo:bandCode:chqInfoDict:ts:", *(_QWORD *)(a1 + 32) + 48, 0, *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "updateChannelQualityInfo:bandCode:chqInfoDict:ts:", *(_QWORD *)(a1 + 32) + 72, 1, *(_QWORD *)(a1 + 40), v3);
  objc_msgSend(*(id *)(a1 + 32), "updateChannelQualityInfo:bandCode:chqInfoDict:ts:", *(_QWORD *)(a1 + 32) + 96, 4, *(_QWORD *)(a1 + 40), v3);
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

id sub_10004D928(uint64_t a1)
{
  id result;
  int v3;
  uint64_t v4;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WCMBSP:%s reasonCode=0x%x, btSubband=0x%x"), "-[WCM_BSPMonitorIOS handleCoexModeFailEvent:btSubband:]_block_invoke", *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return objc_msgSend(*(id *)(a1 + 32), "sendSetCoexModeToWiFi:wifiSupportedBands:btCurrentBand:btSupportedBands:setTimeToTSTOnly:timeToTST:", 0, *(unsigned int *)(*(_QWORD *)(a1 + 32) + 24), *(unsigned int *)(*(_QWORD *)(a1 + 32) + 160), 19, 1, objc_msgSend(*(id *)(a1 + 32), "getTimeToTSTForULLAMode:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 136)));
  if (v3 == 1)
  {
    if (*(_DWORD *)(a1 + 44) == 2)
      v4 = 16;
    else
      v4 = 2;
    objc_msgSend(*(id *)(a1 + 32), "sendSetFrequencyBandToBT:forced:", v4, 1);
    return objc_msgSend(*(id *)(a1 + 32), "sendSetCoexModeToWiFi:wifiSupportedBands:btCurrentBand:btSupportedBands:setTimeToTSTOnly:timeToTST:", 1, *(unsigned int *)(*(_QWORD *)(a1 + 32) + 24), *(unsigned int *)(*(_QWORD *)(a1 + 32) + 160), 19, 0, objc_msgSend(*(id *)(a1 + 32), "getTimeToTSTForULLAMode:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 136)));
  }
  return result;
}

id sub_10004DAC8(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WCMBSP:%s reasonCode=0x%x, btTargetBand=0x%x"), "-[WCM_BSPMonitorIOS handleBandSwitchRejectEvent:btTargetBand:]_block_invoke", *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
  return objc_msgSend(*(id *)(a1 + 32), "sendBandSwitchRejectToBT:targetBand:", *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
}

id sub_10004DB70(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WCMBSP:%s"), "-[WCM_BSPMonitorIOS requestBTStatus]_block_invoke");
  return objc_msgSend(*(id *)(a1 + 32), "sendBTStatusRequestToBT");
}

id sub_10004DC0C(uint64_t a1)
{
  double v2;
  double v3;

  +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
  v3 = v2;
  objc_msgSend(*(id *)(a1 + 32), "printStatus:", "Show Status");
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("coexMode=%d, btSubband=0x%x, Chq_2_4G=0x%x,%llums, Chq_5G_Low=0x%x,%llums, Chq_5g_High=0x%x,%llums"), *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 120), *(unsigned int *)(*(_QWORD *)(a1 + 32) + 124), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56), (unint64_t)((v3 - *(double *)(*(_QWORD *)(a1 + 32) + 64)) * 1000.0), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80), (unint64_t)((v3 - *(double *)(*(_QWORD *)(a1 + 32) + 88)) * 1000.0), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 104), (unint64_t)((v3 - *(double *)(*(_QWORD *)(a1 + 32) + 112)) * 1000.0));
}

id sub_10004DDA0(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  void *v16;

  v2 = *(_DWORD **)(a1 + 32);
  v4 = v2[33];
  v3 = v2[34];
  v6 = *(unsigned int *)(a1 + 40);
  v5 = *(unsigned int *)(a1 + 44);
  v7 = v2[41] == 4 && (_DWORD)v3 == (_DWORD)v5;
  v8 = !v7;
  v9 = *(unsigned __int8 *)(a1 + 48);
  if (v7)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WCMBSP:%s powerState=0x%x, band=0x%x, ullaMode=%d"), "-[WCM_BSPMonitorIOS handleBTStatusUpdateEvent:frequencyBand:ullaMode:]_block_invoke", v9, v6, v3);
    objc_msgSend(*(id *)(a1 + 32), "printStatus:withLogLevel:", "Before BTStatusUpdate", 3);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WCMBSP:%s powerState=0x%x, band=0x%x, ullaMode=%d"), "-[WCM_BSPMonitorIOS handleBTStatusUpdateEvent:frequencyBand:ullaMode:]_block_invoke", v9, v6, v5);
    objc_msgSend(*(id *)(a1 + 32), "printStatus:", "Before BTStatusUpdate");
  }
  objc_msgSend(*(id *)(a1 + 32), "checkBTRegulatoryInfo");
  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 136);
  if (v10)
  {
    v11 = *(_DWORD *)(a1 + 44);
    if (v11)
      v12 = v10 == v11;
    else
      v12 = 1;
    LOBYTE(v10) = !v12;
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 156) = v10;
  v13 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v13 + 156))
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WCMBSP:%s ullaModeTransitioned=%d"), "-[WCM_BSPMonitorIOS handleBTStatusUpdateEvent:frequencyBand:ullaMode:]_block_invoke", 1);
    v13 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(v13 + 128) = *(_BYTE *)(a1 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 132) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 136) = *(_DWORD *)(a1 + 44);
  v14 = *(_DWORD **)(a1 + 32);
  v15 = v14[41];
  objc_msgSend(v14, "updateBSPState");
  switch(v15)
  {
    case 0:
      if (*(_BYTE *)(a1 + 48))
        objc_msgSend(*(id *)(a1 + 32), "sendWiFiStatusToBT");
      break;
    case 1:
      if (*(_BYTE *)(a1 + 48))
      {
        objc_msgSend(*(id *)(a1 + 32), "sendWiFiStatusToBT");
        goto LABEL_28;
      }
      break;
    case 3:
    case 4:
      if (!*(_BYTE *)(a1 + 48) || v4 != (_DWORD)v6 || (_DWORD)v3 != (_DWORD)v5)
LABEL_28:
        objc_msgSend(*(id *)(a1 + 32), "sendBTStatusToWiFi");
      break;
    default:
      break;
  }
  objc_msgSend(*(id *)(a1 + 32), "updateFrequencyBandForBT");
  v16 = *(void **)(a1 + 32);
  if (v8)
    return objc_msgSend(v16, "printStatus:", "After BTStatusUpdate");
  else
    return objc_msgSend(v16, "printStatus:withLogLevel:", "After BTStatusUpdate", 3);
}

id sub_10004E00C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  _DWORD *v5;
  uint64_t v6;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WCMBSP:%s currentBand=0x%x, targetBand=0x%x"), "-[WCM_BSPMonitorIOS handleBTBandSwitchRequestEvent:targetBand:]_block_invoke", *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 128))
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("WCMBSP:%s unexpected event, mBSPState=%d"), "-[WCM_BSPMonitorIOS handleBTBandSwitchRequestEvent:targetBand:]_block_invoke", *(unsigned int *)(v2 + 164));
  objc_msgSend((id)v2, "printStatus:", "Before BTBandSwitchRequest");
  v3 = objc_msgSend(*(id *)(a1 + 32), "selectBandWithPreferredBands:", *(unsigned int *)(a1 + 44));
  v4 = (id)*(unsigned int *)(a1 + 44);
  v5 = *(_DWORD **)(a1 + 32);
  if ((_DWORD)v3 != (_DWORD)v4)
  {
LABEL_9:
    objc_msgSend(v5, "sendBandSwitchRejectToBT:targetBand:", 1, v4);
    return objc_msgSend(*(id *)(a1 + 32), "printStatus:", "After BTBandSwitchRequest");
  }
  v6 = *(unsigned int *)(a1 + 40);
  if (v5[41] != 4)
  {
    if ((_DWORD)v6 != 64)
    {
      objc_msgSend(v5, "sendSetFrequencyBandToBT:", v3);
      return objc_msgSend(*(id *)(a1 + 32), "printStatus:", "After BTBandSwitchRequest");
    }
    v4 = v3;
    goto LABEL_9;
  }
  objc_msgSend(v5, "sendBandSwitchRequestToWiFi:targetBand:", v6, v3);
  return objc_msgSend(*(id *)(a1 + 32), "printStatus:", "After BTBandSwitchRequest");
}

id sub_10004E18C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WCMBSP:%s countryCode=%@, allowedBands=0x%x"), "-[WCM_BSPMonitorIOS handleBTRegulatoryInfoEvent:allowedBands:]_block_invoke", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 40), "printStatus:", "Before BTRegulatoryInfoEvent");
  v2 = *(void **)(a1 + 32);
  if (v2
    && objc_msgSend(v2, "length")
    && ((objc_msgSend(*(id *)(a1 + 32), "hasPrefix:", CFSTR("CC:")) & 1) != 0
     || (objc_msgSend(*(id *)(a1 + 32), "hasPrefix:", CFSTR("RC:")) & 1) != 0
     || objc_msgSend(*(id *)(a1 + 32), "hasPrefix:", CFSTR("LKC:"))))
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(void **)(v3 + 144);
    if (v4)
    {
      v5 = objc_msgSend(v4, "length");
      v3 = *(_QWORD *)(a1 + 40);
      if (v5)
      {
        if ((objc_msgSend(*(id *)(v3 + 144), "hasPrefix:", CFSTR("CC:")) & 1) != 0
          || (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 144), "hasPrefix:", CFSTR("RC:")) & 1) != 0
          || (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 144), "hasPrefix:", CFSTR("LKC:")) & 1) != 0)
        {
          v6 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 144), "isEqualToString:", *(_QWORD *)(a1 + 32));
          v3 = *(_QWORD *)(a1 + 40);
          if (v6 && *(_DWORD *)(v3 + 152) == *(_DWORD *)(a1 + 48))
            goto LABEL_23;
        }
        else
        {
          v3 = *(_QWORD *)(a1 + 40);
        }
      }
    }
    v9 = *(void **)(v3 + 144);
    if (v9)
    {

      v3 = *(_QWORD *)(a1 + 40);
    }
    v10 = v3 + 128;
    if (*(_DWORD *)(v10 + 4) != -1)
      *(_DWORD *)(v10 + 4) = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 144) = +[NSString stringWithString:](NSString, "stringWithString:", *(_QWORD *)(a1 + 32));
    *(_DWORD *)(*(_QWORD *)(a1 + 40) + 152) = *(_DWORD *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 40), "updateBSPState");
    objc_msgSend(*(id *)(a1 + 40), "updateFrequencyBandForBT");
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(void **)(v7 + 144);
    if (v8)
    {

      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 144) = 0;
      v7 = *(_QWORD *)(a1 + 40);
    }
    *(_DWORD *)(v7 + 152) = 0;
  }
LABEL_23:
  objc_msgSend(*(id *)(a1 + 40), "checkBTRegulatoryInfo");
  return objc_msgSend(*(id *)(a1 + 40), "printStatus:", "After BTRegulatoryInfoEvent");
}

id sub_10004E3E8(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WCMBSP:%s"), "-[WCM_BSPMonitorIOS handleRDCountryCodeChangedEvent]_block_invoke");
  objc_msgSend(*(id *)(a1 + 32), "printStatus:", "Before RDCountryCodeChangedEvent");
  objc_msgSend(*(id *)(a1 + 32), "readRDCountryCode");
  objc_msgSend(*(id *)(a1 + 32), "checkBTRegulatoryInfo");
  return objc_msgSend(*(id *)(a1 + 32), "printStatus:", "After RDCountryCodeChangedEvent");
}

uint64_t sub_10004E45C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10004E468(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10004E474(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100051A58(int a1)
{
  if (a1)
    return 2 * (a1 == 1);
  else
    return 1;
}

void sub_100051DCC()
{
  uint64_t v0;

  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  if (*(char *)(v0 - 81) < 0)
    operator delete(*(void **)(v0 - 104));
  operator delete();
}

id sub_100051E20(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "started");
}

id sub_100051E28(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "stopped");
}

id sub_100051E30(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "errored");
}

void sub_100051E38(uint64_t a1, _QWORD *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD v7[3];

  v2 = *(void **)(a1 + 32);
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v4 = a2[2];
  v7[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  objc_msgSend(v2, "handleDataSystemStatusInd:", v7);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v7);
}

void sub_100051E94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

id sub_100051F98(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setQMIClientStatus:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 24));
}

_QWORD *sub_100052048(_QWORD *result, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  const char *v6;

  if (*(_BYTE *)a2)
  {
    v2 = *(unsigned int **)(a2 + 8);
    if (*(unsigned int **)(a2 + 16) == v2)
      sub_100052E80();
    v3 = *(_QWORD *)(result[4] + 32);
    v4 = sub_1000744BC(*v2);
    v5 = *v2;
    v6 = sub_1000744E0(v2[1]);
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD Data System status sim %d: Technology: %s (0x%x), rat value: %s (0x%x), service option mask: %s (0x%lx)"), v3, v4, v5, v6, v2[1], sub_100074610(*((const mach_header_64 **)v2 + 1)), *((_QWORD *)v2 + 1));
  }
  return result;
}

id sub_1000520F8(_QWORD *a1, _DWORD *a2)
{
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = *a2;
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u 5G TAC %u"), *(unsigned __int8 *)(*(_QWORD *)(a1[6] + 8) + 24), *(unsigned int *)(*(_QWORD *)(a1[5] + 8) + 24));
}

id sub_100052164(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString *v7;
  NSString *v8;
  unint64_t v9;
  char v10;
  int v11;
  char v12;
  uint64_t v13;
  id result;
  uint64_t v15;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = a2[1];
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u RAT Info: %s, MCC %u, MNC %u, TAC %u, cell_id %llu"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), sub_100074C88(*a2), a2[2], a2[3], *((unsigned __int16 *)a2 + 8), *((_QWORD *)a2 + 3));
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = *((unsigned __int16 *)a2 + 8);
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u using non-5g TAC %u"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24));
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *((_QWORD *)a2 + 3);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    if (*(_QWORD *)(v4 + 48) == v5)
      goto LABEL_9;
    v6 = 48;
  }
  else
  {
    if (*(_QWORD *)(v4 + 40) == v5)
      goto LABEL_9;
    v6 = 40;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + v6) = v5;
LABEL_9:
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24))
  {
    v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u.%u.%u.%llu"), a2[2], a2[3], *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24), *((_QWORD *)a2 + 3));
    v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u.%u"), a2[2], a2[3]);
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u GCI: %@"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), v7);
    objc_msgSend(*(id *)(a1 + 40), "updateGlobalCellID:gci:cellprefix:", *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), v7, -[NSString length](v8, "length"));
  }
  v9 = *a2;
  if (v9 >= 8)
    v10 = 0;
  else
    v10 = 0x101000101010000uLL >> (8 * v9);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = v10;
  v11 = *a2 - 2;
  v12 = 1;
  v13 = 1;
  switch(v11)
  {
    case 0:
    case 4:
    case 5:
      v13 = 3;
      break;
    case 1:
      break;
    case 2:
      v13 = 2;
      break;
    case 3:
      v13 = 4;
      break;
    default:
      v12 = 0;
      v13 = 0;
      break;
  }
  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("updateCurrentRatInfo %d, Cell Changed %d, nrCellType: %d"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24), v13);
  if ((v12 & 1) != 0 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24))
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Callling updateCurrentRatInfo %d, Cell Changed %d, nrCellType: %d"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24), v13);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
      v15 = 2 * (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) == 1);
    else
      v15 = 1;
    objc_msgSend(*(id *)(a1 + 40), "updateCurrentRatInfo:currentNRCell:", v15, v13);
    return objc_msgSend(*(id *)(a1 + 48), "evaluateWiFiVersusCell");
  }
  return result;
}

id sub_10005248C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u Configured Uplink Throughput: %ukbps"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), *a2);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u Configured Downlink Throughput: %ukbps"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), a2[1]);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    v4 = 2 * (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == 1);
  else
    v4 = 1;
  return objc_msgSend(*(id *)(a1 + 32), "updateConfiguredMaxBW:dlbw:ulbw:", v4, a2[1], *a2);
}

id sub_100052534(uint64_t a1, unsigned int *a2)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u Downlink Allowed Rate: %ukbps"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *a2);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u Downlink Confidence Level: %u"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *((unsigned __int8 *)a2 + 4));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u Downlink Split LTE: %u%"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *((unsigned __int8 *)a2 + 5));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u Downlink Split 5G: %u%"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *((unsigned __int8 *)a2 + 6));
  objc_msgSend(*(id *)(a1 + 32), "updateDownlinkEstimatedBW:bw:conf:lte:nr:", (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) + 1), *a2, *((unsigned __int8 *)a2 + 4), *((unsigned __int8 *)a2 + 5), *((unsigned __int8 *)a2 + 6));
  objc_msgSend(*(id *)(a1 + 40), "forceActiveModeEval:", 1);
  objc_msgSend(*(id *)(a1 + 40), "evaluateWiFiVersusCell");
  return objc_msgSend(*(id *)(a1 + 40), "forceActiveModeEval:", 0);
}

id sub_100052650(uint64_t a1, unsigned int *a2)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u Uplink Allowed Rate: %ukbps"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *a2);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u Uplink Confidence Level: %u"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *((unsigned __int8 *)a2 + 4));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u Uplink Queue Size: %u%"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *((unsigned __int8 *)a2 + 5));
  objc_msgSend(*(id *)(a1 + 32), "updateUplinkEstimatedBW:bw:conf:queue:", (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) + 1), *a2, *((unsigned __int8 *)a2 + 4), *((unsigned __int8 *)a2 + 5));
  objc_msgSend(*(id *)(a1 + 40), "forceActiveModeEval:", 1);
  objc_msgSend(*(id *)(a1 + 40), "evaluateWiFiVersusCell");
  return objc_msgSend(*(id *)(a1 + 40), "forceActiveModeEval:", 0);
}

id sub_100052740(uint64_t a1, unsigned __int8 *a2)
{
  const char *v4;

  objc_msgSend(*(id *)(a1 + 32), "updateDataStallState:stall:", *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) + 1, *a2);
  if (*a2)
    v4 = "true";
  else
    v4 = "false";
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD.%u isCongested: %s"), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), v4);
  return objc_msgSend(*(id *)(a1 + 40), "evaluateWiFiVersusCell");
}

void sub_1000528B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_10005294C(&a9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a14);
  _Unwind_Resume(a1);
}

void sub_1000528E0(id a1, const void *a2)
{
  uint64_t v2;

  v2 = *((unsigned int *)a2 + 1);
  if ((_DWORD)v2)
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD dsd::RegisterIndication::Response failed: %s"), qmi::asString(v2));
  else
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD dsd::RegisterIndication::Response success"));
}

_QWORD *sub_10005294C(_QWORD *a1)
{
  const void *v2;

  if (a1[1])
    qmi::Client::send(*a1, a1);
  v2 = (const void *)a1[4];
  if (v2)
    _Block_release(v2);
  return a1;
}

void sub_100052A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_10005294C((uint64_t *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

id sub_100052AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v3)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD bindQMIClientToSlotType failed: %s"), qmi::asString(v3));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.DSD bindQMIClientToSlotType success"));
  return objc_msgSend(*(id *)(a1 + 32), "sendRegisterIndicationRequest");
}

_QWORD *sub_100052B20(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_100052BD0();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_100052BD0()
{
  sub_10004B44C("basic_string");
}

void sub_100052BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_100052C40(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_100052C2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_100052C40(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_100052D20(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_100052CE0((uint64_t)a2);
  }
}

void sub_100052CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100052CE0(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x26u);
  return a1;
}

void sub_100052D0C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_100052D20(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x26u);
  return a1;
}

void sub_100052D4C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_100052D60(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_100052E40(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_100052E00((uint64_t)a2);
  }
}

void sub_100052DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100052E00(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x5551u);
  return a1;
}

void sub_100052E2C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_100052E40(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x5551u);
  return a1;
}

void sub_100052E6C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_100052E80()
{
  sub_100052E94("vector");
}

void sub_100052E94(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100052EE4(exception, a1);
}

void sub_100052ED0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_100052EE4(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  return result;
}

uint64_t sub_100052F08(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (sub_100052F98((uint64_t)a1, (tlv *)result, v7, a3))
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

BOOL sub_100052F98(uint64_t a1, tlv *a2, int a3, unint64_t a4)
{
  tlv *v5;
  _BYTE v7[8];
  void *__p;
  void *v9;
  tlv *v10;

  v10 = a2;
  sub_100098ECC(&v10, a3, a4, (uint64_t)v7);
  v5 = v10;
  if (v10)
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  return v5 != 0;
}

void sub_100053000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005301C(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (sub_1000530AC((uint64_t)a1, (tlv *)result, v7, a3))
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

BOOL sub_1000530AC(uint64_t a1, tlv *a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  tlv *v7;

  v7 = a2;
  sub_100099320(&v7, a3, a3, a4);
  v5 = v7;
  if (v7)
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  return v5 != 0;
}

uint64_t sub_100053104(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (sub_100053194((uint64_t)a1, result, v7, a3))
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

BOOL sub_100053194(uint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  uint64_t v5;
  _BYTE v7[32];
  uint64_t v8;

  v8 = a2;
  sub_100098734(&v8, a3, a4, (uint64_t)v7);
  v5 = v8;
  if (v8)
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  return v5 != 0;
}

uint64_t sub_1000531EC(qmi::MessageBase *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (sub_10005327C((uint64_t)a1, (tlv *)result, v7, a3))
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

BOOL sub_10005327C(uint64_t a1, tlv *a2, uint64_t a3, _QWORD *a4)
{
  tlv *v5;
  tlv *v7;

  v7 = a2;
  sub_1000987CC(&v7, a3, a3, (unint64_t)a4);
  v5 = v7;
  if (v7)
    (*(void (**)(_QWORD))(*a4 + 16))(*a4);
  return v5 != 0;
}

uint64_t sub_1000532D4(qmi::MessageBase *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (sub_100053364((uint64_t)a1, result, v7, a3))
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

BOOL sub_100053364(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;

  v7 = a2;
  sub_100098900(&v7, a3, a3, (unint64_t)a4);
  v5 = v7;
  if (v7)
    (*(void (**)(_QWORD))(*a4 + 16))(*a4);
  return v5 != 0;
}

uint64_t sub_1000533BC(qmi::MessageBase *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (sub_10005344C((uint64_t)a1, result, v7, a3))
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

BOOL sub_10005344C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;

  v7 = a2;
  sub_100098A20(&v7, a3, a3, (unint64_t)a4);
  v5 = v7;
  if (v7)
    (*(void (**)(_QWORD))(*a4 + 16))(*a4);
  return v5 != 0;
}

uint64_t sub_1000534A4(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (sub_1000196F4((uint64_t)a1, result, v7, a3))
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

BOOL sub_100053534(uint64_t a1, tlv *a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  tlv *v7;

  v7 = a2;
  sub_100098CE4(&v7, a3, a3, a4);
  v5 = v7;
  if (v7)
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  return v5 != 0;
}

char *sub_10005358C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_100053600();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_100053600()
{
  operator new();
}

void sub_100053720()
{
  operator delete();
}

uint64_t sub_100053734()
{
  return sub_100019788();
}

_BYTE **sub_10005373C(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10001976C((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_100053794()
{
  operator new();
}

void *sub_1000537DC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_10004B4F0();
  return operator new(8 * a2);
}

void sub_100053810(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_10005386C(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_100053858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10005386C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10005394C(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10005390C((uint64_t)a2);
  }
}

void sub_1000538F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005390C(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x38u);
  return a1;
}

void sub_100053938(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10005394C(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x38u);
  return a1;
}

void sub_100053978(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_10005398C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_100053A00();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_100053A00()
{
  operator new();
}

void sub_100053B20()
{
  operator delete();
}

uint64_t sub_100053B34()
{
  return sub_10004A61C();
}

_DWORD **sub_100053B3C(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_100098008((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void sub_100053B94()
{
  operator new();
}

void sub_100053BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_100053C40(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_100053C2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_100053C40(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_100053D20(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_100053CE0((uint64_t)a2);
  }
}

void sub_100053CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100053CE0(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x27u);
  return a1;
}

void sub_100053D0C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_100053D20(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x27u);
  return a1;
}

void sub_100053D4C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_100053F0C(_Unwind_Exception *exception_object, int a2)
{
  id v2;

  if (a2 == 1)
  {
    v2 = objc_begin_catch(exception_object);
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("DataStoreManager: persistentContainer not initiated."));

    objc_end_catch();
    JUMPOUT(0x100053E18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100053F6C(id a1, NSPersistentStoreDescription *a2, NSError *a3)
{
  NSPersistentStoreDescription *v4;
  void *v5;
  void *v6;
  id v7;

  if (a3)
  {
    v4 = a2;
    v7 = (id)objc_claimAutoreleasedReturnValue(-[NSError description](a3, "description"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSPersistentStoreDescription URL](v4, "URL"));

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "absoluteString"));
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("DataStoreManager: persistentContainer not created %@ %@"), v7, v6);

  }
}

int64_t sub_1000556A0(id a1, FreqRangeInfo *a2, FreqRangeInfo *a3)
{
  FreqRangeInfo *v4;
  unint64_t v5;
  unint64_t v6;

  v4 = a3;
  v5 = -[FreqRangeInfo FreqStart](a2, "FreqStart");
  v6 = -[FreqRangeInfo FreqStart](v4, "FreqStart");

  if (v5 > v6)
    return 1;
  else
    return -1;
}

int64_t sub_1000556F4(id a1, FreqRangeInfo *a2, FreqRangeInfo *a3)
{
  FreqRangeInfo *v4;
  FreqRangeInfo *v5;
  unsigned int v6;
  id v7;
  int64_t v8;
  unsigned int v9;

  v4 = a3;
  v5 = a2;
  v6 = -[FreqRangeInfo Priority](v5, "Priority");
  if (v6 == -[FreqRangeInfo Priority](v4, "Priority"))
  {
    v7 = -[FreqRangeInfo FreqStart](v5, "FreqStart");

    if (v7 > (id)-[FreqRangeInfo FreqStart](v4, "FreqStart"))
      v8 = 1;
    else
      v8 = -1;
  }
  else
  {
    v9 = -[FreqRangeInfo Priority](v5, "Priority");

    if (v9 < -[FreqRangeInfo Priority](v4, "Priority"))
      v8 = -1;
    else
      v8 = 1;
  }

  return v8;
}

id sub_100055B20(uint64_t a1)
{
  id result;
  _BYTE v3[1024];

  result = objc_msgSend(*(id *)(a1 + 32), "sacCreateRawFreqList:bufferSize:buffer:", *(_QWORD *)(a1 + 40), 64, v3);
  if ((_DWORD)result)
    return (id)TelephonyBasebandRemoveFreqListExt(*(_QWORD *)(a1 + 48), result, v3, *(unsigned int *)(a1 + 56));
  return result;
}

id sub_100055F58(uint64_t a1)
{
  id result;
  _BYTE v3[1024];

  result = objc_msgSend(*(id *)(a1 + 32), "sacCreateRawFreqList:bufferSize:buffer:", *(_QWORD *)(a1 + 40), 64, v3);
  if ((_DWORD)result)
    return (id)TelephonyBasebandRemoveFreqListExt(*(_QWORD *)(a1 + 48), result, v3, *(unsigned int *)(a1 + 56));
  return result;
}

id sub_100055FD4(uint64_t a1)
{
  id result;
  _BYTE v3[1024];

  result = objc_msgSend(*(id *)(a1 + 32), "sacCreateRawFreqList:bufferSize:buffer:", *(_QWORD *)(a1 + 40), 64, v3);
  if ((_DWORD)result)
    return (id)TelephonyBasebandAddFreqListExt(*(_QWORD *)(a1 + 48), result, v3, *(unsigned int *)(a1 + 56));
  return result;
}

void sub_100058DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

id sub_100058E08(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "clientStarted");
}

id sub_100058E10(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "clientStopped");
}

void sub_100058F78(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

id sub_100058FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "IBINetRegistrationInfoIndCbHandle:size:", a2, a3);
}

id sub_100058FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "IBINetRadioSignalIndCbHandle:size:", a2, a3);
}

id sub_100058FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "IBICallPsBandwidthEstimationIndHandle:size:", a2, a3);
}

void sub_1000590E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  AriSdk::ARI_IBICallPsStartBandwidthEstimationReq_SDK::~ARI_IBICallPsStartBandwidthEstimationReq_SDK((AriSdk::ARI_IBICallPsStartBandwidthEstimationReq_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100059100(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v3;
  const __CFString *v4;
  _BYTE v5[72];

  AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK((AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK *)v5, a2, a3);
  if ((ice::isARIResponseValid((ice *)v5, (const AriSdk::MsgBase *)0xD228000, v3) & 1) != 0)
  {
    if (AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK::unpack((AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK *)v5))
      v4 = CFSTR("ICE ERROR: Unpack IBICallPsStartBandwidthEstimationRspCb");
    else
      v4 = CFSTR("ICE Rsp OK: IBICallPsStartBandwidthEstimationRspCb");
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v4);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("ICE ERROR: Invalid IBICallPsStartBandwidthEstimationRspCb"));
  }
  AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK::~ARI_IBICallPsStartBandwidthEstimationRspCb_SDK((AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK *)v5);
}

void sub_100059194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK::~ARI_IBICallPsStartBandwidthEstimationRspCb_SDK((AriSdk::ARI_IBICallPsStartBandwidthEstimationRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100059274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  AriSdk::ARI_IBICallPsStopBandwidthEstimationReq_SDK::~ARI_IBICallPsStopBandwidthEstimationReq_SDK((AriSdk::ARI_IBICallPsStopBandwidthEstimationReq_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100059290(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v3;
  const __CFString *v4;
  _BYTE v5[72];

  AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK((AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK *)v5, a2, a3);
  if ((ice::isARIResponseValid((ice *)v5, (const AriSdk::MsgBase *)0xD230000, v3) & 1) != 0)
  {
    if (AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK::unpack((AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK *)v5))
      v4 = CFSTR("ICE ERROR: Unpack IBICallPsStopBandwidthEstimationRspCb");
    else
      v4 = CFSTR("ICE Rsp OK: IBICallPsStopBandwidthEstimationRspCb");
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v4);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("ICE ERROR: Invalid IBICallPsStopBandwidthEstimationRspCb"));
  }
  AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK::~ARI_IBICallPsStopBandwidthEstimationRspCb_SDK((AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK *)v5);
}

void sub_100059320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK::~ARI_IBICallPsStopBandwidthEstimationRspCb_SDK((AriSdk::ARI_IBICallPsStopBandwidthEstimationRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_1000596C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  AriSdk::ARI_IBINetRadioSignalIndCb_SDK::~ARI_IBINetRadioSignalIndCb_SDK((AriSdk::ARI_IBINetRadioSignalIndCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100059DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,char a28)
{
  void *v28;

  AriSdk::ARI_IBICallPsBandwidthEstimationInd_SDK::~ARI_IBICallPsBandwidthEstimationInd_SDK((AriSdk::ARI_IBICallPsBandwidthEstimationInd_SDK *)&a28);
  _Unwind_Resume(a1);
}

_QWORD *sub_100059F1C@<X0>(id *a1@<X1>, OS_dispatch_object *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x28uLL);
  result = sub_100059F7C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100059F68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100059F7C(_QWORD *a1, id *a2, OS_dispatch_object *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100201920;
  sub_100059FDC((uint64_t)&v5, (_DWORD)a1 + 24, a2, a3);
  return a1;
}

void sub_100059FC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100059FDC(uint64_t a1, int a2, id *a3, OS_dispatch_object *a4)
{
  queue v6;
  id v7;
  id v8;

  v8 = *a3;
  v6.fObj.fObj = a4;
  sub_1000CA88C(a2, (int)&v8, v6);
  v7 = v8;
  v8 = 0;

}

void sub_10005A034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_10005A228(uint64_t a1)
{
  double v2;
  double v3;
  const __CFString *v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  _QWORD v12[6];

  -[NSDate timeIntervalSince1970](+[NSDate date](NSDate, "date"), "timeIntervalSince1970");
  v3 = v2;
  if (v2 - *(double *)&qword_100271110 < 330.0)
  {
    v4 = CFSTR("CellularThroughput: Cannot start download test since timeDifferenceFromLastTestScheduled < 5.5 min");
LABEL_6:
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v4, v9, *(_QWORD *)&v10, v11);
    goto LABEL_7;
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellularThroughput: RAT: %d"), *(unsigned int *)(a1 + 48));
  if (*(_DWORD *)(a1 + 48) != 1)
    goto LABEL_7;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellularThroughput lastScheduledTestTime before starting test: %0.2f"), qword_100271110);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellularThroughput timeDifferenceFromLastTestScheduled on RAT %d: %0.2f"), *(unsigned int *)(a1 + 48), v3 - *(double *)&qword_100271110);
  v5 = *(double **)(a1 + 32);
  if (v3 - *(double *)&qword_100271110 < v5[1])
  {
    v10 = v3 - *(double *)&qword_100271110;
    v11 = *((_QWORD *)v5 + 1);
    v9 = *(unsigned int *)(a1 + 48);
    v4 = CFSTR("CellularThroughput: Cannot start download test since timeDifferenceFromLastTestScheduled on RAT %d is %0.2f < %0.2f");
    goto LABEL_6;
  }
  if (objc_msgSend(v5, "ifNoActiveVoiceCall", v3 - *(double *)&qword_100271110))
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = objc_alloc_init(WRM_SpeedTestConfigIOS);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
    v12[0] = _NSConcreteStackBlock;
    v12[2] = sub_10005A3E8;
    v12[3] = &unk_100202BA0;
    v12[1] = 3221225472;
    *(double *)&v12[5] = v3;
    v12[4] = v7;
    objc_msgSend(v8, "startDownloadTest:", v12);

    return;
  }
LABEL_7:
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    (*(void (**)(uint64_t, const __CFString *))(v6 + 16))(v6, CFSTR("NO"));
}

uint64_t sub_10005A3E8(uint64_t a1, void *a2)
{
  uint64_t result;
  uint64_t (*v4)(void);

  if (objc_msgSend(a2, "isEqualToString:", CFSTR("YES")))
  {
    qword_100271110 = *(_QWORD *)(a1 + 40);
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellularThroughput lastScheduledTestTime for Cellular RAT 1 after starting test: %0.2f"), qword_100271110);
    result = *(_QWORD *)(a1 + 32);
    if (!result)
      return result;
    v4 = *(uint64_t (**)(void))(result + 16);
  }
  else
  {
    result = *(_QWORD *)(a1 + 32);
    if (!result)
      return result;
    v4 = *(uint64_t (**)(void))(result + 16);
  }
  return v4();
}

id sub_10005A50C(id result)
{
  objc_super v1;

  if (!qword_100271120)
  {
    v1.receiver = (id)*((_QWORD *)result + 4);
    v1.super_class = (Class)&OBJC_METACLASS___WRM_FT_HandoverManager;
    result = objc_msgSend(objc_msgSendSuper2(&v1, "allocWithZone:", 0), "init");
    qword_100271120 = (uint64_t)result;
  }
  return result;
}

void sub_10005A5CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10005A634(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10005A6B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10005AD98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10005B160(id result)
{
  id *v1;
  uint64_t v2;
  const __CFString *v3;
  void *v4;
  id v5;
  id v6;
  char v7;
  void *v8;
  id v9;
  uint64_t v10;

  v1 = (id *)result;
  v2 = *((_QWORD *)result + 6);
  if (v2 > 11)
  {
    switch(v2)
    {
      case 12:
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 29, CFSTR("IDS LinkEval Mgr: Receivd WRMIdsTool controller event controller %p"), *((_QWORD *)result + 4));
        if (v1[4])
        {
          objc_msgSend(v1[5], "addiRatClient:");
          v3 = CFSTR("updateControllerSession:Added Client (WRMIdsTool) to IDS LinkEval Manager ");
          goto LABEL_23;
        }
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 29, CFSTR("updateControllerSession:remove Client (WRMIdsTool) from IDS LinkEval Manager "));
        v9 = v1[5];
        v10 = 5;
LABEL_34:
        objc_msgSend(v9, "deleteiRATClient:", v10);
        return objc_msgSend(v1[5], "handleControllerAvailability:", v1[6]);
      case 22:
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 29, CFSTR("Recevied Subscribe Message from SIRI: %p"), *((_QWORD *)result + 4));
        if (v1[4])
        {
          objc_msgSend(v1[5], "addiRatClient:");
          v3 = CFSTR("updateControllerSession:Added Client (WRMSiri) to VoIP link evaluator ");
          goto LABEL_23;
        }
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 29, CFSTR("updateControllerSession:remove Client (WRMSiri) from VoIP link evaluator"));
        v9 = v1[5];
        v10 = 14;
        goto LABEL_34;
      case 14:
        if (*((_QWORD *)result + 4))
        {
          objc_msgSend(*((id *)result + 5), "addiRatClient:");
          objc_msgSend(+[WRM_MetricsService getSingleton](WRM_MetricsService, "getSingleton"), "initAWDService");
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 29, CFSTR("FT Handover Manager:Added iRAT Client (WRMFaceTimeCalling) to FT Handover Manager "));
          objc_msgSend(v1[5], "toggleFastLQMReport:", 1);
          *((_BYTE *)v1[5] + 178) = 0;
        }
        else
        {
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 29, CFSTR("FT Handover Manager:remove iRAT Client (WRMFaceTimeCalling) from FT Handover Manager "));
          objc_msgSend(v1[5], "deleteiRATClient:", 7);
          byte_10027112C = 0;
          if (objc_msgSend(*((id *)v1[5] + 7), "mobilityStateAwarenessEnabled"))
            objc_msgSend(*((id *)v1[5] + 8), "stopAllAlarms");
          objc_msgSend(*((id *)v1[5] + 7), "revertFaceTimeThToAzul");
          objc_msgSend(v1[5], "toggleFastLQMReport:", 0);
        }
        objc_msgSend(objc_msgSend(v1[5], "getAVConferenceController"), "resetRTPMetrics");
        objc_msgSend(v1[5], "resetActiveCallEvaluationMetrics");
        return objc_msgSend(v1[5], "handleControllerAvailability:", v1[6]);
    }
  }
  else
  {
    switch(v2)
    {
      case 1:
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 29, CFSTR("FT Handover Manager: Receivd WiFi controller event controller %p"), *((_QWORD *)result + 4));
        v4 = (void *)*((_QWORD *)v1[5] + 4);
        if (v4)
        {

          *((_QWORD *)v1[5] + 4) = 0;
        }
        v5 = v1[4];
        if (v5)
        {
          v6 = v5;
          v7 = 0;
          *((_QWORD *)v1[5] + 4) = v6;
        }
        else
        {
          v7 = 1;
        }
        byte_100271128 = v7;
        return objc_msgSend(v1[5], "handleControllerAvailability:", v1[6]);
      case 4:
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("VoIP LinkEval: Receivd BT controller event controller %p"), *((_QWORD *)result + 4));
        v8 = (void *)*((_QWORD *)v1[5] + 5);
        if (v8)

        *((_QWORD *)v1[5] + 5) = v1[4];
        return objc_msgSend(v1[5], "handleControllerAvailability:", v1[6]);
      case 11:
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 29, CFSTR("IDS LinkEval Mgr: Receivd WRMIdsClient controller event controller %p"), *((_QWORD *)result + 4));
        if (v1[4])
        {
          objc_msgSend(v1[5], "addiRatClient:");
          v3 = CFSTR("updateControllerSession:Added Client (WRMIdsClient) to IDS LinkEval Manager ");
LABEL_23:
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 29, v3);
          return objc_msgSend(v1[5], "handleControllerAvailability:", v1[6]);
        }
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 29, CFSTR("updateControllerSession:remove Client (WRMIdsClient) from IDS LinkEval Manager "));
        v9 = v1[5];
        v10 = 4;
        goto LABEL_34;
    }
  }
  return result;
}

id sub_10005B4C4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleSessionNotification:", *(_QWORD *)(a1 + 40));
}

void sub_10005D1D8(uint64_t a1)
{
  xpc_object_t v2;
  id v3;
  unsigned int v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  int64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "wifiService");
  v4 = objc_msgSend(v3, "isAssociated");
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "isBTMetricsValid"))
  {
    xpc_dictionary_set_uint64(v2, "kWRMProximityBtRssi", (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "getMovingAvgBTRssi"));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "getBtTxPer");
    xpc_dictionary_set_uint64(v2, "kWRMProximityBtRetransmissionRateRx", (unint64_t)(v5 * 100.0));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "getBtRxPer");
    xpc_dictionary_set_uint64(v2, "kWRMProximityBtRetransmissionRateRx", (unint64_t)(v6 * 100.0));
    v7 = 100 * (_QWORD)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "getBtActivePhy");
  }
  else
  {
    xpc_dictionary_set_uint64(v2, "kWRMProximityBtRssi", 0);
    xpc_dictionary_set_uint64(v2, "kWRMProximityBtRetransmissionRateRx", 0);
    xpc_dictionary_set_uint64(v2, "kWRMProximityBtRetransmissionRateRx", 0);
    v7 = 0;
  }
  xpc_dictionary_set_uint64(v2, "kWRMProximityBtTech", v7);
  if (v4)
  {
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiRssi", (int64_t)objc_msgSend(v3, "getRSSI"));
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiSnr", (int64_t)objc_msgSend(v3, "getSNR"));
    objc_msgSend(v3, "getBeaconPer");
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiBeaconPer", (uint64_t)(v8 * 100.0));
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiNwType", objc_msgSend(v3, "getPointOfInterest"));
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiLSMBeRecommendation", (int)objc_msgSend(v3, "getBEDecision"));
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiExpectedThroughputVIBE", (int)objc_msgSend(v3, "getTxThroughputVI"));
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiPacketLifetimeVIBE", (int)objc_msgSend(v3, "getLifeTimeVI"));
    v9 = (int)objc_msgSend(v3, "getTxLossRateVI");
  }
  else
  {
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiRssi", -600);
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiSnr", -600);
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiBeaconPer", 0);
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiNwType", 3);
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiLSMBeRecommendation", -1);
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiExpectedThroughputVIBE", 0);
    xpc_dictionary_set_int64(v2, "kWRMProximityWifiPacketLifetimeVIBE", 0);
    v9 = 0;
  }
  xpc_dictionary_set_int64(v2, "kWRMProximityWifiPacketLossRateVIBE", v9);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v10 = *(void **)(*(_QWORD *)(a1 + 32) + 104);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v16;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v16 != v13)
          objc_enumerationMutation(v10);
        objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)v14), "sendMessage:withArgs:", 1308, v2);
        v14 = (char *)v14 + 1;
      }
      while (v12 != v14);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v12);
  }
  xpc_release(v2);
}

id sub_10005F82C(uint64_t a1)
{
  int v1;
  void *v2;
  id result;

  v1 = *(unsigned __int8 *)(a1 + 40);
  v2 = *(void **)(a1 + 32);
  if (!v1)
  {
    result = objc_msgSend(v2, "setLQMReportInterval:", 0);
    goto LABEL_5;
  }
  result = objc_msgSend(v2, "setLQMReportInterval:", 1);
  if ((result & 1) != 0)
LABEL_5:
    byte_10027112B = v1 != 0;
  return result;
}

void sub_10005FDA8(uint64_t a1)
{
  unsigned int v2;
  id v3;
  uint64_t v4;

  if (objc_loadWeak((id *)(a1 + 48)))
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 29, CFSTR("handleCallNotification callType=%d,disconnectedReason=%d"), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 88) + 156), *(unsigned int *)(a1 + 56));
    objc_msgSend(*(id *)(a1 + 40), "feedAWDMetricsWiFiStats");
    objc_msgSend(*(id *)(a1 + 40), "feedAWDMetricsCellularStatsWithUUID:", *(_QWORD *)(a1 + 32));

    v2 = *(_DWORD *)(a1 + 56);
    if (v2 <= 0x17 && ((1 << v2) & 0x8A6000) != 0)
    {
      v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 80), "getAWDService");
      v4 = 1;
    }
    else
    {
      v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 80), "getAWDService");
      v4 = 0;
    }
    objc_msgSend(v3, "submitMetricsTelephonyOrFtCallEnd:", v4);
  }
  else
  {

  }
}

uint64_t sub_10005FFF8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

id sub_1000604CC(uint64_t a1)
{
  id result;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 28, CFSTR("Submit Music Streaming AWD Metrics"));
  objc_msgSend(*(id *)(a1 + 32), "feedAWDRadioStats");
  result = objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 232), "getAWDService"), "submitMericStreaming");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 240) + 381) = 0;
  return result;
}

void sub_100060A70(uint64_t a1)
{
  xpc_object_t v2;
  id v3;
  id v4;
  double v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "getWiFiService");
  if (objc_msgSend(v3, "isWiFiPrimaryInterface"))
  {
    v4 = objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "getSymptomsService");
    xpc_dictionary_set_double(v2, "wghtRSSI", (double)(int)objc_msgSend(v3, "getWghtAverageRSSI"));
    xpc_dictionary_set_double(v2, "wghtSNR", (double)(int)objc_msgSend(v3, "getWghtAverageSNR"));
    xpc_dictionary_set_double(v2, "wghtPhyRate", (double)objc_msgSend(v3, "getWghtAverageRXPhyRate"));
    objc_msgSend(v4, "getTCPMinRTT");
    xpc_dictionary_set_double(v2, "tcpRTT", v5 * 1000.0);
    xpc_dictionary_set_uint64(v2, "chType", objc_msgSend(v3, "getChannelType"));
    xpc_dictionary_set_BOOL(v2, "isCaptive", (BOOL)objc_msgSend(v3, "isWiFiNetworkCaptive"));
    xpc_dictionary_set_uint64(v2, "CCA", (uint64_t)objc_msgSend(v3, "getCCA"));
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("%s: WiFi not primary NAN"), "-[WRM_BWEvalManager(privateFunctions) handleWiFiMetricsRequest:]_block_invoke");
    xpc_dictionary_set_double(v2, "wghtRSSI", NAN);
    xpc_dictionary_set_double(v2, "wghtSNR", NAN);
    xpc_dictionary_set_double(v2, "wghtPhyRate", NAN);
    xpc_dictionary_set_double(v2, "tcpRTT", NAN);
    xpc_dictionary_set_uint64(v2, "chType", v6);
    xpc_dictionary_set_BOOL(v2, "isCaptive", 1);
    xpc_dictionary_set_double(v2, "CCA", NAN);
  }
  v7 = xpc_copy_description(v2);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("%s: XPC args - %p %s"), "-[WRM_BWEvalManager(privateFunctions) handleWiFiMetricsRequest:]_block_invoke", v2, v7);
  free(v7);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v8 = *(void **)(*(_QWORD *)(a1 + 32) + 264);
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("Sending back XPC object for client: %@"), objc_msgSend(v13, "description"));
        objc_msgSend(v13, "sendMessage:withArgs:", 2100, v2);
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v10);
  }
  xpc_release(v2);
}

void sub_100060E70(uint64_t a1)
{
  xpc_object_t v2;
  id v3;
  uint64_t v4;
  char *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = +[WRM_SCService WRM_SCServiceControllerSingleton](WRM_SCService, "WRM_SCServiceControllerSingleton");
  if (MGGetBoolAnswer(CFSTR("cellular-data")))
  {
    v4 = (int)objc_msgSend(v3, "getCellularDataLQM");
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("%s: Not a cellular device. Returning 0"), "-[WRM_BWEvalManager(privateFunctions) handleCellularDataMetricsRequest:]_block_invoke");
    v4 = 0;
  }
  xpc_dictionary_set_uint64(v2, "cellularDataLQM", v4);
  v5 = xpc_copy_description(v2);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("%s: XPC args - %p %s"), "-[WRM_BWEvalManager(privateFunctions) handleCellularDataMetricsRequest:]_block_invoke", v2, v5);
  free(v5);
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v6 = *(void **)(*(_QWORD *)(a1 + 32) + 264);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("Sending back XPC object for client: %@"), objc_msgSend(v11, "description"));
        objc_msgSend(v11, "sendMessage:withArgs:", 2001, v2);
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v8);
  }
  xpc_release(v2);
}

void sub_100061120(uint64_t a1)
{
  xpc_object_t v2;
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  char *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = +[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton](WRM_EnhancedCTService, "wrm_EnhancedCTServiceSingleton");
  objc_msgSend(v3, "setActiveSlot:", objc_msgSend(v3, "getUserDataPreferredSlot"));
  if (MGGetBoolAnswer(CFSTR("cellular-data")))
  {
    objc_msgSend(v3, "getNrRSRP");
    xpc_dictionary_set_double(v2, "nrRSRP", v4);
    objc_msgSend(v3, "getNrRSRQ");
    xpc_dictionary_set_double(v2, "nrRSRQ", v5);
    objc_msgSend(v3, "getNrSNR");
    v7 = v6;
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("%s: Not a cellular device. Returning NAN"), "-[WRM_BWEvalManager(privateFunctions) handleNrPhyMetricsRequest:]_block_invoke");
    v7 = NAN;
    xpc_dictionary_set_double(v2, "nrRSRP", NAN);
    xpc_dictionary_set_double(v2, "nrRSRQ", NAN);
  }
  xpc_dictionary_set_double(v2, "nrSNR", v7);
  v8 = xpc_copy_description(v2);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("%s: XPC args - %p %s"), "-[WRM_BWEvalManager(privateFunctions) handleNrPhyMetricsRequest:]_block_invoke", v2, v8);
  free(v8);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v9 = *(void **)(*(_QWORD *)(a1 + 32) + 264);
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v16 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("Sending back XPC object for client: %@"), objc_msgSend(v14, "description"));
        objc_msgSend(v14, "sendMessage:withArgs:", 2000, v2);
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v11);
  }
  xpc_release(v2);
}

id sub_100061700(uint64_t a1)
{
  id result;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 28, CFSTR("Submit Music Streaming AWD Metrics"));
  result = objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 232), "getAWDService"), "submitMericStreaming");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 240) + 381) = 0;
  byte_100270F64 = 0;
  return result;
}

void sub_100061930(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100061998(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100061A40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100061B74(id result)
{
  id v1;
  objc_super v2;

  if (!qword_100271140)
  {
    v1 = result;
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 28, CFSTR("Allocating WRM_BWEvalManagerSingleton"));
    v2.receiver = (id)*((_QWORD *)v1 + 4);
    v2.super_class = (Class)&OBJC_METACLASS___WRM_BWEvalManager;
    result = objc_msgSend(objc_msgSendSuper2(&v2, "allocWithZone:", 0), "init");
    qword_100271140 = (uint64_t)result;
  }
  return result;
}

_QWORD *sub_100061F04(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  const __CFString *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v1 = result;
  v2 = result[6];
  if (v2 <= 19)
  {
    if (v2 == 1)
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 28, CFSTR("IMG Video Mgr: Receivd WiFi controller event controller %p"), result[4]);
      v4 = *(void **)(v1[5] + 24);
      if (v4)

      v5 = (void *)v1[4];
      if (v5)
        *(_QWORD *)(v1[5] + 24) = v5;
      else
        *(_QWORD *)(v1[5] + 24) = 0;
      return objc_msgSend((id)v1[5], "handleControllerAvailability:", v1[6]);
    }
    if (v2 == 13)
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 28, CFSTR("IMG Video Mgr: Receivd WRMIMGVideo controller event controller %p"), result[4]);
      *(_QWORD *)(v1[5] + 112) = 0;
      *(_BYTE *)(v1[5] + 72) = 0;
      *(_QWORD *)(v1[5] + 120) = 36000;
      if (v1[4])
      {
        objc_msgSend((id)v1[5], "addiRatClient:");
        v3 = CFSTR("updateControllerSession:Added Client (WRMIMGVideo) to IMG BW  Manager ");
        goto LABEL_15;
      }
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("updateControllerSession:remove Client (WRMIMGVideo) from IMG Video Manager "));
      v6 = (void *)v1[5];
      v7 = 6;
LABEL_25:
      objc_msgSend(v6, "deleteiRATClient:", v7);
      return objc_msgSend((id)v1[5], "handleControllerAvailability:", v1[6]);
    }
  }
  else
  {
    switch(v2)
    {
      case 20:
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 28, CFSTR("IMG Video Mgr: Receivd WRMIMGVideoTest controller event controller %p"), result[4]);
        if (v1[4])
        {
          objc_msgSend((id)v1[5], "addiRatClient:");
          v3 = CFSTR("updateControllerSession:Added Client (WRMIMGVideoTest) to IMG BW  Manager ");
          goto LABEL_15;
        }
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("updateControllerSession:remove Client (WRMIMGVideoTest) from IMG Video Manager "));
        v6 = (void *)v1[5];
        v7 = 12;
        goto LABEL_25;
      case 34:
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 28, CFSTR("Received WRMCoreMediaStreaming controller event controller %p"), result[4]);
        if (v1[4])
        {
          objc_msgSend((id)v1[5], "addiRatClient:");
          v3 = CFSTR("updateControllerSession:Added Client (WRMCoreMediaStreaming) to BW Eval Manager Controller");
          goto LABEL_15;
        }
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("updateControllerSession: Remove Client (WRMCoreMediaStreaming)"));
        v6 = (void *)v1[5];
        v7 = 22;
        goto LABEL_25;
      case 33:
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 28, CFSTR("Received Baseband Metrics controller event controller %p"), result[4]);
        if (v1[4])
        {
          objc_msgSend((id)v1[5], "addiRatClient:");
          v3 = CFSTR("updateControllerSession:Added Client (WRMNPT) to BB Eval Manager Controller");
LABEL_15:
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 28, v3);
          return objc_msgSend((id)v1[5], "handleControllerAvailability:", v1[6]);
        }
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("updateControllerSession: Remove Client (WRMNPT)"));
        v6 = (void *)v1[5];
        v7 = 21;
        goto LABEL_25;
    }
  }
  return result;
}

void sub_100062288(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100062414()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = sub_1000634B8;
  v7 = sub_1000634C8;
  v0 = qword_100271148;
  v8 = qword_100271148;
  if (!qword_100271148)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_1000634D4;
    v2[3] = &unk_100201B40;
    v2[4] = &v3;
    sub_1000634D4((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000624C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000634B8(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1000634C8(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

Class sub_1000634D4(uint64_t a1)
{
  Class result;

  sub_100063528();
  result = objc_getClass("MLModel");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_10012E858();
  qword_100271148 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void sub_100063528()
{
  void *v0;
  __int128 v1;
  uint64_t v2;

  v0 = 0;
  if (!qword_100271150)
  {
    v1 = off_100202D80;
    v2 = 0;
    qword_100271150 = _sl_dlopen(&v1, &v0);
  }
  if (!qword_100271150)
    sub_10012E8BC(&v0);
  if (v0)
    free(v0);
}

Class sub_1000635CC(uint64_t a1)
{
  Class result;

  sub_100063528();
  result = objc_getClass("MLDictionaryFeatureProvider");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_10012E920();
  qword_100271158 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

id sub_100063710(uint64_t a1)
{
  qword_100271160 = (uint64_t)objc_alloc_init(*(Class *)(a1 + 32));
  return objc_msgSend((id)qword_100271160, "resetIDSMetrics");
}

id sub_1000656E0(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("%s:handleBTLQMEval called"), "-[WRM_IDSLinkEvalManager(privateFunctions) handleBTLQMEval:]_block_invoke");
  objc_msgSend(*(id *)(a1 + 32), "updateBTLQMScore");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 68) = 1;
  return objc_msgSend(*(id *)(a1 + 32), "postBluetoothLQMScore:", 1);
}

id sub_100065950(uint64_t a1)
{
  xpc_object_t value;
  uint64_t uint64;
  const char *v4;
  id v5;
  id result;
  BOOL v7;

  value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 32), "kMessageArgs");
  uint64 = xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 32), "kClientType");
  if ((uint64 - 1) >= 0x15)
  {
    v4 = "UNKNOWN_WRM_CLIENT_TYPE!!!";
    if ((_DWORD)uint64 == 22)
      v4 = "ClientCoreMediaStreaming";
  }
  else
  {
    v4 = off_100202FB0[(int)uint64 - 1];
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("%s Message received from client %d(%s) "), "-[WRM_IDSLinkEvalManager(privateFunctions) handleTerminusLinkPrefSubscribe:]_block_invoke", uint64, v4);
  v5 = objc_msgSend(*(id *)(a1 + 40), "getiRATProximityClientFromList:", uint64);
  result = xpc_dictionary_get_value(value, "kWRMSubscriptionType");
  if (result)
  {
    result = (id)xpc_dictionary_get_uint64(value, "kWRMSubscriptionType");
    v7 = result != 0;
  }
  else
  {
    v7 = 0;
  }
  if ((uint64 - 19) >= 0xFFFFFFFA && !v7)
  {
    objc_msgSend(v5, "setRxClientType:", uint64);
    if (xpc_dictionary_get_value(value, "kWRMProximityGetProximityLinkRecommendation"))
      objc_msgSend(objc_msgSend(v5, "mTerminusContext"), "setMForceUpdateNeeded:", xpc_dictionary_get_BOOL(value, "kWRMProximityGetProximityLinkRecommendation"));
    if (xpc_dictionary_get_value(value, "kWRMProximityLinkRecommendationSubscriptionValid"))
      objc_msgSend(objc_msgSend(v5, "mTerminusContext"), "setMClientSubscriptionValid:", xpc_dictionary_get_BOOL(value, "kWRMProximityLinkRecommendationSubscriptionValid"));
    if (xpc_dictionary_get_value(value, "kWRMProximityLinkRecommendationIsRetry"))
      objc_msgSend(objc_msgSend(v5, "mTerminusContext"), "setMIsRetry:", xpc_dictionary_get_BOOL(value, "kWRMProximityLinkRecommendationIsRetry"));
    objc_msgSend(objc_msgSend(v5, "mTerminusContext"), "setMTerminusIsRegistered:", 1);
    objc_msgSend(v5, "setRxClientType:", uint64);
    if ((_DWORD)uint64 == 14)
      objc_msgSend(objc_msgSend(v5, "mTerminusContext"), "setMAppLinkPreference:", 2);
    return objc_msgSend(*(id *)(a1 + 40), "evaluateBTWiFiLinkForTerminus");
  }
  return result;
}

id sub_100065E84(uint64_t a1)
{
  xpc_object_t value;
  uint64_t v3;
  _BOOL4 v4;
  const char *v5;
  const char *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 32), "kMessageArgs");
  LODWORD(v3) = xpc_dictionary_get_uint64(value, "kWRMProximityLinkRecommendationType");
  v4 = xpc_dictionary_get_BOOL(value, "kWRMProximityAppLinkPreferenceActive");
  if (v3 >= 3)
  {
    v5 = "INVALID_AppLinkPreferenceType!!!";
    if ((_DWORD)v3 == 3)
      v5 = "Cellular";
  }
  else
  {
    v5 = off_100202EE0[(int)v3];
  }
  v6 = "No";
  if (v4)
    v6 = "Yes";
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("%s: Terminus appLinkPrefType %s, Preference is active %s"), "-[WRM_IDSLinkEvalManager(privateFunctions) handleTerminusSubscribeStatusUpdate:]_block_invoke", v5, v6);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("Terminus Link Eval Manager: handleTerminusSubscribeStatusUpdate."));
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v7 = objc_msgSend(*(id *)(a1 + 40), "miRATProximityClientContexts");
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v15;
    if (v4)
      v3 = v3;
    else
      v3 = 0;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        if (v12 && objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i), "mTerminusContext"))
          objc_msgSend(objc_msgSend(v12, "mTerminusContext"), "setMAppLinkPreference:", v3);
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v9);
  }
  return objc_msgSend(*(id *)(a1 + 40), "evaluateBTWiFiLinkForTerminus");
}

id sub_100066F90(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "miRATProximityClientContexts"), "addObject:", *(_QWORD *)(a1 + 40));
}

id sub_100067088(uint64_t a1)
{
  id v2;
  int v3;
  const char *v4;

  v2 = objc_msgSend(*(id *)(a1 + 32), "getiRATProximityClientFromList:", *(unsigned int *)(a1 + 40));
  if (v2)
    return objc_msgSend(*(id *)(a1 + 32), "removeProximityiRatClient:", v2);
  v3 = *(_DWORD *)(a1 + 40);
  if ((v3 - 1) >= 0x15)
  {
    if (v3 == 22)
      v4 = "ClientCoreMediaStreaming";
    else
      v4 = "UNKNOWN_WRM_CLIENT_TYPE!!!";
  }
  else
  {
    v4 = off_100202FB0[v3 - 1];
  }
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("%s Proximity iRAT client context not found for %s!!"), "-[WRM_IDSLinkEvalManager(privateFunctions) deleteProximityiRATClient:]_block_invoke", v4);
}

void sub_10006717C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000671E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100067264(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100067478(id result)
{
  objc_super v1;

  if (!qword_100271178)
  {
    v1.receiver = (id)*((_QWORD *)result + 4);
    v1.super_class = (Class)&OBJC_METACLASS___WRM_IDSLinkEvalManager;
    result = objc_msgSend(objc_msgSendSuper2(&v1, "allocWithZone:", 0), "init");
    qword_100271178 = (uint64_t)result;
  }
  return result;
}

_QWORD *sub_1000677A8(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  const __CFString *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v1 = result;
  v2 = result[6];
  switch(v2)
  {
    case 11:
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("IDS LinkEval Mgr: Receivd WRMIdsClient controller event controller %p"), result[4]);
      if (v1[4])
      {
        objc_msgSend((id)v1[5], "addiRatClient:");
        v3 = CFSTR("updateControllerSession:Added Client (WRMIdsClient) to IDS LinkEval Manager ");
        goto LABEL_24;
      }
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("updateControllerSession:remove Client (WRMIdsClient) from IDS LinkEval Manager "));
      v6 = (void *)v1[5];
      v7 = 4;
      goto LABEL_30;
    case 12:
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("IDS LinkEval Mgr: Receivd WRMIdsTool controller event controller %p"), result[4]);
      if (v1[4])
      {
        objc_msgSend((id)v1[5], "addiRatClient:");
        v3 = CFSTR("updateControllerSession:Added Client (WRMIdsTool) to IDS LinkEval Manager ");
        goto LABEL_24;
      }
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("updateControllerSession:remove Client (WRMIdsTool) from IDS LinkEval Manager "));
      v6 = (void *)v1[5];
      v7 = 5;
LABEL_30:
      objc_msgSend(v6, "deleteiRATClient:", v7);
      return objc_msgSend((id)v1[5], "handleControllerAvailability:", v1[6]);
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 27:
      return result;
    case 19:
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("Proximity LinkEval Mgr: Receivd WRMTerminus controller event controller %p "), result[4]);
      if (v1[4])
      {
        objc_msgSend((id)v1[5], "addProximityiRatClient:");
        v3 = CFSTR("Proximity LinkEval Mgr: Initializing Terminus Context");
        goto LABEL_24;
      }
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("updateControllerSession:remove context for (WRMTerminus) from Proximity LinkEval Manager "));
      v8 = (void *)v1[5];
      v9 = 13;
      goto LABEL_37;
    case 23:
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("Proximity LinkEval Mgr: Received WRMWebkit controller event controller %p "), result[4]);
      if (v1[4])
      {
        objc_msgSend((id)v1[5], "addProximityiRatClient:");
        v3 = CFSTR("Proximity LinkEval Mgr: Initializing Webkit Context");
        goto LABEL_24;
      }
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("updateControllerSession:remove context for (WRMWebkit) from Proximity LinkEval Manager "));
      v8 = (void *)v1[5];
      v9 = 15;
      goto LABEL_37;
    case 24:
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("Proximity LinkEval Mgr: Received WRMWebkitMail controller event controller %p "), result[4]);
      if (v1[4])
      {
        objc_msgSend((id)v1[5], "addProximityiRatClient:");
        v3 = CFSTR("Proximity LinkEval Mgr: Initializing WebkitMail Context");
        goto LABEL_24;
      }
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("updateControllerSession:remove context for (WRMWebkitMail) from Proximity LinkEval Manager "));
      v8 = (void *)v1[5];
      v9 = 16;
      goto LABEL_37;
    case 25:
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("Proximity LinkEval Mgr: Received WRMWebkitNotification controller event controller %p "), result[4]);
      if (v1[4])
      {
        objc_msgSend((id)v1[5], "addProximityiRatClient:");
        v3 = CFSTR("Proximity LinkEval Mgr: Initializing WRMWebkitNotification Context");
        goto LABEL_24;
      }
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("updateControllerSession:remove context for (WRMWebkitNotification) from Proximity LinkEval Manager "));
      v8 = (void *)v1[5];
      v9 = 17;
      goto LABEL_37;
    case 26:
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("Proximity LinkEval Mgr: Received WRMWirelessStress controller event controller %p "), result[4]);
      if (v1[4])
      {
        objc_msgSend((id)v1[5], "addProximityiRatClient:");
        v3 = CFSTR("Proximity LinkEval Mgr: Initializing WRMWirelessStress Context");
        goto LABEL_24;
      }
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("updateControllerSession:remove context for (WRMWirelessStress) from Proximity LinkEval Manager "));
      v8 = (void *)v1[5];
      v9 = 18;
      goto LABEL_37;
    case 28:
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("Proximity LinkEval Mgr: Received WRMCoreDuet controller event controller %p "), result[4]);
      if (v1[4])
      {
        objc_msgSend((id)v1[5], "addProximityiRatClient:");
        v3 = CFSTR("Proximity LinkEval Mgr: Initializing WRMCoreDuet Context");
LABEL_24:
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, v3);
      }
      else
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("updateControllerSession:remove context for (WRMCoreDuet) from Proximity LinkEval Manager "));
        v8 = (void *)v1[5];
        v9 = 19;
LABEL_37:
        objc_msgSend(v8, "deleteProximityiRATClient:", v9);
      }
      return objc_msgSend((id)v1[5], "handleControllerAvailability:", v1[6]);
    default:
      if (v2 == 1)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("IDS LinkEval Mgr: Receivd WiFi controller event controller %p"), result[4]);
        v5 = *(void **)(v1[5] + 24);
        if (v5)

        *(_QWORD *)(v1[5] + 24) = (id)v1[4];
      }
      else
      {
        if (v2 != 4)
          return result;
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("IDS LinkEval Mgr: Receivd BT controller event controller %p"), result[4]);
        v4 = *(void **)(v1[5] + 32);
        if (v4)

        *(_QWORD *)(v1[5] + 32) = (id)v1[4];
      }
      return objc_msgSend((id)v1[5], "handleControllerAvailability:", v1[6]);
  }
}

id sub_100067C04(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleSessionNotification:", *(_QWORD *)(a1 + 40));
}

void sub_100067D8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100067F20(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100068294(uint64_t a1)
{
  unsigned int v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  unsigned int v10;
  id v11;
  unsigned int v12;
  unsigned int v13;
  id v14;
  unsigned int v15;
  double v16;
  double v17;
  _BOOL8 v18;
  id v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  v2 = objc_msgSend(*(id *)(a1 + 32), "isMarconiDevice");
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v3 = objc_msgSend(*(id *)(a1 + 32), "miRATProximityClientContexts", 0);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v22;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v22 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)v7);
        if (objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "getSubscriptionType") == (id)1)
        {
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("Do not evaluate, WiFi versus BT because subscription is for WiFi versus Cellular"));
          goto LABEL_45;
        }
        if (v2)
        {
          if ((objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mForceUpdateNeeded") & 1) != 0)
            goto LABEL_16;
          v9 = objc_msgSend(*(id *)(a1 + 32), "canWiFiRadioMeetTerminusRequirementsForCompanionLink:", v8);
          v10 = objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mCompanionWifiLinkIsRecommended");
          if ((_DWORD)v9)
          {
            if ((v10 & 1) != 0)
            {
LABEL_16:
              v11 = objc_msgSend(*(id *)(a1 + 32), "canWiFiRadioMeetTerminusRequirements:", v8);
              v12 = objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mDirectWifiLinkIsRecommended");
              if ((_DWORD)v11)
              {
                if ((v12 & 1) != 0)
                {
LABEL_21:
                  v13 = objc_msgSend(*(id *)(a1 + 32), "getBTLQMScore");
                  objc_msgSend(*(id *)(a1 + 32), "updateBTLQMScore");
                  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 68) = v13 != objc_msgSend(*(id *)(a1 + 32), "getBTLQMScore");
                  v14 = objc_msgSend(*(id *)(a1 + 32), "canBTMeetTerminusRequirement");
                  v15 = objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mBtLinkIsRecommended");
                  if ((v14 & 1) != 0)
                  {
                    if ((v15 & 1) != 0
                      || (objc_msgSend(*(id *)(a1 + 32), "isPingPongAvoidanceTimerSatisfied:", v8) & 1) == 0
                      && !objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mForceUpdateNeeded"))
                    {
                      goto LABEL_30;
                    }
                  }
                  else if (!v15
                         || (objc_msgSend(*(id *)(a1 + 32), "isPingPongAvoidanceTimerSatisfied:", v8) & 1) == 0
                         && (objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mForceUpdateNeeded") & 1) == 0)
                  {
                    goto LABEL_30;
                  }
                  objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "setMBtLinkIsRecommended:", v14);
                  objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "setMBtLinkRecommendationUpdateNeeded:", 1);
LABEL_30:
                  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "isBTMetricsValid"))
                  {
                    objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "setBtMovingAvgRSSI:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "getMovingAvgBTRssi"));
                    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "getBtTxPer");
                    objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "setBtRetransmissionRateTx:", (uint64_t)(v16 * 100.0));
                    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "getBtRxPer");
                    objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "setBtRetransmissionRateRx:", (uint64_t)(v17 * 100.0));
                    objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "setBtTech:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "getBtActivePhy"));
                  }
                  if (objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mIsRetry"))
                  {
                    objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "setMDirectWifiLinkIsRecommended:", 0);
                    objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "setMDirectWifiLinkRecommendationUpdateNeeded:", 1);
                  }
                  if (objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mForceUpdateNeeded")
                    && (objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mBtLinkIsRecommended") & 1) == 0
                    && (objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mDirectWifiLinkIsRecommended") & 1) == 0
                    && objc_msgSend(*(id *)(a1 + 32), "canWiFiRadioMeetMinRequirements"))
                  {
                    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("Go ahead and recommend Direct Wifi since BT is very weak and Wifi is acceptable, but not great"));
                    objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "setMDirectWifiLinkIsRecommended:", 1);
                    objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "setMDirectWifiLinkRecommendationUpdateNeeded:", 1);
                  }
                  goto LABEL_39;
                }
              }
              else if (!v12)
              {
                goto LABEL_21;
              }
              objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "setMDirectWifiLinkIsRecommended:", v11);
              objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "setMDirectWifiLinkRecommendationUpdateNeeded:", 1);
              goto LABEL_21;
            }
          }
          else if (!v10)
          {
            goto LABEL_16;
          }
          objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "setMCompanionWifiLinkIsRecommended:", v9);
          objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "setMCompanionWifiLinkRecommendationUpdateNeeded:", 1);
          goto LABEL_16;
        }
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 27, CFSTR("Go ahead and recommend all links as TRUE on non marconi watch"));
        objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "setMBtLinkIsRecommended:", 1);
        objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "setMDirectWifiLinkIsRecommended:", 1);
        objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "setMCompanionWifiLinkIsRecommended:", 1);
LABEL_39:
        v18 = (objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mBtLinkRecommendationUpdateNeeded") & 1) != 0
           || (objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mCompanionWifiLinkRecommendationUpdateNeeded") & 1) != 0|| (objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mDirectWifiLinkRecommendationUpdateNeeded") & 1) != 0|| objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "mForceUpdateNeeded");
        objc_msgSend(objc_msgSend(v8, "mTerminusContext"), "setLinkPreferenceNotificationRequired:", v18);
        objc_msgSend(v8, "handleLinkPreferenceNotificationTerminus");
LABEL_45:
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v19 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      v5 = v19;
    }
    while (v19);
  }
  return objc_msgSend(*(id *)(a1 + 32), "postBluetoothLQMScore:", 0);
}

void sub_100068984(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100069170(uint64_t a1)
{
  id result;

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 72) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 76);
  if (!objc_msgSend(*(id *)(a1 + 32), "homeKitReportingTimer"))
    objc_msgSend(*(id *)(a1 + 32), "setHomeKitReportingTimer:", +[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", *(_QWORD *)(a1 + 32), "timerHandler:", 0, 1, *(double *)(a1 + 40)));
  result = objc_msgSend(*(id *)(a1 + 32), "homeKitReportingTimer");
  if (result)
    return -[NSRunLoop addTimer:forMode:](+[NSRunLoop currentRunLoop](NSRunLoop, "currentRunLoop"), "addTimer:forMode:", objc_msgSend(*(id *)(a1 + 32), "homeKitReportingTimer"), NSDefaultRunLoopMode);
  return result;
}

void sub_10006A20C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10006A304(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10006A508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10006A644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10006A708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10006A7AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10006A7BC(void *a1)
{
  const __CFString *v1;
  uint64_t value;
  const __CFString *v3;
  size_t length;
  unsigned __int8 *bytes_ptr;
  void *v6;
  void *v7;
  char *v8;
  int v9;
  size_t count;
  size_t i;
  FILE *v12;
  unsigned __int8 uint64;
  xpc_object_t object;

  object = a1;
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_string)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 0, CFSTR("parse_xpc_msg(str) = %s"), xpc_string_get_string_ptr(object));
    goto LABEL_17;
  }
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_double)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 0, CFSTR("parse_xpc_msg(double) = %f"), xpc_double_get_value(object));
    goto LABEL_17;
  }
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_int64)
  {
    value = xpc_int64_get_value(object);
    v3 = CFSTR("parse_xpc_msg(int64) = 0x%llx");
LABEL_16:
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 0, v3, value);
    goto LABEL_17;
  }
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_uint64)
  {
    value = xpc_uint64_get_value(object);
    v3 = CFSTR("parse_xpc_msg(uint64) = 0x%llx");
    goto LABEL_16;
  }
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_BOOL)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 0, CFSTR("parse_xpc_msg(BOOL) = 0x%x"), xpc_BOOL_get_value(object));
  }
  else if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_data)
  {
    length = xpc_data_get_length(object);
    bytes_ptr = (unsigned __int8 *)xpc_data_get_bytes_ptr(object);
    v6 = malloc_type_malloc((2 * length) | 1, 0x100004077774924uLL);
    v7 = v6;
    *((_BYTE *)v6 + 2 * length) = 0;
    if (length)
    {
      v8 = (char *)v6;
      do
      {
        v9 = *bytes_ptr++;
        sprintf(v8, "%02x", v9);
        v8 += 2;
        --length;
      }
      while (length);
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 0, CFSTR("parse_xpc_msg(data..) = 0x%s"), v7);
    free(v7);
  }
  else if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_array)
  {
    count = xpc_array_get_count(object);
    syslog(6, "value = ");
    if (count)
    {
      for (i = 0; i != count; ++i)
      {
        v12 = __stderrp;
        uint64 = xpc_array_get_uint64(object, i);
        fprintf(v12, "%02X", uint64);
      }
    }
    fputc(10, __stderrp);
  }
  else
  {
    if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_null)
      v1 = CFSTR("parse_xpc_msg- Rcvd XPC_type of NULL Type");
    else
      v1 = CFSTR("parse_xpc_msg- Rcvd XPC_type not handled");
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 0, v1);
  }
LABEL_17:

}

void sub_10006AAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_100070408(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 76);
  return result;
}

id sub_100070488(uint64_t a1)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("setLowPowerModePeriodicWakeUpNotificationSubscribed to %d"), *(unsigned __int8 *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 76) = *(_BYTE *)(a1 + 40);
  return result;
}

void sub_100070558(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_100271188;
  qword_100271188 = (uint64_t)v1;

}

void sub_1000706F0(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("BTBeacon Controller::CBDiscovery: Device found or updated: %@"), v3);
  objc_msgSend(*(id *)(a1 + 32), "onBleBeaconReceived:", v3);

}

void sub_100070748(id a1, CBDevice *a2)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("BTBeacon Controller::CBDiscovery: Device lost: %@"), a2);
}

id sub_10007077C(uint64_t a1, uint64_t a2)
{
  if (a2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("BTBeacon Controller::CBDiscovery: Error: %@"), a2);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 16) = 1;
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("BTBeacon Controller::CBDiscovery: Activated Successfully"));
}

void sub_100071090(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100071780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  uint64_t v13;

  AriSdk::ARI_UtaIdcSetCameraStatusReqV2_SDK::~ARI_UtaIdcSetCameraStatusReqV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusReqV2_SDK *)(v13 - 224));

  _Unwind_Resume(a1);
}

void sub_1000717F4(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x491B8000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226539008, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::~ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11);
}

void sub_100071900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::~ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100071920(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x491B8000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226539008, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::~ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11);
}

void sub_100071A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::~ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100071A4C(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x491B8000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226539008, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::~ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11);
}

void sub_100071B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::~ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100071B78(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x491B8000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226539008, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::~ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11);
}

void sub_100071C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::~ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100071CA4(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x491B8000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226539008, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::~ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)v11);
}

void sub_100071DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK::~ARI_UtaIdcSetCameraStatusRspCbV2_SDK((AriSdk::ARI_UtaIdcSetCameraStatusRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100072190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void sub_100072498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a10);
  AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigReqV3_SDK::~ARI_UtaIdcSetCamAntBlockPwrLmtConfigReqV3_SDK((AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigReqV3_SDK *)va);

  _Unwind_Resume(a1);
}

void sub_1000724F4()
{
  JUMPOUT(0x1000724E4);
}

void sub_1000724FC()
{
  JUMPOUT(0x1000724E8);
}

void sub_100072504()
{
  operator new();
}

void sub_100072578(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK((AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x491B0000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226506240, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK::unpack((AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK::~ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK((AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK *)v11);
}

void sub_10007267C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK::~ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK((AriSdk::ARI_UtaIdcSetCamAntBlockPwrLmtConfigRspCbV3_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100073648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  void *v57;

  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigReqV2_SDK::~ARI_UtaIdcSetTunerArbitrationConfigReqV2_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigReqV2_SDK *)&a25);
  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigReqV2_SDK::~ARI_UtaIdcSetTunerArbitrationConfigReqV2_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigReqV2_SDK *)&a41);
  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK::~ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK *)&a57);
  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK::~ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigReq_SDK *)&STACK[0x200]);

  _Unwind_Resume(a1);
}

void sub_1000738C0(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  _BYTE v10[72];
  unsigned int *v11;

  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)v10, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x49188000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226342400, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)v10))
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v9 = *v11;
      v7 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v9)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), 0, *(_QWORD *)(a1 + 40), v9);
        goto LABEL_6;
      }
      v8 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 0, v7);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), 0, *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::~ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)v10);
}

void sub_1000739C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::~ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_1000739E0(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  _BYTE v10[72];
  unsigned int *v11;

  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)v10, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x49188000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226342400, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::unpack((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)v10))
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v9 = *v11;
      v7 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v9)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), 1, *(_QWORD *)(a1 + 40), v9);
        goto LABEL_6;
      }
      v8 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 1, v7);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), 1, *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::~ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)v10);
}

void sub_100073AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK::~ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK((AriSdk::ARI_UtaIdcSetCellImdGnssMitigationConfigRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100073B0C(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  _BYTE v10[72];
  unsigned int *v11;

  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK *)v10, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x491C8000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226604544, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK *)v10))
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v9 = *v11;
      v7 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v9)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), 0, *(_QWORD *)(a1 + 40), v9);
        goto LABEL_6;
      }
      v8 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 0, v7);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), 0, *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK::~ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK *)v10);
}

void sub_100073C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK::~ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_100073C2C(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  _BYTE v10[72];
  unsigned int *v11;

  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK *)v10, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v10, (const AriSdk::MsgBase *)0x491C8000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226604544, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK *)v10))
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v9 = *v11;
      v7 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v9)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), 1, *(_QWORD *)(a1 + 40), v9);
        goto LABEL_6;
      }
      v8 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v8, 1, v7);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), 1, *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK::~ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK *)v10);
}

void sub_100073D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK::~ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetTunerArbitrationConfigRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

void sub_10007428C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigReqV2_SDK::~ARI_UtaIdcSetUwbRtActivityMitigationConfigReqV2_SDK((AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigReqV2_SDK *)&a32);

  _Unwind_Resume(a1);
}

void sub_1000742E4()
{
  operator new();
}

void sub_100074358(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v4;
  int isARIResponseValid;
  unint64_t GMID;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _BYTE v11[72];
  unsigned int *v12;

  AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK *)v11, a2, a3);
  isARIResponseValid = ice::isARIResponseValid((ice *)v11, (const AriSdk::MsgBase *)0x491C0000, v4);
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v11);
  objc_msgSend(*(id *)(a1 + 32), "checkErrorMsgGmid:expectedGMID:API_Str:", (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26), 1226571776, *(_QWORD *)(a1 + 40));
  if (isARIResponseValid)
  {
    if (AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK::unpack((AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK *)v11))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = CFSTR("Coex ARI driver(subId %u): Failed to set %s (unpack error)");
    }
    else
    {
      v10 = *v12;
      v7 = *(unsigned int *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v10)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s (error = %d)"), v7, *(_QWORD *)(a1 + 40), v10);
        goto LABEL_6;
      }
      v9 = CFSTR("Coex ARI driver(subId %u): Set %s (SUCCESS)");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v9, v7, v8);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("Coex ARI driver(subId %u): Failed to set %s, invalid response (NACK or wrong GMID)"), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
LABEL_6:
  AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK::~ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK *)v11);
}

void sub_10007445C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK::~ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK((AriSdk::ARI_UtaIdcSetUwbRtActivityMitigationConfigRspCbV2_SDK *)va);
  _Unwind_Resume(a1);
}

const char *sub_1000744BC(unsigned int a1)
{
  if (a1 > 2)
    return "???";
  else
    return off_1002032D8[a1];
}

const char *sub_1000744E0(int a1)
{
  const char *result;

  if (a1 <= 99)
  {
    result = "kEX_NULL_BEARER";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = "kEX_3GPP_WCDMA";
        break;
      case 2:
        result = "kEX_3GPP_GERAN";
        break;
      case 3:
        result = "kEX_3GPP_LTE";
        break;
      case 4:
        result = "kEX_3GPP_TDSCDMA";
        break;
      case 5:
        result = "kEX_3GPP_WLAN";
        break;
      case 6:
        result = "kEX_3GPP_5G";
        break;
      default:
        return "???";
    }
  }
  else if (a1 > 199)
  {
    switch(a1)
    {
      case 200:
        return "kEX_3GPP2_MAX";
      case 201:
        return "kEX_WLAN";
      case 300:
        return "kEX_WLAN_MAX";
      default:
        return "???";
    }
  }
  else
  {
    switch(a1)
    {
      case 'd':
        result = "kEX_3GPP_MAX";
        break;
      case 'e':
        result = "kEX_3GPP2_1X";
        break;
      case 'f':
        result = "kEX_3GPP2_HRPD";
        break;
      case 'g':
        result = "kEX_3GPP2_EHRPD";
        break;
      case 'h':
        result = "kEX_3GPP2_WLAN";
        break;
      default:
        return "???";
    }
  }
  return result;
}

const char *sub_100074610(const mach_header_64 *a1)
{
  const char *v1;

  if ((uint64_t)a1 >= 0x20000)
  {
    if ((uint64_t)a1 <= 0xFFFFFFFFLL)
    {
      if ((uint64_t)a1 <= 0x7FFFFFF)
      {
        if ((uint64_t)a1 > 0x1FFFFFF)
        {
          if (a1 == (const mach_header_64 *)0x2000000)
            return "k3GPP2_1X_IS2000";
          if (a1 == (const mach_header_64 *)0x4000000)
            return "k3GPP2_1X_IS2000_REL_A";
        }
        else
        {
          if (a1 == (const mach_header_64 *)0x20000)
            return "k3GPP_LTE_CA_UL";
          if (a1 == (const mach_header_64 *)0x1000000)
            return "k3GPP2_1X_IS95";
        }
      }
      else if ((uint64_t)a1 <= 0x1FFFFFFF)
      {
        if (a1 == (const mach_header_64 *)0x8000000)
          return "k3GPP2_HDR_REV0_DPA";
        if (a1 == (const mach_header_64 *)0x10000000)
          return "k3GPP2_HDR_REVA_DPA";
      }
      else
      {
        if (a1 == (const mach_header_64 *)0x20000000)
          return "k3GPP2_HDR_REVB_DPA";
        if (a1 == (const mach_header_64 *)0x40000000)
          return "k3GPP2_HDR_REVA_MPA";
        if (a1 == (const mach_header_64 *)0x80000000)
          return "k3GPP2_HDR_REVB_MPA";
      }
    }
    else if ((uint64_t)a1 > 0xFFFFFFFFFFLL)
    {
      if ((uint64_t)a1 <= 0x3FFFFFFFFFFLL)
      {
        if (a1 == (const mach_header_64 *)0x10000000000)
          return "k3GPP_5G_TDD";
        if (a1 == (const mach_header_64 *)0x20000000000)
          return "k3GPP_5G_SUB6";
      }
      else
      {
        if (a1 == (const mach_header_64 *)0x40000000000)
          return "k3GPP_5G_MMWAVE";
        if (a1 == (const mach_header_64 *)0x80000000000)
          return "k3GPP_5G_NSA";
        if (a1 == (const mach_header_64 *)0x100000000000)
          return "k3GPP_5G_SA";
      }
    }
    else if ((uint64_t)a1 <= 0x3FFFFFFFFLL)
    {
      if (a1 == &_mh_execute_header)
        return "k3GPP2_HDR_REVA_EMPA";
      if (a1 == (const mach_header_64 *)0x200000000)
        return "k3GPP2_HDR_REVB_EMPA";
    }
    else
    {
      if (a1 == (const mach_header_64 *)0x400000000)
        return "k3GPP2_HDR_REVB_MMPA";
      if (a1 == (const mach_header_64 *)0x800000000)
        return "k3GPP2_HDR_EVDO_FMC";
      if (a1 == (const mach_header_64 *)0x1000000000)
        return "k3GPP2_1X_CS";
    }
    return "<unknown mask, probably a composite mask>";
  }
  if ((uint64_t)a1 > 255)
  {
    if ((uint64_t)a1 <= 4095)
    {
      if ((uint64_t)a1 > 1023)
      {
        if (a1 == (const mach_header_64 *)1024)
          return "k3GPP_S2B";
        if (a1 == (const mach_header_64 *)2048)
          return "k3GPP_LTE_LIMITED";
      }
      else
      {
        if (a1 == (const mach_header_64 *)256)
          return "k3GPP_EDGE";
        if (a1 == (const mach_header_64 *)512)
          return "k3GPP_GSM";
      }
    }
    else if ((uint64_t)a1 < 0x4000)
    {
      if (a1 == (const mach_header_64 *)4096)
        return "k3GPP_LTE_FDD";
      if (a1 == (const mach_header_64 *)0x2000)
        return "k3GPP_LTE_TDD";
    }
    else
    {
      if (a1 == (const mach_header_64 *)0x4000)
        return "k3GPP_TDSCDMA";
      if (a1 == (const mach_header_64 *)0x8000)
        return "k3GPP_DC_HSUPA";
      if (a1 == (const mach_header_64 *)0x10000)
        return "k3GPP_LTE_CA_DL";
    }
    return "<unknown mask, probably a composite mask>";
  }
  if ((uint64_t)a1 > 15)
  {
    if ((uint64_t)a1 > 63)
    {
      if (a1 == (const mach_header_64 *)64)
        return "k3GPP_HSPA";
      if (a1 == (const mach_header_64 *)128)
        return "k3GPP_GPRS";
    }
    else
    {
      if (a1 == (const mach_header_64 *)16)
        return "k3GPP_DC_HSDPAPLUS";
      if (a1 == (const mach_header_64 *)32)
        return "k3GPP_64_QAM";
    }
    return "<unknown mask, probably a composite mask>";
  }
  v1 = "kUnspecified";
  switch((unint64_t)a1)
  {
    case 0uLL:
      return v1;
    case 1uLL:
      v1 = "k3GPP_WCDMA";
      break;
    case 2uLL:
      v1 = "k3GPP_HSDPA";
      break;
    case 4uLL:
      v1 = "k3GPP_HSUPA";
      break;
    case 8uLL:
      v1 = "k3GPP_HSDPAPLUS";
      break;
    default:
      return "<unknown mask, probably a composite mask>";
  }
  return v1;
}

const char *sub_1000749C8(int a1)
{
  if ((a1 - 1) > 2)
    return "???";
  else
    return off_1002032F0[a1 - 1];
}

const char *sub_1000749F0(int a1)
{
  const char *v1;

  v1 = "???";
  if (a1 == 1)
    v1 = "kTemporary";
  if (a1)
    return v1;
  else
    return "kPermanent";
}

const char *sub_100074A1C(unsigned int a1)
{
  if (a1 > 2)
    return "???";
  else
    return off_100203308[a1];
}

const char *sub_100074A40(uint64_t a1)
{
  const char *result;

  result = "kUnspecified";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = "k3GPP5gBasic";
      break;
    case 2:
      result = "k3GPP5gUltraWideBand";
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_5;
    case 4:
      result = "k3GPP5gSib2PlmnR15";
      break;
    case 8:
      result = "k3GPPSib2UpperLayer";
      break;
    default:
      if (a1 == 16)
        result = "k3GPPRestrictDecodedChannelNumberRegister";
      else
LABEL_5:
        result = "???";
      break;
  }
  return result;
}

const char *sub_100074ABC(uint64_t a1)
{
  const char *result;

  if (a1 > 31)
  {
    if (a1 > 255)
    {
      switch(a1)
      {
        case 256:
          return "kInitialAttach";
        case 512:
          return "kEmergency";
        case 2048:
          return "kMissionCriticalSrv";
      }
    }
    else
    {
      switch(a1)
      {
        case 32:
          return "kHighPriorityData";
        case 64:
          return "kOverTheAirAdmin";
        case 128:
          return "kCarrierBrandedSrv";
      }
    }
    return "???";
  }
  else
  {
    result = "kUnSpecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = "kDefaultInternet";
        break;
      case 2:
        result = "kIMS";
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        return "???";
      case 4:
        result = "kMMS";
        break;
      case 8:
        result = "kDialUpNetwork";
        break;
      default:
        if (a1 != 16)
          return "???";
        result = "kSupl";
        break;
    }
  }
  return result;
}

const char *sub_100074BC0(uint64_t a1)
{
  const char *result;

  if (a1 > 15)
  {
    if (a1 > 63)
    {
      if (a1 == 64)
        return "kCircuitSwitchedOnly";
      if (a1 == 128)
        return "kAttachPending";
    }
    else
    {
      if (a1 == 16)
        return "kVoiceOnOtherSubscription";
      if (a1 == 32)
        return "kSingleRadioVoiceCallContinuity";
    }
    return "???";
  }
  else
  {
    result = "kUnspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = "kCircuitSwitchedFallBack";
        break;
      case 2:
        result = "kOutOfService";
        break;
      case 4:
        result = "kLimitedService";
        break;
      case 8:
        result = "kVoiceOnSameSubscription";
        break;
      default:
        return "???";
    }
  }
  return result;
}

const char *sub_100074C88(unsigned int a1)
{
  if (a1 > 7)
    return "???";
  else
    return off_100203320[a1];
}

const char *sub_100074CAC(unsigned int a1)
{
  if (a1 > 5)
    return "???";
  else
    return off_100203360[a1];
}

const char *sub_100074CD0(unsigned int a1)
{
  if (a1 > 5)
    return "???";
  else
    return off_100203390[a1];
}

id sub_100074D30()
{
  id result;
  _BOOL4 v1;
  int v2;
  id v3;
  uint64_t v4;

  result = (id)MKBGetDeviceLockState(0);
  if ((_DWORD)result != 3)
  {
    v1 = sub_100074F48();
    byte_100270C48 = v1;
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("Received handleDeviceLockChangedNotification event,unlock:%d"), v1);
    v2 = byte_100270C48;
    v3 = +[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton");
    if (v2)
      v4 = 2;
    else
      v4 = 1;
    return objc_msgSend(v3, "postBBNotification::", v4, 0);
  }
  return result;
}

id sub_100074E74(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "notifyScreenStatePassCodeNotEnabled:", a2);
}

BOOL sub_100074F48()
{
  return MKBGetDeviceLockState(0) == 3 || MKBGetDeviceLockState(0) - 3 < 0xFFFFFFFE;
}

uint64_t start()
{
  void *v0;
  id v1;

  v0 = objc_autoreleasePoolPush();
  v1 = +[WCM_Server singleton](WCM_Server, "singleton");
  if (objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "iRATSupported"))
  {
    +[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton");
    +[WCM_Logging reloadiRATSettingsFromPreferences](WCM_Logging, "reloadiRATSettingsFromPreferences");
  }
  objc_msgSend(v1, "startService");
  objc_autoreleasePoolPop(v0);
  -[NSRunLoop run](+[NSRunLoop currentRunLoop](NSRunLoop, "currentRunLoop"), "run");
  return 0;
}

id sub_100076298(uint64_t a1)
{
  qword_100271198 = (uint64_t)objc_alloc_init(*(Class *)(a1 + 32));
  return objc_msgSend((id)qword_100271198, "registerForCellularDataLQM");
}

id sub_10007669C(const __SCDynamicStore *a1)
{
  id v2;
  const void *v3;
  const __CFString *NetworkInterfaceEntity;
  const __CFDictionary *v5;
  const __CFDictionary *v6;
  CFTypeID v7;
  const __CFNumber *Value;
  const __CFNumber *v9;
  CFTypeID v10;
  unsigned int valuePtr;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("updateCellularDataLQM called"));
  v2 = objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "getSCService");
  valuePtr = objc_msgSend(v2, "getCellularDataLQM");
  v3 = (const void *)kSCEntNetLinkQuality;
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, CFSTR("pdp_ip0"), kSCEntNetLinkQuality);
  v5 = (const __CFDictionary *)SCDynamicStoreCopyValue(a1, NetworkInterfaceEntity);
  v6 = v5;
  if (v5)
  {
    v7 = CFGetTypeID(v5);
    if (v7 == CFDictionaryGetTypeID())
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(v6, v3);
      if (Value)
      {
        v9 = Value;
        v10 = CFGetTypeID(Value);
        if (v10 == CFNumberGetTypeID())
          CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
      }
    }
  }
  if (NetworkInterfaceEntity)
    CFRelease(NetworkInterfaceEntity);
  if (v6)
    CFRelease(v6);
  objc_msgSend(v2, "setCellularDataLQM:", valuePtr);
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Rcvd Data LQM from updateCellularDataLQM: %d"), valuePtr);
}

void sub_100076938(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100076990(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100076AFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100076BF4(uint64_t a1, char a2, void *a3)
{
  id v5;
  const __CFString *v6;
  void *v7;
  const __SCPreferences *v8;
  dispatch_time_t v9;
  _QWORD block[5];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Inside radioPreferencesChanged"));
  v5 = objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "getSCService");
  if ((a2 & 2) == 0)
  {
    v6 = CFSTR("return radioPreferencesChanged:no preference changed");
LABEL_3:
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v6);
    return;
  }
  v7 = v5;
  if (objc_msgSend(a3, "isEqualToString:", CFSTR("AirplaneMode")))
  {
    objc_msgSend(v7, "getAirPlaneMode");
    objc_msgSend(objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "getCTService"), "resetMovAverageOfSignalBar");
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("radioPreferencesChanged: AirplaneMode is %d"), objc_msgSend(v7, "isAirPlaneModeEnabled"));
    v8 = (const __SCPreferences *)objc_msgSend(v7, "getAPMHandle");
LABEL_8:
    SCPreferencesSynchronize(v8);
    return;
  }
  if (objc_msgSend(a3, "isEqualToString:", CFSTR("TelephonyState")))
  {
    objc_msgSend(v7, "getTelephonyMode");
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("radioPreferencesChanged: Telephony Mode is %d"), objc_msgSend(v7, "isTelephonyEnabled"));
    v8 = (const __SCPreferences *)objc_msgSend(v7, "getTelephonyHandle");
    goto LABEL_8;
  }
  if (!objc_msgSend(a3, "isEqualToString:", CFSTR("WiFi")))
  {
    v6 = CFSTR("Notification recevied for unsupported preference");
    goto LABEL_3;
  }
  objc_msgSend(v7, "getWiFiMode");
  SCPreferencesSynchronize((SCPreferencesRef)objc_msgSend(v7, "getWiFiHandle"));
  v9 = dispatch_time(0, 3000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10007705C;
  block[3] = &unk_1002019E8;
  block[4] = v7;
  dispatch_after(v9, (dispatch_queue_t)objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "getQueue"), block);
}

id sub_100077004(uint64_t a1)
{
  return objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "toggleSAState:", objc_msgSend(*(id *)(a1 + 32), "isWiFiPrimary"));
}

id sub_10007705C(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 32), "isWiFiPrimary");
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("radioPreferencesChanged: WiFi Mode changed, wifiState: %d, WiFi primary: %d"), objc_msgSend(*(id *)(a1 + 32), "isWiFiEnabled"), objc_msgSend(*(id *)(a1 + 32), "isWiFiPrimary"));
  return objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "toggleSAState:", v2);
}

id sub_100077284(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleEvent:", a2);
}

id sub_1000772E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleXPCEvent:", *(_QWORD *)(a1 + 40));
}

void sub_100077590(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1000775A0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

id sub_1000775AC(uint64_t a1)
{
  void *v2;
  id result;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v9;
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6);
        result = objc_msgSend(v7, "getProcessId");
        if ((_DWORD)result == *(_DWORD *)(a1 + 48))
        {
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = v7;
          return result;
        }
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      v4 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

id sub_100077BFC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleAWDLRealTimeMode:", a2);
}

BOOL sub_100078038(uint64_t a1)
{
  return a1 == 2;
}

const char *sub_100078044(unint64_t a1)
{
  if (a1 > 2)
    return "CTSubscriptionSlotUnknown";
  else
    return (&off_1002034D0)[a1];
}

const char *sub_100078068(int a1)
{
  int v1;
  const char *result;

  v1 = a1 - 1;
  result = "IBI_RAT_GSM";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "IBI_RAT_UMTS";
      break;
    case 2:
      result = "IBI_RAT_LTE";
      break;
    case 3:
      result = "IBI_RAT_CDMA_1x";
      break;
    case 4:
      result = "IBI_RAT_CDMA_EVDO";
      break;
    case 5:
      result = "IBI_RAT_HYBRID_1xEVDO";
      break;
    case 6:
      result = "IBI_RAT_SRLTE_1xLTE";
      break;
    case 7:
      result = "IBI_RAT_NR";
      break;
    default:
      if ("IBI_RAT_GSM" == 0x7FFFFFFF)
        result = "IBIRat_ARM41_INT_ENFORCE";
      else
        result = "IBI_RAT_NOT_AVAILABLE";
      break;
  }
  return result;
}

uint64_t sub_100078108(double a1, double a2, double a3)
{
  return ((int)((a1 + a2) / a3 + 1.0) & ~((int)((a1 + a2) / a3 + 1.0) >> 31));
}

uint64_t sub_100078128(double a1)
{
  if (((int)(a1 + 110.0 + 1.0) & ~((int)(a1 + 110.0 + 1.0) >> 31)) >= 0x3Fu)
    return 63;
  else
    return ((int)(a1 + 110.0 + 1.0) & ~((int)(a1 + 110.0 + 1.0) >> 31));
}

uint64_t sub_100078158(double a1)
{
  if (((int)(a1 + 120.0 + 1.0) & ~((int)(a1 + 120.0 + 1.0) >> 31)) >= 0x60u)
    return 96;
  else
    return ((int)(a1 + 120.0 + 1.0) & ~((int)(a1 + 120.0 + 1.0) >> 31));
}

uint64_t sub_100078188(double a1)
{
  if (((int)(a1 + 24.0 + a1 + 24.0 + 1.0) & ~((int)(a1 + 24.0 + a1 + 24.0 + 1.0) >> 31)) >= 0x31u)
    return 49;
  else
    return ((int)(a1 + 24.0 + a1 + 24.0 + 1.0) & ~((int)(a1 + 24.0 + a1 + 24.0 + 1.0) >> 31));
}

uint64_t sub_1000781B8(double a1)
{
  if (((int)(a1 + 31.0 + a1 + 31.0 + 1.0) & ~((int)(a1 + 31.0 + a1 + 31.0 + 1.0) >> 31)) >= 0x3Eu)
    return 62;
  else
    return ((int)(a1 + 31.0 + a1 + 31.0 + 1.0) & ~((int)(a1 + 31.0 + a1 + 31.0 + 1.0) >> 31));
}

uint64_t sub_1000781E8(double a1)
{
  if (((int)(a1 + 19.5 + a1 + 19.5 + 1.0) & ~((int)(a1 + 19.5 + a1 + 19.5 + 1.0) >> 31)) >= 0x22u)
    return 34;
  else
    return ((int)(a1 + 19.5 + a1 + 19.5 + 1.0) & ~((int)(a1 + 19.5 + a1 + 19.5 + 1.0) >> 31));
}

uint64_t sub_10007821C(double a1)
{
  if (((int)(a1 + 140.0 + 1.0) & ~((int)(a1 + 140.0 + 1.0) >> 31)) >= 0x61u)
    return 97;
  else
    return ((int)(a1 + 140.0 + 1.0) & ~((int)(a1 + 140.0 + 1.0) >> 31));
}

uint64_t sub_10007824C(double a1)
{
  int v1;

  v1 = (int)(a1 + a1);
  if (v1 >= 100)
    v1 = 100;
  if (v1 <= -100)
    return 4294967196;
  else
    return v1;
}

uint64_t sub_100078270(double a1)
{
  if (((int)(a1 + 10.0 + a1 + 10.0 + 1.0) & ~((int)(a1 + 10.0 + a1 + 10.0 + 1.0) >> 31)) >= 0x3Cu)
    return 60;
  else
    return ((int)(a1 + 10.0 + a1 + 10.0 + 1.0) & ~((int)(a1 + 10.0 + a1 + 10.0 + 1.0) >> 31));
}

double sub_1000782A0(int a1, double a2, double a3)
{
  return -(a2 - (double)(a1 - 1) * a3);
}

double sub_1000782B0(int a1)
{
  return (double)(a1 - 111);
}

double sub_1000782BC(int a1)
{
  return (double)(a1 - 121);
}

double sub_1000782C8(int a1)
{
  return (double)(a1 - 1) * 0.5 + -24.0;
}

double sub_1000782E0(int a1)
{
  return (double)(a1 - 1) * 0.5 + -31.0;
}

double sub_1000782F8(int a1)
{
  return (double)(a1 - 1) * 0.5 + -19.5;
}

double sub_100078314(int a1)
{
  return (double)(a1 - 141);
}

double sub_100078320(int a1)
{
  return (double)a1 * 0.5;
}

double sub_100078330(int a1)
{
  return (double)(a1 - 1) * 0.5 + -10.0;
}

uint64_t sub_100078348(double a1, double a2)
{
  unsigned int v2;

  v2 = (int)(a1 / a2);
  if (v2 <= 1)
    return 1;
  else
    return v2;
}

uint64_t sub_10007835C(double a1)
{
  if ((int)a1 <= 1)
    return 1;
  else
    return (int)a1;
}

uint64_t sub_10007836C(double a1)
{
  unsigned int v1;

  v1 = (int)(a1 + a1);
  if (v1 <= 1)
    return 1;
  else
    return v1;
}

uint64_t sub_100078380(uint64_t a1)
{
  unsigned __int8 *v1;
  _DWORD *v2;
  int v3;

  v1 = *(unsigned __int8 **)(a1 + 72);
  if (v1)
  {
    LODWORD(v1) = *v1;
    if ((_DWORD)v1 == 99 || (v2 = *(_DWORD **)(a1 + 88)) != 0 && *v2 < (int)v1)
    {
      v3 = 0;
      LODWORD(v1) = 0;
    }
    else
    {
      v3 = 1;
    }
  }
  else
  {
    v3 = 0;
  }
  return v1 | (v3 << 8);
}

uint64_t sub_1000783C8(uint64_t a1)
{
  unsigned __int8 *v1;
  _DWORD *v2;
  int v3;

  v1 = *(unsigned __int8 **)(a1 + 80);
  if (v1)
  {
    LODWORD(v1) = *v1;
    if ((_DWORD)v1 == 99 || (v2 = *(_DWORD **)(a1 + 96)) != 0 && *v2 < (int)v1)
    {
      v3 = 0;
      LODWORD(v1) = 0;
    }
    else
    {
      v3 = 1;
    }
  }
  else
  {
    v3 = 0;
  }
  return v1 | (v3 << 8);
}

const char *sub_100078410(unsigned int a1)
{
  if (a1 > 8)
    return "Invalid RAT";
  else
    return (&off_1002034E8)[a1];
}

double sub_100078434(int a1, int a2)
{
  double result;
  int v3;

  result = 0.0;
  switch(a2)
  {
    case 1:
    case 4:
    case 5:
      v3 = a1 - 111;
      goto LABEL_5;
    case 2:
      v3 = a1 - 121;
      goto LABEL_5;
    case 3:
    case 8:
      v3 = a1 - 141;
LABEL_5:
      result = (double)v3;
      break;
    default:
      return result;
  }
  return result;
}

const char *sub_100078478(unsigned int a1)
{
  if (a1 > 8)
    return "Invalid RAT";
  else
    return (&off_100203530)[a1];
}

double sub_10007849C(int a1, int a2)
{
  double v2;
  double v3;
  double result;

  switch(a2)
  {
    case 2:
      v2 = (double)(a1 - 1);
      v3 = -24.0;
      goto LABEL_6;
    case 3:
    case 8:
      v2 = (double)(a1 - 1);
      v3 = -19.5;
      goto LABEL_6;
    case 4:
      v2 = (double)(a1 - 1);
      v3 = -31.0;
      goto LABEL_6;
    case 5:
      v2 = (double)(a1 - 1);
      v3 = -10.0;
LABEL_6:
      result = v3 + v2 * 0.5;
      break;
    default:
      result = 0.0;
      break;
  }
  return result;
}

_BYTE *sub_100078514(_BYTE *a1, char a2)
{
  *a1 = a2;
  return a1 + 1;
}

char *sub_10007851C(tlv *a1, const unsigned __int8 *a2, _DWORD *a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4, a4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_DWORD *sub_100078550(_DWORD *a1, int a2)
{
  *a1 = a2;
  return a1 + 1;
}

uint64_t sub_100078558(uint64_t a1, const unsigned __int8 *a2, _DWORD *a3, unint64_t a4)
{
  unint64_t v7;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4, a4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4, v7);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

_DWORD *sub_1000785B0(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

uint64_t sub_1000785C8(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4, a4);
  v7 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)4, v8);
  v9 = *((unsigned int *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 8);
  return (v9 << 32) | v7;
}

void sub_100078634(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10007861CLL);
}

_DWORD **sub_100078648(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

char *sub_100078668(tlv *a1, const unsigned __int8 *a2, _QWORD *a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)8, a4);
  *a3 = *(_QWORD *)a1;
  return (char *)a1 + 8;
}

_QWORD *sub_10007869C(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t sub_1000786A8(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)8, a4);
  result = *(_QWORD *)v5;
  *a1 = (tlv *)((char *)v5 + 8);
  return result;
}

void sub_1000786E0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000786D4);
}

_QWORD **sub_1000786F4(_QWORD **result, _QWORD *a2)
{
  _QWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t sub_100078708(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  const unsigned __int8 *v6;
  int v7;
  unint64_t v8;
  int v9;

  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_10007876C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100078758);
}

uint64_t sub_100078780(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  const unsigned __int8 *v6;
  int v7;
  unint64_t v8;
  int v9;

  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_1000787E4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000787D0);
}

uint64_t sub_1000787F8(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  const unsigned __int8 *v6;
  int v7;
  unint64_t v8;
  int v9;

  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_10007885C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100078848);
}

uint64_t sub_100078870(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  const unsigned __int8 *v6;
  int v7;
  unint64_t v8;
  int v9;

  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_1000788D4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000788C0);
}

uint64_t sub_1000788E8(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  const unsigned __int8 *v6;
  int v7;
  unint64_t v8;
  int v9;

  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_10007894C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100078938);
}

uint64_t sub_100078960(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unsigned int v7;
  unint64_t v8;
  int v9;

  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)2, v8);
  v9 = *(unsigned __int16 *)((char *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 3);
  return (v9 << 16) | v7;
}

void sub_1000789C8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000789B4);
}

uint64_t sub_1000789DC(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  const unsigned __int8 *v6;
  int v7;
  unint64_t v8;
  int v9;

  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_100078A40(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100078A2CLL);
}

uint64_t sub_100078A54(uint64_t a1, const unsigned __int8 *a2, _BYTE *a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t result;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1, a4);
  *a3 = *(_BYTE *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1, v7);
  result = a1 + 2;
  a3[1] = *(_BYTE *)(a1 + 1);
  return result;
}

uint64_t sub_100078AAC(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  const unsigned __int8 *v6;
  int v7;
  unint64_t v8;
  int v9;

  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_100078B10(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100078AFCLL);
}

uint64_t sub_100078B24(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  const unsigned __int8 *v6;
  int v7;
  unint64_t v8;
  int v9;

  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_100078B88(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100078B74);
}

uint64_t sub_100078B9C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100078BD4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100078BC8);
}

uint64_t sub_100078BE8(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  const unsigned __int8 *v6;
  int v7;
  unint64_t v8;
  int v9;

  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_100078C4C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100078C38);
}

uint64_t sub_100078C60(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_100078C98(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100078C8CLL);
}

uint64_t sub_100078CAC(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2, a4);
  result = *(unsigned __int16 *)v5;
  *a1 = (tlv *)((char *)v5 + 2);
  return result;
}

void sub_100078CE4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100078CD8);
}

char *sub_100078CF8(tlv *a1, const unsigned __int8 *a2, BOOL *a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1, a4);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

BOOL sub_100078D34(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  _BOOL8 result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100078D74(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100078D68);
}

BOOL sub_100078D88(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  _BOOL8 result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100078DC8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100078DBCLL);
}

BOOL sub_100078DDC(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  _BOOL8 result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100078E1C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100078E10);
}

BOOL sub_100078E30(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  _BOOL8 result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100078E70(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100078E64);
}

uint64_t sub_100078E84(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100078EBC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100078EB0);
}

uint64_t sub_100078ED0(uint64_t a1, const unsigned __int8 *a2, _BYTE *a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1, a4);
  *a3 = *(_BYTE *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1, v7);
  a3[1] = *(_BYTE *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)1, v8);
  a3[2] = *(_BYTE *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 3), a2, (const unsigned __int8 *)1, v9);
  a3[3] = *(_BYTE *)(a1 + 3);
  return a1 + 4;
}

_BYTE *sub_100078F58(_BYTE *a1, _BYTE *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1 + 4;
}

uint64_t sub_100078F84(uint64_t *a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5;

  v5 = 0;
  *a1 = sub_100078ED0(*a1, (const unsigned __int8 *)(*a1 + a2), &v5, a4);
  return v5;
}

void sub_100078FC4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100078FB0);
}

_BYTE **sub_100078FD4(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  *result = v2 + 4;
  return result;
}

uint64_t sub_100079004(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  const unsigned __int8 *v6;
  int v7;
  unint64_t v8;
  int v9;

  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1, v8);
  v9 = *((unsigned __int8 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 2);
  return v7 | (v9 << 8);
}

void sub_100079068(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100079054);
}

uint64_t sub_10007907C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unsigned int v7;
  unint64_t v8;
  int v9;

  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1, a4);
  v7 = *(unsigned __int8 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)2, v8);
  v9 = *(unsigned __int16 *)((char *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 3);
  return (v9 << 16) | v7;
}

void sub_1000790E4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000790D0);
}

uint64_t sub_1000790F8(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100079130(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100079124);
}

uint64_t sub_100079144(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_10007917C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100079170);
}

uint64_t sub_100079190(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unsigned int v7;
  unint64_t v8;
  int v9;

  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2, a4);
  v7 = *(unsigned __int16 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 2), v6, (const unsigned __int8 *)2, v8);
  v9 = *((unsigned __int16 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 4);
  return (v9 << 16) | v7;
}

void sub_1000791F8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000791E4);
}

BOOL sub_10007920C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  _BOOL8 result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_10007924C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100079240);
}

BOOL sub_100079260(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  _BOOL8 result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_1000792A0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100079294);
}

uint64_t sub_1000792B4(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_1000792EC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000792E0);
}

uint64_t sub_100079300(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unsigned int v7;
  unint64_t v8;
  int v9;

  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2, a4);
  v7 = *(unsigned __int16 *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 2), v6, (const unsigned __int8 *)2, v8);
  v9 = *((unsigned __int16 *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 4);
  return (v9 << 16) | v7;
}

void sub_100079368(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100079354);
}

BOOL sub_10007937C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  _BOOL8 result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_1000793BC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000793B0);
}

uint64_t sub_1000793D0(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4, a4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4, v7);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4, v8);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4, v9);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)1, v10);
  result = a1 + 17;
  *(_BYTE *)(a3 + 16) = *(_BYTE *)(a1 + 16) != 0;
  return result;
}

uint64_t sub_100079478(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1 + 17;
}

uint64_t sub_1000794AC()
{
  return 17;
}

uint64_t sub_1000794B4@<X0>(uint64_t *a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  result = sub_1000793D0(*a1, (const unsigned __int8 *)(*a1 + a2), a4, a3);
  *a1 = result;
  return result;
}

void sub_1000794EC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t sub_100079500()
{
  return 20;
}

uint64_t *sub_100079508(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(v2 + 16) = *(_BYTE *)(a2 + 16);
  *result = v2 + 17;
  return result;
}

uint64_t sub_100079540@<X0>(uint64_t *a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  result = sub_1000793D0(*a1, (const unsigned __int8 *)(*a1 + a2), a4, a3);
  *a1 = result;
  return result;
}

void sub_100079578(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t sub_10007958C@<X0>(uint64_t *a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  result = sub_1000793D0(*a1, (const unsigned __int8 *)(*a1 + a2), a4, a3);
  *a1 = result;
  return result;
}

void sub_1000795C4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t sub_1000795D8@<X0>(uint64_t *a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  result = sub_1000793D0(*a1, (const unsigned __int8 *)(*a1 + a2), a4, a3);
  *a1 = result;
  return result;
}

void sub_100079610(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

BOOL sub_100079624(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  _BOOL8 result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100079664(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100079658);
}

BOOL sub_100079678(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  _BOOL8 result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_1000796B8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000796ACLL);
}

uint64_t sub_1000796CC(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100079704(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000796F8);
}

uint64_t sub_100079718(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1, a4);
  *(_BYTE *)a3 = *(_BYTE *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1, v7);
  *(_BYTE *)(a3 + 1) = *(_BYTE *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)1, v8);
  *(_BYTE *)(a3 + 2) = *(_BYTE *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 3), a2, (const unsigned __int8 *)1, v9);
  *(_BYTE *)(a3 + 3) = *(_BYTE *)(a1 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1, v10);
  *(_BYTE *)(a3 + 4) = *(_BYTE *)(a1 + 4) != 0;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)4, v11);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 5);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 9), a2, (const unsigned __int8 *)4, v12);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 9);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 13), a2, (const unsigned __int8 *)4, v13);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 13);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 17), a2, (const unsigned __int8 *)4, v14);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(a1 + 17);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 21), a2, (const unsigned __int8 *)4, v15);
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a1 + 21);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 25), a2, (const unsigned __int8 *)4, v16);
  *(_DWORD *)(a3 + 28) = *(_DWORD *)(a1 + 25);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 29), a2, (const unsigned __int8 *)4, v17);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a1 + 29);
  return a1 + 33;
}

uint64_t sub_100079868(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a1 + 5) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 13) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 17) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 21) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 25) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 29) = *(_DWORD *)(a2 + 32);
  return a1 + 33;
}

uint64_t sub_1000798D0()
{
  return 33;
}

uint64_t sub_1000798D8@<X0>(uint64_t *a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;

  *(_BYTE *)(a4 + 4) = 0;
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 32) = 0;
  result = sub_100079718(*a1, (const unsigned __int8 *)(*a1 + a2), a4, a3);
  *a1 = result;
  return result;
}

void sub_10007991C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t sub_100079930()
{
  return 36;
}

uint64_t sub_100079938(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100079868(*a1, a2);
  *a1 = result;
  return result;
}

void sub_1000799A0(id a1)
{
  qword_1002711B0 = objc_alloc_init(WRM_MotionControllerIOS);
}

id sub_100079A38(uint64_t a1)
{
  id result;

  result = objc_alloc_init(*(Class *)(a1 + 32));
  qword_1002711C0 = (uint64_t)result;
  return result;
}

id sub_100079CB8(uint64_t a1)
{
  _DWORD *v2;
  const __CFString *v3;
  id result;

  if (!+[CMActivityAlarm activityAlarmAvailable](CMActivityAlarm, "activityAlarmAvailable"))
  {
    v3 = CFSTR("Alarm: Motion activity not supported on the platform \n");
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 21, v3);
  }
  v2 = *(_DWORD **)(a1 + 32);
  if (v2[8])
  {
    v3 = CFSTR("Alarm:Activity alarm already running \n");
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 21, v3);
  }
  result = objc_msgSend(v2, "waitForStaticState:", (int)v2[11]);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 32) = 1;
  return result;
}

void sub_100079DF8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (+[CMActivityAlarm activityAlarmAvailable](CMActivityAlarm, "activityAlarmAvailable"))
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = *(void **)(v2 + 48);
    if (v3)
    {
      objc_msgSend(v3, "invalidate");

      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) = 0;
      v2 = *(_QWORD *)(a1 + 32);
    }
    v4 = *(void **)(v2 + 56);
    if (v4)
    {
      objc_msgSend(v4, "invalidate");

      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = 0;
      v2 = *(_QWORD *)(a1 + 32);
    }
    v5 = *(void **)(v2 + 64);
    if (v5)
    {
      objc_msgSend(v5, "invalidate");

      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) = 0;
      v2 = *(_QWORD *)(a1 + 32);
    }
    v6 = *(void **)(v2 + 72);
    if (v6)
    {
      objc_msgSend(v6, "invalidate");

      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72) = 0;
      v2 = *(_QWORD *)(a1 + 32);
    }
    v7 = *(void **)(v2 + 80);
    if (v7)
    {
      objc_msgSend(v7, "invalidate");

      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) = 0;
      v2 = *(_QWORD *)(a1 + 32);
    }
    *(_DWORD *)(v2 + 36) = 5;
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 40) = 5;
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 32) = 0;
  }
}

id sub_10007A0E0(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 18, CFSTR("Alarm Acitivity: Static alarm fired"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 18, CFSTR("Alarm: waitForStaticState: updating mobility state to stationary"));
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 36) = 0;
  objc_msgSend(*(id *)(a1 + 32), "notifyHandoverManager:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 36));
  return objc_msgSend(*(id *)(a1 + 32), "waitForActivityState::", *(_QWORD *)(a1 + 40), *(unsigned int *)(*(_QWORD *)(a1 + 32) + 36));
}

id sub_10007A208(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 18, CFSTR("Alarm Acitivity: mPedestrianAfterStatic alarm fired"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 18, CFSTR("Alarm: waitForPedestrianState: updating mobility state to Walking"));
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 36) = 4;
  objc_msgSend(*(id *)(a1 + 32), "notifyHandoverManager:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 36));
  return objc_msgSend(*(id *)(a1 + 32), "waitForActivityState::", *(_QWORD *)(a1 + 40), *(unsigned int *)(*(_QWORD *)(a1 + 32) + 36));
}

id sub_10007A334(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 18, CFSTR("Alarm Acitivity: Walking alarm fired"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 18, CFSTR("Alarm: waitForWalkingState: updating mobility state to Walking"));
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 36) = 1;
  objc_msgSend(*(id *)(a1 + 32), "notifyHandoverManager:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 36));
  return objc_msgSend(*(id *)(a1 + 32), "waitForActivityState::", *(_QWORD *)(a1 + 40), *(unsigned int *)(*(_QWORD *)(a1 + 32) + 36));
}

id sub_10007A460(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 18, CFSTR("Alarm Acitivity: Running alarm fired"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 18, CFSTR("Alarm: waitForRunningState: updating mobility state to Running"));
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 36) = 2;
  objc_msgSend(*(id *)(a1 + 32), "notifyHandoverManager:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 36));
  return objc_msgSend(*(id *)(a1 + 32), "waitForActivityState::", *(_QWORD *)(a1 + 40), *(unsigned int *)(*(_QWORD *)(a1 + 32) + 36));
}

id sub_10007A58C(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 18, CFSTR("Alarm Acitivity: Driving alarm fired"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 18, CFSTR("Alarm: waitForDrivingState: updating mobility state to Driving"));
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 36) = 3;
  objc_msgSend(*(id *)(a1 + 32), "notifyHandoverManager:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 36));
  return objc_msgSend(*(id *)(a1 + 32), "waitForActivityState::", *(_QWORD *)(a1 + 40), *(unsigned int *)(*(_QWORD *)(a1 + 32) + 36));
}

double sub_10007AC8C(double a1, double a2, double a3)
{
  if (a1 >= a3)
    return a3;
  else
    return a1;
}

BOOL sub_10007ACB0(double *a1, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;

  if (a2 >= a4)
    v5 = a2;
  else
    v5 = a4;
  v6 = a2 + a3;
  if (v6 >= a4 + a5)
    v6 = a4 + a5;
  if (a1 && v5 < v6)
  {
    *a1 = v5;
    a1[1] = v6 - v5;
  }
  return v5 < v6;
}

BOOL sub_10007ACE8(double *a1, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;
  double v7;
  double v8;

  v5 = a2 + a2;
  v6 = a2 + a3 + a2 + a3 - (a2 + a2);
  if (v5 >= a4)
    v7 = v5;
  else
    v7 = a4;
  v8 = a4 + a5;
  if (v5 + v6 < v8)
    v8 = v5 + v6;
  if (a1 && v7 < v8)
  {
    *a1 = v5;
    a1[1] = v6;
  }
  return v7 < v8;
}

BOOL sub_10007AD2C(double *a1, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;
  double v7;
  double v8;

  v5 = a2 * 3.0;
  v6 = (a2 + a3) * 3.0 - a2 * 3.0;
  if (v5 >= a4)
    v7 = v5;
  else
    v7 = a4;
  v8 = a4 + a5;
  if (v5 + v6 < v8)
    v8 = v5 + v6;
  if (a1 && v7 < v8)
  {
    *a1 = v5;
    a1[1] = v6;
  }
  return v7 < v8;
}

BOOL sub_10007AD74(double *a1, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;
  double v7;
  double v8;

  v5 = a2 * 0.5;
  v6 = (a2 + a3) * 0.5 - a2 * 0.5;
  if (v5 >= a4)
    v7 = v5;
  else
    v7 = a4;
  v8 = a4 + a5;
  if (v5 + v6 < v8)
    v8 = v5 + v6;
  if (a1 && v7 < v8)
  {
    *a1 = v5;
    a1[1] = v6;
  }
  return v7 < v8;
}

BOOL sub_10007ADBC(double *a1, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;
  double v7;
  double v8;

  v5 = a2 / 3.0;
  v6 = (a2 + a3) / 3.0 - a2 / 3.0;
  if (v5 >= a4)
    v7 = v5;
  else
    v7 = a4;
  v8 = a4 + a5;
  if (v5 + v6 < v8)
    v8 = v5 + v6;
  if (a1 && v7 < v8)
  {
    *a1 = v5;
    a1[1] = v6;
  }
  return v7 < v8;
}

uint64_t sub_10007AE04(double *a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;

  if (a2 + a3 * 0.5 <= a4 + a5 * 0.5)
  {
    v7 = a2 + a3;
    v8 = a4 + a5;
    v9 = a4;
    a4 = a2;
  }
  else
  {
    v7 = a4 + a5;
    v8 = a2 + a3;
    v9 = a2;
  }
  v10 = v9 + a4;
  v11 = v8 + v7 - (v9 + a4);
  if (v9 + a4 >= a6)
    v12 = v9 + a4;
  else
    v12 = a6;
  v13 = v10 + v11;
  v14 = a6 + a7;
  if (v10 + v11 >= v14)
    v13 = v14;
  if (v12 >= v13)
  {
    v10 = v9 - v7;
    v11 = v8 - a4 - (v9 - v7);
    if (v9 - v7 >= a6)
      v15 = v9 - v7;
    else
      v15 = a6;
    v16 = v10 + v11;
    if (v10 + v11 >= v14)
      v16 = v14;
    if (v15 >= v16)
      return 0;
  }
  if (a1)
  {
    *a1 = v10;
    a1[1] = v11;
  }
  return 1;
}

uint64_t sub_10007AEAC(double *a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;

  if (a2 + a3 * 0.5 <= a4 + a5 * 0.5)
  {
    v7 = a2 + a3;
    v8 = a4 + a5;
    v9 = a4;
    a4 = a2;
  }
  else
  {
    v7 = a4 + a5;
    v8 = a2 + a3;
    v9 = a2;
  }
  v10 = -(v7 - v9 * 2.0);
  v11 = -(a4 - v8 * 2.0) - v10;
  if (v10 >= a6)
    v12 = -(v7 - v9 * 2.0);
  else
    v12 = a6;
  v13 = v11 - (v7 - v9 * 2.0);
  v14 = a6 + a7;
  if (v13 >= v14)
    v13 = v14;
  if (v12 >= v13)
  {
    v10 = -(v8 - a4 * 2.0);
    v11 = -(v9 - v7 * 2.0) - v10;
    if (v10 >= a6)
      v15 = -(v8 - a4 * 2.0);
    else
      v15 = a6;
    v16 = v11 - (v8 - a4 * 2.0);
    if (v16 >= v14)
      v16 = v14;
    if (v15 >= v16)
    {
      v10 = v9 + -v7 * 2.0;
      v11 = v8 + -a4 * 2.0 - v10;
      if (v10 >= a6)
        v17 = v9 + -v7 * 2.0;
      else
        v17 = a6;
      v18 = v10 + v11;
      if (v10 + v11 >= v14)
        v18 = v14;
      if (v17 >= v18)
        return 0;
    }
  }
  if (a1)
  {
    *a1 = v10;
    a1[1] = v11;
  }
  return 1;
}

uint64_t sub_10007AF8C(double *a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;

  if (a2 + a3 * 0.5 <= a4 + a5 * 0.5)
  {
    v7 = a2 + a3;
    v8 = a4 + a5;
    v9 = a4;
    a4 = a2;
  }
  else
  {
    v7 = a4 + a5;
    v8 = a2 + a3;
    v9 = a2;
  }
  v10 = -(v7 - v9 * 4.0);
  v11 = -(a4 - v8 * 4.0) - v10;
  if (v10 >= a6)
    v12 = -(v7 - v9 * 4.0);
  else
    v12 = a6;
  v13 = v11 - (v7 - v9 * 4.0);
  v14 = a6 + a7;
  if (v13 >= v14)
    v13 = v14;
  if (v12 >= v13)
  {
    v10 = -(v8 - a4 * 4.0);
    v11 = -(v9 - v7 * 4.0) - v10;
    if (v10 >= a6)
      v15 = -(v8 - a4 * 4.0);
    else
      v15 = a6;
    v16 = v10 + v11;
    if (v10 + v11 >= v14)
      v16 = v14;
    if (v15 >= v16)
      return 0;
  }
  if (a1)
  {
    *a1 = v10;
    a1[1] = v11;
  }
  return 1;
}

double sub_10007B038(double a1, double a2, double a3)
{
  if (a1 != 0.0)
  {
    if (a3 == 0.0)
    {
      return a1;
    }
    else if (a1 < a3)
    {
      return a1;
    }
  }
  return a3;
}

BOOL sub_10007B07C(double *a1, double *a2, double a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v6 = a3 + a3;
  v7 = a3 + a4 + a3 + a4 - (a3 + a3);
  if (a3 + a3 >= a5)
    v8 = a3 + a3;
  else
    v8 = a5;
  v9 = v6 + v7;
  v10 = a5 + a6;
  if (v9 >= v10)
    v9 = v10;
  if (v8 < v9)
  {
    v11 = v9 - v8;
    if (a1)
    {
      *a1 = v8 * 0.5;
      a1[1] = v11 * 0.5;
    }
    if (a2)
    {
      *a2 = v8;
      a2[1] = v11;
    }
  }
  return v8 < v9;
}

BOOL sub_10007B0D8(double *a1, double *a2, double a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v6 = a3 * 3.0;
  v7 = (a3 + a4) * 3.0 - a3 * 3.0;
  if (a3 * 3.0 >= a5)
    v8 = a3 * 3.0;
  else
    v8 = a5;
  v9 = v6 + v7;
  v10 = a5 + a6;
  if (v9 >= v10)
    v9 = v10;
  if (v8 < v9)
  {
    v11 = v9 - v8;
    if (a1)
    {
      *a1 = v8 / 3.0;
      a1[1] = v11 / 3.0;
    }
    if (a2)
    {
      *a2 = v8;
      a2[1] = v11;
    }
  }
  return v8 < v9;
}

BOOL sub_10007B138(double *a1, double *a2, double a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v6 = a3 * 0.5;
  v7 = (a3 + a4) * 0.5 - a3 * 0.5;
  if (a3 * 0.5 >= a5)
    v8 = a3 * 0.5;
  else
    v8 = a5;
  v9 = v6 + v7;
  v10 = a5 + a6;
  if (v9 >= v10)
    v9 = v10;
  if (v8 < v9)
  {
    v11 = v9 - v8;
    if (a1)
    {
      *a1 = v8 + v8;
      a1[1] = v11 + v11;
    }
    if (a2)
    {
      *a2 = v8;
      a2[1] = v11;
    }
  }
  return v8 < v9;
}

BOOL sub_10007B194(double *a1, double *a2, double a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v6 = a3 / 3.0;
  v7 = (a3 + a4) / 3.0 - a3 / 3.0;
  if (a3 / 3.0 >= a5)
    v8 = a3 / 3.0;
  else
    v8 = a5;
  v9 = v6 + v7;
  v10 = a5 + a6;
  if (v9 >= v10)
    v9 = v10;
  if (v8 < v9)
  {
    v11 = v9 - v8;
    if (a1)
    {
      *a1 = v8 * 3.0;
      a1[1] = v11 * 3.0;
    }
    if (a2)
    {
      *a2 = v8;
      a2[1] = v11;
    }
  }
  return v8 < v9;
}

BOOL sub_10007B1F4(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;

  v9 = a4 + a5 * 0.5;
  v10 = a6 + a7 * 0.5;
  if (v9 > v10)
  {
    v11 = a6 + a7;
    v12 = a4 + a5;
    v13 = a4;
  }
  else
  {
    v11 = a4 + a5;
    v12 = a6 + a7;
    v13 = a6;
    a6 = a4;
  }
  if (v13 - v11 >= a8)
    v14 = v13 - v11;
  else
    v14 = a8;
  v15 = v13 - v11 + v12 - a6 - (v13 - v11);
  v16 = a8 + a9;
  if (v15 >= v16)
    v15 = v16;
  v17 = 0.0;
  v18 = 0.0;
  v19 = 0.0;
  v20 = 0.0;
  if (v14 < v15)
  {
    v21 = v14 + v15 - v14;
    if (a3)
    {
      *a3 = v14;
      a3[1] = v15 - v14;
    }
    v19 = a6 + v14;
    if (a6 + v14 < v13)
      v19 = v13;
    v22 = v11 + v21;
    if (v11 + v21 > v12)
      v22 = v12;
    if (v19 < v22)
    {
      v20 = v22 - v19;
    }
    else
    {
      v19 = 0.0;
      v20 = 0.0;
    }
    v23 = v13 - v21;
    if (v23 >= a6)
      v17 = v23;
    else
      v17 = a6;
    v24 = v12 - v14;
    if (v12 - v14 > v11)
      v24 = v11;
    if (v17 >= v24)
      v17 = 0.0;
    else
      v18 = v24 - v17;
  }
  if (v9 > v10)
  {
    if (a1)
    {
      *a1 = v19;
      a1[1] = v20;
    }
    v19 = v17;
    v20 = v18;
  }
  else if (a1)
  {
    *a1 = v17;
    a1[1] = v18;
  }
  if (a2)
  {
    *a2 = v19;
    a2[1] = v20;
  }
  return v14 < v15;
}

BOOL sub_10007B308(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;

  v12 = a6;
  v38 = a6 + a7 * 0.5;
  v39 = a4 + a5 * 0.5;
  if (v39 > v38)
  {
    v13 = a6 + a7;
    v14 = a4 + a5;
    a6 = a4;
  }
  else
  {
    v13 = a4 + a5;
    v14 = a6 + a7;
    v12 = a4;
  }
  v44 = 0.0;
  v45 = 0.0;
  if (a6 + v12 >= a8)
    v15 = a6 + v12;
  else
    v15 = a8;
  if (a6 + v12 + v14 + v13 - (a6 + v12) >= a8 + a9)
    v16 = a8 + a9;
  else
    v16 = a6 + v12 + v14 + v13 - (a6 + v12);
  v17 = 0.0;
  v18 = 0.0;
  v19 = 0.0;
  v20 = 0.0;
  v21 = 0.0;
  v22 = 0.0;
  if (v15 < v16)
  {
    v20 = v16 - v15;
    v23 = v15 + v16 - v15;
    v24 = v15 - v14;
    if (v15 - v14 < v12)
      v24 = v12;
    v25 = v23 - a6;
    if (v23 - a6 > v13)
      v25 = v13;
    if (v24 >= v25)
      v21 = 0.0;
    else
      v21 = v25 - v24;
    if (v24 >= v25)
      v22 = 0.0;
    else
      v22 = v24;
    if (v15 - v13 >= a6)
      v17 = v15 - v13;
    else
      v17 = a6;
    v26 = v23 - v12;
    if (v26 > v14)
      v26 = v14;
    if (v17 >= v26)
      v17 = 0.0;
    else
      v18 = v26 - v17;
    v19 = v15;
  }
  v42 = 0.0;
  v43 = 0.0;
  v40 = 0.0;
  v41 = 0.0;
  sub_10007B1F4(&v42, &v40, &v44, v12, v13 - v12, a6, v14 - a6, a8, a9);
  v28 = v42;
  v27 = v43;
  if (v22 != 0.0)
  {
    if (v42 == 0.0)
    {
      v27 = v21;
      v28 = v22;
    }
    else
    {
      v29 = v42 + v43;
      if (v22 < v42)
        v28 = v22;
      if (v21 + v22 >= v29)
        v29 = v21 + v22;
      v27 = v29 - v28;
    }
  }
  v30 = v40;
  v31 = v41;
  if (v17 != 0.0)
  {
    if (v17 >= v40)
      v32 = v40;
    else
      v32 = v17;
    v33 = v40 + v41;
    if (v17 + v18 >= v40 + v41)
      v33 = v17 + v18;
    v31 = v33 - v32;
    if (v40 == 0.0)
    {
      v31 = v18;
      v30 = v17;
    }
    else
    {
      v30 = v32;
    }
  }
  if (a3)
  {
    v35 = v44;
    v34 = v45;
    if (v19 != 0.0)
    {
      if (v44 == 0.0)
      {
        v34 = v20;
        v35 = v19;
      }
      else
      {
        v36 = v44 + v45;
        if (v19 < v44)
          v35 = v19;
        if (v19 + v20 >= v36)
          v36 = v19 + v20;
        v34 = v36 - v35;
      }
    }
    *a3 = v35;
    a3[1] = v34;
  }
  if (v39 > v38)
  {
    if (a1)
    {
      *a1 = v30;
      a1[1] = v31;
    }
    v30 = v28;
    v31 = v27;
  }
  else if (a1)
  {
    *a1 = v28;
    a1[1] = v27;
  }
  if (a2)
  {
    *a2 = v30;
    a2[1] = v31;
  }
  return v15 < v16;
}

BOOL sub_10007B558(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  _BOOL8 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;

  v13 = a6;
  v14 = a4 + a5 * 0.5;
  v15 = a6 + a7 * 0.5;
  if (v14 > v15)
  {
    v16 = a6 + a7;
    v17 = a4 + a5;
    v18 = a4;
  }
  else
  {
    v16 = a4 + a5;
    v17 = a6 + a7;
    v18 = a6;
    v13 = a4;
  }
  v61 = 0.0;
  v62 = 0.0;
  v59 = 0.0;
  v60 = 0.0;
  v57 = 0.0;
  v58 = 0.0;
  v55 = 0.0;
  v56 = 0.0;
  v53 = 0.0;
  v54 = 0.0;
  v51 = 0.0;
  v52 = 0.0;
  v19 = 2.0;
  v20 = -(v16 - v18 * 2.0);
  if (v20 >= a8)
    v21 = -(v16 - v18 * 2.0);
  else
    v21 = a8;
  v22 = -(v13 - v17 * 2.0) - v20 - (v16 - v18 * 2.0);
  v23 = a8 + a9;
  if (v22 >= a8 + a9)
    v22 = a8 + a9;
  v24 = v21 < v22;
  v25 = 0.0;
  v26 = 0.0;
  if (v21 < v22)
  {
    v50 = v17;
    v27 = a9;
    v28 = v14;
    v29 = v15;
    sub_10007B1F4(&v61, &v59, &v53, v13, v16 - v13, v18 + v18, v17 + v17 - (v18 + v18), a8, a9);
    v19 = 2.0;
    v17 = v50;
    a9 = v27;
    v15 = v29;
    v14 = v28;
    v26 = v59 * 0.5;
    v25 = v60 * 0.5;
  }
  v30 = -(v17 - v13 * v19);
  if (v30 >= a8)
    v31 = -(v17 - v13 * v19);
  else
    v31 = a8;
  v32 = -(v18 - v16 * v19) - v30 - (v17 - v13 * v19);
  if (v32 >= v23)
    v32 = v23;
  if (v31 >= v32)
  {
    v36 = v61;
    v37 = 0.0;
    if (v61 == 0.0)
      v36 = 0.0;
    else
      v37 = v62;
  }
  else
  {
    v33 = a8;
    v34 = v14;
    v35 = v15;
    sub_10007B1F4(&v57, &v55, &v51, v13 + v13, v16 + v16 - (v13 + v13), v18, v17 - v18, v33, a9);
    v15 = v35;
    v14 = v34;
    v36 = v57 * 0.5;
    v37 = v58 * 0.5;
    v38 = v62;
    if (v61 >= v57 * 0.5)
      v39 = v57 * 0.5;
    else
      v39 = v61;
    v40 = v61 + v62;
    if (v61 + v62 < v36 + v37)
      v40 = v36 + v37;
    v41 = v40 - v39;
    if (v36 == 0.0)
      v39 = v61;
    else
      v38 = v41;
    v24 = 1;
    if (v61 != 0.0)
    {
      v37 = v38;
      v36 = v39;
    }
  }
  v42 = v55;
  v43 = v56;
  if (v26 != 0.0)
  {
    if (v26 >= v55)
      v44 = v55;
    else
      v44 = v26;
    v45 = v55 + v56;
    if (v26 + v25 >= v55 + v56)
      v45 = v26 + v25;
    v43 = v45 - v44;
    if (v55 == 0.0)
    {
      v43 = v25;
      v42 = v26;
    }
    else
    {
      v42 = v44;
    }
  }
  if (a3)
  {
    v46 = v52;
    v47 = v51;
    if (v53 != 0.0)
    {
      if (v51 == 0.0)
      {
        v46 = v54;
        v47 = v53;
      }
      else
      {
        v48 = v51 + v52;
        if (v53 < v51)
          v47 = v53;
        if (v53 + v54 >= v48)
          v48 = v53 + v54;
        v46 = v48 - v47;
      }
    }
    *a3 = v47;
    a3[1] = v46;
  }
  if (v14 > v15)
  {
    if (a1)
    {
      *a1 = v42;
      a1[1] = v43;
    }
    v42 = v36;
    v43 = v37;
  }
  else if (a1)
  {
    *a1 = v36;
    a1[1] = v37;
  }
  if (a2)
  {
    *a2 = v42;
    a2[1] = v43;
  }
  return v24;
}

BOOL sub_10007B82C(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  _BOOL8 v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;

  v13 = a6;
  v14 = a4 + a5 * 0.5;
  v15 = a6 + a7 * 0.5;
  if (v14 > v15)
  {
    v16 = a6 + a7;
    v17 = a4 + a5;
    v18 = a4;
  }
  else
  {
    v16 = a4 + a5;
    v17 = a6 + a7;
    v18 = a6;
    v13 = a4;
  }
  v62 = 0.0;
  v63 = 0.0;
  v60 = 0.0;
  v61 = 0.0;
  v58 = 0.0;
  v59 = 0.0;
  v56 = 0.0;
  v57 = 0.0;
  v54 = 0.0;
  v55 = 0.0;
  v52 = 0.0;
  v53 = 0.0;
  v19 = -(v16 - v18 * 4.0);
  if (v19 >= a8)
    v20 = -(v16 - v18 * 4.0);
  else
    v20 = a8;
  v21 = -(v13 - v17 * 4.0) - v19 - (v16 - v18 * 4.0);
  v22 = a8 + a9;
  if (v21 >= a8 + a9)
    v21 = a8 + a9;
  v23 = v20 < v21;
  v24 = 0.0;
  v25 = 0.0;
  if (v20 < v21)
  {
    v50 = v16;
    v51 = v17;
    v26 = a9;
    v27 = v14;
    v28 = v15;
    sub_10007B1F4(&v62, &v60, &v54, v13, v16 - v13, v18 * 4.0, v17 * 4.0 - v18 * 4.0, a8, a9);
    v16 = v50;
    v17 = v51;
    a9 = v26;
    v15 = v28;
    v14 = v27;
    v25 = v60 * 0.25;
    v24 = v61 * 0.25;
  }
  v29 = -(v17 - v13 * 4.0);
  if (v29 >= a8)
    v30 = -(v17 - v13 * 4.0);
  else
    v30 = a8;
  v31 = -(v18 - v16 * 4.0) - v29 - (v17 - v13 * 4.0);
  if (v31 >= v22)
    v31 = v22;
  if (v30 >= v31)
  {
    v36 = v62;
    v37 = 0.0;
    if (v62 == 0.0)
      v36 = 0.0;
    else
      v37 = v63;
  }
  else
  {
    v32 = v16 * 4.0 - v13 * 4.0;
    v33 = a8;
    v34 = v14;
    v35 = v15;
    sub_10007B1F4(&v58, &v56, &v52, v13 * 4.0, v32, v18, v17 - v18, v33, a9);
    v15 = v35;
    v14 = v34;
    v36 = v58 * 0.25;
    v37 = v59 * 0.25;
    v38 = v63;
    if (v62 >= v58 * 0.25)
      v39 = v58 * 0.25;
    else
      v39 = v62;
    v40 = v62 + v63;
    if (v62 + v63 < v36 + v37)
      v40 = v36 + v37;
    v41 = v40 - v39;
    if (v36 == 0.0)
      v39 = v62;
    else
      v38 = v41;
    v23 = 1;
    if (v62 != 0.0)
    {
      v37 = v38;
      v36 = v39;
    }
  }
  v42 = v56;
  v43 = v57;
  if (v25 != 0.0)
  {
    if (v25 >= v56)
      v44 = v56;
    else
      v44 = v25;
    v45 = v56 + v57;
    if (v25 + v24 >= v56 + v57)
      v45 = v25 + v24;
    v43 = v45 - v44;
    if (v56 == 0.0)
    {
      v43 = v24;
      v42 = v25;
    }
    else
    {
      v42 = v44;
    }
  }
  if (a3)
  {
    v46 = v53;
    v47 = v52;
    if (v54 != 0.0)
    {
      if (v52 == 0.0)
      {
        v46 = v55;
        v47 = v54;
      }
      else
      {
        v48 = v52 + v53;
        if (v54 < v52)
          v47 = v54;
        if (v54 + v55 >= v48)
          v48 = v54 + v55;
        v46 = v48 - v47;
      }
    }
    *a3 = v47;
    a3[1] = v46;
  }
  if (v14 > v15)
  {
    if (a1)
    {
      *a1 = v42;
      a1[1] = v43;
    }
    v42 = v36;
    v43 = v37;
  }
  else if (a1)
  {
    *a1 = v36;
    a1[1] = v37;
  }
  if (a2)
  {
    *a2 = v42;
    a2[1] = v43;
  }
  return v23;
}

uint64_t sub_10007BB00(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == 40)
    v4 = 2;
  else
    v4 = 1;
  if (a2 == 80)
    v4 = 3;
  if (a2 == 160)
    v5 = 4;
  else
    v5 = v4;
  if (a1 < 0xE)
    return a1;
  v7 = 0;
  while (dword_1001DD5D0[v7] != (_DWORD)a1)
  {
    v7 += 5;
    if (v7 == 230)
      return a1;
  }
  v6 = dword_1001DD5D0[v5 + v7];
  if ((_DWORD)v6 == 1)
    return a1;
  if (!(_DWORD)v6)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 5, CFSTR("Wrong combination wifiChannel(%d), bw (%d)"), a1, v5, v2, v3);
    return 0;
  }
  return v6;
}

double sub_10007BBBC(uint64_t a1)
{
  double v1;
  uint64_t v2;

  if (a1 >= 0xE)
  {
    v2 = 0;
    v1 = 0.0;
    do
    {
      if (word_1001DD968[v2] == (_DWORD)a1)
        v1 = (double)word_1001DD968[v2 + 1];
      v2 += 3;
    }
    while (v2 != 138);
  }
  else
  {
    v1 = (double)(5 * a1 + 2407);
  }
  if (v1 == 0.0)
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 5, CFSTR("cannot get center frequency for wifiChannel(%d)"), a1);
  return v1;
}

double sub_10007BC54(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  __int16 *v10;
  int v11;
  uint64_t v13;

  if (a2 == 40)
    v5 = 2;
  else
    v5 = 1;
  if (a2 == 80)
    v5 = 3;
  if (a2 == 160)
    v6 = 4;
  else
    v6 = v5;
  if ((_DWORD)a3 == 4)
  {
    if (!objc_msgSend(&off_100241CE8, "containsObject:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1)))
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 0, CFSTR("wifiChannel index (%d) is not part of new wifiBand index (%d)"), a1, 4);
      goto LABEL_30;
    }
    v9 = 0;
    v10 = &word_1001DDB76[v6];
    v7 = 0.0;
    do
    {
      if (word_1001DDB76[v9] == (_DWORD)a1)
      {
        v7 = (double)v10[v9];
        if (!v10[v9])
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 0, CFSTR("wifiChannel index (%d) does not support bandwidth with index (%d), in band idx (%d)"), a1, v6, 4);
      }
      v9 += 5;
    }
    while (v9 != 295);
  }
  else
  {
    if ((_DWORD)a3 != 3)
    {
      if ((_DWORD)a3 == 2)
      {
        if (objc_msgSend(&off_100241CB8, "containsObject:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1)))
        {
          v7 = (double)(5 * a1 + 2407);
          goto LABEL_33;
        }
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 0, CFSTR("wifiChannel index (%d) is not part of 2.4GHz wifiBand index(%d)"), a1, 2);
      }
      else
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 0, CFSTR("wifiBand input is invald (%d)"), a3, v13);
      }
LABEL_30:
      v7 = 0.0;
LABEL_34:
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("Zero centerFreq identified because either channel index/bandwidth mismatch, or invalid channel band index. Print: wifiChannel=(%d), bandwidth index =(%d), band idx =(%d) "), a1, v6, a3);
      return v7;
    }
    if (!objc_msgSend(&off_100241CD0, "containsObject:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1)))
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 0, CFSTR("wifiChannel index (%d) is not part of 5GHz wifiBand index (%d)"), a1, 3);
      goto LABEL_30;
    }
    v8 = 0;
    while (word_1001DDA7C[v8] != (_DWORD)a1)
    {
      v8 += 5;
      if (v8 == 125)
        goto LABEL_30;
    }
    v11 = (unsigned __int16)word_1001DDA7C[v6 + v8];
    v7 = (double)(__int16)v11;
    if (!v11)
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 0, CFSTR("wifiChannel index (%d) does not support bandwidth with index (%d), in band idx (%d)"), a1, v6, 3);
  }
LABEL_33:
  if (v7 == 0.0)
    goto LABEL_34;
  return v7;
}

double sub_10007BEC8(uint64_t a1)
{
  double result;
  uint64_t v2;

  result = 20.0;
  if (a1 >= 0xE)
  {
    v2 = 0;
    while (word_1001DD968[v2] != (_DWORD)a1)
    {
      v2 += 3;
      if (v2 == 138)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 5, CFSTR("cannot get bandwidth for wifiChannel(%d)"), 20.0, a1);
        return 0.0;
      }
    }
    return (double)word_1001DD968[v2 + 2];
  }
  return result;
}

double sub_10007BF44(uint64_t a1)
{
  double v1;
  double v2;
  uint64_t v3;
  __int16 *v4;

  if (a1 >= 0xE)
  {
    v3 = 0;
    while (word_1001DD968[v3] != (_DWORD)a1)
    {
      v3 += 3;
      if (v3 == 138)
      {
        v2 = 0.0;
        v1 = 0.0;
        goto LABEL_9;
      }
    }
    v4 = &word_1001DD968[v3];
    v1 = (double)v4[1];
    v2 = (double)v4[2];
  }
  else
  {
    v1 = (double)(5 * a1 + 2407);
    v2 = 20.0;
  }
  if (v1 == 0.0)
LABEL_9:
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 5, CFSTR("cannot get frequency/bandwidth for wifiChannel(%d)"), a1);
  return v1 + v2 * -0.5;
}

id sub_10007BFFC(_DWORD *a1, double a2, double a3)
{
  id v6;
  double v7;
  uint64_t i;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  double v15;
  double v16;
  int v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;

  v6 = +[NSMutableArray array](NSMutableArray, "array");
  v7 = a2 + a3;
  if (a2 + a3 <= 5000.0)
  {
    v14 = 0;
    v15 = a2 + a3 * 0.5;
    v16 = -1.0;
    v17 = 2412;
    v18 = 1;
    do
    {
      v19 = (double)v17;
      v20 = (double)v17 + -10.0;
      if (v20 >= a2)
        v21 = (double)v17 + -10.0;
      else
        v21 = a2;
      v22 = v20 + 20.0;
      if (v22 >= v7)
        v22 = v7;
      if (v21 < v22)
      {
        objc_msgSend(v6, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v18));
        if (v18 <= 0xB && ((1 << v18) & 0x842) != 0)
        {
          v23 = v15 - v19;
          if (v15 - v19 < 0.0)
            v23 = -(v15 - v19);
          if (v23 > v16)
          {
            v16 = v23;
            v14 = v18;
          }
        }
      }
      v18 = (v18 + 1);
      v17 += 5;
    }
    while (v17 != 2477);
  }
  else
  {
    for (i = 0; i != 138; i += 3)
    {
      v9 = word_1001DD968[i + 1];
      v10 = (double)word_1001DD968[i + 2];
      v11 = (double)v9 + v10 * -0.5;
      if (v11 >= a2)
        v12 = (double)v9 + v10 * -0.5;
      else
        v12 = a2;
      v13 = v11 + v10;
      if (v13 >= v7)
        v13 = a2 + a3;
      if (v12 < v13)
        objc_msgSend(v6, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", word_1001DD968[i]));
    }
    v14 = 0;
  }
  if (a1)
    *a1 = v14;
  return v6;
}

id sub_10007C1AC(double a1, double a2)
{
  id v4;
  uint64_t v5;
  double v6;
  int v7;
  double v8;
  double v9;
  double v10;

  v4 = +[NSMutableArray array](NSMutableArray, "array");
  v5 = 0;
  v6 = a1 + a2;
  do
  {
    v7 = word_1001DDB76[v5 + 1];
    v8 = (double)v7 + -10.0;
    if (v8 >= a1)
      v9 = (double)v7 + -10.0;
    else
      v9 = a1;
    v10 = v8 + 20.0;
    if (v10 >= v6)
      v10 = v6;
    if (v9 < v10)
      objc_msgSend(v4, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", word_1001DDB76[v5]));
    v5 += 5;
  }
  while (v5 != 295);
  return v4;
}

BOOL sub_10007C264(void *a1)
{
  id v2;
  id v3;
  int v4;
  uint64_t v5;
  void *i;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(a1);
        v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v7, "intValue") == 1
          || objc_msgSend(v7, "intValue") == 6
          || objc_msgSend(v7, "intValue") == 11)
        {
          ++v4;
        }
      }
      v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  return v4 > 2;
}

id sub_10007C38C(double a1, double a2)
{
  double v2;
  double v3;
  double v4;
  id v5;
  int v6;
  int v7;
  int v8;

  if (a1 >= 2401.5001)
    v2 = a1;
  else
    v2 = 2401.5001;
  v3 = fmin(a1 + a2, 2480.4999);
  if (v2 >= v3)
    return &__NSArray0__struct;
  v4 = v3 - v2;
  v5 = +[NSMutableArray array](NSMutableArray, "array");
  v6 = llround(v2);
  v7 = llround(v2 + v4);
  if (v6 - 2402 <= v7 - 2402)
  {
    v8 = v6 - 1;
    do
    {
      objc_msgSend(v5, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (v8 - 2401)));
      ++v8;
    }
    while (v7 != v8);
  }
  return v5;
}

id sub_10007C448(double a1, double a2, double a3, double a4)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  id v10;
  uint64_t v11;
  int v12;
  int v13;

  v5 = a3 + -0.5 + 0.0001;
  v6 = a4 + 0.5 + -0.0001 - v5;
  if (a1 >= v5)
    v7 = a1;
  else
    v7 = v5;
  v8 = a1 + a2;
  if (v8 >= v5 + v6)
    v8 = v5 + v6;
  if (v7 >= v8)
    return &__NSArray0__struct;
  v9 = v8 - v7;
  v10 = +[NSMutableArray array](NSMutableArray, "array");
  v11 = (int)((double)(int)llround(v7) - a3);
  v12 = (int)((double)(int)llround(v7 + v9) - a3);
  if ((int)v11 <= v12)
  {
    v13 = v12 + 1;
    do
    {
      objc_msgSend(v10, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11));
      v11 = (v11 + 1);
    }
    while (v13 != (_DWORD)v11);
  }
  return v10;
}

id sub_10007C544(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  _QWORD v7[4];
  BOOL v8;

  if ((int)a2 > 13 || (int)a1 > 13 || (int)a2 < (int)a1)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("invalid channelBegin(%d) channelEnd(%d)"), a1, a2);
    return &__NSArray0__struct;
  }
  else
  {
    v4 = sub_10007C38C((double)(5 * (int)a1 + 2397), (double)(5 * (int)a2 + 2417) - (double)(5 * (int)a1 + 2397));
    v5 = v4;
    if ((_DWORD)a1 == 1 || (_DWORD)a2 == 13)
    {
      v5 = objc_msgSend(v4, "mutableCopy");
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_10007C65C;
      v7[3] = &unk_1002035E0;
      v8 = (_DWORD)a1 == 1;
      objc_msgSend(v5, "sortUsingComparator:", v7);
    }
    else
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("abnormal WiFi blocklist channel configuration for OOB channelBegin(%d) channelEnd(%d)"), a1, a2);
    }
  }
  return v5;
}

uint64_t sub_10007C65C(uint64_t a1, void *a2, void *a3)
{
  signed int v5;
  signed int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = objc_msgSend(a2, "intValue");
  v6 = objc_msgSend(a3, "intValue");
  v7 = -1;
  if (*(_BYTE *)(a1 + 32))
    v7 = 1;
  v8 = 1;
  if (*(_BYTE *)(a1 + 32))
    v8 = -1;
  if (v5 <= v6)
    return v8;
  else
    return v7;
}

NSMutableArray *sub_10007C6B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSMutableArray *v4;
  uint64_t v5;
  int v6;

  v3 = a1;
  v4 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", (int)a2 - (int)a1 + 1);
  if ((_DWORD)v3)
  {
    if ((_DWORD)a2 == 78)
    {
      if ((int)v3 <= 78)
      {
        LODWORD(v5) = 79;
        do
        {
          v5 = (v5 - 1);
          -[NSMutableArray addObject:](v4, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v5));
        }
        while ((int)v5 > (int)v3);
      }
      return v4;
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("abnormal BT blocklist channel configuration for OOB channelBegin(%d) channelEnd(%d)"), v3, a2);
  }
  if ((int)a2 >= (int)v3)
  {
    v6 = a2 + 1;
    do
    {
      -[NSMutableArray addObject:](v4, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v3));
      v3 = (v3 + 1);
    }
    while (v6 != (_DWORD)v3);
  }
  return v4;
}

NSMutableData *sub_10007C79C(void *a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  int v6;
  NSMutableData *v7;
  uint64_t i;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;
  __int16 v17;

  v17 = 0x8000;
  v16 = 0;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v2 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v12;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v12 != v4)
          objc_enumerationMutation(a1);
        v6 = objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v5), "intValue");
        *((_BYTE *)&v16 + (v6 >> 3)) |= 1 << (v6 & 7);
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v3);
  }
  v7 = +[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", 10);
  for (i = 0; i != 10; ++i)
  {
    v10 = ~*((_BYTE *)&v16 + i);
    -[NSMutableData appendBytes:length:](v7, "appendBytes:length:", &v10, 1);
  }
  return v7;
}

NSMutableData *sub_10007C8F0(void *a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  id v9;
  id v10;
  uint64_t v11;
  void *j;
  int v13;
  NSMutableData *v14;
  uint64_t k;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  _QWORD v27[2];
  _BYTE v28[128];

  v4 = +[NSMutableArray array](NSMutableArray, "array");
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v23 != v7)
          objc_enumerationMutation(a1);
        objc_msgSend(v4, "addObject:", *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i));
      }
      v6 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
    }
    while (v6);
  }
  if ((int)a2 <= 127)
  {
    do
    {
      objc_msgSend(v4, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2));
      a2 = (a2 + 1);
    }
    while ((_DWORD)a2 != 128);
  }
  v27[0] = 0;
  v27[1] = 0;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v9 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v19;
    do
    {
      for (j = 0; j != v10; j = (char *)j + 1)
      {
        if (*(_QWORD *)v19 != v11)
          objc_enumerationMutation(v4);
        v13 = objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)j), "intValue");
        *((_BYTE *)v27 + (v13 >> 3)) |= 1 << (~(_BYTE)v13 & 7);
      }
      v10 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
    }
    while (v10);
  }
  v14 = +[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", 16);
  for (k = 0; k != 16; ++k)
  {
    v17 = ~*((_BYTE *)v27 + k);
    -[NSMutableData appendBytes:length:](v14, "appendBytes:length:", &v17, 1);
  }
  return v14;
}

NSMutableData *sub_10007CB14(void *a1)
{
  NSMutableData *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  unsigned __int8 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v2 = +[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", 10);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(a1);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v6);
        v9 = 0;
        v9 = objc_msgSend(v7, "unsignedCharValue");
        -[NSMutableData appendBytes:length:](v2, "appendBytes:length:", &v9, 1);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }
  return v2;
}

uint64_t sub_10007CC24(void *a1, int a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *i;
  unsigned int v8;
  BOOL v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  if (!a2)
    return 79 - objc_msgSend(a1, "count");
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (!v3)
    return 76;
  v4 = v3;
  v5 = *(_QWORD *)v12;
  v6 = 76;
  do
  {
    for (i = 0; i != v4; i = (char *)i + 1)
    {
      if (*(_QWORD *)v12 != v5)
        objc_enumerationMutation(a1);
      v8 = objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i), "intValue");
      if (v8)
        v9 = v8 == 24;
      else
        v9 = 1;
      if (!v9 && v8 != 78)
        v6 = (v6 - 1);
    }
    v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  }
  while (v4);
  return v6;
}

NSMutableArray *sub_10007D19C(int a1, unsigned int a2, unsigned int a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  id v12;
  id v13;
  uint64_t v14;
  void *j;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  if (a2 <= a3 && (a2 - 1) <= 0xE8u && (a3 - 1) <= 0xE8u && a1)
  {
    v5 = +[NSMutableArray array](NSMutableArray, "array");
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v6 = objc_msgSend(&off_100241E20, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v18;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v18 != v8)
            objc_enumerationMutation(&off_100241E20);
          v10 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
          if ((int)objc_msgSend(v10, "intValue") >= (int)a2 && (int)objc_msgSend(v10, "intValue") <= (int)a3)
            objc_msgSend(v5, "addObject:", v10);
        }
        v7 = objc_msgSend(&off_100241E20, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      }
      while (v7);
    }
    return (NSMutableArray *)v5;
  }
  if (a2 > a3 || (a2 - 1) > 0xCu || (a3 - 1) > 0xCu)
  {
    v5 = 0;
    if (a2 <= a3 && (a2 - 32) <= 0x8Du && (a3 - 32) <= 0x8Du)
    {
      v5 = +[NSMutableArray array](NSMutableArray, "array");
      v17 = 0u;
      v18 = 0u;
      v19 = 0u;
      v20 = 0u;
      v12 = objc_msgSend(&off_100241E38, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      if (v12)
      {
        v13 = v12;
        v14 = *(_QWORD *)v18;
        do
        {
          for (j = 0; j != v13; j = (char *)j + 1)
          {
            if (*(_QWORD *)v18 != v14)
              objc_enumerationMutation(&off_100241E38);
            v16 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)j);
            if ((int)objc_msgSend(v16, "intValue") >= (int)a2 && (int)objc_msgSend(v16, "intValue") <= (int)a3)
              objc_msgSend(v5, "addObject:", v16);
          }
          v13 = objc_msgSend(&off_100241E38, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
        }
        while (v13);
      }
    }
    return (NSMutableArray *)v5;
  }
  return sub_100088E38(a2, a3);
}

const char *sub_10007E508(unsigned int a1)
{
  if (a1 <= 0xE)
    return off_100203990[a1];
  else
    return "<ISSUE_TYPE_INVALID>";
}

const char *sub_100082BCC(unsigned int a1)
{
  unsigned int v2;
  char **v3;
  char **v4;

  if (a1 > 0xD2)
    return "<ISSUE_BAND_INVALID: beyond the range>";
  v2 = a1 - 200;
  if (a1 >= 0xC8)
  {
    v3 = off_100203910;
LABEL_7:
    v4 = &v3[v2];
    return *v4;
  }
  v2 = a1 - 100;
  if (a1 - 100 <= 0x10)
  {
    v3 = off_100203888;
    goto LABEL_7;
  }
  if (a1 <= 0x1B)
  {
    v4 = &off_1002037A8[a1];
    return *v4;
  }
  return "<ISSUE_BAND_INVALID: Negative number.>";
}

const char *sub_100082C38(unsigned int a1)
{
  if (a1 <= 4)
    return off_100203968[a1];
  else
    return "<ISSUE_PRIORITY_INVALID>";
}

int64_t sub_100083934(id a1, id a2, id a3)
{
  int v4;

  v4 = objc_msgSend(a2, "intValue");
  if (v4 > (int)objc_msgSend(a3, "intValue"))
    return 1;
  else
    return -1;
}

int64_t sub_100083F58(id a1, id a2, id a3)
{
  int v4;

  v4 = objc_msgSend(a2, "intValue");
  if (v4 > (int)objc_msgSend(a3, "intValue"))
    return 1;
  else
    return -1;
}

int64_t sub_100084350(id a1, id a2, id a3)
{
  int v4;

  v4 = objc_msgSend(a2, "intValue");
  if (v4 > (int)objc_msgSend(a3, "intValue"))
    return 1;
  else
    return -1;
}

int64_t sub_1000850FC(id a1, id a2, id a3)
{
  int v4;

  v4 = objc_msgSend(a2, "intValue");
  if (v4 > (int)objc_msgSend(a3, "intValue"))
    return 1;
  else
    return -1;
}

int64_t sub_10008589C(id a1, id a2, id a3)
{
  int v4;

  v4 = objc_msgSend(a2, "intValue");
  if (v4 > (int)objc_msgSend(a3, "intValue"))
    return 1;
  else
    return -1;
}

int64_t sub_1000861D0(id a1, id a2, id a3)
{
  int v4;

  v4 = objc_msgSend(a2, "intValue");
  if (v4 > (int)objc_msgSend(a3, "intValue"))
    return 1;
  else
    return -1;
}

int64_t sub_100086538(id a1, id a2, id a3)
{
  int v4;

  v4 = objc_msgSend(a2, "intValue");
  if (v4 > (int)objc_msgSend(a3, "intValue"))
    return 1;
  else
    return -1;
}

int64_t sub_100086838(id a1, id a2, id a3)
{
  int v4;

  v4 = objc_msgSend(a2, "intValue");
  if (v4 > (int)objc_msgSend(a3, "intValue"))
    return 1;
  else
    return -1;
}

int64_t sub_100086B68(id a1, id a2, id a3)
{
  int v4;

  v4 = objc_msgSend(a2, "intValue");
  if (v4 > (int)objc_msgSend(a3, "intValue"))
    return 1;
  else
    return -1;
}

int64_t sub_1000879BC(id a1, NSNumber *a2, NSNumber *a3)
{
  return -[NSNumber compare:](a2, "compare:", a3);
}

id sub_100087E78(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = objc_msgSend(a3, "isEqual:", &__kCFBooleanTrue);
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", a3, a2);
  return result;
}

id sub_100087ED4(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = objc_msgSend(a3, "isEqual:", &__kCFBooleanTrue);
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", a3, a2);
  return result;
}

const char *sub_100088E14(unsigned int a1)
{
  if (a1 <= 3)
    return off_100203A08[a1];
  else
    return "<ANTENNA_COMBINATION_INVALID>";
}

NSMutableArray *sub_100088E38(unsigned int a1, unsigned int a2)
{
  unsigned int v3;
  NSMutableArray *v4;

  v3 = a1;
  v4 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", a2 - (unint64_t)a1 + 1);
  if (v3 <= a2)
  {
    do
      -[NSMutableArray addObject:](v4, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v3++));
    while (a2 >= v3);
  }
  return v4;
}

NSData *sub_1000896B4(uint64_t a1, uint64_t a2)
{
  NSBundle *v4;
  NSURL *v5;
  NSData *result;
  const __CFString *v7;

  v4 = +[NSBundle bundleWithPath:](NSBundle, "bundleWithPath:", CFSTR("/System/Library/PrivateFrameworks/WirelessCoexManager.framework"));
  if (v4)
  {
    v5 = -[NSBundle URLForResource:withExtension:](v4, "URLForResource:withExtension:", a1, a2);
    if (v5)
    {
      result = -[NSFileManager contentsAtPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "contentsAtPath:", -[NSURL path](v5, "path"));
      if (result)
        return result;
      v7 = CFSTR("No contents for resource '%@.%@'");
    }
    else
    {
      v7 = CFSTR("No resource found for '%@.%@'");
    }
  }
  else
  {
    v7 = CFSTR("Bundle not found for resource '%@.%@'");
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 18, v7, a1, a2);
  return 0;
}

void sub_100089A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100089B78(uint64_t a1, void *a2, uint64_t a3)
{
  __objc2_class **p_superclass;
  id v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  NSMutableDictionary *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  void *j;
  uint64_t v24;
  _QWORD v25[5];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  _BYTE v35[128];

  p_superclass = WRM_SCService.superclass;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellularThroughput: Download task starting"));
  v7 = objc_msgSend(a2, "fileSize");
  objc_msgSend(a2, "speed");
  v9 = v8;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "stopMetadataCollection");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = 0;
  if (a3)
  {
    v10 = *(_QWORD *)(a1 + 40);
    if (v10)
      (*(void (**)(uint64_t, const __CFString *))(v10 + 16))(v10, CFSTR("NO"));
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellularThroughput: Download task errored out"));
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellularThroughput: Download task completed, downloaded %u bytes in %f seconds, throughput %f Mbps"), v7, (double)(8 * (int)v7) / (v9 * 1000000.0), *(_QWORD *)&v9);
    v11 = *(_QWORD *)(a1 + 40);
    if (v11)
      (*(void (**)(uint64_t, const __CFString *))(v11 + 16))(v11, CFSTR("YES"));
    v12 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "getDataForCoreAnalytics"));
    if (v12)
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = +[WRM_BWEvalManager WRM_BWEvalManagerSingleton](WRM_BWEvalManager, "WRM_BWEvalManagerSingleton");
      v13 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "getSpeedTestMetrics");
      v30 = 0u;
      v31 = 0u;
      v32 = 0u;
      v33 = 0u;
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
      if (v14)
      {
        v15 = v14;
        v16 = *(_QWORD *)v31;
        do
        {
          for (i = 0; i != v15; i = (char *)i + 1)
          {
            if (*(_QWORD *)v31 != v16)
              objc_enumerationMutation(v13);
            v18 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i);
            v19 = objc_msgSend(v13, "objectForKey:", v18);
            NSLog(CFSTR("CellularThroughput metrics from BWEstimator: key=%@ value=%@"), v18, v19);
            -[NSMutableDictionary setObject:forKey:](v12, "setObject:forKey:", v19, objc_msgSend(&off_100248838, "objectForKey:", v18));
          }
          v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
        }
        while (v15);
      }
      NSLog(CFSTR("CellularThroughput flattenedDictionary dictionary count: %lu"), -[NSMutableDictionary count](v12, "count"));
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v20 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:](v12, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
      p_superclass = (__objc2_class **)(WRM_SCService + 8);
      if (v20)
      {
        v21 = v20;
        v22 = *(_QWORD *)v27;
        do
        {
          for (j = 0; j != v21; j = (char *)j + 1)
          {
            if (*(_QWORD *)v27 != v22)
              objc_enumerationMutation(v12);
            NSLog(CFSTR("CellularThroughput flattenedDictionary dictionary from speed test: key=%@ value=%@"), *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)j), -[NSMutableDictionary valueForKey:](v12, "valueForKey:", *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)j)));
          }
          v21 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:](v12, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
        }
        while (v21);
      }
    }
    else
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CellularThroughput: Unable to save to CoreAnalytics: flattenedDictionary dictonary returned from NPTKit is empty"));
      v24 = *(_QWORD *)(a1 + 40);
      if (v24)
        (*(void (**)(uint64_t, const __CFString *))(v24 + 16))(v24, CFSTR("NO"));
    }
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_100089F48;
    v25[3] = &unk_100203A30;
    v25[4] = v12;
    AnalyticsSendEventLazy(CFSTR("com.apple.wifiqa.speed.throughput"), v25);
    objc_msgSend(p_superclass + 279, "logLevel:message:", 22, CFSTR("CellularThroughput: save results to CoreAnalytics"));
    -[NSMutableDictionary removeAllObjects](v12, "removeAllObjects");

  }
}

NSDictionary *sub_100089F48(uint64_t a1)
{
  return +[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", *(_QWORD *)(a1 + 32));
}

void sub_100089FA8(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_100089FB8(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

Class sub_100089FC4(uint64_t a1)
{
  Class result;

  sub_10008A018();
  result = objc_getClass("NPTPerformanceTestConfiguration");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_10012E984();
  qword_1002711D8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void sub_10008A018()
{
  void *v0;
  __int128 v1;
  uint64_t v2;

  v0 = 0;
  if (!qword_1002711D0)
  {
    v1 = off_100203A78;
    v2 = 0;
    qword_1002711D0 = _sl_dlopen(&v1, &v0);
  }
  if (!qword_1002711D0)
    sub_10012E9E8(&v0);
  if (v0)
    free(v0);
}

Class sub_10008A0BC(uint64_t a1)
{
  Class result;

  sub_10008A018();
  result = objc_getClass("NPTPerformanceTest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_10012EA4C();
  qword_1002711E0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

id sub_10008A348(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleAADeviceFound:", a2);
}

id sub_10008A354(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleAADeviceLost:", a2);
}

id sub_10008A360(uint64_t a1, uint64_t a2)
{
  id result;
  uint64_t v4;
  NSObject *v5;
  _QWORD handler[5];
  _QWORD v7[4];
  uint64_t v8;
  _QWORD v9[4];
  uint64_t v10;

  if (!a2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("BTController initial AudioAccessoryDevice Activated Successfully"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("BTController initial AudioAccessoryDevice Error: %@"), a2);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 20), "invalidate");

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 20) = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 20) = objc_alloc_init((Class)AADeviceManager);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 20), "setDispatchQueue:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 28));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10008A504;
  v9[3] = &unk_100203A98;
  v10 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(v10 + 20), "setDeviceFoundHandler:", v9);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10008A510;
  v7[3] = &unk_100203A98;
  v8 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(v8 + 20), "setDeviceLostHandler:", v7);
  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("BTController initial activation was unsuccessful"));
  if (dword_100270CB0 == -1)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(NSObject **)(v4 + 28);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10008A51C;
    handler[3] = &unk_100201FD0;
    handler[4] = v4;
    return (id)notify_register_dispatch("com.apple.AudioAccessory.daemonStarted", &dword_100270CB0, v5, handler);
  }
  return result;
}

id sub_10008A504(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleAADeviceFound:", a2);
}

id sub_10008A510(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleAADeviceLost:", a2);
}

id sub_10008A51C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 20), "activateWithCompletion:", &stru_100203AD8);
}

void sub_10008A538(id a1, NSError *a2)
{
  if (a2)
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("BTController Register AudioAccessoryDevice Error: %@"), a2);
  else
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("BTController Register AudioAccessoryDevice Activated Successfully"));
}

NSDictionary *sub_10008CB84(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];
  _QWORD v5[3];

  v2 = a1[5];
  v5[0] = a1[4];
  v4[0] = CFSTR("deviceEnumeration");
  v4[1] = CFSTR("duration");
  v5[1] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v2);
  v4[2] = CFSTR("percentIn2G");
  v5[2] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1[6]);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 3);
}

NSDictionary *sub_10008CE80(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[8];
  _QWORD v5[8];

  v2 = a1[5];
  v5[0] = a1[4];
  v4[0] = CFSTR("profileName");
  v4[1] = CFSTR("durationMinutes");
  v5[1] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v2);
  v4[2] = CFSTR("btDurPercent");
  v5[2] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1[6]);
  v4[3] = CFSTR("hybridPercent");
  v5[3] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1[7]);
  v4[4] = CFSTR("parallelPercent");
  v5[4] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1[8]);
  v4[5] = CFSTR("btDurAirPercent");
  v5[5] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1[9]);
  v4[6] = CFSTR("wlrssiCoexAvg");
  v5[6] = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", a1[10]);
  v4[7] = CFSTR("btrssiCoexAvg");
  v5[7] = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", a1[11]);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 8);
}

xpc_object_t sub_100090BDC(uint64_t a1)
{
  xpc_object_t value;
  void *v3;
  id v4;
  uint64_t uint64;
  xpc_object_t result;
  double v7;
  double v8;
  id v9;
  double v10;
  double v11;
  double v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  id v34;

  value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 32), "kMessageArgs");
  if (!value)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 0, CFSTR("handleBTMetricsRpt: Error Getting BT metrics!!!"));
  v3 = value;
  v4 = objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "getiRATConfigController");
  if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReport_Active_PHY"))
  {
    uint64 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReport_Active_PHY");
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "setMActivePhyValid:", 0);
    objc_msgSend(*(id *)(a1 + 40), "setMActivePhy:", 0);
    uint64 = 0;
  }
  objc_msgSend(*(id *)(a1 + 40), "mActivePhy");
  objc_msgSend(*(id *)(a1 + 40), "setMActivePhy:", uint64);
  objc_msgSend(*(id *)(a1 + 40), "setMActivePhyValid:", 1);
  objc_msgSend(*(id *)(a1 + 40), "setMNumberofSamples:", (char *)objc_msgSend(*(id *)(a1 + 40), "mNumberofSamples") + 1);
  if (objc_msgSend(*(id *)(a1 + 40), "mActivePhy") == (id)2)
  {
    if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReport_Classic_RSSI"))
    {
      objc_msgSend(*(id *)(a1 + 40), "setMClassicRssi:", 128 - (xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReport_Classic_RSSI") & 0x7F));
      objc_msgSend(*(id *)(a1 + 40), "mMovingAvgRSSI");
      v8 = v7;
      v9 = objc_msgSend(*(id *)(a1 + 40), "mClassicRssi");
      if (v8 == 128.0)
      {
        v10 = (double)(unint64_t)v9;
LABEL_17:
        objc_msgSend(*(id *)(a1 + 40), "setMMovingAvgRSSI:", v10);
        goto LABEL_18;
      }
      if (v9 != (id)128)
      {
        v15 = (double)((unint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum") - 1);
        objc_msgSend(*(id *)(a1 + 40), "mMovingAvgRSSI");
        v17 = (double)(unint64_t)objc_msgSend(*(id *)(a1 + 40), "mClassicRssi") + v15 * v16;
        v10 = v17 / (double)(uint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum");
        goto LABEL_17;
      }
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "setMClassicRssi:", 128);
    }
LABEL_18:
    if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReportClassicSuccessfulTxCount"))
    {
      v18 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReportClassicSuccessfulTxCount");
      objc_msgSend(*(id *)(a1 + 40), "setMClassicSuccessfulTxCount:", v18);
      objc_msgSend(*(id *)(a1 + 40), "setMMovingAvgSuccessfulTxCount:", (v18+ (_QWORD)objc_msgSend(*(id *)(a1 + 40), "mMovingAvgSuccessfulTxCount")* ((uint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum") - 1))/ (unint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum"));
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "setMClassicSuccessfulTxCount:", 0);
    }
    if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReportClassicReTxCount"))
    {
      v19 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReportClassicReTxCount");
      objc_msgSend(*(id *)(a1 + 40), "setMClassicReTxCount:", v19);
      objc_msgSend(*(id *)(a1 + 40), "setMMovingAvgReTxCount:", (v19+ (_QWORD)objc_msgSend(*(id *)(a1 + 40), "mMovingAvgReTxCount")* ((uint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum") - 1))/ (unint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum"));
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "setMClassicReTxCount:", 0);
    }
    if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReportClassicSuccessfulRxCount"))
    {
      v20 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReportClassicSuccessfulRxCount");
      objc_msgSend(*(id *)(a1 + 40), "setMClassicSuccessfulRxCount:", v20);
      objc_msgSend(*(id *)(a1 + 40), "setMMovingAvgSuccessfulRxCount:", (v20+ (_QWORD)objc_msgSend(*(id *)(a1 + 40), "mMovingAvgSuccessfulRxCount")* ((uint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum") - 1))/ (unint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum"));
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "setMClassicSuccessfulRxCount:", 0);
    }
    if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReportClassicRxErrorCount"))
    {
      v21 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReportClassicRxErrorCount");
      objc_msgSend(*(id *)(a1 + 40), "setMClassicRxErrorCount:", v21);
      objc_msgSend(*(id *)(a1 + 40), "setMMovingAvgRxErrorCount:", (v21+ (_QWORD)objc_msgSend(*(id *)(a1 + 40), "mMovingAvgRxErrorCount")* ((uint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum") - 1))/ (unint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum"));
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "setMClassicRxErrorCount:", 0);
    }
    if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReportClassicCoexDenialCount"))
    {
      v22 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReportClassicCoexDenialCount");
      v23 = *(void **)(a1 + 40);
    }
    else
    {
      v23 = *(void **)(a1 + 40);
      v22 = 0;
    }
    objc_msgSend(v23, "setMClassicCoexDenialCount:", v22);
    goto LABEL_54;
  }
  if (objc_msgSend(*(id *)(a1 + 40), "mActivePhy") == (id)1)
  {
    if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReport_LE_RSSI"))
    {
      objc_msgSend(*(id *)(a1 + 40), "setMLeRssi:", 128 - (xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReport_LE_RSSI") & 0x7F));
      objc_msgSend(*(id *)(a1 + 40), "mMovingAvgRSSI");
      v12 = v11;
      v13 = objc_msgSend(*(id *)(a1 + 40), "mLeRssi");
      if (v12 == 128.0)
      {
        v14 = (double)(unint64_t)v13;
LABEL_37:
        objc_msgSend(*(id *)(a1 + 40), "setMMovingAvgRSSI:", v14);
        goto LABEL_38;
      }
      if (v13 != (id)128)
      {
        v24 = (double)((unint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum") - 1);
        objc_msgSend(*(id *)(a1 + 40), "mMovingAvgRSSI");
        v26 = (double)(unint64_t)objc_msgSend(*(id *)(a1 + 40), "mLeRssi") + v24 * v25;
        v14 = v26 / (double)(uint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum");
        goto LABEL_37;
      }
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "setMLeRssi:", 128);
    }
LABEL_38:
    if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReportLeSuccessfulTxCount"))
    {
      v27 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReportLeSuccessfulTxCount");
      objc_msgSend(*(id *)(a1 + 40), "setMLeSuccessfulTxCount:", v27);
      objc_msgSend(*(id *)(a1 + 40), "setMMovingAvgSuccessfulTxCount:", (v27+ (_QWORD)objc_msgSend(*(id *)(a1 + 40), "mMovingAvgSuccessfulTxCount")* ((uint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum") - 1))/ (unint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum"));
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "setMLeSuccessfulTxCount:", 0);
    }
    if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReportLeReTxCount"))
    {
      v28 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReportLeReTxCount");
      objc_msgSend(*(id *)(a1 + 40), "setMLeReTxCount:", v28);
      objc_msgSend(*(id *)(a1 + 40), "setMMovingAvgReTxCount:", (v28+ (_QWORD)objc_msgSend(*(id *)(a1 + 40), "mMovingAvgReTxCount")* ((uint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum") - 1))/ (unint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum"));
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "setMLeReTxCount:", 0);
    }
    if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReportLeSuccessfulRxCount"))
    {
      v29 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReportLeSuccessfulRxCount");
      objc_msgSend(*(id *)(a1 + 40), "setMLeSuccessfulRxCount:", v29);
      objc_msgSend(*(id *)(a1 + 40), "setMMovingAvgSuccessfulRxCount:", (v29+ (_QWORD)objc_msgSend(*(id *)(a1 + 40), "mMovingAvgSuccessfulRxCount")* ((uint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum") - 1))/ (unint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum"));
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "setMLeSuccessfulRxCount:", 0);
    }
    if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReportLeRxErrorCount"))
    {
      v30 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReportLeRxErrorCount");
      objc_msgSend(*(id *)(a1 + 40), "setMLeRxErrorCount:", v30);
      objc_msgSend(*(id *)(a1 + 40), "setMMovingAvgRxErrorCount:", (v30+ (_QWORD)objc_msgSend(*(id *)(a1 + 40), "mMovingAvgRxErrorCount")* ((uint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum") - 1))/ (unint64_t)objc_msgSend(v4, "dataBtMovingAvgAlphaDenum"));
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "setMLeRxErrorCount:", 0);
    }
    if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReportLeCoexDenialCount"))
    {
      v31 = xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReportLeCoexDenialCount");
      v32 = *(void **)(a1 + 40);
    }
    else
    {
      v32 = *(void **)(a1 + 40);
      v31 = 0;
    }
    objc_msgSend(v32, "setMLeCoexDenialCount:", v31);
  }
LABEL_54:
  if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReport_NonMagnetUtilization"))
    objc_msgSend(*(id *)(a1 + 40), "setMNonMagnetUtilization:", xpc_dictionary_get_double(v3, "kWCMBTMetricsReport_NonMagnetUtilization"));
  if (xpc_dictionary_get_value(v3, "kWCMBTMetricsReport_MagnetReportReason"))
  {
    objc_msgSend(*(id *)(a1 + 40), "setMMetricsReportReason:", xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReport_MagnetReportReason"));
    if (objc_msgSend(*(id *)(a1 + 40), "mMetricsReportReason"))
    {
      if (objc_msgSend(*(id *)(a1 + 40), "mMetricsReportReason") == (id)1)
      {
        v33 = "Classic disconnected";
      }
      else
      {
        v34 = objc_msgSend(*(id *)(a1 + 40), "mMetricsReportReason");
        v33 = "INVALID!!!";
        if (v34 == (id)2)
          v33 = "LE disconnected";
      }
    }
    else
    {
      v33 = "Periodic interval";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("Metric report reason is %s"), v33);
  }
  result = xpc_dictionary_get_value(v3, "kWCMBTMetricsReport_flushCount");
  if (result)
    return objc_msgSend(*(id *)(a1 + 40), "setMFlushCount:", xpc_dictionary_get_uint64(v3, "kWCMBTMetricsReport_flushCount"));
  return result;
}

id sub_10009142C(uint64_t a1)
{
  xpc_object_t value;
  void *v3;

  value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 32), "kMessageArgs");
  if (!value)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 0, CFSTR("handleBTPhyRpt: Error Getting Args"));
  v3 = value;
  if (xpc_dictionary_get_value(value, "kWCMBTPhyReport_LE_PHY_RATE"))
    objc_msgSend(*(id *)(a1 + 40), "setMBtPhyRate:", xpc_dictionary_get_uint64(v3, "kWCMBTPhyReport_LE_PHY_RATE"));
  if (xpc_dictionary_get_value(v3, "kWCMBTPhyReport_CLASSIC_PHY_RATE"))
    objc_msgSend(*(id *)(a1 + 40), "setMBtPhyRate:", xpc_dictionary_get_uint64(v3, "kWCMBTPhyReport_CLASSIC_PHY_RATE"));
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("BTMetrics: BtPhyRate %llu"), objc_msgSend(*(id *)(a1 + 40), "mBtPhyRate"));
}

void sub_1000939D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000939F0(uint64_t a1, void *a2)
{
  id v3;
  NSObject **WeakRetained;
  NSObject **v5;
  NSObject *v6;
  _QWORD block[4];
  id v8;
  NSObject **v9;
  id v10;

  v3 = a2;
  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = WeakRetained[4];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100093AC8;
    block[3] = &unk_100203D20;
    v8 = v3;
    v9 = v5;
    v10 = *(id *)(a1 + 32);
    dispatch_async(v6, block);

  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("ProximityLinkEval: ClientCBDeviceHandler: strongSelf does not exist"));
  }

}

void sub_100093AC8(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("ProximityLinkEval: ClientCBDeviceHandler: callback, initialized for CBDevice %@"), *(_QWORD *)(a1 + 32));
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "getRSSI");
  if ((_DWORD)v2 != -1)
  {
    v3 = v2;
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16))
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("ProximityLinkEval: ClientCBDeviceHandler: initializing mRSSIDict"));
      v4 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
      v5 = *(_QWORD *)(a1 + 48);
      v6 = *(void **)(v5 + 16);
      *(_QWORD *)(v5 + 16) = v4;

    }
    v17 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v3));
    objc_msgSend(v17, "setObject:forKey:", v7, CFSTR("btRssi"));

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "model"));
    objc_msgSend(v17, "setObject:forKey:", v8, CFSTR("model"));

    v9 = *(void **)(*(_QWORD *)(a1 + 40) + 16);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsDeviceID"));
    objc_msgSend(v9, "setObject:forKey:", v17, v10);

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsDeviceID"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "model"));
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("ProximityLinkEval: ClientCBDeviceHandler: RSSI Stats collected: DeviceID %@, Model %@, btRssi %d"), v11, v12, v3);

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "model"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "lowercaseString"));
    LODWORD(v9) = objc_msgSend(v14, "containsString:", CFSTR("iphone"));

    if ((_DWORD)v9)
    {
      v15 = *(void **)(*(_QWORD *)(a1 + 40) + 48);
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsDeviceID"));
      objc_msgSend(v15, "addObject:", v16);

    }
  }
}

id sub_100093E84(uint64_t a1)
{
  uint64_t v2;
  const __CFString *v3;
  void *v4;
  const __CFString *v5;
  void *v6;
  __CFString *v7;
  void *v8;
  void *v9;
  __CFString *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v17;
  __CFString *v18;
  __CFString *v19;
  void *v20;
  _QWORD v21[9];
  _QWORD v22[9];

  v21[0] = CFSTR("btRssi");
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForKey:"));
  if (v2)
    v3 = (const __CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForKey:", CFSTR("btRssi")));
  else
    v3 = CFSTR("UNKNOWN");
  v19 = (__CFString *)v3;
  v22[0] = v3;
  v22[1] = CFSTR("WiFi");
  v21[1] = CFSTR("linkType");
  v21[2] = CFSTR("phoneBatteryLife");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForKey:", CFSTR("batteryLife")));
  if (v4)
    v5 = (const __CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForKey:", CFSTR("batteryLife")));
  else
    v5 = CFSTR("UNKNOWN");
  v18 = (__CFString *)v5;
  v22[2] = v5;
  v21[3] = CFSTR("signalBar");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForKey:", CFSTR("signalStrength")));
  if (v6)
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForKey:", CFSTR("signalStrength")));
  else
    v7 = CFSTR("UNKNOWN");
  v22[3] = v7;
  v21[4] = CFSTR("ratType");
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForKey:", CFSTR("networkType")));
  v20 = (void *)v2;
  if (v8)
  {
    v9 = *(void **)(a1 + 40);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForKey:", CFSTR("networkType")));
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "nameForNetworkType:"));
  }
  else
  {
    v10 = CFSTR("UNKNOWN_RADIO");
  }
  v22[4] = v10;
  v21[5] = CFSTR("wifiRssi");
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 56)));
  v22[5] = v11;
  v21[6] = CFSTR("wifiSnr");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 60)));
  v22[6] = v12;
  v21[7] = CFSTR("cca");
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 64)));
  v22[7] = v13;
  v21[8] = CFSTR("devicePointOfInterest");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 68)));
  v22[8] = v14;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 9));

  if (v8)
  {

  }
  if (v6)

  if (v4)
  if (v20)

  return v15;
}

void sub_100094670(uint64_t a1)
{
  void *i;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id obj;
  uint64_t v24;
  id v25;
  _QWORD *WeakRetained;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    obj = *(id *)(a1 + 32);
    v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    if (v25)
    {
      v24 = *(_QWORD *)v28;
      do
      {
        for (i = 0; i != v25; i = (char *)i + 1)
        {
          if (*(_QWORD *)v28 != v24)
            objc_enumerationMutation(obj);
          v3 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
          v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
          v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "deviceName"));
          objc_msgSend(v4, "setObject:forKey:", v5, CFSTR("deviceName"));

          v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "model"));
          objc_msgSend(v4, "setObject:forKey:", v6, CFSTR("model"));

          v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v3, "networkType")));
          objc_msgSend(v4, "setObject:forKey:", v7, CFSTR("networkType"));

          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "batteryLife"));
          objc_msgSend(v4, "setObject:forKey:", v8, CFSTR("batteryLife"));

          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "signalStrength"));
          objc_msgSend(v4, "setObject:forKey:", v9, CFSTR("signalStrength"));

          v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v3, "group")));
          objc_msgSend(v4, "setObject:forKey:", v10, CFSTR("group"));

          v11 = (void *)WeakRetained[3];
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "deviceIdentifier"));
          objc_msgSend(v11, "setObject:forKey:", v4, v12);

          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "deviceIdentifier"));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "deviceName"));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "model"));
          v16 = objc_msgSend(v3, "networkType");
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "batteryLife"));
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "signalStrength"));
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("ProximityLinkEval: session: PHS Stats collected: deviceID %@, deviceName %@, model %@, networkType %d, batteryLife %@, signalStrength %@, group %ld"), v13, v14, v15, v16, v17, v18, objc_msgSend(v3, "group"));

          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "model"));
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "lowercaseString"));
          LODWORD(v13) = objc_msgSend(v20, "containsString:", CFSTR("iphone"));

          if ((_DWORD)v13)
          {
            v21 = (void *)WeakRetained[6];
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "deviceIdentifier"));
            objc_msgSend(v21, "addObject:", v22);

          }
        }
        v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
      }
      while (v25);
    }

  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("ProximityLinkEval: session: strongSelf does not exist"));
  }

}

void sub_100094B84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100094CB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100094DF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100095090(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_100095234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_100095270(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("DataStoreManager: Writing to data store"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "persistentContainer"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "viewContext"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSEntityDescription insertNewObjectForEntityForName:inManagedObjectContext:](NSEntityDescription, "insertNewObjectForEntityForName:inManagedObjectContext:", CFSTR("CoreDataStore"), v3));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("cellID")));
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("cellID")));
    objc_msgSend(v4, "setCellID:", v6);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("bssid")));

  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("bssid")));
    objc_msgSend(v4, "setBssid:", v8);

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("cell_backhaul")));

  if (v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("cell_backhaul")));
    objc_msgSend(v4, "setCell_backhaul:", (int)objc_msgSend(v10, "intValue"));

  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("wifi_backhaul")));

  if (v11)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("wifi_backhaul")));
    objc_msgSend(v4, "setWifi_backhaul:", (int)objc_msgSend(v12, "intValue"));

  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("tcpRTT")));

  if (v13)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("tcpRTT")));
    objc_msgSend(v4, "setTcpRTT:", (int)objc_msgSend(v14, "intValue"));

  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "persistentContainer"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "viewContext"));
  v19 = 0;
  objc_msgSend(v16, "save:", &v19);
  v17 = v19;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("DataStoreManager: Write: No Error saving context"));
  v18 = *(_QWORD *)(a1 + 48);
  if (v18)
    (*(void (**)(uint64_t, uint64_t))(v18 + 16))(v18, 1);

}

void sub_1000954FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100095764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1000957B0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[4];
  id v19;
  _QWORD v20[5];
  _QWORD v21[5];

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 48)));
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100095C48;
  v18[3] = &unk_100203E30;
  v19 = *(id *)(a1 + 56);
  objc_msgSend(v2, "fetchObjectsForCellID:completionHandler:", v3, v18);

  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  if (v4)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("DataStoreManager: number of fecthed objects: %lu"), objc_msgSend(v4, "count"));
    if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "count"))
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("DataStoreManager: The given cellID not found to update. Writing this record to the data store."));
      objc_msgSend(*(id *)(a1 + 32), "write:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));
      goto LABEL_13;
    }
    if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "count") == (id)1)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectAtIndex:", 0));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKey:", CFSTR("cellID")));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKey:", CFSTR("bssid")));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKey:", CFSTR("cell_backhaul")));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKey:", CFSTR("wifi_backhaul")));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKey:", CFSTR("tcpRTT")));
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("DataStoreManager: the current record for given cellID is %@, %@, %d, %d, %d"), v13, v14, objc_msgSend(v15, "intValue"), objc_msgSend(v16, "intValue"), objc_msgSend(v17, "intValue"));
      v20[0] = CFSTR("cellID");
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKey:", CFSTR("cellID")));
      v21[0] = v6;
      v20[1] = CFSTR("bssid");
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKey:", CFSTR("bssid")));
      v21[1] = v7;
      v20[2] = CFSTR("cell_backhaul");
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKey:", CFSTR("cell_backhaul")));
      v21[2] = v8;
      v20[3] = CFSTR("wifi_backhaul");
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKey:", CFSTR("wifi_backhaul")));
      v21[3] = v9;
      v20[4] = CFSTR("tcpRTT");
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKey:"));
      v21[4] = v10;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v21, v20, 5));

      if (objc_msgSend(v11, "isEqualToDictionary:", *(_QWORD *)(a1 + 40)))
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("DataStoreManager: Update: No change in field values"));
      }
      else
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("DataStoreManager: Update record for given bssid"));
        objc_msgSend(*(id *)(a1 + 32), "write:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));
      }

      goto LABEL_13;
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("DataStoreManager: Update: Number of records > 1 for given bssid to update"));
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("DataStoreManager: No Records found to update"));
  }
  v12 = *(_QWORD *)(a1 + 56);
  if (v12)
    (*(void (**)(uint64_t, _QWORD))(v12 + 16))(v12, 0);
LABEL_13:

}

void sub_100095B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

uint64_t sub_100095C48(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
  {
    result = *(_QWORD *)(result + 32);
    if (result)
      return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  }
  return result;
}

void sub_100095D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_100095D98(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[5];
  id v21;
  _QWORD v22[5];
  _QWORD v23[5];

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_10009617C;
  v20[3] = &unk_100203E80;
  v20[4] = v2;
  v21 = *(id *)(a1 + 48);
  objc_msgSend(v2, "fetchObjectsForCellID:completionHandler:", v3, v20);
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "count"))
  {
    if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "count") == (id)1)
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("DataStoreManager: Record for given cellID %@ found"), *(_QWORD *)(a1 + 40));
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "lastObject"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "valueForKey:", CFSTR("cellID")));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "valueForKey:", CFSTR("bssid")));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "valueForKey:", CFSTR("cell_backhaul")));
      v8 = objc_msgSend(v7, "intValue");
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "valueForKey:", CFSTR("wifi_backhaul")));
      v10 = objc_msgSend(v9, "intValue");
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "valueForKey:", CFSTR("tcpRTT")));
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("DataStoreManager: the current record for given cellID is %@, %@, %d, %d, %d"), v5, v6, v8, v10, objc_msgSend(v11, "intValue"));

      v12 = *(_QWORD *)(a1 + 48);
      if (v12)
      {
        v22[0] = CFSTR("cellID");
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "valueForKey:"));
        v23[0] = v13;
        v22[1] = CFSTR("bssid");
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "valueForKey:"));
        v23[1] = v14;
        v22[2] = CFSTR("cell_backhaul");
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "valueForKey:"));
        v23[2] = v15;
        v22[3] = CFSTR("wifi_backhaul");
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "valueForKey:"));
        v23[3] = v16;
        v22[4] = CFSTR("tcpRTT");
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "valueForKey:"));
        v23[4] = v17;
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v23, v22, 5));
        (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v18);

      }
      goto LABEL_10;
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("DataStoreManager: Number of records > 1 for given cellID %@"), *(_QWORD *)(a1 + 40));
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("DataStoreManager: The given cellID %@ not found"), *(_QWORD *)(a1 + 40));
  }
  v19 = *(_QWORD *)(a1 + 48);
  if (v19)
    (*(void (**)(uint64_t, _QWORD))(v19 + 16))(v19, 0);
LABEL_10:

}

void sub_1000960C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

uint64_t sub_10009617C(uint64_t result, int a2)
{
  if (!a2 || !*(_QWORD *)(*(_QWORD *)(result + 32) + 24))
  {
    result = *(_QWORD *)(result + 40);
    if (result)
      return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  }
  return result;
}

void sub_10009628C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NSDictionary *sub_100096C74(uint64_t a1)
{
  _QWORD v3[16];
  _QWORD v4[16];

  v3[0] = CFSTR("btConnectionCount");
  v4[0] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
  v3[1] = CFSTR("A2DPMaxDeviceCount");
  v4[1] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  v3[2] = CFSTR("ESCOMaxDeviceCount");
  v4[2] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
  v3[3] = CFSTR("LEAMaxDeviceCount");
  v4[3] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));
  v3[4] = CFSTR("LEMaxDeviceCount");
  v4[4] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
  v3[5] = CFSTR("SCOMaxDeviceCount");
  v4[5] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
  v3[6] = CFSTR("HIDMaxDeviceCount");
  v4[6] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40));
  v3[7] = CFSTR("LLAMaxDeviceCount");
  v4[7] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
  v3[8] = CFSTR("hasBtConnection");
  v4[8] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) != 0);
  v3[9] = CFSTR("hasA2DPDevice");
  v4[9] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) != 0);
  v3[10] = CFSTR("hasESCODevice");
  v4[10] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) != 0);
  v3[11] = CFSTR("hasLEADevice");
  v4[11] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) != 0);
  v3[12] = CFSTR("hasLEDevice");
  v4[12] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) != 0);
  v3[13] = CFSTR("hasSCODevice");
  v4[13] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) != 0);
  v3[14] = CFSTR("hasHIDDevice");
  v4[14] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) != 0);
  v3[15] = CFSTR("hasLLADevice");
  v4[15] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) != 0);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 16);
}

id sub_100097210()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_100271200;
  v7 = qword_100271200;
  if (!qword_100271200)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100097C9C;
    v3[3] = &unk_100201B40;
    v3[4] = &v4;
    sub_100097C9C((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000972B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000976C8()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_100271210;
  v7 = qword_100271210;
  if (!qword_100271210)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100097D94;
    v3[3] = &unk_100201B40;
    v3[4] = &v4;
    sub_100097D94((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100097768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000978F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100097C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_100097C9C(uint64_t a1)
{
  Class result;

  sub_100097CF0();
  result = objc_getClass("MLFeatureValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_10012EAF4();
  qword_100271200 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100097CF0()
{
  void *v0;
  __int128 v1;
  uint64_t v2;

  v0 = 0;
  if (!qword_100271208)
  {
    v1 = off_100203EA0;
    v2 = 0;
    qword_100271208 = _sl_dlopen(&v1, &v0);
  }
  if (!qword_100271208)
    sub_10012EB6C(&v0);
  if (v0)
    free(v0);
}

Class sub_100097D94(uint64_t a1)
{
  Class result;

  sub_100097CF0();
  result = objc_getClass("MLModel");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_10012EBE8();
  qword_100271210 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_100097DE8(uint64_t a1)
{
  Class result;

  sub_100097CF0();
  result = objc_getClass("MLPredictionOptions");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_10012EC60();
  qword_100271218 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_100097E3C(uint64_t a1)
{
  Class result;

  sub_100097CF0();
  result = objc_getClass("MLArrayBatchProvider");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_10012ECD8();
  qword_100271220 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

_QWORD *sub_100097E90(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  return a1 + 1;
}

uint64_t sub_100097E98(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4, a4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4, v7);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)8, v8);
  result = a1 + 16;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a1 + 8);
  return result;
}

uint64_t sub_100097F08(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1 + 16;
}

uint64_t sub_100097F28()
{
  return 16;
}

uint64_t sub_100097F30(uint64_t *a1, int a2, uint64_t a3, unint64_t a4)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  *a1 = sub_100097E98(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)v5, a4);
  return v5[0];
}

void sub_100097F70(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100097F5CLL);
}

uint64_t sub_100097F80()
{
  return 19;
}

uint64_t *sub_100097F88(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 8);
  *result = v2 + 16;
  return result;
}

_DWORD *sub_100097FB0(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t sub_100097FBC(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4, a4);
  result = *(unsigned int *)v5;
  *a1 = (tlv *)((char *)v5 + 4);
  return result;
}

void sub_100097FF4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100097FE8);
}

_DWORD **sub_100098008(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t sub_10009801C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4, a4);
  result = *(unsigned int *)v5;
  *a1 = (tlv *)((char *)v5 + 4);
  return result;
}

void sub_100098054(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100098048);
}

std::string::value_type *sub_100098068(tlv *a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  tlv *v6;
  unsigned int v7;
  unint64_t v8;
  std::string::value_type *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::string::value_type *result;

  v6 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1, a4);
  v7 = *(unsigned __int8 *)v6;
  v6 = (tlv *)((char *)v6 + 1);
  tlv::throwIfNotEnoughBytes(v6, a2, (const unsigned __int8 *)v7, v8);
  v9 = (char *)v6 + v7;
  sub_10009936C((std::string *)a3, (std::string::value_type *)v6, v9, v7);
  tlv::throwIfNotEnoughBytes((tlv *)v9, a2, (const unsigned __int8 *)8, v10);
  *(_QWORD *)(a3 + 24) = *(_QWORD *)v9;
  tlv::throwIfNotEnoughBytes((tlv *)(v9 + 8), a2, (const unsigned __int8 *)4, v11);
  *(_DWORD *)(a3 + 32) = *((_DWORD *)v9 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(v9 + 12), a2, (const unsigned __int8 *)4, v12);
  *(_DWORD *)(a3 + 36) = *((_DWORD *)v9 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)(v9 + 16), a2, (const unsigned __int8 *)8, v13);
  *(_QWORD *)(a3 + 40) = *((_QWORD *)v9 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(v9 + 24), a2, (const unsigned __int8 *)8, v14);
  *(_QWORD *)(a3 + 48) = *((_QWORD *)v9 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)(v9 + 32), a2, (const unsigned __int8 *)1, v15);
  result = v9 + 33;
  *(_BYTE *)(a3 + 56) = v9[32] != 0;
  return result;
}

_BYTE *sub_10009816C(_BYTE *a1, _BYTE *a2)
{
  _BYTE *v2;
  uint64_t v3;
  _BYTE *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *result;

  v2 = a2;
  LOBYTE(v3) = a2[23];
  if ((v3 & 0x80u) != 0)
    v3 = *((_QWORD *)a2 + 1);
  *a1 = v3;
  v4 = a1 + 1;
  v5 = *((_QWORD *)a2 + 1);
  if ((char)a2[23] >= 0)
  {
    v6 = a2[23];
  }
  else
  {
    a2 = *(_BYTE **)a2;
    v6 = v5;
  }
  memcpy(a1 + 1, a2, v6);
  v7 = v2[23];
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)v2 + 1);
  v8 = &v4[v7];
  *(_QWORD *)v8 = *((_QWORD *)v2 + 3);
  *((_DWORD *)v8 + 2) = *((_DWORD *)v2 + 8);
  *((_DWORD *)v8 + 3) = *((_DWORD *)v2 + 9);
  *((_QWORD *)v8 + 2) = *((_QWORD *)v2 + 5);
  *((_QWORD *)v8 + 3) = *((_QWORD *)v2 + 6);
  result = v8 + 33;
  v8[32] = v2[56];
  return result;
}

uint64_t sub_100098210(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  return v1 + 34;
}

std::string::value_type *sub_10009822C@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  std::string::value_type *result;

  *(_OWORD *)((char *)a4 + 41) = 0u;
  a4[1] = 0u;
  a4[2] = 0u;
  *a4 = 0u;
  result = sub_100098068(*a1, (const unsigned __int8 *)*a1 + a2, (uint64_t)a4, a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_100098270(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100098264);
}

void sub_100098280(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10009829C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  return v1 + 37;
}

_BYTE *sub_1000982B8(_BYTE **a1, _BYTE *a2)
{
  _BYTE *result;

  result = sub_10009816C(*a1, a2);
  *a1 = result;
  return result;
}

std::string::value_type *sub_1000982E0(tlv *a1, const unsigned __int8 *a2, uint64_t *a3, unint64_t a4)
{
  std::string::value_type *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::value_type *result;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1, a4);
  v8 = *(unsigned __int8 *)a1;
  v7 = (char *)a1 + 1;
  sub_1000994C4(a3, v8);
  v10 = *a3;
  v11 = a3[1];
  while (1)
  {
    result = v7;
    if (v10 == v11)
      break;
    v7 = sub_100098068((tlv *)v7, a2, v10, v9);
    v10 += 64;
  }
  return result;
}

_BYTE *sub_100098348(_BYTE *a1, _DWORD *a2)
{
  _BYTE *result;
  _BYTE *v3;
  _BYTE *v4;

  *a1 = (a2[2] - *a2) >> 6;
  result = a1 + 1;
  v3 = *(_BYTE **)a2;
  v4 = (_BYTE *)*((_QWORD *)a2 + 1);
  while (v3 != v4)
  {
    result = sub_10009816C(result, v3);
    v3 += 64;
  }
  return result;
}

uint64_t sub_100098390(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 1;
  v3 = 0;
  do
  {
    v4 = *(unsigned __int8 *)(v1 + 23);
    if ((v4 & 0x80u) != 0)
      v4 = *(_QWORD *)(v1 + 8);
    v3 += v4 + 34;
    v1 += 64;
  }
  while (v1 != v2);
  return v3 + 1;
}

std::string::value_type *sub_1000983D8@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  std::string::value_type *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  result = sub_1000982E0(*a1, (const unsigned __int8 *)*a1 + a2, a4, a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_10009841C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10009840CLL);
}

void sub_10009842C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100099438((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100098444(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 4;
  v3 = 0;
  do
  {
    v4 = *(unsigned __int8 *)(v1 + 23);
    if ((v4 & 0x80u) != 0)
      v4 = *(_QWORD *)(v1 + 8);
    v3 += v4 + 34;
    v1 += 64;
  }
  while (v1 != v2);
  return v3 + 4;
}

_BYTE *sub_10009848C(_BYTE **a1, _DWORD *a2)
{
  _BYTE *result;

  result = sub_100098348(*a1, a2);
  *a1 = result;
  return result;
}

uint64_t sub_1000984B4(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4, a4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4, v7);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)8, v8);
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)8, v9);
  result = a1 + 24;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
  return result;
}

uint64_t sub_10009853C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1 + 24;
}

uint64_t sub_100098564()
{
  return 24;
}

uint64_t sub_10009856C@<X0>(uint64_t *a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  result = sub_1000984B4(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)a4, a3);
  *a1 = result;
  return result;
}

void sub_1000985A4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t sub_1000985B8()
{
  return 27;
}

uint64_t *sub_1000985C0(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(a2 + 16);
  *result = v2 + 24;
  return result;
}

uint64_t sub_1000985F0(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)8, a4);
  result = *(_QWORD *)v5;
  *a1 = (tlv *)((char *)v5 + 8);
  return result;
}

void sub_100098628(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10009861CLL);
}

uint64_t sub_10009863C(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4, a4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4, v7);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4, v8);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4, v9);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)2, v10);
  *(_WORD *)(a3 + 16) = *(_WORD *)(a1 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 18), a2, (const unsigned __int8 *)8, v11);
  *(_QWORD *)(a3 + 24) = *(_QWORD *)(a1 + 18);
  return a1 + 26;
}

uint64_t sub_1000986F4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 18) = *(_QWORD *)(a2 + 24);
  return a1 + 26;
}

uint64_t sub_10009872C()
{
  return 26;
}

uint64_t sub_100098734@<X0>(uint64_t *a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;

  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_WORD *)(a4 + 16) = 0;
  result = sub_10009863C(*a1, (const unsigned __int8 *)(*a1 + a2), a4, a3);
  *a1 = result;
  return result;
}

void sub_100098770(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t sub_100098784()
{
  return 29;
}

uint64_t *sub_10009878C(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(v2 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(v2 + 18) = *(_QWORD *)(a2 + 24);
  *result = v2 + 26;
  return result;
}

uint64_t sub_1000987CC(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4, a4);
  v7 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)4, v8);
  v9 = *((unsigned int *)v5 + 1);
  *a1 = (tlv *)((char *)v5 + 8);
  return (v9 << 32) | v7;
}

void sub_100098838(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100098820);
}

uint64_t sub_10009884C(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4, a4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1, v7);
  *(_BYTE *)(a3 + 4) = *(_BYTE *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)1, v8);
  *(_BYTE *)(a3 + 5) = *(_BYTE *)(a1 + 5);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)1, v9);
  *(_BYTE *)(a3 + 6) = *(_BYTE *)(a1 + 6);
  return a1 + 7;
}

uint64_t sub_1000988D4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  return a1 + 7;
}

uint64_t sub_100098900(uint64_t *a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5;

  *(_DWORD *)((char *)&v5 + 3) = 0;
  LODWORD(v5) = 0;
  *a1 = sub_10009884C(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)&v5, a4);
  return v5;
}

void sub_100098944(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100098930);
}

uint64_t sub_100098954()
{
  return 10;
}

uint64_t *sub_10009895C(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  *(_BYTE *)(v2 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(v2 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(v2 + 6) = *(_BYTE *)(a2 + 6);
  *result = v2 + 7;
  return result;
}

uint64_t sub_10009898C(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t v8;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4, a4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1, v7);
  *(_BYTE *)(a3 + 4) = *(_BYTE *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)1, v8);
  *(_BYTE *)(a3 + 5) = *(_BYTE *)(a1 + 5);
  return a1 + 6;
}

uint64_t sub_1000989FC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  return a1 + 6;
}

uint64_t sub_100098A20(uint64_t *a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5;

  LODWORD(v5) = 0;
  WORD2(v5) = 0;
  *a1 = sub_10009898C(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)&v5, a4);
  return v5;
}

void sub_100098A64(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100098A50);
}

uint64_t *sub_100098A74(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  *(_BYTE *)(v2 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(v2 + 5) = *(_BYTE *)(a2 + 5);
  *result = v2 + 6;
  return result;
}

uint64_t sub_100098A9C(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1, a4);
  *(_BYTE *)a3 = *(_BYTE *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1, v7);
  *(_BYTE *)(a3 + 1) = *(_BYTE *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)1, v8);
  *(_BYTE *)(a3 + 2) = *(_BYTE *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 3), a2, (const unsigned __int8 *)4, v9);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 7), a2, (const unsigned __int8 *)4, v10);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 7);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 11), a2, (const unsigned __int8 *)1, v11);
  *(_BYTE *)(a3 + 12) = *(_BYTE *)(a1 + 11);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)1, v12);
  *(_BYTE *)(a3 + 13) = *(_BYTE *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 13), a2, (const unsigned __int8 *)4, v13);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 13);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 17), a2, (const unsigned __int8 *)4, v14);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(a1 + 17);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 21), a2, (const unsigned __int8 *)4, v15);
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a1 + 21);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 25), a2, (const unsigned __int8 *)2, v16);
  *(_WORD *)(a3 + 28) = *(_WORD *)(a1 + 25);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 27), a2, (const unsigned __int8 *)1, v17);
  *(_BYTE *)(a3 + 30) = *(_BYTE *)(a1 + 27);
  return a1 + 28;
}

uint64_t sub_100098BE4(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_DWORD *)(a1 + 3) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 7) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 13);
  *(_DWORD *)(a1 + 13) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 17) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 21) = *(_DWORD *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 28);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 30);
  return a1 + 28;
}

uint64_t sub_100098C50()
{
  return 28;
}

uint64_t sub_100098C58@<X0>(uint64_t *a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;

  *(_WORD *)a4 = 0;
  *(_BYTE *)(a4 + 2) = 0;
  *(_QWORD *)(a4 + 4) = 0;
  *(_WORD *)(a4 + 12) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 23) = 0;
  result = sub_100098A9C(*a1, (const unsigned __int8 *)(*a1 + a2), a4, a3);
  *a1 = result;
  return result;
}

void sub_100098CA0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t sub_100098CB4()
{
  return 31;
}

uint64_t sub_100098CBC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100098BE4(*a1, a2);
  *a1 = result;
  return result;
}

BOOL sub_100098CE4(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  _BOOL8 result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100098D24(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100098D18);
}

unint64_t sub_100098D38(tlv *a1, const unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  char v9;
  char **i;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1, a4);
  v9 = *(_BYTE *)a1;
  v8 = (unint64_t)a1 + 1;
  *(_BYTE *)a3 = v9;
  for (i = (char **)(a3 + 8); v8 < (unint64_t)a2; v8 = sub_100097E98(v8, a2, (uint64_t)(v13 - 2), v7))
  {
    v12 = *(_QWORD **)(a3 + 16);
    v11 = *(_QWORD *)(a3 + 24);
    if ((unint64_t)v12 >= v11)
    {
      v14 = ((char *)v12 - *i) >> 4;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60)
        sub_10004B438();
      v16 = v11 - (_QWORD)*i;
      if (v16 >> 3 > v15)
        v15 = v16 >> 3;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
        v17 = 0xFFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
        v18 = (char *)sub_1000998A0(a3 + 24, v17);
      else
        v18 = 0;
      v19 = &v18[16 * v14];
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = 0;
      v21 = *(char **)(a3 + 8);
      v20 = *(char **)(a3 + 16);
      v22 = v19;
      if (v20 != v21)
      {
        do
        {
          *((_OWORD *)v22 - 1) = *((_OWORD *)v20 - 1);
          v22 -= 16;
          v20 -= 16;
        }
        while (v20 != v21);
        v20 = *i;
      }
      v13 = v19 + 16;
      *(_QWORD *)(a3 + 8) = v22;
      *(_QWORD *)(a3 + 16) = v19 + 16;
      *(_QWORD *)(a3 + 24) = &v18[16 * v17];
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v12 = 0;
      v12[1] = 0;
      v13 = v12 + 2;
    }
    *(_QWORD *)(a3 + 16) = v13;
  }
  return v8;
}

_BYTE *sub_100098E78(_BYTE *a1, uint64_t a2)
{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = *(_BYTE *)a2;
  result = a1 + 1;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  while (v3 != v4)
  {
    *(_DWORD *)result = *(_DWORD *)v3;
    *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
    *((_QWORD *)result + 1) = *(_QWORD *)(v3 + 8);
    result += 16;
    v3 += 16;
  }
  return result;
}

unint64_t sub_100098EB4(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 8))
    return 1;
  else
    return (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) & 0xFFFFFFFFFFFFFFF0 | 1;
}

unint64_t sub_100098ECC@<X0>(tlv **a1@<X0>, int a2@<W1>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t result;

  *(_BYTE *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  result = sub_100098D38(*a1, (const unsigned __int8 *)*a1 + a2, a4, a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_100098F18(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100098F08);
}

void sub_100098F28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_100098F44(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 8))
    return 4;
  else
    return (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) & 0xFFFFFFFFFFFFFFF0 | 4;
}

_BYTE **sub_100098F60(_BYTE **result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *v2 = *(_BYTE *)a2;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  while (v4 != v5)
  {
    *(_DWORD *)v3 = *(_DWORD *)v4;
    *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
    *((_QWORD *)v3 + 1) = *(_QWORD *)(v4 + 8);
    v3 += 16;
    v4 += 16;
  }
  *result = v3;
  return result;
}

BOOL sub_100098FA4(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  _BOOL8 result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100098FE4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100098FD8);
}

BOOL sub_100098FF8(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  _BOOL8 result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100099038(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10009902CLL);
}

BOOL sub_10009904C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  _BOOL8 result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_10009908C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100099080);
}

char *sub_1000990A0(tlv *a1, const unsigned __int8 *a2, _DWORD *a3, unint64_t a4)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1, a4);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

_BYTE *sub_1000990D4(_BYTE *a1, _DWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t sub_1000990E0(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100099118(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10009910CLL);
}

_BYTE **sub_10009912C(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t sub_100099140(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4, a4);
  result = *(unsigned int *)v5;
  *a1 = (tlv *)((char *)v5 + 4);
  return result;
}

void sub_100099178(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10009916CLL);
}

uint64_t sub_10009918C(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4, a4);
  result = *(unsigned int *)v5;
  *a1 = (tlv *)((char *)v5 + 4);
  return result;
}

void sub_1000991C4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000991B8);
}

uint64_t sub_1000991D8(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4, a4);
  result = *(unsigned int *)v5;
  *a1 = (tlv *)((char *)v5 + 4);
  return result;
}

void sub_100099210(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100099204);
}

BOOL sub_100099224(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  _BOOL8 result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_100099264(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100099258);
}

BOOL sub_100099278(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  _BOOL8 result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_1000992B8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000992ACLL);
}

BOOL sub_1000992CC(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  _BOOL8 result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1, a4);
  result = *(unsigned __int8 *)v5 != 0;
  *a1 = (tlv *)((char *)v5 + 1);
  return result;
}

void sub_10009930C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x100099300);
}

uint64_t sub_100099320(tlv **a1, int a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  uint64_t result;

  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4, a4);
  result = *(unsigned int *)v5;
  *a1 = (tlv *)((char *)v5 + 4);
  return result;
}

void sub_100099358(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10009934CLL);
}

void sub_10009936C(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  std::string *v8;
  std::string::size_type size;
  std::string::size_type v10;
  unint64_t v11;
  unint64_t v12;
  std::string::value_type v13;

  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v8 = this;
    if (a4 <= 0x16)
      goto LABEL_11;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v10 = 22;
    goto LABEL_6;
  }
  v11 = this->__r_.__value_.__r.__words[2];
  v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  v12 = HIBYTE(v11);
LABEL_8:
  v8 = this;
  if ((v12 & 0x80) != 0)
    v8 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_11:
  while (a2 != a3)
  {
    v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    this->__r_.__value_.__l.__size_ = a4;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
}

void sub_100099438(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100099478((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_100099478(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 64)
  {
    if (*(char *)(i - 41) < 0)
      operator delete(*(void **)(i - 64));
  }
  a1[1] = v2;
}

void sub_1000994C4(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 6;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + (a2 << 6);
      while (v3 != v5)
      {
        if (*(char *)(v3 - 41) < 0)
          operator delete(*(void **)(v3 - 64));
        v3 -= 64;
      }
      a1[1] = v5;
    }
  }
  else
  {
    sub_100099544(a1, a2 - v4);
  }
}

void sub_100099544(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 6)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), a2 << 6);
      v7 += a2 << 6;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 6);
    if (v9 >> 58)
      sub_10004B438();
    v10 = v8 >> 6;
    v11 = v5 - *a1;
    if (v11 >> 5 > v9)
      v9 = v11 >> 5;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0)
      v12 = 0x3FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v18 = v4;
    if (v12)
      v13 = (char *)sub_1000996B8(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[64 * v10];
    v17 = &v13[64 * v12];
    bzero(v15, a2 << 6);
    v16 = &v15[64 * a2];
    sub_100099644(a1, &v14);
    sub_100099818((uint64_t)&v14);
  }
}

void sub_100099630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100099818((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100099644(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1000996EC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1000996B8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    sub_10004B4F0();
  return operator new(a2 << 6);
}

uint64_t sub_1000996EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 64);
      *(_QWORD *)(v9 - 48) = *(_QWORD *)(a3 - 48);
      *(_OWORD *)(v9 - 64) = v10;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 64) = 0;
      v11 = *(_OWORD *)(a3 - 40);
      v12 = *(_OWORD *)(a3 - 24);
      *(_BYTE *)(v9 - 8) = *(_BYTE *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v12;
      *(_OWORD *)(v9 - 40) = v11;
      v9 -= 64;
      v7 -= 64;
      a3 -= 64;
    }
    while (a3 != a5);
    *((_QWORD *)&v17 + 1) = v9;
  }
  v15 = 1;
  sub_1000997A0((uint64_t)v14);
  return a6;
}

uint64_t sub_1000997A0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1000997D4(a1);
  return a1;
}

void sub_1000997D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 64;
  }
}

uint64_t sub_100099818(uint64_t a1)
{
  sub_10009984C(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10009984C(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 8;
      *(_QWORD *)(a1 + 16) = v2 - 8;
      if (*((char *)v2 - 41) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void *sub_1000998A0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_10004B4F0();
  return operator new(16 * a2);
}

void sub_100099BEC()
{
  uint64_t v0;

  if (*(char *)(v0 - 73) < 0)
    operator delete(*(void **)(v0 - 96));
  if (*(char *)(v0 - 49) < 0)
    operator delete(*(void **)(v0 - 72));
  operator delete();
}

id sub_100099C40(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "started");
}

id sub_100099C48(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "stopped");
}

id sub_100099C50(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "errored");
}

id sub_100099D38(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "setQMIClientStatus:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 24));
  if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) == 1)
    return objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "postWRMStateToBB");
  return result;
}

id sub_100099E34(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setQMIClientStatus:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 24));
}

void sub_100099FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_10005294C((uint64_t *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

id sub_100099FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(a2 + 4);
  v3 = *(_QWORD *)(a1 + 32);
  if ((_DWORD)v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 16, CFSTR("QMI.NAS.%d: failed to set NAS Indication Register. Error %d %s"), *(unsigned int *)(v3 + 32), v2, qmi::asString(*(unsigned int *)(a2 + 4)));
  else
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: set NAS Indication Register successful."), *(unsigned int *)(v3 + 32), v5, v6);
}

void sub_10009A15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_10005294C((uint64_t *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

id sub_10009A188(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(a2 + 4);
  v3 = *(_QWORD *)(a1 + 32);
  if ((_DWORD)v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 16, CFSTR("QMI.NAS.%d: nas::SisNrAvailable::Response Error %d %s"), *(unsigned int *)(v3 + 32), v2, qmi::asString(*(unsigned int *)(a2 + 4)));
  else
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: nas::SisNrAvailable::Response successful."), *(unsigned int *)(v3 + 32), v5, v6);
}

void sub_10009A3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_10005294C((uint64_t *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_10009A3E0(uint64_t a1, char **a2)
{
  char *v3;
  char **v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int16 v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int16 v26;

  v4 = a2 + 2;
  v3 = a2[2];
  v5 = a2[1];
  if (v5 >= v3)
  {
    v7 = *a2;
    v8 = v5 - *a2;
    if (v8 <= -3)
      goto LABEL_36;
    v9 = v8 >> 1;
    v10 = v3 - v7;
    if (v10 <= (v8 >> 1) + 1)
      v11 = v9 + 1;
    else
      v11 = v10;
    if (v10 >= 0x7FFFFFFFFFFFFFFELL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      v13 = (char *)sub_10004B4C0((uint64_t)v4, v12);
      v7 = *a2;
      v5 = a2[1];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[2 * v9];
    v3 = &v13[2 * v12];
    *(_WORD *)v14 = -1000;
    v6 = v14 + 2;
    while (v5 != v7)
    {
      v15 = *((_WORD *)v5 - 1);
      v5 -= 2;
      *((_WORD *)v14 - 1) = v15;
      v14 -= 2;
    }
    *a2 = v14;
    a2[1] = v6;
    a2[2] = v3;
    if (v7)
    {
      operator delete(v7);
      v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)v5 = -1000;
    v6 = v5 + 2;
  }
  a2[1] = v6;
  if (v6 < v3)
  {
    *(_WORD *)v6 = -150;
    v16 = v6 + 2;
    goto LABEL_35;
  }
  v17 = *a2;
  v18 = v6 - *a2;
  if (v18 <= -3)
LABEL_36:
    sub_10004B438();
  v19 = v18 >> 1;
  v20 = v3 - v17;
  if (v20 <= (v18 >> 1) + 1)
    v21 = v19 + 1;
  else
    v21 = v20;
  if (v20 >= 0x7FFFFFFFFFFFFFFELL)
    v22 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v22 = v21;
  if (v22)
  {
    v23 = (char *)sub_10004B4C0((uint64_t)v4, v22);
    v17 = *a2;
    v6 = a2[1];
  }
  else
  {
    v23 = 0;
  }
  v24 = &v23[2 * v19];
  v25 = &v23[2 * v22];
  *(_WORD *)v24 = -150;
  v16 = v24 + 2;
  while (v6 != v17)
  {
    v26 = *((_WORD *)v6 - 1);
    v6 -= 2;
    *((_WORD *)v24 - 1) = v26;
    v24 -= 2;
  }
  *a2 = v24;
  a2[1] = v16;
  a2[2] = v25;
  if (v17)
    operator delete(v17);
LABEL_35:
  a2[1] = v16;
}

void sub_10009A564(uint64_t a1, char **a2)
{
  char *v3;
  char **v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int16 v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int16 v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int16 v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  __int16 v46;

  v4 = a2 + 2;
  v3 = a2[2];
  v5 = a2[1];
  if (v5 >= v3)
  {
    v7 = *a2;
    v8 = v5 - *a2;
    if (v8 <= -3)
      goto LABEL_70;
    v9 = v8 >> 1;
    v10 = v3 - v7;
    if (v10 <= (v8 >> 1) + 1)
      v11 = v9 + 1;
    else
      v11 = v10;
    if (v10 >= 0x7FFFFFFFFFFFFFFELL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      v13 = (char *)sub_10004B4C0((uint64_t)v4, v12);
      v7 = *a2;
      v5 = a2[1];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[2 * v9];
    v3 = &v13[2 * v12];
    *(_WORD *)v14 = 0;
    v6 = v14 + 2;
    while (v5 != v7)
    {
      v15 = *((_WORD *)v5 - 1);
      v5 -= 2;
      *((_WORD *)v14 - 1) = v15;
      v14 -= 2;
    }
    *a2 = v14;
    a2[1] = v6;
    a2[2] = v3;
    if (v7)
    {
      operator delete(v7);
      v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)v5 = 0;
    v6 = v5 + 2;
  }
  a2[1] = v6;
  if (v6 >= v3)
  {
    v17 = *a2;
    v18 = v6 - *a2;
    if (v18 <= -3)
      goto LABEL_70;
    v19 = v18 >> 1;
    v20 = v3 - v17;
    if (v20 <= (v18 >> 1) + 1)
      v21 = v19 + 1;
    else
      v21 = v20;
    if (v20 >= 0x7FFFFFFFFFFFFFFELL)
      v22 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
    {
      v23 = (char *)sub_10004B4C0((uint64_t)v4, v22);
      v17 = *a2;
      v6 = a2[1];
    }
    else
    {
      v23 = 0;
    }
    v24 = &v23[2 * v19];
    v3 = &v23[2 * v22];
    *(_WORD *)v24 = 50;
    v16 = v24 + 2;
    while (v6 != v17)
    {
      v25 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v24 - 1) = v25;
      v24 -= 2;
    }
    *a2 = v24;
    a2[1] = v16;
    a2[2] = v3;
    if (v17)
    {
      operator delete(v17);
      v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)v6 = 50;
    v16 = v6 + 2;
  }
  a2[1] = v16;
  if (v16 >= v3)
  {
    v27 = *a2;
    v28 = v16 - *a2;
    if (v28 <= -3)
      goto LABEL_70;
    v29 = v28 >> 1;
    v30 = v3 - v27;
    if (v30 <= (v28 >> 1) + 1)
      v31 = v29 + 1;
    else
      v31 = v30;
    if (v30 >= 0x7FFFFFFFFFFFFFFELL)
      v32 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v32 = v31;
    if (v32)
    {
      v33 = (char *)sub_10004B4C0((uint64_t)v4, v32);
      v27 = *a2;
      v16 = a2[1];
    }
    else
    {
      v33 = 0;
    }
    v34 = &v33[2 * v29];
    v3 = &v33[2 * v32];
    *(_WORD *)v34 = 100;
    v26 = v34 + 2;
    while (v16 != v27)
    {
      v35 = *((_WORD *)v16 - 1);
      v16 -= 2;
      *((_WORD *)v34 - 1) = v35;
      v34 -= 2;
    }
    *a2 = v34;
    a2[1] = v26;
    a2[2] = v3;
    if (v27)
    {
      operator delete(v27);
      v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)v16 = 100;
    v26 = v16 + 2;
  }
  a2[1] = v26;
  if (v26 < v3)
  {
    *(_WORD *)v26 = 250;
    v36 = v26 + 2;
    goto LABEL_69;
  }
  v37 = *a2;
  v38 = v26 - *a2;
  if (v38 <= -3)
LABEL_70:
    sub_10004B438();
  v39 = v38 >> 1;
  v40 = v3 - v37;
  if (v40 <= (v38 >> 1) + 1)
    v41 = v39 + 1;
  else
    v41 = v40;
  if (v40 >= 0x7FFFFFFFFFFFFFFELL)
    v42 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v42 = v41;
  if (v42)
  {
    v43 = (char *)sub_10004B4C0((uint64_t)v4, v42);
    v37 = *a2;
    v26 = a2[1];
  }
  else
  {
    v43 = 0;
  }
  v44 = &v43[2 * v39];
  v45 = &v43[2 * v42];
  *(_WORD *)v44 = 250;
  v36 = v44 + 2;
  while (v26 != v37)
  {
    v46 = *((_WORD *)v26 - 1);
    v26 -= 2;
    *((_WORD *)v44 - 1) = v46;
    v44 -= 2;
  }
  *a2 = v44;
  a2[1] = v36;
  a2[2] = v45;
  if (v37)
    operator delete(v37);
LABEL_69:
  a2[1] = v36;
}

void sub_10009A830(uint64_t a1, char **a2)
{
  char *v3;
  char **v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int16 v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int16 v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int16 v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  __int16 v46;

  v4 = a2 + 2;
  v3 = a2[2];
  v5 = a2[1];
  if (v5 >= v3)
  {
    v7 = *a2;
    v8 = v5 - *a2;
    if (v8 <= -3)
      goto LABEL_70;
    v9 = v8 >> 1;
    v10 = v3 - v7;
    if (v10 <= (v8 >> 1) + 1)
      v11 = v9 + 1;
    else
      v11 = v10;
    if (v10 >= 0x7FFFFFFFFFFFFFFELL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      v13 = (char *)sub_10004B4C0((uint64_t)v4, v12);
      v7 = *a2;
      v5 = a2[1];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[2 * v9];
    v3 = &v13[2 * v12];
    *(_WORD *)v14 = -185;
    v6 = v14 + 2;
    while (v5 != v7)
    {
      v15 = *((_WORD *)v5 - 1);
      v5 -= 2;
      *((_WORD *)v14 - 1) = v15;
      v14 -= 2;
    }
    *a2 = v14;
    a2[1] = v6;
    a2[2] = v3;
    if (v7)
    {
      operator delete(v7);
      v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)v5 = -185;
    v6 = v5 + 2;
  }
  a2[1] = v6;
  if (v6 >= v3)
  {
    v17 = *a2;
    v18 = v6 - *a2;
    if (v18 <= -3)
      goto LABEL_70;
    v19 = v18 >> 1;
    v20 = v3 - v17;
    if (v20 <= (v18 >> 1) + 1)
      v21 = v19 + 1;
    else
      v21 = v20;
    if (v20 >= 0x7FFFFFFFFFFFFFFELL)
      v22 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
    {
      v23 = (char *)sub_10004B4C0((uint64_t)v4, v22);
      v17 = *a2;
      v6 = a2[1];
    }
    else
    {
      v23 = 0;
    }
    v24 = &v23[2 * v19];
    v3 = &v23[2 * v22];
    *(_WORD *)v24 = -160;
    v16 = v24 + 2;
    while (v6 != v17)
    {
      v25 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v24 - 1) = v25;
      v24 -= 2;
    }
    *a2 = v24;
    a2[1] = v16;
    a2[2] = v3;
    if (v17)
    {
      operator delete(v17);
      v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)v6 = -160;
    v16 = v6 + 2;
  }
  a2[1] = v16;
  if (v16 >= v3)
  {
    v27 = *a2;
    v28 = v16 - *a2;
    if (v28 <= -3)
      goto LABEL_70;
    v29 = v28 >> 1;
    v30 = v3 - v27;
    if (v30 <= (v28 >> 1) + 1)
      v31 = v29 + 1;
    else
      v31 = v30;
    if (v30 >= 0x7FFFFFFFFFFFFFFELL)
      v32 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v32 = v31;
    if (v32)
    {
      v33 = (char *)sub_10004B4C0((uint64_t)v4, v32);
      v27 = *a2;
      v16 = a2[1];
    }
    else
    {
      v33 = 0;
    }
    v34 = &v33[2 * v29];
    v3 = &v33[2 * v32];
    *(_WORD *)v34 = -150;
    v26 = v34 + 2;
    while (v16 != v27)
    {
      v35 = *((_WORD *)v16 - 1);
      v16 -= 2;
      *((_WORD *)v34 - 1) = v35;
      v34 -= 2;
    }
    *a2 = v34;
    a2[1] = v26;
    a2[2] = v3;
    if (v27)
    {
      operator delete(v27);
      v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)v16 = -150;
    v26 = v16 + 2;
  }
  a2[1] = v26;
  if (v26 < v3)
  {
    *(_WORD *)v26 = -50;
    v36 = v26 + 2;
    goto LABEL_69;
  }
  v37 = *a2;
  v38 = v26 - *a2;
  if (v38 <= -3)
LABEL_70:
    sub_10004B438();
  v39 = v38 >> 1;
  v40 = v3 - v37;
  if (v40 <= (v38 >> 1) + 1)
    v41 = v39 + 1;
  else
    v41 = v40;
  if (v40 >= 0x7FFFFFFFFFFFFFFELL)
    v42 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v42 = v41;
  if (v42)
  {
    v43 = (char *)sub_10004B4C0((uint64_t)v4, v42);
    v37 = *a2;
    v26 = a2[1];
  }
  else
  {
    v43 = 0;
  }
  v44 = &v43[2 * v39];
  v45 = &v43[2 * v42];
  *(_WORD *)v44 = -50;
  v36 = v44 + 2;
  while (v26 != v37)
  {
    v46 = *((_WORD *)v26 - 1);
    v26 -= 2;
    *((_WORD *)v44 - 1) = v46;
    v44 -= 2;
  }
  *a2 = v44;
  a2[1] = v36;
  a2[2] = v45;
  if (v37)
    operator delete(v37);
LABEL_69:
  a2[1] = v36;
}

void sub_10009AB04(uint64_t a1, char **a2)
{
  char *v3;
  char **v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int16 v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int16 v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int16 v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int16 v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  __int16 v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  __int16 v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  __int16 v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  __int16 v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  __int16 v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  __int16 v106;

  v4 = a2 + 2;
  v3 = a2[2];
  v5 = a2[1];
  if (v5 >= v3)
  {
    v7 = *a2;
    v8 = v5 - *a2;
    if (v8 <= -3)
      goto LABEL_172;
    v9 = v8 >> 1;
    v10 = v3 - v7;
    if (v10 <= (v8 >> 1) + 1)
      v11 = v9 + 1;
    else
      v11 = v10;
    if (v10 >= 0x7FFFFFFFFFFFFFFELL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      v13 = (char *)sub_10004B4C0((uint64_t)v4, v12);
      v7 = *a2;
      v5 = a2[1];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[2 * v9];
    v3 = &v13[2 * v12];
    *(_WORD *)v14 = -1300;
    v6 = v14 + 2;
    while (v5 != v7)
    {
      v15 = *((_WORD *)v5 - 1);
      v5 -= 2;
      *((_WORD *)v14 - 1) = v15;
      v14 -= 2;
    }
    *a2 = v14;
    a2[1] = v6;
    a2[2] = v3;
    if (v7)
    {
      operator delete(v7);
      v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)v5 = -1300;
    v6 = v5 + 2;
  }
  a2[1] = v6;
  if (v6 >= v3)
  {
    v17 = *a2;
    v18 = v6 - *a2;
    if (v18 <= -3)
      goto LABEL_172;
    v19 = v18 >> 1;
    v20 = v3 - v17;
    if (v20 <= (v18 >> 1) + 1)
      v21 = v19 + 1;
    else
      v21 = v20;
    if (v20 >= 0x7FFFFFFFFFFFFFFELL)
      v22 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
    {
      v23 = (char *)sub_10004B4C0((uint64_t)v4, v22);
      v17 = *a2;
      v6 = a2[1];
    }
    else
    {
      v23 = 0;
    }
    v24 = &v23[2 * v19];
    v3 = &v23[2 * v22];
    *(_WORD *)v24 = -1190;
    v16 = v24 + 2;
    while (v6 != v17)
    {
      v25 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v24 - 1) = v25;
      v24 -= 2;
    }
    *a2 = v24;
    a2[1] = v16;
    a2[2] = v3;
    if (v17)
    {
      operator delete(v17);
      v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)v6 = -1190;
    v16 = v6 + 2;
  }
  a2[1] = v16;
  if (v16 >= v3)
  {
    v27 = *a2;
    v28 = v16 - *a2;
    if (v28 <= -3)
      goto LABEL_172;
    v29 = v28 >> 1;
    v30 = v3 - v27;
    if (v30 <= (v28 >> 1) + 1)
      v31 = v29 + 1;
    else
      v31 = v30;
    if (v30 >= 0x7FFFFFFFFFFFFFFELL)
      v32 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v32 = v31;
    if (v32)
    {
      v33 = (char *)sub_10004B4C0((uint64_t)v4, v32);
      v27 = *a2;
      v16 = a2[1];
    }
    else
    {
      v33 = 0;
    }
    v34 = &v33[2 * v29];
    v3 = &v33[2 * v32];
    *(_WORD *)v34 = -1180;
    v26 = v34 + 2;
    while (v16 != v27)
    {
      v35 = *((_WORD *)v16 - 1);
      v16 -= 2;
      *((_WORD *)v34 - 1) = v35;
      v34 -= 2;
    }
    *a2 = v34;
    a2[1] = v26;
    a2[2] = v3;
    if (v27)
    {
      operator delete(v27);
      v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)v16 = -1180;
    v26 = v16 + 2;
  }
  a2[1] = v26;
  if (v26 >= v3)
  {
    v37 = *a2;
    v38 = v26 - *a2;
    if (v38 <= -3)
      goto LABEL_172;
    v39 = v38 >> 1;
    v40 = v3 - v37;
    if (v40 <= (v38 >> 1) + 1)
      v41 = v39 + 1;
    else
      v41 = v40;
    if (v40 >= 0x7FFFFFFFFFFFFFFELL)
      v42 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v42 = v41;
    if (v42)
    {
      v43 = (char *)sub_10004B4C0((uint64_t)v4, v42);
      v37 = *a2;
      v26 = a2[1];
    }
    else
    {
      v43 = 0;
    }
    v44 = &v43[2 * v39];
    v3 = &v43[2 * v42];
    *(_WORD *)v44 = -1160;
    v36 = v44 + 2;
    while (v26 != v37)
    {
      v45 = *((_WORD *)v26 - 1);
      v26 -= 2;
      *((_WORD *)v44 - 1) = v45;
      v44 -= 2;
    }
    *a2 = v44;
    a2[1] = v36;
    a2[2] = v3;
    if (v37)
    {
      operator delete(v37);
      v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)v26 = -1160;
    v36 = v26 + 2;
  }
  a2[1] = v36;
  if (v36 >= v3)
  {
    v47 = *a2;
    v48 = v36 - *a2;
    if (v48 <= -3)
      goto LABEL_172;
    v49 = v48 >> 1;
    v50 = v3 - v47;
    if (v50 <= (v48 >> 1) + 1)
      v51 = v49 + 1;
    else
      v51 = v50;
    if (v50 >= 0x7FFFFFFFFFFFFFFELL)
      v52 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v52 = v51;
    if (v52)
    {
      v53 = (char *)sub_10004B4C0((uint64_t)v4, v52);
      v47 = *a2;
      v36 = a2[1];
    }
    else
    {
      v53 = 0;
    }
    v54 = &v53[2 * v49];
    v3 = &v53[2 * v52];
    *(_WORD *)v54 = -1110;
    v46 = v54 + 2;
    while (v36 != v47)
    {
      v55 = *((_WORD *)v36 - 1);
      v36 -= 2;
      *((_WORD *)v54 - 1) = v55;
      v54 -= 2;
    }
    *a2 = v54;
    a2[1] = v46;
    a2[2] = v3;
    if (v47)
    {
      operator delete(v47);
      v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)v36 = -1110;
    v46 = v36 + 2;
  }
  a2[1] = v46;
  if (v46 >= v3)
  {
    v57 = *a2;
    v58 = v46 - *a2;
    if (v58 <= -3)
      goto LABEL_172;
    v59 = v58 >> 1;
    v60 = v3 - v57;
    if (v60 <= (v58 >> 1) + 1)
      v61 = v59 + 1;
    else
      v61 = v60;
    if (v60 >= 0x7FFFFFFFFFFFFFFELL)
      v62 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v62 = v61;
    if (v62)
    {
      v63 = (char *)sub_10004B4C0((uint64_t)v4, v62);
      v57 = *a2;
      v46 = a2[1];
    }
    else
    {
      v63 = 0;
    }
    v64 = &v63[2 * v59];
    v3 = &v63[2 * v62];
    *(_WORD *)v64 = -1100;
    v56 = v64 + 2;
    while (v46 != v57)
    {
      v65 = *((_WORD *)v46 - 1);
      v46 -= 2;
      *((_WORD *)v64 - 1) = v65;
      v64 -= 2;
    }
    *a2 = v64;
    a2[1] = v56;
    a2[2] = v3;
    if (v57)
    {
      operator delete(v57);
      v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)v46 = -1100;
    v56 = v46 + 2;
  }
  a2[1] = v56;
  if (v56 >= v3)
  {
    v67 = *a2;
    v68 = v56 - *a2;
    if (v68 <= -3)
      goto LABEL_172;
    v69 = v68 >> 1;
    v70 = v3 - v67;
    if (v70 <= (v68 >> 1) + 1)
      v71 = v69 + 1;
    else
      v71 = v70;
    if (v70 >= 0x7FFFFFFFFFFFFFFELL)
      v72 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v72 = v71;
    if (v72)
    {
      v73 = (char *)sub_10004B4C0((uint64_t)v4, v72);
      v67 = *a2;
      v56 = a2[1];
    }
    else
    {
      v73 = 0;
    }
    v74 = &v73[2 * v69];
    v3 = &v73[2 * v72];
    *(_WORD *)v74 = -1000;
    v66 = v74 + 2;
    while (v56 != v67)
    {
      v75 = *((_WORD *)v56 - 1);
      v56 -= 2;
      *((_WORD *)v74 - 1) = v75;
      v74 -= 2;
    }
    *a2 = v74;
    a2[1] = v66;
    a2[2] = v3;
    if (v67)
    {
      operator delete(v67);
      v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)v56 = -1000;
    v66 = v56 + 2;
  }
  a2[1] = v66;
  if (v66 >= v3)
  {
    v77 = *a2;
    v78 = v66 - *a2;
    if (v78 <= -3)
      goto LABEL_172;
    v79 = v78 >> 1;
    v80 = v3 - v77;
    if (v80 <= (v78 >> 1) + 1)
      v81 = v79 + 1;
    else
      v81 = v80;
    if (v80 >= 0x7FFFFFFFFFFFFFFELL)
      v82 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v82 = v81;
    if (v82)
    {
      v83 = (char *)sub_10004B4C0((uint64_t)v4, v82);
      v77 = *a2;
      v66 = a2[1];
    }
    else
    {
      v83 = 0;
    }
    v84 = &v83[2 * v79];
    v3 = &v83[2 * v82];
    *(_WORD *)v84 = -900;
    v76 = v84 + 2;
    while (v66 != v77)
    {
      v85 = *((_WORD *)v66 - 1);
      v66 -= 2;
      *((_WORD *)v84 - 1) = v85;
      v84 -= 2;
    }
    *a2 = v84;
    a2[1] = v76;
    a2[2] = v3;
    if (v77)
    {
      operator delete(v77);
      v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)v66 = -900;
    v76 = v66 + 2;
  }
  a2[1] = v76;
  if (v76 >= v3)
  {
    v87 = *a2;
    v88 = v76 - *a2;
    if (v88 <= -3)
      goto LABEL_172;
    v89 = v88 >> 1;
    v90 = v3 - v87;
    if (v90 <= (v88 >> 1) + 1)
      v91 = v89 + 1;
    else
      v91 = v90;
    if (v90 >= 0x7FFFFFFFFFFFFFFELL)
      v92 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v92 = v91;
    if (v92)
    {
      v93 = (char *)sub_10004B4C0((uint64_t)v4, v92);
      v87 = *a2;
      v76 = a2[1];
    }
    else
    {
      v93 = 0;
    }
    v94 = &v93[2 * v89];
    v3 = &v93[2 * v92];
    *(_WORD *)v94 = -850;
    v86 = v94 + 2;
    while (v76 != v87)
    {
      v95 = *((_WORD *)v76 - 1);
      v76 -= 2;
      *((_WORD *)v94 - 1) = v95;
      v94 -= 2;
    }
    *a2 = v94;
    a2[1] = v86;
    a2[2] = v3;
    if (v87)
    {
      operator delete(v87);
      v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)v76 = -850;
    v86 = v76 + 2;
  }
  a2[1] = v86;
  if (v86 < v3)
  {
    *(_WORD *)v86 = -800;
    v96 = v86 + 2;
    goto LABEL_171;
  }
  v97 = *a2;
  v98 = v86 - *a2;
  if (v98 <= -3)
LABEL_172:
    sub_10004B438();
  v99 = v98 >> 1;
  v100 = v3 - v97;
  if (v100 <= (v98 >> 1) + 1)
    v101 = v99 + 1;
  else
    v101 = v100;
  if (v100 >= 0x7FFFFFFFFFFFFFFELL)
    v102 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v102 = v101;
  if (v102)
  {
    v103 = (char *)sub_10004B4C0((uint64_t)v4, v102);
    v97 = *a2;
    v86 = a2[1];
  }
  else
  {
    v103 = 0;
  }
  v104 = &v103[2 * v99];
  v105 = &v103[2 * v102];
  *(_WORD *)v104 = -800;
  v96 = v104 + 2;
  while (v86 != v97)
  {
    v106 = *((_WORD *)v86 - 1);
    v86 -= 2;
    *((_WORD *)v104 - 1) = v106;
    v104 -= 2;
  }
  *a2 = v104;
  a2[1] = v96;
  a2[2] = v105;
  if (v97)
    operator delete(v97);
LABEL_171:
  a2[1] = v96;
}

void sub_10009B1C8(uint64_t a1, char **a2)
{
  char *v3;
  char **v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int16 v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int16 v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int16 v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int16 v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  __int16 v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  __int16 v66;

  v4 = a2 + 2;
  v3 = a2[2];
  v5 = a2[1];
  if (v5 >= v3)
  {
    v7 = *a2;
    v8 = v5 - *a2;
    if (v8 <= -3)
      goto LABEL_104;
    v9 = v8 >> 1;
    v10 = v3 - v7;
    if (v10 <= (v8 >> 1) + 1)
      v11 = v9 + 1;
    else
      v11 = v10;
    if (v10 >= 0x7FFFFFFFFFFFFFFELL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      v13 = (char *)sub_10004B4C0((uint64_t)v4, v12);
      v7 = *a2;
      v5 = a2[1];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[2 * v9];
    v3 = &v13[2 * v12];
    *(_WORD *)v14 = 250;
    v6 = v14 + 2;
    while (v5 != v7)
    {
      v15 = *((_WORD *)v5 - 1);
      v5 -= 2;
      *((_WORD *)v14 - 1) = v15;
      v14 -= 2;
    }
    *a2 = v14;
    a2[1] = v6;
    a2[2] = v3;
    if (v7)
    {
      operator delete(v7);
      v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)v5 = 250;
    v6 = v5 + 2;
  }
  a2[1] = v6;
  if (v6 >= v3)
  {
    v17 = *a2;
    v18 = v6 - *a2;
    if (v18 <= -3)
      goto LABEL_104;
    v19 = v18 >> 1;
    v20 = v3 - v17;
    if (v20 <= (v18 >> 1) + 1)
      v21 = v19 + 1;
    else
      v21 = v20;
    if (v20 >= 0x7FFFFFFFFFFFFFFELL)
      v22 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
    {
      v23 = (char *)sub_10004B4C0((uint64_t)v4, v22);
      v17 = *a2;
      v6 = a2[1];
    }
    else
    {
      v23 = 0;
    }
    v24 = &v23[2 * v19];
    v3 = &v23[2 * v22];
    *(_WORD *)v24 = 200;
    v16 = v24 + 2;
    while (v6 != v17)
    {
      v25 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v24 - 1) = v25;
      v24 -= 2;
    }
    *a2 = v24;
    a2[1] = v16;
    a2[2] = v3;
    if (v17)
    {
      operator delete(v17);
      v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)v6 = 200;
    v16 = v6 + 2;
  }
  a2[1] = v16;
  if (v16 >= v3)
  {
    v27 = *a2;
    v28 = v16 - *a2;
    if (v28 <= -3)
      goto LABEL_104;
    v29 = v28 >> 1;
    v30 = v3 - v27;
    if (v30 <= (v28 >> 1) + 1)
      v31 = v29 + 1;
    else
      v31 = v30;
    if (v30 >= 0x7FFFFFFFFFFFFFFELL)
      v32 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v32 = v31;
    if (v32)
    {
      v33 = (char *)sub_10004B4C0((uint64_t)v4, v32);
      v27 = *a2;
      v16 = a2[1];
    }
    else
    {
      v33 = 0;
    }
    v34 = &v33[2 * v29];
    v3 = &v33[2 * v32];
    *(_WORD *)v34 = 150;
    v26 = v34 + 2;
    while (v16 != v27)
    {
      v35 = *((_WORD *)v16 - 1);
      v16 -= 2;
      *((_WORD *)v34 - 1) = v35;
      v34 -= 2;
    }
    *a2 = v34;
    a2[1] = v26;
    a2[2] = v3;
    if (v27)
    {
      operator delete(v27);
      v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)v16 = 150;
    v26 = v16 + 2;
  }
  a2[1] = v26;
  if (v26 >= v3)
  {
    v37 = *a2;
    v38 = v26 - *a2;
    if (v38 <= -3)
      goto LABEL_104;
    v39 = v38 >> 1;
    v40 = v3 - v37;
    if (v40 <= (v38 >> 1) + 1)
      v41 = v39 + 1;
    else
      v41 = v40;
    if (v40 >= 0x7FFFFFFFFFFFFFFELL)
      v42 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v42 = v41;
    if (v42)
    {
      v43 = (char *)sub_10004B4C0((uint64_t)v4, v42);
      v37 = *a2;
      v26 = a2[1];
    }
    else
    {
      v43 = 0;
    }
    v44 = &v43[2 * v39];
    v3 = &v43[2 * v42];
    *(_WORD *)v44 = 100;
    v36 = v44 + 2;
    while (v26 != v37)
    {
      v45 = *((_WORD *)v26 - 1);
      v26 -= 2;
      *((_WORD *)v44 - 1) = v45;
      v44 -= 2;
    }
    *a2 = v44;
    a2[1] = v36;
    a2[2] = v3;
    if (v37)
    {
      operator delete(v37);
      v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)v26 = 100;
    v36 = v26 + 2;
  }
  a2[1] = v36;
  if (v36 >= v3)
  {
    v47 = *a2;
    v48 = v36 - *a2;
    if (v48 <= -3)
      goto LABEL_104;
    v49 = v48 >> 1;
    v50 = v3 - v47;
    if (v50 <= (v48 >> 1) + 1)
      v51 = v49 + 1;
    else
      v51 = v50;
    if (v50 >= 0x7FFFFFFFFFFFFFFELL)
      v52 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v52 = v51;
    if (v52)
    {
      v53 = (char *)sub_10004B4C0((uint64_t)v4, v52);
      v47 = *a2;
      v36 = a2[1];
    }
    else
    {
      v53 = 0;
    }
    v54 = &v53[2 * v49];
    v3 = &v53[2 * v52];
    *(_WORD *)v54 = 28;
    v46 = v54 + 2;
    while (v36 != v47)
    {
      v55 = *((_WORD *)v36 - 1);
      v36 -= 2;
      *((_WORD *)v54 - 1) = v55;
      v54 -= 2;
    }
    *a2 = v54;
    a2[1] = v46;
    a2[2] = v3;
    if (v47)
    {
      operator delete(v47);
      v3 = *v4;
    }
  }
  else
  {
    *(_WORD *)v36 = 28;
    v46 = v36 + 2;
  }
  a2[1] = v46;
  if (v46 < v3)
  {
    *(_WORD *)v46 = 24;
    v56 = v46 + 2;
    goto LABEL_103;
  }
  v57 = *a2;
  v58 = v46 - *a2;
  if (v58 <= -3)
LABEL_104:
    sub_10004B438();
  v59 = v58 >> 1;
  v60 = v3 - v57;
  if (v60 <= (v58 >> 1) + 1)
    v61 = v59 + 1;
  else
    v61 = v60;
  if (v60 >= 0x7FFFFFFFFFFFFFFELL)
    v62 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v62 = v61;
  if (v62)
  {
    v63 = (char *)sub_10004B4C0((uint64_t)v4, v62);
    v57 = *a2;
    v46 = a2[1];
  }
  else
  {
    v63 = 0;
  }
  v64 = &v63[2 * v59];
  v65 = &v63[2 * v62];
  *(_WORD *)v64 = 24;
  v56 = v64 + 2;
  while (v46 != v57)
  {
    v66 = *((_WORD *)v46 - 1);
    v46 -= 2;
    *((_WORD *)v64 - 1) = v66;
    v64 -= 2;
  }
  *a2 = v64;
  a2[1] = v56;
  a2[2] = v65;
  if (v57)
    operator delete(v57);
LABEL_103:
  a2[1] = v56;
}

id sub_10009B5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(a2 + 4);
  v3 = *(_QWORD *)(a1 + 32);
  if ((_DWORD)v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 16, CFSTR("QMI.NAS.%d: failed to set NAS Config Info2. Error %d %s"), *(unsigned int *)(v3 + 32), v2, qmi::asString(*(unsigned int *)(a2 + 4)));
  else
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: set NAS Config Info2 successful."), *(unsigned int *)(v3 + 32), v5, v6);
}

uint64_t sub_10009B7C8(uint64_t a1, qmi::MessageBase *a2)
{
  id v4;
  int v5;
  int v6;
  int v7;
  uint64_t result;
  _QWORD v9[4];
  int8x16_t v10;
  id v11;
  _QWORD v12[4];
  int8x16_t v13;
  _QWORD v14[4];
  int8x16_t v15;
  _QWORD v16[4];
  int8x16_t v17;
  _QWORD *v18;

  v4 = objc_msgSend(*(id *)(a1 + 32), "getUserDataPreferredSlot");
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10009B9F4;
  v16[3] = &unk_100203EC0;
  v17 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  v18 = v16;
  v5 = sub_1000A0888(a2, 20, &v18);
  if ((v5 & 1) == 0)
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: received indication w/o LTE sig info."), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10009BADC;
  v14[3] = &unk_100203EE8;
  v15 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  v18 = v14;
  v6 = sub_1000A0978(a2, 23, (unint64_t)&v18);
  if ((v6 & 1) == 0)
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: received indication w/o New sig info."), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10009BBA0;
  v12[3] = &unk_100203F10;
  v13 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  v18 = v12;
  v7 = sub_1000A0A60(a2, 24, (unint64_t)&v18);
  if ((v7 & 1) == 0)
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: received indication w/o New_EXT sig info."), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10009BC44;
  v9[3] = &unk_100203F38;
  v10 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  v11 = v4;
  v18 = v9;
  result = sub_1000A0B48(a2, 19, (unint64_t)&v18);
  if ((result & 1) == 0)
    result = (uint64_t)+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: received indication w/o WCMDA sig info."), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32));
  if ((v5 | v6 | v7) == 1)
    return (uint64_t)objc_msgSend(*(id *)(a1 + 32), "evaluateCbrsInDualSimMode:", 0);
  return result;
}

id sub_10009B9F4(uint64_t a1, char *a2)
{
  double v4;
  double v5;
  double v6;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: received LTE SigInfo rssi %d snr %d rsrq %d rsrp %d"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *a2, (int)(((26215 * *((__int16 *)a2 + 2)) >> 18) + ((26215 * *((__int16 *)a2 + 2)) >> 31)), a2[1], *((__int16 *)a2 + 1));
  v4 = (double)*((__int16 *)a2 + 2) / 10.0;
  v5 = (double)a2[1];
  v6 = (double)*((__int16 *)a2 + 1);
  objc_msgSend(*(id *)(a1 + 40), "setServingCellRSSI:forSim:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (double)*a2);
  objc_msgSend(*(id *)(a1 + 40), "setServingCellRSRP:forSim:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), v6);
  objc_msgSend(*(id *)(a1 + 40), "setServingCellRSRQ:forSim:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), v5);
  return objc_msgSend(*(id *)(a1 + 40), "setServingCellSNR:forSim:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), v4);
}

id sub_10009BADC(uint64_t a1, __int16 *a2)
{
  id result;
  int v5;
  double v6;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: received New SigInfo snr %d rsrp %d"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (int)(((26215 * a2[1]) >> 18) + ((26215 * a2[1]) >> 31)), *a2);
  v5 = (unsigned __int16)*a2;
  if (v5 != 0x8000)
  {
    v6 = (double)a2[1] / 10.0;
    objc_msgSend(*(id *)(a1 + 40), "setNrRSRP:forSim:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (double)(__int16)v5);
    return objc_msgSend(*(id *)(a1 + 40), "setNrSNR:forSim:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), v6);
  }
  return result;
}

id sub_10009BBA0(uint64_t a1, __int16 *a2)
{
  id result;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: received New_EXT SigInfo rsrq %d"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *a2);
  v5 = (unsigned __int16)*a2;
  if (v5 != 0x8000)
  {
    objc_msgSend(*(id *)(a1 + 40), "setNrRSRQ:forSim:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (double)(__int16)v5);
    v6 = *(void **)(a1 + 40);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
    objc_msgSend(v6, "getNrRSRQ");
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: rsrq %.2f"), v7, v8);
  }
  return result;
}

id sub_10009BC44(uint64_t a1, char *a2)
{
  id result;
  double v5;
  double v6;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: received WCDMA SigInfo rssi %d ECIO %d"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *a2, -((__int16)(*((_WORD *)a2 + 1) + (*((_WORD *)a2 + 1) >> 15)) >> 1));
  result = objc_msgSend(*(id *)(a1 + 40), "setActiveSlot:", *(_QWORD *)(a1 + 48));
  if (*a2)
  {
    v5 = (double)*((__int16 *)a2 + 1) * -0.5;
    v6 = v5 + (double)*a2;
    objc_msgSend(*(id *)(a1 + 40), "setServingCellRSSI:forSim:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
    objc_msgSend(*(id *)(a1 + 40), "setServingCellECIO:forSim:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), v5);
    return objc_msgSend(*(id *)(a1 + 40), "setServingCellRSCP:forSim:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), v6);
  }
  return result;
}

uint64_t sub_10009BDA4(uint64_t a1, qmi::MessageBase *a2)
{
  _QWORD v3[5];
  _QWORD *v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10009BE08;
  v3[3] = &unk_100203F98;
  v3[4] = *(_QWORD *)(a1 + 32);
  v4 = v3;
  return sub_1000A0DAC(a2, 1, (unint64_t)&v4);
}

id sub_10009BE08(uint64_t a1, unsigned __int8 *a2)
{
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: nas::SisNrAvailable::Indication %s"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), sub_1000471DC(*a2));
}

void sub_10009BEC4(id a1, const void *a2)
{
  _QWORD v3[7];
  _QWORD *v4;
  _QWORD v5[3];
  char v6;
  _QWORD v7[4];

  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x2020000000;
  v7[3] = 0;
  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x2020000000;
  v6 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10009BFD0;
  v3[3] = &unk_100203FE0;
  v3[5] = v5;
  v3[6] = v7;
  v3[4] = +[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton](WRM_EnhancedCTService, "wrm_EnhancedCTServiceSingleton");
  v4 = v3;
  if ((sub_1000A1010((qmi::MessageBase *)a2, 1, (unint64_t)&v4) & 1) == 0)
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI: received vlqm indication w/o enhancedVlqm."));
  _Block_object_dispose(v5, 8);
  _Block_object_dispose(v7, 8);
}

void sub_10009BFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

id sub_10009BFD0(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  unint64_t v8;
  int v9;
  char v10;
  char v11;

  v4 = a2[1] + 1;
  v5 = *a2;
  v6 = sub_1000470AC(a2[2]);
  v7 = sub_1000470E8(a2[3]);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%u: received Enhanced VoiceLQM version%u, linkQuality=%s, reason=%s, IMSPreferred=%d, totalAudioErasures=%u, totalAudioPlaybacks=%u, voiceCodec=%s, SINR=%fdB, RSRP=%ddBm"), v4, v5, v6, v7, a2[4], *((unsigned int *)a2 + 2), *((unsigned int *)a2 + 3), sub_10004717C(*((_DWORD *)a2 + 4)), (float)*((int *)a2 + 5) * 0.2 + -20.0, *((unsigned int *)a2 + 6));
  v9 = a2[2];
  if (v9 == 50)
    v10 = 50;
  else
    v10 = 100;
  if (v9 == 10)
    v11 = 10;
  else
    v11 = v10;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v11;
  LODWORD(v8) = *((_DWORD *)a2 + 3);
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = (double)(100 * *((_DWORD *)a2 + 2))
                                                              / ((double)v8 + 0.000001);
  return objc_msgSend(*(id *)(a1 + 32), "processVoiceLqmQMI:VLQM:IMSPreference:AudioErasure:RSRP:", a2[1], *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), a2[4], *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), (double)*((int *)a2 + 6));
}

void sub_10009C214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_10005294C((uint64_t *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

id sub_10009C240(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *(unsigned int *)(a2 + 4);
  v4 = *(_QWORD *)(a1 + 32);
  if ((_DWORD)v3)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: bindQMIClientToSlotType failed: %s"), *(unsigned int *)(v4 + 32), qmi::asString(v3));
  else
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: bindQMIClientToSlotType success"), *(unsigned int *)(v4 + 32), v6);
}

void sub_10009C3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_10005294C(&a9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a14);
  _Unwind_Resume(a1);
}

void sub_10009C3F0(id a1, const void *a2)
{
  uint64_t v2;

  v2 = *((unsigned int *)a2 + 1);
  if ((_DWORD)v2)
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 16, CFSTR("QMI: failed to query SINR. Error %d %s"), v2, qmi::asString(*((unsigned int *)a2 + 1)));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI: query SINR successful."));
}

void sub_10009C5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_10005294C((uint64_t *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

id sub_10009C5D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v3)
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 16, CFSTR("QMI.NAS.%d: failed to send VoIP message. Error %d %s"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), v3, qmi::asString(*(unsigned int *)(a2 + 4)));
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: Send VoIP message."), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
}

void sub_10009C788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_10005294C((uint64_t *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

id sub_10009C7B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v3)
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 16, CFSTR("QMI.NAS.%d: failed to send lock status message. Error %d %s"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), v3, qmi::asString(*(unsigned int *)(a2 + 4)));
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: Send SDM lock/unlock message."), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
}

void sub_10009C950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_10005294C((uint64_t *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v9 - 88));
  _Unwind_Resume(a1);
}

id sub_10009C97C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v3)
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 16, CFSTR("QMI.NAS.%d: failed to send Dupe status message. Error %d %s"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), v3, qmi::asString(*(unsigned int *)(a2 + 4)));
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: Send FTDDupeState message state."), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
}

void sub_10009CB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_10005294C((uint64_t *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

id sub_10009CBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v3)
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 16, CFSTR("QMI.NAS.%d: failed to send setBBSAState message. Error %d %s"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), v3, qmi::asString(*(unsigned int *)(a2 + 4)));
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: Send setBBSAState message state."), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
}

void sub_10009CDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_10005294C((uint64_t *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10009CE0C(uint64_t a1, qmi::MessageBase *a2)
{
  _QWORD v3[5];
  _QWORD *v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10009CE70;
  v3[3] = &unk_100204028;
  v3[4] = *(_QWORD *)(a1 + 32);
  v4 = v3;
  return sub_1000A33CC(a2, 16, (unint64_t)&v4);
}

id sub_10009CE70(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;

  v3 = *a2;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: WrmSdmLocationDbInfoRegister::Indication locationDbRequired=%u"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), v3);
  return objc_msgSend(+[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton](WRM_EnhancedCTService, "wrm_EnhancedCTServiceSingleton"), "updateWrmSdmLocationDbInfoRegister:forSim:", v3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
}

void sub_10009CED4(uint64_t a1, qmi::MessageBase *a2)
{
  id v4;
  _QWORD v5[5];
  _QWORD v6[6];
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10009D098;
  v6[3] = &unk_100204050;
  v6[4] = &v16;
  v6[5] = &v12;
  v7 = v6;
  sub_1000A3630(a2, 16, &v7);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10009D0BC;
  v5[3] = &unk_100204078;
  v5[4] = &v8;
  v7 = v5;
  sub_1000A3718(a2, 17, &v7);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: received WrmSdmLocationDbInfoFetch ind mcc=%u, mnc=%u, cellID=%llu"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *((unsigned int *)v17 + 6), *((unsigned int *)v13 + 6), v9[3]);
  v4 = +[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton](WRM_EnhancedCTService, "wrm_EnhancedCTServiceSingleton");
  objc_msgSend(v4, "fetchWrmSdmLocationDbInfoWithMcc:Mnc:CellId:ForSim:", *((unsigned int *)v17 + 6), *((unsigned int *)v13 + 6), v9[3], *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);
}

void sub_10009D060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 128), 8);
  _Block_object_dispose((const void *)(v17 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009D098(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = a2[1];
  return result;
}

uint64_t sub_10009D0BC(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

id sub_10009D0D0(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  _QWORD v4[5];
  _QWORD *v5;

  v2 = a2[1];
  if ((_DWORD)v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 16, CFSTR("QMI.NAS.%d: WrmSdmLocationDbInfoRegister::Response Error %d %s"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), v2, qmi::asString(a2[1]));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10009D184;
  v4[3] = &unk_1002040A0;
  v4[4] = *(_QWORD *)(a1 + 32);
  v5 = v4;
  return (id)sub_1000A397C((qmi::MessageBase *)a2, 16, (unint64_t)&v5);
}

id sub_10009D184(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;

  v3 = *a2;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: WrmSdmLocationDbInfoRegister::Response locationDbRequired = %d"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), v3);
  return objc_msgSend(+[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton](WRM_EnhancedCTService, "wrm_EnhancedCTServiceSingleton"), "updateWrmSdmLocationDbInfoRegister:forSim:", v3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
}

void sub_10009D254(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v1 = *(_QWORD **)(a1 + 32);
      v2 = (uint64_t)(v1 + 9);
      if (v1[10] == v1[9])
        goto LABEL_12;
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: setWrmSdmLocationDbPushOneEntryForCellType LTE entry exceeds max limit"), v1[4]);
      break;
    case 3:
      v3 = *(_QWORD **)(a1 + 32);
      v2 = (uint64_t)(v3 + 15);
      if (v3[16] == v3[15])
        goto LABEL_12;
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: setWrmSdmLocationDbPushOneEntryForCellType SA entry exceeds max limit"), v3[4]);
      break;
    case 4:
      v4 = *(_QWORD **)(a1 + 32);
      v2 = (uint64_t)(v4 + 12);
      if (v4[13] == v4[12])
        goto LABEL_12;
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: setWrmSdmLocationDbPushOneEntryForCellType LTENSA entry exceeds max limit"), v4[4]);
      break;
    case 5:
      v5 = *(_QWORD **)(a1 + 32);
      v2 = (uint64_t)(v5 + 18);
      if (v5[19] == v5[18])
LABEL_12:
        sub_10009D3AC(v2, (_DWORD *)(a1 + 44), (char *)(a1 + 60), (int *)(a1 + 48), (int *)(a1 + 52), (int *)(a1 + 56));
      else
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: setWrmSdmLocationDbPushOneEntryForCellType SADC entry exceeds max limit"), v5[4]);
      break;
    default:
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: setLocationDbInfoPushOneEntryForCellType ERROR: invalid CellType, has to be CellTypeLTE, CellType5GSA, or CellType5GNSA"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
      break;
  }
}

void sub_10009D3AC(uint64_t a1, _DWORD *a2, char *a3, int *a4, int *a5, int *a6)
{
  unint64_t v12;
  _DWORD *v13;
  char v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  _DWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  int v28;
  int v29;
  int v30;
  __int128 v31;
  char *v32;

  v13 = *(_DWORD **)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v13 >= v12)
  {
    v19 = *(_DWORD **)a1;
    v20 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v13 - *(_QWORD *)a1) >> 2);
    v21 = v20 + 1;
    if (v20 + 1 > 0xCCCCCCCCCCCCCCCLL)
      sub_10004B438();
    v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (_QWORD)v19) >> 2);
    if (2 * v22 > v21)
      v21 = 2 * v22;
    if (v22 >= 0x666666666666666)
      v23 = 0xCCCCCCCCCCCCCCCLL;
    else
      v23 = v21;
    if (v23 > 0xCCCCCCCCCCCCCCCLL)
      sub_10004B4F0();
    v24 = 5 * v23;
    v25 = (char *)operator new(20 * v23);
    v26 = &v25[20 * v20];
    v27 = *a3;
    v28 = *a4;
    v29 = *a5;
    v30 = *a6;
    *(_DWORD *)v26 = *a2;
    v26[4] = v27;
    *((_DWORD *)v26 + 2) = v28;
    *((_DWORD *)v26 + 3) = v29;
    *((_DWORD *)v26 + 4) = v30;
    v18 = v26 + 20;
    if (v13 == v19)
    {
      v32 = &v25[20 * v20];
    }
    else
    {
      do
      {
        v31 = *(_OWORD *)(v13 - 5);
        v32 = v26 - 20;
        *((_DWORD *)v26 - 1) = *(v13 - 1);
        *(_OWORD *)(v26 - 20) = v31;
        v13 -= 5;
        v26 -= 20;
      }
      while (v13 != v19);
    }
    *(_QWORD *)a1 = v32;
    *(_QWORD *)(a1 + 8) = v18;
    *(_QWORD *)(a1 + 16) = &v25[4 * v24];
    if (v19)
      operator delete(v19);
  }
  else
  {
    v14 = *a3;
    v15 = *a4;
    v16 = *a5;
    v17 = *a6;
    *v13 = *a2;
    *((_BYTE *)v13 + 4) = v14;
    v13[2] = v15;
    v13[3] = v16;
    v13[4] = v17;
    v18 = (char *)(v13 + 5);
  }
  *(_QWORD *)(a1 + 8) = v18;
}

void sub_10009D588(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const qmi::MutableMessageBase *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void *v34;
  _QWORD v35[5];
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  void *v40;
  _BYTE v41[32];
  _QWORD aBlock[5];

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 48) = *(_BYTE *)(a1 + 56);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 52) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 56) = *(_DWORD *)(a1 + 52);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) = *(_QWORD *)(a1 + 40);
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v41, 0x556Bu);
  v2 = *(_QWORD *)(a1 + 32);
  *sub_1000A3BE0((uint64_t)v41, 16) = *(_BYTE *)(v2 + 48);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)sub_1000A3E30((uint64_t)v41, 17) = *(_QWORD *)(v3 + 52);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)sub_1000A408C((uint64_t)v41, 18) = *(_QWORD *)(v4 + 64);
  v6 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v6 + 48))
  {
    v8 = *(_QWORD *)(v6 + 72);
    v7 = *(_QWORD *)(v6 + 80);
    v9 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v8) >> 2));
    if (v7 == v8)
      v10 = 0;
    else
      v10 = v9;
    sub_1000A42E4(v7, v7, v8, v8, v10, 1);
    v11 = *(_QWORD *)(a1 + 32);
    v13 = *(_QWORD *)(v11 + 96);
    v12 = *(_QWORD *)(v11 + 104);
    v14 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - v13) >> 2));
    if (v12 == v13)
      v15 = 0;
    else
      v15 = v14;
    sub_1000A42E4(v12, v12, v13, v13, v15, 1);
    v16 = *(_QWORD *)(a1 + 32);
    v18 = *(_QWORD *)(v16 + 120);
    v17 = *(_QWORD *)(v16 + 128);
    v19 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v18) >> 2));
    if (v17 == v18)
      v20 = 0;
    else
      v20 = v19;
    sub_1000A42E4(v17, v17, v18, v18, v20, 1);
    v21 = *(_QWORD *)(a1 + 32);
    v23 = *(_QWORD *)(v21 + 144);
    v22 = *(_QWORD *)(v21 + 152);
    v24 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - v23) >> 2));
    if (v22 == v23)
      v25 = 0;
    else
      v25 = v24;
    sub_1000A42E4(v22, v22, v23, v23, v25, 1);
    v6 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v6 + 72) != *(_QWORD *)(v6 + 80))
    {
      v26 = sub_1000A5150((uint64_t)v41, 19);
      v27 = *(_QWORD *)(v6 + 72);
      *(_QWORD *)v26 = *(_QWORD *)(v27 + 8);
      *((_DWORD *)v26 + 2) = *(_DWORD *)(v27 + 16);
      *((_DWORD *)v26 + 3) = *(_DWORD *)v27;
      v26[16] = *(_BYTE *)(v27 + 4);
      v6 = *(_QWORD *)(a1 + 32);
    }
    if (*(_QWORD *)(v6 + 96) != *(_QWORD *)(v6 + 104))
    {
      v28 = sub_1000A53B8((uint64_t)v41, 20);
      v29 = *(_QWORD *)(v6 + 96);
      *(_QWORD *)v28 = *(_QWORD *)(v29 + 8);
      *((_DWORD *)v28 + 2) = *(_DWORD *)(v29 + 16);
      *((_DWORD *)v28 + 3) = *(_DWORD *)v29;
      v28[16] = *(_BYTE *)(v29 + 4);
      v6 = *(_QWORD *)(a1 + 32);
    }
    if (*(_QWORD *)(v6 + 120) != *(_QWORD *)(v6 + 128))
    {
      v30 = sub_1000A5620((uint64_t)v41, 21);
      v31 = *(_QWORD *)(v6 + 120);
      *(_QWORD *)v30 = *(_QWORD *)(v31 + 8);
      *((_DWORD *)v30 + 2) = *(_DWORD *)(v31 + 16);
      *((_DWORD *)v30 + 3) = *(_DWORD *)v31;
      v30[16] = *(_BYTE *)(v31 + 4);
      v6 = *(_QWORD *)(a1 + 32);
    }
    if (*(_QWORD *)(v6 + 144) != *(_QWORD *)(v6 + 152))
    {
      v32 = sub_1000A5888((uint64_t)v41, 22);
      v33 = *(_QWORD *)(v6 + 144);
      *(_QWORD *)v32 = *(_QWORD *)(v33 + 8);
      *((_DWORD *)v32 + 2) = *(_DWORD *)(v33 + 16);
      *((_DWORD *)v32 + 3) = *(_DWORD *)v33;
      v32[16] = *(_BYTE *)(v33 + 4);
      v6 = *(_QWORD *)(a1 + 32);
    }
  }
  v36 = *(_QWORD *)(v6 + 16);
  v37 = QMIServiceMsg::create((QMIServiceMsg *)v41, v5);
  v38 = 25000;
  v39 = 0;
  v40 = 0;
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_10009D8F4;
  v35[3] = &unk_1002027C0;
  v35[4] = *(_QWORD *)(a1 + 32);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1000A5AF0;
  aBlock[3] = &unk_100202940;
  aBlock[4] = v35;
  v34 = _Block_copy(aBlock);
  v40 = v34;
  if (v37)
  {
    qmi::Client::send(v36, &v36);
    v34 = v40;
  }
  if (v34)
    _Block_release(v34);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v41);
}

void sub_10009D8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_10005294C((uint64_t *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

id sub_10009D8F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  uint64_t v7;

  v3 = *(unsigned int *)(a2 + 4);
  v4 = *(_QWORD *)(a1 + 32);
  if ((_DWORD)v3)
    result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 16, CFSTR("QMI.NAS.%d: WrmSdmLocationDbInfo::Response Error %d %s"), *(unsigned int *)(v4 + 32), v3, qmi::asString(*(unsigned int *)(a2 + 4)));
  else
    result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("QMI.NAS.%d: WrmSdmLocationDbInfo::Response Successful"), *(unsigned int *)(v4 + 32), v6, v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 104) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 128) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 120);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 152) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 144);
  return result;
}

char *sub_10009DA28(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10009DA9C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_10009DA9C()
{
  operator new();
}

void sub_10009DBBC()
{
  operator delete();
}

uint64_t sub_10009DBD0()
{
  return sub_100019788();
}

_BYTE **sub_10009DBD8(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10001976C((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_10009DC30()
{
  operator new();
}

char *sub_10009DC78(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10009DCEC();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_10009DCEC()
{
  operator new();
}

void sub_10009DE0C()
{
  operator delete();
}

uint64_t sub_10009DE20()
{
  return sub_100019788();
}

_BYTE **sub_10009DE28(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10001976C((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_10009DE80()
{
  operator new();
}

char *sub_10009DEC8(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10009DF3C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_10009DF3C()
{
  operator new();
}

void sub_10009E05C()
{
  operator delete();
}

uint64_t sub_10009E070()
{
  return sub_100019788();
}

_BYTE **sub_10009E078(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10001976C((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_10009E0D0()
{
  operator new();
}

char *sub_10009E118(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10009E18C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_10009E18C()
{
  operator new();
}

void sub_10009E2AC()
{
  operator delete();
}

uint64_t sub_10009E2C0()
{
  return sub_100019788();
}

_BYTE **sub_10009E2C8(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10001976C((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_10009E320()
{
  operator new();
}

void sub_10009E368(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_10009E3C4(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_10009E3B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10009E3C4(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10009E4A4(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10009E464((uint64_t)a2);
  }
}

void sub_10009E448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10009E464(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 3u);
  return a1;
}

void sub_10009E490(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10009E4A4(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 3u);
  return a1;
}

void sub_10009E4D0(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10009E4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_10009E540(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_10009E52C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10009E540(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10009E620(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10009E5E0((uint64_t)a2);
  }
}

void sub_10009E5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10009E5E0(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x5570u);
  return a1;
}

void sub_10009E60C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10009E620(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x5570u);
  return a1;
}

void sub_10009E64C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_10009E660(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10009E6D4();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_10009E6D4()
{
  operator new();
}

_QWORD *sub_10009E7F4(_QWORD *a1)
{
  void *v2;

  *a1 = off_100204250;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10009E830(_QWORD *a1)
{
  void *v2;

  *a1 = off_100204250;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_10009E87C(uint64_t a1)
{
  return sub_10004AAAC((_QWORD *)(a1 + 16));
}

_BYTE **sub_10009E884(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10004AAC8((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_10009E8DC()
{
  operator new();
}

void sub_10009E944()
{
  operator delete();
}

_QWORD *sub_10009E968(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_10009E9E0(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10009E9C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10009E9E0(_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    sub_10004B438();
  result = (char *)sub_10004B4C0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

char *sub_10009EA1C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10009EA90();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_10009EA90()
{
  operator new();
}

_QWORD *sub_10009EBB0(_QWORD *a1)
{
  void *v2;

  *a1 = off_1002042A0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10009EBEC(_QWORD *a1)
{
  void *v2;

  *a1 = off_1002042A0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_10009EC38(uint64_t a1)
{
  return sub_10004AAAC((_QWORD *)(a1 + 16));
}

_BYTE **sub_10009EC40(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10004AAC8((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_10009EC98()
{
  operator new();
}

void sub_10009ED00()
{
  operator delete();
}

char *sub_10009ED24(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10009ED98();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_10009ED98()
{
  operator new();
}

_QWORD *sub_10009EEB8(_QWORD *a1)
{
  void *v2;

  *a1 = off_1002042F0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10009EEF4(_QWORD *a1)
{
  void *v2;

  *a1 = off_1002042F0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_10009EF40(uint64_t a1)
{
  return sub_10004AAAC((_QWORD *)(a1 + 16));
}

_BYTE **sub_10009EF48(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10004AAC8((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_10009EFA0()
{
  operator new();
}

void sub_10009F008()
{
  operator delete();
}

char *sub_10009F02C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10009F0A0();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_10009F0A0()
{
  operator new();
}

_QWORD *sub_10009F1C0(_QWORD *a1)
{
  void *v2;

  *a1 = off_100204340;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10009F1FC(_QWORD *a1)
{
  void *v2;

  *a1 = off_100204340;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_10009F248(uint64_t a1)
{
  return sub_10004AAAC((_QWORD *)(a1 + 16));
}

_BYTE **sub_10009F250(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10004AAC8((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_10009F2A8()
{
  operator new();
}

void sub_10009F310()
{
  operator delete();
}

char *sub_10009F334(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10009F3A8();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_10009F3A8()
{
  operator new();
}

_QWORD *sub_10009F4C8(_QWORD *a1)
{
  void *v2;

  *a1 = off_100204390;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10009F504(_QWORD *a1)
{
  void *v2;

  *a1 = off_100204390;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_10009F550(uint64_t a1)
{
  return sub_10004AAAC((_QWORD *)(a1 + 16));
}

_BYTE **sub_10009F558(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10004AAC8((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_10009F5B0()
{
  operator new();
}

void sub_10009F618()
{
  operator delete();
}

char *sub_10009F63C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10009F6B0();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_10009F6B0()
{
  operator new();
}

_QWORD *sub_10009F7D0(_QWORD *a1)
{
  void *v2;

  *a1 = off_1002043E0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10009F80C(_QWORD *a1)
{
  void *v2;

  *a1 = off_1002043E0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_10009F858(uint64_t a1)
{
  return sub_10004AAAC((_QWORD *)(a1 + 16));
}

_BYTE **sub_10009F860(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10004AAC8((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_10009F8B8()
{
  operator new();
}

void sub_10009F920()
{
  operator delete();
}

char *sub_10009F944(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10009F9B8();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_10009F9B8()
{
  operator new();
}

_QWORD *sub_10009FAD8(_QWORD *a1)
{
  void *v2;

  *a1 = off_100204430;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10009FB14(_QWORD *a1)
{
  void *v2;

  *a1 = off_100204430;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_10009FB60(uint64_t a1)
{
  return sub_10004AAAC((_QWORD *)(a1 + 16));
}

_BYTE **sub_10009FB68(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10004AAC8((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_10009FBC0()
{
  operator new();
}

void sub_10009FC28()
{
  operator delete();
}

char *sub_10009FC4C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10009FCC0();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_10009FCC0()
{
  operator new();
}

_QWORD *sub_10009FDE0(_QWORD *a1)
{
  void *v2;

  *a1 = off_100204480;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10009FE1C(_QWORD *a1)
{
  void *v2;

  *a1 = off_100204480;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_10009FE68(uint64_t a1)
{
  return sub_10004AAAC((_QWORD *)(a1 + 16));
}

_BYTE **sub_10009FE70(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10004AAC8((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_10009FEC8()
{
  operator new();
}

void sub_10009FF30()
{
  operator delete();
}

char *sub_10009FF54(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10009FFC8();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_10009FFC8()
{
  operator new();
}

_QWORD *sub_1000A00E8(_QWORD *a1)
{
  void *v2;

  *a1 = off_1002044D0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1000A0124(_QWORD *a1)
{
  void *v2;

  *a1 = off_1002044D0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_1000A0170(uint64_t a1)
{
  return sub_10004AAAC((_QWORD *)(a1 + 16));
}

_BYTE **sub_1000A0178(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10004AAC8((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000A01D0()
{
  operator new();
}

void sub_1000A0238()
{
  operator delete();
}

char *sub_1000A025C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000A02D0();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_1000A02D0()
{
  operator new();
}

void sub_1000A03F0()
{
  operator delete();
}

uint64_t sub_1000A0404()
{
  return sub_10004A69C();
}

_BYTE **sub_1000A040C(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10004AFBC((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000A0464()
{
  operator new();
}

char *sub_1000A04B4(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000A0528();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_1000A0528()
{
  operator new();
}

void sub_1000A0648()
{
  operator delete();
}

uint64_t sub_1000A065C()
{
  return sub_10004A69C();
}

_BYTE **sub_1000A0664(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10004AFBC((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000A06BC()
{
  operator new();
}

void sub_1000A070C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_1000A0768(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000A0754(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000A0768(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1000A0848(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000A0808((uint64_t)a2);
  }
}

void sub_1000A07EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A0808(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x6Cu);
  return a1;
}

void sub_1000A0834(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1000A0848(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x6Cu);
  return a1;
}

void sub_1000A0874(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A0888(qmi::MessageBase *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (sub_1000A0918((uint64_t)a1, result, v7, a3))
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

BOOL sub_1000A0918(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;

  v7 = a2;
  sub_10004A49C(&v7, a3, a3, (unint64_t)a4);
  v5 = v7;
  if (v7)
    (*(void (**)(_QWORD))(*a4 + 16))(*a4);
  return v5 != 0;
}

uint64_t sub_1000A0978(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (sub_1000A0A08((uint64_t)a1, (tlv *)result, v7, a3))
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

BOOL sub_1000A0A08(uint64_t a1, tlv *a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  tlv *v7;

  v7 = a2;
  sub_10004A5A0(&v7, a3, a3, a4);
  v5 = v7;
  if (v7)
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  return v5 != 0;
}

uint64_t sub_1000A0A60(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (sub_1000A0AF0((uint64_t)a1, (tlv *)result, v7, a3))
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

BOOL sub_1000A0AF0(uint64_t a1, tlv *a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  tlv *v7;

  v7 = a2;
  sub_10004A650(&v7, a3, a3, a4);
  v5 = v7;
  if (v7)
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  return v5 != 0;
}

uint64_t sub_1000A0B48(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (sub_1000A0BD8((uint64_t)a1, (tlv *)result, v7, a3))
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

BOOL sub_1000A0BD8(uint64_t a1, tlv *a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  tlv *v7;

  v7 = a2;
  sub_10004A370(&v7, a3, a3, a4);
  v5 = v7;
  if (v7)
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  return v5 != 0;
}

void sub_1000A0C30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_1000A0C8C(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000A0C78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000A0C8C(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1000A0D6C(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000A0D2C((uint64_t)a2);
  }
}

void sub_1000A0D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A0D2C(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x51u);
  return a1;
}

void sub_1000A0D58(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_1000A0D6C(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x51u);
  return a1;
}

void sub_1000A0D98(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A0DAC(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (sub_1000A0E3C((uint64_t)a1, (tlv *)result, v7, a3))
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

BOOL sub_1000A0E3C(uint64_t a1, tlv *a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  tlv *v7;

  v7 = a2;
  sub_1000796CC(&v7, a3, a3, a4);
  v5 = v7;
  if (v7)
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  return v5 != 0;
}

void sub_1000A0E94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_1000A0EF0(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000A0EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000A0EF0(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1000A0FD0(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000A0F90((uint64_t)a2);
  }
}

void sub_1000A0F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A0F90(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x5570u);
  return a1;
}

void sub_1000A0FBC(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_1000A0FD0(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x5570u);
  return a1;
}

void sub_1000A0FFC(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A1010(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (sub_1000A10A0((uint64_t)a1, result, v7, a3))
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

BOOL sub_1000A10A0(uint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  uint64_t v5;
  _BYTE v7[36];
  uint64_t v8;

  v8 = a2;
  sub_1000798D8(&v8, a3, a4, (uint64_t)v7);
  v5 = v8;
  if (v8)
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  return v5 != 0;
}

void sub_1000A10F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_1000A1154(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000A1140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000A1154(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1000A1234(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000A11F4((uint64_t)a2);
  }
}

void sub_1000A11D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A11F4(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x5571u);
  return a1;
}

void sub_1000A1220(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_1000A1234(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x5571u);
  return a1;
}

void sub_1000A1260(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1000A1274(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000A12E8();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_1000A12E8()
{
  operator new();
}

void sub_1000A1408()
{
  operator delete();
}

uint64_t sub_1000A141C()
{
  return sub_100019788();
}

_BYTE **sub_1000A1424(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10001976C((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000A147C()
{
  operator new();
}

void sub_1000A14C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_1000A1520(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000A150C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000A1520(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1000A1600(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000A15C0((uint64_t)a2);
  }
}

void sub_1000A15A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A15C0(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x45u);
  return a1;
}

void sub_1000A15EC(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1000A1600(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x45u);
  return a1;
}

void sub_1000A162C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1000A1640(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000A16B4();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_1000A16B4()
{
  operator new();
}

void sub_1000A17D4()
{
  operator delete();
}

uint64_t sub_1000A17E8()
{
  return sub_10004A69C();
}

_BYTE **sub_1000A17F0(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10004AFBC((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000A1848()
{
  operator new();
}

char *sub_1000A1898(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000A190C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_1000A190C()
{
  operator new();
}

void sub_1000A1A2C()
{
  operator delete();
}

uint64_t sub_1000A1A40()
{
  return sub_10004A69C();
}

_BYTE **sub_1000A1A48(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10004AFBC((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000A1AA0()
{
  operator new();
}

char *sub_1000A1AF0(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000A1B64();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_1000A1B64()
{
  operator new();
}

void sub_1000A1C84()
{
  operator delete();
}

uint64_t sub_1000A1C98()
{
  return sub_10004A69C();
}

_BYTE **sub_1000A1CA0(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10004AFBC((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000A1CF8()
{
  operator new();
}

char *sub_1000A1D48(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000A1DBC();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_1000A1DBC()
{
  operator new();
}

void sub_1000A1EDC()
{
  operator delete();
}

uint64_t sub_1000A1EF0()
{
  return sub_10004A69C();
}

_BYTE **sub_1000A1EF8(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10004AFBC((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000A1F50()
{
  operator new();
}

char *sub_1000A1FA0(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000A2014();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 10;
}

void sub_1000A2014()
{
  operator new();
}

void sub_1000A2138()
{
  operator delete();
}

uint64_t sub_1000A214C()
{
  return sub_100019780();
}

uint64_t *sub_1000A2154(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10001974C(a2, a1 + 10);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void sub_1000A21AC()
{
  operator new();
}

char *sub_1000A21FC(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000A2270();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_1000A2270()
{
  operator new();
}

void sub_1000A2390()
{
  operator delete();
}

uint64_t sub_1000A23A4()
{
  return sub_10004A69C();
}

_BYTE **sub_1000A23AC(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10004AFBC((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000A2404()
{
  operator new();
}

void sub_1000A2454(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_1000A24B0(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000A249C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000A24B0(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1000A2590(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000A2550((uint64_t)a2);
  }
}

void sub_1000A2534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A2550(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 2u);
  return a1;
}

void sub_1000A257C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1000A2590(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 2u);
  return a1;
}

void sub_1000A25BC(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1000A25D0(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000A2644();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_1000A2644()
{
  operator new();
}

void sub_1000A2764()
{
  operator delete();
}

uint64_t sub_1000A2778()
{
  return sub_10004A61C();
}

_BYTE **sub_1000A2780(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_100078FD4((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000A27D8()
{
  operator new();
}

uint64_t sub_1000A2828(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x5568u);
  return a1;
}

void sub_1000A2854(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1000A2868(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000A28DC();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_1000A28DC()
{
  operator new();
}

void sub_1000A29FC()
{
  operator delete();
}

uint64_t sub_1000A2A10()
{
  return sub_10004A69C();
}

_BYTE **sub_1000A2A18(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10004AFBC((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000A2A70()
{
  operator new();
}

void sub_1000A2AC4()
{
  operator new();
}

char *sub_1000A2B14(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000A2B88();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_1000A2B88()
{
  operator new();
}

void sub_1000A2CA8()
{
  operator delete();
}

uint64_t sub_1000A2CBC()
{
  return sub_100019788();
}

_BYTE **sub_1000A2CC4(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10001976C((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000A2D1C()
{
  operator new();
}

void sub_1000A2D68()
{
  operator new();
}

char *sub_1000A2DB0(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000A2E24();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_1000A2E24()
{
  operator new();
}

void sub_1000A2F44()
{
  operator delete();
}

uint64_t sub_1000A2F58()
{
  return sub_100019788();
}

_BYTE **sub_1000A2F60(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10001976C((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000A2FB8()
{
  operator new();
}

char *sub_1000A3000(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000A3074();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_1000A3074()
{
  operator new();
}

void sub_1000A3194()
{
  operator delete();
}

uint64_t sub_1000A31A8()
{
  return sub_100019788();
}

_BYTE **sub_1000A31B0(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10001976C((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000A3208()
{
  operator new();
}

void sub_1000A3250(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_1000A32AC(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000A3298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000A32AC(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1000A338C(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000A334C((uint64_t)a2);
  }
}

void sub_1000A3330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A334C(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x556Au);
  return a1;
}

void sub_1000A3378(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1000A338C(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x556Au);
  return a1;
}

void sub_1000A33B8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A33CC(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (sub_1000A345C((uint64_t)a1, (tlv *)result, v7, a3))
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

BOOL sub_1000A345C(uint64_t a1, tlv *a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  tlv *v7;

  v7 = a2;
  sub_100079624(&v7, a3, a3, a4);
  v5 = v7;
  if (v7)
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  return v5 != 0;
}

void sub_1000A34B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_1000A3510(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000A34FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000A3510(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1000A35F0(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000A35B0((uint64_t)a2);
  }
}

void sub_1000A3594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A35B0(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x556Cu);
  return a1;
}

void sub_1000A35DC(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_1000A35F0(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x556Cu);
  return a1;
}

void sub_1000A361C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3630(qmi::MessageBase *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (sub_1000A36C0((uint64_t)a1, (tlv *)result, v7, a3))
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

BOOL sub_1000A36C0(uint64_t a1, tlv *a2, uint64_t a3, _QWORD *a4)
{
  tlv *v5;
  tlv *v7;

  v7 = a2;
  sub_1000785C8(&v7, a3, a3, (unint64_t)a4);
  v5 = v7;
  if (v7)
    (*(void (**)(_QWORD))(*a4 + 16))(*a4);
  return v5 != 0;
}

uint64_t sub_1000A3718(qmi::MessageBase *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (sub_1000A37A8((uint64_t)a1, (tlv *)result, v7, a3))
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

BOOL sub_1000A37A8(uint64_t a1, tlv *a2, uint64_t a3, _QWORD *a4)
{
  tlv *v5;
  tlv *v7;

  v7 = a2;
  sub_1000786A8(&v7, a3, a3, (unint64_t)a4);
  v5 = v7;
  if (v7)
    (*(void (**)(_QWORD))(*a4 + 16))(*a4);
  return v5 != 0;
}

void sub_1000A3800(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_1000A385C(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000A3848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000A385C(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1000A393C(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000A38FC((uint64_t)a2);
  }
}

void sub_1000A38E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A38FC(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x556Du);
  return a1;
}

void sub_1000A3928(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_1000A393C(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x556Du);
  return a1;
}

void sub_1000A3968(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A397C(qmi::MessageBase *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (sub_1000A3A0C((uint64_t)a1, (tlv *)result, v7, a3))
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

BOOL sub_1000A3A0C(uint64_t a1, tlv *a2, uint64_t a3, unint64_t a4)
{
  tlv *v5;
  tlv *v7;

  v7 = a2;
  sub_100079678(&v7, a3, a3, a4);
  v5 = v7;
  if (v7)
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  return v5 != 0;
}

void sub_1000A3A64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_1000A3AC0(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000A3AAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000A3AC0(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1000A3BA0(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000A3B60((uint64_t)a2);
  }
}

void sub_1000A3B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A3B60(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x556Cu);
  return a1;
}

void sub_1000A3B8C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1000A3BA0(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x556Cu);
  return a1;
}

void sub_1000A3BCC(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1000A3BE0(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000A3C54();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_1000A3C54()
{
  operator new();
}

void sub_1000A3D74()
{
  operator delete();
}

uint64_t sub_1000A3D88()
{
  return sub_100019788();
}

_BYTE **sub_1000A3D90(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_10001976C((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000A3DE8()
{
  operator new();
}

char *sub_1000A3E30(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000A3EA4();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_1000A3EA4()
{
  operator new();
}

void sub_1000A3FC8()
{
  operator delete();
}

uint64_t sub_1000A3FDC()
{
  return sub_10004A2A4();
}

_DWORD **sub_1000A3FE4(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_100078648((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000A403C()
{
  operator new();
}

char *sub_1000A408C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000A4100();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_1000A4100()
{
  operator new();
}

void sub_1000A4220()
{
  operator delete();
}

uint64_t sub_1000A4234()
{
  return sub_10004A2A4();
}

_QWORD **sub_1000A423C(uint64_t a1, uint64_t *a2)
{
  char v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_QWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_1000786F4((_QWORD **)a2, (_QWORD *)(a1 + 16));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1000A4294()
{
  operator new();
}

void sub_1000A42E4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _DWORD *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  __int128 v28;
  unsigned int v29;
  unsigned int v30;
  __int128 v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  __int128 v42;
  unsigned int v43;
  unsigned int v44;
  __int128 v45;
  char v46;
  __int128 v47;
  __int128 *v48;
  __int128 *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  BOOL v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  BOOL v72;
  uint64_t v73;
  __int128 v74;
  __int128 *v75;
  __int128 v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  unint64_t v80;
  __int128 v81;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;

LABEL_1:
  v10 = a2;
LABEL_2:
  v11 = a1;
  a2 = v10;
  while (2)
  {
    v12 = a2 - a4;
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - a4) >> 2);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(_DWORD *)(a4 + 16) < *(_DWORD *)(a2 - 4))
        {
          v107 = *(_DWORD *)(a2 - 4);
          v96 = *(_OWORD *)(a2 - 20);
          v47 = *(_OWORD *)a4;
          *(_DWORD *)(a2 - 4) = *(_DWORD *)(a4 + 16);
          *(_OWORD *)(a2 - 20) = v47;
          *(_OWORD *)a4 = v96;
          *(_DWORD *)(a4 + 16) = v107;
        }
        return;
      case 3uLL:
        sub_1000A4BBC(a1, a2, a2 - 20, a2 - 20, a3, a4 + 20);
        return;
      case 4uLL:
        sub_1000A4F74(a1, a2, a2 - 20, a2 - 20, a2 - 40, a2 - 40, a3, a4 + 20);
        return;
      case 5uLL:
        v48 = (__int128 *)(a2 - 20);
        v49 = (__int128 *)(a2 - 40);
        v50 = (__int128 *)(a2 - 60);
        sub_1000A4F74(a1, a2, a2 - 20, a2 - 20, a2 - 40, a2 - 40, a2 - 60, a2 - 60);
        if (*(_DWORD *)(a4 + 16) < *(_DWORD *)(a2 - 64))
        {
          v51 = a2 - 80;
          v108 = *(_DWORD *)(a2 - 64);
          v97 = *(_OWORD *)(a2 - 80);
          v52 = *(_OWORD *)a4;
          *(_DWORD *)(v51 + 16) = *(_DWORD *)(a4 + 16);
          *(_OWORD *)v51 = v52;
          *(_OWORD *)a4 = v97;
          *(_DWORD *)(a4 + 16) = v108;
          if (*(_DWORD *)(a2 - 64) < *(_DWORD *)(a2 - 44))
          {
            v109 = *(_DWORD *)(a2 - 44);
            v98 = *v50;
            *v50 = *(_OWORD *)v51;
            *(_DWORD *)(a2 - 44) = *(_DWORD *)(a2 - 64);
            *(_DWORD *)(a2 - 64) = v109;
            *(_OWORD *)v51 = v98;
            if (*(_DWORD *)(a2 - 44) < *(_DWORD *)(a2 - 24))
            {
              v110 = *(_DWORD *)(a2 - 24);
              v99 = *v49;
              *v49 = *v50;
              *(_DWORD *)(a2 - 24) = *(_DWORD *)(a2 - 44);
              *(_DWORD *)(a2 - 44) = v110;
              *v50 = v99;
              if (*(_DWORD *)(a2 - 24) < *(_DWORD *)(a2 - 4))
              {
                v111 = *(_DWORD *)(a2 - 4);
                v100 = *v48;
                *v48 = *v49;
                *(_DWORD *)(a2 - 4) = *(_DWORD *)(a2 - 24);
                *(_DWORD *)(a2 - 24) = v111;
                *v49 = v100;
              }
            }
          }
        }
        return;
      default:
        if (v12 <= 479)
        {
          v53 = a2 - 20;
          v55 = a2 == a4 || v53 == a4;
          if ((a6 & 1) != 0)
          {
            if (!v55)
            {
              v56 = 0;
              do
              {
                v57 = *(_DWORD *)(v53 - 4);
                v58 = *(_DWORD *)(v53 + 16);
                v53 -= 20;
                if (v57 < v58)
                {
                  v101 = *(_OWORD *)v53;
                  v59 = v56;
                  do
                  {
                    v60 = a2 + v59;
                    *(_OWORD *)(v60 - 40) = *(_OWORD *)(a2 + v59 - 20);
                    *(_DWORD *)(v60 - 24) = *(_DWORD *)(a2 + v59 - 4);
                    if (!v59)
                      break;
                    v59 += 20;
                  }
                  while (v57 < *(_DWORD *)(v60 + 16));
                  *(_OWORD *)(v60 - 20) = v101;
                  *(_DWORD *)(v60 - 4) = v57;
                }
                v56 -= 20;
              }
              while (v53 != a4);
            }
          }
          else if (!v55)
          {
            v83 = a2 - 40;
            do
            {
              v84 = *(_DWORD *)(v53 - 4);
              v85 = *(_DWORD *)(v53 + 16);
              v53 -= 20;
              if (v84 < v85)
              {
                v103 = *(_OWORD *)v53;
                v86 = v83;
                do
                {
                  *(_OWORD *)v86 = *(_OWORD *)(v86 + 20);
                  *(_DWORD *)(v86 + 16) = *(_DWORD *)(v86 + 36);
                  v87 = *(_DWORD *)(v86 + 56);
                  v86 += 20;
                }
                while (v84 < v87);
                *(_OWORD *)v86 = v103;
                *(_DWORD *)(v86 + 16) = v84;
              }
              v83 -= 20;
            }
            while (v53 != a4);
          }
          return;
        }
        if (!a5)
        {
          if (a2 != a4)
          {
            v61 = (v13 - 2) >> 1;
            v62 = v61 + 1;
            v63 = a2 - 20 * v61;
            do
            {
              sub_1000A5048(a1, a2, v13, v63, v63);
              v63 += 20;
              --v62;
            }
            while (v62);
            v64 = v12 / 0x14uLL;
            do
            {
              v65 = 0;
              v112 = *(_DWORD *)(a2 - 4);
              v102 = *(_OWORD *)(a2 - 20);
              v66 = a2;
              do
              {
                v67 = v66 + 20 * ~v65;
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64)
                {
                  v70 = *(_DWORD *)(v67 - 4);
                  v71 = *(_DWORD *)(v67 - 24);
                  v72 = v70 >= v71;
                  v73 = v70 >= v71 ? 0 : -1;
                  v67 += 20 * v73;
                  if (!v72)
                    v68 = v69;
                }
                v74 = *(_OWORD *)(v67 - 20);
                *(_DWORD *)(v66 - 4) = *(_DWORD *)(v67 - 4);
                *(_OWORD *)(v66 - 20) = v74;
                v66 = v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              v75 = (__int128 *)(v67 - 20);
              if (v67 == a4 + 20)
              {
                *(_DWORD *)(v67 - 4) = v112;
                *v75 = v102;
              }
              else
              {
                v76 = *(_OWORD *)a4;
                *(_DWORD *)(v67 - 4) = *(_DWORD *)(a4 + 16);
                *v75 = v76;
                *(_DWORD *)(a4 + 16) = v112;
                *(_OWORD *)a4 = v102;
                if (a2 - (uint64_t)v75 >= 21)
                {
                  v77 = ((a2 - (uint64_t)v75) / 0x14uLL - 2) >> 1;
                  v78 = a2 - 20 * v77;
                  v79 = *(_DWORD *)(v67 - 4);
                  if (*(_DWORD *)(v78 - 4) < v79)
                  {
                    v92 = *v75;
                    do
                    {
                      v80 = v67;
                      v67 = v78;
                      v81 = *(_OWORD *)(v78 - 20);
                      *(_DWORD *)(v80 - 4) = *(_DWORD *)(v78 - 4);
                      *(_OWORD *)(v80 - 20) = v81;
                      if (!v77)
                        break;
                      v77 = (v77 - 1) >> 1;
                      v78 = a2 - 20 * v77;
                    }
                    while (*(_DWORD *)(v78 - 4) < v79);
                    *(_OWORD *)(v67 - 20) = v92;
                    *(_DWORD *)(v67 - 4) = v79;
                  }
                }
              }
              a4 += 20;
            }
            while (v64-- > 2);
          }
          return;
        }
        v14 = v13 >> 1;
        v15 = a2 - 20 * (v13 >> 1);
        if (v13 < 0x81)
        {
          sub_1000A4BBC(a2 - 20 * (v13 >> 1), a2 - 20 * (v13 >> 1), a1, a2, a4 + 20, a4 + 20);
        }
        else
        {
          sub_1000A4BBC(a1, a2, a2 - 20 * (v13 >> 1), a2 - 20 * (v13 >> 1), a4 + 20, a4 + 20);
          v16 = a2 - 20 * v14 + 20;
          sub_1000A4BBC(a2 - 20, a2 - 20, v16, v16, a4 + 40, a4 + 40);
          v17 = a2 + 20 * ~v14;
          sub_1000A4BBC(a2 - 40, a2 - 40, v17, v17, a4 + 60, a4 + 60);
          sub_1000A4BBC(v16, v16, v15, v15, v17, v17);
          v104 = *(_DWORD *)(a2 - 4);
          v93 = *(_OWORD *)(a2 - 20);
          v18 = *(_DWORD *)(v15 - 4);
          *(_OWORD *)(a2 - 20) = *(_OWORD *)(v15 - 20);
          *(_DWORD *)(a2 - 4) = v18;
          *(_DWORD *)(v15 - 4) = v104;
          *(_OWORD *)(v15 - 20) = v93;
        }
        --a5;
        if ((a6 & 1) == 0 && *(_DWORD *)(a2 + 16) >= *(_DWORD *)(a2 - 4))
        {
          v90 = *(_OWORD *)(a2 - 20);
          v19 = *(_DWORD *)(a2 - 4);
          if (v19 >= *(_DWORD *)(a4 + 16))
          {
            v23 = (unsigned int *)(a2 - 24);
            do
            {
              v21 = v23 + 1;
              if ((unint64_t)(v23 + 1) <= a4)
                break;
              v24 = *v23;
              v23 -= 5;
            }
            while (v19 >= v24);
          }
          else
          {
            v20 = a2;
            do
            {
              v21 = (_DWORD *)(v20 - 20);
              v22 = *(_DWORD *)(v20 - 24);
              v20 -= 20;
            }
            while (v19 >= v22);
          }
          v25 = a4;
          if ((unint64_t)v21 > a4)
          {
            v26 = a4;
            do
            {
              v25 = v26 + 20;
              v27 = *(_DWORD *)(v26 + 16);
              v26 += 20;
            }
            while (v19 < v27);
          }
          while (v25 < (unint64_t)v21)
          {
            v105 = *(v21 - 1);
            v94 = *(_OWORD *)(v21 - 5);
            v28 = *(_OWORD *)(v25 - 20);
            *(v21 - 1) = *(_DWORD *)(v25 - 4);
            *(_OWORD *)(v21 - 5) = v28;
            *(_DWORD *)(v25 - 4) = v105;
            *(_OWORD *)(v25 - 20) = v94;
            do
            {
              v29 = *(v21 - 6);
              v21 -= 5;
            }
            while (v19 >= v29);
            do
            {
              v30 = *(_DWORD *)(v25 + 16);
              v25 += 20;
            }
            while (v19 < v30);
          }
          if (v21 + 5 != (_DWORD *)a2)
          {
            v31 = *(_OWORD *)v21;
            *(_DWORD *)(a2 - 4) = v21[4];
            *(_OWORD *)(a2 - 20) = v31;
          }
          a6 = 0;
          *(_OWORD *)v21 = v90;
          v21[4] = v19;
          a2 = (uint64_t)v21;
          continue;
        }
        v32 = 0;
        v91 = *(_OWORD *)(a2 - 20);
        v33 = *(_DWORD *)(a2 - 4);
        do
        {
          v34 = *(_DWORD *)(a2 + v32 - 24);
          v32 -= 20;
        }
        while (v34 < v33);
        v35 = a2 + v32;
        v36 = a4;
        if (v32 == -20)
        {
          v39 = a4;
          while (v39 < v35)
          {
            v37 = v39 + 20;
            v40 = *(_DWORD *)(v39 + 16);
            v39 += 20;
            if (v40 < v33)
              goto LABEL_39;
          }
          v37 = v39;
        }
        else
        {
          do
          {
            v37 = v36 + 20;
            v38 = *(_DWORD *)(v36 + 16);
            v36 += 20;
          }
          while (v38 >= v33);
        }
LABEL_39:
        v10 = v35;
        if (v37 < v35)
        {
          v41 = v37;
          do
          {
            v106 = *(_DWORD *)(v10 - 4);
            v95 = *(_OWORD *)(v10 - 20);
            v42 = *(_OWORD *)(v41 - 20);
            *(_DWORD *)(v10 - 4) = *(_DWORD *)(v41 - 4);
            *(_OWORD *)(v10 - 20) = v42;
            *(_DWORD *)(v41 - 4) = v106;
            *(_OWORD *)(v41 - 20) = v95;
            do
            {
              v43 = *(_DWORD *)(v10 - 24);
              v10 -= 20;
            }
            while (v43 < v33);
            do
            {
              v44 = *(_DWORD *)(v41 + 16);
              v41 += 20;
            }
            while (v44 >= v33);
          }
          while (v41 < v10);
        }
        if (v10 + 20 != a2)
        {
          v45 = *(_OWORD *)v10;
          *(_DWORD *)(a2 - 4) = *(_DWORD *)(v10 + 16);
          *(_OWORD *)(a2 - 20) = v45;
        }
        *(_OWORD *)v10 = v91;
        *(_DWORD *)(v10 + 16) = v33;
        if (v37 < v35)
        {
LABEL_50:
          sub_1000A42E4(v11, a2, v10 + 20, v10 + 20, a5, a6 & 1);
          a6 = 0;
          a1 = v10 + 20;
          goto LABEL_2;
        }
        v46 = sub_1000A4CC4(a1, a2, v10 + 20, v10 + 20);
        if (!sub_1000A4CC4(v10, v10, a3, a4))
        {
          a1 = v10 + 20;
          if ((v46 & 1) != 0)
            goto LABEL_2;
          goto LABEL_50;
        }
        a3 = v10 + 20;
        a4 = v10 + 20;
        if ((v46 & 1) == 0)
          goto LABEL_1;
        return;
    }
  }
}

__n128 sub_1000A4BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 *v6;
  __n128 *v7;
  unsigned int v8;
  __n128 *v9;
  int v10;
  __n128 result;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v6 = (__n128 *)(a4 - 20);
  v7 = (__n128 *)(a2 - 20);
  v8 = *(_DWORD *)(a4 - 4);
  if (v8 >= *(_DWORD *)(a2 - 4))
  {
    if (*(_DWORD *)(a6 - 4) < v8)
    {
      v13 = *(_DWORD *)(a4 - 4);
      result = *v6;
      v14 = *(_DWORD *)(a6 - 4);
      *v6 = *(__n128 *)(a6 - 20);
      *(_DWORD *)(a4 - 4) = v14;
      *(__n128 *)(a6 - 20) = result;
      *(_DWORD *)(a6 - 4) = v13;
      if (*(_DWORD *)(a4 - 4) < *(_DWORD *)(a2 - 4))
      {
        v15 = *(_DWORD *)(a2 - 4);
        result = *v7;
        v16 = *(_DWORD *)(a4 - 4);
        *v7 = *v6;
        *(_DWORD *)(a2 - 4) = v16;
        *v6 = result;
        *(_DWORD *)(a4 - 4) = v15;
      }
    }
  }
  else
  {
    v9 = (__n128 *)(a6 - 20);
    if (*(_DWORD *)(a6 - 4) >= v8)
    {
      v17 = *(_DWORD *)(a2 - 4);
      result = *v7;
      v18 = *(_DWORD *)(a4 - 4);
      *v7 = *v6;
      *(_DWORD *)(a2 - 4) = v18;
      *v6 = result;
      *(_DWORD *)(a4 - 4) = v17;
      if (*(_DWORD *)(a6 - 4) < *(_DWORD *)(a4 - 4))
      {
        v19 = *(_DWORD *)(a4 - 4);
        result = *v6;
        v20 = *(_DWORD *)(a6 - 4);
        *v6 = *v9;
        *(_DWORD *)(a4 - 4) = v20;
        *v9 = result;
        *(_DWORD *)(a6 - 4) = v19;
      }
    }
    else
    {
      v10 = *(_DWORD *)(a2 - 4);
      result = *v7;
      v12 = *(_DWORD *)(a6 - 4);
      *v7 = *v9;
      *(_DWORD *)(a2 - 4) = v12;
      *v9 = result;
      *(_DWORD *)(a6 - 4) = v10;
    }
  }
  return result;
}

uint64_t sub_1000A4CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v6;
  int v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  int v26;
  int v27;
  __int128 v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;
  __int128 v34;

  v6 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * ((a2 - a4) >> 2))
  {
    case 0uLL:
    case 1uLL:
      return v6 & 1;
    case 2uLL:
      if (*(_DWORD *)(a4 + 16) < *(_DWORD *)(a2 - 4))
      {
        v7 = *(_DWORD *)(a2 - 4);
        v8 = *(_OWORD *)(a2 - 20);
        v9 = *(_DWORD *)(a4 + 16);
        *(_OWORD *)(a2 - 20) = *(_OWORD *)a4;
        *(_DWORD *)(a2 - 4) = v9;
        *(_OWORD *)a4 = v8;
        *(_DWORD *)(a4 + 16) = v7;
      }
      goto LABEL_22;
    case 3uLL:
      sub_1000A4BBC(a1, a2, a2 - 20, a2 - 20, a3, a4 + 20);
      goto LABEL_22;
    case 4uLL:
      sub_1000A4F74(a1, a2, a2 - 20, a2 - 20, a2 - 40, a2 - 40, a3, a4 + 20);
      goto LABEL_22;
    case 5uLL:
      v20 = (__int128 *)(a2 - 20);
      v21 = (__int128 *)(a2 - 40);
      v22 = (__int128 *)(a2 - 60);
      sub_1000A4F74(a1, a2, a2 - 20, a2 - 20, a2 - 40, a2 - 40, a2 - 60, a2 - 60);
      if (*(_DWORD *)(a4 + 16) < *(_DWORD *)(a2 - 64))
      {
        v23 = a2 - 80;
        v24 = *(_DWORD *)(a2 - 64);
        v25 = *(_OWORD *)(a2 - 80);
        v26 = *(_DWORD *)(a4 + 16);
        *(_OWORD *)v23 = *(_OWORD *)a4;
        *(_DWORD *)(v23 + 16) = v26;
        *(_OWORD *)a4 = v25;
        *(_DWORD *)(a4 + 16) = v24;
        if (*(_DWORD *)(a2 - 64) < *(_DWORD *)(a2 - 44))
        {
          v27 = *(_DWORD *)(a2 - 44);
          v28 = *v22;
          *v22 = *(_OWORD *)v23;
          *(_DWORD *)(a2 - 44) = *(_DWORD *)(a2 - 64);
          *(_OWORD *)v23 = v28;
          *(_DWORD *)(a2 - 64) = v27;
          if (*(_DWORD *)(a2 - 44) < *(_DWORD *)(a2 - 24))
          {
            v29 = *(_DWORD *)(a2 - 24);
            v30 = *v21;
            *v21 = *v22;
            *(_DWORD *)(a2 - 24) = *(_DWORD *)(a2 - 44);
            *v22 = v30;
            *(_DWORD *)(a2 - 44) = v29;
            if (*(_DWORD *)(a2 - 24) < *(_DWORD *)(a2 - 4))
            {
              v31 = *(_DWORD *)(a2 - 4);
              v32 = *v20;
              *v20 = *v21;
              *(_DWORD *)(a2 - 4) = *(_DWORD *)(a2 - 24);
              *v21 = v32;
              *(_DWORD *)(a2 - 24) = v31;
            }
          }
        }
      }
LABEL_22:
      v6 = 1;
      return v6 & 1;
    default:
      v10 = a2 - 40;
      sub_1000A4BBC(a1, a2, a2 - 20, a2 - 20, a2 - 40, a2 - 40);
      v12 = a2 - 60;
      if (a2 - 60 == a4)
        goto LABEL_15;
      v11 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = (__int128 *)(v12 - 20);
    v15 = *(_DWORD *)(v12 - 4);
    if (v15 < *(_DWORD *)(v10 - 4))
    {
      v34 = *v14;
      v16 = v11;
      while (1)
      {
        v17 = a2 + v16;
        *(_OWORD *)(v17 - 80) = *(_OWORD *)(a2 + v16 - 60);
        *(_DWORD *)(v17 - 64) = *(_DWORD *)(a2 + v16 - 44);
        if (v16 == 40)
          break;
        v16 += 20;
        if (v15 >= *(_DWORD *)(v17 - 24))
        {
          v18 = a2 + v16 - 60;
          goto LABEL_13;
        }
      }
      v18 = a2;
LABEL_13:
      *(_OWORD *)(v17 - 60) = v34;
      *(_DWORD *)(v18 - 4) = v15;
      if (++v13 == 8)
        break;
    }
    v11 -= 20;
    v10 = v12;
    v12 -= 20;
    if (v14 == (__int128 *)a4)
    {
LABEL_15:
      v19 = 1;
      goto LABEL_25;
    }
  }
  v19 = 0;
  LOBYTE(v11) = v14 == (__int128 *)a4;
LABEL_25:
  v6 = v19 | v11;
  return v6 & 1;
}

__n128 sub_1000A4F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 result;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;

  result.n128_u64[0] = sub_1000A4BBC(a1, a2, a3, a4, a5, a6).n128_u64[0];
  if (*(_DWORD *)(a8 - 4) < *(_DWORD *)(a6 - 4))
  {
    v13 = a6 - 20;
    v14 = *(_DWORD *)(a6 - 4);
    result = *(__n128 *)(a6 - 20);
    v15 = *(_DWORD *)(a8 - 4);
    *(_OWORD *)v13 = *(_OWORD *)(a8 - 20);
    *(_DWORD *)(v13 + 16) = v15;
    *(__n128 *)(a8 - 20) = result;
    *(_DWORD *)(a8 - 4) = v14;
    if (*(_DWORD *)(a6 - 4) < *(_DWORD *)(a4 - 4))
    {
      v16 = a4 - 20;
      v17 = *(_DWORD *)(a4 - 4);
      result = *(__n128 *)(a4 - 20);
      v18 = *(_DWORD *)(a6 - 4);
      *(_OWORD *)v16 = *(_OWORD *)v13;
      *(_DWORD *)(v16 + 16) = v18;
      *(__n128 *)v13 = result;
      *(_DWORD *)(a6 - 4) = v17;
      if (*(_DWORD *)(a4 - 4) < *(_DWORD *)(a2 - 4))
      {
        v19 = *(_DWORD *)(a2 - 4);
        result = *(__n128 *)(a2 - 20);
        v20 = *(_DWORD *)(a4 - 4);
        *(_OWORD *)(a2 - 20) = *(_OWORD *)v16;
        *(_DWORD *)(a2 - 4) = v20;
        *(__n128 *)v16 = result;
        *(_DWORD *)(a4 - 4) = v19;
      }
    }
  }
  return result;
}

__n128 sub_1000A5048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  __n128 result;
  __n128 v22;

  if (a3 >= 2)
  {
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((a2 - a5) >> 2)))
    {
      v6 = (0x999999999999999ALL * ((a2 - a5) >> 2)) | 1;
      v7 = a2 - 20 * v6;
      if ((uint64_t)(0x999999999999999ALL * ((a2 - a5) >> 2) + 2) < a3)
      {
        v8 = *(_DWORD *)(v7 - 4);
        v9 = *(_DWORD *)(v7 - 24);
        v10 = v8 >= v9;
        v11 = v8 >= v9 ? 0 : -1;
        v7 += 20 * v11;
        if (!v10)
          v6 = 0x999999999999999ALL * ((a2 - a5) >> 2) + 2;
      }
      v12 = *(_DWORD *)(a5 - 4);
      if (*(_DWORD *)(v7 - 4) >= v12)
      {
        v22 = *(__n128 *)(a5 - 20);
        do
        {
          v13 = a5;
          a5 = v7;
          v14 = *(_OWORD *)(v7 - 20);
          *(_DWORD *)(v13 - 4) = *(_DWORD *)(v7 - 4);
          *(_OWORD *)(v13 - 20) = v14;
          if (v5 < v6)
            break;
          v15 = (2 * v6) | 1;
          v7 = a2 - 20 * v15;
          v16 = 2 * v6 + 2;
          if (v16 < a3)
          {
            v17 = *(_DWORD *)(v7 - 4);
            v18 = *(_DWORD *)(v7 - 24);
            v19 = v17 >= v18;
            if (v17 >= v18)
              v20 = 0;
            else
              v20 = -1;
            v7 += 20 * v20;
            if (!v19)
              v15 = v16;
          }
          v6 = v15;
        }
        while (*(_DWORD *)(v7 - 4) >= v12);
        result = v22;
        *(__n128 *)(a5 - 20) = v22;
        *(_DWORD *)(a5 - 4) = v12;
      }
    }
  }
  return result;
}

char *sub_1000A5150(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000A51C4();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_1000A51C4()
{
  operator new();
}

void sub_1000A52EC()
{
  operator delete();
}

uint64_t sub_1000A5300()
{
  return sub_100079500();
}

uint64_t *sub_1000A5308(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_100079508(a2, a1 + 12);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void sub_1000A5360()
{
  operator new();
}

char *sub_1000A53B8(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000A542C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_1000A542C()
{
  operator new();
}

void sub_1000A5554()
{
  operator delete();
}

uint64_t sub_1000A5568()
{
  return sub_100079500();
}

uint64_t *sub_1000A5570(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_100079508(a2, a1 + 12);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void sub_1000A55C8()
{
  operator new();
}

char *sub_1000A5620(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000A5694();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_1000A5694()
{
  operator new();
}

void sub_1000A57BC()
{
  operator delete();
}

uint64_t sub_1000A57D0()
{
  return sub_100079500();
}

uint64_t *sub_1000A57D8(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_100079508(a2, a1 + 12);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void sub_1000A5830()
{
  operator new();
}

char *sub_1000A5888(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1000A58FC();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_1000A58FC()
{
  operator new();
}

void sub_1000A5A24()
{
  operator delete();
}

uint64_t sub_1000A5A38()
{
  return sub_100079500();
}

uint64_t *sub_1000A5A40(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = sub_100079508(a2, a1 + 12);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void sub_1000A5A98()
{
  operator new();
}

void sub_1000A5AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_1000A5B4C(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1000A5B38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1000A5B4C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1000A5C2C(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1000A5BEC((uint64_t)a2);
  }
}

void sub_1000A5BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A5BEC(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x556Bu);
  return a1;
}

void sub_1000A5C18(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1000A5C2C(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x556Bu);
  return a1;
}

void sub_1000A5C58(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1000A5D44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1000A5D60(uint64_t a1)
{
  id v2;
  void *v3;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("Initialize WCM_AriCoexCommandDriver... "));
  v2 = objc_alloc_init(*(Class *)(a1 + 32));
  v3 = (void *)qword_100271228;
  qword_100271228 = (uint64_t)v2;

}

void sub_1000A5EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000A5F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000A6000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1000ACD30(uint64_t a1, char *a2)
{
  if (!strncasecmp(a2, "kWCMCellularNetworkConfiguration_TTDUL_DL", 0x2AuLL))
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("SUB%ld: %s key found"), *(_QWORD *)(a1 + 32), "kWCMCellularNetworkConfiguration_TTDUL_DL");
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 104) = 1;
  }
  return 1;
}

uint64_t sub_1000B363C(uint64_t a1, char *a2)
{
  if (!strncasecmp(a2, "kWCMCellularNetworkConfiguration_TTDUL_DL", 0x2AuLL))
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("SUB%ld: %s key found"), *(_QWORD *)(a1 + 32), "kWCMCellularNetworkConfiguration_TTDUL_DL");
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 104) = 1;
  }
  return 1;
}

const char *sub_1000B3DAC(unsigned int a1)
{
  char **v1;

  if (a1 <= 5)
  {
    v1 = &(&off_100204CF8)[a1];
    return *v1;
  }
  if (((1 << a1) & 0x3FFF0000) != 0)
  {
    v1 = &(&off_100204D28)[a1 - 16];
    return *v1;
  }
  return "LogUnknown";
}

void sub_1000B41AC(id a1, int a2)
{
  +[WCM_Logging reloadLogSettingsFromPreferences](WCM_Logging, "reloadLogSettingsFromPreferences");
  +[WCM_Logging reloadiRATSettingsFromPreferences](WCM_Logging, "reloadiRATSettingsFromPreferences");
}

void sub_1000B49B0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "logToFile:", *(_QWORD *)(a1 + 40));

}

void sub_1000B4E70(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

id sub_1000B7BC4(id result)
{
  id v1;
  objc_super v2;

  if (!qword_100271330)
  {
    v1 = result;
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("Inside WRM_HandoverManagerSingleton with commCenter recovery"));
    v2.receiver = (id)*((_QWORD *)v1 + 4);
    v2.super_class = (Class)&OBJC_METACLASS___WRM_HandoverManager;
    result = objc_msgSend(objc_msgSendSuper2(&v2, "allocWithZone:", 0), "init");
    qword_100271330 = (uint64_t)result;
  }
  return result;
}

void sub_1000B7C9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000B7D04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000B7D84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000B7EB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_1000B86A0(id *result)
{
  id *v1;
  id v2;
  const __CFString *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;

  v1 = result;
  v2 = result[6];
  switch((unint64_t)v2)
  {
    case 7uLL:
      if (result[4])
      {
        objc_msgSend(result[5], "addiRatClient:");
        objc_msgSend(+[WRM_MetricsService getSingleton](WRM_MetricsService, "getSingleton"), "initAWDService");
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("Handover Manager:Added iRAT Client (WRMCommCenter) to Handover Manager "));
      }
      else
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("Handover Manager:remove iRAT Client (WRMCommCenter) from Handover Manager "));
        objc_msgSend(v1[5], "deleteiRATClient:", 1);
        if ((objc_msgSend(v1[5], "doesIRATClientSubscriptionContextExist") & 1) == 0)
        {
          if (objc_msgSend(*((id *)v1[5] + 8), "mobilityStateAwarenessEnabled"))
            objc_msgSend(*((id *)v1[5] + 9), "stopAllAlarms");
        }
      }
      objc_msgSend(v1[5], "registerForCTNotifications");
      objc_msgSend(v1[5], "registerForSCNotifications");
      return (id *)objc_msgSend(v1[5], "handleControllerAvailability:", v1[6]);
    case 8uLL:
      if (result[4])
      {
        objc_msgSend(result[5], "addiRatClient:");
        v3 = CFSTR("Handover Manager:Added iRAT Client (WRMNetworkd) to Handover Manager ");
        goto LABEL_29;
      }
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("Handover Manager:remove iRAT Client (WRMNetworkd) from Handover Manager "));
      v9 = v1[5];
      v10 = 3;
      goto LABEL_47;
    case 9uLL:
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("Handover Manager: Receivd WiFiCalling controller event controller %p"), result[4]);
      v4 = (void *)*((_QWORD *)v1[5] + 6);
      if (v4)
      {

        *((_QWORD *)v1[5] + 6) = 0;
      }
      v5 = v1[4];
      if (v5)
        *((_QWORD *)v1[5] + 6) = v5;
      return (id *)objc_msgSend(v1[5], "handleControllerAvailability:", v1[6]);
    case 0xAuLL:
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("Handover Manager: Receivd WRMIPTelephony controller event controller %p"), result[4]);
      v6 = (void *)*((_QWORD *)v1[5] + 14);
      if (v6)
      {

        *((_QWORD *)v1[5] + 14) = 0;
      }
      v7 = v1[4];
      if (v7)
        *((_QWORD *)v1[5] + 14) = v7;
      return (id *)objc_msgSend(v1[5], "handleControllerAvailability:", v1[6]);
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
      return result;
    case 0xFuLL:
      if (result[4])
      {
        objc_msgSend(result[5], "addiRatClient:");
        v3 = CFSTR("Handover Manager:Added iRAT Client (WRMCallKitTelephony) to Handover Manager ");
        goto LABEL_29;
      }
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("Handover Manager:remove iRAT Client (WRMCallKitTelephony) from Handover Manager "));
      v9 = v1[5];
      v10 = 8;
      goto LABEL_47;
    case 0x10uLL:
      if (result[4])
      {
        objc_msgSend(result[5], "addiRatClient:");
        v3 = CFSTR("Handover Manager:Added iRAT Client (WRMLocationd) to Handover Manager ");
        goto LABEL_29;
      }
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("Handover Manager:remove iRAT Client (WRMLocationd) from Handover Manager "));
      v9 = v1[5];
      v10 = 9;
      goto LABEL_47;
    case 0x11uLL:
      if (result[4])
      {
        objc_msgSend(result[5], "addiRatClient:");
        v3 = CFSTR("Handover Manager:Added iRAT Client (WRMCarousel) to Handover Manager ");
        goto LABEL_29;
      }
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("Handover Manager:remove iRAT Client (WRMCarousel) from Handover Manager "));
      v9 = v1[5];
      v10 = 10;
      goto LABEL_47;
    case 0x15uLL:
      if (result[4])
      {
        objc_msgSend(result[5], "addiRatClient:");
        v3 = CFSTR("Handover Manager:Added iRAT Client (WRMCommCenter1) to Handover Manager ");
        goto LABEL_29;
      }
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("Handover Manager:remove iRAT Client (WRMCommCenter1) from Handover Manager "));
      v9 = v1[5];
      v10 = 2;
      goto LABEL_47;
    case 0x1AuLL:
      if (result[4])
      {
        objc_msgSend(result[5], "addiRatClient:");
        v3 = CFSTR("Handover Manager:Added iRAT Client (WRMWirelessStress) to Handover Manager ");
        goto LABEL_29;
      }
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("Handover Manager:remove iRAT Client (WRMWirelessStress) from Handover Manager "));
      v9 = v1[5];
      v10 = 18;
      goto LABEL_47;
    default:
      if (v2 == (id)1)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("Handover Manager: Receivd WiFi controller event controller %p"), result[4]);
        v8 = (void *)*((_QWORD *)v1[5] + 5);
        if (v8)
        {

          *((_QWORD *)v1[5] + 5) = 0;
        }
        if (v1[4])
        {
          if (objc_msgSend(*((id *)v1[5] + 8), "symtompsMetricsEnabled"))
            objc_msgSend(v1[5], "createSymptomsService");
          *((_QWORD *)v1[5] + 5) = v1[4];
          byte_100271014 = 0;
        }
        else
        {
          byte_100271014 = 1;
        }
      }
      else
      {
        if (v2 != (id)32)
          return result;
        if (result[4])
        {
          objc_msgSend(result[5], "addiRatClient:");
          v3 = CFSTR("Handover Manager:Added iRAT Client (WRMJTRN) to Handover Manager ");
LABEL_29:
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, v3);
        }
        else
        {
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("Handover Manager:remove iRAT Client (WRMJTRN) from Handover Manager "));
          v9 = v1[5];
          v10 = 20;
LABEL_47:
          objc_msgSend(v9, "deleteiRATClient:", v10);
        }
      }
      return (id *)objc_msgSend(v1[5], "handleControllerAvailability:", v1[6]);
  }
}

id sub_1000B8AE0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "triggerHarvestDataEval");
}

id sub_1000B90A0(uint64_t a1)
{
  unsigned int v1;

  v1 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "isAssociated");
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("Evaluate link: WiFi link not associated. Associated:%d mLinkDown:%d"), v1, byte_100271014);
}

id sub_1000B929C(uint64_t a1)
{
  id v2;
  double v3;
  uint64_t v4;
  const __CFString *v5;
  void *v6;
  id result;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "count");
  if (!v2)
  {
    v5 = CFSTR("switchPrivateNwDataSim: No iRAT client available.");
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, v5);
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("switchPrivateNwDataSim: Total number of iRAT clients %zu."), v2);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 184), "timeIntervalSinceNow");
  v4 = *(_QWORD *)&v3;
  if (qword_100271000 == *(_QWORD *)(a1 + 40)
    && dword_100270DF0 == *(_DWORD *)(a1 + 48)
    && dword_100271008 == *(_DWORD *)(a1 + 52)
    && *(double *)&qword_100271338 - v3 < 30.0)
  {
    v5 = CFSTR("switchPrivateNwDataSim: Min. time interval not reached. Suppress the same recommendation");
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, v5);
  }
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v6 = *(void **)(*(_QWORD *)(a1 + 32) + 160);
  result = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (result)
  {
    v8 = result;
    v9 = *(_QWORD *)v14;
    while (2)
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v10);
        if (objc_msgSend(v11, "getMyClientType") == 1)
        {
          result = objc_msgSend(v11, "sendPrivateNwVsMacroRecommendation:currentSlotQuality:anyCallState:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52));
          qword_100271338 = v4;
          qword_100271000 = *(_QWORD *)(a1 + 40);
          v12 = *(_DWORD *)(a1 + 52);
          dword_100270DF0 = *(_DWORD *)(a1 + 48);
          dword_100271008 = v12;
          if (qword_100271000)
          {
            objc_msgSend(*(id *)(a1 + 32), "submitMetricsCBRSWithDataSimRecommendation:forSimSlot:", 1);
            return objc_msgSend(+[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton](WRM_EnhancedCTService, "wrm_EnhancedCTServiceSingleton"), "resetCbrsCAMetricSentOnSimSlot:", *(_QWORD *)(a1 + 40));
          }
          return result;
        }
        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      result = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      v8 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

_QWORD *sub_1000B955C(_QWORD *result)
{
  _QWORD *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;

  if (result[5])
  {
    v1 = result;
    v2 = +[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton](WRM_EnhancedCTService, "wrm_EnhancedCTServiceSingleton");
    v3 = objc_msgSend(v2, "getCellularDataLQM:", v1[5]);
    v4 = objc_msgSend(v2, "getDataStallState:", v1[5]);
    v5 = objc_msgSend(*(id *)(v1[4] + 120), "getAWDService");
    if (*((_BYTE *)v1 + 48))
      v6 = v1[5];
    else
      v6 = 0;
    return objc_msgSend(v5, "submitMetricsCBRSForSim:dataLQM:congested:", v6, v3, v4);
  }
  return result;
}

void sub_1000B9978()
{
  __CFRunLoop *Main;

  if (qword_100270FF0)
  {
    Main = CFRunLoopGetMain();
    CFRunLoopRemoveSource(Main, (CFRunLoopSourceRef)qword_100270FF0, kCFRunLoopDefaultMode);
  }
  if (qword_100270FE8)
  {
    CFRelease((CFTypeRef)qword_100270FE8);
    qword_100270FE8 = 0;
  }
  if (qword_100270FF0)
  {
    CFRelease((CFTypeRef)qword_100270FF0);
    qword_100270FF0 = 0;
  }
}

id sub_1000B9D10(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "toggleSAState:", 0);
}

id sub_1000B9D1C(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "isRecentDevice");
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "evaluateWiFiVersusCell");
  return result;
}

id sub_1000BA798(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("SIP stalled debouncing timer expired:resetIMSMetrics"));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "resetIMSMetrics");
}

id sub_1000BA96C(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("SIP debouncing timer expired:resetIMSMetrics"));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "resetIMSMetrics");
}

id sub_1000BAB4C(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("DPD debouncing timer expired:resetIMSMetrics"));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "resetIMSMetrics");
}

id sub_1000BB03C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id result;
  uint64_t v5;
  unint64_t v6;

  qword_100270FC8 = *(_QWORD *)(a1 + 40);
  v2 = 1;
  do
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "getiRATClientFromList:", v2);
    if (v3)
    {
      result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("setiRATPolicy client %u found, UI iRATPolicy=%lu, mIRATPolicyCT=%u, mIRATPolicyCT1=%u"), v2, *(_QWORD *)(a1 + 40), dword_100270FD0, dword_100270FD4);
      v5 = *(_QWORD *)(a1 + 40);
      if ((unint64_t)(v5 - 1) <= 2)
      {
        v6 = (unint64_t)objc_msgSend(*(id *)(a1 + 32), "convertToHOAlgorithmType:");
LABEL_5:
        result = objc_msgSend(v3, "setHandoverAlgorithmType:", v6);
        goto LABEL_8;
      }
      if (!v5)
      {
        if ((_DWORD)v2 == 1)
          v6 = dword_100270FD0;
        else
          v6 = dword_100270FD4;
        goto LABEL_5;
      }
    }
    else
    {
      result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("setiRATPolicy client %u not found"), v2);
    }
LABEL_8:
    v2 = (v2 + 1);
  }
  while ((_DWORD)v2 != 3);
  return result;
}

id sub_1000BB280(uint64_t a1)
{
  id result;

  result = (id)MGGetBoolAnswer(CFSTR("InternalBuild"));
  if ((_DWORD)result)
    return objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "setHOAlertUI:", a1);
  return result;
}

id sub_1000BB2C8(uint64_t a1)
{
  id result;

  result = (id)MGGetBoolAnswer(CFSTR("InternalBuild"));
  if ((_DWORD)result)
    return objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "setiRATPolicy:", a1);
  return result;
}

id sub_1000BBCA8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "toggleSAState:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "isWiFiPrimary"));
}

uint64_t sub_1000BC658()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = sub_1000BCEC0;
  v7 = sub_1000BCED0;
  v0 = qword_100271340;
  v8 = qword_100271340;
  if (!qword_100271340)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_1000BCEDC;
    v2[3] = &unk_100201B40;
    v2[4] = &v3;
    sub_1000BCEDC((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000BC704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BCA10()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = sub_1000BCEC0;
  v7 = sub_1000BCED0;
  v0 = qword_100271350;
  v8 = qword_100271350;
  if (!qword_100271350)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_1000BCFD4;
    v2[3] = &unk_100201B40;
    v2[4] = &v3;
    sub_1000BCFD4((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000BCABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000BCC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000BCEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000BCEC0(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1000BCED0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

Class sub_1000BCEDC(uint64_t a1)
{
  Class result;

  sub_1000BCF30();
  result = objc_getClass("MLFeatureValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_10012EDFC();
  qword_100271340 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void sub_1000BCF30()
{
  void *v0;
  __int128 v1;
  uint64_t v2;

  v0 = 0;
  if (!qword_100271348)
  {
    v1 = off_1002051B8;
    v2 = 0;
    qword_100271348 = _sl_dlopen(&v1, &v0);
  }
  if (!qword_100271348)
    sub_10012EE60(&v0);
  if (v0)
    free(v0);
}

Class sub_1000BCFD4(uint64_t a1)
{
  Class result;

  sub_1000BCF30();
  result = objc_getClass("MLModel");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_10012EEC4();
  qword_100271350 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class sub_1000BD028(uint64_t a1)
{
  Class result;

  sub_1000BCF30();
  result = objc_getClass("MLPredictionOptions");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_10012EF28();
  qword_100271358 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class sub_1000BD07C(uint64_t a1)
{
  Class result;

  sub_1000BCF30();
  result = objc_getClass("MLArrayBatchProvider");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_10012EF8C();
  qword_100271360 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

id sub_1000BDBF4(uint64_t a1)
{
  id v2;
  unsigned int v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "wifiController");
  if (objc_msgSend(*(id *)(a1 + 32), "audioBuiltInReceiver"))
    v3 = objc_msgSend(v2, "headTxPowerCapdBm");
  else
    v3 = objc_msgSend(v2, "bodyTxPowerCapdBm");
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cellularController"), "updateWiFiStatusCenterFreq:bandwidth:txPower:", objc_msgSend(v2, "channelCenterFreqMHz"), objc_msgSend(v2, "channelBandwidthMHz"), v3);
}

void sub_1000BE5C4(uint64_t a1)
{
  _DWORD *v2;
  _QWORD *v3;
  NSObject *v4;
  _QWORD block[5];

  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeCoexFeatures"), "containsObject:", CFSTR("CellularNeedWiFiStatus"))&& objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeCoexFeatures"), "containsObject:", CFSTR("WiFiOffFreqUpdate"))&& !objc_msgSend(*(id *)(a1 + 32), "wifiController")&& *(_QWORD *)(a1 + 40) == 1)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ wifiController is NULL. Need to pass Freq of 0"));
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cellularController"), "updateWiFiStatusCenterFreq:bandwidth:txPower:", 0, 0, 0);
  }
  v2 = *(_DWORD **)(a1 + 32);
  if (v2[15]
    && objc_msgSend(objc_msgSend(v2, "activeCoexFeatures"), "containsObject:", CFSTR("CTSacDriverNeedWiFiFreq"))&& !objc_msgSend(*(id *)(a1 + 32), "wifiController")&& *(_QWORD *)(a1 + 40) == 1)
  {
    objc_msgSend(*(id *)(a1 + 32), "updateCTSacDriverRemoveAllFromWifiClient");
  }
  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeCoexFeatures"), "containsObject:", CFSTR("CoexBBUnifiedSensorInfoSupport"))&& *(_QWORD *)(a1 + 40) == 1)
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cellularController"), "sendBBCoexSensorMessage:band:usecase:", 1, 0, 0);
  }
  v3 = *(_QWORD **)(a1 + 32);
  if (v3[23]
    && objc_msgSend(objc_msgSend(v3, "activeCoexFeatures"), "containsObject:", CFSTR("SacPolicySupport"))
    && !objc_msgSend(*(id *)(a1 + 32), "wifiController")
    && *(_QWORD *)(a1 + 40) == 1)
  {
    v4 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 184), "getQueue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000BE75C;
    block[3] = &unk_1002019E8;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_async(v4, block);
  }
}

id sub_1000BE75C(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 184), "isTestMode");
  if ((result & 1) == 0)
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 184), "sacRemoveAllWifiFreq");
  return result;
}

int64_t sub_1000C0D98(id a1, id a2, id a3)
{
  int v4;

  v4 = objc_msgSend(a2, "intValue");
  if (v4 > (int)objc_msgSend(a3, "intValue"))
    return 1;
  else
    return -1;
}

id sub_1000C711C(uint64_t a1)
{
  id result;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 184), "sacUpdateWiFiFreqInfo:Bandwidth:", 1000000 * objc_msgSend(*(id *)(a1 + 40), "channelCenterFreqMHz"), 1000000 * objc_msgSend(*(id *)(a1 + 40), "channelBandwidthMHz"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 184), "sacReportWifiVictimFreqListOnTargetSac:action:", 1, 1);
  result = objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "activeCoexFeatures"), "containsObject:", CFSTR("SacPolicyJasperSupport"));
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 184), "sacReportWifiVictimFreqListOnTargetSac:action:", 2, 1);
  return result;
}

id sub_1000C8E00(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  id result;

  v2 = objc_msgSend(*(id *)(a1 + 32), "dataLqmState");
  v3 = objc_msgSend(*(id *)(a1 + 32), "cellularController");
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("BB20: updateLqmState:1 dataLQMLqmState = %d, rrc_state %d, slot %ld cell_active slot %llu self.lqm %d"), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 52), *(_QWORD *)(a1 + 40), objc_msgSend(v3, "getActiveSlot"), (int)v2);
  v4 = *(_QWORD *)(a1 + 40) - 1;
  result = objc_msgSend(v3, "getActiveSlot");
  if ((id)v4 == result && *(_DWORD *)(a1 + 48) != (_DWORD)v2)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("BB20: updateLqmState:1 updating lqm with %d %d"), *(unsigned int *)(a1 + 48), v2);
    objc_msgSend(*(id *)(a1 + 32), "setDataLqmState:", *(char *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 32), "setCTRrcState:", *(unsigned __int8 *)(a1 + 52));
    return objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "updateControllerState:", 105);
  }
  return result;
}

void sub_1000C9188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1000C93C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

NSDictionary *sub_1000C93E8(uint64_t a1)
{
  _QWORD v3[5];
  _QWORD v4[5];

  v3[0] = CFSTR("IssueBand");
  v4[0] = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:");
  v3[1] = CFSTR("IssueType");
  v4[1] = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:");
  v3[2] = CFSTR("IsCoexBand");
  v4[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:"), "intValue") != 0);
  v3[3] = CFSTR("HasAntConstraint");
  v4[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:"), "intValue") != 0);
  v3[4] = CFSTR("IssueCount");
  v4[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("count")), "intValue"));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 5);
}

NSDictionary *sub_1000C975C(uint64_t a1)
{
  _QWORD v3[9];
  _QWORD v4[9];

  v3[0] = CFSTR("ULCAHasCoexBand");
  v4[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 64));
  v3[1] = CFSTR("ULCAPrimaryCarrierULFreq");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  v3[2] = CFSTR("ULCAPrimaryCarrierDLFreq");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 36));
  v3[3] = CFSTR("ULCAPrimaryCarrierULBW");
  v4[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40));
  v3[4] = CFSTR("ULCAPrimaryCarrierDLBW");
  v4[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44));
  v3[5] = CFSTR("ULCACriticalCarrierULFreq");
  v4[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48));
  v3[6] = CFSTR("ULCACriticalCarrierDLFreq");
  v4[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 52));
  v3[7] = CFSTR("ULCACriticalCarrierULBW");
  v4[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  v3[8] = CFSTR("ULCACriticalCarrierDLBW");
  v4[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 60));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 9);
}

id sub_1000C9934(uint64_t a1)
{
  double v2;

  +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
  return objc_msgSend(objc_msgSend(+[WCM_CoreAnalyticsService singleton](WCM_CoreAnalyticsService, "singleton"), "mBTConnectedDevicesHandler"), "updateBTCoexWiFiState:wifiChannel:at:", *(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 36), v2);
}

id sub_1000C9BCC(_QWORD *a1)
{
  double v2;
  __int128 v4;

  +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
  return objc_msgSend(objc_msgSend(+[WCM_CoreAnalyticsService singleton](WCM_CoreAnalyticsService, "singleton", a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]), "mBTConnectedDevicesHandler"), "updateBTCoexConnectedDevices:at:", &v4, v2);
}

id sub_1000C9CFC(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  double v4;
  double v5;
  int v6;
  id v7;
  uint64_t v9;
  uint64_t v10;

  v2 = (uint64_t)objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "wifiController"), "getWiFiBTActiveProfileFor2G");
  v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "btController"), "powerState");
  +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
  v5 = v4;
  if (v2 == 4)
  {
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 52);
    if (v6)
      v2 = (v6 + 10);
    else
      v2 = 4;
  }
  v7 = objc_msgSend(+[WCM_CoreAnalyticsService singleton](WCM_CoreAnalyticsService, "singleton"), "mBTConnectedDevicesHandler");
  LOBYTE(v10) = v3;
  LOWORD(v9) = *(_WORD *)(a1 + 64);
  return objc_msgSend(v7, "updateBTCoexStats_tddCnt:hybridCnt:btDurMs:totDurMs:parallelCnt:btDurAirMs:wlrssiCoex:btrssiCoex:activeProfileFor2G:btPowerState:at:", *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), v5, v9, v2, v10);
}

_QWORD *sub_1000CA7CC(_QWORD *a1, NSObject **a2, queue a3)
{
  NSObject *v5;
  queue v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  dispatch_object_t object;
  __int128 v12;

  *a1 = 0;
  a1[1] = 0;
  v5 = *a2;
  object = v5;
  if (v5)
    dispatch_retain(v5);
  v6.fObj.fObj = a3.fObj.fObj;
  ice::Client::create(&v12, (ice::Client *)&object, v6, (const char *)a3.fObj.fObj);
  sub_100020AA4((uint64_t)a1, &v12);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (object)
    dispatch_release(object);
  return a1;
}

void sub_1000CA86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  uint64_t v10;

  if (object)
    dispatch_release(object);
  sub_10002C2C4(v10);
  _Unwind_Resume(a1);
}

ice::Client *sub_1000CA890(ice::Client **a1)
{
  ice::Client *result;

  result = *a1;
  if (result)
    return (ice::Client *)ice::Client::start(result);
  return result;
}

void sub_1000CA8A0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = a3;
  v3 = *a1;
  if (v3)
    sub_1000CA8CC(v3, a2, &v4);
}

void sub_1000CA8CC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *v5;
  void *v6;
  void *aBlock;

  sub_1000CAB84(*a3, &aBlock);
  v5 = aBlock;
  if (aBlock)
    v5 = _Block_copy(aBlock);
  v6 = v5;
  ice::Client::regEventHandlerInternal(a1, a2, &v6);
  if (v6)
    _Block_release(v6);
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1000CA944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, void *a10)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a10)
    _Block_release(a10);
  _Unwind_Resume(exception_object);
}

void sub_1000CA970(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = a3;
  v3 = *a1;
  if (v3)
    sub_1000CA99C(v3, a2, &v4);
}

void sub_1000CA99C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *aBlock;
  void *v6;

  sub_1000CAC08(*a3, &v6);
  aBlock = v6;
  v6 = 0;
  ice::Client::regIndicationInternal(a1, a2, &aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (v6)
    _Block_release(v6);
}

void sub_1000CAA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, void *a10)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a10)
    _Block_release(a10);
  _Unwind_Resume(exception_object);
}

void sub_1000CAA34(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE v4[40];
  uint64_t v5;

  v5 = a3;
  v3 = *a1;
  if (v3)
  {
    sub_1000CAA6C(v3, a2, &v5, (uint64_t)v4);
    ice::SendMsgBaseProxy::~SendMsgBaseProxy((ice::SendMsgBaseProxy *)v4);
  }
}

void sub_1000CAA6C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *aBlock;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *v13;

  sub_1000CAC08(*a3, &v13);
  sub_100046734(&v11, (_QWORD *)(a1 + 8));
  ice::SendMsgBaseProxy::SendMsgBaseProxy(a4, &v11, a2);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  aBlock = v13;
  v13 = 0;
  ice::SendMsgBaseProxy::callback(a4, &aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (v13)
    _Block_release(v13);
}

void sub_1000CAB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, char a10, uint64_t a11, void *a12)
{
  ice::SendMsgBaseProxy *v12;

  if (aBlock)
    _Block_release(aBlock);
  ice::SendMsgBaseProxy::~SendMsgBaseProxy(v12);
  if (a12)
    _Block_release(a12);
  _Unwind_Resume(a1);
}

void *sub_1000CAB84@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  _QWORD aBlock[5];

  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 0x40000000;
  aBlock[2] = sub_1000CABE8;
  aBlock[3] = &unk_100205458;
  aBlock[4] = a1;
  result = _Block_copy(aBlock);
  *a2 = result;
  return result;
}

uint64_t sub_1000CABE8(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

void *sub_1000CAC08@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  _QWORD aBlock[5];

  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 0x40000000;
  aBlock[2] = sub_1000CAC6C;
  aBlock[3] = &unk_100205480;
  aBlock[4] = a1;
  result = _Block_copy(aBlock);
  *a2 = result;
  return result;
}

uint64_t sub_1000CAC6C(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

id sub_1000CB094(uint64_t a1)
{
  unsigned int v2;
  const char *v3;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (v2 < 0x2A && ((0x3EEEFFFFFFFuLL >> v2) & 1) != 0)
  {
    v3 = (&off_1002055F0)[v2];
  }
  else if (v2 == 42)
  {
    v3 = "WRMSOS";
  }
  else
  {
    v3 = "INVALID_PROC_ID!!!";
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("Delete session with processId(%s)"), v3);
  return objc_msgSend(+[WCM_Server singleton](WCM_Server, "singleton"), "removeSessionFromList:", *(_QWORD *)(a1 + 32));
}

void sub_1000CB1A0(uint64_t a1)
{
  uint64_t v1;
  unsigned int v3;
  const char *v4;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v1 + 8))
  {
    v3 = *(_DWORD *)(v1 + 16);
    if (v3 < 0x2A && ((0x3EEEFFFFFFFuLL >> v3) & 1) != 0)
    {
      v4 = (&off_1002055F0)[v3];
    }
    else if (v3 == 42)
    {
      v4 = "WRMSOS";
    }
    else
    {
      v4 = "INVALID_PROC_ID!!!";
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 19, CFSTR("WCM_Session: sending message to %s"), v4);
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Sending Message :%@"), *(_QWORD *)(a1 + 40));
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 32) + 8), *(xpc_object_t *)(a1 + 40));
  }
}

id sub_1000CC5C8(uint64_t a1)
{
  qword_1002713E8 = (uint64_t)objc_alloc_init(*(Class *)(a1 + 32));
  return objc_msgSend((id)qword_1002713E8, "configureCTNotificationCallBacks");
}

void sub_1000CC7FC(const __CFData *a1, int a2)
{
  int v4;
  id v5;
  UInt8 v6;
  UInt8 v7[2];
  UInt8 buffer[2];
  CFRange v9;
  CFRange v10;
  CFRange v11;
  CFRange v12;
  CFRange v13;

  *(_WORD *)buffer = 0;
  *(_WORD *)v7 = 0;
  v6 = 0;
  v9.location = 0;
  v9.length = 1;
  CFDataGetBytes(a1, v9, &buffer[1]);
  if (a2 == 16 && buffer[1] - 1 <= 1)
  {
    v10.location = 1;
    v10.length = 1;
    CFDataGetBytes(a1, v10, buffer);
    if ((buffer[0] & 1) != 0)
    {
      v4 = 1;
      v11.location = 2;
      v11.length = 1;
      CFDataGetBytes(a1, v11, &v7[1]);
      if (v7[1] > 9u)
        goto LABEL_7;
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Discarding invalid data LQM %d"), v7[1]);
    }
    v4 = 0;
LABEL_7:
    if ((buffer[0] & 2) != 0)
    {
      v12.location = 3;
      v12.length = 1;
      CFDataGetBytes(a1, v12, v7);
      if ((buffer[0] & 4) == 0)
      {
LABEL_9:
        if (!v4)
          return;
        goto LABEL_10;
      }
    }
    else if ((buffer[0] & 4) == 0)
    {
      goto LABEL_9;
    }
    v13.location = 4;
    v13.length = 1;
    CFDataGetBytes(a1, v13, &v6);
    if (!v4)
      return;
LABEL_10:
    v5 = +[WRM_SCService WRM_SCServiceControllerSingleton](WRM_SCService, "WRM_SCServiceControllerSingleton");
    objc_msgSend(v5, "setCellularDataLQM:", (char)v7[1]);
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Received eLQM notification from BB, Version: %d, LQM: %d, RRC state: %d, Cell interface state: %d, stateChangeBitmask %d"), buffer[1], (char)v7[1], v7[0], v6, buffer[0]);
  }
}

uint64_t sub_1000CC94C(const __CFData *a1, UInt8 *a2, UInt8 *a3)
{
  id v6;
  unsigned __int8 Length;
  const UInt8 *v8;
  unsigned int v9;
  _BOOL8 v10;
  const __CFString *v11;
  uint64_t v12;
  const UInt8 *v14;
  const UInt8 *v15;
  uint64_t v16;
  const UInt8 *v17;
  const UInt8 *v18;
  _BOOL8 v19;
  const UInt8 *BytePtr;
  const UInt8 *v21;
  int v22;
  unsigned int v23;
  int v24;
  const __CFString *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  __int128 v33;
  int v34;
  UInt8 buffer;
  CFRange v36;
  CFRange v37;
  CFRange v38;
  CFRange v39;
  CFRange v40;

  v6 = objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "getCTService");
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("WRM_CTService:processVoiceLQMBlob:Voice LQM notification received"));
  if (a1)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("WRM_CTService:Calling CFDataGetLength"));
    Length = CFDataGetLength(a1);
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("WRM_CTService:Calling CFDataGetLength, Blob size: %d"), Length);
    if (!Length)
      return 0;
    buffer = 0;
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("WRM_CTService:Voice LQM notification received, Blob size: %d"), Length);
    v36.location = 0;
    v36.length = 1;
    CFDataGetBytes(a1, v36, &buffer);
    if (buffer <= 0xDFu)
    {
      switch(buffer)
      {
        case 1u:
          v12 = 1;
          v37.location = 1;
          v37.length = 1;
          CFDataGetBytes(a1, v37, a2);
          v38.location = 2;
          v38.length = 1;
          CFDataGetBytes(a1, v38, a3);
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("BLOB Size: %d, Voice LQM BLOB Version: %d, VoiceLQM: %d, ReasonCode: %d"), Length, buffer, *a2, *a3);
          return v12;
        case 2u:
          v39.location = 1;
          v39.length = 1;
          CFDataGetBytes(a1, v39, a2);
          v40.location = 2;
          v40.length = 1;
          CFDataGetBytes(a1, v40, a3);
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Init BLOB Size: %d, Version: %d, VoiceLQM: %d"), Length, buffer, *a2);
          BytePtr = CFDataGetBytePtr(a1);
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("IMS preference: %d, CodecType: %d, Total Erasures: %u, Total PlayBacks:%u"), BytePtr[3], *((unsigned int *)BytePtr + 3), *((unsigned int *)BytePtr + 1), *((unsigned int *)BytePtr + 2));
          objc_msgSend(v6, "setIMSPreference:", BytePtr[3] != 0);
          if (objc_msgSend(v6, "getServingCellType") == 1)
          {
            objc_msgSend(v6, "setServingCellRSRP:", (double)*((int *)BytePtr + 5));
            objc_msgSend(v6, "setServingCellSNR:", (double)*((int *)BytePtr + 4));
            +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("RSRP: %f, SINR: %f"), *((unsigned int *)BytePtr + 5), *((unsigned int *)BytePtr + 4));
          }
          objc_msgSend(v6, "updateAudioQuality:", *(_QWORD *)(BytePtr + 4), *((unsigned int *)BytePtr + 3));
          return 1;
        case 3u:
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Init BLOB Size: %d, Version: %d"), Length, 3);
          v14 = CFDataGetBytePtr(a1);
          v15 = v14;
          if (v14[3])
          {
            *a2 = v14[1];
            v16 = v14[2];
            *a3 = v16;
            +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Version: %d, VoiceLQM: %d, ReasonCode: %d"), buffer, *a2, v16);
          }
          else
          {
            +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Ignore LQM report is not valid"), v27, v29, v30);
          }
          v23 = objc_msgSend(v6, "getServingCellType");
          v24 = *(_DWORD *)(v15 + 11);
          if (v23 == 1)
          {
            objc_msgSend(v6, "setServingCellRSRP:", (double)v24);
            objc_msgSend(v6, "setServingCellSNR:", (double)*(int *)(v15 + 7));
            v25 = CFSTR("RSRP: %llf, SINR: %llf");
          }
          else
          {
            objc_msgSend(v6, "setServingCellRSCP:", (double)(*(_DWORD *)(v15 + 7) + v24));
            objc_msgSend(v6, "setServingCellECIO:", (double)*(int *)(v15 + 7));
            v25 = CFSTR("RSSI: %llf, SINR: %llf");
          }
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v25, (double)*(int *)(v15 + 11), (double)*(int *)(v15 + 7));
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("BB Long Session Status: %d, BB High Power Status: %d, True Limited Service: %d"), v15[4], v15[5], v15[6]);
          objc_msgSend(v6, "updateBBLongSessionState:", v15[4]);
          v9 = objc_msgSend(v6, "isBBHighPowerState");
          objc_msgSend(v6, "updateBBHighPowerState:", v15[5] != 0);
          objc_msgSend(v6, "updateBBLimitedServiceState:", v15[6] != 0);
          v22 = v15[5];
          goto LABEL_39;
      }
    }
    else if (buffer > 0xEFu)
    {
      if (buffer == 240)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Init BLOB Size: %d, Version: %d"), Length, 240);
        v21 = CFDataGetBytePtr(a1);
        *a2 = v21[1];
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR(" Version %d, Voice LQM: %d, PDCP TX SDU Count: %d, PDCP TX discard count: %d, RLC RX PDU count: %d, RLC RX missing pdu count: %d, LQE: %d "), *v21, v21[1], *(unsigned int *)(v21 + 2), *(unsigned int *)(v21 + 6), *(unsigned int *)(v21 + 10), *(unsigned int *)(v21 + 14), *(unsigned int *)(v21 + 18));
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Meas Serving cell type : %d, SNR: %d, RSSI:%d, RSRP: %f, RSRQ: %f "), *(unsigned int *)(v21 + 22), *((char *)v21 + 26), *(__int16 *)(v21 + 27), *(float *)(v21 + 29), *(float *)(v21 + 33));
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Voice LQM BLOB Version: %d, VoiceLQM: %d, "), buffer, *a2);
        objc_msgSend(v6, "setServingCellRSSI:", (double)*(__int16 *)(v21 + 27));
        objc_msgSend(v6, "setServingCellRSRP:", *(float *)(v21 + 29));
        objc_msgSend(v6, "setServingCellSNR:", (double)*((char *)v21 + 26));
        objc_msgSend(v6, "setServingCellRSRQ:", *(float *)(v21 + 33));
        return 1;
      }
      if (buffer == 241)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Init BLOB Size: %d, Version: %d"), Length, 241);
        v17 = CFDataGetBytePtr(a1);
        *a2 = v17[1];
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR(" Version %d, Voice LQM: %d, PDCP TX SDU Count: %d, PDCP TX discard count: %d, RLC RX PDU count: %d, RLC RX missing pdu count: %d, LQE: %d "), *v17, v17[1], *(unsigned int *)(v17 + 2), *(unsigned int *)(v17 + 6), *(unsigned int *)(v17 + 10), *(unsigned int *)(v17 + 14), *(unsigned int *)(v17 + 18));
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Meas Serving cell type : %d, SNR: %d, RSSI:%d, RSRP: %f, RSRQ: %f "), *(unsigned int *)(v17 + 22), *((char *)v17 + 64), *((__int16 *)v17 + 13), *((float *)v17 + 7), *((float *)v17 + 8));
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CodecType: %d, Total Erasures: %d, Total PlayBacks:%d, Audio Erasure Speech:%d,Audio Erasure Silence: %d"), *((unsigned int *)v17 + 13), *((unsigned int *)v17 + 11), *((unsigned int *)v17 + 12), *((unsigned int *)v17 + 14), *((unsigned int *)v17 + 15));
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("IMS preference : %d, WCDMA RSCP: %d, WCDMA ECIO:%d"), *(unsigned int *)(v17 + 65), *((unsigned int *)v17 + 10), *((unsigned int *)v17 + 9));
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Voice LQM BLOB Version: %d, VoiceLQM: %d, "), buffer, *a2);
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Voice LQM BLOB Cell load valid: %d, est cell load: %d, "), *(unsigned int *)(v17 + 69), *((char *)v17 + 73));
        objc_msgSend(v6, "setServingCellRSSI:", (double)*((__int16 *)v17 + 13));
        objc_msgSend(v6, "setServingCellRSRP:", *((float *)v17 + 7));
        objc_msgSend(v6, "setServingCellSNR:", (double)*((char *)v17 + 64));
        objc_msgSend(v6, "setServingCellRSRQ:", *((float *)v17 + 8));
        objc_msgSend(v6, "setIMSPreference:", *(_DWORD *)(v17 + 65) != 0);
        objc_msgSend(v6, "setServingCellRSCP:", (double)*((int *)v17 + 10));
        objc_msgSend(v6, "setServingCellECIO:", (double)*((int *)v17 + 9));
        v33 = *(_OWORD *)(v17 + 44);
        v34 = *((_DWORD *)v17 + 15);
        objc_msgSend(v6, "updateAudioQualityKaroo:", &v33);
        return 1;
      }
    }
    else
    {
      if (buffer == 224)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Init BLOB Size: %d, Version: %d"), Length, 224);
        v18 = CFDataGetBytePtr(a1);
        *a2 = v18[1];
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Version %d, Voice LQM: %d, PDCP TX SDU Count: %d, PDCP TX discard count: %d, RLC RX PDU count: %d, RLC RX missing pdu count: %d, LQE: %d "), *v18, v18[1], *(unsigned int *)(v18 + 2), *(unsigned int *)(v18 + 6), *(unsigned int *)(v18 + 10), *(unsigned int *)(v18 + 14), *(unsigned int *)(v18 + 18));
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Meas Serving cell type : %d, SNR: %d, RSSI:%d, RSRP: %f, RSRQ: %f "), *(unsigned int *)(v18 + 22), *((char *)v18 + 80), *((__int16 *)v18 + 13), *((float *)v18 + 7), *((float *)v18 + 8));
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("CodecType: %d, Total Erasures: %d, Total PlayBacks:%d, Audio Erasure Speech:%d,Audio Erasure Silence: %d"), *((unsigned int *)v18 + 13), *((unsigned int *)v18 + 11), *((unsigned int *)v18 + 12), *((unsigned int *)v18 + 14), *((unsigned int *)v18 + 15));
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("IMS preference : %d, WCDMA ECIO: %d, WCDMA RSCP:%d"), *((unsigned int *)v18 + 16), *((unsigned int *)v18 + 10), *((unsigned int *)v18 + 9));
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Voice LQM BLOB Version: %d, VoiceLQM: %d, "), buffer, *a2);
        objc_msgSend(v6, "setServingCellRSSI:", (double)*((__int16 *)v18 + 13));
        objc_msgSend(v6, "setServingCellRSRP:", *((float *)v18 + 7));
        objc_msgSend(v6, "setServingCellSNR:", (double)*((char *)v18 + 80));
        objc_msgSend(v6, "setServingCellRSRQ:", *((float *)v18 + 8));
        objc_msgSend(v6, "setIMSPreference:", *((_DWORD *)v18 + 16) != 0);
        objc_msgSend(v6, "setServingCellRSCP:", (double)*((int *)v18 + 10));
        objc_msgSend(v6, "setServingCellECIO:", (double)*((int *)v18 + 9));
        v31 = *(_OWORD *)(v18 + 44);
        v32 = *((_DWORD *)v18 + 15);
        objc_msgSend(v6, "updateAudioQualityKaroo:", &v31);
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("BB Long Session Status: %d, BB High Power Status: %d, True Limited Service: %d,BB in HPLMN: %d"), v18[81], *((unsigned int *)v18 + 17), *((unsigned int *)v18 + 18), *((unsigned int *)v18 + 19));
        objc_msgSend(v6, "updateBBLongSessionState:", v18[81]);
        v9 = objc_msgSend(v6, "isBBHighPowerState");
        objc_msgSend(v6, "updateBBHighPowerState:", *((_DWORD *)v18 + 17) != 0);
        if (*((_DWORD *)v18 + 18))
          v19 = *((_DWORD *)v18 + 19) == 0;
        else
          v19 = 0;
        objc_msgSend(v6, "updateBBLimitedServiceState:", v19);
        v22 = *((_DWORD *)v18 + 17);
        goto LABEL_39;
      }
      if (buffer == 225)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Init BLOB Size: %d, Version: %d"), Length, 225);
        v8 = CFDataGetBytePtr(a1);
        *a2 = v8[1];
        objc_msgSend(v6, "setServingCellRSSI:", (double)*((__int16 *)v8 + 28));
        objc_msgSend(v6, "setServingCellRSRP:", (double)*((int *)v8 + 6));
        objc_msgSend(v6, "setServingCellSNR:", (double)*((char *)v8 + 58));
        objc_msgSend(v6, "setServingCellRSRQ:", (double)*((int *)v8 + 7));
        objc_msgSend(v6, "setIMSPreference:", *((_DWORD *)v8 + 10) != 0);
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("BB Long Session Status: %d, BB High Power Status: %d, True Limited Service: %d,BB in HPLMN: %d"), v8[59], *((unsigned int *)v8 + 11), *((unsigned int *)v8 + 12), *((unsigned int *)v8 + 13));
        objc_msgSend(v6, "updateBBLongSessionState:", v8[59]);
        v9 = objc_msgSend(v6, "isBBHighPowerState");
        objc_msgSend(v6, "updateBBHighPowerState:", *((_DWORD *)v8 + 11) != 0);
        if (*((_DWORD *)v8 + 12))
          v10 = *((_DWORD *)v8 + 13) == 0;
        else
          v10 = 0;
        objc_msgSend(v6, "updateBBLimitedServiceState:", v10);
        v22 = *((_DWORD *)v8 + 11);
LABEL_39:
        if (((v9 ^ (v22 != 0)) & 1) == 0)
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Baseband_hi_power_state did not change, Prev Value: %d, Current Value:%d"), v9, v22 != 0);
        return 1;
      }
    }
    v11 = CFSTR("processVoiceLQMBlob: LQM version is not supported");
  }
  else
  {
    v11 = CFSTR("processVoiceLQMBlob: LQM BLOB is empty");
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v11, v26, v28);
  return 1;
}

void sub_1000CD780(id a1, BOOL a2, int a3)
{
  uint64_t v3;
  id v4;
  uint64_t v5;

  v3 = *(_QWORD *)&a3;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("voiceLQMHandler: Rcvd Voice LQM from CT: %d"), *(_QWORD *)&a3);
  v4 = objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "getCTService");
  v5 = (uint64_t)objc_msgSend(v4, "getCurrentSignalBars");
  if ((_DWORD)v3 == 10 && v5 >= 3)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("voiceLQMHandler: Ignoring Rcvd Voice LQM from CT: %d"), 10);
  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("voiceLQMHandler: Rcvd Voice LQM from CT: %d"), v3);
    objc_msgSend(v4, "setLteVoiceLQM:", v3);
  }
}

id sub_1000CD844(const __CFDictionary *a1, void *a2, uint64_t a3)
{
  const __CFNumber *Value;
  const __CFNumber *v5;
  CFTypeID v6;
  int v7;
  int v8;
  unint64_t SignalStrength;
  uint64_t v11;
  int v12;
  int v13;
  int valuePtr;

  valuePtr = 0;
  if (a1)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(a1, kCTIndicatorsGradedSignalStrength);
    if (Value && (v5 = Value, v6 = CFGetTypeID(Value), v6 == CFNumberGetTypeID()))
    {
      v7 = CFNumberGetValue(v5, kCFNumberSInt32Type, &valuePtr);
      v8 = valuePtr;
      if (v7)
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("getFilteredSignalStrength: bars=%li"), valuePtr, v11);
        return objc_msgSend(a2, "setCurrentSignalBars:", valuePtr);
      }
    }
    else
    {
      v8 = 0;
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("getFilteredSignalStrength: Notification error -> bars=%li"), v8, v11);
    return objc_msgSend(a2, "setCurrentSignalBars:", valuePtr);
  }
  v12 = 0;
  v13 = 0;
  SignalStrength = _CTServerConnectionGetSignalStrength(a3, &v13, &v12, &valuePtr);
  if (SignalStrength)
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("_CTServerConnectionGetSignalStrength error %d domain %d"), HIDWORD(SignalStrength), SignalStrength);
  else
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("_CTServerConnectionGetSignalStrength: Queried -> bars=%li"), valuePtr, v11);
  return objc_msgSend(a2, "setCurrentSignalBars:", valuePtr);
}

id sub_1000CD964(uint64_t a1, void *a2)
{
  const __CFString *v4;
  uint64_t v5;
  const char *v6;
  _BOOL8 v8;
  const __CFString *v9;
  char v10;
  CFTypeRef cf1;

  if (!a1)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("iRAT currently not connected to telephony service"));
  cf1 = 0;
  if (_CTServerConnectionGetRadioAccessTechnology(a1, &cf1))
  {
    v4 = CFSTR("_CTServerConnectionGetRadioAccessTechnology returned failed");
LABEL_4:
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v4);
    v5 = 10;
    v6 = "UNKNOWN_RADIO ";
LABEL_10:
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Serving cell type is (%s)"), v6);
    return objc_msgSend(a2, "setServingCellType:", v5);
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyGSM))
    goto LABEL_7;
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyUTRAN2))
  {
    v5 = 7;
    v6 = "TDSCDMA_RADIO";
    goto LABEL_10;
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyGSMCompact))
  {
LABEL_7:
    v5 = 8;
    v6 = "GSM_RADIO";
    goto LABEL_10;
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyUTRAN))
  {
    v5 = 2;
    v6 = "UMTS_RADIO";
    goto LABEL_10;
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyCDMA1x))
  {
    v5 = 3;
    v6 = "CDMA1X_RADIO";
    goto LABEL_10;
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyCDMAEVDO))
  {
    v5 = 4;
    v6 = "CDMAEVDO";
    goto LABEL_10;
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyCDMAHybrid))
  {
    v5 = 5;
    v6 = "CDMAHybrid";
    goto LABEL_10;
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyeHRPD))
  {
    v5 = 6;
    v6 = "eHRPD_RADIO";
    goto LABEL_10;
  }
  if (!CFEqual(cf1, kCTRegistrationRadioAccessTechnologyLTE))
  {
    if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyNR))
    {
      v5 = 9;
      v6 = "N_RADIO";
      goto LABEL_10;
    }
    v4 = CFSTR("Unknown registered technology");
    goto LABEL_4;
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Serving cell type is (%s)"), "LTE Radio");
  objc_msgSend(a2, "setServingCellType:", 1);
  v10 = 0;
  if ((unint64_t)_CTServerConnectionGetCapabilityStatusExtended(a1, kCTCapabilityAgent, &v10, 0) >> 32)
  {
    v8 = 0;
    v10 = 0;
  }
  else
  {
    v8 = v10 != 0;
  }
  objc_msgSend(a2, "updateVoLTEEnableStatus:", v8);
  if (v10)
    v9 = CFSTR("_CTServerConnectionGetCapabilityStatusExtended: volteSupported");
  else
    v9 = CFSTR("_CTServerConnectionGetCapabilityStatusExtended: volte not Supported");
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v9);
}

void sub_1000CDD98(id a1, __CFString *a2, __CFDictionary *a3)
{
  id v5;
  const __CFString *Value;
  const __CFString *v7;
  CFComparisonResult v8;
  const __CFString *v9;
  _BOOL8 v10;
  _BOOL8 v11;
  const __CFString *v12;
  _BOOL8 v13;
  const __CFString *v14;
  uint64_t Status;
  unsigned int v16;
  const __CFData *v17;
  const __CFData *v18;
  uint64_t v19;
  const char *v20;
  const void *v21;
  CFTypeID v22;
  const __CFData *v23;
  const __CFNumber *v24;
  const __CFNumber *v25;
  CFTypeID v26;
  uint64_t v27;
  const __CFString *v28;
  const char *v29;
  const __CFString *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  int valuePtr;
  unsigned int v37;
  char v38;
  UInt8 v39;
  unsigned __int8 v40;

  if (objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "isEnhancedCTServiceNeeded"))
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("WRM_CTService:serverConnectionCallback for MultiSIM device"));
    v5 = objc_msgSend(+[WRM_EnhancedCTService wrm_EnhancedCTServiceSingleton](WRM_EnhancedCTService, "wrm_EnhancedCTServiceSingleton"), "mCTService");
  }
  else
  {
    v5 = objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "getCTService");
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("WRM_CTService:serverConnectionCallback"));
  }
  if (CFEqual(a2, kCTRegistrationStatusChangedNotification))
  {
    Value = (const __CFString *)CFDictionaryGetValue(a3, kCTRegistrationStatus);
    if (Value)
    {
      v7 = Value;
      v8 = CFStringCompare(Value, kCTRegistrationStatusRegisteredHome, 0);
      v9 = (const __CFString *)kCTRegistrationStatusRegisteredRoaming;
      if (v8)
        v10 = CFStringCompare(v7, kCTRegistrationStatusRegisteredRoaming, 0) == kCFCompareEqualTo;
      else
        v10 = 1;
      v13 = CFStringCompare(v7, v9, 0) == kCFCompareEqualTo;
      objc_msgSend(v5, "updateRegistrationStatus::", v10, v13);
      v33 = v10;
      v34 = v13;
      v14 = CFSTR("WRM_CTService:kCTRegistrationStatusChangedNotification reg status %d, roaming Status %d");
LABEL_15:
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v14, v33, v34);
      return;
    }
    v12 = CFSTR("WRM_CTService:kCTRegistrationStatusChangedNotification returned null");
LABEL_12:
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v12);
    return;
  }
  if (CFEqual(a2, kCTRegistrationDataStatusChangedNotification))
  {
    v11 = kCFBooleanTrue == CFDictionaryGetValue(a3, kCTRegistrationDataAttached);
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("WRM_CTService:kCTRegistrationDataStatusChangedNotification data attach: %d"), v11);
    objc_msgSend(v5, "updatePSAttachStatus:", v11);
    sub_1000CD964((uint64_t)objc_msgSend(v5, "getCTConnectionReference"), v5);
    goto LABEL_10;
  }
  if (CFEqual(a2, kCTCellularDataSettingsChangeNotification))
  {
    v40 = 0;
    if (_CTServerConnectionGetCellularDataIsEnabled(objc_msgSend(v5, "getCTConnectionReference"), &v40))
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Unable to retrieve data enable status %d"), v40, v34);
      return;
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("WRM_CTService:kCTCellularDataSettingsChangeNotification %d"), v40);
    objc_msgSend(v5, "updateDataEnableStatus:", v40 != 0);
LABEL_10:
    dispatch_async((dispatch_queue_t)objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "getQueue"), &stru_1002057C0);
    return;
  }
  if (CFEqual(a2, kCTIndicatorsSignalStrengthNotification))
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("WRM_CTService:kCTIndicatorsSignalStrengthNotification"));
    sub_1000CD844(a3, v5, (uint64_t)objc_msgSend(v5, "getCTConnectionReference"));
    goto LABEL_10;
  }
  if (CFEqual(a2, kCTRegistrationCellChangedNotification))
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("WRM_CTService:kCTRegistrationCellChangedNotification"));
    sub_1000CD964((uint64_t)objc_msgSend(v5, "getCTConnectionReference"), v5);
    return;
  }
  if (CFEqual(a2, kCTCallStatusChangeNotification))
  {
    if (CFDictionaryGetValue(a3, kCTCall))
    {
      Status = CTCallGetStatus();
      objc_msgSend(v5, "setCallState:", Status);
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("kCTCallStatusChangeNotification changed: %d"), Status);
      if (!(_DWORD)Status || (_DWORD)Status == 5)
      {
        objc_msgSend(v5, "setSrvccHandoverState:", 0);
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Call Disconnected or IDLE: resetting SRVCC flag"));
        if ((_DWORD)Status == 5)
        {
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Call Disconnected : submit callend metrics"));
          objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "submitCallEndMetics");
        }
      }
      else if ((_DWORD)Status == 1)
      {
        objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "resetActiveCallTimer");
      }
    }
    return;
  }
  if (!CFEqual(a2, kCTCallSubTypeChangeNotification))
  {
    if (CFEqual(a2, kCTRadioVoiceLinkQualityNotification))
    {
      v39 = 0;
      v38 = 0;
      v16 = objc_msgSend(v5, "getLteVoiceLQM");
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Recevied kCTRadioVoiceLinkQualityNotification"));
      v17 = (const __CFData *)CFDictionaryGetValue(a3, kCTRadioEnhancedVoiceLinkQualityKey);
      if (!v17)
      {
        v37 = 0;
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("LQM BLOB is empty"));
        v24 = (const __CFNumber *)CFDictionaryGetValue(a3, kCTRadioVoiceLinkQualityKey);
        if (v24)
        {
          v25 = v24;
          v26 = CFGetTypeID(v24);
          if (v26 == CFNumberGetTypeID())
          {
            v27 = (uint64_t)objc_msgSend(v5, "getCurrentSignalBars");
            CFNumberGetValue(v25, kCFNumberIntType, &v37);
            if (v37 == 10 && v27 >= 3)
            {
              +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Ignoring LQM: Bars: %lld, LQM: %d"), v27, 10);
            }
            else
            {
              +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Rcvd Voice LQM from CT: %d"), v37);
              objc_msgSend(v5, "setLteVoiceLQM:", v37);
            }
          }
        }
        return;
      }
      v18 = v17;
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("WRM_CTService:Voice LQM notification received"));
      sub_1000CC94C(v18, &v39, (UInt8 *)&v38);
      if (v16 == v39)
        return;
      v19 = (uint64_t)objc_msgSend(v5, "getCurrentSignalBars");
      if (v39 == 10 && v19 >= 3)
      {
        if (v38 >= 3)
        {
          v20 = "Unknown";
          if (v38 == 4)
            v20 = "lqmBadLQE";
        }
        else
        {
          v20 = off_1002057E0[v38];
        }
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Ignoring LQM: Bars: %lld, LQM: %d, Reason Code: %d, Reason: (%s)"), v19, 10, v38, v20);
      }
      else
      {
        if (v38 >= 3)
        {
          if (v38 == 4)
            v29 = "lqmBadLQE";
          else
            v29 = "Unknown";
        }
        else
        {
          v29 = off_1002057E0[v38];
        }
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Bars: %lld, LQM: %d, Reason Code: %d, Reason: (%s)"), v19, v39, v38, v29);
        objc_msgSend(v5, "setLteVoiceLQM:", v39);
        objc_msgSend(v5, "setVoiceLQMReasonCode:", v38);
      }
      if (v38 >= 3u)
      {
        v31 = "Unknown";
        if (v38 == 4)
          v31 = "lqmBadLQE";
      }
      else
      {
        v31 = off_1002057E0[v38];
      }
      v34 = v38;
      v35 = v31;
      v33 = v39;
      v30 = CFSTR("LQM: %d, Reason Code: %d, Reason: (%s)");
LABEL_75:
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v30, v33, v34, v35);
      goto LABEL_10;
    }
    if (CFEqual(a2, kCTRadioEnhancedLinkQualityNotification))
    {
      valuePtr = 0;
      v21 = CFDictionaryGetValue(a3, kCTRadioEnhancedLinkQualityNotificationType);
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("Recevied kCTRadioEnhancedLinkQualityNotificationType notification"));
      if (v21)
      {
        v22 = CFGetTypeID(v21);
        if (v22 == CFNumberGetTypeID())
        {
          if (CFNumberGetValue((CFNumberRef)v21, kCFNumberIntType, &valuePtr))
          {
            v23 = (const __CFData *)CFDictionaryGetValue(a3, kCTRadioEnhancedLinkQualityNotificationData);
            if (v23)
            {
              sub_1000CC7FC(v23, valuePtr);
              return;
            }
          }
        }
      }
      v14 = CFSTR("Recevied kCTRadioEnhancedLinkQualityNotificationType with empty BLOB");
      goto LABEL_15;
    }
    if (CFEqual(a2, kCTCallHandoverStartedNotification))
    {
      v28 = CFSTR("SRVCC Handover started");
    }
    else
    {
      if (CFEqual(a2, kCTCallHandoverEndedNotification))
      {
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("SRVCC Handover ended"));
        objc_msgSend(v5, "setSrvccHandoverState:", 0);
        if (kCFBooleanTrue == CFDictionaryGetValue(a3, kCTCallHandoverSuccess))
          v30 = CFSTR("SRVCC Handover successful");
        else
          v30 = CFSTR("SRVCC Handover failed");
        goto LABEL_75;
      }
      if (!CFEqual(a2, kCTCallHandoverLikelyNotification))
      {
        if (CFEqual(a2, kCTSettingCallCapabilitiesChangedNotification))
        {
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("kCTSettingCallCapabilitiesChangedNotification:kCTCapabilityVoLTE:%@"), a3);
          if (kCFBooleanTrue == CFDictionaryGetValue(a3, kCTCapabilityAgent))
          {
            v32 = 1;
            +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("kCTSettingCallCapabilitiesChangedNotification:kCTCapabilityVoLTE %d"), 1);
          }
          else
          {
            v32 = 0;
          }
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("kCTSettingCallCapabilitiesChangedNotification received %d"), v32, v34);
        }
        return;
      }
      v28 = CFSTR("SRVCC Handover likely");
    }
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v28);
    objc_msgSend(v5, "setSrvccHandoverState:", 1);
    return;
  }
  if (CFDictionaryGetValue(a3, kCTCall))
  {
    v12 = CFSTR("kCTCallSubTypeChangeNotification changed");
    goto LABEL_12;
  }
}

void sub_1000CE700(uint64_t a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[5];
  CFTypeRef cf;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  cf = 0;
  if (!_CTServerConnectionGetSupportedEnhancedLinkQualityMetric(v1, &cf))
  {
    v2 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 4);
    v3 = (void *)cf;
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("configureEnhancedDataLQM"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000CEE80;
    v8[3] = &unk_100203788;
    v8[4] = v2;
    objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v8);
    v4 = _CTServerConnectionRegisterSupportedEnhancedLinkQualityMetric(v1, v3);
    CFRelease(cf);
    if (v4)
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("eLQM: Failed to request supported metrics from Baseband, error = (%d, %d)"), v4, HIDWORD(v4));
    }
    else
    {
      v5 = _CTServerConnectionRegisterForNotification(v1, kCTRadioEnhancedLinkQualityNotification);
      if (v5)
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("eLQM: Failed to register with Baseband for eLQM notifications, error = (%d, %d)"), v5, HIDWORD(v5));
      else
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("configureEnhancedDataLQM: registered for eLQM notification"), v6, v7);
    }

  }
}

void sub_1000CEE64(id a1)
{
  objc_msgSend(+[WRM_HandoverManager WRM_HandoverManagerSingleton](WRM_HandoverManager, "WRM_HandoverManagerSingleton"), "evaluateHandover");
}

id sub_1000CEE80(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = objc_msgSend(a3, "BOOLValue");
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", &off_100230D50, a2);
  return result;
}

id sub_1000CF40C(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 60) = objc_msgSend(*(id *)(a1 + 32), "getWiFiServiceSingletone");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 60), "initializeiRATMetrics");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 60), "setDelegate:");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 60), "registerWiFiCallbacks");
}

id sub_1000CF4F8(uint64_t a1)
{
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "wifiService"), "unregisterWiFiCallbacks");
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "wifiService"), "setDelegate:", 0);
}

id sub_1000CFBC4(uint64_t a1)
{
  int v2;
  id v3;
  const char *v4;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = objc_msgSend(*(id *)(a1 + 32), "wifiService");
  if (v2)
    objc_msgSend(v3, "enableLQMUpdate");
  else
    objc_msgSend(v3, "disableLQMUpdate");
  if (*(_BYTE *)(a1 + 40))
    v4 = "YES";
  else
    v4 = "NO";
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("toggleWiFiLQMIfNeeded %s"), v4);
}

id sub_1000CFD04(uint64_t a1)
{
  objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "wifiController"), "handlePowerState:", *(unsigned __int8 *)(a1 + 32));
  return objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "updateControllerState:", 103);
}

id sub_1000CFDB8(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiController base class CarPlayState state:(%d), reason:(%d)"), *(unsigned __int8 *)(a1 + 36), *(unsigned int *)(a1 + 32));
  if (!objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "wifiController"))
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiController is null"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiController calling policy via internal xpc"));
  return objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "updateControllerState:", 514);
}

id sub_1000CFEC4(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiController least congested Wifi channel:(%d), number:(%d)"), *(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 36));
  if (!objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "wifiController"))
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiController is null"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiController calling policy via internal xpc for least congested channel"));
  return objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "updateControllerState:", 104);
}

id sub_1000D0058(uint64_t a1)
{
  id result;
  void *v3;
  unsigned int v4;
  id v5;
  unsigned int v6;
  id v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;

  result = objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "wifiController");
  if (result)
  {
    v3 = result;
    v4 = objc_msgSend(result, "wifiState");
    v5 = objc_msgSend(v3, "wifiChannel");
    v6 = objc_msgSend(v3, "hostAP");
    v7 = objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "platformManager");
    if (v4)
    {
      if (v4 >= 4)
      {
        v8 = "INVALID_STATE!!!";
        if (v4 == 4)
          v8 = "ASSOCIATED_6G";
      }
      else
      {
        v8 = off_1002058A0[v4 - 1];
      }
    }
    else
    {
      v8 = "DISABLED";
    }
    v9 = *(int *)(a1 + 32);
    if (v9 >= 4)
    {
      if ((_DWORD)v9 == 4)
        v10 = "ASSOCIATED_6G";
      else
        v10 = "INVALID_STATE!!!";
    }
    else
    {
      v10 = off_1002058B8[v9];
    }
    result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 5, CFSTR("WiFiS: updateWiFiState: wifiState(%s -> %s) wifiChannel(%d -> %d), hostAP(%d -> %d), centerFreqMHz(%d), bandwidthMHz(%d)"), v8, v10, v5, *(unsigned int *)(a1 + 36), v6, *(unsigned __int8 *)(a1 + 48), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
    v11 = *(unsigned int *)(a1 + 32);
    if (__PAIR64__(v5, v4) != *(_QWORD *)(a1 + 32) || *(unsigned __int8 *)(a1 + 48) != v6)
    {
      if (!v4 && (_DWORD)v11)
      {
        objc_msgSend(objc_msgSend(v3, "wifiService"), "setRxProtectMode:", objc_msgSend(v7, "wcmWiFiRxProtectMode"));
        objc_msgSend(objc_msgSend(v3, "wifiService"), "setTxOnIndication:", objc_msgSend(v7, "wcmWiFiTxOnIndication"));
        objc_msgSend(objc_msgSend(v3, "wifiService"), "setScanJoinRxProtectDuration:", objc_msgSend(v7, "wcmWiFiScanJoinProtectDuration"));
        objc_msgSend(v3, "updateMWSSignalingConfig");
        v11 = *(unsigned int *)(a1 + 32);
      }
      objc_msgSend(v3, "setWifiState:", v11);
      objc_msgSend(v3, "setWifiChannel:", *(unsigned int *)(a1 + 36));
      objc_msgSend(v3, "setHostAP:", *(unsigned __int8 *)(a1 + 48));
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("centerFreq(%d -> %d) bandwidth(%d -> %d)"), objc_msgSend(v3, "channelCenterFreqMHz"), *(unsigned int *)(a1 + 40), objc_msgSend(v3, "channelBandwidthMHz"), *(unsigned int *)(a1 + 44));
      objc_msgSend(v3, "setChannelCenterFreqMHz:", *(unsigned int *)(a1 + 40));
      objc_msgSend(v3, "setChannelBandwidthMHz:", *(unsigned int *)(a1 + 44));
      objc_msgSend(v3, "setReportedChannelCenterFreqMHz:", objc_msgSend(v3, "channelCenterFreqMHz"));
      if (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "activeCoexFeatures"), "containsObject:", CFSTR("Wifi5gChannelMapping"))&& (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "activeCoexFeatures"), "containsObject:", CFSTR("WiFiEnhCoexSupport")) & 1) == 0&& objc_msgSend(v3, "wifiChannel"))
      {
        v12 = sub_10007BB00((uint64_t)objc_msgSend(v3, "wifiChannel"), (int)objc_msgSend(v3, "channelBandwidthMHz"));
        objc_msgSend(v3, "setChannelCenterFreqMHz:", sub_10007BBBC(v12));
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("Modified WIFI params: NEW centerFreq(%d -> %d) NEW: bandwidth(%d -> %d)"), *(unsigned int *)(a1 + 40), objc_msgSend(v3, "channelCenterFreqMHz"), *(unsigned int *)(a1 + 44), objc_msgSend(v3, "channelBandwidthMHz"));
      }
      objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "updateControllerState:", 100);
      objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "updateControllerState:", 1000);
      objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "updateControllerState:", 2200);
      objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "updateControllerState:", 108);
      objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "handleBTCoexWiFiStateEvent:wifiChannel:", *(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 36));
      objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "bspMonitor"), "handleWiFiStateEvent:wifiChannel:isNanPhs:", *(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 36), 0);
      result = objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "activeCoexFeatures"), "containsObject:", CFSTR("WiFiFigaroCoex"));
      if ((_DWORD)result)
      {
        if (*(_DWORD *)(a1 + 32) <= 1u)
          return objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "handleLow5GRate:", 0);
      }
    }
  }
  return result;
}

id sub_1000D047C(uint64_t a1)
{
  id result;
  void *v3;
  int v4;

  result = objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "wifiController");
  if (result)
  {
    v3 = result;
    objc_msgSend(result, "hostAP5GHzActive");
    v4 = *(unsigned __int8 *)(a1 + 32);
    result = objc_msgSend(v3, "hostAP5GHzActive");
    if (v4 != (_DWORD)result)
    {
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: hostAP5GHzState changed (%d -> %d)"), objc_msgSend(v3, "hostAP5GHzActive"), *(unsigned __int8 *)(a1 + 32));
      objc_msgSend(v3, "setHostAP5GHzActive:", *(unsigned __int8 *)(a1 + 32));
      return objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "handle5GHzHostAPStateEvent:", *(unsigned __int8 *)(a1 + 32));
    }
  }
  return result;
}

id sub_1000D05A4(uint64_t a1)
{
  id result;
  void *v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  id v9;
  _BOOL8 v10;

  result = objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "wifiController");
  if (!result)
    return result;
  v3 = result;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiController TxRate: %d RxRate: %d and BW: %d "), *(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 36), objc_msgSend(result, "channelBandwidthMHz"));
  if (objc_msgSend(v3, "wifiState") == 3 || objc_msgSend(v3, "wifiState") == 4)
  {
    if (objc_msgSend(v3, "channelBandwidthMHz") == 20)
    {
      if (*(_DWORD *)(a1 + 36) >> 4 >= 0x753u)
      {
        v4 = *(_DWORD *)(a1 + 32) >> 4 >= 0x753u;
        goto LABEL_18;
      }
      goto LABEL_15;
    }
    if (objc_msgSend(v3, "channelBandwidthMHz") == 40)
    {
      if (*(_DWORD *)(a1 + 36) >> 6 >= 0x271u)
      {
        v4 = *(_DWORD *)(a1 + 32) >> 6 >= 0x271u;
        goto LABEL_18;
      }
LABEL_15:
      v5 = 1;
      goto LABEL_21;
    }
    v6 = objc_msgSend(v3, "channelBandwidthMHz");
    v7 = *(_DWORD *)(a1 + 36);
    if (v6 == 80)
    {
      if (v7 >> 5 < 0xC35)
        goto LABEL_15;
      v8 = 100000;
    }
    else
    {
      if (v7 >> 6 < 0xC35)
        goto LABEL_15;
      v8 = 200000;
    }
    v4 = *(_DWORD *)(a1 + 32) >= v8;
LABEL_18:
    v5 = !v4;
    goto LABEL_21;
  }
  v5 = 0;
  byte_100271400 = 0;
  byte_100271401 = 0;
LABEL_21:
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiController Low5GRate Check cureRate: %d Prev1Rate: %d Prev2Rate: %d"), v5, byte_100271400, byte_100271401);
  v9 = +[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton");
  v10 = 0;
  if (v5)
  {
    if (byte_100271400)
      v10 = byte_100271401 != 0;
  }
  result = objc_msgSend(v9, "handleLow5GRate:", v10);
  byte_100271401 = byte_100271400;
  byte_100271400 = v5;
  return result;
}

void sub_1000D07C0(id a1)
{
  objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "handleErrorReport:", 2);
}

uint64_t sub_1000D0AEC(uint64_t a1, uint64_t a2, xpc_object_t object)
{
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_int64)
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", xpc_int64_get_value(object)), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
  return 1;
}

void sub_1000D0E0C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  const __CFString *v6;
  id v7;
  id v8;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("LocationController: create CLLocatoinManager"));
  v8 = (id)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithPath:](NSBundle, "bundleWithPath:", CFSTR("/System/Library/LocationBundles/WRMLinkSelection.bundle")));
  v2 = objc_msgSend(objc_alloc((Class)CLLocationManager), "initWithEffectiveBundle:delegate:onQueue:", v8, *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setDesiredAccuracy:", *(double *)(a1 + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setDistanceFilter:", *(double *)(a1 + 48));
  v5 = +[CLLocationManager authorizationStatusForBundle:](CLLocationManager, "authorizationStatusForBundle:", v8);
  if (((_DWORD)v5 - 3) > 1)
  {
    v7 = v5;
    v6 = CFSTR("LocationController: bundle is NOT authorized %d");
  }
  else
  {
    v6 = CFSTR("LocationController: bundle is authorized");
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, v6, v7);

}

_QWORD *sub_1000D0F54(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = result[4];
  if (*(_QWORD *)(v1 + 16))
  {
    if (*(_BYTE *)(v1 + 24))
    {
      return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("LocationController: already monitoring"));
    }
    else
    {
      v2 = result;
      *(_BYTE *)(v1 + 24) = 1;
      objc_msgSend(*(id *)(result[4] + 16), "startUpdatingLocation");
      +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("LocationController: startMonitoring"));
      return objc_msgSend((id)v2[4], "updateLocationAuthorized_sync");
    }
  }
  return result;
}

id sub_1000D1038(uint64_t a1)
{
  id result;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 0;
  result = *(id *)(*(_QWORD *)(a1 + 32) + 16);
  if (result)
  {
    objc_msgSend(result, "stopUpdatingLocation");
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 22, CFSTR("LocationController: stopMonitoring"));
  }
  return result;
}

void sub_1000D24D0(id a1)
{
  qword_100271410 = objc_alloc_init(WCM_WiFiServiceIOS);
}

id sub_1000D61E8(uint64_t a1, uint64_t a2, void *a3)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: callbackWiFiManagerClientWowStateChanged: isEnabled(%d)"), a2);
  return objc_msgSend(a3, "setWoWState:", a2);
}

id sub_1000D6238(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: callbackWiFiManagerClientDeviceAttachment device(%p)"), a2);
  if (a2)
    return objc_msgSend(a3, "setWiFiDevice:", a2);
  return result;
}

void sub_1000D6668(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  const __CFString *v13;
  uint64_t v14;
  _BYTE v15[128];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: setting PHS blocklist channels %@"), *(_QWORD *)(a1 + 32));
  v2 = +[NSMutableArray array](NSMutableArray, "array");
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = *(void **)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i);
        v13 = CFSTR("MWS_Channel_Number");
        v14 = v8;
        objc_msgSend(v2, "addObject:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1));
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v15, 16);
    }
    while (v5);
  }
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_Blacklisted_Channels"), v2);

}

void sub_1000D6840(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  const __CFString *v13;
  uint64_t v14;
  _BYTE v15[128];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: setting WCI2 enabled channels %@"), *(_QWORD *)(a1 + 32));
  v2 = +[NSMutableArray array](NSMutableArray, "array");
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = *(void **)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i);
        v13 = CFSTR("MWS_Channel_Number");
        v14 = v8;
        objc_msgSend(v2, "addObject:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1));
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v15, 16);
    }
    while (v5);
  }
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_Coex_Enabled_Channels"), v2);

}

void sub_1000D6A18(uint64_t a1)
{
  id v2;
  id v3;
  char v4;
  unsigned __int16 v5;
  uint64_t v6;
  void *v7;
  char v8;
  unsigned int v9;
  int v10;
  id v11;
  id v12;
  char v13;
  unsigned __int16 v14;
  uint64_t v15;
  void *v16;
  char v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  id v21;
  id v22;
  char v23;
  unsigned __int16 v24;
  uint64_t v25;
  void *v26;
  char v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  id v31;
  id v32;
  char v33;
  unsigned __int16 v34;
  uint64_t v35;
  void *v36;
  char v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  NSDictionary *v41;
  unsigned int v42;
  unsigned int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _QWORD v60[4];
  _QWORD v61[4];
  _BYTE v62[128];
  _BYTE v63[128];
  _BYTE v64[128];
  _BYTE v65[128];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WCI2_V2 WiFiS: setting WCI2V2 enabled channels %@"), *(_QWORD *)(a1 + 32));
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v2 = objc_msgSend(&off_100242330, "countByEnumeratingWithState:objects:count:", &v56, v65, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)v57;
    do
    {
      v7 = 0;
      v8 = v4;
      do
      {
        if (*(_QWORD *)v57 != v6)
          objc_enumerationMutation(&off_100242330);
        v9 = objc_msgSend(*(id *)(a1 + 32), "containsObject:", *(_QWORD *)(*((_QWORD *)&v56 + 1) + 8 * (_QWORD)v7));
        v10 = 1 << v8;
        if (!v9)
          LOWORD(v10) = 0;
        v5 |= v10;
        ++v8;
        v7 = (char *)v7 + 1;
      }
      while (v3 != v7);
      v4 += (char)v3;
      v3 = objc_msgSend(&off_100242330, "countByEnumeratingWithState:objects:count:", &v56, v65, 16);
    }
    while (v3);
    v43 = v5;
  }
  else
  {
    v43 = 0;
  }
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v11 = objc_msgSend(&off_100242348, "countByEnumeratingWithState:objects:count:", &v52, v64, 16);
  if (v11)
  {
    v12 = v11;
    v13 = 0;
    v14 = 0;
    v15 = *(_QWORD *)v53;
    do
    {
      v16 = 0;
      v17 = v13;
      do
      {
        if (*(_QWORD *)v53 != v15)
          objc_enumerationMutation(&off_100242348);
        v18 = objc_msgSend(*(id *)(a1 + 32), "containsObject:", *(_QWORD *)(*((_QWORD *)&v52 + 1) + 8 * (_QWORD)v16));
        v19 = 1 << v17;
        if (!v18)
          LOWORD(v19) = 0;
        v14 |= v19;
        ++v17;
        v16 = (char *)v16 + 1;
      }
      while (v12 != v16);
      v13 += (char)v12;
      v12 = objc_msgSend(&off_100242348, "countByEnumeratingWithState:objects:count:", &v52, v64, 16);
    }
    while (v12);
    v20 = v14;
  }
  else
  {
    v20 = 0;
  }
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v21 = objc_msgSend(&off_100242360, "countByEnumeratingWithState:objects:count:", &v48, v63, 16);
  if (v21)
  {
    v22 = v21;
    v23 = 0;
    v24 = 0;
    v25 = *(_QWORD *)v49;
    do
    {
      v26 = 0;
      v27 = v23;
      do
      {
        if (*(_QWORD *)v49 != v25)
          objc_enumerationMutation(&off_100242360);
        v28 = objc_msgSend(*(id *)(a1 + 32), "containsObject:", *(_QWORD *)(*((_QWORD *)&v48 + 1) + 8 * (_QWORD)v26));
        v29 = 1 << v27;
        if (!v28)
          LOWORD(v29) = 0;
        v24 |= v29;
        ++v27;
        v26 = (char *)v26 + 1;
      }
      while (v22 != v26);
      v23 += (char)v22;
      v22 = objc_msgSend(&off_100242360, "countByEnumeratingWithState:objects:count:", &v48, v63, 16);
    }
    while (v22);
    v30 = v24;
  }
  else
  {
    v30 = 0;
  }
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v31 = objc_msgSend(&off_100242378, "countByEnumeratingWithState:objects:count:", &v44, v62, 16);
  if (v31)
  {
    v32 = v31;
    v42 = v20;
    v33 = 0;
    v34 = 0;
    v35 = *(_QWORD *)v45;
    do
    {
      v36 = 0;
      v37 = v33;
      do
      {
        if (*(_QWORD *)v45 != v35)
          objc_enumerationMutation(&off_100242378);
        v38 = objc_msgSend(*(id *)(a1 + 32), "containsObject:", *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)v36));
        v39 = 1 << v37;
        if (!v38)
          LOWORD(v39) = 0;
        v34 |= v39;
        ++v37;
        v36 = (char *)v36 + 1;
      }
      while (v32 != v36);
      v33 += (char)v32;
      v32 = objc_msgSend(&off_100242378, "countByEnumeratingWithState:objects:count:", &v44, v62, 16);
    }
    while (v32);
    v40 = v34;
    v20 = v42;
  }
  else
  {
    v40 = 0;
  }
  v60[0] = CFSTR("IO80211InterfaceMwsCoex2GBitmapV2");
  v61[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v43);
  v60[1] = CFSTR("IO80211InterfaceMwsCoex5GBitmapLowV2");
  v61[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v20);
  v60[2] = CFSTR("IO80211InterfaceMwsCoex5GBitmapMidV2");
  v61[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v30);
  v60[3] = CFSTR("IO80211InterfaceMwsCoex5GBitmapHiV2");
  v61[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v40);
  v41 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v61, v60, 4);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ WCI2V2_IOVAR: setting APPLE80211KEY_MWS_COEX_BITMAP_V2 %@"), v41);
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("IO80211InterfaceMwsCoexBitmapV2"), v41);

}

void sub_1000D6F0C(id *a1)
{
  id v2;
  id v3;
  char v4;
  unsigned __int16 v5;
  uint64_t v6;
  void *v7;
  char v8;
  unsigned int v9;
  int v10;
  id v11;
  id v12;
  char v13;
  unsigned __int16 v14;
  uint64_t v15;
  void *v16;
  char v17;
  unsigned int v18;
  int v19;
  id v20;
  id v21;
  char v22;
  unsigned __int16 v23;
  uint64_t v24;
  void *v25;
  char v26;
  unsigned int v27;
  int v28;
  id v29;
  id v30;
  char v31;
  unsigned __int16 v32;
  uint64_t v33;
  void *v34;
  char v35;
  unsigned int v36;
  int v37;
  id v38;
  id v39;
  char v40;
  unsigned __int16 v41;
  uint64_t v42;
  void *v43;
  char v44;
  unsigned int v45;
  int v46;
  id v47;
  id v48;
  char v49;
  unsigned __int16 v50;
  uint64_t v51;
  void *v52;
  char v53;
  unsigned int v54;
  int v55;
  id v56;
  id v57;
  char v58;
  unsigned __int16 v59;
  uint64_t v60;
  void *v61;
  char v62;
  unsigned int v63;
  int v64;
  id v65;
  id v66;
  char v67;
  unsigned __int16 v68;
  uint64_t v69;
  void *v70;
  char v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  id v75;
  id v76;
  char v77;
  unsigned __int16 v78;
  uint64_t v79;
  void *v80;
  char v81;
  unsigned int v82;
  int v83;
  uint64_t v84;
  NSDictionary *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _QWORD v129[9];
  _QWORD v130[9];
  _BYTE v131[128];
  _BYTE v132[128];
  _BYTE v133[128];
  _BYTE v134[128];
  _BYTE v135[128];
  _BYTE v136[128];
  _BYTE v137[128];
  _BYTE v138[128];
  _BYTE v139[128];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WCI2_WiFiEnh WiFiS: setting WCI2V2 enabled channels 2G5G part channels %@, Enh part channels %@"), a1[4], a1[5]);
  v127 = 0u;
  v128 = 0u;
  v125 = 0u;
  v126 = 0u;
  v2 = objc_msgSend(&off_100242390, "countByEnumeratingWithState:objects:count:", &v125, v139, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)v126;
    do
    {
      v7 = 0;
      v8 = v4;
      do
      {
        if (*(_QWORD *)v126 != v6)
          objc_enumerationMutation(&off_100242390);
        v9 = objc_msgSend(a1[4], "containsObject:", *(_QWORD *)(*((_QWORD *)&v125 + 1) + 8 * (_QWORD)v7));
        v10 = 1 << v8;
        if (!v9)
          LOWORD(v10) = 0;
        v5 |= v10;
        ++v8;
        v7 = (char *)v7 + 1;
      }
      while (v3 != v7);
      v4 += (char)v3;
      v3 = objc_msgSend(&off_100242390, "countByEnumeratingWithState:objects:count:", &v125, v139, 16);
    }
    while (v3);
  }
  else
  {
    v5 = 0;
  }
  v123 = 0u;
  v124 = 0u;
  v121 = 0u;
  v122 = 0u;
  v11 = objc_msgSend(&off_1002423A8, "countByEnumeratingWithState:objects:count:", &v121, v138, 16);
  if (v11)
  {
    v12 = v11;
    v13 = 0;
    v14 = 0;
    v15 = *(_QWORD *)v122;
    do
    {
      v16 = 0;
      v17 = v13;
      do
      {
        if (*(_QWORD *)v122 != v15)
          objc_enumerationMutation(&off_1002423A8);
        v18 = objc_msgSend(a1[4], "containsObject:", *(_QWORD *)(*((_QWORD *)&v121 + 1) + 8 * (_QWORD)v16));
        v19 = 1 << v17;
        if (!v18)
          LOWORD(v19) = 0;
        v14 |= v19;
        ++v17;
        v16 = (char *)v16 + 1;
      }
      while (v12 != v16);
      v13 += (char)v12;
      v12 = objc_msgSend(&off_1002423A8, "countByEnumeratingWithState:objects:count:", &v121, v138, 16);
    }
    while (v12);
    v92 = v14;
  }
  else
  {
    v92 = 0;
  }
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v20 = objc_msgSend(&off_1002423C0, "countByEnumeratingWithState:objects:count:", &v117, v137, 16);
  if (v20)
  {
    v21 = v20;
    v22 = 0;
    v23 = 0;
    v24 = *(_QWORD *)v118;
    do
    {
      v25 = 0;
      v26 = v22;
      do
      {
        if (*(_QWORD *)v118 != v24)
          objc_enumerationMutation(&off_1002423C0);
        v27 = objc_msgSend(a1[4], "containsObject:", *(_QWORD *)(*((_QWORD *)&v117 + 1) + 8 * (_QWORD)v25));
        v28 = 1 << v26;
        if (!v27)
          LOWORD(v28) = 0;
        v23 |= v28;
        ++v26;
        v25 = (char *)v25 + 1;
      }
      while (v21 != v25);
      v22 += (char)v21;
      v21 = objc_msgSend(&off_1002423C0, "countByEnumeratingWithState:objects:count:", &v117, v137, 16);
    }
    while (v21);
    v91 = v23;
  }
  else
  {
    v91 = 0;
  }
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v29 = objc_msgSend(&off_1002423D8, "countByEnumeratingWithState:objects:count:", &v113, v136, 16);
  if (v29)
  {
    v30 = v29;
    v31 = 0;
    v32 = 0;
    v33 = *(_QWORD *)v114;
    do
    {
      v34 = 0;
      v35 = v31;
      do
      {
        if (*(_QWORD *)v114 != v33)
          objc_enumerationMutation(&off_1002423D8);
        v36 = objc_msgSend(a1[4], "containsObject:", *(_QWORD *)(*((_QWORD *)&v113 + 1) + 8 * (_QWORD)v34));
        v37 = 1 << v35;
        if (!v36)
          LOWORD(v37) = 0;
        v32 |= v37;
        ++v35;
        v34 = (char *)v34 + 1;
      }
      while (v30 != v34);
      v31 += (char)v30;
      v30 = objc_msgSend(&off_1002423D8, "countByEnumeratingWithState:objects:count:", &v113, v136, 16);
    }
    while (v30);
    v90 = v32;
  }
  else
  {
    v90 = 0;
  }
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  v38 = objc_msgSend(&off_1002423F0, "countByEnumeratingWithState:objects:count:", &v109, v135, 16);
  if (v38)
  {
    v39 = v38;
    v40 = 0;
    v41 = 0;
    v42 = *(_QWORD *)v110;
    do
    {
      v43 = 0;
      v44 = v40;
      do
      {
        if (*(_QWORD *)v110 != v42)
          objc_enumerationMutation(&off_1002423F0);
        v45 = objc_msgSend(a1[5], "containsObject:", *(_QWORD *)(*((_QWORD *)&v109 + 1) + 8 * (_QWORD)v43));
        v46 = 1 << v44;
        if (!v45)
          LOWORD(v46) = 0;
        v41 |= v46;
        ++v44;
        v43 = (char *)v43 + 1;
      }
      while (v39 != v43);
      v40 += (char)v39;
      v39 = objc_msgSend(&off_1002423F0, "countByEnumeratingWithState:objects:count:", &v109, v135, 16);
    }
    while (v39);
    v89 = v41;
  }
  else
  {
    v89 = 0;
  }
  v107 = 0u;
  v108 = 0u;
  v105 = 0u;
  v106 = 0u;
  v47 = objc_msgSend(&off_100242408, "countByEnumeratingWithState:objects:count:", &v105, v134, 16);
  if (v47)
  {
    v48 = v47;
    v49 = 0;
    v50 = 0;
    v51 = *(_QWORD *)v106;
    do
    {
      v52 = 0;
      v53 = v49;
      do
      {
        if (*(_QWORD *)v106 != v51)
          objc_enumerationMutation(&off_100242408);
        v54 = objc_msgSend(a1[5], "containsObject:", *(_QWORD *)(*((_QWORD *)&v105 + 1) + 8 * (_QWORD)v52));
        v55 = 1 << v53;
        if (!v54)
          LOWORD(v55) = 0;
        v50 |= v55;
        ++v53;
        v52 = (char *)v52 + 1;
      }
      while (v48 != v52);
      v49 += (char)v48;
      v48 = objc_msgSend(&off_100242408, "countByEnumeratingWithState:objects:count:", &v105, v134, 16);
    }
    while (v48);
    v88 = v50;
  }
  else
  {
    v88 = 0;
  }
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  v56 = objc_msgSend(&off_100242420, "countByEnumeratingWithState:objects:count:", &v101, v133, 16);
  if (v56)
  {
    v57 = v56;
    v58 = 0;
    v59 = 0;
    v60 = *(_QWORD *)v102;
    do
    {
      v61 = 0;
      v62 = v58;
      do
      {
        if (*(_QWORD *)v102 != v60)
          objc_enumerationMutation(&off_100242420);
        v63 = objc_msgSend(a1[5], "containsObject:", *(_QWORD *)(*((_QWORD *)&v101 + 1) + 8 * (_QWORD)v61));
        v64 = 1 << v62;
        if (!v63)
          LOWORD(v64) = 0;
        v59 |= v64;
        ++v62;
        v61 = (char *)v61 + 1;
      }
      while (v57 != v61);
      v58 += (char)v57;
      v57 = objc_msgSend(&off_100242420, "countByEnumeratingWithState:objects:count:", &v101, v133, 16);
    }
    while (v57);
    v87 = v59;
  }
  else
  {
    v87 = 0;
  }
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v65 = objc_msgSend(&off_100242438, "countByEnumeratingWithState:objects:count:", &v97, v132, 16);
  if (v65)
  {
    v66 = v65;
    v67 = 0;
    v68 = 0;
    v69 = *(_QWORD *)v98;
    do
    {
      v70 = 0;
      v71 = v67;
      do
      {
        if (*(_QWORD *)v98 != v69)
          objc_enumerationMutation(&off_100242438);
        v72 = objc_msgSend(a1[5], "containsObject:", *(_QWORD *)(*((_QWORD *)&v97 + 1) + 8 * (_QWORD)v70));
        v73 = 1 << v71;
        if (!v72)
          LOWORD(v73) = 0;
        v68 |= v73;
        ++v71;
        v70 = (char *)v70 + 1;
      }
      while (v66 != v70);
      v67 += (char)v66;
      v66 = objc_msgSend(&off_100242438, "countByEnumeratingWithState:objects:count:", &v97, v132, 16);
    }
    while (v66);
    v74 = v68;
  }
  else
  {
    v74 = 0;
  }
  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  v75 = objc_msgSend(&off_100242450, "countByEnumeratingWithState:objects:count:", &v93, v131, 16);
  if (v75)
  {
    v76 = v75;
    v86 = v74;
    v77 = 0;
    v78 = 0;
    v79 = *(_QWORD *)v94;
    do
    {
      v80 = 0;
      v81 = v77;
      do
      {
        if (*(_QWORD *)v94 != v79)
          objc_enumerationMutation(&off_100242450);
        v82 = objc_msgSend(a1[5], "containsObject:", *(_QWORD *)(*((_QWORD *)&v93 + 1) + 8 * (_QWORD)v80));
        v83 = 1 << v81;
        if (!v82)
          LOWORD(v83) = 0;
        v78 |= v83;
        ++v81;
        v80 = (char *)v80 + 1;
      }
      while (v76 != v80);
      v77 += (char)v76;
      v76 = objc_msgSend(&off_100242450, "countByEnumeratingWithState:objects:count:", &v93, v131, 16);
    }
    while (v76);
    v84 = v78;
    v74 = v86;
  }
  else
  {
    v84 = 0;
  }
  if (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "activeCoexFeatures"), "containsObject:", CFSTR("WiFiEnhCoexSupport")))
  {
    v129[0] = CFSTR("MWS2GBITMAPWiFiEnh");
    v130[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v5);
    v129[1] = CFSTR("MWS5GBITMAPLOWWiFiEnh");
    v130[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v92);
    v129[2] = CFSTR("MWS5GBITMAPMIDWiFiEnh");
    v130[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v91);
    v129[3] = CFSTR("MWS5GBITMAPHIWiFiEnh");
    v130[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v90);
    v129[4] = CFSTR("MWSU5LowBITMAPWiFiEnh");
    v130[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v89);
    v129[5] = CFSTR("MWSU5HighBITMAPWiFiEnh");
    v130[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v88);
    v129[6] = CFSTR("MWSU6BITMAPWiFiEnh");
    v130[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v87);
    v129[7] = CFSTR("MWSU7BITMAPWiFiEnh");
    v130[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v74);
    v129[8] = CFSTR("MWSU8BITMAPWiFiEnh");
    v130[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v84);
    v85 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v130, v129, 9);
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("WCI2_WiFiEnh_IOVAR: setting mwsCoexBitmapWiFiEnh %@"), v85);
    objc_msgSend(a1[6], "sendMessage:withValue:", CFSTR("MWSCOEXBITMAPWiFiEnh"), v85);
  }

}

void sub_1000D7884(uint64_t a1)
{
  id v2;
  id v3;
  char v4;
  unsigned __int16 v5;
  uint64_t v6;
  void *v7;
  char v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  id v12;
  id v13;
  char v14;
  unsigned __int16 v15;
  uint64_t v16;
  void *v17;
  char v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  id v22;
  id v23;
  char v24;
  unsigned __int16 v25;
  uint64_t v26;
  void *v27;
  char v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  NSDictionary *v32;
  NSNumber *v33;
  unsigned int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _QWORD v47[3];
  _QWORD v48[3];
  _BYTE v49[128];
  _BYTE v50[128];
  _BYTE v51[128];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ WiFi_Type7_IOVAR WiFiS: WiFi_Type7: setting Type7 MSG enabled channels %@"), *(_QWORD *)(a1 + 32));
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v2 = objc_msgSend(&off_100242468, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)v44;
    do
    {
      v7 = 0;
      v8 = v4;
      do
      {
        if (*(_QWORD *)v44 != v6)
          objc_enumerationMutation(&off_100242468);
        v9 = objc_msgSend(*(id *)(a1 + 32), "containsObject:", *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)v7));
        v10 = 1 << v8;
        if (!v9)
          LOWORD(v10) = 0;
        v5 |= v10;
        ++v8;
        v7 = (char *)v7 + 1;
      }
      while (v3 != v7);
      v4 += (char)v3;
      v3 = objc_msgSend(&off_100242468, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
    }
    while (v3);
    v11 = v5;
  }
  else
  {
    v11 = 0;
  }
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v12 = objc_msgSend(&off_100242480, "countByEnumeratingWithState:objects:count:", &v39, v50, 16);
  if (v12)
  {
    v13 = v12;
    v14 = 0;
    v15 = 0;
    v16 = *(_QWORD *)v40;
    do
    {
      v17 = 0;
      v18 = v14;
      do
      {
        if (*(_QWORD *)v40 != v16)
          objc_enumerationMutation(&off_100242480);
        v19 = objc_msgSend(*(id *)(a1 + 32), "containsObject:", *(_QWORD *)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)v17));
        v20 = 1 << v18;
        if (!v19)
          LOWORD(v20) = 0;
        v15 |= v20;
        ++v18;
        v17 = (char *)v17 + 1;
      }
      while (v13 != v17);
      v14 += (char)v13;
      v13 = objc_msgSend(&off_100242480, "countByEnumeratingWithState:objects:count:", &v39, v50, 16);
    }
    while (v13);
    v21 = v15;
  }
  else
  {
    v21 = 0;
  }
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v22 = objc_msgSend(&off_100242498, "countByEnumeratingWithState:objects:count:", &v35, v49, 16);
  if (v22)
  {
    v23 = v22;
    v34 = v11;
    v24 = 0;
    v25 = 0;
    v26 = *(_QWORD *)v36;
    do
    {
      v27 = 0;
      v28 = v24;
      do
      {
        if (*(_QWORD *)v36 != v26)
          objc_enumerationMutation(&off_100242498);
        v29 = objc_msgSend(*(id *)(a1 + 32), "containsObject:", *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)v27));
        v30 = 1 << v28;
        if (!v29)
          LOWORD(v30) = 0;
        v25 |= v30;
        ++v28;
        v27 = (char *)v27 + 1;
      }
      while (v23 != v27);
      v24 += (char)v23;
      v23 = objc_msgSend(&off_100242498, "countByEnumeratingWithState:objects:count:", &v35, v49, 16);
    }
    while (v23);
    v31 = v25;
    v11 = v34;
  }
  else
  {
    v31 = 0;
  }
  v47[0] = CFSTR("IO80211InterfaceMwsNGCCoex5GHzBitmapLow");
  v48[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11);
  v47[1] = CFSTR("IO80211InterfaceMwsNGCCoex5GHzBitmapMid");
  v48[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v21);
  v47[2] = CFSTR("IO80211InterfaceMwsNGCCoex5GHzBitmapHi");
  v48[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v31);
  v32 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v48, v47, 3);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ WiFi_Type7_IOVAR: WiFiS: WiFi_Type7: setting APPLE80211KEY_MWS_NGC_COEX_BITMAP %@"), v32);
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("IO80211InterfaceMwsNGCCoexBitmap"), v32);
  v33 = +[NSNumber numberWithShort:](NSNumber, "numberWithShort:", 250);
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_NGC_TIMER_GRANULARITY"), v33);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ WiFi_Type7_IOVAR: WiFiS: WiFi_Type7: setting Type7 MSG timerGranularity %@"), v33);

}

void sub_1000D7CBC(uint64_t a1)
{
  id v2;
  id v3;
  char v4;
  unsigned __int16 v5;
  uint64_t v6;
  void *v7;
  char v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  NSNumber *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("2GWiFi_Type7_IOVAR input to setChannelsToEnableType7MSG2GWiFi: setting Type7 MSG enabled channels %@"), *(_QWORD *)(a1 + 32));
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v2 = objc_msgSend(&off_1002424B0, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)v14;
    do
    {
      v7 = 0;
      v8 = v4;
      do
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(&off_1002424B0);
        v9 = objc_msgSend(*(id *)(a1 + 32), "containsObject:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v7));
        v10 = 1 << v8;
        if (!v9)
          LOWORD(v10) = 0;
        v5 |= v10;
        ++v8;
        v7 = (char *)v7 + 1;
      }
      while (v3 != v7);
      v4 += (char)v3;
      v3 = objc_msgSend(&off_1002424B0, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v3);
    v11 = v5;
  }
  else
  {
    v11 = 0;
  }
  v12 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11);
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("IO80211MWS2GWiFiType7Bitmap"), v12);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ WCI2V2_IOVAR: setting APPLE80211KEY_MWS_TYPE7_2GWiFi_BITMAP %@"), v12);

}

void sub_1000D7ED4(id *a1)
{
  id v2;
  id v3;
  char v4;
  unsigned __int16 v5;
  uint64_t v6;
  void *v7;
  char v8;
  unsigned int v9;
  int v10;
  id v11;
  id v12;
  char v13;
  unsigned __int16 v14;
  uint64_t v15;
  void *v16;
  char v17;
  unsigned int v18;
  int v19;
  id v20;
  id v21;
  char v22;
  unsigned __int16 v23;
  uint64_t v24;
  void *v25;
  char v26;
  unsigned int v27;
  int v28;
  id v29;
  id v30;
  char v31;
  unsigned __int16 v32;
  uint64_t v33;
  void *v34;
  char v35;
  unsigned int v36;
  int v37;
  id v38;
  id v39;
  char v40;
  unsigned __int16 v41;
  uint64_t v42;
  void *v43;
  char v44;
  unsigned int v45;
  int v46;
  id v47;
  id v48;
  char v49;
  unsigned __int16 v50;
  uint64_t v51;
  void *v52;
  char v53;
  unsigned int v54;
  int v55;
  id v56;
  id v57;
  char v58;
  unsigned __int16 v59;
  uint64_t v60;
  void *v61;
  char v62;
  unsigned int v63;
  int v64;
  id v65;
  id v66;
  char v67;
  unsigned __int16 v68;
  uint64_t v69;
  void *v70;
  char v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  id v75;
  id v76;
  char v77;
  unsigned __int16 v78;
  uint64_t v79;
  void *v80;
  char v81;
  unsigned int v82;
  int v83;
  uint64_t v84;
  NSDictionary *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _QWORD v129[9];
  _QWORD v130[9];
  _BYTE v131[128];
  _BYTE v132[128];
  _BYTE v133[128];
  _BYTE v134[128];
  _BYTE v135[128];
  _BYTE v136[128];
  _BYTE v137[128];
  _BYTE v138[128];
  _BYTE v139[128];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiType7_WiFiEnh WiFiS: setting WiFiType7_WiFiEnh enabled channels 2G5G part channels %@, Enh part channels %@"), a1[4], a1[5]);
  v127 = 0u;
  v128 = 0u;
  v125 = 0u;
  v126 = 0u;
  v2 = objc_msgSend(&off_1002424C8, "countByEnumeratingWithState:objects:count:", &v125, v139, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)v126;
    do
    {
      v7 = 0;
      v8 = v4;
      do
      {
        if (*(_QWORD *)v126 != v6)
          objc_enumerationMutation(&off_1002424C8);
        v9 = objc_msgSend(a1[4], "containsObject:", *(_QWORD *)(*((_QWORD *)&v125 + 1) + 8 * (_QWORD)v7));
        v10 = 1 << v8;
        if (!v9)
          LOWORD(v10) = 0;
        v5 |= v10;
        ++v8;
        v7 = (char *)v7 + 1;
      }
      while (v3 != v7);
      v4 += (char)v3;
      v3 = objc_msgSend(&off_1002424C8, "countByEnumeratingWithState:objects:count:", &v125, v139, 16);
    }
    while (v3);
  }
  else
  {
    v5 = 0;
  }
  v123 = 0u;
  v124 = 0u;
  v121 = 0u;
  v122 = 0u;
  v11 = objc_msgSend(&off_1002424E0, "countByEnumeratingWithState:objects:count:", &v121, v138, 16);
  if (v11)
  {
    v12 = v11;
    v13 = 0;
    v14 = 0;
    v15 = *(_QWORD *)v122;
    do
    {
      v16 = 0;
      v17 = v13;
      do
      {
        if (*(_QWORD *)v122 != v15)
          objc_enumerationMutation(&off_1002424E0);
        v18 = objc_msgSend(a1[4], "containsObject:", *(_QWORD *)(*((_QWORD *)&v121 + 1) + 8 * (_QWORD)v16));
        v19 = 1 << v17;
        if (!v18)
          LOWORD(v19) = 0;
        v14 |= v19;
        ++v17;
        v16 = (char *)v16 + 1;
      }
      while (v12 != v16);
      v13 += (char)v12;
      v12 = objc_msgSend(&off_1002424E0, "countByEnumeratingWithState:objects:count:", &v121, v138, 16);
    }
    while (v12);
    v92 = v14;
  }
  else
  {
    v92 = 0;
  }
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v20 = objc_msgSend(&off_1002424F8, "countByEnumeratingWithState:objects:count:", &v117, v137, 16);
  if (v20)
  {
    v21 = v20;
    v22 = 0;
    v23 = 0;
    v24 = *(_QWORD *)v118;
    do
    {
      v25 = 0;
      v26 = v22;
      do
      {
        if (*(_QWORD *)v118 != v24)
          objc_enumerationMutation(&off_1002424F8);
        v27 = objc_msgSend(a1[4], "containsObject:", *(_QWORD *)(*((_QWORD *)&v117 + 1) + 8 * (_QWORD)v25));
        v28 = 1 << v26;
        if (!v27)
          LOWORD(v28) = 0;
        v23 |= v28;
        ++v26;
        v25 = (char *)v25 + 1;
      }
      while (v21 != v25);
      v22 += (char)v21;
      v21 = objc_msgSend(&off_1002424F8, "countByEnumeratingWithState:objects:count:", &v117, v137, 16);
    }
    while (v21);
    v91 = v23;
  }
  else
  {
    v91 = 0;
  }
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v29 = objc_msgSend(&off_100242510, "countByEnumeratingWithState:objects:count:", &v113, v136, 16);
  if (v29)
  {
    v30 = v29;
    v31 = 0;
    v32 = 0;
    v33 = *(_QWORD *)v114;
    do
    {
      v34 = 0;
      v35 = v31;
      do
      {
        if (*(_QWORD *)v114 != v33)
          objc_enumerationMutation(&off_100242510);
        v36 = objc_msgSend(a1[4], "containsObject:", *(_QWORD *)(*((_QWORD *)&v113 + 1) + 8 * (_QWORD)v34));
        v37 = 1 << v35;
        if (!v36)
          LOWORD(v37) = 0;
        v32 |= v37;
        ++v35;
        v34 = (char *)v34 + 1;
      }
      while (v30 != v34);
      v31 += (char)v30;
      v30 = objc_msgSend(&off_100242510, "countByEnumeratingWithState:objects:count:", &v113, v136, 16);
    }
    while (v30);
    v90 = v32;
  }
  else
  {
    v90 = 0;
  }
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  v38 = objc_msgSend(&off_100242528, "countByEnumeratingWithState:objects:count:", &v109, v135, 16);
  if (v38)
  {
    v39 = v38;
    v40 = 0;
    v41 = 0;
    v42 = *(_QWORD *)v110;
    do
    {
      v43 = 0;
      v44 = v40;
      do
      {
        if (*(_QWORD *)v110 != v42)
          objc_enumerationMutation(&off_100242528);
        v45 = objc_msgSend(a1[5], "containsObject:", *(_QWORD *)(*((_QWORD *)&v109 + 1) + 8 * (_QWORD)v43));
        v46 = 1 << v44;
        if (!v45)
          LOWORD(v46) = 0;
        v41 |= v46;
        ++v44;
        v43 = (char *)v43 + 1;
      }
      while (v39 != v43);
      v40 += (char)v39;
      v39 = objc_msgSend(&off_100242528, "countByEnumeratingWithState:objects:count:", &v109, v135, 16);
    }
    while (v39);
    v89 = v41;
  }
  else
  {
    v89 = 0;
  }
  v107 = 0u;
  v108 = 0u;
  v105 = 0u;
  v106 = 0u;
  v47 = objc_msgSend(&off_100242540, "countByEnumeratingWithState:objects:count:", &v105, v134, 16);
  if (v47)
  {
    v48 = v47;
    v49 = 0;
    v50 = 0;
    v51 = *(_QWORD *)v106;
    do
    {
      v52 = 0;
      v53 = v49;
      do
      {
        if (*(_QWORD *)v106 != v51)
          objc_enumerationMutation(&off_100242540);
        v54 = objc_msgSend(a1[5], "containsObject:", *(_QWORD *)(*((_QWORD *)&v105 + 1) + 8 * (_QWORD)v52));
        v55 = 1 << v53;
        if (!v54)
          LOWORD(v55) = 0;
        v50 |= v55;
        ++v53;
        v52 = (char *)v52 + 1;
      }
      while (v48 != v52);
      v49 += (char)v48;
      v48 = objc_msgSend(&off_100242540, "countByEnumeratingWithState:objects:count:", &v105, v134, 16);
    }
    while (v48);
    v88 = v50;
  }
  else
  {
    v88 = 0;
  }
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  v56 = objc_msgSend(&off_100242558, "countByEnumeratingWithState:objects:count:", &v101, v133, 16);
  if (v56)
  {
    v57 = v56;
    v58 = 0;
    v59 = 0;
    v60 = *(_QWORD *)v102;
    do
    {
      v61 = 0;
      v62 = v58;
      do
      {
        if (*(_QWORD *)v102 != v60)
          objc_enumerationMutation(&off_100242558);
        v63 = objc_msgSend(a1[5], "containsObject:", *(_QWORD *)(*((_QWORD *)&v101 + 1) + 8 * (_QWORD)v61));
        v64 = 1 << v62;
        if (!v63)
          LOWORD(v64) = 0;
        v59 |= v64;
        ++v62;
        v61 = (char *)v61 + 1;
      }
      while (v57 != v61);
      v58 += (char)v57;
      v57 = objc_msgSend(&off_100242558, "countByEnumeratingWithState:objects:count:", &v101, v133, 16);
    }
    while (v57);
    v87 = v59;
  }
  else
  {
    v87 = 0;
  }
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v65 = objc_msgSend(&off_100242570, "countByEnumeratingWithState:objects:count:", &v97, v132, 16);
  if (v65)
  {
    v66 = v65;
    v67 = 0;
    v68 = 0;
    v69 = *(_QWORD *)v98;
    do
    {
      v70 = 0;
      v71 = v67;
      do
      {
        if (*(_QWORD *)v98 != v69)
          objc_enumerationMutation(&off_100242570);
        v72 = objc_msgSend(a1[5], "containsObject:", *(_QWORD *)(*((_QWORD *)&v97 + 1) + 8 * (_QWORD)v70));
        v73 = 1 << v71;
        if (!v72)
          LOWORD(v73) = 0;
        v68 |= v73;
        ++v71;
        v70 = (char *)v70 + 1;
      }
      while (v66 != v70);
      v67 += (char)v66;
      v66 = objc_msgSend(&off_100242570, "countByEnumeratingWithState:objects:count:", &v97, v132, 16);
    }
    while (v66);
    v74 = v68;
  }
  else
  {
    v74 = 0;
  }
  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  v75 = objc_msgSend(&off_100242588, "countByEnumeratingWithState:objects:count:", &v93, v131, 16);
  if (v75)
  {
    v76 = v75;
    v86 = v74;
    v77 = 0;
    v78 = 0;
    v79 = *(_QWORD *)v94;
    do
    {
      v80 = 0;
      v81 = v77;
      do
      {
        if (*(_QWORD *)v94 != v79)
          objc_enumerationMutation(&off_100242588);
        v82 = objc_msgSend(a1[5], "containsObject:", *(_QWORD *)(*((_QWORD *)&v93 + 1) + 8 * (_QWORD)v80));
        v83 = 1 << v81;
        if (!v82)
          LOWORD(v83) = 0;
        v78 |= v83;
        ++v81;
        v80 = (char *)v80 + 1;
      }
      while (v76 != v80);
      v77 += (char)v76;
      v76 = objc_msgSend(&off_100242588, "countByEnumeratingWithState:objects:count:", &v93, v131, 16);
    }
    while (v76);
    v84 = v78;
    v74 = v86;
  }
  else
  {
    v84 = 0;
  }
  if (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "activeCoexFeatures"), "containsObject:", CFSTR("WiFiEnhCoexSupport")))
  {
    v129[0] = CFSTR("MWSType72GBITMAPWiFiEnh");
    v130[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v5);
    v129[1] = CFSTR("MWSType75GBITMAPLOWWiFiEnh");
    v130[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v92);
    v129[2] = CFSTR("MWSType75GBITMAPMIDWiFiEnh");
    v130[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v91);
    v129[3] = CFSTR("MWSType75GBITMAPHIWiFiEnh");
    v130[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v90);
    v129[4] = CFSTR("MWSType7U5LowBITMAPWiFiEnh");
    v130[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v89);
    v129[5] = CFSTR("MWSType7U5HighBITMAPWiFiEnh");
    v130[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v88);
    v129[6] = CFSTR("MWSType7U6BITMAPWiFiEnh");
    v130[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v87);
    v129[7] = CFSTR("MWSType7U7BITMAPWiFiEnh");
    v130[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v74);
    v129[8] = CFSTR("MWSType7U8BITMAPWiFiEnh");
    v130[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v84);
    v85 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v130, v129, 9);
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("WiFiType7_WiFiEnh IOVAR: setting mwsWiFiType7BitmapWiFiEnh %@"), v85);
    objc_msgSend(a1[6], "sendMessage:withValue:", CFSTR("MWSType7BITMAPWiFiEnh"), v85);
  }

}

void sub_1000D884C(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  const __CFString *v13;
  id v14;
  const __CFString *v15;
  uint64_t v16;
  _BYTE v17[128];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: setting OCL disabled channels %@"), *(_QWORD *)(a1 + 32));
  v2 = +[NSMutableArray array](NSMutableArray, "array");
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = *(void **)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i);
        v15 = CFSTR("MWS_Channel_Number");
        v16 = v8;
        objc_msgSend(v2, "addObject:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1));
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v17, 16);
    }
    while (v5);
  }
  v13 = CFSTR("MWS_OCL_DISABLE_CHANNELS");
  v14 = v2;
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_OCL_PARAMS"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1));

}

void sub_1000D8A58(id *a1)
{
  id v2;
  id v3;
  char v4;
  unsigned __int16 v5;
  uint64_t v6;
  void *v7;
  char v8;
  unsigned int v9;
  int v10;
  id v11;
  id v12;
  char v13;
  unsigned __int16 v14;
  uint64_t v15;
  void *v16;
  char v17;
  unsigned int v18;
  int v19;
  id v20;
  id v21;
  char v22;
  unsigned __int16 v23;
  uint64_t v24;
  void *v25;
  char v26;
  unsigned int v27;
  int v28;
  id v29;
  id v30;
  char v31;
  unsigned __int16 v32;
  uint64_t v33;
  void *v34;
  char v35;
  unsigned int v36;
  int v37;
  id v38;
  id v39;
  char v40;
  unsigned __int16 v41;
  uint64_t v42;
  void *v43;
  char v44;
  unsigned int v45;
  int v46;
  id v47;
  id v48;
  char v49;
  unsigned __int16 v50;
  uint64_t v51;
  void *v52;
  char v53;
  unsigned int v54;
  int v55;
  id v56;
  id v57;
  char v58;
  unsigned __int16 v59;
  uint64_t v60;
  void *v61;
  char v62;
  unsigned int v63;
  int v64;
  id v65;
  id v66;
  char v67;
  unsigned __int16 v68;
  uint64_t v69;
  void *v70;
  char v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  id v75;
  id v76;
  char v77;
  unsigned __int16 v78;
  uint64_t v79;
  void *v80;
  char v81;
  unsigned int v82;
  int v83;
  uint64_t v84;
  NSDictionary *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _QWORD v129[9];
  _QWORD v130[9];
  _BYTE v131[128];
  _BYTE v132[128];
  _BYTE v133[128];
  _BYTE v134[128];
  _BYTE v135[128];
  _BYTE v136[128];
  _BYTE v137[128];
  _BYTE v138[128];
  _BYTE v139[128];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("OCL_WiFiEnh WiFiS: setting OCL_WiFiEnh 2G5G part channels %@, Enh part channels %@"), a1[4], a1[5]);
  v127 = 0u;
  v128 = 0u;
  v125 = 0u;
  v126 = 0u;
  v2 = objc_msgSend(&off_1002425A0, "countByEnumeratingWithState:objects:count:", &v125, v139, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)v126;
    do
    {
      v7 = 0;
      v8 = v4;
      do
      {
        if (*(_QWORD *)v126 != v6)
          objc_enumerationMutation(&off_1002425A0);
        v9 = objc_msgSend(a1[4], "containsObject:", *(_QWORD *)(*((_QWORD *)&v125 + 1) + 8 * (_QWORD)v7));
        v10 = 1 << v8;
        if (v9)
          LOWORD(v10) = 0;
        v5 |= v10;
        ++v8;
        v7 = (char *)v7 + 1;
      }
      while (v3 != v7);
      v4 += (char)v3;
      v3 = objc_msgSend(&off_1002425A0, "countByEnumeratingWithState:objects:count:", &v125, v139, 16);
    }
    while (v3);
  }
  else
  {
    v5 = 0;
  }
  v123 = 0u;
  v124 = 0u;
  v121 = 0u;
  v122 = 0u;
  v11 = objc_msgSend(&off_1002425B8, "countByEnumeratingWithState:objects:count:", &v121, v138, 16);
  if (v11)
  {
    v12 = v11;
    v13 = 0;
    v14 = 0;
    v15 = *(_QWORD *)v122;
    do
    {
      v16 = 0;
      v17 = v13;
      do
      {
        if (*(_QWORD *)v122 != v15)
          objc_enumerationMutation(&off_1002425B8);
        v18 = objc_msgSend(a1[4], "containsObject:", *(_QWORD *)(*((_QWORD *)&v121 + 1) + 8 * (_QWORD)v16));
        v19 = 1 << v17;
        if (v18)
          LOWORD(v19) = 0;
        v14 |= v19;
        ++v17;
        v16 = (char *)v16 + 1;
      }
      while (v12 != v16);
      v13 += (char)v12;
      v12 = objc_msgSend(&off_1002425B8, "countByEnumeratingWithState:objects:count:", &v121, v138, 16);
    }
    while (v12);
    v92 = v14;
  }
  else
  {
    v92 = 0;
  }
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v20 = objc_msgSend(&off_1002425D0, "countByEnumeratingWithState:objects:count:", &v117, v137, 16);
  if (v20)
  {
    v21 = v20;
    v22 = 0;
    v23 = 0;
    v24 = *(_QWORD *)v118;
    do
    {
      v25 = 0;
      v26 = v22;
      do
      {
        if (*(_QWORD *)v118 != v24)
          objc_enumerationMutation(&off_1002425D0);
        v27 = objc_msgSend(a1[4], "containsObject:", *(_QWORD *)(*((_QWORD *)&v117 + 1) + 8 * (_QWORD)v25));
        v28 = 1 << v26;
        if (v27)
          LOWORD(v28) = 0;
        v23 |= v28;
        ++v26;
        v25 = (char *)v25 + 1;
      }
      while (v21 != v25);
      v22 += (char)v21;
      v21 = objc_msgSend(&off_1002425D0, "countByEnumeratingWithState:objects:count:", &v117, v137, 16);
    }
    while (v21);
    v91 = v23;
  }
  else
  {
    v91 = 0;
  }
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v29 = objc_msgSend(&off_1002425E8, "countByEnumeratingWithState:objects:count:", &v113, v136, 16);
  if (v29)
  {
    v30 = v29;
    v31 = 0;
    v32 = 0;
    v33 = *(_QWORD *)v114;
    do
    {
      v34 = 0;
      v35 = v31;
      do
      {
        if (*(_QWORD *)v114 != v33)
          objc_enumerationMutation(&off_1002425E8);
        v36 = objc_msgSend(a1[4], "containsObject:", *(_QWORD *)(*((_QWORD *)&v113 + 1) + 8 * (_QWORD)v34));
        v37 = 1 << v35;
        if (v36)
          LOWORD(v37) = 0;
        v32 |= v37;
        ++v35;
        v34 = (char *)v34 + 1;
      }
      while (v30 != v34);
      v31 += (char)v30;
      v30 = objc_msgSend(&off_1002425E8, "countByEnumeratingWithState:objects:count:", &v113, v136, 16);
    }
    while (v30);
    v90 = v32;
  }
  else
  {
    v90 = 0;
  }
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  v38 = objc_msgSend(&off_100242600, "countByEnumeratingWithState:objects:count:", &v109, v135, 16);
  if (v38)
  {
    v39 = v38;
    v40 = 0;
    v41 = 0;
    v42 = *(_QWORD *)v110;
    do
    {
      v43 = 0;
      v44 = v40;
      do
      {
        if (*(_QWORD *)v110 != v42)
          objc_enumerationMutation(&off_100242600);
        v45 = objc_msgSend(a1[5], "containsObject:", *(_QWORD *)(*((_QWORD *)&v109 + 1) + 8 * (_QWORD)v43));
        v46 = 1 << v44;
        if (v45)
          LOWORD(v46) = 0;
        v41 |= v46;
        ++v44;
        v43 = (char *)v43 + 1;
      }
      while (v39 != v43);
      v40 += (char)v39;
      v39 = objc_msgSend(&off_100242600, "countByEnumeratingWithState:objects:count:", &v109, v135, 16);
    }
    while (v39);
    v89 = v41;
  }
  else
  {
    v89 = 0;
  }
  v107 = 0u;
  v108 = 0u;
  v105 = 0u;
  v106 = 0u;
  v47 = objc_msgSend(&off_100242618, "countByEnumeratingWithState:objects:count:", &v105, v134, 16);
  if (v47)
  {
    v48 = v47;
    v49 = 0;
    v50 = 0;
    v51 = *(_QWORD *)v106;
    do
    {
      v52 = 0;
      v53 = v49;
      do
      {
        if (*(_QWORD *)v106 != v51)
          objc_enumerationMutation(&off_100242618);
        v54 = objc_msgSend(a1[5], "containsObject:", *(_QWORD *)(*((_QWORD *)&v105 + 1) + 8 * (_QWORD)v52));
        v55 = 1 << v53;
        if (v54)
          LOWORD(v55) = 0;
        v50 |= v55;
        ++v53;
        v52 = (char *)v52 + 1;
      }
      while (v48 != v52);
      v49 += (char)v48;
      v48 = objc_msgSend(&off_100242618, "countByEnumeratingWithState:objects:count:", &v105, v134, 16);
    }
    while (v48);
    v88 = v50;
  }
  else
  {
    v88 = 0;
  }
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  v56 = objc_msgSend(&off_100242630, "countByEnumeratingWithState:objects:count:", &v101, v133, 16);
  if (v56)
  {
    v57 = v56;
    v58 = 0;
    v59 = 0;
    v60 = *(_QWORD *)v102;
    do
    {
      v61 = 0;
      v62 = v58;
      do
      {
        if (*(_QWORD *)v102 != v60)
          objc_enumerationMutation(&off_100242630);
        v63 = objc_msgSend(a1[5], "containsObject:", *(_QWORD *)(*((_QWORD *)&v101 + 1) + 8 * (_QWORD)v61));
        v64 = 1 << v62;
        if (v63)
          LOWORD(v64) = 0;
        v59 |= v64;
        ++v62;
        v61 = (char *)v61 + 1;
      }
      while (v57 != v61);
      v58 += (char)v57;
      v57 = objc_msgSend(&off_100242630, "countByEnumeratingWithState:objects:count:", &v101, v133, 16);
    }
    while (v57);
    v87 = v59;
  }
  else
  {
    v87 = 0;
  }
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v65 = objc_msgSend(&off_100242648, "countByEnumeratingWithState:objects:count:", &v97, v132, 16);
  if (v65)
  {
    v66 = v65;
    v67 = 0;
    v68 = 0;
    v69 = *(_QWORD *)v98;
    do
    {
      v70 = 0;
      v71 = v67;
      do
      {
        if (*(_QWORD *)v98 != v69)
          objc_enumerationMutation(&off_100242648);
        v72 = objc_msgSend(a1[5], "containsObject:", *(_QWORD *)(*((_QWORD *)&v97 + 1) + 8 * (_QWORD)v70));
        v73 = 1 << v71;
        if (v72)
          LOWORD(v73) = 0;
        v68 |= v73;
        ++v71;
        v70 = (char *)v70 + 1;
      }
      while (v66 != v70);
      v67 += (char)v66;
      v66 = objc_msgSend(&off_100242648, "countByEnumeratingWithState:objects:count:", &v97, v132, 16);
    }
    while (v66);
    v74 = v68;
  }
  else
  {
    v74 = 0;
  }
  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  v75 = objc_msgSend(&off_100242660, "countByEnumeratingWithState:objects:count:", &v93, v131, 16);
  if (v75)
  {
    v76 = v75;
    v86 = v74;
    v77 = 0;
    v78 = 0;
    v79 = *(_QWORD *)v94;
    do
    {
      v80 = 0;
      v81 = v77;
      do
      {
        if (*(_QWORD *)v94 != v79)
          objc_enumerationMutation(&off_100242660);
        v82 = objc_msgSend(a1[5], "containsObject:", *(_QWORD *)(*((_QWORD *)&v93 + 1) + 8 * (_QWORD)v80));
        v83 = 1 << v81;
        if (v82)
          LOWORD(v83) = 0;
        v78 |= v83;
        ++v81;
        v80 = (char *)v80 + 1;
      }
      while (v76 != v80);
      v77 += (char)v76;
      v76 = objc_msgSend(&off_100242660, "countByEnumeratingWithState:objects:count:", &v93, v131, 16);
    }
    while (v76);
    v84 = v78;
    v74 = v86;
  }
  else
  {
    v84 = 0;
  }
  if (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "activeCoexFeatures"), "containsObject:", CFSTR("WiFiEnhCoexSupport")))
  {
    v129[0] = CFSTR("MWSOCL2GBITMAPWiFiEnh");
    v130[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v5);
    v129[1] = CFSTR("MWSOCL5GBITMAPLOWWiFiEnh");
    v130[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v92);
    v129[2] = CFSTR("MWSOCL5GBITMAPMIDWiFiEnh");
    v130[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v91);
    v129[3] = CFSTR("MWSOCL5GBITMAPHIWiFiEnh");
    v130[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v90);
    v129[4] = CFSTR("MWSOCLU5LowBITMAPWiFiEnh");
    v130[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v89);
    v129[5] = CFSTR("MWSOCLU5HighBITMAPWiFiEnh");
    v130[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v88);
    v129[6] = CFSTR("MWSOCLU6BITMAPWiFiEnh");
    v130[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v87);
    v129[7] = CFSTR("MWSOCLU7BITMAPWiFiEnh");
    v130[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v74);
    v129[8] = CFSTR("MWSOCLU8BITMAPWiFiEnh");
    v130[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v84);
    v85 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v130, v129, 9);
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("OCL_WiFiEnh_IOVAR: setting mwsDisableOCLBitmapWiFiEnh %@"), v85);
    objc_msgSend(a1[6], "sendMessage:withValue:", CFSTR("MWSOCLBITMAPWiFiEnh"), v85);
  }

}

void sub_1000D93D0(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: setting rxPriThreshold %@"), *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_WLAN_RX_PRI_THRESHOLD"), *(_QWORD *)(a1 + 32));

}

void sub_1000D9494(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: setting WiFi MWS Channel Parameters %@"), *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_Aggressor_ChannelParameters"), *(_QWORD *)(a1 + 32));

}

void sub_1000D9558(uint64_t a1)
{
  if (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "platformManager"), "wcmWiFiSupportFrameConfig"))
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: setting WiFi MWS Frame Config %@"), *(_QWORD *)(a1 + 32));
    objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_Aggressor_FrameConfig"), *(_QWORD *)(a1 + 32));
  }

}

void sub_1000D9634(uint64_t a1)
{
  if (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "platformManager"), "wcmWiFiSupportWciSignalingConfig"))
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: setting WiFi MWS Signaling Config %@"), *(_QWORD *)(a1 + 32));
    objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_WCI_Signaling_Config"), *(_QWORD *)(a1 + 32));
  }

}

void sub_1000D9710(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: setting WiFi Rx Antenna Preference 0x%X"), objc_msgSend(*(id *)(a1 + 32), "intValue"));
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_SWDIV_RX_POLICY"), *(_QWORD *)(a1 + 32));

}

void sub_1000D97DC(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: setting WiFi Tx Antenna Preference 0x%X"), objc_msgSend(*(id *)(a1 + 32), "intValue"));
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_SWDIV_TX_POLICY"), *(_QWORD *)(a1 + 32));

}

void sub_1000D98A8(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: setting WiFi Antenna Cell Policy 0x%X"), objc_msgSend(*(id *)(a1 + 32), "intValue"));
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_SWDIV_CELL_POLICY"), *(_QWORD *)(a1 + 32));

}

void sub_1000D9974(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: setting WiFi Antenna Selection %@"), *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_ANTENNA_SELECTION"), *(_QWORD *)(a1 + 32));

}

void sub_1000D9A38(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("WiFiS: setting WiFi V2 Antenna Selection %@"), *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_ANTENNA_SELECTION_V2"), *(_QWORD *)(a1 + 32));

}

void sub_1000D9AFC(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("WiFiEnh: setting WiFi Enh Antenna Selection %@"), *(_QWORD *)(a1 + 32));
  if (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "activeCoexFeatures"), "containsObject:", CFSTR("WiFiEnhCoexSupport")))objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_ANTENNA_SELECTION_Enh"), *(_QWORD *)(a1 + 32));

}

void sub_1000D9BF4(id *a1)
{
  unsigned __int16 v2;
  unsigned __int16 v3;
  unsigned __int16 v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSNumber *v9;
  uint64_t v10;
  NSDictionary *v11;
  id v12;
  id v13;
  uint64_t v14;
  int v15;
  void *v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  id v21;
  id v22;
  uint64_t v23;
  int v24;
  void *v25;
  char v26;
  unsigned int v27;
  int v28;
  id v29;
  id v30;
  uint64_t v31;
  int v32;
  void *v33;
  int v34;
  unsigned int v35;
  int v36;
  NSDictionary *v37;
  id v38;
  uint64_t v39;
  id v40;
  void *v41;
  NSNumber *v42;
  NSDictionary *v43;
  id v44;
  id v45;
  uint64_t v46;
  int v47;
  void *v48;
  int v49;
  unsigned int v50;
  int v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  int v56;
  void *v57;
  int v58;
  unsigned int v59;
  int v60;
  id v61;
  id v62;
  uint64_t v63;
  int v64;
  void *v65;
  int v66;
  unsigned int v67;
  int v68;
  NSDictionary *v69;
  id v70;
  id v71;
  id obj;
  id obja;
  id v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  id *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  id v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _QWORD v115[4];
  _QWORD v116[4];
  _BYTE v117[128];
  _BYTE v118[128];
  _BYTE v119[128];
  _QWORD v120[2];
  _QWORD v121[2];
  _BYTE v122[128];
  _QWORD v123[4];
  _QWORD v124[4];
  _BYTE v125[128];
  _BYTE v126[128];
  _BYTE v127[128];
  _QWORD v128[2];
  _QWORD v129[2];
  _BYTE v130[128];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: setting WiFi Scan Freq Protection Channels"));
  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  obj = a1[4];
  v78 = a1;
  v74 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v111, v130, 16);
  if (v74)
  {
    v77 = 0;
    v76 = 0;
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = *(id *)v112;
    v6 = 1;
    v70 = *(id *)v112;
    do
    {
      v7 = 0;
      do
      {
        if (*(id *)v112 != v5)
          objc_enumerationMutation(obj);
        v79 = v7;
        v8 = *(void **)(*((_QWORD *)&v111 + 1) + 8 * v7);
        v128[0] = CFSTR("MWS_SCAN_FREQ_INDEX");
        v9 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v6);
        v128[1] = CFSTR("MWS_SCAN_FREQ_CHANNELS");
        v129[0] = v9;
        v129[1] = v8;
        v10 = v6;
        v11 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v129, v128, 2);
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("WiFiS: setting MWS_SCAN_FREQ Protection: %@"), v11);
        objc_msgSend(a1[5], "sendMessage:withValue:", CFSTR("MWS_SCAN_FREQ"), v11);
        v81 = v10;
        if (objc_msgSend(a1[6], "containsObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v10)))
        {
          v109 = 0u;
          v110 = 0u;
          v107 = 0u;
          v108 = 0u;
          v12 = objc_msgSend(&off_100242678, "countByEnumeratingWithState:objects:count:", &v107, v127, 16);
          if (v12)
          {
            v13 = v12;
            v14 = *(_QWORD *)v108;
            v15 = v76;
            do
            {
              v16 = 0;
              v17 = v15;
              do
              {
                if (*(_QWORD *)v108 != v14)
                  objc_enumerationMutation(&off_100242678);
                v18 = objc_msgSend(v8, "containsObject:", *(_QWORD *)(*((_QWORD *)&v107 + 1) + 8 * (_QWORD)v16));
                v19 = 1 << v15;
                if (!v18)
                  LOWORD(v19) = 0;
                v4 |= v19;
                LOBYTE(v15) = v15 + 1;
                v16 = (char *)v16 + 1;
              }
              while (v13 != v16);
              v15 = v17 + (_DWORD)v13;
              v13 = objc_msgSend(&off_100242678, "countByEnumeratingWithState:objects:count:", &v107, v127, 16);
            }
            while (v13);
          }
          else
          {
            v15 = v76;
          }
          v76 = v15;
          v105 = 0u;
          v106 = 0u;
          v103 = 0u;
          v104 = 0u;
          v21 = objc_msgSend(&off_100242690, "countByEnumeratingWithState:objects:count:", &v103, v126, 16);
          if (v21)
          {
            v22 = v21;
            v23 = *(_QWORD *)v104;
            v24 = v77;
            do
            {
              v25 = 0;
              v26 = v24;
              do
              {
                if (*(_QWORD *)v104 != v23)
                  objc_enumerationMutation(&off_100242690);
                v27 = objc_msgSend(v8, "containsObject:", *(_QWORD *)(*((_QWORD *)&v103 + 1) + 8 * (_QWORD)v25));
                v28 = 1 << v26;
                if (!v27)
                  LOWORD(v28) = 0;
                v3 |= v28;
                ++v26;
                v25 = (char *)v25 + 1;
              }
              while (v22 != v25);
              v24 += (int)v22;
              v22 = objc_msgSend(&off_100242690, "countByEnumeratingWithState:objects:count:", &v103, v126, 16);
            }
            while (v22);
          }
          else
          {
            v24 = v77;
          }
          LODWORD(v77) = v24;
          v101 = 0u;
          v102 = 0u;
          v99 = 0u;
          v100 = 0u;
          v29 = objc_msgSend(&off_1002426A8, "countByEnumeratingWithState:objects:count:", &v99, v125, 16);
          if (v29)
          {
            v30 = v29;
            v31 = *(_QWORD *)v100;
            v32 = HIDWORD(v77);
            do
            {
              v33 = 0;
              v34 = v32;
              do
              {
                if (*(_QWORD *)v100 != v31)
                  objc_enumerationMutation(&off_1002426A8);
                v35 = objc_msgSend(v8, "containsObject:", *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (_QWORD)v33));
                v36 = 1 << v32;
                if (!v35)
                  LOWORD(v36) = 0;
                v2 |= v36;
                LOBYTE(v32) = v32 + 1;
                v33 = (char *)v33 + 1;
              }
              while (v30 != v33);
              v32 = v34 + (_DWORD)v30;
              v30 = objc_msgSend(&off_1002426A8, "countByEnumeratingWithState:objects:count:", &v99, v125, 16);
            }
            while (v30);
          }
          else
          {
            v32 = HIDWORD(v77);
          }
          HIDWORD(v77) = v32;
          v123[0] = CFSTR("MWS_SCAN_FREQ_INDEX_Enh");
          v20 = v81;
          v124[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v81);
          v123[1] = CFSTR("MWSType4Blanking5GBITMAPLOWWiFiEnh");
          v124[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v4);
          v123[2] = CFSTR("MWSType4Blanking5GBITMAPMIDWiFiEnh");
          v124[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v3);
          v123[3] = CFSTR("MWSType4Blanking5GBITMAPHIWiFiEnh");
          v124[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v2);
          v37 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v124, v123, 4);
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("WiFiS: setting MWS_SCAN_FREQ_MODE Protection for SUB0: %@"), v37);
          a1 = v78;
          objc_msgSend(v78[5], "sendMessage:withValue:", CFSTR("MWS_SCAN_FREQ_MODE_Enh"), v37);
          v5 = v70;
        }
        else
        {
          v20 = v10;
        }
        v6 = (v20 + 1);
        v7 = v79 + 1;
      }
      while ((id)(v79 + 1) != v74);
      v74 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v111, v130, 16);
    }
    while (v74);
  }
  else
  {
    v77 = 0;
    v76 = 0;
    v2 = 0;
    v3 = 0;
    v4 = 0;
  }
  if (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "activeCoexFeatures"), "containsObject:", CFSTR("LTEDualSubCoexSupport")))
  {
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v71 = a1[4];
    v38 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v95, v122, 16);
    if (v38)
    {
      v39 = 17;
      v80 = *(_QWORD *)v96;
      do
      {
        v40 = 0;
        v82 = v38;
        do
        {
          if (*(_QWORD *)v96 != v80)
            objc_enumerationMutation(v71);
          v41 = *(void **)(*((_QWORD *)&v95 + 1) + 8 * (_QWORD)v40);
          v120[0] = CFSTR("MWS_SCAN_FREQ_INDEX");
          v42 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v39);
          v120[1] = CFSTR("MWS_SCAN_FREQ_CHANNELS");
          v121[0] = v42;
          v121[1] = v41;
          v43 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v121, v120, 2);
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("WiFiS: setting MWS_SCAN_FREQ Protection for SUB1: %@"), v43);
          objc_msgSend(v78[5], "sendMessage:withValue:", CFSTR("MWS_SCAN_FREQ"), v43);
          if (objc_msgSend(v78[6], "containsObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (v39 - 16))))
          {
            obja = v40;
            v75 = v39;
            v93 = 0u;
            v94 = 0u;
            v91 = 0u;
            v92 = 0u;
            v44 = objc_msgSend(&off_1002426C0, "countByEnumeratingWithState:objects:count:", &v91, v119, 16);
            if (v44)
            {
              v45 = v44;
              v46 = *(_QWORD *)v92;
              v47 = v76;
              do
              {
                v48 = 0;
                v49 = v47;
                do
                {
                  if (*(_QWORD *)v92 != v46)
                    objc_enumerationMutation(&off_1002426C0);
                  v50 = objc_msgSend(v41, "containsObject:", *(_QWORD *)(*((_QWORD *)&v91 + 1) + 8 * (_QWORD)v48));
                  v51 = 1 << v47;
                  if (!v50)
                    LOWORD(v51) = 0;
                  v4 |= v51;
                  LOBYTE(v47) = v47 + 1;
                  v48 = (char *)v48 + 1;
                }
                while (v45 != v48);
                v47 = v49 + (_DWORD)v45;
                v45 = objc_msgSend(&off_1002426C0, "countByEnumeratingWithState:objects:count:", &v91, v119, 16);
              }
              while (v45);
            }
            else
            {
              v47 = v76;
            }
            v76 = v47;
            v89 = 0u;
            v90 = 0u;
            v87 = 0u;
            v88 = 0u;
            v53 = objc_msgSend(&off_1002426D8, "countByEnumeratingWithState:objects:count:", &v87, v118, 16);
            if (v53)
            {
              v54 = v53;
              v55 = *(_QWORD *)v88;
              v56 = v77;
              do
              {
                v57 = 0;
                v58 = v56;
                do
                {
                  if (*(_QWORD *)v88 != v55)
                    objc_enumerationMutation(&off_1002426D8);
                  v59 = objc_msgSend(v41, "containsObject:", *(_QWORD *)(*((_QWORD *)&v87 + 1) + 8 * (_QWORD)v57));
                  v60 = 1 << v56;
                  if (!v59)
                    LOWORD(v60) = 0;
                  v3 |= v60;
                  LOBYTE(v56) = v56 + 1;
                  v57 = (char *)v57 + 1;
                }
                while (v54 != v57);
                v56 = v58 + (_DWORD)v54;
                v54 = objc_msgSend(&off_1002426D8, "countByEnumeratingWithState:objects:count:", &v87, v118, 16);
              }
              while (v54);
            }
            else
            {
              v56 = v77;
            }
            LODWORD(v77) = v56;
            v85 = 0u;
            v86 = 0u;
            v83 = 0u;
            v84 = 0u;
            v61 = objc_msgSend(&off_1002426F0, "countByEnumeratingWithState:objects:count:", &v83, v117, 16);
            if (v61)
            {
              v62 = v61;
              v63 = *(_QWORD *)v84;
              v64 = HIDWORD(v77);
              do
              {
                v65 = 0;
                v66 = v64;
                do
                {
                  if (*(_QWORD *)v84 != v63)
                    objc_enumerationMutation(&off_1002426F0);
                  v67 = objc_msgSend(v41, "containsObject:", *(_QWORD *)(*((_QWORD *)&v83 + 1) + 8 * (_QWORD)v65));
                  v68 = 1 << v64;
                  if (!v67)
                    LOWORD(v68) = 0;
                  v2 |= v68;
                  LOBYTE(v64) = v64 + 1;
                  v65 = (char *)v65 + 1;
                }
                while (v62 != v65);
                v64 = v66 + (_DWORD)v62;
                v62 = objc_msgSend(&off_1002426F0, "countByEnumeratingWithState:objects:count:", &v83, v117, 16);
              }
              while (v62);
            }
            else
            {
              v64 = HIDWORD(v77);
            }
            HIDWORD(v77) = v64;
            v115[0] = CFSTR("MWS_SCAN_FREQ_INDEX_Enh");
            LODWORD(v39) = v75;
            v116[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v75);
            v115[1] = CFSTR("MWSType4Blanking5GBITMAPLOWWiFiEnh");
            v116[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v4);
            v115[2] = CFSTR("MWSType4Blanking5GBITMAPMIDWiFiEnh");
            v116[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v3);
            v115[3] = CFSTR("MWSType4Blanking5GBITMAPHIWiFiEnh");
            v116[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v2);
            v69 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v116, v115, 4);
            +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("WiFiS: setting MWS_SCAN_FREQ_MODE Protection for SUB1: %@"), v69);
            a1 = v78;
            objc_msgSend(v78[5], "sendMessage:withValue:", CFSTR("MWS_SCAN_FREQ_MODE_Enh"), v69);
            v52 = v82;
            v40 = obja;
          }
          else
          {
            v52 = v82;
            a1 = v78;
          }
          v39 = (v39 + 1);
          v40 = (char *)v40 + 1;
        }
        while (v40 != v52);
        v38 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v95, v122, 16);
      }
      while (v38);
    }
  }

}

void sub_1000DA604(id *a1)
{
  id v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  char v10;
  unsigned __int16 v11;
  uint64_t v12;
  void *v13;
  char v14;
  unsigned int v15;
  int v16;
  id v17;
  id v18;
  char v19;
  uint64_t v20;
  void *v21;
  char v22;
  int v23;
  id v24;
  id v25;
  char v26;
  uint64_t v27;
  void *v28;
  char v29;
  int v30;
  id v31;
  id v32;
  unsigned __int16 v33;
  char v34;
  uint64_t v35;
  void *v36;
  char v37;
  int v38;
  id v39;
  id v40;
  char v41;
  unsigned __int16 v42;
  uint64_t v43;
  void *v44;
  char v45;
  unsigned int v46;
  int v47;
  id v48;
  id v49;
  char v50;
  unsigned __int16 v51;
  uint64_t v52;
  void *v53;
  char v54;
  unsigned int v55;
  int v56;
  id v57;
  id v58;
  char v59;
  unsigned __int16 v60;
  uint64_t v61;
  void *v62;
  char v63;
  unsigned int v64;
  int v65;
  id v66;
  id v67;
  int v68;
  unsigned __int16 v69;
  uint64_t v70;
  void *v71;
  unsigned int v72;
  int v73;
  id v74;
  id v75;
  int v76;
  unsigned __int16 v77;
  uint64_t v78;
  void *v79;
  unsigned int v80;
  int v81;
  NSDictionary *v82;
  NSDictionary *v83;
  int v84;
  BOOL v85;
  uint64_t v86;
  int v87;
  id v88;
  id v89;
  id v90;
  char v91;
  unsigned __int16 v92;
  uint64_t v93;
  void *v94;
  char v95;
  unsigned int v96;
  int v97;
  id v98;
  id v99;
  char v100;
  uint64_t v101;
  void *v102;
  char v103;
  int v104;
  id v105;
  id v106;
  char v107;
  uint64_t v108;
  void *v109;
  char v110;
  int v111;
  id v112;
  id v113;
  char v114;
  uint64_t v115;
  void *v116;
  char v117;
  int v118;
  id v119;
  id v120;
  char v121;
  unsigned __int16 v122;
  uint64_t v123;
  void *v124;
  char v125;
  unsigned int v126;
  int v127;
  id v128;
  id v129;
  char v130;
  unsigned __int16 v131;
  uint64_t v132;
  void *v133;
  char v134;
  unsigned int v135;
  int v136;
  id v137;
  id v138;
  char v139;
  unsigned __int16 v140;
  uint64_t v141;
  void *v142;
  char v143;
  unsigned int v144;
  int v145;
  id v146;
  id v147;
  int v148;
  unsigned __int16 v149;
  uint64_t v150;
  void *v151;
  unsigned int v152;
  int v153;
  id v154;
  id v155;
  int v156;
  unsigned __int16 v157;
  uint64_t v158;
  void *v159;
  unsigned int v160;
  int v161;
  NSDictionary *v162;
  NSDictionary *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  id *v167;
  unsigned __int16 v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  int v175;
  int v176;
  unsigned __int16 v177;
  unsigned __int16 v178;
  unsigned __int16 v179;
  unsigned __int16 v180;
  unsigned __int16 v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  unsigned int v188;
  unsigned int v189;
  id v190;
  id v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  _QWORD v264[4];
  _QWORD v265[4];
  _QWORD v266[10];
  _QWORD v267[10];
  _BYTE v268[128];
  _BYTE v269[128];
  _BYTE v270[128];
  _BYTE v271[128];
  _BYTE v272[128];
  _BYTE v273[128];
  _BYTE v274[128];
  _BYTE v275[128];
  _BYTE v276[128];
  _QWORD v277[4];
  _QWORD v278[4];
  _QWORD v279[10];
  _QWORD v280[10];
  _BYTE v281[128];
  _BYTE v282[128];
  _BYTE v283[128];
  _BYTE v284[128];
  _BYTE v285[128];
  _BYTE v286[128];
  _BYTE v287[128];
  _BYTE v288[128];
  _BYTE v289[128];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiEnh: setting WiFi Channels for Cellular Scan Freq Protection."));
  v2 = a1[4];
  v167 = a1;
  if (v2 && a1[5])
  {
    v3 = objc_msgSend(v2, "count");
    v4 = v3;
    if (v3 < 1)
    {
      v84 = 0;
    }
    else
    {
      v5 = 0;
      v164 = v3;
      v165 = v3;
      v6 = 1;
      do
      {
        v7 = objc_msgSend(a1[4], "objectAtIndexedSubscript:", v5);
        v190 = objc_msgSend(a1[5], "objectAtIndexedSubscript:", v5);
        v170 = v6;
        v188 = objc_msgSend(a1[6], "containsObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v6));
        v260 = 0u;
        v261 = 0u;
        v262 = 0u;
        v263 = 0u;
        v8 = objc_msgSend(&off_100242708, "countByEnumeratingWithState:objects:count:", &v260, v289, 16);
        if (v8)
        {
          v9 = v8;
          v10 = 0;
          v11 = 0;
          v12 = *(_QWORD *)v261;
          do
          {
            v13 = 0;
            v14 = v10;
            do
            {
              if (*(_QWORD *)v261 != v12)
                objc_enumerationMutation(&off_100242708);
              v15 = objc_msgSend(v7, "containsObject:", *(_QWORD *)(*((_QWORD *)&v260 + 1) + 8 * (_QWORD)v13));
              v16 = 1 << v14;
              if (!v15)
                LOWORD(v16) = 0;
              v11 |= v16;
              ++v14;
              v13 = (char *)v13 + 1;
            }
            while (v9 != v13);
            v10 += (char)v9;
            v9 = objc_msgSend(&off_100242708, "countByEnumeratingWithState:objects:count:", &v260, v289, 16);
          }
          while (v9);
        }
        else
        {
          v11 = 0;
        }
        v259 = 0u;
        v258 = 0u;
        v257 = 0u;
        v256 = 0u;
        v17 = objc_msgSend(&off_100242720, "countByEnumeratingWithState:objects:count:", &v256, v288, 16);
        if (v17)
        {
          v18 = v17;
          v180 = 0;
          v19 = 0;
          v186 = 0;
          v20 = *(_QWORD *)v257;
          do
          {
            v21 = 0;
            v22 = v19;
            do
            {
              if (*(_QWORD *)v257 != v20)
                objc_enumerationMutation(&off_100242720);
              if (objc_msgSend(v7, "containsObject:", *(_QWORD *)(*((_QWORD *)&v256 + 1) + 8 * (_QWORD)v21)))
              {
                v23 = 1 << v22;
                v186 |= 1 << v22;
                if (!v188)
                  LOWORD(v23) = 0;
                v180 |= v23;
              }
              ++v22;
              v21 = (char *)v21 + 1;
            }
            while (v18 != v21);
            v19 += (char)v18;
            v18 = objc_msgSend(&off_100242720, "countByEnumeratingWithState:objects:count:", &v256, v288, 16);
          }
          while (v18);
        }
        else
        {
          v180 = 0;
          LOWORD(v186) = 0;
        }
        v255 = 0u;
        v254 = 0u;
        v253 = 0u;
        v252 = 0u;
        v24 = objc_msgSend(&off_100242738, "countByEnumeratingWithState:objects:count:", &v252, v287, 16);
        if (v24)
        {
          v25 = v24;
          v178 = 0;
          v26 = 0;
          v184 = 0;
          v27 = *(_QWORD *)v253;
          do
          {
            v28 = 0;
            v29 = v26;
            do
            {
              if (*(_QWORD *)v253 != v27)
                objc_enumerationMutation(&off_100242738);
              if (objc_msgSend(v7, "containsObject:", *(_QWORD *)(*((_QWORD *)&v252 + 1) + 8 * (_QWORD)v28)))
              {
                v30 = 1 << v29;
                v184 |= 1 << v29;
                if (!v188)
                  LOWORD(v30) = 0;
                v178 |= v30;
              }
              ++v29;
              v28 = (char *)v28 + 1;
            }
            while (v25 != v28);
            v26 += (char)v25;
            v25 = objc_msgSend(&off_100242738, "countByEnumeratingWithState:objects:count:", &v252, v287, 16);
          }
          while (v25);
        }
        else
        {
          v178 = 0;
          LOWORD(v184) = 0;
        }
        v251 = 0u;
        v249 = 0u;
        v250 = 0u;
        v248 = 0u;
        v31 = objc_msgSend(&off_100242750, "countByEnumeratingWithState:objects:count:", &v248, v286, 16);
        if (v31)
        {
          v32 = v31;
          v33 = 0;
          v34 = 0;
          v182 = 0;
          v35 = *(_QWORD *)v249;
          do
          {
            v36 = 0;
            v37 = v34;
            do
            {
              if (*(_QWORD *)v249 != v35)
                objc_enumerationMutation(&off_100242750);
              if (objc_msgSend(v7, "containsObject:", *(_QWORD *)(*((_QWORD *)&v248 + 1) + 8 * (_QWORD)v36)))
              {
                v38 = 1 << v37;
                v182 |= 1 << v37;
                if (!v188)
                  LOWORD(v38) = 0;
                v33 |= v38;
              }
              ++v37;
              v36 = (char *)v36 + 1;
            }
            while (v32 != v36);
            v34 += (char)v32;
            v32 = objc_msgSend(&off_100242750, "countByEnumeratingWithState:objects:count:", &v248, v286, 16);
          }
          while (v32);
        }
        else
        {
          v33 = 0;
          LOWORD(v182) = 0;
        }
        v168 = v33;
        v246 = 0u;
        v247 = 0u;
        v244 = 0u;
        v245 = 0u;
        v39 = objc_msgSend(&off_100242768, "countByEnumeratingWithState:objects:count:", &v244, v285, 16);
        if (v39)
        {
          v40 = v39;
          v41 = 0;
          v42 = 0;
          v43 = *(_QWORD *)v245;
          do
          {
            v44 = 0;
            v45 = v41;
            do
            {
              if (*(_QWORD *)v245 != v43)
                objc_enumerationMutation(&off_100242768);
              v46 = objc_msgSend(v190, "containsObject:", *(_QWORD *)(*((_QWORD *)&v244 + 1) + 8 * (_QWORD)v44));
              v47 = 1 << v45;
              if (!v46)
                LOWORD(v47) = 0;
              v42 |= v47;
              ++v45;
              v44 = (char *)v44 + 1;
            }
            while (v40 != v44);
            v41 += (char)v40;
            v40 = objc_msgSend(&off_100242768, "countByEnumeratingWithState:objects:count:", &v244, v285, 16);
          }
          while (v40);
        }
        else
        {
          v42 = 0;
        }
        v242 = 0u;
        v243 = 0u;
        v240 = 0u;
        v241 = 0u;
        v48 = objc_msgSend(&off_100242780, "countByEnumeratingWithState:objects:count:", &v240, v284, 16);
        if (v48)
        {
          v49 = v48;
          v50 = 0;
          v51 = 0;
          v52 = *(_QWORD *)v241;
          do
          {
            v53 = 0;
            v54 = v50;
            do
            {
              if (*(_QWORD *)v241 != v52)
                objc_enumerationMutation(&off_100242780);
              v55 = objc_msgSend(v190, "containsObject:", *(_QWORD *)(*((_QWORD *)&v240 + 1) + 8 * (_QWORD)v53));
              v56 = 1 << v54;
              if (!v55)
                LOWORD(v56) = 0;
              v51 |= v56;
              ++v54;
              v53 = (char *)v53 + 1;
            }
            while (v49 != v53);
            v50 += (char)v49;
            v49 = objc_msgSend(&off_100242780, "countByEnumeratingWithState:objects:count:", &v240, v284, 16);
          }
          while (v49);
        }
        else
        {
          v51 = 0;
        }
        v238 = 0u;
        v239 = 0u;
        v236 = 0u;
        v237 = 0u;
        v57 = objc_msgSend(&off_100242798, "countByEnumeratingWithState:objects:count:", &v236, v283, 16);
        if (v57)
        {
          v58 = v57;
          v59 = 0;
          v60 = 0;
          v61 = *(_QWORD *)v237;
          do
          {
            v62 = 0;
            v63 = v59;
            do
            {
              if (*(_QWORD *)v237 != v61)
                objc_enumerationMutation(&off_100242798);
              v64 = objc_msgSend(v190, "containsObject:", *(_QWORD *)(*((_QWORD *)&v236 + 1) + 8 * (_QWORD)v62));
              v65 = 1 << v63;
              if (!v64)
                LOWORD(v65) = 0;
              v60 |= v65;
              ++v63;
              v62 = (char *)v62 + 1;
            }
            while (v58 != v62);
            v59 += (char)v58;
            v58 = objc_msgSend(&off_100242798, "countByEnumeratingWithState:objects:count:", &v236, v283, 16);
          }
          while (v58);
        }
        else
        {
          v60 = 0;
        }
        v234 = 0u;
        v235 = 0u;
        v232 = 0u;
        v233 = 0u;
        v66 = objc_msgSend(&off_1002427B0, "countByEnumeratingWithState:objects:count:", &v232, v282, 16);
        v172 = v5;
        if (v66)
        {
          v67 = v66;
          v68 = 0;
          v69 = 0;
          v70 = *(_QWORD *)v233;
          do
          {
            v71 = 0;
            v175 = v68;
            do
            {
              if (*(_QWORD *)v233 != v70)
                objc_enumerationMutation(&off_1002427B0);
              v72 = objc_msgSend(v190, "containsObject:", *(_QWORD *)(*((_QWORD *)&v232 + 1) + 8 * (_QWORD)v71));
              v73 = 1 << v68;
              if (!v72)
                LOWORD(v73) = 0;
              v69 |= v73;
              LOBYTE(v68) = v68 + 1;
              v71 = (char *)v71 + 1;
            }
            while (v67 != v71);
            v68 = v175 + (_DWORD)v67;
            v67 = objc_msgSend(&off_1002427B0, "countByEnumeratingWithState:objects:count:", &v232, v282, 16);
          }
          while (v67);
        }
        else
        {
          v69 = 0;
        }
        v230 = 0u;
        v231 = 0u;
        v228 = 0u;
        v229 = 0u;
        v74 = objc_msgSend(&off_1002427C8, "countByEnumeratingWithState:objects:count:", &v228, v281, 16);
        if (v74)
        {
          v75 = v74;
          v76 = 0;
          v77 = 0;
          v78 = *(_QWORD *)v229;
          do
          {
            v79 = 0;
            v176 = v76;
            do
            {
              if (*(_QWORD *)v229 != v78)
                objc_enumerationMutation(&off_1002427C8);
              v80 = objc_msgSend(v190, "containsObject:", *(_QWORD *)(*((_QWORD *)&v228 + 1) + 8 * (_QWORD)v79));
              v81 = 1 << v76;
              if (!v80)
                LOWORD(v81) = 0;
              v77 |= v81;
              LOBYTE(v76) = v76 + 1;
              v79 = (char *)v79 + 1;
            }
            while (v75 != v79);
            v76 = v176 + (_DWORD)v75;
            v75 = objc_msgSend(&off_1002427C8, "countByEnumeratingWithState:objects:count:", &v228, v281, 16);
          }
          while (v75);
        }
        else
        {
          v77 = 0;
        }
        v279[0] = CFSTR("MWS_SCAN_FREQ_INDEX_Enh");
        v280[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v170);
        v279[1] = CFSTR("MWSType4Blanking2GBITMAPWiFiEnh");
        v280[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11);
        v279[2] = CFSTR("MWSType4Blanking5GBITMAPLOWWiFiEnh");
        v280[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v186);
        v279[3] = CFSTR("MWSType4Blanking5GBITMAPMIDWiFiEnh");
        v280[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v184);
        v279[4] = CFSTR("MWSType4Blanking5GBITMAPHIWiFiEnh");
        v280[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v182);
        v279[5] = CFSTR("MWSType4BlankingU5LowBITMAPWiFiEnh");
        v280[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v42);
        v279[6] = CFSTR("MWSType4BlankingU5HighBITMAPWiFiEnh");
        v280[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v51);
        v279[7] = CFSTR("MWSType4BlankingU6BITMAPWiFiEnh");
        v280[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v60);
        v279[8] = CFSTR("MWSType4BlankingU7BITMAPWiFiEnh");
        v280[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v69);
        v279[9] = CFSTR("MWSType4BlankingU8BITMAPWiFiEnh");
        v280[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v77);
        v82 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v280, v279, 10);
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("Type4Blanking_WiFiEnh_IOVAR: setting mwsType4BlankingBitmapWiFiEnh %@"), v82);
        a1 = v167;
        objc_msgSend(v167[7], "sendMessage:withValue:", CFSTR("MWS_SCAN_FREQ_Enh"), v82);
        if (v188)
        {
          v277[0] = CFSTR("MWS_SCAN_FREQ_INDEX_Enh");
          v278[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v170);
          v277[1] = CFSTR("MWSType4Blanking5GBITMAPLOWWiFiEnh");
          v278[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v180);
          v277[2] = CFSTR("MWSType4Blanking5GBITMAPMIDWiFiEnh");
          v278[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v178);
          v277[3] = CFSTR("MWSType4Blanking5GBITMAPHIWiFiEnh");
          v278[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v168);
          v83 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v278, v277, 4);
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("Type4Blanking_Mode_WiFiEnh_IOVAR for SUB0: setting mwsType4BlankingBitmapWiFiEnhConfig %@"), v83);
          objc_msgSend(v167[7], "sendMessage:withValue:", CFSTR("MWS_SCAN_FREQ_MODE_Enh"), v83);
        }
        v6 = v170 + 1;
        v5 = v172 + 1;
      }
      while (v172 + 1 != v165);
      v84 = 1;
      v4 = v164;
    }
  }
  else
  {
    v84 = 0;
    v4 = 0;
  }
  if (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "activeCoexFeatures"), "containsObject:", CFSTR("LTEDualSubCoexSupport")))v85 = v84 == 0;
  else
    v85 = 1;
  if (!v85)
  {
    v86 = 0;
    v166 = v4;
    v87 = 17;
    do
    {
      v88 = objc_msgSend(a1[4], "objectAtIndexedSubscript:", v86);
      v191 = objc_msgSend(a1[5], "objectAtIndexedSubscript:", v86);
      v189 = objc_msgSend(a1[6], "containsObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (v87 - 16)));
      v224 = 0u;
      v225 = 0u;
      v226 = 0u;
      v227 = 0u;
      v89 = objc_msgSend(&off_1002427E0, "countByEnumeratingWithState:objects:count:", &v224, v276, 16);
      if (v89)
      {
        v90 = v89;
        v91 = 0;
        v92 = 0;
        v93 = *(_QWORD *)v225;
        do
        {
          v94 = 0;
          v95 = v91;
          do
          {
            if (*(_QWORD *)v225 != v93)
              objc_enumerationMutation(&off_1002427E0);
            v96 = objc_msgSend(v88, "containsObject:", *(_QWORD *)(*((_QWORD *)&v224 + 1) + 8 * (_QWORD)v94));
            v97 = 1 << v95;
            if (!v96)
              LOWORD(v97) = 0;
            v92 |= v97;
            ++v95;
            v94 = (char *)v94 + 1;
          }
          while (v90 != v94);
          v91 += (char)v90;
          v90 = objc_msgSend(&off_1002427E0, "countByEnumeratingWithState:objects:count:", &v224, v276, 16);
        }
        while (v90);
      }
      else
      {
        v92 = 0;
      }
      v222 = 0u;
      v223 = 0u;
      v220 = 0u;
      v221 = 0u;
      v98 = objc_msgSend(&off_1002427F8, "countByEnumeratingWithState:objects:count:", &v220, v275, 16);
      if (v98)
      {
        v99 = v98;
        v181 = 0;
        v100 = 0;
        v187 = 0;
        v101 = *(_QWORD *)v221;
        do
        {
          v102 = 0;
          v103 = v100;
          do
          {
            if (*(_QWORD *)v221 != v101)
              objc_enumerationMutation(&off_1002427F8);
            if (objc_msgSend(v88, "containsObject:", *(_QWORD *)(*((_QWORD *)&v220 + 1) + 8 * (_QWORD)v102)))
            {
              v104 = 1 << v103;
              v187 |= 1 << v103;
              if (!v189)
                LOWORD(v104) = 0;
              v181 |= v104;
            }
            ++v103;
            v102 = (char *)v102 + 1;
          }
          while (v99 != v102);
          v100 += (char)v99;
          v99 = objc_msgSend(&off_1002427F8, "countByEnumeratingWithState:objects:count:", &v220, v275, 16);
        }
        while (v99);
      }
      else
      {
        v181 = 0;
        LOWORD(v187) = 0;
      }
      v218 = 0u;
      v219 = 0u;
      v216 = 0u;
      v217 = 0u;
      v105 = objc_msgSend(&off_100242810, "countByEnumeratingWithState:objects:count:", &v216, v274, 16);
      if (v105)
      {
        v106 = v105;
        v179 = 0;
        v107 = 0;
        v185 = 0;
        v108 = *(_QWORD *)v217;
        do
        {
          v109 = 0;
          v110 = v107;
          do
          {
            if (*(_QWORD *)v217 != v108)
              objc_enumerationMutation(&off_100242810);
            if (objc_msgSend(v88, "containsObject:", *(_QWORD *)(*((_QWORD *)&v216 + 1) + 8 * (_QWORD)v109)))
            {
              v111 = 1 << v110;
              v185 |= 1 << v110;
              if (!v189)
                LOWORD(v111) = 0;
              v179 |= v111;
            }
            ++v110;
            v109 = (char *)v109 + 1;
          }
          while (v106 != v109);
          v107 += (char)v106;
          v106 = objc_msgSend(&off_100242810, "countByEnumeratingWithState:objects:count:", &v216, v274, 16);
        }
        while (v106);
      }
      else
      {
        v179 = 0;
        LOWORD(v185) = 0;
      }
      v214 = 0u;
      v215 = 0u;
      v212 = 0u;
      v213 = 0u;
      v112 = objc_msgSend(&off_100242828, "countByEnumeratingWithState:objects:count:", &v212, v273, 16);
      if (v112)
      {
        v113 = v112;
        v177 = 0;
        v114 = 0;
        v183 = 0;
        v115 = *(_QWORD *)v213;
        do
        {
          v116 = 0;
          v117 = v114;
          do
          {
            if (*(_QWORD *)v213 != v115)
              objc_enumerationMutation(&off_100242828);
            if (objc_msgSend(v88, "containsObject:", *(_QWORD *)(*((_QWORD *)&v212 + 1) + 8 * (_QWORD)v116)))
            {
              v118 = 1 << v117;
              v183 |= 1 << v117;
              if (!v189)
                LOWORD(v118) = 0;
              v177 |= v118;
            }
            ++v117;
            v116 = (char *)v116 + 1;
          }
          while (v113 != v116);
          v114 += (char)v113;
          v113 = objc_msgSend(&off_100242828, "countByEnumeratingWithState:objects:count:", &v212, v273, 16);
        }
        while (v113);
      }
      else
      {
        v177 = 0;
        LOWORD(v183) = 0;
      }
      v210 = 0u;
      v211 = 0u;
      v208 = 0u;
      v209 = 0u;
      v119 = objc_msgSend(&off_100242840, "countByEnumeratingWithState:objects:count:", &v208, v272, 16);
      if (v119)
      {
        v120 = v119;
        v121 = 0;
        v122 = 0;
        v123 = *(_QWORD *)v209;
        do
        {
          v124 = 0;
          v125 = v121;
          do
          {
            if (*(_QWORD *)v209 != v123)
              objc_enumerationMutation(&off_100242840);
            v126 = objc_msgSend(v191, "containsObject:", *(_QWORD *)(*((_QWORD *)&v208 + 1) + 8 * (_QWORD)v124));
            v127 = 1 << v125;
            if (!v126)
              LOWORD(v127) = 0;
            v122 |= v127;
            ++v125;
            v124 = (char *)v124 + 1;
          }
          while (v120 != v124);
          v121 += (char)v120;
          v120 = objc_msgSend(&off_100242840, "countByEnumeratingWithState:objects:count:", &v208, v272, 16);
        }
        while (v120);
      }
      else
      {
        v122 = 0;
      }
      v206 = 0u;
      v207 = 0u;
      v204 = 0u;
      v205 = 0u;
      v128 = objc_msgSend(&off_100242858, "countByEnumeratingWithState:objects:count:", &v204, v271, 16);
      if (v128)
      {
        v129 = v128;
        v130 = 0;
        v131 = 0;
        v132 = *(_QWORD *)v205;
        do
        {
          v133 = 0;
          v134 = v130;
          do
          {
            if (*(_QWORD *)v205 != v132)
              objc_enumerationMutation(&off_100242858);
            v135 = objc_msgSend(v191, "containsObject:", *(_QWORD *)(*((_QWORD *)&v204 + 1) + 8 * (_QWORD)v133));
            v136 = 1 << v134;
            if (!v135)
              LOWORD(v136) = 0;
            v131 |= v136;
            ++v134;
            v133 = (char *)v133 + 1;
          }
          while (v129 != v133);
          v130 += (char)v129;
          v129 = objc_msgSend(&off_100242858, "countByEnumeratingWithState:objects:count:", &v204, v271, 16);
        }
        while (v129);
      }
      else
      {
        v131 = 0;
      }
      v169 = v87;
      v202 = 0u;
      v203 = 0u;
      v200 = 0u;
      v201 = 0u;
      v137 = objc_msgSend(&off_100242870, "countByEnumeratingWithState:objects:count:", &v200, v270, 16);
      if (v137)
      {
        v138 = v137;
        v139 = 0;
        v140 = 0;
        v141 = *(_QWORD *)v201;
        do
        {
          v142 = 0;
          v143 = v139;
          do
          {
            if (*(_QWORD *)v201 != v141)
              objc_enumerationMutation(&off_100242870);
            v144 = objc_msgSend(v191, "containsObject:", *(_QWORD *)(*((_QWORD *)&v200 + 1) + 8 * (_QWORD)v142));
            v145 = 1 << v143;
            if (!v144)
              LOWORD(v145) = 0;
            v140 |= v145;
            ++v143;
            v142 = (char *)v142 + 1;
          }
          while (v138 != v142);
          v139 += (char)v138;
          v138 = objc_msgSend(&off_100242870, "countByEnumeratingWithState:objects:count:", &v200, v270, 16);
        }
        while (v138);
      }
      else
      {
        v140 = 0;
      }
      v198 = 0u;
      v199 = 0u;
      v196 = 0u;
      v197 = 0u;
      v146 = objc_msgSend(&off_100242888, "countByEnumeratingWithState:objects:count:", &v196, v269, 16);
      v171 = v86;
      if (v146)
      {
        v147 = v146;
        v148 = 0;
        v149 = 0;
        v150 = *(_QWORD *)v197;
        do
        {
          v151 = 0;
          v173 = v148;
          do
          {
            if (*(_QWORD *)v197 != v150)
              objc_enumerationMutation(&off_100242888);
            v152 = objc_msgSend(v191, "containsObject:", *(_QWORD *)(*((_QWORD *)&v196 + 1) + 8 * (_QWORD)v151));
            v153 = 1 << v148;
            if (!v152)
              LOWORD(v153) = 0;
            v149 |= v153;
            LOBYTE(v148) = v148 + 1;
            v151 = (char *)v151 + 1;
          }
          while (v147 != v151);
          v148 = v173 + (_DWORD)v147;
          v147 = objc_msgSend(&off_100242888, "countByEnumeratingWithState:objects:count:", &v196, v269, 16);
        }
        while (v147);
      }
      else
      {
        v149 = 0;
      }
      v194 = 0u;
      v195 = 0u;
      v192 = 0u;
      v193 = 0u;
      v154 = objc_msgSend(&off_1002428A0, "countByEnumeratingWithState:objects:count:", &v192, v268, 16);
      if (v154)
      {
        v155 = v154;
        v156 = 0;
        v157 = 0;
        v158 = *(_QWORD *)v193;
        do
        {
          v159 = 0;
          v174 = v156;
          do
          {
            if (*(_QWORD *)v193 != v158)
              objc_enumerationMutation(&off_1002428A0);
            v160 = objc_msgSend(v191, "containsObject:", *(_QWORD *)(*((_QWORD *)&v192 + 1) + 8 * (_QWORD)v159));
            v161 = 1 << v156;
            if (!v160)
              LOWORD(v161) = 0;
            v157 |= v161;
            LOBYTE(v156) = v156 + 1;
            v159 = (char *)v159 + 1;
          }
          while (v155 != v159);
          v156 = v174 + (_DWORD)v155;
          v155 = objc_msgSend(&off_1002428A0, "countByEnumeratingWithState:objects:count:", &v192, v268, 16);
        }
        while (v155);
      }
      else
      {
        v157 = 0;
      }
      a1 = v167;
      if (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "activeCoexFeatures"), "containsObject:", CFSTR("WiFiEnhCoexSupport")))
      {
        v266[0] = CFSTR("MWS_SCAN_FREQ_INDEX_Enh");
        v267[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v169);
        v266[1] = CFSTR("MWSType4Blanking2GBITMAPWiFiEnh");
        v267[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v92);
        v266[2] = CFSTR("MWSType4Blanking5GBITMAPLOWWiFiEnh");
        v267[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v187);
        v266[3] = CFSTR("MWSType4Blanking5GBITMAPMIDWiFiEnh");
        v267[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v185);
        v266[4] = CFSTR("MWSType4Blanking5GBITMAPHIWiFiEnh");
        v267[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v183);
        v266[5] = CFSTR("MWSType4BlankingU5LowBITMAPWiFiEnh");
        v267[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v122);
        v266[6] = CFSTR("MWSType4BlankingU5HighBITMAPWiFiEnh");
        v267[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v131);
        v266[7] = CFSTR("MWSType4BlankingU6BITMAPWiFiEnh");
        v267[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v140);
        v266[8] = CFSTR("MWSType4BlankingU7BITMAPWiFiEnh");
        v267[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v149);
        v266[9] = CFSTR("MWSType4BlankingU8BITMAPWiFiEnh");
        v267[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v157);
        v162 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v267, v266, 10);
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("Type4Blanking_WiFiEnh_IOVAR for SUB1: setting mwsType4BlankingBitmapWiFiEnh %@"), v162);
        objc_msgSend(v167[7], "sendMessage:withValue:", CFSTR("MWS_SCAN_FREQ_Enh"), v162);
        if (v189)
        {
          v264[0] = CFSTR("MWS_SCAN_FREQ_INDEX_Enh");
          v265[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v169);
          v264[1] = CFSTR("MWSType4Blanking5GBITMAPLOWWiFiEnh");
          v265[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v181);
          v264[2] = CFSTR("MWSType4Blanking5GBITMAPMIDWiFiEnh");
          v265[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v179);
          v264[3] = CFSTR("MWSType4Blanking5GBITMAPHIWiFiEnh");
          v265[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v177);
          v163 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v265, v264, 4);
          +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("Type4Blanking_Mode_WiFiEnh_IOVAR for SUB1: setting mwsType4BlankingBitmapWiFiEnhMode %@"), v163);
          objc_msgSend(v167[7], "sendMessage:withValue:", CFSTR("MWS_SCAN_FREQ_MODE_Enh"), v163);
        }
      }
      v87 = v169 + 1;
      v86 = v171 + 1;
    }
    while (v171 + 1 != v166);
  }

}

id sub_1000DBB9C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  unint64_t v8;
  char v9;
  unsigned __int16 v10;
  uint64_t v11;
  void *v12;
  char v13;
  unsigned int v14;
  int v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  unsigned __int16 v20;
  id v21;
  id v22;
  uint64_t v23;
  void *j;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  void *k;
  void *v30;
  id v31;
  id v32;
  char v33;
  uint64_t v34;
  void *v35;
  char v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  void *m;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  void *n;
  void *v49;
  id v50;
  id v51;
  char v52;
  __int16 v53;
  uint64_t v54;
  void *v55;
  char v56;
  unsigned int v57;
  int v58;
  id v59;
  id v60;
  int v61;
  uint64_t v62;
  void *v63;
  unsigned int v64;
  int v65;
  int v66;
  unsigned __int16 v67;
  uint64_t v68;
  void *v69;
  unsigned int v70;
  int v71;
  NSDictionary *v72;
  id v74;
  id v75;
  int v76;
  uint64_t v77;
  void *v78;
  unsigned int v79;
  int v80;
  id v81;
  id v82;
  int v83;
  uint64_t v84;
  void *v85;
  unsigned int v86;
  int v87;
  id v88;
  id v89;
  int v90;
  uint64_t v91;
  void *v92;
  unsigned int v93;
  int v94;
  int v95;
  uint64_t v96;
  void *v97;
  unsigned int v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  _QWORD v163[10];
  _QWORD v164[10];
  _BYTE v165[128];
  _BYTE v166[128];
  _BYTE v167[128];
  _BYTE v168[128];
  _BYTE v169[128];
  _BYTE v170[128];
  _BYTE v171[128];
  _BYTE v172[128];
  _BYTE v173[128];
  _BYTE v174[128];
  _BYTE v175[128];
  _BYTE v176[128];
  _BYTE v177[128];
  _BYTE v178[128];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("WiFiS: setting setting condition id %d for the following range of channels %d %d in band 2g: %d 5g: %d 6g: %d"), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 52), *(unsigned __int8 *)(a1 + 53), *(unsigned __int8 *)(a1 + 54));
  v2 = +[NSMutableArray array](NSMutableArray, "array");
  if (*(_BYTE *)(a1 + 52))
  {
    v161 = 0u;
    v162 = 0u;
    v159 = 0u;
    v160 = 0u;
    v3 = objc_msgSend(&off_1002429A8, "countByEnumeratingWithState:objects:count:", &v159, v178, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v160;
      do
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v160 != v5)
            objc_enumerationMutation(&off_1002429A8);
          v7 = *(void **)(*((_QWORD *)&v159 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(v7, "unsignedIntValue") >= *(_DWORD *)(a1 + 44)
            && objc_msgSend(v7, "unsignedIntValue") <= *(_DWORD *)(a1 + 48))
          {
            objc_msgSend(v2, "addObject:", v7);
          }
        }
        v4 = objc_msgSend(&off_1002429A8, "countByEnumeratingWithState:objects:count:", &v159, v178, 16);
      }
      while (v4);
    }
    v157 = 0u;
    v158 = 0u;
    v155 = 0u;
    v156 = 0u;
    v8 = (unint64_t)objc_msgSend(&off_1002429C0, "countByEnumeratingWithState:objects:count:", &v155, v177, 16);
    if (v8)
    {
      v9 = 0;
      v10 = 0;
      v11 = *(_QWORD *)v156;
      do
      {
        v12 = 0;
        v13 = v9;
        do
        {
          if (*(_QWORD *)v156 != v11)
            objc_enumerationMutation(&off_1002429C0);
          v14 = objc_msgSend(v2, "containsObject:", *(_QWORD *)(*((_QWORD *)&v155 + 1) + 8 * (_QWORD)v12));
          v15 = 1 << v13;
          if (!v14)
            LOWORD(v15) = 0;
          v10 |= v15;
          ++v13;
          v12 = (char *)v12 + 1;
        }
        while ((void *)v8 != v12);
        v9 += v8;
        v8 = (unint64_t)objc_msgSend(&off_1002429C0, "countByEnumeratingWithState:objects:count:", &v155, v177, 16);
      }
      while (v8);
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v100 = 0;
      v19 = 0;
      v20 = 0;
      v8 = v10;
LABEL_102:
      v39 = 0;
      goto LABEL_103;
    }
    v39 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    LOWORD(v100) = 0;
    goto LABEL_51;
  }
  if (*(_BYTE *)(a1 + 53))
  {
    v153 = 0u;
    v154 = 0u;
    v151 = 0u;
    v152 = 0u;
    v21 = objc_msgSend(&off_100242900, "countByEnumeratingWithState:objects:count:", &v151, v176, 16);
    if (v21)
    {
      v22 = v21;
      v23 = *(_QWORD *)v152;
      do
      {
        for (j = 0; j != v22; j = (char *)j + 1)
        {
          if (*(_QWORD *)v152 != v23)
            objc_enumerationMutation(&off_100242900);
          v25 = *(void **)(*((_QWORD *)&v151 + 1) + 8 * (_QWORD)j);
          v147 = 0u;
          v148 = 0u;
          v149 = 0u;
          v150 = 0u;
          v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v147, v175, 16);
          if (v26)
          {
            v27 = v26;
            v28 = *(_QWORD *)v148;
            do
            {
              for (k = 0; k != v27; k = (char *)k + 1)
              {
                if (*(_QWORD *)v148 != v28)
                  objc_enumerationMutation(v25);
                v30 = *(void **)(*((_QWORD *)&v147 + 1) + 8 * (_QWORD)k);
                if (objc_msgSend(v30, "unsignedIntValue") >= *(_DWORD *)(a1 + 44)
                  && objc_msgSend(v30, "unsignedIntValue") <= *(_DWORD *)(a1 + 48))
                {
                  objc_msgSend(v2, "addObject:", v30);
                }
              }
              v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v147, v175, 16);
            }
            while (v27);
          }
        }
        v22 = objc_msgSend(&off_100242900, "countByEnumeratingWithState:objects:count:", &v151, v176, 16);
      }
      while (v22);
    }
    v145 = 0u;
    v146 = 0u;
    v143 = 0u;
    v144 = 0u;
    v31 = objc_msgSend(&off_1002429D8, "countByEnumeratingWithState:objects:count:", &v143, v174, 16);
    if (v31)
    {
      v32 = v31;
      v33 = 0;
      v20 = 0;
      v34 = *(_QWORD *)v144;
      do
      {
        v35 = 0;
        v36 = v33;
        do
        {
          if (*(_QWORD *)v144 != v34)
            objc_enumerationMutation(&off_1002429D8);
          v37 = objc_msgSend(v2, "containsObject:", *(_QWORD *)(*((_QWORD *)&v143 + 1) + 8 * (_QWORD)v35));
          v38 = 1 << v36;
          if (!v37)
            LOWORD(v38) = 0;
          v20 |= v38;
          ++v36;
          v35 = (char *)v35 + 1;
        }
        while (v32 != v35);
        v33 += (char)v32;
        v32 = objc_msgSend(&off_1002429D8, "countByEnumeratingWithState:objects:count:", &v143, v174, 16);
      }
      while (v32);
    }
    else
    {
      v20 = 0;
    }
    v141 = 0u;
    v142 = 0u;
    v139 = 0u;
    v140 = 0u;
    v59 = objc_msgSend(&off_1002429F0, "countByEnumeratingWithState:objects:count:", &v139, v173, 16);
    if (v59)
    {
      v60 = v59;
      v61 = 0;
      v19 = 0;
      v62 = *(_QWORD *)v140;
      do
      {
        v63 = 0;
        v101 = v61;
        do
        {
          if (*(_QWORD *)v140 != v62)
            objc_enumerationMutation(&off_1002429F0);
          v64 = objc_msgSend(v2, "containsObject:", *(_QWORD *)(*((_QWORD *)&v139 + 1) + 8 * (_QWORD)v63));
          v65 = 1 << v61;
          if (!v64)
            LOWORD(v65) = 0;
          v19 |= v65;
          LOBYTE(v61) = v61 + 1;
          v63 = (char *)v63 + 1;
        }
        while (v60 != v63);
        v61 = v101 + (_DWORD)v60;
        v60 = objc_msgSend(&off_1002429F0, "countByEnumeratingWithState:objects:count:", &v139, v173, 16);
      }
      while (v60);
    }
    else
    {
      v19 = 0;
    }
    v137 = 0u;
    v138 = 0u;
    v135 = 0u;
    v136 = 0u;
    v8 = (unint64_t)objc_msgSend(&off_100242A08, "countByEnumeratingWithState:objects:count:", &v135, v172, 16);
    if (!v8)
    {
      v39 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v100 = 0;
      goto LABEL_103;
    }
    v66 = 0;
    v67 = 0;
    v68 = *(_QWORD *)v136;
    do
    {
      v69 = 0;
      v102 = v66;
      do
      {
        if (*(_QWORD *)v136 != v68)
          objc_enumerationMutation(&off_100242A08);
        v70 = objc_msgSend(v2, "containsObject:", *(_QWORD *)(*((_QWORD *)&v135 + 1) + 8 * (_QWORD)v69));
        v71 = 1 << v66;
        if (!v70)
          LOWORD(v71) = 0;
        v67 |= v71;
        LOBYTE(v66) = v66 + 1;
        v69 = (char *)v69 + 1;
      }
      while ((void *)v8 != v69);
      v66 = v102 + v8;
      v8 = (unint64_t)objc_msgSend(&off_100242A08, "countByEnumeratingWithState:objects:count:", &v135, v172, 16);
    }
    while (v8);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    LOWORD(v100) = 0;
    HIDWORD(v100) = v67;
    goto LABEL_102;
  }
  if (!*(_BYTE *)(a1 + 54))
  {
    v39 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v100 = 0;
    v19 = 0;
    v20 = 0;
    v8 = 0;
    goto LABEL_103;
  }
  v133 = 0u;
  v134 = 0u;
  v131 = 0u;
  v132 = 0u;
  v40 = objc_msgSend(&off_100242990, "countByEnumeratingWithState:objects:count:", &v131, v171, 16);
  if (v40)
  {
    v41 = v40;
    v42 = *(_QWORD *)v132;
    do
    {
      for (m = 0; m != v41; m = (char *)m + 1)
      {
        if (*(_QWORD *)v132 != v42)
          objc_enumerationMutation(&off_100242990);
        v44 = *(void **)(*((_QWORD *)&v131 + 1) + 8 * (_QWORD)m);
        v127 = 0u;
        v128 = 0u;
        v129 = 0u;
        v130 = 0u;
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v127, v170, 16);
        if (v45)
        {
          v46 = v45;
          v47 = *(_QWORD *)v128;
          do
          {
            for (n = 0; n != v46; n = (char *)n + 1)
            {
              if (*(_QWORD *)v128 != v47)
                objc_enumerationMutation(v44);
              v49 = *(void **)(*((_QWORD *)&v127 + 1) + 8 * (_QWORD)n);
              if (objc_msgSend(v49, "unsignedIntValue") >= *(_DWORD *)(a1 + 44)
                && objc_msgSend(v49, "unsignedIntValue") <= *(_DWORD *)(a1 + 48))
              {
                objc_msgSend(v2, "addObject:", v49);
              }
            }
            v46 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v127, v170, 16);
          }
          while (v46);
        }
      }
      v41 = objc_msgSend(&off_100242990, "countByEnumeratingWithState:objects:count:", &v131, v171, 16);
    }
    while (v41);
  }
  v125 = 0u;
  v126 = 0u;
  v123 = 0u;
  v124 = 0u;
  v50 = objc_msgSend(&off_100242A20, "countByEnumeratingWithState:objects:count:", &v123, v169, 16);
  if (v50)
  {
    v51 = v50;
    v52 = 0;
    v53 = 0;
    v54 = *(_QWORD *)v124;
    do
    {
      v55 = 0;
      v56 = v52;
      do
      {
        if (*(_QWORD *)v124 != v54)
          objc_enumerationMutation(&off_100242A20);
        v57 = objc_msgSend(v2, "containsObject:", *(_QWORD *)(*((_QWORD *)&v123 + 1) + 8 * (_QWORD)v55));
        v58 = 1 << v56;
        if (!v57)
          LOWORD(v58) = 0;
        v53 |= v58;
        ++v56;
        v55 = (char *)v55 + 1;
      }
      while (v51 != v55);
      v52 += (char)v51;
      v51 = objc_msgSend(&off_100242A20, "countByEnumeratingWithState:objects:count:", &v123, v169, 16);
    }
    while (v51);
  }
  else
  {
    v53 = 0;
  }
  v121 = 0u;
  v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  v74 = objc_msgSend(&off_100242A38, "countByEnumeratingWithState:objects:count:", &v119, v168, 16);
  if (v74)
  {
    v75 = v74;
    v76 = 0;
    v18 = 0;
    v77 = *(_QWORD *)v120;
    do
    {
      v78 = 0;
      v103 = v76;
      do
      {
        if (*(_QWORD *)v120 != v77)
          objc_enumerationMutation(&off_100242A38);
        v79 = objc_msgSend(v2, "containsObject:", *(_QWORD *)(*((_QWORD *)&v119 + 1) + 8 * (_QWORD)v78));
        v80 = 1 << v76;
        if (!v79)
          LOWORD(v80) = 0;
        v18 |= v80;
        LOBYTE(v76) = v76 + 1;
        v78 = (char *)v78 + 1;
      }
      while (v75 != v78);
      v76 = v103 + (_DWORD)v75;
      v75 = objc_msgSend(&off_100242A38, "countByEnumeratingWithState:objects:count:", &v119, v168, 16);
    }
    while (v75);
  }
  else
  {
    v18 = 0;
  }
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  v81 = objc_msgSend(&off_100242A50, "countByEnumeratingWithState:objects:count:", &v115, v167, 16);
  if (v81)
  {
    v82 = v81;
    v83 = 0;
    v17 = 0;
    v84 = *(_QWORD *)v116;
    do
    {
      v85 = 0;
      v104 = v83;
      do
      {
        if (*(_QWORD *)v116 != v84)
          objc_enumerationMutation(&off_100242A50);
        v86 = objc_msgSend(v2, "containsObject:", *(_QWORD *)(*((_QWORD *)&v115 + 1) + 8 * (_QWORD)v85));
        v87 = 1 << v83;
        if (!v86)
          LOWORD(v87) = 0;
        v17 |= v87;
        LOBYTE(v83) = v83 + 1;
        v85 = (char *)v85 + 1;
      }
      while (v82 != v85);
      v83 = v104 + (_DWORD)v82;
      v82 = objc_msgSend(&off_100242A50, "countByEnumeratingWithState:objects:count:", &v115, v167, 16);
    }
    while (v82);
  }
  else
  {
    v17 = 0;
  }
  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v88 = objc_msgSend(&off_100242A68, "countByEnumeratingWithState:objects:count:", &v111, v166, 16);
  if (v88)
  {
    v89 = v88;
    v90 = 0;
    v16 = 0;
    v91 = *(_QWORD *)v112;
    do
    {
      v92 = 0;
      v105 = v90;
      do
      {
        if (*(_QWORD *)v112 != v91)
          objc_enumerationMutation(&off_100242A68);
        v93 = objc_msgSend(v2, "containsObject:", *(_QWORD *)(*((_QWORD *)&v111 + 1) + 8 * (_QWORD)v92));
        v94 = 1 << v90;
        if (!v93)
          LOWORD(v94) = 0;
        v16 |= v94;
        LOBYTE(v90) = v90 + 1;
        v92 = (char *)v92 + 1;
      }
      while (v89 != v92);
      v90 = v105 + (_DWORD)v89;
      v89 = objc_msgSend(&off_100242A68, "countByEnumeratingWithState:objects:count:", &v111, v166, 16);
    }
    while (v89);
  }
  else
  {
    v16 = 0;
  }
  LOWORD(v100) = v53;
  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  v108 = 0u;
  v8 = (unint64_t)objc_msgSend(&off_100242A80, "countByEnumeratingWithState:objects:count:", &v107, v165, 16);
  if (!v8)
  {
    v39 = 0;
LABEL_51:
    HIDWORD(v100) = 0;
    v19 = 0;
    v20 = 0;
    goto LABEL_103;
  }
  v95 = 0;
  LOWORD(v39) = 0;
  v96 = *(_QWORD *)v108;
  do
  {
    v97 = 0;
    v106 = v95;
    do
    {
      if (*(_QWORD *)v108 != v96)
        objc_enumerationMutation(&off_100242A80);
      v98 = objc_msgSend(v2, "containsObject:", *(_QWORD *)(*((_QWORD *)&v107 + 1) + 8 * (_QWORD)v97));
      v99 = 1 << v95;
      if (!v98)
        LOWORD(v99) = 0;
      LOWORD(v39) = v99 | v39;
      LOBYTE(v95) = v95 + 1;
      v97 = (char *)v97 + 1;
    }
    while ((void *)v8 != v97);
    v95 = v106 + v8;
    v8 = (unint64_t)objc_msgSend(&off_100242A80, "countByEnumeratingWithState:objects:count:", &v107, v165, 16);
  }
  while (v8);
  HIDWORD(v100) = 0;
  v19 = 0;
  v20 = 0;
  v39 = (unsigned __int16)v39;
LABEL_103:
  v163[0] = CFSTR("MWS_CONDITION_ID_Value");
  v164[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40));
  v163[1] = CFSTR("MWS2GBITMAPWiFiEnh");
  v164[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v8);
  v163[2] = CFSTR("MWS5GBITMAPLOWWiFiEnh");
  v164[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v20);
  v163[3] = CFSTR("MWS5GBITMAPMIDWiFiEnh");
  v164[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v19);
  v163[4] = CFSTR("MWS5GBITMAPHIWiFiEnh");
  v164[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", HIDWORD(v100));
  v163[5] = CFSTR("MWSU5LowBITMAPWiFiEnh");
  v164[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v100);
  v163[6] = CFSTR("MWSU5HighBITMAPWiFiEnh");
  v164[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v18);
  v163[7] = CFSTR("MWSU6BITMAPWiFiEnh");
  v164[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v17);
  v163[8] = CFSTR("MWSU7BITMAPWiFiEnh");
  v164[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v16);
  v163[9] = CFSTR("MWSU8BITMAPWiFiEnh");
  v164[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v39);
  v72 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v164, v163, 10);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("Condtionid IOVAR: setting Condtionid %@"), v72);
  return objc_msgSend(*(id *)(a1 + 32), "sendMessage:withValue:", CFSTR("MWS_CONDITION_ID_BITMAP_Enh"), v72);
}

id sub_1000DC8EC(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  id v5;
  int v6;
  int v7;
  int v8;
  id v9;
  int v10;
  int v11;
  int v12;
  id v13;
  int v14;
  int v15;
  int v16;
  id v17;
  int v18;
  int v19;
  int v20;
  id v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  id v27;
  int v28;
  int v29;
  id v30;
  int v31;
  int v32;
  id v33;
  int v34;
  int v35;
  int v36;
  id v37;
  uint64_t v38;
  id v39;
  uint64_t v41;
  unsigned int v42;
  unsigned __int16 v43;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: rFEM LPM mode setting for bands 2g: %d 5g: %d 6g: %d"), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41), *(unsigned __int8 *)(a1 + 42));
  if (*(_BYTE *)(a1 + 40) && objc_msgSend(&off_100242A98, "count"))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v3 |= 1 << v2;
      v4 = v2 + 1;
      v5 = objc_msgSend(&off_100242A98, "count");
      v2 = v4;
    }
    while ((unint64_t)v5 > (unsigned __int16)v4);
  }
  else
  {
    LOWORD(v3) = 0;
  }
  if (!*(_BYTE *)(a1 + 41))
  {
    LOWORD(v7) = 0;
    LOWORD(v10) = 0;
LABEL_23:
    v42 = 0;
    goto LABEL_24;
  }
  if (objc_msgSend(&off_100242AB0, "count"))
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v7 |= 1 << v6;
      v8 = v6 + 1;
      v9 = objc_msgSend(&off_100242AB0, "count");
      v6 = v8;
    }
    while ((unint64_t)v9 > (unsigned __int16)v8);
  }
  else
  {
    LOWORD(v7) = 0;
  }
  if (objc_msgSend(&off_100242AC8, "count"))
  {
    v11 = 0;
    v10 = 0;
    do
    {
      v10 |= 1 << v11;
      v12 = v11 + 1;
      v13 = objc_msgSend(&off_100242AC8, "count");
      v11 = v12;
    }
    while ((unint64_t)v13 > (unsigned __int16)v12);
  }
  else
  {
    LOWORD(v10) = 0;
  }
  if (!objc_msgSend(&off_100242AE0, "count"))
    goto LABEL_23;
  v14 = 0;
  v15 = 0;
  do
  {
    v15 |= 1 << v14;
    v16 = v14 + 1;
    v17 = objc_msgSend(&off_100242AE0, "count");
    v14 = v16;
  }
  while ((unint64_t)v17 > (unsigned __int16)v16);
  v42 = (unsigned __int16)v15;
LABEL_24:
  v43 = v3;
  if (!*(_BYTE *)(a1 + 42))
  {
    LOWORD(v19) = 0;
    LOWORD(v22) = 0;
    LOWORD(v23) = 0;
    LOWORD(v24) = 0;
LABEL_50:
    v38 = 0;
    goto LABEL_51;
  }
  if (objc_msgSend(&off_100242AF8, "count"))
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v19 |= 1 << v18;
      v20 = v18 + 1;
      v21 = objc_msgSend(&off_100242AF8, "count");
      v18 = v20;
    }
    while ((unint64_t)v21 > (unsigned __int16)v20);
  }
  else
  {
    LOWORD(v19) = 0;
  }
  if (objc_msgSend(&off_100242B10, "count"))
  {
    v25 = 0;
    v22 = 0;
    do
    {
      v22 |= 1 << v25;
      v26 = v25 + 1;
      v27 = objc_msgSend(&off_100242B10, "count");
      v25 = v26;
    }
    while ((unint64_t)v27 > (unsigned __int16)v26);
  }
  else
  {
    LOWORD(v22) = 0;
  }
  if (objc_msgSend(&off_100242B28, "count"))
  {
    v28 = 0;
    v23 = 0;
    do
    {
      v23 |= 1 << v28;
      v29 = v28 + 1;
      v30 = objc_msgSend(&off_100242B28, "count");
      v28 = v29;
    }
    while ((unint64_t)v30 > (unsigned __int16)v29);
  }
  else
  {
    LOWORD(v23) = 0;
  }
  if (objc_msgSend(&off_100242B40, "count"))
  {
    v31 = 0;
    v24 = 0;
    do
    {
      v24 |= 1 << v31;
      v32 = v31 + 1;
      v33 = objc_msgSend(&off_100242B40, "count");
      v31 = v32;
    }
    while ((unint64_t)v33 > (unsigned __int16)v32);
  }
  else
  {
    LOWORD(v24) = 0;
  }
  if (!objc_msgSend(&off_100242B58, "count"))
    goto LABEL_50;
  v41 = a1;
  v34 = 0;
  v35 = 0;
  do
  {
    v35 |= 1 << v34;
    v36 = v34 + 1;
    v37 = objc_msgSend(&off_100242B58, "count");
    v34 = v36;
  }
  while ((unint64_t)v37 > (unsigned __int16)v36);
  v38 = (unsigned __int16)v35;
  a1 = v41;
LABEL_51:
  v39 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  if (*(_BYTE *)(a1 + 40))
    objc_msgSend(v39, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v43), CFSTR("MWS2GBITMAPWiFiEnh"));
  if (*(_BYTE *)(a1 + 41))
  {
    objc_msgSend(v39, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v7), CFSTR("MWSU5LowBITMAPWiFiEnh"));
    objc_msgSend(v39, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v10), CFSTR("MWS5GBITMAPMIDWiFiEnh"));
    objc_msgSend(v39, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v42), CFSTR("MWS5GBITMAPHIWiFiEnh"));
  }
  if (*(_BYTE *)(a1 + 42))
  {
    objc_msgSend(v39, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v19), CFSTR("MWSU5LowBITMAPWiFiEnh"));
    objc_msgSend(v39, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v22), CFSTR("MWSU5HighBITMAPWiFiEnh"));
    objc_msgSend(v39, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v23), CFSTR("MWSU6BITMAPWiFiEnh"));
    objc_msgSend(v39, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v24), CFSTR("MWSU7BITMAPWiFiEnh"));
    objc_msgSend(v39, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v38), CFSTR("MWSU8BITMAPWiFiEnh"));
  }
  if (*(_BYTE *)(a1 + 43))
  {
    objc_msgSend(v39, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v43), CFSTR("MWS2GBITMAPWiFiEnh"));
    objc_msgSend(v39, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v7), CFSTR("MWSU5LowBITMAPWiFiEnh"));
    objc_msgSend(v39, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v10), CFSTR("MWS5GBITMAPMIDWiFiEnh"));
    objc_msgSend(v39, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v42), CFSTR("MWS5GBITMAPHIWiFiEnh"));
    objc_msgSend(v39, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v19), CFSTR("MWSU5LowBITMAPWiFiEnh"));
    objc_msgSend(v39, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v22), CFSTR("MWSU5HighBITMAPWiFiEnh"));
    objc_msgSend(v39, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v23), CFSTR("MWSU6BITMAPWiFiEnh"));
    objc_msgSend(v39, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v24), CFSTR("MWSU7BITMAPWiFiEnh"));
    objc_msgSend(v39, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v38), CFSTR("MWSU8BITMAPWiFiEnh"));
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("WiFiS: setting enabled channels for rFEM mode %@"), v39);
  return objc_msgSend(*(id *)(a1 + 32), "sendMessage:withValue:", CFSTR("MWS_RFEM_CONFIG_Enh"), v39);
}

id sub_1000DCF64(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  id v4;
  int v5;
  int v6;
  int v7;
  id v8;
  int v9;
  int v10;
  int v11;
  id v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  id v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  id v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  id v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  id v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  id v47;
  uint64_t v48;
  NSDictionary *v49;
  unsigned int v51;
  _QWORD v53[9];
  _QWORD v54[9];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: WIFI Assoc Protection setting for all bands"));
  v1 = 0;
  if (objc_msgSend(&off_100242B70, "count"))
  {
    v2 = 0;
    do
    {
      v1 |= 1 << v2;
      v3 = v2 + 1;
      v4 = objc_msgSend(&off_100242B70, "count");
      v2 = v3;
    }
    while ((unint64_t)v4 > (unsigned __int16)v3);
  }
  if (objc_msgSend(&off_100242B88, "count"))
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v6 |= 1 << v5;
      v7 = v5 + 1;
      v8 = objc_msgSend(&off_100242B88, "count");
      v5 = v7;
    }
    while ((unint64_t)v8 > (unsigned __int16)v7);
    v51 = (unsigned __int16)v6;
  }
  else
  {
    v51 = 0;
  }
  if (objc_msgSend(&off_100242BA0, "count"))
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v10 |= 1 << v9;
      v11 = v9 + 1;
      v12 = objc_msgSend(&off_100242BA0, "count");
      v9 = v11;
    }
    while ((unint64_t)v12 > (unsigned __int16)v11);
    v13 = (unsigned __int16)v10;
  }
  else
  {
    v13 = 0;
  }
  if (objc_msgSend(&off_100242BB8, "count"))
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v15 |= 1 << v14;
      v16 = v14 + 1;
      v17 = objc_msgSend(&off_100242BB8, "count");
      v14 = v16;
    }
    while ((unint64_t)v17 > (unsigned __int16)v16);
    v18 = (unsigned __int16)v15;
  }
  else
  {
    v18 = 0;
  }
  if (objc_msgSend(&off_100242BD0, "count"))
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v20 |= 1 << v19;
      v21 = v19 + 1;
      v22 = objc_msgSend(&off_100242BD0, "count");
      v19 = v21;
    }
    while ((unint64_t)v22 > (unsigned __int16)v21);
    v23 = (unsigned __int16)v20;
  }
  else
  {
    v23 = 0;
  }
  if (objc_msgSend(&off_100242BE8, "count"))
  {
    v24 = 0;
    v25 = 0;
    do
    {
      v25 |= 1 << v24;
      v26 = v24 + 1;
      v27 = objc_msgSend(&off_100242BE8, "count");
      v24 = v26;
    }
    while ((unint64_t)v27 > (unsigned __int16)v26);
    v28 = (unsigned __int16)v25;
  }
  else
  {
    v28 = 0;
  }
  if (objc_msgSend(&off_100242C00, "count"))
  {
    v29 = 0;
    v30 = 0;
    do
    {
      v30 |= 1 << v29;
      v31 = v29 + 1;
      v32 = objc_msgSend(&off_100242C00, "count");
      v29 = v31;
    }
    while ((unint64_t)v32 > (unsigned __int16)v31);
    v33 = (unsigned __int16)v30;
  }
  else
  {
    v33 = 0;
  }
  if (objc_msgSend(&off_100242C18, "count"))
  {
    v34 = 0;
    v35 = 0;
    do
    {
      v35 |= 1 << v34;
      v36 = v34 + 1;
      v37 = objc_msgSend(&off_100242C18, "count");
      v34 = v36;
    }
    while ((unint64_t)v37 > (unsigned __int16)v36);
    v38 = (unsigned __int16)v35;
  }
  else
  {
    v38 = 0;
  }
  if (objc_msgSend(&off_100242C30, "count"))
  {
    v39 = v33;
    v40 = v28;
    v41 = v23;
    v42 = v18;
    v43 = v13;
    v44 = 0;
    v45 = 0;
    do
    {
      v45 |= 1 << v44;
      v46 = v44 + 1;
      v47 = objc_msgSend(&off_100242C30, "count");
      v44 = v46;
    }
    while ((unint64_t)v47 > (unsigned __int16)v46);
    v48 = (unsigned __int16)v45;
    v13 = v43;
    v18 = v42;
    v23 = v41;
    v28 = v40;
    v33 = v39;
    v38 = v38;
  }
  else
  {
    v48 = 0;
  }
  v53[0] = CFSTR("MWS2GBITMAPWiFiEnh");
  v54[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (unsigned __int16)v1);
  v53[1] = CFSTR("MWS5GBITMAPLOWWiFiEnh");
  v54[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v51);
  v53[2] = CFSTR("MWS5GBITMAPMIDWiFiEnh");
  v54[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v13);
  v53[3] = CFSTR("MWS5GBITMAPHIWiFiEnh");
  v54[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v18);
  v53[4] = CFSTR("MWSU5LowBITMAPWiFiEnh");
  v54[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v23);
  v53[5] = CFSTR("MWSU5HighBITMAPWiFiEnh");
  v54[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v28);
  v53[6] = CFSTR("MWSU6BITMAPWiFiEnh");
  v54[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v33);
  v53[7] = CFSTR("MWSU7BITMAPWiFiEnh");
  v54[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v38);
  v53[8] = CFSTR("MWSU8BITMAPWiFiEnh");
  v54[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v48);
  v49 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v54, v53, 9);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("WiFiS: setting enabled channels for Assoc Protection mode %@"), v49);
  return objc_msgSend(*(id *)(a1 + 32), "sendMessage:withValue:", CFSTR("MWS_ASSOC_PROTECTION_BITMAP_Enh"), v49);
}

void sub_1000DD4A0(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: setting max duration for cellular scan protection %@"), *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_SET_TYPE4_MAX_DURATION"), *(_QWORD *)(a1 + 32));

}

void sub_1000DD564(uint64_t a1)
{
  const __CFString *v2;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: setting LTE-WiFi TDD Mode Channels %@"), *(_QWORD *)(a1 + 32));
  if (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "activeCoexFeatures"), "containsObject:", CFSTR("EnhancedConnectivityHwSupport")))v2 = CFSTR("MWS_TIME_SHARING_Enh");
  else
    v2 = CFSTR("MWS_SET_LTE_TDD_MODE");
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", v2, *(_QWORD *)(a1 + 32));

}

void sub_1000DD65C(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: setting WiFi Rx protect mode %@"), *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_WLANRX_PROT"), *(_QWORD *)(a1 + 32));

}

void sub_1000DD73C(id *a1)
{
  _QWORD v2[2];
  __int128 v3;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: setting WiFi Rx protect auto-mode weight %@ thresh %@"), a1[4], a1[5]);
  v2[0] = CFSTR("MWS_AUTOPROT_PARAMS_WEIGHT");
  v2[1] = CFSTR("MWS_AUTOPROT_PARAMS_THRESH");
  v3 = *((_OWORD *)a1 + 2);
  objc_msgSend(a1[6], "sendMessage:withValue:", CFSTR("MWS_AUTOPROT_PARAMS"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v3, v2, 2));

}

void sub_1000DD874(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: setting WiFi Tx indication over WCI2 %@"), *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_WCI2_TXIND"), *(_QWORD *)(a1 + 32));

}

void sub_1000DD938(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: setting WiFi scan and join Rx protect duration %@ "), v1);
    objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_SCANJOIN_PROT"), *(_QWORD *)(a1 + 32));
    v3 = *(void **)(a1 + 32);
  }
  else
  {
    v3 = 0;
  }

}

void sub_1000DDA0C(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: setting Cellular Frequency Config %@"), *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_CELLULAR_FREQ_CONFIG"), *(_QWORD *)(a1 + 32));

}

void sub_1000DDAD4(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: Enabling 2g Wifi Envelope Indication %@"), *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_WCI2_TX_ENVELOPE_IND_2G"), *(_QWORD *)(a1 + 32));

}

void sub_1000DDB9C(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: 2g Wifi Envelope Indication Timer %@"), *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_TX_ENVELOPE_IDLE_TIMER"), *(_QWORD *)(a1 + 32));

}

void sub_1000DDC60(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: Enabling Agc Coex  Wifi %@"), *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_COEX_CONFIG"), *(_QWORD *)(a1 + 32));

}

id sub_1000DDD10(uint64_t a1)
{
  const __CFString *v2;

  if (objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "activeCoexFeatures"), "containsObject:", CFSTR("BB20LAAType5IndDisabled")))v2 = CFSTR("DLDebug_ WiFiS: Extended Type0 MSG Indication for 5GHz WiFi Tx is  for LAA Coex Config for New BB20 Platforms.");
  else
    v2 = CFSTR("WiFiS: LAA Coex Config -- enabling TX Indication");
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, v2);
  return objc_msgSend(*(id *)(a1 + 32), "sendMessage:withValue:", CFSTR("MWS_WCI2_TXIND_5G"), &off_100230F48);
}

void sub_1000DDDF8(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: LAA Coex Config setting WiFi Tx duration thresh %@"), *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_WCI2_TXDUR_THRESH"), *(_QWORD *)(a1 + 32));

}

void sub_1000DDEC0(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: LAA Coex Config setting WiFi scan throttle mask %@"), *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_ACTIVE_SCAN_THROTTLE"), *(_QWORD *)(a1 + 32));

}

void sub_1000DDF88(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: LAA Coex Config setting WiFi active dwell time %@"), *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_ACTIVE_DWELL_TIME"), *(_QWORD *)(a1 + 32));

}

id sub_1000DE1EC(uint64_t a1)
{
  _UNKNOWN **v2;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: Update WiFi/BT ULOFDMA disable (%d)"), *(unsigned __int8 *)(a1 + 40));
  if (*(_BYTE *)(a1 + 40))
    v2 = &off_100230F48;
  else
    v2 = &off_100230F30;
  return objc_msgSend(*(id *)(a1 + 32), "sendMessage:withValue:", CFSTR("MWS_BT_COEX_ULOFDMA_DISABLE"), v2);
}

id sub_1000DE2B4(uint64_t a1)
{
  _UNKNOWN **v2;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: Update WiFi/RCU1 ULOFDMA disable (%d)"), *(unsigned __int8 *)(a1 + 40));
  if (*(_BYTE *)(a1 + 40))
    v2 = &off_100230F48;
  else
    v2 = &off_100230F30;
  return objc_msgSend(*(id *)(a1 + 32), "sendMessage:withValue:", CFSTR("MWS_RC1_COEX_ULOFDMA_DISABLE"), v2);
}

id sub_1000DE37C(uint64_t a1)
{
  _UNKNOWN **v2;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: Update WiFi/RCU2 ULOFDMA disable (%d)"), *(unsigned __int8 *)(a1 + 40));
  if (*(_BYTE *)(a1 + 40))
    v2 = &off_100230F48;
  else
    v2 = &off_100230F30;
  return objc_msgSend(*(id *)(a1 + 32), "sendMessage:withValue:", CFSTR("MWS_RC2_COEX_ULOFDMA_DISABLE"), v2);
}

void sub_1000DE488(uint64_t a1)
{
  _QWORD v2[4];
  _QWORD v3[2];
  __int128 v4;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: Update WiFi RCU1 mode and chan"));
  v2[0] = CFSTR("MWS_RC1_COEX_MODE_CHANGED");
  v3[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(a1 + 56));
  v2[1] = CFSTR("MWS_RC1_COEX_CHANNEL_CHANGED");
  v3[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(a1 + 57));
  v2[2] = CFSTR("MWS_RC1_COEX_MODE");
  v2[3] = CFSTR("MWS_RC1_COEX_CHANNEL");
  v4 = *(_OWORD *)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 48), "sendMessage:withValue:", CFSTR("MWS_RC1_COEX_PARAM_INFO"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 4));

}

void sub_1000DE744(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: Set WiFi RCU2 Coex mode (%@)"), *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_RC2_COEX_MODE"), *(_QWORD *)(a1 + 32));

}

void sub_1000DE80C(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: Set WiFi RCU2 PM Protection mode (%@)"), *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_RC2_PM_PROTECTION_MODE"), *(_QWORD *)(a1 + 32));

}

void sub_1000DE8D4(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: Set WiFi RCU2 params %@"), *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_RC2_WIFI_TIMING_PARAM_INFO"), +[NSMutableDictionary dictionaryWithObjects:forKeys:](NSMutableDictionary, "dictionaryWithObjects:forKeys:", *(_QWORD *)(a1 + 32), +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", CFSTR("MWS_RC2_GPIO_PROCESSING_DELAY"), CFSTR("MWS_RC2_COEX_GRANT_DURATION"), CFSTR("MWS_RC2_COEX_GRANT_INTERVAL"), 0)));

}

id sub_1000DE9CC(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: Update WiFi eSCO status (%d)"), *(unsigned int *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "sendMessage:withValue:", CFSTR("MWS_BT_ESCO_TRAFFIC_INDICATION"), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 40)));
}

id sub_1000DEA90(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: Update WiFi A2DP status (%d)"), *(unsigned int *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "sendMessage:withValue:", CFSTR("MWS_BT_A2DP_TRAFFIC_INDICATION"), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 40)));
}

id sub_1000DEB54(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: Update WiFi A2DP LLA status (%d)"), *(unsigned int *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "sendMessage:withValue:", CFSTR("MWS_BT_A2DP_LLA_TRAFFIC_INDICATION"), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 40)));
}

void sub_1000DEC2C(uint64_t a1)
{
  _QWORD v2[7];
  _QWORD v3[7];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: Update BT Connection Report"));
  v2[0] = CFSTR("MWS_BT_CONNECTION_REPORT_2G_AoS_UNI");
  v3[0] = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("2GAoSUni"));
  v2[1] = CFSTR("MWS_BT_CONNECTION_REPORT_2G_AoS_BI");
  v3[1] = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("2GAoSBi"));
  v2[2] = CFSTR("MWS_BT_CONNECTION_REPORT_5G_AoS_UNI");
  v3[2] = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("5GAoSUni"));
  v2[3] = CFSTR("MWS_BT_CONNECTION_REPORT_5G_AoS_BI");
  v3[3] = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("5GAoSBi"));
  v2[4] = CFSTR("MWS_BT_CONNECTION_REPORT_ACL_A2DP");
  v3[4] = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("ACL-A2DP"));
  v2[5] = CFSTR("MWS_BT_CONNECTION_REPORT_ESCO");
  v3[5] = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("ESCO"));
  v2[6] = CFSTR("MWS_BT_CONNECTION_REPORT_HID");
  v3[6] = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("HID"));
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_BT_CONNECTION_REPORT"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 7));

}

void sub_1000DEE38(uint64_t a1)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: Set WiFi RCU2 coex params  %@"), *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "sendMessage:withValue:", CFSTR("MWS_RC2_WIFI_TIMING_PARAM_INFO"), +[NSMutableDictionary dictionaryWithObjects:forKeys:](NSMutableDictionary, "dictionaryWithObjects:forKeys:", *(_QWORD *)(a1 + 32), +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", CFSTR("MWS_RC2_COEX_MODE"), CFSTR("MWS_RC2_COEX_GRANT_DURATION"), CFSTR("MWS_RC2_COEX_GRANT_INTERVAL"), CFSTR("MWS_RC2_COEX_CHANNEL"), 0)));

}

id sub_1000DF50C(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  id result;
  const __CFBoolean *Value;
  int v7;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: callbackWiFiDeviceClientDeviceAvailable %@"), a2);
  if (a2)
  {
    Value = (const __CFBoolean *)CFDictionaryGetValue(a2, CFSTR("DRIVER_AVAILABLE"));
    if (Value)
    {
      v7 = CFBooleanGetValue(Value);
      *(_BYTE *)(a3 + 528) = v7 != 0;
      objc_msgSend(*(id *)(a3 + 8), "updatePowerState:");
      if (v7)
      {
        *(_BYTE *)(a3 + 529) = 1;
        +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: callbackWiFiDeviceClientDeviceAvailable mWiFiDeviceReset to TRUE"));
        return objc_msgSend((id)a3, "checkWiFiState");
      }
    }
    else
    {
      *(_BYTE *)(a3 + 528) = 0;
      objc_msgSend(*(id *)(a3 + 8), "updatePowerState:", 0);
    }
    return objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "wifiController"), "clearDownloadCoexProfilesState");
  }
  return result;
}

id sub_1000DF628(uint64_t a1, uint64_t a2, void *a3)
{
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: callbackWiFiDeviceClientExtendedLink %@"), a2);
  return objc_msgSend(a3, "processWifiDeviceExtendedLinkEvent:", a2);
}

id sub_1000DF674(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  const __CFNumber *Value;
  const __CFNumber *v6;
  _BOOL8 v7;
  uint64_t valuePtr;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: callbackWiFiDeviceClientHostApStateChanged %@"), a2);
  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("CHANNEL"));
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)&valuePtr + 4);
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("channel = %d"), HIDWORD(valuePtr));
  }
  v6 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("HostApEnabled"));
  if (v6)
  {
    CFNumberGetValue(v6, kCFNumberSInt32Type, &valuePtr);
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("hostAPMode = %d"), valuePtr);
    v7 = (_DWORD)valuePtr != 0;
  }
  else
  {
    v7 = 0;
  }
  return objc_msgSend(a3, "updateHostAPState:channel:", v7, HIDWORD(valuePtr));
}

id sub_1000DF75C(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  result = +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("WiFiS: callbackWiFiDeviceClientBssidChange (%p)"), a2);
  if (a2)
  {
    objc_msgSend(a3, "checkWiFiState");
    return objc_msgSend(a3, "notifyWiFiStateChange:", 1);
  }
  return result;
}

id sub_1000DF7C4(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  _BOOL8 v5;
  int ValueIfPresent;
  uint64_t v7;
  unsigned int valuePtr;
  CFNumberRef number;
  void *value;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: callbackWiFiDeviceClientBTScanIntervalRelaxCallback %@"), a2);
  valuePtr = 4;
  if (!a2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("BT Scan Interval Relax dictionary is null"));
  number = 0;
  value = 0;
  v5 = 0;
  if (CFDictionaryGetValueIfPresent(a2, CFSTR("BT_SCAN_INTERVAL_RELAX_ENABLE"), (const void **)&value) && value)
    v5 = CFEqual(value, kCFBooleanTrue) != 0;
  ValueIfPresent = CFDictionaryGetValueIfPresent(a2, CFSTR("BT_SCAN_INTERVAL_RELAX_REASON"), (const void **)&number);
  v7 = 4;
  if (ValueIfPresent)
  {
    if (number)
    {
      CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
      v7 = valuePtr;
    }
  }
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: BT Scan Interval Relax event: enable %d, reason %d\n"), v5, v7);
  return objc_msgSend(a3, "dispatchCarplayInfotoBT:reason:", v5, valuePtr);
}

void sub_1000DF8E8(int a1, CFDictionaryRef theDict)
{
  id v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int valuePtr;
  void *value;

  value = 0;
  valuePtr = 0;
  v8 = 0;
  v6 = 0;
  v7 = 0;
  v5 = 0;
  if (theDict)
  {
    if (CFDictionaryGetValueIfPresent(theDict, CFSTR("BTC_STATS_TDD_CNT"), (const void **)&value) && value)
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
    if (CFDictionaryGetValueIfPresent(theDict, CFSTR("BTC_STATS_HYBRID_CNT"), (const void **)&value) && value)
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v8);
    if (CFDictionaryGetValueIfPresent(theDict, CFSTR("BTC_STATS_BT_DUR_MS"), (const void **)&value) && value)
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, (char *)&v7 + 4);
    if (CFDictionaryGetValueIfPresent(theDict, CFSTR("BTC_STATS_TOT_DUR_MS"), (const void **)&value) && value)
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v7);
    if (CFDictionaryGetValueIfPresent(theDict, CFSTR("BTC_STATS_PARALLEL_CNT"), (const void **)&value) && value)
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, (char *)&v6 + 4);
    if (CFDictionaryGetValueIfPresent(theDict, CFSTR("BTC_STATS_BT_DUR_AIR_MS"), (const void **)&value) && value)
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v6);
    if (CFDictionaryGetValueIfPresent(theDict, CFSTR("BTC_STATS_WLRSSI_COEX"), (const void **)&value) && value)
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, (char *)&v5 + 1);
    if (CFDictionaryGetValueIfPresent(theDict, CFSTR("BTC_STATS_BTRSSI_COEX"), (const void **)&value))
    {
      if (value)
        CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, &v5);
    }
    v3 = +[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton");
    LOBYTE(v4) = HIBYTE(v5);
    BYTE1(v4) = v5;
    objc_msgSend(v3, "handleBTCoexStatsEvent_tddCnt:hybridCnt:btDurMs:totDurMs:parallelCnt:btDurAirMs:wlrssiCoex:btrssiCoex:", valuePtr, v8, HIDWORD(v7), v7, HIDWORD(v6), v6, v4);
  }
}

const __CFDictionary *sub_1000DFAB4(uint64_t a1, const __CFDictionary *a2)
{
  const __CFNumber *Value;
  int v4;
  const __CFDictionary *result;
  const __CFDictionary *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFDictionary *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t valuePtr;

  if (!a2)
    return (const __CFDictionary *)+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("%s: empty dict"), "callbackBSPEventCallback");
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("%s: %@"), "callbackBSPEventCallback", a2);
  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("BSP_EventType"));
  if (!Value)
    return (const __CFDictionary *)+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("%s: no eventType"), "callbackBSPEventCallback");
  CFNumberGetValue(Value, kCFNumberLongLongType, &valuePtr);
  v4 = valuePtr;
  result = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("BSP_EventParams"));
  if (!result)
    return (const __CFDictionary *)+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("%s: no eventParams"), "callbackBSPEventCallback");
  v6 = result;
  switch(v4)
  {
    case 1:
      result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("BSP_PowerState"));
      if (result)
      {
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        return (const __CFDictionary *)objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "bspMonitor"), "handleWiFiStatusUpdateEvent:", valuePtr != 0);
      }
      return result;
    case 3:
      result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("BSP_RegulatoryInfo"));
      if (result)
      {
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        return (const __CFDictionary *)objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "bspMonitor"), "handleWiFiRegulatoryInfoEvent:", valuePtr);
      }
      return result;
    case 4:
      result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("BSP_FrequencyBand"));
      if (result)
      {
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        return (const __CFDictionary *)objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "bspMonitor"), "handleWiFiFrequencyBandForBTEvent:", valuePtr);
      }
      return result;
    case 5:
      result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("BSP_FrequencyBand"));
      if (result)
      {
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        v7 = valuePtr;
        result = (const __CFDictionary *)CFDictionaryGetValue(v6, CFSTR("BSP_ChannelQuality"));
        if (result)
        {
          CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
          return (const __CFDictionary *)objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "bspMonitor"), "handleWiFiChannelQualityEvent:quality:", v7, valuePtr);
        }
      }
      return result;
    case 6:
      result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("BSP_PowerState"));
      if (result)
      {
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        v8 = valuePtr;
        result = (const __CFDictionary *)CFDictionaryGetValue(v6, CFSTR("BSP_FrequencyBand"));
        if (result)
        {
          CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
          v9 = valuePtr;
          result = (const __CFDictionary *)CFDictionaryGetValue(v6, CFSTR("BSP_ULLAMode"));
          if (result)
          {
            CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
            return (const __CFDictionary *)objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "bspMonitor"), "handleBTStatusUpdateEvent:frequencyBand:ullaMode:", v8 != 0, v9, valuePtr);
          }
        }
      }
      return result;
    case 7:
      result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("BSP_CurrentBand"));
      if (result)
      {
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        v10 = valuePtr;
        result = (const __CFDictionary *)CFDictionaryGetValue(v6, CFSTR("BSP_TargetBand"));
        if (result)
        {
          CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
          return (const __CFDictionary *)objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "bspMonitor"), "handleBTBandSwitchRequestEvent:targetBand:", v10, valuePtr);
        }
      }
      return result;
    case 8:
      return (const __CFDictionary *)objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "bspMonitor"), "requestBTStatus");
    case 9:
      return (const __CFDictionary *)objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "bspMonitor"), "handleShowUCMStatusEvent");
    case 10:
      return (const __CFDictionary *)objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "bspMonitor"), "handleWiFiCountryCodeChangedEvent");
    case 11:
      return (const __CFDictionary *)objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "bspMonitor"), "handleBandSwitchStatusUpdatedEvent");
    case 12:
      result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("BSP_CoexMode"));
      if (result)
      {
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        v11 = valuePtr;
        result = (const __CFDictionary *)CFDictionaryGetValue(v6, CFSTR("BSP_BTSubband"));
        if (result)
        {
          CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
          v12 = valuePtr;
          result = (const __CFDictionary *)CFDictionaryGetValue(v6, CFSTR("BSP_SuccessCount"));
          if (result)
          {
            CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
            v13 = valuePtr;
            result = (const __CFDictionary *)CFDictionaryGetValue(v6, CFSTR("BSP_FailCount"));
            if (result)
            {
              CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
              return (const __CFDictionary *)objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "bspMonitor"), "handleBandSwitchStatusEvent:btSubband:successCount:failCount:", v11 != 0, v12, v13, valuePtr);
            }
          }
        }
      }
      return result;
    case 13:
      return (const __CFDictionary *)objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "bspMonitor"), "handleChannelQualityInfoUpdatedEvent");
    case 14:
      return (const __CFDictionary *)objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "bspMonitor"), "handleChannelQualityInfoEvent:", result);
    case 15:
      result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("BSP_ReasonCode"));
      if (result)
      {
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        v14 = valuePtr;
        result = (const __CFDictionary *)CFDictionaryGetValue(v6, CFSTR("BSP_BTSubband"));
        if (result)
        {
          CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
          return (const __CFDictionary *)objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "bspMonitor"), "handleCoexModeFailEvent:btSubband:", v14, valuePtr);
        }
      }
      return result;
    case 16:
      result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("BSP_ReasonCode"));
      if (result)
      {
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        v15 = valuePtr;
        result = (const __CFDictionary *)CFDictionaryGetValue(v6, CFSTR("BSP_TargetBand"));
        if (result)
        {
          CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
          return (const __CFDictionary *)objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "bspMonitor"), "handleBandSwitchRejectEvent:btTargetBand:", v15, valuePtr);
        }
      }
      return result;
    case 17:
      result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("BSP_CountryCode"));
      if (result)
      {
        v16 = result;
        result = (const __CFDictionary *)CFDictionaryGetValue(v6, CFSTR("BSP_AllowedBands"));
        if (result)
        {
          CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
          return (const __CFDictionary *)objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "bspMonitor"), "handleBTRegulatoryInfoEvent:allowedBands:", v16, valuePtr);
        }
      }
      return result;
    case 20:
      result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("BSP_NanPhs_isLinkDown"));
      if (!result)
        return result;
      if (CFBooleanGetValue(result))
      {
        v17 = 0;
        goto LABEL_48;
      }
      result = (const __CFDictionary *)CFDictionaryGetValue(v6, CFSTR("BSP_NanPhs_Channel"));
      if (result)
      {
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        v17 = valuePtr;
        result = (const __CFDictionary *)CFDictionaryGetValue(v6, CFSTR("BSP_NanPhs_Band"));
        if (result)
        {
          CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
          switch((_DWORD)valuePtr)
          {
            case 1:
              v18 = 2;
              return (const __CFDictionary *)objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "bspMonitor"), "handleWiFiStateEvent:wifiChannel:isNanPhs:", v18, v17, 1);
            case 3:
              v18 = 4;
              return (const __CFDictionary *)objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "bspMonitor"), "handleWiFiStateEvent:wifiChannel:isNanPhs:", v18, v17, 1);
            case 2:
              v18 = 3;
              return (const __CFDictionary *)objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "bspMonitor"), "handleWiFiStateEvent:wifiChannel:isNanPhs:", v18, v17, 1);
          }
LABEL_48:
          v18 = 0;
          return (const __CFDictionary *)objc_msgSend(objc_msgSend(+[WCM_PolicyManager singleton](WCM_PolicyManager, "singleton"), "bspMonitor"), "handleWiFiStateEvent:wifiChannel:isNanPhs:", v18, v17, 1);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

const __CFDictionary *sub_1000E0118(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  const __CFNumber *Value;
  uint64_t v6;
  const __CFDictionary *result;
  const __CFDictionary *v8;
  uint64_t v9;
  uint64_t valuePtr;

  if (!a2)
    return (const __CFDictionary *)+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("%s: empty dict"), "callbackUCMEventCallback");
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("%s: %@"), "callbackUCMEventCallback", a2);
  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("UCM_EventType"));
  if (!Value)
    return (const __CFDictionary *)+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("%s: no eventType"), "callbackUCMEventCallback");
  CFNumberGetValue(Value, kCFNumberLongLongType, &valuePtr);
  v6 = valuePtr;
  result = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("UCM_EventParams"));
  if (!result)
    return (const __CFDictionary *)+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("%s: no eventParams"), "callbackUCMEventCallback");
  if (v6 == 1)
  {
    v8 = result;
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("UCM_CopresenceEn"));
    if (result)
    {
      CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
      v9 = valuePtr;
      result = (const __CFDictionary *)CFDictionaryGetValue(v8, CFSTR("MWS_LE_NORM_SCAN_GRANT_DUR"));
      if (result)
      {
        result = (const __CFDictionary *)CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        if (a3)
          return (const __CFDictionary *)objc_msgSend(a3, "forceCopresence:scanGrantDuration:", v9 != 0, valuePtr);
      }
    }
  }
  return result;
}

void sub_1000E0F40(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  id v8;
  _QWORD v9[9];
  _QWORD v10[3];
  int v11;
  _QWORD v12[3];
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;

  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 1;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2020000000;
  v13 = 0;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2020000000;
  v11 = 0;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: callbackWiFiDeviceClientScanCallback %d"), a3);
  if (!a4)
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: callback context is missing %d"), a3);
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: callback context is NULL"));
  }
  v7 = *(void **)(a4 + 24);
  if (!v7)
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: callback wifiService is NULL"));
  if (a2)
  {
    v8 = objc_alloc_init((Class)NSMutableDictionary);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000E25BC;
    v9[3] = &unk_1002059F0;
    v9[4] = v8;
    v9[5] = v12;
    v9[6] = v10;
    v9[7] = &v18;
    v9[8] = &v14;
    objc_msgSend(a2, "enumerateObjectsUsingBlock:", v9);
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: Sending least congested channel: %d, count %d\n"), *((unsigned int *)v15 + 6), *((unsigned int *)v19 + 6));
    objc_msgSend(v7, "dispatchContentionFreeWiFiNetworkToRC2:count:", *((unsigned int *)v15 + 6), *((unsigned int *)v19 + 6));
    CFRunLoopStop(*(CFRunLoopRef *)(a4 + 16));

  }
  else
  {
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: callback scanResults are NULL"));
    *((_DWORD *)v15 + 6) = 13;
    *((_DWORD *)v19 + 6) = 1;
  }
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(v12, 8);
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);
}

void sub_1000E1148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E13E4(uint64_t result)
{
  if (*(_QWORD *)(*(_QWORD *)(result + 32) + 504))
    return WiFiManagerClientWiFiCallHandoverNotification(*(_QWORD *)(*(_QWORD *)(result + 32) + 504), *(unsigned __int8 *)(result + 40));
  return result;
}

id sub_1000E1570(uint64_t a1)
{
  _UNKNOWN **v2;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("WiFiS: Update External Connection (%d)"), *(unsigned int *)(a1 + 40));
  if (*(_DWORD *)(a1 + 40))
    v2 = &off_100230F30;
  else
    v2 = &off_100230F48;
  return objc_msgSend(*(id *)(a1 + 32), "sendMessage:withValue:", CFSTR("MWS_SET_WIFI_BT_AIRTIME_POLICY"), v2);
}

id sub_1000E178C(uint64_t a1)
{
  NSDictionary *v2;
  NSDictionary *v3;
  _QWORD v5[2];
  _QWORD v6[2];
  _QWORD v7[3];
  _QWORD v8[3];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("%s (%d, 0x%x, %d)"), "-[WCM_WiFiServiceIOS bspUpdateBTStatus_powerState:frequencyBand:ullaMode:]_block_invoke", *(unsigned __int8 *)(a1 + 48), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
  v7[0] = CFSTR("BSP_PowerState");
  v8[0] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(unsigned __int8 *)(a1 + 48));
  v7[1] = CFSTR("BSP_FrequencyBand");
  v8[1] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(int *)(a1 + 40));
  v7[2] = CFSTR("BSP_ULLAMode");
  v8[2] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(unsigned int *)(a1 + 44));
  v2 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 3);
  v5[0] = CFSTR("BSP_CommandType");
  v5[1] = CFSTR("BSP_CommandParams");
  v6[0] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", 5);
  v6[1] = v2;
  v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 2);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("%s: %@"), "-[WCM_WiFiServiceIOS bspUpdateBTStatus_powerState:frequencyBand:ullaMode:]_block_invoke", v3);
  return objc_msgSend(*(id *)(a1 + 32), "sendMessage:withValue:", CFSTR("BSP_Command"), v3);
}

id sub_1000E1958(uint64_t a1)
{
  NSNumber *v2;
  NSDictionary *v3;
  _QWORD v5[2];
  _QWORD v6[2];
  _QWORD v7[2];
  _QWORD v8[2];
  _QWORD v9[2];
  _QWORD v10[2];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("%s (0x%x, 0x%x)"), "-[WCM_WiFiServiceIOS bspBandSwitchRequest:targetBand:]_block_invoke", *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
  v9[0] = CFSTR("BSP_CommandType");
  v9[1] = CFSTR("BSP_CommandParams");
  v10[0] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", 4);
  v7[0] = CFSTR("BSP_SIB_CmdType");
  v7[1] = CFSTR("BSP_SIB_CmdParams");
  v8[0] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", 2);
  v5[0] = CFSTR("BSP_CurrentBand");
  v2 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(int *)(a1 + 40));
  v5[1] = CFSTR("BSP_TargetBand");
  v6[0] = v2;
  v6[1] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(int *)(a1 + 44));
  v8[1] = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 2);
  v10[1] = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 2);
  v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 2);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("%s: %@"), "-[WCM_WiFiServiceIOS bspBandSwitchRequest:targetBand:]_block_invoke", v3);
  return objc_msgSend(*(id *)(a1 + 32), "sendMessage:withValue:", CFSTR("BSP_Command"), v3);
}

id sub_1000E1B2C(uint64_t a1)
{
  NSDictionary *v2;
  NSDictionary *v3;
  _QWORD v5[2];
  _QWORD v6[2];
  const __CFString *v7;
  NSNumber *v8;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("%s"), "-[WCM_WiFiServiceIOS bspStatusRequest]_block_invoke");
  v7 = CFSTR("dummy");
  v8 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", 0);
  v2 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1);
  v5[0] = CFSTR("BSP_CommandType");
  v5[1] = CFSTR("BSP_CommandParams");
  v6[0] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", 7);
  v6[1] = v2;
  v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 2);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("%s: %@"), "-[WCM_WiFiServiceIOS bspStatusRequest]_block_invoke", v3);
  return objc_msgSend(*(id *)(a1 + 32), "sendMessage:withValue:", CFSTR("BSP_Command"), v3);
}

id sub_1000E1CB0(uint64_t a1)
{
  NSDictionary *v2;
  NSDictionary *v3;
  _QWORD v5[2];
  _QWORD v6[2];
  const __CFString *v7;
  NSNumber *v8;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("%s"), "-[WCM_WiFiServiceIOS bspRegulatoryInfoRequest]_block_invoke");
  v7 = CFSTR("dummy");
  v8 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", 0);
  v2 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1);
  v5[0] = CFSTR("BSP_CommandType");
  v5[1] = CFSTR("BSP_CommandParams");
  v6[0] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", 2);
  v6[1] = v2;
  v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 2);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("%s: %@"), "-[WCM_WiFiServiceIOS bspRegulatoryInfoRequest]_block_invoke", v3);
  return objc_msgSend(*(id *)(a1 + 32), "sendMessage:withValue:", CFSTR("BSP_Command"), v3);
}

id sub_1000E1E34(uint64_t a1)
{
  NSDictionary *v2;
  NSDictionary *v3;
  _QWORD v5[2];
  _QWORD v6[2];
  const __CFString *v7;
  NSNumber *v8;

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("%s"), "-[WCM_WiFiServiceIOS bspNanPhsStateRequest]_block_invoke");
  v7 = CFSTR("dummy");
  v8 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", 0);
  v2 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1);
  v5[0] = CFSTR("BSP_CommandType");
  v5[1] = CFSTR("BSP_CommandParams");
  v6[0] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", 3);
  v6[1] = v2;
  v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 2);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("%s: %@"), "-[WCM_WiFiServiceIOS bspNanPhsStateRequest]_block_invoke", v3);
  return objc_msgSend(*(id *)(a1 + 32), "sendMessage:withValue:", CFSTR("BSP_Command"), v3);
}

id sub_1000E1FC8(uint64_t a1)
{
  NSDictionary *v2;
  _QWORD v4[6];
  _QWORD v5[6];
  _QWORD v6[2];
  _QWORD v7[2];
  _QWORD v8[2];
  _QWORD v9[2];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("%s (0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x)"), "-[WCM_WiFiServiceIOS bspSetCoexMode:wifiSupportedBands:btCurrentBand:btSupportedBands:setTimeToTSTOnly:timeToTST:]_block_invoke", *(unsigned __int8 *)(a1 + 56), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 57), *(unsigned int *)(a1 + 52));
  v8[0] = CFSTR("BSP_CommandType");
  v8[1] = CFSTR("BSP_CommandParams");
  v9[0] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", 4);
  v6[0] = CFSTR("BSP_SIB_CmdType");
  v6[1] = CFSTR("BSP_SIB_CmdParams");
  v7[0] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", 0);
  v4[0] = CFSTR("BSP_SIB_Enable");
  v5[0] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(unsigned __int8 *)(a1 + 56));
  v4[1] = CFSTR("BSP_SIB_WiFiSupportedBands");
  v5[1] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(int *)(a1 + 40));
  v4[2] = CFSTR("BSP_SIB_BTCurrentBand");
  v5[2] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(int *)(a1 + 44));
  v4[3] = CFSTR("BSP_SIB_BTSupportedBands");
  v5[3] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(int *)(a1 + 48));
  v4[4] = CFSTR("BSP_SIB_SetTimeToTSTOnly");
  v5[4] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(unsigned __int8 *)(a1 + 57));
  v4[5] = CFSTR("BSP_SIB_TimeToTST");
  v5[5] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(unsigned int *)(a1 + 52));
  v7[1] = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 6);
  v9[1] = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 2);
  v2 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v8, 2);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("%s: %@"), "-[WCM_WiFiServiceIOS bspSetCoexMode:wifiSupportedBands:btCurrentBand:btSupportedBands:setTimeToTSTOnly:timeToTST:]_block_invoke", v2);
  return objc_msgSend(*(id *)(a1 + 32), "sendMessage:withValue:", CFSTR("BSP_Command"), v2);
}

id sub_1000E222C(uint64_t a1)
{
  NSDictionary *v2;
  const __CFString *v4;
  NSNumber *v5;
  _QWORD v6[2];
  _QWORD v7[2];
  _QWORD v8[2];
  _QWORD v9[2];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("%s"), "-[WCM_WiFiServiceIOS bspGetBandSwitchStatus]_block_invoke");
  v8[0] = CFSTR("BSP_CommandType");
  v9[0] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", 4);
  v8[1] = CFSTR("BSP_CommandParams");
  v6[0] = CFSTR("BSP_SIB_CmdType");
  v6[1] = CFSTR("BSP_SIB_CmdParams");
  v7[0] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", 4);
  v4 = CFSTR("dummy");
  v5 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", 0);
  v7[1] = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1);
  v9[1] = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 2);
  v2 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v8, 2);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("%s: %@"), "-[WCM_WiFiServiceIOS bspGetBandSwitchStatus]_block_invoke", v2);
  return objc_msgSend(*(id *)(a1 + 32), "sendMessage:withValue:", CFSTR("BSP_Command"), v2);
}

id sub_1000E23E4(uint64_t a1)
{
  NSDictionary *v2;
  const __CFString *v4;
  NSNumber *v5;
  _QWORD v6[2];
  _QWORD v7[2];
  _QWORD v8[2];
  _QWORD v9[2];

  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 2, CFSTR("%s"), "-[WCM_WiFiServiceIOS bspGetChannelQualityInfo]_block_invoke");
  v8[0] = CFSTR("BSP_CommandType");
  v9[0] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", 4);
  v8[1] = CFSTR("BSP_CommandParams");
  v6[0] = CFSTR("BSP_SIB_CmdType");
  v6[1] = CFSTR("BSP_SIB_CmdParams");
  v7[0] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", 5);
  v4 = CFSTR("dummy");
  v5 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", 0);
  v7[1] = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1);
  v9[1] = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 2);
  v2 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v8, 2);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("%s: %@"), "-[WCM_WiFiServiceIOS bspGetChannelQualityInfo]_block_invoke", v2);
  return objc_msgSend(*(id *)(a1 + 32), "sendMessage:withValue:", CFSTR("BSP_Command"), v2);
}

id sub_1000E25BC(uint64_t a1, uint64_t a2)
{
  id result;

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = WiFiNetworkGetIntProperty(a2, CFSTR("CHANNEL"));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))), "intValue");
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) + 1)), +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)));
  result = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))), "intValue");
  if (result <= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    result = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))), "intValue");
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = (_DWORD)result;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                            + 24);
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
  return result;
}

id sub_1000F3C2C(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmBTMaxNumberOfChannelsToAvoidForCellOOB:", &off_100231A58);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001DF428);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_100242F60);
  return objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100242F90);
}

id sub_1000F3D60(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmBTMaxNumberOfChannelsToAvoidForCellOOB:", &off_100231A58);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001DFAB8);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2506.1, 15.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_100242FF0);
  return objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100243050);
}

id sub_1000F3E94(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmBTMaxNumberOfChannelsToAvoidForCellOOB:", &off_100231A58);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001DFF18);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_100243080);
  return objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_1002430B0);
}

id sub_1000F3FC8(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmBTMaxNumberOfChannelsToAvoidForCellOOB:", &off_100231A58);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001E04C8);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_1002430E0);
  return objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100243110);
}

id sub_1000F40FC(void *a1)
{
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_100231950,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231980,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyHFP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B90,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyA2DP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  return objc_msgSend(a1, "setWcmWiFiBTCoexProfileTDD:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
             &off_100231AE8,
             CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
             &off_100231B00,
             CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
             &off_100231AB8,
             CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
             &off_100231B00,
             CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231AB8,
             CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
             +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
                 &off_100231950,
                 CFSTR("UCM_DESENSE_LEVEL"),
                 &off_100231980,
                 CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_TX_PWR_STRONG_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_TX_PWR_WEAK_RSSI"),
                 0),
               0),
             CFSTR("UCM_CHAIN_ATTR"),
             0));
}

id sub_1000F4A10(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  char *v20;
  unsigned int v21;
  char v22;
  unsigned int v23;
  WCM_WiFiCellCoexIssueBandTable *v24;
  id v25;
  id v26;
  NSArray *v27;
  id v28;
  id v29;
  NSArray *v30;
  NSArray *v31;
  id v32;
  NSArray *v33;
  id v34;
  NSArray *v35;
  id v36;
  uint64_t v38;
  id v39;
  uint64_t v40;
  char *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  id v67;
  _DWORD v68[2];
  __int16 v69;
  char v70;
  uint64_t v71;
  uint64_t v72;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231BC0);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  v39 = a1;
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v71 = 0;
  v72 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex003_WiFiEnh_v1.5"), (uint64_t)CFSTR("plist")), 2, &v71, &v72);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v38 = (uint64_t)&v38;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v41 = (char *)&v38 - v4 * (unint64_t)v5;
  v6 = &v41[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = 0;
    v40 = 112 * v7;
    do
    {
      v69 = 0;
      v70 = 0;
      v68[0] = 0;
      *(_DWORD *)((char *)v68 + 3) = 0;
      LODWORD(v67) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("issueBand")), "intValue");
      v66 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("issueType")), "intValue");
      v65 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v64 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v63 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v62 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v61 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v60 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v59 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v48 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v47 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9++), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue");
      v20 = &v41[v8];
      v21 = v66;
      *(_DWORD *)v20 = (_DWORD)v67;
      *((_DWORD *)v20 + 1) = v21;
      v20[8] = v65;
      v22 = v63;
      v20[13] = v64;
      *(_DWORD *)(v20 + 9) = 0;
      v20[14] = v22;
      v20[15] = v62;
      v20[16] = v61;
      v20[17] = v60;
      v20[18] = v59;
      v20[19] = v58;
      v20[20] = v57;
      v20[21] = v56;
      v20[22] = v55;
      v20[23] = v54;
      v20[24] = v53;
      v20[25] = v52;
      v20[26] = v51;
      v20[27] = v50;
      v20[28] = v49;
      *(_WORD *)(v20 + 29) = v69;
      v20[31] = v70;
      *((_QWORD *)v20 + 4) = v48;
      *((double *)v20 + 5) = v10;
      *((double *)v20 + 6) = v11;
      v20[56] = v47;
      v20[57] = v46;
      v20[58] = v45;
      v20[59] = v44;
      v23 = v43;
      *((_DWORD *)v20 + 15) = 0;
      *((_DWORD *)v20 + 16) = v23;
      *(_QWORD *)(v20 + 68) = 0;
      *((_WORD *)v20 + 38) = 0;
      v20[78] = v42;
      v20[79] = v12;
      *((_QWORD *)v20 + 10) = 0;
      v20[88] = 0;
      v20[89] = v13;
      v20[90] = v14;
      v20[91] = v15;
      v20[92] = 0;
      v20[93] = v16;
      v20[94] = v17;
      v20[95] = v18;
      v20[96] = v19 != 0;
      *(_QWORD *)(v20 + 97) = 0;
      *((_DWORD *)v20 + 27) = *(_DWORD *)((char *)v68 + 3);
      v8 += 112;
      *(_DWORD *)(v20 + 105) = v68[0];
    }
    while (v40 != v8);
  }
  v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v25 = v39;
  objc_msgSend(v39, "setWcmWiFiCellCoexIssueTable:", v24);
  v26 = objc_msgSend(v25, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v26, "configureBy:", v41);
  objc_msgSend(v25, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v25, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequencies:", &off_1002431A0);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannels:", &off_100243230);
  objc_msgSend(v25, "setWcmCellularWCI2ModeControllerLTERBThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41));
  objc_msgSend(v25, "setWcmCellularWCI2ModeLTEHarqnackratioThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v25, "setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
  v67 = NSDictionary;
  v27 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_100231950,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v28 = objc_msgSend(v67, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v27,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  v29 = v39;
  objc_msgSend(v39, "setWcmWiFiBTCoexProfileDefault:", v28);
  v67 = NSDictionary;
  v30 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  objc_msgSend(v29, "setWcmWiFiBTCoexProfileLight:", objc_msgSend(v67, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v30,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v67 = NSDictionary;
  v31 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v32 = objc_msgSend(v67, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231B78, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231B90,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v31,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v39, "setWcmWiFiBTCoexProfileHeavyHFP:", v32);
  v67 = NSDictionary;
  v33 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v34 = objc_msgSend(v67, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231BA8, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231B78,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v33,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v39, "setWcmWiFiBTCoexProfileHeavyA2DP:", v34);
  v67 = NSDictionary;
  v35 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_100231950,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v36 = objc_msgSend(v67, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v35,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  return objc_msgSend(v39, "setWcmWiFiBTCoexProfileTDD:", v36);
}

id sub_1000F5DB8(void *a1)
{
  _UNKNOWN **v1;
  _UNKNOWN **v2;

  objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_100231950,
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231950,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_1002318C0, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231860,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v1 = &off_100231860;
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyHFP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), v1, CFSTR("UCM_MODE_STRONG_WL_BT"), v1, CFSTR("UCM_MODE_WEAK_WL"), v1, CFSTR("UCM_MODE_WEAK_BT"), v1, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B90,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231860,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyA2DP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), v1, CFSTR("UCM_MODE_STRONG_WL_BT"), v1, CFSTR("UCM_MODE_WEAK_WL"), v1, CFSTR("UCM_MODE_WEAK_BT"), v1, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231860,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v2 = &off_100231980;
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileTDD:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231950,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          v2,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          v2,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          v2,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          v2,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  return objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault5G:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231950, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231950, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
             +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), v2, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), v2, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), v2, CFSTR("UCM_TX_PWR_STRONG_RSSI"), v2, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
                 NSDictionary,
                 "dictionaryWithObjectsAndKeys:",
                 CFSTR("UCM_DESENSE_STRONG_RSSI"),
                 &off_100231950,
                 CFSTR("UCM_DESENSE_WEAK_RSSI"),
                 v2,
                 CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
                 v2,
                 CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
                 v2,
                 CFSTR("UCM_TX_PWR_STRONG_RSSI"),
                 v2,
                 CFSTR("UCM_TX_PWR_WEAK_RSSI"),
                 0),
               0),
             CFSTR("UCM_CHAIN_ATTR"),
             0));
}

id sub_1000F68C4(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  WCM_WiFiCellCoexIssueBandTable *v24;
  id v25;
  id v26;
  _UNKNOWN **v27;
  NSDictionary *v28;
  NSDictionary *v29;
  id v30;
  id v31;
  NSDictionary *v32;
  NSDictionary *v33;
  id v34;
  id v35;
  _UNKNOWN **v36;
  NSDictionary *v37;
  NSDictionary *v38;
  id v39;
  id v40;
  NSDictionary *v41;
  NSDictionary *v42;
  id v43;
  id v44;
  id v45;
  NSDictionary *v46;
  NSDictionary *v47;
  id v48;
  NSArray *v49;
  id v50;
  _QWORD v52[2];
  char *v53;
  id v54;
  uint64_t v55;
  _BOOL4 v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  id v88;
  id v89;
  _DWORD v90[2];
  __int16 v91;
  char v92;
  uint64_t v93;
  uint64_t v94;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  v54 = a1;
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v93 = 0;
  v94 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex045_V7WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v93, &v94);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v52[1] = v52;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v53 = (char *)v52 - v4 * (unint64_t)v5;
  v6 = &v53[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = v53 + 56;
    v55 = v7;
    do
    {
      v91 = 0;
      v92 = 0;
      v90[0] = 0;
      *(_DWORD *)((char *)v90 + 3) = 0;
      LODWORD(v89) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueBand")), "intValue");
      LODWORD(v88) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueType")), "intValue");
      v87 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v86 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v85 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v84 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v83 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v82 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v81 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v80 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v79 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v78 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v77 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v76 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v75 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v74 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v73 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v72 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v71 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v70 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v69 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v68 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v67 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v66 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v65 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v64 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v63 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v62 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v61 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v60 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v59 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue") != 0;
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOBPHS")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOBPHS")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii1Enabled")), "BOOLValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii3Enabled")), "BOOLValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5aEnabled")), "BOOLValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5bEnabled")), "BOOLValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5cEnabled")), "BOOLValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5dEnabled")), "BOOLValue");
      v20 = (int)v88;
      *((_DWORD *)v9 - 14) = (_DWORD)v89;
      *((_DWORD *)v9 - 13) = v20;
      *(v9 - 48) = v87;
      *(v9 - 43) = v86;
      *(v9 - 42) = v85;
      *(v9 - 41) = v84;
      *(v9 - 40) = v83;
      *(v9 - 39) = v82;
      *(v9 - 38) = v81;
      *(v9 - 37) = v80;
      *(v9 - 36) = v79;
      *(_DWORD *)(v9 - 47) = 0;
      *(v9 - 35) = v78;
      *(v9 - 34) = v77;
      *(v9 - 33) = v76;
      *(v9 - 32) = v75;
      *(v9 - 31) = v74;
      *(v9 - 30) = v73;
      *(v9 - 29) = v72;
      *(v9 - 28) = v71;
      *(_WORD *)(v9 - 27) = v91;
      *(v9 - 25) = v92;
      *((_QWORD *)v9 - 3) = v70;
      *((double *)v9 - 2) = v10;
      *((double *)v9 - 1) = v11;
      *v9 = v69;
      v9[1] = v68;
      v9[2] = v67;
      v9[3] = v66;
      v21 = v65;
      *((_DWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 2) = v21;
      *(_QWORD *)(v9 + 12) = 0;
      *((_WORD *)v9 + 10) = 0;
      v9[22] = v64;
      v9[23] = v63;
      *((_QWORD *)v9 + 3) = 0;
      v9[32] = 0;
      v9[33] = v62;
      v9[34] = v61;
      v9[35] = v60;
      v9[36] = 0;
      v9[37] = v59;
      v9[38] = v58;
      v9[39] = v57;
      v9[40] = v56;
      v9[41] = v12;
      v9[42] = v13;
      v9[43] = v14;
      v9[44] = v15;
      v9[45] = v16;
      v9[46] = v17;
      v9[47] = v18;
      v9[48] = v19;
      v22 = v90[0];
      ++v8;
      *((_DWORD *)v9 + 13) = *(_DWORD *)((char *)v90 + 3);
      v23 = v55;
      *(_DWORD *)(v9 + 49) = v22;
      v9 += 112;
    }
    while (v23 != v8);
  }
  v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v25 = v54;
  objc_msgSend(v54, "setWcmWiFiCellCoexIssueTable:", v24);
  v26 = objc_msgSend(v25, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v26, "configureBy:", v53);
  objc_msgSend(v25, "setWcmCellRc1CoexIssueTable:", 0);
  objc_msgSend(v25, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v25, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequencies:", &off_100243290);
  if (_os_feature_enabled_impl("wirelessradiomanager", "HFBTEnhancement"))
    v27 = &off_1002432F0;
  else
    v27 = &off_100243350;
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequenciesforBT:", v27);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannels:", &off_1002433B0);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannelsWiFiEnh:", &off_100243410);
  objc_msgSend(v25, "setWcmCellularWCI2ModeControllerLTERBThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41));
  objc_msgSend(v25, "setWcmCellularWCI2ModeLTEHarqnackratioThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v25, "setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
  v88 = NSArray;
  v89 = NSDictionary;
  v28 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v29 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v30 = objc_msgSend(v88, "arrayWithObjects:", v28, v29, 0);
  v31 = objc_msgSend(v89, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v30,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v54, "setWcmWiFiBTCoexProfileDefault:", v31);
  v88 = NSArray;
  v89 = NSDictionary;
  v32 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v33 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v34 = objc_msgSend(v88, "arrayWithObjects:", v32, v33, 0);
  v35 = objc_msgSend(v89, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_1002318C0, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231BA8,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B78,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v34,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v54, "setWcmWiFiBTCoexProfileLight:", v35);
  v88 = NSArray;
  v89 = NSDictionary;
  v36 = &off_100231860;
  v37 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v38 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v39 = objc_msgSend(v88, "arrayWithObjects:", v37, v38, 0);
  v40 = objc_msgSend(v89, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), v36, CFSTR("UCM_MODE_STRONG_WL_BT"), v36, CFSTR("UCM_MODE_WEAK_WL"), v36, CFSTR("UCM_MODE_WEAK_BT"), v36, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231B78, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231B90,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v39,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v54, "setWcmWiFiBTCoexProfileHeavyHFP:", v40);
  v88 = NSArray;
  v89 = NSDictionary;
  v41 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v42 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v43 = objc_msgSend(v88, "arrayWithObjects:", v41, v42, 0);
  v44 = objc_msgSend(v89, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), v36, CFSTR("UCM_MODE_STRONG_WL_BT"), v36, CFSTR("UCM_MODE_WEAK_WL"), v36, CFSTR("UCM_MODE_WEAK_BT"), v36, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231BA8, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231B78,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v43,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  v45 = v54;
  objc_msgSend(v54, "setWcmWiFiBTCoexProfileHeavyA2DP:", v44);
  v88 = NSArray;
  v89 = NSDictionary;
  v46 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v47 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v48 = objc_msgSend(v88, "arrayWithObjects:", v46, v47, 0);
  objc_msgSend(v45, "setWcmWiFiBTCoexProfileTDD:", objc_msgSend(v89, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v48,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v89 = NSDictionary;
  v49 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
            NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            CFSTR("UCM_DESENSE_STRONG_RSSI"),
            &off_100231950,
            CFSTR("UCM_DESENSE_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v50 = objc_msgSend(v89, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231950, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231950, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231950, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231950,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v49,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  return objc_msgSend(v54, "setWcmWiFiBTCoexProfileDefault5G:", v50);
}

id sub_1000F8060(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmBTMaxNumberOfChannelsToAvoidForCellOOB:", &off_100231A58);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001E0C38);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_100243440);
  return objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100243470);
}

id sub_1000F8194(void *a1)
{
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_100231950,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyHFP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B90,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyA2DP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  return objc_msgSend(a1, "setWcmWiFiBTCoexProfileTDD:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
             &off_100231AE8,
             CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
             &off_100231B00,
             CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
             &off_100231AB8,
             CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
             &off_100231B00,
             CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231AB8,
             CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
             +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
                 &off_100231950,
                 CFSTR("UCM_DESENSE_LEVEL"),
                 &off_100231980,
                 CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_TX_PWR_STRONG_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_TX_PWR_WEAK_RSSI"),
                 0),
               0),
             CFSTR("UCM_CHAIN_ATTR"),
             0));
}

id sub_1000F8A80(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001E13A8);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_1002434B8);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100243500);
  objc_msgSend(a1, "setWcmCellularWCI2ModeControllerLTERBThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41));
  objc_msgSend(a1, "setWcmCellularWCI2ModeLTEHarqnackratioThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(a1, "setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_100231950,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyHFP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B90,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyA2DP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  return objc_msgSend(a1, "setWcmWiFiBTCoexProfileTDD:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
             &off_100231AE8,
             CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
             &off_100231B00,
             CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
             &off_100231AB8,
             CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
             &off_100231B00,
             CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231AB8,
             CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
             +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
                 &off_100231950,
                 CFSTR("UCM_DESENSE_LEVEL"),
                 &off_100231980,
                 CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_TX_PWR_STRONG_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_TX_PWR_WEAK_RSSI"),
                 0),
               0),
             CFSTR("UCM_CHAIN_ATTR"),
             0));
}

id sub_1000F9648(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  char *v20;
  int v21;
  char v22;
  unsigned int v23;
  WCM_WiFiCellCoexIssueBandTable *v24;
  id v25;
  id v26;
  NSDictionary *v27;
  NSDictionary *v28;
  id v29;
  NSArray *v30;
  NSArray *v31;
  NSArray *v32;
  NSArray *v33;
  id v34;
  _QWORD v36[2];
  id v37;
  uint64_t v38;
  char *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  id v64;
  id v65;
  _DWORD v66[2];
  __int16 v67;
  char v68;
  uint64_t v69;
  uint64_t v70;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231BC0);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  v37 = a1;
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v69 = 0;
  v70 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex004_WiFiEnh_v1"), (uint64_t)CFSTR("plist")), 2, &v69, &v70);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v36[1] = v36;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v39 = (char *)v36 - v4 * (unint64_t)v5;
  v6 = &v39[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = 0;
    v38 = 112 * v7;
    do
    {
      v67 = 0;
      v68 = 0;
      v66[0] = 0;
      *(_DWORD *)((char *)v66 + 3) = 0;
      LODWORD(v65) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("issueBand")), "intValue");
      LODWORD(v64) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("issueType")), "intValue");
      v63 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v62 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v61 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v60 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v59 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v47 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v46 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v40 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9++), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue");
      v20 = &v39[v8];
      v21 = (int)v64;
      *(_DWORD *)v20 = (_DWORD)v65;
      *((_DWORD *)v20 + 1) = v21;
      v20[8] = v63;
      v22 = v61;
      v20[13] = v62;
      *(_DWORD *)(v20 + 9) = 0;
      v20[14] = v22;
      v20[15] = v60;
      v20[16] = v59;
      v20[17] = v58;
      v20[18] = v57;
      v20[19] = v56;
      v20[20] = v55;
      v20[21] = v54;
      v20[22] = v53;
      v20[23] = v52;
      v20[24] = v51;
      v20[25] = v50;
      v20[26] = v49;
      v20[27] = v48;
      v20[28] = v47;
      *(_WORD *)(v20 + 29) = v67;
      v20[31] = v68;
      *((_QWORD *)v20 + 4) = v46;
      *((double *)v20 + 5) = v10;
      *((double *)v20 + 6) = v11;
      v20[56] = v45;
      v20[57] = v44;
      v20[58] = v43;
      v20[59] = v42;
      v23 = v41;
      *((_DWORD *)v20 + 15) = 0;
      *((_DWORD *)v20 + 16) = v23;
      *(_QWORD *)(v20 + 68) = 0;
      *((_WORD *)v20 + 38) = 0;
      v20[78] = v40;
      v20[79] = v12;
      *((_QWORD *)v20 + 10) = 0;
      v20[88] = 0;
      v20[89] = v13;
      v20[90] = v14;
      v20[91] = v15;
      v20[92] = 0;
      v20[93] = v16;
      v20[94] = v17;
      v20[95] = v18;
      v20[96] = v19 != 0;
      *(_QWORD *)(v20 + 97) = 0;
      *((_DWORD *)v20 + 27) = *(_DWORD *)((char *)v66 + 3);
      v8 += 112;
      *(_DWORD *)(v20 + 105) = v66[0];
    }
    while (v38 != v8);
  }
  v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v25 = v37;
  objc_msgSend(v37, "setWcmWiFiCellCoexIssueTable:", v24);
  v26 = objc_msgSend(v25, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v26, "configureBy:", v39);
  objc_msgSend(v25, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v25, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequencies:", &off_100243590);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannels:", &off_100243620);
  objc_msgSend(v25, "setWcmCellularWCI2ModeControllerLTERBThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41));
  objc_msgSend(v25, "setWcmCellularWCI2ModeLTEHarqnackratioThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v25, "setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
  v64 = NSArray;
  v65 = NSDictionary;
  v27 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v28 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v29 = objc_msgSend(v64, "arrayWithObjects:", v27, v28, 0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileDefault:", objc_msgSend(v65, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v29,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v65 = NSDictionary;
  v30 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileLight:", objc_msgSend(v65, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v30,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v65 = NSDictionary;
  v31 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileHeavyHFP:", objc_msgSend(v65, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B90,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v31,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v65 = NSDictionary;
  v32 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileHeavyA2DP:", objc_msgSend(v65, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v32,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v65 = NSDictionary;
  v33 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_100231950,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v34 = objc_msgSend(v65, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v33,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  return objc_msgSend(v37, "setWcmWiFiBTCoexProfileTDD:", v34);
}

id sub_1000FA9FC(void *a1)
{
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_100231860,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231980,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231BA8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B78, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_100231860,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231B18,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyHFP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231F08,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231F20,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_100231860,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231B18,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyA2DP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231F08,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231F20,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_100231860,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231B18,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  return objc_msgSend(a1, "setWcmWiFiBTCoexProfileTDD:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
             &off_100231AE8,
             CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
             &off_100231AE8,
             CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231AE8,
             CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
             +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
                 &off_100231860,
                 CFSTR("UCM_DESENSE_LEVEL"),
                 &off_100231980,
                 CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_TX_PWR_STRONG_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_TX_PWR_WEAK_RSSI"),
                 0),
               0),
             CFSTR("UCM_CHAIN_ATTR"),
             0));
}

id sub_1000FB1CC(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001E2368);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_100243668);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_1002436B0);
  objc_msgSend(a1, "setWcmCellularWCI2ModeControllerLTERBThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41));
  objc_msgSend(a1, "setWcmCellularWCI2ModeLTEHarqnackratioThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  return objc_msgSend(a1, "setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
}

id sub_1000FB3AC(void *a1)
{
  _UNKNOWN **v2;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001E2AD8);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_1002436F8);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100243740);
  objc_msgSend(a1, "setWcmCellularWCI2ModeControllerLTERBThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41));
  objc_msgSend(a1, "setWcmCellularWCI2ModeLTEHarqnackratioThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(a1, "setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_100231860,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231980,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v2 = &off_100231860;
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", v2, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), v2, CFSTR("UCM_MODE_WEAK_WL"), v2, CFSTR("UCM_MODE_WEAK_BT"), v2, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231BA8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B78, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_100231860,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231B18,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyHFP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", v2, CFSTR("UCM_VERSION"), v2, CFSTR("UCM_MODE_STRONG_WL_BT"), v2, CFSTR("UCM_MODE_WEAK_WL"), v2, CFSTR("UCM_MODE_WEAK_BT"), v2, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231F08,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231F20,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_100231860,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231B18,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyA2DP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", v2, CFSTR("UCM_VERSION"), v2, CFSTR("UCM_MODE_STRONG_WL_BT"), v2, CFSTR("UCM_MODE_WEAK_WL"), v2, CFSTR("UCM_MODE_WEAK_BT"), v2, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231F08,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231F20,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_100231860,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231B18,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  return objc_msgSend(a1, "setWcmWiFiBTCoexProfileTDD:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
             &off_100231AE8,
             CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
             &off_100231AE8,
             CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231AE8,
             CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
             +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
                 &off_100231860,
                 CFSTR("UCM_DESENSE_LEVEL"),
                 &off_100231980,
                 CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_TX_PWR_STRONG_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_TX_PWR_WEAK_RSSI"),
                 0),
               0),
             CFSTR("UCM_CHAIN_ATTR"),
             0));
}

id sub_1000FBE00(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  double v9;
  double v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  WCM_WiFiCellCoexIssueBandTable *v23;
  id v24;
  id v25;
  NSArray *v26;
  id v27;
  id v28;
  NSDictionary *v29;
  NSDictionary *v30;
  id v31;
  NSArray *v32;
  id v33;
  NSArray *v34;
  id v35;
  NSArray *v36;
  id v37;
  _QWORD v39[2];
  char *v40;
  id v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  id v57;
  id v58;
  _DWORD v59[2];
  uint64_t v60;
  uint64_t v61;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  v41 = a1;
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  v60 = 0;
  v61 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex005_v1.2_NewEnum_v4Macro"), (uint64_t)CFSTR("plist")), 2, &v60, &v61);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v39[1] = v39;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v40 = (char *)v39 - v4 * (unint64_t)v5;
  v6 = &v40[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  if (v3)
  {
    v7 = 0;
    v8 = v40 + 56;
    v42 = v3;
    do
    {
      memset(v59, 0, 7);
      LODWORD(v58) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("issueBand")), "intValue");
      LODWORD(v57) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("issueType")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellLAT")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellUAT")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellLAT")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellUAT")), "intValue");
      v51 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v9 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v47 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btDiversityBlocklistTypeForC0B0")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btDiversityBlocklistTypeForC0B1")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btDiversityBlocklistTypeForC1B0")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btDiversityBlocklistTypeForC1B1")), "intValue");
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btFirstChannelToAvoidForC0B0")), "intValue");
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btLastChannelToAvoidForC0B0")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btFirstChannelToAvoidForC0B1")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btLastChannelToAvoidForC0B1")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btFirstChannelToAvoidForC1B0")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btLastChannelToAvoidForC1B0")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btFirstChannelToAvoidForC1B1")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btLastChannelToAvoidForC1B1")), "intValue");
      v19 = v42;
      v20 = (int)v57;
      *((_DWORD *)v8 - 14) = (_DWORD)v58;
      *((_DWORD *)v8 - 13) = v20;
      *(v8 - 48) = v56;
      *(v8 - 47) = v55;
      *(v8 - 46) = v54;
      *(v8 - 45) = v53;
      *(v8 - 44) = v52;
      *(_QWORD *)(v8 - 35) = 0;
      *(_QWORD *)(v8 - 43) = 0;
      *((_DWORD *)v8 - 7) = 0;
      *((_QWORD *)v8 - 3) = v51;
      *((double *)v8 - 2) = v9;
      *((double *)v8 - 1) = v10;
      *v8 = v50;
      v8[1] = v49;
      v8[2] = v48;
      v8[3] = v47;
      v21 = v45;
      *((_DWORD *)v8 + 1) = v46;
      *((_DWORD *)v8 + 2) = v21;
      v22 = v43;
      *((_DWORD *)v8 + 3) = v44;
      *((_DWORD *)v8 + 4) = v22;
      v8[20] = v11;
      v8[21] = v12;
      v8[22] = v13;
      v8[23] = v14;
      v8[24] = v15;
      v8[25] = v16;
      v8[26] = v17;
      v8[27] = v18;
      *(_QWORD *)(v8 + 36) = 0;
      *(_QWORD *)(v8 + 28) = 0;
      *(_QWORD *)(v8 + 41) = 0;
      *((_DWORD *)v8 + 13) = *(_DWORD *)((char *)v59 + 3);
      ++v7;
      *(_DWORD *)(v8 + 49) = v59[0];
      v8 += 112;
    }
    while (v19 != v7);
  }
  v23 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v24 = v41;
  objc_msgSend(v41, "setWcmWiFiCellCoexIssueTable:", v23);
  v25 = objc_msgSend(v24, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v25, "configureBy:", v40);
  objc_msgSend(v24, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(v24, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(v24, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v24, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(v24, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(v24, "setWcmCellularScanProtectionCellFrequencies:", &off_100243788);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiChannels:", &off_1002437D0);
  objc_msgSend(v24, "setWcmCellularWCI2ModeControllerLTERBThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41));
  objc_msgSend(v24, "setWcmCellularWCI2ModeLTEHarqnackratioThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v24, "setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
  v58 = NSDictionary;
  v26 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_100231860,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v27 = objc_msgSend(v58, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          v26,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  v28 = v41;
  objc_msgSend(v41, "setWcmWiFiBTCoexProfileDefault:", v27);
  v57 = NSArray;
  v58 = NSDictionary;
  v29 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v30 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v31 = objc_msgSend(v57, "arrayWithObjects:", v29, v30, 0);
  objc_msgSend(v28, "setWcmWiFiBTCoexProfileLight:", objc_msgSend(v58, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231BA8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B78, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      v31,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v58 = NSDictionary;
  v32 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_100231860,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B18,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v33 = objc_msgSend(v58, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231F08, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231F20,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          v32,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v41, "setWcmWiFiBTCoexProfileHeavyHFP:", v33);
  v58 = NSDictionary;
  v34 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_100231860,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B18,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v35 = objc_msgSend(v58, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231F08, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231F20,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          v34,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v41, "setWcmWiFiBTCoexProfileHeavyA2DP:", v35);
  v58 = NSDictionary;
  v36 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_100231860,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v37 = objc_msgSend(v58, "dictionaryWithObjectsAndKeys:", &off_100231860, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          v36,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  return objc_msgSend(v41, "setWcmWiFiBTCoexProfileTDD:", v37);
}

id sub_1000FCE64(void *a1)
{
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_100231950,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231980,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyHFP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B90,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyA2DP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_LEVEL"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  return objc_msgSend(a1, "setWcmWiFiBTCoexProfileTDD:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
             &off_100231AE8,
             CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
             &off_100231B00,
             CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
             &off_100231AB8,
             CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
             &off_100231B00,
             CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231AB8,
             CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
             +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
                 &off_100231950,
                 CFSTR("UCM_DESENSE_LEVEL"),
                 &off_100231980,
                 CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_TX_PWR_STRONG_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_TX_PWR_WEAK_RSSI"),
                 0),
               0),
             CFSTR("UCM_CHAIN_ATTR"),
             0));
}

id sub_1000FD73C(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  char *v20;
  int v21;
  char v22;
  unsigned int v23;
  WCM_WiFiCellCoexIssueBandTable *v24;
  id v25;
  id v26;
  NSDictionary *v27;
  NSDictionary *v28;
  id v29;
  NSArray *v30;
  NSArray *v31;
  NSArray *v32;
  NSDictionary *v33;
  NSDictionary *v34;
  id v35;
  _QWORD v37[2];
  id v38;
  uint64_t v39;
  char *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  id v65;
  id v66;
  _DWORD v67[2];
  __int16 v68;
  char v69;
  uint64_t v70;
  uint64_t v71;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231BC0);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  v38 = a1;
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v70 = 0;
  v71 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex017_V6WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v70, &v71);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v37[1] = v37;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v40 = (char *)v37 - v4 * (unint64_t)v5;
  v6 = &v40[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = 0;
    v39 = 112 * v7;
    do
    {
      v68 = 0;
      v69 = 0;
      v67[0] = 0;
      *(_DWORD *)((char *)v67 + 3) = 0;
      LODWORD(v66) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("issueBand")), "intValue");
      LODWORD(v65) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("issueType")), "intValue");
      v64 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v63 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v62 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v61 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v60 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v59 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v47 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9++), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue");
      v20 = &v40[v8];
      v21 = (int)v65;
      *(_DWORD *)v20 = (_DWORD)v66;
      *((_DWORD *)v20 + 1) = v21;
      v20[8] = v64;
      v22 = v62;
      v20[13] = v63;
      *(_DWORD *)(v20 + 9) = 0;
      v20[14] = v22;
      v20[15] = v61;
      v20[16] = v60;
      v20[17] = v59;
      v20[18] = v58;
      v20[19] = v57;
      v20[20] = v56;
      v20[21] = v55;
      v20[22] = v54;
      v20[23] = v53;
      v20[24] = v52;
      v20[25] = v51;
      v20[26] = v50;
      v20[27] = v49;
      v20[28] = v48;
      *(_WORD *)(v20 + 29) = v68;
      v20[31] = v69;
      *((_QWORD *)v20 + 4) = v47;
      *((double *)v20 + 5) = v10;
      *((double *)v20 + 6) = v11;
      v20[56] = v46;
      v20[57] = v45;
      v20[58] = v44;
      v20[59] = v43;
      v23 = v42;
      *((_DWORD *)v20 + 15) = 0;
      *((_DWORD *)v20 + 16) = v23;
      *(_QWORD *)(v20 + 68) = 0;
      *((_WORD *)v20 + 38) = 0;
      v20[78] = v41;
      v20[79] = v12;
      *((_QWORD *)v20 + 10) = 0;
      v20[88] = 0;
      v20[89] = v13;
      v20[90] = v14;
      v20[91] = v15;
      v20[92] = 0;
      v20[93] = v16;
      v20[94] = v17;
      v20[95] = v18;
      v20[96] = v19 != 0;
      *(_QWORD *)(v20 + 97) = 0;
      *((_DWORD *)v20 + 27) = *(_DWORD *)((char *)v67 + 3);
      v8 += 112;
      *(_DWORD *)(v20 + 105) = v67[0];
    }
    while (v39 != v8);
  }
  v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v25 = v38;
  objc_msgSend(v38, "setWcmWiFiCellCoexIssueTable:", v24);
  v26 = objc_msgSend(v25, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v26, "configureBy:", v40);
  objc_msgSend(v25, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v25, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequencies:", &off_100243800);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequenciesforBT:", &off_100243830);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannels:", &off_100243860);
  objc_msgSend(v25, "setWcmCellularWCI2ModeControllerLTERBThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41));
  objc_msgSend(v25, "setWcmCellularWCI2ModeLTEHarqnackratioThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v25, "setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
  v65 = NSArray;
  v66 = NSDictionary;
  v27 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v28 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v29 = objc_msgSend(v65, "arrayWithObjects:", v27, v28, 0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileDefault:", objc_msgSend(v66, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v29,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v66 = NSDictionary;
  v30 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileLight:", objc_msgSend(v66, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v30,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v66 = NSDictionary;
  v31 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileHeavyHFP:", objc_msgSend(v66, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B90,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v31,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v66 = NSDictionary;
  v32 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileHeavyA2DP:", objc_msgSend(v66, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v32,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v65 = NSArray;
  v66 = NSDictionary;
  v33 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v34 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v35 = objc_msgSend(v65, "arrayWithObjects:", v33, v34, 0);
  return objc_msgSend(v25, "setWcmWiFiBTCoexProfileTDD:", objc_msgSend(v66, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
             &off_100231AE8,
             CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
             &off_100231B00,
             CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
             &off_100231AB8,
             CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
             &off_100231B00,
             CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231AB8,
             CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
             v35,
             CFSTR("UCM_CHAIN_ATTR"),
             0));
}

id sub_1000FEAC0(void *a1)
{
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231950, CFSTR("UCM_MODE_WEAK_WL"), &off_100231950, CFSTR("UCM_MODE_WEAK_BT"), &off_100231950, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231F38, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231F38, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231A58, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231A58, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231A58, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231A58, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231F38,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231A58,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231A58,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231A58,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231A58,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231950, CFSTR("UCM_MODE_WEAK_WL"), &off_100231950, CFSTR("UCM_MODE_WEAK_BT"), &off_100231950, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231F50, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231F50, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231F38, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231F38, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231A58, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231A58, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_100231F50,
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231F50,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231830,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231A58,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231A58,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231A58,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyHFP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231950, CFSTR("UCM_MODE_WEAK_WL"), &off_100231950, CFSTR("UCM_MODE_WEAK_BT"), &off_100231950, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B90,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231F50, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231F50, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231F38, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231F38, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231A58, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231A58, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231F50,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231830,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231A58,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231A58,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231A58,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyA2DP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231950, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231950, CFSTR("UCM_MODE_WEAK_WL"), &off_100231950, CFSTR("UCM_MODE_WEAK_BT"), &off_100231950, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231F50, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231F50, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231F38, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231F38, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231A58, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231A58, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_100231F50,
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231F50,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231830,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231A58,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231A58,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231A58,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  return objc_msgSend(a1, "setWcmWiFiBTCoexProfileTDD:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231950, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231950, CFSTR("UCM_MODE_WEAK_WL"), &off_100231950, CFSTR("UCM_MODE_WEAK_BT"), &off_100231950, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
             &off_100231AE8,
             CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
             &off_100231B00,
             CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
             &off_100231AB8,
             CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
             &off_100231B00,
             CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231AB8,
             CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
             +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231F38, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231A58, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231A58, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231A58, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231A58, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary,
                 "dictionaryWithObjectsAndKeys:",
                 &off_100231F38,
                 CFSTR("UCM_DESENSE_STRONG_RSSI"),
                 &off_100231F38,
                 CFSTR("UCM_DESENSE_WEAK_RSSI"),
                 &off_100231A58,
                 CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
                 &off_100231A58,
                 CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
                 &off_100231A58,
                 CFSTR("UCM_TX_PWR_STRONG_RSSI"),
                 &off_100231A58,
                 CFSTR("UCM_TX_PWR_WEAK_RSSI"),
                 0),
               0),
             CFSTR("UCM_CHAIN_ATTR"),
             0));
}

id sub_1000FF3F0(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  WCM_WiFiCellCoexIssueBandTable *v24;
  id v25;
  id v26;
  NSDictionary *v27;
  NSDictionary *v28;
  id v29;
  NSArray *v30;
  NSArray *v31;
  NSArray *v32;
  NSDictionary *v33;
  NSDictionary *v34;
  id v35;
  _QWORD v37[2];
  id v38;
  char *v39;
  uint64_t v40;
  _BOOL4 v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  id v73;
  id v74;
  _DWORD v75[2];
  __int16 v76;
  char v77;
  uint64_t v78;
  uint64_t v79;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  v38 = a1;
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v78 = 0;
  v79 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex046_V7WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v78, &v79);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v37[1] = v37;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v39 = (char *)v37 - v4 * (unint64_t)v5;
  v6 = &v39[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = v39 + 56;
    v40 = v7;
    do
    {
      v76 = 0;
      v77 = 0;
      v75[0] = 0;
      *(_DWORD *)((char *)v75 + 3) = 0;
      LODWORD(v74) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueBand")), "intValue");
      LODWORD(v73) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueType")), "intValue");
      v72 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v71 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v70 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v69 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v68 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v67 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v66 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v65 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v64 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v63 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v62 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v61 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v60 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v59 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v55 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v47 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue") != 0;
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOBPHS")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOBPHS")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii1Enabled")), "BOOLValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii3Enabled")), "BOOLValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5aEnabled")), "BOOLValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5bEnabled")), "BOOLValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5cEnabled")), "BOOLValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5dEnabled")), "BOOLValue");
      v20 = (int)v73;
      *((_DWORD *)v9 - 14) = (_DWORD)v74;
      *((_DWORD *)v9 - 13) = v20;
      *(v9 - 48) = v72;
      *(v9 - 43) = v71;
      *(v9 - 42) = v70;
      *(v9 - 41) = v69;
      *(v9 - 40) = v68;
      *(v9 - 39) = v67;
      *(v9 - 38) = v66;
      *(v9 - 37) = v65;
      *(v9 - 36) = v64;
      *(_DWORD *)(v9 - 47) = 0;
      *(v9 - 35) = v63;
      *(v9 - 34) = v62;
      *(v9 - 33) = v61;
      *(v9 - 32) = v60;
      *(v9 - 31) = v59;
      *(v9 - 30) = v58;
      *(v9 - 29) = v57;
      *(v9 - 28) = v56;
      *(_WORD *)(v9 - 27) = v76;
      *(v9 - 25) = v77;
      *((_QWORD *)v9 - 3) = v55;
      *((double *)v9 - 2) = v10;
      *((double *)v9 - 1) = v11;
      *v9 = v54;
      v9[1] = v53;
      v9[2] = v52;
      v9[3] = v51;
      v21 = v50;
      *((_DWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 2) = v21;
      *(_QWORD *)(v9 + 12) = 0;
      *((_WORD *)v9 + 10) = 0;
      v9[22] = v49;
      v9[23] = v48;
      *((_QWORD *)v9 + 3) = 0;
      v9[32] = 0;
      v9[33] = v47;
      v9[34] = v46;
      v9[35] = v45;
      v9[36] = 0;
      v9[37] = v44;
      v9[38] = v43;
      v9[39] = v42;
      v9[40] = v41;
      v9[41] = v12;
      v9[42] = v13;
      v9[43] = v14;
      v9[44] = v15;
      v9[45] = v16;
      v9[46] = v17;
      v9[47] = v18;
      v9[48] = v19;
      v22 = v75[0];
      ++v8;
      *((_DWORD *)v9 + 13) = *(_DWORD *)((char *)v75 + 3);
      v23 = v40;
      *(_DWORD *)(v9 + 49) = v22;
      v9 += 112;
    }
    while (v23 != v8);
  }
  v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v25 = v38;
  objc_msgSend(v38, "setWcmWiFiCellCoexIssueTable:", v24);
  v26 = objc_msgSend(v25, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v26, "configureBy:", v39);
  objc_msgSend(v25, "setWcmCellRc1CoexIssueTable:", 0);
  objc_msgSend(v25, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v25, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequencies:", &off_100243890);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequenciesforBT:", &off_1002438C0);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannels:", &off_1002438F0);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannelsWiFiEnh:", &off_100243920);
  objc_msgSend(v25, "setWcmCellularWCI2ModeControllerLTERBThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41));
  objc_msgSend(v25, "setWcmCellularWCI2ModeLTEHarqnackratioThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v25, "setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
  v73 = NSArray;
  v74 = NSDictionary;
  v27 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v28 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v29 = objc_msgSend(v73, "arrayWithObjects:", v27, v28, 0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileDefault:", objc_msgSend(v74, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v29,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v74 = NSDictionary;
  v30 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileLight:", objc_msgSend(v74, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v30,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v74 = NSDictionary;
  v31 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileHeavyHFP:", objc_msgSend(v74, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B90,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v31,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v74 = NSDictionary;
  v32 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileHeavyA2DP:", objc_msgSend(v74, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v32,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v73 = NSArray;
  v74 = NSDictionary;
  v33 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v34 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v35 = objc_msgSend(v73, "arrayWithObjects:", v33, v34, 0);
  return objc_msgSend(v25, "setWcmWiFiBTCoexProfileTDD:", objc_msgSend(v74, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
             &off_100231AE8,
             CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
             &off_100231B00,
             CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
             &off_100231AB8,
             CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
             &off_100231B00,
             CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231AB8,
             CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
             v35,
             CFSTR("UCM_CHAIN_ATTR"),
             0));
}

id sub_100100904(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001E3248);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_100243968);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_1002439B0);
  objc_msgSend(a1, "setWcmCellularWCI2ModeControllerLTERBThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41));
  objc_msgSend(a1, "setWcmCellularWCI2ModeLTEHarqnackratioThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  return objc_msgSend(a1, "setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
}

id sub_100100B20(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001E4208);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_1002439F8);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100243A40);
  objc_msgSend(a1, "setWcmCellularWCI2ModeControllerLTERBThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41));
  objc_msgSend(a1, "setWcmCellularWCI2ModeLTEHarqnackratioThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  return objc_msgSend(a1, "setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
}

id sub_100100D3C(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001E51C8);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_100243A88);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100243AD0);
  objc_msgSend(a1, "setWcmCellularWCI2ModeControllerLTERBThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41));
  objc_msgSend(a1, "setWcmCellularWCI2ModeLTEHarqnackratioThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  return objc_msgSend(a1, "setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
}

id sub_100101024(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001E6188);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_100243B18);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100243B60);
  objc_msgSend(a1, "setWcmCellularWCI2ModeControllerLTERBThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41));
  objc_msgSend(a1, "setWcmCellularWCI2ModeLTEHarqnackratioThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  return objc_msgSend(a1, "setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
}

id sub_10010130C(void *a1)
{
  _UNKNOWN **v1;
  _UNKNOWN **v2;

  objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_1002318C0, CFSTR("UCM_MODE_WEAK_WL"), &off_1002318C0, CFSTR("UCM_MODE_WEAK_BT"), &off_1002318C0, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231F68, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231860,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231B30,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v1 = &off_1002318C0;
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), v1, CFSTR("UCM_MODE_STRONG_WL_BT"), v1, CFSTR("UCM_MODE_WEAK_WL"), v1, CFSTR("UCM_MODE_WEAK_BT"), v1, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231F68, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231860,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231B30,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavy:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), v1, CFSTR("UCM_MODE_STRONG_WL_BT"), v1, CFSTR("UCM_MODE_WEAK_WL"), v1, CFSTR("UCM_MODE_WEAK_BT"), v1, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231F68, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231860,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231B30,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v2 = &off_1002318C0;
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHPPHeavy:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318D8, CFSTR("UCM_MODE_STRONG_WL_BT"), v2, CFSTR("UCM_MODE_WEAK_WL"), &off_1002318D8, CFSTR("UCM_MODE_WEAK_BT"), v2, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231F68, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231F68, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231860,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231B30,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHPP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318D8, CFSTR("UCM_MODE_STRONG_WL_BT"), v2, CFSTR("UCM_MODE_WEAK_WL"), &off_1002318D8, CFSTR("UCM_MODE_WEAK_BT"), v2, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231F68, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231F68, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231860,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231B30,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  return objc_msgSend(a1, "setWcmWiFiBTCoexProfileTDD:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
             &off_100231AE8,
             CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
             &off_100231AE8,
             CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231AE8,
             CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231AD0,
             CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
             +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
                 NSDictionary,
                 "dictionaryWithObjectsAndKeys:",
                 CFSTR("UCM_DESENSE_STRONG_RSSI"),
                 &off_100231950,
                 CFSTR("UCM_DESENSE_WEAK_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_TX_PWR_STRONG_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_TX_PWR_WEAK_RSSI"),
                 0),
               0),
             CFSTR("UCM_CHAIN_ATTR"),
             0));
}

id sub_100101DE4(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  double v9;
  double v10;
  unsigned __int8 v11;
  unsigned int v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  int v20;
  WCM_WiFiCellCoexIssueBandTable *v21;
  id v22;
  id v23;
  NSDictionary *v24;
  NSDictionary *v25;
  id v26;
  NSArray *v27;
  NSArray *v28;
  NSArray *v29;
  NSArray *v30;
  id v31;
  uint64_t v33;
  char *v34;
  id v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  id v58;
  id v59;
  _DWORD v60[2];
  __int16 v61;
  char v62;
  uint64_t v63;
  uint64_t v64;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  v35 = a1;
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v63 = 0;
  v64 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex001_v1.1_NewEnum_v4Macro"), (uint64_t)CFSTR("plist")), 2, &v63, &v64);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v33 = (uint64_t)&v33;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v34 = (char *)&v33 - v4 * (unint64_t)v5;
  v6 = &v34[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  if (v3)
  {
    v7 = 0;
    v8 = v34 + 56;
    v36 = v3;
    do
    {
      v61 = 0;
      v62 = 0;
      v60[0] = 0;
      *(_DWORD *)((char *)v60 + 3) = 0;
      LODWORD(v59) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("issueBand")), "intValue");
      LODWORD(v58) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("issueType")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v47 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v40 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v9 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v39 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v38 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v37 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v19 = v36;
      v20 = (int)v58;
      *((_DWORD *)v8 - 14) = (_DWORD)v59;
      *((_DWORD *)v8 - 13) = v20;
      *(v8 - 48) = v57;
      *(v8 - 43) = v56;
      *(v8 - 42) = v55;
      *(v8 - 41) = v54;
      *(v8 - 40) = v53;
      *(v8 - 39) = v52;
      *(v8 - 38) = v51;
      *(v8 - 37) = v50;
      *(v8 - 36) = v49;
      *(v8 - 35) = v48;
      *(v8 - 34) = v47;
      *(v8 - 33) = v46;
      *(v8 - 32) = v45;
      *(v8 - 31) = v44;
      *(v8 - 30) = v43;
      *(v8 - 29) = v42;
      *(v8 - 28) = v41;
      *(_WORD *)(v8 - 27) = v61;
      *(v8 - 25) = v62;
      *((_QWORD *)v8 - 3) = v40;
      *v8 = v39;
      v8[1] = v38;
      v8[2] = v37;
      v8[3] = v11;
      *((_DWORD *)v8 + 1) = 0;
      *((_DWORD *)v8 + 2) = v12;
      v8[22] = v13;
      v8[23] = v14;
      v8[33] = v15;
      v8[34] = v16;
      v8[35] = v17;
      v8[37] = v18;
      *((_DWORD *)v8 + 13) = *(_DWORD *)((char *)v60 + 3);
      *(_DWORD *)(v8 + 49) = v60[0];
      *(_DWORD *)(v8 - 47) = 0;
      *((double *)v8 - 2) = v9;
      *((double *)v8 - 1) = v10;
      *(_QWORD *)(v8 + 12) = 0;
      *((_WORD *)v8 + 10) = 0;
      *((_QWORD *)v8 + 3) = 0;
      v8[32] = 0;
      v8[36] = 0;
      ++v7;
      *(_QWORD *)(v8 + 38) = 0;
      *(_DWORD *)(v8 + 45) = 0;
      v8 += 112;
    }
    while (v19 != v7);
  }
  v21 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v22 = v35;
  objc_msgSend(v35, "setWcmWiFiCellCoexIssueTable:", v21);
  v23 = objc_msgSend(v22, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v23, "configureBy:", v34);
  objc_msgSend(v22, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(v22, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(v22, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v22, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v22, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(v22, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(v22, "setWcmCellularScanProtectionCellFrequencies:", &off_100243BF0);
  objc_msgSend(v22, "setWcmCellularScanProtectionWiFiChannels:", &off_100243C80);
  objc_msgSend(v22, "setWcmCellularWCI2ModeControllerLTERBThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41));
  objc_msgSend(v22, "setWcmCellularWCI2ModeLTEHarqnackratioThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v22, "setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
  v58 = NSArray;
  v59 = NSDictionary;
  v24 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v25 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v26 = objc_msgSend(v58, "arrayWithObjects:", v24, v25, 0);
  objc_msgSend(v22, "setWcmWiFiBTCoexProfileDefault:", objc_msgSend(v59, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v26,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v59 = NSDictionary;
  v27 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  objc_msgSend(v22, "setWcmWiFiBTCoexProfileLight:", objc_msgSend(v59, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v27,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v59 = NSDictionary;
  v28 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  objc_msgSend(v22, "setWcmWiFiBTCoexProfileHeavyHFP:", objc_msgSend(v59, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B90,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v28,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v59 = NSDictionary;
  v29 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  objc_msgSend(v22, "setWcmWiFiBTCoexProfileHeavyA2DP:", objc_msgSend(v59, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v29,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v59 = NSDictionary;
  v30 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_100231950,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v31 = objc_msgSend(v59, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v30,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  return objc_msgSend(v35, "setWcmWiFiBTCoexProfileTDD:", v31);
}

id sub_1001030F8(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  double v9;
  double v10;
  unsigned __int8 v11;
  unsigned int v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  int v20;
  WCM_WiFiCellCoexIssueBandTable *v21;
  id v22;
  id v23;
  NSDictionary *v24;
  NSDictionary *v25;
  id v26;
  NSArray *v27;
  NSArray *v28;
  NSArray *v29;
  NSArray *v30;
  id v31;
  uint64_t v33;
  char *v34;
  id v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  id v58;
  id v59;
  _DWORD v60[2];
  __int16 v61;
  char v62;
  uint64_t v63;
  uint64_t v64;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  v35 = a1;
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v63 = 0;
  v64 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex001_v1.1_NewEnum_v4Macro"), (uint64_t)CFSTR("plist")), 2, &v63, &v64);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v33 = (uint64_t)&v33;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v34 = (char *)&v33 - v4 * (unint64_t)v5;
  v6 = &v34[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  if (v3)
  {
    v7 = 0;
    v8 = v34 + 56;
    v36 = v3;
    do
    {
      v61 = 0;
      v62 = 0;
      v60[0] = 0;
      *(_DWORD *)((char *)v60 + 3) = 0;
      LODWORD(v59) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("issueBand")), "intValue");
      LODWORD(v58) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("issueType")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v47 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v40 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v9 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v39 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v38 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v37 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v19 = v36;
      v20 = (int)v58;
      *((_DWORD *)v8 - 14) = (_DWORD)v59;
      *((_DWORD *)v8 - 13) = v20;
      *(v8 - 48) = v57;
      *(v8 - 43) = v56;
      *(v8 - 42) = v55;
      *(v8 - 41) = v54;
      *(v8 - 40) = v53;
      *(v8 - 39) = v52;
      *(v8 - 38) = v51;
      *(v8 - 37) = v50;
      *(v8 - 36) = v49;
      *(v8 - 35) = v48;
      *(v8 - 34) = v47;
      *(v8 - 33) = v46;
      *(v8 - 32) = v45;
      *(v8 - 31) = v44;
      *(v8 - 30) = v43;
      *(v8 - 29) = v42;
      *(v8 - 28) = v41;
      *(_WORD *)(v8 - 27) = v61;
      *(v8 - 25) = v62;
      *((_QWORD *)v8 - 3) = v40;
      *v8 = v39;
      v8[1] = v38;
      v8[2] = v37;
      v8[3] = v11;
      *((_DWORD *)v8 + 1) = 0;
      *((_DWORD *)v8 + 2) = v12;
      v8[22] = v13;
      v8[23] = v14;
      v8[33] = v15;
      v8[34] = v16;
      v8[35] = v17;
      v8[37] = v18;
      *((_DWORD *)v8 + 13) = *(_DWORD *)((char *)v60 + 3);
      *(_DWORD *)(v8 + 49) = v60[0];
      *(_DWORD *)(v8 - 47) = 0;
      *((double *)v8 - 2) = v9;
      *((double *)v8 - 1) = v10;
      *(_QWORD *)(v8 + 12) = 0;
      *((_WORD *)v8 + 10) = 0;
      *((_QWORD *)v8 + 3) = 0;
      v8[32] = 0;
      v8[36] = 0;
      ++v7;
      *(_QWORD *)(v8 + 38) = 0;
      *(_DWORD *)(v8 + 45) = 0;
      v8 += 112;
    }
    while (v19 != v7);
  }
  v21 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v22 = v35;
  objc_msgSend(v35, "setWcmWiFiCellCoexIssueTable:", v21);
  v23 = objc_msgSend(v22, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v23, "configureBy:", v34);
  objc_msgSend(v22, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(v22, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(v22, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v22, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v22, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(v22, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(v22, "setWcmCellularScanProtectionCellFrequencies:", &off_100243D10);
  objc_msgSend(v22, "setWcmCellularScanProtectionWiFiChannels:", &off_100243DA0);
  objc_msgSend(v22, "setWcmCellularWCI2ModeControllerLTERBThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41));
  objc_msgSend(v22, "setWcmCellularWCI2ModeLTEHarqnackratioThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v22, "setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
  v58 = NSArray;
  v59 = NSDictionary;
  v24 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v25 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v26 = objc_msgSend(v58, "arrayWithObjects:", v24, v25, 0);
  objc_msgSend(v22, "setWcmWiFiBTCoexProfileDefault:", objc_msgSend(v59, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v26,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v59 = NSDictionary;
  v27 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  objc_msgSend(v22, "setWcmWiFiBTCoexProfileLight:", objc_msgSend(v59, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v27,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v59 = NSDictionary;
  v28 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  objc_msgSend(v22, "setWcmWiFiBTCoexProfileHeavyHFP:", objc_msgSend(v59, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B90,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v28,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v59 = NSDictionary;
  v29 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  objc_msgSend(v22, "setWcmWiFiBTCoexProfileHeavyA2DP:", objc_msgSend(v59, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v29,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v59 = NSDictionary;
  v30 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_100231950,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v31 = objc_msgSend(v59, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v30,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  return objc_msgSend(v35, "setWcmWiFiBTCoexProfileTDD:", v31);
}

id sub_10010440C(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  double v9;
  double v10;
  unsigned __int8 v11;
  unsigned int v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  int v20;
  WCM_WiFiCellCoexIssueBandTable *v21;
  id v22;
  id v23;
  NSDictionary *v24;
  NSDictionary *v25;
  id v26;
  NSArray *v27;
  NSArray *v28;
  NSArray *v29;
  NSArray *v30;
  id v31;
  uint64_t v33;
  char *v34;
  id v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  id v58;
  id v59;
  _DWORD v60[2];
  __int16 v61;
  char v62;
  uint64_t v63;
  uint64_t v64;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  v35 = a1;
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v63 = 0;
  v64 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex002_v1_NewEnum_v4Macro"), (uint64_t)CFSTR("plist")), 2, &v63, &v64);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v33 = (uint64_t)&v33;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v34 = (char *)&v33 - v4 * (unint64_t)v5;
  v6 = &v34[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  if (v3)
  {
    v7 = 0;
    v8 = v34 + 56;
    v36 = v3;
    do
    {
      v61 = 0;
      v62 = 0;
      v60[0] = 0;
      *(_DWORD *)((char *)v60 + 3) = 0;
      LODWORD(v59) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("issueBand")), "intValue");
      LODWORD(v58) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("issueType")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v47 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v40 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v9 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v39 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v38 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v37 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v19 = v36;
      v20 = (int)v58;
      *((_DWORD *)v8 - 14) = (_DWORD)v59;
      *((_DWORD *)v8 - 13) = v20;
      *(v8 - 48) = v57;
      *(v8 - 43) = v56;
      *(v8 - 42) = v55;
      *(v8 - 41) = v54;
      *(v8 - 40) = v53;
      *(v8 - 39) = v52;
      *(v8 - 38) = v51;
      *(v8 - 37) = v50;
      *(v8 - 36) = v49;
      *(v8 - 35) = v48;
      *(v8 - 34) = v47;
      *(v8 - 33) = v46;
      *(v8 - 32) = v45;
      *(v8 - 31) = v44;
      *(v8 - 30) = v43;
      *(v8 - 29) = v42;
      *(v8 - 28) = v41;
      *(_WORD *)(v8 - 27) = v61;
      *(v8 - 25) = v62;
      *((_QWORD *)v8 - 3) = v40;
      *v8 = v39;
      v8[1] = v38;
      v8[2] = v37;
      v8[3] = v11;
      *((_DWORD *)v8 + 1) = 0;
      *((_DWORD *)v8 + 2) = v12;
      v8[22] = v13;
      v8[23] = v14;
      v8[33] = v15;
      v8[34] = v16;
      v8[35] = v17;
      v8[37] = v18;
      *((_DWORD *)v8 + 13) = *(_DWORD *)((char *)v60 + 3);
      *(_DWORD *)(v8 + 49) = v60[0];
      *(_DWORD *)(v8 - 47) = 0;
      *((double *)v8 - 2) = v9;
      *((double *)v8 - 1) = v10;
      *(_QWORD *)(v8 + 12) = 0;
      *((_WORD *)v8 + 10) = 0;
      *((_QWORD *)v8 + 3) = 0;
      v8[32] = 0;
      v8[36] = 0;
      ++v7;
      *(_QWORD *)(v8 + 38) = 0;
      *(_DWORD *)(v8 + 45) = 0;
      v8 += 112;
    }
    while (v19 != v7);
  }
  v21 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v22 = v35;
  objc_msgSend(v35, "setWcmWiFiCellCoexIssueTable:", v21);
  v23 = objc_msgSend(v22, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v23, "configureBy:", v34);
  objc_msgSend(v22, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(v22, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(v22, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v22, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v22, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(v22, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(v22, "setWcmCellularScanProtectionCellFrequencies:", &off_100243E30);
  objc_msgSend(v22, "setWcmCellularScanProtectionWiFiChannels:", &off_100243EC0);
  objc_msgSend(v22, "setWcmCellularWCI2ModeControllerLTERBThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41));
  objc_msgSend(v22, "setWcmCellularWCI2ModeLTEHarqnackratioThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v22, "setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
  v58 = NSArray;
  v59 = NSDictionary;
  v24 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v25 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v26 = objc_msgSend(v58, "arrayWithObjects:", v24, v25, 0);
  objc_msgSend(v22, "setWcmWiFiBTCoexProfileDefault:", objc_msgSend(v59, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v26,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v59 = NSDictionary;
  v27 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  objc_msgSend(v22, "setWcmWiFiBTCoexProfileLight:", objc_msgSend(v59, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v27,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v59 = NSDictionary;
  v28 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  objc_msgSend(v22, "setWcmWiFiBTCoexProfileHeavyHFP:", objc_msgSend(v59, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B90,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v28,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v59 = NSDictionary;
  v29 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  objc_msgSend(v22, "setWcmWiFiBTCoexProfileHeavyA2DP:", objc_msgSend(v59, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v29,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v59 = NSDictionary;
  v30 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_100231950,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v31 = objc_msgSend(v59, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v30,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  return objc_msgSend(v35, "setWcmWiFiBTCoexProfileTDD:", v31);
}

id sub_100105720(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  double v9;
  double v10;
  unsigned __int8 v11;
  unsigned int v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  int v20;
  WCM_WiFiCellCoexIssueBandTable *v21;
  id v22;
  id v23;
  NSDictionary *v24;
  NSDictionary *v25;
  id v26;
  NSArray *v27;
  NSArray *v28;
  NSArray *v29;
  NSArray *v30;
  id v31;
  uint64_t v33;
  char *v34;
  id v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  id v58;
  id v59;
  _DWORD v60[2];
  __int16 v61;
  char v62;
  uint64_t v63;
  uint64_t v64;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  v35 = a1;
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v63 = 0;
  v64 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex002_v1_NewEnum_v4Macro"), (uint64_t)CFSTR("plist")), 2, &v63, &v64);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v33 = (uint64_t)&v33;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v34 = (char *)&v33 - v4 * (unint64_t)v5;
  v6 = &v34[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  if (v3)
  {
    v7 = 0;
    v8 = v34 + 56;
    v36 = v3;
    do
    {
      v61 = 0;
      v62 = 0;
      v60[0] = 0;
      *(_DWORD *)((char *)v60 + 3) = 0;
      LODWORD(v59) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("issueBand")), "intValue");
      LODWORD(v58) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("issueType")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v47 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v40 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v9 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v39 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v38 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v37 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v19 = v36;
      v20 = (int)v58;
      *((_DWORD *)v8 - 14) = (_DWORD)v59;
      *((_DWORD *)v8 - 13) = v20;
      *(v8 - 48) = v57;
      *(v8 - 43) = v56;
      *(v8 - 42) = v55;
      *(v8 - 41) = v54;
      *(v8 - 40) = v53;
      *(v8 - 39) = v52;
      *(v8 - 38) = v51;
      *(v8 - 37) = v50;
      *(v8 - 36) = v49;
      *(v8 - 35) = v48;
      *(v8 - 34) = v47;
      *(v8 - 33) = v46;
      *(v8 - 32) = v45;
      *(v8 - 31) = v44;
      *(v8 - 30) = v43;
      *(v8 - 29) = v42;
      *(v8 - 28) = v41;
      *(_WORD *)(v8 - 27) = v61;
      *(v8 - 25) = v62;
      *((_QWORD *)v8 - 3) = v40;
      *v8 = v39;
      v8[1] = v38;
      v8[2] = v37;
      v8[3] = v11;
      *((_DWORD *)v8 + 1) = 0;
      *((_DWORD *)v8 + 2) = v12;
      v8[22] = v13;
      v8[23] = v14;
      v8[33] = v15;
      v8[34] = v16;
      v8[35] = v17;
      v8[37] = v18;
      *((_DWORD *)v8 + 13) = *(_DWORD *)((char *)v60 + 3);
      *(_DWORD *)(v8 + 49) = v60[0];
      *(_DWORD *)(v8 - 47) = 0;
      *((double *)v8 - 2) = v9;
      *((double *)v8 - 1) = v10;
      *(_QWORD *)(v8 + 12) = 0;
      *((_WORD *)v8 + 10) = 0;
      *((_QWORD *)v8 + 3) = 0;
      v8[32] = 0;
      v8[36] = 0;
      ++v7;
      *(_QWORD *)(v8 + 38) = 0;
      *(_DWORD *)(v8 + 45) = 0;
      v8 += 112;
    }
    while (v19 != v7);
  }
  v21 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v22 = v35;
  objc_msgSend(v35, "setWcmWiFiCellCoexIssueTable:", v21);
  v23 = objc_msgSend(v22, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v23, "configureBy:", v34);
  objc_msgSend(v22, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(v22, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(v22, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v22, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v22, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(v22, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(v22, "setWcmCellularScanProtectionCellFrequencies:", &off_100243F50);
  objc_msgSend(v22, "setWcmCellularScanProtectionWiFiChannels:", &off_100243FE0);
  objc_msgSend(v22, "setWcmCellularWCI2ModeControllerLTERBThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41));
  objc_msgSend(v22, "setWcmCellularWCI2ModeLTEHarqnackratioThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v22, "setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
  v58 = NSArray;
  v59 = NSDictionary;
  v24 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v25 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v26 = objc_msgSend(v58, "arrayWithObjects:", v24, v25, 0);
  objc_msgSend(v22, "setWcmWiFiBTCoexProfileDefault:", objc_msgSend(v59, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v26,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v59 = NSDictionary;
  v27 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  objc_msgSend(v22, "setWcmWiFiBTCoexProfileLight:", objc_msgSend(v59, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v27,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v59 = NSDictionary;
  v28 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  objc_msgSend(v22, "setWcmWiFiBTCoexProfileHeavyHFP:", objc_msgSend(v59, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B90,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v28,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v59 = NSDictionary;
  v29 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_LEVEL"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_1002318C0,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  objc_msgSend(v22, "setWcmWiFiBTCoexProfileHeavyA2DP:", objc_msgSend(v59, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v29,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v59 = NSDictionary;
  v30 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_LEVEL"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:",
            &off_100231950,
            CFSTR("UCM_DESENSE_LEVEL"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v31 = objc_msgSend(v59, "dictionaryWithObjectsAndKeys:", &off_100231878, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v30,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  return objc_msgSend(v35, "setWcmWiFiBTCoexProfileTDD:", v31);
}

id sub_100106A34(void *a1)
{
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_100231950,
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231950,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231860,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyHFP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B90,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231860,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyA2DP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231860,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileTDD:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231950,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  return objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault5G:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231950, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231950, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
             +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
                 NSDictionary,
                 "dictionaryWithObjectsAndKeys:",
                 CFSTR("UCM_DESENSE_STRONG_RSSI"),
                 &off_100231950,
                 CFSTR("UCM_DESENSE_WEAK_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_TX_PWR_STRONG_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_TX_PWR_WEAK_RSSI"),
                 0),
               0),
             CFSTR("UCM_CHAIN_ATTR"),
             0));
}

id sub_100107508(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  WCM_WiFiCellCoexIssueBandTable *v24;
  id v25;
  id v26;
  NSArray *v27;
  id v28;
  NSDictionary *v29;
  NSDictionary *v30;
  id v31;
  id v32;
  NSDictionary *v33;
  NSDictionary *v34;
  id v35;
  id v36;
  NSDictionary *v37;
  NSDictionary *v38;
  id v39;
  id v40;
  NSArray *v41;
  id v42;
  NSArray *v43;
  id v44;
  _QWORD v46[2];
  char *v47;
  id v48;
  uint64_t v49;
  _BOOL4 v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  id v82;
  id v83;
  _DWORD v84[2];
  __int16 v85;
  char v86;
  uint64_t v87;
  uint64_t v88;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  v48 = a1;
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v87 = 0;
  v88 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex018_V7WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v87, &v88);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v46[1] = v46;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v47 = (char *)v46 - v4 * (unint64_t)v5;
  v6 = &v47[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = v47 + 56;
    v49 = v7;
    do
    {
      v85 = 0;
      v86 = 0;
      v84[0] = 0;
      *(_DWORD *)((char *)v84 + 3) = 0;
      LODWORD(v83) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueBand")), "intValue");
      LODWORD(v82) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueType")), "intValue");
      v81 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v80 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v79 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v78 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v77 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v76 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v75 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v74 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v73 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v72 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v71 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v70 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v69 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v68 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v67 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v66 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v65 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v64 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v63 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v62 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v61 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v60 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v59 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue") != 0;
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOBPHS")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOBPHS")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii1Enabled")), "BOOLValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii3Enabled")), "BOOLValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5aEnabled")), "BOOLValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5bEnabled")), "BOOLValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5cEnabled")), "BOOLValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5dEnabled")), "BOOLValue");
      v20 = (int)v82;
      *((_DWORD *)v9 - 14) = (_DWORD)v83;
      *((_DWORD *)v9 - 13) = v20;
      *(v9 - 48) = v81;
      *(v9 - 43) = v80;
      *(v9 - 42) = v79;
      *(v9 - 41) = v78;
      *(v9 - 40) = v77;
      *(v9 - 39) = v76;
      *(v9 - 38) = v75;
      *(v9 - 37) = v74;
      *(v9 - 36) = v73;
      *(_DWORD *)(v9 - 47) = 0;
      *(v9 - 35) = v72;
      *(v9 - 34) = v71;
      *(v9 - 33) = v70;
      *(v9 - 32) = v69;
      *(v9 - 31) = v68;
      *(v9 - 30) = v67;
      *(v9 - 29) = v66;
      *(v9 - 28) = v65;
      *(_WORD *)(v9 - 27) = v85;
      *(v9 - 25) = v86;
      *((_QWORD *)v9 - 3) = v64;
      *((double *)v9 - 2) = v10;
      *((double *)v9 - 1) = v11;
      *v9 = v63;
      v9[1] = v62;
      v9[2] = v61;
      v9[3] = v60;
      v21 = v59;
      *((_DWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 2) = v21;
      *(_QWORD *)(v9 + 12) = 0;
      *((_WORD *)v9 + 10) = 0;
      v9[22] = v58;
      v9[23] = v57;
      *((_QWORD *)v9 + 3) = 0;
      v9[32] = 0;
      v9[33] = v56;
      v9[34] = v55;
      v9[35] = v54;
      v9[36] = 0;
      v9[37] = v53;
      v9[38] = v52;
      v9[39] = v51;
      v9[40] = v50;
      v9[41] = v12;
      v9[42] = v13;
      v9[43] = v14;
      v9[44] = v15;
      v9[45] = v16;
      v9[46] = v17;
      v9[47] = v18;
      v9[48] = v19;
      v22 = v84[0];
      ++v8;
      *((_DWORD *)v9 + 13) = *(_DWORD *)((char *)v84 + 3);
      v23 = v49;
      *(_DWORD *)(v9 + 49) = v22;
      v9 += 112;
    }
    while (v23 != v8);
  }
  v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v25 = v48;
  objc_msgSend(v48, "setWcmWiFiCellCoexIssueTable:", v24);
  v26 = objc_msgSend(v25, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v26, "configureBy:", v47);
  objc_msgSend(v25, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v25, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequencies:", &off_100244010);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequenciesforBT:", &off_100244040);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannels:", &off_100244070);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannelsWiFiEnh:", &off_1002440A0);
  objc_msgSend(v25, "setWcmCellularWCI2ModeControllerLTERBThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41));
  objc_msgSend(v25, "setWcmCellularWCI2ModeLTEHarqnackratioThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v25, "setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
  v83 = NSDictionary;
  v27 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            CFSTR("UCM_DESENSE_STRONG_RSSI"),
            &off_100231950,
            CFSTR("UCM_DESENSE_WEAK_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v28 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v27,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v48, "setWcmWiFiBTCoexProfileDefault:", v28);
  v82 = NSArray;
  v83 = NSDictionary;
  v29 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v30 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v31 = objc_msgSend(v82, "arrayWithObjects:", v29, v30, 0);
  v32 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231BA8,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B78,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v31,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v48, "setWcmWiFiBTCoexProfileLight:", v32);
  v82 = NSArray;
  v83 = NSDictionary;
  v33 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v34 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v35 = objc_msgSend(v82, "arrayWithObjects:", v33, v34, 0);
  v36 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231B78, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231B90,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v35,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v48, "setWcmWiFiBTCoexProfileHeavyHFP:", v36);
  v82 = NSArray;
  v83 = NSDictionary;
  v37 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v38 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v39 = objc_msgSend(v82, "arrayWithObjects:", v37, v38, 0);
  v40 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231BA8, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231B78,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v39,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v48, "setWcmWiFiBTCoexProfileHeavyA2DP:", v40);
  v83 = NSDictionary;
  v41 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
            NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            CFSTR("UCM_DESENSE_STRONG_RSSI"),
            &off_100231950,
            CFSTR("UCM_DESENSE_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v42 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v41,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v48, "setWcmWiFiBTCoexProfileTDD:", v42);
  v83 = NSDictionary;
  v43 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
            NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            CFSTR("UCM_DESENSE_STRONG_RSSI"),
            &off_100231950,
            CFSTR("UCM_DESENSE_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v44 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231950, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231950, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231950, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231950,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v43,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  return objc_msgSend(v48, "setWcmWiFiBTCoexProfileDefault5G:", v44);
}

id sub_100108C50(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  WCM_WiFiCellCoexIssueBandTable *v24;
  id v25;
  id v26;
  NSArray *v27;
  id v28;
  NSDictionary *v29;
  NSDictionary *v30;
  id v31;
  id v32;
  NSDictionary *v33;
  NSDictionary *v34;
  id v35;
  id v36;
  NSDictionary *v37;
  NSDictionary *v38;
  id v39;
  id v40;
  NSArray *v41;
  id v42;
  NSArray *v43;
  id v44;
  _QWORD v46[2];
  char *v47;
  id v48;
  uint64_t v49;
  _BOOL4 v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  id v82;
  id v83;
  _DWORD v84[2];
  __int16 v85;
  char v86;
  uint64_t v87;
  uint64_t v88;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  v48 = a1;
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v87 = 0;
  v88 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex018_V7WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v87, &v88);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v46[1] = v46;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v47 = (char *)v46 - v4 * (unint64_t)v5;
  v6 = &v47[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = v47 + 56;
    v49 = v7;
    do
    {
      v85 = 0;
      v86 = 0;
      v84[0] = 0;
      *(_DWORD *)((char *)v84 + 3) = 0;
      LODWORD(v83) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueBand")), "intValue");
      LODWORD(v82) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueType")), "intValue");
      v81 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v80 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v79 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v78 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v77 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v76 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v75 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v74 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v73 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v72 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v71 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v70 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v69 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v68 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v67 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v66 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v65 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v64 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v63 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v62 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v61 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v60 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v59 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue") != 0;
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOBPHS")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOBPHS")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii1Enabled")), "BOOLValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii3Enabled")), "BOOLValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5aEnabled")), "BOOLValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5bEnabled")), "BOOLValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5cEnabled")), "BOOLValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5dEnabled")), "BOOLValue");
      v20 = (int)v82;
      *((_DWORD *)v9 - 14) = (_DWORD)v83;
      *((_DWORD *)v9 - 13) = v20;
      *(v9 - 48) = v81;
      *(v9 - 43) = v80;
      *(v9 - 42) = v79;
      *(v9 - 41) = v78;
      *(v9 - 40) = v77;
      *(v9 - 39) = v76;
      *(v9 - 38) = v75;
      *(v9 - 37) = v74;
      *(v9 - 36) = v73;
      *(_DWORD *)(v9 - 47) = 0;
      *(v9 - 35) = v72;
      *(v9 - 34) = v71;
      *(v9 - 33) = v70;
      *(v9 - 32) = v69;
      *(v9 - 31) = v68;
      *(v9 - 30) = v67;
      *(v9 - 29) = v66;
      *(v9 - 28) = v65;
      *(_WORD *)(v9 - 27) = v85;
      *(v9 - 25) = v86;
      *((_QWORD *)v9 - 3) = v64;
      *((double *)v9 - 2) = v10;
      *((double *)v9 - 1) = v11;
      *v9 = v63;
      v9[1] = v62;
      v9[2] = v61;
      v9[3] = v60;
      v21 = v59;
      *((_DWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 2) = v21;
      *(_QWORD *)(v9 + 12) = 0;
      *((_WORD *)v9 + 10) = 0;
      v9[22] = v58;
      v9[23] = v57;
      *((_QWORD *)v9 + 3) = 0;
      v9[32] = 0;
      v9[33] = v56;
      v9[34] = v55;
      v9[35] = v54;
      v9[36] = 0;
      v9[37] = v53;
      v9[38] = v52;
      v9[39] = v51;
      v9[40] = v50;
      v9[41] = v12;
      v9[42] = v13;
      v9[43] = v14;
      v9[44] = v15;
      v9[45] = v16;
      v9[46] = v17;
      v9[47] = v18;
      v9[48] = v19;
      v22 = v84[0];
      ++v8;
      *((_DWORD *)v9 + 13) = *(_DWORD *)((char *)v84 + 3);
      v23 = v49;
      *(_DWORD *)(v9 + 49) = v22;
      v9 += 112;
    }
    while (v23 != v8);
  }
  v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v25 = v48;
  objc_msgSend(v48, "setWcmWiFiCellCoexIssueTable:", v24);
  v26 = objc_msgSend(v25, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v26, "configureBy:", v47);
  objc_msgSend(v25, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v25, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequencies:", &off_1002440D0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequenciesforBT:", &off_100244100);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannels:", &off_100244130);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannelsWiFiEnh:", &off_100244160);
  objc_msgSend(v25, "setWcmCellularWCI2ModeControllerLTERBThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41));
  objc_msgSend(v25, "setWcmCellularWCI2ModeLTEHarqnackratioThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v25, "setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
  v83 = NSDictionary;
  v27 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            CFSTR("UCM_DESENSE_STRONG_RSSI"),
            &off_100231950,
            CFSTR("UCM_DESENSE_WEAK_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v28 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v27,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v48, "setWcmWiFiBTCoexProfileDefault:", v28);
  v82 = NSArray;
  v83 = NSDictionary;
  v29 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v30 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v31 = objc_msgSend(v82, "arrayWithObjects:", v29, v30, 0);
  v32 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231BA8,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B78,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v31,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v48, "setWcmWiFiBTCoexProfileLight:", v32);
  v82 = NSArray;
  v83 = NSDictionary;
  v33 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v34 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v35 = objc_msgSend(v82, "arrayWithObjects:", v33, v34, 0);
  v36 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231B78, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231B90,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v35,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v48, "setWcmWiFiBTCoexProfileHeavyHFP:", v36);
  v82 = NSArray;
  v83 = NSDictionary;
  v37 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v38 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v39 = objc_msgSend(v82, "arrayWithObjects:", v37, v38, 0);
  v40 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231BA8, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231B78,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v39,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v48, "setWcmWiFiBTCoexProfileHeavyA2DP:", v40);
  v83 = NSDictionary;
  v41 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
            NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            CFSTR("UCM_DESENSE_STRONG_RSSI"),
            &off_100231950,
            CFSTR("UCM_DESENSE_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v42 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v41,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v48, "setWcmWiFiBTCoexProfileTDD:", v42);
  v83 = NSDictionary;
  v43 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
            NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            CFSTR("UCM_DESENSE_STRONG_RSSI"),
            &off_100231950,
            CFSTR("UCM_DESENSE_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v44 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231950, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231950, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231950, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231950,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v43,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  return objc_msgSend(v48, "setWcmWiFiBTCoexProfileDefault5G:", v44);
}

id sub_10010A398(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  WCM_WiFiCellCoexIssueBandTable *v24;
  id v25;
  id v26;
  NSArray *v27;
  id v28;
  NSDictionary *v29;
  NSDictionary *v30;
  id v31;
  id v32;
  NSDictionary *v33;
  NSDictionary *v34;
  id v35;
  id v36;
  NSDictionary *v37;
  NSDictionary *v38;
  id v39;
  id v40;
  NSArray *v41;
  id v42;
  NSArray *v43;
  id v44;
  _QWORD v46[2];
  char *v47;
  id v48;
  uint64_t v49;
  _BOOL4 v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  id v82;
  id v83;
  _DWORD v84[2];
  __int16 v85;
  char v86;
  uint64_t v87;
  uint64_t v88;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  v48 = a1;
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v87 = 0;
  v88 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex020_V7WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v87, &v88);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v46[1] = v46;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v47 = (char *)v46 - v4 * (unint64_t)v5;
  v6 = &v47[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = v47 + 56;
    v49 = v7;
    do
    {
      v85 = 0;
      v86 = 0;
      v84[0] = 0;
      *(_DWORD *)((char *)v84 + 3) = 0;
      LODWORD(v83) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueBand")), "intValue");
      LODWORD(v82) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueType")), "intValue");
      v81 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v80 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v79 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v78 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v77 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v76 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v75 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v74 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v73 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v72 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v71 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v70 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v69 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v68 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v67 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v66 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v65 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v64 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v63 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v62 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v61 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v60 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v59 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue") != 0;
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOBPHS")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOBPHS")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii1Enabled")), "BOOLValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii3Enabled")), "BOOLValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5aEnabled")), "BOOLValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5bEnabled")), "BOOLValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5cEnabled")), "BOOLValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5dEnabled")), "BOOLValue");
      v20 = (int)v82;
      *((_DWORD *)v9 - 14) = (_DWORD)v83;
      *((_DWORD *)v9 - 13) = v20;
      *(v9 - 48) = v81;
      *(v9 - 43) = v80;
      *(v9 - 42) = v79;
      *(v9 - 41) = v78;
      *(v9 - 40) = v77;
      *(v9 - 39) = v76;
      *(v9 - 38) = v75;
      *(v9 - 37) = v74;
      *(v9 - 36) = v73;
      *(_DWORD *)(v9 - 47) = 0;
      *(v9 - 35) = v72;
      *(v9 - 34) = v71;
      *(v9 - 33) = v70;
      *(v9 - 32) = v69;
      *(v9 - 31) = v68;
      *(v9 - 30) = v67;
      *(v9 - 29) = v66;
      *(v9 - 28) = v65;
      *(_WORD *)(v9 - 27) = v85;
      *(v9 - 25) = v86;
      *((_QWORD *)v9 - 3) = v64;
      *((double *)v9 - 2) = v10;
      *((double *)v9 - 1) = v11;
      *v9 = v63;
      v9[1] = v62;
      v9[2] = v61;
      v9[3] = v60;
      v21 = v59;
      *((_DWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 2) = v21;
      *(_QWORD *)(v9 + 12) = 0;
      *((_WORD *)v9 + 10) = 0;
      v9[22] = v58;
      v9[23] = v57;
      *((_QWORD *)v9 + 3) = 0;
      v9[32] = 0;
      v9[33] = v56;
      v9[34] = v55;
      v9[35] = v54;
      v9[36] = 0;
      v9[37] = v53;
      v9[38] = v52;
      v9[39] = v51;
      v9[40] = v50;
      v9[41] = v12;
      v9[42] = v13;
      v9[43] = v14;
      v9[44] = v15;
      v9[45] = v16;
      v9[46] = v17;
      v9[47] = v18;
      v9[48] = v19;
      v22 = v84[0];
      ++v8;
      *((_DWORD *)v9 + 13) = *(_DWORD *)((char *)v84 + 3);
      v23 = v49;
      *(_DWORD *)(v9 + 49) = v22;
      v9 += 112;
    }
    while (v23 != v8);
  }
  v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v25 = v48;
  objc_msgSend(v48, "setWcmWiFiCellCoexIssueTable:", v24);
  v26 = objc_msgSend(v25, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v26, "configureBy:", v47);
  objc_msgSend(v25, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v25, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequencies:", &off_100244190);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequenciesforBT:", &off_1002441C0);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannels:", &off_1002441F0);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannelsWiFiEnh:", &off_100244220);
  objc_msgSend(v25, "setWcmCellularWCI2ModeControllerLTERBThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41));
  objc_msgSend(v25, "setWcmCellularWCI2ModeLTEHarqnackratioThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v25, "setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
  v83 = NSDictionary;
  v27 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            CFSTR("UCM_DESENSE_STRONG_RSSI"),
            &off_100231950,
            CFSTR("UCM_DESENSE_WEAK_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v28 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v27,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v48, "setWcmWiFiBTCoexProfileDefault:", v28);
  v82 = NSArray;
  v83 = NSDictionary;
  v29 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v30 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v31 = objc_msgSend(v82, "arrayWithObjects:", v29, v30, 0);
  v32 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231BA8,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B78,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v31,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v48, "setWcmWiFiBTCoexProfileLight:", v32);
  v82 = NSArray;
  v83 = NSDictionary;
  v33 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v34 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v35 = objc_msgSend(v82, "arrayWithObjects:", v33, v34, 0);
  v36 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231B78, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231B90,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v35,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v48, "setWcmWiFiBTCoexProfileHeavyHFP:", v36);
  v82 = NSArray;
  v83 = NSDictionary;
  v37 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v38 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v39 = objc_msgSend(v82, "arrayWithObjects:", v37, v38, 0);
  v40 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231BA8, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231B78,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v39,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v48, "setWcmWiFiBTCoexProfileHeavyA2DP:", v40);
  v83 = NSDictionary;
  v41 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
            NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            CFSTR("UCM_DESENSE_STRONG_RSSI"),
            &off_100231950,
            CFSTR("UCM_DESENSE_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v42 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v41,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v48, "setWcmWiFiBTCoexProfileTDD:", v42);
  v83 = NSDictionary;
  v43 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
            NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            CFSTR("UCM_DESENSE_STRONG_RSSI"),
            &off_100231950,
            CFSTR("UCM_DESENSE_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v44 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231950, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231950, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231950, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231950,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v43,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  return objc_msgSend(v48, "setWcmWiFiBTCoexProfileDefault5G:", v44);
}

id sub_10010BAE0(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  WCM_WiFiCellCoexIssueBandTable *v24;
  id v25;
  id v26;
  NSArray *v27;
  id v28;
  NSDictionary *v29;
  NSDictionary *v30;
  id v31;
  id v32;
  NSDictionary *v33;
  NSDictionary *v34;
  id v35;
  id v36;
  NSDictionary *v37;
  NSDictionary *v38;
  id v39;
  id v40;
  NSArray *v41;
  id v42;
  NSArray *v43;
  id v44;
  _QWORD v46[2];
  char *v47;
  id v48;
  uint64_t v49;
  _BOOL4 v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  id v82;
  id v83;
  _DWORD v84[2];
  __int16 v85;
  char v86;
  uint64_t v87;
  uint64_t v88;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  v48 = a1;
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v87 = 0;
  v88 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex020_V7WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v87, &v88);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v46[1] = v46;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v47 = (char *)v46 - v4 * (unint64_t)v5;
  v6 = &v47[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = v47 + 56;
    v49 = v7;
    do
    {
      v85 = 0;
      v86 = 0;
      v84[0] = 0;
      *(_DWORD *)((char *)v84 + 3) = 0;
      LODWORD(v83) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueBand")), "intValue");
      LODWORD(v82) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueType")), "intValue");
      v81 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v80 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v79 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v78 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v77 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v76 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v75 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v74 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v73 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v72 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v71 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v70 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v69 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v68 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v67 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v66 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v65 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v64 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v63 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v62 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v61 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v60 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v59 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue") != 0;
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOBPHS")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOBPHS")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii1Enabled")), "BOOLValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii3Enabled")), "BOOLValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5aEnabled")), "BOOLValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5bEnabled")), "BOOLValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5cEnabled")), "BOOLValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5dEnabled")), "BOOLValue");
      v20 = (int)v82;
      *((_DWORD *)v9 - 14) = (_DWORD)v83;
      *((_DWORD *)v9 - 13) = v20;
      *(v9 - 48) = v81;
      *(v9 - 43) = v80;
      *(v9 - 42) = v79;
      *(v9 - 41) = v78;
      *(v9 - 40) = v77;
      *(v9 - 39) = v76;
      *(v9 - 38) = v75;
      *(v9 - 37) = v74;
      *(v9 - 36) = v73;
      *(_DWORD *)(v9 - 47) = 0;
      *(v9 - 35) = v72;
      *(v9 - 34) = v71;
      *(v9 - 33) = v70;
      *(v9 - 32) = v69;
      *(v9 - 31) = v68;
      *(v9 - 30) = v67;
      *(v9 - 29) = v66;
      *(v9 - 28) = v65;
      *(_WORD *)(v9 - 27) = v85;
      *(v9 - 25) = v86;
      *((_QWORD *)v9 - 3) = v64;
      *((double *)v9 - 2) = v10;
      *((double *)v9 - 1) = v11;
      *v9 = v63;
      v9[1] = v62;
      v9[2] = v61;
      v9[3] = v60;
      v21 = v59;
      *((_DWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 2) = v21;
      *(_QWORD *)(v9 + 12) = 0;
      *((_WORD *)v9 + 10) = 0;
      v9[22] = v58;
      v9[23] = v57;
      *((_QWORD *)v9 + 3) = 0;
      v9[32] = 0;
      v9[33] = v56;
      v9[34] = v55;
      v9[35] = v54;
      v9[36] = 0;
      v9[37] = v53;
      v9[38] = v52;
      v9[39] = v51;
      v9[40] = v50;
      v9[41] = v12;
      v9[42] = v13;
      v9[43] = v14;
      v9[44] = v15;
      v9[45] = v16;
      v9[46] = v17;
      v9[47] = v18;
      v9[48] = v19;
      v22 = v84[0];
      ++v8;
      *((_DWORD *)v9 + 13) = *(_DWORD *)((char *)v84 + 3);
      v23 = v49;
      *(_DWORD *)(v9 + 49) = v22;
      v9 += 112;
    }
    while (v23 != v8);
  }
  v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v25 = v48;
  objc_msgSend(v48, "setWcmWiFiCellCoexIssueTable:", v24);
  v26 = objc_msgSend(v25, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v26, "configureBy:", v47);
  objc_msgSend(v25, "setWcmCellularCoexB7ULRange:", 2500.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB7DLRange:", 2620.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v25, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A1Range:", 2496.0, 10.1);
  objc_msgSend(v25, "setWcmCellularCoexB41A2Range:", 2506.1, 20.0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequencies:", &off_100244250);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequenciesforBT:", &off_100244280);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannels:", &off_1002442B0);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannelsWiFiEnh:", &off_1002442E0);
  objc_msgSend(v25, "setWcmCellularWCI2ModeControllerLTERBThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 41));
  objc_msgSend(v25, "setWcmCellularWCI2ModeLTEHarqnackratioThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v25, "setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
  v83 = NSDictionary;
  v27 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            CFSTR("UCM_DESENSE_STRONG_RSSI"),
            &off_100231950,
            CFSTR("UCM_DESENSE_WEAK_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231B30,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v28 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v27,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v48, "setWcmWiFiBTCoexProfileDefault:", v28);
  v82 = NSArray;
  v83 = NSDictionary;
  v29 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v30 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v31 = objc_msgSend(v82, "arrayWithObjects:", v29, v30, 0);
  v32 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231BA8,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B78,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v31,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v48, "setWcmWiFiBTCoexProfileLight:", v32);
  v82 = NSArray;
  v83 = NSDictionary;
  v33 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v34 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v35 = objc_msgSend(v82, "arrayWithObjects:", v33, v34, 0);
  v36 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231B78, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231B90,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v35,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v48, "setWcmWiFiBTCoexProfileHeavyHFP:", v36);
  v82 = NSArray;
  v83 = NSDictionary;
  v37 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v38 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v39 = objc_msgSend(v82, "arrayWithObjects:", v37, v38, 0);
  v40 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231BA8, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231B78,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v39,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v48, "setWcmWiFiBTCoexProfileHeavyA2DP:", v40);
  v83 = NSDictionary;
  v41 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
            NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            CFSTR("UCM_DESENSE_STRONG_RSSI"),
            &off_100231950,
            CFSTR("UCM_DESENSE_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v42 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B00,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AB8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v41,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v48, "setWcmWiFiBTCoexProfileTDD:", v42);
  v83 = NSDictionary;
  v43 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
            NSDictionary,
            "dictionaryWithObjectsAndKeys:",
            CFSTR("UCM_DESENSE_STRONG_RSSI"),
            &off_100231950,
            CFSTR("UCM_DESENSE_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_STRONG_RSSI"),
            &off_100231980,
            CFSTR("UCM_TX_PWR_WEAK_RSSI"),
            0),
          0);
  v44 = objc_msgSend(v83, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231950, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231950, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231950, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231950,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v43,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  return objc_msgSend(v48, "setWcmWiFiBTCoexProfileDefault5G:", v44);
}

id sub_10010D228(void *a1)
{
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_100231950,
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231950,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231860,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyHFP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B90,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231860,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyA2DP:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231BA8,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231B78,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B48,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231B60,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          &off_1002318C0,
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231860,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231B30,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  objc_msgSend(a1, "setWcmWiFiBTCoexProfileTDD:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
          NSDictionary,
          "dictionaryWithObjectsAndKeys:",
          CFSTR("UCM_DESENSE_STRONG_RSSI"),
          &off_100231950,
          CFSTR("UCM_DESENSE_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_STRONG_RSSI"),
          &off_100231980,
          CFSTR("UCM_TX_PWR_WEAK_RSSI"),
          0),
        0),
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  return objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault5G:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231950, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231950, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
             +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0), +[NSDictionary dictionaryWithObjectsAndKeys:](
                 NSDictionary,
                 "dictionaryWithObjectsAndKeys:",
                 CFSTR("UCM_DESENSE_STRONG_RSSI"),
                 &off_100231950,
                 CFSTR("UCM_DESENSE_WEAK_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_ACK_PWR_STRONG_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_ACK_PWR_WEAK_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_TX_PWR_STRONG_RSSI"),
                 &off_100231980,
                 CFSTR("UCM_TX_PWR_WEAK_RSSI"),
                 0),
               0),
             CFSTR("UCM_CHAIN_ATTR"),
             0));
}

id sub_10010DD1C(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  WCM_WiFiCellCoexIssueBandTable *v24;
  id v25;
  id v26;
  _UNKNOWN **v27;
  NSDictionary *v28;
  NSDictionary *v29;
  id v30;
  NSDictionary *v31;
  NSDictionary *v32;
  id v33;
  id v34;
  NSDictionary *v35;
  NSDictionary *v36;
  id v37;
  id v38;
  NSDictionary *v39;
  NSDictionary *v40;
  id v41;
  id v42;
  id v43;
  NSDictionary *v44;
  NSDictionary *v45;
  id v46;
  NSDictionary *v47;
  NSDictionary *v48;
  id v49;
  _QWORD v51[2];
  char *v52;
  id v53;
  uint64_t v54;
  _BOOL4 v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  id v87;
  id v88;
  _DWORD v89[2];
  __int16 v90;
  char v91;
  uint64_t v92;
  uint64_t v93;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  v53 = a1;
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v92 = 0;
  v93 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex039_V7WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v92, &v93);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v51[1] = v51;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v52 = (char *)v51 - v4 * (unint64_t)v5;
  v6 = &v52[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = v52 + 56;
    v54 = v7;
    do
    {
      v90 = 0;
      v91 = 0;
      v89[0] = 0;
      *(_DWORD *)((char *)v89 + 3) = 0;
      LODWORD(v88) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueBand")), "intValue");
      LODWORD(v87) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueType")), "intValue");
      v86 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v85 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v84 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v83 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v82 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v81 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v80 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v79 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v78 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v77 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v76 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v75 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v74 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v73 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v72 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v71 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v70 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v69 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v68 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v67 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v66 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v65 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v64 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v63 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v62 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v61 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v60 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v59 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue") != 0;
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOBPHS")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOBPHS")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii1Enabled")), "BOOLValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii3Enabled")), "BOOLValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5aEnabled")), "BOOLValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5bEnabled")), "BOOLValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5cEnabled")), "BOOLValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5dEnabled")), "BOOLValue");
      v20 = (int)v87;
      *((_DWORD *)v9 - 14) = (_DWORD)v88;
      *((_DWORD *)v9 - 13) = v20;
      *(v9 - 48) = v86;
      *(v9 - 43) = v85;
      *(v9 - 42) = v84;
      *(v9 - 41) = v83;
      *(v9 - 40) = v82;
      *(v9 - 39) = v81;
      *(v9 - 38) = v80;
      *(v9 - 37) = v79;
      *(v9 - 36) = v78;
      *(_DWORD *)(v9 - 47) = 0;
      *(v9 - 35) = v77;
      *(v9 - 34) = v76;
      *(v9 - 33) = v75;
      *(v9 - 32) = v74;
      *(v9 - 31) = v73;
      *(v9 - 30) = v72;
      *(v9 - 29) = v71;
      *(v9 - 28) = v70;
      *(_WORD *)(v9 - 27) = v90;
      *(v9 - 25) = v91;
      *((_QWORD *)v9 - 3) = v69;
      *((double *)v9 - 2) = v10;
      *((double *)v9 - 1) = v11;
      *v9 = v68;
      v9[1] = v67;
      v9[2] = v66;
      v9[3] = v65;
      v21 = v64;
      *((_DWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 2) = v21;
      *(_QWORD *)(v9 + 12) = 0;
      *((_WORD *)v9 + 10) = 0;
      v9[22] = v63;
      v9[23] = v62;
      *((_QWORD *)v9 + 3) = 0;
      v9[32] = 0;
      v9[33] = v61;
      v9[34] = v60;
      v9[35] = v59;
      v9[36] = 0;
      v9[37] = v58;
      v9[38] = v57;
      v9[39] = v56;
      v9[40] = v55;
      v9[41] = v12;
      v9[42] = v13;
      v9[43] = v14;
      v9[44] = v15;
      v9[45] = v16;
      v9[46] = v17;
      v9[47] = v18;
      v9[48] = v19;
      v22 = v89[0];
      ++v8;
      *((_DWORD *)v9 + 13) = *(_DWORD *)((char *)v89 + 3);
      v23 = v54;
      *(_DWORD *)(v9 + 49) = v22;
      v9 += 112;
    }
    while (v23 != v8);
  }
  v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v25 = v53;
  objc_msgSend(v53, "setWcmWiFiCellCoexIssueTable:", v24);
  v26 = objc_msgSend(v25, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v26, "configureBy:", v52);
  objc_msgSend(v25, "setWcmCellRc1CoexIssueTable:", 0);
  objc_msgSend(v25, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v25, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequencies:", &off_100244358);
  if (_os_feature_enabled_impl("wirelessradiomanager", "HFBTEnhancement"))
    v27 = &off_1002443D0;
  else
    v27 = &off_100244448;
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequenciesforBT:", v27);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannels:", &off_1002444C0);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannelsWiFiEnh:", &off_100244538);
  objc_msgSend(v25, "setWcmWiFiScanThrottlingChannelIndices:", &off_100244550);
  objc_msgSend(v25, "setWcmGen9rFemDefaultMode2gWiFiCellularbands:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100244568, CFSTR("LTE"), 0));
  objc_msgSend(v25, "setWcmGen9rFemDefaultMode5gWiFiCellularbands:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100244580, CFSTR("LTE"), 0));
  v87 = NSArray;
  v88 = NSDictionary;
  v28 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v29 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v30 = objc_msgSend(v87, "arrayWithObjects:", v28, v29, 0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileDefault:", objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v30,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v87 = NSArray;
  v88 = NSDictionary;
  v31 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v32 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v33 = objc_msgSend(v87, "arrayWithObjects:", v31, v32, 0);
  v34 = objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231BA8,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B78,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v33,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v53, "setWcmWiFiBTCoexProfileLight:", v34);
  v87 = NSArray;
  v88 = NSDictionary;
  v35 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v36 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v37 = objc_msgSend(v87, "arrayWithObjects:", v35, v36, 0);
  v38 = objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231B78, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231B90,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v37,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v53, "setWcmWiFiBTCoexProfileHeavyHFP:", v38);
  v87 = NSArray;
  v88 = NSDictionary;
  v39 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v40 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v41 = objc_msgSend(v87, "arrayWithObjects:", v39, v40, 0);
  v42 = objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231BA8, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231B78,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v41,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  v43 = v53;
  objc_msgSend(v53, "setWcmWiFiBTCoexProfileHeavyA2DP:", v42);
  v87 = NSArray;
  v88 = NSDictionary;
  v44 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v45 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v46 = objc_msgSend(v87, "arrayWithObjects:", v44, v45, 0);
  objc_msgSend(v43, "setWcmWiFiBTCoexProfileTDD:", objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v46,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v87 = NSArray;
  v88 = NSDictionary;
  v47 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v48 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v49 = objc_msgSend(v87, "arrayWithObjects:", v47, v48, 0);
  return objc_msgSend(v43, "setWcmWiFiBTCoexProfileDefault5G:", objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231950, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231950, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
             v49,
             CFSTR("UCM_CHAIN_ATTR"),
             0));
}

id sub_10010F4CC(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  WCM_WiFiCellCoexIssueBandTable *v24;
  id v25;
  id v26;
  _UNKNOWN **v27;
  NSDictionary *v28;
  NSDictionary *v29;
  id v30;
  NSDictionary *v31;
  NSDictionary *v32;
  id v33;
  id v34;
  NSDictionary *v35;
  NSDictionary *v36;
  id v37;
  id v38;
  NSDictionary *v39;
  NSDictionary *v40;
  id v41;
  id v42;
  id v43;
  NSDictionary *v44;
  NSDictionary *v45;
  id v46;
  NSDictionary *v47;
  NSDictionary *v48;
  id v49;
  _QWORD v51[2];
  char *v52;
  id v53;
  uint64_t v54;
  _BOOL4 v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  id v87;
  id v88;
  _DWORD v89[2];
  __int16 v90;
  char v91;
  uint64_t v92;
  uint64_t v93;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  v53 = a1;
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v92 = 0;
  v93 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex040_V7WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v92, &v93);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v51[1] = v51;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v52 = (char *)v51 - v4 * (unint64_t)v5;
  v6 = &v52[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = v52 + 56;
    v54 = v7;
    do
    {
      v90 = 0;
      v91 = 0;
      v89[0] = 0;
      *(_DWORD *)((char *)v89 + 3) = 0;
      LODWORD(v88) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueBand")), "intValue");
      LODWORD(v87) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueType")), "intValue");
      v86 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v85 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v84 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v83 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v82 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v81 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v80 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v79 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v78 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v77 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v76 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v75 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v74 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v73 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v72 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v71 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v70 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v69 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v68 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v67 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v66 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v65 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v64 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v63 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v62 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v61 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v60 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v59 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue") != 0;
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOBPHS")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOBPHS")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii1Enabled")), "BOOLValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii3Enabled")), "BOOLValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5aEnabled")), "BOOLValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5bEnabled")), "BOOLValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5cEnabled")), "BOOLValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5dEnabled")), "BOOLValue");
      v20 = (int)v87;
      *((_DWORD *)v9 - 14) = (_DWORD)v88;
      *((_DWORD *)v9 - 13) = v20;
      *(v9 - 48) = v86;
      *(v9 - 43) = v85;
      *(v9 - 42) = v84;
      *(v9 - 41) = v83;
      *(v9 - 40) = v82;
      *(v9 - 39) = v81;
      *(v9 - 38) = v80;
      *(v9 - 37) = v79;
      *(v9 - 36) = v78;
      *(_DWORD *)(v9 - 47) = 0;
      *(v9 - 35) = v77;
      *(v9 - 34) = v76;
      *(v9 - 33) = v75;
      *(v9 - 32) = v74;
      *(v9 - 31) = v73;
      *(v9 - 30) = v72;
      *(v9 - 29) = v71;
      *(v9 - 28) = v70;
      *(_WORD *)(v9 - 27) = v90;
      *(v9 - 25) = v91;
      *((_QWORD *)v9 - 3) = v69;
      *((double *)v9 - 2) = v10;
      *((double *)v9 - 1) = v11;
      *v9 = v68;
      v9[1] = v67;
      v9[2] = v66;
      v9[3] = v65;
      v21 = v64;
      *((_DWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 2) = v21;
      *(_QWORD *)(v9 + 12) = 0;
      *((_WORD *)v9 + 10) = 0;
      v9[22] = v63;
      v9[23] = v62;
      *((_QWORD *)v9 + 3) = 0;
      v9[32] = 0;
      v9[33] = v61;
      v9[34] = v60;
      v9[35] = v59;
      v9[36] = 0;
      v9[37] = v58;
      v9[38] = v57;
      v9[39] = v56;
      v9[40] = v55;
      v9[41] = v12;
      v9[42] = v13;
      v9[43] = v14;
      v9[44] = v15;
      v9[45] = v16;
      v9[46] = v17;
      v9[47] = v18;
      v9[48] = v19;
      v22 = v89[0];
      ++v8;
      *((_DWORD *)v9 + 13) = *(_DWORD *)((char *)v89 + 3);
      v23 = v54;
      *(_DWORD *)(v9 + 49) = v22;
      v9 += 112;
    }
    while (v23 != v8);
  }
  v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v25 = v53;
  objc_msgSend(v53, "setWcmWiFiCellCoexIssueTable:", v24);
  v26 = objc_msgSend(v25, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v26, "configureBy:", v52);
  objc_msgSend(v25, "setWcmCellRc1CoexIssueTable:", 0);
  objc_msgSend(v25, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v25, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequencies:", &off_1002445F8);
  if (_os_feature_enabled_impl("wirelessradiomanager", "HFBTEnhancement"))
    v27 = &off_100244670;
  else
    v27 = &off_1002446E8;
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequenciesforBT:", v27);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannels:", &off_100244760);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannelsWiFiEnh:", &off_1002447D8);
  objc_msgSend(v25, "setWcmWiFiScanThrottlingChannelIndices:", &off_1002447F0);
  objc_msgSend(v25, "setWcmGen9rFemDefaultMode2gWiFiCellularbands:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100244808, CFSTR("LTE"), 0));
  objc_msgSend(v25, "setWcmGen9rFemDefaultMode5gWiFiCellularbands:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100244820, CFSTR("LTE"), 0));
  v87 = NSArray;
  v88 = NSDictionary;
  v28 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v29 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v30 = objc_msgSend(v87, "arrayWithObjects:", v28, v29, 0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileDefault:", objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v30,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v87 = NSArray;
  v88 = NSDictionary;
  v31 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v32 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v33 = objc_msgSend(v87, "arrayWithObjects:", v31, v32, 0);
  v34 = objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231BA8,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B78,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v33,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v53, "setWcmWiFiBTCoexProfileLight:", v34);
  v87 = NSArray;
  v88 = NSDictionary;
  v35 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v36 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v37 = objc_msgSend(v87, "arrayWithObjects:", v35, v36, 0);
  v38 = objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231B78, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231B90,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v37,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v53, "setWcmWiFiBTCoexProfileHeavyHFP:", v38);
  v87 = NSArray;
  v88 = NSDictionary;
  v39 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v40 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v41 = objc_msgSend(v87, "arrayWithObjects:", v39, v40, 0);
  v42 = objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231BA8, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231B78,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v41,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  v43 = v53;
  objc_msgSend(v53, "setWcmWiFiBTCoexProfileHeavyA2DP:", v42);
  v87 = NSArray;
  v88 = NSDictionary;
  v44 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v45 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v46 = objc_msgSend(v87, "arrayWithObjects:", v44, v45, 0);
  objc_msgSend(v43, "setWcmWiFiBTCoexProfileTDD:", objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v46,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v87 = NSArray;
  v88 = NSDictionary;
  v47 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v48 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v49 = objc_msgSend(v87, "arrayWithObjects:", v47, v48, 0);
  return objc_msgSend(v43, "setWcmWiFiBTCoexProfileDefault5G:", objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231950, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231950, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
             v49,
             CFSTR("UCM_CHAIN_ATTR"),
             0));
}

id sub_100110C7C(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  WCM_WiFiCellCoexIssueBandTable *v24;
  id v25;
  id v26;
  _UNKNOWN **v27;
  NSDictionary *v28;
  NSDictionary *v29;
  id v30;
  NSDictionary *v31;
  NSDictionary *v32;
  id v33;
  id v34;
  NSDictionary *v35;
  NSDictionary *v36;
  id v37;
  id v38;
  NSDictionary *v39;
  NSDictionary *v40;
  id v41;
  id v42;
  id v43;
  NSDictionary *v44;
  NSDictionary *v45;
  id v46;
  NSDictionary *v47;
  NSDictionary *v48;
  id v49;
  _QWORD v51[2];
  char *v52;
  id v53;
  uint64_t v54;
  _BOOL4 v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  id v87;
  id v88;
  _DWORD v89[2];
  __int16 v90;
  char v91;
  uint64_t v92;
  uint64_t v93;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  v53 = a1;
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v92 = 0;
  v93 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex035_V7WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v92, &v93);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v51[1] = v51;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v52 = (char *)v51 - v4 * (unint64_t)v5;
  v6 = &v52[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = v52 + 56;
    v54 = v7;
    do
    {
      v90 = 0;
      v91 = 0;
      v89[0] = 0;
      *(_DWORD *)((char *)v89 + 3) = 0;
      LODWORD(v88) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueBand")), "intValue");
      LODWORD(v87) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueType")), "intValue");
      v86 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v85 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v84 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v83 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v82 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v81 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v80 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v79 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v78 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v77 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v76 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v75 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v74 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v73 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v72 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v71 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v70 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v69 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v68 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v67 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v66 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v65 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v64 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v63 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v62 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v61 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v60 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v59 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue") != 0;
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOBPHS")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOBPHS")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii1Enabled")), "BOOLValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii3Enabled")), "BOOLValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5aEnabled")), "BOOLValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5bEnabled")), "BOOLValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5cEnabled")), "BOOLValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5dEnabled")), "BOOLValue");
      v20 = (int)v87;
      *((_DWORD *)v9 - 14) = (_DWORD)v88;
      *((_DWORD *)v9 - 13) = v20;
      *(v9 - 48) = v86;
      *(v9 - 43) = v85;
      *(v9 - 42) = v84;
      *(v9 - 41) = v83;
      *(v9 - 40) = v82;
      *(v9 - 39) = v81;
      *(v9 - 38) = v80;
      *(v9 - 37) = v79;
      *(v9 - 36) = v78;
      *(_DWORD *)(v9 - 47) = 0;
      *(v9 - 35) = v77;
      *(v9 - 34) = v76;
      *(v9 - 33) = v75;
      *(v9 - 32) = v74;
      *(v9 - 31) = v73;
      *(v9 - 30) = v72;
      *(v9 - 29) = v71;
      *(v9 - 28) = v70;
      *(_WORD *)(v9 - 27) = v90;
      *(v9 - 25) = v91;
      *((_QWORD *)v9 - 3) = v69;
      *((double *)v9 - 2) = v10;
      *((double *)v9 - 1) = v11;
      *v9 = v68;
      v9[1] = v67;
      v9[2] = v66;
      v9[3] = v65;
      v21 = v64;
      *((_DWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 2) = v21;
      *(_QWORD *)(v9 + 12) = 0;
      *((_WORD *)v9 + 10) = 0;
      v9[22] = v63;
      v9[23] = v62;
      *((_QWORD *)v9 + 3) = 0;
      v9[32] = 0;
      v9[33] = v61;
      v9[34] = v60;
      v9[35] = v59;
      v9[36] = 0;
      v9[37] = v58;
      v9[38] = v57;
      v9[39] = v56;
      v9[40] = v55;
      v9[41] = v12;
      v9[42] = v13;
      v9[43] = v14;
      v9[44] = v15;
      v9[45] = v16;
      v9[46] = v17;
      v9[47] = v18;
      v9[48] = v19;
      v22 = v89[0];
      ++v8;
      *((_DWORD *)v9 + 13) = *(_DWORD *)((char *)v89 + 3);
      v23 = v54;
      *(_DWORD *)(v9 + 49) = v22;
      v9 += 112;
    }
    while (v23 != v8);
  }
  v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v25 = v53;
  objc_msgSend(v53, "setWcmWiFiCellCoexIssueTable:", v24);
  v26 = objc_msgSend(v25, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v26, "configureBy:", v52);
  objc_msgSend(v25, "setWcmCellRc1CoexIssueTable:", 0);
  objc_msgSend(v25, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v25, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequencies:", &off_100244898);
  if (_os_feature_enabled_impl("wirelessradiomanager", "HFBTEnhancement"))
    v27 = &off_100244910;
  else
    v27 = &off_100244988;
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequenciesforBT:", v27);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannels:", &off_100244A00);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannelsWiFiEnh:", &off_100244A78);
  objc_msgSend(v25, "setWcmWiFiScanThrottlingChannelIndices:", &off_100244A90);
  objc_msgSend(v25, "setWcmGen9rFemDefaultMode2gWiFiCellularbands:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100244AA8, CFSTR("LTE"), 0));
  objc_msgSend(v25, "setWcmGen9rFemDefaultMode5gWiFiCellularbands:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100244AC0, CFSTR("LTE"), 0));
  v87 = NSArray;
  v88 = NSDictionary;
  v28 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v29 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v30 = objc_msgSend(v87, "arrayWithObjects:", v28, v29, 0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileDefault:", objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v30,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v87 = NSArray;
  v88 = NSDictionary;
  v31 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v32 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v33 = objc_msgSend(v87, "arrayWithObjects:", v31, v32, 0);
  v34 = objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231BA8,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B78,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v33,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v53, "setWcmWiFiBTCoexProfileLight:", v34);
  v87 = NSArray;
  v88 = NSDictionary;
  v35 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v36 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v37 = objc_msgSend(v87, "arrayWithObjects:", v35, v36, 0);
  v38 = objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231B78, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231B90,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v37,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v53, "setWcmWiFiBTCoexProfileHeavyHFP:", v38);
  v87 = NSArray;
  v88 = NSDictionary;
  v39 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v40 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v41 = objc_msgSend(v87, "arrayWithObjects:", v39, v40, 0);
  v42 = objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231BA8, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231B78,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v41,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  v43 = v53;
  objc_msgSend(v53, "setWcmWiFiBTCoexProfileHeavyA2DP:", v42);
  v87 = NSArray;
  v88 = NSDictionary;
  v44 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v45 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v46 = objc_msgSend(v87, "arrayWithObjects:", v44, v45, 0);
  objc_msgSend(v43, "setWcmWiFiBTCoexProfileTDD:", objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v46,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v87 = NSArray;
  v88 = NSDictionary;
  v47 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v48 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v49 = objc_msgSend(v87, "arrayWithObjects:", v47, v48, 0);
  return objc_msgSend(v43, "setWcmWiFiBTCoexProfileDefault5G:", objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231950, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231950, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
             v49,
             CFSTR("UCM_CHAIN_ATTR"),
             0));
}

id sub_10011242C(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  WCM_WiFiCellCoexIssueBandTable *v24;
  id v25;
  id v26;
  _UNKNOWN **v27;
  NSDictionary *v28;
  NSDictionary *v29;
  id v30;
  NSDictionary *v31;
  NSDictionary *v32;
  id v33;
  id v34;
  NSDictionary *v35;
  NSDictionary *v36;
  id v37;
  id v38;
  NSDictionary *v39;
  NSDictionary *v40;
  id v41;
  id v42;
  id v43;
  NSDictionary *v44;
  NSDictionary *v45;
  id v46;
  NSDictionary *v47;
  NSDictionary *v48;
  id v49;
  _QWORD v51[2];
  char *v52;
  id v53;
  uint64_t v54;
  _BOOL4 v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  id v87;
  id v88;
  _DWORD v89[2];
  __int16 v90;
  char v91;
  uint64_t v92;
  uint64_t v93;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  v53 = a1;
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v92 = 0;
  v93 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex036_V7WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v92, &v93);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v51[1] = v51;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v52 = (char *)v51 - v4 * (unint64_t)v5;
  v6 = &v52[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = v52 + 56;
    v54 = v7;
    do
    {
      v90 = 0;
      v91 = 0;
      v89[0] = 0;
      *(_DWORD *)((char *)v89 + 3) = 0;
      LODWORD(v88) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueBand")), "intValue");
      LODWORD(v87) = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueType")), "intValue");
      v86 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v85 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v84 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v83 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v82 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v81 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v80 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v79 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v78 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v77 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v76 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v75 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v74 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v73 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v72 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v71 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v70 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v69 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v68 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v67 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v66 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v65 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v64 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v63 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v62 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v61 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v60 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v59 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue") != 0;
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOBPHS")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOBPHS")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii1Enabled")), "BOOLValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii3Enabled")), "BOOLValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5aEnabled")), "BOOLValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5bEnabled")), "BOOLValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5cEnabled")), "BOOLValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5dEnabled")), "BOOLValue");
      v20 = (int)v87;
      *((_DWORD *)v9 - 14) = (_DWORD)v88;
      *((_DWORD *)v9 - 13) = v20;
      *(v9 - 48) = v86;
      *(v9 - 43) = v85;
      *(v9 - 42) = v84;
      *(v9 - 41) = v83;
      *(v9 - 40) = v82;
      *(v9 - 39) = v81;
      *(v9 - 38) = v80;
      *(v9 - 37) = v79;
      *(v9 - 36) = v78;
      *(_DWORD *)(v9 - 47) = 0;
      *(v9 - 35) = v77;
      *(v9 - 34) = v76;
      *(v9 - 33) = v75;
      *(v9 - 32) = v74;
      *(v9 - 31) = v73;
      *(v9 - 30) = v72;
      *(v9 - 29) = v71;
      *(v9 - 28) = v70;
      *(_WORD *)(v9 - 27) = v90;
      *(v9 - 25) = v91;
      *((_QWORD *)v9 - 3) = v69;
      *((double *)v9 - 2) = v10;
      *((double *)v9 - 1) = v11;
      *v9 = v68;
      v9[1] = v67;
      v9[2] = v66;
      v9[3] = v65;
      v21 = v64;
      *((_DWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 2) = v21;
      *(_QWORD *)(v9 + 12) = 0;
      *((_WORD *)v9 + 10) = 0;
      v9[22] = v63;
      v9[23] = v62;
      *((_QWORD *)v9 + 3) = 0;
      v9[32] = 0;
      v9[33] = v61;
      v9[34] = v60;
      v9[35] = v59;
      v9[36] = 0;
      v9[37] = v58;
      v9[38] = v57;
      v9[39] = v56;
      v9[40] = v55;
      v9[41] = v12;
      v9[42] = v13;
      v9[43] = v14;
      v9[44] = v15;
      v9[45] = v16;
      v9[46] = v17;
      v9[47] = v18;
      v9[48] = v19;
      v22 = v89[0];
      ++v8;
      *((_DWORD *)v9 + 13) = *(_DWORD *)((char *)v89 + 3);
      v23 = v54;
      *(_DWORD *)(v9 + 49) = v22;
      v9 += 112;
    }
    while (v23 != v8);
  }
  v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v25 = v53;
  objc_msgSend(v53, "setWcmWiFiCellCoexIssueTable:", v24);
  v26 = objc_msgSend(v25, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v26, "configureBy:", v52);
  objc_msgSend(v25, "setWcmCellRc1CoexIssueTable:", 0);
  objc_msgSend(v25, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v25, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequencies:", &off_100244B38);
  if (_os_feature_enabled_impl("wirelessradiomanager", "HFBTEnhancement"))
    v27 = &off_100244BB0;
  else
    v27 = &off_100244C28;
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequenciesforBT:", v27);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannels:", &off_100244CA0);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannelsWiFiEnh:", &off_100244D18);
  objc_msgSend(v25, "setWcmWiFiScanThrottlingChannelIndices:", &off_100244D30);
  objc_msgSend(v25, "setWcmGen9rFemDefaultMode2gWiFiCellularbands:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100244D48, CFSTR("LTE"), 0));
  objc_msgSend(v25, "setWcmGen9rFemDefaultMode5gWiFiCellularbands:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100244D60, CFSTR("LTE"), 0));
  v87 = NSArray;
  v88 = NSDictionary;
  v28 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v29 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v30 = objc_msgSend(v87, "arrayWithObjects:", v28, v29, 0);
  objc_msgSend(v25, "setWcmWiFiBTCoexProfileDefault:", objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v30,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v87 = NSArray;
  v88 = NSDictionary;
  v31 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v32 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v33 = objc_msgSend(v87, "arrayWithObjects:", v31, v32, 0);
  v34 = objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AD0, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AE8, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231AE8,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231BA8,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B78,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AD0,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v33,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v53, "setWcmWiFiBTCoexProfileLight:", v34);
  v87 = NSArray;
  v88 = NSDictionary;
  v35 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v36 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v37 = objc_msgSend(v87, "arrayWithObjects:", v35, v36, 0);
  v38 = objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_1002318C0, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AE8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B48, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231B78, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231B90,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v37,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  objc_msgSend(v53, "setWcmWiFiBTCoexProfileHeavyHFP:", v38);
  v87 = NSArray;
  v88 = NSDictionary;
  v39 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B18, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v40 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002318C0, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231860, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231B30, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v41 = objc_msgSend(v87, "arrayWithObjects:", v39, v40, 0);
  v42 = objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231B48, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231B60, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), &off_100231BA8, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), &off_100231B78,
          CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
          &off_100231B48,
          CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231B60,
          CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
          &off_100231AE8,
          CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
          &off_100231950,
          CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
          v41,
          CFSTR("UCM_CHAIN_ATTR"),
          0);
  v43 = v53;
  objc_msgSend(v53, "setWcmWiFiBTCoexProfileHeavyA2DP:", v42);
  v87 = NSArray;
  v88 = NSDictionary;
  v44 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v45 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v46 = objc_msgSend(v87, "arrayWithObjects:", v44, v45, 0);
  objc_msgSend(v43, "setWcmWiFiBTCoexProfileTDD:", objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231AB8, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231AD0, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
      &off_100231AE8,
      CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
      &off_100231B00,
      CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AB8,
      CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
      &off_100231AD0,
      CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
      &off_100231950,
      CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
      v46,
      CFSTR("UCM_CHAIN_ATTR"),
      0));
  v87 = NSArray;
  v88 = NSDictionary;
  v47 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100231950, CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v48 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("UCM_DESENSE_STRONG_RSSI"), &off_100231950, CFSTR("UCM_DESENSE_WEAK_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_STRONG_RSSI"), &off_100231980, CFSTR("UCM_TX_PWR_WEAK_RSSI"), 0);
  v49 = objc_msgSend(v87, "arrayWithObjects:", v47, v48, 0);
  return objc_msgSend(v43, "setWcmWiFiBTCoexProfileDefault5G:", objc_msgSend(v88, "dictionaryWithObjectsAndKeys:", &off_100231890, CFSTR("UCM_VERSION"), &off_100231860, CFSTR("UCM_MODE_STRONG_WL_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL"), &off_100231860, CFSTR("UCM_MODE_WEAK_BT"), &off_100231860, CFSTR("UCM_MODE_WEAK_WL_BT"), &off_100231950, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), &off_100231950, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"),
             &off_100231950,
             CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"),
             v49,
             CFSTR("UCM_CHAIN_ATTR"),
             0));
}

id sub_100113BDC(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001E7148);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_100244DD8);
  return objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100244E50);
}

id sub_100113E78(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001E8488);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_100244EC8);
  return objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100244F40);
}

id sub_100114114(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001E97C8);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2516.0, 174.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_100244FB8);
  return objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100245030);
}

id sub_1001143B4(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001EAA28);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2516.0, 174.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_1002450A8);
  return objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100245120);
}

id sub_100114654(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001EBC88);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2516.0, 174.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_100245198);
  return objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100245210);
}

id sub_1001148F4(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001ECFC8);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2516.0, 174.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_100245288);
  return objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100245300);
}

id sub_100114B94(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100232460);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001EE308);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2516.0, 174.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_100245390);
  return objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100245420);
}

id sub_100114E34(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100232460);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001EF648);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2516.0, 174.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_1002454B0);
  return objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100245540);
}

id sub_1001150D4(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100232460);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001F0988);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2516.0, 174.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_1002455D0);
  return objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100245660);
}

id sub_100115374(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100232460);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001F1CC8);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2516.0, 174.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_1002456F0);
  return objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100245780);
}

id sub_100115614(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  double v9;
  double v10;
  unsigned __int8 v11;
  unsigned int v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned int v20;
  WCM_WiFiCellCoexIssueBandTable *v21;
  id v22;
  id v23;
  uint64_t v25;
  id v26;
  char *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  _DWORD v52[2];
  __int16 v53;
  char v54;
  uint64_t v55;
  uint64_t v56;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231BC0);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v55 = 0;
  v56 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex008_v1.1_NewEnum_v4Macro"), (uint64_t)CFSTR("plist")), 2, &v55, &v56);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v26 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v25 = (uint64_t)&v25;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v27 = (char *)&v25 - v4 * (unint64_t)v5;
  v6 = &v27[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  if (v3)
  {
    v7 = 0;
    v8 = v27 + 56;
    v28 = v3;
    do
    {
      v53 = 0;
      v54 = 0;
      v52[0] = 0;
      *(_DWORD *)((char *)v52 + 3) = 0;
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("issueBand")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("issueType")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v47 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v40 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v39 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v38 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v37 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v36 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v35 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v34 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v33 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v32 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v9 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v31 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v30 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v29 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v19 = v28;
      v20 = v50;
      *((_DWORD *)v8 - 14) = v51;
      *((_DWORD *)v8 - 13) = v20;
      *(v8 - 48) = v49;
      *(v8 - 43) = v48;
      *(v8 - 42) = v47;
      *(v8 - 41) = v46;
      *(v8 - 40) = v45;
      *(v8 - 39) = v44;
      *(v8 - 38) = v43;
      *(v8 - 37) = v42;
      *(v8 - 36) = v41;
      *(v8 - 35) = v40;
      *(v8 - 34) = v39;
      *(v8 - 33) = v38;
      *(v8 - 32) = v37;
      *(v8 - 31) = v36;
      *(v8 - 30) = v35;
      *(v8 - 29) = v34;
      *(v8 - 28) = v33;
      *(_WORD *)(v8 - 27) = v53;
      *(v8 - 25) = v54;
      *((_QWORD *)v8 - 3) = v32;
      *v8 = v31;
      v8[1] = v30;
      v8[2] = v29;
      v8[3] = v11;
      *((_DWORD *)v8 + 1) = 0;
      *((_DWORD *)v8 + 2) = v12;
      v8[22] = v13;
      v8[23] = v14;
      v8[33] = v15;
      v8[34] = v16;
      v8[35] = v17;
      v8[37] = v18;
      *((_DWORD *)v8 + 13) = *(_DWORD *)((char *)v52 + 3);
      *(_DWORD *)(v8 + 49) = v52[0];
      *(_DWORD *)(v8 - 47) = 0;
      *((double *)v8 - 2) = v9;
      *((double *)v8 - 1) = v10;
      *(_QWORD *)(v8 + 12) = 0;
      *((_WORD *)v8 + 10) = 0;
      *((_QWORD *)v8 + 3) = 0;
      v8[32] = 0;
      v8[36] = 0;
      ++v7;
      *(_QWORD *)(v8 + 38) = 0;
      *(_DWORD *)(v8 + 45) = 0;
      v8 += 112;
    }
    while (v19 != v7);
  }
  v21 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v22 = v26;
  objc_msgSend(v26, "setWcmWiFiCellCoexIssueTable:", v21);
  v23 = objc_msgSend(v22, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v23, "configureBy:", v27);
  objc_msgSend(v22, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(v22, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(v22, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v22, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v22, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(v22, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(v22, "setWcmCellularScanProtectionCellFrequencies:", &off_100245828);
  objc_msgSend(v22, "setWcmCellularScanProtectionCellFrequenciesforBT:", &off_1002458D0);
  return objc_msgSend(v22, "setWcmCellularScanProtectionWiFiChannels:", &off_100245978);
}

id sub_100115F90(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  double v9;
  double v10;
  unsigned __int8 v11;
  unsigned int v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned int v20;
  WCM_WiFiCellCoexIssueBandTable *v21;
  id v22;
  id v23;
  uint64_t v25;
  id v26;
  char *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  _DWORD v52[2];
  __int16 v53;
  char v54;
  uint64_t v55;
  uint64_t v56;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231BC0);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v55 = 0;
  v56 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex009_v1.2_NewEnum_v4Macro"), (uint64_t)CFSTR("plist")), 2, &v55, &v56);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v26 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v25 = (uint64_t)&v25;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v27 = (char *)&v25 - v4 * (unint64_t)v5;
  v6 = &v27[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  if (v3)
  {
    v7 = 0;
    v8 = v27 + 56;
    v28 = v3;
    do
    {
      v53 = 0;
      v54 = 0;
      v52[0] = 0;
      *(_DWORD *)((char *)v52 + 3) = 0;
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("issueBand")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("issueType")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v47 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v40 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v39 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v38 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v37 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v36 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v35 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v34 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v33 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v32 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v9 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v31 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v30 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v29 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v19 = v28;
      v20 = v50;
      *((_DWORD *)v8 - 14) = v51;
      *((_DWORD *)v8 - 13) = v20;
      *(v8 - 48) = v49;
      *(v8 - 43) = v48;
      *(v8 - 42) = v47;
      *(v8 - 41) = v46;
      *(v8 - 40) = v45;
      *(v8 - 39) = v44;
      *(v8 - 38) = v43;
      *(v8 - 37) = v42;
      *(v8 - 36) = v41;
      *(v8 - 35) = v40;
      *(v8 - 34) = v39;
      *(v8 - 33) = v38;
      *(v8 - 32) = v37;
      *(v8 - 31) = v36;
      *(v8 - 30) = v35;
      *(v8 - 29) = v34;
      *(v8 - 28) = v33;
      *(_WORD *)(v8 - 27) = v53;
      *(v8 - 25) = v54;
      *((_QWORD *)v8 - 3) = v32;
      *v8 = v31;
      v8[1] = v30;
      v8[2] = v29;
      v8[3] = v11;
      *((_DWORD *)v8 + 1) = 0;
      *((_DWORD *)v8 + 2) = v12;
      v8[22] = v13;
      v8[23] = v14;
      v8[33] = v15;
      v8[34] = v16;
      v8[35] = v17;
      v8[37] = v18;
      *((_DWORD *)v8 + 13) = *(_DWORD *)((char *)v52 + 3);
      *(_DWORD *)(v8 + 49) = v52[0];
      *(_DWORD *)(v8 - 47) = 0;
      *((double *)v8 - 2) = v9;
      *((double *)v8 - 1) = v10;
      *(_QWORD *)(v8 + 12) = 0;
      *((_WORD *)v8 + 10) = 0;
      *((_QWORD *)v8 + 3) = 0;
      v8[32] = 0;
      v8[36] = 0;
      ++v7;
      *(_QWORD *)(v8 + 38) = 0;
      *(_DWORD *)(v8 + 45) = 0;
      v8 += 112;
    }
    while (v19 != v7);
  }
  v21 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v22 = v26;
  objc_msgSend(v26, "setWcmWiFiCellCoexIssueTable:", v21);
  v23 = objc_msgSend(v22, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v23, "configureBy:", v27);
  objc_msgSend(v22, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(v22, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(v22, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v22, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v22, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(v22, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(v22, "setWcmCellularScanProtectionCellFrequencies:", &off_100245A20);
  objc_msgSend(v22, "setWcmCellularScanProtectionCellFrequenciesforBT:", &off_100245AC8);
  return objc_msgSend(v22, "setWcmCellularScanProtectionWiFiChannels:", &off_100245B70);
}

id sub_10011690C(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  double v9;
  double v10;
  unsigned __int8 v11;
  unsigned int v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned int v20;
  WCM_WiFiCellCoexIssueBandTable *v21;
  id v22;
  id v23;
  uint64_t v25;
  id v26;
  char *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  _DWORD v52[2];
  __int16 v53;
  char v54;
  uint64_t v55;
  uint64_t v56;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231BC0);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v55 = 0;
  v56 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex006_v1.1_NewEnum_v4Macro"), (uint64_t)CFSTR("plist")), 2, &v55, &v56);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v26 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v25 = (uint64_t)&v25;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v27 = (char *)&v25 - v4 * (unint64_t)v5;
  v6 = &v27[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  if (v3)
  {
    v7 = 0;
    v8 = v27 + 56;
    v28 = v3;
    do
    {
      v53 = 0;
      v54 = 0;
      v52[0] = 0;
      *(_DWORD *)((char *)v52 + 3) = 0;
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("issueBand")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("issueType")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v47 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v40 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v39 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v38 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v37 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v36 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v35 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v34 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v33 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v32 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v9 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v31 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v30 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v29 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v19 = v28;
      v20 = v50;
      *((_DWORD *)v8 - 14) = v51;
      *((_DWORD *)v8 - 13) = v20;
      *(v8 - 48) = v49;
      *(v8 - 43) = v48;
      *(v8 - 42) = v47;
      *(v8 - 41) = v46;
      *(v8 - 40) = v45;
      *(v8 - 39) = v44;
      *(v8 - 38) = v43;
      *(v8 - 37) = v42;
      *(v8 - 36) = v41;
      *(v8 - 35) = v40;
      *(v8 - 34) = v39;
      *(v8 - 33) = v38;
      *(v8 - 32) = v37;
      *(v8 - 31) = v36;
      *(v8 - 30) = v35;
      *(v8 - 29) = v34;
      *(v8 - 28) = v33;
      *(_WORD *)(v8 - 27) = v53;
      *(v8 - 25) = v54;
      *((_QWORD *)v8 - 3) = v32;
      *v8 = v31;
      v8[1] = v30;
      v8[2] = v29;
      v8[3] = v11;
      *((_DWORD *)v8 + 1) = 0;
      *((_DWORD *)v8 + 2) = v12;
      v8[22] = v13;
      v8[23] = v14;
      v8[33] = v15;
      v8[34] = v16;
      v8[35] = v17;
      v8[37] = v18;
      *((_DWORD *)v8 + 13) = *(_DWORD *)((char *)v52 + 3);
      *(_DWORD *)(v8 + 49) = v52[0];
      *(_DWORD *)(v8 - 47) = 0;
      *((double *)v8 - 2) = v9;
      *((double *)v8 - 1) = v10;
      *(_QWORD *)(v8 + 12) = 0;
      *((_WORD *)v8 + 10) = 0;
      *((_QWORD *)v8 + 3) = 0;
      v8[32] = 0;
      v8[36] = 0;
      ++v7;
      *(_QWORD *)(v8 + 38) = 0;
      *(_DWORD *)(v8 + 45) = 0;
      v8 += 112;
    }
    while (v19 != v7);
  }
  v21 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v22 = v26;
  objc_msgSend(v26, "setWcmWiFiCellCoexIssueTable:", v21);
  v23 = objc_msgSend(v22, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v23, "configureBy:", v27);
  objc_msgSend(v22, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(v22, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(v22, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v22, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v22, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(v22, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(v22, "setWcmCellularScanProtectionCellFrequencies:", &off_100245C18);
  objc_msgSend(v22, "setWcmCellularScanProtectionCellFrequenciesforBT:", &off_100245CC0);
  return objc_msgSend(v22, "setWcmCellularScanProtectionWiFiChannels:", &off_100245D68);
}

id sub_100117288(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  double v9;
  double v10;
  unsigned __int8 v11;
  unsigned int v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned int v20;
  WCM_WiFiCellCoexIssueBandTable *v21;
  id v22;
  id v23;
  uint64_t v25;
  id v26;
  char *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  _DWORD v52[2];
  __int16 v53;
  char v54;
  uint64_t v55;
  uint64_t v56;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231BC0);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v55 = 0;
  v56 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex007_v1.1_NewEnum_v4Macro"), (uint64_t)CFSTR("plist")), 2, &v55, &v56);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v26 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v25 = (uint64_t)&v25;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v27 = (char *)&v25 - v4 * (unint64_t)v5;
  v6 = &v27[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  if (v3)
  {
    v7 = 0;
    v8 = v27 + 56;
    v28 = v3;
    do
    {
      v53 = 0;
      v54 = 0;
      v52[0] = 0;
      *(_DWORD *)((char *)v52 + 3) = 0;
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("issueBand")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("issueType")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v47 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v40 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v39 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v38 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v37 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v36 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v35 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v34 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v33 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v32 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v9 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v31 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v30 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v29 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v7), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v19 = v28;
      v20 = v50;
      *((_DWORD *)v8 - 14) = v51;
      *((_DWORD *)v8 - 13) = v20;
      *(v8 - 48) = v49;
      *(v8 - 43) = v48;
      *(v8 - 42) = v47;
      *(v8 - 41) = v46;
      *(v8 - 40) = v45;
      *(v8 - 39) = v44;
      *(v8 - 38) = v43;
      *(v8 - 37) = v42;
      *(v8 - 36) = v41;
      *(v8 - 35) = v40;
      *(v8 - 34) = v39;
      *(v8 - 33) = v38;
      *(v8 - 32) = v37;
      *(v8 - 31) = v36;
      *(v8 - 30) = v35;
      *(v8 - 29) = v34;
      *(v8 - 28) = v33;
      *(_WORD *)(v8 - 27) = v53;
      *(v8 - 25) = v54;
      *((_QWORD *)v8 - 3) = v32;
      *v8 = v31;
      v8[1] = v30;
      v8[2] = v29;
      v8[3] = v11;
      *((_DWORD *)v8 + 1) = 0;
      *((_DWORD *)v8 + 2) = v12;
      v8[22] = v13;
      v8[23] = v14;
      v8[33] = v15;
      v8[34] = v16;
      v8[35] = v17;
      v8[37] = v18;
      *((_DWORD *)v8 + 13) = *(_DWORD *)((char *)v52 + 3);
      *(_DWORD *)(v8 + 49) = v52[0];
      *(_DWORD *)(v8 - 47) = 0;
      *((double *)v8 - 2) = v9;
      *((double *)v8 - 1) = v10;
      *(_QWORD *)(v8 + 12) = 0;
      *((_WORD *)v8 + 10) = 0;
      *((_QWORD *)v8 + 3) = 0;
      v8[32] = 0;
      v8[36] = 0;
      ++v7;
      *(_QWORD *)(v8 + 38) = 0;
      *(_DWORD *)(v8 + 45) = 0;
      v8 += 112;
    }
    while (v19 != v7);
  }
  v21 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v22 = v26;
  objc_msgSend(v26, "setWcmWiFiCellCoexIssueTable:", v21);
  v23 = objc_msgSend(v22, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v23, "configureBy:", v27);
  objc_msgSend(v22, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(v22, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(v22, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v22, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v22, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(v22, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(v22, "setWcmCellularScanProtectionCellFrequencies:", &off_100245E10);
  objc_msgSend(v22, "setWcmCellularScanProtectionCellFrequenciesforBT:", &off_100245EB8);
  return objc_msgSend(v22, "setWcmCellularScanProtectionWiFiChannels:", &off_100245F60);
}

id sub_100117C04(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  char *v20;
  unsigned int v21;
  char v22;
  unsigned int v23;
  WCM_WiFiCellCoexIssueBandTable *v24;
  id v25;
  id v26;
  _QWORD v28[2];
  id v29;
  uint64_t v30;
  char *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  _DWORD v58[2];
  __int16 v59;
  char v60;
  uint64_t v61;
  uint64_t v62;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231BC0);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v61 = 0;
  v62 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex012_WiFiEnh_v1"), (uint64_t)CFSTR("plist")), 2, &v61, &v62);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v29 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v28[1] = v28;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v31 = (char *)v28 - v4 * (unint64_t)v5;
  v6 = &v31[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = 0;
    v30 = 112 * v7;
    do
    {
      v59 = 0;
      v60 = 0;
      v58[0] = 0;
      *(_DWORD *)((char *)v58 + 3) = 0;
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("issueBand")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("issueType")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v47 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v40 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v39 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v38 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v37 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v36 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v35 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v34 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v33 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v32 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v9++), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue");
      v20 = &v31[v8];
      v21 = v56;
      *(_DWORD *)v20 = v57;
      *((_DWORD *)v20 + 1) = v21;
      v20[8] = v55;
      v22 = v53;
      v20[13] = v54;
      *(_DWORD *)(v20 + 9) = 0;
      v20[14] = v22;
      v20[15] = v52;
      v20[16] = v51;
      v20[17] = v50;
      v20[18] = v49;
      v20[19] = v48;
      v20[20] = v47;
      v20[21] = v46;
      v20[22] = v45;
      v20[23] = v44;
      v20[24] = v43;
      v20[25] = v42;
      v20[26] = v41;
      v20[27] = v40;
      v20[28] = v39;
      *(_WORD *)(v20 + 29) = v59;
      v20[31] = v60;
      *((_QWORD *)v20 + 4) = v38;
      *((double *)v20 + 5) = v10;
      *((double *)v20 + 6) = v11;
      v20[56] = v37;
      v20[57] = v36;
      v20[58] = v35;
      v20[59] = v34;
      v23 = v33;
      *((_DWORD *)v20 + 15) = 0;
      *((_DWORD *)v20 + 16) = v23;
      *(_QWORD *)(v20 + 68) = 0;
      *((_WORD *)v20 + 38) = 0;
      v20[78] = v32;
      v20[79] = v12;
      *((_QWORD *)v20 + 10) = 0;
      v20[88] = 0;
      v20[89] = v13;
      v20[90] = v14;
      v20[91] = v15;
      v20[92] = 0;
      v20[93] = v16;
      v20[94] = v17;
      v20[95] = v18;
      v20[96] = v19 != 0;
      *(_QWORD *)(v20 + 97) = 0;
      *((_DWORD *)v20 + 27) = *(_DWORD *)((char *)v58 + 3);
      v8 += 112;
      *(_DWORD *)(v20 + 105) = v58[0];
    }
    while (v30 != v8);
  }
  v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v25 = v29;
  objc_msgSend(v29, "setWcmWiFiCellCoexIssueTable:", v24);
  v26 = objc_msgSend(v25, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v26, "configureBy:", v31);
  objc_msgSend(v25, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v25, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequencies:", &off_100246008);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequenciesforBT:", &off_1002460B0);
  return objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannels:", &off_100246158);
}

id sub_100118618(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  BOOL v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WCM_WiFiCellCoexIssueBandTable *v23;
  id v24;
  id v25;
  uint64_t v27;
  id v28;
  char *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  _DWORD v59[2];
  __int16 v60;
  char v61;
  uint64_t v62;
  uint64_t v63;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231BC0);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v62 = 0;
  v63 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex015_V6WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v62, &v63);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v28 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v27 = (uint64_t)&v27;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v29 = (char *)&v27 - v4 * (unint64_t)v5;
  v6 = &v29[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = v29 + 56;
    v30 = v7;
    do
    {
      v60 = 0;
      v61 = 0;
      v59[0] = 0;
      *(_DWORD *)((char *)v59 + 3) = 0;
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueBand")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueType")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v47 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v40 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v39 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v38 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v37 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v36 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v35 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v34 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v33 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v32 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v31 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue") != 0;
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOBPHS")), "intValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOBPHS")), "intValue");
      v20 = v30;
      v21 = v57;
      *((_DWORD *)v9 - 14) = v58;
      *((_DWORD *)v9 - 13) = v21;
      *(v9 - 48) = v56;
      *(v9 - 43) = v55;
      *(v9 - 42) = v54;
      *(_DWORD *)(v9 - 47) = 0;
      *(v9 - 41) = v53;
      *(v9 - 40) = v52;
      *(v9 - 39) = v51;
      *(v9 - 38) = v50;
      *(v9 - 37) = v49;
      *(v9 - 36) = v48;
      *(v9 - 35) = v47;
      *(v9 - 34) = v46;
      *(v9 - 33) = v45;
      *(v9 - 32) = v44;
      *(v9 - 31) = v43;
      *(v9 - 30) = v42;
      *(v9 - 29) = v41;
      *(v9 - 28) = v40;
      *(_WORD *)(v9 - 27) = v60;
      *(v9 - 25) = v61;
      *((_QWORD *)v9 - 3) = v39;
      *((double *)v9 - 2) = v10;
      *((double *)v9 - 1) = v11;
      *v9 = v38;
      v9[1] = v37;
      v9[2] = v36;
      v9[3] = v35;
      v22 = v34;
      *((_DWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 2) = v22;
      *(_QWORD *)(v9 + 12) = 0;
      *((_WORD *)v9 + 10) = 0;
      v9[22] = v33;
      v9[23] = v32;
      *((_QWORD *)v9 + 3) = 0;
      v9[32] = 0;
      v9[33] = v31;
      v9[34] = v12;
      v9[35] = v13;
      v9[36] = 0;
      v9[37] = v14;
      v9[38] = v15;
      v9[39] = v16;
      v9[40] = v17;
      v9[41] = v18;
      v9[42] = v19;
      *(_WORD *)(v9 + 47) = 0;
      *(_DWORD *)(v9 + 43) = 0;
      *((_DWORD *)v9 + 13) = *(_DWORD *)((char *)v59 + 3);
      ++v8;
      *(_DWORD *)(v9 + 49) = v59[0];
      v9 += 112;
    }
    while (v20 != v8);
  }
  v23 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v24 = v28;
  objc_msgSend(v28, "setWcmWiFiCellCoexIssueTable:", v23);
  v25 = objc_msgSend(v24, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v25, "configureBy:", v29);
  objc_msgSend(v24, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(v24, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(v24, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v24, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(v24, "setWcmCellularScanProtectionCellFrequencies:", &off_1002461A0);
  objc_msgSend(v24, "setWcmCellularScanProtectionCellFrequenciesforBT:", &off_1002461E8);
  return objc_msgSend(v24, "setWcmCellularScanProtectionWiFiChannels:", &off_100246230);
}

id sub_100119080(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  BOOL v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WCM_WiFiCellCoexIssueBandTable *v23;
  id v24;
  id v25;
  uint64_t v27;
  id v28;
  char *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  _DWORD v59[2];
  __int16 v60;
  char v61;
  uint64_t v62;
  uint64_t v63;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231BC0);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v62 = 0;
  v63 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex016_V6WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v62, &v63);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v28 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v27 = (uint64_t)&v27;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v29 = (char *)&v27 - v4 * (unint64_t)v5;
  v6 = &v29[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = v29 + 56;
    v30 = v7;
    do
    {
      v60 = 0;
      v61 = 0;
      v59[0] = 0;
      *(_DWORD *)((char *)v59 + 3) = 0;
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueBand")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueType")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v47 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v40 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v39 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v38 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v37 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v36 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v35 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v34 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v33 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v32 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v31 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue") != 0;
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOBPHS")), "intValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOBPHS")), "intValue");
      v20 = v30;
      v21 = v57;
      *((_DWORD *)v9 - 14) = v58;
      *((_DWORD *)v9 - 13) = v21;
      *(v9 - 48) = v56;
      *(v9 - 43) = v55;
      *(v9 - 42) = v54;
      *(_DWORD *)(v9 - 47) = 0;
      *(v9 - 41) = v53;
      *(v9 - 40) = v52;
      *(v9 - 39) = v51;
      *(v9 - 38) = v50;
      *(v9 - 37) = v49;
      *(v9 - 36) = v48;
      *(v9 - 35) = v47;
      *(v9 - 34) = v46;
      *(v9 - 33) = v45;
      *(v9 - 32) = v44;
      *(v9 - 31) = v43;
      *(v9 - 30) = v42;
      *(v9 - 29) = v41;
      *(v9 - 28) = v40;
      *(_WORD *)(v9 - 27) = v60;
      *(v9 - 25) = v61;
      *((_QWORD *)v9 - 3) = v39;
      *((double *)v9 - 2) = v10;
      *((double *)v9 - 1) = v11;
      *v9 = v38;
      v9[1] = v37;
      v9[2] = v36;
      v9[3] = v35;
      v22 = v34;
      *((_DWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 2) = v22;
      *(_QWORD *)(v9 + 12) = 0;
      *((_WORD *)v9 + 10) = 0;
      v9[22] = v33;
      v9[23] = v32;
      *((_QWORD *)v9 + 3) = 0;
      v9[32] = 0;
      v9[33] = v31;
      v9[34] = v12;
      v9[35] = v13;
      v9[36] = 0;
      v9[37] = v14;
      v9[38] = v15;
      v9[39] = v16;
      v9[40] = v17;
      v9[41] = v18;
      v9[42] = v19;
      *(_WORD *)(v9 + 47) = 0;
      *(_DWORD *)(v9 + 43) = 0;
      *((_DWORD *)v9 + 13) = *(_DWORD *)((char *)v59 + 3);
      ++v8;
      *(_DWORD *)(v9 + 49) = v59[0];
      v9 += 112;
    }
    while (v20 != v8);
  }
  v23 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v24 = v28;
  objc_msgSend(v28, "setWcmWiFiCellCoexIssueTable:", v23);
  v25 = objc_msgSend(v24, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v25, "configureBy:", v29);
  objc_msgSend(v24, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(v24, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(v24, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v24, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(v24, "setWcmCellularScanProtectionCellFrequencies:", &off_100246278);
  objc_msgSend(v24, "setWcmCellularScanProtectionCellFrequenciesforBT:", &off_1002462C0);
  return objc_msgSend(v24, "setWcmCellularScanProtectionWiFiChannels:", &off_100246308);
}

id sub_100119AE8(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  BOOL v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WCM_WiFiCellCoexIssueBandTable *v23;
  id v24;
  id v25;
  uint64_t v27;
  id v28;
  char *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  _DWORD v59[2];
  __int16 v60;
  char v61;
  uint64_t v62;
  uint64_t v63;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231BC0);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v62 = 0;
  v63 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex014_V6WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v62, &v63);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v28 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v27 = (uint64_t)&v27;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v29 = (char *)&v27 - v4 * (unint64_t)v5;
  v6 = &v29[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = v29 + 56;
    v30 = v7;
    do
    {
      v60 = 0;
      v61 = 0;
      v59[0] = 0;
      *(_DWORD *)((char *)v59 + 3) = 0;
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueBand")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueType")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v47 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v40 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v39 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v38 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v37 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v36 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v35 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v34 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v33 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v32 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v31 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue") != 0;
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOBPHS")), "intValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOBPHS")), "intValue");
      v20 = v30;
      v21 = v57;
      *((_DWORD *)v9 - 14) = v58;
      *((_DWORD *)v9 - 13) = v21;
      *(v9 - 48) = v56;
      *(v9 - 43) = v55;
      *(v9 - 42) = v54;
      *(_DWORD *)(v9 - 47) = 0;
      *(v9 - 41) = v53;
      *(v9 - 40) = v52;
      *(v9 - 39) = v51;
      *(v9 - 38) = v50;
      *(v9 - 37) = v49;
      *(v9 - 36) = v48;
      *(v9 - 35) = v47;
      *(v9 - 34) = v46;
      *(v9 - 33) = v45;
      *(v9 - 32) = v44;
      *(v9 - 31) = v43;
      *(v9 - 30) = v42;
      *(v9 - 29) = v41;
      *(v9 - 28) = v40;
      *(_WORD *)(v9 - 27) = v60;
      *(v9 - 25) = v61;
      *((_QWORD *)v9 - 3) = v39;
      *((double *)v9 - 2) = v10;
      *((double *)v9 - 1) = v11;
      *v9 = v38;
      v9[1] = v37;
      v9[2] = v36;
      v9[3] = v35;
      v22 = v34;
      *((_DWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 2) = v22;
      *(_QWORD *)(v9 + 12) = 0;
      *((_WORD *)v9 + 10) = 0;
      v9[22] = v33;
      v9[23] = v32;
      *((_QWORD *)v9 + 3) = 0;
      v9[32] = 0;
      v9[33] = v31;
      v9[34] = v12;
      v9[35] = v13;
      v9[36] = 0;
      v9[37] = v14;
      v9[38] = v15;
      v9[39] = v16;
      v9[40] = v17;
      v9[41] = v18;
      v9[42] = v19;
      *(_WORD *)(v9 + 47) = 0;
      *(_DWORD *)(v9 + 43) = 0;
      *((_DWORD *)v9 + 13) = *(_DWORD *)((char *)v59 + 3);
      ++v8;
      *(_DWORD *)(v9 + 49) = v59[0];
      v9 += 112;
    }
    while (v20 != v8);
  }
  v23 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v24 = v28;
  objc_msgSend(v28, "setWcmWiFiCellCoexIssueTable:", v23);
  v25 = objc_msgSend(v24, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v25, "configureBy:", v29);
  objc_msgSend(v24, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(v24, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(v24, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v24, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(v24, "setWcmCellularScanProtectionCellFrequencies:", &off_100246350);
  objc_msgSend(v24, "setWcmCellularScanProtectionCellFrequenciesforBT:", &off_100246398);
  return objc_msgSend(v24, "setWcmCellularScanProtectionWiFiChannels:", &off_1002463E0);
}

id sub_10011A550(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  BOOL v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WCM_WiFiCellCoexIssueBandTable *v23;
  id v24;
  id v25;
  uint64_t v27;
  id v28;
  char *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  _DWORD v59[2];
  __int16 v60;
  char v61;
  uint64_t v62;
  uint64_t v63;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231BC0);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v62 = 0;
  v63 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex013_V6WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v62, &v63);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v28 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v27 = (uint64_t)&v27;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v29 = (char *)&v27 - v4 * (unint64_t)v5;
  v6 = &v29[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = v29 + 56;
    v30 = v7;
    do
    {
      v60 = 0;
      v61 = 0;
      v59[0] = 0;
      *(_DWORD *)((char *)v59 + 3) = 0;
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueBand")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueType")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v47 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v40 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v39 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v38 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v37 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v36 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v35 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v34 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v33 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v32 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v31 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue") != 0;
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOBPHS")), "intValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOBPHS")), "intValue");
      v20 = v30;
      v21 = v57;
      *((_DWORD *)v9 - 14) = v58;
      *((_DWORD *)v9 - 13) = v21;
      *(v9 - 48) = v56;
      *(v9 - 43) = v55;
      *(v9 - 42) = v54;
      *(_DWORD *)(v9 - 47) = 0;
      *(v9 - 41) = v53;
      *(v9 - 40) = v52;
      *(v9 - 39) = v51;
      *(v9 - 38) = v50;
      *(v9 - 37) = v49;
      *(v9 - 36) = v48;
      *(v9 - 35) = v47;
      *(v9 - 34) = v46;
      *(v9 - 33) = v45;
      *(v9 - 32) = v44;
      *(v9 - 31) = v43;
      *(v9 - 30) = v42;
      *(v9 - 29) = v41;
      *(v9 - 28) = v40;
      *(_WORD *)(v9 - 27) = v60;
      *(v9 - 25) = v61;
      *((_QWORD *)v9 - 3) = v39;
      *((double *)v9 - 2) = v10;
      *((double *)v9 - 1) = v11;
      *v9 = v38;
      v9[1] = v37;
      v9[2] = v36;
      v9[3] = v35;
      v22 = v34;
      *((_DWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 2) = v22;
      *(_QWORD *)(v9 + 12) = 0;
      *((_WORD *)v9 + 10) = 0;
      v9[22] = v33;
      v9[23] = v32;
      *((_QWORD *)v9 + 3) = 0;
      v9[32] = 0;
      v9[33] = v31;
      v9[34] = v12;
      v9[35] = v13;
      v9[36] = 0;
      v9[37] = v14;
      v9[38] = v15;
      v9[39] = v16;
      v9[40] = v17;
      v9[41] = v18;
      v9[42] = v19;
      *(_WORD *)(v9 + 47) = 0;
      *(_DWORD *)(v9 + 43) = 0;
      *((_DWORD *)v9 + 13) = *(_DWORD *)((char *)v59 + 3);
      ++v8;
      *(_DWORD *)(v9 + 49) = v59[0];
      v9 += 112;
    }
    while (v20 != v8);
  }
  v23 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v24 = v28;
  objc_msgSend(v28, "setWcmWiFiCellCoexIssueTable:", v23);
  v25 = objc_msgSend(v24, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v25, "configureBy:", v29);
  objc_msgSend(v24, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(v24, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(v24, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v24, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(v24, "setWcmCellularScanProtectionCellFrequencies:", &off_100246428);
  objc_msgSend(v24, "setWcmCellularScanProtectionCellFrequenciesforBT:", &off_100246470);
  return objc_msgSend(v24, "setWcmCellularScanProtectionWiFiChannels:", &off_1002464B8);
}

id sub_10011AFB8(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  WCM_WiFiCellCoexIssueBandTable *v24;
  id v25;
  id v26;
  _UNKNOWN **v27;
  _QWORD v29[2];
  id v30;
  char *v31;
  uint64_t v32;
  _BOOL4 v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  _DWORD v67[2];
  __int16 v68;
  char v69;
  uint64_t v70;
  uint64_t v71;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231BC0);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v70 = 0;
  v71 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex033_V7WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v70, &v71);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v30 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v29[1] = v29;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v31 = (char *)v29 - v4 * (unint64_t)v5;
  v6 = &v31[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = v31 + 56;
    v32 = v7;
    do
    {
      v68 = 0;
      v69 = 0;
      v67[0] = 0;
      *(_DWORD *)((char *)v67 + 3) = 0;
      v66 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueBand")), "intValue");
      v65 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueType")), "intValue");
      v64 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v63 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v62 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v61 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v60 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v59 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v47 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v40 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v39 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v38 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v37 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v36 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v35 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v34 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v33 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue") != 0;
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOBPHS")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOBPHS")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii1Enabled")), "BOOLValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii3Enabled")), "BOOLValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5aEnabled")), "BOOLValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5bEnabled")), "BOOLValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5cEnabled")), "BOOLValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5dEnabled")), "BOOLValue");
      v20 = v65;
      *((_DWORD *)v9 - 14) = v66;
      *((_DWORD *)v9 - 13) = v20;
      *(v9 - 48) = v64;
      *(v9 - 43) = v63;
      *(v9 - 42) = v62;
      *(v9 - 41) = v61;
      *(v9 - 40) = v60;
      *(v9 - 39) = v59;
      *(v9 - 38) = v58;
      *(v9 - 37) = v57;
      *(v9 - 36) = v56;
      *(_DWORD *)(v9 - 47) = 0;
      *(v9 - 35) = v55;
      *(v9 - 34) = v54;
      *(v9 - 33) = v53;
      *(v9 - 32) = v52;
      *(v9 - 31) = v51;
      *(v9 - 30) = v50;
      *(v9 - 29) = v49;
      *(v9 - 28) = v48;
      *(_WORD *)(v9 - 27) = v68;
      *(v9 - 25) = v69;
      *((_QWORD *)v9 - 3) = v47;
      *((double *)v9 - 2) = v10;
      *((double *)v9 - 1) = v11;
      *v9 = v46;
      v9[1] = v45;
      v9[2] = v44;
      v9[3] = v43;
      v21 = v42;
      *((_DWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 2) = v21;
      *(_QWORD *)(v9 + 12) = 0;
      *((_WORD *)v9 + 10) = 0;
      v9[22] = v41;
      v9[23] = v40;
      *((_QWORD *)v9 + 3) = 0;
      v9[32] = 0;
      v9[33] = v39;
      v9[34] = v38;
      v9[35] = v37;
      v9[36] = 0;
      v9[37] = v36;
      v9[38] = v35;
      v9[39] = v34;
      v9[40] = v33;
      v9[41] = v12;
      v9[42] = v13;
      v9[43] = v14;
      v9[44] = v15;
      v9[45] = v16;
      v9[46] = v17;
      v9[47] = v18;
      v9[48] = v19;
      v22 = v67[0];
      ++v8;
      *((_DWORD *)v9 + 13) = *(_DWORD *)((char *)v67 + 3);
      v23 = v32;
      *(_DWORD *)(v9 + 49) = v22;
      v9 += 112;
    }
    while (v23 != v8);
  }
  v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v25 = v30;
  objc_msgSend(v30, "setWcmWiFiCellCoexIssueTable:", v24);
  v26 = objc_msgSend(v25, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v26, "configureBy:", v31);
  objc_msgSend(v25, "setWcmCellRc1CoexIssueTable:", -[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", CFSTR("CoEx-Table-CellRC1-Coex002")));
  objc_msgSend(v25, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v25, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequencies:", &off_100246530);
  if (_os_feature_enabled_impl("wirelessradiomanager", "HFBTEnhancement"))
    v27 = &off_1002465A8;
  else
    v27 = &off_100246620;
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequenciesforBT:", v27);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannels:", &off_100246698);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannelsWiFiEnh:", &off_100246710);
  objc_msgSend(v25, "setWcmWiFiScanThrottlingChannelIndices:", &off_100246728);
  objc_msgSend(v25, "setWcmGen9rFemDefaultMode2gWiFiCellularbands:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100246740, CFSTR("LTE"), &off_100246758, CFSTR("NR"), 0));
  return objc_msgSend(v25, "setWcmGen9rFemDefaultMode5gWiFiCellularbands:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100246770, CFSTR("LTE"), 0));
}

id sub_10011BC10(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  WCM_WiFiCellCoexIssueBandTable *v24;
  id v25;
  id v26;
  _UNKNOWN **v27;
  _QWORD v29[2];
  id v30;
  char *v31;
  uint64_t v32;
  _BOOL4 v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  _DWORD v67[2];
  __int16 v68;
  char v69;
  uint64_t v70;
  uint64_t v71;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231BC0);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v70 = 0;
  v71 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex034_V7WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v70, &v71);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v30 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v29[1] = v29;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v31 = (char *)v29 - v4 * (unint64_t)v5;
  v6 = &v31[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = v31 + 56;
    v32 = v7;
    do
    {
      v68 = 0;
      v69 = 0;
      v67[0] = 0;
      *(_DWORD *)((char *)v67 + 3) = 0;
      v66 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueBand")), "intValue");
      v65 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueType")), "intValue");
      v64 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v63 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v62 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v61 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v60 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v59 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v47 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v40 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v39 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v38 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v37 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v36 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v35 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v34 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v33 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue") != 0;
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOBPHS")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOBPHS")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii1Enabled")), "BOOLValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii3Enabled")), "BOOLValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5aEnabled")), "BOOLValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5bEnabled")), "BOOLValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5cEnabled")), "BOOLValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5dEnabled")), "BOOLValue");
      v20 = v65;
      *((_DWORD *)v9 - 14) = v66;
      *((_DWORD *)v9 - 13) = v20;
      *(v9 - 48) = v64;
      *(v9 - 43) = v63;
      *(v9 - 42) = v62;
      *(v9 - 41) = v61;
      *(v9 - 40) = v60;
      *(v9 - 39) = v59;
      *(v9 - 38) = v58;
      *(v9 - 37) = v57;
      *(v9 - 36) = v56;
      *(_DWORD *)(v9 - 47) = 0;
      *(v9 - 35) = v55;
      *(v9 - 34) = v54;
      *(v9 - 33) = v53;
      *(v9 - 32) = v52;
      *(v9 - 31) = v51;
      *(v9 - 30) = v50;
      *(v9 - 29) = v49;
      *(v9 - 28) = v48;
      *(_WORD *)(v9 - 27) = v68;
      *(v9 - 25) = v69;
      *((_QWORD *)v9 - 3) = v47;
      *((double *)v9 - 2) = v10;
      *((double *)v9 - 1) = v11;
      *v9 = v46;
      v9[1] = v45;
      v9[2] = v44;
      v9[3] = v43;
      v21 = v42;
      *((_DWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 2) = v21;
      *(_QWORD *)(v9 + 12) = 0;
      *((_WORD *)v9 + 10) = 0;
      v9[22] = v41;
      v9[23] = v40;
      *((_QWORD *)v9 + 3) = 0;
      v9[32] = 0;
      v9[33] = v39;
      v9[34] = v38;
      v9[35] = v37;
      v9[36] = 0;
      v9[37] = v36;
      v9[38] = v35;
      v9[39] = v34;
      v9[40] = v33;
      v9[41] = v12;
      v9[42] = v13;
      v9[43] = v14;
      v9[44] = v15;
      v9[45] = v16;
      v9[46] = v17;
      v9[47] = v18;
      v9[48] = v19;
      v22 = v67[0];
      ++v8;
      *((_DWORD *)v9 + 13) = *(_DWORD *)((char *)v67 + 3);
      v23 = v32;
      *(_DWORD *)(v9 + 49) = v22;
      v9 += 112;
    }
    while (v23 != v8);
  }
  v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v25 = v30;
  objc_msgSend(v30, "setWcmWiFiCellCoexIssueTable:", v24);
  v26 = objc_msgSend(v25, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v26, "configureBy:", v31);
  objc_msgSend(v25, "setWcmCellRc1CoexIssueTable:", -[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", CFSTR("CoEx-Table-CellRC1-Coex004")));
  objc_msgSend(v25, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v25, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequencies:", &off_1002467E8);
  if (_os_feature_enabled_impl("wirelessradiomanager", "HFBTEnhancement"))
    v27 = &off_100246860;
  else
    v27 = &off_1002468D8;
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequenciesforBT:", v27);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannels:", &off_100246950);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannelsWiFiEnh:", &off_1002469C8);
  objc_msgSend(v25, "setWcmWiFiScanThrottlingChannelIndices:", &off_1002469E0);
  objc_msgSend(v25, "setWcmGen9rFemDefaultMode2gWiFiCellularbands:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_1002469F8, CFSTR("LTE"), &off_100246A10, CFSTR("NR"), 0));
  return objc_msgSend(v25, "setWcmGen9rFemDefaultMode5gWiFiCellularbands:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100246A28, CFSTR("LTE"), 0));
}

id sub_10011C868(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  WCM_WiFiCellCoexIssueBandTable *v24;
  id v25;
  id v26;
  _QWORD v28[2];
  id v29;
  char *v30;
  uint64_t v31;
  _BOOL4 v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  _DWORD v66[2];
  __int16 v67;
  char v68;
  uint64_t v69;
  uint64_t v70;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231BC0);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v69 = 0;
  v70 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex032_V7WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v69, &v70);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v29 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v28[1] = v28;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v30 = (char *)v28 - v4 * (unint64_t)v5;
  v6 = &v30[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = v30 + 56;
    v31 = v7;
    do
    {
      v67 = 0;
      v68 = 0;
      v66[0] = 0;
      *(_DWORD *)((char *)v66 + 3) = 0;
      v65 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueBand")), "intValue");
      v64 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueType")), "intValue");
      v63 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v62 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v61 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v60 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v59 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v47 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v46 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v40 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v39 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v38 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v37 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v36 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v35 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v34 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v33 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v32 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue") != 0;
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOBPHS")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOBPHS")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii1Enabled")), "BOOLValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii3Enabled")), "BOOLValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5aEnabled")), "BOOLValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5bEnabled")), "BOOLValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5cEnabled")), "BOOLValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5dEnabled")), "BOOLValue");
      v20 = v64;
      *((_DWORD *)v9 - 14) = v65;
      *((_DWORD *)v9 - 13) = v20;
      *(v9 - 48) = v63;
      *(v9 - 43) = v62;
      *(v9 - 42) = v61;
      *(v9 - 41) = v60;
      *(v9 - 40) = v59;
      *(v9 - 39) = v58;
      *(v9 - 38) = v57;
      *(v9 - 37) = v56;
      *(v9 - 36) = v55;
      *(_DWORD *)(v9 - 47) = 0;
      *(v9 - 35) = v54;
      *(v9 - 34) = v53;
      *(v9 - 33) = v52;
      *(v9 - 32) = v51;
      *(v9 - 31) = v50;
      *(v9 - 30) = v49;
      *(v9 - 29) = v48;
      *(v9 - 28) = v47;
      *(_WORD *)(v9 - 27) = v67;
      *(v9 - 25) = v68;
      *((_QWORD *)v9 - 3) = v46;
      *((double *)v9 - 2) = v10;
      *((double *)v9 - 1) = v11;
      *v9 = v45;
      v9[1] = v44;
      v9[2] = v43;
      v9[3] = v42;
      v21 = v41;
      *((_DWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 2) = v21;
      *(_QWORD *)(v9 + 12) = 0;
      *((_WORD *)v9 + 10) = 0;
      v9[22] = v40;
      v9[23] = v39;
      *((_QWORD *)v9 + 3) = 0;
      v9[32] = 0;
      v9[33] = v38;
      v9[34] = v37;
      v9[35] = v36;
      v9[36] = 0;
      v9[37] = v35;
      v9[38] = v34;
      v9[39] = v33;
      v9[40] = v32;
      v9[41] = v12;
      v9[42] = v13;
      v9[43] = v14;
      v9[44] = v15;
      v9[45] = v16;
      v9[46] = v17;
      v9[47] = v18;
      v9[48] = v19;
      v22 = v66[0];
      ++v8;
      *((_DWORD *)v9 + 13) = *(_DWORD *)((char *)v66 + 3);
      v23 = v31;
      *(_DWORD *)(v9 + 49) = v22;
      v9 += 112;
    }
    while (v23 != v8);
  }
  v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v25 = v29;
  objc_msgSend(v29, "setWcmWiFiCellCoexIssueTable:", v24);
  v26 = objc_msgSend(v25, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v26, "configureBy:", v30);
  objc_msgSend(v25, "setWcmCellRc1CoexIssueTable:", -[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", CFSTR("CoEx-Table-CellRC1-Coex006")));
  objc_msgSend(v25, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v25, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequencies:", &off_100246AA0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequenciesforBT:", &off_100246B18);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannels:", &off_100246B90);
  return objc_msgSend(v25, "setWcmWiFiScanThrottlingChannelIndices:", &off_100246BA8);
}

id sub_10011D420(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  WCM_WiFiCellCoexIssueBandTable *v24;
  id v25;
  id v26;
  _QWORD v28[2];
  id v29;
  char *v30;
  uint64_t v31;
  _BOOL4 v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  _DWORD v66[2];
  __int16 v67;
  char v68;
  uint64_t v69;
  uint64_t v70;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231BC0);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v69 = 0;
  v70 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex031_V7WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v69, &v70);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v29 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v28[1] = v28;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v30 = (char *)v28 - v4 * (unint64_t)v5;
  v6 = &v30[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = v30 + 56;
    v31 = v7;
    do
    {
      v67 = 0;
      v68 = 0;
      v66[0] = 0;
      *(_DWORD *)((char *)v66 + 3) = 0;
      v65 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueBand")), "intValue");
      v64 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueType")), "intValue");
      v63 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v62 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v61 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v60 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v59 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v47 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v46 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v40 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v39 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v38 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v37 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v36 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v35 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v34 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v33 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v32 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue") != 0;
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOBPHS")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOBPHS")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii1Enabled")), "BOOLValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii3Enabled")), "BOOLValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5aEnabled")), "BOOLValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5bEnabled")), "BOOLValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5cEnabled")), "BOOLValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5dEnabled")), "BOOLValue");
      v20 = v64;
      *((_DWORD *)v9 - 14) = v65;
      *((_DWORD *)v9 - 13) = v20;
      *(v9 - 48) = v63;
      *(v9 - 43) = v62;
      *(v9 - 42) = v61;
      *(v9 - 41) = v60;
      *(v9 - 40) = v59;
      *(v9 - 39) = v58;
      *(v9 - 38) = v57;
      *(v9 - 37) = v56;
      *(v9 - 36) = v55;
      *(_DWORD *)(v9 - 47) = 0;
      *(v9 - 35) = v54;
      *(v9 - 34) = v53;
      *(v9 - 33) = v52;
      *(v9 - 32) = v51;
      *(v9 - 31) = v50;
      *(v9 - 30) = v49;
      *(v9 - 29) = v48;
      *(v9 - 28) = v47;
      *(_WORD *)(v9 - 27) = v67;
      *(v9 - 25) = v68;
      *((_QWORD *)v9 - 3) = v46;
      *((double *)v9 - 2) = v10;
      *((double *)v9 - 1) = v11;
      *v9 = v45;
      v9[1] = v44;
      v9[2] = v43;
      v9[3] = v42;
      v21 = v41;
      *((_DWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 2) = v21;
      *(_QWORD *)(v9 + 12) = 0;
      *((_WORD *)v9 + 10) = 0;
      v9[22] = v40;
      v9[23] = v39;
      *((_QWORD *)v9 + 3) = 0;
      v9[32] = 0;
      v9[33] = v38;
      v9[34] = v37;
      v9[35] = v36;
      v9[36] = 0;
      v9[37] = v35;
      v9[38] = v34;
      v9[39] = v33;
      v9[40] = v32;
      v9[41] = v12;
      v9[42] = v13;
      v9[43] = v14;
      v9[44] = v15;
      v9[45] = v16;
      v9[46] = v17;
      v9[47] = v18;
      v9[48] = v19;
      v22 = v66[0];
      ++v8;
      *((_DWORD *)v9 + 13) = *(_DWORD *)((char *)v66 + 3);
      v23 = v31;
      *(_DWORD *)(v9 + 49) = v22;
      v9 += 112;
    }
    while (v23 != v8);
  }
  v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v25 = v29;
  objc_msgSend(v29, "setWcmWiFiCellCoexIssueTable:", v24);
  v26 = objc_msgSend(v25, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v26, "configureBy:", v30);
  objc_msgSend(v25, "setWcmCellRc1CoexIssueTable:", -[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", CFSTR("CoEx-Table-CellRC1-Coex005")));
  objc_msgSend(v25, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v25, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequencies:", &off_100246C20);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequenciesforBT:", &off_100246C80);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannels:", &off_100246CF8);
  return objc_msgSend(v25, "setWcmWiFiScanThrottlingChannelIndices:", &off_100246D10);
}

id sub_10011DFD8(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  WCM_WiFiCellCoexIssueBandTable *v24;
  id v25;
  id v26;
  _UNKNOWN **v27;
  _QWORD v29[2];
  id v30;
  char *v31;
  uint64_t v32;
  _BOOL4 v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  _DWORD v67[2];
  __int16 v68;
  char v69;
  uint64_t v70;
  uint64_t v71;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231BC0);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v70 = 0;
  v71 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex041_V7WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v70, &v71);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v30 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v29[1] = v29;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v31 = (char *)v29 - v4 * (unint64_t)v5;
  v6 = &v31[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = v31 + 56;
    v32 = v7;
    do
    {
      v68 = 0;
      v69 = 0;
      v67[0] = 0;
      *(_DWORD *)((char *)v67 + 3) = 0;
      v66 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueBand")), "intValue");
      v65 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueType")), "intValue");
      v64 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v63 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v62 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v61 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v60 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v59 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v47 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v40 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v39 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v38 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v37 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v36 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v35 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v34 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v33 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue") != 0;
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOBPHS")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOBPHS")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii1Enabled")), "BOOLValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii3Enabled")), "BOOLValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5aEnabled")), "BOOLValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5bEnabled")), "BOOLValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5cEnabled")), "BOOLValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5dEnabled")), "BOOLValue");
      v20 = v65;
      *((_DWORD *)v9 - 14) = v66;
      *((_DWORD *)v9 - 13) = v20;
      *(v9 - 48) = v64;
      *(v9 - 43) = v63;
      *(v9 - 42) = v62;
      *(v9 - 41) = v61;
      *(v9 - 40) = v60;
      *(v9 - 39) = v59;
      *(v9 - 38) = v58;
      *(v9 - 37) = v57;
      *(v9 - 36) = v56;
      *(_DWORD *)(v9 - 47) = 0;
      *(v9 - 35) = v55;
      *(v9 - 34) = v54;
      *(v9 - 33) = v53;
      *(v9 - 32) = v52;
      *(v9 - 31) = v51;
      *(v9 - 30) = v50;
      *(v9 - 29) = v49;
      *(v9 - 28) = v48;
      *(_WORD *)(v9 - 27) = v68;
      *(v9 - 25) = v69;
      *((_QWORD *)v9 - 3) = v47;
      *((double *)v9 - 2) = v10;
      *((double *)v9 - 1) = v11;
      *v9 = v46;
      v9[1] = v45;
      v9[2] = v44;
      v9[3] = v43;
      v21 = v42;
      *((_DWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 2) = v21;
      *(_QWORD *)(v9 + 12) = 0;
      *((_WORD *)v9 + 10) = 0;
      v9[22] = v41;
      v9[23] = v40;
      *((_QWORD *)v9 + 3) = 0;
      v9[32] = 0;
      v9[33] = v39;
      v9[34] = v38;
      v9[35] = v37;
      v9[36] = 0;
      v9[37] = v36;
      v9[38] = v35;
      v9[39] = v34;
      v9[40] = v33;
      v9[41] = v12;
      v9[42] = v13;
      v9[43] = v14;
      v9[44] = v15;
      v9[45] = v16;
      v9[46] = v17;
      v9[47] = v18;
      v9[48] = v19;
      v22 = v67[0];
      ++v8;
      *((_DWORD *)v9 + 13) = *(_DWORD *)((char *)v67 + 3);
      v23 = v32;
      *(_DWORD *)(v9 + 49) = v22;
      v9 += 112;
    }
    while (v23 != v8);
  }
  v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v25 = v30;
  objc_msgSend(v30, "setWcmWiFiCellCoexIssueTable:", v24);
  v26 = objc_msgSend(v25, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v26, "configureBy:", v31);
  objc_msgSend(v25, "setWcmCellRc1CoexIssueTable:", -[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", CFSTR("CoEx-Table-CellRC1-Coex002")));
  objc_msgSend(v25, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v25, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequencies:", &off_100246D70);
  if (_os_feature_enabled_impl("wirelessradiomanager", "HFBTEnhancement"))
    v27 = &off_100246DD0;
  else
    v27 = &off_100246E30;
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequenciesforBT:", v27);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannels:", &off_100246E90);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannelsWiFiEnh:", &off_100246EF0);
  objc_msgSend(v25, "setWcmWiFiScanThrottlingChannelIndices:", 0);
  return objc_msgSend(v25, "setWcmGen9rFemDefaultMode2gWiFiCellularbands:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100246F08, CFSTR("LTE"), &off_100246F20, CFSTR("NR"), 0));
}

id sub_10011EC08(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  WCM_WiFiCellCoexIssueBandTable *v24;
  id v25;
  id v26;
  _UNKNOWN **v27;
  _QWORD v29[2];
  id v30;
  char *v31;
  uint64_t v32;
  _BOOL4 v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  _DWORD v67[2];
  __int16 v68;
  char v69;
  uint64_t v70;
  uint64_t v71;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231BC0);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v70 = 0;
  v71 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex042_V7WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v70, &v71);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v30 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v29[1] = v29;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v31 = (char *)v29 - v4 * (unint64_t)v5;
  v6 = &v31[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = v31 + 56;
    v32 = v7;
    do
    {
      v68 = 0;
      v69 = 0;
      v67[0] = 0;
      *(_DWORD *)((char *)v67 + 3) = 0;
      v66 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueBand")), "intValue");
      v65 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueType")), "intValue");
      v64 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v63 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v62 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v61 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v60 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v59 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v47 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v40 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v39 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v38 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v37 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v36 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v35 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v34 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v33 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue") != 0;
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOBPHS")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOBPHS")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii1Enabled")), "BOOLValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii3Enabled")), "BOOLValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5aEnabled")), "BOOLValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5bEnabled")), "BOOLValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5cEnabled")), "BOOLValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5dEnabled")), "BOOLValue");
      v20 = v65;
      *((_DWORD *)v9 - 14) = v66;
      *((_DWORD *)v9 - 13) = v20;
      *(v9 - 48) = v64;
      *(v9 - 43) = v63;
      *(v9 - 42) = v62;
      *(v9 - 41) = v61;
      *(v9 - 40) = v60;
      *(v9 - 39) = v59;
      *(v9 - 38) = v58;
      *(v9 - 37) = v57;
      *(v9 - 36) = v56;
      *(_DWORD *)(v9 - 47) = 0;
      *(v9 - 35) = v55;
      *(v9 - 34) = v54;
      *(v9 - 33) = v53;
      *(v9 - 32) = v52;
      *(v9 - 31) = v51;
      *(v9 - 30) = v50;
      *(v9 - 29) = v49;
      *(v9 - 28) = v48;
      *(_WORD *)(v9 - 27) = v68;
      *(v9 - 25) = v69;
      *((_QWORD *)v9 - 3) = v47;
      *((double *)v9 - 2) = v10;
      *((double *)v9 - 1) = v11;
      *v9 = v46;
      v9[1] = v45;
      v9[2] = v44;
      v9[3] = v43;
      v21 = v42;
      *((_DWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 2) = v21;
      *(_QWORD *)(v9 + 12) = 0;
      *((_WORD *)v9 + 10) = 0;
      v9[22] = v41;
      v9[23] = v40;
      *((_QWORD *)v9 + 3) = 0;
      v9[32] = 0;
      v9[33] = v39;
      v9[34] = v38;
      v9[35] = v37;
      v9[36] = 0;
      v9[37] = v36;
      v9[38] = v35;
      v9[39] = v34;
      v9[40] = v33;
      v9[41] = v12;
      v9[42] = v13;
      v9[43] = v14;
      v9[44] = v15;
      v9[45] = v16;
      v9[46] = v17;
      v9[47] = v18;
      v9[48] = v19;
      v22 = v67[0];
      ++v8;
      *((_DWORD *)v9 + 13) = *(_DWORD *)((char *)v67 + 3);
      v23 = v32;
      *(_DWORD *)(v9 + 49) = v22;
      v9 += 112;
    }
    while (v23 != v8);
  }
  v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v25 = v30;
  objc_msgSend(v30, "setWcmWiFiCellCoexIssueTable:", v24);
  v26 = objc_msgSend(v25, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v26, "configureBy:", v31);
  objc_msgSend(v25, "setWcmCellRc1CoexIssueTable:", -[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", CFSTR("CoEx-Table-CellRC1-Coex004")));
  objc_msgSend(v25, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v25, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequencies:", &off_100246F80);
  if (_os_feature_enabled_impl("wirelessradiomanager", "HFBTEnhancement"))
    v27 = &off_100246FE0;
  else
    v27 = &off_100247040;
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequenciesforBT:", v27);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannels:", &off_1002470A0);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannelsWiFiEnh:", &off_100247100);
  objc_msgSend(v25, "setWcmWiFiScanThrottlingChannelIndices:", 0);
  return objc_msgSend(v25, "setWcmGen9rFemDefaultMode2gWiFiCellularbands:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100247118, CFSTR("LTE"), &off_100247130, CFSTR("NR"), 0));
}

id sub_10011F838(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  WCM_WiFiCellCoexIssueBandTable *v24;
  id v25;
  id v26;
  _UNKNOWN **v27;
  _QWORD v29[2];
  id v30;
  char *v31;
  uint64_t v32;
  _BOOL4 v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  _DWORD v67[2];
  __int16 v68;
  char v69;
  uint64_t v70;
  uint64_t v71;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231BC0);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v70 = 0;
  v71 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex044_V7WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v70, &v71);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v30 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v29[1] = v29;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v31 = (char *)v29 - v4 * (unint64_t)v5;
  v6 = &v31[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = v31 + 56;
    v32 = v7;
    do
    {
      v68 = 0;
      v69 = 0;
      v67[0] = 0;
      *(_DWORD *)((char *)v67 + 3) = 0;
      v66 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueBand")), "intValue");
      v65 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueType")), "intValue");
      v64 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v63 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v62 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v61 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v60 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v59 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v47 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v40 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v39 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v38 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v37 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v36 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v35 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v34 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v33 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue") != 0;
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOBPHS")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOBPHS")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii1Enabled")), "BOOLValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii3Enabled")), "BOOLValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5aEnabled")), "BOOLValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5bEnabled")), "BOOLValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5cEnabled")), "BOOLValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5dEnabled")), "BOOLValue");
      v20 = v65;
      *((_DWORD *)v9 - 14) = v66;
      *((_DWORD *)v9 - 13) = v20;
      *(v9 - 48) = v64;
      *(v9 - 43) = v63;
      *(v9 - 42) = v62;
      *(v9 - 41) = v61;
      *(v9 - 40) = v60;
      *(v9 - 39) = v59;
      *(v9 - 38) = v58;
      *(v9 - 37) = v57;
      *(v9 - 36) = v56;
      *(_DWORD *)(v9 - 47) = 0;
      *(v9 - 35) = v55;
      *(v9 - 34) = v54;
      *(v9 - 33) = v53;
      *(v9 - 32) = v52;
      *(v9 - 31) = v51;
      *(v9 - 30) = v50;
      *(v9 - 29) = v49;
      *(v9 - 28) = v48;
      *(_WORD *)(v9 - 27) = v68;
      *(v9 - 25) = v69;
      *((_QWORD *)v9 - 3) = v47;
      *((double *)v9 - 2) = v10;
      *((double *)v9 - 1) = v11;
      *v9 = v46;
      v9[1] = v45;
      v9[2] = v44;
      v9[3] = v43;
      v21 = v42;
      *((_DWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 2) = v21;
      *(_QWORD *)(v9 + 12) = 0;
      *((_WORD *)v9 + 10) = 0;
      v9[22] = v41;
      v9[23] = v40;
      *((_QWORD *)v9 + 3) = 0;
      v9[32] = 0;
      v9[33] = v39;
      v9[34] = v38;
      v9[35] = v37;
      v9[36] = 0;
      v9[37] = v36;
      v9[38] = v35;
      v9[39] = v34;
      v9[40] = v33;
      v9[41] = v12;
      v9[42] = v13;
      v9[43] = v14;
      v9[44] = v15;
      v9[45] = v16;
      v9[46] = v17;
      v9[47] = v18;
      v9[48] = v19;
      v22 = v67[0];
      ++v8;
      *((_DWORD *)v9 + 13) = *(_DWORD *)((char *)v67 + 3);
      v23 = v32;
      *(_DWORD *)(v9 + 49) = v22;
      v9 += 112;
    }
    while (v23 != v8);
  }
  v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v25 = v30;
  objc_msgSend(v30, "setWcmWiFiCellCoexIssueTable:", v24);
  v26 = objc_msgSend(v25, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v26, "configureBy:", v31);
  objc_msgSend(v25, "setWcmCellRc1CoexIssueTable:", -[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", CFSTR("CoEx-Table-CellRC1-Coex006")));
  objc_msgSend(v25, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v25, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequencies:", &off_100247190);
  if (_os_feature_enabled_impl("wirelessradiomanager", "HFBTEnhancement"))
    v27 = &off_1002471F0;
  else
    v27 = &off_100247250;
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequenciesforBT:", v27);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannels:", &off_1002472B0);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannelsWiFiEnh:", &off_100247310);
  objc_msgSend(v25, "setWcmWiFiScanThrottlingChannelIndices:", 0);
  return objc_msgSend(v25, "setWcmGen9rFemDefaultMode2gWiFiCellularbands:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100247328, CFSTR("LTE"), &off_100247340, CFSTR("NR"), 0));
}

id sub_100120468(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int16 v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  WCM_WiFiCellCoexIssueBandTable *v24;
  id v25;
  id v26;
  _UNKNOWN **v27;
  _QWORD v29[2];
  id v30;
  char *v31;
  uint64_t v32;
  _BOOL4 v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  _DWORD v67[2];
  __int16 v68;
  char v69;
  uint64_t v70;
  uint64_t v71;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", -60);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -40);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -50);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 6790);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 192);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231BC0);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  v70 = 0;
  v71 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex043_V7WiFiEnh"), (uint64_t)CFSTR("plist")), 2, &v70, &v71);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v30 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v29[1] = v29;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v31 = (char *)v29 - v4 * (unint64_t)v5;
  v6 = &v31[v3 * (unint64_t)v5];
  *(_DWORD *)v6 = 211;
  *(_OWORD *)(v6 + 4) = 0u;
  *(_OWORD *)(v6 + 20) = 0u;
  *(_OWORD *)(v6 + 36) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_OWORD *)(v6 + 68) = 0u;
  *(_OWORD *)(v6 + 84) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  v7 = (unsigned __int16)objc_msgSend(v2, "count");
  if (v7)
  {
    v8 = 0;
    v9 = v31 + 56;
    v32 = v7;
    do
    {
      v68 = 0;
      v69 = 0;
      v67[0] = 0;
      *(_DWORD *)((char *)v67 + 3) = 0;
      v66 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueBand")), "intValue");
      v65 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("issueType")), "intValue");
      v64 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v63 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v62 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v61 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v60 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v59 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v58 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v57 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v56 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiUlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v55 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap000")), "intValue");
      v54 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap001")), "intValue");
      v53 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap010")), "intValue");
      v52 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap011")), "intValue");
      v51 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap100")), "intValue");
      v50 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap101")), "intValue");
      v49 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap110")), "intValue");
      v48 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiDlAntennaBitmapOnCellAntBitmap111")), "intValue");
      v47 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v10 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v11 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v46 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOB")), "intValue");
      v45 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOB")), "intValue");
      v44 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v43 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDoAntennaSelectionForCellOOB")), "intValue");
      v42 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v40 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v39 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority")), "intValue");
      v38 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_WiFi")), "intValue");
      v37 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("ulcaPriority_BT")), "intValue");
      v36 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("CellAntBlk")), "intValue");
      v35 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToDisableOCLCellOOB")), "intValue");
      v34 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToDisableOCLCellOOB")), "intValue");
      v33 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("isWifiEnhBand")), "intValue") != 0;
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiFirstChannelToAvoidForCellOOBPHS")), "intValue");
      v13 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("wifiLastChannelToAvoidForCellOOBPHS")), "intValue");
      v14 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii1Enabled")), "BOOLValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii3Enabled")), "BOOLValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5aEnabled")), "BOOLValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5bEnabled")), "BOOLValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5cEnabled")), "BOOLValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v8), "objectForKey:", CFSTR("hfbtAntBlkBandUnii5dEnabled")), "BOOLValue");
      v20 = v65;
      *((_DWORD *)v9 - 14) = v66;
      *((_DWORD *)v9 - 13) = v20;
      *(v9 - 48) = v64;
      *(v9 - 43) = v63;
      *(v9 - 42) = v62;
      *(v9 - 41) = v61;
      *(v9 - 40) = v60;
      *(v9 - 39) = v59;
      *(v9 - 38) = v58;
      *(v9 - 37) = v57;
      *(v9 - 36) = v56;
      *(_DWORD *)(v9 - 47) = 0;
      *(v9 - 35) = v55;
      *(v9 - 34) = v54;
      *(v9 - 33) = v53;
      *(v9 - 32) = v52;
      *(v9 - 31) = v51;
      *(v9 - 30) = v50;
      *(v9 - 29) = v49;
      *(v9 - 28) = v48;
      *(_WORD *)(v9 - 27) = v68;
      *(v9 - 25) = v69;
      *((_QWORD *)v9 - 3) = v47;
      *((double *)v9 - 2) = v10;
      *((double *)v9 - 1) = v11;
      *v9 = v46;
      v9[1] = v45;
      v9[2] = v44;
      v9[3] = v43;
      v21 = v42;
      *((_DWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 2) = v21;
      *(_QWORD *)(v9 + 12) = 0;
      *((_WORD *)v9 + 10) = 0;
      v9[22] = v41;
      v9[23] = v40;
      *((_QWORD *)v9 + 3) = 0;
      v9[32] = 0;
      v9[33] = v39;
      v9[34] = v38;
      v9[35] = v37;
      v9[36] = 0;
      v9[37] = v36;
      v9[38] = v35;
      v9[39] = v34;
      v9[40] = v33;
      v9[41] = v12;
      v9[42] = v13;
      v9[43] = v14;
      v9[44] = v15;
      v9[45] = v16;
      v9[46] = v17;
      v9[47] = v18;
      v9[48] = v19;
      v22 = v67[0];
      ++v8;
      *((_DWORD *)v9 + 13) = *(_DWORD *)((char *)v67 + 3);
      v23 = v32;
      *(_DWORD *)(v9 + 49) = v22;
      v9 += 112;
    }
    while (v23 != v8);
  }
  v24 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v25 = v30;
  objc_msgSend(v30, "setWcmWiFiCellCoexIssueTable:", v24);
  v26 = objc_msgSend(v25, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v26, "configureBy:", v31);
  objc_msgSend(v25, "setWcmCellRc1CoexIssueTable:", -[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", CFSTR("CoEx-Table-CellRC1-Coex005")));
  objc_msgSend(v25, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(v25, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v25, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(v25, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequencies:", &off_1002473A0);
  if (_os_feature_enabled_impl("wirelessradiomanager", "HFBTEnhancement"))
    v27 = &off_100247400;
  else
    v27 = &off_100247460;
  objc_msgSend(v25, "setWcmCellularScanProtectionCellFrequenciesforBT:", v27);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannels:", &off_1002474C0);
  objc_msgSend(v25, "setWcmCellularScanProtectionWiFiChannelsWiFiEnh:", &off_100247520);
  objc_msgSend(v25, "setWcmWiFiScanThrottlingChannelIndices:", 0);
  return objc_msgSend(v25, "setWcmGen9rFemDefaultMode2gWiFiCellularbands:", +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_100247538, CFSTR("LTE"), &off_100247550, CFSTR("NR"), 0));
}

id sub_100121098(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001F3008);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_1002475B0);
  return objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100247610);
}

id sub_100121190(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ Applying K Parameters"));
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001F3078);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 10.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2506.0, 59.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_100247670);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_1002476D0);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiMaxDuration:", &off_100231C98);
  objc_msgSend(a1, "setWcmCellularWCI2ModePolicy:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8));
  objc_msgSend(a1, "setWcmCellularWCI2ModePowerThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4294967288));
  objc_msgSend(a1, "setWcmCellularWCI2ModeRBThresholdHigh:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(a1, "setWcmCellularWCI2ModeRBThresholdLow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(a1, "setWcmCellularWCI2ModeLTETxDenial:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(a1, "setWcmCellularWCI2ModeMaxAllowedFrameDenials:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40));
  return objc_msgSend(a1, "setWcmCellularWCI2ModeFrameDenialWindow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 200));
}

id sub_10012141C(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ Applying K Parameters"));
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001F39A8);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 10.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2506.0, 59.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_100247730);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100247790);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiMaxDuration:", &off_100231C98);
  objc_msgSend(a1, "setWcmCellularWCI2ModePolicy:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8));
  objc_msgSend(a1, "setWcmCellularWCI2ModePowerThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4294967288));
  objc_msgSend(a1, "setWcmCellularWCI2ModeRBThresholdHigh:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(a1, "setWcmCellularWCI2ModeRBThresholdLow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(a1, "setWcmCellularWCI2ModeLTETxDenial:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(a1, "setWcmCellularWCI2ModeMaxAllowedFrameDenials:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40));
  return objc_msgSend(a1, "setWcmCellularWCI2ModeFrameDenialWindow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 200));
}

id sub_1001216A8(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ Applying K Parameters"));
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001F42D8);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 10.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2506.0, 59.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_1002477F0);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100247850);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiMaxDuration:", &off_100231C98);
  objc_msgSend(a1, "setWcmCellularWCI2ModePolicy:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8));
  objc_msgSend(a1, "setWcmCellularWCI2ModePowerThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4294967288));
  objc_msgSend(a1, "setWcmCellularWCI2ModeRBThresholdHigh:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(a1, "setWcmCellularWCI2ModeRBThresholdLow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(a1, "setWcmCellularWCI2ModeLTETxDenial:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(a1, "setWcmCellularWCI2ModeMaxAllowedFrameDenials:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40));
  return objc_msgSend(a1, "setWcmCellularWCI2ModeFrameDenialWindow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 200));
}

id sub_100121934(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ Applying K Parameters"));
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001F4C78);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 10.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2506.0, 59.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_1002478B0);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100247910);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiMaxDuration:", &off_100231C98);
  objc_msgSend(a1, "setWcmCellularWCI2ModePolicy:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8));
  objc_msgSend(a1, "setWcmCellularWCI2ModePowerThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4294967288));
  objc_msgSend(a1, "setWcmCellularWCI2ModeRBThresholdHigh:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(a1, "setWcmCellularWCI2ModeRBThresholdLow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(a1, "setWcmCellularWCI2ModeLTETxDenial:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(a1, "setWcmCellularWCI2ModeMaxAllowedFrameDenials:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40));
  return objc_msgSend(a1, "setWcmCellularWCI2ModeFrameDenialWindow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 200));
}

id sub_100121BC0(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ Applying K Parameters"));
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001F5618);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 10.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2506.0, 59.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_100247970);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_1002479D0);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiMaxDuration:", &off_100231C98);
  objc_msgSend(a1, "setWcmCellularWCI2ModePolicy:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8));
  objc_msgSend(a1, "setWcmCellularWCI2ModePowerThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4294967288));
  objc_msgSend(a1, "setWcmCellularWCI2ModeRBThresholdHigh:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(a1, "setWcmCellularWCI2ModeRBThresholdLow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(a1, "setWcmCellularWCI2ModeLTETxDenial:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(a1, "setWcmCellularWCI2ModeMaxAllowedFrameDenials:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40));
  return objc_msgSend(a1, "setWcmCellularWCI2ModeFrameDenialWindow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 200));
}

id sub_100121E4C(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ Applying K Parameters"));
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001F5FB8);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 10.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2506.0, 59.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_100247A30);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100247A90);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiMaxDuration:", &off_100231C98);
  objc_msgSend(a1, "setWcmCellularWCI2ModePolicy:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8));
  objc_msgSend(a1, "setWcmCellularWCI2ModePowerThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4294967288));
  objc_msgSend(a1, "setWcmCellularWCI2ModeRBThresholdHigh:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(a1, "setWcmCellularWCI2ModeRBThresholdLow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(a1, "setWcmCellularWCI2ModeLTETxDenial:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(a1, "setWcmCellularWCI2ModeMaxAllowedFrameDenials:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40));
  return objc_msgSend(a1, "setWcmCellularWCI2ModeFrameDenialWindow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 200));
}

id sub_1001220D8(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ Applying K Parameters"));
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001F6958);
  objc_msgSend(a1, "setWcmCellRc1CoexIssueTable:", -[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", CFSTR("CoEx-Table-CellRC1-Coex003")));
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 10.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2506.0, 59.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_100247AF0);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100247B50);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiMaxDuration:", &off_100231C98);
  objc_msgSend(a1, "setWcmCellularWCI2ModePolicy:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8));
  objc_msgSend(a1, "setWcmCellularWCI2ModePowerThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4294967288));
  objc_msgSend(a1, "setWcmCellularWCI2ModeRBThresholdHigh:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(a1, "setWcmCellularWCI2ModeRBThresholdLow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(a1, "setWcmCellularWCI2ModeLTETxDenial:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(a1, "setWcmCellularWCI2ModeMaxAllowedFrameDenials:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40));
  return objc_msgSend(a1, "setWcmCellularWCI2ModeFrameDenialWindow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 200));
}

id sub_100122388(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ Applying K Parameters"));
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001F7C98);
  objc_msgSend(a1, "setWcmCellRc1CoexIssueTable:", -[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", CFSTR("CoEx-Table-CellRC1-Coex003")));
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 10.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2506.0, 59.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_100247BB0);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100247C10);
  objc_msgSend(a1, "setWcmCellularScanProtectionWiFiMaxDuration:", &off_100231C98);
  objc_msgSend(a1, "setWcmCellularWCI2ModePolicy:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8));
  objc_msgSend(a1, "setWcmCellularWCI2ModePowerThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4294967288));
  objc_msgSend(a1, "setWcmCellularWCI2ModeRBThresholdHigh:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(a1, "setWcmCellularWCI2ModeRBThresholdLow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(a1, "setWcmCellularWCI2ModeLTETxDenial:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(a1, "setWcmCellularWCI2ModeMaxAllowedFrameDenials:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40));
  return objc_msgSend(a1, "setWcmCellularWCI2ModeFrameDenialWindow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 200));
}

id sub_100122638(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  double v13;
  double v14;
  unsigned int v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  char *v21;
  unsigned int v22;
  WCM_WiFiCellCoexIssueBandTable *v23;
  id v24;
  id v25;
  uint64_t v27;
  id v28;
  uint64_t v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ Applying K Parameters"));
  v33 = 0;
  v34 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex010_v1_NewEnum_watchV5WiFiMacro"), (uint64_t)CFSTR("plist")), 2, &v33, &v34);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v28 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v27 = (uint64_t)&v27;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v6 = (char *)&v27 - v4 * (unint64_t)v5;
  v7 = v3;
  v30 = v6;
  v8 = &v6[v3 * (unint64_t)v5];
  *(_DWORD *)v8 = 211;
  *(_OWORD *)(v8 + 4) = 0u;
  *(_OWORD *)(v8 + 20) = 0u;
  *(_OWORD *)(v8 + 36) = 0u;
  *(_OWORD *)(v8 + 52) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_OWORD *)(v8 + 84) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  if (v3)
  {
    v9 = 0;
    v10 = 0;
    v29 = 112 * v7;
    do
    {
      v32 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueBand")), "intValue");
      v31 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueType")), "intValue");
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v12 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v13 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v14 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("antennaFilterPathSelection")), "intValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("wifiBtAgcCoexMode")), "intValue");
      v20 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btAgcCoexMode")), "intValue");
      v21 = &v30[v9];
      v22 = v31;
      *(_DWORD *)v21 = v32;
      *((_DWORD *)v21 + 1) = v22;
      v21[8] = v11;
      *(_QWORD *)(v21 + 17) = 0;
      *(_QWORD *)(v21 + 9) = 0;
      *((_QWORD *)v21 + 3) = 0;
      *((_QWORD *)v21 + 4) = v12;
      *((double *)v21 + 5) = v13;
      *((double *)v21 + 6) = v14;
      *((_QWORD *)v21 + 7) = 0;
      *((_DWORD *)v21 + 16) = v15;
      *(_QWORD *)(v21 + 68) = 0;
      *((_WORD *)v21 + 38) = 0;
      v21[78] = v16;
      v21[79] = v17;
      *((_DWORD *)v21 + 20) = 0;
      *((_DWORD *)v21 + 21) = v18;
      v21[88] = v19;
      *(_WORD *)(v21 + 89) = 0;
      v21[91] = 0;
      v21[92] = v20;
      *(_QWORD *)(v21 + 101) = 0;
      *(_QWORD *)(v21 + 93) = 0;
      ++v10;
      v9 += 112;
      *((_DWORD *)v21 + 27) = 0;
    }
    while (v29 != v9);
  }
  v23 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v24 = v28;
  objc_msgSend(v28, "setWcmWiFiCellCoexIssueTable:", v23);
  v25 = objc_msgSend(v24, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v25, "configureBy:", v30);
  objc_msgSend(v24, "setWcmCellRc1CoexIssueTable:", -[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", CFSTR("CoEx-Table-CellRC1-Coex003")));
  objc_msgSend(v24, "setWcmCellularCoexB7DLRange:", 2620.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB7ULRange:", 2500.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v24, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A1Range:", 2496.0, 10.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A2Range:", 2506.0, 59.0);
  objc_msgSend(v24, "setWcmCellularScanProtectionCellFrequencies:", &off_100247C70);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiChannels:", &off_100247CD0);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiMaxDuration:", &off_100231C98);
  objc_msgSend(v24, "setWcmCellularWCI2ModePolicy:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8));
  objc_msgSend(v24, "setWcmCellularWCI2ModePowerThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4294967288));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdHigh:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdLow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeLTETxDenial:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v24, "setWcmCellularWCI2ModeMaxAllowedFrameDenials:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40));
  return objc_msgSend(v24, "setWcmCellularWCI2ModeFrameDenialWindow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 200));
}

id sub_100122C4C(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  double v13;
  double v14;
  unsigned int v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  char *v21;
  unsigned int v22;
  WCM_WiFiCellCoexIssueBandTable *v23;
  id v24;
  id v25;
  uint64_t v27;
  id v28;
  uint64_t v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ Applying K Parameters"));
  v33 = 0;
  v34 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex010_v1_NewEnum_watchV5WiFiMacro"), (uint64_t)CFSTR("plist")), 2, &v33, &v34);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v28 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v27 = (uint64_t)&v27;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v6 = (char *)&v27 - v4 * (unint64_t)v5;
  v7 = v3;
  v30 = v6;
  v8 = &v6[v3 * (unint64_t)v5];
  *(_DWORD *)v8 = 211;
  *(_OWORD *)(v8 + 4) = 0u;
  *(_OWORD *)(v8 + 20) = 0u;
  *(_OWORD *)(v8 + 36) = 0u;
  *(_OWORD *)(v8 + 52) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_OWORD *)(v8 + 84) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  if (v3)
  {
    v9 = 0;
    v10 = 0;
    v29 = 112 * v7;
    do
    {
      v32 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueBand")), "intValue");
      v31 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueType")), "intValue");
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v12 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v13 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v14 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("antennaFilterPathSelection")), "intValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("wifiBtAgcCoexMode")), "intValue");
      v20 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btAgcCoexMode")), "intValue");
      v21 = &v30[v9];
      v22 = v31;
      *(_DWORD *)v21 = v32;
      *((_DWORD *)v21 + 1) = v22;
      v21[8] = v11;
      *(_QWORD *)(v21 + 17) = 0;
      *(_QWORD *)(v21 + 9) = 0;
      *((_QWORD *)v21 + 3) = 0;
      *((_QWORD *)v21 + 4) = v12;
      *((double *)v21 + 5) = v13;
      *((double *)v21 + 6) = v14;
      *((_QWORD *)v21 + 7) = 0;
      *((_DWORD *)v21 + 16) = v15;
      *(_QWORD *)(v21 + 68) = 0;
      *((_WORD *)v21 + 38) = 0;
      v21[78] = v16;
      v21[79] = v17;
      *((_DWORD *)v21 + 20) = 0;
      *((_DWORD *)v21 + 21) = v18;
      v21[88] = v19;
      *(_WORD *)(v21 + 89) = 0;
      v21[91] = 0;
      v21[92] = v20;
      *(_QWORD *)(v21 + 101) = 0;
      *(_QWORD *)(v21 + 93) = 0;
      ++v10;
      v9 += 112;
      *((_DWORD *)v21 + 27) = 0;
    }
    while (v29 != v9);
  }
  v23 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v24 = v28;
  objc_msgSend(v28, "setWcmWiFiCellCoexIssueTable:", v23);
  v25 = objc_msgSend(v24, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v25, "configureBy:", v30);
  objc_msgSend(v24, "setWcmCellRc1CoexIssueTable:", -[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", CFSTR("CoEx-Table-CellRC1-Coex003")));
  objc_msgSend(v24, "setWcmCellularCoexB7DLRange:", 2620.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB7ULRange:", 2500.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v24, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A1Range:", 2496.0, 10.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A2Range:", 2506.0, 59.0);
  objc_msgSend(v24, "setWcmCellularScanProtectionCellFrequencies:", &off_100247D30);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiChannels:", &off_100247D90);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiMaxDuration:", &off_100231C98);
  objc_msgSend(v24, "setWcmCellularWCI2ModePolicy:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8));
  objc_msgSend(v24, "setWcmCellularWCI2ModePowerThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4294967288));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdHigh:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdLow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeLTETxDenial:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v24, "setWcmCellularWCI2ModeMaxAllowedFrameDenials:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40));
  return objc_msgSend(v24, "setWcmCellularWCI2ModeFrameDenialWindow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 200));
}

id sub_100123260(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  double v13;
  double v14;
  unsigned int v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  char *v21;
  unsigned int v22;
  WCM_WiFiCellCoexIssueBandTable *v23;
  id v24;
  id v25;
  uint64_t v27;
  id v28;
  uint64_t v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ Applying K Parameters"));
  v33 = 0;
  v34 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex019_watchV4Macro_v1.1"), (uint64_t)CFSTR("plist")), 2, &v33, &v34);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v28 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v27 = (uint64_t)&v27;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v6 = (char *)&v27 - v4 * (unint64_t)v5;
  v7 = v3;
  v30 = v6;
  v8 = &v6[v3 * (unint64_t)v5];
  *(_DWORD *)v8 = 211;
  *(_OWORD *)(v8 + 4) = 0u;
  *(_OWORD *)(v8 + 20) = 0u;
  *(_OWORD *)(v8 + 36) = 0u;
  *(_OWORD *)(v8 + 52) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_OWORD *)(v8 + 84) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  if (v3)
  {
    v9 = 0;
    v10 = 0;
    v29 = 112 * v7;
    do
    {
      v32 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueBand")), "intValue");
      v31 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueType")), "intValue");
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v12 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v13 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v14 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("antennaFilterPathSelection")), "intValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("wifiBtAgcCoexMode")), "intValue");
      v20 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btAgcCoexMode")), "intValue");
      v21 = &v30[v9];
      v22 = v31;
      *(_DWORD *)v21 = v32;
      *((_DWORD *)v21 + 1) = v22;
      v21[8] = v11;
      *(_QWORD *)(v21 + 17) = 0;
      *(_QWORD *)(v21 + 9) = 0;
      *((_QWORD *)v21 + 3) = 0;
      *((_QWORD *)v21 + 4) = v12;
      *((double *)v21 + 5) = v13;
      *((double *)v21 + 6) = v14;
      *((_QWORD *)v21 + 7) = 0;
      *((_DWORD *)v21 + 16) = v15;
      *(_QWORD *)(v21 + 68) = 0;
      *((_WORD *)v21 + 38) = 0;
      v21[78] = v16;
      v21[79] = v17;
      *((_DWORD *)v21 + 20) = 0;
      *((_DWORD *)v21 + 21) = v18;
      v21[88] = v19;
      *(_WORD *)(v21 + 89) = 0;
      v21[91] = 0;
      v21[92] = v20;
      *(_QWORD *)(v21 + 101) = 0;
      *(_QWORD *)(v21 + 93) = 0;
      ++v10;
      v9 += 112;
      *((_DWORD *)v21 + 27) = 0;
    }
    while (v29 != v9);
  }
  v23 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v24 = v28;
  objc_msgSend(v28, "setWcmWiFiCellCoexIssueTable:", v23);
  v25 = objc_msgSend(v24, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v25, "configureBy:", v30);
  objc_msgSend(v24, "setWcmCellularCoexB7DLRange:", 2620.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB7ULRange:", 2500.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v24, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A1Range:", 2496.0, 10.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A2Range:", 2506.0, 59.0);
  objc_msgSend(v24, "setWcmCellularScanProtectionCellFrequencies:", &off_100247DF0);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiChannels:", &off_100247E50);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiMaxDuration:", &off_100231C98);
  objc_msgSend(v24, "setWcmCellularWCI2ModePolicy:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8));
  objc_msgSend(v24, "setWcmCellularWCI2ModePowerThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4294967288));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdHigh:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdLow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeLTETxDenial:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v24, "setWcmCellularWCI2ModeMaxAllowedFrameDenials:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40));
  return objc_msgSend(v24, "setWcmCellularWCI2ModeFrameDenialWindow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 200));
}

id sub_100123850(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  double v13;
  double v14;
  unsigned int v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  char *v21;
  unsigned int v22;
  WCM_WiFiCellCoexIssueBandTable *v23;
  id v24;
  id v25;
  uint64_t v27;
  id v28;
  uint64_t v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ Applying K Parameters"));
  v33 = 0;
  v34 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex019_watchV4Macro_v1.1"), (uint64_t)CFSTR("plist")), 2, &v33, &v34);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v28 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v27 = (uint64_t)&v27;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v6 = (char *)&v27 - v4 * (unint64_t)v5;
  v7 = v3;
  v30 = v6;
  v8 = &v6[v3 * (unint64_t)v5];
  *(_DWORD *)v8 = 211;
  *(_OWORD *)(v8 + 4) = 0u;
  *(_OWORD *)(v8 + 20) = 0u;
  *(_OWORD *)(v8 + 36) = 0u;
  *(_OWORD *)(v8 + 52) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_OWORD *)(v8 + 84) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  if (v3)
  {
    v9 = 0;
    v10 = 0;
    v29 = 112 * v7;
    do
    {
      v32 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueBand")), "intValue");
      v31 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueType")), "intValue");
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v12 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v13 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v14 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("antennaFilterPathSelection")), "intValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("wifiBtAgcCoexMode")), "intValue");
      v20 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btAgcCoexMode")), "intValue");
      v21 = &v30[v9];
      v22 = v31;
      *(_DWORD *)v21 = v32;
      *((_DWORD *)v21 + 1) = v22;
      v21[8] = v11;
      *(_QWORD *)(v21 + 17) = 0;
      *(_QWORD *)(v21 + 9) = 0;
      *((_QWORD *)v21 + 3) = 0;
      *((_QWORD *)v21 + 4) = v12;
      *((double *)v21 + 5) = v13;
      *((double *)v21 + 6) = v14;
      *((_QWORD *)v21 + 7) = 0;
      *((_DWORD *)v21 + 16) = v15;
      *(_QWORD *)(v21 + 68) = 0;
      *((_WORD *)v21 + 38) = 0;
      v21[78] = v16;
      v21[79] = v17;
      *((_DWORD *)v21 + 20) = 0;
      *((_DWORD *)v21 + 21) = v18;
      v21[88] = v19;
      *(_WORD *)(v21 + 89) = 0;
      v21[91] = 0;
      v21[92] = v20;
      *(_QWORD *)(v21 + 101) = 0;
      *(_QWORD *)(v21 + 93) = 0;
      ++v10;
      v9 += 112;
      *((_DWORD *)v21 + 27) = 0;
    }
    while (v29 != v9);
  }
  v23 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v24 = v28;
  objc_msgSend(v28, "setWcmWiFiCellCoexIssueTable:", v23);
  v25 = objc_msgSend(v24, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v25, "configureBy:", v30);
  objc_msgSend(v24, "setWcmCellularCoexB7DLRange:", 2620.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB7ULRange:", 2500.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v24, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A1Range:", 2496.0, 10.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A2Range:", 2506.0, 59.0);
  objc_msgSend(v24, "setWcmCellularScanProtectionCellFrequencies:", &off_100247EB0);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiChannels:", &off_100247F10);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiMaxDuration:", &off_100231C98);
  objc_msgSend(v24, "setWcmCellularWCI2ModePolicy:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8));
  objc_msgSend(v24, "setWcmCellularWCI2ModePowerThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4294967288));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdHigh:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdLow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeLTETxDenial:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v24, "setWcmCellularWCI2ModeMaxAllowedFrameDenials:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40));
  return objc_msgSend(v24, "setWcmCellularWCI2ModeFrameDenialWindow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 200));
}

id sub_100123E40(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  double v13;
  double v14;
  unsigned int v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  char *v21;
  unsigned int v22;
  WCM_WiFiCellCoexIssueBandTable *v23;
  id v24;
  id v25;
  uint64_t v27;
  id v28;
  uint64_t v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ Applying K Parameters"));
  v33 = 0;
  v34 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex020_watchV4Macro_v1.2"), (uint64_t)CFSTR("plist")), 2, &v33, &v34);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v28 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v27 = (uint64_t)&v27;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v6 = (char *)&v27 - v4 * (unint64_t)v5;
  v7 = v3;
  v30 = v6;
  v8 = &v6[v3 * (unint64_t)v5];
  *(_DWORD *)v8 = 211;
  *(_OWORD *)(v8 + 4) = 0u;
  *(_OWORD *)(v8 + 20) = 0u;
  *(_OWORD *)(v8 + 36) = 0u;
  *(_OWORD *)(v8 + 52) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_OWORD *)(v8 + 84) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  if (v3)
  {
    v9 = 0;
    v10 = 0;
    v29 = 112 * v7;
    do
    {
      v32 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueBand")), "intValue");
      v31 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueType")), "intValue");
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v12 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v13 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v14 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("antennaFilterPathSelection")), "intValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("wifiBtAgcCoexMode")), "intValue");
      v20 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btAgcCoexMode")), "intValue");
      v21 = &v30[v9];
      v22 = v31;
      *(_DWORD *)v21 = v32;
      *((_DWORD *)v21 + 1) = v22;
      v21[8] = v11;
      *(_QWORD *)(v21 + 17) = 0;
      *(_QWORD *)(v21 + 9) = 0;
      *((_QWORD *)v21 + 3) = 0;
      *((_QWORD *)v21 + 4) = v12;
      *((double *)v21 + 5) = v13;
      *((double *)v21 + 6) = v14;
      *((_QWORD *)v21 + 7) = 0;
      *((_DWORD *)v21 + 16) = v15;
      *(_QWORD *)(v21 + 68) = 0;
      *((_WORD *)v21 + 38) = 0;
      v21[78] = v16;
      v21[79] = v17;
      *((_DWORD *)v21 + 20) = 0;
      *((_DWORD *)v21 + 21) = v18;
      v21[88] = v19;
      *(_WORD *)(v21 + 89) = 0;
      v21[91] = 0;
      v21[92] = v20;
      *(_QWORD *)(v21 + 101) = 0;
      *(_QWORD *)(v21 + 93) = 0;
      ++v10;
      v9 += 112;
      *((_DWORD *)v21 + 27) = 0;
    }
    while (v29 != v9);
  }
  v23 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v24 = v28;
  objc_msgSend(v28, "setWcmWiFiCellCoexIssueTable:", v23);
  v25 = objc_msgSend(v24, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v25, "configureBy:", v30);
  objc_msgSend(v24, "setWcmCellRc1CoexIssueTable:", -[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", CFSTR("CoEx-Table-CellRC1-Coex003")));
  objc_msgSend(v24, "setWcmCellularCoexB7DLRange:", 2620.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB7ULRange:", 2500.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v24, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A1Range:", 2496.0, 10.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A2Range:", 2506.0, 59.0);
  objc_msgSend(v24, "setWcmCellularScanProtectionCellFrequencies:", &off_100247F70);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiChannels:", &off_100247FD0);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiMaxDuration:", &off_100231C98);
  objc_msgSend(v24, "setWcmCellularWCI2ModePolicy:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8));
  objc_msgSend(v24, "setWcmCellularWCI2ModePowerThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4294967288));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdHigh:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdLow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeLTETxDenial:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v24, "setWcmCellularWCI2ModeMaxAllowedFrameDenials:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40));
  return objc_msgSend(v24, "setWcmCellularWCI2ModeFrameDenialWindow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 200));
}

id sub_100124454(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  double v13;
  double v14;
  unsigned int v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  char *v21;
  unsigned int v22;
  WCM_WiFiCellCoexIssueBandTable *v23;
  id v24;
  id v25;
  uint64_t v27;
  id v28;
  uint64_t v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ Applying K Parameters"));
  v33 = 0;
  v34 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex020_watchV4Macro_v1.2"), (uint64_t)CFSTR("plist")), 2, &v33, &v34);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v28 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v27 = (uint64_t)&v27;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v6 = (char *)&v27 - v4 * (unint64_t)v5;
  v7 = v3;
  v30 = v6;
  v8 = &v6[v3 * (unint64_t)v5];
  *(_DWORD *)v8 = 211;
  *(_OWORD *)(v8 + 4) = 0u;
  *(_OWORD *)(v8 + 20) = 0u;
  *(_OWORD *)(v8 + 36) = 0u;
  *(_OWORD *)(v8 + 52) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_OWORD *)(v8 + 84) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  if (v3)
  {
    v9 = 0;
    v10 = 0;
    v29 = 112 * v7;
    do
    {
      v32 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueBand")), "intValue");
      v31 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueType")), "intValue");
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v12 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v13 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v14 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("antennaFilterPathSelection")), "intValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("wifiBtAgcCoexMode")), "intValue");
      v20 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btAgcCoexMode")), "intValue");
      v21 = &v30[v9];
      v22 = v31;
      *(_DWORD *)v21 = v32;
      *((_DWORD *)v21 + 1) = v22;
      v21[8] = v11;
      *(_QWORD *)(v21 + 17) = 0;
      *(_QWORD *)(v21 + 9) = 0;
      *((_QWORD *)v21 + 3) = 0;
      *((_QWORD *)v21 + 4) = v12;
      *((double *)v21 + 5) = v13;
      *((double *)v21 + 6) = v14;
      *((_QWORD *)v21 + 7) = 0;
      *((_DWORD *)v21 + 16) = v15;
      *(_QWORD *)(v21 + 68) = 0;
      *((_WORD *)v21 + 38) = 0;
      v21[78] = v16;
      v21[79] = v17;
      *((_DWORD *)v21 + 20) = 0;
      *((_DWORD *)v21 + 21) = v18;
      v21[88] = v19;
      *(_WORD *)(v21 + 89) = 0;
      v21[91] = 0;
      v21[92] = v20;
      *(_QWORD *)(v21 + 101) = 0;
      *(_QWORD *)(v21 + 93) = 0;
      ++v10;
      v9 += 112;
      *((_DWORD *)v21 + 27) = 0;
    }
    while (v29 != v9);
  }
  v23 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v24 = v28;
  objc_msgSend(v28, "setWcmWiFiCellCoexIssueTable:", v23);
  v25 = objc_msgSend(v24, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v25, "configureBy:", v30);
  objc_msgSend(v24, "setWcmCellRc1CoexIssueTable:", -[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", CFSTR("CoEx-Table-CellRC1-Coex003")));
  objc_msgSend(v24, "setWcmCellularCoexB7DLRange:", 2620.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB7ULRange:", 2500.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v24, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A1Range:", 2496.0, 10.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A2Range:", 2506.0, 59.0);
  objc_msgSend(v24, "setWcmCellularScanProtectionCellFrequencies:", &off_100248030);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiChannels:", &off_100248090);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiMaxDuration:", &off_100231C98);
  objc_msgSend(v24, "setWcmCellularWCI2ModePolicy:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8));
  objc_msgSend(v24, "setWcmCellularWCI2ModePowerThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4294967288));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdHigh:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdLow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeLTETxDenial:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v24, "setWcmCellularWCI2ModeMaxAllowedFrameDenials:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40));
  return objc_msgSend(v24, "setWcmCellularWCI2ModeFrameDenialWindow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 200));
}

id sub_100124A68(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  double v13;
  double v14;
  unsigned int v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  char *v21;
  unsigned int v22;
  WCM_WiFiCellCoexIssueBandTable *v23;
  id v24;
  id v25;
  uint64_t v27;
  id v28;
  uint64_t v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ Applying K Parameters"));
  v33 = 0;
  v34 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex021_watchV4Macro_v1.1"), (uint64_t)CFSTR("plist")), 2, &v33, &v34);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v28 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v27 = (uint64_t)&v27;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v6 = (char *)&v27 - v4 * (unint64_t)v5;
  v7 = v3;
  v30 = v6;
  v8 = &v6[v3 * (unint64_t)v5];
  *(_DWORD *)v8 = 211;
  *(_OWORD *)(v8 + 4) = 0u;
  *(_OWORD *)(v8 + 20) = 0u;
  *(_OWORD *)(v8 + 36) = 0u;
  *(_OWORD *)(v8 + 52) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_OWORD *)(v8 + 84) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  if (v3)
  {
    v9 = 0;
    v10 = 0;
    v29 = 112 * v7;
    do
    {
      v32 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueBand")), "intValue");
      v31 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueType")), "intValue");
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v12 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v13 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v14 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("antennaFilterPathSelection")), "intValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("wifiBtAgcCoexMode")), "intValue");
      v20 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btAgcCoexMode")), "intValue");
      v21 = &v30[v9];
      v22 = v31;
      *(_DWORD *)v21 = v32;
      *((_DWORD *)v21 + 1) = v22;
      v21[8] = v11;
      *(_QWORD *)(v21 + 17) = 0;
      *(_QWORD *)(v21 + 9) = 0;
      *((_QWORD *)v21 + 3) = 0;
      *((_QWORD *)v21 + 4) = v12;
      *((double *)v21 + 5) = v13;
      *((double *)v21 + 6) = v14;
      *((_QWORD *)v21 + 7) = 0;
      *((_DWORD *)v21 + 16) = v15;
      *(_QWORD *)(v21 + 68) = 0;
      *((_WORD *)v21 + 38) = 0;
      v21[78] = v16;
      v21[79] = v17;
      *((_DWORD *)v21 + 20) = 0;
      *((_DWORD *)v21 + 21) = v18;
      v21[88] = v19;
      *(_WORD *)(v21 + 89) = 0;
      v21[91] = 0;
      v21[92] = v20;
      *(_QWORD *)(v21 + 101) = 0;
      *(_QWORD *)(v21 + 93) = 0;
      ++v10;
      v9 += 112;
      *((_DWORD *)v21 + 27) = 0;
    }
    while (v29 != v9);
  }
  v23 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v24 = v28;
  objc_msgSend(v28, "setWcmWiFiCellCoexIssueTable:", v23);
  v25 = objc_msgSend(v24, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v25, "configureBy:", v30);
  objc_msgSend(v24, "setWcmCellRc1CoexIssueTable:", -[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", CFSTR("CoEx-Table-CellRC1-Coex003")));
  objc_msgSend(v24, "setWcmCellularCoexB7DLRange:", 2620.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB7ULRange:", 2500.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v24, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A1Range:", 2496.0, 10.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A2Range:", 2506.0, 59.0);
  objc_msgSend(v24, "setWcmCellularScanProtectionCellFrequencies:", &off_1002480F0);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiChannels:", &off_100248150);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiMaxDuration:", &off_100231C98);
  objc_msgSend(v24, "setWcmCellularWCI2ModePolicy:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8));
  objc_msgSend(v24, "setWcmCellularWCI2ModePowerThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4294967288));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdHigh:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdLow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeLTETxDenial:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v24, "setWcmCellularWCI2ModeMaxAllowedFrameDenials:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40));
  return objc_msgSend(v24, "setWcmCellularWCI2ModeFrameDenialWindow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 200));
}

id sub_10012507C(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  double v13;
  double v14;
  unsigned int v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  char *v21;
  unsigned int v22;
  WCM_WiFiCellCoexIssueBandTable *v23;
  id v24;
  id v25;
  uint64_t v27;
  id v28;
  uint64_t v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ Applying K Parameters"));
  v33 = 0;
  v34 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex028_watchV4Macro"), (uint64_t)CFSTR("plist")), 2, &v33, &v34);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v28 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v27 = (uint64_t)&v27;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v6 = (char *)&v27 - v4 * (unint64_t)v5;
  v7 = v3;
  v30 = v6;
  v8 = &v6[v3 * (unint64_t)v5];
  *(_DWORD *)v8 = 211;
  *(_OWORD *)(v8 + 4) = 0u;
  *(_OWORD *)(v8 + 20) = 0u;
  *(_OWORD *)(v8 + 36) = 0u;
  *(_OWORD *)(v8 + 52) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_OWORD *)(v8 + 84) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  if (v3)
  {
    v9 = 0;
    v10 = 0;
    v29 = 112 * v7;
    do
    {
      v32 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueBand")), "intValue");
      v31 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueType")), "intValue");
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v12 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v13 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v14 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("antennaFilterPathSelection")), "intValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("wifiBtAgcCoexMode")), "intValue");
      v20 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btAgcCoexMode")), "intValue");
      v21 = &v30[v9];
      v22 = v31;
      *(_DWORD *)v21 = v32;
      *((_DWORD *)v21 + 1) = v22;
      v21[8] = v11;
      *(_QWORD *)(v21 + 17) = 0;
      *(_QWORD *)(v21 + 9) = 0;
      *((_QWORD *)v21 + 3) = 0;
      *((_QWORD *)v21 + 4) = v12;
      *((double *)v21 + 5) = v13;
      *((double *)v21 + 6) = v14;
      *((_QWORD *)v21 + 7) = 0;
      *((_DWORD *)v21 + 16) = v15;
      *(_QWORD *)(v21 + 68) = 0;
      *((_WORD *)v21 + 38) = 0;
      v21[78] = v16;
      v21[79] = v17;
      *((_DWORD *)v21 + 20) = 0;
      *((_DWORD *)v21 + 21) = v18;
      v21[88] = v19;
      *(_WORD *)(v21 + 89) = 0;
      v21[91] = 0;
      v21[92] = v20;
      *(_QWORD *)(v21 + 101) = 0;
      *(_QWORD *)(v21 + 93) = 0;
      ++v10;
      v9 += 112;
      *((_DWORD *)v21 + 27) = 0;
    }
    while (v29 != v9);
  }
  v23 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v24 = v28;
  objc_msgSend(v28, "setWcmWiFiCellCoexIssueTable:", v23);
  v25 = objc_msgSend(v24, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v25, "configureBy:", v30);
  objc_msgSend(v24, "setWcmCellRc1CoexIssueTable:", -[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", CFSTR("CoEx-Table-CellRC1-Coex001")));
  objc_msgSend(v24, "setWcmCellularCoexB7DLRange:", 2620.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB7ULRange:", 2500.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v24, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A1Range:", 2496.0, 10.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A2Range:", 2506.0, 59.0);
  objc_msgSend(v24, "setWcmCellularScanProtectionCellFrequencies:", &off_1002481B0);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiChannels:", &off_100248210);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiMaxDuration:", &off_100231C98);
  objc_msgSend(v24, "setWcmCellularWCI2ModePolicy:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8));
  objc_msgSend(v24, "setWcmCellularWCI2ModePowerThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4294967288));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdHigh:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdLow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeLTETxDenial:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v24, "setWcmCellularWCI2ModeMaxAllowedFrameDenials:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40));
  return objc_msgSend(v24, "setWcmCellularWCI2ModeFrameDenialWindow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 200));
}

id sub_100125690(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  double v13;
  double v14;
  unsigned int v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  char *v21;
  unsigned int v22;
  WCM_WiFiCellCoexIssueBandTable *v23;
  id v24;
  id v25;
  uint64_t v27;
  id v28;
  uint64_t v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ Applying K Parameters"));
  v33 = 0;
  v34 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex028_watchV4Macro"), (uint64_t)CFSTR("plist")), 2, &v33, &v34);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v28 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v27 = (uint64_t)&v27;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v6 = (char *)&v27 - v4 * (unint64_t)v5;
  v7 = v3;
  v30 = v6;
  v8 = &v6[v3 * (unint64_t)v5];
  *(_DWORD *)v8 = 211;
  *(_OWORD *)(v8 + 4) = 0u;
  *(_OWORD *)(v8 + 20) = 0u;
  *(_OWORD *)(v8 + 36) = 0u;
  *(_OWORD *)(v8 + 52) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_OWORD *)(v8 + 84) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  if (v3)
  {
    v9 = 0;
    v10 = 0;
    v29 = 112 * v7;
    do
    {
      v32 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueBand")), "intValue");
      v31 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueType")), "intValue");
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v12 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v13 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v14 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("antennaFilterPathSelection")), "intValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("wifiBtAgcCoexMode")), "intValue");
      v20 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btAgcCoexMode")), "intValue");
      v21 = &v30[v9];
      v22 = v31;
      *(_DWORD *)v21 = v32;
      *((_DWORD *)v21 + 1) = v22;
      v21[8] = v11;
      *(_QWORD *)(v21 + 17) = 0;
      *(_QWORD *)(v21 + 9) = 0;
      *((_QWORD *)v21 + 3) = 0;
      *((_QWORD *)v21 + 4) = v12;
      *((double *)v21 + 5) = v13;
      *((double *)v21 + 6) = v14;
      *((_QWORD *)v21 + 7) = 0;
      *((_DWORD *)v21 + 16) = v15;
      *(_QWORD *)(v21 + 68) = 0;
      *((_WORD *)v21 + 38) = 0;
      v21[78] = v16;
      v21[79] = v17;
      *((_DWORD *)v21 + 20) = 0;
      *((_DWORD *)v21 + 21) = v18;
      v21[88] = v19;
      *(_WORD *)(v21 + 89) = 0;
      v21[91] = 0;
      v21[92] = v20;
      *(_QWORD *)(v21 + 101) = 0;
      *(_QWORD *)(v21 + 93) = 0;
      ++v10;
      v9 += 112;
      *((_DWORD *)v21 + 27) = 0;
    }
    while (v29 != v9);
  }
  v23 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v24 = v28;
  objc_msgSend(v28, "setWcmWiFiCellCoexIssueTable:", v23);
  v25 = objc_msgSend(v24, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v25, "configureBy:", v30);
  objc_msgSend(v24, "setWcmCellRc1CoexIssueTable:", -[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", CFSTR("CoEx-Table-CellRC1-Coex001")));
  objc_msgSend(v24, "setWcmCellularCoexB7DLRange:", 2620.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB7ULRange:", 2500.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v24, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A1Range:", 2496.0, 10.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A2Range:", 2506.0, 59.0);
  objc_msgSend(v24, "setWcmCellularScanProtectionCellFrequencies:", &off_100248270);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiChannels:", &off_1002482D0);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiMaxDuration:", &off_100231C98);
  objc_msgSend(v24, "setWcmCellularWCI2ModePolicy:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8));
  objc_msgSend(v24, "setWcmCellularWCI2ModePowerThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4294967288));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdHigh:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdLow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeLTETxDenial:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v24, "setWcmCellularWCI2ModeMaxAllowedFrameDenials:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40));
  return objc_msgSend(v24, "setWcmCellularWCI2ModeFrameDenialWindow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 200));
}

id sub_100125CA4(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  double v13;
  double v14;
  unsigned int v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  char *v21;
  unsigned int v22;
  WCM_WiFiCellCoexIssueBandTable *v23;
  id v24;
  id v25;
  uint64_t v27;
  id v28;
  uint64_t v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ Applying K Parameters"));
  v33 = 0;
  v34 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex047_watchV4Macro"), (uint64_t)CFSTR("plist")), 2, &v33, &v34);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v28 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v27 = (uint64_t)&v27;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v6 = (char *)&v27 - v4 * (unint64_t)v5;
  v7 = v3;
  v30 = v6;
  v8 = &v6[v3 * (unint64_t)v5];
  *(_DWORD *)v8 = 211;
  *(_OWORD *)(v8 + 4) = 0u;
  *(_OWORD *)(v8 + 20) = 0u;
  *(_OWORD *)(v8 + 36) = 0u;
  *(_OWORD *)(v8 + 52) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_OWORD *)(v8 + 84) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  if (v3)
  {
    v9 = 0;
    v10 = 0;
    v29 = 112 * v7;
    do
    {
      v32 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueBand")), "intValue");
      v31 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueType")), "intValue");
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v12 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v13 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v14 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("antennaFilterPathSelection")), "intValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("wifiBtAgcCoexMode")), "intValue");
      v20 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btAgcCoexMode")), "intValue");
      v21 = &v30[v9];
      v22 = v31;
      *(_DWORD *)v21 = v32;
      *((_DWORD *)v21 + 1) = v22;
      v21[8] = v11;
      *(_QWORD *)(v21 + 17) = 0;
      *(_QWORD *)(v21 + 9) = 0;
      *((_QWORD *)v21 + 3) = 0;
      *((_QWORD *)v21 + 4) = v12;
      *((double *)v21 + 5) = v13;
      *((double *)v21 + 6) = v14;
      *((_QWORD *)v21 + 7) = 0;
      *((_DWORD *)v21 + 16) = v15;
      *(_QWORD *)(v21 + 68) = 0;
      *((_WORD *)v21 + 38) = 0;
      v21[78] = v16;
      v21[79] = v17;
      *((_DWORD *)v21 + 20) = 0;
      *((_DWORD *)v21 + 21) = v18;
      v21[88] = v19;
      *(_WORD *)(v21 + 89) = 0;
      v21[91] = 0;
      v21[92] = v20;
      *(_QWORD *)(v21 + 101) = 0;
      *(_QWORD *)(v21 + 93) = 0;
      ++v10;
      v9 += 112;
      *((_DWORD *)v21 + 27) = 0;
    }
    while (v29 != v9);
  }
  v23 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v24 = v28;
  objc_msgSend(v28, "setWcmWiFiCellCoexIssueTable:", v23);
  v25 = objc_msgSend(v24, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v25, "configureBy:", v30);
  objc_msgSend(v24, "setWcmCellRc1CoexIssueTable:", -[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", CFSTR("CoEx-Table-CellRC1-Coex001")));
  objc_msgSend(v24, "setWcmCellularCoexB7DLRange:", 2620.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB7ULRange:", 2500.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v24, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A1Range:", 2496.0, 10.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A2Range:", 2506.0, 59.0);
  objc_msgSend(v24, "setWcmCellularScanProtectionCellFrequencies:", &off_100248330);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiChannels:", &off_100248390);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiMaxDuration:", &off_100231C98);
  objc_msgSend(v24, "setWcmCellularWCI2ModePolicy:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8));
  objc_msgSend(v24, "setWcmCellularWCI2ModePowerThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4294967288));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdHigh:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdLow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeLTETxDenial:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v24, "setWcmCellularWCI2ModeMaxAllowedFrameDenials:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40));
  return objc_msgSend(v24, "setWcmCellularWCI2ModeFrameDenialWindow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 200));
}

id sub_1001262B8(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  double v13;
  double v14;
  unsigned int v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  char *v21;
  unsigned int v22;
  WCM_WiFiCellCoexIssueBandTable *v23;
  id v24;
  id v25;
  uint64_t v27;
  id v28;
  uint64_t v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ Applying K Parameters"));
  v33 = 0;
  v34 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex047_watchV4Macro"), (uint64_t)CFSTR("plist")), 2, &v33, &v34);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v28 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v27 = (uint64_t)&v27;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v6 = (char *)&v27 - v4 * (unint64_t)v5;
  v7 = v3;
  v30 = v6;
  v8 = &v6[v3 * (unint64_t)v5];
  *(_DWORD *)v8 = 211;
  *(_OWORD *)(v8 + 4) = 0u;
  *(_OWORD *)(v8 + 20) = 0u;
  *(_OWORD *)(v8 + 36) = 0u;
  *(_OWORD *)(v8 + 52) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_OWORD *)(v8 + 84) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  if (v3)
  {
    v9 = 0;
    v10 = 0;
    v29 = 112 * v7;
    do
    {
      v32 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueBand")), "intValue");
      v31 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueType")), "intValue");
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v12 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v13 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v14 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("antennaFilterPathSelection")), "intValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("wifiBtAgcCoexMode")), "intValue");
      v20 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btAgcCoexMode")), "intValue");
      v21 = &v30[v9];
      v22 = v31;
      *(_DWORD *)v21 = v32;
      *((_DWORD *)v21 + 1) = v22;
      v21[8] = v11;
      *(_QWORD *)(v21 + 17) = 0;
      *(_QWORD *)(v21 + 9) = 0;
      *((_QWORD *)v21 + 3) = 0;
      *((_QWORD *)v21 + 4) = v12;
      *((double *)v21 + 5) = v13;
      *((double *)v21 + 6) = v14;
      *((_QWORD *)v21 + 7) = 0;
      *((_DWORD *)v21 + 16) = v15;
      *(_QWORD *)(v21 + 68) = 0;
      *((_WORD *)v21 + 38) = 0;
      v21[78] = v16;
      v21[79] = v17;
      *((_DWORD *)v21 + 20) = 0;
      *((_DWORD *)v21 + 21) = v18;
      v21[88] = v19;
      *(_WORD *)(v21 + 89) = 0;
      v21[91] = 0;
      v21[92] = v20;
      *(_QWORD *)(v21 + 101) = 0;
      *(_QWORD *)(v21 + 93) = 0;
      ++v10;
      v9 += 112;
      *((_DWORD *)v21 + 27) = 0;
    }
    while (v29 != v9);
  }
  v23 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v24 = v28;
  objc_msgSend(v28, "setWcmWiFiCellCoexIssueTable:", v23);
  v25 = objc_msgSend(v24, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v25, "configureBy:", v30);
  objc_msgSend(v24, "setWcmCellRc1CoexIssueTable:", -[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", CFSTR("CoEx-Table-CellRC1-Coex001")));
  objc_msgSend(v24, "setWcmCellularCoexB7DLRange:", 2620.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB7ULRange:", 2500.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v24, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A1Range:", 2496.0, 10.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A2Range:", 2506.0, 59.0);
  objc_msgSend(v24, "setWcmCellularScanProtectionCellFrequencies:", &off_1002483F0);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiChannels:", &off_100248450);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiMaxDuration:", &off_100231C98);
  objc_msgSend(v24, "setWcmCellularWCI2ModePolicy:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8));
  objc_msgSend(v24, "setWcmCellularWCI2ModePowerThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4294967288));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdHigh:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdLow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeLTETxDenial:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v24, "setWcmCellularWCI2ModeMaxAllowedFrameDenials:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40));
  return objc_msgSend(v24, "setWcmCellularWCI2ModeFrameDenialWindow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 200));
}

id sub_1001268CC(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  double v13;
  double v14;
  unsigned int v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  char *v21;
  unsigned int v22;
  WCM_WiFiCellCoexIssueBandTable *v23;
  id v24;
  id v25;
  uint64_t v27;
  id v28;
  uint64_t v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ Applying K Parameters"));
  v33 = 0;
  v34 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex030_watchV4Macro"), (uint64_t)CFSTR("plist")), 2, &v33, &v34);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v28 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v27 = (uint64_t)&v27;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v6 = (char *)&v27 - v4 * (unint64_t)v5;
  v7 = v3;
  v30 = v6;
  v8 = &v6[v3 * (unint64_t)v5];
  *(_DWORD *)v8 = 211;
  *(_OWORD *)(v8 + 4) = 0u;
  *(_OWORD *)(v8 + 20) = 0u;
  *(_OWORD *)(v8 + 36) = 0u;
  *(_OWORD *)(v8 + 52) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_OWORD *)(v8 + 84) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  if (v3)
  {
    v9 = 0;
    v10 = 0;
    v29 = 112 * v7;
    do
    {
      v32 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueBand")), "intValue");
      v31 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueType")), "intValue");
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v12 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v13 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v14 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("antennaFilterPathSelection")), "intValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("wifiBtAgcCoexMode")), "intValue");
      v20 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btAgcCoexMode")), "intValue");
      v21 = &v30[v9];
      v22 = v31;
      *(_DWORD *)v21 = v32;
      *((_DWORD *)v21 + 1) = v22;
      v21[8] = v11;
      *(_QWORD *)(v21 + 17) = 0;
      *(_QWORD *)(v21 + 9) = 0;
      *((_QWORD *)v21 + 3) = 0;
      *((_QWORD *)v21 + 4) = v12;
      *((double *)v21 + 5) = v13;
      *((double *)v21 + 6) = v14;
      *((_QWORD *)v21 + 7) = 0;
      *((_DWORD *)v21 + 16) = v15;
      *(_QWORD *)(v21 + 68) = 0;
      *((_WORD *)v21 + 38) = 0;
      v21[78] = v16;
      v21[79] = v17;
      *((_DWORD *)v21 + 20) = 0;
      *((_DWORD *)v21 + 21) = v18;
      v21[88] = v19;
      *(_WORD *)(v21 + 89) = 0;
      v21[91] = 0;
      v21[92] = v20;
      *(_QWORD *)(v21 + 101) = 0;
      *(_QWORD *)(v21 + 93) = 0;
      ++v10;
      v9 += 112;
      *((_DWORD *)v21 + 27) = 0;
    }
    while (v29 != v9);
  }
  v23 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v24 = v28;
  objc_msgSend(v28, "setWcmWiFiCellCoexIssueTable:", v23);
  v25 = objc_msgSend(v24, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v25, "configureBy:", v30);
  objc_msgSend(v24, "setWcmCellRc1CoexIssueTable:", -[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", CFSTR("CoEx-Table-CellRC1-Coex001")));
  objc_msgSend(v24, "setWcmCellularCoexB7DLRange:", 2620.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB7ULRange:", 2500.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v24, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A1Range:", 2496.0, 10.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A2Range:", 2506.0, 59.0);
  objc_msgSend(v24, "setWcmCellularScanProtectionCellFrequencies:", &off_1002484B0);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiChannels:", &off_100248510);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiMaxDuration:", &off_100231C98);
  objc_msgSend(v24, "setWcmCellularWCI2ModePolicy:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8));
  objc_msgSend(v24, "setWcmCellularWCI2ModePowerThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4294967288));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdHigh:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdLow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeLTETxDenial:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v24, "setWcmCellularWCI2ModeMaxAllowedFrameDenials:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40));
  return objc_msgSend(v24, "setWcmCellularWCI2ModeFrameDenialWindow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 200));
}

id sub_100126EE0(void *a1)
{
  id v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  double v13;
  double v14;
  unsigned int v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  char *v21;
  unsigned int v22;
  WCM_WiFiCellCoexIssueBandTable *v23;
  id v24;
  id v25;
  uint64_t v27;
  id v28;
  uint64_t v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;

  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 3, CFSTR("DLDebug_ Applying K Parameters"));
  v33 = 0;
  v34 = 0;
  v2 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", sub_1000896B4((uint64_t)CFSTR("CoEx-Table-CellCoex030_watchV4Macro"), (uint64_t)CFSTR("plist")), 2, &v33, &v34);
  if (!v2)
    return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 1, CFSTR("DLDebug_ PlistConversion_ parentArray No Policy Table Plist File Found"));
  v28 = a1;
  +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ parentArray Policy Table Plist File Found"));
  v3 = (unsigned __int16)objc_msgSend(v2, "count");
  v27 = (uint64_t)&v27;
  __chkstk_darwin(+[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 4, CFSTR("DLDebug_ PlistConversion_ numofRow=%d"), v3));
  v6 = (char *)&v27 - v4 * (unint64_t)v5;
  v7 = v3;
  v30 = v6;
  v8 = &v6[v3 * (unint64_t)v5];
  *(_DWORD *)v8 = 211;
  *(_OWORD *)(v8 + 4) = 0u;
  *(_OWORD *)(v8 + 20) = 0u;
  *(_OWORD *)(v8 + 36) = 0u;
  *(_OWORD *)(v8 + 52) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  *(_OWORD *)(v8 + 84) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  if (v3)
  {
    v9 = 0;
    v10 = 0;
    v29 = 112 * v7;
    do
    {
      v32 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueBand")), "intValue");
      v31 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("issueType")), "intValue");
      v11 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("isWiFiDesense")), "BOOLValue");
      v12 = (int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellTxPowerLimit")), "intValue");
      v13 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellFrequencyLimitForOOB")), "intValue");
      v14 = (double)(int)objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("cellBandwidthLimitForOOB")), "intValue");
      v15 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btDiversityBlocklistType")), "intValue");
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btFirstChannelToAvoid")), "intValue");
      v17 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btLastChannelToAvoid")), "intValue");
      v18 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("antennaFilterPathSelection")), "intValue");
      v19 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("wifiBtAgcCoexMode")), "intValue");
      v20 = objc_msgSend(objc_msgSend(objc_msgSend(v2, "objectAtIndex:", v10), "objectForKey:", CFSTR("btAgcCoexMode")), "intValue");
      v21 = &v30[v9];
      v22 = v31;
      *(_DWORD *)v21 = v32;
      *((_DWORD *)v21 + 1) = v22;
      v21[8] = v11;
      *(_QWORD *)(v21 + 17) = 0;
      *(_QWORD *)(v21 + 9) = 0;
      *((_QWORD *)v21 + 3) = 0;
      *((_QWORD *)v21 + 4) = v12;
      *((double *)v21 + 5) = v13;
      *((double *)v21 + 6) = v14;
      *((_QWORD *)v21 + 7) = 0;
      *((_DWORD *)v21 + 16) = v15;
      *(_QWORD *)(v21 + 68) = 0;
      *((_WORD *)v21 + 38) = 0;
      v21[78] = v16;
      v21[79] = v17;
      *((_DWORD *)v21 + 20) = 0;
      *((_DWORD *)v21 + 21) = v18;
      v21[88] = v19;
      *(_WORD *)(v21 + 89) = 0;
      v21[91] = 0;
      v21[92] = v20;
      *(_QWORD *)(v21 + 101) = 0;
      *(_QWORD *)(v21 + 93) = 0;
      ++v10;
      v9 += 112;
      *((_DWORD *)v21 + 27) = 0;
    }
    while (v29 != v9);
  }
  v23 = objc_alloc_init(WCM_WiFiCellCoexIssueBandTable);
  v24 = v28;
  objc_msgSend(v28, "setWcmWiFiCellCoexIssueTable:", v23);
  v25 = objc_msgSend(v24, "wcmWiFiCellCoexIssueTable");
  objc_msgSend(v25, "configureBy:", v30);
  objc_msgSend(v24, "setWcmCellRc1CoexIssueTable:", -[WCM_CellularRc1CoexIssueTable initFromPlist:]([WCM_CellularRc1CoexIssueTable alloc], "initFromPlist:", CFSTR("CoEx-Table-CellRC1-Coex001")));
  objc_msgSend(v24, "setWcmCellularCoexB7DLRange:", 2620.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB7ULRange:", 2500.0, 20.0);
  objc_msgSend(v24, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(v24, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A1Range:", 2496.0, 10.0);
  objc_msgSend(v24, "setWcmCellularCoexB41A2Range:", 2506.0, 59.0);
  objc_msgSend(v24, "setWcmCellularScanProtectionCellFrequencies:", &off_100248570);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiChannels:", &off_1002485D0);
  objc_msgSend(v24, "setWcmCellularScanProtectionWiFiMaxDuration:", &off_100231C98);
  objc_msgSend(v24, "setWcmCellularWCI2ModePolicy:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 8));
  objc_msgSend(v24, "setWcmCellularWCI2ModePowerThreshold:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4294967288));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdHigh:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeRBThresholdLow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  objc_msgSend(v24, "setWcmCellularWCI2ModeLTETxDenial:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  objc_msgSend(v24, "setWcmCellularWCI2ModeMaxAllowedFrameDenials:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 40));
  return objc_msgSend(v24, "setWcmCellularWCI2ModeFrameDenialWindow:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 200));
}

id sub_1001274F4(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001F8FD8);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2516.0, 29.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_100248630);
  return objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100248690);
}

id sub_100127700(void *a1)
{
  objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:", 1);
  objc_msgSend(a1, "setWcmWiFiRxProtectMode:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiTxOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:", &off_1002318C0);
  objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:", &off_100231860);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:", 1750);
  objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:", 3);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:", -150);
  objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:", -250);
  objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:", 4);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:", 0);
  objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:", 0);
  objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:", 100);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:", 20);
  objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:", 10);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:", 500);
  objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:", 500);
  objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:", &off_100231EA8);
  objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:", &off_100231950);
  objc_msgSend(a1, "setWcmWiFiActiveDwellTime:", &off_100231BD8);
  objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:", objc_alloc_init(WCM_WiFiCellCoexIssueBandTable));
  objc_msgSend(objc_msgSend(a1, "wcmWiFiCellCoexIssueTable"), "configureBy:", &unk_1001FA318);
  objc_msgSend(a1, "setWcmCellularCoexB7DLRange:", 2620.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB7ULRange:", 2500.0, 40.0);
  objc_msgSend(a1, "setWcmCellularCoexB40ARange:", 2340.0, 30.1);
  objc_msgSend(a1, "setWcmCellularCoexB40BRange:", 2370.1, 30.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A1Range:", 2496.0, 20.0);
  objc_msgSend(a1, "setWcmCellularCoexB41A2Range:", 2516.0, 174.0);
  objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:", &off_100248708);
  return objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:", &off_100248780);
}

id sub_100127E2C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleNetworkdRestart");
}

id sub_100127F34(uint64_t a1)
{
  return +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 24, CFSTR("iRAT: Receieved TCP Connection fallback event status: %d"), tcp_fallback_watcher_fallback_inuse(*(_QWORD *)(a1 + 32)));
}

void sub_100128008(id a1, id a2, id a3, BOOL *a4)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((objc_msgSend(a3, "isEqual:", +[NSNull null](NSNull, "null", a3, a4)) & 1) == 0)
  {
    v5 = objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowRemoteID), "UTF8String");
    objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowConnSuccesses), "doubleValue");
    v7 = v6;
    objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowConnAttempts), "doubleValue");
    v9 = v8;
    objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowOverallTime), "doubleValue");
    v11 = v10;
    objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowTimesThresholded), "doubleValue");
    v13 = v12;
    objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowTxPackets), "doubleValue");
    v15 = v14;
    objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowTxReTxPackets), "doubleValue");
    v17 = v16;
    objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowTxFailPackets), "doubleValue");
    v19 = v18;
    objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowAvgUsecsEstabTime), "doubleValue");
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 20, CFSTR("iRAT: Symptom Metrics for IKEv2: Tunnel ID:%-20.18s Flow:%16.0f, ConnSucc:%16.0f, ConnAttempt:%16.0f, OverallStat(s):%16.0f, Thresholded:%16.0f, TxPackets:%16.0f, ReTxPackets:%16.0f, FailPackets:%16.0f"), v5, v7, v9, v11, v13, v15, v17, v19, v20);
  }
}

id sub_100128390(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "displayIKEMetrics:", a2);
  ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 216);
  return result;
}

void sub_1001283D8(id a1, id a2, id a3, BOOL *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if ((objc_msgSend(a3, "isEqual:", +[NSNull null](NSNull, "null", a3, a4)) & 1) == 0)
  {
    v6 = objc_msgSend(a2, "UTF8String");
    objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowTxPackets), "doubleValue");
    v8 = v7;
    v9 = kPerformanceFlowTxReTxPackets;
    objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowTxReTxPackets), "doubleValue");
    v11 = v10;
    objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", v9), "doubleValue");
    v13 = v12;
    objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowTxFailPackets), "doubleValue");
    v15 = v14;
    objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", kPerformanceFlowTxReTxInterval), "doubleValue");
    +[WCM_Logging logLevel:message:](WCM_Logging, "logLevel:message:", 20, CFSTR("iRAT: Symptom Metrics for IKEv2: Key String:%-20.18s FlowTxPackets:%16.0f,FlowTxReTxPackets:%16.0f, :%16.0f, OverallStat(s):%16.0f, Thresholded:%16.0f, TxPackets:%16.0f, ReTxPackets:%16.0f, FailPackets:%16.0f"), v6, v8, v11, v13, v15, v16);
  }
}

id sub_1001285C4(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "displayWatchpointHit:", a2);
  return objc_msgSend(*(id *)(a1 + 32), "notifyIRATManager:", 150);
}

void sub_100128830(id a1, NSDictionary *a2)
{
  objc_msgSend(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", kSymptomDiagnosticReplySuccess), "BOOLValue");
}

uint64_t sub_10012AB74()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = sub_10012DF24;
  v7 = sub_10012DF34;
  v0 = qword_100271438;
  v8 = qword_100271438;
  if (!qword_100271438)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_10012DF40;
    v2[3] = &unk_100201B40;
    v2[4] = &v3;
    sub_10012DF40((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_10012AC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10012AC38()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = sub_10012DF24;
  v7 = sub_10012DF34;
  v0 = qword_100271448;
  v8 = qword_100271448;
  if (!qword_100271448)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_10012E038;
    v2[3] = &unk_100201B40;
    v2[4] = &v3;
    sub_10012E038((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_10012ACE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10012ACFC()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = sub_10012DF24;
  v7 = sub_10012DF34;
  v0 = qword_100271450;
  v8 = qword_100271450;
  if (!qword_100271450)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_10012E08C;
    v2[3] = &unk_100201B40;
    v2[4] = &v3;
    sub_10012E08C((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_10012ADA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10012ADC0()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = sub_10012DF24;
  v7 = sub_10012DF34;
  v0 = qword_100271458;
  v8 = qword_100271458;
  if (!qword_100271458)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_10012E0E0;
    v2[3] = &unk_100201B40;
    v2[4] = &v3;
    sub_10012E0E0((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_10012AE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

NSDictionary *sub_10012B250(uint64_t a1)
{
  uint64_t v2;
  const __CFString *v3;
  _QWORD v5[31];
  _QWORD v6[31];

  v5[0] = CFSTR("counter");
  v6[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8));
  v5[1] = CFSTR("wifiRssi");
  v6[1] = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  v5[2] = CFSTR("wifiSNR");
  v6[2] = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
  v5[3] = CFSTR("bssLoad");
  v6[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 36));
  v5[4] = CFSTR("cca");
  v6[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 32));
  v5[5] = CFSTR("qbssLoad");
  v6[5] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 36));
  v5[6] = CFSTR("stationCount");
  v6[6] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 60));
  v5[7] = CFSTR("wifiEstimatedBandwitdh");
  v6[7] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 64));
  v5[8] = CFSTR("wifiRxPhyRate");
  v6[8] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 40));
  v5[9] = CFSTR("wifiTxPhyRate");
  v6[9] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 52));
  v5[10] = CFSTR("wifiTxPER");
  v6[10] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 48));
  v5[11] = CFSTR("wifiRxRetry");
  v6[11] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 44));
  v5[12] = CFSTR("captiveNetworks");
  v6[12] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 56));
  v5[13] = CFSTR("dataLQM");
  v6[13] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 120));
  v5[14] = CFSTR("voiceLQM");
  v6[14] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 124));
  v5[15] = CFSTR("signalBar");
  v6[15] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 112));
  v5[16] = CFSTR("cellRsrp");
  v6[16] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 128));
  v5[17] = CFSTR("cellRsrq");
  v6[17] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 132));
  v5[18] = CFSTR("cellSnr");
  v6[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 136));
  v5[19] = CFSTR("facetimeAction");
  v6[19] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 88));
  v5[20] = CFSTR("facetimePacketLoss");
  v6[20] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 92));
  v5[21] = CFSTR("facetimeTimeDelay");
  v6[21] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 96));
  v5[22] = CFSTR("iRATRecommendation");
  v2 = *(_QWORD *)(a1 + 32);
  v6[22] = *(_QWORD *)(v2 + 72);
  v5[23] = CFSTR("iRATRecommendationReason");
  v6[23] = *(_QWORD *)(v2 + 80);
  v5[24] = CFSTR("ratType");
  v3 = *(const __CFString **)(v2 + 104);
  if (!v3)
    v3 = CFSTR("INVALID_RAT");
  v6[24] = v3;
  v5[25] = CFSTR("alertedMode");
  v6[25] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 140));
  v5[26] = CFSTR("cellMode");
  v6[26] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 141));
  v5[27] = CFSTR("isPCDetected");
  v6[27] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 142));
  v5[28] = CFSTR("isStallDetected");
  v6[28] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 143));
  v5[29] = CFSTR("audioErasure");
  v6[29] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 144));
  v5[30] = CFSTR("videoErasure");
  v6[30] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 148));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 31);
}

NSDictionary *sub_10012B794(uint64_t a1)
{
  uint64_t v2;
  const __CFString *v3;
  NSNumber *v4;
  const __CFString *v5;
  const __CFString *v6;
  _QWORD v8[16];
  _QWORD v9[16];

  v8[0] = CFSTR("ccAssertion");
  v9[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 16));
  v8[1] = CFSTR("enableCMAS");
  v9[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 20));
  v8[2] = CFSTR("enableTelephony");
  v9[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 24));
  v8[3] = CFSTR("isTriggeredByProximityChange");
  v9[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 28));
  v8[4] = CFSTR("newLinkState");
  v9[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 32));
  v8[5] = CFSTR("oldLinkState");
  v9[5] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 36));
  v8[6] = CFSTR("siriApp");
  v9[6] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 40));
  v8[7] = CFSTR("wifiProximity");
  v9[7] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 44));
  v8[8] = CFSTR("btRssi");
  v9[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 48));
  v8[9] = CFSTR("wifiRssi");
  v9[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 52));
  v8[10] = CFSTR("bundleID");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(const __CFString **)(v2 + 8);
  if (!v3)
    v3 = &stru_100219FA0;
  v9[10] = v3;
  v8[11] = CFSTR("mModeState");
  v9[11] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 56));
  v8[12] = CFSTR("mModeStateDuration");
  v9[12] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 40));
  v8[13] = CFSTR("prevMModeState");
  v4 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 48));
  v5 = CFSTR("EventTrigger");
  if (*(_BYTE *)(a1 + 52))
    v5 = CFSTR("Query");
  v9[13] = v4;
  v9[14] = v5;
  v8[14] = CFSTR("triggerType");
  v8[15] = CFSTR("HighPowerMode");
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 60))
    v6 = CFSTR("On");
  else
    v6 = CFSTR("Off");
  v9[15] = v6;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v8, 16);
}

NSDictionary *sub_10012BAD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const __CFString *v4;
  _QWORD v6[30];
  _QWORD v7[30];

  v6[0] = CFSTR("wifiRssi");
  v7[0] = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80));
  v6[1] = CFSTR("callStatus");
  v7[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8));
  v6[2] = CFSTR("dataLinkPref");
  v7[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 12));
  v6[3] = CFSTR("voiceLinkPref");
  v7[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 16));
  v6[4] = CFSTR("appType");
  v2 = *(_QWORD *)(a1 + 32);
  v7[4] = *(_QWORD *)(v2 + 24);
  v6[5] = CFSTR("motionState");
  v7[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 32));
  v6[6] = CFSTR("cellRSRP");
  v7[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 36));
  v6[7] = CFSTR("cellSINR");
  v7[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 40));
  v6[8] = CFSTR("dataAppStatus");
  v7[8] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 48));
  v6[9] = CFSTR("dataLQM");
  v7[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 52));
  v6[10] = CFSTR("voiceLQM");
  v7[10] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 56));
  v6[11] = CFSTR("ratType");
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(const __CFString **)(v3 + 64);
  if (!v4)
    v4 = CFSTR("INVALID_RAT");
  v7[11] = v4;
  v6[12] = CFSTR("serviceType");
  v7[12] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v3 + 72));
  v6[13] = CFSTR("wifiSNR");
  v7[13] = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88));
  v6[14] = CFSTR("bcnPer");
  v7[14] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 96));
  v6[15] = CFSTR("cca");
  v7[15] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 100));
  v6[16] = CFSTR("qbssLoad");
  v7[16] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 104));
  v6[17] = CFSTR("stationCount");
  v7[17] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 108));
  v6[18] = CFSTR("wifiRxPhyRate");
  v7[18] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 116));
  v6[19] = CFSTR("wifiRxRetry");
  v7[19] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 120));
  v6[20] = CFSTR("wifiTxPER");
  v7[20] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 124));
  v6[21] = CFSTR("wifiTxPhyRate");
  v7[21] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 128));
  v6[22] = CFSTR("captiveNetworks");
  v7[22] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 132));
  v6[23] = CFSTR("decisionVIBE");
  v7[23] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 140));
  v6[24] = CFSTR("decisionVO");
  v7[24] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 144));
  v6[25] = CFSTR("expectedThroughputVIBE");
  v7[25] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 148));
  v6[26] = CFSTR("lqmScoreWifi");
  v7[26] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 156));
  v6[27] = CFSTR("packetLifetimeVIBE");
  v7[27] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 160));
  v6[28] = CFSTR("pkgLifeTimeVO");
  v7[28] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 164));
  v6[29] = CFSTR("pktLossRateVO");
  v7[29] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 168));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 30);
}

NSDictionary *sub_10012BFF8(uint64_t a1)
{
  NSNumber *v2;
  unsigned int *v3;
  const __CFString *v4;
  const __CFString *v5;
  int v6;
  const __CFString *v7;
  _QWORD v9[19];
  const __CFString *v10;
  _QWORD v11[18];
  const __CFString *v12;
  const __CFString *v13;

  v9[0] = CFSTR("bSSLoad");
  v11[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 40));
  v9[1] = CFSTR("lTERSRP");
  v11[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4));
  v9[2] = CFSTR("lTEVoiceLQM");
  v11[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 44));
  v9[3] = CFSTR("captiveNetwork");
  v11[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 24));
  v9[4] = CFSTR("signalBar");
  v11[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 56));
  v9[5] = CFSTR("lTEDataLQM");
  v11[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 48));
  v9[6] = CFSTR("latteNominalJitterBufferSize");
  v11[6] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 60));
  v9[7] = CFSTR("latteRTPPacketLoss");
  v11[7] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 68));
  v9[8] = CFSTR("latteErasures");
  v11[8] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 72));
  v9[9] = CFSTR("latteDejitterBufferUnderflow");
  v2 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 64));
  v3 = *(unsigned int **)(a1 + 40);
  v4 = (const __CFString *)*((_QWORD *)v3 + 11);
  if (!v4)
    v4 = CFSTR("Unknown");
  v11[9] = v2;
  v11[10] = v4;
  v9[10] = CFSTR("wRMRecommendedRAT");
  v9[11] = CFSTR("wiFiRSSI");
  v11[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *v3);
  v9[12] = CFSTR("wiFiRxRetry");
  v11[12] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 28));
  v9[13] = CFSTR("wiFiSINR");
  v11[13] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 12));
  v9[14] = CFSTR("wiFiTxPER");
  v11[14] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 8));
  v9[15] = CFSTR("hOCapability");
  v11[15] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 76));
  v9[16] = CFSTR("iWLANStatus");
  v11[16] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 96));
  v9[17] = CFSTR("wOWEnabled");
  v11[17] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 25));
  v9[18] = CFSTR("currentCellularAvailabilityStatus");
  if (*(_BYTE *)(a1 + 48))
  {
    v5 = (const __CFString *)objc_msgSend(*(id *)(a1 + 32), "getCurrentCellularAvailabilityStatus");
    v6 = *(unsigned __int8 *)(a1 + 48);
    v12 = v5;
    v10 = CFSTR("lastDonatedCellularAvailabilityStatus");
    if (v6)
      v7 = (const __CFString *)objc_msgSend(*(id *)(a1 + 32), "getPreviousCellularAvailabilityStatus");
    else
      v7 = CFSTR("Not Applicable");
  }
  else
  {
    v7 = CFSTR("Not Applicable");
    v12 = CFSTR("Not Applicable");
    v10 = CFSTR("lastDonatedCellularAvailabilityStatus");
  }
  v13 = v7;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v9, 20);
}

void sub_10012C9E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

NSDictionary *sub_10012CA00(uint64_t a1)
{
  uint64_t v2;
  const __CFString *v3;
  uint64_t v4;
  NSNumber *v5;
  _QWORD v7[90];
  _QWORD v8[90];

  v7[0] = CFSTR("counter");
  v8[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8));
  v7[1] = CFSTR("numStall");
  v8[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 368));
  v7[2] = CFSTR("isEnd");
  v8[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 377));
  v7[3] = CFSTR("lPM");
  v8[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 378));
  v7[4] = CFSTR("offline");
  v8[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 379));
  v7[5] = CFSTR("online");
  v8[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 380));
  v7[6] = CFSTR("event");
  v8[6] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 12));
  v7[7] = CFSTR("bufferInterval");
  v8[7] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 16));
  v7[8] = CFSTR("lqmScoreWifi");
  v8[8] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 84));
  v7[9] = CFSTR("decisionVIBE");
  v8[9] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 88));
  v7[10] = CFSTR("decisionVO");
  v8[10] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 92));
  v7[11] = CFSTR("goodDecisionsCounterVO");
  v8[11] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 96));
  v7[12] = CFSTR("badDecisionsCounterVO");
  v8[12] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 100));
  v7[13] = CFSTR("goodDecisionsCounterVIBE");
  v8[13] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 104));
  v7[14] = CFSTR("badDecisionsCounterVIBE");
  v8[14] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 108));
  v7[15] = CFSTR("invalidDecisionsCounterVIBE");
  v8[15] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 112));
  v7[16] = CFSTR("invalidDecisionsCounterVO");
  v8[16] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 112));
  v7[17] = CFSTR("txber");
  v8[17] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 152));
  v7[18] = CFSTR("rxRetry");
  v8[18] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 156));
  v7[19] = CFSTR("weightedAveragePhyrateRx");
  v8[19] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 136));
  v7[20] = CFSTR("weightedAveragePhyrateTx");
  v8[20] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 140));
  v7[21] = CFSTR("weightedAverageRssi");
  v8[21] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 144));
  v7[22] = CFSTR("weightedAverageSnr");
  v8[22] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 148));
  v7[23] = CFSTR("devicePointOfInterest");
  v8[23] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 160));
  v7[24] = CFSTR("wrmRecommendedRAT");
  v8[24] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 204));
  v7[25] = CFSTR("wifiModelConfidenceLevel");
  v8[25] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 208));
  v7[26] = CFSTR("wifiModelVersion");
  v8[26] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 212));
  v7[27] = CFSTR("mlPredictedWiFiBW");
  v8[27] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 216));
  v7[28] = CFSTR("mlPredictedCellBW");
  v8[28] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 220));
  v7[29] = CFSTR("expectedThroughputVIBE");
  v8[29] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 116));
  v7[30] = CFSTR("expectedThroughputVO");
  v8[30] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 120));
  v7[31] = CFSTR("packetLifetimeVIBE");
  v8[31] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 124));
  v7[32] = CFSTR("pkgLifeTimeVO");
  v8[32] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 128));
  v7[33] = CFSTR("pktLossRateVO");
  v8[33] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 132));
  v7[34] = CFSTR("cellRsrp");
  v8[34] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 164));
  v7[35] = CFSTR("cellSinr");
  v8[35] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 168));
  v7[36] = CFSTR("lqmScorecellular");
  v8[36] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 172));
  v7[37] = CFSTR("ratType");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(const __CFString **)(v2 + 184);
  if (!v3)
    v3 = CFSTR("INVALID_RAT");
  v8[37] = v3;
  v7[38] = CFSTR("rrcState");
  v8[38] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 176));
  v7[39] = CFSTR("cellLteRSRQ");
  v8[39] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 304));
  v7[40] = CFSTR("cellARFCN");
  v8[40] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 308));
  v7[41] = CFSTR("cellBandInfo");
  v8[41] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 316));
  v7[42] = CFSTR("cellChannelBW");
  v8[42] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 320));
  v7[43] = CFSTR("cellEstimatedBW");
  v8[43] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 312));
  v7[44] = CFSTR("cellModelConfidenceLevel");
  v8[44] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 364));
  v7[45] = CFSTR("cellNrRSRP");
  v8[45] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 292));
  v7[46] = CFSTR("cellNrRSRQ");
  v8[46] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 296));
  v7[47] = CFSTR("cellNrSNR");
  v8[47] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 300));
  v7[48] = CFSTR("btWiFiCoexState");
  v8[48] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 240));
  v7[49] = CFSTR("wifinumberOfSpatialStreams");
  v8[49] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 256));
  v7[50] = CFSTR("wifiguardinterval");
  v8[50] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 260));
  v7[51] = CFSTR("wifimcsindex");
  v8[51] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 264));
  v7[52] = CFSTR("wifilowDataMode");
  v8[52] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 248));
  v7[53] = CFSTR("wifichannel");
  v8[53] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 252));
  v7[54] = CFSTR("isWfiCaptive");
  v8[54] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 244));
  v7[55] = CFSTR("maxDLCAConfigured");
  v8[55] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 336));
  v7[56] = CFSTR("totalConfiguredBw");
  v8[56] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 340));
  v7[57] = CFSTR("nrConfiguredBw");
  v8[57] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 344));
  v7[58] = CFSTR("nrTotalScheduledMimoLayers");
  v8[58] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 348));
  v7[59] = CFSTR("totalConfiguredMimoLayers");
  v8[59] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 352));
  v7[60] = CFSTR("lteMaxScheduledMimoLayersInACell");
  v8[60] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 356));
  v7[61] = CFSTR("nrMaxDlModulation");
  v8[61] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 360));
  v7[62] = CFSTR("lqmScoreBT");
  v8[62] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 192));
  v7[63] = CFSTR("rxRetransmissionRate");
  v8[63] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 196));
  v7[64] = CFSTR("txRetransmissionRate");
  v8[64] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 200));
  v7[65] = CFSTR("actualHighBandwidth");
  v8[65] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 20));
  v7[66] = CFSTR("actualLowBandwidth");
  v8[66] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 24));
  v7[67] = CFSTR("pActualLowBandwidth");
  v8[67] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 28));
  v7[68] = CFSTR("maxOfActualLowBandwidth");
  v8[68] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 32));
  v7[69] = CFSTR("deviation");
  v8[69] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 36));
  v7[70] = CFSTR("estimatedHighBandwidth");
  v8[70] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 40));
  v7[71] = CFSTR("estimatedLowBandwidth");
  v8[71] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 44));
  v7[72] = CFSTR("movingAvgHighBandwidth");
  v8[72] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 48));
  v7[73] = CFSTR("cmDataSentCount");
  v8[73] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 56));
  v7[74] = CFSTR("cmDataSentDuration");
  v8[74] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 60));
  v7[75] = CFSTR("wifChannelBW");
  v8[75] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 228));
  v7[76] = CFSTR("wifChannelType");
  v8[76] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 232));
  v7[77] = CFSTR("wifiCapability");
  v8[77] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 236));
  v7[78] = CFSTR("tcpRTTAvg");
  v8[78] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 268));
  v7[79] = CFSTR("tcpRTTvar");
  v8[79] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 276));
  v7[80] = CFSTR("ratioDupeBytes");
  v8[80] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 280));
  v7[81] = CFSTR("ratioOOBBytes");
  v8[81] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 284));
  v7[82] = CFSTR("cellNsaEnabled");
  v8[82] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 288));
  v7[83] = CFSTR("isFR1");
  v4 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v4 + 288))
  {
    v5 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v4 + 289));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v5 = (NSNumber *)&__kCFBooleanFalse;
  }
  v8[83] = v5;
  v7[84] = CFSTR("movingAvgLowBandwidth");
  v8[84] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v4 + 52));
  v7[85] = CFSTR("wifiRssi");
  v8[85] = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
  v7[86] = CFSTR("phyRate");
  v8[86] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 72));
  v7[87] = CFSTR("cca");
  v8[87] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 76));
  v7[88] = CFSTR("qbssLoad");
  v8[88] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 80));
  v7[89] = CFSTR("videoStreamingStallTime");
  v8[89] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 372));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 90);
}

NSDictionary *sub_10012D684(uint64_t a1)
{
  uint64_t v2;
  const __CFString *v3;
  _QWORD v5[50];
  _QWORD v6[50];

  v5[0] = CFSTR("cellDataLQM");
  v6[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8));
  v5[1] = CFSTR("cellDlBw");
  v6[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 12));
  v5[2] = CFSTR("cellEstimatedBw");
  v6[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 16));
  v5[3] = CFSTR("cellEstimatedLoad");
  v6[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 20));
  v5[4] = CFSTR("cellLteEstimatedThroughput");
  v6[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 24));
  v5[5] = CFSTR("cellLteRSRP");
  v6[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 28));
  v5[6] = CFSTR("cellLteRSRQ");
  v6[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 32));
  v5[7] = CFSTR("cellLteSNR");
  v6[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 36));
  v5[8] = CFSTR("cellMaxDlCaNumConfigured");
  v6[8] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 40));
  v5[9] = CFSTR("cellMaxUlCaNumConfigured");
  v6[9] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 44));
  v5[10] = CFSTR("cellNrEstimatedThroughput");
  v6[10] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 48));
  v5[11] = CFSTR("cellNrFR2active");
  v6[11] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 52));
  v5[12] = CFSTR("cellNrRSRP");
  v6[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 56));
  v5[13] = CFSTR("cellNrRSRQ");
  v6[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 60));
  v5[14] = CFSTR("cellNrSNR");
  v6[14] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 64));
  v5[15] = CFSTR("cellNsaEnabled");
  v6[15] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 68));
  v5[16] = CFSTR("cellRatType");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(const __CFString **)(v2 + 72);
  if (!v3)
    v3 = CFSTR("INVALID_RAT");
  v6[16] = v3;
  v5[17] = CFSTR("cellUlBw");
  v6[17] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 84));
  v5[18] = CFSTR("recommendedlink");
  v6[18] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 88));
  v5[19] = CFSTR("wifPoi");
  v6[19] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 92));
  v5[20] = CFSTR("wifiCca");
  v6[20] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 96));
  v5[21] = CFSTR("wifiEstThoughtput");
  v6[21] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 100));
  v5[22] = CFSTR("wifiQbssLoad");
  v6[22] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 104));
  v5[23] = CFSTR("wifiRssi");
  v6[23] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 108));
  v5[24] = CFSTR("wifiRxRetry");
  v6[24] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 112));
  v5[25] = CFSTR("wifiSnr");
  v6[25] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 116));
  v5[26] = CFSTR("wifiStationCount");
  v6[26] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 120));
  v5[27] = CFSTR("wifiTxPER");
  v6[27] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 124));
  v5[28] = CFSTR("wifiWghtAVGRXPHYRATE");
  v6[28] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 128));
  v5[29] = CFSTR("wifiWghtAVGSNR");
  v6[29] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 132));
  v5[30] = CFSTR("wifiWghtAVGTXPHYRATE");
  v6[30] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 136));
  v5[31] = CFSTR("wifiWgtAVGRSSI");
  v6[31] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 140));
  v5[32] = CFSTR("wifiWifiEstThoughtputConfidence");
  v6[32] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 144));
  v5[33] = CFSTR("fr2DBRecommendation");
  v6[33] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 149));
  v5[34] = CFSTR("locationDBFR1Count");
  v6[34] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 152));
  v5[35] = CFSTR("locationDBFR2Count");
  v6[35] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 156));
  v5[36] = CFSTR("highThermalTemperatureNotification");
  v6[36] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 160));
  v5[37] = CFSTR("wiFiPredictedThroughput");
  v6[37] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 164));
  v5[38] = CFSTR("wRMRecommendationReason");
  v6[38] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 168));
  v5[39] = CFSTR("wifiRecommendationScore");
  v6[39] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 172));
  v5[40] = CFSTR("wifiRecommendationConfidence");
  v6[40] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 176));
  v5[41] = CFSTR("cellularRecommendationScore");
  v6[41] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 180));
  v5[42] = CFSTR("cellularRecommendationConfidence");
  v6[42] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 184));
  v5[43] = CFSTR("radioCoverage");
  v6[43] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 188));
  v5[44] = CFSTR("radioFrequency");
  v6[44] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 192));
  v5[45] = CFSTR("triggerReason");
  v6[45] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 196));
  v5[46] = CFSTR("applicationCategory");
  v6[46] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 200));
  v5[47] = CFSTR("cellTotalMimoLayers");
  v6[47] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 204));
  v5[48] = CFSTR("totalNrBandwidth");
  v6[48] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 208));
  v5[49] = CFSTR("cellRrcState");
  v6[49] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 80));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 50);
}

NSDictionary *sub_10012DE64(uint64_t a1)
{
  _QWORD v3[3];
  _QWORD v4[3];

  v3[0] = CFSTR("recommendedDataSim");
  v4[0] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 40));
  v3[1] = CFSTR("dataLQM");
  v4[1] = objc_msgSend(*(id *)(a1 + 32), "convetDataLqmToString:", *(unsigned int *)(a1 + 48));
  v3[2] = CFSTR("dataCongested");
  v4[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 52));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

void sub_10012DF24(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_10012DF34(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

Class sub_10012DF40(uint64_t a1)
{
  Class result;

  sub_10012DF94();
  result = objc_getClass("GEOCellConnectionQuality");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_10012F054();
  qword_100271438 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void sub_10012DF94()
{
  void *v0;
  __int128 v1;
  uint64_t v2;

  v0 = 0;
  if (!qword_100271440)
  {
    v1 = off_100205D38;
    v2 = 0;
    qword_100271440 = _sl_dlopen(&v1, &v0);
  }
  if (!qword_100271440)
    sub_10012F0B8(&v0);
  if (v0)
    free(v0);
}

Class sub_10012E038(uint64_t a1)
{
  Class result;

  sub_10012DF94();
  result = objc_getClass("GEOLatLng");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_10012F11C();
  qword_100271448 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class sub_10012E08C(uint64_t a1)
{
  Class result;

  sub_10012DF94();
  result = objc_getClass("GEOLocation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_10012F180();
  qword_100271450 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class sub_10012E0E0(uint64_t a1)
{
  Class result;

  sub_10012DF94();
  result = objc_getClass("GEOAPNetworkSelectionHarvestReporter");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_10012F1E4();
  qword_100271458 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class sub_10012E134(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!qword_100271468)
  {
    v4 = off_100205D50;
    v5 = 0;
    qword_100271468 = _sl_dlopen(&v4, &v3);
  }
  if (!qword_100271468)
    sub_10012F248(&v3);
  if (v3)
    free(v3);
  result = objc_getClass("PPUtils");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_10012F2AC();
  qword_100271460 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class sub_10012E210(uint64_t a1)
{
  Class result;

  sub_10012E264();
  result = objc_getClass("BMDeviceConnectivityContext");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_10012F310();
  qword_100271470 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t sub_10012E264()
{
  uint64_t v0;
  void *v2;
  __int128 v3;
  uint64_t v4;

  v2 = 0;
  if (!qword_100271478)
  {
    v3 = off_100205D68;
    v4 = 0;
    qword_100271478 = _sl_dlopen(&v3, &v2);
  }
  v0 = qword_100271478;
  if (!qword_100271478)
    sub_10012F374(&v2);
  if (v2)
    free(v2);
  return v0;
}

void sub_10012E40C(_QWORD *a1)
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *CoreServicesLibrary(void)"), CFSTR("WRM_BWEvalManager+Category.m"), 40, CFSTR("%s"), *a1);
  __break(1u);
}

void sub_10012E470()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getLSApplicationRecordClass(void)_block_invoke"), CFSTR("WRM_BWEvalManager+Category.m"), 42, CFSTR("Unable to find class %s"), "LSApplicationRecord");
  __break(1u);
}

void sub_10012E4D4()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *BMDeviceCellularAvailabilityStatusStateAsString_SOFT(BMDeviceCellularAvailabilityStatusState)"), CFSTR("WRM_EnhancedCTService.m"), 78, CFSTR("%s"), dlerror());
  __break(1u);
}

void sub_10012E538()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "id<BMRootLibrary> BiomeLibrary_SOFT(void)"), CFSTR("WRM_EnhancedCTService.m"), 76, CFSTR("%s"), dlerror());
  __break(1u);
}

void sub_10012E59C(_QWORD *a1)
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *BiomeLibraryLibrary(void)"), CFSTR("WRM_EnhancedCTService.m"), 69, CFSTR("%s"), *a1);
  __break(1u);
}

void sub_10012E600()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getBMDeviceCellularAvailabilityStatusClass(void)_block_invoke"), CFSTR("WRM_EnhancedCTService.m"), 73, CFSTR("Unable to find class %s"), "BMDeviceCellularAvailabilityStatus");
  __break(1u);
}

void sub_10012E664(_QWORD *a1)
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *OSAnalyticsLibrary(void)"), CFSTR("WRM_EnhancedCTService.m"), 58, CFSTR("%s"), *a1);
  __break(1u);
}

void sub_10012E6C8()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getOSASystemConfigurationClass(void)_block_invoke"), CFSTR("WRM_EnhancedCTService.m"), 59, CFSTR("Unable to find class %s"), "OSASystemConfiguration");
  __break(1u);
}

void sub_10012E72C()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getGEOLocationClass(void)_block_invoke"), CFSTR("WRM_EnhancedCTService.m"), 64, CFSTR("Unable to find class %s"), "GEOLocation");
  __break(1u);
}

void sub_10012E790(_QWORD *a1)
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *GeoServicesLibrary(void)"), CFSTR("WRM_EnhancedCTService.m"), 61, CFSTR("%s"), *a1);
  __break(1u);
}

void sub_10012E7F4()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getGEOGeographicMetadataRequesterClass(void)_block_invoke"), CFSTR("WRM_EnhancedCTService.m"), 67, CFSTR("Unable to find class %s"), "GEOGeographicMetadataRequester");
  __break(1u);
}

void sub_10012E858()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getMLModelClass(void)_block_invoke"), CFSTR("WRM_BWEvalManager.m"), 42, CFSTR("Unable to find class %s"), "MLModel");
  __break(1u);
}

void sub_10012E8BC(_QWORD *a1)
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *CoreMLLibrary(void)"), CFSTR("WRM_BWEvalManager.m"), 36, CFSTR("%s"), *a1);
  __break(1u);
}

void sub_10012E920()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getMLDictionaryFeatureProviderClass(void)_block_invoke"), CFSTR("WRM_BWEvalManager.m"), 39, CFSTR("Unable to find class %s"), "MLDictionaryFeatureProvider");
  __break(1u);
}

void sub_10012E984()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getNPTPerformanceTestConfigurationClass(void)_block_invoke"), CFSTR("WRM_SpeedTestConfigIOS.m"), 21, CFSTR("Unable to find class %s"), "NPTPerformanceTestConfiguration");
  __break(1u);
}

void sub_10012E9E8(_QWORD *a1)
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *NPTKitLibrary(void)"), CFSTR("WRM_SpeedTestConfigIOS.m"), 20, CFSTR("%s"), *a1);
  __break(1u);
}

void sub_10012EA4C()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getNPTPerformanceTestClass(void)_block_invoke"), CFSTR("WRM_SpeedTestConfigIOS.m"), 23, CFSTR("Unable to find class %s"), "NPTPerformanceTest");
  __break(1u);
}

void sub_10012EAB0()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not load CellularThroughputPrediction.mlmodelc in the bundle resource", v0, 2u);
}

void sub_10012EAF4()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getMLFeatureValueClass(void)_block_invoke"));
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("CellularThroughputPrediction.m"), 23, CFSTR("Unable to find class %s"), "MLFeatureValue");

  __break(1u);
}

void sub_10012EB6C(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *CoreMLLibrary(void)"));
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("CellularThroughputPrediction.m"), 15, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_10012EBE8()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getMLModelClass(void)_block_invoke"));
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("CellularThroughputPrediction.m"), 20, CFSTR("Unable to find class %s"), "MLModel");

  __break(1u);
}

void sub_10012EC60()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getMLPredictionOptionsClass(void)_block_invoke"));
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("CellularThroughputPrediction.m"), 26, CFSTR("Unable to find class %s"), "MLPredictionOptions");

  __break(1u);
}

void sub_10012ECD8()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getMLArrayBatchProviderClass(void)_block_invoke"));
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("CellularThroughputPrediction.m"), 17, CFSTR("Unable to find class %s"), "MLArrayBatchProvider");

  __break(1u);
}

void sub_10012ED50(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000B4E70((void *)&_mh_execute_header, a2, a3, "%@", a5, a6, a7, a8, 2u);
}

void sub_10012EDB8()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not load iRATBW.mlmodelc in the bundle resource", v0, 2u);
}

void sub_10012EDFC()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getMLFeatureValueClass(void)_block_invoke"), CFSTR("iRATBW.m"), 18, CFSTR("Unable to find class %s"), "MLFeatureValue");
  __break(1u);
}

void sub_10012EE60(_QWORD *a1)
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *CoreMLLibrary(void)"), CFSTR("iRATBW.m"), 10, CFSTR("%s"), *a1);
  __break(1u);
}

void sub_10012EEC4()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getMLModelClass(void)_block_invoke"), CFSTR("iRATBW.m"), 15, CFSTR("Unable to find class %s"), "MLModel");
  __break(1u);
}

void sub_10012EF28()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getMLPredictionOptionsClass(void)_block_invoke"), CFSTR("iRATBW.m"), 21, CFSTR("Unable to find class %s"), "MLPredictionOptions");
  __break(1u);
}

void sub_10012EF8C()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getMLArrayBatchProviderClass(void)_block_invoke"), CFSTR("iRATBW.m"), 12, CFSTR("Unable to find class %s"), "MLArrayBatchProvider");
  __break(1u);
}

void sub_10012EFF0()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "id<BMRootLibrary> BiomeLibrary_SOFT(void)"), CFSTR("WRM_AWDService.m"), 52, CFSTR("%s"), dlerror());
  __break(1u);
}

void sub_10012F054()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getGEOCellConnectionQualityClass(void)_block_invoke"), CFSTR("WRM_AWDService.m"), 43, CFSTR("Unable to find class %s"), "GEOCellConnectionQuality");
  __break(1u);
}

void sub_10012F0B8(_QWORD *a1)
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *GeoServicesLibrary(void)"), CFSTR("WRM_AWDService.m"), 30, CFSTR("%s"), *a1);
  __break(1u);
}

void sub_10012F11C()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getGEOLatLngClass(void)_block_invoke"), CFSTR("WRM_AWDService.m"), 40, CFSTR("Unable to find class %s"), "GEOLatLng");
  __break(1u);
}

void sub_10012F180()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getGEOLocationClass(void)_block_invoke"), CFSTR("WRM_AWDService.m"), 37, CFSTR("Unable to find class %s"), "GEOLocation");
  __break(1u);
}

void sub_10012F1E4()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getGEOAPNetworkSelectionHarvestReporterClass(void)_block_invoke"), CFSTR("WRM_AWDService.m"), 46, CFSTR("Unable to find class %s"), "GEOAPNetworkSelectionHarvestReporter");
  __break(1u);
}

void sub_10012F248(_QWORD *a1)
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *PersonalizationPortraitLibrary(void)"), CFSTR("WRM_AWDService.m"), 33, CFSTR("%s"), *a1);
  __break(1u);
}

void sub_10012F2AC()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getPPUtilsClass(void)_block_invoke"), CFSTR("WRM_AWDService.m"), 53, CFSTR("Unable to find class %s"), "PPUtils");
  __break(1u);
}

void sub_10012F310()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getBMDeviceConnectivityContextClass(void)_block_invoke"), CFSTR("WRM_AWDService.m"), 49, CFSTR("Unable to find class %s"), "BMDeviceConnectivityContext");
  __break(1u);
}

void sub_10012F374(_QWORD *a1)
{
  id v1;
  uint64_t v2;

  v1 = -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *BiomeLibraryLibrary(void)"), CFSTR("WRM_AWDService.m"), 32, CFSTR("%s"), *a1);
  __break(1u);
  ADClientAddValueForScalarKey(v1, v2);
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

id objc_msgSend_AoSDeviceID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "AoSDeviceID");
}

id objc_msgSend_BLEActiveScanPwrLmtAssrInt(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BLEActiveScanPwrLmtAssrInt");
}

id objc_msgSend_CC1CarrierId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CC1CarrierId");
}

id objc_msgSend_CC1Tech(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CC1Tech");
}

id objc_msgSend_CC2CarrierId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CC2CarrierId");
}

id objc_msgSend_CC2Tech(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CC2Tech");
}

id objc_msgSend_CTClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CTClient");
}

id objc_msgSend_CTClientInitDone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CTClientInitDone");
}

id objc_msgSend_CellAntBlockingList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CellAntBlockingList");
}

id objc_msgSend_CellularAvailabilityStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CellularAvailabilityStatus");
}

id objc_msgSend_CompanionBTRssi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CompanionBTRssi");
}

id objc_msgSend_CompanionBTVersusWiFiRecommendation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CompanionBTVersusWiFiRecommendation");
}

id objc_msgSend_CompanionInternetConnectionAvailable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CompanionInternetConnectionAvailable");
}

id objc_msgSend_CompanionWIFIRssi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CompanionWIFIRssi");
}

id objc_msgSend_CompanionWifiStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CompanionWifiStatus");
}

id objc_msgSend_ConnectedDevices(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ConnectedDevices");
}

id objc_msgSend_ConnectivityContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ConnectivityContext");
}

id objc_msgSend_ConstructAntennaMapXpcMsg_AntPhyIdxDict_AntSpmiIdxDict_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ConstructAntennaMapXpcMsg:AntPhyIdxDict:AntSpmiIdxDict:");
}

id objc_msgSend_DataLqmIsValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "DataLqmIsValid");
}

id objc_msgSend_DataLqmValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "DataLqmValue");
}

id objc_msgSend_Device(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "Device");
}

id objc_msgSend_FreqEnd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "FreqEnd");
}

id objc_msgSend_FreqStart(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "FreqStart");
}

id objc_msgSend_GetHFBTBandBlockedChannelMapWithCellUlHighFreq_cellUlLowFreq_cellDlHighFreq_cellDlLowFreq_gpsRadioActive_coexIssues_btBandLowFreq_btBandHighFreq_btNumChannel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "GetHFBTBandBlockedChannelMapWithCellUlHighFreq:cellUlLowFreq:cellDlHighFreq:cellDlLowFreq:gpsRadioActive:coexIssues:btBandLowFreq:btBandHighFreq:btNumChannel:");
}

id objc_msgSend_HFBTAntBlkBandsForCellUlLowFreq_cellUlHighFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "HFBTAntBlkBandsForCellUlLowFreq:cellUlHighFreq:");
}

id objc_msgSend_HFBTAntBlkEnableBands(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "HFBTAntBlkEnableBands");
}

id objc_msgSend_HFBTAntBlockingBandsFromWiFiConfigForCellBandInfoType_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "HFBTAntBlockingBandsFromWiFiConfigForCellBandInfoType:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:");
}

id objc_msgSend_HFBTChannelsToAvoidForCellUlLowFreq_cellUlHighFreq_cellDlLowFreq_cellDlHighFreq_btBandLowFreq_btBandHighFreq_gpsRadioActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "HFBTChannelsToAvoidForCellUlLowFreq:cellUlHighFreq:cellDlLowFreq:cellDlHighFreq:btBandLowFreq:btBandHighFreq:gpsRadioActive:");
}

id objc_msgSend_HFBTPreferredChannelMapForCellBandInfoType_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_gpsRadioActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "HFBTPreferredChannelMapForCellBandInfoType:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:gpsRadioActive:");
}

id objc_msgSend_HandleThreadStart(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "HandleThreadStart");
}

id objc_msgSend_HandleThreadStop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "HandleThreadStop");
}

id objc_msgSend_ImdTypeEnumCheck_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ImdTypeEnumCheck:");
}

id objc_msgSend_InitService(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "InitService");
}

id objc_msgSend_IsIDSInitDone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "IsIDSInitDone");
}

id objc_msgSend_LQMEnumCheck_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "LQMEnumCheck:");
}

id objc_msgSend_MCSIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "MCSIndex");
}

id objc_msgSend_PHYMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "PHYMode");
}

id objc_msgSend_PrevAudioErasurePercent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "PrevAudioErasurePercent");
}

id objc_msgSend_PrevAudioQualityWasGood(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "PrevAudioQualityWasGood");
}

id objc_msgSend_Priority(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "Priority");
}

id objc_msgSend_RCU2Init(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "RCU2Init");
}

id objc_msgSend_Rc1AntBitmap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "Rc1AntBitmap");
}

id objc_msgSend_Rc1IssueChannel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "Rc1IssueChannel");
}

id objc_msgSend_Rc1PriorityBitmap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "Rc1PriorityBitmap");
}

id objc_msgSend_ServiceInitDone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ServiceInitDone");
}

id objc_msgSend_ULLAModeTransition(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ULLAModeTransition");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URL");
}

id objc_msgSend_URLForResource_withExtension_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLForResource:withExtension:");
}

id objc_msgSend_URLOfModelInThisBundle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLOfModelInThisBundle");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUIDString");
}

id objc_msgSend_Uuid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "Uuid");
}

id objc_msgSend_VoiceLqmIsValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "VoiceLqmIsValid");
}

id objc_msgSend_VoiceLqmReasonCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "VoiceLqmReasonCode");
}

id objc_msgSend_VoiceLqmValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "VoiceLqmValue");
}

id objc_msgSend_WCM_UCMClientManagerSingleton(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WCM_UCMClientManagerSingleton");
}

id objc_msgSend_WRM_BTBeaconControllerSingleton(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WRM_BTBeaconControllerSingleton");
}

id objc_msgSend_WRM_BWEvalManagerSingleton(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WRM_BWEvalManagerSingleton");
}

id objc_msgSend_WRM_CTServiceControllerSingleton(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WRM_CTServiceControllerSingleton");
}

id objc_msgSend_WRM_FT_HandoverManagerSingleton(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WRM_FT_HandoverManagerSingleton");
}

id objc_msgSend_WRM_HandoverManagerSingleton(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WRM_HandoverManagerSingleton");
}

id objc_msgSend_WRM_IDSLinkEvalManagerSingleton(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WRM_IDSLinkEvalManagerSingleton");
}

id objc_msgSend_WRM_IdsMetricsControllerSingleton(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WRM_IdsMetricsControllerSingleton");
}

id objc_msgSend_WRM_SCServiceControllerSingleton(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WRM_SCServiceControllerSingleton");
}

id objc_msgSend_WatchReportRc1ChannelsForGpioBlankingByCellBandInfoType_CellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WatchReportRc1ChannelsForGpioBlankingByCellBandInfoType:CellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:");
}

id objc_msgSend_Wireless(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "Wireless");
}

id objc_msgSend_WrmSendp2pMessage_MessageBody_withOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "WrmSendp2pMessage:MessageBody:withOptions:");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "absoluteString");
}

id objc_msgSend_accessoryReconnect(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessoryReconnect");
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activate");
}

id objc_msgSend_activateMobilityContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activateMobilityContext:");
}

id objc_msgSend_activateWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activateWithCompletion:");
}

id objc_msgSend_activeCoexFeatures(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeCoexFeatures");
}

id objc_msgSend_activeConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeConfig");
}

id objc_msgSend_activeProfileFor2G(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeProfileFor2G");
}

id objc_msgSend_activeProfileFor5G(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeProfileFor5G");
}

id objc_msgSend_activeSlot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeSlot");
}

id objc_msgSend_activeSubId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeSubId");
}

id objc_msgSend_activityAlarmAvailable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityAlarmAvailable");
}

id objc_msgSend_addBTConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addBTConnection:");
}

id objc_msgSend_addConrollerToNewList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addConrollerToNewList:");
}

id objc_msgSend_addDelegate_queue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addDelegate:queue:");
}

id objc_msgSend_addIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addIndex:");
}

id objc_msgSend_addMobilityContextToList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addMobilityContextToList:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addPersistentStoreWithType_configuration_URL_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPersistentStoreWithType:configuration:URL:options:error:");
}

id objc_msgSend_addPolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPolicy:");
}

id objc_msgSend_addPriorityClassPolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPriorityClassPolicy:");
}

id objc_msgSend_addProximityiRatClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addProximityiRatClient:");
}

id objc_msgSend_addSessionToList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addSessionToList:");
}

id objc_msgSend_addUCMClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addUCMClient:");
}

id objc_msgSend_addUpdateHandlerForNamespaceName_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addUpdateHandlerForNamespaceName:queue:usingBlock:");
}

id objc_msgSend_addXpcBandEntriesWithAnt_bandsToAddSet_bandArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addXpcBandEntriesWithAnt:bandsToAddSet:bandArray:");
}

id objc_msgSend_addiRatClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addiRatClient:");
}

id objc_msgSend_airplayController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "airplayController");
}

id objc_msgSend_alertWRMClient__::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "alertWRMClient::::");
}

id objc_msgSend_allKeysForObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allKeysForObject:");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allValues");
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowedServices(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowedServices");
}

id objc_msgSend_altitude(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "altitude");
}

id objc_msgSend_antennaConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "antennaConfig");
}

id objc_msgSend_antennaSelection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "antennaSelection");
}

id objc_msgSend_antennaSelectionEnh2G(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "antennaSelectionEnh2G");
}

id objc_msgSend_antennaSelectionEnh5G(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "antennaSelectionEnh5G");
}

id objc_msgSend_antennaSelectionEnh6G(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "antennaSelectionEnh6G");
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "anyObject");
}

id objc_msgSend_appCountUpdate::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appCountUpdate::");
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendData:");
}

id objc_msgSend_appendDesenseFreqToXpcArray_DesenseFreq_Size_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendDesenseFreqToXpcArray:DesenseFreq:Size:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendString:");
}

id objc_msgSend_applyBwLimitFromCenter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applyBwLimitFromCenter:");
}

id objc_msgSend_applyBwLimitFromRight_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applyBwLimitFromRight:");
}

id objc_msgSend_applyMavAntennaPolicyForPlatformId_sku_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applyMavAntennaPolicyForPlatformId:sku:");
}

id objc_msgSend_ariApiEnabledByOSFeatureFlag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ariApiEnabledByOSFeatureFlag:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "array");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_assembleCellularConfigXpcMsg_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "assembleCellularConfigXpcMsg:");
}

id objc_msgSend_assembleDesenseCellularConfigXpcMsgwithDownlinkFreq_DownlinkFreqExt_UlFreq_UplinkFreqExt_SearchFreq_HoppingFreq_NeighborFreq_RPLMNFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "assembleDesenseCellularConfigXpcMsgwithDownlinkFreq:DownlinkFreqExt:UlFreq:UplinkFreqExt:SearchFreq:HoppingFreq:NeighborFreq:RPLMNFreq:");
}

id objc_msgSend_attached(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "attached");
}

id objc_msgSend_attributesOfItemAtPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "attributesOfItemAtPath:error:");
}

id objc_msgSend_audioBuiltInReceiver(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "audioBuiltInReceiver");
}

id objc_msgSend_audioPacketExpected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "audioPacketExpected");
}

id objc_msgSend_audioType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "audioType");
}

id objc_msgSend_authorizationStatusForBundle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authorizationStatusForBundle:");
}

id objc_msgSend_averagedNominalJitterBufferDelay(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "averagedNominalJitterBufferDelay");
}

id objc_msgSend_avgRxPktLoss(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "avgRxPktLoss");
}

id objc_msgSend_bHPCellSetBTAFH(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bHPCellSetBTAFH");
}

id objc_msgSend_bandInfoType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bandInfoType");
}

id objc_msgSend_bars(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bars");
}

id objc_msgSend_baseBandEnabledProtectionTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "baseBandEnabledProtectionTimer");
}

id objc_msgSend_basebandController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "basebandController");
}

id objc_msgSend_batteryLife(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "batteryLife");
}

id objc_msgSend_beaconPER(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "beaconPER");
}

id objc_msgSend_beginMonitoring(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "beginMonitoring");
}

id objc_msgSend_bindQMIClientToSlotType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bindQMIClientToSlotType:");
}

id objc_msgSend_bleRSSI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bleRSSI");
}

id objc_msgSend_bluetoothCoexistenceMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bluetoothCoexistenceMode");
}

id objc_msgSend_bodyTxPowerCapdBm(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bodyTxPowerCapdBm");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_bspMonitor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bspMonitor");
}

id objc_msgSend_btAgcCoexModeEnable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btAgcCoexModeEnable");
}

id objc_msgSend_btAntBlockDuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btAntBlockDuration");
}

id objc_msgSend_btChannelsToAvoidForC0B1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btChannelsToAvoidForC0B1");
}

id objc_msgSend_btChannelsToAvoidForCellUlLowFreq_cellUlHighFreq_gpsRadioActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btChannelsToAvoidForCellUlLowFreq:cellUlHighFreq:gpsRadioActive:");
}

id objc_msgSend_btClkAlgnFlag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btClkAlgnFlag");
}

id objc_msgSend_btConnections(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btConnections");
}

id objc_msgSend_btController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btController");
}

id objc_msgSend_btDiversityBlocklistTypeFor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btDiversityBlocklistTypeFor:");
}

id objc_msgSend_btDiversityBlocklistTypeForC0B1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btDiversityBlocklistTypeForC0B1");
}

id objc_msgSend_btDiversityChannelMapForC0B0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btDiversityChannelMapForC0B0");
}

id objc_msgSend_btDiversityChannelMapForC0B1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btDiversityChannelMapForC0B1");
}

id objc_msgSend_btDiversityChannelMapForC1B0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btDiversityChannelMapForC1B0");
}

id objc_msgSend_btDiversityChannelMapForC1B1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btDiversityChannelMapForC1B1");
}

id objc_msgSend_btDiversityChannelMapForCellBTAntennaCombination_cellBandInfoType_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_gpsRadioActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btDiversityChannelMapForCellBTAntennaCombination:cellBandInfoType:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:gpsRadioActive:");
}

id objc_msgSend_btDiversityChannelMapOnGpsRadioActiveForC0B0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btDiversityChannelMapOnGpsRadioActiveForC0B0");
}

id objc_msgSend_btDiversityChannelMapOnGpsRadioActiveForC0B1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btDiversityChannelMapOnGpsRadioActiveForC0B1");
}

id objc_msgSend_btDiversityChannelMapOnGpsRadioActiveForC1B0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btDiversityChannelMapOnGpsRadioActiveForC1B0");
}

id objc_msgSend_btDiversityChannelMapOnGpsRadioActiveForC1B1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btDiversityChannelMapOnGpsRadioActiveForC1B1");
}

id objc_msgSend_btDiversityChannelsToAvoidForCellBTAntennaCombination_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_gpsRadioActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btDiversityChannelsToAvoidForCellBTAntennaCombination:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:gpsRadioActive:");
}

id objc_msgSend_btMetricsEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btMetricsEnabled");
}

id objc_msgSend_btMovingAvgRSSI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btMovingAvgRSSI");
}

id objc_msgSend_btPreferred5GChannelMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btPreferred5GChannelMap");
}

id objc_msgSend_btPreferredChannelMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btPreferredChannelMap");
}

id objc_msgSend_btPreferredChannelMapForCellBandInfoType_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_gpsRadioActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btPreferredChannelMapForCellBandInfoType:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:gpsRadioActive:");
}

id objc_msgSend_btPreferredChannelMapFromLegacyWiFiConfigForCellBandInfoType_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_gpsRadioActive_maxChannelsToAvoidForCellOOB_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btPreferredChannelMapFromLegacyWiFiConfigForCellBandInfoType:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:gpsRadioActive:maxChannelsToAvoidForCellOOB:");
}

id objc_msgSend_btPreferredChannelMapHPCellularActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btPreferredChannelMapHPCellularActive");
}

id objc_msgSend_btPreferredChannelMapOnGpsRadioActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btPreferredChannelMapOnGpsRadioActive");
}

id objc_msgSend_btPreferredRole(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btPreferredRole");
}

id objc_msgSend_btRetransmissionRateRx(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btRetransmissionRateRx");
}

id objc_msgSend_btRetransmissionRateTx(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btRetransmissionRateTx");
}

id objc_msgSend_btTech(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btTech");
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleForClass:");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleIdentifier");
}

id objc_msgSend_bundleWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleWithPath:");
}

id objc_msgSend_bw(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bw");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bytes");
}

id objc_msgSend_cacheEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cacheEvent:");
}

id objc_msgSend_cacheTunerTransparentMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cacheTunerTransparentMessage:");
}

id objc_msgSend_cachedULBandwidth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedULBandwidth");
}

id objc_msgSend_cachedULCenterFreq(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedULCenterFreq");
}

id objc_msgSend_calculateNBDynamicPolicy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "calculateNBDynamicPolicy");
}

id objc_msgSend_calculatePhyRate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "calculatePhyRate");
}

id objc_msgSend_callActiveState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "callActiveState");
}

id objc_msgSend_callIdPrimaryLatteCall(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "callIdPrimaryLatteCall");
}

id objc_msgSend_callType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "callType");
}

id objc_msgSend_callTypeEnumCheck_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "callTypeEnumCheck:");
}

id objc_msgSend_calls(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "calls");
}

id objc_msgSend_cameraEnumCheck_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cameraEnumCheck:");
}

id objc_msgSend_cameraState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cameraState");
}

id objc_msgSend_can4G5GMeetApplicationRequirementsAppTypeWiFiCallingCallIdle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "can4G5GMeetApplicationRequirementsAppTypeWiFiCallingCallIdle:");
}

id objc_msgSend_canBTMeetIDSRequirement_::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canBTMeetIDSRequirement:::");
}

id objc_msgSend_canBTMeetTerminusRequirement(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canBTMeetTerminusRequirement");
}

id objc_msgSend_canCellularMeetApplicationRequirement___::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canCellularMeetApplicationRequirement:::::");
}

id objc_msgSend_canCellularMeetApplicationRequirementsAppTypeData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canCellularMeetApplicationRequirementsAppTypeData");
}

id objc_msgSend_canCellularMeetApplicationRequirementsAppTypeThumper_::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canCellularMeetApplicationRequirementsAppTypeThumper:::");
}

id objc_msgSend_canCellularMeetApplicationRequirementsAppTypeWiFiCalling_::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canCellularMeetApplicationRequirementsAppTypeWiFiCalling:::");
}

id objc_msgSend_canWiFiMeetActiveApplicationRequirements_::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canWiFiMeetActiveApplicationRequirements:::");
}

id objc_msgSend_canWiFiMeetActiveApplicationRequirements__::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canWiFiMeetActiveApplicationRequirements::::");
}

id objc_msgSend_canWiFiMeetIDSRequirement_::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canWiFiMeetIDSRequirement:::");
}

id objc_msgSend_canWiFiMeetIdleApplicationRequirements_::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canWiFiMeetIdleApplicationRequirements:::");
}

id objc_msgSend_canWiFiRadioMeetActiveApplicationRequirements_::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canWiFiRadioMeetActiveApplicationRequirements:::");
}

id objc_msgSend_canWiFiRadioMeetIDSRequirements::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canWiFiRadioMeetIDSRequirements::");
}

id objc_msgSend_canWiFiRadioMeetIdleApplicationRequirements_::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canWiFiRadioMeetIdleApplicationRequirements:::");
}

id objc_msgSend_canWiFiRadioMeetMinRequirements(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canWiFiRadioMeetMinRequirements");
}

id objc_msgSend_canWiFiRadioMeetTerminusRequirements_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canWiFiRadioMeetTerminusRequirements:");
}

id objc_msgSend_canWiFiRadioMeetTerminusRequirementsForCompanionLink_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canWiFiRadioMeetTerminusRequirementsForCompanionLink:");
}

id objc_msgSend_canWiFiTransportMeetActiveApplicationRequirements_::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canWiFiTransportMeetActiveApplicationRequirements:::");
}

id objc_msgSend_canWiFiTransportMeetIdleApplicationRequirements_::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canWiFiTransportMeetIdleApplicationRequirements:::");
}

id objc_msgSend_cancelAllNetworking(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelAllNetworking");
}

id objc_msgSend_catsAppBitmap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "catsAppBitmap");
}

id objc_msgSend_catsAppPriority(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "catsAppPriority");
}

id objc_msgSend_cbrsCoreAnalyticsMetricsSent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cbrsCoreAnalyticsMetricsSent");
}

id objc_msgSend_cbrsEnterRsrpMin(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cbrsEnterRsrpMin");
}

id objc_msgSend_cbrsEnterRsrpOffset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cbrsEnterRsrpOffset");
}

id objc_msgSend_cbrsEnterRsrqMin(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cbrsEnterRsrqMin");
}

id objc_msgSend_cbrsEnterRsrqOffset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cbrsEnterRsrqOffset");
}

id objc_msgSend_cbrsExitRsrpMin(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cbrsExitRsrpMin");
}

id objc_msgSend_cbrsExitRsrpOffset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cbrsExitRsrpOffset");
}

id objc_msgSend_cbrsExitRsrqMin(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cbrsExitRsrqMin");
}

id objc_msgSend_cbrsExitRsrqOffset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cbrsExitRsrqOffset");
}

id objc_msgSend_cdrxTDDEnabledChannels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cdrxTDDEnabledChannels");
}

id objc_msgSend_cellARFCN(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellARFCN");
}

id objc_msgSend_cellAgressorAntBitmap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellAgressorAntBitmap");
}

id objc_msgSend_cellAntBlkEnableIdx(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellAntBlkEnableIdx");
}

id objc_msgSend_cellAntBlkEnableIdx2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellAntBlkEnableIdx2");
}

id objc_msgSend_cellBand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellBand");
}

id objc_msgSend_cellBandInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellBandInfo");
}

id objc_msgSend_cellBandwidth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellBandwidth");
}

id objc_msgSend_cellBandwidthLimitForOOB(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellBandwidthLimitForOOB");
}

id objc_msgSend_cellFreqRangeWithIssueForCellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_wifiLowFreq_wifiHighFreq_cellTxIssueRange_cellRxIssueRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellFreqRangeWithIssueForCellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:wifiLowFreq:wifiHighFreq:cellTxIssueRange:cellRxIssueRange:");
}

id objc_msgSend_cellFrequencyLimitForOOB(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellFrequencyLimitForOOB");
}

id objc_msgSend_cellID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellID");
}

id objc_msgSend_cellTxPowerCap_16th_dBm(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellTxPowerCap_16th_dBm");
}

id objc_msgSend_cellTxPowerLimit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellTxPowerLimit");
}

id objc_msgSend_cellularAvailabilityStatusQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularAvailabilityStatusQueue");
}

id objc_msgSend_cellularCoexBand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularCoexBand");
}

id objc_msgSend_cellularController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularController");
}

id objc_msgSend_cellularDataEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularDataEnabled");
}

id objc_msgSend_cellularDataPossible(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularDataPossible");
}

id objc_msgSend_cellularMetricsEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularMetricsEnabled");
}

id objc_msgSend_cellularRc1PolicyManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularRc1PolicyManager");
}

id objc_msgSend_cellularStickinessThreaholdActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularStickinessThreaholdActive");
}

id objc_msgSend_cellularStickinessThreaholdIdle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularStickinessThreaholdIdle");
}

id objc_msgSend_cellularStickinessThreaholdStationary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularStickinessThreaholdStationary");
}

id objc_msgSend_cellularStickinessThreaholdStationaryActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularStickinessThreaholdStationaryActive");
}

id objc_msgSend_cellularULBandwidth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularULBandwidth");
}

id objc_msgSend_cellularULBandwidth2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularULBandwidth2");
}

id objc_msgSend_cellularULCenterFreq(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularULCenterFreq");
}

id objc_msgSend_cellularULCenterFreq2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularULCenterFreq2");
}

id objc_msgSend_cellularWCI2CoexPolicyBitmap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularWCI2CoexPolicyBitmap");
}

id objc_msgSend_centerFreq(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "centerFreq");
}

id objc_msgSend_channel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channel");
}

id objc_msgSend_channelBandwidthMHz(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channelBandwidthMHz");
}

id objc_msgSend_channelCenterFreqMHz(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channelCenterFreqMHz");
}

id objc_msgSend_channelsBlocklisted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channelsBlocklisted");
}

id objc_msgSend_channelsDisableOCL2Gand5G(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channelsDisableOCL2Gand5G");
}

id objc_msgSend_channelsDisableOCLWiFiEnh(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channelsDisableOCLWiFiEnh");
}

id objc_msgSend_channelsOCLDisabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channelsOCLDisabled");
}

id objc_msgSend_channelsToEnableType7MSG(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channelsToEnableType7MSG");
}

id objc_msgSend_channelsToEnableType7MSG2GWiFi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channelsToEnableType7MSG2GWiFi");
}

id objc_msgSend_channelsWCI2Enabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channelsWCI2Enabled");
}

id objc_msgSend_channelsWCI2Enabled2Gand5G(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channelsWCI2Enabled2Gand5G");
}

id objc_msgSend_channelsWCI2EnabledV2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channelsWCI2EnabledV2");
}

id objc_msgSend_channelsWCI2EnabledWiFiEnh(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channelsWCI2EnabledWiFiEnh");
}

id objc_msgSend_channelsWiFiType7MSG2Gand5G(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channelsWiFiType7MSG2Gand5G");
}

id objc_msgSend_channelsWiFiType7MSGWiFiEnh(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channelsWiFiType7MSGWiFiEnh");
}

id objc_msgSend_checkAndScheduleSpeedTest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkAndScheduleSpeedTest");
}

id objc_msgSend_checkBTRegulatoryInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkBTRegulatoryInfo");
}

id objc_msgSend_checkErrorMsgGmid_expectedGMID_API_Str_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkErrorMsgGmid:expectedGMID:API_Str:");
}

id objc_msgSend_checkModelFileExists(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkModelFileExists");
}

id objc_msgSend_checkResourceIsReachableAndReturnError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkResourceIsReachableAndReturnError:");
}

id objc_msgSend_checkStoreFileExists(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkStoreFileExists");
}

id objc_msgSend_checkUsingCoreData::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkUsingCoreData::");
}

id objc_msgSend_checkWiFiState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkWiFiState");
}

id objc_msgSend_clamshellState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clamshellState");
}

id objc_msgSend_clearAoSDeviceCounts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearAoSDeviceCounts");
}

id objc_msgSend_clientCBDeviceHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientCBDeviceHandler");
}

id objc_msgSend_clientLocationAuthorized(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientLocationAuthorized");
}

id objc_msgSend_clientLocationHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientLocationHandler");
}

id objc_msgSend_clientWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientWithIdentifier:");
}

id objc_msgSend_clkAlgnTDDFreqCheck(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clkAlgnTDDFreqCheck");
}

id objc_msgSend_closeFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "closeFile");
}

id objc_msgSend_coexBandCheckBandInfoType_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coexBandCheckBandInfoType:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:");
}

id objc_msgSend_coexSupported(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coexSupported");
}

id objc_msgSend_coexTechEnumCheck_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coexTechEnumCheck:");
}

id objc_msgSend_combinedRegistrationStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "combinedRegistrationStatus");
}

id objc_msgSend_commCenterAppDebouncingTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commCenterAppDebouncingTimer");
}

id objc_msgSend_commCenterBTlpmThreasholdBTProximity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commCenterBTlpmThreasholdBTProximity");
}

id objc_msgSend_commCenterBreadCrumProcTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commCenterBreadCrumProcTimer");
}

id objc_msgSend_commCenterPeriodicBreadCrumTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commCenterPeriodicBreadCrumTimer");
}

id objc_msgSend_commCenterStickinessThreasholdNotinWiFiProximity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commCenterStickinessThreasholdNotinWiFiProximity");
}

id objc_msgSend_commCenterStickinessThreasholdWiFiProximity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commCenterStickinessThreasholdWiFiProximity");
}

id objc_msgSend_commCenterThumperStickinessThreasholdNotinBTProximity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commCenterThumperStickinessThreasholdNotinBTProximity");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compare:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_configureAccReportMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureAccReportMode");
}

id objc_msgSend_configureAirplaneNotification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureAirplaneNotification");
}

id objc_msgSend_configureAllWCI2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureAllWCI2:");
}

id objc_msgSend_configureBTAntennaSelection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureBTAntennaSelection");
}

id objc_msgSend_configureBy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureBy:");
}

id objc_msgSend_configureCellularTimeShareConfigReqParamsWithCenterFreq_instance_bandwidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureCellularTimeShareConfigReqParamsWithCenterFreq:instance:bandwidth:");
}

id objc_msgSend_configureFaceTimeRTPMetricsReporting(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureFaceTimeRTPMetricsReporting");
}

id objc_msgSend_configureForLTECDRXWiFiTimeSharing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureForLTECDRXWiFiTimeSharing");
}

id objc_msgSend_configureIDSMetricsReporting(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureIDSMetricsReporting");
}

id objc_msgSend_configureRTPMetricsReporting(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureRTPMetricsReporting");
}

id objc_msgSend_configureSupportedPlatform(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureSupportedPlatform");
}

id objc_msgSend_configureTelephonyNotification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureTelephonyNotification");
}

id objc_msgSend_configureWiFiChannelMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureWiFiChannelMap");
}

id objc_msgSend_configureWiFiNotification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureWiFiNotification");
}

id objc_msgSend_configureWifiAntennaSelectionForCoex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureWifiAntennaSelectionForCoex");
}

id objc_msgSend_configuredMaxDLBW(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configuredMaxDLBW");
}

id objc_msgSend_configuredMaxULBW(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configuredMaxULBW");
}

id objc_msgSend_connectBaseband(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectBaseband");
}

id objc_msgSend_connectedAccessories(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectedAccessories");
}

id objc_msgSend_connectionID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectionID");
}

id objc_msgSend_constructXpcMessage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "constructXpcMessage");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsString:");
}

id objc_msgSend_contentsAtPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contentsAtPath:");
}

id objc_msgSend_contentsOfDirectoryAtPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contentsOfDirectoryAtPath:error:");
}

id objc_msgSend_context_getCapability_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "context:getCapability:completion:");
}

id objc_msgSend_controllerTxPowerLimit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "controllerTxPowerLimit");
}

id objc_msgSend_convertBandToEurBandId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "convertBandToEurBandId:");
}

id objc_msgSend_convertInternalCallType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "convertInternalCallType:");
}

id objc_msgSend_convertInternalCoexTech_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "convertInternalCoexTech:");
}

id objc_msgSend_convertToAriType_BtState_userCase_AriState_AriUseCase_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "convertToAriType_BtState:userCase:AriState:AriUseCase:");
}

id objc_msgSend_convertToAriType_FigaroState_userCase_AriState_AriUseCase_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "convertToAriType_FigaroState:userCase:AriState:AriUseCase:");
}

id objc_msgSend_convertToAriType_GnssState_userCase_AriState_AriUseCase_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "convertToAriType_GnssState:userCase:AriState:AriUseCase:");
}

id objc_msgSend_convertToAriType_UwbState_userCase_AriState_AriUseCase_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "convertToAriType_UwbState:userCase:AriState:AriUseCase:");
}

id objc_msgSend_convertToAriType_WiFiState_userCase_AriState_AriUseCase_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "convertToAriType_WiFiState:userCase:AriState:AriUseCase:");
}

id objc_msgSend_convertToHOAlgorithmType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "convertToHOAlgorithmType:");
}

id objc_msgSend_convetDataLqmToString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "convetDataLqmToString:");
}

id objc_msgSend_coordinate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coordinate");
}

id objc_msgSend_coordinatesToGeoHashWithLength_latitude_longitude_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coordinatesToGeoHashWithLength:latitude:longitude:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copy");
}

id objc_msgSend_copyCarrierBundleValue_key_bundleType_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyCarrierBundleValue:key:bundleType:error:");
}

id objc_msgSend_copyCarrierBundleValue_keyHierarchy_bundleType_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyCarrierBundleValue:keyHierarchy:bundleType:error:");
}

id objc_msgSend_copyIsDataAttached_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyIsDataAttached:completion:");
}

id objc_msgSend_copyItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyItemAtPath:toPath:error:");
}

id objc_msgSend_copyMobileCountryCode_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyMobileCountryCode:completion:");
}

id objc_msgSend_copyMobileNetworkCode_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyMobileNetworkCode:completion:");
}

id objc_msgSend_copyRadioAccessTechnology_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyRadioAccessTechnology:completion:");
}

id objc_msgSend_copyRegistrationStatus_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyRegistrationStatus:completion:");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countryCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countryCode");
}

id objc_msgSend_create(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "create");
}

id objc_msgSend_createAntennaBlockingClientXpcArray_client_id_convBand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createAntennaBlockingClientXpcArray:client_id:convBand:");
}

id objc_msgSend_createBTHCIExternalFrameConfigParams_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createBTHCIExternalFrameConfigParams:");
}

id objc_msgSend_createChannelParameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createChannelParameters:");
}

id objc_msgSend_createCommandHandlerForAriVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createCommandHandlerForAriVersion:");
}

id objc_msgSend_createConditionIdXpcElement_mav_antenna_block_client_id_cellular_band_cellular_frequency_upper_cellular_frequency_lower_cellular_ant_mitigation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createConditionIdXpcElement:mav_antenna_block_client_id:cellular_band:cellular_frequency_upper:cellular_frequency_lower:cellular_ant_mitigation:");
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createDynamicAntBlockingWifiClientMappingsWithCellAntBlkEnableIdx1_cellAntBlkEnableIdx2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createDynamicAntBlockingWifiClientMappingsWithCellAntBlkEnableIdx1:cellAntBlkEnableIdx2:");
}

id objc_msgSend_createDynamicRc1NbCoexPolicyByCellBandInfoType_CellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_RC1Channel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createDynamicRc1NbCoexPolicyByCellBandInfoType:CellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:RC1Channel:");
}

id objc_msgSend_createFaceIDPowerTableXpcElement_ant_target_power_dbm_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createFaceIDPowerTableXpcElement:ant:target_power_dbm:");
}

id objc_msgSend_createFaceIDpowerTablefromPlist(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createFaceIDpowerTablefromPlist");
}

id objc_msgSend_createFileAtPath_contents_attributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createFileAtPath:contents:attributes:");
}

id objc_msgSend_createHardcodedFcamClientMappings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createHardcodedFcamClientMappings");
}

id objc_msgSend_createHardcodedFidClientMappings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createHardcodedFidClientMappings");
}

id objc_msgSend_createHardcodedJpgRegClientMappings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createHardcodedJpgRegClientMappings");
}

id objc_msgSend_createHardcodedRc1ClientMappings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createHardcodedRc1ClientMappings");
}

id objc_msgSend_createHardcodedWifiClientMappings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createHardcodedWifiClientMappings");
}

id objc_msgSend_createIBIClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createIBIClient");
}

id objc_msgSend_createMLModel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createMLModel");
}

id objc_msgSend_createMessageWithMsgId_withArgs_withSubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createMessageWithMsgId:withArgs:withSubId:");
}

id objc_msgSend_createNetworkSymptomsFeed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createNetworkSymptomsFeed");
}

id objc_msgSend_createPowerTableXpcElement_ant_target_power_dbm_condition_id_entry_num_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createPowerTableXpcElement:ant:target_power_dbm:condition_id:entry_num:");
}

id objc_msgSend_createQMIClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createQMIClient");
}

id objc_msgSend_createSubframePowerBackOffTableXpcElement_condition_id_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createSubframePowerBackOffTableXpcElement:condition_id:");
}

id objc_msgSend_createSymptomsService(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createSymptomsService");
}

id objc_msgSend_createWrmSdmLocationManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createWrmSdmLocationManager");
}

id objc_msgSend_createXpcClientObjectWithClientId_blockVoice_timeMultipler_antennaBandMappings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createXpcClientObjectWithClientId:blockVoice:timeMultipler:antennaBandMappings:");
}

id objc_msgSend_ctServiceType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ctServiceType");
}

id objc_msgSend_cumRxPktLoss(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cumRxPktLoss");
}

id objc_msgSend_cumulativeNominalJitterBufferDelay(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cumulativeNominalJitterBufferDelay");
}

id objc_msgSend_currCBRSCellFound(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currCBRSCellFound");
}

id objc_msgSend_currNRCellFound(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currNRCellFound");
}

id objc_msgSend_currentBitRate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentBitRate");
}

id objc_msgSend_currentCallTargetBitRate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentCallTargetBitRate");
}

id objc_msgSend_currentEstimates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentEstimates");
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentHandler");
}

id objc_msgSend_currentHarvestedCellTypeFR2Capable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentHarvestedCellTypeFR2Capable");
}

id objc_msgSend_currentNRCellType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentNRCellType");
}

id objc_msgSend_currentRunLoop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentRunLoop");
}

id objc_msgSend_currentThread(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentThread");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "data");
}

id objc_msgSend_dataAttachedWithCellularNetwork(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataAttachedWithCellularNetwork");
}

id objc_msgSend_dataAttachedWithCellularNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataAttachedWithCellularNetwork:");
}

id objc_msgSend_dataBW(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataBW");
}

id objc_msgSend_dataBearerTechnology(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataBearerTechnology");
}

id objc_msgSend_dataBtMovingAvgAlphaDenum(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataBtMovingAvgAlphaDenum");
}

id objc_msgSend_dataBtStickinessTimeThreshMs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataBtStickinessTimeThreshMs");
}

id objc_msgSend_dataEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataEnabled");
}

id objc_msgSend_dataIndicator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataIndicator");
}

id objc_msgSend_dataLqmState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataLqmState");
}

id objc_msgSend_dataMinBtRssiTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataMinBtRssiTh0");
}

id objc_msgSend_dataMinBtRssiTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataMinBtRssiTh1");
}

id objc_msgSend_dataMinWifiBeaconPerTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataMinWifiBeaconPerTh0");
}

id objc_msgSend_dataMinWifiRssiTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataMinWifiRssiTh0");
}

id objc_msgSend_dataMinWifiRssiTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataMinWifiRssiTh1");
}

id objc_msgSend_dataMinWifiSnrTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataMinWifiSnrTh0");
}

id objc_msgSend_dataMinWifiSnrTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataMinWifiSnrTh1");
}

id objc_msgSend_dataModeLTE(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataModeLTE");
}

id objc_msgSend_dataPreferredSlot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataPreferredSlot");
}

id objc_msgSend_dataPreferredSlotOnCBRS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataPreferredSlotOnCBRS");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWifiMinBeaconCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWifiMinBeaconCount");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithCapacity:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "date");
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_deactivateMobilityContexts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deactivateMobilityContexts");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultConfigurationCellular(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultConfigurationCellular");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_deleteProximityiRATClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteProximityiRATClient:");
}

id objc_msgSend_deleteiRATClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteiRATClient:");
}

id objc_msgSend_deltaVideoErasure(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deltaVideoErasure");
}

id objc_msgSend_deploymentId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deploymentId");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "description");
}

id objc_msgSend_detectedFR1CellBW(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "detectedFR1CellBW");
}

id objc_msgSend_detectedFR1CellCountLocDB(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "detectedFR1CellCountLocDB");
}

id objc_msgSend_detectedFR2CellCountLocDB(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "detectedFR2CellCountLocDB");
}

id objc_msgSend_determineifSABWCriteriaMet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "determineifSABWCriteriaMet");
}

id objc_msgSend_deviceFlags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceFlags");
}

id objc_msgSend_deviceICheapFR2Coverage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceICheapFR2Coverage");
}

id objc_msgSend_deviceICheapFR2CoverageSync(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceICheapFR2CoverageSync");
}

id objc_msgSend_deviceIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceIdentifier");
}

id objc_msgSend_deviceInRoaming(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceInRoaming");
}

id objc_msgSend_deviceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceName");
}

id objc_msgSend_devices(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "devices");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryRepresentation");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObjects:forKeys:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_didWiFiDeviceReset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didWiFiDeviceReset");
}

id objc_msgSend_differenceFromArray_withOptions_usingEquivalenceTest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "differenceFromArray:withOptions:usingEquivalenceTest:");
}

id objc_msgSend_disableAntennaSharedByBluetooth_andReassociate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableAntennaSharedByBluetooth:andReassociate:");
}

id objc_msgSend_disableCoexStatsMetricsAt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableCoexStatsMetricsAt:");
}

id objc_msgSend_disableICEClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableICEClient");
}

id objc_msgSend_disableLQMUpdate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableLQMUpdate");
}

id objc_msgSend_disableQMIClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableQMIClient");
}

id objc_msgSend_disconnectedReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disconnectedReason");
}

id objc_msgSend_dispatchCarplayInfotoBT_reason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchCarplayInfotoBT:reason:");
}

id objc_msgSend_dispatchContentionFreeWiFiNetworkToRC2_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchContentionFreeWiFiNetworkToRC2:count:");
}

id objc_msgSend_displayIKEMetrics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "displayIKEMetrics:");
}

id objc_msgSend_displayWatchpointHit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "displayWatchpointHit:");
}

id objc_msgSend_distantFuture(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "distantFuture");
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "distantPast");
}

id objc_msgSend_dlBandwidth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dlBandwidth");
}

id objc_msgSend_dlBandwidth2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dlBandwidth2");
}

id objc_msgSend_dlCPConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dlCPConfig");
}

id objc_msgSend_dlCenterFreq(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dlCenterFreq");
}

id objc_msgSend_dlCenterFreq2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dlCenterFreq2");
}

id objc_msgSend_doesIRATClientSubscriptionContextExist(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doesIRATClientSubscriptionContextExist");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_downlinkHighFreq_Hz(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downlinkHighFreq_Hz");
}

id objc_msgSend_downlinkLowFreq_Hz(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downlinkLowFreq_Hz");
}

id objc_msgSend_downloadLevelsForFactors_withNamespace_queue_options_progress_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downloadLevelsForFactors:withNamespace:queue:options:progress:completion:");
}

id objc_msgSend_downloadSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downloadSize");
}

id objc_msgSend_downloadWiFiBTCoexProfiles(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "downloadWiFiBTCoexProfiles");
}

id objc_msgSend_dpdFailureDetected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dpdFailureDetected");
}

id objc_msgSend_dumpiRATCellToWifi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dumpiRATCellToWifi");
}

id objc_msgSend_dumpiRATWifiToCell(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dumpiRATWifiToCell");
}

id objc_msgSend_dynamicAntBlkingBand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dynamicAntBlkingBand");
}

id objc_msgSend_dynamicCellAntBlkEnableIdx1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dynamicCellAntBlkEnableIdx1");
}

id objc_msgSend_dynamicCellAntBlkEnableIdx2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dynamicCellAntBlkEnableIdx2");
}

id objc_msgSend_eaConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eaConnection");
}

id objc_msgSend_enableLQMUpdate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableLQMUpdate");
}

id objc_msgSend_enableWifiChannelAvoidance(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableWifiChannelAvoidance");
}

id objc_msgSend_enableWifiLaaCoexMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableWifiLaaCoexMode");
}

id objc_msgSend_enableiRATManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableiRATManager");
}

id objc_msgSend_endMonitoring(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endMonitoring");
}

id objc_msgSend_enhancedLinkQuality(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enhancedLinkQuality");
}

id objc_msgSend_enterTestMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enterTestMode");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_erasuresInSpeech(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "erasuresInSpeech");
}

id objc_msgSend_estimatedBWDL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "estimatedBWDL");
}

id objc_msgSend_estimatedBWDLConf(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "estimatedBWDLConf");
}

id objc_msgSend_estimatedBWUL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "estimatedBWUL");
}

id objc_msgSend_estimatedBWULConf(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "estimatedBWULConf");
}

id objc_msgSend_evalExitForceOutranking(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evalExitForceOutranking");
}

id objc_msgSend_evalSAStateSlice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evalSAStateSlice");
}

id objc_msgSend_evaluateActiveCallQuality(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateActiveCallQuality");
}

id objc_msgSend_evaluateBTWiFiLink(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateBTWiFiLink");
}

id objc_msgSend_evaluateBTWiFiLinkForTerminus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateBTWiFiLinkForTerminus");
}

id objc_msgSend_evaluateBackHaulLink(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateBackHaulLink");
}

id objc_msgSend_evaluateCbrsInDualSimMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateCbrsInDualSimMode:");
}

id objc_msgSend_evaluateCbrsInSingleSimMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateCbrsInSingleSimMode");
}

id objc_msgSend_evaluateCellAleratedState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateCellAleratedState:");
}

id objc_msgSend_evaluateCellularBandwidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateCellularBandwidth:");
}

id objc_msgSend_evaluateCellularLinkForWiFiCallingCellPreferredPolicy::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateCellularLinkForWiFiCallingCellPreferredPolicy::");
}

id objc_msgSend_evaluateCellularLinkForWiFiCallingIMSPreferredPolicy::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateCellularLinkForWiFiCallingIMSPreferredPolicy::");
}

id objc_msgSend_evaluateCellularLinkForWiFiCallingWiFiPreferredPolicy::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateCellularLinkForWiFiCallingWiFiPreferredPolicy::");
}

id objc_msgSend_evaluateCellularScore_currnetConf_score_conf_evalMode_outrankExit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateCellularScore:currnetConf:score:conf:evalMode:outrankExit:");
}

id objc_msgSend_evaluateCellularScorePrivateNw_currnetConf_score_conf_evalMode_outrankExit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateCellularScorePrivateNw:currnetConf:score:conf:evalMode:outrankExit:");
}

id objc_msgSend_evaluateDLThroughput(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateDLThroughput");
}

id objc_msgSend_evaluateGen9rFemConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateGen9rFemConfig");
}

id objc_msgSend_evaluateHandover(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateHandover");
}

id objc_msgSend_evaluateLink_::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateLink:::");
}

id objc_msgSend_evaluateLink__::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateLink::::");
}

id objc_msgSend_evaluateLink____::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateLink::::::");
}

id objc_msgSend_evaluateLinkNonWiFiPreferred___::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateLinkNonWiFiPreferred:::::");
}

id objc_msgSend_evaluateLinkWiFiPreferred__::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateLinkWiFiPreferred::::");
}

id objc_msgSend_evaluateSDMBWChangeNotification_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateSDMBWChangeNotification:");
}

id objc_msgSend_evaluateULCARestrictions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateULCARestrictions");
}

id objc_msgSend_evaluateULThroughput(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateULThroughput");
}

id objc_msgSend_evaluateWiFiAleratedState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateWiFiAleratedState:");
}

id objc_msgSend_evaluateWiFiBandwidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateWiFiBandwidth:");
}

id objc_msgSend_evaluateWiFiLink(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateWiFiLink");
}

id objc_msgSend_evaluateWiFiVersusCell(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateWiFiVersusCell");
}

id objc_msgSend_executeFetchRequest_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "executeFetchRequest:error:");
}

id objc_msgSend_existingContexts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "existingContexts");
}

id objc_msgSend_existingSessions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "existingSessions");
}

id objc_msgSend_exitSaDepriotizationEval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "exitSaDepriotizationEval");
}

id objc_msgSend_exitTestMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "exitTestMode");
}

id objc_msgSend_expectedThroughputVIBE(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "expectedThroughputVIBE");
}

id objc_msgSend_experimentId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "experimentId");
}

id objc_msgSend_experimentIdentifiersWithNamespaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "experimentIdentifiersWithNamespaceName:");
}

id objc_msgSend_extAccessory(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extAccessory");
}

id objc_msgSend_extractPolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extractPolicy:");
}

id objc_msgSend_faceTimeAleratedModeCCATh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "faceTimeAleratedModeCCATh0");
}

id objc_msgSend_faceTimeAleratedModeCCATh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "faceTimeAleratedModeCCATh1");
}

id objc_msgSend_faceTimeAleratedModeRssiTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "faceTimeAleratedModeRssiTh0");
}

id objc_msgSend_faceTimeAleratedModeRssiTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "faceTimeAleratedModeRssiTh1");
}

id objc_msgSend_faceTimeAleratedModeStationCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "faceTimeAleratedModeStationCount");
}

id objc_msgSend_faceTimeAleratedModeTxPer0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "faceTimeAleratedModeTxPer0");
}

id objc_msgSend_faceTimeAleratedModeTxPer1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "faceTimeAleratedModeTxPer1");
}

id objc_msgSend_faceTimeAleratedModeVideoErasures(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "faceTimeAleratedModeVideoErasures");
}

id objc_msgSend_faceTimeCellularStickinessThreaholdActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "faceTimeCellularStickinessThreaholdActive");
}

id objc_msgSend_faceTimeEnhancedVideoMetricsEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "faceTimeEnhancedVideoMetricsEnabled");
}

id objc_msgSend_faceTimeHandoverAvgRxPktLossThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "faceTimeHandoverAvgRxPktLossThreshold");
}

id objc_msgSend_faceTimeHandoverRxPktLossThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "faceTimeHandoverRxPktLossThreshold");
}

id objc_msgSend_faceTimeMinActiveWiFiAvgTxPktLossRateTh(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "faceTimeMinActiveWiFiAvgTxPktLossRateTh");
}

id objc_msgSend_faceTimeMinActiveWiFiRssiTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "faceTimeMinActiveWiFiRssiTh0");
}

id objc_msgSend_faceTimeMinActiveWiFiRssiTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "faceTimeMinActiveWiFiRssiTh1");
}

id objc_msgSend_faceTimeMovingAverageWindow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "faceTimeMovingAverageWindow");
}

id objc_msgSend_faceTimeVideoPacketLoss(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "faceTimeVideoPacketLoss");
}

id objc_msgSend_fastChargingHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fastChargingHandler:");
}

id objc_msgSend_fastChargingHystersisTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fastChargingHystersisTimer");
}

id objc_msgSend_featureValueForName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "featureValueForName:");
}

id objc_msgSend_featureValueWithDouble_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "featureValueWithDouble:");
}

id objc_msgSend_featuresAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "featuresAtIndex:");
}

id objc_msgSend_feedAWDCallEndStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "feedAWDCallEndStats");
}

id objc_msgSend_feedAWDCoreWiFiMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "feedAWDCoreWiFiMetrics");
}

id objc_msgSend_feedAWDMetricsCellularStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "feedAWDMetricsCellularStats");
}

id objc_msgSend_feedAWDMetricsCellularStatsWithUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "feedAWDMetricsCellularStatsWithUUID:");
}

id objc_msgSend_feedAWDMetricsWiFiStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "feedAWDMetricsWiFiStats");
}

id objc_msgSend_feedAWDRadioStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "feedAWDRadioStats");
}

id objc_msgSend_feedAWDStreamingStats_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "feedAWDStreamingStats:");
}

id objc_msgSend_fetchDataForLocation_type_responseQueue_responseBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchDataForLocation:type:responseQueue:responseBlock:");
}

id objc_msgSend_fetchLegacyRatFrequency_freqInfoXpc_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchLegacyRatFrequency:freqInfoXpc:");
}

id objc_msgSend_fetchLteNrFrequency_freqInfoXpc_carrierIdXpc_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchLteNrFrequency:freqInfoXpc:carrierIdXpc:");
}

id objc_msgSend_fetchLtePccFrequency_pccUplinkFreq_pccUplinkBw_pccDownlinkFreq_pccDownlinkBw_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchLtePccFrequency:pccUplinkFreq:pccUplinkBw:pccDownlinkFreq:pccDownlinkBw:");
}

id objc_msgSend_fetchObjectsForCellID_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchObjectsForCellID:completionHandler:");
}

id objc_msgSend_fetchRequestWithEntityName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchRequestWithEntityName:");
}

id objc_msgSend_fetchSmartDataModeDataForLocation____::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchSmartDataModeDataForLocation::::::");
}

id objc_msgSend_fetchSmartDataModeDataForLocation_mcc_mnc_responseQueue_responseBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchSmartDataModeDataForLocation:mcc:mnc:responseQueue:responseBlock:");
}

id objc_msgSend_fetchWRMdebugPlistForceRTG(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchWRMdebugPlistForceRTG");
}

id objc_msgSend_fetchWRMdebugPlistForceTDD(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchWRMdebugPlistForceTDD");
}

id objc_msgSend_fetchWrmSdmLocationDbInfoWithMcc_Mnc_CellId_ForSim_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchWrmSdmLocationDbInfoWithMcc:Mnc:CellId:ForSim:");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileHandleForWritingAtPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileHandleForWritingAtPath:");
}

id objc_msgSend_fileSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileSize");
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_fileValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileValue");
}

id objc_msgSend_filterDevices_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filterDevices:");
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filteredArrayUsingPredicate:");
}

id objc_msgSend_findAllCellRc1CoexIssueByCellBandInfoType_CellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_RC1Channel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findAllCellRc1CoexIssueByCellBandInfoType:CellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:RC1Channel:");
}

id objc_msgSend_findCellRc1CoexIssueByCellBandInfoType_CellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_RC1Channel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findCellRc1CoexIssueByCellBandInfoType:CellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:RC1Channel:");
}

id objc_msgSend_findIssueBandForBandInfoType_cellDlHighFreq_cellDlLowFreq_cellUlHighFreq_cellUlLowFreq_wifiBand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findIssueBandForBandInfoType:cellDlHighFreq:cellDlLowFreq:cellUlHighFreq:cellUlLowFreq:wifiBand:");
}

id objc_msgSend_findRc1NbCoexIssueChannelByCellBandInfoType_CellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_RC1Channel_uwbNbIssueChannelBegin_uwbNbIssueChannelEnd_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findRc1NbCoexIssueChannelByCellBandInfoType:CellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:RC1Channel:uwbNbIssueChannelBegin:uwbNbIssueChannelEnd:");
}

id objc_msgSend_findWiFiAntennaOrCellTxPowerConstraintCoexIssueByCellBandInfoType_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_wifiChannel_gpsRadioActive_wifiAntennaConstraint_cellTxPowerConstraint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findWiFiAntennaOrCellTxPowerConstraintCoexIssueByCellBandInfoType:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:wifiChannel:gpsRadioActive:wifiAntennaConstraint:cellTxPowerConstraint:");
}

id objc_msgSend_findWiFiAntennaOrCellTxPowerConstraintWiFiEnhCoexIssueByCellBandInfoType_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_wifiChannel_wifiCenterFreq_wifiBandwidth_gpsRadioActive_wifiAntennaConstraint_cellTxPowerConstraint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findWiFiAntennaOrCellTxPowerConstraintWiFiEnhCoexIssueByCellBandInfoType:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:wifiChannel:wifiCenterFreq:wifiBandwidth:gpsRadioActive:wifiAntennaConstraint:cellTxPowerConstraint:");
}

id objc_msgSend_findWiFiVictimCoexIssueByCellBandInfoType_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findWiFiVictimCoexIssueByCellBandInfoType:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "firstObject");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "floatValue");
}

id objc_msgSend_forceActiveModeEval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceActiveModeEval:");
}

id objc_msgSend_forceCopresence_scanGrantDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceCopresence:scanGrantDuration:");
}

id objc_msgSend_forceWiFiBTCoexToTDD(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceWiFiBTCoexToTDD");
}

id objc_msgSend_frameConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "frameConfiguration");
}

id objc_msgSend_freqAscendSort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "freqAscendSort:");
}

id objc_msgSend_frequencyBand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "frequencyBand");
}

id objc_msgSend_frequencyToolAddCellularFreq_bandwidth_freqType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "frequencyToolAddCellularFreq:bandwidth:freqType:");
}

id objc_msgSend_frequencyToolAddClientFreq_centerFreq_bandwidth_celluarCarrierType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "frequencyToolAddClientFreq:centerFreq:bandwidth:celluarCarrierType:");
}

id objc_msgSend_frequencyToolClearFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "frequencyToolClearFreq:");
}

id objc_msgSend_frequencyToolGetJasperResult_generalSacResult_client_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "frequencyToolGetJasperResult:generalSacResult:client:");
}

id objc_msgSend_frequencyToolRemoveFreq_centerFreq_bandwidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "frequencyToolRemoveFreq:centerFreq:bandwidth:");
}

id objc_msgSend_ftController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ftController");
}

id objc_msgSend_fullScorecardFor_options_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fullScorecardFor:options:reply:");
}

id objc_msgSend_generateDynamicPolicyForCoexIssueForCellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_rc1NbIssueChannelBegin_rc1NbIssueChannelEnd_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generateDynamicPolicyForCoexIssueForCellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:rc1NbIssueChannelBegin:rc1NbIssueChannelEnd:");
}

id objc_msgSend_genre(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "genre");
}

id objc_msgSend_genreIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "genreIdentifier");
}

id objc_msgSend_get2GHzSub15msAudioDevicesConnected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "get2GHzSub15msAudioDevicesConnected");
}

id objc_msgSend_get2GHzSub15msNonSCOConnected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "get2GHzSub15msNonSCOConnected");
}

id objc_msgSend_get_subId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "get:subId:");
}

id objc_msgSend_get_value_BOOL_subId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "get:value_BOOL:subId:");
}

id objc_msgSend_get_value_double_subId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "get:value_double:subId:");
}

id objc_msgSend_get_value_uint64_subId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "get:value_uint64:subId:");
}

id objc_msgSend_getAPMHandle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAPMHandle");
}

id objc_msgSend_getAVConferenceController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAVConferenceController");
}

id objc_msgSend_getAWDService(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAWDService");
}

id objc_msgSend_getActiveSlot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getActiveSlot");
}

id objc_msgSend_getActiveULCAConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getActiveULCAConfig");
}

id objc_msgSend_getAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAddress");
}

id objc_msgSend_getAdjustedBeaconPer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAdjustedBeaconPer");
}

id objc_msgSend_getAgeOfMetricCurrInstant(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAgeOfMetricCurrInstant");
}

id objc_msgSend_getAirPlaneMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAirPlaneMode");
}

id objc_msgSend_getAllDevicesWithArchivedDevices(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAllDevicesWithArchivedDevices");
}

id objc_msgSend_getAntBlockConfigGnssImdClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAntBlockConfigGnssImdClient");
}

id objc_msgSend_getAntBlockConfigXpcMsgOnClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAntBlockConfigXpcMsgOnClient:");
}

id objc_msgSend_getAnticipiatedTxPer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAnticipiatedTxPer");
}

id objc_msgSend_getAnticipiatedTxPerValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAnticipiatedTxPerValid");
}

id objc_msgSend_getAny2GHzBTDevicesConnected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAny2GHzBTDevicesConnected");
}

id objc_msgSend_getAny5GHzBTDevicesConnected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAny5GHzBTDevicesConnected");
}

id objc_msgSend_getAnyAoSLinkActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAnyAoSLinkActive");
}

id objc_msgSend_getApplicationType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getApplicationType");
}

id objc_msgSend_getAvgRxPDUSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAvgRxPDUSize");
}

id objc_msgSend_getAvgRxPDUSizeMovAvg(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAvgRxPDUSizeMovAvg");
}

id objc_msgSend_getAvgTxPDUSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAvgTxPDUSize");
}

id objc_msgSend_getAvgTxPDUSizeMovAvg(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAvgTxPDUSizeMovAvg");
}

id objc_msgSend_getBEDecision(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBEDecision");
}

id objc_msgSend_getBTLQMScore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBTLQMScore");
}

id objc_msgSend_getBTRole(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBTRole");
}

id objc_msgSend_getBTState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBTState");
}

id objc_msgSend_getBadVideoCounter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBadVideoCounter");
}

id objc_msgSend_getBadVoiceCounter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBadVoiceCounter");
}

id objc_msgSend_getBand40BUlBw(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBand40BUlBw");
}

id objc_msgSend_getBand40BUlCenterFreq(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBand40BUlCenterFreq");
}

id objc_msgSend_getBand41A1UlBw(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBand41A1UlBw");
}

id objc_msgSend_getBand41A1UlCenterFreq(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBand41A1UlCenterFreq");
}

id objc_msgSend_getBand41A2UlBw(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBand41A2UlBw");
}

id objc_msgSend_getBand41A2UlCenterFreq(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBand41A2UlCenterFreq");
}

id objc_msgSend_getBandInfoDataSlot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBandInfoDataSlot");
}

id objc_msgSend_getBandInfoOnSlot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBandInfoOnSlot:");
}

id objc_msgSend_getBandWidthDataSlot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBandWidthDataSlot");
}

id objc_msgSend_getBandwidth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBandwidth");
}

id objc_msgSend_getBeaconPer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBeaconPer");
}

id objc_msgSend_getBtActivePhy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBtActivePhy");
}

id objc_msgSend_getBtBlockedAntennaForPencilCoexByPlatform(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBtBlockedAntennaForPencilCoexByPlatform");
}

id objc_msgSend_getBtRxPer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBtRxPer");
}

id objc_msgSend_getBtTxPer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBtTxPer");
}

id objc_msgSend_getBufferedAppType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBufferedAppType");
}

id objc_msgSend_getBufferedLinkType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBufferedLinkType");
}

id objc_msgSend_getBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBytes:length:");
}

id objc_msgSend_getBytes_range_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBytes:range:");
}

id objc_msgSend_getCCA(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCCA");
}

id objc_msgSend_getCTConnectionReference(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCTConnectionReference");
}

id objc_msgSend_getCTDataIndictor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCTDataIndictor");
}

id objc_msgSend_getCTDataIndictor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCTDataIndictor:");
}

id objc_msgSend_getCTService(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCTService");
}

id objc_msgSend_getCalculatedAvailableRxPhyBandwidth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCalculatedAvailableRxPhyBandwidth");
}

id objc_msgSend_getCalculatedAvailableTxPhyBandwidth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCalculatedAvailableTxPhyBandwidth");
}

id objc_msgSend_getCallState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCallState");
}

id objc_msgSend_getCarPlayScanRelaxReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCarPlayScanRelaxReason");
}

id objc_msgSend_getCellConfiguredBandwidthThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCellConfiguredBandwidthThreshold");
}

id objc_msgSend_getCellDynamicAntBlockingIndex_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_wifiChannel_pissueBandMatchAntIdx_cellAntBlkEnableIdx1_cellAntBlkEnableIdx2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCellDynamicAntBlockingIndex:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:wifiChannel:pissueBandMatchAntIdx:cellAntBlkEnableIdx1:cellAntBlkEnableIdx2:");
}

id objc_msgSend_getCellularDataLQM(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCellularDataLQM");
}

id objc_msgSend_getCellularDataLQM_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCellularDataLQM:");
}

id objc_msgSend_getCellularLaaMeasInfo_SubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCellularLaaMeasInfo:SubId:");
}

id objc_msgSend_getCellularNetworkConfig_SubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCellularNetworkConfig:SubId:");
}

id objc_msgSend_getChannel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getChannel");
}

id objc_msgSend_getChannelActivity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getChannelActivity");
}

id objc_msgSend_getChannelType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getChannelType");
}

id objc_msgSend_getChannelUtlization(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getChannelUtlization");
}

id objc_msgSend_getClientQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getClientQueue");
}

id objc_msgSend_getCoexTechForPolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCoexTechForPolicy:");
}

id objc_msgSend_getCombinedUplinkFreqRange(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCombinedUplinkFreqRange");
}

id objc_msgSend_getConfiguredMaxBW(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getConfiguredMaxBW");
}

id objc_msgSend_getConnectedLinkType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getConnectedLinkType");
}

id objc_msgSend_getConnectedStationCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getConnectedStationCount");
}

id objc_msgSend_getConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getConnection");
}

id objc_msgSend_getController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getController");
}

id objc_msgSend_getControllerForProcessId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getControllerForProcessId:");
}

id objc_msgSend_getControllerOfId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getControllerOfId:");
}

id objc_msgSend_getCumulativeFwTxPer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCumulativeFwTxPer");
}

id objc_msgSend_getCumulativeTxPer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCumulativeTxPer");
}

id objc_msgSend_getCurrentAudioErasure(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentAudioErasure");
}

id objc_msgSend_getCurrentCTMetrics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentCTMetrics:");
}

id objc_msgSend_getCurrentCellularAvailabilityStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentCellularAvailabilityStatus");
}

id objc_msgSend_getCurrentDataSubscriptionContextSync_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentDataSubscriptionContextSync:");
}

id objc_msgSend_getCurrentEnhancedCTMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentEnhancedCTMetrics");
}

id objc_msgSend_getCurrentMovAvgSignalBars(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentMovAvgSignalBars");
}

id objc_msgSend_getCurrentNRStatusDataSlot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentNRStatusDataSlot");
}

id objc_msgSend_getCurrentSignalBars(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentSignalBars");
}

id objc_msgSend_getCurrentSignalBars_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentSignalBars:");
}

id objc_msgSend_getDataForCoreAnalytics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDataForCoreAnalytics");
}

id objc_msgSend_getDataSlotLoad(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDataSlotLoad");
}

id objc_msgSend_getDataStallState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDataStallState:");
}

id objc_msgSend_getDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDate");
}

id objc_msgSend_getDeltaIPStats__::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDeltaIPStats::::");
}

id objc_msgSend_getDeltaTimeSinceLastCellularRecommendation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDeltaTimeSinceLastCellularRecommendation");
}

id objc_msgSend_getDuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDuration");
}

id objc_msgSend_getDurationInWiFi2G(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDurationInWiFi2G");
}

id objc_msgSend_getEnhancedVoiceLinkQualityMetric_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getEnhancedVoiceLinkQualityMetric:completion:");
}

id objc_msgSend_getEnumerationString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getEnumerationString");
}

id objc_msgSend_getEstimatedAvailableRxPhyBandwidth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getEstimatedAvailableRxPhyBandwidth");
}

id objc_msgSend_getEstimatedWiFiBandwidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getEstimatedWiFiBandwidth:");
}

id objc_msgSend_getFR2Status(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getFR2Status");
}

id objc_msgSend_getFTState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getFTState");
}

id objc_msgSend_getFaceIDConfigDictionarySKUBased_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getFaceIDConfigDictionarySKUBased:");
}

id objc_msgSend_getFaceIDPlatformPlistName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getFaceIDPlatformPlistName");
}

id objc_msgSend_getFaceTimeCallConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getFaceTimeCallConfig");
}

id objc_msgSend_getFwTxPer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getFwTxPer");
}

id objc_msgSend_getGoodVideoCounter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getGoodVideoCounter");
}

id objc_msgSend_getGoodVoiceCounter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getGoodVoiceCounter");
}

id objc_msgSend_getHFBTAFHCoexIssuesFromIssueBand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getHFBTAFHCoexIssuesFromIssueBand:");
}

id objc_msgSend_getHandoverAlgorithmType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getHandoverAlgorithmType:");
}

id objc_msgSend_getHandoverContexts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getHandoverContexts");
}

id objc_msgSend_getHandoverReasonType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getHandoverReasonType");
}

id objc_msgSend_getIWLANServiceType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getIWLANServiceType");
}

id objc_msgSend_getIbiClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getIbiClient");
}

id objc_msgSend_getInitialIPStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getInitialIPStats");
}

id objc_msgSend_getInsertObjIndex_fromOther_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getInsertObjIndex:fromOther:");
}

id objc_msgSend_getInternetInterfaceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getInternetInterfaceName");
}

id objc_msgSend_getInvalidCounter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getInvalidCounter");
}

id objc_msgSend_getL3Bandwidth::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getL3Bandwidth::");
}

id objc_msgSend_getLPMState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLPMState");
}

id objc_msgSend_getLTECoexMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLTECoexMetrics");
}

id objc_msgSend_getLTErFemFrequencyRanges_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLTErFemFrequencyRanges:");
}

id objc_msgSend_getLastKnownLatitude(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLastKnownLatitude");
}

id objc_msgSend_getLastKnownLocationTimestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLastKnownLocationTimestamp");
}

id objc_msgSend_getLastKnownLongitude(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLastKnownLongitude");
}

id objc_msgSend_getLeConnDuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLeConnDuration");
}

id objc_msgSend_getLeConnDutyCycle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLeConnDutyCycle");
}

id objc_msgSend_getLeConnReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLeConnReason");
}

id objc_msgSend_getLeDiscoveryScanState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLeDiscoveryScanState");
}

id objc_msgSend_getLeDiscoveryScanUseCase(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLeDiscoveryScanUseCase");
}

id objc_msgSend_getLeastCongestedWifiParam(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLeastCongestedWifiParam");
}

id objc_msgSend_getLifeTimeVI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLifeTimeVI");
}

id objc_msgSend_getLifeTimeVO(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLifeTimeVO");
}

id objc_msgSend_getLocationDBFR1Count(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLocationDBFR1Count");
}

id objc_msgSend_getLocationDBFR2Count(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLocationDBFR2Count");
}

id objc_msgSend_getLogToFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLogToFile");
}

id objc_msgSend_getLteVoiceLQM(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLteVoiceLQM");
}

id objc_msgSend_getLteVoiceLQM_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLteVoiceLQM:");
}

id objc_msgSend_getMLPredictedCellBW(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMLPredictedCellBW");
}

id objc_msgSend_getMLPredictedWiFiBW(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMLPredictedWiFiBW");
}

id objc_msgSend_getMappedApplicationType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMappedApplicationType");
}

id objc_msgSend_getMavClientIdforAntClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMavClientIdforAntClient:");
}

id objc_msgSend_getMaxDataRate_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMaxDataRate:completion:");
}

id objc_msgSend_getMaxEvalBW(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMaxEvalBW");
}

id objc_msgSend_getMaxMovEvalBW(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMaxMovEvalBW");
}

id objc_msgSend_getMeasureBWDataSlot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMeasureBWDataSlot");
}

id objc_msgSend_getMinEvalBW(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMinEvalBW");
}

id objc_msgSend_getMinMaxAvailableRxBandwidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMinMaxAvailableRxBandwidth:");
}

id objc_msgSend_getMinMovEvalBW(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMinMovEvalBW");
}

id objc_msgSend_getMobilityContextFromList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMobilityContextFromList:");
}

id objc_msgSend_getMobilityState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMobilityState");
}

id objc_msgSend_getMotionController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMotionController");
}

id objc_msgSend_getMovingAverageTxPer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMovingAverageTxPer");
}

id objc_msgSend_getMovingAvgBTRssi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMovingAvgBTRssi");
}

id objc_msgSend_getMovingAvgOfRxRetryPercent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMovingAvgOfRxRetryPercent");
}

id objc_msgSend_getMyClientType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMyClientType");
}

id objc_msgSend_getNRrFemFrequencyRanges_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNRrFemFrequencyRanges:");
}

id objc_msgSend_getNetworkFullScoreFromSF_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNetworkFullScoreFromSF:");
}

id objc_msgSend_getNetworkScore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNetworkScore:");
}

id objc_msgSend_getNetworkUsageAdviceFromSF_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNetworkUsageAdviceFromSF:");
}

id objc_msgSend_getNrRSRP(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNrRSRP");
}

id objc_msgSend_getNrRSRP_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNrRSRP:");
}

id objc_msgSend_getNrRSRQ(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNrRSRQ");
}

id objc_msgSend_getNrRSRQ_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNrRSRQ:");
}

id objc_msgSend_getNrSNR(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNrSNR");
}

id objc_msgSend_getNrSNR_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNrSNR:");
}

id objc_msgSend_getNum2GHzAclA2DPDevices(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNum2GHzAclA2DPDevices");
}

id objc_msgSend_getNumberOfBTGameCtrlDev(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNumberOfBTGameCtrlDev");
}

id objc_msgSend_getNumberOfSavedLogFiles_new_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNumberOfSavedLogFiles:new:");
}

id objc_msgSend_getNumberOfSpatialStreamOnAccessPoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNumberOfSpatialStreamOnAccessPoint");
}

id objc_msgSend_getP2pRCU2CoexEventStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getP2pRCU2CoexEventStatus");
}

id objc_msgSend_getPhyMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPhyMode");
}

id objc_msgSend_getPingPongAvoidanceTimerMultiplier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPingPongAvoidanceTimerMultiplier");
}

id objc_msgSend_getPlatformCidPlistName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPlatformCidPlistName");
}

id objc_msgSend_getPlatformPlistName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPlatformPlistName");
}

id objc_msgSend_getPointOfInterest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPointOfInterest");
}

id objc_msgSend_getPredictedCellBW_backhaul_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPredictedCellBW:backhaul:");
}

id objc_msgSend_getPredictedWiFiBW_backhaul_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPredictedWiFiBW:backhaul:");
}

id objc_msgSend_getPredictedWiFiBandwidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPredictedWiFiBandwidth:");
}

id objc_msgSend_getPreviousCellularAvailabilityStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPreviousCellularAvailabilityStatus");
}

id objc_msgSend_getPrivateNetworkCapabilitiesForContext_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPrivateNetworkCapabilitiesForContext:error:");
}

id objc_msgSend_getProcessId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getProcessId");
}

id objc_msgSend_getProfileName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getProfileName:");
}

id objc_msgSend_getQmiClientForSim_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getQmiClientForSim:");
}

id objc_msgSend_getQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getQueue");
}

id objc_msgSend_getRC2BTTimingParam(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRC2BTTimingParam");
}

id objc_msgSend_getRC2CoexMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRC2CoexMode");
}

id objc_msgSend_getRC2PMProtectionMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRC2PMProtectionMode");
}

id objc_msgSend_getRC2WiFiTimingParam(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRC2WiFiTimingParam");
}

id objc_msgSend_getRCU2Status(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRCU2Status");
}

id objc_msgSend_getRRCState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRRCState");
}

id objc_msgSend_getRSSI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRSSI");
}

id objc_msgSend_getRSSIHysteresis(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRSSIHysteresis");
}

id objc_msgSend_getRTT(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRTT");
}

id objc_msgSend_getRTTMovAvg(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRTTMovAvg");
}

id objc_msgSend_getRadioCoverage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRadioCoverage");
}

id objc_msgSend_getRadioFrequency(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRadioFrequency");
}

id objc_msgSend_getReasonStr::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getReasonStr::");
}

id objc_msgSend_getRecommenedLinkType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRecommenedLinkType");
}

id objc_msgSend_getRemoveObjIndex_fromOther_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRemoveObjIndex:fromOther:");
}

id objc_msgSend_getRole(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRole");
}

id objc_msgSend_getRxDupeRatio(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRxDupeRatio");
}

id objc_msgSend_getRxPacket(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRxPacket");
}

id objc_msgSend_getRxPhyRate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRxPhyRate");
}

id objc_msgSend_getRxRatio(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRxRatio");
}

id objc_msgSend_getRxRetryPercent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRxRetryPercent");
}

id objc_msgSend_getRxRetryRatio(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRxRetryRatio");
}

id objc_msgSend_getSCService(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSCService");
}

id objc_msgSend_getSNR(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSNR");
}

id objc_msgSend_getSNRHysteresis(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSNRHysteresis");
}

id objc_msgSend_getServiceCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getServiceCount");
}

id objc_msgSend_getServingCellECIO(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getServingCellECIO");
}

id objc_msgSend_getServingCellECIO_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getServingCellECIO:");
}

id objc_msgSend_getServingCellFilteredMeasurements(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getServingCellFilteredMeasurements");
}

id objc_msgSend_getServingCellRSCP(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getServingCellRSCP");
}

id objc_msgSend_getServingCellRSCP_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getServingCellRSCP:");
}

id objc_msgSend_getServingCellRSRP(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getServingCellRSRP");
}

id objc_msgSend_getServingCellRSRP_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getServingCellRSRP:");
}

id objc_msgSend_getServingCellRSRQ(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getServingCellRSRQ");
}

id objc_msgSend_getServingCellRSRQ_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getServingCellRSRQ:");
}

id objc_msgSend_getServingCellSNR(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getServingCellSNR");
}

id objc_msgSend_getServingCellSNR_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getServingCellSNR:");
}

id objc_msgSend_getServingCellType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getServingCellType");
}

id objc_msgSend_getServingCellType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getServingCellType:");
}

id objc_msgSend_getSessionFor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSessionFor:");
}

id objc_msgSend_getSessionSync_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSessionSync:");
}

id objc_msgSend_getSignalStrengthInfo_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSignalStrengthInfo:completion:");
}

id objc_msgSend_getSingleton(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSingleton");
}

id objc_msgSend_getSpeedTestMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSpeedTestMetrics");
}

id objc_msgSend_getStaleContextFromList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getStaleContextFromList");
}

id objc_msgSend_getStandaloneLinkPreferenceMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getStandaloneLinkPreferenceMetrics");
}

id objc_msgSend_getState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getState");
}

id objc_msgSend_getStationCountWithPendingData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getStationCountWithPendingData");
}

id objc_msgSend_getSubscriptionInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSubscriptionInfo:");
}

id objc_msgSend_getSubscriptionType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSubscriptionType");
}

id objc_msgSend_getSymptomsService(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSymptomsService");
}

id objc_msgSend_getTCPAvgRTT(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTCPAvgRTT");
}

id objc_msgSend_getTCPMinRTT(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTCPMinRTT");
}

id objc_msgSend_getTCPRttVar(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTCPRttVar");
}

id objc_msgSend_getTelephonyHandle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTelephonyHandle");
}

id objc_msgSend_getTelephonyMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTelephonyMode");
}

id objc_msgSend_getTimeStamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTimeStamp");
}

id objc_msgSend_getTimeToTSTForULLAMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTimeToTSTForULLAMode:");
}

id objc_msgSend_getTxFail(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTxFail");
}

id objc_msgSend_getTxLossRateVI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTxLossRateVI");
}

id objc_msgSend_getTxLossRateVO(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTxLossRateVO");
}

id objc_msgSend_getTxPer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTxPer");
}

id objc_msgSend_getTxPerAnticipatedMovAvg(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTxPerAnticipatedMovAvg");
}

id objc_msgSend_getTxPerAnticipatedMovAvgValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTxPerAnticipatedMovAvgValid");
}

id objc_msgSend_getTxPerMovAvg(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTxPerMovAvg");
}

id objc_msgSend_getTxPerValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTxPerValid");
}

id objc_msgSend_getTxPhyRate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTxPhyRate");
}

id objc_msgSend_getTxRetryPercent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTxRetryPercent");
}

id objc_msgSend_getTxThroughputVI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTxThroughputVI");
}

id objc_msgSend_getTxThroughputVO(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTxThroughputVO");
}

id objc_msgSend_getUARFCNDataSlot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getUARFCNDataSlot");
}

id objc_msgSend_getUCMClientFromList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getUCMClientFromList:");
}

id objc_msgSend_getUpdatedWifiAntennaSelectionEnhConfigsWithbmWifiEnhAntTx000_bmWiFiEnhAntTx001_bmWiFiEnhAntTx010_bmWiFiEnhAntTx011_bmWiFiEnhAntTx100_bmWiFiEnhAntTx101_bmWiFiEnhAntTx110_bmWiFiEnhAntTx111_bmWiFiBand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getUpdatedWifiAntennaSelectionEnhConfigsWithbmWifiEnhAntTx000:bmWiFiEnhAntTx001:bmWiFiEnhAntTx010:bmWiFiEnhAntTx011:bmWiFiEnhAntTx100:bmWiFiEnhAntTx101:bmWiFiEnhAntTx110:bmWiFiEnhAntTx111:bmWiFiBand:");
}

id objc_msgSend_getUserDataPreferredSlot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getUserDataPreferredSlot");
}

id objc_msgSend_getValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getValue:");
}

id objc_msgSend_getVoiceDecision(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getVoiceDecision");
}

id objc_msgSend_getVoiceLinkQualityMetric_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getVoiceLinkQualityMetric:completion:");
}

id objc_msgSend_getWRM5GVersusWiFiLinkPreferenceMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWRM5GVersusWiFiLinkPreferenceMetrics");
}

id objc_msgSend_getWRMCellOutrankWifiBWThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWRMCellOutrankWifiBWThreshold");
}

id objc_msgSend_getWRMFaceTimeHandover(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWRMFaceTimeHandover");
}

id objc_msgSend_getWRMProximity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWRMProximity");
}

id objc_msgSend_getWRMStreaming(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWRMStreaming");
}

id objc_msgSend_getWRMWiFiCallingEnd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWRMWiFiCallingEnd");
}

id objc_msgSend_getWatchAssociated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWatchAssociated");
}

id objc_msgSend_getWghtAverageMetricsValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWghtAverageMetricsValid");
}

id objc_msgSend_getWghtAverageRSSI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWghtAverageRSSI");
}

id objc_msgSend_getWghtAverageRXPhyRate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWghtAverageRXPhyRate");
}

id objc_msgSend_getWghtAverageSNR(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWghtAverageSNR");
}

id objc_msgSend_getWghtAverageTXPhyRate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWghtAverageTXPhyRate");
}

id objc_msgSend_getWiFiBTActiveProfileFor2G(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWiFiBTActiveProfileFor2G");
}

id objc_msgSend_getWiFiBTSharedAntennaDisabledStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWiFiBTSharedAntennaDisabledStatus");
}

id objc_msgSend_getWiFiBW(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWiFiBW");
}

id objc_msgSend_getWiFiCallingController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWiFiCallingController");
}

id objc_msgSend_getWiFiCallingMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWiFiCallingMetrics");
}

id objc_msgSend_getWiFiController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWiFiController");
}

id objc_msgSend_getWiFiHandle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWiFiHandle");
}

id objc_msgSend_getWiFiMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWiFiMode");
}

id objc_msgSend_getWiFiNRStatusDataSlot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWiFiNRStatusDataSlot");
}

id objc_msgSend_getWiFiService(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWiFiService");
}

id objc_msgSend_getWiFiServiceSingletone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWiFiServiceSingletone");
}

id objc_msgSend_getWifiAntennaBitmapForPencilCoexByPlatform(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWifiAntennaBitmapForPencilCoexByPlatform");
}

id objc_msgSend_getWifiDesensedCoexIssueFromIssueBand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWifiDesensedCoexIssueFromIssueBand:");
}

id objc_msgSend_getWifiNetMetricCurrInstant_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWifiNetMetricCurrInstant:");
}

id objc_msgSend_getiRATClientFromList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getiRATClientFromList:");
}

id objc_msgSend_getiRATConfigController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getiRATConfigController");
}

id objc_msgSend_getiRATMetricHORecordCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getiRATMetricHORecordCache");
}

id objc_msgSend_getiRATProximityClientFromList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getiRATProximityClientFromList:");
}

id objc_msgSend_getprevRxPhyRate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getprevRxPhyRate");
}

id objc_msgSend_gpsBandInfoList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gpsBandInfoList");
}

id objc_msgSend_gpsRadioActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gpsRadioActive");
}

id objc_msgSend_group(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "group");
}

id objc_msgSend_guardInterval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "guardInterval");
}

id objc_msgSend_handleAppStateChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleAppStateChange:");
}

id objc_msgSend_handleBTBandSwitchRequestEvent_targetBand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleBTBandSwitchRequestEvent:targetBand:");
}

id objc_msgSend_handleBTCoexConnectedDevicesEvent_numA2DP_numLLA_numHID_numSCO_numeSCO_numLE_numLEA_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleBTCoexConnectedDevicesEvent_numA2DP:numLLA:numHID:numSCO:numeSCO:numLE:numLEA:");
}

id objc_msgSend_handleBTCoexStatsEvent_tddCnt_hybridCnt_btDurMs_totDurMs_parallelCnt_btDurAirMs_wlrssiCoex_btrssiCoex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleBTCoexStatsEvent_tddCnt:hybridCnt:btDurMs:totDurMs:parallelCnt:btDurAirMs:wlrssiCoex:btrssiCoex:");
}

id objc_msgSend_handleBTCoexWiFiStateEvent_wifiChannel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleBTCoexWiFiStateEvent:wifiChannel:");
}

id objc_msgSend_handleBTRegulatoryInfoEvent_allowedBands_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleBTRegulatoryInfoEvent:allowedBands:");
}

id objc_msgSend_handleBTStatusUpdateEvent_frequencyBand_ullaMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleBTStatusUpdateEvent:frequencyBand:ullaMode:");
}

id objc_msgSend_handleBandSwitchRejectEvent_btTargetBand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleBandSwitchRejectEvent:btTargetBand:");
}

id objc_msgSend_handleBandSwitchStatusEvent_btSubband_successCount_failCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleBandSwitchStatusEvent:btSubband:successCount:failCount:");
}

id objc_msgSend_handleBandSwitchStatusUpdatedEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleBandSwitchStatusUpdatedEvent");
}

id objc_msgSend_handleBandwidthEstimationInd_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleBandwidthEstimationInd:");
}

id objc_msgSend_handleCTConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleCTConfig");
}

id objc_msgSend_handleCallLQMStateChangeType7_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleCallLQMStateChangeType7:");
}

id objc_msgSend_handleCallLQMStateChangeType7WiFiEnh_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleCallLQMStateChangeType7WiFiEnh:");
}

id objc_msgSend_handleCellularNetworkUpdate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleCellularNetworkUpdate");
}

id objc_msgSend_handleChannelQualityInfoEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleChannelQualityInfoEvent:");
}

id objc_msgSend_handleChannelQualityInfoUpdatedEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleChannelQualityInfoUpdatedEvent");
}

id objc_msgSend_handleCoexModeFailEvent_btSubband_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleCoexModeFailEvent:btSubband:");
}

id objc_msgSend_handleCoexProcessRegistration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleCoexProcessRegistration:");
}

id objc_msgSend_handleControllerAvailability_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleControllerAvailability:");
}

id objc_msgSend_handleDataSystemStatusInd_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleDataSystemStatusInd:");
}

id objc_msgSend_handleDisconnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleDisconnection:");
}

id objc_msgSend_handleErrorReport_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleErrorReport:");
}

id objc_msgSend_handleEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleEvent:");
}

id objc_msgSend_handleFTCall(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleFTCall");
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_handleFrequencyToolOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleFrequencyToolOperation:");
}

id objc_msgSend_handleFrequencyToolQuery_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleFrequencyToolQuery:");
}

id objc_msgSend_handleHPCellularSessionEnd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleHPCellularSessionEnd");
}

id objc_msgSend_handleHPCellularSessionStart(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleHPCellularSessionStart");
}

id objc_msgSend_handleHPCellularStateUpdate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleHPCellularStateUpdate:");
}

id objc_msgSend_handleLinkPrefSubscribe_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleLinkPrefSubscribe:");
}

id objc_msgSend_handleLinkPrefSubscribeIDS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleLinkPrefSubscribeIDS:");
}

id objc_msgSend_handleLinkPreferenceNotification_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleLinkPreferenceNotification:");
}

id objc_msgSend_handleLinkPreferenceNotificationCM_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleLinkPreferenceNotificationCM:");
}

id objc_msgSend_handleLinkPreferenceNotificationIDS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleLinkPreferenceNotificationIDS:");
}

id objc_msgSend_handleLinkPreferenceNotificationInternetDataVoiceVideo_::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleLinkPreferenceNotificationInternetDataVoiceVideo:::");
}

id objc_msgSend_handleLinkPreferenceNotificationTerminus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleLinkPreferenceNotificationTerminus");
}

id objc_msgSend_handleLow5GRate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleLow5GRate:");
}

id objc_msgSend_handleMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleMessage:");
}

id objc_msgSend_handleNetworkConfig_bb20_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleNetworkConfig_bb20:");
}

id objc_msgSend_handleNetworkConfig_legacy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleNetworkConfig_legacy:");
}

id objc_msgSend_handlePeriodicIDSMetrics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePeriodicIDSMetrics:");
}

id objc_msgSend_handlePeriodicRTPMetrics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePeriodicRTPMetrics:");
}

id objc_msgSend_handlePowerState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePowerState:");
}

id objc_msgSend_handleRTPEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleRTPEvent:");
}

id objc_msgSend_handleRc1DynamicPolicy_SubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleRc1DynamicPolicy:SubId:");
}

id objc_msgSend_handleSettingCellularSpeedTestSetting_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSettingCellularSpeedTestSetting:");
}

id objc_msgSend_handleShowUCMStatusEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleShowUCMStatusEvent");
}

id objc_msgSend_handleStreamingStateChange_appId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleStreamingStateChange:appId:");
}

id objc_msgSend_handleSubscribeStatusUpdate::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSubscribeStatusUpdate::");
}

id objc_msgSend_handleTransparentMessage_SubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleTransparentMessage:SubId:");
}

id objc_msgSend_handleTunerState_sensorData_SubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleTunerState:sensorData:SubId:");
}

id objc_msgSend_handleVoIPStateChange_appId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleVoIPStateChange:appId:");
}

id objc_msgSend_handleVoIPStateChangeConference_appId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleVoIPStateChangeConference:appId:");
}

id objc_msgSend_handleWiFiBTCatsChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleWiFiBTCatsChange:");
}

id objc_msgSend_handleWiFiBTCoexChange(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleWiFiBTCoexChange");
}

id objc_msgSend_handleWiFiBTULOFDMAChange(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleWiFiBTULOFDMAChange");
}

id objc_msgSend_handleWiFiChannelQualityEvent_quality_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleWiFiChannelQualityEvent:quality:");
}

id objc_msgSend_handleWiFiConfigChange(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleWiFiConfigChange");
}

id objc_msgSend_handleWiFiCountryCodeChangedEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleWiFiCountryCodeChangedEvent");
}

id objc_msgSend_handleWiFiFrequencyBandForBTEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleWiFiFrequencyBandForBTEvent:");
}

id objc_msgSend_handleWiFiRCU1Change(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleWiFiRCU1Change");
}

id objc_msgSend_handleWiFiRCU1PowerOff(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleWiFiRCU1PowerOff");
}

id objc_msgSend_handleWiFiRCU2PowerOff(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleWiFiRCU2PowerOff");
}

id objc_msgSend_handleWiFiRegulatoryInfoEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleWiFiRegulatoryInfoEvent:");
}

id objc_msgSend_handleWiFiStateEvent_wifiChannel_isNanPhs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleWiFiStateEvent:wifiChannel:isNanPhs:");
}

id objc_msgSend_handleWiFiStatusUpdateEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleWiFiStatusUpdateEvent:");
}

id objc_msgSend_handoverAlgorithmSettingDynamic(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handoverAlgorithmSettingDynamic");
}

id objc_msgSend_handoverAlgorithmType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handoverAlgorithmType");
}

id objc_msgSend_handoverAvgIdleRxPktLossThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handoverAvgIdleRxPktLossThreshold");
}

id objc_msgSend_handoverAvgRxPktLossThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handoverAvgRxPktLossThreshold");
}

id objc_msgSend_handoverEvaluationRequired(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handoverEvaluationRequired");
}

id objc_msgSend_handoverNominalJitterBufferThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handoverNominalJitterBufferThreshold");
}

id objc_msgSend_handoverRTThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handoverRTThreshold");
}

id objc_msgSend_handoverRxJitterThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handoverRxJitterThreshold");
}

id objc_msgSend_handoverRxPktLossThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handoverRxPktLossThreshold");
}

id objc_msgSend_handoverTxPktLossThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handoverTxPktLossThreshold");
}

id objc_msgSend_hasConnected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasConnected");
}

id objc_msgSend_hasEnded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasEnded");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hash");
}

id objc_msgSend_headTxPowerCapdBm(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "headTxPowerCapdBm");
}

id objc_msgSend_highDataRateObserved(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "highDataRateObserved");
}

id objc_msgSend_highThroughputRequired_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "highThroughputRequired:");
}

id objc_msgSend_historicalAgeOfConnectedLinkInDays(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "historicalAgeOfConnectedLinkInDays");
}

id objc_msgSend_homeKitReportingTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "homeKitReportingTimer");
}

id objc_msgSend_horizontalAccuracy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "horizontalAccuracy");
}

id objc_msgSend_hostAP(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hostAP");
}

id objc_msgSend_hostAP5GHzActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hostAP5GHzActive");
}

id objc_msgSend_hpCellNeed2SetBTAFH(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hpCellNeed2SetBTAFH");
}

id objc_msgSend_hpCellularMonitor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hpCellularMonitor");
}

id objc_msgSend_iRATSupported(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iRATSupported");
}

id objc_msgSend_iTunesMetadata(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iTunesMetadata");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identifier");
}

id objc_msgSend_idsAvgWiFiMinPerTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsAvgWiFiMinPerTh1");
}

id objc_msgSend_idsBTMinPerTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsBTMinPerTh1");
}

id objc_msgSend_idsBTMinRttTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsBTMinRttTh1");
}

id objc_msgSend_idsDeviceID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsDeviceID");
}

id objc_msgSend_idsMetricsEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsMetricsEnabled");
}

id objc_msgSend_idsMinAvgWiFiTxPktLossRateTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsMinAvgWiFiTxPktLossRateTh0");
}

id objc_msgSend_idsMinAvgWiFiTxPktLossRateTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsMinAvgWiFiTxPktLossRateTh1");
}

id objc_msgSend_idsMinWiFiEffectivePhyRateTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsMinWiFiEffectivePhyRateTh0");
}

id objc_msgSend_idsMinWiFiEffectivePhyRateTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsMinWiFiEffectivePhyRateTh1");
}

id objc_msgSend_idsMinWiFiRssiTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsMinWiFiRssiTh0");
}

id objc_msgSend_idsMinWiFiRssiTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsMinWiFiRssiTh1");
}

id objc_msgSend_idsMinWiFiSnrTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsMinWiFiSnrTh0");
}

id objc_msgSend_idsMinWiFiSnrTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsMinWiFiSnrTh1");
}

id objc_msgSend_idsMinWiFiThroughputTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsMinWiFiThroughputTh0");
}

id objc_msgSend_idsMinWiFiThroughputTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsMinWiFiThroughputTh1");
}

id objc_msgSend_idsMovAvgWiFiMinPerTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsMovAvgWiFiMinPerTh1");
}

id objc_msgSend_idsPeriodicReportInterval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsPeriodicReportInterval");
}

id objc_msgSend_idsWiFiMinPerTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsWiFiMinPerTh1");
}

id objc_msgSend_idsWiFiMinRttTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsWiFiMinRttTh1");
}

id objc_msgSend_ifAutomatedDeviceGroup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ifAutomatedDeviceGroup");
}

id objc_msgSend_ifInternalDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ifInternalDevice");
}

id objc_msgSend_ifLimitSpeedTest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ifLimitSpeedTest");
}

id objc_msgSend_ifNoActiveVoiceCall(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ifNoActiveVoiceCall");
}

id objc_msgSend_ifScheduleSpeedTestAfterReboot_probability_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ifScheduleSpeedTestAfterReboot:probability:");
}

id objc_msgSend_imsVoiceOverPSSupported(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "imsVoiceOverPSSupported");
}

id objc_msgSend_index(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "index");
}

id objc_msgSend_indicator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indicator");
}

id objc_msgSend_infoDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "infoDictionary");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "init");
}

id objc_msgSend_init5GVersusWiFiLinkPrefMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "init5GVersusWiFiLinkPrefMetrics");
}

id objc_msgSend_init_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "init:");
}

id objc_msgSend_initAWDService(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initAWDService");
}

id objc_msgSend_initBTStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initBTStatus");
}

id objc_msgSend_initCallNotifications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initCallNotifications");
}

id objc_msgSend_initCellStationManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initCellStationManager");
}

id objc_msgSend_initCellularProductExperimentsManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initCellularProductExperimentsManager");
}

id objc_msgSend_initControllerPolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initControllerPolicy:");
}

id objc_msgSend_initCoreTelephonyClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initCoreTelephonyClient");
}

id objc_msgSend_initFaceTimeHandoverMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initFaceTimeHandoverMetrics");
}

id objc_msgSend_initFromPlist_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initFromPlist:");
}

id objc_msgSend_initHandoverReasonCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initHandoverReasonCode");
}

id objc_msgSend_initLTECoexMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initLTECoexMetrics");
}

id objc_msgSend_initLocationController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initLocationController");
}

id objc_msgSend_initMovAverageOfSignalBar(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initMovAverageOfSignalBar");
}

id objc_msgSend_initNewClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initNewClient");
}

id objc_msgSend_initPlatformPolicies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initPlatformPolicies");
}

id objc_msgSend_initSOSWaypointThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initSOSWaypointThreshold");
}

id objc_msgSend_initSettingsFromPreferences(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initSettingsFromPreferences");
}

id objc_msgSend_initSfPboffParams(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initSfPboffParams");
}

id objc_msgSend_initStandaloneLinkPrefMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initStandaloneLinkPrefMetrics");
}

id objc_msgSend_initStreamingMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initStreamingMetrics");
}

id objc_msgSend_initWiFiCallingMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWiFiCallingMetrics");
}

id objc_msgSend_initWiFiCellDataEval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWiFiCellDataEval");
}

id objc_msgSend_initWiFiStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWiFiStatus");
}

id objc_msgSend_initWithActualLowBandwidth_d_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithActualLowBandwidth_d:");
}

id objc_msgSend_initWithAddress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAddress:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithBTConnections_at_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBTConnections:at:");
}

id objc_msgSend_initWithBundleIdentifier_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBundleIdentifier:allowPlaceholder:error:");
}

id objc_msgSend_initWithBundleType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBundleType:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithCca_weighted_average_phyrate_rx_weighted_average_rssi_weighted_average_snr_maxOfActualLowBandwidth_d_tcpRTTAvg_wifChannelType_wifiguardinterval_isWfiCaptive_wifinumberOfSpatialStreams_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCca:weighted_average_phyrate_rx:weighted_average_rssi:weighted_average_snr:maxOfActualLowBandwidth_d:tcpRTTAvg:wifChannelType:wifiguardinterval:isWfiCaptive:wifinumberOfSpatialStreams:");
}

id objc_msgSend_initWithClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithClient:");
}

id objc_msgSend_initWithCoexIssueConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCoexIssueConfig:");
}

id objc_msgSend_initWithConcurrencyType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithConcurrencyType:");
}

id objc_msgSend_initWithConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithConnection:");
}

id objc_msgSend_initWithConnection_processId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithConnection:processId:");
}

id objc_msgSend_initWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContentsOfURL:");
}

id objc_msgSend_initWithContentsOfURL_configuration_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContentsOfURL:configuration:error:");
}

id objc_msgSend_initWithContentsOfURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContentsOfURL:error:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithDelegate_queue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDelegate:queue:");
}

id objc_msgSend_initWithDesiredAccuracy_distanceFilter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDesiredAccuracy:distanceFilter:");
}

id objc_msgSend_initWithDictionary_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDictionary:error:");
}

id objc_msgSend_initWithEffectiveBundle_delegate_onQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithEffectiveBundle:delegate:onQueue:");
}

id objc_msgSend_initWithEndpoint_parameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithEndpoint:parameters:");
}

id objc_msgSend_initWithFeatureProviderArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFeatureProviderArray:");
}

id objc_msgSend_initWithFireTimeIntervalSinceNow_queue_block_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFireTimeIntervalSinceNow:queue:block:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithFormat_arguments_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFormat:arguments:");
}

id objc_msgSend_initWithFreq_Bw_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFreq:Bw:");
}

id objc_msgSend_initWithGEOCoordinate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithGEOCoordinate:");
}

id objc_msgSend_initWithGeohash_counter_event_ratType_rrcState_cellNsaEnabled_isFR1_cellARFCN_cellBandInfo_cellChannelBW_cellRsrp_cellSinr_cellLteRSRQ_cellNrRSRP_cellNrRSRQ_cellNrSNR_maxDLCAConfigured_totalConfiguredBw_nrConfiguredBw_nrTotalScheduledMimoLayers_totalConfiguredMimoLayers_lteMaxScheduledMimoLayersInACell_nrMaxDlModulation_actualHighBandwidth_actualLowBandwidth_pActualLowBandwidth_maxOfActualLowBandwidth_estimatedHighBandwidth_estimatedLowBandwidth_movingAvgHighBandwidth_movingAvgLowBandwidth_cmDataSentCount_cmDataSentDuration_tcpRTTAvg_tcpRTTvar_videoStreamingStallTime_numStall_stallDuration_cellEstimatedBW_cellLoad_cellModelConfidenceLevel_mlPredictedCellBW_qbssLoad_lqmScorecellular_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithGeohash:counter:event:ratType:rrcState:cellNsaEnabled:isFR1:cellARFCN:cellBandInfo:cellChannelBW:cellRsrp:cellSinr:cellLteRSRQ:cellNrRSRP:cellNrRSRQ:cellNrSNR:maxDLCAConfigured:totalConfiguredBw:nrConfiguredBw:nrTotalScheduledMimoLayers:totalConfiguredMimoLayers:lteMaxScheduledMimoLayersInACell:nrMaxDlModulation:actualHighBandwidth:actualLowBandwidth:pActualLowBandwidth:maxOfActualLowBandwidth:estimatedHighBandwidth:estimatedLowBandwidth:movingAvgHighBandwidth:movingAvgLowBandwidth:cmDataSentCount:cmDataSentDuration:tcpRTTAvg:tcpRTTvar:videoStreamingStallTime:numStall:stallDuration:cellEstimatedBW:cellLoad:cellModelConfidenceLevel:mlPredictedCellBW:qbssLoad:lqmScorecellular:");
}

id objc_msgSend_initWithKey_ascending_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithKey:ascending:");
}

id objc_msgSend_initWithMLModel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMLModel:");
}

id objc_msgSend_initWithManagedObjectModel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithManagedObjectModel:");
}

id objc_msgSend_initWithMaxOfActualLowBandwidth_d_cellSinr_cellNrRSRQ_cellLteRSRQ_cellNrRSRP_lqmScorecellular_cellChannelBW_cellNrSNR_cellRsrp_ratType_cellEstimatedBW_cellNsaEnabled_cellBandInfo_pActualLowBandwidth_NRType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMaxOfActualLowBandwidth_d:cellSinr:cellNrRSRQ:cellLteRSRQ:cellNrRSRP:lqmScorecellular:cellChannelBW:cellNrSNR:cellRsrp:ratType:cellEstimatedBW:cellNsaEnabled:cellBandInfo:pActualLowBandwidth:NRType:");
}

id objc_msgSend_initWithModelURL_modelURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithModelURL:modelURL:");
}

id objc_msgSend_initWithName_managedObjectModel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:managedObjectModel:");
}

id objc_msgSend_initWithPlatformId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPlatformId:");
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithQueue:");
}

id objc_msgSend_initWithService_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithService:");
}

id objc_msgSend_initWithServiceType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithServiceType:");
}

id objc_msgSend_initWithSlot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSlot:");
}

id objc_msgSend_initWithStartFreq_EndFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithStartFreq:EndFreq:");
}

id objc_msgSend_initWithStoreURL_modelURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithStoreURL:modelURL:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithSub_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSub:");
}

id objc_msgSend_initWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithTimeIntervalSince1970:");
}

id objc_msgSend_initWithTimeStamp_deviceType_deviceRegistrationStatus_previousDeviceRegistrationStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithTimeStamp:deviceType:deviceRegistrationStatus:previousDeviceRegistrationStatus:");
}

id objc_msgSend_initWithTimeStamp_deviceType_deviceRegistrationStatus_previousDeviceRegistrationStatus_aboveThreshold_latestStrongTimeStamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithTimeStamp:deviceType:deviceRegistrationStatus:previousDeviceRegistrationStatus:aboveThreshold:latestStrongTimeStamp:");
}

id objc_msgSend_initWithTrigger_duration_onQueue_withHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithTrigger:duration:onQueue:withHandler:");
}

id objc_msgSend_initWithURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithURL:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_initWithWaitTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithWaitTime:");
}

id objc_msgSend_initWithWorkspace_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithWorkspace:");
}

id objc_msgSend_initWorkspaceWithService_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWorkspaceWithService:");
}

id objc_msgSend_initiRATMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initiRATMetrics");
}

id objc_msgSend_initializeStrongestSOSSignal_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializeStrongestSOSSignal:");
}

id objc_msgSend_initializeiRATMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializeiRATMetrics");
}

id objc_msgSend_insertNewObjectForEntityForName_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "insertNewObjectForEntityForName:inManagedObjectContext:");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_insertions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "insertions");
}

id objc_msgSend_instance(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "instance");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "integerValue");
}

id objc_msgSend_interfaceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceName");
}

id objc_msgSend_interfaceType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceType");
}

id objc_msgSend_intializeInterfaceClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intializeInterfaceClient:");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidate");
}

id objc_msgSend_invalidateAudioQualityMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidateAudioQualityMetrics");
}

id objc_msgSend_is3FoForFreq_bw_resultantFreq_resultantBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "is3FoForFreq:bw:resultantFreq:resultantBW:");
}

id objc_msgSend_isAWDLInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAWDLInProgress");
}

id objc_msgSend_isActiveClientFaceTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isActiveClientFaceTime");
}

id objc_msgSend_isActiveHandoverSupported(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isActiveHandoverSupported");
}

id objc_msgSend_isAirPlaneModeEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAirPlaneModeEnabled");
}

id objc_msgSend_isAssociated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAssociated");
}

id objc_msgSend_isAudioQualityGood(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAudioQualityGood");
}

id objc_msgSend_isAutoUnlockRangingInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAutoUnlockRangingInProgress");
}

id objc_msgSend_isBBHighPowerState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isBBHighPowerState");
}

id objc_msgSend_isBTMetricsValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isBTMetricsValid");
}

id objc_msgSend_isBackSuperWideCameraSupported(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isBackSuperWideCameraSupported");
}

id objc_msgSend_isBackTeleCameraSupported(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isBackTeleCameraSupported");
}

id objc_msgSend_isBackhaulGood(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isBackhaulGood");
}

id objc_msgSend_isBand40ACoexActiveForULFreq_ulBW_dlFreq_dlBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isBand40ACoexActiveForULFreq:ulBW:dlFreq:dlBW:");
}

id objc_msgSend_isBand40BCoexActiveForULFreq_ulBW_dlFreq_dlBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isBand40BCoexActiveForULFreq:ulBW:dlFreq:dlBW:");
}

id objc_msgSend_isBand41A1CoexActiveForULFreq_ulBW_dlFreq_dlBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isBand41A1CoexActiveForULFreq:ulBW:dlFreq:dlBW:");
}

id objc_msgSend_isBand41A2CoexActiveForULFreq_ulBW_dlFreq_dlBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isBand41A2CoexActiveForULFreq:ulBW:dlFreq:dlBW:");
}

id objc_msgSend_isBand7CoexActiveForULFreq_ulBW_dlFreq_dlBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isBand7CoexActiveForULFreq:ulBW:dlFreq:dlBW:");
}

id objc_msgSend_isBeaconPerValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isBeaconPerValid");
}

id objc_msgSend_isBeaconSchedValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isBeaconSchedValid");
}

id objc_msgSend_isBtAntennaDesensed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isBtAntennaDesensed");
}

id objc_msgSend_isCallActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCallActive");
}

id objc_msgSend_isCallInConference(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCallInConference");
}

id objc_msgSend_isCallKitAppInDenyList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCallKitAppInDenyList:");
}

id objc_msgSend_isCallOnHold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCallOnHold");
}

id objc_msgSend_isCarPlaySessionInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCarPlaySessionInProgress");
}

id objc_msgSend_isCellularEntryCriteriaMetForFaceTimeCallCurrentLinkWiFi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCellularEntryCriteriaMetForFaceTimeCallCurrentLinkWiFi");
}

id objc_msgSend_isCellularEntryCriteriaMetForIMSThumpCallCurrentLinkWiFi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCellularEntryCriteriaMetForIMSThumpCallCurrentLinkWiFi");
}

id objc_msgSend_isCellularEntryCriteriaMetForIMSVoiceCallCurrentLinkWiFi_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCellularEntryCriteriaMetForIMSVoiceCallCurrentLinkWiFi:");
}

id objc_msgSend_isCellularEntryCriteriaMetForVoiceCallCurrentLinkNone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCellularEntryCriteriaMetForVoiceCallCurrentLinkNone");
}

id objc_msgSend_isCellularExitCriteriaMetForFaceTimeCallCurrentLinkCellular(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCellularExitCriteriaMetForFaceTimeCallCurrentLinkCellular");
}

id objc_msgSend_isCellularExitCriteriaMetForIMSThumpCallCurrentLinkCellular(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCellularExitCriteriaMetForIMSThumpCallCurrentLinkCellular");
}

id objc_msgSend_isCellularExitCriteriaMetForIMSVoiceCallCurrentLinkLTE_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCellularExitCriteriaMetForIMSVoiceCallCurrentLinkLTE:");
}

id objc_msgSend_isCellularExitCriteriaMetForIMSVoiceCallCurrentLinkNR_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCellularExitCriteriaMetForIMSVoiceCallCurrentLinkNR:");
}

id objc_msgSend_isCellularExitCriteriaMetForVoiceCallCallCurrentLinkUMTS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCellularExitCriteriaMetForVoiceCallCallCurrentLinkUMTS");
}

id objc_msgSend_isCellularInRc1CoexBand_CellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_RC1ChannelBitmask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCellularInRc1CoexBand:CellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:RC1ChannelBitmask:");
}

id objc_msgSend_isCellularOnGPSIMDBand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCellularOnGPSIMDBand");
}

id objc_msgSend_isCellularOnIMD3CellBand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCellularOnIMD3CellBand");
}

id objc_msgSend_isCellularOnWiFi3FoBand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCellularOnWiFi3FoBand");
}

id objc_msgSend_isCellularRadioMetricsGoodEnoughForIMSVoIP__::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCellularRadioMetricsGoodEnoughForIMSVoIP::::");
}

id objc_msgSend_isConnectedLinkGood_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isConnectedLinkGood:");
}

id objc_msgSend_isCoreMediaStreamingActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCoreMediaStreamingActive");
}

id objc_msgSend_isCumulativeFwTxPerValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCumulativeFwTxPerValid");
}

id objc_msgSend_isCumulativeTxPerValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCumulativeTxPerValid");
}

id objc_msgSend_isDataAttached(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDataAttached");
}

id objc_msgSend_isDataEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDataEnabled");
}

id objc_msgSend_isDataLQMValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDataLQMValid");
}

id objc_msgSend_isDataLQMValid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDataLQMValid:");
}

id objc_msgSend_isDataPreferredSlotCBRS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDataPreferredSlotCBRS");
}

id objc_msgSend_isDeviceConnectedOverNonLTERadio(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDeviceConnectedOverNonLTERadio");
}

id objc_msgSend_isDeviceRegistered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDeviceRegistered");
}

id objc_msgSend_isDeviceUsingFR2Radio(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDeviceUsingFR2Radio");
}

id objc_msgSend_isEnhancedCTServiceNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEnhancedCTServiceNeeded");
}

id objc_msgSend_isEnhancedSisSupported(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEnhancedSisSupported");
}

id objc_msgSend_isEnsembleInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEnsembleInProgress");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualFreqList_List2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualFreqList:List2:");
}

id objc_msgSend_isEqualTo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualTo:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToDictionary:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToSet:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isExpensive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isExpensive");
}

id objc_msgSend_isFR2_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isFR2:completionHandler:");
}

id objc_msgSend_isFR2Radio(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isFR2Radio");
}

id objc_msgSend_isFaceIdSupported(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isFaceIdSupported");
}

id objc_msgSend_isFaceTimeProvider(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isFaceTimeProvider");
}

id objc_msgSend_isFrontCameraSupported(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isFrontCameraSupported");
}

id objc_msgSend_isFwTxPerValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isFwTxPerValid");
}

id objc_msgSend_isIDSTransportMetricsGoodEnough::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isIDSTransportMetricsGoodEnough::");
}

id objc_msgSend_isIMD2ForFirstFreq_firstBW_secondFreq_secondBW_resultantFreq_resultantBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isIMD2ForFirstFreq:firstBW:secondFreq:secondBW:resultantFreq:resultantBW:");
}

id objc_msgSend_isIMD3ForFirstFreq_firstBW_secondFreq_secondBW_resultantFreq_resultantBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isIMD3ForFirstFreq:firstBW:secondFreq:secondBW:resultantFreq:resultantBW:");
}

id objc_msgSend_isIMSPreferenceEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isIMSPreferenceEnabled");
}

id objc_msgSend_isIMSTransportQualityGood(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isIMSTransportQualityGood");
}

id objc_msgSend_isIbiSdmSupported(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isIbiSdmSupported");
}

id objc_msgSend_isInCoexBand7LowerEdge(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInCoexBand7LowerEdge");
}

id objc_msgSend_isInHpSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInHpSession");
}

id objc_msgSend_isLSMWiFiQualityGood(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLSMWiFiQualityGood");
}

id objc_msgSend_isLTEB7FoundForCellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLTEB7FoundForCellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:");
}

id objc_msgSend_isLocallyPaired(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLocallyPaired");
}

id objc_msgSend_isLogLevelEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLogLevelEnabled:");
}

id objc_msgSend_isLowPowerModePeriodicWakeUpNotificationSubscribed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLowPowerModePeriodicWakeUpNotificationSubscribed");
}

id objc_msgSend_isLteEntryCriteriaMetCurrentLinkNone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLteEntryCriteriaMetCurrentLinkNone");
}

id objc_msgSend_isLteEntryCriteriaMetCurrentLinkWiFi_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLteEntryCriteriaMetCurrentLinkWiFi:");
}

id objc_msgSend_isMarconiDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMarconiDevice");
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isMovingAverageAudioQualityOfCurrentCallGood_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMovingAverageAudioQualityOfCurrentCallGood:");
}

id objc_msgSend_isMovingAverageDownlinkAudioQualityOfCurrentCallGood_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMovingAverageDownlinkAudioQualityOfCurrentCallGood:");
}

id objc_msgSend_isMovingAverageTxPerValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMovingAverageTxPerValid");
}

id objc_msgSend_isMovingAverageUplinkAudioQualityOfCurrentCallGood_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMovingAverageUplinkAudioQualityOfCurrentCallGood:");
}

id objc_msgSend_isNBDynamicPolicyUpdateRequired_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNBDynamicPolicyUpdateRequired:");
}

id objc_msgSend_isNR79FoundForCellUlLowFreq_cellUlHighFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNR79FoundForCellUlLowFreq:cellUlHighFreq:");
}

id objc_msgSend_isNrEntryCriteriaMetCurrentLinkNone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNrEntryCriteriaMetCurrentLinkNone");
}

id objc_msgSend_isNrEntryCriteriaMetCurrentLinkWiFi_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNrEntryCriteriaMetCurrentLinkWiFi:");
}

id objc_msgSend_isOnHold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isOnHold");
}

id objc_msgSend_isOutgoing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isOutgoing");
}

id objc_msgSend_isPencilIndicationSupported(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPencilIndicationSupported");
}

id objc_msgSend_isPingPongAvoidanceTimerSatisfied_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPingPongAvoidanceTimerSatisfied:");
}

id objc_msgSend_isPrivateNetworkEvaluationNeeded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPrivateNetworkEvaluationNeeded:");
}

id objc_msgSend_isPrivateNetworkModeEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPrivateNetworkModeEnabled");
}

id objc_msgSend_isPrivateNetworkPreferredOverWifi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPrivateNetworkPreferredOverWifi");
}

id objc_msgSend_isPrivateNetworkSim(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPrivateNetworkSim");
}

id objc_msgSend_isQBSSLoadValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isQBSSLoadValid");
}

id objc_msgSend_isQmiSdmSupported(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isQmiSdmSupported");
}

id objc_msgSend_isRecentDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRecentDevice");
}

id objc_msgSend_isRemoteWiFiGood(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRemoteWiFiGood");
}

id objc_msgSend_isRetryValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRetryValid");
}

id objc_msgSend_isRoaming(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRoaming");
}

id objc_msgSend_isRowSKUB(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRowSKUB");
}

id objc_msgSend_isRowSKUS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRowSKUS");
}

id objc_msgSend_isRxRatioValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRxRatioValid");
}

id objc_msgSend_isSaAllowedOnWiFiAssociation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSaAllowedOnWiFiAssociation:");
}

id objc_msgSend_isSideCarInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSideCarInProgress");
}

id objc_msgSend_isSimPresent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSimPresent");
}

id objc_msgSend_isSisSupportedOnICE(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSisSupportedOnICE");
}

id objc_msgSend_isSlowWiFi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSlowWiFi");
}

id objc_msgSend_isSmartDataModeEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSmartDataModeEnabled");
}

id objc_msgSend_isSrvccHandoverInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSrvccHandoverInProgress");
}

id objc_msgSend_isStatusUpdateMsgBuffered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isStatusUpdateMsgBuffered");
}

id objc_msgSend_isStreamingAppForeground(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isStreamingAppForeground");
}

id objc_msgSend_isSubsetOf_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSubsetOf:");
}

id objc_msgSend_isSuppressSOSOnlyWithLimitedServiceEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSuppressSOSOnlyWithLimitedServiceEnabled");
}

id objc_msgSend_isTelephonyEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isTelephonyEnabled");
}

id objc_msgSend_isTelephonyProvider(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isTelephonyProvider");
}

id objc_msgSend_isTestMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isTestMode");
}

id objc_msgSend_isTimerActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isTimerActive");
}

id objc_msgSend_isTxPerValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isTxPerValid");
}

id objc_msgSend_isUplinkAudioQualityOfCurrentCallGood_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isUplinkAudioQualityOfCurrentCallGood:");
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isValid");
}

id objc_msgSend_isVideo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isVideo");
}

id objc_msgSend_isVideoQualityGood_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isVideoQualityGood:");
}

id objc_msgSend_isVoIPCallActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isVoIPCallActive");
}

id objc_msgSend_isVoLTESupported(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isVoLTESupported");
}

id objc_msgSend_isVoiceLQMValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isVoiceLQMValid");
}

id objc_msgSend_isVoiceLQMValid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isVoiceLQMValid:");
}

id objc_msgSend_isVolteSupported(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isVolteSupported");
}

id objc_msgSend_isWatchAssociated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWatchAssociated");
}

id objc_msgSend_isWiFiAppEntryCriteriaMet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiAppEntryCriteriaMet");
}

id objc_msgSend_isWiFiArqQualityIndicatorGood__::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiArqQualityIndicatorGood::::");
}

id objc_msgSend_isWiFiArqQualityIndicatorGoodControlFW__::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiArqQualityIndicatorGoodControlFW::::");
}

id objc_msgSend_isWiFiArqQualityIndicatorGoodForIDS::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiArqQualityIndicatorGoodForIDS::");
}

id objc_msgSend_isWiFiArqQualityIndicatorGoodUserData__::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiArqQualityIndicatorGoodUserData::::");
}

id objc_msgSend_isWiFiBeaconLossQualityIndicatorGood_::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiBeaconLossQualityIndicatorGood:::");
}

id objc_msgSend_isWiFiCallingSupported(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiCallingSupported");
}

id objc_msgSend_isWiFiCallingSupportedAnySlot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiCallingSupportedAnySlot");
}

id objc_msgSend_isWiFiCallingSupportedSlot1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiCallingSupportedSlot1");
}

id objc_msgSend_isWiFiCallingSupportedSlot2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiCallingSupportedSlot2");
}

id objc_msgSend_isWiFiChannel_inChannelMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiChannel:inChannelMap:");
}

id objc_msgSend_isWiFiConnected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiConnected");
}

id objc_msgSend_isWiFiDataRateIndicatorGoodForFaceTime::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiDataRateIndicatorGoodForFaceTime::");
}

id objc_msgSend_isWiFiDataRateIndicatorGoodForIDS::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiDataRateIndicatorGoodForIDS::");
}

id objc_msgSend_isWiFiEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiEnabled");
}

id objc_msgSend_isWiFiLinkEvaluationDesired(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiLinkEvaluationDesired");
}

id objc_msgSend_isWiFiLoadQualityIndicatorGood__::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiLoadQualityIndicatorGood::::");
}

id objc_msgSend_isWiFiNetworkCaptive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiNetworkCaptive");
}

id objc_msgSend_isWiFiPrimary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiPrimary");
}

id objc_msgSend_isWiFiPrimaryInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiPrimaryInterface");
}

id objc_msgSend_isWiFiQualityGoodForProximityMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiQualityGoodForProximityMode");
}

id objc_msgSend_isWiFiStreamingExitCriteriaMet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiStreamingExitCriteriaMet");
}

id objc_msgSend_isWoWEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWoWEnabled");
}

id objc_msgSend_issueType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "issueType");
}

id objc_msgSend_lastKnownEstimates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastKnownEstimates");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lat(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lat");
}

id objc_msgSend_legacyInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "legacyInfo");
}

id objc_msgSend_legacyWiFiBlocklistChannelsFor3FoWiFi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "legacyWiFiBlocklistChannelsFor3FoWiFi");
}

id objc_msgSend_legacyWiFiChannelsToAvoidFor3FoWiFi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "legacyWiFiChannelsToAvoidFor3FoWiFi");
}

id objc_msgSend_legacyWiFiChannelsToAvoidForIMD2GPS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "legacyWiFiChannelsToAvoidForIMD2GPS");
}

id objc_msgSend_legacyWiFiChannelsToAvoidForIMD3Cell(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "legacyWiFiChannelsToAvoidForIMD3Cell");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "length");
}

id objc_msgSend_levelForFactor_withNamespace_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "levelForFactor:withNamespace:");
}

id objc_msgSend_levelForFactor_withNamespaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "levelForFactor:withNamespaceName:");
}

id objc_msgSend_linkPreferenceNotificationRequired(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "linkPreferenceNotificationRequired");
}

id objc_msgSend_linkQuality(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "linkQuality");
}

id objc_msgSend_lng(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lng");
}

id objc_msgSend_loadBTConfigurablePolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadBTConfigurablePolicy:");
}

id objc_msgSend_loadCellularConfigurablePolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadCellularConfigurablePolicy:");
}

id objc_msgSend_loadCoexConfigurablePolicy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadCoexConfigurablePolicy");
}

id objc_msgSend_loadConfigurableActiveFeature_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadConfigurableActiveFeature:");
}

id objc_msgSend_loadDefaultsParam(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadDefaultsParam");
}

id objc_msgSend_loadPersistentStoresWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadPersistentStoresWithCompletionHandler:");
}

id objc_msgSend_loadStaticPolicyFor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadStaticPolicyFor:");
}

id objc_msgSend_loadWiFiConfigurablePolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadWiFiConfigurablePolicy:");
}

id objc_msgSend_loadiRATConfigurablePolicy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadiRATConfigurablePolicy");
}

id objc_msgSend_loads(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loads");
}

id objc_msgSend_locDbRequired(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "locDbRequired");
}

id objc_msgSend_localSenderIdentityUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localSenderIdentityUUID");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizedDescription");
}

id objc_msgSend_location(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "location");
}

id objc_msgSend_lockObjectWifiAntselPolicyStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lockObjectWifiAntselPolicyStats");
}

id objc_msgSend_logLevel_message_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logLevel:message:");
}

id objc_msgSend_logPrint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logPrint");
}

id objc_msgSend_logToFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logToFile:");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "longLongValue");
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lowercaseString");
}

id objc_msgSend_lsmRecommendationBe(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lsmRecommendationBe");
}

id objc_msgSend_lteCDRXTDDMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lteCDRXTDDMode");
}

id objc_msgSend_mActivePhy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mActivePhy");
}

id objc_msgSend_mAirplayCriticalityPercentage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mAirplayCriticalityPercentage");
}

id objc_msgSend_mAirplayDuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mAirplayDuration");
}

id objc_msgSend_mAirplayIsCritical(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mAirplayIsCritical");
}

id objc_msgSend_mApp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mApp");
}

id objc_msgSend_mAwdlEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mAwdlEnabled");
}

id objc_msgSend_mBTConnectedDevicesHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mBTConnectedDevicesHandler");
}

id objc_msgSend_mBandPolicy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mBandPolicy");
}

id objc_msgSend_mBtLinkIsRecommended(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mBtLinkIsRecommended");
}

id objc_msgSend_mBtLinkRecommendationUpdateNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mBtLinkRecommendationUpdateNeeded");
}

id objc_msgSend_mBtPhyRate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mBtPhyRate");
}

id objc_msgSend_mCTService(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCTService");
}

id objc_msgSend_mCacheCellularReportedFullList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCacheCellularReportedFullList");
}

id objc_msgSend_mCacheCellularReportedReducedList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCacheCellularReportedReducedList");
}

id objc_msgSend_mCacheGnssReportedFullList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCacheGnssReportedFullList");
}

id objc_msgSend_mCacheGnssReportedReducedList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCacheGnssReportedReducedList");
}

id objc_msgSend_mCacheWifiReportedFullList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCacheWifiReportedFullList");
}

id objc_msgSend_mCacheWifiReportedReducedList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCacheWifiReportedReducedList");
}

id objc_msgSend_mCarPlayBTScanRelaxReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCarPlayBTScanRelaxReason");
}

id objc_msgSend_mCarPlaySessionInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCarPlaySessionInProgress");
}

id objc_msgSend_mCellAggressor1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCellAggressor1");
}

id objc_msgSend_mCellAggressor2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCellAggressor2");
}

id objc_msgSend_mCellularAntBitmap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCellularAntBitmap");
}

id objc_msgSend_mCellularBand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCellularBand");
}

id objc_msgSend_mCellularBandwidthKHz(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCellularBandwidthKHz");
}

id objc_msgSend_mCellularCoexTech(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCellularCoexTech");
}

id objc_msgSend_mCellularFreqInclusionList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCellularFreqInclusionList");
}

id objc_msgSend_mCellularFreqSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCellularFreqSet");
}

id objc_msgSend_mCellularFrequencyKHz(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCellularFrequencyKHz");
}

id objc_msgSend_mCellularHoppingFreq(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCellularHoppingFreq");
}

id objc_msgSend_mCellularNeighborFreqList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCellularNeighborFreqList");
}

id objc_msgSend_mCellularPccFreq(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCellularPccFreq");
}

id objc_msgSend_mCellularRPLMNFreqList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCellularRPLMNFreqList");
}

id objc_msgSend_mCellularSccFreqList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCellularSccFreqList");
}

id objc_msgSend_mCellularSearchFreqList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCellularSearchFreqList");
}

id objc_msgSend_mCellularTxPowerCap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCellularTxPowerCap");
}

id objc_msgSend_mClassicRssi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mClassicRssi");
}

id objc_msgSend_mCompanionWifiLinkIsRecommended(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCompanionWifiLinkIsRecommended");
}

id objc_msgSend_mCompanionWifiLinkRecommendationUpdateNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mCompanionWifiLinkRecommendationUpdateNeeded");
}

id objc_msgSend_mConditionId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mConditionId");
}

id objc_msgSend_mDenyVoiceProtect(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mDenyVoiceProtect");
}

id objc_msgSend_mDirectWifiLinkIsRecommended(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mDirectWifiLinkIsRecommended");
}

id objc_msgSend_mDirectWifiLinkRecommendationUpdateNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mDirectWifiLinkRecommendationUpdateNeeded");
}

id objc_msgSend_mEnable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mEnable");
}

id objc_msgSend_mEurekaConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mEurekaConfig");
}

id objc_msgSend_mForceUpdateNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mForceUpdateNeeded");
}

id objc_msgSend_mGnssL1FreqList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mGnssL1FreqList");
}

id objc_msgSend_mGnssL5FreqList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mGnssL5FreqList");
}

id objc_msgSend_mGnssL5TunerAllowed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mGnssL5TunerAllowed");
}

id objc_msgSend_mGnssVictimBw_KHz(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mGnssVictimBw_KHz");
}

id objc_msgSend_mGnssVictimFreq_KHz(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mGnssVictimFreq_KHz");
}

id objc_msgSend_mImdType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mImdType");
}

id objc_msgSend_mIsRetry(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mIsRetry");
}

id objc_msgSend_mL5TunerLqmThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mL5TunerLqmThreshold");
}

id objc_msgSend_mLeRssi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mLeRssi");
}

id objc_msgSend_mLeastCongestedChannel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mLeastCongestedChannel");
}

id objc_msgSend_mLeastCongestedChannelCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mLeastCongestedChannelCount");
}

id objc_msgSend_mLocalDeliveryCumulativeMessageDelivered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mLocalDeliveryCumulativeMessageDelivered");
}

id objc_msgSend_mLocalDeliveryCumulativeMessageSent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mLocalDeliveryCumulativeMessageSent");
}

id objc_msgSend_mLocalDeliveryMessageDelivered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mLocalDeliveryMessageDelivered");
}

id objc_msgSend_mLocalDeliveryMessageDeliveredDeliveryError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mLocalDeliveryMessageDeliveredDeliveryError");
}

id objc_msgSend_mLocalDeliveryMessageDeliveredDeliveryErrorMovAvg(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mLocalDeliveryMessageDeliveredDeliveryErrorMovAvg");
}

id objc_msgSend_mLocalDeliveryMessageDeliveredMessageSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mLocalDeliveryMessageDeliveredMessageSize");
}

id objc_msgSend_mLocalDeliveryMessageDeliveredMessageSizeMovAvg(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mLocalDeliveryMessageDeliveredMessageSizeMovAvg");
}

id objc_msgSend_mLocalDeliveryMessageDeliveredMovAvg(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mLocalDeliveryMessageDeliveredMovAvg");
}

id objc_msgSend_mLocalDeliveryMessageDeliveredRTT(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mLocalDeliveryMessageDeliveredRTT");
}

id objc_msgSend_mLocalDeliveryMessageDeliveredRTTMovAvg(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mLocalDeliveryMessageDeliveredRTTMovAvg");
}

id objc_msgSend_mLocalDeliveryMessageReceived(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mLocalDeliveryMessageReceived");
}

id objc_msgSend_mLocalDeliveryMessageReceivedMessageSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mLocalDeliveryMessageReceivedMessageSize");
}

id objc_msgSend_mLocalDeliveryMessageReceivedMessageSizeMovAvg(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mLocalDeliveryMessageReceivedMessageSizeMovAvg");
}

id objc_msgSend_mLocalDeliveryMessageReceivedMovAvg(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mLocalDeliveryMessageReceivedMovAvg");
}

id objc_msgSend_mLocalDeliveryMessageSent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mLocalDeliveryMessageSent");
}

id objc_msgSend_mLocalDeliveryMessageSentMovAvg(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mLocalDeliveryMessageSentMovAvg");
}

id objc_msgSend_mLqmThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mLqmThreshold");
}

id objc_msgSend_mMavCiConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mMavCiConfig");
}

id objc_msgSend_mMavFaceIdPtConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mMavFaceIdPtConfig");
}

id objc_msgSend_mMavPtConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mMavPtConfig");
}

id objc_msgSend_mMavSfPboffConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mMavSfPboffConfig");
}

id objc_msgSend_mMetricsConsiderationPeriod(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mMetricsConsiderationPeriod");
}

id objc_msgSend_mMetricsReportReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mMetricsReportReason");
}

id objc_msgSend_mMitigationRequired(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mMitigationRequired");
}

id objc_msgSend_mMitigationTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mMitigationTimer");
}

id objc_msgSend_mMitigationTimer_ms(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mMitigationTimer_ms");
}

id objc_msgSend_mMitigationType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mMitigationType");
}

id objc_msgSend_mMovingAvgRSSI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mMovingAvgRSSI");
}

id objc_msgSend_mMovingAvgReTxCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mMovingAvgReTxCount");
}

id objc_msgSend_mMovingAvgRxErrorCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mMovingAvgRxErrorCount");
}

id objc_msgSend_mMovingAvgSuccessfulRxCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mMovingAvgSuccessfulRxCount");
}

id objc_msgSend_mMovingAvgSuccessfulTxCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mMovingAvgSuccessfulTxCount");
}

id objc_msgSend_mNanEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mNanEnabled");
}

id objc_msgSend_mNumberofSamples(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mNumberofSamples");
}

id objc_msgSend_mParallelMitigationAllowed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mParallelMitigationAllowed");
}

id objc_msgSend_mPolicy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mPolicy");
}

id objc_msgSend_mPriorityClass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mPriorityClass");
}

id objc_msgSend_mProtectGnssLowPriority(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mProtectGnssLowPriority");
}

id objc_msgSend_mRCU15GHzInUse(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mRCU15GHzInUse");
}

id objc_msgSend_mRCU1ChannelNum(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mRCU1ChannelNum");
}

id objc_msgSend_mRCU1CurrentMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mRCU1CurrentMode");
}

id objc_msgSend_mRCU1CycleLength(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mRCU1CycleLength");
}

id objc_msgSend_mRCU1FrameFormat(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mRCU1FrameFormat");
}

id objc_msgSend_mRCU1NbBandMask(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mRCU1NbBandMask");
}

id objc_msgSend_mRCU1NumberOfCycles(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mRCU1NumberOfCycles");
}

id objc_msgSend_mRCU1OnDuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mRCU1OnDuration");
}

id objc_msgSend_mRCU1PowerOn(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mRCU1PowerOn");
}

id objc_msgSend_mRCU1UseCaseNum(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mRCU1UseCaseNum");
}

id objc_msgSend_mRCU2ChannelActivity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mRCU2ChannelActivity");
}

id objc_msgSend_mRCU2ChannelNum(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mRCU2ChannelNum");
}

id objc_msgSend_mRCU2PowerOn(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mRCU2PowerOn");
}

id objc_msgSend_mRealTimeAwdlTrafficEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mRealTimeAwdlTrafficEnabled");
}

id objc_msgSend_mReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mReason");
}

id objc_msgSend_mReportDuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mReportDuration");
}

id objc_msgSend_mStreamingReportBytesReceived(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mStreamingReportBytesReceived");
}

id objc_msgSend_mStreamingReportBytesSent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mStreamingReportBytesSent");
}

id objc_msgSend_mTerminusContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mTerminusContext");
}

id objc_msgSend_mTerminusIsRegistered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mTerminusIsRegistered");
}

id objc_msgSend_mType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mType");
}

id objc_msgSend_mUsbRate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mUsbRate");
}

id objc_msgSend_mUwbAntBitmap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mUwbAntBitmap");
}

id objc_msgSend_mUwbChannel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mUwbChannel");
}

id objc_msgSend_mWifiFreqList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mWifiFreqList");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mainBundle");
}

id objc_msgSend_mainThread(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mainThread");
}

id objc_msgSend_manageServiceConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "manageServiceConnection");
}

id objc_msgSend_manageServiceDisconnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "manageServiceDisconnection");
}

id objc_msgSend_managedObjectModel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "managedObjectModel:");
}

id objc_msgSend_manufacturer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "manufacturer");
}

id objc_msgSend_mavAntPolicy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mavAntPolicy");
}

id objc_msgSend_mcc(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mcc");
}

id objc_msgSend_mediaStallDetected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mediaStallDetected");
}

id objc_msgSend_metricType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metricType");
}

id objc_msgSend_metrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metrics");
}

id objc_msgSend_miRATProximityClientContexts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "miRATProximityClientContexts");
}

id objc_msgSend_minActiveWiFiAvgTxPktLossRateTh(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minActiveWiFiAvgTxPktLossRateTh");
}

id objc_msgSend_minActiveWiFiCcaTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minActiveWiFiCcaTh0");
}

id objc_msgSend_minActiveWiFiCcaTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minActiveWiFiCcaTh1");
}

id objc_msgSend_minActiveWiFiRssiTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minActiveWiFiRssiTh0");
}

id objc_msgSend_minActiveWiFiRssiTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minActiveWiFiRssiTh1");
}

id objc_msgSend_minActiveWiFiSnrTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minActiveWiFiSnrTh0");
}

id objc_msgSend_minActiveWiFiSnrTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minActiveWiFiSnrTh1");
}

id objc_msgSend_minActiveWiFiTxPktLossRateTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minActiveWiFiTxPktLossRateTh0");
}

id objc_msgSend_minActiveWiFiTxPktLossRateTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minActiveWiFiTxPktLossRateTh1");
}

id objc_msgSend_minIdleWiFiCcaTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minIdleWiFiCcaTh0");
}

id objc_msgSend_minIdleWiFiCcaTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minIdleWiFiCcaTh1");
}

id objc_msgSend_minIdleWiFiFwTxPktLossRateTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minIdleWiFiFwTxPktLossRateTh0");
}

id objc_msgSend_minIdleWiFiFwTxPktLossRateTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minIdleWiFiFwTxPktLossRateTh1");
}

id objc_msgSend_minIdleWiFiRssiTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minIdleWiFiRssiTh0");
}

id objc_msgSend_minIdleWiFiRssiTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minIdleWiFiRssiTh1");
}

id objc_msgSend_minIdleWiFiSnrTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minIdleWiFiSnrTh0");
}

id objc_msgSend_minIdleWiFiSnrTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minIdleWiFiSnrTh1");
}

id objc_msgSend_minIdleWiFiTxPktLossRateTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minIdleWiFiTxPktLossRateTh0");
}

id objc_msgSend_minIdleWiFiTxPktLossRateTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minIdleWiFiTxPktLossRateTh1");
}

id objc_msgSend_minMovSigBarTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minMovSigBarTh0");
}

id objc_msgSend_minSigBarTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minSigBarTh0");
}

id objc_msgSend_minSigBarTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minSigBarTh1");
}

id objc_msgSend_minSigBarTh2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minSigBarTh2");
}

id objc_msgSend_minWiFiBeaconPerTh0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minWiFiBeaconPerTh0");
}

id objc_msgSend_minWiFiBeaconPerTh1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minWiFiBeaconPerTh1");
}

id objc_msgSend_mitigationType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mitigationType");
}

id objc_msgSend_mitigationTypeEnumCheck_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mitigationTypeEnumCheck:");
}

id objc_msgSend_mnc(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mnc");
}

id objc_msgSend_mobCountUpdate::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mobCountUpdate::");
}

id objc_msgSend_mobilityContextStale(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mobilityContextStale");
}

id objc_msgSend_mobilityStateAwarenessEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mobilityStateAwarenessEnabled");
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "model");
}

id objc_msgSend_modelIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modelIdentifier");
}

id objc_msgSend_modelNumber(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modelNumber");
}

id objc_msgSend_modelURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modelURL");
}

id objc_msgSend_modelWithContentsOfURL_configuration_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modelWithContentsOfURL:configuration:error:");
}

id objc_msgSend_modelWithContentsOfURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modelWithContentsOfURL:error:");
}

id objc_msgSend_monitorTransportMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "monitorTransportMetrics");
}

id objc_msgSend_movAvgIdleRxPktLoss(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "movAvgIdleRxPktLoss");
}

id objc_msgSend_movAvgNominalJitterBufferDelay(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "movAvgNominalJitterBufferDelay");
}

id objc_msgSend_movAvgRxPktLoss(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "movAvgRxPktLoss");
}

id objc_msgSend_movingAverageSignalBars(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "movingAverageSignalBars");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "name");
}

id objc_msgSend_nameForNetworkType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nameForNetworkType:");
}

id objc_msgSend_nbChannelToAvoidEnd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nbChannelToAvoidEnd");
}

id objc_msgSend_nbChannelToAvoidStart(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nbChannelToAvoidStart");
}

id objc_msgSend_needCellTxPowerConstraintOnCellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_wifiChannel_gpsRadioActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "needCellTxPowerConstraintOnCellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:wifiChannel:gpsRadioActive:");
}

id objc_msgSend_needCellTxPowerConstraintWiFiEnhOnCellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_wifiChannel_wifiCenterFreq_wifiBandwidth_gpsRadioActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "needCellTxPowerConstraintWiFiEnhOnCellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:wifiChannel:wifiCenterFreq:wifiBandwidth:gpsRadioActive:");
}

id objc_msgSend_needWiFiAntennaConstraintOnCellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_wifiChannel_gpsRadioActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "needWiFiAntennaConstraintOnCellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:wifiChannel:gpsRadioActive:");
}

id objc_msgSend_needWiFiAntennaConstraintWiFiEnhOnCellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_wifiChannel_wifiCenterFreq_wifiBandwidth_gpsRadioActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "needWiFiAntennaConstraintWiFiEnhOnCellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:wifiChannel:wifiCenterFreq:wifiBandwidth:gpsRadioActive:");
}

id objc_msgSend_needWiFiLQM(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "needWiFiLQM");
}

id objc_msgSend_neighberCellType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "neighberCellType");
}

id objc_msgSend_networkType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkType");
}

id objc_msgSend_newControllerForProcessId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newControllerForProcessId:");
}

id objc_msgSend_newRadioCoverage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newRadioCoverage");
}

id objc_msgSend_newRadioMmWaveDataBearer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newRadioMmWaveDataBearer");
}

id objc_msgSend_newRadioNsaCoverage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newRadioNsaCoverage");
}

id objc_msgSend_newRadioSaCoverage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newRadioSaCoverage");
}

id objc_msgSend_newRadioSub6DataBearer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newRadioSub6DataBearer");
}

id objc_msgSend_newTestControllerForProcessId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newTestControllerForProcessId:");
}

id objc_msgSend_nominalJitterBufferDelay(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nominalJitterBufferDelay");
}

id objc_msgSend_nonCbrsEnterRsrpMin(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nonCbrsEnterRsrpMin");
}

id objc_msgSend_nonCbrsEnterRsrqMin(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nonCbrsEnterRsrqMin");
}

id objc_msgSend_nonCbrsExitRsrpMin(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nonCbrsExitRsrpMin");
}

id objc_msgSend_nonCbrsExitRsrqMin(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nonCbrsExitRsrqMin");
}

id objc_msgSend_notifyBBCallState__::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyBBCallState::::");
}

id objc_msgSend_notifyBBCallState___::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyBBCallState:::::");
}

id objc_msgSend_notifyBBVoIPState__::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyBBVoIPState::::");
}

id objc_msgSend_notifyDuplicationState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyDuplicationState:");
}

id objc_msgSend_notifyHandoverManager_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyHandoverManager:");
}

id objc_msgSend_notifyRecommendations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyRecommendations");
}

id objc_msgSend_notifyRegisteredClientsForExperimentEnd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyRegisteredClientsForExperimentEnd");
}

id objc_msgSend_notifyRegisteredClientsForExperimentStart_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyRegisteredClientsForExperimentStart:");
}

id objc_msgSend_notifyScreenStatePassCodeNotEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyScreenStatePassCodeNotEnabled:");
}

id objc_msgSend_notifyStreamingState::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyStreamingState::");
}

id objc_msgSend_notifyWifiCallState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyWifiCallState:");
}

id objc_msgSend_notifylowPowerModePeriodicWakeUp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifylowPowerModePeriodicWakeUp");
}

id objc_msgSend_nrCellRSRP(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nrCellRSRP");
}

id objc_msgSend_nrCellRSRQ(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nrCellRSRQ");
}

id objc_msgSend_nrCellSNR(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nrCellSNR");
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "null");
}

id objc_msgSend_num2GHzAoSBiAudioDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "num2GHzAoSBiAudioDevice");
}

id objc_msgSend_num2GHzAoSUniAudioDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "num2GHzAoSUniAudioDevice");
}

id objc_msgSend_num5GHzAoSBiAudioDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "num5GHzAoSBiAudioDevice");
}

id objc_msgSend_num5GHzAoSUniAudioDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "num5GHzAoSUniAudioDevice");
}

id objc_msgSend_numConnections(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numConnections");
}

id objc_msgSend_numGameCtrlDev10ms(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numGameCtrlDev10ms");
}

id objc_msgSend_numGameCtrlDev75ms(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numGameCtrlDev75ms");
}

id objc_msgSend_numHIDDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numHIDDevice");
}

id objc_msgSend_numLEADevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numLEADevice");
}

id objc_msgSend_numLEDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numLEDevice");
}

id objc_msgSend_numLLADevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numLLADevice");
}

id objc_msgSend_numSCODevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numSCODevice");
}

id objc_msgSend_numberOfSpatialStreams(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberOfSpatialStreams");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithChar_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithChar:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithShort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithShort:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedShort:");
}

id objc_msgSend_numberofSubscriptions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberofSubscriptions");
}

id objc_msgSend_numeSCODevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numeSCODevice");
}

id objc_msgSend_nwType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nwType");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "object");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKey_ofClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKey:ofClass:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectsAtIndexes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectsAtIndexes:");
}

id objc_msgSend_onBleBeaconReceived_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onBleBeaconReceived:");
}

id objc_msgSend_p2pAssistanceEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "p2pAssistanceEnabled");
}

id objc_msgSend_p2pAwdlController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "p2pAwdlController");
}

id objc_msgSend_p2pNanController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "p2pNanController");
}

id objc_msgSend_packetLifetimeVIBE(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "packetLifetimeVIBE");
}

id objc_msgSend_packetLossRateVIBE(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "packetLossRateVIBE");
}

id objc_msgSend_parseCenterFreqtoUNIIBand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parseCenterFreqtoUNIIBand:");
}

id objc_msgSend_parseRegistrationStatusForBiomeStream_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parseRegistrationStatusForBiomeStream:");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "path");
}

id objc_msgSend_pathForResource_ofType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathForResource:ofType:");
}

id objc_msgSend_pencilState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pencilState");
}

id objc_msgSend_performBlockAndWait_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performBlockAndWait:");
}

id objc_msgSend_performSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performSelector:");
}

id objc_msgSend_performanceTestWithConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performanceTestWithConfiguration:");
}

id objc_msgSend_periodicReportInterval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "periodicReportInterval");
}

id objc_msgSend_persistentContainer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persistentContainer");
}

id objc_msgSend_pingPongAvoidanceThresholdRunning(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pingPongAvoidanceThresholdRunning");
}

id objc_msgSend_pingPongAvoidanceThresholdStationary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pingPongAvoidanceThresholdStationary");
}

id objc_msgSend_pingPongAvoidanceThresholdWalking(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pingPongAvoidanceThresholdWalking");
}

id objc_msgSend_platformManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "platformManager");
}

id objc_msgSend_poorConnectionDetected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "poorConnectionDetected");
}

id objc_msgSend_postBBNotification::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postBBNotification::");
}

id objc_msgSend_postBluetoothLQMScore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postBluetoothLQMScore:");
}

id objc_msgSend_postLinkPreference_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postLinkPreference:");
}

id objc_msgSend_postiRATNotificationToEnableDisableCellData::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postiRATNotificationToEnableDisableCellData::");
}

id objc_msgSend_powerState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "powerState");
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateWithFormat:");
}

id objc_msgSend_predictionFromFeatures_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionFromFeatures:error:");
}

id objc_msgSend_predictionFromFeatures_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionFromFeatures:options:error:");
}

id objc_msgSend_predictionsFromBatch_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionsFromBatch:options:error:");
}

id objc_msgSend_prevNR41RFEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prevNR41RFEnabled");
}

id objc_msgSend_prevNR7xRFEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prevNR7xRFEnabled");
}

id objc_msgSend_prevULFrequencyUpdate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prevULFrequencyUpdate");
}

id objc_msgSend_previousStartTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "previousStartTime");
}

id objc_msgSend_primaryAudioPacketLossRate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "primaryAudioPacketLossRate");
}

id objc_msgSend_primaryAudioPacketReceived(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "primaryAudioPacketReceived");
}

id objc_msgSend_primaryVideoPacketLossRate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "primaryVideoPacketLossRate");
}

id objc_msgSend_primaryVideoPacketReceived(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "primaryVideoPacketReceived");
}

id objc_msgSend_printAFHMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "printAFHMap:");
}

id objc_msgSend_printBLEAFHMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "printBLEAFHMap:");
}

id objc_msgSend_printBTConnInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "printBTConnInfo");
}

id objc_msgSend_printBTConnections(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "printBTConnections");
}

id objc_msgSend_printGnssImdConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "printGnssImdConfig:");
}

id objc_msgSend_printHFBTChannelMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "printHFBTChannelMap:");
}

id objc_msgSend_printPlatformConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "printPlatformConfig");
}

id objc_msgSend_printStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "printStatus:");
}

id objc_msgSend_printStatus_withLogLevel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "printStatus:withLogLevel:");
}

id objc_msgSend_printiRATConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "printiRATConfig");
}

id objc_msgSend_private_queue_context(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "private_queue_context");
}

id objc_msgSend_processDynamicAntennaBlocking(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processDynamicAntennaBlocking");
}

id objc_msgSend_processPrivateNwPreferredOverWifiStatus_slot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processPrivateNwPreferredOverWifiStatus:slot:");
}

id objc_msgSend_processPrivateNwSimStatus_slot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processPrivateNwSimStatus:slot:");
}

id objc_msgSend_processRegistrationStatus::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processRegistrationStatus::");
}

id objc_msgSend_processVolteStatus::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processVolteStatus::");
}

id objc_msgSend_processWiFiCallingStatus::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processWiFiCallingStatus::");
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_provider(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "provider");
}

id objc_msgSend_providerContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "providerContext");
}

id objc_msgSend_providerIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "providerIdentifier");
}

id objc_msgSend_purgeStaleMobilityContexts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "purgeStaleMobilityContexts");
}

id objc_msgSend_qmiClientEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "qmiClientEnabled");
}

id objc_msgSend_queryHPCellularInitialState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queryHPCellularInitialState");
}

id objc_msgSend_queryInterfaceStats___::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queryInterfaceStats:::::");
}

id objc_msgSend_queryLocationdDBForHarvestingData::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queryLocationdDBForHarvestingData::");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queue");
}

id objc_msgSend_radioCoverage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "radioCoverage");
}

id objc_msgSend_radioFrequency(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "radioFrequency");
}

id objc_msgSend_radioTechnology(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "radioTechnology");
}

id objc_msgSend_rbThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rbThreshold");
}

id objc_msgSend_rc1duration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rc1duration");
}

id objc_msgSend_rc1priority(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rc1priority");
}

id objc_msgSend_rcu1Controller(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rcu1Controller");
}

id objc_msgSend_rcu2Controller(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rcu2Controller");
}

id objc_msgSend_readAntBlockPowerLimitPolicyPlist(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readAntBlockPowerLimitPolicyPlist");
}

id objc_msgSend_readParametersFromPlist_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readParametersFromPlist:");
}

id objc_msgSend_readRDCountryCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readRDCountryCode");
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reason");
}

id objc_msgSend_reconfigureClientAntBlockingParamsWithCellAntBlkEnableIdx1_cellAntBlkEnableIdx2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reconfigureClientAntBlockingParamsWithCellAntBlkEnableIdx1:cellAntBlkEnableIdx2:");
}

id objc_msgSend_refresh(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "refresh");
}

id objc_msgSend_registerForCTNotifications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForCTNotifications");
}

id objc_msgSend_registerForLocalNotifications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForLocalNotifications");
}

id objc_msgSend_registerForSCNotifications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForSCNotifications");
}

id objc_msgSend_registerIOkitStateEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerIOkitStateEvent");
}

id objc_msgSend_registerQmiIndHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerQmiIndHandler");
}

id objc_msgSend_registerSFOutrankDecisionNotification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerSFOutrankDecisionNotification");
}

id objc_msgSend_registerSFRestartNotification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerSFRestartNotification");
}

id objc_msgSend_registerThermalTimeToThrottleNotification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerThermalTimeToThrottleNotification");
}

id objc_msgSend_registerWebkitStreamingNotification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerWebkitStreamingNotification");
}

id objc_msgSend_registeredWithCellularNetwork(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registeredWithCellularNetwork");
}

id objc_msgSend_registrationDisplayStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registrationDisplayStatus");
}

id objc_msgSend_reloadAriDriverSettingsFromPreferences(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reloadAriDriverSettingsFromPreferences");
}

id objc_msgSend_reloadCellularSpeedTestSettingsFromPreferences(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reloadCellularSpeedTestSettingsFromPreferences");
}

id objc_msgSend_reloadLogSettingsFromPreferences(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reloadLogSettingsFromPreferences");
}

id objc_msgSend_reloadiRATSettingsFromPreferences(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reloadiRATSettingsFromPreferences");
}

id objc_msgSend_removals(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removals");
}

id objc_msgSend_removeAllFreq(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllFreq");
}

id objc_msgSend_removeAllMobilityContextsFromList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllMobilityContextsFromList");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeBTConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeBTConnection:");
}

id objc_msgSend_removeFreqFromArray_centerFreq_bandwidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeFreqFromArray:centerFreq:bandwidth:");
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeItemAtPath:error:");
}

id objc_msgSend_removeKey_subId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeKey:subId:");
}

id objc_msgSend_removeMobilityContextFromList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeMobilityContextFromList:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removeiRatClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeiRatClient:");
}

id objc_msgSend_replaceObjectAtIndex_withObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "replaceObjectAtIndex:withObject:");
}

id objc_msgSend_replayCachedEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "replayCachedEvent");
}

id objc_msgSend_reportCellConnectionQualityHarvestRecord_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportCellConnectionQualityHarvestRecord:");
}

id objc_msgSend_reportWiFiError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportWiFiError");
}

id objc_msgSend_reportedChannelCenterFreqMHz(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportedChannelCenterFreqMHz");
}

id objc_msgSend_requestBTStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestBTStatus");
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reset");
}

id objc_msgSend_reset5GVersusWiFiMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reset5GVersusWiFiMetrics");
}

id objc_msgSend_resetActiveCallEvaluationMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetActiveCallEvaluationMetrics");
}

id objc_msgSend_resetBTCoexStatsMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetBTCoexStatsMetrics");
}

id objc_msgSend_resetBtMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetBtMetrics");
}

id objc_msgSend_resetCbrsCAMetricSentOnSimSlot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetCbrsCAMetricSentOnSimSlot:");
}

id objc_msgSend_resetCumulativeCounters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetCumulativeCounters");
}

id objc_msgSend_resetCumulativeIdsMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetCumulativeIdsMetrics");
}

id objc_msgSend_resetCumulativeRTPMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetCumulativeRTPMetrics");
}

id objc_msgSend_resetFaceTimeHandover(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetFaceTimeHandover");
}

id objc_msgSend_resetHPCellularCoexStatsMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetHPCellularCoexStatsMetrics");
}

id objc_msgSend_resetIDSMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetIDSMetrics");
}

id objc_msgSend_resetIMSMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetIMSMetrics");
}

id objc_msgSend_resetMovAverageOfSignalBar(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetMovAverageOfSignalBar");
}

id objc_msgSend_resetPeriodicRTPStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetPeriodicRTPStats");
}

id objc_msgSend_resetRTPMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetRTPMetrics");
}

id objc_msgSend_resetStandaloneLinkPreferenceMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetStandaloneLinkPreferenceMetrics");
}

id objc_msgSend_resetStationCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetStationCount:");
}

id objc_msgSend_resetStreaming(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetStreaming");
}

id objc_msgSend_resetWghtAverageMetricsFlag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetWghtAverageMetricsFlag");
}

id objc_msgSend_resetWiFiBWEstimationState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetWiFiBWEstimationState");
}

id objc_msgSend_resetWiFiCallingEnd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetWiFiCallingEnd");
}

id objc_msgSend_resumeExternalConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resumeExternalConnection");
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reverseObjectEnumerator");
}

id objc_msgSend_revertFaceTimeThToAzul(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "revertFaceTimeThToAzul");
}

id objc_msgSend_rrcState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rrcState");
}

id objc_msgSend_rssiHysterisisRunning(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rssiHysterisisRunning");
}

id objc_msgSend_rssiHysterisisWalking(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rssiHysterisisWalking");
}

id objc_msgSend_rtpMetricsEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rtpMetricsEnabled");
}

id objc_msgSend_rtpMetricsReportingStarted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rtpMetricsReportingStarted");
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "run");
}

id objc_msgSend_rxPktLoss(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rxPktLoss");
}

id objc_msgSend_rxPriThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rxPriThreshold");
}

id objc_msgSend_rxRtpMetricsSampleCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rxRtpMetricsSampleCount");
}

id objc_msgSend_rxSpeechPktLoss(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rxSpeechPktLoss");
}

id objc_msgSend_sacCreateRawFreqList_bufferSize_buffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacCreateRawFreqList:bufferSize:buffer:");
}

id objc_msgSend_sacExtractDesenseFreq_message_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacExtractDesenseFreq:message:");
}

id objc_msgSend_sacGetPlatformPlistIdx_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacGetPlatformPlistIdx:");
}

id objc_msgSend_sacManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacManager");
}

id objc_msgSend_sacProcessCellularMeasFreqInfo_onSubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacProcessCellularMeasFreqInfo:onSubId:");
}

id objc_msgSend_sacProcessCellularPrimaryFreqInfo_onSubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacProcessCellularPrimaryFreqInfo:onSubId:");
}

id objc_msgSend_sacProcessCellularSecondaryFreqInfo_onSubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacProcessCellularSecondaryFreqInfo:onSubId:");
}

id objc_msgSend_sacProcessGnssFreqInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacProcessGnssFreqInfo:");
}

id objc_msgSend_sacProcessWiFiFreqInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacProcessWiFiFreqInfo:");
}

id objc_msgSend_sacRemoveAllGnssFreq(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacRemoveAllGnssFreq");
}

id objc_msgSend_sacReportCellularVictimFreqListOnTargetSac_action_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacReportCellularVictimFreqListOnTargetSac:action:");
}

id objc_msgSend_sacReportGnssVictimFreqListOnTargetSac_action_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacReportGnssVictimFreqListOnTargetSac:action:");
}

id objc_msgSend_sacReportWifiVictimFreqListOnTargetSac_action_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacReportWifiVictimFreqListOnTargetSac:action:");
}

id objc_msgSend_sacScreenAllFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacScreenAllFreq:");
}

id objc_msgSend_sacScreenFreq_freqRangeObj_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacScreenFreq:freqRangeObj:");
}

id objc_msgSend_sacSetCellularSubActiveState_onSubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacSetCellularSubActiveState:onSubId:");
}

id objc_msgSend_sacSortFreqByPriority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacSortFreqByPriority:");
}

id objc_msgSend_sacUpdateCellularDownlinkFreqInfo_onSubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacUpdateCellularDownlinkFreqInfo:onSubId:");
}

id objc_msgSend_sacUpdateCellularHoppingFreqInfo_onSubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacUpdateCellularHoppingFreqInfo:onSubId:");
}

id objc_msgSend_sacUpdateCellularNeighborFreqInfo_onSubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacUpdateCellularNeighborFreqInfo:onSubId:");
}

id objc_msgSend_sacUpdateCellularRPLMNFreqInfo_onSubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacUpdateCellularRPLMNFreqInfo:onSubId:");
}

id objc_msgSend_sacUpdateCellularSearchFreqInfo_onSubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacUpdateCellularSearchFreqInfo:onSubId:");
}

id objc_msgSend_sacUpdateGnssFreqInfo_L5Freq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacUpdateGnssFreqInfo:L5Freq:");
}

id objc_msgSend_sacUpdateWiFiFreqInfo_Bandwidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacUpdateWiFiFreqInfo:Bandwidth:");
}

id objc_msgSend_sacWifiFrequency(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sacWifiFrequency");
}

id objc_msgSend_save_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "save:");
}

id objc_msgSend_scanInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scanInt:");
}

id objc_msgSend_scanString_intoString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scanString:intoString:");
}

id objc_msgSend_scannerWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scannerWithString:");
}

id objc_msgSend_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:");
}

id objc_msgSend_seekToEndOfFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "seekToEndOfFile");
}

id objc_msgSend_selectBandWithPreferredBands_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "selectBandWithPreferredBands:");
}

id objc_msgSend_selectBand_preferred_prohibited_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "selectBand_preferred:prohibited:");
}

id objc_msgSend_sendBBCameraState_state_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendBBCameraState:state:");
}

id objc_msgSend_sendBBCoexSensorMessage_band_usecase_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendBBCoexSensorMessage:band:usecase:");
}

id objc_msgSend_sendBTStatusToWiFi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendBTStatusToWiFi");
}

id objc_msgSend_sendBandSwitchRejectToBT_targetBand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendBandSwitchRejectToBT:targetBand:");
}

id objc_msgSend_sendBandSwitchRequestToWiFi_targetBand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendBandSwitchRequestToWiFi:targetBand:");
}

id objc_msgSend_sendChannelQualityToBT_quality_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendChannelQualityToBT:quality:");
}

id objc_msgSend_sendEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendEvent:");
}

id objc_msgSend_sendFaceIDPowerTables(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendFaceIDPowerTables");
}

id objc_msgSend_sendGetBandSwitchStatusToWiFi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendGetBandSwitchStatusToWiFi");
}

id objc_msgSend_sendGetChannelQualityInfoToWiFi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendGetChannelQualityInfoToWiFi");
}

id objc_msgSend_sendGetNanPhsStateToWiFi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendGetNanPhsStateToWiFi");
}

id objc_msgSend_sendGetRegulatoryInfoToWiFi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendGetRegulatoryInfoToWiFi");
}

id objc_msgSend_sendMavConfigitems(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendMavConfigitems");
}

id objc_msgSend_sendMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendMessage:");
}

id objc_msgSend_sendMessage_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendMessage:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_sendMessage_withArgs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendMessage:withArgs:");
}

id objc_msgSend_sendMessage_withArgs_withExtraKey_andExtraValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendMessage:withArgs:withExtraKey:andExtraValue:");
}

id objc_msgSend_sendMessage_withArgs_withSubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendMessage:withArgs:withSubId:");
}

id objc_msgSend_sendMessage_withValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendMessage:withValue:");
}

id objc_msgSend_sendMessageForProcess_withArgs_forProcess_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendMessageForProcess:withArgs:forProcess:");
}

id objc_msgSend_sendMessageToAriDriver_withArgs_withExtraKey_andExtraValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendMessageToAriDriver:withArgs:withExtraKey:andExtraValue:");
}

id objc_msgSend_sendNRFrequencyBandUpdateForMic_dlHighFreq_ulLowFreq_ulHighFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendNRFrequencyBandUpdateForMic:dlHighFreq:ulLowFreq:ulHighFreq:");
}

id objc_msgSend_sendNRFrequencyUpdateForMic_NR7xenabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendNRFrequencyUpdateForMic:NR7xenabled:");
}

id objc_msgSend_sendNasConfigSigInfo2Request(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendNasConfigSigInfo2Request");
}

id objc_msgSend_sendNasIndicationRegister(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendNasIndicationRegister");
}

id objc_msgSend_sendPrivateNwVsMacroRecommendation_currentSlotQuality_anyCallState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendPrivateNwVsMacroRecommendation:currentSlotQuality:anyCallState:");
}

id objc_msgSend_sendRCU1Message_wifiBand_btPowerState_btBand_isForce_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendRCU1Message:wifiBand:btPowerState:btBand:isForce:");
}

id objc_msgSend_sendRCU2UpdateMessage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendRCU2UpdateMessage");
}

id objc_msgSend_sendRc1Message_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendRc1Message:");
}

id objc_msgSend_sendSetFrequencyBandToBT_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendSetFrequencyBandToBT:");
}

id objc_msgSend_sendSetFrequencyBandToBT_forced_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendSetFrequencyBandToBT:forced:");
}

id objc_msgSend_sendULFrequencyUpdates_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendULFrequencyUpdates:");
}

id objc_msgSend_sendULFrequencyUpdates_ulCenterFreq_ulBandwidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendULFrequencyUpdates:ulCenterFreq:ulBandwidth:");
}

id objc_msgSend_sendWiFiStatusToBT(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendWiFiStatusToBT");
}

id objc_msgSend_sendWirelessBtLoad_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendWirelessBtLoad:");
}

id objc_msgSend_sendWrmSdmLocationDbInfo_dbAvailable_mcc_mnc_cellId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendWrmSdmLocationDbInfo:dbAvailable:mcc:mnc:cellId:");
}

id objc_msgSend_sendiRATRecommendationToWatch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendiRATRecommendationToWatch:");
}

id objc_msgSend_servCellECIO(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "servCellECIO");
}

id objc_msgSend_servCellRSCP(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "servCellRSCP");
}

id objc_msgSend_servCellRSRP(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "servCellRSRP");
}

id objc_msgSend_servCellRSRQ(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "servCellRSRQ");
}

id objc_msgSend_servCellRSSI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "servCellRSSI");
}

id objc_msgSend_servCellRadioTechnologyType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "servCellRadioTechnologyType");
}

id objc_msgSend_servCellSINR(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "servCellSINR");
}

id objc_msgSend_servCellSNR(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "servCellSNR");
}

id objc_msgSend_serverQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serverQueue");
}

id objc_msgSend_service(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "service");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "set");
}

id objc_msgSend_setActiveConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActiveConfig:");
}

id objc_msgSend_setActiveProfileFor2G_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActiveProfileFor2G:");
}

id objc_msgSend_setActiveProfileFor5G_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActiveProfileFor5G:");
}

id objc_msgSend_setActiveSlot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActiveSlot:");
}

id objc_msgSend_setActiveSubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActiveSubId:");
}

id objc_msgSend_setAdaptationPaceketLoss_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAdaptationPaceketLoss:");
}

id objc_msgSend_setAirplayController_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAirplayController:");
}

id objc_msgSend_setAllCCConfig_SubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllCCConfig:SubId:");
}

id objc_msgSend_setAllCriticalCarriers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllCriticalCarriers");
}

id objc_msgSend_setAllPolicies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllPolicies");
}

id objc_msgSend_setAntBlockingParams(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAntBlockingParams");
}

id objc_msgSend_setAntennaBlockingPolicyForPlatformId_activeSubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAntennaBlockingPolicyForPlatformId:activeSubId:");
}

id objc_msgSend_setAntennaConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAntennaConfig:");
}

id objc_msgSend_setAntennaSelection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAntennaSelection:");
}

id objc_msgSend_setAntennaSelectionEnh2G_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAntennaSelectionEnh2G:");
}

id objc_msgSend_setAntennaSelectionEnh5G_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAntennaSelectionEnh5G:");
}

id objc_msgSend_setAntennaSelectionEnh6G_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAntennaSelectionEnh6G:");
}

id objc_msgSend_setAntennaSelectionWiFiEnh_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAntennaSelectionWiFiEnh:");
}

id objc_msgSend_setAoSDeviceID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAoSDeviceID:");
}

id objc_msgSend_setApplicationType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setApplicationType:");
}

id objc_msgSend_setArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setArray:");
}

id objc_msgSend_setAudioBuiltInReceiver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAudioBuiltInReceiver:");
}

id objc_msgSend_setAudioPacketExpected_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAudioPacketExpected:");
}

id objc_msgSend_setAudioType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAudioType:");
}

id objc_msgSend_setAveragedNominalJitterBufferDelay_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAveragedNominalJitterBufferDelay:");
}

id objc_msgSend_setAvgRxPktLoss_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAvgRxPktLoss:");
}

id objc_msgSend_setBBSAState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBBSAState:");
}

id objc_msgSend_setBBSAState::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBBSAState::");
}

id objc_msgSend_setBBSAState_::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBBSAState:::");
}

id objc_msgSend_setBHPCellSetBTAFH_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBHPCellSetBTAFH:");
}

id objc_msgSend_setBLEActiveScanPwrLmtAssrInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBLEActiveScanPwrLmtAssrInt:");
}

id objc_msgSend_setBandInfoType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBandInfoType:");
}

id objc_msgSend_setBandwidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBandwidth:");
}

id objc_msgSend_setBars_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBars:");
}

id objc_msgSend_setBaseBandEnabledProtectionTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBaseBandEnabledProtectionTimer:");
}

id objc_msgSend_setBeaconPER_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBeaconPER:");
}

id objc_msgSend_setBlockReporting_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBlockReporting:");
}

id objc_msgSend_setBssid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBssid:");
}

id objc_msgSend_setBtAgcCoexModeEnable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtAgcCoexModeEnable:");
}

id objc_msgSend_setBtController_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtController:");
}

id objc_msgSend_setBtDiversityChannelMapForC0B0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtDiversityChannelMapForC0B0:");
}

id objc_msgSend_setBtDiversityChannelMapForC0B1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtDiversityChannelMapForC0B1:");
}

id objc_msgSend_setBtDiversityChannelMapForC1B0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtDiversityChannelMapForC1B0:");
}

id objc_msgSend_setBtDiversityChannelMapForC1B1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtDiversityChannelMapForC1B1:");
}

id objc_msgSend_setBtDiversityChannelMapOnGpsRadioActiveForC0B0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtDiversityChannelMapOnGpsRadioActiveForC0B0:");
}

id objc_msgSend_setBtDiversityChannelMapOnGpsRadioActiveForC0B1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtDiversityChannelMapOnGpsRadioActiveForC0B1:");
}

id objc_msgSend_setBtDiversityChannelMapOnGpsRadioActiveForC1B0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtDiversityChannelMapOnGpsRadioActiveForC1B0:");
}

id objc_msgSend_setBtDiversityChannelMapOnGpsRadioActiveForC1B1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtDiversityChannelMapOnGpsRadioActiveForC1B1:");
}

id objc_msgSend_setBtMetricsEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtMetricsEnabled:");
}

id objc_msgSend_setBtMovingAvgRSSI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtMovingAvgRSSI:");
}

id objc_msgSend_setBtPreferred5GChannelMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtPreferred5GChannelMap:");
}

id objc_msgSend_setBtPreferredChannelMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtPreferredChannelMap:");
}

id objc_msgSend_setBtPreferredChannelMapHPCellularActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtPreferredChannelMapHPCellularActive:");
}

id objc_msgSend_setBtPreferredChannelMapOnGpsRadioActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtPreferredChannelMapOnGpsRadioActive:");
}

id objc_msgSend_setBtPreferredRole_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtPreferredRole:");
}

id objc_msgSend_setBtRSSI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtRSSI:");
}

id objc_msgSend_setBtRetransmissionRateRx_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtRetransmissionRateRx:");
}

id objc_msgSend_setBtRetransmissionRateTx_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtRetransmissionRateTx:");
}

id objc_msgSend_setBtTech_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBtTech:");
}

id objc_msgSend_setBufferedAppType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBufferedAppType:");
}

id objc_msgSend_setBufferedLinkType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBufferedLinkType:");
}

id objc_msgSend_setCC1CarrierId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCC1CarrierId:");
}

id objc_msgSend_setCC1Config_SubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCC1Config:SubId:");
}

id objc_msgSend_setCC1Tech_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCC1Tech:");
}

id objc_msgSend_setCC2CarrierId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCC2CarrierId:");
}

id objc_msgSend_setCC2Config_SubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCC2Config:SubId:");
}

id objc_msgSend_setCC2Tech_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCC2Tech:");
}

id objc_msgSend_setCTClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCTClient:");
}

id objc_msgSend_setCTClientInitDone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCTClientInitDone:");
}

id objc_msgSend_setCTRrcState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCTRrcState:");
}

id objc_msgSend_setCallActiveState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCallActiveState:");
}

id objc_msgSend_setCallIdPrimaryLatteCall_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCallIdPrimaryLatteCall:");
}

id objc_msgSend_setCallInConference_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCallInConference:");
}

id objc_msgSend_setCallOnHold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCallOnHold:");
}

id objc_msgSend_setCallState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCallState:");
}

id objc_msgSend_setCallType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCallType:");
}

id objc_msgSend_setCamAntBlockingPowerLimitingConfig_SubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCamAntBlockingPowerLimitingConfig:SubId:");
}

id objc_msgSend_setCamAntBlockingPowerLimitingParam_XpcMessage_SubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCamAntBlockingPowerLimitingParam:XpcMessage:SubId:");
}

id objc_msgSend_setCameraState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCameraState:");
}

id objc_msgSend_setCameraState_SubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCameraState:SubId:");
}

id objc_msgSend_setCatsAppBitmap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCatsAppBitmap:");
}

id objc_msgSend_setCatsAppPriority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCatsAppPriority:");
}

id objc_msgSend_setCatsState_bitmap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCatsState:bitmap:");
}

id objc_msgSend_setCbrsCoreAnalyticsMetricsSent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCbrsCoreAnalyticsMetricsSent:");
}

id objc_msgSend_setCbrsEnterRsrpMin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCbrsEnterRsrpMin:");
}

id objc_msgSend_setCbrsEnterRsrpOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCbrsEnterRsrpOffset:");
}

id objc_msgSend_setCbrsEnterRsrqMin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCbrsEnterRsrqMin:");
}

id objc_msgSend_setCbrsEnterRsrqOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCbrsEnterRsrqOffset:");
}

id objc_msgSend_setCbrsExitRsrpMin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCbrsExitRsrpMin:");
}

id objc_msgSend_setCbrsExitRsrpOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCbrsExitRsrpOffset:");
}

id objc_msgSend_setCbrsExitRsrqMin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCbrsExitRsrqMin:");
}

id objc_msgSend_setCbrsExitRsrqOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCbrsExitRsrqOffset:");
}

id objc_msgSend_setCdrxTDDEnabledChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCdrxTDDEnabledChannels:");
}

id objc_msgSend_setCellARFCN_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellARFCN:");
}

id objc_msgSend_setCellAggressor1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellAggressor1:");
}

id objc_msgSend_setCellAggressor2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellAggressor2:");
}

id objc_msgSend_setCellAgressorAntBitmap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellAgressorAntBitmap:");
}

id objc_msgSend_setCellBand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellBand:");
}

id objc_msgSend_setCellBandInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellBandInfo:");
}

id objc_msgSend_setCellBandwidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellBandwidth:");
}

id objc_msgSend_setCellDataLQM_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellDataLQM:");
}

id objc_msgSend_setCellID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellID:");
}

id objc_msgSend_setCellLteRSRP_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellLteRSRP:");
}

id objc_msgSend_setCellLteRSRQ_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellLteRSRQ:");
}

id objc_msgSend_setCellLteSNR_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellLteSNR:");
}

id objc_msgSend_setCellNrRSRP_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellNrRSRP:");
}

id objc_msgSend_setCellNrRSRQ_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellNrRSRQ:");
}

id objc_msgSend_setCellNrSNR_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellNrSNR:");
}

id objc_msgSend_setCellRatType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellRatType:");
}

id objc_msgSend_setCellTxPowerCap_16th_dBm_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellTxPowerCap_16th_dBm:");
}

id objc_msgSend_setCellVoiceLQM_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellVoiceLQM:");
}

id objc_msgSend_setCell_backhaul_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCell_backhaul:");
}

id objc_msgSend_setCellularAntBitmap_SubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularAntBitmap:SubId:");
}

id objc_msgSend_setCellularAvailabilityStatusQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularAvailabilityStatusQueue:");
}

id objc_msgSend_setCellularController_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularController:");
}

id objc_msgSend_setCellularDataLQM_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularDataLQM:");
}

id objc_msgSend_setCellularFrequencyConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularFrequencyConfig:");
}

id objc_msgSend_setCellularMetricsEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularMetricsEnabled:");
}

id objc_msgSend_setCellularMiscConfig_SubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularMiscConfig:SubId:");
}

id objc_msgSend_setCellularMiscConfigToSubId_uwbInactThre_ms_cellOnTimer_ms_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularMiscConfigToSubId:uwbInactThre_ms:cellOnTimer_ms:");
}

id objc_msgSend_setCellularProdExpQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularProdExpQueue:");
}

id objc_msgSend_setCellularSpeedTestSettingsToPreferences_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularSpeedTestSettingsToPreferences:");
}

id objc_msgSend_setCellularSpeedTestsDisabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularSpeedTestsDisabled:");
}

id objc_msgSend_setCellularStickinessThreaholdActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularStickinessThreaholdActive:");
}

id objc_msgSend_setCellularStickinessThreaholdIdle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularStickinessThreaholdIdle:");
}

id objc_msgSend_setCellularStickinessThreaholdStationary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularStickinessThreaholdStationary:");
}

id objc_msgSend_setCellularStickinessThreaholdStationaryActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularStickinessThreaholdStationaryActive:");
}

id objc_msgSend_setCellularTxActivityConfig_SubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularTxActivityConfig:SubId:");
}

id objc_msgSend_setCellularULBandwidth2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularULBandwidth2:");
}

id objc_msgSend_setCellularULBandwidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularULBandwidth:");
}

id objc_msgSend_setCellularULCenterFreq2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularULCenterFreq2:");
}

id objc_msgSend_setCellularULCenterFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularULCenterFreq:");
}

id objc_msgSend_setCellularWCI2CoexPolicyBitmap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellularWCI2CoexPolicyBitmap:");
}

id objc_msgSend_setChannelBandwidthMHz_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannelBandwidthMHz:");
}

id objc_msgSend_setChannelCenterFreqMHz_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannelCenterFreqMHz:");
}

id objc_msgSend_setChannelConfigurationForConditionId_enable2G_enable5G_enable6G_wifi_channel_lower_wifi_channel_upper_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannelConfigurationForConditionId:enable2G:enable5G:enable6G:wifi_channel_lower:wifi_channel_upper:");
}

id objc_msgSend_setChannelsBlocklisted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannelsBlocklisted:");
}

id objc_msgSend_setChannelsDisableOCL2Gand5G_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannelsDisableOCL2Gand5G:");
}

id objc_msgSend_setChannelsDisableOCLWiFiEnh_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannelsDisableOCLWiFiEnh:");
}

id objc_msgSend_setChannelsForCellularScanProtectionWiFiEnh_wiFiEnhChannels_indexArrayForScanThrottling_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannelsForCellularScanProtectionWiFiEnh:wiFiEnhChannels:indexArrayForScanThrottling:");
}

id objc_msgSend_setChannelsForCellularScanProtectionWithMode_indexArrayForScanThrottling_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannelsForCellularScanProtectionWithMode:indexArrayForScanThrottling:");
}

id objc_msgSend_setChannelsOCLDisabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannelsOCLDisabled:");
}

id objc_msgSend_setChannelsToEnableAssocProtectionModeWiFiEnh(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannelsToEnableAssocProtectionModeWiFiEnh");
}

id objc_msgSend_setChannelsToEnableType7MSG2GWiFi_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannelsToEnableType7MSG2GWiFi:");
}

id objc_msgSend_setChannelsToEnableType7MSG_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannelsToEnableType7MSG:");
}

id objc_msgSend_setChannelsWCI2Enabled2Gand5G_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannelsWCI2Enabled2Gand5G:");
}

id objc_msgSend_setChannelsWCI2Enabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannelsWCI2Enabled:");
}

id objc_msgSend_setChannelsWCI2EnabledV2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannelsWCI2EnabledV2:");
}

id objc_msgSend_setChannelsWCI2EnabledWiFiEnh_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannelsWCI2EnabledWiFiEnh:");
}

id objc_msgSend_setChannelsWiFiType7MSG2Gand5G_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannelsWiFiType7MSG2Gand5G:");
}

id objc_msgSend_setChannelsWiFiType7MSGWiFiEnh_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChannelsWiFiType7MSGWiFiEnh:");
}

id objc_msgSend_setClamshellState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClamshellState:");
}

id objc_msgSend_setClientAntBlockingParams(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClientAntBlockingParams");
}

id objc_msgSend_setClientAntBlockingParams22(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClientAntBlockingParams22");
}

id objc_msgSend_setClientCBDeviceHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClientCBDeviceHandler:");
}

id objc_msgSend_setClientLocationAuthorized_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClientLocationAuthorized:");
}

id objc_msgSend_setClientLocationHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClientLocationHandler:");
}

id objc_msgSend_setClientName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClientName:");
}

id objc_msgSend_setCnvAntBlockingPowerLimitingConfig_SubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCnvAntBlockingPowerLimitingConfig:SubId:");
}

id objc_msgSend_setCoexOSFeatureFlag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCoexOSFeatureFlag");
}

id objc_msgSend_setCoexParams_withValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCoexParams:withValue:");
}

id objc_msgSend_setCoexPlatformFeatureFlag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCoexPlatformFeatureFlag");
}

id objc_msgSend_setCoexSupported_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCoexSupported:");
}

id objc_msgSend_setCommCenterAppDebouncingTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCommCenterAppDebouncingTimer:");
}

id objc_msgSend_setCommCenterBTlpmThreasholdBTProximity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCommCenterBTlpmThreasholdBTProximity:");
}

id objc_msgSend_setCommCenterBreadCrumProcTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCommCenterBreadCrumProcTimer:");
}

id objc_msgSend_setCommCenterPeriodicBreadCrumTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCommCenterPeriodicBreadCrumTimer:");
}

id objc_msgSend_setCommCenterStickinessThreasholdNotinWiFiProximity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCommCenterStickinessThreasholdNotinWiFiProximity:");
}

id objc_msgSend_setCommCenterStickinessThreasholdWiFiProximity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCommCenterStickinessThreasholdWiFiProximity:");
}

id objc_msgSend_setCommCenterThumperStickinessThreasholdNotinBTProximity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCommCenterThumperStickinessThreasholdNotinBTProximity:");
}

id objc_msgSend_setCompanionBTRssi_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCompanionBTRssi:");
}

id objc_msgSend_setCompanionBTVersusWiFiRecommendation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCompanionBTVersusWiFiRecommendation:");
}

id objc_msgSend_setCompanionInternetConnectionAvailable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCompanionInternetConnectionAvailable:");
}

id objc_msgSend_setCompanionWIFIRssi_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCompanionWIFIRssi:");
}

id objc_msgSend_setCompanionWifiStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCompanionWifiStatus:");
}

id objc_msgSend_setConfiguredMaxDLBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfiguredMaxDLBW:");
}

id objc_msgSend_setConfiguredMaxULBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfiguredMaxULBW:");
}

id objc_msgSend_setConnectedDevices_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConnectedDevices:");
}

id objc_msgSend_setConnectedLinkType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConnectedLinkType:");
}

id objc_msgSend_setControllerTxPowerLimit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setControllerTxPowerLimit:");
}

id objc_msgSend_setCriticalCarrier_forCarrierId_forTech_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCriticalCarrier:forCarrierId:forTech:");
}

id objc_msgSend_setCtServiceType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCtServiceType:");
}

id objc_msgSend_setCumRxPktLoss_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCumRxPktLoss:");
}

id objc_msgSend_setCumulativeNominalJitterBufferDelay_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCumulativeNominalJitterBufferDelay:");
}

id objc_msgSend_setCurrCBRSCellFound_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrCBRSCellFound:");
}

id objc_msgSend_setCurrNRCellFound_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrNRCellFound:");
}

id objc_msgSend_setCurrentBitRate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentBitRate:");
}

id objc_msgSend_setCurrentCallTargetBitRate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentCallTargetBitRate:");
}

id objc_msgSend_setCurrentHarvestedCellTypeFR2Capable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentHarvestedCellTypeFR2Capable:");
}

id objc_msgSend_setCurrentNRCellType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentNRCellType:");
}

id objc_msgSend_setCurrentSignalBars_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentSignalBars:");
}

id objc_msgSend_setDataBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataBW:");
}

id objc_msgSend_setDataBtMovingAvgAlphaDenum_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataBtMovingAvgAlphaDenum:");
}

id objc_msgSend_setDataBtStickinessTimeThreshMs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataBtStickinessTimeThreshMs:");
}

id objc_msgSend_setDataEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataEnabled:");
}

id objc_msgSend_setDataIndicator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataIndicator:");
}

id objc_msgSend_setDataLqmState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataLqmState:");
}

id objc_msgSend_setDataMinBtRssiTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataMinBtRssiTh0:");
}

id objc_msgSend_setDataMinBtRssiTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataMinBtRssiTh1:");
}

id objc_msgSend_setDataMinWifiBeaconPerTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataMinWifiBeaconPerTh0:");
}

id objc_msgSend_setDataMinWifiRssiTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataMinWifiRssiTh0:");
}

id objc_msgSend_setDataMinWifiRssiTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataMinWifiRssiTh1:");
}

id objc_msgSend_setDataMinWifiSnrTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataMinWifiSnrTh0:");
}

id objc_msgSend_setDataMinWifiSnrTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataMinWifiSnrTh1:");
}

id objc_msgSend_setDataModeLTE_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataModeLTE:");
}

id objc_msgSend_setDataPreferredSlot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataPreferredSlot:");
}

id objc_msgSend_setDataPreferredSlotOnCBRS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataPreferredSlotOnCBRS:");
}

id objc_msgSend_setDataWifiMinBeaconCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataWifiMinBeaconCount:");
}

id objc_msgSend_setDateFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDateFormat:");
}

id objc_msgSend_setDefaultEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDefaultEvent");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDelegate_queue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDelegate:queue:");
}

id objc_msgSend_setDeltaVideoErasure_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeltaVideoErasure:");
}

id objc_msgSend_setDesiredAccuracy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDesiredAccuracy:");
}

id objc_msgSend_setDetectedFR1CellBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDetectedFR1CellBW:");
}

id objc_msgSend_setDetectedFR1CellCountLocDB_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDetectedFR1CellCountLocDB:");
}

id objc_msgSend_setDetectedFR2CellCountLocDB_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDetectedFR2CellCountLocDB:");
}

id objc_msgSend_setDeviceFoundHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceFoundHandler:");
}

id objc_msgSend_setDeviceLostHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceLostHandler:");
}

id objc_msgSend_setDevicePaired_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDevicePaired:");
}

id objc_msgSend_setDiscoveryFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDiscoveryFlags:");
}

id objc_msgSend_setDispatchQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDispatchQueue:");
}

id objc_msgSend_setDistanceFilter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDistanceFilter:");
}

id objc_msgSend_setDownlinkHighFreq_Hz_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDownlinkHighFreq_Hz:");
}

id objc_msgSend_setDownlinkLowFreq_Hz_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDownlinkLowFreq_Hz:");
}

id objc_msgSend_setDownloadSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDownloadSize:");
}

id objc_msgSend_setDynamicAntBlkingBand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDynamicAntBlkingBand:");
}

id objc_msgSend_setDynamicCellAntBlkEnableIdx1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDynamicCellAntBlkEnableIdx1:");
}

id objc_msgSend_setDynamicCellAntBlkEnableIdx2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDynamicCellAntBlkEnableIdx2:");
}

id objc_msgSend_setE85AntBlockingPowerLimitingConfig_SubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setE85AntBlockingPowerLimitingConfig:SubId:");
}

id objc_msgSend_setEaConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEaConnection:");
}

id objc_msgSend_setEnableEnvelopeIndicationFor2G_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEnableEnvelopeIndicationFor2G:");
}

id objc_msgSend_setEndFreqOnly_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEndFreqOnly:");
}

id objc_msgSend_setErasuresInSilence_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setErasuresInSilence:");
}

id objc_msgSend_setErasuresInSpeech_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setErasuresInSpeech:");
}

id objc_msgSend_setEstimatedBWDL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEstimatedBWDL:");
}

id objc_msgSend_setEstimatedBWDLConf_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEstimatedBWDLConf:");
}

id objc_msgSend_setEstimatedBWUL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEstimatedBWUL:");
}

id objc_msgSend_setEstimatedBWULConf_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEstimatedBWULConf:");
}

id objc_msgSend_setExpectedThroughputVIBE_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExpectedThroughputVIBE:");
}

id objc_msgSend_setFaceTimeAleratedModeCCATh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFaceTimeAleratedModeCCATh0:");
}

id objc_msgSend_setFaceTimeAleratedModeCCATh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFaceTimeAleratedModeCCATh1:");
}

id objc_msgSend_setFaceTimeAleratedModeRssiTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFaceTimeAleratedModeRssiTh0:");
}

id objc_msgSend_setFaceTimeAleratedModeRssiTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFaceTimeAleratedModeRssiTh1:");
}

id objc_msgSend_setFaceTimeAleratedModeStationCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFaceTimeAleratedModeStationCount:");
}

id objc_msgSend_setFaceTimeAleratedModeTxPer0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFaceTimeAleratedModeTxPer0:");
}

id objc_msgSend_setFaceTimeAleratedModeTxPer1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFaceTimeAleratedModeTxPer1:");
}

id objc_msgSend_setFaceTimeAleratedModeVideoErasures_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFaceTimeAleratedModeVideoErasures:");
}

id objc_msgSend_setFaceTimeCellularStickinessThreaholdActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFaceTimeCellularStickinessThreaholdActive:");
}

id objc_msgSend_setFaceTimeEnhancedVideoMetricsEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFaceTimeEnhancedVideoMetricsEnabled:");
}

id objc_msgSend_setFaceTimeHandoverAvgRxPktLossThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFaceTimeHandoverAvgRxPktLossThreshold:");
}

id objc_msgSend_setFaceTimeHandoverRxPktLossThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFaceTimeHandoverRxPktLossThreshold:");
}

id objc_msgSend_setFaceTimeMinActiveWiFiAvgTxPktLossRateTh_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFaceTimeMinActiveWiFiAvgTxPktLossRateTh:");
}

id objc_msgSend_setFaceTimeMinActiveWiFiRssiTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFaceTimeMinActiveWiFiRssiTh0:");
}

id objc_msgSend_setFaceTimeMinActiveWiFiRssiTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFaceTimeMinActiveWiFiRssiTh1:");
}

id objc_msgSend_setFaceTimeMovingAverageWindow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFaceTimeMovingAverageWindow:");
}

id objc_msgSend_setFaceTimeVideoPacketLoss_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFaceTimeVideoPacketLoss:");
}

id objc_msgSend_setFastChargingHystersisTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFastChargingHystersisTimer:");
}

id objc_msgSend_setFetchLimit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFetchLimit:");
}

id objc_msgSend_setForceWiFiBTCoexToTDD_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setForceWiFiBTCoexToTDD:");
}

id objc_msgSend_setFrameConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFrameConfiguration:");
}

id objc_msgSend_setFrameCountCountSinceTxPacketLossReported_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFrameCountCountSinceTxPacketLossReported:");
}

id objc_msgSend_setFrameCountSinceRttReported_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFrameCountSinceRttReported:");
}

id objc_msgSend_setFrameCountSinceTxJitterUpdated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFrameCountSinceTxJitterUpdated:");
}

id objc_msgSend_setFreqWithObj_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFreqWithObj:");
}

id objc_msgSend_setFtController_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFtController:");
}

id objc_msgSend_setFtCounter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFtCounter:");
}

id objc_msgSend_setFtFacetimeAction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFtFacetimeAction:");
}

id objc_msgSend_setFtFacetimePacketLoss_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFtFacetimePacketLoss:");
}

id objc_msgSend_setFtFacetimeTimeDelay_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFtFacetimeTimeDelay:");
}

id objc_msgSend_setFtIRATRecommendation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFtIRATRecommendation:");
}

id objc_msgSend_setFtIRATRecommendationReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFtIRATRecommendationReason:");
}

id objc_msgSend_setGpsBandInfoList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGpsBandInfoList:");
}

id objc_msgSend_setGpsBandInfoToBB_l5Enabled_btA2DPEnabled_l5Level_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGpsBandInfoToBB:l5Enabled:btA2DPEnabled:l5Level:");
}

id objc_msgSend_setGpsRadioActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGpsRadioActive:");
}

id objc_msgSend_setHFBTAntBlkEnableBands_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHFBTAntBlkEnableBands:");
}

id objc_msgSend_setHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHandler:");
}

id objc_msgSend_setHandlerLocationDbInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHandlerLocationDbInfo");
}

id objc_msgSend_setHandlerNasSigInfoInd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHandlerNasSigInfoInd");
}

id objc_msgSend_setHandlerNasVoiceLqmInd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHandlerNasVoiceLqmInd");
}

id objc_msgSend_setHandlerSisNrAvailableInfoInd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHandlerSisNrAvailableInfoInd");
}

id objc_msgSend_setHandoverAlgorithmSettingDynamic_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHandoverAlgorithmSettingDynamic:");
}

id objc_msgSend_setHandoverAlgorithmType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHandoverAlgorithmType:");
}

id objc_msgSend_setHandoverAvgIdleRxPktLossThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHandoverAvgIdleRxPktLossThreshold:");
}

id objc_msgSend_setHandoverAvgRxPktLossThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHandoverAvgRxPktLossThreshold:");
}

id objc_msgSend_setHandoverNominalJitterBufferThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHandoverNominalJitterBufferThreshold:");
}

id objc_msgSend_setHandoverRTThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHandoverRTThreshold:");
}

id objc_msgSend_setHandoverReasonType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHandoverReasonType:");
}

id objc_msgSend_setHandoverRxJitterThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHandoverRxJitterThreshold:");
}

id objc_msgSend_setHandoverRxPktLossThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHandoverRxPktLossThreshold:");
}

id objc_msgSend_setHandoverTxPktLossThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHandoverTxPktLossThreshold:");
}

id objc_msgSend_setHeadTxPowerCapdBm_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHeadTxPowerCapdBm:");
}

id objc_msgSend_setHighDataRateObserved_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHighDataRateObserved:");
}

id objc_msgSend_setHistoricalAgeOfConnectedLinkInDays_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHistoricalAgeOfConnectedLinkInDays:");
}

id objc_msgSend_setHomeKitReportingTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHomeKitReportingTimer:");
}

id objc_msgSend_setHorizontalAccuracy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHorizontalAccuracy:");
}

id objc_msgSend_setHostAP5GHzActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHostAP5GHzActive:");
}

id objc_msgSend_setHostAP_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHostAP:");
}

id objc_msgSend_setHpCellNeed2SetBTAFH_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHpCellNeed2SetBTAFH:");
}

id objc_msgSend_setIMSPreference_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIMSPreference:");
}

id objc_msgSend_setIRATSupported_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIRATSupported:");
}

id objc_msgSend_setIWLANServiceType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIWLANServiceType:");
}

id objc_msgSend_setIdsAvgWiFiMinPerTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsAvgWiFiMinPerTh1:");
}

id objc_msgSend_setIdsBTMinPerTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsBTMinPerTh1:");
}

id objc_msgSend_setIdsBTMinRttTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsBTMinRttTh1:");
}

id objc_msgSend_setIdsMetricsEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsMetricsEnabled:");
}

id objc_msgSend_setIdsMinAvgWiFiTxPktLossRateTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsMinAvgWiFiTxPktLossRateTh0:");
}

id objc_msgSend_setIdsMinAvgWiFiTxPktLossRateTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsMinAvgWiFiTxPktLossRateTh1:");
}

id objc_msgSend_setIdsMinWiFiEffectivePhyRateTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsMinWiFiEffectivePhyRateTh0:");
}

id objc_msgSend_setIdsMinWiFiEffectivePhyRateTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsMinWiFiEffectivePhyRateTh1:");
}

id objc_msgSend_setIdsMinWiFiRssiTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsMinWiFiRssiTh0:");
}

id objc_msgSend_setIdsMinWiFiRssiTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsMinWiFiRssiTh1:");
}

id objc_msgSend_setIdsMinWiFiSnrTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsMinWiFiSnrTh0:");
}

id objc_msgSend_setIdsMinWiFiSnrTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsMinWiFiSnrTh1:");
}

id objc_msgSend_setIdsMinWiFiThroughputTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsMinWiFiThroughputTh0:");
}

id objc_msgSend_setIdsMinWiFiThroughputTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsMinWiFiThroughputTh1:");
}

id objc_msgSend_setIdsMovAvgWiFiMinPerTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsMovAvgWiFiMinPerTh1:");
}

id objc_msgSend_setIdsPeriodicReportInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsPeriodicReportInterval:");
}

id objc_msgSend_setIdsWiFiMinPerTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsWiFiMinPerTh1:");
}

id objc_msgSend_setIdsWiFiMinRttTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsWiFiMinRttTh1:");
}

id objc_msgSend_setImsVoiceOverPSSupported_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setImsVoiceOverPSSupported:");
}

id objc_msgSend_setInterfaceType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterfaceType:");
}

id objc_msgSend_setIsActiveClientFaceTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsActiveClientFaceTime:");
}

id objc_msgSend_setIsCallFailed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsCallFailed:");
}

id objc_msgSend_setIsDataAttached_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsDataAttached:");
}

id objc_msgSend_setIsDataEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsDataEnabled:");
}

id objc_msgSend_setIsDeviceRegistered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsDeviceRegistered:");
}

id objc_msgSend_setIsExpensive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsExpensive:");
}

id objc_msgSend_setIsFR2Radio_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsFR2Radio:");
}

id objc_msgSend_setIsGizmoNearbyOverBt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsGizmoNearbyOverBt:");
}

id objc_msgSend_setIsInHpSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsInHpSession:");
}

id objc_msgSend_setIsPrivateNetworkPreferredOverWifi_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsPrivateNetworkPreferredOverWifi:");
}

id objc_msgSend_setIsPrivateNetworkSim_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsPrivateNetworkSim:");
}

id objc_msgSend_setIsRoaming_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsRoaming:");
}

id objc_msgSend_setIsVolteSupported_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsVolteSupported:");
}

id objc_msgSend_setIsWiFiCallingSupported_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsWiFiCallingSupported:");
}

id objc_msgSend_setIssueFrequencyRangeByIssueBand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIssueFrequencyRangeByIssueBand:");
}

id objc_msgSend_setIssueType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIssueType:");
}

id objc_msgSend_setLAACoexConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLAACoexConfig:");
}

id objc_msgSend_setLAACoexConfigEnableTxInd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLAACoexConfigEnableTxInd");
}

id objc_msgSend_setLAACoexConfigScanThrottleMask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLAACoexConfigScanThrottleMask:");
}

id objc_msgSend_setLAACoexConfigWci2TxDurationThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLAACoexConfigWci2TxDurationThreshold:");
}

id objc_msgSend_setLQMReportInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLQMReportInterval:");
}

id objc_msgSend_setLat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLat:");
}

id objc_msgSend_setLatLng_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLatLng:");
}

id objc_msgSend_setLeScanGrantDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLeScanGrantDuration:");
}

id objc_msgSend_setLegacyWiFiBlocklistChannelsFor3FoWiFi_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLegacyWiFiBlocklistChannelsFor3FoWiFi:");
}

id objc_msgSend_setLinkPreferenceNotificationRequired_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLinkPreferenceNotificationRequired:");
}

id objc_msgSend_setLinkQoS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLinkQoS:");
}

id objc_msgSend_setLng_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLng:");
}

id objc_msgSend_setLoads_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLoads:");
}

id objc_msgSend_setLocDbRequired_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocDbRequired:");
}

id objc_msgSend_setLocation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocation:");
}

id objc_msgSend_setLockObjectWifiAntselPolicyStats_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLockObjectWifiAntselPolicyStats:");
}

id objc_msgSend_setLogSettingsToPreferences(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLogSettingsToPreferences");
}

id objc_msgSend_setLoggingToFileEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLoggingToFileEnabled:");
}

id objc_msgSend_setLsmRecommendationBe_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLsmRecommendationBe:");
}

id objc_msgSend_setLteCDRXTDDMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLteCDRXTDDMode:");
}

id objc_msgSend_setLteCDRXWiFiTDD_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLteCDRXWiFiTDD:");
}

id objc_msgSend_setLteVoiceLQM_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLteVoiceLQM:");
}

id objc_msgSend_setMActivePhy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMActivePhy:");
}

id objc_msgSend_setMActivePhyValid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMActivePhyValid:");
}

id objc_msgSend_setMAirplayCriticalityPercentage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMAirplayCriticalityPercentage:");
}

id objc_msgSend_setMAirplayDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMAirplayDuration:");
}

id objc_msgSend_setMAirplayIsCritical_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMAirplayIsCritical:");
}

id objc_msgSend_setMAppLinkPreference_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMAppLinkPreference:");
}

id objc_msgSend_setMAwdlEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMAwdlEnabled:");
}

id objc_msgSend_setMBtLinkIsRecommended_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMBtLinkIsRecommended:");
}

id objc_msgSend_setMBtLinkRecommendationUpdateNeeded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMBtLinkRecommendationUpdateNeeded:");
}

id objc_msgSend_setMBtPhyRate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMBtPhyRate:");
}

id objc_msgSend_setMCTService_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMCTService:");
}

id objc_msgSend_setMCacheCellularReportedFullList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMCacheCellularReportedFullList:");
}

id objc_msgSend_setMCacheCellularReportedReducedList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMCacheCellularReportedReducedList:");
}

id objc_msgSend_setMCacheGnssReportedFullList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMCacheGnssReportedFullList:");
}

id objc_msgSend_setMCacheGnssReportedReducedList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMCacheGnssReportedReducedList:");
}

id objc_msgSend_setMCacheWifiReportedFullList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMCacheWifiReportedFullList:");
}

id objc_msgSend_setMCacheWifiReportedReducedList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMCacheWifiReportedReducedList:");
}

id objc_msgSend_setMCarPlayBTScanRelaxReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMCarPlayBTScanRelaxReason:");
}

id objc_msgSend_setMCarPlaySessionInProgress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMCarPlaySessionInProgress:");
}

id objc_msgSend_setMCellularFreqInclusionList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMCellularFreqInclusionList:");
}

id objc_msgSend_setMCellularFreqSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMCellularFreqSet:");
}

id objc_msgSend_setMClassicCoexDenialCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMClassicCoexDenialCount:");
}

id objc_msgSend_setMClassicReTxCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMClassicReTxCount:");
}

id objc_msgSend_setMClassicRssi_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMClassicRssi:");
}

id objc_msgSend_setMClassicRxErrorCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMClassicRxErrorCount:");
}

id objc_msgSend_setMClassicSuccessfulRxCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMClassicSuccessfulRxCount:");
}

id objc_msgSend_setMClassicSuccessfulTxCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMClassicSuccessfulTxCount:");
}

id objc_msgSend_setMClientSubscriptionValid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMClientSubscriptionValid:");
}

id objc_msgSend_setMCompanionWifiLinkIsRecommended_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMCompanionWifiLinkIsRecommended:");
}

id objc_msgSend_setMCompanionWifiLinkRecommendationUpdateNeeded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMCompanionWifiLinkRecommendationUpdateNeeded:");
}

id objc_msgSend_setMCurrentActiveLink_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMCurrentActiveLink:");
}

id objc_msgSend_setMDirectWifiLinkIsRecommended_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMDirectWifiLinkIsRecommended:");
}

id objc_msgSend_setMDirectWifiLinkRecommendationUpdateNeeded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMDirectWifiLinkRecommendationUpdateNeeded:");
}

id objc_msgSend_setMEurekaConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMEurekaConfig:");
}

id objc_msgSend_setMFlushCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMFlushCount:");
}

id objc_msgSend_setMForceUpdateNeeded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMForceUpdateNeeded:");
}

id objc_msgSend_setMGnssL1FreqList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMGnssL1FreqList:");
}

id objc_msgSend_setMGnssL5FreqList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMGnssL5FreqList:");
}

id objc_msgSend_setMIsRetry_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMIsRetry:");
}

id objc_msgSend_setMLQMLinkEvalCounter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLQMLinkEvalCounter:");
}

id objc_msgSend_setMLeCoexDenialCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLeCoexDenialCount:");
}

id objc_msgSend_setMLeReTxCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLeReTxCount:");
}

id objc_msgSend_setMLeRssi_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLeRssi:");
}

id objc_msgSend_setMLeRxErrorCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLeRxErrorCount:");
}

id objc_msgSend_setMLeSuccessfulRxCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLeSuccessfulRxCount:");
}

id objc_msgSend_setMLeSuccessfulTxCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLeSuccessfulTxCount:");
}

id objc_msgSend_setMLeastCongestedChannel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLeastCongestedChannel:");
}

id objc_msgSend_setMLeastCongestedChannelCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLeastCongestedChannelCount:");
}

id objc_msgSend_setMLocalDeliveryCumulativeMessageDelivered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLocalDeliveryCumulativeMessageDelivered:");
}

id objc_msgSend_setMLocalDeliveryCumulativeMessageSent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLocalDeliveryCumulativeMessageSent:");
}

id objc_msgSend_setMLocalDeliveryMessageDelivered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLocalDeliveryMessageDelivered:");
}

id objc_msgSend_setMLocalDeliveryMessageDeliveredDeliveryError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLocalDeliveryMessageDeliveredDeliveryError:");
}

id objc_msgSend_setMLocalDeliveryMessageDeliveredDeliveryErrorMovAvg_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLocalDeliveryMessageDeliveredDeliveryErrorMovAvg:");
}

id objc_msgSend_setMLocalDeliveryMessageDeliveredMessageSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLocalDeliveryMessageDeliveredMessageSize:");
}

id objc_msgSend_setMLocalDeliveryMessageDeliveredMessageSizeMovAvg_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLocalDeliveryMessageDeliveredMessageSizeMovAvg:");
}

id objc_msgSend_setMLocalDeliveryMessageDeliveredMovAvg_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLocalDeliveryMessageDeliveredMovAvg:");
}

id objc_msgSend_setMLocalDeliveryMessageDeliveredRTT_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLocalDeliveryMessageDeliveredRTT:");
}

id objc_msgSend_setMLocalDeliveryMessageDeliveredRTTMovAvg_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLocalDeliveryMessageDeliveredRTTMovAvg:");
}

id objc_msgSend_setMLocalDeliveryMessageReceived_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLocalDeliveryMessageReceived:");
}

id objc_msgSend_setMLocalDeliveryMessageReceivedMessageSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLocalDeliveryMessageReceivedMessageSize:");
}

id objc_msgSend_setMLocalDeliveryMessageReceivedMessageSizeMovAvg_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLocalDeliveryMessageReceivedMessageSizeMovAvg:");
}

id objc_msgSend_setMLocalDeliveryMessageReceivedMovAvg_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLocalDeliveryMessageReceivedMovAvg:");
}

id objc_msgSend_setMLocalDeliveryMessageSent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLocalDeliveryMessageSent:");
}

id objc_msgSend_setMLocalDeliveryMessageSentMessageSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLocalDeliveryMessageSentMessageSize:");
}

id objc_msgSend_setMLocalDeliveryMessageSentMovAvg_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMLocalDeliveryMessageSentMovAvg:");
}

id objc_msgSend_setMMavCiConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMMavCiConfig:");
}

id objc_msgSend_setMMavFaceIdPtConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMMavFaceIdPtConfig:");
}

id objc_msgSend_setMMavPtConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMMavPtConfig:");
}

id objc_msgSend_setMMavSfPboffConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMMavSfPboffConfig:");
}

id objc_msgSend_setMMetricsConsiderationPeriod_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMMetricsConsiderationPeriod:");
}

id objc_msgSend_setMMetricsReportReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMMetricsReportReason:");
}

id objc_msgSend_setMMovingAvgRSSI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMMovingAvgRSSI:");
}

id objc_msgSend_setMMovingAvgReTxCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMMovingAvgReTxCount:");
}

id objc_msgSend_setMMovingAvgRxErrorCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMMovingAvgRxErrorCount:");
}

id objc_msgSend_setMMovingAvgSuccessfulRxCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMMovingAvgSuccessfulRxCount:");
}

id objc_msgSend_setMMovingAvgSuccessfulTxCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMMovingAvgSuccessfulTxCount:");
}

id objc_msgSend_setMNanEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMNanEnabled:");
}

id objc_msgSend_setMNonMagnetUtilization_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMNonMagnetUtilization:");
}

id objc_msgSend_setMNumberofSamples_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMNumberofSamples:");
}

id objc_msgSend_setMPrevActivePhy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMPrevActivePhy:");
}

id objc_msgSend_setMRCU15GHzInUse_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMRCU15GHzInUse:");
}

id objc_msgSend_setMRCU1ChannelNum_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMRCU1ChannelNum:");
}

id objc_msgSend_setMRCU1CurrentMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMRCU1CurrentMode:");
}

id objc_msgSend_setMRCU1CycleLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMRCU1CycleLength:");
}

id objc_msgSend_setMRCU1FrameFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMRCU1FrameFormat:");
}

id objc_msgSend_setMRCU1NbBandMask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMRCU1NbBandMask:");
}

id objc_msgSend_setMRCU1NumberOfCycles_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMRCU1NumberOfCycles:");
}

id objc_msgSend_setMRCU1OnDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMRCU1OnDuration:");
}

id objc_msgSend_setMRCU1PowerOn_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMRCU1PowerOn:");
}

id objc_msgSend_setMRCU1UseCaseNum_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMRCU1UseCaseNum:");
}

id objc_msgSend_setMRCU2ChannelActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMRCU2ChannelActivity:");
}

id objc_msgSend_setMRCU2ChannelNum_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMRCU2ChannelNum:");
}

id objc_msgSend_setMRCU2PowerOn_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMRCU2PowerOn:");
}

id objc_msgSend_setMRealTimeAwdlTrafficEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMRealTimeAwdlTrafficEnabled:");
}

id objc_msgSend_setMReportDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMReportDuration:");
}

id objc_msgSend_setMStreamingReportBytesReceived_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMStreamingReportBytesReceived:");
}

id objc_msgSend_setMStreamingReportBytesSent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMStreamingReportBytesSent:");
}

id objc_msgSend_setMStreamingReportPacketsReceived_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMStreamingReportPacketsReceived:");
}

id objc_msgSend_setMStreamingReportPacketsSent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMStreamingReportPacketsSent:");
}

id objc_msgSend_setMSubscriptionInfoDidChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMSubscriptionInfoDidChange:");
}

id objc_msgSend_setMTerminusContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMTerminusContext:");
}

id objc_msgSend_setMTerminusIsRegistered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMTerminusIsRegistered:");
}

id objc_msgSend_setMWSFrameConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMWSFrameConfig:");
}

id objc_msgSend_setMWSSignalingConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMWSSignalingConfig:");
}

id objc_msgSend_setMWifiFreqList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMWifiFreqList:");
}

id objc_msgSend_setMappedApplicationType::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMappedApplicationType::");
}

id objc_msgSend_setMaxDurationForCellularScanProtection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxDurationForCellularScanProtection:");
}

id objc_msgSend_setMaxEvalBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxEvalBW:");
}

id objc_msgSend_setMaxMovEvalBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxMovEvalBW:");
}

id objc_msgSend_setMcc_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMcc:");
}

id objc_msgSend_setMediaStallDetected_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMediaStallDetected:");
}

id objc_msgSend_setMessageTrigger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMessageTrigger:");
}

id objc_msgSend_setMessageType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMessageType:");
}

id objc_msgSend_setMetrics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMetrics:");
}

id objc_msgSend_setMiRATProximityClientContexts_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMiRATProximityClientContexts:");
}

id objc_msgSend_setMinActiveWiFiAvgTxPktLossRateTh_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinActiveWiFiAvgTxPktLossRateTh:");
}

id objc_msgSend_setMinActiveWiFiCcaTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinActiveWiFiCcaTh0:");
}

id objc_msgSend_setMinActiveWiFiCcaTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinActiveWiFiCcaTh1:");
}

id objc_msgSend_setMinActiveWiFiRssiTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinActiveWiFiRssiTh0:");
}

id objc_msgSend_setMinActiveWiFiRssiTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinActiveWiFiRssiTh1:");
}

id objc_msgSend_setMinActiveWiFiSnrTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinActiveWiFiSnrTh0:");
}

id objc_msgSend_setMinActiveWiFiSnrTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinActiveWiFiSnrTh1:");
}

id objc_msgSend_setMinActiveWiFiTxPktLossRateTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinActiveWiFiTxPktLossRateTh0:");
}

id objc_msgSend_setMinActiveWiFiTxPktLossRateTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinActiveWiFiTxPktLossRateTh1:");
}

id objc_msgSend_setMinEvalBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinEvalBW:");
}

id objc_msgSend_setMinIdleWiFiCcaTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinIdleWiFiCcaTh0:");
}

id objc_msgSend_setMinIdleWiFiCcaTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinIdleWiFiCcaTh1:");
}

id objc_msgSend_setMinIdleWiFiFwTxPktLossRateTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinIdleWiFiFwTxPktLossRateTh0:");
}

id objc_msgSend_setMinIdleWiFiFwTxPktLossRateTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinIdleWiFiFwTxPktLossRateTh1:");
}

id objc_msgSend_setMinIdleWiFiRssiTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinIdleWiFiRssiTh0:");
}

id objc_msgSend_setMinIdleWiFiRssiTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinIdleWiFiRssiTh1:");
}

id objc_msgSend_setMinIdleWiFiSnrTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinIdleWiFiSnrTh0:");
}

id objc_msgSend_setMinIdleWiFiSnrTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinIdleWiFiSnrTh1:");
}

id objc_msgSend_setMinIdleWiFiTxPktLossRateTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinIdleWiFiTxPktLossRateTh0:");
}

id objc_msgSend_setMinIdleWiFiTxPktLossRateTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinIdleWiFiTxPktLossRateTh1:");
}

id objc_msgSend_setMinMovEvalBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinMovEvalBW:");
}

id objc_msgSend_setMinMovSigBarTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinMovSigBarTh0:");
}

id objc_msgSend_setMinSigBarTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinSigBarTh0:");
}

id objc_msgSend_setMinSigBarTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinSigBarTh1:");
}

id objc_msgSend_setMinSigBarTh2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinSigBarTh2:");
}

id objc_msgSend_setMinWiFiBeaconPerTh0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinWiFiBeaconPerTh0:");
}

id objc_msgSend_setMinWiFiBeaconPerTh1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinWiFiBeaconPerTh1:");
}

id objc_msgSend_setMitigationType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMitigationType:");
}

id objc_msgSend_setMnc_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMnc:");
}

id objc_msgSend_setMobilityStateAwarenessEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMobilityStateAwarenessEnabled:");
}

id objc_msgSend_setMovAvgIdleRxPktLoss_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMovAvgIdleRxPktLoss:");
}

id objc_msgSend_setMovAvgNominalJitterBufferDelay_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMovAvgNominalJitterBufferDelay:");
}

id objc_msgSend_setMovAvgRxPktLoss_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMovAvgRxPktLoss:");
}

id objc_msgSend_setMovingAverageSignalBars_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMovingAverageSignalBars:");
}

id objc_msgSend_setNbChannelToAvoidEnd_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNbChannelToAvoidEnd:");
}

id objc_msgSend_setNbChannelToAvoidStart_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNbChannelToAvoidStart:");
}

id objc_msgSend_setNeighberCellType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNeighberCellType:");
}

id objc_msgSend_setNetworkConfigOfInterest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkConfigOfInterest");
}

id objc_msgSend_setNetworkEvalBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkEvalBW:");
}

id objc_msgSend_setNominalJitterBufferDelay_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNominalJitterBufferDelay:");
}

id objc_msgSend_setNominalJitterBufferQueueSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNominalJitterBufferQueueSize:");
}

id objc_msgSend_setNonCbrsEnterRsrpMin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNonCbrsEnterRsrpMin:");
}

id objc_msgSend_setNonCbrsEnterRsrqMin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNonCbrsEnterRsrqMin:");
}

id objc_msgSend_setNonCbrsExitRsrpMin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNonCbrsExitRsrpMin:");
}

id objc_msgSend_setNonCbrsExitRsrqMin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNonCbrsExitRsrqMin:");
}

id objc_msgSend_setNrCellRSRP_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNrCellRSRP:");
}

id objc_msgSend_setNrCellRSRQ_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNrCellRSRQ:");
}

id objc_msgSend_setNrCellSNR_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNrCellSNR:");
}

id objc_msgSend_setNrRSRP_forSim_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNrRSRP:forSim:");
}

id objc_msgSend_setNrRSRQ_forSim_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNrRSRQ:forSim:");
}

id objc_msgSend_setNrSNR_forSim_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNrSNR:forSim:");
}

id objc_msgSend_setNumGameCtrlDev10ms_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNumGameCtrlDev10ms:");
}

id objc_msgSend_setNumGameCtrlDev75ms_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNumGameCtrlDev75ms:");
}

id objc_msgSend_setNumHIDDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNumHIDDevice:");
}

id objc_msgSend_setNumLEDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNumLEDevice:");
}

id objc_msgSend_setNumberofSubscriptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNumberofSubscriptions:");
}

id objc_msgSend_setNwType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNwType:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOneWayDealy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOneWayDealy:");
}

id objc_msgSend_setP2pAssistanceEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setP2pAssistanceEnabled:");
}

id objc_msgSend_setP2pAwdlController_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setP2pAwdlController:");
}

id objc_msgSend_setP2pNanController_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setP2pNanController:");
}

id objc_msgSend_setPacketLifetimeVIBE_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPacketLifetimeVIBE:");
}

id objc_msgSend_setPacketLossRateVIBE_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPacketLossRateVIBE:");
}

id objc_msgSend_setParameter_CellularBand_CellFreq_CellBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParameter:CellularBand:CellFreq:CellBW:");
}

id objc_msgSend_setParameter_ImdType_GnssL5TunerAllowed_ParallelMitigationAllowed_GnssVictimFreq_KHz_GnssVictimBw_KHz_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParameter:ImdType:GnssL5TunerAllowed:ParallelMitigationAllowed:GnssVictimFreq_KHz:GnssVictimBw_KHz:");
}

id objc_msgSend_setParameter_lqmThreshold_MitigationTimer_ProtectGnssLowPriority_L5TunerLqmThreshod_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParameter:lqmThreshold:MitigationTimer:ProtectGnssLowPriority:L5TunerLqmThreshod:");
}

id objc_msgSend_setParameterConditionId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParameterConditionId:");
}

id objc_msgSend_setParameterDenyVoiceProtect_MitigationTimer_DurationGranularity_LQMThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParameterDenyVoiceProtect:MitigationTimer:DurationGranularity:LQMThreshold:");
}

id objc_msgSend_setParameterDurationGranularity_LQMThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParameterDurationGranularity:LQMThreshold:");
}

id objc_msgSend_setParameterEnable_CellularAntBitmap_MitigationType_CellularTxPowerCap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParameterEnable:CellularAntBitmap:MitigationType:CellularTxPowerCap:");
}

id objc_msgSend_setParameterEnable_CellularAntBitmap_MitigationType_CellularTxPowerCap_CoexTech_CellularBand_CellFreq_CellBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParameterEnable:CellularAntBitmap:MitigationType:CellularTxPowerCap:CoexTech:CellularBand:CellFreq:CellBW:");
}

id objc_msgSend_setParameterEnable_PriorityClass_MitigationRequired_DenyVoiceProtect_MitigationTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParameterEnable:PriorityClass:MitigationRequired:DenyVoiceProtect:MitigationTimer:");
}

id objc_msgSend_setParameterEnable_UwbChannel_UwbAntBitmap_CellularAntBitmap_MitigationType_CellularTxPowerCap_CoexTech_CellularBand_CellFreq_CellBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParameterEnable:UwbChannel:UwbAntBitmap:CellularAntBitmap:MitigationType:CellularTxPowerCap:CoexTech:CellularBand:CellFreq:CellBW:");
}

id objc_msgSend_setParameterUsbRate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParameterUsbRate:");
}

id objc_msgSend_setPencilState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPencilState:");
}

id objc_msgSend_setPeriodicReportInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPeriodicReportInterval:");
}

id objc_msgSend_setPeriodicRtt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPeriodicRtt:");
}

id objc_msgSend_setPersistentContainer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPersistentContainer:");
}

id objc_msgSend_setPersistentStoreCoordinator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPersistentStoreCoordinator:");
}

id objc_msgSend_setPersistentStoreDescriptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPersistentStoreDescriptions:");
}

id objc_msgSend_setPingPongAvoidanceThresholdRunning_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPingPongAvoidanceThresholdRunning:");
}

id objc_msgSend_setPingPongAvoidanceThresholdStationary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPingPongAvoidanceThresholdStationary:");
}

id objc_msgSend_setPingPongAvoidanceThresholdWalking_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPingPongAvoidanceThresholdWalking:");
}

id objc_msgSend_setPingPongAvoidanceTimerMultiplier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPingPongAvoidanceTimerMultiplier:");
}

id objc_msgSend_setPingPongTimerMultipler_::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPingPongTimerMultipler:::");
}

id objc_msgSend_setPlatform(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPlatform");
}

id objc_msgSend_setPlatformManager_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPlatformManager:");
}

id objc_msgSend_setPoorConnectionDetected_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPoorConnectionDetected:");
}

id objc_msgSend_setPredicate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPredicate:");
}

id objc_msgSend_setPrevAudioErasurePercent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrevAudioErasurePercent:");
}

id objc_msgSend_setPrevAudioQualityWasGood_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrevAudioQualityWasGood:");
}

id objc_msgSend_setPrevNR41RFEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrevNR41RFEnabled:");
}

id objc_msgSend_setPrevNR7xRFEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrevNR7xRFEnabled:");
}

id objc_msgSend_setPrevULFrequencyUpdate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrevULFrequencyUpdate:");
}

id objc_msgSend_setPreviousStartTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPreviousStartTime:");
}

id objc_msgSend_setPrimaryAudioPacketLossRate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrimaryAudioPacketLossRate:");
}

id objc_msgSend_setPrimaryAudioPacketReceived_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrimaryAudioPacketReceived:");
}

id objc_msgSend_setPrimaryVideoPacketLossRate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrimaryVideoPacketLossRate:");
}

id objc_msgSend_setPrimaryVideoPacketReceived_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrimaryVideoPacketReceived:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setProperty_prperty_val_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProperty:prperty_val:");
}

id objc_msgSend_setQMIClientStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setQMIClientStatus:");
}

id objc_msgSend_setQmiClientEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setQmiClientEnabled:");
}

id objc_msgSend_setQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setQueue:");
}

id objc_msgSend_setRC1Duration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRC1Duration:");
}

id objc_msgSend_setRSSI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRSSI:");
}

id objc_msgSend_setRadioCoverage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRadioCoverage:");
}

id objc_msgSend_setRadioFrequency_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRadioFrequency:");
}

id objc_msgSend_setRbThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRbThreshold:");
}

id objc_msgSend_setRc1AntBitmap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRc1AntBitmap:");
}

id objc_msgSend_setRc1IssueChannel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRc1IssueChannel:");
}

id objc_msgSend_setRc1PriorityBitmap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRc1PriorityBitmap:");
}

id objc_msgSend_setRc1duration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRc1duration:");
}

id objc_msgSend_setRc1priority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRc1priority:");
}

id objc_msgSend_setRcu1Controller_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRcu1Controller:");
}

id objc_msgSend_setRcu2Controller_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRcu2Controller:");
}

id objc_msgSend_setRealtimeModeUpdatedHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRealtimeModeUpdatedHandler:");
}

id objc_msgSend_setRecommendedLinkType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRecommendedLinkType:");
}

id objc_msgSend_setReportedBandwitdh_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReportedBandwitdh:");
}

id objc_msgSend_setReportedChannelCenterFreqMHz_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReportedChannelCenterFreqMHz:");
}

id objc_msgSend_setRequiredInterfaceType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequiredInterfaceType:");
}

id objc_msgSend_setResultType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResultType:");
}

id objc_msgSend_setRrcState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRrcState:");
}

id objc_msgSend_setRssiHysterisisRunning_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRssiHysterisisRunning:");
}

id objc_msgSend_setRssiHysterisisWalking_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRssiHysterisisWalking:");
}

id objc_msgSend_setRtpMetricsEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRtpMetricsEnabled:");
}

id objc_msgSend_setRtpMetricsReportingStarted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRtpMetricsReportingStarted:");
}

id objc_msgSend_setRtt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRtt:");
}

id objc_msgSend_setRxAntennaPreference_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRxAntennaPreference:");
}

id objc_msgSend_setRxClientType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRxClientType:");
}

id objc_msgSend_setRxJitter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRxJitter:");
}

id objc_msgSend_setRxPktLoss_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRxPktLoss:");
}

id objc_msgSend_setRxPriThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRxPriThreshold:");
}

id objc_msgSend_setRxProtectMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRxProtectMode:");
}

id objc_msgSend_setRxRtpMetricsSampleCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRxRtpMetricsSampleCount:");
}

id objc_msgSend_setRxSpeechPktLoss_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRxSpeechPktLoss:");
}

id objc_msgSend_setSNR_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSNR:");
}

id objc_msgSend_setSacWifiFrequency_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSacWifiFrequency:");
}

id objc_msgSend_setScanFreq_SubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setScanFreq:SubId:");
}

id objc_msgSend_setScanFrequencyBandFilter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setScanFrequencyBandFilter:");
}

id objc_msgSend_setScanJoinRxProtectDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setScanJoinRxProtectDuration:");
}

id objc_msgSend_setServCellECIO_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServCellECIO:");
}

id objc_msgSend_setServCellRSCP_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServCellRSCP:");
}

id objc_msgSend_setServCellRSRP_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServCellRSRP:");
}

id objc_msgSend_setServCellRSRQ_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServCellRSRQ:");
}

id objc_msgSend_setServCellRSSI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServCellRSSI:");
}

id objc_msgSend_setServCellRadioTechnologyType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServCellRadioTechnologyType:");
}

id objc_msgSend_setServCellSINR_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServCellSINR:");
}

id objc_msgSend_setServCellSNR_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServCellSNR:");
}

id objc_msgSend_setServerQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServerQueue:");
}

id objc_msgSend_setService_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setService:");
}

id objc_msgSend_setServiceInitDone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceInitDone:");
}

id objc_msgSend_setServingCellECIO_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServingCellECIO:");
}

id objc_msgSend_setServingCellECIO_forSim_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServingCellECIO:forSim:");
}

id objc_msgSend_setServingCellRSCP_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServingCellRSCP:");
}

id objc_msgSend_setServingCellRSCP_forSim_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServingCellRSCP:forSim:");
}

id objc_msgSend_setServingCellRSRP_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServingCellRSRP:");
}

id objc_msgSend_setServingCellRSRP_forSim_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServingCellRSRP:forSim:");
}

id objc_msgSend_setServingCellRSRQ_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServingCellRSRQ:");
}

id objc_msgSend_setServingCellRSRQ_forSim_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServingCellRSRQ:forSim:");
}

id objc_msgSend_setServingCellRSSI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServingCellRSSI:");
}

id objc_msgSend_setServingCellRSSI_forSim_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServingCellRSSI:forSim:");
}

id objc_msgSend_setServingCellSNR_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServingCellSNR:");
}

id objc_msgSend_setServingCellType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServingCellType:");
}

id objc_msgSend_setSidPacketsReceived_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSidPacketsReceived:");
}

id objc_msgSend_setSilencePlayed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSilencePlayed:");
}

id objc_msgSend_setSnrHysterisisRunning_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSnrHysterisisRunning:");
}

id objc_msgSend_setSnrHysterisisWalking_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSnrHysterisisWalking:");
}

id objc_msgSend_setSosWaypointRSRPTh_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSosWaypointRSRPTh:");
}

id objc_msgSend_setSpeechPacketsReceived_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSpeechPacketsReceived:");
}

id objc_msgSend_setSpmiFeature(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSpmiFeature");
}

id objc_msgSend_setSrvccHandoverState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSrvccHandoverState:");
}

id objc_msgSend_setStallDetected_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStallDetected:");
}

id objc_msgSend_setStartFreq_EndFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStartFreq:EndFreq:");
}

id objc_msgSend_setStatusUpdateMsgBuffered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStatusUpdateMsgBuffered:");
}

id objc_msgSend_setSubscriptionType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSubscriptionType:");
}

id objc_msgSend_setSubscriptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSubscriptions:");
}

id objc_msgSend_setSymtompsMetricsEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSymtompsMetricsEnabled:");
}

id objc_msgSend_setTargetBitRate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTargetBitRate:");
}

id objc_msgSend_setTargetJitterBufferQueueSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTargetJitterBufferQueueSize:");
}

id objc_msgSend_setTcpActiveConnSuccessThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTcpActiveConnSuccessThreshold:");
}

id objc_msgSend_setTcpIdleConnSuccessThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTcpIdleConnSuccessThreshold:");
}

id objc_msgSend_setTcpJitterThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTcpJitterThreshold:");
}

id objc_msgSend_setTcpRTT_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTcpRTT:");
}

id objc_msgSend_setTcpRttThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTcpRttThreshold:");
}

id objc_msgSend_setThreadClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setThreadClient:");
}

id objc_msgSend_setTimeOfDay_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimeOfDay:");
}

id objc_msgSend_setTimeStampRTPMetrics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimeStampRTPMetrics:");
}

id objc_msgSend_setTimesharingConfig_SubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimesharingConfig:SubId:");
}

id objc_msgSend_setTotalAudioPacketLossRate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalAudioPacketLossRate:");
}

id objc_msgSend_setTotalAudioPacketReceived_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalAudioPacketReceived:");
}

id objc_msgSend_setTotalErasures_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalErasures:");
}

id objc_msgSend_setTotalPacketsReceived_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalPacketsReceived:");
}

id objc_msgSend_setTotalPlayBacks_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalPlayBacks:");
}

id objc_msgSend_setTotalPlayBacksInSpeech_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalPlayBacksInSpeech:");
}

id objc_msgSend_setTotalVideoErasure_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalVideoErasure:");
}

id objc_msgSend_setTotalVideoPacketLossRate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalVideoPacketLossRate:");
}

id objc_msgSend_setTotalVideoPacketReceived_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalVideoPacketReceived:");
}

id objc_msgSend_setTransportMetricsRateLimitingThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTransportMetricsRateLimitingThreshold:");
}

id objc_msgSend_setTrialParameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTrialParameters:");
}

id objc_msgSend_setTxAntMapInHouseBB25A(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTxAntMapInHouseBB25A");
}

id objc_msgSend_setTxAntennaPreference_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTxAntennaPreference:");
}

id objc_msgSend_setTxJitter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTxJitter:");
}

id objc_msgSend_setTxOnIndication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTxOnIndication:");
}

id objc_msgSend_setTxPacketsCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTxPacketsCount:");
}

id objc_msgSend_setType7CellAntBlkIdx_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setType7CellAntBlkIdx:");
}

id objc_msgSend_setType7WiFiEnhCellAntBlkIdx_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setType7WiFiEnhCellAntBlkIdx:");
}

id objc_msgSend_setUplinkHighFreq_Hz_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUplinkHighFreq_Hz:");
}

id objc_msgSend_setUplinkLowFreq_Hz_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUplinkLowFreq_Hz:");
}

id objc_msgSend_setUuid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUuid:");
}

id objc_msgSend_setUwbAntBlockingPowerLimitingConfig_SubId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUwbAntBlockingPowerLimitingConfig:SubId:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setVideoErasureSupported_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVideoErasureSupported:");
}

id objc_msgSend_setVideoPacketExpected_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVideoPacketExpected:");
}

id objc_msgSend_setVoiceLQMReasonCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVoiceLQMReasonCode:");
}

id objc_msgSend_setVoiceLqmIsValid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVoiceLqmIsValid:");
}

id objc_msgSend_setVoiceLqmReasonCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVoiceLqmReasonCode:");
}

id objc_msgSend_setVoiceLqmValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVoiceLqmValue:");
}

id objc_msgSend_setWatchAntPref_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWatchAntPref:");
}

id objc_msgSend_setWatchAntPrefBand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWatchAntPrefBand:");
}

id objc_msgSend_setWatchCellularAntPref_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWatchCellularAntPref:");
}

id objc_msgSend_setWci2CoexPolicyBitmap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWci2CoexPolicyBitmap:");
}

id objc_msgSend_setWci2TxAntMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWci2TxAntMap");
}

id objc_msgSend_setWci2TxAntMapBB21(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWci2TxAntMapBB21");
}

id objc_msgSend_setWci2TxAntMapBB22(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWci2TxAntMapBB22");
}

id objc_msgSend_setWci2TxPowerLimit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWci2TxPowerLimit:");
}

id objc_msgSend_setWcmBTAFHMapDefault_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmBTAFHMapDefault:");
}

id objc_msgSend_setWcmBTAntBlockDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmBTAntBlockDuration:");
}

id objc_msgSend_setWcmBTAntBlockEnableBandsDefault_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmBTAntBlockEnableBandsDefault:");
}

id objc_msgSend_setWcmBTAntennaConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmBTAntennaConfig:");
}

id objc_msgSend_setWcmBTAntennaConfigNonCoex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmBTAntennaConfigNonCoex:");
}

id objc_msgSend_setWcmBTAntennaConfigParam1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmBTAntennaConfigParam1:");
}

id objc_msgSend_setWcmBTAntennaConfigParam1NonCoex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmBTAntennaConfigParam1NonCoex:");
}

id objc_msgSend_setWcmBTAntennaConfigParam2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmBTAntennaConfigParam2:");
}

id objc_msgSend_setWcmBTAntennaConfigParam2NonCoex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmBTAntennaConfigParam2NonCoex:");
}

id objc_msgSend_setWcmBTB40AAFHMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmBTB40AAFHMap:");
}

id objc_msgSend_setWcmBTB40BAFHMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmBTB40BAFHMap:");
}

id objc_msgSend_setWcmBTB41A1AFHMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmBTB41A1AFHMap:");
}

id objc_msgSend_setWcmBTB41A2AFHMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmBTB41A2AFHMap:");
}

id objc_msgSend_setWcmBTB7AFHMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmBTB7AFHMap:");
}

id objc_msgSend_setWcmBTDefaultAntenna_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmBTDefaultAntenna:");
}

id objc_msgSend_setWcmBTDefaultAntennaNonCoex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmBTDefaultAntennaNonCoex:");
}

id objc_msgSend_setWcmBTMaxNumberOfChannelsToAvoidForCellOOB_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmBTMaxNumberOfChannelsToAvoidForCellOOB:");
}

id objc_msgSend_setWcmBTPreferredRole_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmBTPreferredRole:");
}

id objc_msgSend_setWcmBTSupportTDDFrameConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmBTSupportTDDFrameConfig:");
}

id objc_msgSend_setWcmBTWCI2ModeRecvMsgBitmap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmBTWCI2ModeRecvMsgBitmap:");
}

id objc_msgSend_setWcmBTWCI2ModeSendMsgBitmap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmBTWCI2ModeSendMsgBitmap:");
}

id objc_msgSend_setWcmCellRc1CoexIssueTable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellRc1CoexIssueTable:");
}

id objc_msgSend_setWcmCellularCCSetToBB_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularCCSetToBB:");
}

id objc_msgSend_setWcmCellularCoexB40ARange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularCoexB40ARange:");
}

id objc_msgSend_setWcmCellularCoexB40BRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularCoexB40BRange:");
}

id objc_msgSend_setWcmCellularCoexB41A1Range_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularCoexB41A1Range:");
}

id objc_msgSend_setWcmCellularCoexB41A2Range_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularCoexB41A2Range:");
}

id objc_msgSend_setWcmCellularCoexB7DLRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularCoexB7DLRange:");
}

id objc_msgSend_setWcmCellularCoexB7ULRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularCoexB7ULRange:");
}

id objc_msgSend_setWcmCellularCoexBand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularCoexBand:");
}

id objc_msgSend_setWcmCellularLAACoexDeactStopTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularLAACoexDeactStopTimer:");
}

id objc_msgSend_setWcmCellularLAACoexDeactTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularLAACoexDeactTimer:");
}

id objc_msgSend_setWcmCellularLAACoexProtectCQIPeriod_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularLAACoexProtectCQIPeriod:");
}

id objc_msgSend_setWcmCellularLAACoexThresholdIn_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularLAACoexThresholdIn:");
}

id objc_msgSend_setWcmCellularLAACoexThresholdOut_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularLAACoexThresholdOut:");
}

id objc_msgSend_setWcmCellularScanProtectionCellFrequencies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequencies:");
}

id objc_msgSend_setWcmCellularScanProtectionCellFrequenciesforBT_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularScanProtectionCellFrequenciesforBT:");
}

id objc_msgSend_setWcmCellularScanProtectionWiFiChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannels:");
}

id objc_msgSend_setWcmCellularScanProtectionWiFiChannelsWiFiEnh_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularScanProtectionWiFiChannelsWiFiEnh:");
}

id objc_msgSend_setWcmCellularScanProtectionWiFiMaxDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularScanProtectionWiFiMaxDuration:");
}

id objc_msgSend_setWcmCellularWCI2ModeAPTTable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModeAPTTable:");
}

id objc_msgSend_setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModeControllerLTEPowerLimitingEnable:");
}

id objc_msgSend_setWcmCellularWCI2ModeControllerLTERBThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModeControllerLTERBThreshold:");
}

id objc_msgSend_setWcmCellularWCI2ModeControllerTxPowerLimit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModeControllerTxPowerLimit:");
}

id objc_msgSend_setWcmCellularWCI2ModeControllerTxPowerLimitTO_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModeControllerTxPowerLimitTO:");
}

id objc_msgSend_setWcmCellularWCI2ModeFilterRBThresholdHigh_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModeFilterRBThresholdHigh:");
}

id objc_msgSend_setWcmCellularWCI2ModeFilterRBThresholdLow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModeFilterRBThresholdLow:");
}

id objc_msgSend_setWcmCellularWCI2ModeFrameDenialWindow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModeFrameDenialWindow:");
}

id objc_msgSend_setWcmCellularWCI2ModeLTEHarqnackratioThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModeLTEHarqnackratioThreshold:");
}

id objc_msgSend_setWcmCellularWCI2ModeLTEMaxTxPowerHigh_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModeLTEMaxTxPowerHigh:");
}

id objc_msgSend_setWcmCellularWCI2ModeLTEMaxTxPowerLow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModeLTEMaxTxPowerLow:");
}

id objc_msgSend_setWcmCellularWCI2ModeLTETxDenial_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModeLTETxDenial:");
}

id objc_msgSend_setWcmCellularWCI2ModeLinkPathLossThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModeLinkPathLossThreshold:");
}

id objc_msgSend_setWcmCellularWCI2ModeMaxAllowedFrameDenials_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModeMaxAllowedFrameDenials:");
}

id objc_msgSend_setWcmCellularWCI2ModePolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModePolicy:");
}

id objc_msgSend_setWcmCellularWCI2ModePowerThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModePowerThreshold:");
}

id objc_msgSend_setWcmCellularWCI2ModeRBFilerAlpha_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModeRBFilerAlpha:");
}

id objc_msgSend_setWcmCellularWCI2ModeRBThresholdAdvTx_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModeRBThresholdAdvTx:");
}

id objc_msgSend_setWcmCellularWCI2ModeRBThresholdHigh_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModeRBThresholdHigh:");
}

id objc_msgSend_setWcmCellularWCI2ModeRBThresholdLow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModeRBThresholdLow:");
}

id objc_msgSend_setWcmCellularWCI2ModeTxPowerThresholdAdvTx_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModeTxPowerThresholdAdvTx:");
}

id objc_msgSend_setWcmCellularWCI2ModeWCI2PowerLimit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModeWCI2PowerLimit:");
}

id objc_msgSend_setWcmCellularWCI2ModeWCI2PowerLimitTO_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2ModeWCI2PowerLimitTO:");
}

id objc_msgSend_setWcmCellularWCI2Mode_CC2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2Mode_CC2:");
}

id objc_msgSend_setWcmCellularWCI2Mode_Ext_Enable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2Mode_Ext_Enable:");
}

id objc_msgSend_setWcmCellularWCI2Mode_Ext_critical_ul_ca_bitmap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2Mode_Ext_critical_ul_ca_bitmap:");
}

id objc_msgSend_setWcmCellularWCI2PlatformPolicyBitmap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellularWCI2PlatformPolicyBitmap:");
}

id objc_msgSend_setWcmCellular_CC1_Tech_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellular_CC1_Tech:");
}

id objc_msgSend_setWcmCellular_CC2_Tech_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmCellular_CC2_Tech:");
}

id objc_msgSend_setWcmGen9rFemDefaultMode2gWiFiCellularbands_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmGen9rFemDefaultMode2gWiFiCellularbands:");
}

id objc_msgSend_setWcmGen9rFemDefaultMode5gWiFiCellularbands_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmGen9rFemDefaultMode5gWiFiCellularbands:");
}

id objc_msgSend_setWcmGen9rFemLpmMode2g_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmGen9rFemLpmMode2g:");
}

id objc_msgSend_setWcmGen9rFemLpmMode5g_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmGen9rFemLpmMode5g:");
}

id objc_msgSend_setWcmHFBTChannelMapDefault_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmHFBTChannelMapDefault:");
}

id objc_msgSend_setWcmHPCellularBTAFHMapFixed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmHPCellularBTAFHMapFixed:");
}

id objc_msgSend_setWcmWCI2FrameSyncAssertJitter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWCI2FrameSyncAssertJitter:");
}

id objc_msgSend_setWcmWCI2FrameSyncAssertOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWCI2FrameSyncAssertOffset:");
}

id objc_msgSend_setWcmWCI2MWSInactivityAssertJitter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertJitter:");
}

id objc_msgSend_setWcmWCI2MWSInactivityAssertOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWCI2MWSInactivityAssertOffset:");
}

id objc_msgSend_setWcmWCI2MWSPatternAssertJitter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWCI2MWSPatternAssertJitter:");
}

id objc_msgSend_setWcmWCI2MWSPatternAssertOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWCI2MWSPatternAssertOffset:");
}

id objc_msgSend_setWcmWCI2MWSPriorityAssertOffsetRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWCI2MWSPriorityAssertOffsetRequest:");
}

id objc_msgSend_setWcmWCI2MWSRxAssertJitter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWCI2MWSRxAssertJitter:");
}

id objc_msgSend_setWcmWCI2MWSRxAssertOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWCI2MWSRxAssertOffset:");
}

id objc_msgSend_setWcmWCI2MWSRxDeAssertJitter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertJitter:");
}

id objc_msgSend_setWcmWCI2MWSRxDeAssertOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWCI2MWSRxDeAssertOffset:");
}

id objc_msgSend_setWcmWCI2MWSScanFrequencyAssertJitter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertJitter:");
}

id objc_msgSend_setWcmWCI2MWSScanFrequencyAssertOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWCI2MWSScanFrequencyAssertOffset:");
}

id objc_msgSend_setWcmWCI2MWSTxAssertJitter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWCI2MWSTxAssertJitter:");
}

id objc_msgSend_setWcmWCI2MWSTxAssertOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWCI2MWSTxAssertOffset:");
}

id objc_msgSend_setWcmWCI2MWSTxDeAssertJitter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertJitter:");
}

id objc_msgSend_setWcmWCI2MWSTxDeAssertOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWCI2MWSTxDeAssertOffset:");
}

id objc_msgSend_setWcmWiFiActiveDwellTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiActiveDwellTime:");
}

id objc_msgSend_setWcmWiFiActiveScanThrottleMask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiActiveScanThrottleMask:");
}

id objc_msgSend_setWcmWiFiAntennaCellPolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiAntennaCellPolicy:");
}

id objc_msgSend_setWcmWiFiAntennaCellPolicyDefault_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiAntennaCellPolicyDefault:");
}

id objc_msgSend_setWcmWiFiAntennaConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiAntennaConfig:");
}

id objc_msgSend_setWcmWiFiAntennaConfigDefault_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiAntennaConfigDefault:");
}

id objc_msgSend_setWcmWiFiB40ABlocklistChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiB40ABlocklistChannels:");
}

id objc_msgSend_setWcmWiFiB40AWCI2EnabledChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiB40AWCI2EnabledChannels:");
}

id objc_msgSend_setWcmWiFiB40BBlocklistChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiB40BBlocklistChannels:");
}

id objc_msgSend_setWcmWiFiB40BWCI2EnabledChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiB40BWCI2EnabledChannels:");
}

id objc_msgSend_setWcmWiFiB41A1BlocklistChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiB41A1BlocklistChannels:");
}

id objc_msgSend_setWcmWiFiB41A1WCI2EnabledChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiB41A1WCI2EnabledChannels:");
}

id objc_msgSend_setWcmWiFiB41A2BlocklistChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiB41A2BlocklistChannels:");
}

id objc_msgSend_setWcmWiFiB41A2WCI2EnabledChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiB41A2WCI2EnabledChannels:");
}

id objc_msgSend_setWcmWiFiB7BlocklistChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiB7BlocklistChannels:");
}

id objc_msgSend_setWcmWiFiB7WCI2EnabledChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiB7WCI2EnabledChannels:");
}

id objc_msgSend_setWcmWiFiBTCoexProfileDefault5G_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault5G:");
}

id objc_msgSend_setWcmWiFiBTCoexProfileDefault_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiBTCoexProfileDefault:");
}

id objc_msgSend_setWcmWiFiBTCoexProfileHPP_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiBTCoexProfileHPP:");
}

id objc_msgSend_setWcmWiFiBTCoexProfileHPPHeavy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiBTCoexProfileHPPHeavy:");
}

id objc_msgSend_setWcmWiFiBTCoexProfileHeavy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavy:");
}

id objc_msgSend_setWcmWiFiBTCoexProfileHeavyA2DP_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyA2DP:");
}

id objc_msgSend_setWcmWiFiBTCoexProfileHeavyHFP_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiBTCoexProfileHeavyHFP:");
}

id objc_msgSend_setWcmWiFiBTCoexProfileLight_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiBTCoexProfileLight:");
}

id objc_msgSend_setWcmWiFiBTCoexProfileTDD_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiBTCoexProfileTDD:");
}

id objc_msgSend_setWcmWiFiCellCoexIssueTable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiCellCoexIssueTable:");
}

id objc_msgSend_setWcmWiFiEnvelopeIndicationTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiEnvelopeIndicationTimer:");
}

id objc_msgSend_setWcmWiFiEnvelopeOnIndication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiEnvelopeOnIndication:");
}

id objc_msgSend_setWcmWiFiPriThresholdHigh_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiPriThresholdHigh:");
}

id objc_msgSend_setWcmWiFiPriThresholdLow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiPriThresholdLow:");
}

id objc_msgSend_setWcmWiFiPriThresholdMed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiPriThresholdMed:");
}

id objc_msgSend_setWcmWiFiRxProtectMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiRxProtectMode:");
}

id objc_msgSend_setWcmWiFiScanJoinProtectDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiScanJoinProtectDuration:");
}

id objc_msgSend_setWcmWiFiScanThrottlingChannelIndices_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiScanThrottlingChannelIndices:");
}

id objc_msgSend_setWcmWiFiSupportFrameConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiSupportFrameConfig:");
}

id objc_msgSend_setWcmWiFiSupportWciSignalingConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiSupportWciSignalingConfig:");
}

id objc_msgSend_setWcmWiFiTxOnIndication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiTxOnIndication:");
}

id objc_msgSend_setWcmWiFiWCI2TxDurationThresh_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWcmWiFiWCI2TxDurationThresh:");
}

id objc_msgSend_setWiFiBTCoexActiveProfileFor2G_and5G_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWiFiBTCoexActiveProfileFor2G:and5G:");
}

id objc_msgSend_setWiFiBTCoexProfile_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWiFiBTCoexProfile:atIndex:");
}

id objc_msgSend_setWiFiCallingState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWiFiCallingState:");
}

id objc_msgSend_setWiFiDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWiFiDevice:");
}

id objc_msgSend_setWiFiLinkDown_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWiFiLinkDown:");
}

id objc_msgSend_setWiFiLinkUP(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWiFiLinkUP");
}

id objc_msgSend_setWifi2GHzLTEB7IMD3ChannelsEnableType7_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifi2GHzLTEB7IMD3ChannelsEnableType7:");
}

id objc_msgSend_setWifi5GHzChannelsToEnableType7MSG_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifi5GHzChannelsToEnableType7MSG:");
}

id objc_msgSend_setWifi5GHzChannelsToEnableType7MSGCombined_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifi5GHzChannelsToEnableType7MSGCombined:");
}

id objc_msgSend_setWifiAgcCoexMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiAgcCoexMode:");
}

id objc_msgSend_setWifiAgcCoexModeLevel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiAgcCoexModeLevel:");
}

id objc_msgSend_setWifiAgcModeEnable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiAgcModeEnable:");
}

id objc_msgSend_setWifiAntselPolicyStatsArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiAntselPolicyStatsArray:");
}

id objc_msgSend_setWifiBTCoexProfilesDownloaded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiBTCoexProfilesDownloaded:");
}

id objc_msgSend_setWifiBandwidthMHz_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiBandwidthMHz:");
}

id objc_msgSend_setWifiCBRSCellFound_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiCBRSCellFound:");
}

id objc_msgSend_setWifiCCA_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiCCA:");
}

id objc_msgSend_setWifiCaptiveNetworks_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiCaptiveNetworks:");
}

id objc_msgSend_setWifiCca_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiCca:");
}

id objc_msgSend_setWifiCenterFreqMHz_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiCenterFreqMHz:");
}

id objc_msgSend_setWifiChannel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiChannel:");
}

id objc_msgSend_setWifiChannelsToBlocklist_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiChannelsToBlocklist:");
}

id objc_msgSend_setWifiChannelsToDisableOCL2G5G_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiChannelsToDisableOCL2G5G:");
}

id objc_msgSend_setWifiChannelsToDisableOCL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiChannelsToDisableOCL:");
}

id objc_msgSend_setWifiChannelsToDisableOCLEnh_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiChannelsToDisableOCLEnh:");
}

id objc_msgSend_setWifiChannelsToEnableLTEMBType7_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiChannelsToEnableLTEMBType7:");
}

id objc_msgSend_setWifiChannelsToEnableWCI2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiChannelsToEnableWCI2:");
}

id objc_msgSend_setWifiChannelsToEnableWCI2Gand5G_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiChannelsToEnableWCI2Gand5G:");
}

id objc_msgSend_setWifiChannelsToEnableWCI2V2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiChannelsToEnableWCI2V2:");
}

id objc_msgSend_setWifiChannelsToEnableWCI2WiFiEnh_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiChannelsToEnableWCI2WiFiEnh:");
}

id objc_msgSend_setWifiController_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiController:");
}

id objc_msgSend_setWifiEnhChannelsToEnableType7MSG_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiEnhChannelsToEnableType7MSG:");
}

id objc_msgSend_setWifiEstimatedBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiEstimatedBW:");
}

id objc_msgSend_setWifiMetricsEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiMetricsEnabled:");
}

id objc_msgSend_setWifiNRCellFound_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiNRCellFound:");
}

id objc_msgSend_setWifiQbssLoad_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiQbssLoad:");
}

id objc_msgSend_setWifiRSSI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiRSSI:");
}

id objc_msgSend_setWifiRssi_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiRssi:");
}

id objc_msgSend_setWifiRxPhyRate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiRxPhyRate:");
}

id objc_msgSend_setWifiRxPriThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiRxPriThreshold:");
}

id objc_msgSend_setWifiRxRetry_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiRxRetry:");
}

id objc_msgSend_setWifiSNR_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiSNR:");
}

id objc_msgSend_setWifiState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiState:");
}

id objc_msgSend_setWifiStationCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiStationCount:");
}

id objc_msgSend_setWifiTxPER_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiTxPER:");
}

id objc_msgSend_setWifiTxPhyRate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiTxPhyRate:");
}

id objc_msgSend_setWifiTxPowerdBm_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiTxPowerdBm:");
}

id objc_msgSend_setWifi_backhaul_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifi_backhaul:");
}

id objc_msgSend_setWirelessLoad_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWirelessLoad:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithRecord___::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithRecord:::::");
}

id objc_msgSend_setWithSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithSet:");
}

id objc_msgSend_setWrmAlertedMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWrmAlertedMode:");
}

id objc_msgSend_setWrmAudioErasure_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWrmAudioErasure:");
}

id objc_msgSend_setWrmIsPCDetected_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWrmIsPCDetected:");
}

id objc_msgSend_setWrmIsStallDetected_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWrmIsStallDetected:");
}

id objc_msgSend_setWrmPlatformId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWrmPlatformId:");
}

id objc_msgSend_setWrmSdmLocationDbPushOneEntryForCellType_cellType_anchorCellBandwidth_mmWavePresent_downlinkThroughput_sampleCount_deploymentCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWrmSdmLocationDbPushOneEntryForCellType:cellType:anchorCellBandwidth:mmWavePresent:downlinkThroughput:sampleCount:deploymentCount:");
}

id objc_msgSend_setWrmSku_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWrmSku:");
}

id objc_msgSend_setWrmVideoErasure_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWrmVideoErasure:");
}

id objc_msgSend_setiRATSettingsToPreferences_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setiRATSettingsToPreferences:");
}

id objc_msgSend_setupManagedObjectContext_modelURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupManagedObjectContext:modelURL:");
}

id objc_msgSend_sharedAccessoryManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedAccessoryManager");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_shouldScheduleSpeedTests(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldScheduleSpeedTests");
}

id objc_msgSend_showHOAlertUI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "showHOAlertUI:");
}

id objc_msgSend_sidPacketsReceived(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sidPacketsReceived");
}

id objc_msgSend_signalStrength(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signalStrength");
}

id objc_msgSend_signatureWithDomain_type_subType_subtypeContext_detectedProcess_triggerThresholdValues_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signatureWithDomain:type:subType:subtypeContext:detectedProcess:triggerThresholdValues:");
}

id objc_msgSend_singleton(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "singleton");
}

id objc_msgSend_sipTimeOutDetected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sipTimeOutDetected");
}

id objc_msgSend_slotID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "slotID");
}

id objc_msgSend_snrHysterisisRunning(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "snrHysterisisRunning");
}

id objc_msgSend_snrHysterisisWalking(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "snrHysterisisWalking");
}

id objc_msgSend_sortUsingComparator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortUsingComparator:");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_sortedArrayUsingDescriptors_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortedArrayUsingDescriptors:");
}

id objc_msgSend_sosWaypointRSRPTh(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sosWaypointRSRPTh");
}

id objc_msgSend_source(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "source");
}

id objc_msgSend_speed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "speed");
}

id objc_msgSend_stallDetected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stallDetected");
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "start");
}

id objc_msgSend_startBandwidthEstimation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startBandwidthEstimation:");
}

id objc_msgSend_startDownloadTest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startDownloadTest:");
}

id objc_msgSend_startDownloadWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startDownloadWithCompletion:");
}

id objc_msgSend_startHomeKitTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startHomeKitTimer");
}

id objc_msgSend_startHomeKitTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startHomeKitTimer:");
}

id objc_msgSend_startMetadataCollectionWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startMetadataCollectionWithCompletion:");
}

id objc_msgSend_startMonitoring(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startMonitoring");
}

id objc_msgSend_startMonitoringAlarms(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startMonitoringAlarms");
}

id objc_msgSend_startPeriodicTask::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startPeriodicTask::");
}

id objc_msgSend_startService(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startService");
}

id objc_msgSend_startTimer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startTimer:");
}

id objc_msgSend_startUpdatingLocation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startUpdatingLocation");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "status");
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stop");
}

id objc_msgSend_stopAllAlarms(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopAllAlarms");
}

id objc_msgSend_stopHomeKitTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopHomeKitTimer");
}

id objc_msgSend_stopMetadataCollection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopMetadataCollection");
}

id objc_msgSend_stopMonitoring(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopMonitoring");
}

id objc_msgSend_stopMonitoringAlarms(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopMonitoringAlarms");
}

id objc_msgSend_stopPendingAlarms(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopPendingAlarms");
}

id objc_msgSend_stopPeriodicTask(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopPeriodicTask");
}

id objc_msgSend_stopTimer_wifi2GStartTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopTimer:wifi2GStartTime:");
}

id objc_msgSend_stopUpdatingLocation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopUpdatingLocation");
}

id objc_msgSend_stopWiFi2GTimer_wifi2GStartTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopWiFi2GTimer:wifi2GStartTime:");
}

id objc_msgSend_storeRCU2Status_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "storeRCU2Status:");
}

id objc_msgSend_storeURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "storeURL");
}

id objc_msgSend_streamStateAoS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "streamStateAoS");
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByAppendingPathComponent:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringValue");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithString:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_subSelector(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subSelector");
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_subframeFormat(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subframeFormat");
}

id objc_msgSend_submitAWDMetricsforNetworkConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitAWDMetricsforNetworkConfiguration");
}

id objc_msgSend_submitDataLinkPreferenceaMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitDataLinkPreferenceaMetrics");
}

id objc_msgSend_submitEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitEvent:");
}

id objc_msgSend_submitMeric5GVersusWiFiLinkMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitMeric5GVersusWiFiLinkMetrics");
}

id objc_msgSend_submitMericStreaming(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitMericStreaming");
}

id objc_msgSend_submitMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitMetrics");
}

id objc_msgSend_submitMetrics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitMetrics:");
}

id objc_msgSend_submitMetricsCBRSWithDataSimRecommendation_forSimSlot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitMetricsCBRSWithDataSimRecommendation:forSimSlot:");
}

id objc_msgSend_submitMetricsFaceTimeHandover(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitMetricsFaceTimeHandover");
}

id objc_msgSend_submitWiFiVersusCellAWDMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitWiFiVersusCellAWDMetrics");
}

id objc_msgSend_submitWifiAntselPolicyStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitWifiAntselPolicyStats");
}

id objc_msgSend_subscribeAppStateChangeEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subscribeAppStateChangeEvent");
}

id objc_msgSend_subscribeForDeviceLockStateInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subscribeForDeviceLockStateInfo");
}

id objc_msgSend_subscribeForScreenStateInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subscribeForScreenStateInfo");
}

id objc_msgSend_subscriptions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subscriptions");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_suspendExternalConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suspendExternalConnection");
}

id objc_msgSend_switchPrivateNwDataSim_currentSlotQuality_anyCallState_forceRecommend_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "switchPrivateNwDataSim:currentSlotQuality:anyCallState:forceRecommend:");
}

id objc_msgSend_symtompsMetricsEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "symtompsMetricsEnabled");
}

id objc_msgSend_tcpActiveConnSuccessThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tcpActiveConnSuccessThreshold");
}

id objc_msgSend_tcpIdleConnSuccessThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tcpIdleConnSuccessThreshold");
}

id objc_msgSend_tcpJitterThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tcpJitterThreshold");
}

id objc_msgSend_tcpRttThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tcpRttThreshold");
}

id objc_msgSend_tddBand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tddBand");
}

id objc_msgSend_tddULDLConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tddULDLConfig");
}

id objc_msgSend_threadCOEXStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "threadCOEXStatus");
}

id objc_msgSend_threadClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "threadClient");
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSince1970");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceNow");
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceReferenceDate");
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timestamp");
}

id objc_msgSend_toggleFastLQMReport_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "toggleFastLQMReport:");
}

id objc_msgSend_toggleSAState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "toggleSAState:");
}

id objc_msgSend_toggleWiFiLQMIfNeeded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "toggleWiFiLQMIfNeeded:");
}

id objc_msgSend_totalAudioPacketLossRate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalAudioPacketLossRate");
}

id objc_msgSend_totalAudioPacketReceived(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalAudioPacketReceived");
}

id objc_msgSend_totalErasures(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalErasures");
}

id objc_msgSend_totalPlayBacks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalPlayBacks");
}

id objc_msgSend_totalVideoErasure(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalVideoErasure");
}

id objc_msgSend_totalVideoPacketLossRate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalVideoPacketLossRate");
}

id objc_msgSend_totalVideoPacketReceived(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalVideoPacketReceived");
}

id objc_msgSend_transportMetricsRateLimitingThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transportMetricsRateLimitingThreshold");
}

id objc_msgSend_transportType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transportType");
}

id objc_msgSend_treatmentId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "treatmentId");
}

id objc_msgSend_triggerBWEval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggerBWEval");
}

id objc_msgSend_triggerEnableSA_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggerEnableSA:");
}

id objc_msgSend_triggerHarvestDataEval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggerHarvestDataEval");
}

id objc_msgSend_triggerHarvestedCellEval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggerHarvestedCellEval");
}

id objc_msgSend_truncateFileAtOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "truncateFileAtOffset:");
}

id objc_msgSend_ulBandwidth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ulBandwidth");
}

id objc_msgSend_ulBandwidth2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ulBandwidth2");
}

id objc_msgSend_ulBandwidthCellVictim(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ulBandwidthCellVictim");
}

id objc_msgSend_ulBandwidthWiFiVictim(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ulBandwidthWiFiVictim");
}

id objc_msgSend_ulCPConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ulCPConfig");
}

id objc_msgSend_ulCenterFreq(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ulCenterFreq");
}

id objc_msgSend_ulCenterFreq2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ulCenterFreq2");
}

id objc_msgSend_ulCenterFreqCellVictim(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ulCenterFreqCellVictim");
}

id objc_msgSend_ulCenterFreqWiFiVictim(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ulCenterFreqWiFiVictim");
}

id objc_msgSend_ulcaPriority(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ulcaPriority");
}

id objc_msgSend_ulcaPriorityCCWiFi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ulcaPriorityCCWiFi");
}

id objc_msgSend_unSubscribeAppStateChangeEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unSubscribeAppStateChangeEvent");
}

id objc_msgSend_unSubscribeForDeviceLockStateInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unSubscribeForDeviceLockStateInfo");
}

id objc_msgSend_unSubscribeForScreenStateInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unSubscribeForScreenStateInfo");
}

id objc_msgSend_uniqueIDOverride(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uniqueIDOverride");
}

id objc_msgSend_unregisterForLocalNotifications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterForLocalNotifications");
}

id objc_msgSend_unregisterWiFiCallbacks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterWiFiCallbacks");
}

id objc_msgSend_unsignedCharValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedCharValue");
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedIntValue");
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedLongLongValue");
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedLongValue");
}

id objc_msgSend_update5GHzHostAP_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "update5GHzHostAP:");
}

id objc_msgSend_update_value_BOOL_subId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "update:value_BOOL:subId:");
}

id objc_msgSend_update_value_double_subId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "update:value_double:subId:");
}

id objc_msgSend_update_value_object_subId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "update:value_object:subId:");
}

id objc_msgSend_update_value_uint64_subId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "update:value_uint64:subId:");
}

id objc_msgSend_updateAVCRTPMetric_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAVCRTPMetric:");
}

id objc_msgSend_updateAWDLActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAWDLActive:");
}

id objc_msgSend_updateAWDLRTGActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAWDLRTGActive:");
}

id objc_msgSend_updateActiveHandoverStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateActiveHandoverStatus");
}

id objc_msgSend_updateAllNetworkSymptoms_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAllNetworkSymptoms:");
}

id objc_msgSend_updateAntennaSelection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAntennaSelection:");
}

id objc_msgSend_updateAntennaSelectionV2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAntennaSelectionV2:");
}

id objc_msgSend_updateAntennaSelectionWiFiEnh2G_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAntennaSelectionWiFiEnh2G:");
}

id objc_msgSend_updateAntennaSelectionWiFiEnh5G_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAntennaSelectionWiFiEnh5G:");
}

id objc_msgSend_updateAntennaSelectionWiFiEnh6G_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAntennaSelectionWiFiEnh6G:");
}

id objc_msgSend_updateAntselPolicyStatsArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAntselPolicyStatsArray:");
}

id objc_msgSend_updateAppState_Category_sessionType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAppState:Category:sessionType:");
}

id objc_msgSend_updateAudioQuality_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAudioQuality:");
}

id objc_msgSend_updateAudioQuality::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAudioQuality::");
}

id objc_msgSend_updateAudioQualityKaroo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAudioQualityKaroo:");
}

id objc_msgSend_updateAudioQualityKaroo::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAudioQualityKaroo::");
}

id objc_msgSend_updateAwakeMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAwakeMode:");
}

id objc_msgSend_updateBBHighPowerState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateBBHighPowerState:");
}

id objc_msgSend_updateBBLimitedServiceState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateBBLimitedServiceState:");
}

id objc_msgSend_updateBBLongSessionState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateBBLongSessionState:");
}

id objc_msgSend_updateBBRC1Params_channel_duration_priority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateBBRC1Params:channel:duration:priority:");
}

id objc_msgSend_updateBBState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateBBState");
}

id objc_msgSend_updateBLEActiveScanPwrLmtAssertionInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateBLEActiveScanPwrLmtAssertionInterval:");
}

id objc_msgSend_updateBSPState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateBSPState");
}

id objc_msgSend_updateBTCatsState_bitmap_band_desiredBtDc_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateBTCatsState:bitmap:band:desiredBtDc:");
}

id objc_msgSend_updateBTCoexConnectedDevices_at_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateBTCoexConnectedDevices:at:");
}

id objc_msgSend_updateBTCoexStats_tddCnt_hybridCnt_btDurMs_totDurMs_parallelCnt_btDurAirMs_wlrssiCoex_btrssiCoex_activeProfileFor2G_btPowerState_at_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateBTCoexStats_tddCnt:hybridCnt:btDurMs:totDurMs:parallelCnt:btDurAirMs:wlrssiCoex:btrssiCoex:activeProfileFor2G:btPowerState:at:");
}

id objc_msgSend_updateBTConnectedDevices_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateBTConnectedDevices:");
}

id objc_msgSend_updateBTLQMScore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateBTLQMScore");
}

id objc_msgSend_updateBTRCU2TimingArray(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateBTRCU2TimingArray");
}

id objc_msgSend_updateBTRCU2TimingArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateBTRCU2TimingArray:");
}

id objc_msgSend_updateBasebandPowerState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateBasebandPowerState");
}

id objc_msgSend_updateCCA_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateCCA:");
}

id objc_msgSend_updateCTSacDriver_frequencyToAdd_frequencyToAddBw_frequencytoRemove_client_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateCTSacDriver:frequencyToAdd:frequencyToAddBw:frequencytoRemove:client:");
}

id objc_msgSend_updateCTSacDriverRemoveAllFrequenciesFromClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateCTSacDriverRemoveAllFrequenciesFromClient:");
}

id objc_msgSend_updateCTSacDriverRemoveAllFromWifiClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateCTSacDriverRemoveAllFromWifiClient");
}

id objc_msgSend_updateCTSacDriverWifiInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateCTSacDriverWifiInfo");
}

id objc_msgSend_updateCarplayBTScanParams_reason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateCarplayBTScanParams:reason:");
}

id objc_msgSend_updateCellTxPowerLimit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateCellTxPowerLimit");
}

id objc_msgSend_updateCellularFrequencyConfig_withWiFiRangingDesenseFlag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateCellularFrequencyConfig:withWiFiRangingDesenseFlag:");
}

id objc_msgSend_updateCellularMetricsMovAverage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateCellularMetricsMovAverage");
}

id objc_msgSend_updateCellularR1CoexBandStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateCellularR1CoexBandStatus");
}

id objc_msgSend_updateChanUtilization_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateChanUtilization:");
}

id objc_msgSend_updateChannelQualityInfo_bandCode_chqInfoDict_ts_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateChannelQualityInfo:bandCode:chqInfoDict:ts:");
}

id objc_msgSend_updateChannelsForTimeSharingMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateChannelsForTimeSharingMode:");
}

id objc_msgSend_updateChannelsToBlocklist_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateChannelsToBlocklist:");
}

id objc_msgSend_updateChannelsToDisableOCL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateChannelsToDisableOCL:");
}

id objc_msgSend_updateChannelsToDisableOCLWiFiEnh_WiFiEnhChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateChannelsToDisableOCLWiFiEnh:WiFiEnhChannels:");
}

id objc_msgSend_updateChannelsToEnableType7MSG2GWiFi_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateChannelsToEnableType7MSG2GWiFi:");
}

id objc_msgSend_updateChannelsToEnableType7MSG_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateChannelsToEnableType7MSG:");
}

id objc_msgSend_updateChannelsToEnableType7MSGWiFiEnh_WiFiEnhChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateChannelsToEnableType7MSGWiFiEnh:WiFiEnhChannels:");
}

id objc_msgSend_updateChannelsToEnableWCI2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateChannelsToEnableWCI2:");
}

id objc_msgSend_updateChannelsToEnableWCI2V2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateChannelsToEnableWCI2V2:");
}

id objc_msgSend_updateChannelsToEnableWCI2WiFiEnh_WiFiEnhChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateChannelsToEnableWCI2WiFiEnh:WiFiEnhChannels:");
}

id objc_msgSend_updateCoexDurationCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateCoexDurationCount:");
}

id objc_msgSend_updateCoexMonitorState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateCoexMonitorState:");
}

id objc_msgSend_updateCoexRxGainMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateCoexRxGainMode:");
}

id objc_msgSend_updateConfiguredMaxBW_dlbw_ulbw_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateConfiguredMaxBW:dlbw:ulbw:");
}

id objc_msgSend_updateConnectedStateSummary_neighberNRCell_highrateIndicator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateConnectedStateSummary:neighberNRCell:highrateIndicator:");
}

id objc_msgSend_updateConnectionInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateConnectionInfo:");
}

id objc_msgSend_updateContentionFreeWiFiInfoToRC2_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateContentionFreeWiFiInfoToRC2:count:");
}

id objc_msgSend_updateControllerSession_ofId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateControllerSession:ofId:");
}

id objc_msgSend_updateControllerState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateControllerState:");
}

id objc_msgSend_updateControllerTxPower_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateControllerTxPower:");
}

id objc_msgSend_updateCurrentHostAPState_channel_centerFreq_bandwidth_apState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateCurrentHostAPState:channel:centerFreq:bandwidth:apState:");
}

id objc_msgSend_updateCurrentRatInfo_currentNRCell_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateCurrentRatInfo:currentNRCell:");
}

id objc_msgSend_updateDPDMetrics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateDPDMetrics:");
}

id objc_msgSend_updateDataEnableStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateDataEnableStatus:");
}

id objc_msgSend_updateDataStallState_stall_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateDataStallState:stall:");
}

id objc_msgSend_updateDevicePairingState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateDevicePairingState");
}

id objc_msgSend_updateDiversityAFHMapForC0B0_C0B1_C1B0_C1B1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateDiversityAFHMapForC0B0:C0B1:C1B0:C1B1:");
}

id objc_msgSend_updateDownlinkEstimatedBW_bw_conf_lte_nr_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateDownlinkEstimatedBW:bw:conf:lte:nr:");
}

id objc_msgSend_updateFrameSyncBit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateFrameSyncBit:");
}

id objc_msgSend_updateFrequencyBandForBT(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateFrequencyBandForBT");
}

id objc_msgSend_updateFwTxPer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateFwTxPer");
}

id objc_msgSend_updateFwTxStats_::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateFwTxStats:::");
}

id objc_msgSend_updateGPSBandsInfo_CLUpdate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateGPSBandsInfo:CLUpdate:");
}

id objc_msgSend_updateGPSStateBit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateGPSStateBit:");
}

id objc_msgSend_updateGen9rFemConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateGen9rFemConfiguration");
}

id objc_msgSend_updateGlobalCellID_gci_cellprefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateGlobalCellID:gci:cellprefix:");
}

id objc_msgSend_updateGpsbandsInfoForBB(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateGpsbandsInfoForBB");
}

id objc_msgSend_updateGpsbandsInfoForBBv2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateGpsbandsInfoForBBv2");
}

id objc_msgSend_updateHFBtAntennaRequestWithDuration_unii1Enabled_unii3Enabled_unii5aEnabled_unii5bEnabled_unii5cEnabled_unii5dEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateHFBtAntennaRequestWithDuration:unii1Enabled:unii3Enabled:unii5aEnabled:unii5bEnabled:unii5cEnabled:unii5dEnabled:");
}

id objc_msgSend_updateHFBtAntennaRequestWithDuration_unii1Enabled_unii3Enabled_unii5aEnabled_unii5bEnabled_unii5cEnabled_unii5dEnabled_unii1ConditionId_unii3ConditionId_unii5aConditionId_unii5bConditionId_unii5cConditionId_unii5dConditionId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateHFBtAntennaRequestWithDuration:unii1Enabled:unii3Enabled:unii5aEnabled:unii5bEnabled:unii5cEnabled:unii5dEnabled:unii1ConditionId:unii3ConditionId:unii5aConditionId:unii5bConditionId:unii5cConditionId:unii5dConditionId:");
}

id objc_msgSend_updateHFBtTxIndication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateHFBtTxIndication:");
}

id objc_msgSend_updateHPCellularCoexStatsWithBtDeviceCount_a2dpDeviceCount_escoDeviceCount_scoDeviceCount_hidDeviceCount_leDeviceCount_leaDeviceCount_llaDeviceCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateHPCellularCoexStatsWithBtDeviceCount:a2dpDeviceCount:escoDeviceCount:scoDeviceCount:hidDeviceCount:leDeviceCount:leaDeviceCount:llaDeviceCount:");
}

id objc_msgSend_updateHPCellularMetric(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateHPCellularMetric");
}

id objc_msgSend_updateHPCellularSessionStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateHPCellularSessionStatus:");
}

id objc_msgSend_updateHandoverReasonCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateHandoverReasonCode:");
}

id objc_msgSend_updateHighRateLikely_highrateIndicator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateHighRateLikely:highrateIndicator:");
}

id objc_msgSend_updateHostAPState_channel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateHostAPState:channel:");
}

id objc_msgSend_updateLPSCBeaconOffload_andScanOffload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateLPSCBeaconOffload:andScanOffload:");
}

id objc_msgSend_updateLQMReceived(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateLQMReceived");
}

id objc_msgSend_updateLTEBandwidth_LTEBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateLTEBandwidth:LTEBW:");
}

id objc_msgSend_updateLowWiFi5GRates_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateLowWiFi5GRates:");
}

id objc_msgSend_updateLqmState_deviceRRCState_subscriptionSlot_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateLqmState:deviceRRCState:subscriptionSlot:");
}

id objc_msgSend_updateMWSChannelParameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateMWSChannelParameters:");
}

id objc_msgSend_updateMWSFrameConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateMWSFrameConfig:");
}

id objc_msgSend_updateMWSScanFrequencyTable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateMWSScanFrequencyTable:");
}

id objc_msgSend_updateMWSSignalingConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateMWSSignalingConfig");
}

id objc_msgSend_updateNANActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateNANActive:");
}

id objc_msgSend_updateNRQSHMetrics_::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateNRQSHMetrics:::");
}

id objc_msgSend_updatePSAttachStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updatePSAttachStatus:");
}

id objc_msgSend_updatePencilCoexActivationCondition(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updatePencilCoexActivationCondition");
}

id objc_msgSend_updatePhyRates_::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updatePhyRates:::");
}

id objc_msgSend_updatePointOfInterest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updatePointOfInterest:");
}

id objc_msgSend_updatePolicyForBB20_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updatePolicyForBB20:");
}

id objc_msgSend_updatePowerOnGen9rFemConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updatePowerOnGen9rFemConfiguration");
}

id objc_msgSend_updatePowerState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updatePowerState:");
}

id objc_msgSend_updatePreferredAFHMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updatePreferredAFHMap:");
}

id objc_msgSend_updatePreferredAFHMapRCU2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updatePreferredAFHMapRCU2:");
}

id objc_msgSend_updatePreferredHFBTChannelMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updatePreferredHFBTChannelMap:");
}

id objc_msgSend_updatePreferredRole_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updatePreferredRole:");
}

id objc_msgSend_updatePrevTimeStamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updatePrevTimeStamp");
}

id objc_msgSend_updateQSHMetrics__::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateQSHMetrics::::");
}

id objc_msgSend_updateRBThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateRBThreshold:");
}

id objc_msgSend_updateRCU2CoexParams_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateRCU2CoexParams:");
}

id objc_msgSend_updateRSSITh_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateRSSITh:");
}

id objc_msgSend_updateRegistrationStatus::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateRegistrationStatus::");
}

id objc_msgSend_updateRxBeaconPer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateRxBeaconPer");
}

id objc_msgSend_updateRxBeacons::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateRxBeacons::");
}

id objc_msgSend_updateRxPriorityThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateRxPriorityThreshold:");
}

id objc_msgSend_updateRxRatio(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateRxRatio");
}

id objc_msgSend_updateRxStats::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateRxStats::");
}

id objc_msgSend_updateSIPMetrics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateSIPMetrics:");
}

id objc_msgSend_updateSlotInfoCTServie(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateSlotInfoCTServie");
}

id objc_msgSend_updateStationCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateStationCount:");
}

id objc_msgSend_updateTreatment(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateTreatment");
}

id objc_msgSend_updateTxPer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateTxPer");
}

id objc_msgSend_updateTxPowerCapForHead_forBody_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateTxPowerCapForHead:forBody:");
}

id objc_msgSend_updateTxStats_::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateTxStats:::");
}

id objc_msgSend_updateUWB5GHzActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateUWB5GHzActive:");
}

id objc_msgSend_updateUplinkEstimatedBW_bw_conf_queue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateUplinkEstimatedBW:bw:conf:queue:");
}

id objc_msgSend_updateVoLTEEnableStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateVoLTEEnableStatus:");
}

id objc_msgSend_updateVoLTESpeechErasure_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateVoLTESpeechErasure:");
}

id objc_msgSend_updateWCI2CoexPolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWCI2CoexPolicy:");
}

id objc_msgSend_updateWCI2Mode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWCI2Mode:");
}

id objc_msgSend_updateWatchAntennaPref_watchAntPref_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWatchAntennaPref:watchAntPref:");
}

id objc_msgSend_updateWeightedAverageMetrics__::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWeightedAverageMetrics::::");
}

id objc_msgSend_updateWiFiA2DPActiveStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFiA2DPActiveStatus:");
}

id objc_msgSend_updateWiFiA2DPLLAActiveStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFiA2DPLLAActiveStatus:");
}

id objc_msgSend_updateWiFiAirplayCriticalState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFiAirplayCriticalState:");
}

id objc_msgSend_updateWiFiBTCoexActiveProfileFor2G_and5G_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFiBTCoexActiveProfileFor2G:and5G:");
}

id objc_msgSend_updateWiFiBTConnectionReport(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFiBTConnectionReport");
}

id objc_msgSend_updateWiFiBTConnectionReport_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFiBTConnectionReport:");
}

id objc_msgSend_updateWiFiBTLeConnEnable_andPeakOutageMs_andDurationMs_andDutyCycle_andReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFiBTLeConnEnable:andPeakOutageMs:andDurationMs:andDutyCycle:andReason:");
}

id objc_msgSend_updateWiFiBand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFiBand:");
}

id objc_msgSend_updateWiFiChannelInfo_bandwidth_regBand_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFiChannelInfo:bandwidth:regBand:");
}

id objc_msgSend_updateWiFiCoexState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFiCoexState");
}

id objc_msgSend_updateWiFiLimitedAggregationActiveStatus_andUseCase_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFiLimitedAggregationActiveStatus:andUseCase:");
}

id objc_msgSend_updateWiFiRCU1ModeChange(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFiRCU1ModeChange");
}

id objc_msgSend_updateWiFiRCU1ModeChanged_andChannelChanged_andMode_andChannel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFiRCU1ModeChanged:andChannelChanged:andMode:andChannel:");
}

id objc_msgSend_updateWiFiRCU1Status(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFiRCU1Status");
}

id objc_msgSend_updateWiFiRCU1ULOFDMAStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFiRCU1ULOFDMAStatus");
}

id objc_msgSend_updateWiFiRCU2CoexMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFiRCU2CoexMode");
}

id objc_msgSend_updateWiFiRCU2CoexParams(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFiRCU2CoexParams");
}

id objc_msgSend_updateWiFiRCU2PMProtectionMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFiRCU2PMProtectionMode");
}

id objc_msgSend_updateWiFiRCU2TimingArray(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFiRCU2TimingArray");
}

id objc_msgSend_updateWiFiRCU2TimingArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFiRCU2TimingArray:");
}

id objc_msgSend_updateWiFiState_channel_centerFreq_bandwidth_hostAp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFiState:channel:centerFreq:bandwidth:hostAp:");
}

id objc_msgSend_updateWiFiStatusCenterFreq_bandwidth_txPower_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFiStatusCenterFreq:bandwidth:txPower:");
}

id objc_msgSend_updateWiFieSCOActiveStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWiFieSCOActiveStatus:");
}

id objc_msgSend_updateWifiEnvelopeParams(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateWifiEnvelopeParams");
}

id objc_msgSend_updateiRATMetricCellToWifi__::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateiRATMetricCellToWifi::::");
}

id objc_msgSend_updateiRATMetricWifiToCell__::(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateiRATMetricWifiToCell::::");
}

id objc_msgSend_uplinkHighFreq_Hz(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uplinkHighFreq_Hz");
}

id objc_msgSend_uplinkLowFreq_Hz(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uplinkLowFreq_Hz");
}

id objc_msgSend_usageConsultOn_onlyRelativeToReferencePoint_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "usageConsultOn:onlyRelativeToReferencePoint:reply:");
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userInfo");
}

id objc_msgSend_usesInterfaceType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "usesInterfaceType:");
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uuid");
}

id objc_msgSend_uwbCoexIssueFreqRangeForCellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_uwbIssueFreqRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uwbCoexIssueFreqRangeForCellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:uwbIssueFreqRange:");
}

id objc_msgSend_uwbNbCoexIssueChannelForCellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_uwbNbIssueChannelBegin_uwbNbIssueChannelEnd_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uwbNbCoexIssueChannelForCellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:uwbNbIssueChannelBegin:uwbNbIssueChannelEnd:");
}

id objc_msgSend_uwbNbDynamicCoexPolicyForCellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uwbNbDynamicCoexPolicyForCellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:");
}

id objc_msgSend_validateStrongestSOSTimeStamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validateStrongestSOSTimeStamp:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valueForProperty_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForProperty:");
}

id objc_msgSend_videoErasureSupported(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "videoErasureSupported");
}

id objc_msgSend_videoPacketExpected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "videoPacketExpected");
}

id objc_msgSend_viewContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "viewContext");
}

id objc_msgSend_wRMCACoexSubmit_AntSelPolicyStates_IssueType_IsCoexBand_HasAntConstraint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wRMCACoexSubmit_AntSelPolicyStates:IssueType:IsCoexBand:HasAntConstraint:");
}

id objc_msgSend_wRMCACoexSubmit_ULCACoexStates_ULCAPrimaryCarrierULFreq_ULCAPrimaryCarrierDLFreq_ULCAPrimaryCarrierULBW_ULCAPrimaryCarrierDLBW_ULCACriticalCarrierULFreq_ULCACriticalCarrierDLFreq_ULCACriticalCarrierULBW_ULCACriticalCarrierDLBW_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wRMCACoexSubmit_ULCACoexStates:ULCAPrimaryCarrierULFreq:ULCAPrimaryCarrierDLFreq:ULCAPrimaryCarrierULBW:ULCAPrimaryCarrierDLBW:ULCACriticalCarrierULFreq:ULCACriticalCarrierDLFreq:ULCACriticalCarrierULBW:ULCACriticalCarrierDLBW:");
}

id objc_msgSend_waitForDrivingState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitForDrivingState:");
}

id objc_msgSend_waitForPedestrianState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitForPedestrianState:");
}

id objc_msgSend_waitForRunningState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitForRunningState:");
}

id objc_msgSend_waitForStaticState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitForStaticState:");
}

id objc_msgSend_waitForWalkingState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitForWalkingState:");
}

id objc_msgSend_watchAntPref(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "watchAntPref");
}

id objc_msgSend_watchAntPrefBand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "watchAntPrefBand");
}

id objc_msgSend_watchAntennaPrefEnabledInPolicy_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_watchAntPref_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "watchAntennaPrefEnabledInPolicy:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:watchAntPref:");
}

id objc_msgSend_watchAntennaPreferenceEnableCheckBandCombination_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "watchAntennaPreferenceEnableCheckBandCombination:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:");
}

id objc_msgSend_watchCellularAntPref(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "watchCellularAntPref");
}

id objc_msgSend_watchpointOn_forIdentifier_andKey_onThreshold_withOptions_uponHit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "watchpointOn:forIdentifier:andKey:onThreshold:withOptions:uponHit:");
}

id objc_msgSend_wci2CoexPolicyBitmap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wci2CoexPolicyBitmap");
}

id objc_msgSend_wci2TxPowerLimit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wci2TxPowerLimit");
}

id objc_msgSend_wcmBTAFHMapDefault(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmBTAFHMapDefault");
}

id objc_msgSend_wcmBTAntBlockDuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmBTAntBlockDuration");
}

id objc_msgSend_wcmBTAntBlockEnableBandsDefault(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmBTAntBlockEnableBandsDefault");
}

id objc_msgSend_wcmBTAntennaConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmBTAntennaConfig");
}

id objc_msgSend_wcmBTAntennaConfigNonCoex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmBTAntennaConfigNonCoex");
}

id objc_msgSend_wcmBTB40AAFHMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmBTB40AAFHMap");
}

id objc_msgSend_wcmBTB40BAFHMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmBTB40BAFHMap");
}

id objc_msgSend_wcmBTB41A1AFHMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmBTB41A1AFHMap");
}

id objc_msgSend_wcmBTB41A2AFHMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmBTB41A2AFHMap");
}

id objc_msgSend_wcmBTB7AFHMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmBTB7AFHMap");
}

id objc_msgSend_wcmBTDefaultAntenna(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmBTDefaultAntenna");
}

id objc_msgSend_wcmBTDefaultAntennaNonCoex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmBTDefaultAntennaNonCoex");
}

id objc_msgSend_wcmBTMaxNumberOfChannelsToAvoidForCellOOB(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmBTMaxNumberOfChannelsToAvoidForCellOOB");
}

id objc_msgSend_wcmBTPreferredRole(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmBTPreferredRole");
}

id objc_msgSend_wcmBTSupportTDDFrameConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmBTSupportTDDFrameConfig");
}

id objc_msgSend_wcmBTWCI2ModeRecvMsgBitmap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmBTWCI2ModeRecvMsgBitmap");
}

id objc_msgSend_wcmBTWCI2ModeSendMsgBitmap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmBTWCI2ModeSendMsgBitmap");
}

id objc_msgSend_wcmCellRc1CoexIssueTable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellRc1CoexIssueTable");
}

id objc_msgSend_wcmCellularCCSetToBB(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularCCSetToBB");
}

id objc_msgSend_wcmCellularCoexB40ARange(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularCoexB40ARange");
}

id objc_msgSend_wcmCellularCoexB40BRange(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularCoexB40BRange");
}

id objc_msgSend_wcmCellularCoexB41A1Range(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularCoexB41A1Range");
}

id objc_msgSend_wcmCellularCoexB41A2Range(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularCoexB41A2Range");
}

id objc_msgSend_wcmCellularCoexB7DLRange(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularCoexB7DLRange");
}

id objc_msgSend_wcmCellularCoexB7ULRange(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularCoexB7ULRange");
}

id objc_msgSend_wcmCellularCoexBand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularCoexBand");
}

id objc_msgSend_wcmCellularLAACoexDeactStopTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularLAACoexDeactStopTimer");
}

id objc_msgSend_wcmCellularLAACoexDeactTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularLAACoexDeactTimer");
}

id objc_msgSend_wcmCellularLAACoexProtectCQIPeriod(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularLAACoexProtectCQIPeriod");
}

id objc_msgSend_wcmCellularLAACoexThresholdIn(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularLAACoexThresholdIn");
}

id objc_msgSend_wcmCellularLAACoexThresholdOut(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularLAACoexThresholdOut");
}

id objc_msgSend_wcmCellularScanProtectionCellFrequencies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularScanProtectionCellFrequencies");
}

id objc_msgSend_wcmCellularScanProtectionCellFrequenciesforBT(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularScanProtectionCellFrequenciesforBT");
}

id objc_msgSend_wcmCellularScanProtectionWiFiChannels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularScanProtectionWiFiChannels");
}

id objc_msgSend_wcmCellularScanProtectionWiFiChannelsWiFiEnh(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularScanProtectionWiFiChannelsWiFiEnh");
}

id objc_msgSend_wcmCellularScanProtectionWiFiMaxDuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularScanProtectionWiFiMaxDuration");
}

id objc_msgSend_wcmCellularWCI2ModeAPTTable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2ModeAPTTable");
}

id objc_msgSend_wcmCellularWCI2ModeControllerLTEPowerLimitingEnable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2ModeControllerLTEPowerLimitingEnable");
}

id objc_msgSend_wcmCellularWCI2ModeControllerLTERBThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2ModeControllerLTERBThreshold");
}

id objc_msgSend_wcmCellularWCI2ModeControllerTxPowerLimitTO(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2ModeControllerTxPowerLimitTO");
}

id objc_msgSend_wcmCellularWCI2ModeFrameDenialWindow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2ModeFrameDenialWindow");
}

id objc_msgSend_wcmCellularWCI2ModeLTEHarqnackratioThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2ModeLTEHarqnackratioThreshold");
}

id objc_msgSend_wcmCellularWCI2ModeLTEMaxTxPowerHigh(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2ModeLTEMaxTxPowerHigh");
}

id objc_msgSend_wcmCellularWCI2ModeLTEMaxTxPowerLow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2ModeLTEMaxTxPowerLow");
}

id objc_msgSend_wcmCellularWCI2ModeLTETxDenial(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2ModeLTETxDenial");
}

id objc_msgSend_wcmCellularWCI2ModeLinkPathLossThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2ModeLinkPathLossThreshold");
}

id objc_msgSend_wcmCellularWCI2ModeMaxAllowedFrameDenials(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2ModeMaxAllowedFrameDenials");
}

id objc_msgSend_wcmCellularWCI2ModePolicy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2ModePolicy");
}

id objc_msgSend_wcmCellularWCI2ModePowerThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2ModePowerThreshold");
}

id objc_msgSend_wcmCellularWCI2ModeRBFilerAlpha(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2ModeRBFilerAlpha");
}

id objc_msgSend_wcmCellularWCI2ModeRBThresholdAdvTx(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2ModeRBThresholdAdvTx");
}

id objc_msgSend_wcmCellularWCI2ModeRBThresholdHigh(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2ModeRBThresholdHigh");
}

id objc_msgSend_wcmCellularWCI2ModeRBThresholdLow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2ModeRBThresholdLow");
}

id objc_msgSend_wcmCellularWCI2ModeTxPowerThresholdAdvTx(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2ModeTxPowerThresholdAdvTx");
}

id objc_msgSend_wcmCellularWCI2ModeWCI2PowerLimitTO(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2ModeWCI2PowerLimitTO");
}

id objc_msgSend_wcmCellularWCI2Mode_CC2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2Mode_CC2");
}

id objc_msgSend_wcmCellularWCI2Mode_Ext_Enable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2Mode_Ext_Enable");
}

id objc_msgSend_wcmCellularWCI2Mode_Ext_critical_ul_ca_bitmap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2Mode_Ext_critical_ul_ca_bitmap");
}

id objc_msgSend_wcmCellularWCI2PlatformPolicyBitmap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellularWCI2PlatformPolicyBitmap");
}

id objc_msgSend_wcmCellular_CC1_Tech(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellular_CC1_Tech");
}

id objc_msgSend_wcmCellular_CC2_Tech(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCellular_CC2_Tech");
}

id objc_msgSend_wcmCoexFeatures(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmCoexFeatures");
}

id objc_msgSend_wcmGen9rFemDefaultMode2gWiFiCellularbands(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmGen9rFemDefaultMode2gWiFiCellularbands");
}

id objc_msgSend_wcmGen9rFemDefaultMode5gWiFiCellularbands(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmGen9rFemDefaultMode5gWiFiCellularbands");
}

id objc_msgSend_wcmGen9rFemLpmMode2g(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmGen9rFemLpmMode2g");
}

id objc_msgSend_wcmGen9rFemLpmMode5g(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmGen9rFemLpmMode5g");
}

id objc_msgSend_wcmHFBTChannelMapDefault(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmHFBTChannelMapDefault");
}

id objc_msgSend_wcmHPCellularBTAFHMapFixed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmHPCellularBTAFHMapFixed");
}

id objc_msgSend_wcmWCI2FrameSyncAssertJitter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWCI2FrameSyncAssertJitter");
}

id objc_msgSend_wcmWCI2FrameSyncAssertOffset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWCI2FrameSyncAssertOffset");
}

id objc_msgSend_wcmWCI2MWSInactivityAssertJitter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWCI2MWSInactivityAssertJitter");
}

id objc_msgSend_wcmWCI2MWSInactivityAssertOffset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWCI2MWSInactivityAssertOffset");
}

id objc_msgSend_wcmWCI2MWSPatternAssertJitter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWCI2MWSPatternAssertJitter");
}

id objc_msgSend_wcmWCI2MWSPatternAssertOffset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWCI2MWSPatternAssertOffset");
}

id objc_msgSend_wcmWCI2MWSPriorityAssertOffsetRequest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWCI2MWSPriorityAssertOffsetRequest");
}

id objc_msgSend_wcmWCI2MWSRxAssertJitter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWCI2MWSRxAssertJitter");
}

id objc_msgSend_wcmWCI2MWSRxAssertOffset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWCI2MWSRxAssertOffset");
}

id objc_msgSend_wcmWCI2MWSRxDeAssertJitter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWCI2MWSRxDeAssertJitter");
}

id objc_msgSend_wcmWCI2MWSRxDeAssertOffset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWCI2MWSRxDeAssertOffset");
}

id objc_msgSend_wcmWCI2MWSScanFrequencyAssertJitter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWCI2MWSScanFrequencyAssertJitter");
}

id objc_msgSend_wcmWCI2MWSScanFrequencyAssertOffset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWCI2MWSScanFrequencyAssertOffset");
}

id objc_msgSend_wcmWCI2MWSTxAssertJitter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWCI2MWSTxAssertJitter");
}

id objc_msgSend_wcmWCI2MWSTxAssertOffset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWCI2MWSTxAssertOffset");
}

id objc_msgSend_wcmWCI2MWSTxDeAssertJitter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWCI2MWSTxDeAssertJitter");
}

id objc_msgSend_wcmWCI2MWSTxDeAssertOffset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWCI2MWSTxDeAssertOffset");
}

id objc_msgSend_wcmWiFiActiveDwellTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiActiveDwellTime");
}

id objc_msgSend_wcmWiFiActiveScanThrottleMask(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiActiveScanThrottleMask");
}

id objc_msgSend_wcmWiFiAntennaCellPolicy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiAntennaCellPolicy");
}

id objc_msgSend_wcmWiFiAntennaCellPolicyDefault(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiAntennaCellPolicyDefault");
}

id objc_msgSend_wcmWiFiAntennaConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiAntennaConfig");
}

id objc_msgSend_wcmWiFiAntennaConfigDefault(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiAntennaConfigDefault");
}

id objc_msgSend_wcmWiFiB40ABlocklistChannels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiB40ABlocklistChannels");
}

id objc_msgSend_wcmWiFiB40AWCI2EnabledChannels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiB40AWCI2EnabledChannels");
}

id objc_msgSend_wcmWiFiB40BBlocklistChannels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiB40BBlocklistChannels");
}

id objc_msgSend_wcmWiFiB40BWCI2EnabledChannels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiB40BWCI2EnabledChannels");
}

id objc_msgSend_wcmWiFiB41A1BlocklistChannels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiB41A1BlocklistChannels");
}

id objc_msgSend_wcmWiFiB41A1WCI2EnabledChannels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiB41A1WCI2EnabledChannels");
}

id objc_msgSend_wcmWiFiB41A2BlocklistChannels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiB41A2BlocklistChannels");
}

id objc_msgSend_wcmWiFiB41A2WCI2EnabledChannels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiB41A2WCI2EnabledChannels");
}

id objc_msgSend_wcmWiFiB7BlocklistChannels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiB7BlocklistChannels");
}

id objc_msgSend_wcmWiFiB7WCI2EnabledChannels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiB7WCI2EnabledChannels");
}

id objc_msgSend_wcmWiFiBTCoexProfileDefault(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiBTCoexProfileDefault");
}

id objc_msgSend_wcmWiFiBTCoexProfileDefault5G(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiBTCoexProfileDefault5G");
}

id objc_msgSend_wcmWiFiBTCoexProfileHeavyA2DP(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiBTCoexProfileHeavyA2DP");
}

id objc_msgSend_wcmWiFiBTCoexProfileHeavyHFP(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiBTCoexProfileHeavyHFP");
}

id objc_msgSend_wcmWiFiBTCoexProfileLight(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiBTCoexProfileLight");
}

id objc_msgSend_wcmWiFiBTCoexProfileTDD(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiBTCoexProfileTDD");
}

id objc_msgSend_wcmWiFiCellCoexIssueTable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiCellCoexIssueTable");
}

id objc_msgSend_wcmWiFiEnvelopeIndicationTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiEnvelopeIndicationTimer");
}

id objc_msgSend_wcmWiFiEnvelopeOnIndication(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiEnvelopeOnIndication");
}

id objc_msgSend_wcmWiFiPriThresholdHigh(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiPriThresholdHigh");
}

id objc_msgSend_wcmWiFiPriThresholdLow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiPriThresholdLow");
}

id objc_msgSend_wcmWiFiPriThresholdMed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiPriThresholdMed");
}

id objc_msgSend_wcmWiFiRxProtectMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiRxProtectMode");
}

id objc_msgSend_wcmWiFiScanJoinProtectDuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiScanJoinProtectDuration");
}

id objc_msgSend_wcmWiFiScanThrottlingChannelIndices(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiScanThrottlingChannelIndices");
}

id objc_msgSend_wcmWiFiSupportFrameConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiSupportFrameConfig");
}

id objc_msgSend_wcmWiFiSupportWciSignalingConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiSupportWciSignalingConfig");
}

id objc_msgSend_wcmWiFiTxOnIndication(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiTxOnIndication");
}

id objc_msgSend_wcmWiFiWCI2TxDurationThresh(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wcmWiFiWCI2TxDurationThresh");
}

id objc_msgSend_wiFiEnhChannelsAffectedByCellUlLowFreq_cellUlHighFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wiFiEnhChannelsAffectedByCellUlLowFreq:cellUlHighFreq:");
}

id objc_msgSend_wiFiEnhOclChannelsAffectedByCellUlLowFreq_cellUlHighFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wiFiEnhOclChannelsAffectedByCellUlLowFreq:cellUlHighFreq:");
}

id objc_msgSend_wifi2G5GChannelsToEnableType7MSG(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifi2G5GChannelsToEnableType7MSG");
}

id objc_msgSend_wifi2GHzChannelsToEnableType7MSGCombined(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifi2GHzChannelsToEnableType7MSGCombined");
}

id objc_msgSend_wifi2GHzLTEB7IMD3ChannelsEnableType7(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifi2GHzLTEB7IMD3ChannelsEnableType7");
}

id objc_msgSend_wifi2GHzLTEB7IMD3EnableType7ForCellBandInfoType_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifi2GHzLTEB7IMD3EnableType7ForCellBandInfoType:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:");
}

id objc_msgSend_wifi5GHzChannelsAffectedByNR79UlLowFreq_cellUlHighFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifi5GHzChannelsAffectedByNR79UlLowFreq:cellUlHighFreq:");
}

id objc_msgSend_wifi5GHzChannelsToEnableType7MSG(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifi5GHzChannelsToEnableType7MSG");
}

id objc_msgSend_wifi5GHzChannelsToEnableType7MSGCombined(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifi5GHzChannelsToEnableType7MSGCombined");
}

id objc_msgSend_wifi5GHzChannelsToEnableType7MSGForCellBandInfoType_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifi5GHzChannelsToEnableType7MSGForCellBandInfoType:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:");
}

id objc_msgSend_wifiAgcCoexModeLevel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiAgcCoexModeLevel");
}

id objc_msgSend_wifiAgcModeEnable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiAgcModeEnable");
}

id objc_msgSend_wifiAntselPolicyStatsArray(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiAntselPolicyStatsArray");
}

id objc_msgSend_wifiBTCoexProfilesDownloaded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiBTCoexProfilesDownloaded");
}

id objc_msgSend_wifiBandwidthMHz(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiBandwidthMHz");
}

id objc_msgSend_wifiBtAgcCoexModeEnable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiBtAgcCoexModeEnable");
}

id objc_msgSend_wifiBtAgcCoexModeEnableCheckBandCombination_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_coexModeWifiLevel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiBtAgcCoexModeEnableCheckBandCombination:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:coexModeWifiLevel:");
}

id objc_msgSend_wifiBtAgcCoexModeEnableCheckBandCombinationV2_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_wifiChannel_channelCenterFreqMHz_channelBandwidthMHz_coexModeWifiLevel_coexModeBTLevel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiBtAgcCoexModeEnableCheckBandCombinationV2:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:wifiChannel:channelCenterFreqMHz:channelBandwidthMHz:coexModeWifiLevel:coexModeBTLevel:");
}

id objc_msgSend_wifiBtAgcCoexModeEnabledInPolicy_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_agccoexmode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiBtAgcCoexModeEnabledInPolicy:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:agccoexmode:");
}

id objc_msgSend_wifiBtAgcCoexModeEnabledInPolicyV2_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_wifiChannel_channelCenterFreqMHz_channelBandwidthMHz_coexModeWifiLevel_coexModeBTLevel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiBtAgcCoexModeEnabledInPolicyV2:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:wifiChannel:channelCenterFreqMHz:channelBandwidthMHz:coexModeWifiLevel:coexModeBTLevel:");
}

id objc_msgSend_wifiCBRSCellFound(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiCBRSCellFound");
}

id objc_msgSend_wifiCenterFreqMHz(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiCenterFreqMHz");
}

id objc_msgSend_wifiChannel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChannel");
}

id objc_msgSend_wifiChannelsAffectedByCellUlLowFreq_cellUlHighFreq_wifi5G_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChannelsAffectedByCellUlLowFreq:cellUlHighFreq:wifi5G:");
}

id objc_msgSend_wifiChannelsIMD3ByCellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_wifi5G_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChannelsIMD3ByCellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:wifi5G:");
}

id objc_msgSend_wifiChannelsToApplyCellAntBlocking(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChannelsToApplyCellAntBlocking");
}

id objc_msgSend_wifiChannelsToAvoidForCellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_wifi5G_wifiEssentialChannel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChannelsToAvoidForCellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:wifi5G:wifiEssentialChannel:");
}

id objc_msgSend_wifiChannelsToAvoidWiFiEnhForCellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChannelsToAvoidWiFiEnhForCellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:");
}

id objc_msgSend_wifiChannelsToBlocklist(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChannelsToBlocklist");
}

id objc_msgSend_wifiChannelsToDisableOCL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChannelsToDisableOCL");
}

id objc_msgSend_wifiChannelsToDisableOCL2G5G(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChannelsToDisableOCL2G5G");
}

id objc_msgSend_wifiChannelsToDisableOCLEnh(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChannelsToDisableOCLEnh");
}

id objc_msgSend_wifiChannelsToDisableOCLForCellBandInfoType_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChannelsToDisableOCLForCellBandInfoType:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:");
}

id objc_msgSend_wifiChannelsToDisableOCLWiFiEnhForCellBandInfoType_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChannelsToDisableOCLWiFiEnhForCellBandInfoType:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:");
}

id objc_msgSend_wifiChannelsToEnableLTEMBType7(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChannelsToEnableLTEMBType7");
}

id objc_msgSend_wifiChannelsToEnableLTEMBType7ForCellBandInfoType_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_pissueBandMatchAntIdx_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChannelsToEnableLTEMBType7ForCellBandInfoType:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:pissueBandMatchAntIdx:");
}

id objc_msgSend_wifiChannelsToEnableType7WiFiEnhForCellBandInfoType_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_pissueBandMatchAntIdx_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChannelsToEnableType7WiFiEnhForCellBandInfoType:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:pissueBandMatchAntIdx:");
}

id objc_msgSend_wifiChannelsToEnableWCI2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChannelsToEnableWCI2");
}

id objc_msgSend_wifiChannelsToEnableWCI2ForCellBandInfoType_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChannelsToEnableWCI2ForCellBandInfoType:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:");
}

id objc_msgSend_wifiChannelsToEnableWCI2Gand5G(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChannelsToEnableWCI2Gand5G");
}

id objc_msgSend_wifiChannelsToEnableWCI2V2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChannelsToEnableWCI2V2");
}

id objc_msgSend_wifiChannelsToEnableWCI2V2ForCellBandInfoType_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_pissueBandMatch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChannelsToEnableWCI2V2ForCellBandInfoType:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:pissueBandMatch:");
}

id objc_msgSend_wifiChannelsToEnableWCI2WiFiEnh(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChannelsToEnableWCI2WiFiEnh");
}

id objc_msgSend_wifiChannelsToEnableWCI2WiFiEnhForCellBandInfoType_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_pissueBandMatch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChannelsToEnableWCI2WiFiEnhForCellBandInfoType:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:pissueBandMatch:");
}

id objc_msgSend_wifiController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiController");
}

id objc_msgSend_wifiDlAntennaBitmapOnCellAntBitmap000(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiDlAntennaBitmapOnCellAntBitmap000");
}

id objc_msgSend_wifiDlAntennaBitmapOnCellAntBitmap001(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiDlAntennaBitmapOnCellAntBitmap001");
}

id objc_msgSend_wifiDlAntennaBitmapOnCellAntBitmap010(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiDlAntennaBitmapOnCellAntBitmap010");
}

id objc_msgSend_wifiDlAntennaBitmapOnCellAntBitmap011(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiDlAntennaBitmapOnCellAntBitmap011");
}

id objc_msgSend_wifiDlAntennaBitmapOnCellAntBitmap100(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiDlAntennaBitmapOnCellAntBitmap100");
}

id objc_msgSend_wifiDlAntennaBitmapOnCellAntBitmap101(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiDlAntennaBitmapOnCellAntBitmap101");
}

id objc_msgSend_wifiDlAntennaBitmapOnCellAntBitmap110(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiDlAntennaBitmapOnCellAntBitmap110");
}

id objc_msgSend_wifiDlAntennaBitmapOnCellAntBitmap111(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiDlAntennaBitmapOnCellAntBitmap111");
}

id objc_msgSend_wifiDlAntennaBitmapOnCellLAT(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiDlAntennaBitmapOnCellLAT");
}

id objc_msgSend_wifiDlAntennaBitmapOnCellUAT(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiDlAntennaBitmapOnCellUAT");
}

id objc_msgSend_wifiEnhChannelsToEnableType7MSG(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiEnhChannelsToEnableType7MSG");
}

id objc_msgSend_wifiMetricsEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiMetricsEnabled");
}

id objc_msgSend_wifiNRCellFound(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiNRCellFound");
}

id objc_msgSend_wifiOclChannelsAffectedByCellUlLowFreq_cellUlHighFreq_isWifi5G_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiOclChannelsAffectedByCellUlLowFreq:cellUlHighFreq:isWifi5G:");
}

id objc_msgSend_wifiPHSChannelsToBlocklistForCellBandInfoType_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiPHSChannelsToBlocklistForCellBandInfoType:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:");
}

id objc_msgSend_wifiPHSChannelsToBlocklistForCellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_wifi5G_wifiEssentialChannel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiPHSChannelsToBlocklistForCellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:wifi5G:wifiEssentialChannel:");
}

id objc_msgSend_wifiPHSChannelsToBlocklistV2ForCellBandInfoType_cellDlLowFreq_cellDlHighFreq_cellUlLowFreq_cellUlHighFreq_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiPHSChannelsToBlocklistV2ForCellBandInfoType:cellDlLowFreq:cellDlHighFreq:cellUlLowFreq:cellUlHighFreq:");
}

id objc_msgSend_wifiRSSI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiRSSI");
}

id objc_msgSend_wifiRxPriThreshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiRxPriThreshold");
}

id objc_msgSend_wifiSNR(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiSNR");
}

id objc_msgSend_wifiService(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiService");
}

id objc_msgSend_wifiState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiState");
}

id objc_msgSend_wifiTxPowerdBm(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiTxPowerdBm");
}

id objc_msgSend_wifiUlAntennaBitmapOnCellAntBitmap000(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiUlAntennaBitmapOnCellAntBitmap000");
}

id objc_msgSend_wifiUlAntennaBitmapOnCellAntBitmap001(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiUlAntennaBitmapOnCellAntBitmap001");
}

id objc_msgSend_wifiUlAntennaBitmapOnCellAntBitmap010(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiUlAntennaBitmapOnCellAntBitmap010");
}

id objc_msgSend_wifiUlAntennaBitmapOnCellAntBitmap011(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiUlAntennaBitmapOnCellAntBitmap011");
}

id objc_msgSend_wifiUlAntennaBitmapOnCellAntBitmap100(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiUlAntennaBitmapOnCellAntBitmap100");
}

id objc_msgSend_wifiUlAntennaBitmapOnCellAntBitmap101(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiUlAntennaBitmapOnCellAntBitmap101");
}

id objc_msgSend_wifiUlAntennaBitmapOnCellAntBitmap110(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiUlAntennaBitmapOnCellAntBitmap110");
}

id objc_msgSend_wifiUlAntennaBitmapOnCellAntBitmap111(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiUlAntennaBitmapOnCellAntBitmap111");
}

id objc_msgSend_wifiUlAntennaBitmapOnCellLAT(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiUlAntennaBitmapOnCellLAT");
}

id objc_msgSend_wifiUlAntennaBitmapOnCellUAT(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiUlAntennaBitmapOnCellUAT");
}

id objc_msgSend_willLeaveBSPActiveState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "willLeaveBSPActiveState");
}

id objc_msgSend_write_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "write:completionHandler:");
}

id objc_msgSend_writeData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeData:");
}

id objc_msgSend_wrmPlatformId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wrmPlatformId");
}

id objc_msgSend_wrmSku(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wrmSku");
}

id objc_msgSend_wrm_EnhancedCTServiceSingleton(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wrm_EnhancedCTServiceSingleton");
}

id objc_msgSend_wrm_IDSP2PControllerSingleton(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wrm_IDSP2PControllerSingleton");
}
