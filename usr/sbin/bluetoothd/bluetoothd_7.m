uint64_t sub_100423438(uint64_t a1)
{
  *(_QWORD *)a1 = off_10092E810;
  free(*(void **)(a1 + 72));
  return a1;
}

void sub_10042346C(uint64_t a1)
{
  *(_QWORD *)a1 = off_10092E810;
  free(*(void **)(a1 + 72));
  operator delete();
}

void sub_1004234B0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  _QWORD *v8;

  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092E9E0);
  v8 = off_1009778D0;
  if (sub_100423284(a1, *(_QWORD *)(a1 + 40)) && sub_100423284(a1, *(_QWORD *)(a1 + 48)) && v8[32] != v8[33])
  {
    sub_100424548(a2, a3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56) | ((unint64_t)*(unsigned __int16 *)(a1 + 60) << 32), *(unsigned int *)(a1 + 64), *(unsigned __int16 *)(a1 + 68), *(_QWORD *)(a1 + 72), a4);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
  {
    sub_1006F045C();
  }
}

void sub_1004235A8()
{
  operator delete();
}

void sub_1004235BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  _QWORD *v8;

  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092E9E0);
  v8 = off_1009778D0;
  if (sub_100423284(a1, *(_QWORD *)(a1 + 40)) && sub_100423284(a1, *(_QWORD *)(a1 + 48)) && v8[32] != v8[33])
  {
    sub_100424570(a2, a3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56), *(unsigned __int16 *)(a1 + 60), *(unsigned __int16 *)(a1 + 62), a4);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
  {
    sub_1006F045C();
  }
}

void sub_1004236A0(_QWORD *a1)
{
  sub_100423AE0(a1);
  operator delete();
}

_QWORD *sub_1004236C8(uint64_t a1)
{
  return sub_100423AE0((_QWORD *)(a1 - 24));
}

void sub_1004236D0(uint64_t a1)
{
  sub_100423AE0((_QWORD *)(a1 - 24));
  operator delete();
}

uint64_t sub_1004236FC(unint64_t *a1)
{
  uint64_t result;

  result = sub_100423284((uint64_t)a1, a1[2]);
  if ((_DWORD)result)
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))(a1, a1[2], a1[3], a1[4]);
  return result;
}

uint64_t sub_100423744(unint64_t *a1)
{
  uint64_t result;

  result = sub_100423284((uint64_t)a1, a1[2]);
  if ((_DWORD)result)
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))(a1, a1[2], a1[3], a1[4]);
  return result;
}

uint64_t sub_10042378C(unint64_t *a1)
{
  uint64_t result;

  result = sub_100423284((uint64_t)a1, a1[2]);
  if ((_DWORD)result)
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))(a1, a1[2], a1[3], a1[4]);
  return result;
}

uint64_t sub_1004237D4(unint64_t *a1)
{
  uint64_t result;

  result = sub_100423284((uint64_t)a1, a1[2]);
  if ((_DWORD)result)
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))(a1, a1[2], a1[3], a1[4]);
  return result;
}

void sub_10042381C(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_1004238A4(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1004238A4(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_100423AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100423AE0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *a1 = off_10092E630;
  a1[1] = off_10092E6C0;
  a1[2] = off_10092E6E0;
  a1[3] = off_10092E708;
  a1[4] = &off_10092E748;
  a1[5] = &off_10092E760;
  a1[6] = &off_10092E778;
  v2 = (void *)a1[32];
  if (v2)
  {
    a1[33] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[29];
  if (v3)
  {
    a1[30] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[26];
  if (v4)
  {
    a1[27] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[23];
  if (v5)
  {
    a1[24] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[20];
  if (v6)
  {
    a1[21] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[17];
  if (v7)
  {
    a1[18] = v7;
    operator delete(v7);
  }
  sub_100069BDC(a1 + 7);
  return a1;
}

void sub_100423B98(id a1)
{
  operator new();
}

void sub_100423BD8()
{
  operator delete();
}

void sub_100423BFC(id a1)
{
  operator new();
}

void sub_100423C3C()
{
  operator delete();
}

void sub_100423C60(id a1)
{
  operator new();
}

void sub_100423CA0()
{
  operator delete();
}

void sub_100423CC4(id a1)
{
  operator new();
}

void sub_100423D04()
{
  operator delete();
}

void sub_100423D28(id a1)
{
  operator new();
}

void sub_100423D68()
{
  operator delete();
}

void sub_100423D8C(id a1)
{
  operator new();
}

void sub_100423DCC()
{
  operator delete();
}

uint64_t sub_100423DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;

  if (a1 == a2)
    return a1;
  do
  {
    *(_QWORD *)a3 = *(_QWORD *)a1;
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a3 + 8) = v3;
    *(_DWORD *)(a3 + 40) = *(_DWORD *)(a1 + 40);
    *(_QWORD *)(a3 + 48) = *(_QWORD *)(a1 + 48);
    a3 += 56;
    a1 += 56;
  }
  while (a1 != a2);
  return a2;
}

char *sub_100423E44(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = sub_1003A201C(result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *(_QWORD *)v7 = *(_QWORD *)a2;
      v8 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(v7 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v7 + 8) = v8;
      *(_DWORD *)(v7 + 40) = *(_DWORD *)(a2 + 40);
      *(_QWORD *)(v7 + 48) = *(_QWORD *)(a2 + 48);
      v7 += 56;
      a2 += 56;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_100423EC0(id a1)
{
  operator new();
}

void sub_100423F00()
{
  operator delete();
}

void sub_100423F24(id a1)
{
  operator new();
}

void sub_100423F64()
{
  operator delete();
}

uint64_t sub_100423F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a2 != a3)
  {
    sub_100423DF0(a3, *(_QWORD *)(a1 + 8), a2);
    *(_QWORD *)(a1 + 8) = v5;
  }
  return a2;
}

uint64_t sub_100423FCC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  __int128 v4;

  while (1)
  {
    if (result == a2)
      return a2;
    if (*(_QWORD *)result == a3)
      break;
    result += 56;
  }
  if (result != a2)
  {
    for (i = result + 56; i != a2; i += 56)
    {
      if (*(_QWORD *)i != a3)
      {
        *(_QWORD *)result = *(_QWORD *)i;
        v4 = *(_OWORD *)(i + 8);
        *(_OWORD *)(result + 24) = *(_OWORD *)(i + 24);
        *(_OWORD *)(result + 8) = v4;
        *(_DWORD *)(result + 40) = *(_DWORD *)(i + 40);
        *(_QWORD *)(result + 48) = *(_QWORD *)(i + 48);
        result += 56;
      }
    }
  }
  return result;
}

void sub_100424040(id a1)
{
  operator new();
}

void sub_100424080()
{
  operator delete();
}

uint64_t sub_1004240A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v2 = *a1;
  v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v2) >> 3);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x249249249249249)
    v10 = 0x492492492492492;
  else
    v10 = v4;
  v21 = v7;
  v11 = (char *)sub_100355428(v7, v10);
  v12 = &v11[56 * v3];
  __p = v11;
  v18 = v12;
  v20 = &v11[56 * v13];
  *(_QWORD *)v12 = *(_QWORD *)a2;
  v14 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v12 + 8) = v14;
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 + 40);
  *((_QWORD *)v12 + 6) = *(_QWORD *)(a2 + 48);
  v19 = v12 + 56;
  sub_100424244(a1, &__p);
  v15 = a1[1];
  if (v19 != v18)
    v19 = &v18[(v19 - v18 - 56) % 0x38uLL];
  if (__p)
    operator delete(__p);
  return v15;
}

void sub_1004241F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100424244(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 56);
    v2 -= 56;
    *(_QWORD *)(v4 - 56) = v5;
    v4 -= 56;
    v6 = *(_OWORD *)(v2 + 8);
    *(_OWORD *)(v4 + 24) = *(_OWORD *)(v2 + 24);
    *(_OWORD *)(v4 + 8) = v6;
    *(_DWORD *)(v4 + 40) = *(_DWORD *)(v2 + 40);
    *(_QWORD *)(v4 + 48) = *(_QWORD *)(v2 + 48);
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1004242BC(uint64_t result, uint64_t a2, _QWORD *a3)
{
  BOOL v3;
  BOOL v4;
  uint64_t i;
  BOOL v7;
  BOOL v8;
  __int128 v10;

  if (result == a2)
    return a2;
  while (1)
  {
    if (*a3 == *(_QWORD *)result)
    {
      v3 = a3[1] == *(_QWORD *)(result + 8) && a3[2] == *(_QWORD *)(result + 16);
      v4 = v3 && a3[3] == *(_QWORD *)(result + 24);
      if (v4 && a3[4] == *(_QWORD *)(result + 32))
        break;
    }
    result += 56;
    if (result == a2)
      return a2;
  }
  if (result != a2)
  {
    for (i = result + 56; i != a2; i += 56)
    {
      if (*a3 == *(_QWORD *)i)
      {
        v7 = a3[1] == *(_QWORD *)(i + 8) && a3[2] == *(_QWORD *)(i + 16);
        v8 = v7 && a3[3] == *(_QWORD *)(i + 24);
        if (v8 && a3[4] == *(_QWORD *)(i + 32))
          continue;
      }
      *(_QWORD *)result = *(_QWORD *)i;
      v10 = *(_OWORD *)(i + 8);
      *(_OWORD *)(result + 24) = *(_OWORD *)(i + 24);
      *(_OWORD *)(result + 8) = v10;
      *(_DWORD *)(result + 40) = *(_DWORD *)(i + 40);
      *(_QWORD *)(result + 48) = *(_QWORD *)(i + 48);
      result += 56;
    }
  }
  return result;
}

void sub_100424384(id a1)
{
  operator new();
}

void sub_1004243C4()
{
  operator delete();
}

void sub_1004243E8(id a1)
{
  operator new();
}

void sub_100424428()
{
  operator delete();
}

void sub_10042444C(id a1)
{
  operator new();
}

void sub_1004244E0()
{
  operator delete();
}

uint64_t sub_100424504(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return a2(a3, a4, a5, a6, a7);
}

uint64_t sub_100424520(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return a2(a3, a4, a5, a6, a8, a7, a9);
}

uint64_t sub_100424548(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return a2(a3, a4, a5 & 0xFFFFFFFFFFFFLL, a6, a8, a7, a9);
}

uint64_t sub_100424570(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a2(a3, a4, a5, a6, a7, a8);
}

uint64_t sub_100424590(unint64_t a1, __int128 *a2)
{
  uint64_t v4;

  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  v4 = sub_10006AC40((uint64_t)off_1009778D0, a1);
  if (v4)
    return sub_100420F64(v4, a1, a2);
  else
    return 7;
}

uint64_t sub_100424604(unint64_t a1, int *a2, char *a3, uint64_t a4, char *a5, unint64_t *a6)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v21;
  void **v23;
  const char *v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  void *v28[2];
  char v29;
  _BYTE __p[12];
  __int16 v31;
  char *v32;
  __int16 v33;
  void **v34;
  __int16 v35;
  const char *v36;
  _QWORD v37[2];
  char v38;

  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  sub_1005BCD34((char *)v37, 0);
  v25 = *a2;
  v26 = *((_WORD *)a2 + 2);
  if (!a6 || !a2 || !a3 || !a5)
  {
    v18 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    {
      sub_10046E9BC((unsigned __int8 *)&v25, v28);
      v23 = (void **)v28[0];
      v24 = "(Valid Handle)";
      if (v29 >= 0)
        v23 = v28;
      *(_DWORD *)__p = 136315906;
      if (!a6)
        v24 = "(NULL)";
      *(_QWORD *)&__p[4] = a3;
      v31 = 2080;
      v32 = a5;
      v33 = 2080;
      v34 = v23;
      v35 = 2080;
      v36 = v24;
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Invalid argument - %s %s %s %s", __p, 0x2Au);
      if (v29 < 0)
        operator delete(v28[0]);
    }
    v15 = 3;
    goto LABEL_41;
  }
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  v12 = (_QWORD *)sub_10006AC40((uint64_t)off_1009778D0, a1);
  if (!v12)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    goto LABEL_28;
  }
  if (!(_BYTE)v25)
  {
    v19 = 1;
    while (v19 != 6)
    {
      if (*((unsigned __int8 *)&v25 + v19++))
      {
        if ((unint64_t)(v19 - 2) < 5)
          goto LABEL_9;
        break;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    {
      sub_10046E9BC((unsigned __int8 *)&v25, __p);
      sub_1006F04B4();
    }
    goto LABEL_37;
  }
LABEL_9:
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  *(_DWORD *)__p = *a2;
  *(_WORD *)&__p[4] = *((_WORD *)a2 + 2);
  v13 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  if (!v13)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    {
      sub_10046E9BC((unsigned __int8 *)&v25, __p);
      sub_1006F04FC();
    }
LABEL_37:
    v15 = 8;
    goto LABEL_41;
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  sub_100470B08((uint64_t)off_1009778E0, v13, a4);
  sub_100091AE8(__p, a3);
  v27 = 0;
  v28[0] = 0;
  v28[1] = 0;
  sub_10004AD30((uint64_t)&v27);
  v28[0] = (void *)(int)v27;
  v28[1] = (void *)SWORD2(v27);
  sub_10044054C(v13, (uint64_t)__p, v28);
  if (SHIBYTE(v33) < 0)
    operator delete(*(void **)__p);
  sub_1005BCD78((char *)v37, a5);
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10092EA40);
  sub_1005BF37C((uint64_t)off_100978158, v13, (uint64_t)v37);
  v14 = sub_100420FF0(v12, v13);
  v15 = v14;
  if ((_DWORD)v14 == 601 || !(_DWORD)v14)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092EA20);
    v16 = sub_10046F750((uint64_t)off_1009778E0, a1, v13);
    *a6 = v16;
    if (v16)
    {
      v15 = 0;
      goto LABEL_41;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    {
      sub_10046E9BC((unsigned __int8 *)&v25, __p);
      sub_1006F05D0();
    }
LABEL_28:
    v15 = 7;
    goto LABEL_41;
  }
  v21 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
  {
    sub_10046E9BC((unsigned __int8 *)&v25, v28);
    sub_1006F0544((uint64_t *)v28, __p, v15, v21);
  }
  *a6 = 0;
LABEL_41:
  nullsub_90(v37, v17);
  return v15;
}

void sub_100424A98(_Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  nullsub_90(&a24, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_100424AF0(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v12;
  int v13;
  void **v14;
  void **v15;
  void **v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  uint8_t buf[4];
  void **v22;
  __int16 v23;
  void **v24;

  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  v4 = sub_10006AC40((uint64_t)off_1009778D0, a1);
  if (!v4)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    return 7;
  }
  if (a2 - 4294901761u < 2 || !a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0644();
    return 3;
  }
  v6 = v4;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v7 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0618();
    return 7;
  }
  v8 = (unsigned __int8 *)v7;
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092EA60);
  v9 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  if (v9)
  {
    v10 = v9;
    if (sub_100070BDC())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle(qword_100999990);
      if (CTGreenTeaOsLogHandle)
      {
        v12 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_1000340DC(v10, (uint64_t)v19);
          v13 = v20;
          v14 = (void **)v19[0];
          sub_10043E5F8((uint64_t)v8, __p);
          v15 = v19;
          if (v13 < 0)
            v15 = v14;
          if (v18 >= 0)
            v16 = __p;
          else
            v16 = (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v22 = v15;
          v23 = 2082;
          v24 = v16;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to plug device \"%{public}s\"", buf, 0x16u);
          if (v18 < 0)
            operator delete(__p[0]);
          if (v20 < 0)
            operator delete(v19[0]);
        }
      }
    }
  }
  return sub_100421238(v6, v8);
}

void sub_100424D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100424DA4(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;

  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  v4 = sub_10006AC40((uint64_t)off_1009778D0, a1);
  if (!v4)
    return 7;
  v5 = v4;
  result = 3;
  if (a2 - 4294901761u >= 2 && a2)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092EA20);
    v7 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
    if (v7)
      return sub_10042173C(v5, v7);
    return 7;
  }
  return result;
}

uint64_t sub_100424E70(unint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;

  if (!a3)
    return 3;
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  v6 = sub_10006AC40((uint64_t)off_1009778D0, a1);
  if (!v6)
    return 7;
  v7 = v6;
  result = 3;
  if (a2 - 4294901761u >= 2 && a2)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092EA20);
    v9 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
    if (v9)
      return sub_100421838(v7, v9, a3);
    return 7;
  }
  return result;
}

uint64_t sub_100424F5C(unint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t *v7;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  void *__p;
  char *v19;
  uint64_t v20;

  v4 = 3;
  if (a2 && a3)
  {
    v7 = a2;
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_10092EA00);
    v9 = sub_10006AC40((uint64_t)off_1009778D0, a1);
    if (v9)
    {
      __p = 0;
      v19 = 0;
      v20 = 0;
      v4 = sub_100421904(v9, (char *)&__p);
      if (!(_DWORD)v4)
      {
        v10 = 0;
        if (a4 && __p != v19)
        {
          v11 = (char *)__p + 8;
          v12 = 1;
          do
          {
            v13 = *((_QWORD *)v11 - 1);
            if (qword_1009778E8 != -1)
              dispatch_once(&qword_1009778E8, &stru_10092EA20);
            v14 = sub_10046F750((uint64_t)off_1009778E0, a1, v13);
            if (!v14)
            {
              v4 = 7;
              goto LABEL_21;
            }
            *v7++ = v14;
            v15 = v12 + 1;
            if (v12 >= a4)
              break;
            ++v12;
            v16 = v11 == v19;
            v11 += 8;
          }
          while (!v16);
          v10 = v15 - 1;
        }
        v4 = 0;
        *a3 = v10;
      }
LABEL_21:
      if (__p)
      {
        v19 = (char *)__p;
        operator delete(__p);
      }
    }
    else
    {
      return 7;
    }
  }
  return v4;
}

void sub_1004250CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004250EC(unint64_t a1, unint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;

  if (!a3)
    return 3;
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  v6 = sub_10006AC40((uint64_t)off_1009778D0, a1);
  if (!v6)
    return 7;
  v7 = v6;
  result = 3;
  if (a2 - 4294901761u >= 2 && a2)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092EA20);
    v9 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
    if (v9)
      return sub_1004218B8(v7, v9, a3);
    return 7;
  }
  return result;
}

uint64_t sub_1004251D8(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;

  if (!a3)
    return 3;
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  v6 = sub_10006AC40((uint64_t)off_1009778D0, a1);
  if (!v6)
    return 7;
  v7 = v6;
  result = 3;
  if (a2 - 4294901761u >= 2 && a2)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092EA20);
    v9 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
    if (v9)
      return sub_1004218F8(v7, v9, a3);
    return 7;
  }
  return result;
}

uint64_t sub_1004252C4(unint64_t a1, unint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  int v10;

  if (!a3)
    return 3;
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  v6 = sub_10006AC40((uint64_t)off_1009778D0, a1);
  if (!v6)
    return 7;
  v7 = v6;
  result = 3;
  if (a2 - 4294901761u >= 2 && a2)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092EA20);
    v9 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
    if (v9)
    {
      v10 = sub_100420EFC(v7, v9);
      result = 0;
      *a3 = v10 << 31 >> 31;
      return result;
    }
    return 7;
  }
  return result;
}

uint64_t sub_1004253B4(unint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v6;
  uint8_t v8[16];

  v6 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BTAccessoryManagerGetLinkKey", v8, 2u);
  }
  if (a1 && a2 && a3)
  {
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_10092EA00);
    if (sub_10006AC40((uint64_t)off_1009778D0, a1))
    {
      arc4random_buf(a3, 0x10uLL);
      return 0;
    }
    else
    {
      return 7;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0670();
    return 3;
  }
}

uint64_t sub_1004254BC(unint64_t a1, int *a2, char *a3, uint64_t a4, int a5, _OWORD *a6, unint64_t *a7)
{
  unsigned __int8 *v13;
  int i;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  const char *v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int128 v23;
  __n128 v24;
  int v25;
  _BYTE __p[22];
  __int16 v27;
  const char *v28;

  if (a2 && a3 && a6 && a7)
  {
    v20 = *a2;
    v21 = *((_WORD *)a2 + 2);
    v24 = 0uLL;
    v25 = 0;
    sub_1005A9734((uint64_t)&v24, a6, 5u);
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_10092EA00);
    if (sub_10006AC40((uint64_t)off_1009778D0, a1))
    {
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_10092EA20);
      *(_DWORD *)__p = *a2;
      *(_WORD *)&__p[4] = *((_WORD *)a2 + 2);
      v13 = (unsigned __int8 *)sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
      if (v13)
      {
        if (qword_1009778E8 != -1)
          dispatch_once(&qword_1009778E8, &stru_10092EA20);
        sub_100470B08((uint64_t)off_1009778E0, (uint64_t)v13, a4);
        sub_100091AE8(__p, a3);
        v22 = 0;
        sub_10004AD30((uint64_t)&v22);
        *(_QWORD *)&v23 = (int)v22;
        *((_QWORD *)&v23 + 1) = SWORD2(v22);
        sub_10044054C((uint64_t)v13, (uint64_t)__p, &v23);
        if (SHIBYTE(v27) < 0)
          operator delete(*(void **)__p);
        for (i = 0; i != 31; ++i)
        {
          if (((1 << i) & a5) != 0)
          {
            *(_QWORD *)&v23 = 0;
            *(_QWORD *)__p = 0;
            *(_QWORD *)&__p[8] = 0;
            sub_10004AD30((uint64_t)&v23);
            *(_QWORD *)__p = (int)v23;
            *(_QWORD *)&__p[8] = SWORD2(v23);
            sub_1004415B0((uint64_t)v13, 1 << i, 4, __p, 0);
          }
        }
        if (qword_100978160 != -1)
          dispatch_once(&qword_100978160, &stru_10092EA40);
        v15 = sub_1005BEC60((uint64_t)off_100978158, v13, &v24, 0);
        if (qword_1009778E8 != -1)
          dispatch_once(&qword_1009778E8, &stru_10092EA20);
        *a7 = sub_10046F750((uint64_t)off_1009778E0, a1, (uint64_t)v13);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        {
          sub_10046E9BC((unsigned __int8 *)&v20, __p);
          sub_1006F04FC();
        }
        v15 = 8;
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006F0488();
      v15 = 7;
    }
    nullsub_90(&v24, v16);
  }
  else
  {
    v17 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    {
      v19 = "(Valid Handle)";
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = a3;
      if (!a7)
        v19 = "(NULL)";
      *(_WORD *)&__p[12] = 2048;
      *(_QWORD *)&__p[14] = a2;
      v27 = 2080;
      v28 = v19;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Invalid argument - %s %p %s", __p, 0x20u);
    }
    return 3;
  }
  return v15;
}

void sub_100425854(_Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  nullsub_90(&a14, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_1004258A8(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v15;
  int v16;
  void **v17;
  void **v18;
  void **v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  uint8_t buf[4];
  void **v25;
  __int16 v26;
  void **v27;

  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v8 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v8)
    return 7;
  v9 = v8;
  if (sub_10043F65C(v8, 0x80000u) != 4)
    return 108;
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  v10 = sub_10006AC40((uint64_t)off_1009778D0, a1);
  if (!v10)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    return 7;
  }
  v11 = v10;
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092EA60);
  v12 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  if (v12)
  {
    v13 = v12;
    if (sub_100070BDC())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle(qword_100999990);
      if (CTGreenTeaOsLogHandle)
      {
        v15 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_1000340DC(v13, (uint64_t)v22);
          v16 = v23;
          v17 = (void **)v22[0];
          sub_10043E5F8(v9, __p);
          v18 = v22;
          if (v16 < 0)
            v18 = v17;
          if (v21 >= 0)
            v19 = __p;
          else
            v19 = (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v25 = v18;
          v26 = 2082;
          v27 = v19;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to set double tap action for device \"%{public}s\"", buf, 0x16u);
          if (v21 < 0)
            operator delete(__p[0]);
          if (v23 < 0)
            operator delete(v22[0]);
        }
      }
    }
  }
  if (sub_1004459D0(v9) == (_DWORD)a3)
    return 0;
  else
    return sub_100421D10(v11, v9, a3);
}

void sub_100425B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100425B50(unint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v19;
  int v20;
  void **v21;
  void **v22;
  void **v23;
  void *__p[2];
  char v25;
  void *v26[2];
  char v27;
  uint8_t buf[4];
  void **v29;
  __int16 v30;
  void **v31;

  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v10 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v10)
    return 7;
  v11 = v10;
  if (sub_10043F65C(v10, 0x80000u) != 4)
    return 108;
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  v12 = sub_10006AC40((uint64_t)off_1009778D0, a1);
  if (!v12)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    return 7;
  }
  v13 = v12;
  v14 = sub_1004459D0(v11);
  v15 = (unsigned __int16)sub_1004459D0(v11) >> 8;
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092EA60);
  v16 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  if (v16)
  {
    v17 = v16;
    if (sub_100070BDC())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle(qword_100999990);
      if (CTGreenTeaOsLogHandle)
      {
        v19 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_1000340DC(v17, (uint64_t)v26);
          v20 = v27;
          v21 = (void **)v26[0];
          sub_10043E5F8(v11, __p);
          v22 = v26;
          if (v20 < 0)
            v22 = v21;
          if (v25 >= 0)
            v23 = __p;
          else
            v23 = (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v29 = v22;
          v30 = 2082;
          v31 = v23;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to set advanced double tap action for device \"%{public}s\"", buf, 0x16u);
          if (v25 < 0)
            operator delete(__p[0]);
          if (v27 < 0)
            operator delete(v26[0]);
        }
      }
    }
  }
  if (v14 == a4 && v15 == a3)
    return 0;
  else
    return sub_100421D68(v13, v11, a3, a4);
}

void sub_100425E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100425E28(unint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  int v10;

  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v8 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v8)
    return 7;
  v9 = v8;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    if (sub_10043F65C(v9, 0x80000u) != 4)
      return 108;
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_10092EA00);
    if (sub_10006AC40((uint64_t)off_1009778D0, a1))
    {
      v10 = sub_100442118(v9, 14);
      result = 0;
      *a3 = v10;
      return result;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    return 7;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_1006F069C();
  return 212;
}

uint64_t sub_100425FB8(uint64_t a1, unint64_t a2, int a3, int *a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  int v11;

  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v9 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v9)
    return 7;
  v10 = v9;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    v11 = sub_100442118(v10, a3);
    result = 0;
    *a4 = v11 << 31 >> 31;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
  return result;
}

uint64_t sub_1004260CC(uint64_t a1, unint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  _QWORD v16[7];

  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  v16[5] = v3;
  v16[6] = v4;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v9 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v9)
    return 7;
  v10 = v9;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    v15 = 0;
    v16[0] = 0;
    sub_100444BF0(v10, (_DWORD *)v16 + 1, v16, (_DWORD *)&v15 + 1, &v15);
    v11 = HIDWORD(v15);
    if ((HIDWORD(v15) - 8194) <= 0x22 && ((1 << (BYTE4(v15) - 2)) & 0x47A877F9BLL) != 0)
    {
      v12 = HIDWORD(v15) - 8194;
      if ((HIDWORD(v15) - 8194) < 0xF && ((0x409Bu >> v12) & 1) != 0)
      {
        v11 = dword_100741180[v12];
      }
      else
      {
        if ((sub_100442118(v10, 27) & 1) != 0)
          goto LABEL_26;
        v11 = HIDWORD(v15);
      }
    }
    v13 = v11 - 8214;
    if (v13 > 0xF || ((1 << v13) & 0x8003) == 0)
    {
      v14 = 0;
      goto LABEL_27;
    }
LABEL_26:
    v14 = -1;
LABEL_27:
    result = 0;
    *a3 = v14;
    return result;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_1006F069C();
  return 212;
}

uint64_t sub_100426284(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v15;
  int v16;
  void **v17;
  void **v18;
  void **v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  uint8_t buf[4];
  void **v25;
  __int16 v26;
  void **v27;

  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v8 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v8)
    return 7;
  v9 = v8;
  if (sub_10043F65C(v8, 0x80000u) != 4)
    return 108;
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  v10 = sub_10006AC40((uint64_t)off_1009778D0, a1);
  if (!v10)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    return 7;
  }
  v11 = v10;
  if (sub_10044F5D0(v9) == (_DWORD)a3)
    return 0;
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092EA60);
  v12 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  if (v12)
  {
    v13 = v12;
    if (sub_100070BDC())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle(qword_100999990);
      if (CTGreenTeaOsLogHandle)
      {
        v15 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_1000340DC(v13, (uint64_t)v22);
          v16 = v23;
          v17 = (void **)v22[0];
          sub_10043E5F8(v9, __p);
          v18 = v22;
          if (v16 < 0)
            v18 = v17;
          if (v21 >= 0)
            v19 = __p;
          else
            v19 = (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v25 = v18;
          v26 = 2082;
          v27 = v19;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to set Mic mode for device \"%{public}s\"", buf, 0x16u);
          if (v21 < 0)
            operator delete(__p[0]);
          if (v23 < 0)
            operator delete(v22[0]);
        }
      }
    }
  }
  return sub_100421CB4(v11, v9, a3);
}

void sub_100426508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10042652C(unint64_t a1, unint64_t a2, int a3, int a4)
{
  uint64_t v8;
  unint64_t v10;
  unsigned __int8 *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _BOOL4 v16;
  int v17;
  _BYTE *v18;
  _BYTE *v19;
  void **v20;
  const char *v21;
  uint64_t v22;
  _BYTE *v23;
  void *__p[2];
  char v25;
  char v26;
  _BYTE v27[12];
  __int16 v28;
  int v29;
  char v30;
  _BYTE buf[12];
  __int16 v32;
  void **v33;
  __int16 v34;
  const char *v35;

  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10092EA80);
  if ((sub_10051EC6C() & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F07D0();
    return 108;
  }
  if (a2 - 4294901761u < 2 || !a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F07A4();
    return 3;
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v10 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v10)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F06C8();
    return 7;
  }
  v11 = (unsigned __int8 *)v10;
  if (sub_10043F65C(v10, 0x80000u) != 4)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0778();
    return 108;
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10092EAA0);
  if (*((_BYTE *)off_100977A50 + 60))
  {
    v26 = 0;
    sub_100043758(&v26);
    v12 = sub_100185E60((uint64_t)(v11 + 128));
    sub_10004339C(&v26);
    if ((v12 & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006F074C();
      v8 = 108;
      goto LABEL_60;
    }
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_10092EA00);
    v13 = sub_10006AC40((uint64_t)off_1009778D0, a1);
    if (v13)
    {
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_10092EA60);
      v14 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
      v15 = qword_1009997D8;
      v16 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
      if (v14)
      {
        if (v16)
        {
          sub_1000340DC(v14, (uint64_t)v27);
          v17 = v30;
          v18 = *(_BYTE **)v27;
          sub_10043E5F8((uint64_t)v11, __p);
          v19 = v27;
          if (v17 < 0)
            v19 = v18;
          if (v25 >= 0)
            v20 = __p;
          else
            v20 = (void **)__p[0];
          v21 = "Enabled";
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = v19;
          v32 = 2082;
          if (!a3)
            v21 = "Disabled";
          v33 = v20;
          v34 = 2082;
          v35 = v21;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "TimeSyncEnable: Session \"%{public}s\" is configuring Remote Timesync for device \"%{public}s\" to %{public}s", buf, 0x20u);
          if (v25 < 0)
            operator delete(__p[0]);
          if (v30 < 0)
            operator delete(*(void **)v27);
        }
        v22 = sub_100022AE4(v14);
        v8 = sub_100421DD4(v13, v11, v22, a3 != 0, a4);
        goto LABEL_60;
      }
      if (v16)
      {
        sub_10043E5F8((uint64_t)v11, buf);
        v23 = v34 >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)v27 = 136446466;
        *(_QWORD *)&v27[4] = v23;
        v28 = 1024;
        v29 = a3;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Warning: TimeSyncEnable: Invalid Session Setting TimeSync, ignoring device \"%{public}s\" to %d", v27, 0x12u);
        if (SHIBYTE(v34) < 0)
          operator delete(*(void **)buf);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    {
      sub_1006F0720();
    }
    v8 = 7;
LABEL_60:
    sub_100043728(&v26);
    return v8;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_1006F06F4();
  return 111;
}

void sub_1004269D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_100043728(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100426A20(unint64_t a1, unint64_t a2, int a3)
{
  return sub_10042652C(a1, a2, a3, 0);
}

uint64_t sub_100426A28(unint64_t a1, unint64_t a2, int a3)
{
  return sub_10042652C(a1, a2, a3, 1);
}

uint64_t sub_100426A30(unint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unsigned __int8 *v9;

  if (!a3)
    return 3;
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  v6 = sub_10006AC40((uint64_t)off_1009778D0, a1);
  if (!v6)
    return 7;
  v7 = v6;
  result = 3;
  if (a2 - 4294901761u >= 2 && a2)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092EA20);
    v9 = (unsigned __int8 *)sub_10046F6C0((uint64_t)off_1009778E0, a2);
    if (v9)
    {
      sub_10042200C(v7, v9, a3);
      return 0;
    }
    return 7;
  }
  return result;
}

uint64_t sub_100426B18(unint64_t a1, unint64_t a2, int a3)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _BOOL4 v14;
  int v15;
  _BYTE *v16;
  _BYTE *v17;
  void **v18;
  void *v19;
  _BYTE *v20;
  void *__p[2];
  char v22;
  _BYTE v23[12];
  __int16 v24;
  int v25;
  char v26;
  _BYTE buf[12];
  __int16 v28;
  void **v29;
  __int16 v30;
  int v31;

  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v8 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v8)
    return 7;
  v9 = v8;
  if (sub_10043F65C(v8, 0x80000u) != 4)
    return 108;
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  v10 = sub_10006AC40((uint64_t)off_1009778D0, a1);
  if (!v10)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    return 7;
  }
  v11 = v10;
  if ((a3 != 0) == sub_10044F614(v9))
    return 0;
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092EA60);
  v12 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  v13 = qword_1009997D8;
  v14 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    if (!v14)
      return sub_100422AA8(v11, v9, a3 != 0);
    sub_1000340DC(v12, (uint64_t)v23);
    v15 = v26;
    v16 = *(_BYTE **)v23;
    sub_10043E5F8(v9, __p);
    v17 = v23;
    if (v15 < 0)
      v17 = v16;
    v18 = v22 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v17;
    v28 = 2082;
    v29 = v18;
    v30 = 1024;
    v31 = a3;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to set in ear detection mode for device \"%{public}s\" to %d", buf, 0x1Cu);
    if (v22 < 0)
      operator delete(__p[0]);
    if ((v26 & 0x80000000) == 0)
      return sub_100422AA8(v11, v9, a3 != 0);
    v19 = *(void **)v23;
  }
  else
  {
    if (!v14)
      return sub_100422AA8(v11, v9, a3 != 0);
    sub_10043E5F8(v9, buf);
    v20 = v30 >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)v23 = 136446466;
    *(_QWORD *)&v23[4] = v20;
    v24 = 1024;
    v25 = a3;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Setting in ear detection mode for device \"%{public}s\" to %d", v23, 0x12u);
    if ((SHIBYTE(v30) & 0x80000000) == 0)
      return sub_100422AA8(v11, v9, a3 != 0);
    v19 = *(void **)buf;
  }
  operator delete(v19);
  return sub_100422AA8(v11, v9, a3 != 0);
}

void sub_100426E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100426E3C(unint64_t a1, unint64_t a2, int *a3, int *a4)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v10 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v10)
    return 7;
  v11 = v10;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    if (sub_10043F65C(v11, 0x80000u) != 4)
      return 108;
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_10092EA00);
    v12 = sub_10006AC40((uint64_t)off_1009778D0, a1);
    if (v12)
    {
      sub_100422B04(v12, v11, a3, a4);
      return 0;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    return 7;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_1006F069C();
  return 212;
}

uint64_t sub_100426FCC(unint64_t a1, unint64_t a2, unsigned __int8 a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6)
{
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  void **v19;
  void **v20;
  void **v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;
  uint8_t buf[4];
  void **v27;
  __int16 v28;
  void **v29;

  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  if (!sub_10006AC40((uint64_t)off_1009778D0, a1))
    return 7;
  result = 3;
  if (a2 - 4294901761u < 2 || !a2)
    return result;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v13 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v13)
    return 7;
  v14 = v13;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    if (sub_10043F65C(v14, 0x80000u) == 4)
    {
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_10092EA60);
      v15 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
      if (v15)
      {
        v16 = v15;
        v17 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000340DC(v16, (uint64_t)v24);
          v18 = v25;
          v19 = (void **)v24[0];
          sub_10043E5F8(v14, __p);
          v20 = v24;
          if (v18 < 0)
            v20 = v19;
          if (v23 >= 0)
            v21 = __p;
          else
            v21 = (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v27 = v20;
          v28 = 2082;
          v29 = v21;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to send Setup Command to device \"%{public}s\"", buf, 0x16u);
          if (v23 < 0)
            operator delete(__p[0]);
          if (v25 < 0)
            operator delete(v24[0]);
        }
      }
      if (qword_100977A88 != -1)
        dispatch_once(&qword_100977A88, &stru_10092EAC0);
      return sub_10027C51C((uint64_t)off_100977A80, v14, a3, a4, a6, a5);
    }
    else
    {
      return 108;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
}

void sub_1004272A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004272CC(unint64_t a1, unint64_t a2, uint64_t a3, int a4, const void *a5, unsigned int a6)
{
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  void **v19;
  void **v20;
  void **v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;
  uint8_t buf[4];
  void **v27;
  __int16 v28;
  void **v29;

  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  if (!sub_10006AC40((uint64_t)off_1009778D0, a1))
    return 7;
  result = 3;
  if (a2 - 4294901761u < 2 || !a2)
    return result;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v13 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v13)
    return 7;
  v14 = v13;
  if (sub_10043F65C(v13, 0x80000u) != 4)
    return 108;
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092EA60);
  v15 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  if (v15)
  {
    v16 = v15;
    v17 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(v16, (uint64_t)v24);
      v18 = v25;
      v19 = (void **)v24[0];
      sub_10043E5F8(v14, __p);
      v20 = v24;
      if (v18 < 0)
        v20 = v19;
      if (v23 >= 0)
        v21 = __p;
      else
        v21 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v27 = v20;
      v28 = 2082;
      v29 = v21;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to send Relay Msg to device \"%{public}s\"", buf, 0x16u);
      if (v23 < 0)
        operator delete(__p[0]);
      if (v25 < 0)
        operator delete(v24[0]);
    }
  }
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092EAC0);
  return sub_10027C7D0((uint64_t)off_100977A80, v14, a3, a4, a6, a5);
}

void sub_100427548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10042756C(unint64_t a1, unint64_t a2, int a3, int *a4, unsigned int a5)
{
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  void **v17;
  void **v18;
  void **v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  uint8_t buf[4];
  void **v25;
  __int16 v26;
  void **v27;

  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  if (!sub_10006AC40((uint64_t)off_1009778D0, a1))
    return 7;
  result = 3;
  if (a2 - 4294901761u < 2 || !a2)
    return result;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v11 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v11)
    return 7;
  v12 = v11;
  if (sub_10043F65C(v11, 0x80000u) != 4)
    return 108;
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092EA60);
  v13 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  if (v13)
  {
    v14 = v13;
    v15 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(v14, (uint64_t)v22);
      v16 = v23;
      v17 = (void **)v22[0];
      sub_10043E5F8(v12, __p);
      v18 = v22;
      if (v16 < 0)
        v18 = v17;
      if (v21 >= 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v25 = v18;
      v26 = 2082;
      v27 = v19;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to send Update Connection Priority List to device \"%{public}s\"", buf, 0x16u);
      if (v21 < 0)
        operator delete(__p[0]);
      if (v23 < 0)
        operator delete(v22[0]);
    }
  }
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092EAC0);
  return sub_10027CB9C((uint64_t)off_100977A80, v12, a3, a4, a5);
}

void sub_1004277D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004277FC(unint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  int v10;

  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v8 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v8)
    return 7;
  v9 = v8;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    if (sub_10043F65C(v9, 0x80000u) != 4)
      return 108;
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_10092EA00);
    if (sub_10006AC40((uint64_t)off_1009778D0, a1))
    {
      v10 = sub_1004459D0(v9);
      result = 0;
      *a3 = v10;
      return result;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    return 7;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_1006F069C();
  return 212;
}

uint64_t sub_100427988(unint64_t a1, unint64_t a2, _DWORD *a3, int *a4)
{
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  _BOOL4 v14;
  int v15;
  _DWORD v16[2];
  __int16 v17;
  int v18;

  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v10 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v10)
    return 7;
  v11 = v10;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    if (sub_10043F65C(v11, 0x80000u) != 4)
      return 108;
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_10092EA00);
    if (sub_10006AC40((uint64_t)off_1009778D0, a1))
    {
      *a4 = sub_1004459D0(v11);
      v12 = ((unsigned __int16)sub_1004459D0(v11) >> 8);
      *a3 = v12;
      v13 = qword_1009997D8;
      v14 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v14)
      {
        v15 = *a4;
        v16[0] = 67109376;
        v16[1] = v12;
        v17 = 1024;
        v18 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Double tap values read from device, left = %d, rght = %d", (uint8_t *)v16, 0xEu);
        return 0;
      }
      return result;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    return 7;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_1006F069C();
  return 212;
}

uint64_t sub_100427BC4(unint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  int v10;

  if (!a3)
    return 3;
  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v8 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v8)
    return 7;
  v9 = v8;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    if (sub_10043F65C(v9, 0x80000u) != 4)
      return 108;
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_10092EA00);
    if (sub_10006AC40((uint64_t)off_1009778D0, a1))
    {
      v10 = sub_10044F5D0(v9);
      result = 0;
      *a3 = v10;
      return result;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    return 7;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_1006F069C();
  return 212;
}

uint64_t sub_100427D5C(unint64_t a1, unint64_t a2, int *a3)
{
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  int v10;

  if (!a3)
    return 3;
  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v8 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v8)
    return 7;
  v9 = v8;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    if (sub_10043F65C(v9, 0x80000u) != 4)
      return 108;
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_10092EA00);
    if (sub_10006AC40((uint64_t)off_1009778D0, a1))
    {
      v10 = sub_10044F614(v9);
      result = 0;
      *a3 = v10 << 31 >> 31;
      return result;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    return 7;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_1006F069C();
  return 212;
}

uint64_t sub_100427EF8(unint64_t a1, unint64_t a2, int a3)
{
  unint64_t v8;
  uint64_t v9;

  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v8 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v8)
    return 7;
  v9 = v8;
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  if (!sub_10006AC40((uint64_t)off_1009778D0, a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    return 7;
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    if (sub_10043F65C(v9, 0x80000u) == 4)
    {
      if (qword_100977A88 != -1)
        dispatch_once(&qword_100977A88, &stru_10092EAC0);
      sub_1002A1AA4((uint64_t)off_100977A80, v9, a3 != 0);
      return 0;
    }
    else
    {
      return 108;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
}

uint64_t sub_1004280B4(unint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  if (!sub_10006AC40((uint64_t)off_1009778D0, a1))
    return 7;
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092EAC0);
  return sub_10029C124(off_100977A80, a1, a3, a2, a4);
}

uint64_t sub_100428174(unint64_t a1, uint64_t *a2)
{
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  if (!sub_10006AC40((uint64_t)off_1009778D0, a1))
    return 7;
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092EAC0);
  return sub_10029C598((uint64_t)off_100977A80, a1, a2);
}

uint64_t sub_100428218(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unsigned __int16 a5)
{
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v16;
  int v17;
  void **v18;
  void **v19;
  void **v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  uint8_t buf[4];
  void **v26;
  __int16 v27;
  void **v28;

  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  if (!sub_10006AC40((uint64_t)off_1009778D0, a1))
    return 7;
  result = 3;
  if (a3 - 4294901761u < 2 || !a3)
    return result;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v11 = sub_10046F6C0((uint64_t)off_1009778E0, a3);
  if (!v11)
    return 7;
  v12 = v11;
  if (sub_10043F65C(v11, 0x80000u) != 4)
    return 108;
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092EA60);
  v13 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  if (v13)
  {
    v14 = v13;
    if (sub_100070BDC())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle(qword_100999990);
      if (CTGreenTeaOsLogHandle)
      {
        v16 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_1000340DC(v14, (uint64_t)v23);
          v17 = v24;
          v18 = (void **)v23[0];
          sub_10043E5F8(v12, __p);
          v19 = v23;
          if (v17 < 0)
            v19 = v18;
          if (v22 >= 0)
            v20 = __p;
          else
            v20 = (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v26 = v19;
          v27 = 2082;
          v28 = v20;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to send custom data to device \"%{public}s\"", buf, 0x16u);
          if (v22 < 0)
            operator delete(__p[0]);
          if (v24 < 0)
            operator delete(v23[0]);
        }
      }
    }
  }
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092EAC0);
  return sub_10027958C((uint64_t)off_100977A80, v12, a2, a5, a4);
}

void sub_100428494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004284B8(unint64_t a1, unint64_t a2, unsigned int a3, unsigned __int8 *a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;

  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  if (!sub_10006AC40((uint64_t)off_1009778D0, a1))
    return 7;
  result = 3;
  if (a2 - 4294901761u < 2 || !a2)
    return result;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v9 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v9)
    return 7;
  v10 = v9;
  if (sub_10043F65C(v9, 0x80000u) != 4)
    return 108;
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092EAC0);
  return sub_100286DFC((uint64_t)off_100977A80, v10, a3, a4);
}

uint64_t sub_1004285E4(unint64_t a1, unint64_t a2, unsigned int a3, unsigned __int8 *a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;

  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  if (!sub_10006AC40((uint64_t)off_1009778D0, a1))
    return 7;
  result = 3;
  if (a2 - 4294901761u < 2 || !a2)
    return result;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v9 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v9)
    return 7;
  v10 = v9;
  if (sub_10043F65C(v9, 0x80000u) != 4)
    return 108;
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092EAC0);
  return sub_10028702C((uint64_t)off_100977A80, v10, a3, a4);
}

uint64_t sub_100428710(unint64_t a1, unint64_t a2, void *a3, _QWORD *a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  _OWORD v14[16];
  size_t __n;

  v10 = sub_100027F68();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10))
    return 2;
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  if (!sub_10006AC40((uint64_t)off_1009778D0, a1))
    return 7;
  result = 3;
  if (a2 - 4294901761u < 2 || !a2)
    return result;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v12 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v12)
    return 7;
  if (sub_10043F65C(v12, 0x80000u) != 4)
    return 108;
  LOBYTE(__n) = 0;
  memset(v14, 0, sizeof(v14));
  if (qword_100978180 != -1)
    dispatch_once(&qword_100978180, &stru_10092EAE0);
  sub_1003C2140(qword_100978178, v14);
  v13 = __n;
  if (__n > a5)
    return 5;
  memcpy(a3, v14, __n);
  result = 0;
  *a4 = v13;
  return result;
}

uint64_t sub_1004288D8(unint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned __int16 a4)
{
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;

  v8 = sub_100027F68();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8))
    return 2;
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  if (!sub_10006AC40((uint64_t)off_1009778D0, a1))
    return 7;
  result = 3;
  if (a2 - 4294901761u < 2 || !a2)
    return result;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v10 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v10)
    return 7;
  v11 = v10;
  if (sub_10043F65C(v10, 0x80000u) != 4)
    return 108;
  if (qword_100978180 != -1)
    dispatch_once(&qword_100978180, &stru_10092EAE0);
  return sub_1003C2458(qword_100978178, v11, a3, a4);
}

uint64_t sub_100428A20(unint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;

  v6 = sub_100027F68();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6))
    return 2;
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  if (!sub_10006AC40((uint64_t)off_1009778D0, a1))
    return 7;
  result = 3;
  if (a2 - 4294901761u < 2 || !a2)
    return result;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v8 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v8)
    return 7;
  v9 = v8;
  if (sub_10043F65C(v8, 0x80000u) != 4)
    return 108;
  if (qword_100978180 != -1)
    dispatch_once(&qword_100978180, &stru_10092EAE0);
  return sub_1003C2640(qword_100978178, v9, a3);
}

uint64_t sub_100428B60(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v14;
  int v15;
  void **v16;
  void **v17;
  void **v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;
  uint8_t buf[4];
  void **v24;
  __int16 v25;
  void **v26;

  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  if (!sub_10006AC40((uint64_t)off_1009778D0, a1))
    return 7;
  result = 3;
  if (a2 - 4294901761u < 2 || !a2)
    return result;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v9 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v9)
    return 7;
  v10 = v9;
  if (sub_10043F65C(v9, 0x80000u) != 4)
    return 108;
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092EA60);
  v11 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  if (v11)
  {
    v12 = v11;
    if (sub_100070BDC())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle(qword_100999990);
      if (CTGreenTeaOsLogHandle)
      {
        v14 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_1000340DC(v12, (uint64_t)v21);
          v15 = v22;
          v16 = (void **)v21[0];
          sub_10043E5F8(v10, __p);
          v17 = v21;
          if (v15 < 0)
            v17 = v16;
          if (v20 >= 0)
            v18 = __p;
          else
            v18 = (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v24 = v17;
          v25 = 2082;
          v26 = v18;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to send control command to device \"%{public}s\"", buf, 0x16u);
          if (v20 < 0)
            operator delete(__p[0]);
          if (v22 < 0)
            operator delete(v21[0]);
        }
      }
    }
  }
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092EAC0);
  return sub_100279E6C((uint64_t)off_100977A80, v10, a3, a4, 2u);
}

void sub_100428DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100428DFC(unint64_t a1, unint64_t a2, int a3, int a4, int *a5)
{
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  int v13;
  NSObject *v14;
  _BOOL4 v15;
  const char *v16;
  int v17;
  _BOOL4 v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  int v23;
  _BOOL4 v24;
  int v25;
  _BOOL4 v26;
  int v27;
  _BOOL4 v28;
  int v29;
  _BOOL4 v30;
  int v31;
  _BOOL4 v32;
  int v33;
  _BOOL4 v34;
  int v35;
  _BOOL4 v36;
  NSObject *v37;
  _BOOL4 v38;
  void **v39;
  int v40;
  const char *v41;
  _BOOL4 v42;
  void **v43;
  int v44;
  _BOOL4 v45;
  void **v46;
  int v47;
  _BOOL4 v48;
  void **v49;
  int v50;
  _BOOL4 v51;
  void **v52;
  int v53;
  _BOOL4 v54;
  void **v55;
  int v56;
  _BOOL4 v57;
  void **v58;
  int v59;
  _BOOL4 v60;
  void **v61;
  int v62;
  _BOOL4 v63;
  void **v64;
  int v65;
  _BOOL4 v66;
  void **v67;
  int v68;
  _BOOL4 v69;
  void **v70;
  int v71;
  void *__p[2];
  char v73;
  uint8_t buf[4];
  _BYTE v75[10];
  int v76;
  __int16 v77;
  int v78;

  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  if (!sub_10006AC40((uint64_t)off_1009778D0, a1))
    return 7;
  result = 3;
  if (a2 - 4294901761u < 2 || !a2)
    return result;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v11 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v11)
    return 7;
  v12 = v11;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    if (sub_10043F65C(v12, 0x80000u) == 4)
    {
      result = 0;
      switch(a3)
      {
        case 13:
          v13 = sub_10044F708(v12);
          *a5 = v13;
          v14 = qword_1009997D8;
          v15 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v15)
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v75 = a4;
            *(_WORD *)&v75[4] = 1024;
            *(_DWORD *)&v75[6] = v13;
            v16 = "Get ListeningMode device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }
          break;
        case 20:
          v17 = sub_10044F818(v12);
          *a5 = v17;
          v14 = qword_1009997D8;
          v18 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v18)
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v75 = a4;
            *(_WORD *)&v75[4] = 1024;
            *(_DWORD *)&v75[6] = v17;
            v16 = "Get SingleClickMode device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }
          break;
        case 21:
          v19 = sub_10044F85C(v12);
          *a5 = v19;
          v14 = qword_1009997D8;
          v20 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v20)
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v75 = a4;
            *(_WORD *)&v75[4] = 1024;
            *(_DWORD *)&v75[6] = v19;
            v16 = "Get DoubleClickMode device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }
          break;
        case 22:
          v21 = sub_10044F8A0(v12);
          *a5 = v21;
          v14 = qword_1009997D8;
          v22 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v22)
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v75 = a4;
            *(_WORD *)&v75[4] = 1024;
            *(_DWORD *)&v75[6] = v21;
            v16 = "Get ClickHoldMode device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }
          break;
        case 23:
          v23 = sub_10044F8E4(v12);
          *a5 = v23;
          v14 = qword_1009997D8;
          v24 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v24)
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v75 = a4;
            *(_WORD *)&v75[4] = 1024;
            *(_DWORD *)&v75[6] = v23;
            v16 = "Get DoubleClickInterval device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }
          break;
        case 24:
          v25 = sub_10044F928(v12);
          *a5 = v25;
          v14 = qword_1009997D8;
          v26 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v26)
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v75 = a4;
            *(_WORD *)&v75[4] = 1024;
            *(_DWORD *)&v75[6] = v25;
            v16 = "Get ClickHoldInterval device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }
          break;
        case 26:
          v27 = sub_10044F74C(v12);
          *a5 = v27;
          v14 = qword_1009997D8;
          v28 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v28)
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v75 = a4;
            *(_WORD *)&v75[4] = 1024;
            *(_DWORD *)&v75[6] = v27;
            v16 = "Get ListeningModeConfigs device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }
          break;
        case 27:
          v29 = sub_10044F96C(v12);
          *a5 = v29;
          v14 = qword_1009997D8;
          v30 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v30)
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v75 = a4;
            *(_WORD *)&v75[4] = 1024;
            *(_DWORD *)&v75[6] = v29;
            v16 = "Get OneBudANCMode device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }
          break;
        case 28:
          v31 = sub_10044F9B0(v12);
          *a5 = v31;
          v14 = qword_1009997D8;
          v32 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v32)
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v75 = a4;
            *(_WORD *)&v75[4] = 1024;
            *(_DWORD *)&v75[6] = v31;
            v16 = "Get CrownRotationDirection device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }
          break;
        case 30:
          v33 = sub_10044F9F4(v12);
          *a5 = v33;
          v14 = qword_1009997D8;
          v34 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v34)
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v75 = a4;
            *(_WORD *)&v75[4] = 1024;
            *(_DWORD *)&v75[6] = v33;
            v16 = "Get Auto Answer device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }
          break;
        case 31:
          v35 = sub_10044FA38(v12);
          *a5 = v35;
          v14 = qword_1009997D8;
          v36 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v36)
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v75 = a4;
            *(_WORD *)&v75[4] = 1024;
            *(_DWORD *)&v75[6] = v35;
            v16 = "Get ChimeVolume device setting : setting type %d, controlValue %d";
LABEL_42:
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v16, buf, 0xEu);
            goto LABEL_100;
          }
          break;
        case 35:
          *a5 = sub_10044FAC0(v12);
          v37 = qword_1009997D8;
          v38 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v38)
          {
            sub_10043E5F8(v12, __p);
            if (v73 >= 0)
              v39 = __p;
            else
              v39 = (void **)__p[0];
            v40 = *a5;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)v75 = v39;
            *(_WORD *)&v75[8] = 1024;
            v76 = a4;
            v77 = 1024;
            v78 = v40;
            v41 = "Get VolumeSwipeInterval setting for device %{public}s : setting type %d, controlValue %d";
            goto LABEL_98;
          }
          break;
        case 36:
          *a5 = sub_10044FB04(v12);
          v37 = qword_1009997D8;
          v42 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v42)
          {
            sub_10043E5F8(v12, __p);
            if (v73 >= 0)
              v43 = __p;
            else
              v43 = (void **)__p[0];
            v44 = *a5;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)v75 = v43;
            *(_WORD *)&v75[8] = 1024;
            v76 = a4;
            v77 = 1024;
            v78 = v44;
            v41 = "Get CallManagementConfiguration setting for device %{public}s : setting type %d, controlValue 0x%08X";
            goto LABEL_98;
          }
          break;
        case 37:
          *a5 = sub_10044FA7C(v12);
          v37 = qword_1009997D8;
          v45 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v45)
          {
            sub_10043E5F8(v12, __p);
            if (v73 >= 0)
              v46 = __p;
            else
              v46 = (void **)__p[0];
            v47 = *a5;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)v75 = v46;
            *(_WORD *)&v75[8] = 1024;
            v76 = a4;
            v77 = 1024;
            v78 = v47;
            v41 = "Get VolumeSwipeMode setting for device %{public}s : setting type %d, controlValue %d";
            goto LABEL_98;
          }
          break;
        case 38:
          *a5 = sub_10044FB48(v12);
          v37 = qword_1009997D8;
          v48 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v48)
          {
            sub_10043E5F8(v12, __p);
            if (v73 >= 0)
              v49 = __p;
            else
              v49 = (void **)__p[0];
            v50 = *a5;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)v75 = v49;
            *(_WORD *)&v75[8] = 1024;
            v76 = a4;
            v77 = 1024;
            v78 = v50;
            v41 = "Get AdaptiveVolumeMode setting for device %{public}s : setting type %d, controlValue 0x%08X";
            goto LABEL_98;
          }
          break;
        case 39:
          *a5 = sub_10044FB8C(v12);
          v37 = qword_1009997D8;
          v51 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v51)
          {
            sub_10043E5F8(v12, __p);
            if (v73 >= 0)
              v52 = __p;
            else
              v52 = (void **)__p[0];
            v53 = *a5;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)v75 = v52;
            *(_WORD *)&v75[8] = 1024;
            v76 = a4;
            v77 = 1024;
            v78 = v53;
            v41 = "Get Software Mute device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_98;
          }
          break;
        case 40:
          *a5 = sub_10044FBD0(v12);
          v37 = qword_1009997D8;
          v54 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v54)
          {
            sub_10043E5F8(v12, __p);
            if (v73 >= 0)
              v55 = __p;
            else
              v55 = (void **)__p[0];
            v56 = *a5;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)v75 = v55;
            *(_WORD *)&v75[8] = 1024;
            v76 = a4;
            v77 = 1024;
            v78 = v56;
            v41 = "Get Conversation Detect device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_98;
          }
          break;
        case 41:
          *a5 = sub_10044FC14(v12);
          v37 = qword_1009997D8;
          v57 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v57)
          {
            sub_10043E5F8(v12, __p);
            if (v73 >= 0)
              v58 = __p;
            else
              v58 = (void **)__p[0];
            v59 = *a5;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)v75 = v58;
            *(_WORD *)&v75[8] = 1024;
            v76 = a4;
            v77 = 1024;
            v78 = v59;
            v41 = "Get SSL device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_98;
          }
          break;
        case 46:
          *a5 = sub_10044FC58(v12);
          v37 = qword_1009997D8;
          v60 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v60)
          {
            sub_10043E5F8(v12, __p);
            if (v73 >= 0)
              v61 = __p;
            else
              v61 = (void **)__p[0];
            v62 = *a5;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)v75 = v61;
            *(_WORD *)&v75[8] = 1024;
            v76 = a4;
            v77 = 1024;
            v78 = v62;
            v41 = "Get Auto ANC strength device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_98;
          }
          break;
        case 48:
          *a5 = sub_10044FC9C(v12);
          v37 = qword_1009997D8;
          v63 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v63)
          {
            sub_10043E5F8(v12, __p);
            if (v73 >= 0)
              v64 = __p;
            else
              v64 = (void **)__p[0];
            v65 = *a5;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)v75 = v64;
            *(_WORD *)&v75[8] = 1024;
            v76 = a4;
            v77 = 1024;
            v78 = v65;
            v41 = "Get Heart Rate Monitor enabled device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_98;
          }
          break;
        case 49:
          *a5 = sub_10044FCE0(v12);
          v37 = qword_1009997D8;
          v66 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v66)
          {
            sub_10043E5F8(v12, __p);
            if (v73 >= 0)
              v67 = __p;
            else
              v67 = (void **)__p[0];
            v68 = *a5;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)v75 = v67;
            *(_WORD *)&v75[8] = 1024;
            v76 = a4;
            v77 = 1024;
            v78 = v68;
            v41 = "Get In Case Tone device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_98;
          }
          break;
        case 50:
          *a5 = sub_10044FD24(v12);
          v37 = qword_1009997D8;
          v69 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v69)
          {
            sub_10043E5F8(v12, __p);
            if (v73 >= 0)
              v70 = __p;
            else
              v70 = (void **)__p[0];
            v71 = *a5;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)v75 = v70;
            *(_WORD *)&v75[8] = 1024;
            v76 = a4;
            v77 = 1024;
            v78 = v71;
            v41 = "Get Siri Multitone device setting for device %{public}s : setting type %u, controlValue %u";
LABEL_98:
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, v41, buf, 0x18u);
            if (v73 < 0)
              operator delete(__p[0]);
LABEL_100:
            result = 0;
          }
          break;
        default:
          return result;
      }
    }
    else
    {
      return 108;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
  return result;
}

uint64_t sub_100429ACC(unint64_t a1, unint64_t a2, int *a3)
{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _BOOL4 v10;
  int v11;
  _DWORD v12[2];

  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  if (!sub_10006AC40((uint64_t)off_1009778D0, a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    return 7;
  }
  result = 3;
  if (a2 - 4294901761u < 2 || !a2)
    return result;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v7 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v7)
    return 7;
  v8 = v7;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    *a3 = 0;
    if (sub_100442118(v8, 12))
      *a3 |= 1u;
    if (sub_100442118(v8, 1))
      *a3 |= 8u;
    if (sub_100442118(v8, 3))
      *a3 |= 0x10u;
    if (sub_100442118(v8, 14))
      *a3 |= 6u;
    if (sub_100442118(v8, 16))
      *a3 |= 0x200u;
    if (sub_100442118(v8, 17))
      *a3 |= 0x100u;
    if (sub_100442118(v8, 15))
      *a3 |= 0x20u;
    if (sub_100442118(v8, 3))
      *a3 |= 0x400u;
    v9 = qword_1009997D8;
    v10 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v10)
    {
      v11 = *a3;
      v12[0] = 67109120;
      v12[1] = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Setting Feature BitMask : settingFeatureBitMask %8x", (uint8_t *)v12, 8u);
      return 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
  return result;
}

uint64_t sub_100429D94(uint64_t a1, unint64_t a2, void *a3, _QWORD *a4, unint64_t a5)
{
  NSMutableDictionary *v9;
  unint64_t v10;
  uint64_t v11;
  NSMutableArray *v12;
  uint64_t *i;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  const __CFString *v17;
  std::string *v18;
  void *v19;
  NSMutableDictionary *v20;
  void **v21;
  void *v22;
  unint64_t v23;
  unsigned __int16 v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  NSObject *v30;
  uint64_t v31;
  id v32;
  id v34;
  __int128 v35;
  __int128 v36;
  void *__p[2];
  uint64_t v38;
  std::string v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;

  v9 = objc_opt_new(NSMutableDictionary);
  if (a2)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092EA20);
    v10 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
    v11 = v10;
    if (v10)
    {
      v40 = 0;
      v41 = 0;
      v42 = 0;
      if (sub_100448DAC(v10, (uint64_t)&v40))
      {
        v12 = objc_opt_new(NSMutableArray);
        for (i = v40; i != v41; i += 3)
        {
          v14 = i;
          if (*((char *)i + 23) < 0)
            v14 = (uint64_t *)*i;
          v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14));
          v16 = (void *)v15;
          if (v15)
            v17 = (const __CFString *)v15;
          else
            v17 = &stru_100941758;
          -[NSMutableArray addObject:](v12, "addObject:", v17);

        }
        -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v12, CFSTR("AACPVersionInfo"));

      }
      memset(&v39, 0, sizeof(v39));
      if (sub_100449468(v11, &v39))
      {
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &v39;
        else
          v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
        v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18));
        -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v19, CFSTR("ANCAssetVersion"));

      }
      v38 = 0;
      v36 = 0u;
      *(_OWORD *)__p = 0u;
      v35 = 0u;
      sub_100091AE8(__p, "");
      if (sub_1004495CC(v11, (uint64_t)&v35))
      {
        v20 = objc_opt_new(NSMutableDictionary);
        if (v38 >= 0)
          v21 = __p;
        else
          v21 = (void **)__p[0];
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v21));
        v23 = v36;
        if ((unint64_t)objc_msgSend(v22, "length") >= 2)
          -[NSMutableDictionary setObject:forKey:](v20, "setObject:forKey:", v22, CFSTR("CaseInfoName"));
        if (v23)
        {
          v24 = v23 >> 4;
          if (v35 < 2u)
          {
            v25 = v23 & 0xF;
          }
          else
          {
            v25 = (v23 >> 20) & 0xFFF0 | v23 & 0xF;
            v24 |= WORD2(v23) & 0xFFF0;
          }
          v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u.%u.%u"), (unsigned __int16)(v23 >> 8), v24, v25));
          -[NSMutableDictionary setObject:forKey:](v20, "setObject:forKey:", v27, CFSTR("CaseInfoVersion"));

        }
        if (-[NSMutableDictionary count](v20, "count"))
          -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v20, CFSTR("CaseInfo"));

      }
      if (-[NSMutableDictionary count](v9, "count"))
      {
        v34 = 0;
        v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v9, 0, &v34));
        v29 = v34;
        if (v29)
        {
          v30 = qword_1009997D8;
          if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
            sub_1006F07FC((uint64_t)v29, v30, v31);
          v26 = 1;
        }
        else if ((unint64_t)objc_msgSend(v28, "length") <= a5)
        {
          v32 = objc_retainAutorelease(v28);
          memcpy(a3, objc_msgSend(v32, "bytes"), (size_t)objc_msgSend(v32, "length"));
          v26 = 0;
          *a4 = objc_msgSend(v32, "length");
        }
        else
        {
          v26 = 5;
        }

      }
      else
      {
        v29 = 0;
        v26 = 1;
      }
      if (SHIBYTE(v38) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      *(_QWORD *)&v35 = &v40;
      sub_100091BF8((void ***)&v35);

    }
    else
    {
      v26 = 3;
    }
  }
  else
  {
    v26 = 7;
  }

  return v26;
}

void sub_10042A190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;

  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  a15 = v34 - 112;
  sub_100091BF8((void ***)&a15);

  _Unwind_Resume(a1);
}

uint64_t sub_10042A254(uint64_t a1, unint64_t a2, void *a3, unint64_t *a4, unint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;

  if (!a2)
    return 19;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v9 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v9)
    return 3;
  v10 = v9;
  if (sub_10043F65C(v9, 0x80000u) != 4)
    return 108;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  sub_10044FEB8(v10, &v15);
  v11 = v15;
  v12 = v16 - v15;
  if (v16 != v15)
  {
    if (v12 <= a5)
    {
      memcpy(a3, v15, v16 - v15);
      v13 = 0;
      *a4 = v12;
      if (!v11)
        return v13;
    }
    else
    {
      v13 = 5;
      if (!v15)
        return v13;
    }
    goto LABEL_14;
  }
  v13 = 1;
  if (v15)
  {
LABEL_14:
    v16 = v11;
    operator delete(v11);
  }
  return v13;
}

uint64_t sub_10042A36C(uint64_t a1, unint64_t a2, unsigned int a3, _DWORD *a4)
{
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;

  if (!a2)
    return 19;
  if (a3 > 0xFF)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v7 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v7)
    return 3;
  v8 = v7;
  if (sub_10043F65C(v7, 0x80000u) != 4)
    return 108;
  v9 = sub_10044FF54(v8, a3);
  result = 0;
  *a4 = v9;
  return result;
}

uint64_t sub_10042A424(uint64_t a1, char *a2, size_t a3, char *a4, size_t a5, char *a6, size_t a7, char *a8, size_t a9, char *a10, size_t a11, char *a12, size_t a13, char *a14, size_t a15)
{
  char *v18;
  char *v23;
  size_t v25;
  char *v26;
  size_t v27;

  v18 = a4;
  if (qword_100977A88 != -1)
  {
    v26 = a6;
    v27 = a7;
    v25 = a5;
    v23 = a8;
    dispatch_once(&qword_100977A88, &stru_10092EAC0);
    a8 = v23;
    v18 = a4;
    a5 = v25;
    a6 = v26;
    a7 = v27;
  }
  return sub_1002966C8((uint64_t)off_100977A80, a1, a2, a3, v18, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_10042A4FC(unint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v7;
  int v8;

  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  if (!sub_10006AC40((uint64_t)off_1009778D0, a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    return 7;
  }
  if (!a3)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    result = 3;
    if (a2 - 4294901761u >= 2 && a2)
    {
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_10092EA20);
      v7 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
      if (v7)
      {
        v8 = sub_1004512E8(v7);
        result = 0;
        *a3 = v8;
        return result;
      }
      return 7;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
  return result;
}

uint64_t sub_10042A664(unint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t *v7;
  _QWORD *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  void *__p;
  char *v19;
  uint64_t v20;

  v4 = 3;
  if (a2 && a3)
  {
    v7 = a2;
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_10092EA00);
    v9 = (_QWORD *)sub_10006AC40((uint64_t)off_1009778D0, a1);
    if (v9)
    {
      __p = 0;
      v19 = 0;
      v20 = 0;
      v4 = sub_100422DC0(v9, (char *)&__p);
      if (!(_DWORD)v4)
      {
        v10 = 0;
        if (a4 && __p != v19)
        {
          v11 = (char *)__p + 8;
          v12 = 1;
          do
          {
            v13 = *((_QWORD *)v11 - 1);
            if (qword_1009778E8 != -1)
              dispatch_once(&qword_1009778E8, &stru_10092EA20);
            v14 = sub_10046F750((uint64_t)off_1009778E0, a1, v13);
            if (!v14)
            {
              v4 = 7;
              goto LABEL_23;
            }
            *v7++ = v14;
            v15 = v12 + 1;
            if (v12 >= a4)
              break;
            ++v12;
            v16 = v11 == v19;
            v11 += 8;
          }
          while (!v16);
          v10 = v15 - 1;
        }
        v4 = 0;
        *a3 = v10;
      }
LABEL_23:
      if (__p)
      {
        v19 = (char *)__p;
        operator delete(__p);
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006F0488();
      return 7;
    }
  }
  return v4;
}

void sub_10042A7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10042A81C(unint64_t a1, unint64_t a2, int *a3)
{
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  _BOOL4 v15;
  int v16;
  _BYTE *v17;
  _BYTE *v18;
  void **v19;
  void *v20;
  _BYTE *v21;
  void *__p[2];
  char v23;
  _BYTE v24[12];
  __int16 v25;
  int v26;
  char v27;
  _BYTE buf[12];
  __int16 v29;
  void **v30;
  __int16 v31;
  int v32;

  if (!a3)
    return 3;
  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v8 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v8)
    return 7;
  v9 = v8;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    if (!sub_10044FE34(v9, 64))
      return 108;
    v10 = sub_10003BE44();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 792))(v10, 1))
      return 108;
    v11 = sub_10003BE44();
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 384))(v11))
      return 108;
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_10092EA00);
    if (sub_10006AC40((uint64_t)off_1009778D0, a1))
    {
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_10092EA80);
      v12 = sub_100527654((uint64_t)off_100977A90, v9);
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_10092EA60);
      v13 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
      v14 = qword_1009997D8;
      v15 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
      if (v13)
      {
        if (!v15)
          goto LABEL_49;
        sub_1000340DC(v13, (uint64_t)v24);
        v16 = v27;
        v17 = *(_BYTE **)v24;
        sub_10043E5F8(v9, __p);
        v18 = v24;
        if (v16 < 0)
          v18 = v17;
        v19 = v23 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = v18;
        v29 = 2082;
        v30 = v19;
        v31 = 1024;
        v32 = v12;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" reading in Spatial Audio Active device \"%{public}s\" to %d", buf, 0x1Cu);
        if (v23 < 0)
          operator delete(__p[0]);
        if ((v27 & 0x80000000) == 0)
          goto LABEL_49;
        v20 = *(void **)v24;
      }
      else
      {
        if (!v15)
          goto LABEL_49;
        sub_10043E5F8(v9, buf);
        v21 = v31 >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)v24 = 136446466;
        *(_QWORD *)&v24[4] = v21;
        v25 = 1024;
        v26 = v12;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Spatial Audio Active for device \"%{public}s\" to %d", v24, 0x12u);
        if ((SHIBYTE(v31) & 0x80000000) == 0)
          goto LABEL_49;
        v20 = *(void **)buf;
      }
      operator delete(v20);
LABEL_49:
      result = 0;
      *a3 = v12 << 31 >> 31;
      return result;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    return 7;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_1006F069C();
  return 212;
}

void sub_10042ABB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10042ABDC(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _BOOL4 v16;
  int v17;
  _BYTE *v18;
  _BYTE *v19;
  void **v20;
  void *v21;
  _BYTE *v22;
  void *v23[2];
  char v24;
  _BYTE buf[12];
  __int16 v26;
  int v27;
  char v28;
  _BYTE __p[12];
  __int16 v30;
  void **v31;
  __int16 v32;
  int v33;

  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v8 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v8)
    return 7;
  v9 = v8;
  v10 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v9, __p);
    v11 = v32 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v11;
    v26 = 1024;
    v27 = a3;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "BTAccessoryManagerSpatialAudioAllowed:  \"%{public}s\" Allowed %d", buf, 0x12u);
    if (SHIBYTE(v32) < 0)
      operator delete(*(void **)__p);
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    if (!sub_10044FE34(v9, 64))
      return 108;
    v12 = sub_10003BE44();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 792))(v12, 1))
      return 108;
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_10092EA00);
    v13 = sub_10006AC40((uint64_t)off_1009778D0, a1);
    if (v13)
    {
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_10092EA60);
      v14 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
      v15 = qword_1009997D8;
      v16 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
      if (v14)
      {
        if (!v16)
          return sub_100422220(v13, v9, a3);
        sub_1000340DC(v14, (uint64_t)buf);
        v17 = v28;
        v18 = *(_BYTE **)buf;
        sub_10043E5F8(v9, v23);
        v19 = buf;
        if (v17 < 0)
          v19 = v18;
        v20 = v24 >= 0 ? v23 : (void **)v23[0];
        *(_DWORD *)__p = 136446722;
        *(_QWORD *)&__p[4] = v19;
        v30 = 2082;
        v31 = v20;
        v32 = 1024;
        v33 = a3;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to Spatial Audio for device \"%{public}s\" to %d", __p, 0x1Cu);
        if (v24 < 0)
          operator delete(v23[0]);
        if ((v28 & 0x80000000) == 0)
          return sub_100422220(v13, v9, a3);
        v21 = *(void **)buf;
      }
      else
      {
        if (!v16)
          return sub_100422220(v13, v9, a3);
        sub_10043E5F8(v9, __p);
        v22 = v32 >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v22;
        v26 = 1024;
        v27 = a3;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Setting Spatial Audio for device \"%{public}s\" to %d", buf, 0x12u);
        if ((SHIBYTE(v32) & 0x80000000) == 0)
          return sub_100422220(v13, v9, a3);
        v21 = *(void **)__p;
      }
      operator delete(v21);
      return sub_100422220(v13, v9, a3);
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    return 7;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_1006F069C();
  return 212;
}

void sub_10042AFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10042AFC4(unint64_t a1, unint64_t a2, int *a3)
{
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  _BYTE *v15;
  _BYTE *v16;
  void **v17;
  int v18;
  void *v19;
  _BYTE *v20;
  int v21;
  void *__p[2];
  char v23;
  _BYTE v24[12];
  __int16 v25;
  int v26;
  char v27;
  _BYTE buf[12];
  __int16 v29;
  void **v30;
  __int16 v31;
  int v32;

  if (!a3)
    return 3;
  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v8 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v8)
    return 7;
  v9 = v8;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
  if (!sub_10044FE34(v9, 64))
    return 108;
  v10 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 792))(v10, 1))
    return 108;
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  v11 = sub_10006AC40((uint64_t)off_1009778D0, a1);
  if (!v11)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    return 7;
  }
  sub_1004220F4(v11, v9, a3);
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092EA60);
  v12 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  v13 = qword_1009997D8;
  result = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    if ((_DWORD)result)
    {
      sub_1000340DC(v12, (uint64_t)v24);
      v14 = v27;
      v15 = *(_BYTE **)v24;
      sub_10043E5F8(v9, __p);
      v16 = v24;
      if (v14 < 0)
        v16 = v15;
      if (v23 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      v18 = *a3;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v16;
      v29 = 2082;
      v30 = v17;
      v31 = 1024;
      v32 = v18;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" reading in Spatial Audio Allowed device \"%{public}s\" to %d", buf, 0x1Cu);
      if (v23 < 0)
        operator delete(__p[0]);
      if ((v27 & 0x80000000) == 0)
        return 0;
      v19 = *(void **)v24;
      goto LABEL_46;
    }
  }
  else if ((_DWORD)result)
  {
    sub_10043E5F8(v9, buf);
    if (v31 >= 0)
      v20 = buf;
    else
      v20 = *(_BYTE **)buf;
    v21 = *a3;
    *(_DWORD *)v24 = 136446466;
    *(_QWORD *)&v24[4] = v20;
    v25 = 1024;
    v26 = v21;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Spatial Audio Allowed for device \"%{public}s\" to %d", v24, 0x12u);
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      return 0;
    v19 = *(void **)buf;
LABEL_46:
    operator delete(v19);
    return 0;
  }
  return result;
}

void sub_10042B314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10042B338(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6;
  unint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  NSObject *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  _BOOL4 v29;
  int v30;
  _BYTE *v31;
  _BYTE *v32;
  void **v33;
  const char *v34;
  _BYTE *v35;
  const char *v36;
  void *v37;
  void *v38;
  void *v39[2];
  char v40;
  _BYTE buf[12];
  __int16 v42;
  int v43;
  char v44;
  _BYTE __p[12];
  __int16 v46;
  _BYTE v47[14];
  __int16 v48;
  const char *v49;

  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v13 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v13)
    return 7;
  if (a4 >= 4)
  {
    v14 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0864(a4, v14, v15, v16, v17, v18, v19, v20);
    return 3;
  }
  v21 = v13;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v22 = sub_100471484((uint64_t)off_1009778E0);
  v23 = qword_1009997D8;
  if ((v22 & 1) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v21, __p);
      v24 = v47[9] >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v24;
      v42 = 1024;
      v43 = a4;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "BTAccessoryManagerSpatialAudioConfig:  \"%{public}s\" Allowed %d", buf, 0x12u);
      if ((v47[9] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    if (!sub_10044FE34(v21, 64))
      return 108;
    v25 = sub_10003BE44();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 792))(v25, 1))
      return 108;
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_10092EA00);
    v26 = sub_10006AC40((uint64_t)off_1009778D0, a1);
    if (v26)
    {
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_10092EA60);
      v27 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
      v28 = qword_1009997D8;
      v29 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
      if (v27)
      {
        if (v29)
        {
          sub_1000340DC(v27, (uint64_t)buf);
          v30 = v44;
          v31 = *(_BYTE **)buf;
          sub_10043E5F8(v21, v39);
          v32 = buf;
          if (v30 < 0)
            v32 = v31;
          if (v40 >= 0)
            v33 = v39;
          else
            v33 = (void **)v39[0];
          *(_DWORD *)__p = 136446978;
          *(_QWORD *)&__p[4] = v32;
          v34 = "YES";
          v46 = 2082;
          if (a5 != -1)
            v34 = "NO";
          *(_QWORD *)v47 = v33;
          *(_WORD *)&v47[8] = 1024;
          *(_DWORD *)&v47[10] = a4;
          v48 = 2082;
          v49 = v34;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to Spatial Audio config for device \"%{public}s\" to %d Head Tracking %{public}s", __p, 0x26u);
          if (v40 < 0)
            operator delete(v39[0]);
LABEL_55:
          if (v44 < 0)
            operator delete(*(void **)buf);
        }
      }
      else if (v29)
      {
        sub_10043E5F8(v21, buf);
        if (v44 >= 0)
          v35 = buf;
        else
          v35 = *(_BYTE **)buf;
        v36 = "YES";
        *(_DWORD *)__p = 136446722;
        if (!a5)
          v36 = "NO";
        *(_QWORD *)&__p[4] = v35;
        v46 = 1024;
        *(_DWORD *)v47 = a4;
        *(_WORD *)&v47[4] = 2082;
        *(_QWORD *)&v47[6] = v36;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Setting Spatial Audio config for device \"%{public}s\" to %d Head Tracking %{public}s", __p, 0x1Cu);
        goto LABEL_55;
      }
      v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a3));
      if (objc_msgSend(v37, "compare:", CFSTR("global")))
        v38 = v37;
      else
        v38 = 0;
      v6 = sub_1004227D4(v26, v21, v38, a4, a5);

      return v6;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    return 7;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_1006F069C();
  return 212;
}

void sub_10042B7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10042B7D8(unint64_t a1, unint64_t a2, uint64_t a3, int *a4, int *a5)
{
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  void **v19;
  void **v20;
  void **v21;
  int v22;
  int v23;
  const char *v24;
  void **v25;
  int v26;
  const char *v27;
  void *__p[2];
  char v29;
  void *v30[2];
  char v31;
  uint8_t buf[4];
  void **v33;
  __int16 v34;
  _BYTE v35[14];
  __int16 v36;
  const char *v37;

  if (!a4)
    return 3;
  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v12 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v12)
    return 7;
  v13 = v12;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
  if (!sub_10044FE34(v13, 64))
    return 108;
  v14 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 792))(v14, 1))
    return 108;
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  v15 = sub_10006AC40((uint64_t)off_1009778D0, a1);
  if (!v15)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    return 7;
  }
  sub_1004224F0(v15, v13, a3, a4, a5);
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092EA60);
  v16 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  v17 = qword_1009997D8;
  result = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
  if (v16)
  {
    if (!(_DWORD)result)
      return result;
    sub_1000340DC(v16, (uint64_t)v30);
    v18 = v31;
    v19 = (void **)v30[0];
    sub_10043E5F8(v13, __p);
    v20 = v30;
    if (v18 < 0)
      v20 = v19;
    if (v29 >= 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    v22 = *a4;
    v23 = *a5;
    *(_DWORD *)buf = 136446978;
    if (v23)
      v24 = "YES";
    else
      v24 = "NO";
    v33 = v20;
    v34 = 2082;
    *(_QWORD *)v35 = v21;
    *(_WORD *)&v35[8] = 1024;
    *(_DWORD *)&v35[10] = v22;
    v36 = 2082;
    v37 = v24;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" reading in Spatial Audio config for device \"%{public}s\" to %dHead Tracking %{public}s", buf, 0x26u);
    if (v29 < 0)
      operator delete(__p[0]);
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    sub_10043E5F8(v13, v30);
    if (v31 >= 0)
      v25 = v30;
    else
      v25 = (void **)v30[0];
    v26 = *a4;
    if (*a5)
      v27 = "YES";
    else
      v27 = "NO";
    *(_DWORD *)buf = 136446722;
    v33 = v25;
    v34 = 1024;
    *(_DWORD *)v35 = v26;
    *(_WORD *)&v35[4] = 2082;
    *(_QWORD *)&v35[6] = v27;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Spatial Audio config for device \"%{public}s\" to %d %{public}s", buf, 0x1Cu);
  }
  if (v31 < 0)
    operator delete(v30[0]);
  return 0;
}

void sub_10042BB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10042BBA4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7;
  uint64_t v8;

  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v7 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v7)
    return 7;
  v8 = v7;
  if (!sub_100442118(v7, 32) || sub_10043F65C(v8, 0x80000u) != 4)
    return 108;
  if (sub_10044F658(v8) != (_DWORD)a3)
    sub_10044D524(v8, a3);
  return 0;
}

uint64_t sub_10042BC70(unint64_t a1, unint64_t a2, int *a3)
{
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;
  void **v15;
  int v16;
  const char *v17;
  void *v18;
  _BYTE *v19;
  const char *v20;
  void *__p[2];
  char v22;
  _BYTE v23[12];
  __int16 v24;
  const char *v25;
  char v26;
  _BYTE buf[12];
  __int16 v28;
  void **v29;
  __int16 v30;
  const char *v31;

  if (!a3)
    return 3;
  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v8 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v8)
    return 7;
  v9 = v8;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
  if (!sub_100442118(v9, 32) || sub_10043F65C(v9, 0x80000u) != 4)
    return 108;
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  if (!sub_10006AC40((uint64_t)off_1009778D0, a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    return 7;
  }
  *a3 = sub_10044F658(v9);
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092EA60);
  v10 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  v11 = qword_1009997D8;
  result = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    if ((_DWORD)result)
    {
      sub_1000340DC(v10, (uint64_t)v23);
      v12 = v26;
      v13 = *(_BYTE **)v23;
      sub_10043E5F8(v9, __p);
      v14 = v23;
      if (v12 < 0)
        v14 = v13;
      if (v22 >= 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      v16 = *a3;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v14;
      if (v16 == 1)
        v17 = "Auto";
      else
        v17 = "Manual";
      v28 = 2082;
      v29 = v15;
      v30 = 2080;
      v31 = v17;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" reading in smart routing mode for device \"%{public}s\" to %s", buf, 0x20u);
      if (v22 < 0)
        operator delete(__p[0]);
      if ((v26 & 0x80000000) == 0)
        return 0;
      v18 = *(void **)v23;
LABEL_51:
      operator delete(v18);
      return 0;
    }
  }
  else if ((_DWORD)result)
  {
    sub_10043E5F8(v9, buf);
    if (v30 >= 0)
      v19 = buf;
    else
      v19 = *(_BYTE **)buf;
    v20 = "Manual";
    if (*a3 == 1)
      v20 = "Auto";
    *(_DWORD *)v23 = 136446466;
    *(_QWORD *)&v23[4] = v19;
    v24 = 2080;
    v25 = v20;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "smart routing mode mode for device \"%{public}s\" to %s", v23, 0x16u);
    if ((SHIBYTE(v30) & 0x80000000) == 0)
      return 0;
    v18 = *(void **)buf;
    goto LABEL_51;
  }
  return result;
}

void sub_10042BFEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10042C010(unint64_t a1, unint64_t a2, int *a3)
{
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  _BYTE *v14;
  _BYTE *v15;
  void **v16;
  int v17;
  const char *v18;
  void *v19;
  _BYTE *v20;
  const char *v21;
  void *__p[2];
  char v23;
  _BYTE v24[12];
  __int16 v25;
  const char *v26;
  char v27;
  _BYTE buf[12];
  __int16 v29;
  void **v30;
  __int16 v31;
  const char *v32;

  if (!a3)
    return 3;
  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v8 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v8)
    return 7;
  v9 = v8;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
  if (!sub_100442118(v9, 32) || sub_10043F65C(v9, 0x80000u) != 4)
    return 108;
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  if (!sub_10006AC40((uint64_t)off_1009778D0, a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    return 7;
  }
  if (sub_10044D708(v9))
    v10 = 1;
  else
    v10 = 2;
  *a3 = v10;
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092EA60);
  v11 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  v12 = qword_1009997D8;
  result = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    if ((_DWORD)result)
    {
      sub_1000340DC(v11, (uint64_t)v24);
      v13 = v27;
      v14 = *(_BYTE **)v24;
      sub_10043E5F8(v9, __p);
      v15 = v24;
      if (v13 < 0)
        v15 = v14;
      if (v23 >= 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      v17 = *a3;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v15;
      if (v17 == 1)
        v18 = "Supported";
      else
        v18 = "NOT Supported";
      v29 = 2082;
      v30 = v16;
      v31 = 2080;
      v32 = v18;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" reading in smart routing support for device \"%{public}s\" to %s", buf, 0x20u);
      if (v23 < 0)
        operator delete(__p[0]);
      if ((v27 & 0x80000000) == 0)
        return 0;
      v19 = *(void **)v24;
LABEL_54:
      operator delete(v19);
      return 0;
    }
  }
  else if ((_DWORD)result)
  {
    sub_10043E5F8(v9, buf);
    if (v31 >= 0)
      v20 = buf;
    else
      v20 = *(_BYTE **)buf;
    v21 = "NOT Supported";
    if (*a3 == 1)
      v21 = "Supported";
    *(_DWORD *)v24 = 136446466;
    *(_QWORD *)&v24[4] = v20;
    v25 = 2080;
    v26 = v21;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "smart routing support for device \"%{public}s\" to %s", v24, 0x16u);
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      return 0;
    v19 = *(void **)buf;
    goto LABEL_54;
  }
  return result;
}

void sub_10042C398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10042C3BC(unint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  void **v15;
  void **v16;
  void **v17;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  uint8_t buf[4];
  void **v23;
  __int16 v24;
  void **v25;

  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  if (!sub_10006AC40((uint64_t)off_1009778D0, a1))
    return 7;
  result = 3;
  if (a2 - 4294901761u < 2 || !a2)
    return result;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v9 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v9)
    return 7;
  v10 = v9;
  if (sub_10043F65C(v9, 0x80000u) != 4)
    return 108;
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092EA60);
  v11 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  if (v11)
  {
    v12 = v11;
    v13 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(v12, (uint64_t)v20);
      v14 = v21;
      v15 = (void **)v20[0];
      sub_10043E5F8(v10, __p);
      v16 = v20;
      if (v14 < 0)
        v16 = v15;
      if (v19 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v23 = v16;
      v24 = 2082;
      v25 = v17;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to set device state on peer source for device \"%{public}s\"", buf, 0x16u);
      if (v19 < 0)
        operator delete(__p[0]);
      if (v21 < 0)
        operator delete(v20[0]);
    }
  }
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092EAC0);
  return sub_10027F088((uint64_t)off_100977A80, v10, a3, a4, 0);
}

void sub_10042C624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10042C648(uint64_t a1, unint64_t a2, int *a3)
{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;

  if (!a3)
    return 3;
  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v7 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v7)
    return 7;
  v8 = v7;
  if (sub_10043F65C(v7, 0x80000u) != 4)
    return 108;
  if (!sub_10044FE34(v8, 64))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F08C8(v8);
    return 108;
  }
  v9 = sub_10003BE44();
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 792))(v9, 1);
  result = 0;
  if (v10)
    v11 = 1;
  else
    v11 = 2;
  *a3 = v11;
  return result;
}

uint64_t sub_10042C758(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a3)
    return 3;
  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v7 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v7)
    return 7;
  v8 = v7;
  if (sub_10043F65C(v7, 0x80000u) != 4)
    return 108;
  if (sub_100442118(v8, 41))
  {
    v9 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 792))(v9, 11))
    {
      result = 0;
      *a3 = 2;
      return result;
    }
  }
  if (!sub_10044FDF0(v8)
    || (v10 = sub_10003BE44(), !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 792))(v10, 8)))
  {
    *a3 = 0;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F09B8(v8);
    return 108;
  }
  *a3 = 1;
  result = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    sub_1006F0940(v8);
    return 0;
  }
  return result;
}

uint64_t sub_10042C8C0(uint64_t a1, unint64_t a2, _BYTE *a3)
{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  _DWORD v11[2];

  if (!a3)
    return 3;
  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v7 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v7)
    return 7;
  v8 = v7;
  if (sub_10043F65C(v7, 0x80000u) != 4)
    return 108;
  v9 = sub_10044FB04(v8);
  v10 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    v11[0] = 67109120;
    v11[1] = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Prox Card Status: Get Call Management: 0x%x", (uint8_t *)v11, 8u);
  }
  if ((v9 & 0xF) == 1)
  {
    result = 0;
    *a3 = 1;
    a3[3] = v9 >> 4;
    a3[4] = BYTE1(v9) & 0xF;
    a3[5] = (unsigned __int16)v9 >> 12;
    a3[6] = BYTE2(v9) & 0xF;
  }
  else
  {
    result = 0;
    if ((v9 & 0xF) == 0)
    {
      *a3 = 0;
      a3[1] = v9 >> 4;
      a3[2] = BYTE1(v9) & 0xF;
      a3[3] = v9 >> 4;
      a3[4] = BYTE1(v9) & 0xF;
    }
  }
  return result;
}

uint64_t sub_10042CA54(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  char v9;
  NSObject *v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v7 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v7)
    return 7;
  v8 = v7;
  *a3 = sub_1004414B4(v7);
  if (sub_10043F65C(v8, 0x80000u) != 4)
    return 108;
  if (*a3 == 0xFFFFFFFFLL)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0A30();
    return 105;
  }
  else
  {
    v9 = sub_10044F214(v8);
    v10 = qword_1009997D8;
    if ((v9 & 1) == 0 && os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    {
      v13 = *a3;
      v14 = 134217984;
      v15 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Prox Card Status: Capabilities not received yet, returning local value: %llx", (uint8_t *)&v14, 0xCu);
      v10 = qword_1009997D8;
    }
    v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v11)
    {
      v12 = *a3;
      v14 = 134217984;
      v15 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Prox Card Status: Get Features: 0x%llx", (uint8_t *)&v14, 0xCu);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10042CC34(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7;
  uint64_t v8;

  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v7 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v7)
    return 7;
  v8 = v7;
  if (sub_10043F65C(v7, 0x80000u) != 4)
    return 108;
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092EAC0);
  return sub_100286A28((uint64_t)off_100977A80, v8, a3);
}

uint64_t sub_10042CD10(uint64_t a1, unint64_t a2, int *a3)
{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  *a3 = 0;
  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v7 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v7)
    return 7;
  v8 = v7;
  if (sub_10043F65C(v7, 0x80000u) == 4)
  {
    if (sub_10044FE34(v8, 64))
    {
      v9 = sub_10003BE44();
      v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 792))(v9, 3);
      result = 0;
      *a3 = v10 << 31 >> 31;
      return result;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0A5C(v8);
  }
  return 108;
}

uint64_t sub_10042CE10(uint64_t a1, unint64_t a2, int *a3)
{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  _BOOL4 v13;
  _DWORD v14[2];

  if (!a3)
    return 3;
  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v7 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v7)
    return 7;
  v8 = v7;
  if (sub_10043F65C(v7, 0x80000u) != 4)
    return 108;
  if (!sub_10044FE34(v8, 64))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0AD4(v8);
    return 108;
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10092EAA0);
  if (sub_10049D5C4((uint64_t)off_100977A50))
  {
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_10092EAA0);
    v9 = sub_10049D5C4((uint64_t)off_100977A50) == 1;
  }
  else
  {
    v10 = sub_10003BE44();
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 792))(v10, 3);
  }
  v11 = v9 << 31 >> 31;
  *a3 = v11;
  v12 = qword_1009997D8;
  v13 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v13)
  {
    v14[0] = 67109120;
    v14[1] = v11;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Get Spatial Spatial Profile BTAccessoryManagerGetDeviceSoundProfileAllowed:  %d", (uint8_t *)v14, 8u);
    return 0;
  }
  return result;
}

uint64_t sub_10042D010(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  BOOL v10;
  _DWORD v11[2];

  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v7 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v7)
    return 7;
  v8 = v7;
  if (sub_10043F65C(v7, 0x80000u) != 4)
    return 108;
  if (!sub_10044FE34(v8, 64))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0B4C(v8);
    return 108;
  }
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10092EA80);
  (*(void (**)(void))(*(_QWORD *)off_100977A90 + 328))();
  v9 = qword_1009997D8;
  v10 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v10)
  {
    v11[0] = 67109120;
    v11[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Set Spatial Spatial Profile BTAccessoryManagerGetDeviceSoundProfileAllowed:  %d", (uint8_t *)v11, 8u);
    return 0;
  }
  return result;
}

uint64_t sub_10042D1BC(uint64_t a1, unint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[7];

  if (a2 - 4294901761u < 2 || a2 == 0)
    return 3;
  v14[5] = v3;
  v14[6] = v4;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v9 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v9)
    return 7;
  v10 = v9;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    v13 = 0;
    v14[0] = 0;
    sub_100444BF0(v10, (_DWORD *)v14 + 1, v14, (_DWORD *)&v13 + 1, &v13);
    v11 = 0;
    if ((HIDWORD(v13) - 8194) <= 0x22 && ((1 << (BYTE4(v13) - 2)) & 0x47A877F9BLL) != 0)
    {
      if ((HIDWORD(v13) - 8194) > 0xE)
        v11 = 1;
      else
        v11 = dword_1007411BC[HIDWORD(v13) - 8194];
    }
    v12 = v11 | (HIDWORD(v13) == 8214);
    if (v12)
    {
      if ((sub_100442118(v10, 15) & 1) != 0)
        v12 = -1;
      else
        v12 = (int)(sub_100442118(v10, 1) << 31) >> 31;
    }
    result = 0;
    *a3 = v12;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
  return result;
}

uint64_t sub_10042D368(unint64_t a1, unint64_t *a2, unsigned __int16 *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  void **v13;
  void **v14;
  void **v15;
  int v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  uint8_t buf[4];
  void **v22;
  __int16 v23;
  void **v24;
  __int16 v25;
  int v26;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    v6 = sub_10003BE44();
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 792))(v6, 2) & 1) != 0)
    {
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_10092EA60);
      result = sub_1000229D8((_QWORD *)qword_100977B48, a1);
      if (result)
      {
        v8 = result;
        if (qword_100977A98 != -1)
          dispatch_once(&qword_100977A98, &stru_10092EA80);
        v9 = sub_10051C8F4((uint64_t)off_100977A90, (uint64_t)a3);
        if (v9)
        {
          v10 = v9;
          if (qword_1009778E8 != -1)
            dispatch_once(&qword_1009778E8, &stru_10092EA20);
          *a2 = sub_10046F750((uint64_t)off_1009778E0, a1, v10);
          v11 = qword_1009997D8;
          result = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR);
          if ((_DWORD)result)
          {
            sub_1000340DC(v8, (uint64_t)v19);
            v12 = v20;
            v13 = (void **)v19[0];
            sub_10043E5F8(v10, __p);
            v14 = v19;
            if (v12 < 0)
              v14 = v13;
            if (v18 >= 0)
              v15 = __p;
            else
              v15 = (void **)__p[0];
            v16 = *a3;
            *(_DWORD *)buf = 136446722;
            v22 = v14;
            v23 = 2082;
            v24 = v15;
            v25 = 1024;
            v26 = v16;
            _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "BTAccessoryManagerGetAdaptiveLatencyJitterBufferLevel Session \"%{public}s\" for device \"%{public}s\" is returning jitterBufferLevel %u", buf, 0x1Cu);
            if (v18 < 0)
              operator delete(__p[0]);
            if (v20 < 0)
              operator delete(v19[0]);
            return 0;
          }
        }
        else
        {
          *a2 = 4294901761;
          result = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR);
          if ((_DWORD)result)
          {
            sub_1006F0BC4();
            return 0;
          }
        }
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006F0BF0();
      return 2;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
  return result;
}

void sub_10042D638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10042D65C(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  _BOOL4 v9;
  uint64_t result;
  _DWORD v11[2];

  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0C1C();
    return 7;
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v5 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0C48();
    return 7;
  }
  v6 = v5;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10092EA80);
  v7 = sub_10051C7CC((uint64_t)off_100977A90, v6);
  *a3 = v7;
  v8 = qword_1009997D8;
  v9 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v9)
  {
    v11[0] = 67109120;
    v11[1] = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "BTAccessoryManagerGetSensorStreamingFrequency - %u", (uint8_t *)v11, 8u);
    return 0;
  }
  return result;
}

uint64_t sub_10042D7E8(uint64_t a1, unint64_t a2, _QWORD *a3, _WORD *a4)
{
  unint64_t v7;
  _BYTE *v8;
  void *v9;
  _BYTE *v10;
  int64_t v12;
  NSObject *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint8_t buf[4];
  int64_t v18;

  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0C74();
    return 7;
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v7 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0CA0();
    return 7;
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  sub_1004413A8(v7, &v14);
  v8 = v14;
  if (v14 == v15)
  {
    v10 = v14;
  }
  else
  {
    v9 = malloc_type_malloc(v15 - v14, 0x100004077774924uLL);
    *a3 = v9;
    memcpy(v9, v14, v15 - v14);
    v8 = v14;
    v10 = v15;
  }
  v12 = v10 - v8;
  *a4 = (_WORD)v10 - (_WORD)v8;
  v13 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v18 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BTAccessoryManagerGetGyroInformation - Retrieved gyro information of size %zu", buf, 0xCu);
    v8 = v14;
  }
  if (v8)
  {
    v15 = v8;
    operator delete(v8);
  }
  return 0;
}

void sub_10042D99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10042D9C0(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  NSObject *v8;
  _BOOL4 v9;
  uint64_t result;
  _DWORD v11[2];

  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0CCC();
    return 7;
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v5 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0CF8();
    return 7;
  }
  v6 = v5;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10092EA80);
  v7 = sub_100525448((uint64_t)off_100977A90, v6);
  *a3 = v7 << 31 >> 31;
  v8 = qword_1009997D8;
  v9 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v9)
  {
    v11[0] = 67109120;
    v11[1] = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "BTAccessoryManagerGetWirelessSharingSpatial - %d", (uint8_t *)v11, 8u);
    return 0;
  }
  return result;
}

uint64_t sub_10042DB50(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4, unint64_t a5)
{
  NSMutableArray *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *i;
  __int128 v17;
  NSObject *v18;
  void **v19;
  void *v20;
  void **v21;
  void *v22;
  id v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v30;
  void *__p[2];
  uint64_t v32;
  __int128 *v33;
  __int128 *v34;
  uint64_t v35;
  uint8_t buf[4];
  void **v37;

  v8 = objc_opt_new(NSMutableArray);
  v9 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEBUG))
    sub_1006F0D8C(a2, v9, v10, v11, v12, v13, v14, v15);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092EAC0);
  sub_10027FB94(a2, (uint64_t)&v33);
  for (i = v33; i != v34; i = (__int128 *)((char *)i + 24))
  {
    __p[0] = 0;
    __p[1] = 0;
    v32 = 0;
    if (*((char *)i + 23) < 0)
    {
      sub_10003430C(__p, *(void **)i, *((_QWORD *)i + 1));
    }
    else
    {
      v17 = *i;
      v32 = *((_QWORD *)i + 2);
      *(_OWORD *)__p = v17;
    }
    v18 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEBUG))
    {
      if (v32 >= 0)
        v21 = __p;
      else
        v21 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v37 = v21;
      _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "BTAccessoryManagerGetCaseSerialNumbersForAppleProductId retrieved serial number %{public}s", buf, 0xCu);
    }
    if (v32 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v19));
    if ((unint64_t)objc_msgSend(v20, "length") >= 2)
      -[NSMutableArray addObject:](v8, "addObject:", v20);

    if (SHIBYTE(v32) < 0)
      operator delete(__p[0]);
  }
  v30 = 0;
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v8, 0, &v30));
  v23 = v30;
  if (v23)
  {
    v24 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0D24((uint64_t)v23, v24, v25);
    v26 = 1;
  }
  else if ((unint64_t)objc_msgSend(v22, "length") <= a5)
  {
    v27 = objc_retainAutorelease(v22);
    memcpy(a3, objc_msgSend(v27, "bytes"), (size_t)objc_msgSend(v27, "length"));
    v26 = 0;
    *a4 = objc_msgSend(v27, "length");
  }
  else
  {
    v26 = 5;
  }

  __p[0] = &v33;
  sub_100091BF8((void ***)__p);

  return v26;
}

void sub_10042DE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;
  void *v22;

  __p = &a21;
  sub_100091BF8((void ***)&__p);

  _Unwind_Resume(a1);
}

uint64_t sub_10042DE90(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, _QWORD *a5, unint64_t a6)
{
  NSMutableArray *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *i;
  __int128 v19;
  NSObject *v20;
  void **v21;
  void *v22;
  void **v23;
  int v24;
  void *v25;
  id v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v35;
  void *__p[2];
  uint64_t v37;
  __int128 *v38;
  __int128 *v39;
  uint64_t v40;
  uint8_t buf[4];
  void **v42;
  __int16 v43;
  int v44;

  v8 = objc_opt_new(NSMutableArray);
  v9 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEBUG))
    sub_1006F0E5C(a3, v9, v10, v11, v12, v13, v14, v15);
  if ((_DWORD)a3)
  {
    v16 = 0;
    v17 = a3;
    do
    {
      v38 = 0;
      v39 = 0;
      v40 = 0;
      if (qword_100977A88 != -1)
        dispatch_once(&qword_100977A88, &stru_10092EAC0);
      sub_10027FB94(*(unsigned __int16 *)(a2 + 4 * v16), (uint64_t)&v38);
      for (i = v38; i != v39; i = (__int128 *)((char *)i + 24))
      {
        __p[0] = 0;
        __p[1] = 0;
        v37 = 0;
        if (*((char *)i + 23) < 0)
        {
          sub_10003430C(__p, *(void **)i, *((_QWORD *)i + 1));
        }
        else
        {
          v19 = *i;
          v37 = *((_QWORD *)i + 2);
          *(_OWORD *)__p = v19;
        }
        v20 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEBUG))
        {
          if (v37 >= 0)
            v23 = __p;
          else
            v23 = (void **)__p[0];
          v24 = *(_DWORD *)(a2 + 4 * v16);
          *(_DWORD *)buf = 136446467;
          v42 = v23;
          v43 = 1025;
          v44 = v24;
          _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "BTAccessoryManagerGetCaseSerialNumbersForAppleProductIds retrieved serial number %{public}s for productID %{private}u", buf, 0x12u);
        }
        if (v37 >= 0)
          v21 = __p;
        else
          v21 = (void **)__p[0];
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v21));
        if ((unint64_t)objc_msgSend(v22, "length") >= 2)
          -[NSMutableArray addObject:](v8, "addObject:", v22);

        if (SHIBYTE(v37) < 0)
          operator delete(__p[0]);
      }
      __p[0] = &v38;
      sub_100091BF8((void ***)__p);
      ++v16;
    }
    while (v16 != v17);
  }
  v35 = 0;
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v8, 0, &v35));
  v26 = v35;
  if (v26)
  {
    v27 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0DF4((uint64_t)v26, v27, v28);
    v29 = 1;
  }
  else if ((unint64_t)objc_msgSend(v25, "length") <= a6)
  {
    v30 = objc_retainAutorelease(v25);
    memcpy(a4, objc_msgSend(v30, "bytes"), (size_t)objc_msgSend(v30, "length"));
    v29 = 0;
    *a5 = objc_msgSend(v30, "length");
  }
  else
  {
    v29 = 5;
  }

  return v29;
}

void sub_10042E194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

uint64_t sub_10042E1F8(unint64_t a1, unint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  int v13;
  const char *v14;

  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0EC4();
    return 7;
  }
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  v6 = sub_10006AC40((uint64_t)off_1009778D0, a1);
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0488();
    return 7;
  }
  v7 = v6;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v8 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v8)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0EF0();
    return 7;
  }
  v9 = sub_100422B6C(v7, v8, a3);
  v10 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_10092EAC0);
    v11 = sub_100283A98((uint64_t)off_100977A80, *(unsigned __int8 *)a3);
    v13 = 136315138;
    v14 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "BTAccessoryManagerGetPrimaryBudSide - Primary Bud Side: %s", (uint8_t *)&v13, 0xCu);
  }
  return v9;
}

uint64_t sub_10042E3F8(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  const char *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  _BOOL4 v39;
  int v40;
  int v41;
  _BOOL4 v42;
  __int16 v43;
  int v44;

  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0F1C();
    return 7;
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v7 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0F48();
    return 7;
  }
  v8 = v7;
  switch((int)a3)
  {
    case 0:
      v9 = sub_10044FB48(v7);
      goto LABEL_30;
    case 1:
      v11 = sub_10044FE34(v7, 144);
      if (v11)
      {
        v12 = sub_1000438A4();
        v11 = sub_1003312CC(v12, 0);
      }
      *a4 = v11;
      v13 = qword_1009997D8;
      if (!os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_37;
      v14 = sub_10044FE34(v8, 144);
      v15 = sub_1000438A4();
      v41 = 67109376;
      v42 = v14;
      v43 = 1024;
      v44 = sub_1003312CC(v15, 0);
      v16 = "Adaptive Volume: BT_ACCESSORY_HEADPHONE_FEATURE_ADAPTIVE_VOLUME_SUPPORT: accessorySupport %d sourceSupport %d";
      goto LABEL_25;
    case 2:
      v17 = sub_10044FE34(v7, 176);
      if (v17)
      {
        v18 = sub_1000438A4();
        v17 = sub_1003312CC(v18, 3u);
      }
      *a4 = v17;
      v13 = qword_1009997D8;
      if (!os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_37;
      v19 = sub_10044FE34(v8, 176);
      v20 = sub_1000438A4();
      v41 = 67109376;
      v42 = v19;
      v43 = 1024;
      v44 = sub_1003312CC(v20, 3u);
      v16 = "AutoANC: BT_ACCESSORY_HEADPHONE_FEATURE_AUTO_ANC_SUPPORT: accessorySupport %d sourceSupport %d";
      goto LABEL_25;
    case 3:
      v9 = sub_10044FBD0(v7);
      goto LABEL_30;
    case 4:
      v21 = sub_10044FE34(v7, 160);
      if (v21)
      {
        v22 = sub_1000438A4();
        v21 = sub_1003312CC(v22, 2u);
      }
      *a4 = v21;
      v13 = qword_1009997D8;
      if (!os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_37;
      v23 = sub_10044FE34(v8, 160);
      v24 = sub_1000438A4();
      v41 = 67109376;
      v42 = v23;
      v43 = 1024;
      v44 = sub_1003312CC(v24, 2u);
      v16 = "Conversation Detect: BT_ACCESSORY_HEADPHONE_FEATURE_CONVERSATION_DETECT_SUPPORT: accessorySupport %d sourceSupport %d";
LABEL_25:
      v25 = v13;
      goto LABEL_36;
    case 5:
      *a4 = *(unsigned __int8 *)(v7 + 981);
      goto LABEL_37;
    case 7:
      v9 = sub_10044FC14(v7);
LABEL_30:
      *a4 = v9;
      goto LABEL_37;
    case 8:
      v33 = sub_10044FF54(v7, 6u);
      if (v33 == 3)
      {
        v34 = sub_1000438A4();
        v35 = sub_1003312CC(v34, 4u);
      }
      else
      {
        v35 = 0;
      }
      *a4 = v35;
      v36 = qword_1009997D8;
      if (!os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_37;
      v37 = sub_1000438A4();
      v41 = 67109376;
      v42 = v33 == 3;
      v43 = 1024;
      v44 = sub_1003312CC(v37, 4u);
      v16 = "SSL: BT_ACCESSORY_HEADPHONE_FEATURE_SSL_SUPPORT: accessorySupport %d sourceSupport %d";
      v25 = v36;
LABEL_36:
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v41, 0xEu);
LABEL_37:
      v38 = qword_1009997D8;
      v39 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v39)
      {
        v40 = *a4;
        v41 = 67109376;
        v42 = a3;
        v43 = 1024;
        v44 = v40;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "BTAccessoryManagerGetHeadphoneFeatureValue - Type: %d, Value: %d", (uint8_t *)&v41, 0xEu);
        result = 0;
      }
      break;
    default:
      v26 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006F0F74(a3, v26, v27, v28, v29, v30, v31, v32);
      goto LABEL_37;
  }
  return result;
}

uint64_t sub_10042E828(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  unsigned __int8 *v7;
  uint64_t result;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  _BOOL4 v17;
  _DWORD v18[2];

  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0FD8();
    return 7;
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EA20);
  v7 = (unsigned __int8 *)sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F1004();
    return 7;
  }
  if ((_DWORD)a3 == 5)
  {
    sub_10044ED70(v7, a4 != 0);
  }
  else
  {
    v9 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F1030(a3, v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = qword_1009997D8;
  v17 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v17)
  {
    v18[0] = 67109120;
    v18[1] = a4;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "BTAccessoryManagerSetHeadphoneFeatureValue - %d", (uint8_t *)v18, 8u);
    return 0;
  }
  return result;
}

void sub_10042E9B8(id a1)
{
  operator new();
}

void sub_10042E9F8()
{
  operator delete();
}

void sub_10042EA1C(id a1)
{
  operator new();
}

void sub_10042EA5C()
{
  operator delete();
}

void sub_10042EA80(id a1)
{
  operator new();
}

void sub_10042EAC0()
{
  operator delete();
}

void sub_10042EAE4(id a1)
{
  operator new();
}

void sub_10042EB24()
{
  operator delete();
}

void sub_10042EB48(id a1)
{
  operator new();
}

void sub_10042EB88()
{
  operator delete();
}

void sub_10042EBAC(id a1)
{
  operator new();
}

void sub_10042EBEC()
{
  operator delete();
}

void sub_10042EC10(id a1)
{
  operator new();
}

void sub_10042EC50()
{
  operator delete();
}

void sub_10042EC74(id a1)
{
  operator new();
}

void sub_10042ECB4()
{
  operator delete();
}

void sub_10042ECD8(uint64_t a1@<X1>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(float *)a1 = a3;
  *(_QWORD *)(a1 + 4) = 1752392040;
  *(_WORD *)(a1 + 12) = 2081;
  *(_QWORD *)(a1 + 14) = a2;
}

void sub_10042ECF8(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  *(_QWORD *)(v3 - 24) = a2;
  sub_10043E5F8(a1, (uint64_t *)va);
}

void sub_10042ED08(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_10042ED18(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_100278350(a1, 20);
  sub_100321888(v1 + 256, 0, 1, 1007);
}

void sub_10042ED6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100278464(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10042ED84(uint64_t a1)
{
  sub_1003219A8(a1 + 256);
  return sub_100278464(a1);
}

uint64_t sub_10042EDAC(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 256;
  sub_1003219A8(a1);
  return sub_100278464(v1);
}

void sub_10042EDD0(uint64_t a1)
{
  sub_1003219A8(a1 + 256);
  sub_100278464(a1);
  operator delete();
}

void sub_10042EE0C(uint64_t a1)
{
  sub_10042EDD0(a1 - 256);
}

uint64_t sub_10042EE14(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char v8;

  v2 = sub_10003BE44();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 344))(v2);
  if ((_DWORD)result)
  {
    v8 = 0;
    sub_100043758(&v8);
    v5 = 0;
    v6 = 0;
    v7 = 0;
    if (sub_10023E274((uint64_t)sub_10042EF6C, (uint64_t)off_10092EBB8, 0x3EFu, 0x3B01u, (_BYTE *)(a1 + 500), (uint64_t)&unk_1007411F8))
    {
      if (os_log_type_enabled((os_log_t)qword_1009999C0, OS_LOG_TYPE_ERROR))
        sub_1006F10F4();
    }
    else
    {
      v4 = &unk_10092EBE0;
      LOWORD(v5) = 3;
      v6 = &unk_10092EBA0;
      LOWORD(v7) = 1;
      byte_100992B88 = 1;
      word_100992B8A = 1;
      dword_100992B90 = *(unsigned __int8 *)(a1 + 500);
      if (!sub_1002465CC((uint64_t)&v4, (int *)(a1 + 496)))
      {
        sub_100043728(&v8);
        return 0;
      }
      if (os_log_type_enabled((os_log_t)qword_1009999C0, OS_LOG_TYPE_ERROR))
        sub_1006F1094();
    }
    sub_100043728(&v8);
    return 1;
  }
  return result;
}

void sub_10042EF58(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100043728((_BYTE *)(v1 - 17));
  _Unwind_Resume(a1);
}

void sub_10042EF6C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (qword_10097B190 != -1)
    dispatch_once(&qword_10097B190, &stru_10092EC50);
  sub_10042F554(off_10097B188, a1, a4);
}

uint64_t sub_10042EFC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v2 = sub_10003BE44();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 344))(v2);
  if ((_DWORD)result)
  {
    v12 = 0;
    sub_100043758(&v12);
    sub_1002467B8(*(_DWORD *)(a1 + 496));
    if (sub_10023E540(*(unsigned __int8 *)(a1 + 500)) == 101)
    {
      v4 = qword_1009999C0;
      if (os_log_type_enabled((os_log_t)qword_1009999C0, OS_LOG_TYPE_ERROR))
        sub_1006F1154(v4, v5, v6, v7, v8, v9, v10, v11);
      sub_100043728(&v12);
      return 1;
    }
    else
    {
      sub_100043728(&v12);
      return 0;
    }
  }
  return result;
}

void sub_10042F064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10042F07C(uint64_t a1)
{
  sub_10032251C(a1 + 256);
  return 0;
}

uint64_t sub_10042F098(uint64_t a1, unint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void **v14;
  void *__p[2];
  char v17;
  void *v18;
  _OWORD *v19;
  uint64_t v20;
  __int128 v21;
  uint8_t buf[4];
  void **v23;
  __int16 v24;
  int v25;

  v21 = xmmword_100741270;
  if (a2)
  {
    if (sub_100442444(a2, &v21, 4u))
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      if (!sub_1004442A0(a2, (uint64_t)&v21, 4u, &v18))
        goto LABEL_49;
      v5 = v18;
      v4 = v19;
      if (v18 == v19)
        goto LABEL_49;
      v6 = v18;
      while (1)
      {
        if (*(_BYTE *)v6 == 6 && *((_WORD *)v6 + 1) == 2)
        {
          v8 = v6[1];
          v9 = *(_BYTE *)v8 == 3 && *(_DWORD *)(v8 + 8) == 3;
          if (v9 && *(_BYTE *)(v8 + 16) == 1)
            break;
        }
        v6 += 2;
        if (v6 == (_QWORD *)v19)
        {
          v10 = -1;
          goto LABEL_27;
        }
      }
      v10 = *(_DWORD *)(v8 + 24);
LABEL_27:
      while (v5 != v4)
      {
        *(_OWORD *)__p = *v5;
        sub_1002C3FB4(__p);
        ++v5;
        v4 = v19;
      }
      if (v10 == -1)
      {
LABEL_49:
        if (os_log_type_enabled((os_log_t)qword_1009999C0, OS_LOG_TYPE_ERROR))
          sub_1006F11EC();
        v11 = 305;
      }
      else
      {
        v13 = qword_1009999C0;
        if (os_log_type_enabled((os_log_t)qword_1009999C0, OS_LOG_TYPE_INFO))
        {
          sub_10043E5F8(a2, __p);
          v14 = v17 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v23 = v14;
          v24 = 1024;
          v25 = v10;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Initiating outgoing Braille connection request to device %{public}s on rfcomm channel %d", buf, 0x12u);
          if (v17 < 0)
            operator delete(__p[0]);
        }
        buf[0] = 0;
        sub_100043758(buf);
        LOWORD(__p[0]) = 0;
        if (sub_10023E88C((uint64_t)sub_10042F3C4, off_10092EC28, a2 + 128, v10, 0x3EFu, 0x3B01u, __p, (uint64_t)&unk_1007411F8))
        {
          if (os_log_type_enabled((os_log_t)qword_1009999C0, OS_LOG_TYPE_ERROR))
            sub_1006F1218();
          v11 = 305;
        }
        else
        {
          sub_1004820E0(a1, a2, (__int16)__p[0]);
          v11 = 0;
        }
        sub_100043728(buf);
      }
      if (v18)
      {
        v19 = v18;
        operator delete(v18);
      }
    }
    else
    {
      v12 = qword_1009999C0;
      if (os_log_type_enabled((os_log_t)qword_1009999C0, OS_LOG_TYPE_ERROR))
        sub_1006F1278(a2, v12);
      return 305;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009999C0, OS_LOG_TYPE_ERROR))
      sub_1006F11C0();
    return 1;
  }
  return v11;
}

void sub_10042F384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10042F3C4(unsigned int a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  __int16 v6;
  int v7;
  __int16 v8;

  v8 = 0;
  v7 = 0;
  if (sub_10023F000(a1, (uint64_t)&v7))
  {
    if (os_log_type_enabled((os_log_t)qword_1009999C0, OS_LOG_TYPE_ERROR))
      sub_1006F1300();
  }
  else
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092ECC0);
    v5 = v7;
    v6 = v8;
    v4 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v5, 1);
    if (qword_10097B190 != -1)
      dispatch_once(&qword_10097B190, &stru_10092EC50);
    sub_10042F768((uint64_t)off_10097B188, v4, 0, a3);
  }
}

uint64_t sub_10042F4BC(_QWORD *a1, unint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  char v5;

  v2 = sub_1004821D4(a1, a2);
  v5 = 0;
  sub_100043758(&v5);
  v3 = sub_10023EEBC(v2, 1818);
  if ((_DWORD)v3)
  {
    if (os_log_type_enabled((os_log_t)qword_1009999C0, OS_LOG_TYPE_ERROR))
      sub_1006F1360();
    v3 = 1;
  }
  sub_100043728(&v5);
  return v3;
}

void sub_10042F540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_10042F554(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  NSObject *v7;
  void **v8;
  int v9;
  int v10;
  char v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  void **v18;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092ECC0);
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  v6 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v7 = qword_1009999C0;
  if (os_log_type_enabled((os_log_t)qword_1009999C0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v6, __p);
    v8 = v16 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received incoming connection attempt from device %{public}s", buf, 0xCu);
    if (v16 < 0)
      operator delete(__p[0]);
  }
  v9 = sub_100481EC8((uint64_t)a1, v6);
  if ((v9 & 1) != 0)
  {
    v10 = sub_10023EB7C((uint64_t)sub_10042F3C4, a3, v9);
    v11 = v9 ^ 1;
    if (v10)
      v11 = 1;
    if ((v11 & 1) == 0)
    {
      sub_1004820E0((uint64_t)a1, v6, a3);
      sub_1004816DC(a1, v6);
    }
  }
  else
  {
    v12 = qword_1009999C0;
    if (os_log_type_enabled((os_log_t)qword_1009999C0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Denying connection attempt", (uint8_t *)__p, 2u);
    }
    v10 = sub_10023EB7C((uint64_t)sub_10042F3C4, a3, v9);
  }
  v13 = v10;
  if (v10)
  {
    v14 = qword_1009999C0;
    if (os_log_type_enabled((os_log_t)qword_1009999C0, OS_LOG_TYPE_ERROR))
      sub_1006F13C0(v9, v13, v14);
  }
}

void sub_10042F768(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD)a4)
  {
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_10092ECE0);
    v7 = sub_1004A35C0((uint64_t)off_100977A50, a4, 20000);
    v8 = a1;
    v9 = a2;
LABEL_7:
    sub_10048183C(v8, v9, v7);
  }
  if ((sub_100321B00(a1 + 256, a2) & 1) != 0)
  {
    v8 = a1;
    v9 = a2;
    v7 = 0;
    goto LABEL_7;
  }
  v10 = qword_1009999C0;
  if (os_log_type_enabled((os_log_t)qword_1009999C0, OS_LOG_TYPE_ERROR))
    sub_1006F145C(a2, v10);
}

void sub_10042F83C(_QWORD *a1, int a2)
{
  uint64_t v3;

  v3 = sub_1004822D0(a1, a2);
  sub_10048257C((uint64_t)a1, v3, 0);
  sub_1003222D0((uint64_t)(a1 + 32), v3);
}

void sub_10042F888(_QWORD *a1, int a2, uint64_t a3, int a4)
{
  unint64_t v7;

  v7 = sub_1004822D0(a1, a2);
  if (v7)
  {
    sub_100322608((uint64_t)(a1 + 32), v7, a3, a4, 0);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009999C0, OS_LOG_TYPE_ERROR))
  {
    sub_1006F14E0();
  }
}

void sub_10042F908(_QWORD *a1, int a2)
{
  unint64_t v3;

  v3 = sub_1004822D0(a1, a2);
  if (v3)
  {
    sub_10032280C((uint64_t)(a1 + 32), v3);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009999C0, OS_LOG_TYPE_ERROR))
  {
    sub_1006F150C();
  }
}

BOOL sub_10042F968(_QWORD *a1, unint64_t a2, char *a3, unsigned __int16 a4)
{
  unsigned int v6;
  int v7;
  char v9;

  v6 = sub_1004821D4(a1, a2);
  v9 = 0;
  sub_100043758(&v9);
  v7 = sub_10023E880((uint64_t)sub_10042FA28, v6, a3, a4);
  sub_10004339C(&v9);
  if (v7 && os_log_type_enabled((os_log_t)qword_1009999C0, OS_LOG_TYPE_ERROR))
    sub_1006F1538();
  sub_100043728(&v9);
  return v7 == 0;
}

void sub_10042FA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_10042FA28(int a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 && os_log_type_enabled((os_log_t)qword_1009999C0, OS_LOG_TYPE_ERROR))
    sub_1006F1598();
  if (qword_10097B190 != -1)
    dispatch_once(&qword_10097B190, &stru_10092EC50);
  sub_10042F908(off_10097B188, a1);
}

BOOL sub_10042FAB8(uint64_t a1, unint64_t a2, char *a3, unsigned __int16 a4)
{
  return sub_10042F968((_QWORD *)(a1 - 256), a2, a3, a4);
}

uint64_t sub_10042FAC0()
{
  return 2;
}

void sub_10042FAC8(int a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  v4 = qword_1009999C0;
  if (os_log_type_enabled((os_log_t)qword_1009999C0, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "BrailleProfile RFCOMM Release Reason: %{bluetooth:OI_STATUS}u", (uint8_t *)v5, 8u);
  }
  if (qword_10097B190 != -1)
    dispatch_once(&qword_10097B190, &stru_10092EC50);
  sub_10042F83C(off_10097B188, a1);
}

void sub_10042FBB0(int a1, uint64_t a2, int a3)
{
  if (qword_10097B190 != -1)
    dispatch_once(&qword_10097B190, &stru_10092EC50);
  sub_10042F888(off_10097B188, a1, a2, a3);
}

void sub_10042FC18(id a1)
{
  operator new();
}

void sub_10042FC58()
{
  operator delete();
}

void sub_10042FC7C(id a1)
{
  operator new();
}

void sub_10042FCBC()
{
  operator delete();
}

void sub_10042FCE0(id a1)
{
  operator new();
}

void sub_10042FD20()
{
  operator delete();
}

uint64_t sub_10042FD44(uint64_t a1)
{
  *(_QWORD *)sub_10048D2F0(a1, "BrailleService", 0x2000) = &off_10092ED10;
  if (qword_10097B190 != -1)
    dispatch_once(&qword_10097B190, &stru_10092EE00);
  sub_10048D5B0(a1, (uint64_t)off_10097B188);
  return a1;
}

void sub_10042FDB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10048D3E0(v1);
  _Unwind_Resume(a1);
}

void sub_10042FDD4(uint64_t a1)
{
  sub_10048D3E0(a1);
  operator delete();
}

uint64_t sub_10042FE00(uint64_t a1, uint64_t a2)
{
  if (qword_10097B190 != -1)
    dispatch_once(&qword_10097B190, &stru_10092EE00);
  return (*(uint64_t (**)(char *, uint64_t))(*((_QWORD *)off_10097B188 + 32) + 16))((char *)off_10097B188 + 256, a2);
}

uint64_t sub_10042FE5C(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v8 = xmmword_100741270;
  if (sub_100444790(a2))
  {
    if (sub_100442444(a2, &v8, 4u))
      v4 = 4;
    else
      v4 = 1;
  }
  else
  {
    v4 = 1;
  }
  v5 = *(_DWORD *)(a1 + 32);
  v9 = 0;
  sub_10004AD30((uint64_t)&v9);
  *(_QWORD *)&v7 = (int)v9;
  *((_QWORD *)&v7 + 1) = SWORD2(v9);
  return sub_1004415B0(a2, v5, v4, &v7, 0);
}

void sub_10042FF00(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *a3 = 0;
}

void sub_10042FF08(id a1)
{
  operator new();
}

void sub_10042FF48()
{
  operator delete();
}

uint64_t sub_10042FF6C(unint64_t a1)
{
  void (***v2)(_QWORD);

  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092EE20);
  if (!sub_1000229D8((_QWORD *)qword_100977B48, a1))
    return 7;
  v2 = (void (***)(_QWORD))sub_100027F68();
  (**v2)(v2);
  return 0;
}

uint64_t sub_10042FFE0(unint64_t a1)
{
  uint64_t v2;

  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092EE20);
  if (!sub_1000229D8((_QWORD *)qword_100977B48, a1))
    return 7;
  v2 = sub_100027F68();
  sub_100575968(v2, 0xE74u, 1);
  return 0;
}

void sub_100430054(id a1)
{
  operator new();
}

void sub_100430094()
{
  operator delete();
}

void sub_1004300B8(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1004310B8;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

void sub_100430118(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD v5[5];
  int v6;

  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100431108;
  v5[3] = &unk_1009173C0;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

void sub_100430180(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD v5[5];
  int v6;

  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10043115C;
  v5[3] = &unk_1009173C0;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

_QWORD *sub_1004301E8(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)sub_100278350(a1, 25);
  *result = &off_10092EE68;
  result[32] = &off_10092EED8;
  return result;
}

uint64_t sub_100430214()
{
  return 0;
}

_BYTE *sub_10043021C(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  void **v7;
  NSObject *v8;
  char *v9;
  void **v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  char v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  void **v25;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EEF0);
  v4 = sub_10006D488((uint64_t)off_1009778E0, a2, 1);
  if (!sub_100444790(v4))
  {
    v6 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v4, __p);
      v7 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Delaying incoming ATT connection attempt for device %{public}s as SDP is missing", buf, 0xCu);
      if (v21 < 0)
        operator delete(__p[0]);
    }
    if (qword_10097B080 != -1)
      dispatch_once(&qword_10097B080, &stru_10092EF10);
    sub_10048BB30(qword_10097B078, v4);
  }
  if (sub_100481EC8((uint64_t)a1, v4))
    v5 = sub_100441AE4(v4);
  else
    v5 = 0;
  v8 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    v9 = v5 ? "Accepting" : "Rejecting";
    sub_10043E5F8(v4, __p);
    v10 = v21 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v23 = v9;
    v24 = 2082;
    v25 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "ATT %{public}s incoming connection attempt from device %{public}s", buf, 0x16u);
    if (v21 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v11 = sub_100114D68(a2, v5);
  sub_10004339C(__p);
  if ((_DWORD)v11)
  {
    v12 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_1006F15F8(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  else if (v5)
  {
    sub_1004816DC(a1, v4);
  }
  return sub_100043728(__p);
}

void sub_1004304CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

_BYTE *sub_1004304E8(_QWORD *a1, unsigned __int8 *a2)
{
  int v4;
  NSObject *v5;
  char *v6;
  void **v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;
  uint8_t buf[4];
  char *v20;
  __int16 v21;
  void **v22;

  if (sub_100481EC8((uint64_t)a1, (uint64_t)a2))
    v4 = sub_100441AE4((uint64_t)a2);
  else
    v4 = 0;
  v5 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    v6 = v4 ? "Accepting" : "Rejecting";
    sub_10043E5F8((uint64_t)a2, __p);
    v7 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v20 = v6;
    v21 = 2082;
    v22 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "QueryComplete, %{public}s ATT incoming connection attempt from  device %{public}s", buf, 0x16u);
    if (v18 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v8 = sub_100114D68(((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133], v4);
  sub_10004339C(__p);
  if ((_DWORD)v8)
  {
    v9 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_1006F15F8(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  else if (v4)
  {
    sub_1004816DC(a1, (uint64_t)a2);
  }
  return sub_100043728(__p);
}

void sub_1004306AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1004306C8(uint64_t a1, unsigned __int8 *a2)
{
  return sub_1004304E8((_QWORD *)(a1 - 256), a2);
}

void sub_1004306D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void **v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  char v21;
  uint8_t buf[4];
  void **v23;
  __int16 v24;
  int v25;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EEF0);
  v6 = sub_10006D488((uint64_t)off_1009778E0, a2, 0);
  v7 = qword_100999820;
  if (v6)
  {
    v8 = v6;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT)
      && ((sub_10043E5F8(v8, __p), v21 >= 0) ? (v9 = __p) : (v9 = (void **)__p[0]),
          *(_DWORD *)buf = 136446466,
          v23 = v9,
          v24 = 1024,
          v25 = a3,
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Att connection to device confirmed %{public}s with result %{bluetooth:OI_STATUS}u", buf, 0x12u), v21 < 0))
    {
      operator delete(__p[0]);
      if ((_DWORD)a3)
        goto LABEL_10;
    }
    else if ((_DWORD)a3)
    {
LABEL_10:
      if (qword_100977A58 != -1)
        dispatch_once(&qword_100977A58, &stru_10092EF30);
      v10 = sub_1004A35C0((uint64_t)off_100977A50, a3, 20000);
      v11 = a1;
      v12 = v8;
LABEL_17:
      sub_10048183C(v11, v12, v10);
    }
    v11 = a1;
    v12 = v8;
    v10 = 0;
    goto LABEL_17;
  }
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    sub_1006F165C(v7, v13, v14, v15, v16, v17, v18, v19);
}

void sub_100430888(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  char v18;
  uint8_t buf[4];
  void **v20;
  __int16 v21;
  int v22;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EEF0);
  v6 = sub_10006D488((uint64_t)off_1009778E0, a2, 1);
  v7 = qword_100999820;
  if (v6)
  {
    v8 = v6;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v8, __p);
      if (v18 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v20 = v9;
      v21 = 1024;
      v22 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Att disconnection to devices %{public}s with reason %{bluetooth:OI_STATUS}u", buf, 0x12u);
      if (v18 < 0)
        operator delete(__p[0]);
    }
    sub_10048257C(a1, v8, 0);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
  {
    sub_1006F165C(v7, v10, v11, v12, v13, v14, v15, v16);
  }
}

void sub_1004309F4(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;

  v4 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    if (v7 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fast Connect GATT Report Connection attempt for %{public}s", buf, 0xCu);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  sub_1004816DC(a1, a2);
}

void sub_100430AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  int v7;
  _DWORD v8[2];

  v6 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Fast Connect GATT Setup Complete result %d", (uint8_t *)v8, 8u);
  }
  if ((_DWORD)a3)
  {
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_10092EF30);
    v7 = sub_1004A35C0((uint64_t)off_100977A50, a3, 20000);
  }
  else
  {
    v7 = 0;
  }
  sub_10048183C(a1, a2, v7);
}

uint64_t sub_100430BF4()
{
  NSObject *v0;
  char v2;
  uint8_t buf[16];

  v0 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Register GATT Profile", buf, 2u);
  }
  v2 = 0;
  sub_100043758(&v2);
  sub_100115918((__n128 *)off_10092EE40);
  sub_100043728(&v2);
  return 0;
}

void sub_100430C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100430C90()
{
  NSObject *v0;
  char v2;
  uint8_t buf[16];

  v0 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Deregister GATT profile", buf, 2u);
  }
  v2 = 0;
  sub_100043758(&v2);
  sub_100115974();
  sub_100043728(&v2);
  return 0;
}

void sub_100430D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100430D24(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  void **v5;
  uint64_t v6;
  NSObject *v7;
  char v9;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  void **v13;

  v4 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F78C((uint64_t)a2, (uint64_t)__p);
    v5 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "GATT disconnecting device \"%s\"", buf, 0xCu);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  v9 = 0;
  sub_100043758(&v9);
  v6 = sub_100115684(((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133]);
  sub_10004339C(&v9);
  if ((_DWORD)v6)
  {
    v7 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8((uint64_t)a2, __p);
      sub_1006F168C((char *)__p, buf, v6, v7);
    }
    v6 = 1;
    sub_10048257C(a1, (uint64_t)a2, 1);
  }
  sub_100043728(&v9);
  return v6;
}

void sub_100430EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_100043728(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_100430ED0(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void **v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[2];
  char v23;
  uint8_t buf[4];
  void **v25;

  *(_BYTE *)(a1 + 264) = 1;
  if (!sub_100441AE4((uint64_t)a2))
    goto LABEL_5;
  if (qword_10097AC28 != -1)
    dispatch_once(&qword_10097AC28, &stru_10092EF50);
  if (!sub_1004844F0(qword_10097AC20, a2))
  {
    v12 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F78C((uint64_t)a2, (uint64_t)__p);
      v13 = v23 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v25 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Making classic GATT outgoing connection to device \"%s\"", buf, 0xCu);
      if (v23 < 0)
        operator delete(__p[0]);
    }
    LOBYTE(__p[0]) = 0;
    sub_100043758(__p);
    v11 = sub_10011548C(((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133]);
    if ((_DWORD)v11)
    {
      v14 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
        sub_1006F173C(v11, v14, v15, v16, v17, v18, v19, v20);
      v11 = 1;
    }
    sub_100043728(__p);
  }
  else
  {
LABEL_5:
    v3 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_1006F170C(v3, v4, v5, v6, v7, v8, v9, v10);
    return 305;
  }
  return v11;
}

void sub_10043109C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

_BYTE *sub_1004310B8(uint64_t a1)
{
  if (qword_10097B1A0 != -1)
    dispatch_once(&qword_10097B1A0, &stru_10092EF70);
  return sub_10043021C((_QWORD *)qword_10097B198, *(_QWORD *)(a1 + 32));
}

void sub_100431108(uint64_t a1)
{
  if (qword_10097B1A0 != -1)
    dispatch_once(&qword_10097B1A0, &stru_10092EF70);
  sub_1004306D0(qword_10097B198, *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_10043115C(uint64_t a1)
{
  if (qword_10097B1A0 != -1)
    dispatch_once(&qword_10097B1A0, &stru_10092EF70);
  sub_100430888(qword_10097B198, *(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 40));
}

void sub_1004311B4(uint64_t a1)
{
  sub_100278464(a1);
  operator delete();
}

uint64_t sub_1004311D8()
{
  return 12;
}

uint64_t sub_1004311E0()
{
  return 1;
}

uint64_t sub_1004311E8(uint64_t a1)
{
  return sub_100278464(a1 - 256);
}

void sub_1004311F0(uint64_t a1)
{
  sub_100278464(a1 - 256);
  operator delete();
}

void sub_100431218(id a1)
{
  operator new();
}

void sub_100431258()
{
  operator delete();
}

void sub_10043127C(id a1)
{
  operator new();
}

void sub_1004312BC()
{
  operator delete();
}

void sub_1004312E0(id a1)
{
  operator new();
}

void sub_100431320()
{
  operator delete();
}

void sub_100431344(id a1)
{
  operator new();
}

void sub_100431384()
{
  operator delete();
}

void sub_1004313A8(id a1)
{
  operator new();
}

void sub_100431400()
{
  operator delete();
}

uint64_t sub_100431424(int *a1, char *a2, size_t a3)
{
  const char *p_source;
  uint64_t v6;
  uint64_t result;
  char *__source;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;

  v11 = *a1;
  v12 = *((_WORD *)a1 + 2);
  __source = 0;
  v9 = 0;
  v10 = 0;
  sub_10046E9BC((unsigned __int8 *)&v11, &__source);
  if ((SHIBYTE(v10) & 0x80000000) == 0)
  {
    if (HIBYTE(v10) >= a3)
      return 5;
    p_source = (const char *)&__source;
LABEL_8:
    strlcpy(a2, p_source, a3);
    v6 = 0;
    result = 0;
    if ((SHIBYTE(v10) & 0x80000000) == 0)
      return result;
    goto LABEL_9;
  }
  if (v9 + 1 <= a3)
  {
    p_source = __source;
    goto LABEL_8;
  }
  v6 = 5;
LABEL_9:
  operator delete(__source);
  return v6;
}

void sub_1004314D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004314F4(unint64_t a1, uint64_t a2, unint64_t *a3)
{
  id v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v5 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a2);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092EFB0);
  v6 = sub_1000589DC((uint64_t)off_1009778C0, v5, 0);
  if (v6)
    v7 = (v6 & 0xFF000000000000) == 0;
  else
    v7 = 0;
  if (!v7)
    goto LABEL_16;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v8 = sub_10006D488((uint64_t)off_1009778E0, v6, 0);
  if (v8)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092EF90);
    v9 = sub_10046F750((uint64_t)off_1009778E0, a1, v8);
    *a3 = v9;
    if (v9)
      v10 = 0;
    else
      v10 = 7;
  }
  else
  {
LABEL_16:
    v10 = 8;
  }

  return v10;
}

void sub_100431628(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10043163C(unint64_t a1, char *a2, size_t a3)
{
  unint64_t v6;
  std::string *p_p;
  uint64_t v8;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  std::string v16;
  std::string __p;
  unsigned __int8 uu[8];
  uint64_t v19;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v6 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  *(_QWORD *)uu = 0;
  v19 = 0;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092EFB0);
  sub_100657518((uint64_t)off_1009778C0, a1, (uint64_t)uu);
  memset(&__p, 0, sizeof(__p));
  if (v6)
  {
    sub_10046E9BC((unsigned __int8 *)(v6 + 128), &v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v16;
  }
  else
  {
    if (uuid_is_null(uu))
    {
      v8 = 7;
      goto LABEL_18;
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092EFB0);
    v10 = off_1009778C0;
    v11 = sub_100030DF4(uu);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v13 = sub_1000589DC((uint64_t)v10, v12, 0);
    v14 = sub_100021770(v13);
    v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v14));
    std::string::assign(&__p, (const std::string::value_type *)objc_msgSend(v15, "UTF8String"));

  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ + 1 <= a3)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_17;
    }
LABEL_15:
    v8 = 5;
    goto LABEL_18;
  }
  if (HIBYTE(__p.__r_.__value_.__r.__words[2]) >= a3)
    goto LABEL_15;
  p_p = &__p;
LABEL_17:
  strlcpy(a2, (const char *)p_p, a3);
  v8 = 0;
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_10043183C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;

  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10043187C(unint64_t a1, int *a2)
{
  unint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  unsigned __int8 uu[8];
  uint64_t v9;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092EF90);
    v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
    *(_QWORD *)uu = 0;
    v9 = 0;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092EFB0);
    sub_100657518((uint64_t)off_1009778C0, a1, (uint64_t)uu);
    if (v4)
    {
      *a2 = sub_10043F854(v4);
      v5 = sub_10043FC18(v4);
      switch(v5)
      {
        case 4:
          v6 = 19;
          break;
        case 2:
          v6 = 20;
          break;
        case 1:
          v6 = 22;
          break;
        default:
          return 0;
      }
    }
    else
    {
      if (uuid_is_null(uu))
        return 7;
      v6 = 48;
    }
    result = 0;
    *a2 = v6;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
  return result;
}

uint64_t sub_100431A24(unint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  uint64_t v5;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v4)
    return 7;
  v5 = v4;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    if (sub_10043FA40(v5, a2))
      return 0;
    else
      return 408;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
}

uint64_t sub_100431B0C(unint64_t a1, char *a2, size_t a3)
{
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  char *__source[2];
  uint64_t v13;
  unsigned __int8 uu[8];
  uint64_t v15;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v6 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (v6)
  {
    sub_10043F918(v6, (uint64_t)&v10);
  }
  else
  {
    *(_QWORD *)uu = 0;
    v15 = 0;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092EFB0);
    sub_100657518((uint64_t)off_1009778C0, a1, (uint64_t)uu);
    if (uuid_is_null(uu))
      return 7;
    sub_100091AE8(&v10, "Peripheral");
  }
  *(_OWORD *)__source = v10;
  v13 = v11;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    if (HIBYTE(v11) >= a3)
      return 5;
    if (!HIBYTE(v11))
      return 408;
    v7 = (const char *)__source;
    goto LABEL_24;
  }
  if (__source[1] + 1 > (char *)a3)
  {
    v8 = 5;
LABEL_29:
    operator delete(__source[0]);
    return v8;
  }
  if (!__source[1])
  {
    v8 = 408;
    goto LABEL_29;
  }
  v7 = __source[0];
LABEL_24:
  strlcpy(a2, v7, a3);
  v8 = 0;
  if (SHIBYTE(v13) < 0)
    goto LABEL_29;
  return v8;
}

void sub_100431D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100431D34(unint64_t a1, char *a2, size_t a3)
{
  unint64_t v6;
  char v7;
  const char *v8;
  uint64_t v9;
  void *v11;
  id v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  char *__source[2];
  uint64_t v17;
  unsigned __int8 uu[8];
  uint64_t v19;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
  __source[0] = 0;
  __source[1] = 0;
  v17 = 0;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v6 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (v6)
  {
    sub_10043F6EC(v6, (uint64_t)&v14);
    *(_OWORD *)__source = v14;
    v17 = v15;
  }
  else
  {
    *(_QWORD *)uu = 0;
    v19 = 0;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092EFB0);
    sub_100657518((uint64_t)off_1009778C0, a1, (uint64_t)uu);
    if (uuid_is_null(uu))
      return 7;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092EFB0);
    v11 = off_1009778C0;
    v12 = sub_100030DF4(uu);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    sub_10000602C((uint64_t)v11, v13, (uint64_t)&v14);
    *(_OWORD *)__source = v14;
    v17 = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14) = 0;

  }
  v7 = HIBYTE(v17);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17) >= a3)
      return 5;
    if (HIBYTE(v17))
    {
      v8 = (const char *)__source;
      goto LABEL_24;
    }
LABEL_27:
    *a2 = 0;
    v9 = 408;
    if ((v7 & 0x80) == 0)
      return v9;
    goto LABEL_25;
  }
  if (__source[1] + 1 > (char *)a3)
  {
    v9 = 5;
LABEL_25:
    operator delete(__source[0]);
    return v9;
  }
  if (!__source[1])
    goto LABEL_27;
  v8 = __source[0];
LABEL_24:
  strlcpy(a2, v8, a3);
  v9 = 0;
  if (v17 < 0)
    goto LABEL_25;
  return v9;
}

void sub_100431F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t sub_100431FC4(unint64_t a1, char *a2, size_t a3)
{
  unint64_t v6;
  char v7;
  const char *v8;
  uint64_t v9;
  void *v11;
  id v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  char *__source[2];
  uint64_t v17;
  unsigned __int8 uu[8];
  uint64_t v19;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
  __source[0] = 0;
  __source[1] = 0;
  v17 = 0;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v6 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (v6)
  {
    sub_10043F78C(v6, (uint64_t)&v14);
    *(_OWORD *)__source = v14;
    v17 = v15;
  }
  else
  {
    *(_QWORD *)uu = 0;
    v19 = 0;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092EFB0);
    sub_100657518((uint64_t)off_1009778C0, a1, (uint64_t)uu);
    if (uuid_is_null(uu))
      return 7;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092EFB0);
    v11 = off_1009778C0;
    v12 = sub_100030DF4(uu);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    sub_10000602C((uint64_t)v11, v13, (uint64_t)&v14);
    *(_OWORD *)__source = v14;
    v17 = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14) = 0;

  }
  v7 = HIBYTE(v17);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17) >= a3)
      return 5;
    if (HIBYTE(v17))
    {
      v8 = (const char *)__source;
      goto LABEL_24;
    }
LABEL_27:
    *a2 = 0;
    v9 = 408;
    if ((v7 & 0x80) == 0)
      return v9;
    goto LABEL_25;
  }
  if (__source[1] + 1 > (char *)a3)
  {
    v9 = 5;
LABEL_25:
    operator delete(__source[0]);
    return v9;
  }
  if (!__source[1])
    goto LABEL_27;
  v8 = __source[0];
LABEL_24:
  strlcpy(a2, v8, a3);
  v9 = 0;
  if (v17 < 0)
    goto LABEL_25;
  return v9;
}

void sub_10043221C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t sub_100432254(unint64_t a1, char *a2)
{
  unint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void **v7;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  void **v12;
  __int16 v13;
  char *v14;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v4)
    return 408;
  v5 = v4;
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(v5, (uint64_t)__p);
    v7 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v12 = v7;
    v13 = 2080;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Set user-defined name for %s to %s", buf, 0x16u);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  sub_100091AE8(__p, a2);
  sub_100440D9C(v5, (uint64_t)__p, 1);
  if (v10 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1004323B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004323D8(unint64_t a1, int *a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t result;
  int v9;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v4)
    return 7;
  v5 = v4;
  v6 = sub_1004471D4(v4);
  if (sub_100447E94(v5))
    v6 |= 2u;
  if (sub_100448010(v5))
    v6 |= 4u;
  if (sub_100448098(v5))
    v6 |= 8u;
  v7 = sub_100448120(v5);
  result = 0;
  if (v7)
    v9 = v6 | 0x10;
  else
    v9 = v6;
  *a2 = v9;
  return result;
}

uint64_t sub_1004324AC(unint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t v5;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v4)
    return 7;
  v5 = v4;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  return sub_100471F78((uint64_t)off_1009778E0, v5, 0, (a2 >> 1) & 1, (a2 & 4) != 0, (a2 & 8) != 0, (a2 >> 4) & 1);
}

uint64_t sub_100432568(unint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  int *v10;
  int v11;
  int *v13;
  int *v14;
  uint64_t v15;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v6 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v6)
    return 7;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  sub_100448608(v6, &v13);
  v7 = v13;
  v8 = v14;
  if (v13 == v14)
  {
    v9 = 0;
  }
  else
  {
    LODWORD(v9) = 0;
    v10 = v13;
    do
    {
      v11 = *v10++;
      *(_DWORD *)(a2 + 4 * v9) = v11;
      v9 = (v9 + 1);
    }
    while (v10 != v8);
  }
  *a3 = v9;
  if (v7)
  {
    v14 = v7;
    operator delete(v7);
  }
  return 0;
}

uint64_t sub_100432634(unint64_t a1, int a2, int a3)
{
  unint64_t v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  void *__p;
  char *v25;
  unint64_t v26;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v6 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v6)
    return 7;
  v7 = (_QWORD *)v6;
  __p = 0;
  v25 = 0;
  v26 = 0;
  sub_100448608(v6, &__p);
  v8 = (char *)__p;
  v25 = (char *)__p;
  if (!a3)
  {
    if ((unint64_t)__p < v26)
    {
      *(_DWORD *)__p = -2;
      v9 = v8 + 4;
      goto LABEL_28;
    }
    v19 = (uint64_t)(v26 - (_QWORD)__p) >> 1;
    if (v19 <= 1)
      v19 = 1;
    if (v26 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    v13 = (char *)sub_1002B46E0((uint64_t)&v26, v20);
    v14 = (char *)__p;
    v21 = v25;
    v17 = &v13[4 * v22];
    *(_DWORD *)v13 = -2;
    v9 = v13 + 4;
    while (v21 != v14)
    {
      v23 = *((_DWORD *)v21 - 1);
      v21 -= 4;
      *((_DWORD *)v13 - 1) = v23;
      v13 -= 4;
    }
LABEL_26:
    __p = v13;
    v25 = v9;
    v26 = (unint64_t)v17;
    if (v14)
      operator delete(v14);
    goto LABEL_28;
  }
  if ((unint64_t)__p >= v26)
  {
    v11 = (uint64_t)(v26 - (_QWORD)__p) >> 1;
    if (v11 <= 1)
      v11 = 1;
    if (v26 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v13 = (char *)sub_1002B46E0((uint64_t)&v26, v12);
    v14 = (char *)__p;
    v15 = v25;
    v17 = &v13[4 * v16];
    *(_DWORD *)v13 = a2;
    v9 = v13 + 4;
    while (v15 != v14)
    {
      v18 = *((_DWORD *)v15 - 1);
      v15 -= 4;
      *((_DWORD *)v13 - 1) = v18;
      v13 -= 4;
    }
    goto LABEL_26;
  }
  *(_DWORD *)__p = a2;
  v9 = v8 + 4;
LABEL_28:
  v25 = v9;
  sub_100448434(v7, (_DWORD **)&__p);
  sub_1004468B0((uint64_t)v7);
  if (__p)
  {
    v25 = (char *)__p;
    operator delete(__p);
  }
  return 0;
}

void sub_1004327DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004327FC(unint64_t a1, int *a2)
{
  unsigned __int8 *v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  id v8;
  void *v9;
  unsigned __int8 uu[8];
  uint64_t v11;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v4 = (unsigned __int8 *)sub_10046F6C0((uint64_t)off_1009778E0, a1);
  *(_QWORD *)uu = 0;
  v11 = 0;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092EFB0);
  sub_100657518((uint64_t)off_1009778C0, a1, (uint64_t)uu);
  if (v4)
  {
    v5 = sub_10043E93C(v4);
    result = 0;
    *a2 = v5 << 31 >> 31;
  }
  else if (uuid_is_null(uu))
  {
    return 7;
  }
  else
  {
    if (qword_1009778B8 != -1)
      dispatch_once(&qword_1009778B8, &stru_10092EFD0);
    v7 = qword_1009778B0;
    v8 = sub_100030DF4(uu);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    *a2 = sub_100030864(v7, v9) << 31 >> 31;

    return 0;
  }
  return result;
}

void sub_100432964(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10043297C(unint64_t a1, _DWORD *a2)
{
  uint64_t result;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  if (!sub_10046F6C0((uint64_t)off_1009778E0, a1))
    return 7;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_1004329E8(unint64_t a1, int *a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;

  *a2 = 0;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v4)
    return 7;
  v5 = v4;
  if (qword_100977A68 != -1)
    dispatch_once(&qword_100977A68, &stru_10092EFF0);
  v6 = sub_10045E940((uint64_t)off_100977A60, v5);
  result = 0;
  *a2 = v6 << 31 >> 31;
  return result;
}

uint64_t sub_100432A9C(unint64_t a1, int *a2)
{
  unint64_t v4;
  int v5;
  uint64_t result;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v4)
    return 7;
  v5 = sub_10043FC5C(v4);
  result = 0;
  *a2 = v5 << 31 >> 31;
  return result;
}

uint64_t sub_100432B14(unint64_t a1, int *a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v4)
    return 7;
  v5 = v4;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    v6 = sub_100442118(v5, 12);
    result = 0;
    *a2 = v6 << 31 >> 31;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
  return result;
}

uint64_t sub_100432C00(unint64_t a1, int *a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v4)
    return 7;
  v5 = v4;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    v6 = sub_100442118(v5, 22);
    result = 0;
    *a2 = v6 << 31 >> 31;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
  return result;
}

uint64_t sub_100432CEC(unint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  int v5;
  uint64_t result;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v4)
    return 7;
  v5 = sub_100444D8C(v4);
  result = 0;
  *a2 = v5;
  return result;
}

uint64_t sub_100432D60(uint64_t a1, uint64_t a2)
{
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_10092F010);
  return sub_100494004((uint64_t)off_100977A70, a1, a2);
}

uint64_t sub_100432DB8(unint64_t a1, int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  std::string::size_type v10;
  std::string *v11;
  void **v12;
  int v13;
  std::string::size_type v14;
  std::string *v15;
  void **v16;
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v18;
  int v19;
  std::string::size_type v20;
  std::string *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  char v26;
  std::string v27;
  std::string v28;
  uint8_t buf[4];
  std::string *v30;
  __int16 v31;
  void **v32;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v4)
    return 7;
  v5 = v4;
  memset(&v28, 0, sizeof(v28));
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092F030);
  v6 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  if (v6)
  {
    v7 = v6;
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(v7, (uint64_t)&v27);
      v9 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
      v10 = v27.__r_.__value_.__r.__words[0];
      sub_10043F78C(v5, (uint64_t)__p);
      v11 = &v27;
      if (v9 < 0)
        v11 = (std::string *)v10;
      if (v26 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 2082;
      v32 = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to connect device \"%{public}s\"", buf, 0x16u);
      if (v26 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      v8 = qword_1009997E8;
    }
    if (os_signpost_enabled(v8))
    {
      sub_1000340DC(v7, (uint64_t)&v27);
      v13 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
      v14 = v27.__r_.__value_.__r.__words[0];
      sub_10043F78C(v5, (uint64_t)__p);
      v15 = &v27;
      if (v13 < 0)
        v15 = (std::string *)v14;
      if (v26 >= 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v30 = v15;
      v31 = 2082;
      v32 = v16;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BTSignPost", "Session \"%{public}s\" is asking to connect device \"%{public}s\"", buf, 0x16u);
      if (v26 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (sub_100070BDC())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle(qword_100999990);
      v18 = CTGreenTeaOsLogHandle;
      if (CTGreenTeaOsLogHandle)
      {
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_1000340DC(v7, (uint64_t)&v27);
          v19 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
          v20 = v27.__r_.__value_.__r.__words[0];
          sub_10043F78C(v5, (uint64_t)__p);
          v21 = &v27;
          if (v19 < 0)
            v21 = (std::string *)v20;
          if (v26 >= 0)
            v22 = __p;
          else
            v22 = (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v30 = v21;
          v31 = 2082;
          v32 = v22;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to connect device \"%{public}s\"", buf, 0x16u);
          if (v26 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v27.__r_.__value_.__l.__data_);
        }
      }
    }
    sub_1000340DC(v7, (uint64_t)&v27);
    v28 = v27;
  }
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F050);
  sub_100478C60((uint64_t)off_100977890, 0, 0);
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_10092F010);
  v23 = sub_100495A98((int64x2_t *)off_100977A70, v5, a2, &v28, 2);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  return v23;
}

void sub_1004331B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100433204(unint64_t a1, int a2, int a3, _OWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  std::string::size_type v14;
  std::string *v15;
  void **v16;
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v18;
  int v19;
  std::string::size_type v20;
  std::string *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  _QWORD v36[5];
  void *__p[2];
  char v38;
  std::string v39;
  uint8_t buf[4];
  std::string *v41;
  __int16 v42;
  void **v43;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v8 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v8)
    return 7;
  v9 = v8;
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092F030);
  v10 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  if (v10)
  {
    v11 = v10;
    v12 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(v11, (uint64_t)&v39);
      v13 = SHIBYTE(v39.__r_.__value_.__r.__words[2]);
      v14 = v39.__r_.__value_.__r.__words[0];
      sub_10043F6EC(v9, (uint64_t)__p);
      v15 = &v39;
      if (v13 < 0)
        v15 = (std::string *)v14;
      if (v38 >= 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v41 = v15;
      v42 = 2082;
      v43 = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "BTDeviceConnectServicesWithParameters \"%{public}s\" is asking to connect device \"%{public}s\" with params", buf, 0x16u);
      if (v38 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (sub_100070BDC())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle(qword_100999990);
      v18 = CTGreenTeaOsLogHandle;
      if (CTGreenTeaOsLogHandle)
      {
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_1000340DC(v11, (uint64_t)&v39);
          v19 = SHIBYTE(v39.__r_.__value_.__r.__words[2]);
          v20 = v39.__r_.__value_.__r.__words[0];
          sub_10043F6EC(v9, (uint64_t)__p);
          v21 = &v39;
          if (v19 < 0)
            v21 = (std::string *)v20;
          if (v38 >= 0)
            v22 = __p;
          else
            v22 = (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v41 = v21;
          v42 = 2082;
          v43 = v22;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to connect device \"%{public}s\" with params", buf, 0x16u);
          if (v38 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v39.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  if (a3 <= 15)
  {
    switch(a3)
    {
      case 0:
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006F17F8();
        sub_10044EC48(v9, 1);
        if (sub_10043FC5C(v9))
        {
          v23 = sub_1004759E0();
          v36[0] = _NSConcreteStackBlock;
          v36[1] = 3221225472;
          v36[2] = sub_100433B28;
          v36[3] = &unk_100917378;
          v36[4] = v9;
          sub_100041A34(v23, v36);
        }
        goto LABEL_80;
      case 1:
        v28 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v39.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "BTDeviceConnectServicesWithParameters BTDeviceConnectGuestMode", (uint8_t *)&v39, 2u);
        }
        sub_10044EB68(v9, 1);
        *(_DWORD *)(v9 + 964) = 1;
        goto LABEL_80;
      case 2:
        v29 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v39.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "BTDeviceConnectServicesWithParameters BTDeviceConnectGuestModeWithLinkey", (uint8_t *)&v39, 2u);
        }
        memset(&v39, 0, 20);
        sub_1005A9734((uint64_t)&v39, a4, 5u);
        if (qword_100978160 != -1)
          dispatch_once(&qword_100978160, &stru_10092F070);
        v24 = sub_1005BEC60((uint64_t)off_100978158, (unsigned __int8 *)v9, (__n128 *)&v39, 0);
        sub_10044EB68(v9, 1);
        *(_DWORD *)(v9 + 964) = 2;
        if ((_DWORD)v24 && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006F17CC();
        goto LABEL_73;
      case 4:
        v26 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v39.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "BTDeviceConnectServicesWithParameters BTDeviceConnectGuestModeNotInContactsWithLinkkey", (uint8_t *)&v39, 2u);
        }
        memset(&v39, 0, 20);
        sub_1005A9734((uint64_t)&v39, a4, 5u);
        if (qword_100978160 != -1)
          dispatch_once(&qword_100978160, &stru_10092F070);
        v24 = sub_1005BEC60((uint64_t)off_100978158, (unsigned __int8 *)v9, (__n128 *)&v39, 0);
        sub_10044EB68(v9, 1);
        sub_10044EBD8(v9, 1);
        *(_DWORD *)(v9 + 964) = 2;
        if ((_DWORD)v24 && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006F17CC();
        nullsub_90(&v39, v27);
        a2 = 524312;
        if (!(_DWORD)v24)
          goto LABEL_80;
        break;
      case 8:
        v31 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v39.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "BTDeviceConnectServicesWithParameters BTDeviceConnectNormalModeNoOwnership", (uint8_t *)&v39, 2u);
        }
        sub_10044EF08(v9, 0);
        goto LABEL_80;
      default:
        goto LABEL_86;
    }
    return v24;
  }
  if (a3 != 16)
  {
    if (a3 == 32)
    {
      v34 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v39.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "BTDeviceConnectServicesWithParameters, BTDeviceConnectTiPiMode", (uint8_t *)&v39, 2u);
      }
      if (qword_100977A88 != -1)
        dispatch_once(&qword_100977A88, &stru_10092F0B0);
      sub_10027F960((uint64_t)off_100977A80, v9, 1);
    }
    else
    {
      if (a3 != 64)
      {
LABEL_86:
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006F17A0();
        return 2;
      }
      v25 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v39.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "BTDeviceConnectServicesWithParameters, BTDeviceConnectGuestPairingMode", (uint8_t *)&v39, 2u);
      }
      if (_os_feature_enabled_impl("BluetoothFeatures", "GuestPairing"))
      {
        sub_10044ED70((unsigned __int8 *)v9, 1);
      }
      else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        sub_1006F1824();
      }
    }
LABEL_80:
    if (qword_100977898 != -1)
      dispatch_once(&qword_100977898, &stru_10092F050);
    sub_100478C60((uint64_t)off_100977890, 0, 0);
    if (qword_100977A78 != -1)
      dispatch_once(&qword_100977A78, &stru_10092F010);
    memset(&v39, 0, sizeof(v39));
    v24 = sub_100495A98((int64x2_t *)off_100977A70, v9, a2, &v39, 2);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    return v24;
  }
  v32 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v39.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "BTDeviceConnectServicesWithParameters, BTDeviceConnectOwnerNoMagicPairing", (uint8_t *)&v39, 2u);
  }
  sub_100446814(v9, 1);
  __p[0] = 0;
  __p[1] = 0;
  if (*a4 == 0)
    goto LABEL_80;
  v33 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v39.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "BTDeviceConnectServicesWithParameters, connectwithLinkey", (uint8_t *)&v39, 2u);
  }
  memset(&v39, 0, 20);
  sub_1005A9734((uint64_t)&v39, a4, 5u);
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10092F070);
  v24 = sub_1005BEC60((uint64_t)off_100978158, (unsigned __int8 *)v9, (__n128 *)&v39, 0);
LABEL_73:
  nullsub_90(&v39, v30);
  if (!(_DWORD)v24)
    goto LABEL_80;
  return v24;
}

void sub_100433AC0(_Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  nullsub_90(&__p, a2);
  _Unwind_Resume(a1);
}

void sub_100433B28(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092F090);
  sub_1003E0F84((os_unfair_lock_s *)qword_100977DF8, *(_QWORD *)(a1 + 32));
}

uint64_t sub_100433B78(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  void **v8;
  void **v9;
  void **v10;
  int v11;
  void **v12;
  void **v13;
  void **v14;
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v16;
  int v17;
  void **v18;
  void **v19;
  void **v20;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;
  uint8_t buf[4];
  void **v27;
  __int16 v28;
  void **v29;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v2 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v2)
    return 7;
  v3 = v2;
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092F030);
  v4 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  if (v4)
  {
    v5 = v4;
    v6 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(v5, (uint64_t)v24);
      v7 = v25;
      v8 = (void **)v24[0];
      sub_10043F78C(v3, (uint64_t)__p);
      v9 = v24;
      if (v7 < 0)
        v9 = v8;
      if (v23 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v27 = v9;
      v28 = 2082;
      v29 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to disconnect physical link for device \"%{public}s\"", buf, 0x16u);
      if (v23 < 0)
        operator delete(__p[0]);
      if (v25 < 0)
        operator delete(v24[0]);
      v6 = qword_1009997E8;
    }
    if (os_signpost_enabled(v6))
    {
      sub_1000340DC(v5, (uint64_t)v24);
      v11 = v25;
      v12 = (void **)v24[0];
      sub_10043F78C(v3, (uint64_t)__p);
      v13 = v24;
      if (v11 < 0)
        v13 = v12;
      if (v23 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v27 = v13;
      v28 = 2082;
      v29 = v14;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BTSignPost", "Session \"%{public}s\" is asking to disconnect physical link for device \"%{public}s\"", buf, 0x16u);
      if (v23 < 0)
        operator delete(__p[0]);
      if (v25 < 0)
        operator delete(v24[0]);
    }
    if (sub_100070BDC())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle(qword_100999990);
      v16 = CTGreenTeaOsLogHandle;
      if (CTGreenTeaOsLogHandle)
      {
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_1000340DC(v5, (uint64_t)v24);
          v17 = v25;
          v18 = (void **)v24[0];
          sub_10043F78C(v3, (uint64_t)__p);
          v19 = v24;
          if (v17 < 0)
            v19 = v18;
          if (v23 >= 0)
            v20 = __p;
          else
            v20 = (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v27 = v19;
          v28 = 2082;
          v29 = v20;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to disconnect physical link for device \"%{public}s\"", buf, 0x16u);
          if (v23 < 0)
            operator delete(__p[0]);
          if (v25 < 0)
            operator delete(v24[0]);
        }
      }
    }
  }
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_10092F010);
  sub_100495A3C((uint64_t)off_100977A70, v3, 1);
  return 0;
}

void sub_100433EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100433F24(unint64_t a1, int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  void **v10;
  void **v11;
  void **v12;
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v14;
  int v15;
  void **v16;
  void **v17;
  void **v18;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  uint8_t buf[4];
  void **v25;
  __int16 v26;
  void **v27;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v4)
    return 7;
  v5 = v4;
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092F030);
  v6 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  if (v6)
  {
    v7 = v6;
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(v7, (uint64_t)v22);
      v9 = v23;
      v10 = (void **)v22[0];
      sub_10043F78C(v5, (uint64_t)__p);
      v11 = v22;
      if (v9 < 0)
        v11 = v10;
      if (v21 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v25 = v11;
      v26 = 2082;
      v27 = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to disconnect device \"%{public}s\"", buf, 0x16u);
      if (v21 < 0)
        operator delete(__p[0]);
      if (v23 < 0)
        operator delete(v22[0]);
    }
    if (sub_100070BDC())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle(qword_100999990);
      v14 = CTGreenTeaOsLogHandle;
      if (CTGreenTeaOsLogHandle)
      {
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_1000340DC(v7, (uint64_t)v22);
          v15 = v23;
          v16 = (void **)v22[0];
          sub_10043F78C(v5, (uint64_t)__p);
          v17 = v22;
          if (v15 < 0)
            v17 = v16;
          if (v21 >= 0)
            v18 = __p;
          else
            v18 = (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v25 = v17;
          v26 = 2082;
          v27 = v18;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to disconnect device \"%{public}s\"", buf, 0x16u);
          if (v21 < 0)
            operator delete(__p[0]);
          if (v23 < 0)
            operator delete(v22[0]);
        }
      }
    }
  }
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_10092F010);
  return sub_100499FC8((uint64_t)off_100977A70, v5, a2);
}

void sub_1004341E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100434208(unint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  unsigned __int8 uu[8];
  uint64_t v7;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  *(_QWORD *)uu = 0;
  v7 = 0;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092EFB0);
  sub_100657518((uint64_t)off_1009778C0, a1, (uint64_t)uu);
  *a2 = 0;
  if (v4)
    *a2 |= sub_1004497F4(v4);
  if (!uuid_is_null(uu))
  {
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10092F0D0);
    if (sub_100069F08((uint64_t)off_1009778A0, uu))
      *a2 |= 0x8000u;
  }
  if (v4 || !uuid_is_null(uu))
    return 0;
  else
    return 7;
}

uint64_t sub_10043436C(unint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  unsigned __int8 uu[8];
  uint64_t v7;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  *(_QWORD *)uu = 0;
  v7 = 0;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092EFB0);
  sub_100657518((uint64_t)off_1009778C0, a1, (uint64_t)uu);
  *a2 = 0;
  if (v4)
  {
    if (qword_100977A78 != -1)
      dispatch_once(&qword_100977A78, &stru_10092F010);
    *a2 |= sub_100498AC8((uint64_t)off_100977A70, v4);
  }
  if (uuid_is_null(uu))
  {
    if (v4)
      return 0;
  }
  else
  {
    *a2 |= 0x8000u;
    if (v4)
      return 0;
  }
  if (uuid_is_null(uu))
    return 7;
  return 0;
}

uint64_t sub_1004344CC(unint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v8 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  v9 = v8;
  if (a1 - 4294901761u >= 2 && !v8)
    return 7;
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_10092F010);
  return sub_10049AC8C((uint64_t)off_100977A70, v9, a2, a3, a4);
}

uint64_t sub_1004345AC(unint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v8 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  v9 = v8;
  if (a1 - 4294901761u >= 2 && !v8)
    return 7;
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_10092F010);
  return sub_10049AD78((uint64_t)off_100977A70, v9, a2, a3, a4);
}

uint64_t sub_10043468C(unint64_t a1)
{
  unint64_t v2;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v2 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v2)
    return 7;
  sub_1004414F8(v2, 0);
  return 0;
}

uint64_t sub_1004346F8(unint64_t a1, int a2, char *a3, size_t a4)
{
  unint64_t v8;
  uint64_t v9;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v8 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  v9 = v8;
  if (a1 - 4294901761u >= 2 && !v8)
    return 7;
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_10092F010);
  return sub_10049AE70((uint64_t)off_100977A70, v9, a2, a3, a4);
}

uint64_t sub_1004347D8(unint64_t a1, void *a2, size_t a3, int *a4)
{
  unint64_t v8;
  int v9;
  uint64_t result;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v8 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v8)
    return 7;
  v9 = sub_1004537E8(v8, a2, a3);
  result = 0;
  *a4 = v9 << 31 >> 31;
  return result;
}

uint64_t sub_100434868(unint64_t a1, void *a2, size_t a3, uint64_t a4, _QWORD *a5, unsigned int a6)
{
  unint64_t v12;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v12 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v12)
    return 7;
  if (sub_100452714(v12, a2, a3, a4, (uint64_t)a5, a6))
    return *a5 == 0;
  return 1;
}

uint64_t sub_10043491C(unint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t result;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v10 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v10)
    return 7;
  v11 = v10;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    result = 1;
    if (a2 && a3 && a4)
    {
      if (a5)
        return !sub_100444BF0(v11, a2, a3, a4, a5);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
  return result;
}

uint64_t sub_100434A38(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v6 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (qword_10097B1B0 != -1)
    dispatch_once(&qword_10097B1B0, &stru_10092F0F0);
  (*(void (**)(void *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)off_10097B1A8 + 240))(off_10097B1A8, v6, a2, a3);
  return 0;
}

uint64_t sub_100434AEC(unint64_t a1, int *a2, uint64_t a3, int a4)
{
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void **v11;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  void **v16;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v8 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  v9 = qword_1009997E8;
  if (a4 && (v10 = v8) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F6EC(v10, (uint64_t)__p);
      v11 = v14 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v16 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending linkkey to device \"%{public}s\" ", buf, 0xCu);
      if (v14 < 0)
        operator delete(__p[0]);
    }
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_10092F0B0);
    return sub_1002A1728((uint64_t)off_100977A80, v10, a2, a3);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F1850(a4 != 0, v9);
    return 7;
  }
}

uint64_t sub_100434C88(unint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (v4)
  {
    v5 = v4;
    result = 0;
    *a2 = -*(char *)(v5 + 952);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F18DC();
    return 7;
  }
  return result;
}

uint64_t sub_100434D28(unint64_t a1, int *a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v4)
    return 7;
  v5 = v4;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    v6 = sub_100442118(v5, 27);
    result = 0;
    *a2 = v6 << 31 >> 31;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
  return result;
}

uint64_t sub_100434E14(unint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (v4)
  {
    v5 = v4;
    result = 0;
    *a2 = -*(char *)(v5 + 968);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F1908();
    return 7;
  }
  return result;
}

uint64_t sub_100434EB4(unint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  int v5;
  uint64_t result;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v4)
    return 7;
  v5 = sub_100445388(v4);
  result = 0;
  *a2 = v5;
  return result;
}

uint64_t sub_100434F28(unint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  int v5;
  uint64_t result;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v4)
    return 7;
  v5 = sub_10044540C(v4);
  result = 0;
  *a2 = v5;
  return result;
}

uint64_t sub_100434F9C(unint64_t a1, int a2)
{
  unint64_t v4;
  uint64_t v5;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (v4)
  {
    v5 = v4;
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_10092F0B0);
    return sub_10028F694((uint64_t)off_100977A80, v5, a2 != 0);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F1934();
    return 7;
  }
}

uint64_t sub_100435070(unint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_1000438A4();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 2728))(v6))
    return 2;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v7 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (v7)
  {
    v8 = v7;
    v9 = *(unsigned int *)(v7 + 128) | ((unint64_t)*(unsigned __int16 *)(v7 + 132) << 32);
    v10 = sub_1000438A4();
    v11 = sub_10043F854(v8);
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, BOOL, BOOL, uint64_t, uint64_t))(*(_QWORD *)v10 + 80))(v10, v9, v11, a2, a3 != 0, a3 != 0, 1, 1);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F1960();
    return 7;
  }
}

uint64_t sub_10043518C(unint64_t a1, int *a2)
{
  unint64_t v4;
  int v5;
  uint64_t result;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v4)
    return 7;
  v5 = sub_1004557A4(v4);
  result = 0;
  *a2 = v5 << 31 >> 31;
  return result;
}

uint64_t sub_100435204(unint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  int v5;
  uint64_t result;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092EF90);
    v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
    if (v4)
    {
      v5 = sub_10043FC18(v4);
      result = 0;
      *a2 = v5;
    }
    else
    {
      return 7;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
  return result;
}

uint64_t sub_1004352E0(unint64_t a1, int a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  int v10;
  _QWORD v11[5];
  int v12;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092EF90);
    v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
    if (v4)
    {
      v5 = v4;
      sub_10043FBA8(v4, a2);
      v6 = sub_1004759E0();
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_100435434;
      v11[3] = &unk_1009173C0;
      v11[4] = v5;
      v12 = a2;
      sub_100041A34(v6, v11);
      v7 = sub_100475960();
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_100435488;
      v9[3] = &unk_1009173C0;
      v9[4] = v5;
      v10 = a2;
      sub_100041A34(v7, v9);
      return 0;
    }
    else
    {
      return 7;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F069C();
    return 212;
  }
}

void sub_100435434(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092F090);
  sub_1003E66B4((_QWORD *)qword_100977DF8, *(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 40));
}

void sub_100435488(uint64_t a1)
{
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_10092F110);
  sub_1004E546C((uint64_t)off_10097AA38, *(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 40));
}

uint64_t sub_1004354DC(unint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v4 = sub_10046F6C0((uint64_t)off_1009778E0, a1);
  if (!v4)
    return 7;
  v5 = sub_100447C64(v4);
  result = 0;
  *a2 = ((v5 >> 1) & 1) - 1;
  return result;
}

void sub_100435558(id a1)
{
  operator new();
}

void sub_100435598()
{
  operator delete();
}

void sub_1004355BC(id a1)
{
  operator new();
}

void sub_1004355FC()
{
  operator delete();
}

void sub_100435620(id a1)
{
  operator new();
}

void sub_100435660()
{
  operator delete();
}

void sub_100435684(id a1)
{
  operator new();
}

void sub_1004356C4()
{
  operator delete();
}

void sub_1004356E8(id a1)
{
  operator new();
}

void sub_100435728()
{
  operator delete();
}

void sub_10043574C(id a1)
{
  operator new();
}

void sub_10043578C()
{
  operator delete();
}

void sub_1004357B0(id a1)
{
  operator new();
}

void sub_1004357F0()
{
  operator delete();
}

void sub_100435814(id a1)
{
  operator new();
}

void sub_100435854()
{
  operator delete();
}

void sub_100435878(id a1)
{
  operator new();
}

void sub_1004358B8()
{
  operator delete();
}

void sub_1004358DC(id a1)
{
  operator new();
}

void sub_10043591C()
{
  operator delete();
}

void sub_100435940(id a1)
{
  operator new();
}

void sub_100435980()
{
  operator delete();
}

void sub_1004359A4(id a1)
{
  operator new();
}

void sub_1004359E4()
{
  operator delete();
}

void sub_100435A08(id a1)
{
  operator new();
}

void sub_100435A48()
{
  operator delete();
}

uint64_t sub_100435A6C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return a2(a3, a4, a5, a6);
}

uint64_t sub_100435A84(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 a7, uint64_t a8)
{
  uint64_t v9;
  __int16 v10;

  v9 = a6;
  v10 = a7;
  return a2(a3, a4, a5, &v9, a8);
}

uint64_t sub_100435AF0(uint64_t a1, __int128 *a2)
{
  uint64_t v4;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v4 = sub_100025158((uint64_t)off_100977890, a1);
  if (v4)
    return sub_10047772C(v4, a1, a2);
  else
    return 7;
}

uint64_t sub_100435B64(unint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  NSObject *v13;
  void **v14;
  const char *v15;
  const char *v16;
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v18;
  void **v19;
  const char *v20;
  const char *v21;
  uint64_t v23;
  char v24;
  uint64_t v25;
  void *__p[2];
  char v27;
  uint8_t buf[4];
  void **v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  const char *v33;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v6 = sub_100025158((uint64_t)off_100977890, a1);
  if (!v6)
    return 7;
  v7 = v6;
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092F130);
  v8 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  if (v8)
  {
    v9 = v8;
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_10092F130);
    v10 = qword_100977B48;
    v11 = sub_100022AE4(v9);
    v12 = sub_10050ADE0(v10, v11);
    v13 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(v9, (uint64_t)__p);
      v14 = (void **)__p[0];
      v15 = "off";
      if (v27 >= 0)
        v14 = __p;
      if (a3 == -1)
        v15 = "on";
      *(_DWORD *)buf = 136446722;
      v29 = v14;
      v30 = 2082;
      v31 = v15;
      if (a2 == 1)
        v16 = "Bluetooth";
      else
        v16 = "Unknown";
      v32 = 2082;
      v33 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is turning power %{public}s for module %{public}s", buf, 0x20u);
      if (v27 < 0)
        operator delete(__p[0]);
    }
    if (sub_100070BDC())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle(qword_100999990);
      if (CTGreenTeaOsLogHandle)
      {
        v18 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_1000340DC(v9, (uint64_t)__p);
          v19 = (void **)__p[0];
          v20 = "off";
          if (v27 >= 0)
            v19 = __p;
          if (a3 == -1)
            v20 = "on";
          *(_DWORD *)buf = 136446722;
          v29 = v19;
          v30 = 2082;
          v31 = v20;
          if (a2 == 1)
            v21 = "Bluetooth";
          else
            v21 = "Unknown";
          v32 = 2082;
          v33 = v21;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is turning power %{public}s for module %{public}s", buf, 0x20u);
          if (v27 < 0)
            operator delete(__p[0]);
        }
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v23 = sub_100027F68();
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (a3 || (v24 & 1) != 0)
  {
    if (a3)
      return sub_100478C04(v7, v12);
  }
  else
  {
    v25 = sub_100065478();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 152))(v25, 3);
  }
  return sub_1004776DC(v7, v12);
}

uint64_t sub_100435E8C(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;

  *a2 = 0;
  v3 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 792))(v3, 1))
    *a2 = -1;
  return 0;
}

uint64_t sub_100435ED0(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  void **v11;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  if (!sub_100025158((uint64_t)off_100977890, a1))
    return 7;
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092F130);
  v2 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  if (v2)
  {
    v3 = v2;
    if (sub_100070BDC())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle(qword_100999990);
      if (CTGreenTeaOsLogHandle)
      {
        v5 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_1000340DC(v3, (uint64_t)__p);
          if (v9 >= 0)
            v6 = __p;
          else
            v6 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v11 = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to power down local device ", buf, 0xCu);
          if (v9 < 0)
            operator delete(__p[0]);
        }
      }
    }
  }
  return sub_100478E04();
}

uint64_t sub_100436048(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  void **v11;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  if (!sub_100025158((uint64_t)off_100977890, a1))
    return 7;
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092F130);
  v2 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  if (v2)
  {
    v3 = v2;
    if (sub_100070BDC())
    {
      CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle(qword_100999990);
      if (CTGreenTeaOsLogHandle)
      {
        v5 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_1000340DC(v3, (uint64_t)__p);
          if (v9 >= 0)
            v6 = __p;
          else
            v6 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v11 = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to reset local device", buf, 0xCu);
          if (v9 < 0)
            operator delete(__p[0]);
        }
      }
    }
  }
  return sub_100478E44();
}

uint64_t sub_1004361C0(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v6;
  uint64_t result;
  const char *p_source;
  uint64_t v9;
  char *__source;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int16 v14;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v6 = sub_100025158((uint64_t)off_100977890, a1);
  if (!v6)
    return 7;
  v14 = 0;
  v13 = 0;
  result = sub_10047914C(v6, (uint64_t)&v13);
  if (!(_DWORD)result)
  {
    __source = 0;
    v11 = 0;
    v12 = 0;
    sub_10046E9BC((unsigned __int8 *)&v13, &__source);
    if (SHIBYTE(v12) < 0)
    {
      if (v11 + 1 > a3)
      {
        v9 = 5;
LABEL_15:
        operator delete(__source);
        return v9;
      }
      p_source = __source;
    }
    else
    {
      if (HIBYTE(v12) >= a3)
        return 5;
      p_source = (const char *)&__source;
    }
    strlcpy(a2, p_source, a3);
    v9 = 0;
    result = 0;
    if (SHIBYTE(v12) < 0)
      goto LABEL_15;
  }
  return result;
}

void sub_1004362C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004362E4(unint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void **v9;
  const char *v10;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  void **v15;
  __int16 v16;
  const char *v17;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v4 = sub_100025158((uint64_t)off_100977890, a1);
  if (!v4)
    return 7;
  v5 = (_QWORD *)v4;
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092F130);
  v6 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  if (v6)
  {
    v7 = v6;
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(v7, (uint64_t)__p);
      v9 = (void **)__p[0];
      v10 = "discoverable";
      if (v13 >= 0)
        v9 = __p;
      if (!a2)
        v10 = "not discoverable";
      *(_DWORD *)buf = 136446466;
      v15 = v9;
      v16 = 2080;
      v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to set local device %s", buf, 0x16u);
      if (v13 < 0)
        operator delete(__p[0]);
    }
  }
  return sub_100476B34(v5, a1, a2 != 0);
}

uint64_t sub_100436488(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v4 = sub_100025158((uint64_t)off_100977890, a1);
  if (!v4)
    return 7;
  v6 = 0;
  result = sub_10047A060(v4, &v6);
  if (!(_DWORD)result)
    *a2 = -v6;
  return result;
}

uint64_t sub_100436510(unint64_t a1, int a2)
{
  _QWORD *v4;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v4 = (_QWORD *)sub_100025158((uint64_t)off_100977890, a1);
  if (v4)
    return sub_100476904(v4, a1, a2 != 0);
  else
    return 7;
}

uint64_t sub_100436588(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v4 = sub_100025158((uint64_t)off_100977890, a1);
  if (!v4)
    return 7;
  v6 = 0;
  result = sub_100479438(v4, &v6);
  if (!(_DWORD)result)
    *a2 = -v6;
  return result;
}

uint64_t sub_100436610(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  BOOL v6;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v4 = sub_100025158((uint64_t)off_100977890, a1);
  if (!v4)
    return 7;
  v6 = 0;
  result = sub_10047A0FC(v4, &v6);
  if (!(_DWORD)result)
    *a2 = -v6;
  return result;
}

uint64_t sub_100436698(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v4 = sub_100025158((uint64_t)off_100977890, a1);
  if (!v4)
    return 7;
  v6 = 0;
  result = sub_10047A194(v4, &v6);
  if (!(_DWORD)result)
    *a2 = -v6;
  return result;
}

uint64_t sub_100436720(unint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  void *__p;
  char *v19;
  uint64_t v20;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v8 = sub_100025158((uint64_t)off_100977890, a1);
  if (!v8)
    return 7;
  __p = 0;
  v19 = 0;
  v20 = 0;
  v9 = sub_10006D830(v8, &__p);
  if (!(_DWORD)v9)
  {
    v10 = 0;
    if (!a4 || __p == v19)
    {
LABEL_20:
      v9 = 0;
      *a3 = v10;
    }
    else
    {
      v11 = (char *)__p + 8;
      v12 = 1;
      while (1)
      {
        v13 = *((_QWORD *)v11 - 1);
        if (qword_1009778E8 != -1)
          dispatch_once(&qword_1009778E8, &stru_10092F170);
        v14 = sub_10046F750((uint64_t)off_1009778E0, a1, v13);
        if (!v14)
          break;
        *a2++ = v14;
        v15 = v12 + 1;
        if (v12 < a4)
        {
          ++v12;
          v16 = v11 == v19;
          v11 += 8;
          if (!v16)
            continue;
        }
        v10 = v15 - 1;
        goto LABEL_20;
      }
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F1A64();
      v9 = 7;
    }
  }
  if (__p)
  {
    v19 = (char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_1004368AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004368CC(unint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  void *__p;
  char *v19;
  uint64_t v20;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v8 = sub_100025158((uint64_t)off_100977890, a1);
  if (!v8)
    return 7;
  __p = 0;
  v19 = 0;
  v20 = 0;
  v9 = sub_10047A22C(v8, (char **)&__p);
  if (!(_DWORD)v9)
  {
    v10 = 0;
    if (!a4 || __p == v19)
    {
LABEL_20:
      v9 = 0;
      *a3 = v10;
    }
    else
    {
      v11 = (char *)__p + 8;
      v12 = 1;
      while (1)
      {
        v13 = *((_QWORD *)v11 - 1);
        if (qword_1009778E8 != -1)
          dispatch_once(&qword_1009778E8, &stru_10092F170);
        v14 = sub_10046F750((uint64_t)off_1009778E0, a1, v13);
        if (!v14)
          break;
        *a2++ = v14;
        v15 = v12 + 1;
        if (v12 < a4)
        {
          ++v12;
          v16 = v11 == v19;
          v11 += 8;
          if (!v16)
            continue;
        }
        v10 = v15 - 1;
        goto LABEL_20;
      }
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F1A64();
      v9 = 7;
    }
  }
  if (__p)
  {
    v19 = (char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_100436A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100436A78(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  BOOL v6;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v4 = sub_100025158((uint64_t)off_100977890, a1);
  if (!v4)
    return 7;
  v6 = 0;
  result = sub_10047A284(v4, &v6);
  if (!(_DWORD)result)
    *a2 = -v6;
  return result;
}

uint64_t sub_100436B00(uint64_t a1, int *a2)
{
  int v4;
  uint64_t result;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  if (!sub_100025158((uint64_t)off_100977890, a1))
    return 7;
  v4 = sub_10047AAD4();
  result = 0;
  *a2 = v4 << 31 >> 31;
  return result;
}

uint64_t sub_100436B78(uint64_t a1)
{
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  if (sub_100025158((uint64_t)off_100977890, a1))
    return sub_100478FC4();
  else
    return 7;
}

uint64_t sub_100436BE0(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v4 = sub_100025158((uint64_t)off_100977890, a1);
  if (!v4)
    return 7;
  v6 = 0;
  result = sub_1004790FC(v4, &v6);
  if (!(_DWORD)result)
    *a2 = -v6;
  return result;
}

uint64_t sub_100436C68(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v8 = sub_100025158((uint64_t)off_100977890, a1);
  if (v8)
    return sub_100479004(v8, a2, a3, a4);
  else
    return 7;
}

uint64_t sub_100436CF4(uint64_t a1, int a2)
{
  uint64_t v4;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v4 = sub_100025158((uint64_t)off_100977890, a1);
  if (v4)
    return sub_10047906C(v4, a2);
  else
    return 7;
}

uint64_t sub_100436D64(uint64_t a1)
{
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  if (sub_100025158((uint64_t)off_100977890, a1))
    return sub_1004790BC();
  else
    return 7;
}

uint64_t sub_100436DCC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;

  if (a1)
  {
    if (qword_100977898 != -1)
      dispatch_once(&qword_100977898, &stru_10092F150);
    if (!sub_100025158((uint64_t)off_100977890, a1))
      return 7;
  }
  v6 = sub_10003BE44();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
  result = 0;
  *a3 = v7;
  return result;
}

uint64_t sub_100436E60(uint64_t a1, const void *a2, size_t a3, const void *a4, unint64_t a5)
{
  uint64_t v10;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v10 = sub_100025158((uint64_t)off_100977890, a1);
  if (v10)
    return sub_1004780B8(v10, a1, a2, a3, a4, a5);
  else
    return 7;
}

uint64_t sub_100436F04(uint64_t a1, const void *a2, size_t a3, const void *a4, size_t a5)
{
  uint64_t v10;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v10 = sub_100025158((uint64_t)off_100977890, a1);
  if (v10)
    return sub_100478398(v10, a1, a2, a3, a4, a5);
  else
    return 7;
}

uint64_t sub_100436FA8(uint64_t a1)
{
  uint64_t v2;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v2 = sub_100025158((uint64_t)off_100977890, a1);
  if (v2)
    return sub_1004777C0(v2);
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F1A90();
  return 7;
}

uint64_t sub_100437058(uint64_t a1)
{
  uint64_t v2;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v2 = sub_100025158((uint64_t)off_100977890, a1);
  if (v2)
    return sub_100476D64(v2, a1);
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F1ABC();
  return 7;
}

uint64_t sub_1004370EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v4 = sub_100025158((uint64_t)off_100977890, a1);
  if (v4)
    return sub_100477884(v4, a1, a2);
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F1AE8();
  return 7;
}

uint64_t sub_100437188(uint64_t a1)
{
  uint64_t v2;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v2 = sub_100025158((uint64_t)off_100977890, a1);
  if (v2)
    return sub_10047791C(v2);
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F1B14();
  return 7;
}

uint64_t sub_100437238(uint64_t a1)
{
  uint64_t v2;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v2 = sub_100025158((uint64_t)off_100977890, a1);
  if (v2)
    return sub_100476D64(v2, a1);
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F1B40();
  return 7;
}

uint64_t sub_1004372CC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v12 = sub_100025158((uint64_t)off_100977890, a1);
  if (v12)
    return sub_1004779C8(v12, a1, a2 != 0, a3, a4, a5, a6);
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F1B6C();
  return 7;
}

uint64_t sub_1004373A4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v6 = sub_100025158((uint64_t)off_100977890, a1);
  if (v6)
    return sub_100477AB0(v6, a1, a2 != 0, a3);
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F1B98();
  return 7;
}

uint64_t sub_100437458(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v12 = sub_100025158((uint64_t)off_100977890, a1);
  if (v12)
    return sub_100477C34(v12, a1, a2, a3, a4, a5, a6);
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F1BC4();
  return 7;
}

uint64_t sub_10043752C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v24;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v24 = sub_100025158((uint64_t)off_100977890, a1);
  if (v24)
    return sub_100477D10(v24, a1, a2 != 0, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F1BF0();
  return 7;
}

uint64_t sub_100437638(uint64_t a1)
{
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  if (sub_100025158((uint64_t)off_100977890, a1))
    return sub_10047A2DC();
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F1C1C();
  return 7;
}

uint64_t sub_1004376C8(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v10 = sub_100025158((uint64_t)off_100977890, a1);
  if (v10)
  {
    if (a5 >= 0xFE)
      v11 = 254;
    else
      v11 = a5;
    return sub_10047A40C(v10, a2, a3, a4, v11);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F1C48();
    return 7;
  }
}

uint64_t sub_100437798(unint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v4 = sub_100025158((uint64_t)off_100977890, a1);
  if (v4)
  {
    v5 = v4;
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_10092F130);
    v6 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
    if (v6)
      return sub_100478E84(v5, v6, a2);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006F1C74();
  }
  return 7;
}

uint64_t sub_100437884(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v4 = sub_100025158((uint64_t)off_100977890, a1);
  if (v4)
  {
    v5 = v4;
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_10092F130);
    v6 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
    if (v6)
      return sub_100478A20(v5, v6, a2);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006F1CA0();
  }
  return 7;
}

uint64_t sub_100437970(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v4 = sub_100025158((uint64_t)off_100977890, a1);
  if (v4)
  {
    v5 = v4;
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_10092F130);
    v6 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
    if (v6)
    {
      v7 = v6;
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_10092F170);
      v8 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
      if (v8)
        return sub_100478B00(v5, v7, v8);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006F1CCC();
  }
  return 7;
}

uint64_t sub_100437A9C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  __int16 v7;
  char v8;

  v8 = 0;
  v7 = 1;
  v2 = sub_1000438A4();
  v3 = sub_100333620(v2);
  v4 = (_QWORD *)sub_1000438A4();
  v5 = 1160;
  if (v3)
    v5 = 1616;
  return (*(uint64_t (**)(_QWORD *, uint64_t, __int16 *, char *))(*v4 + v5))(v4, a1, &v7, &v8);
}

uint64_t sub_100437B04(unint64_t a1, int a2)
{
  uint64_t v4;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v4 = sub_100025158((uint64_t)off_100977890, a1);
  if (v4)
    return sub_100478C60(v4, a1, a2 != 0);
  else
    return 7;
}

uint64_t sub_100437B7C(uint64_t a1, char *a2, unint64_t *a3, unint64_t a4)
{
  uint64_t v8;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v8 = sub_100025158((uint64_t)off_100977890, a1);
  if (v8)
    return sub_100479974(v8, a2, a3, a4);
  else
    return 7;
}

uint64_t sub_100437C00(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  if (!sub_100025158((uint64_t)off_100977890, a1))
    return 7;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10092F190);
  if (sub_100525780(off_100977A90, a2, a3))
    return 0;
  else
    return 12;
}

uint64_t sub_100437CB8(uint64_t a1, int *a2)
{
  int v4;
  uint64_t result;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  if (!sub_100025158((uint64_t)off_100977890, a1))
    return 7;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10092F190);
  v4 = sub_10051F7A4((uint64_t)off_100977A90);
  result = 0;
  *a2 = v4 << 31 >> 31;
  return result;
}

uint64_t sub_100437D60(uint64_t a1, char *a2, size_t a3)
{
  std::string *p_source;
  uint64_t v7;
  std::string __source;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  if (!sub_100025158((uint64_t)off_100977890, a1))
    return 7;
  memset(&__source, 0, sizeof(__source));
  if (qword_10097B1C0 != -1)
    dispatch_once(&qword_10097B1C0, &stru_10092F1B0);
  if (!sub_100507B74((uint64_t)off_10097B1B8, &__source))
  {
    v7 = 1;
    goto LABEL_16;
  }
  if (SHIBYTE(__source.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__source.__r_.__value_.__l.__size_ + 1 <= a3)
    {
      p_source = (std::string *)__source.__r_.__value_.__r.__words[0];
      goto LABEL_15;
    }
LABEL_13:
    v7 = 5;
    goto LABEL_16;
  }
  if (HIBYTE(__source.__r_.__value_.__r.__words[2]) >= a3)
    goto LABEL_13;
  p_source = &__source;
LABEL_15:
  strlcpy(a2, (const char *)p_source, a3);
  v7 = 0;
LABEL_16:
  if (SHIBYTE(__source.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__source.__r_.__value_.__l.__data_);
  return v7;
}

void sub_100437E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100437E9C(uint64_t a1, _WORD *a2)
{
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  if (!sub_100025158((uint64_t)off_100977890, a1))
    return 7;
  if (a2)
  {
    if (qword_100978120 != -1)
      dispatch_once(&qword_100978120, &stru_10092F1D0);
    if (qword_100978118)
      return sub_1002653C8(qword_100978118, a2);
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F1D24();
    return 7;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F1CF8();
  return 3;
}

uint64_t sub_100437F9C(uint64_t a1, uint64_t a2, int a3)
{
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v10[4];
  id v11;
  int v12;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  if (!sub_100025158((uint64_t)off_100977890, a1))
    return 7;
  if (!a2)
    return 3;
  v6 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a2);
  v7 = sub_100475960();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1004380B8;
  v10[3] = &unk_1009173A0;
  v8 = v6;
  v11 = v8;
  v12 = a3;
  sub_100041A34(v7, v10);

  return 0;
}

void sub_100438098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t sub_1004380B8()
{
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_10092F1F0);
  return sub_1005D4838((uint64_t)off_10097AB00);
}

void sub_100438114(id a1)
{
  operator new();
}

void sub_100438154()
{
  operator delete();
}

void sub_100438178(id a1)
{
  operator new();
}

void sub_1004381B8()
{
  operator delete();
}

void sub_1004381DC(id a1)
{
  operator new();
}

void sub_10043821C()
{
  operator delete();
}

void sub_100438240(id a1)
{
  operator new();
}

void sub_100438280()
{
  operator delete();
}

void sub_1004382A4(id a1)
{
  operator new();
}

void sub_1004382E4()
{
  operator delete();
}

void sub_100438308(id a1)
{
  operator new();
}

void sub_100438358()
{
  operator delete();
}

void sub_10043837C(id a1)
{
  operator new();
}

void sub_1004383BC()
{
  operator delete();
}

uint64_t sub_1004383E0(int *a1)
{
  void **v2;
  size_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  const char *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  _QWORD *v12;
  void **v13;
  size_t v14;
  _QWORD *v15;
  void **v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  void *__p[2];
  char v24;
  __int128 v25;
  _OWORD v26[4];
  void *v27[2];
  __int128 v28;
  __int128 v29;
  _BYTE v30[144];
  uint64_t v31;
  char v32;

  v31 = 0;
  v29 = 0u;
  memset(v30, 0, sizeof(v30));
  *(_OWORD *)v27 = 0u;
  v28 = 0u;
  memset(v26, 0, sizeof(v26));
  v25 = 0u;
  sub_1002613AC((uint64_t)&v25);
  v2 = __p;
  sub_10043E5F8(*((_QWORD *)a1 + 1), __p);
  if (v24 < 0)
    v2 = (void **)__p[0];
  v3 = strlen((const char *)v2);
  v4 = sub_1002614D8(v26, (uint64_t)v2, v3);
  v5 = sub_1002614D8(v4, (uint64_t)", ", 2);
  v6 = *a1;
  if (v6 > 3)
    v7 = "Unknown";
  else
    v7 = off_10092F4F8[v6];
  v8 = strlen(v7);
  v9 = sub_1002614D8(v5, (uint64_t)v7, v8);
  v10 = sub_1002614D8(v9, (uint64_t)", ", 2);
  if (*((_BYTE *)a1 + 16))
    v11 = "Incoming";
  else
    v11 = "Outgoing";
  v12 = sub_1002614D8(v10, (uint64_t)v11, 8);
  sub_1002614D8(v12, (uint64_t)", connected: [ ", 15);
  if (v24 < 0)
    operator delete(__p[0]);
  v13 = __p;
  sub_10049B150(a1 + 6);
  if (v24 < 0)
    v13 = (void **)__p[0];
  v14 = strlen((const char *)v13);
  v15 = sub_1002614D8(v26, (uint64_t)v13, v14);
  sub_1002614D8(v15, (uint64_t)"], pending: [ ", 14);
  if (v24 < 0)
    operator delete(__p[0]);
  v16 = __p;
  sub_10049B150(a1 + 5);
  if (v24 < 0)
    v16 = (void **)__p[0];
  v17 = strlen((const char *)v16);
  v18 = sub_1002614D8(v26, (uint64_t)v16, v17);
  v19 = sub_1002614D8(v18, (uint64_t)"], ", 3);
  v32 = *((_BYTE *)a1 + 17);
  v20 = sub_1002614D8(v19, (uint64_t)&v32, 1);
  sub_1002614D8(v20, (uint64_t)" attempt(s)", 11);
  if (v24 < 0)
    operator delete(__p[0]);
  std::stringbuf::str((char *)v26 + 8);
  *(_QWORD *)((char *)&v26[-1]
  *(_QWORD *)&v26[0] = v21;
  if (SHIBYTE(v28) < 0)
    operator delete(v27[1]);
  std::streambuf::~streambuf((char *)v26 + 8);
  return std::ios::~ios(v30);
}

void sub_100438674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_1006CC5C8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1004386B4(int *a1)
{
  NSObject *v2;
  void **v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  void **v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  std::string *p_buf;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  uint64_t v15;
  int v17;
  std::string *v18;
  std::string buf;
  void *__p[2];
  __int128 v21;
  __int128 v22;
  void *v23[2];
  __int128 v24;
  void *v25[2];
  _OWORD v26[3];
  __int128 v27;
  uint64_t v28;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(*((_QWORD *)a1 + 1), __p);
    if ((SBYTE7(v21) & 0x80u) == 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Device %{public}s", (uint8_t *)&buf, 0xCu);
    if (SBYTE7(v21) < 0)
      operator delete(__p[0]);
    v2 = qword_1009997E8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *a1;
    if (v4 > 3)
      v5 = "Unknown";
    else
      v5 = off_10092F4F8[v4];
    LODWORD(__p[0]) = 136446210;
    *(void **)((char *)__p + 4) = (void *)v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    State: %{public}s", (uint8_t *)__p, 0xCu);
    v2 = qword_1009997E8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_BYTE *)a1 + 16))
      v6 = "Incoming";
    else
      v6 = "Outgoing";
    LODWORD(__p[0]) = 136446210;
    *(void **)((char *)__p + 4) = (void *)v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    Direction: %{public}s", (uint8_t *)__p, 0xCu);
    v2 = qword_1009997E8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_10049B150(a1 + 6);
    if ((SBYTE7(v21) & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    Connected services: %{public}s", (uint8_t *)&buf, 0xCu);
    if (SBYTE7(v21) < 0)
      operator delete(__p[0]);
    v2 = qword_1009997E8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_10049B150(a1 + 5);
    v8 = (SBYTE7(v21) & 0x80u) == 0 ? __p : (void **)__p[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    Pending services: %{public}s", (uint8_t *)&buf, 0xCu);
    if (SBYTE7(v21) < 0)
      operator delete(__p[0]);
  }
  v28 = 0;
  v27 = 0u;
  memset(v26, 0, sizeof(v26));
  v24 = 0u;
  *(_OWORD *)v25 = 0u;
  v22 = 0u;
  *(_OWORD *)v23 = 0u;
  *(_OWORD *)__p = 0u;
  v21 = 0u;
  sub_1005BCCCC((uint64_t)__p + 1);
  BYTE2(v21) = 0;
  BYTE4(v21) = 0;
  BYTE2(v23[0]) = 0;
  BYTE4(v23[0]) = 0;
  DWORD1(v26[1]) = 0;
  v22 = 0uLL;
  *((_QWORD *)&v21 + 1) = 0;
  LOBYTE(v23[0]) = 0;
  v24 = 0uLL;
  v23[1] = 0;
  LOBYTE(v25[0]) = 0;
  memset(v26, 0, 19);
  v25[1] = 0;
  BYTE8(v26[1]) = 1;
  BYTE2(v28) = 0;
  *(_QWORD *)((char *)&v26[1] + 14) = 0;
  *(_QWORD *)((char *)&v26[1] + 9) = 0;
  v27 = 0uLL;
  *((_QWORD *)&v26[2] + 1) = 0;
  LOBYTE(v28) = 0;
  memset(&buf, 0, sizeof(buf));
  if (sub_1004419F4(*((_QWORD *)a1 + 1), (uint64_t)__p)
    && LOBYTE(v25[0])
    && (std::string::operator=(&buf, (const std::string *)&v25[1]), LOBYTE(v25[0])))
  {
    v9 = qword_1009997E8;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_41;
    p_buf = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    v17 = 136446210;
    v18 = p_buf;
    v12 = "statedump:    Make of device is: %{public}s";
    v13 = v9;
    v14 = 12;
  }
  else
  {
    v15 = qword_1009997E8;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_41;
    LOWORD(v17) = 0;
    v12 = "statedump:    Make of device is unknown";
    v13 = v15;
    v14 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v17, v14);
LABEL_41:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26[0]) < 0)
    operator delete(v25[1]);
  if (SHIBYTE(v24) < 0)
    operator delete(v23[1]);
  if (SHIBYTE(v22) < 0)
    operator delete(*((void **)&v21 + 1));
  return nullsub_90((char *)__p + 1, v10);
}

void sub_100438AF0(_Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_10026B73C((uint64_t)&a18, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_100438B1C(uint64_t a1)
{
  *(_QWORD *)a1 = off_10092F220;
  *(_QWORD *)(a1 + 8) = off_10092F270;
  *(_QWORD *)(a1 + 16) = &off_10092F2A0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_1000160D0(a1 + 56);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  return a1;
}

void sub_100438B78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100438B9C(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_10092F220;
  a1[1] = off_10092F270;
  a1[2] = &off_10092F2A0;
  sub_100438C24((uint64_t)a1);
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  sub_100069BDC(a1 + 7);
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_100438C00(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 120);
  if (v3)
  {
    *(_QWORD *)(v1 + 128) = v3;
    operator delete(v3);
  }
  sub_1006F1D50(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100438C24(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 56);
  v3 = *(_QWORD **)(a1 + 120);
  v2 = *(_QWORD **)(a1 + 128);
  if (v3 != v2)
  {
    do
    {
      if (*v3)
        operator delete();
      ++v3;
    }
    while (v3 != v2);
    v3 = *(_QWORD **)(a1 + 120);
  }
  *(_QWORD *)(a1 + 128) = v3;
  *(_WORD *)(a1 + 144) = 0;
  return sub_100034234((uint64_t)v5);
}

void sub_100438CA8(_QWORD *a1)
{
  sub_100438B9C(a1);
  operator delete();
}

void sub_100438CCC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10092F418);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1 + 8);
  v2 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 424))(v2))
  {
    v5 = 0;
    v3 = sub_100038E50();
    (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v3 + 152))(v3, &v5);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, v5);
    v4 = sub_100038E50();
    sub_10043B4A8(v4 + 728, a1 + 16);
  }
}

void sub_100438D80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 424))(v2))
  {
    v3 = sub_100038E50();
    sub_1002B43D4(v3 + 728, a1 + 16);
  }
}

uint64_t sub_100438DC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  sub_100438C24(a1);
  v1 = sub_10003BE44();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 408))(v1);
  if ((_DWORD)result)
  {
    v3 = sub_1000438A4();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 1080))(v3, 4, 12, 1);
  }
  return result;
}

uint64_t sub_100438E10(uint64_t a1)
{
  return sub_100438DC8(a1 - 8);
}

uint64_t sub_100438E1C(uint64_t a1)
{
  return sub_100438C24(a1 - 8);
}

BOOL sub_100438E24(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  _DWORD *v5;
  _BOOL8 v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 56);
  for (i = *(_QWORD *)(a1 + 120); ; i += 8)
  {
    if (i == *(_QWORD *)(a1 + 128))
    {
      v6 = 0;
      goto LABEL_9;
    }
    v5 = *(_DWORD **)i;
    if (*(_QWORD *)(*(_QWORD *)i + 8) == a2)
      break;
  }
  v6 = *v5 == 2 || v5[6] != 0;
LABEL_9:
  sub_100034234((uint64_t)v8);
  return v6;
}

BOOL sub_100438EB4(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  _BOOL8 v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 56);
  for (i = *(_QWORD *)(a1 + 120); ; i += 8)
  {
    if (i == *(_QWORD *)(a1 + 128))
    {
      v5 = 1;
      goto LABEL_7;
    }
    if (*(_QWORD *)(*(_QWORD *)i + 8) == a2)
      break;
  }
  v5 = **(_DWORD **)i == 0;
LABEL_7:
  sub_100034234((uint64_t)v7);
  return v5;
}

uint64_t sub_100438F30(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 56);
  for (i = *(_QWORD *)(a1 + 120); ; i += 8)
  {
    if (i == *(_QWORD *)(a1 + 128))
    {
      v3 = 0;
      goto LABEL_8;
    }
    if (**(_DWORD **)i == 2 || *(_DWORD *)(*(_QWORD *)i + 24))
      break;
  }
  v3 = 1;
LABEL_8:
  sub_100034234((uint64_t)v5);
  return v3;
}

uint64_t sub_100438FA8(uint64_t a1)
{
  _DWORD **i;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 56);
  for (i = *(_DWORD ***)(a1 + 120); ; ++i)
  {
    if (i == *(_DWORD ***)(a1 + 128))
    {
      v3 = 0;
      goto LABEL_7;
    }
    if ((**i | 2) == 3)
      break;
  }
  v3 = 1;
LABEL_7:
  sub_100034234((uint64_t)v5);
  return v3;
}

uint64_t sub_10043901C(uint64_t a1, char **a2)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[2];

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 56);
  v5 = *(_QWORD *)(a1 + 120);
  for (i = *(_QWORD *)(a1 + 128); v5 != i; v5 += 8)
  {
    if ((**(_DWORD **)v5 | 2) == 3)
    {
      v6 = *(_QWORD *)(*(_QWORD *)v5 + 8);
      v8 = a2[1];
      v7 = (unint64_t)a2[2];
      if ((unint64_t)v8 >= v7)
      {
        v10 = (v8 - *a2) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          abort();
        v11 = v7 - (_QWORD)*a2;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)sub_10007ABA0((uint64_t)(a2 + 2), v13);
        else
          v14 = 0;
        v15 = &v14[8 * v10];
        *(_QWORD *)v15 = v6;
        v9 = v15 + 8;
        v17 = *a2;
        v16 = a2[1];
        if (v16 != *a2)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          v16 = *a2;
        }
        *a2 = v15;
        a2[1] = v9;
        a2[2] = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v8 = v6;
        v9 = v8 + 8;
      }
      a2[1] = v9;
      i = *(_QWORD *)(a1 + 128);
    }
  }
  if (qword_10097AB58 != -1)
    dispatch_once(&qword_10097AB58, &stru_10092F438);
  sub_1006109F8((uint64_t)off_10097AB50, (void **)a2);
  if (qword_10097ADA0 != -1)
    dispatch_once(&qword_10097ADA0, &stru_10092F458);
  sub_100573174((uint64_t)off_10097AD98, (void **)a2);
  return sub_100034234((uint64_t)v20);
}

void sub_1004391CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004391E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 56);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  while (1)
  {
    if (v4 == v5)
    {
      v6 = 0;
      goto LABEL_7;
    }
    if (*(_QWORD *)(*(_QWORD *)v4 + 8) == a2)
      break;
    v4 += 8;
  }
  LODWORD(v5) = *(_BYTE *)(*(_QWORD *)v4 + 16) == 0;
  v6 = 1;
LABEL_7:
  v7 = v6 & v5;
  sub_100034234((uint64_t)v9);
  return v7;
}

uint64_t sub_10043926C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 56);
  v4 = *(uint64_t **)(a1 + 120);
  v5 = *(uint64_t **)(a1 + 128);
  while (v4 != v5)
  {
    v6 = *v4;
    if (*(_QWORD *)(*v4 + 8) == a2)
      goto LABEL_6;
    ++v4;
  }
  v6 = 0;
LABEL_6:
  sub_100034234((uint64_t)v8);
  return v6;
}

BOOL sub_1004392D8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t i;
  _BOOL8 v7;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 56);
  for (i = *(_QWORD *)(a1 + 120); ; i += 8)
  {
    if (i == *(_QWORD *)(a1 + 128))
    {
      v7 = 0;
      goto LABEL_7;
    }
    if (*(_QWORD *)(*(_QWORD *)i + 8) == a2)
      break;
  }
  v7 = (*(_DWORD *)(*(_QWORD *)i + 24) & a3) != 0;
LABEL_7:
  sub_100034234((uint64_t)v9);
  return v7;
}

uint64_t sub_100439360(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 56);
  for (i = *(_QWORD *)(a1 + 120); ; i += 8)
  {
    if (i == *(_QWORD *)(a1 + 128))
    {
      v5 = 0;
      goto LABEL_7;
    }
    if (*(_QWORD *)(*(_QWORD *)i + 8) == a2)
      break;
  }
  v5 = *(unsigned int *)(*(_QWORD *)i + 20);
LABEL_7:
  sub_100034234((uint64_t)v7);
  return v5;
}

uint64_t sub_1004393D4(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 56);
  for (i = *(_QWORD *)(a1 + 120); ; i += 8)
  {
    if (i == *(_QWORD *)(a1 + 128))
    {
      v5 = 0;
      goto LABEL_7;
    }
    if (*(_QWORD *)(*(_QWORD *)i + 8) == a2)
      break;
  }
  v5 = *(unsigned int *)(*(_QWORD *)i + 24);
LABEL_7:
  sub_100034234((uint64_t)v7);
  return v5;
}

uint64_t sub_100439448(uint64_t a1)
{
  char v2;
  uint64_t v3;
  Block_layout *v4;
  _QWORD v6[2];

  v2 = sub_100438FA8(a1);
  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 56);
  if (*(_BYTE *)(a1 + 145))
  {
    if ((v2 & 1) == 0 && !*(_BYTE *)(a1 + 144))
    {
      *(_BYTE *)(a1 + 145) = 0;
      sub_100034264((uint64_t)v6);
      v3 = sub_10006BBEC();
      v4 = &stru_10092F2A8;
LABEL_8:
      sub_100041A34(v3, v4);
    }
  }
  else if ((v2 & 1) != 0 || *(_BYTE *)(a1 + 144))
  {
    *(_BYTE *)(a1 + 145) = 1;
    sub_100034264((uint64_t)v6);
    v3 = sub_10006BBEC();
    v4 = &stru_10092F2C8;
    goto LABEL_8;
  }
  return sub_100034234((uint64_t)v6);
}

void sub_1004394E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1004394FC(id a1)
{
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_10092F478);
  sub_100439540((os_unfair_lock_s *)off_100978188, 0);
}

void sub_100439540(os_unfair_lock_s *a1, int a2)
{
  NSObject *v4;
  const char *v5;
  _QWORD v6[4];
  char v7;
  uint8_t buf[4];
  const char *v9;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "not in progress";
    if (a2)
      v5 = "in progress";
    *(_DWORD *)buf = 136315138;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'connection %s' notification", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10043AE9C;
  v6[3] = &unk_10092F348;
  v7 = a2;
  sub_10043ADE0(a1 + 6, v6);
}

void sub_100439640(id a1)
{
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_10092F478);
  sub_100439540((os_unfair_lock_s *)off_100978188, 1);
}

uint64_t sub_100439684(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 56);
  *(_BYTE *)(a1 + 144) = 1;
  sub_100034264((uint64_t)v3);
  sub_100439448(a1);
  return sub_100034234((uint64_t)v3);
}

void sub_1004396D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004396EC(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 56);
  *(_BYTE *)(a1 + 144) = 0;
  sub_100034264((uint64_t)v3);
  sub_100439448(a1);
  return sub_100034234((uint64_t)v3);
}

void sub_10043973C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100439750(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 56);
  for (i = *(_QWORD *)(a1 + 120); ; i += 8)
  {
    if (i == *(_QWORD *)(a1 + 128))
      operator new();
    if (*(_QWORD *)(*(_QWORD *)i + 8) == a2)
      break;
  }
  sub_100034264((uint64_t)v6);
  sub_100439448(a1);
  return sub_100034234((uint64_t)v6);
}

void sub_1004398AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004398C0(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int64_t v12;
  _QWORD v14[2];

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 56);
  v7 = *(char **)(a1 + 120);
  v6 = *(char **)(a1 + 128);
  if (v7 != v6)
  {
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)&v7[v8];
      if (*(unsigned __int8 **)(v9 + 8) == a2)
        break;
      v8 += 8;
      if (&v7[v8] == v6)
        goto LABEL_16;
    }
    if (!*(_BYTE *)(v9 + 17) && !*(_DWORD *)(v9 + 24))
    {
      v10 = &v7[v8];
      v11 = &v7[v8 + 8];
      v12 = v6 - v11;
      if (v6 != v11)
        memmove(&v7[v8], v11, v6 - v11);
      *(_QWORD *)(a1 + 128) = &v10[v12];
      operator delete();
    }
    if (a3 && *(_BYTE *)(a1 + 144))
    {
      sub_100034264((uint64_t)v14);
      if (qword_100978150 != -1)
        dispatch_once(&qword_100978150, &stru_10092F498);
      sub_1005B76D8((uint64_t)off_100978148, a2, a3);
      sub_100034188((uint64_t)v14);
    }
  }
LABEL_16:
  sub_100034264((uint64_t)v14);
  sub_100439448(a1);
  return sub_100034234((uint64_t)v14);
}

void sub_1004399FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100439A10(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5)
{
  NSObject *v10;
  const char *v11;
  const char *v12;
  void **v13;
  char *v14;
  const char *v15;
  void **v16;
  uint64_t v17;
  int v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t *i;
  uint64_t v23;
  NSObject *v24;
  int v25;
  const char *v26;
  void **v27;
  int v28;
  int v29;
  NSObject *v30;
  _QWORD v32[2];
  void *__p[2];
  char v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  void **v40;

  v10 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (a5)
      v11 = "incoming";
    else
      v11 = "outgoing";
    v12 = sub_1004809B4(a4);
    sub_10043E5F8(a2, __p);
    if (v34 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    *(_DWORD *)buf = 136446722;
    v36 = (void *)v11;
    v37 = 2082;
    v38 = (void *)v12;
    v39 = 2082;
    v40 = v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received %{public}s connection attempt for \"%{public}s\" profile on device %{public}s", buf, 0x20u);
    if (v34 < 0)
      operator delete(__p[0]);
    v10 = qword_1009997E8;
  }
  if (os_signpost_enabled(v10))
  {
    v14 = a5 ? "incoming" : "outgoing";
    v15 = sub_1004809B4(a4);
    sub_10043E5F8(a2, __p);
    v16 = v34 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446722;
    v36 = v14;
    v37 = 2082;
    v38 = (void *)v15;
    v39 = 2082;
    v40 = v16;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BTSignPost", "Received %{public}s connection attempt for \"%{public}s\" profile on device %{public}s", buf, 0x20u);
    if (v34 < 0)
      operator delete(__p[0]);
  }
  v17 = sub_10003BE44();
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 352))(v17) ^ 1;
  if (a4 != 14)
    LOBYTE(v18) = 1;
  if ((v18 & 1) == 0)
  {
    v19 = objc_alloc_init((Class)CARConnectionTimeStore);
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[CARConnectionEvent eventWithName:type:date:payload:](CARConnectionEvent, "eventWithName:type:date:payload:", CARBluetoothWirelessIAPProfileConnectionAttempt, 1, v20, 0));

    objc_msgSend(v19, "syncSendConnectionEvent:completion:", v21, &stru_10092F308);
  }
  v32[0] = 0;
  v32[1] = 0;
  sub_10003415C((uint64_t)v32, a1 + 56);
  for (i = *(uint64_t **)(a1 + 120); ; ++i)
  {
    if (i == *(uint64_t **)(a1 + 128))
      operator new();
    v23 = *i;
    if (*(_QWORD *)(*i + 8) == a2)
      break;
  }
  v24 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v25 = *(unsigned __int8 *)(v23 + 16);
    sub_10043E5F8(a2, __p);
    v26 = "incoming";
    if (!v25)
      v26 = "outgoing";
    v27 = (void **)__p[0];
    v28 = *(unsigned __int8 *)(v23 + 17);
    if (v34 >= 0)
      v27 = __p;
    *(_DWORD *)buf = 136446722;
    v36 = (void *)v26;
    v37 = 2082;
    v38 = v27;
    v39 = 1024;
    LODWORD(v40) = v28;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Already tracking an %{public}s connection for device %{public}s with %d pending attempt(s)", buf, 0x1Cu);
    if (v34 < 0)
      operator delete(__p[0]);
  }
  v29 = *(_DWORD *)(v23 + 20);
  if ((v29 & a3) != 0)
  {
    v30 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v36) = a3;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Ignoring duplicate connection attempt for service 0x%x", buf, 8u);
    }
  }
  else
  {
    *(_DWORD *)(v23 + 20) = v29 | a3;
    *(_BYTE *)(v23 + 16) = a5;
    *(_DWORD *)v23 = 1;
    ++*(_BYTE *)(v23 + 17);
    sub_1004538B0(a2);
    sub_100034264((uint64_t)v32);
    sub_100439448(a1);
  }
  return sub_100034234((uint64_t)v32);
}

void sub_100439F00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100439F48(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5)
{
  NSObject *v10;
  const char *v11;
  _BYTE *v12;
  const char *v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  id v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  NSObject *v29;
  NSObject *v30;
  int v31;
  int v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  _BYTE *v38;
  _BYTE *v39;
  int v40;
  _BYTE *v41;
  int v42;
  int v43;
  _QWORD v44[2];
  uint64_t v45;
  void *v46;
  _BYTE __p[12];
  __int16 v48;
  int v49;
  char v50;
  _BYTE buf[12];
  __int16 v52;
  _BYTE *v53;
  __int16 v54;
  int v55;

  v10 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v11 = sub_1004809B4(a4);
    sub_10043E5F8(a2, __p);
    if (v50 >= 0)
      v12 = __p;
    else
      v12 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v11;
    v52 = 2082;
    v53 = v12;
    v54 = 1024;
    v55 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received connection result for \"%{public}s\" profile on device %{public}s - result was %d", buf, 0x1Cu);
    if (v50 < 0)
      operator delete(*(void **)__p);
    v10 = qword_1009997E8;
  }
  if (os_signpost_enabled(v10))
  {
    v13 = sub_1004809B4(a4);
    sub_10043E5F8(a2, __p);
    v14 = v50 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v13;
    v52 = 2082;
    v53 = v14;
    v54 = 1024;
    v55 = a5;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BTSignPost", "Received connection result for \"%{public}s\" profile on device %{public}s - result was %d", buf, 0x1Cu);
    if (v50 < 0)
      operator delete(*(void **)__p);
  }
  v15 = sub_10003BE44();
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 352))(v15) ^ 1;
  if (a4 != 14)
    LOBYTE(v16) = 1;
  if ((v16 & 1) == 0)
  {
    v17 = objc_alloc_init((Class)CARConnectionTimeStore);
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v19 = CARBluetoothWirelessIAPProfileConnectionSuccess;
    v45 = CARBluetoothWirelessIAPProfileConnectionSuccess;
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a5));
    v46 = v20;
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v46, &v45, 1));
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[CARConnectionEvent eventWithName:type:date:payload:](CARConnectionEvent, "eventWithName:type:date:payload:", v19, 1, v18, v21));

    objc_msgSend(v17, "syncSendConnectionEvent:completion:", v22, &stru_10092F328);
  }
  v44[0] = 0;
  v44[1] = 0;
  sub_10003415C((uint64_t)v44, a1 + 56);
  v23 = *(_QWORD *)(a1 + 120);
  v24 = *(_QWORD *)(a1 + 128);
  if (v23 == v24)
  {
LABEL_22:
    if (!(_DWORD)a5)
      operator new();
LABEL_49:
    sub_10006BBEC();
    operator new();
  }
  v25 = -v23;
  while (1)
  {
    v26 = *(_QWORD *)v23;
    if (*(_QWORD *)(*(_QWORD *)v23 + 8) == a2)
      break;
    v23 += 8;
    v25 -= 8;
    if (v23 == v24)
      goto LABEL_22;
  }
  v27 = *(_DWORD *)(v26 + 20);
  if ((v27 & a3) != 0)
  {
    *(_DWORD *)(v26 + 20) = v27 & ~a3;
    v28 = *(_BYTE *)(v26 + 17);
    if (v28)
    {
LABEL_26:
      *(_BYTE *)(v26 + 17) = --v28;
      goto LABEL_33;
    }
    v30 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
    {
      sub_1004383E0((int *)v26);
      if (v54 >= 0)
        v38 = buf;
      else
        v38 = *(_BYTE **)buf;
      *(_DWORD *)__p = 136446210;
      *(_QWORD *)&__p[4] = v38;
      _os_log_fault_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "Found mismatch between connection attempts and connection results - dumping connection state:\n%{public}s", __p, 0xCu);
      if (SHIBYTE(v54) < 0)
        operator delete(*(void **)buf);
      v28 = *(_BYTE *)(v26 + 17);
      if (v28)
        goto LABEL_26;
    }
    else
    {
      v28 = 0;
    }
LABEL_33:
    if (!(_DWORD)a5)
    {
      v32 = *(_DWORD *)(v26 + 20);
      *(_DWORD *)(v26 + 24) |= a3;
      if (v32)
      {
        if (v28)
          goto LABEL_49;
      }
      else if (!v28)
      {
LABEL_48:
        *(_DWORD *)v26 = 2;
        goto LABEL_49;
      }
      v36 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      {
        v43 = v32;
        sub_10049B150(&v43);
        v41 = v54 >= 0 ? buf : *(_BYTE **)buf;
        v42 = *(unsigned __int8 *)(v26 + 17);
        *(_DWORD *)__p = 136446466;
        *(_QWORD *)&__p[4] = v41;
        v48 = 1024;
        v49 = v42;
        _os_log_fault_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "Found mismatch between pending services(%{public}s) and pending attempts (%d)", __p, 0x12u);
        if (SHIBYTE(v54) < 0)
          operator delete(*(void **)buf);
      }
      goto LABEL_48;
    }
    v31 = *(_DWORD *)(v26 + 20);
    if (v31)
    {
      if (v28)
        goto LABEL_49;
    }
    else if (!v28)
    {
LABEL_42:
      if (!*(_DWORD *)(v26 + 24))
      {
        v34 = *(_QWORD *)(a1 + 128);
        v35 = v34 - (8 - v25);
        if (v34 != 8 - v25)
          memmove((void *)-v25, (const void *)(8 - v25), v34 - (8 - v25));
        *(_QWORD *)(a1 + 128) = v35 - v25;
        operator delete();
      }
      goto LABEL_48;
    }
    v33 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
    {
      v43 = v31;
      sub_10049B150(&v43);
      v39 = v54 >= 0 ? buf : *(_BYTE **)buf;
      v40 = *(unsigned __int8 *)(v26 + 17);
      *(_DWORD *)__p = 136446466;
      *(_QWORD *)&__p[4] = v39;
      v48 = 1024;
      v49 = v40;
      _os_log_fault_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "Found mismatch between pending services(%{public}s) and pending attempts (%d)", __p, 0x12u);
      if (SHIBYTE(v54) < 0)
        operator delete(*(void **)buf);
    }
    goto LABEL_42;
  }
  v29 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
    sub_1006F1D8C(a3, v29);
  sub_100034234((uint64_t)v44);
  return 0;
}

void sub_10043A6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10043A70C(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5, int a6)
{
  NSObject *v12;
  const char *v13;
  void **v14;
  const char *v15;
  void **v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  _BOOL8 v22;
  int v24;
  NSObject *v25;
  int v26;
  char *v27;
  char *v28;
  int64_t v29;
  void *__p[2];
  char v31;
  int v32;
  uint8_t v33[16];
  uint8_t buf[4];
  _BYTE v35[10];
  void **v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;

  v32 = a3;
  v12 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v13 = sub_1004809B4(a4);
    sub_10043E5F8(a2, __p);
    if (v31 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)v35 = v13;
    *(_WORD *)&v35[8] = 2082;
    v36 = v14;
    v37 = 1024;
    v38 = a5;
    v39 = 1024;
    v40 = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received disconnection result for \"%{public}s\" profile on device %{public}s - result was %d - reason was %d", buf, 0x22u);
    if (v31 < 0)
      operator delete(__p[0]);
    v12 = qword_1009997E8;
  }
  if (os_signpost_enabled(v12))
  {
    v15 = sub_1004809B4(a4);
    sub_10043E5F8(a2, __p);
    v16 = v31 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)v35 = v15;
    *(_WORD *)&v35[8] = 2082;
    v36 = v16;
    v37 = 1024;
    v38 = a5;
    v39 = 1024;
    v40 = a6;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BTSignPost", "Received disconnection result for \"%{public}s\" profile on device %{public}s - result was %d - reason was %d", buf, 0x22u);
    if (v31 < 0)
      operator delete(__p[0]);
  }
  __p[0] = 0;
  __p[1] = 0;
  sub_10003415C((uint64_t)__p, a1 + 56);
  v18 = *(char **)(a1 + 120);
  v17 = *(char **)(a1 + 128);
  if (v18 == v17)
  {
LABEL_18:
    if (!a5)
    {
      v21 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      {
        sub_10049B150(&v32);
        sub_1006F1E00((char *)buf, v33, v21);
      }
      sub_100034264((uint64_t)__p);
      sub_10006BBEC();
      operator new();
    }
    v20 = 0;
LABEL_24:
    v22 = v20 == 0;
    goto LABEL_25;
  }
  v19 = 0;
  while (1)
  {
    v20 = *(_QWORD *)&v18[v19];
    if (*(_QWORD *)(v20 + 8) == a2)
      break;
    v19 += 8;
    if (&v18[v19] == v17)
      goto LABEL_18;
  }
  if (a5)
    goto LABEL_24;
  v24 = *(_DWORD *)(v20 + 24) & ~a3;
  *(_DWORD *)(v20 + 24) = v24;
  if (!v24 && !*(_DWORD *)(v20 + 20))
  {
    v27 = &v18[v19];
    v28 = &v18[v19 + 8];
    v29 = v17 - v28;
    if (v17 != v28)
      memmove(&v18[v19], v28, v17 - v28);
    *(_QWORD *)(a1 + 128) = &v27[v29];
    operator delete();
  }
  v25 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v26 = *(_DWORD *)(v20 + 20);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v35 = v24;
    *(_WORD *)&v35[4] = 1024;
    *(_DWORD *)&v35[6] = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "There is at least one connected (0x%08x) or pending (0x%08x) service left", buf, 0xEu);
  }
  v22 = 0;
LABEL_25:
  sub_100034234((uint64_t)__p);
  return v22;
}

void sub_10043AA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10043AAB0(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  const char *v4;
  _OWORD **v5;
  _OWORD **v6;
  char *v7;
  _OWORD *v8;
  __int128 v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  int *v21;
  int *v22;
  _QWORD v23[2];
  __int128 buf;
  char *v25;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ----------------- Connection Manager ----------------", (uint8_t *)&buf, 2u);
    v2 = qword_1009997E8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 144))
      v3 = "Yes";
    else
      v3 = "No";
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Pairing in progress: %{public}s", (uint8_t *)&buf, 0xCu);
    v2 = qword_1009997E8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 145))
      v4 = "Yes";
    else
      v4 = "No";
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Connection in progress: %{public}s", (uint8_t *)&buf, 0xCu);
    v2 = qword_1009997E8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Connections:", (uint8_t *)&buf, 2u);
  }
  buf = 0uLL;
  v25 = 0;
  v23[0] = 0;
  v23[1] = 0;
  sub_10003415C((uint64_t)v23, a1 + 56);
  v5 = *(_OWORD ***)(a1 + 120);
  v6 = *(_OWORD ***)(a1 + 128);
  if (v5 != v6)
  {
    v7 = (char *)*((_QWORD *)&buf + 1);
    do
    {
      v8 = *v5;
      if (v7 >= v25)
      {
        v10 = (char *)buf;
        v11 = (uint64_t)&v7[-buf] >> 5;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 59)
          abort();
        v13 = (uint64_t)&v25[-buf];
        if ((uint64_t)&v25[-buf] >> 4 > v12)
          v12 = v13 >> 4;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
          v14 = 0x7FFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)sub_1002A7408((uint64_t)&v25, v14);
          v7 = (char *)*((_QWORD *)&buf + 1);
          v10 = (char *)buf;
        }
        else
        {
          v15 = 0;
        }
        v16 = v8[1];
        v17 = &v15[32 * v11];
        *(_OWORD *)v17 = *v8;
        *((_OWORD *)v17 + 1) = v16;
        if (v7 == v10)
        {
          v19 = &v15[32 * v11];
        }
        else
        {
          v18 = &v15[32 * v11];
          do
          {
            v19 = v18 - 32;
            v20 = *((_OWORD *)v7 - 1);
            *((_OWORD *)v18 - 2) = *((_OWORD *)v7 - 2);
            *((_OWORD *)v18 - 1) = v20;
            v7 -= 32;
            v18 -= 32;
          }
          while (v7 != v10);
        }
        v7 = v17 + 32;
        *(_QWORD *)&buf = v19;
        *((_QWORD *)&buf + 1) = v17 + 32;
        v25 = &v15[32 * v14];
        if (v10)
          operator delete(v10);
      }
      else
      {
        v9 = v8[1];
        *(_OWORD *)v7 = *v8;
        *((_OWORD *)v7 + 1) = v9;
        v7 += 32;
      }
      *((_QWORD *)&buf + 1) = v7;
      ++v5;
    }
    while (v5 != v6);
  }
  sub_100034234((uint64_t)v23);
  v22 = (int *)*((_QWORD *)&buf + 1);
  v21 = (int *)buf;
  if ((_QWORD)buf != *((_QWORD *)&buf + 1))
  {
    do
    {
      sub_1004386B4(v21);
      v21 += 8;
    }
    while (v21 != v22);
    v21 = (int *)buf;
  }
  if (v21)
  {
    *((_QWORD *)&buf + 1) = v21;
    operator delete(v21);
  }
}

void sub_10043ADAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10043ADE0(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_10043AE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_10043AE9C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_10043AEB4(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  NSObject *v6;
  void **v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  int v13;
  _QWORD v14[5];
  int v15;
  void *__p;
  _BYTE *v17;
  uint64_t v18;
  _BYTE buf[18];
  unsigned __int8 v20;

  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, &__p);
    v7 = v18 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending 'device connected' notification for device %{public}s with result %d", buf, 0x12u);
    if (SHIBYTE(v18) < 0)
      operator delete(__p);
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10043B124;
  v14[3] = &unk_10092F368;
  v14[4] = a2;
  v15 = a3;
  sub_10043ADE0(a1 + 6, v14);
  __p = 0;
  v17 = 0;
  v18 = 0;
  sub_10006A8A0((uint64_t)a1, &__p);
  v9 = __p;
  v8 = v17;
  v10 = sub_10006BBEC();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10043B140;
  v12[3] = &unk_100918130;
  v13 = (unint64_t)(v8 - v9) >> 3;
  sub_100041A34(v10, v12);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10092F418);
  sub_1004A1A58((uint64_t)off_100977A50, 0);
  if (!a3)
  {
    sub_10043F78C(a2, (uint64_t)buf);
    if ((v20 & 0x80u) == 0)
      v11 = v20;
    else
      v11 = *(_QWORD *)&buf[8];
    if ((char)v20 < 0)
    {
      operator delete(*(void **)buf);
      if (v11)
        goto LABEL_20;
    }
    else if (v11)
    {
      goto LABEL_20;
    }
    if (qword_100977D80 != -1)
      dispatch_once(&qword_100977D80, &stru_10092F4D8);
    sub_1004C22DC((uint64_t)off_100977D78);
  }
LABEL_20:
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_10043B0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10043B124(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, _QWORD))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_10043B140(uint64_t a1)
{
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10092F4B8);
  sub_1004B9D78((os_unfair_lock_s *)off_100977B38, *(_DWORD *)(a1 + 32));
}

void sub_10043B190(os_unfair_lock_s *a1, uint64_t a2, int a3, int a4)
{
  NSObject *v8;
  void **v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD v13[4];
  int v14;
  _QWORD v15[5];
  int v16;
  int v17;
  void *__p;
  _BYTE *v19;
  uint64_t v20;
  uint8_t buf[4];
  void **v22;
  __int16 v23;
  int v24;

  v8 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, &__p);
    v9 = v20 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446466;
    v22 = v9;
    v23 = 1024;
    v24 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending 'device disconnected' notification for device %{public}s with result %d", buf, 0x12u);
    if (SHIBYTE(v20) < 0)
      operator delete(__p);
  }
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10043B354;
  v15[3] = &unk_10092F388;
  v15[4] = a2;
  v16 = a3;
  v17 = a4;
  sub_10043ADE0(a1 + 6, v15);
  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_10006A8A0((uint64_t)a1, &__p);
  v11 = __p;
  v10 = v19;
  v12 = sub_10006BBEC();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10043B370;
  v13[3] = &unk_100918130;
  v14 = (unint64_t)(v10 - v11) >> 3;
  sub_100041A34(v12, v13);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
}

void sub_10043B32C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10043B354(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
}

void sub_10043B370(uint64_t a1)
{
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10092F4B8);
  sub_1004B9D78((os_unfair_lock_s *)off_100977B38, *(_DWORD *)(a1 + 32));
}

void sub_10043B3CC()
{
  operator delete();
}

void sub_10043B3E0(uint64_t a1)
{
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_10092F478);
  sub_10043AEB4((os_unfair_lock_s *)off_100978188, *(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 24));
}

void sub_10043B438()
{
  operator delete();
}

void sub_10043B44C(uint64_t a1)
{
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_10092F478);
  sub_10043B190((os_unfair_lock_s *)off_100978188, *(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28));
}

void sub_10043B4A8(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  v6 = *(char **)(a1 + 8);
  while (*(_QWORD *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      v7 = a2;
      sub_10043B55C(a1 + 8, v6, (char *)&v7);
      sub_10007AA30(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_10043B55C(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_10043B760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10043B798(id a1)
{
  operator new();
}

void sub_10043B7D8()
{
  operator delete();
}

void sub_10043B7FC(id a1)
{
  operator new();
}

void sub_10043B83C()
{
  operator delete();
}

void sub_10043B860(id a1)
{
  operator new();
}

void sub_10043B8A0()
{
  operator delete();
}

void sub_10043B8C4(id a1)
{
  operator new();
}

void sub_10043B904()
{
  operator delete();
}

void sub_10043B928(id a1)
{
  operator new();
}

void sub_10043B968()
{
  operator delete();
}

void sub_10043B98C(id a1)
{
  operator new();
}

void sub_10043BAA4()
{
  operator delete();
}

void sub_10043BAC8(id a1)
{
  operator new();
}

void sub_10043BB08()
{
  operator delete();
}

uint64_t sub_10043BB2C(uint64_t a1, int *a2)
{
  uint64_t v4;
  int v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;

  v4 = sub_1000160D0(a1);
  sub_1000160D0(v4 + 64);
  v5 = *a2;
  v6 = *((_WORD *)a2 + 2);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 336) = 0;
  *(_WORD *)(a1 + 132) = v6;
  *(_DWORD *)(a1 + 128) = v5;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_QWORD *)(a1 + 328) = a1 + 336;
  *(_QWORD *)(a1 + 420) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 408) = 0;
  sub_1000160D0(a1 + 432);
  *(_QWORD *)(a1 + 496) = &off_100918258;
  *(_QWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 532) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 540) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 548) = 0;
  *(_DWORD *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 556) = 0;
  *(_DWORD *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 564) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 578) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_QWORD *)(a1 + 584) = a1 + 592;
  *(_DWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_WORD *)(a1 + 640) = 256;
  *(_WORD *)(a1 + 650) = 0;
  *(_DWORD *)(a1 + 642) = 0;
  *(_DWORD *)(a1 + 645) = 0;
  *(_BYTE *)(a1 + 652) = 1;
  *(_DWORD *)(a1 + 716) = 0;
  *(_OWORD *)(a1 + 700) = 0u;
  *(_DWORD *)(a1 + 670) = 0;
  *(_OWORD *)(a1 + 654) = 0u;
  *(_OWORD *)(a1 + 676) = 0u;
  *(_WORD *)(a1 + 692) = 0;
  *(_OWORD *)(a1 + 740) = 0u;
  *(_DWORD *)(a1 + 764) = 0;
  *(_QWORD *)(a1 + 756) = 0;
  *(_DWORD *)(a1 + 768) = 4;
  *(_QWORD *)(a1 + 788) = 0xFFFF00000000;
  *(_QWORD *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 783) = 0;
  *(_BYTE *)(a1 + 796) = 1;
  *(_QWORD *)(a1 + 800) = 0;
  *(_WORD *)(a1 + 816) = 0;
  *(_BYTE *)(a1 + 841) = 0;
  *(_DWORD *)(a1 + 852) = 0;
  *(_BYTE *)(a1 + 982) = 0;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_BYTE *)(a1 + 984) = 1;
  *(_DWORD *)(a1 + 986) = -65536;
  *(_DWORD *)(a1 + 992) = 0;
  *(_BYTE *)(a1 + 996) = 0;
  *(_QWORD *)(a1 + 1000) = &off_100918258;
  *(_QWORD *)(a1 + 1008) = 0;
  *(_QWORD *)(a1 + 1088) = 0;
  *(_WORD *)(a1 + 1112) = 0;
  *(_BYTE *)(a1 + 1114) = 0;
  *(_QWORD *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_QWORD *)(a1 + 1232) = 0;
  *(_DWORD *)(a1 + 1240) = 0;
  *(_BYTE *)(a1 + 1226) = 0;
  *(_QWORD *)(a1 + 1218) = 0;
  *(_WORD *)(a1 + 1084) = 0;
  *(_OWORD *)(a1 + 1060) = 0u;
  *(_QWORD *)(a1 + 1076) = 0;
  *(_OWORD *)(a1 + 1148) = 0u;
  *(_BYTE *)(a1 + 1216) = 0;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  sub_100091AE8((_QWORD *)(a1 + 1248), "");
  *(_QWORD *)(a1 + 1280) = 0;
  *(_QWORD *)(a1 + 1296) = 0;
  *(_BYTE *)(a1 + 1308) = 0;
  *(_DWORD *)(a1 + 1312) = 0;
  *(_BYTE *)(a1 + 1316) = 0;
  *(_DWORD *)(a1 + 1320) = 0;
  *(_WORD *)(a1 + 1324) = 0;
  *(_DWORD *)(a1 + 1348) = 0;
  *(_BYTE *)(a1 + 1352) = 0;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_DWORD *)(a1 + 1343) = 0;
  *(_DWORD *)(a1 + 1364) = 0x10000;
  *(_QWORD *)(a1 + 1356) = 0;
  *(_QWORD *)(a1 + 1368) = 0;
  *(_BYTE *)(a1 + 1376) = 0;
  *(_DWORD *)(a1 + 1412) = 0;
  *(_QWORD *)(a1 + 1416) = 0;
  *(_DWORD *)(a1 + 1424) = 512;
  *(_BYTE *)(a1 + 1428) = 0;
  *(_BYTE *)(a1 + 1456) = 0;
  *(_QWORD *)(a1 + 1448) = 0;
  *(_QWORD *)(a1 + 1464) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 1432) = 0u;
  sub_100091AE8((_QWORD *)(a1 + 1472), "");
  *(_WORD *)(a1 + 1496) = 0;
  *(_DWORD *)(a1 + 1500) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  *(_DWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 808) = 0x600000001;
  *(_OWORD *)(a1 + 820) = xmmword_1007412D0;
  *(_DWORD *)(a1 + 836) = 0;
  *(_BYTE *)(a1 + 840) = 2;
  *(_BYTE *)(a1 + 842) = 0;
  *(_DWORD *)(a1 + 844) = 80;
  *(_BYTE *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 856) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_DWORD *)(a1 + 880) = 0;
  *(_DWORD *)(a1 + 896) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_BYTE *)(a1 + 1144) = 0;
  *(_BYTE *)(a1 + 952) = 0;
  *(_DWORD *)(a1 + 956) = 0;
  *(_DWORD *)(a1 + 964) = 0;
  *(_BYTE *)(a1 + 968) = 0;
  *(_BYTE *)(a1 + 983) = 0;
  *(_BYTE *)(a1 + 985) = 0;
  *(_OWORD *)(a1 + 700) = 0u;
  *(_OWORD *)(a1 + 716) = 0u;
  *(_QWORD *)(a1 + 732) = 0;
  *(_QWORD *)(a1 + 860) = 0;
  *(_BYTE *)(a1 + 868) = 0;
  *(_QWORD *)(a1 + 972) = 0;
  *(_WORD *)(a1 + 980) = 0;
  v7 = sub_100027F68();
  sub_100091AE8(v13, "Device");
  sub_100091AE8(__p, "enableSDPPrint");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(_QWORD *)v7 + 72))(v7, v13, __p, a1 + 983);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  v8 = sub_100027F68();
  sub_100091AE8(v13, "Device");
  sub_100091AE8(__p, "wipeIDCache");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(_QWORD *)v8 + 72))(v8, v13, __p, a1 + 985);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  *(_BYTE *)(a1 + 1288) = 0;
  *(_QWORD *)(a1 + 1272) = -1;
  v9 = *(void **)(a1 + 1280);
  *(_QWORD *)(a1 + 1280) = 0;

  *(_OWORD *)(a1 + 1380) = 0u;
  *(_OWORD *)(a1 + 1396) = 0u;
  sub_10043C174(a1);
  *(_QWORD *)(a1 + 1440) = *(_QWORD *)(a1 + 1432);
  return a1;
}

void sub_10043BFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  void **v24;
  void **v25;
  uint64_t v26;
  void **v27;
  void **v28;
  void *v30;
  void **v31;
  void *v32;
  unsigned int *v33;
  void *v34;
  void *v35;
  void *v36;
  unsigned int *v37;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (*(char *)(v22 + 1495) < 0)
    operator delete(*v25);
  v30 = *v27;
  if (*v27)
  {
    *(_QWORD *)(v22 + 1440) = v30;
    operator delete(v30);
  }

  if (*(char *)(v22 + 1271) < 0)
    operator delete(*v24);
  v31 = (void **)(v22 + 1120);
  if (*(char *)(v22 + 1215) < 0)
    operator delete(*(void **)(v22 + 1192));
  a17 = (void *)(v22 + 1168);
  sub_100091BF8((void ***)&a17);
  v32 = *v31;
  if (*v31)
  {
    *(_QWORD *)(v22 + 1128) = v32;
    operator delete(v32);
  }
  *(_QWORD *)(v22 + 1000) = &off_100918258;
  v33 = *(unsigned int **)(v22 + 1008);
  if (v33)
    sub_100056AAC(v33);
  v34 = *(void **)(v22 + 928);
  if (v34)
  {
    *(_QWORD *)(v22 + 936) = v34;
    operator delete(v34);
  }
  v35 = *v28;
  if (*v28)
  {
    *(_QWORD *)(v22 + 912) = v35;
    operator delete(v35);
  }
  v36 = *(void **)(v22 + 744);
  if (v36)
  {
    *(_QWORD *)(v22 + 752) = v36;
    operator delete(v36);
  }
  sub_100455FA4((void ***)&a17);
  sub_1002BB6B8(v22 + 584, *(_QWORD **)(v22 + 592));
  *(_QWORD *)(v22 + 496) = &off_100918258;
  v37 = *(unsigned int **)(v22 + 504);
  if (v37)
    sub_100056AAC(v37);
  sub_100069BDC(v23);
  if (*(char *)(v22 + 415) < 0)
    operator delete(*(void **)(v22 + 392));
  sub_10001A82C(v26 - 8, *(_QWORD **)(v22 + 336));
  if (*(char *)(v22 + 303) < 0)
    operator delete(*(void **)(v22 + 280));
  if (*(char *)(v22 + 263) < 0)
    operator delete(*(void **)(v22 + 240));
  if (*(char *)(v22 + 223) < 0)
    operator delete(*(void **)(v22 + 200));
  sub_100069BDC(a10);
  sub_100069BDC(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_10043C174(uint64_t a1)
{
  int v2;
  NSObject *v3;
  _OWORD *v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  std::string *p_str;
  std::string::size_type size;
  _QWORD *v17;
  _QWORD *v18;
  const char *v19;
  size_t v20;
  _QWORD *v21;
  _QWORD *v22;
  std::string *p_buf;
  size_t v24;
  std::string *v25;
  uint64_t v26;
  NSObject *v27;
  std::string *v28;
  std::string *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  NSObject *v41;
  int v42;
  __int128 *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int16x8_t v48;
  char v49;
  unsigned int v50;
  NSObject *v51;
  uint64_t v52;
  int v53;
  char v54;
  uint64_t v55;
  int v56;
  unsigned __int16 v57;
  NSObject *v58;
  uint64_t v59;
  int v60;
  __int16 v61;
  uint64_t v62;
  int v63;
  __int16 v64;
  uint64_t v65;
  int v66;
  __int16 v67;
  uint64_t v68;
  int v69;
  __int16 v70;
  uint64_t v71;
  int v72;
  __int16 v73;
  uint64_t v74;
  int v75;
  __int16 v76;
  uint64_t v77;
  int v78;
  __int16 v79;
  uint64_t v80;
  int v81;
  __int16 v82;
  uint64_t v83;
  int v84;
  __int16 v85;
  uint64_t v86;
  int v87;
  __int16 v88;
  uint64_t v89;
  int v90;
  __int16 v91;
  uint64_t v92;
  int v93;
  __int16 v94;
  uint64_t v95;
  int v96;
  __int16 v97;
  uint64_t v98;
  int v99;
  __int16 v100;
  uint64_t v101;
  int v102;
  __int16 v103;
  uint64_t v104;
  int v105;
  __int16 v106;
  uint64_t v107;
  int v108;
  __int16 v109;
  uint64_t v110;
  int v111;
  __int16 v112;
  uint64_t v113;
  int v114;
  __int16 v115;
  uint64_t v116;
  NSObject *v117;
  __int128 *v118;
  uint64_t v119;
  NSObject *v120;
  __int128 *v121;
  NSObject *v122;
  _OWORD *v123;
  uint64_t v124;
  int v125;
  char v126;
  NSObject *v127;
  _OWORD *v128;
  uint64_t v129;
  void **v130;
  char *v131;
  unint64_t v132;
  _DWORD *v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  NSObject *v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  NSObject *v160;
  uint64_t v161;
  int v162;
  NSObject *v163;
  uint64_t v164;
  int v165;
  NSObject *v166;
  __int128 *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  NSObject *v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  float v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  NSObject *v199;
  uint64_t v200;
  int v201;
  NSObject *v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  NSObject *v206;
  uint64_t v207;
  int v208;
  NSObject *v209;
  int v210;
  NSObject *v211;
  int v212;
  uint64_t v213;
  int v214;
  NSObject *v215;
  NSObject *v216;
  _BOOL4 v217;
  int v218;
  uint64_t v219;
  int v220;
  NSObject *v221;
  int v222;
  uint8_t *v223;
  uint8_t *v224;
  void **v225;
  NSObject *v226;
  int v227;
  std::string *v229;
  std::string *v230;
  void *v231[2];
  char v232;
  int v233;
  unsigned __int8 v234;
  int v235;
  int v236;
  char v237;
  char v238;
  void *v239;
  void *v240;
  uint64_t v241;
  float v242;
  int v243;
  int v244;
  void *v245;
  _BYTE *v246;
  uint64_t v247;
  void *v248;
  char *v249;
  uint64_t v250;
  char v251;
  int v252;
  uint64_t v253;
  char v254;
  int v255;
  char v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  std::string v263;
  int v264;
  int v265;
  unsigned __int8 v266;
  int v267;
  int v268;
  char v269;
  char v270;
  char v271;
  unsigned __int8 v272;
  char v273;
  int v274;
  int v275;
  unsigned __int8 v276;
  char v277;
  __int16 v278;
  __int16 v279;
  __int16 v280;
  __int16 v281;
  __int16 v282;
  __int16 v283;
  __int16 v284;
  __int16 v285;
  __int16 v286;
  __int16 v287;
  __int16 v288;
  __int16 v289;
  __int16 v290;
  __int16 v291;
  __int16 v292;
  __int16 v293;
  __int16 v294;
  __int16 v295;
  __int16 v296;
  unsigned __int16 v297;
  char v298;
  unsigned int v299;
  int v300;
  int v301;
  void *v302;
  _QWORD *v303;
  uint64_t v304;
  std::string __str;
  _QWORD v306[2];
  uint8_t v307[8];
  char v308;
  uint8_t v309[4];
  uint8_t *v310;
  __int16 v311;
  void **v312;
  __int128 v313;
  uint64_t v314;
  _OWORD __p[3];
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  _BYTE v321[144];
  uint64_t v322;
  std::string buf;

  v306[0] = 0;
  v306[1] = 0;
  sub_10003415C((uint64_t)v306, a1);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092F540);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_10092F560);
    v2 = sub_1004B9B48((uint64_t)off_100977B38);
    v3 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a1, __p);
      v4 = (SBYTE7(__p[1]) & 0x80u) == 0 ? __p : *(_OWORD **)&__p[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Read device %{public}s settings", (uint8_t *)&buf, 0xCu);
      if (SBYTE7(__p[1]) < 0)
        operator delete(*(void **)&__p[0]);
    }
    if ((v2 & 1) != 0 || *(_BYTE *)(a1 + 985))
    {
      *(_WORD *)(a1 + 740) = 0;
      v5 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(unsigned __int8 *)(a1 + 985);
        LODWORD(__p[0]) = 67109376;
        DWORD1(__p[0]) = v2;
        WORD4(__p[0]) = 1024;
        *(_DWORD *)((char *)__p + 10) = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Identification - wiping ID cache due to build version update %d, override %d", (uint8_t *)__p, 0xEu);
      }
      v7 = sub_10034D650();
      if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 56))(v7, a1, 0)
        && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        sub_1006F1EC8();
      }
      v8 = sub_10034D650();
      if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 72))(v8, a1, 0)
        && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        sub_1006F1E9C();
      }
    }
    *(_QWORD *)&__p[0] = 0;
    sub_10004AD30((uint64_t)__p);
    v9 = SLODWORD(__p[0]);
    v10 = SWORD2(__p[0]);
    memset(&buf, 0, sizeof(buf));
    v11 = sub_10034D650();
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v11 + 32))(v11, a1, &buf);
    if (v12)
    {
      v13 = sub_10043E93C((unsigned __int8 *)a1);
      if (!(_DWORD)v13)
        goto LABEL_61;
      if (IsAppleInternalBuild(v13))
      {
        v322 = 0;
        v320 = 0u;
        memset(v321, 0, sizeof(v321));
        v318 = 0u;
        v319 = 0u;
        v316 = 0u;
        v317 = 0u;
        memset(__p, 0, sizeof(__p));
        sub_1002613AC((uint64_t)__p);
        v14 = sub_1002614D8(&__p[1], (uint64_t)"Read name result failure = ", 27);
        std::to_string(&__str, v12);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          size = __str.__r_.__value_.__l.__size_;
        v17 = sub_1002614D8(v14, (uint64_t)p_str, size);
        v18 = sub_1002614D8(v17, (uint64_t)", device address = ", 19);
        v19 = (const char *)&v302;
        sub_10046E9BC((unsigned __int8 *)(a1 + 128), &v302);
        if (v304 < 0)
          v19 = (const char *)v302;
        v20 = strlen(v19);
        v21 = sub_1002614D8(v18, (uint64_t)v19, v20);
        v22 = sub_1002614D8(v21, (uint64_t)", value = ", 10);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_buf = &buf;
        else
          p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        v24 = strlen((const char *)p_buf);
        sub_1002614D8(v22, (uint64_t)p_buf, v24);
        if (SHIBYTE(v304) < 0)
          operator delete(v302);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        std::stringbuf::str((char *)&__p[1] + 8);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = &__str;
        else
          v25 = (std::string *)__str.__r_.__value_.__r.__words[0];
        sub_10011D44C((const char *)v25);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        *(_QWORD *)((char *)__p
        *(_QWORD *)&__p[1] = v26;
        if (SHIBYTE(v319) < 0)
          operator delete(*((void **)&v318 + 1));
        std::streambuf::~streambuf((char *)&__p[1] + 8);
        std::ios::~ios(v321);
      }
      else
      {
        v30 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
        {
          sub_10046E9BC((unsigned __int8 *)(a1 + 128), &__str);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v229 = &__str;
          else
            v229 = (std::string *)__str.__r_.__value_.__r.__words[0];
          v230 = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v230 = (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(__p[0]) = 67109891;
          DWORD1(__p[0]) = v12;
          WORD4(__p[0]) = 2082;
          *(_QWORD *)((char *)__p + 10) = v229;
          WORD1(__p[1]) = 2160;
          *(_QWORD *)((char *)&__p[1] + 4) = 1752392040;
          WORD6(__p[1]) = 2081;
          *(_QWORD *)((char *)&__p[1] + 14) = v230;
          _os_log_fault_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "Read name result failure = %d, device address = %{public}s, value = %{private, mask.hash}s", (uint8_t *)__p, 0x26u);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
    }
    else
    {
      v27 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10046E9BC((unsigned __int8 *)(a1 + 128), &__str);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = &__str;
        else
          v28 = (std::string *)__str.__r_.__value_.__r.__words[0];
        v29 = &buf;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v29 = (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(__p[0]) = 136446723;
        *(_QWORD *)((char *)__p + 4) = v28;
        WORD6(__p[0]) = 2160;
        *(_QWORD *)((char *)__p + 14) = 1752392040;
        WORD3(__p[1]) = 2081;
        *((_QWORD *)&__p[1] + 1) = v29;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Read name result success, device address = %{public}s, value = %{private, mask.hash}s", (uint8_t *)__p, 0x20u);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      std::string::operator=((std::string *)(a1 + 240), &buf);
      *(_QWORD *)(a1 + 264) = v9;
      *(_QWORD *)(a1 + 272) = v10;
      *(_BYTE *)(a1 + 1361) = 1;
    }
    v31 = sub_100065478();
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v31 + 432))(v31, v12 == 0);
LABEL_61:
    memset(&__str, 0, sizeof(__str));
    v32 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v32 + 208))(v32, a1, &__str))
      std::string::operator=((std::string *)(a1 + 280), &__str);
    v33 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v33 + 224))(v33, a1, &buf))
    {
      std::string::operator=((std::string *)(a1 + 200), &buf);
      *(_QWORD *)(a1 + 224) = v9;
      *(_QWORD *)(a1 + 232) = v10;
    }
    v301 = 0;
    v34 = sub_10034D650();
    v35 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v34 + 256))(v34, a1, &v301);
    if (!v35)
    {
      *(_DWORD *)(a1 + 304) = v301;
      *(_QWORD *)(a1 + 312) = v9;
      *(_QWORD *)(a1 + 320) = v10;
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_10092F540);
      *(_DWORD *)(a1 + 176) = sub_1004711A8((uint64_t)off_1009778E0, (int *)(a1 + 304), a1);
      *(_QWORD *)(a1 + 184) = v9;
      *(_QWORD *)(a1 + 192) = v10;
    }
    v36 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109376;
      DWORD1(__p[0]) = v35;
      WORD4(__p[0]) = 1024;
      *(_DWORD *)((char *)__p + 10) = v301;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Read classOfDevice result %d, value = 0x%x", (uint8_t *)__p, 0xEu);
    }
    v303 = 0;
    v304 = 0;
    v302 = &v303;
    v37 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v37 + 240))(v37, a1, &v302))
    {
      if ((void **)(a1 + 328) != &v302)
        sub_100456218((uint64_t **)(a1 + 328), v302, &v303);
      *(_QWORD *)(a1 + 352) = v9;
      *(_QWORD *)(a1 + 360) = v10;
    }
    *(_WORD *)(a1 + 1060) = 0;
    *(_BYTE *)(a1 + 1063) = 0;
    *(_DWORD *)(a1 + 1080) = 0;
    *(_QWORD *)(a1 + 1088) = 0;
    v38 = sub_10034D650();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 1464))(v38, a1);
    v300 = 0;
    v39 = sub_10034D650();
    v40 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v39 + 1496))(v39, a1, &v300);
    v41 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v42 = v300;
      sub_10043E5F8(a1, &v313);
      v43 = v314 >= 0 ? &v313 : (__int128 *)v313;
      LODWORD(__p[0]) = 67109634;
      DWORD1(__p[0]) = v40;
      WORD4(__p[0]) = 1024;
      *(_DWORD *)((char *)__p + 10) = v42;
      HIWORD(__p[0]) = 2082;
      *(_QWORD *)&__p[1] = v43;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "readGAPA result %d, value = 0x%x for %{public}s", (uint8_t *)__p, 0x18u);
      if (SHIBYTE(v314) < 0)
        operator delete((void *)v313);
    }
    v44 = v300;
    if (v40)
      v44 = 0;
    *(_DWORD *)(a1 + 572) = v44;
    v45 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v45 + 288))(v45, a1, a1 + 584))
    {
      if (qword_10097B1B0 != -1)
        dispatch_once(&qword_10097B1B0, &stru_10092F580);
      sub_100508190((uint64_t)off_10097B1A8, (_WORD *)a1);
      sub_100034264((uint64_t)v306);
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_10092F540);
      sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 4);
      sub_100034188((uint64_t)v306);
    }
    v299 = 0;
    v46 = sub_10034D650();
    v47 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)v46 + 304))(v46, a1, &v299);
    if (v47)
    {
      v49 = 0;
      v50 = 0;
      v48.i64[0] = 0x100010000;
    }
    else
    {
      v50 = v299;
      v49 = v299 & 1;
      v48.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v299) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
    }
    *(_BYTE *)(a1 + 642) = v49;
    *(_DWORD *)(a1 + 643) = vmovn_s16(v48).u32[0];
    *(_DWORD *)(a1 + 1320) = v50;
    v51 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109376;
      DWORD1(__p[0]) = v47;
      WORD4(__p[0]) = 1024;
      *(_DWORD *)((char *)__p + 10) = v299;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Read PhonebookSyncSettings result %d, settings 0x%x", (uint8_t *)__p, 0xEu);
    }
    v298 = 0;
    v52 = sub_10034D650();
    v53 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v52 + 416))(v52, a1, &v298);
    v54 = v298;
    if (v53)
      v54 = 0;
    *(_BYTE *)(a1 + 647) = v54;
    v297 = 0;
    v55 = sub_10034D650();
    v56 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int16 *))(*(_QWORD *)v55 + 432))(v55, a1, &v297);
    if (v56)
      v57 = 0;
    else
      v57 = v297;
    *(_WORD *)(a1 + 654) = v57;
    v58 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109376;
      DWORD1(__p[0]) = v56;
      WORD4(__p[0]) = 1024;
      *(_DWORD *)((char *)__p + 10) = v57;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Read lastAVRCPVersion result %d, version %d", (uint8_t *)__p, 0xEu);
    }
    v296 = 0;
    v59 = sub_10034D650();
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v59 + 448))(v59, a1, &v296);
    v61 = v296;
    if (v60)
      v61 = 0;
    *(_WORD *)(a1 + 656) = v61;
    v295 = 0;
    v62 = sub_10034D650();
    v63 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v62 + 464))(v62, a1, &v295);
    v64 = v295;
    if (v63)
      v64 = 0;
    *(_WORD *)(a1 + 658) = v64;
    v294 = 0;
    v65 = sub_10034D650();
    v66 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v65 + 480))(v65, a1, &v294);
    v67 = v294;
    if (v66)
      v67 = 0;
    *(_WORD *)(a1 + 660) = v67;
    v293 = 0;
    v68 = sub_10034D650();
    v69 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v68 + 496))(v68, a1, &v293);
    v70 = v293;
    if (v69)
      v70 = 0;
    *(_WORD *)(a1 + 662) = v70;
    v292 = 0;
    v71 = sub_10034D650();
    v72 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v71 + 512))(v71, a1, &v292);
    v73 = v292;
    if (v72)
      v73 = 0;
    *(_WORD *)(a1 + 664) = v73;
    v291 = 0;
    v74 = sub_10034D650();
    v75 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v74 + 528))(v74, a1, &v291);
    v76 = v291;
    if (v75)
      v76 = 0;
    *(_WORD *)(a1 + 666) = v76;
    v290 = 0;
    v77 = sub_10034D650();
    v78 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v77 + 544))(v77, a1, &v290);
    v79 = v290;
    if (v78)
      v79 = 0;
    *(_WORD *)(a1 + 668) = v79;
    v289 = 0;
    v80 = sub_10034D650();
    v81 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v80 + 560))(v80, a1, &v289);
    v82 = v289;
    if (v81)
      v82 = 0;
    *(_WORD *)(a1 + 670) = v82;
    v288 = 0;
    v83 = sub_10034D650();
    v84 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v83 + 576))(v83, a1, &v288);
    v85 = v288;
    if (v84)
      v85 = 0;
    *(_WORD *)(a1 + 672) = v85;
    v287 = 0;
    v86 = sub_10034D650();
    v87 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v86 + 592))(v86, a1, &v287);
    v88 = v287;
    if (v87)
      v88 = 0;
    *(_WORD *)(a1 + 674) = v88;
    v286 = 0;
    v89 = sub_10034D650();
    v90 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v89 + 608))(v89, a1, &v286);
    v91 = v286;
    if (v90)
      v91 = 0;
    *(_WORD *)(a1 + 676) = v91;
    v285 = 0;
    v92 = sub_10034D650();
    v93 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v92 + 624))(v92, a1, &v285);
    v94 = v285;
    if (v93)
      v94 = 0;
    *(_WORD *)(a1 + 678) = v94;
    v284 = 0;
    v95 = sub_10034D650();
    v96 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v95 + 640))(v95, a1, &v284);
    v97 = v284;
    if (v96)
      v97 = 0;
    *(_WORD *)(a1 + 680) = v97;
    v283 = 0;
    v98 = sub_10034D650();
    v99 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v98 + 656))(v98, a1, &v283);
    v100 = v283;
    if (v99)
      v100 = 0;
    *(_WORD *)(a1 + 682) = v100;
    v282 = 0;
    v101 = sub_10034D650();
    v102 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v101 + 672))(v101, a1, &v282);
    v103 = v282;
    if (v102)
      v103 = 0;
    *(_WORD *)(a1 + 684) = v103;
    v281 = 0;
    v104 = sub_10034D650();
    v105 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v104 + 688))(v104, a1, &v281);
    v106 = v281;
    if (v105)
      v106 = 0;
    *(_WORD *)(a1 + 686) = v106;
    v280 = 0;
    v107 = sub_10034D650();
    v108 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v107 + 704))(v107, a1, &v280);
    v109 = v280;
    if (v108)
      v109 = 0;
    *(_WORD *)(a1 + 688) = v109;
    v279 = 0;
    v110 = sub_10034D650();
    v111 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v110 + 720))(v110, a1, &v279);
    v112 = v279;
    if (v111)
      v112 = 0;
    *(_WORD *)(a1 + 690) = v112;
    v278 = 0;
    v113 = sub_10034D650();
    v114 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v113 + 736))(v113, a1, &v278);
    v115 = v278;
    if (v114)
      v115 = 0;
    *(_WORD *)(a1 + 692) = v115;
    *(_DWORD *)(a1 + 696) = 0;
    v116 = sub_10034D650();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v116 + 48))(v116, a1, a1 + 700))
    {
      *(_BYTE *)(a1 + 740) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 740) = 1;
      v117 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a1, &v313);
        v118 = v314 >= 0 ? &v313 : (__int128 *)v313;
        LODWORD(__p[0]) = 136446722;
        *(_QWORD *)((char *)__p + 4) = v118;
        WORD6(__p[0]) = 1042;
        *(_DWORD *)((char *)__p + 14) = 20;
        WORD1(__p[1]) = 2098;
        *(_QWORD *)((char *)&__p[1] + 4) = a1 + 700;
        _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEFAULT, "Primary Identification - persisted {device %{public}s, %{public}.20P}", (uint8_t *)__p, 0x1Cu);
        if (SHIBYTE(v314) < 0)
          operator delete((void *)v313);
      }
    }
    v119 = sub_10034D650();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v119 + 64))(v119, a1, a1 + 720))
    {
      *(_BYTE *)(a1 + 741) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 741) = 1;
      v120 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a1, &v313);
        v121 = v314 >= 0 ? &v313 : (__int128 *)v313;
        LODWORD(__p[0]) = 136446722;
        *(_QWORD *)((char *)__p + 4) = v121;
        WORD6(__p[0]) = 1042;
        *(_DWORD *)((char *)__p + 14) = 20;
        WORD1(__p[1]) = 2098;
        *(_QWORD *)((char *)&__p[1] + 4) = a1 + 720;
        _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEFAULT, "Secondary Identification  - persisted {device %{public}s, %{public}.20P}", (uint8_t *)__p, 0x1Cu);
        if (SHIBYTE(v314) < 0)
          operator delete((void *)v313);
      }
    }
    v122 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a1, __p);
      v123 = (SBYTE7(__p[1]) & 0x80u) == 0 ? __p : *(_OWORD **)&__p[0];
      LODWORD(v313) = 136446210;
      *(_QWORD *)((char *)&v313 + 4) = v123;
      _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEFAULT, "Read SDP mirroring state for device %{public}s", (uint8_t *)&v313, 0xCu);
      if (SBYTE7(__p[1]) < 0)
        operator delete(*(void **)&__p[0]);
    }
    v277 = 0;
    v124 = sub_10034D650();
    v125 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v124 + 752))(v124, a1, &v277);
    v126 = v277;
    if (v125)
      v126 = 1;
    *(_BYTE *)(a1 + 652) = v126;
    *(_QWORD *)(a1 + 752) = *(_QWORD *)(a1 + 744);
    v127 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a1, __p);
      v128 = (SBYTE7(__p[1]) & 0x80u) == 0 ? __p : *(_OWORD **)&__p[0];
      LODWORD(v313) = 136446210;
      *(_QWORD *)((char *)&v313 + 4) = v128;
      _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEFAULT, "Read group list for %{public}s", (uint8_t *)&v313, 0xCu);
      if (SBYTE7(__p[1]) < 0)
        operator delete(*(void **)&__p[0]);
    }
    v129 = sub_10034D650();
    v130 = (void **)(a1 + 744);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v129 + 320))(v129, a1, a1 + 744))
    {
      v131 = *(char **)(a1 + 752);
      v132 = *(_QWORD *)(a1 + 760);
      if ((unint64_t)v131 >= v132)
      {
        v134 = (char *)*v130;
        v135 = (v131 - (_BYTE *)*v130) >> 2;
        v136 = v135 + 1;
        if ((unint64_t)(v135 + 1) >> 62)
          abort();
        v137 = v132 - (_QWORD)v134;
        if (v137 >> 1 > v136)
          v136 = v137 >> 1;
        if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFFCLL)
          v138 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v138 = v136;
        if (v138)
        {
          v139 = (char *)sub_1002B46E0(a1 + 760, v138);
          v131 = *(char **)(a1 + 752);
          v134 = *(char **)(a1 + 744);
        }
        else
        {
          v139 = 0;
        }
        v140 = &v139[4 * v135];
        v141 = &v139[4 * v138];
        *(_DWORD *)v140 = -1;
        v133 = v140 + 4;
        while (v131 != v134)
        {
          v142 = *((_DWORD *)v131 - 1);
          v131 -= 4;
          *((_DWORD *)v140 - 1) = v142;
          v140 -= 4;
        }
        *(_QWORD *)(a1 + 744) = v140;
        *(_QWORD *)(a1 + 752) = v133;
        *(_QWORD *)(a1 + 760) = v141;
        if (v134)
          operator delete(v134);
      }
      else
      {
        *(_DWORD *)v131 = -1;
        v133 = v131 + 4;
      }
      *(_QWORD *)(a1 + 752) = v133;
    }
    v276 = 0;
    v143 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v143 + 384))(v143, a1, &v276))
    {
      v144 = v276;
      *(_BYTE *)(a1 + 743) = v276;
      *(_DWORD *)(a1 + 1320) = *(_DWORD *)(a1 + 1320) & 0xFFFFFFDF | (32 * v144);
      if ((sub_10043E93C((unsigned __int8 *)a1) & 1) == 0
        && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        sub_1006F1E70();
      }
    }
    v275 = 0;
    v145 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v145 + 400))(v145, a1, &v275))
      *(_BYTE *)(a1 + 786) = v275 != 0;
    v146 = sub_10034D650();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v146 + 360))(v146, a1);
    v274 = 0;
    v147 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v147 + 368))(v147, a1, &v274))
      *(_DWORD *)(a1 + 368) = v274;
    v273 = 0;
    v148 = sub_10034D650();
    (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v148 + 1232))(v148, a1, &v273);
    *(_BYTE *)(a1 + 952) = v273;
    v272 = 0;
    v149 = sub_10034D650();
    (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v149 + 1232))(v149, a1, &v272);
    v150 = v272;
    *(_BYTE *)(a1 + 968) = v272;
    if (*(_BYTE *)(a1 + 952))
    {
      v151 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v152 = "is";
        if (!v150)
          v152 = "is not";
        LODWORD(__p[0]) = 136315138;
        *(_QWORD *)((char *)__p + 4) = v152;
        _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_DEFAULT, "Wireless Splitter this is a guest device that %s in contacts", (uint8_t *)__p, 0xCu);
      }
      LODWORD(__p[0]) = 0;
      v153 = sub_10034D650();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v153 + 1256))(v153, a1, __p))
        *(_DWORD *)(a1 + 956) = __p[0];
    }
    v271 = 0;
    v154 = sub_10034D650();
    (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v154 + 1280))(v154, a1, &v271);
    *(_BYTE *)(a1 + 977) = v271;
    v270 = 0;
    v155 = sub_10034D650();
    (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v155 + 1296))(v155, a1, &v270);
    *(_BYTE *)(a1 + 980) = v270;
    v269 = 0;
    v156 = sub_10034D650();
    (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v156 + 1312))(v156, a1, &v269);
    *(_BYTE *)(a1 + 981) = v269;
    v268 = 0;
    v157 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v157 + 832))(v157, a1, &v268))
      *(_DWORD *)(a1 + 788) = v268;
    v267 = 0;
    v158 = sub_10034D650();
    v159 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v158 + 848))(v158, a1, &v267);
    if (!v159)
      *(_DWORD *)(a1 + 792) = v267;
    v160 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109376;
      DWORD1(__p[0]) = v159;
      WORD4(__p[0]) = 1024;
      *(_DWORD *)((char *)__p + 10) = v267;
      _os_log_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_DEFAULT, "Read doubleTapAction result %d, value = %d", (uint8_t *)__p, 0xEu);
    }
    v266 = 0;
    v161 = sub_10034D650();
    v162 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v161 + 864))(v161, a1, &v266);
    if (!v162)
      *(_BYTE *)(a1 + 796) = v266;
    v163 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109376;
      DWORD1(__p[0]) = v162;
      WORD4(__p[0]) = 1024;
      *(_DWORD *)((char *)__p + 10) = v266;
      _os_log_impl((void *)&_mh_execute_header, v163, OS_LOG_TYPE_DEFAULT, "Read InEarDetectionEnabled result %d, value = %d", (uint8_t *)__p, 0xEu);
    }
    v265 = 0;
    v164 = sub_10034D650();
    v165 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v164 + 880))(v164, a1, &v265);
    if (!v165)
      *(_DWORD *)(a1 + 800) = v265;
    v166 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a1, &v313);
      v167 = v314 >= 0 ? &v313 : (__int128 *)v313;
      LODWORD(__p[0]) = 136446722;
      *(_QWORD *)((char *)__p + 4) = v167;
      WORD6(__p[0]) = 1024;
      *(_DWORD *)((char *)__p + 14) = v165;
      WORD1(__p[1]) = 1024;
      DWORD1(__p[1]) = v265;
      _os_log_impl((void *)&_mh_execute_header, v166, OS_LOG_TYPE_DEFAULT, "[%{public}s] Read smart route result %d, mode = %d", (uint8_t *)__p, 0x18u);
      if (SHIBYTE(v314) < 0)
        operator delete((void *)v313);
    }
    v264 = 0;
    v168 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v168 + 920))(v168, a1, &v264))
      *(_DWORD *)(a1 + 808) = v264;
    v313 = 0uLL;
    v314 = 0;
    v169 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v169 + 936))(v169, a1, &v313))
    {
      v170 = a1 + 1168;
      if ((__int128 *)(a1 + 1168) != &v313)
        sub_100455DD8(a1 + 1168, (std::string *)v313, *((__int128 **)&v313 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v313 + 1) - v313) >> 3));
      v171 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v172 = *(_QWORD *)v170;
        v173 = (_QWORD *)(*(_QWORD *)v170 + 72);
        if (*(char *)(*(_QWORD *)v170 + 95) < 0)
          v173 = (_QWORD *)*v173;
        v174 = (_QWORD *)(v172 + 240);
        if (*(char *)(v172 + 263) < 0)
          v174 = (_QWORD *)*v174;
        LODWORD(__p[0]) = 141558531;
        *(_QWORD *)((char *)__p + 4) = 1752392040;
        WORD6(__p[0]) = 2081;
        *(_QWORD *)((char *)__p + 14) = v173;
        WORD3(__p[1]) = 2082;
        *((_QWORD *)&__p[1] + 1) = v174;
        _os_log_impl((void *)&_mh_execute_header, v171, OS_LOG_TYPE_DEFAULT, "AACPVersionInfo initialized: serial number %{private, mask.hash}s firmware version %{public}s", (uint8_t *)__p, 0x20u);
      }
    }
    memset(&v263, 0, sizeof(v263));
    v175 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v175 + 952))(v175, a1, &v263))
      std::string::operator=((std::string *)(a1 + 1192), &v263);
    *(_QWORD *)&v316 = 0;
    memset(__p, 0, sizeof(__p));
    sub_100091AE8(&__p[2], "");
    v176 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v176 + 968))(v176, a1, __p))
    {
      *(_OWORD *)(a1 + 1216) = __p[0];
      *(_OWORD *)(a1 + 1228) = *(_OWORD *)((char *)__p + 12);
      std::string::operator=((std::string *)(a1 + 1248), (const std::string *)&__p[2]);
    }
    v262 = 0;
    v177 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v177 + 984))(v177, a1, &v262))
      *(_DWORD *)(a1 + 812) = v262;
    v261 = 0;
    v178 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v178 + 1000))(v178, a1, &v261))
      *(_DWORD *)(a1 + 820) = v261;
    v260 = 0;
    v179 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v179 + 1016))(v179, a1, &v260))
      *(_DWORD *)(a1 + 824) = v260;
    v259 = 0;
    v180 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v180 + 1032))(v180, a1, &v259))
      *(_DWORD *)(a1 + 828) = v259;
    v258 = 0;
    v181 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v181 + 1048))(v181, a1, &v258))
      *(_DWORD *)(a1 + 832) = v258;
    v257 = 0;
    v182 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v182 + 1064))(v182, a1, &v257))
      *(_DWORD *)(a1 + 836) = v257;
    v256 = 0;
    v183 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v183 + 1096))(v183, a1, &v256))
      *(_BYTE *)(a1 + 856) = v256;
    v255 = 0;
    v184 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v184 + 1112))(v184, a1, &v255))
      *(_DWORD *)(a1 + 860) = v255;
    v254 = 0;
    v185 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v185 + 1160))(v185, a1, &v254))
      *(_BYTE *)(a1 + 868) = v254;
    v253 = 0;
    v186 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v186 + 1144))(v186, a1, &v253))
      *(_QWORD *)(a1 + 1464) = v253;
    v252 = 0;
    v187 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v187 + 1128))(v187, a1, &v252))
      *(_DWORD *)(a1 + 864) = v252;
    v251 = 0;
    v188 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v188 + 1080))(v188, a1, &v251))
      *(_BYTE *)(a1 + 840) = v251;
    v248 = 0;
    v249 = 0;
    v250 = 0;
    v189 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v189 + 1176))(v189, a1, &v248)
      && (void **)(a1 + 904) != &v248)
    {
      sub_100456468((_QWORD *)(a1 + 904), (char *)v248, v249, v249 - (_BYTE *)v248);
    }
    v245 = 0;
    v246 = 0;
    v247 = 0;
    v190 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v190 + 1192))(v190, a1, &v245)
      && (void **)(a1 + 928) != &v245)
    {
      sub_1002D6FBC((char *)(a1 + 928), (char *)v245, (uint64_t)v246, (v246 - (_BYTE *)v245) >> 2);
    }
    v244 = 0;
    v191 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v191 + 1320))(v191, a1, &v244))
      *(_DWORD *)(a1 + 424) = v244;
    v243 = 0;
    v192 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v192 + 1336))(v192, a1, &v243))
      *(_DWORD *)(a1 + 428) = v243;
    v242 = 0.0;
    v193 = sub_10034D650();
    v194 = (*(uint64_t (**)(uint64_t, uint64_t, float *))(*(_QWORD *)v193 + 1352))(v193, a1, &v242);
    v195 = v242;
    if (v194)
      v195 = -1.0;
    *(float *)(a1 + 1116) = v195;
    v196 = sub_10034D650();
    v239 = 0;
    v240 = 0;
    v241 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v196 + 1368))(v196, a1, &v239);
    if (v239)
    {
      v240 = v239;
      operator delete(v239);
    }
    sub_1002D6FBC((char *)(a1 + 1120), 0, 0, 0);
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 384) = 0;
    v238 = 0;
    v197 = sub_10034D650();
    v198 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v197 + 1384))(v197, a1, &v238);
    if (v198)
    {
      v199 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v307 = 67109120;
        *(_DWORD *)&v307[4] = v198;
        _os_log_impl((void *)&_mh_execute_header, v199, OS_LOG_TYPE_DEFAULT, "Failed to read readEncryptionKeySize result: %d", v307, 8u);
      }
    }
    else
    {
      *(_BYTE *)(a1 + 988) = v238;
    }
    v237 = 0;
    v200 = sub_10034D650();
    v201 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v200 + 1400))(v200, a1, &v237);
    if (v201)
    {
      v202 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v307 = 67109120;
        *(_DWORD *)&v307[4] = v201;
        _os_log_impl((void *)&_mh_execute_header, v202, OS_LOG_TYPE_DEFAULT, "Failed to read readEncryptionMode result: %d", v307, 8u);
      }
    }
    else
    {
      *(_BYTE *)(a1 + 989) = v237;
    }
    v236 = 0;
    v203 = sub_10034D650();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v203 + 1416))(v203, a1, &v236))
      *(_DWORD *)(a1 + 992) = v236;
    v204 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v204 + 384))(v204))
    {
      v205 = sub_10043E98C(a1);
      v206 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v307 = 67109120;
        *(_DWORD *)&v307[4] = v205;
        _os_log_impl((void *)&_mh_execute_header, v206, OS_LOG_TYPE_DEFAULT, "Number of services %d supporting PSM/RFCOMM", v307, 8u);
      }
    }
    v235 = 0;
    v207 = sub_10034D650();
    v208 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v207 + 1432))(v207, a1, &v235);
    v209 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v210 = *(_DWORD *)(a1 + 1356);
      *(_DWORD *)v307 = 67109120;
      *(_DWORD *)&v307[4] = v210;
      _os_log_impl((void *)&_mh_execute_header, v209, OS_LOG_TYPE_DEFAULT, "Read hidDeviceBehavior : %d", v307, 8u);
    }
    if (v208)
    {
      v211 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v212 = *(_DWORD *)(a1 + 1356);
        *(_DWORD *)v307 = 67109120;
        *(_DWORD *)&v307[4] = v212;
        _os_log_impl((void *)&_mh_execute_header, v211, OS_LOG_TYPE_DEFAULT, "Failed to read hidDeviceBehavior : %d", v307, 8u);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 1356) = v235;
    }
    v234 = 0;
    v213 = sub_10034D650();
    v214 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v213 + 1448))(v213, a1, &v234);
    v215 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v307 = 67109120;
      *(_DWORD *)&v307[4] = v234;
      _os_log_impl((void *)&_mh_execute_header, v215, OS_LOG_TYPE_DEFAULT, "Read userSelectedDeviceType : %d", v307, 8u);
    }
    if (v214)
    {
      v216 = qword_1009997E8;
      v217 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
      v218 = 0;
      if (v217)
      {
        *(_DWORD *)v307 = 67109120;
        *(_DWORD *)&v307[4] = v214;
        _os_log_impl((void *)&_mh_execute_header, v216, OS_LOG_TYPE_DEFAULT, "Failed to read userSelectedDeviceType due to error: %d", v307, 8u);
        v218 = 0;
      }
    }
    else
    {
      v218 = v234;
    }
    *(_DWORD *)(a1 + 1412) = v218;
    v233 = 0;
    v219 = sub_10034D650();
    v220 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v219 + 1480))(v219, a1, &v233);
    v221 = qword_1009997E8;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_307;
    sub_100091AE8(v307, off_10092F700[v233]);
    v222 = v308;
    v223 = *(uint8_t **)v307;
    sub_10043E5F8(a1, v231);
    v224 = v307;
    if (v222 < 0)
      v224 = v223;
    if (v232 >= 0)
      v225 = v231;
    else
      v225 = (void **)v231[0];
    *(_DWORD *)v309 = 136315394;
    v310 = v224;
    v311 = 2082;
    v312 = v225;
    _os_log_impl((void *)&_mh_execute_header, v221, OS_LOG_TYPE_DEFAULT, "Read CarPlayType : %s for %{public}s", v309, 0x16u);
    if (v232 < 0)
      operator delete(v231[0]);
    if (v308 < 0)
    {
      operator delete(*(void **)v307);
      if (v220)
        goto LABEL_308;
    }
    else
    {
LABEL_307:
      if (v220)
      {
LABEL_308:
        v226 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v307 = 67109120;
          *(_DWORD *)&v307[4] = v220;
          _os_log_impl((void *)&_mh_execute_header, v226, OS_LOG_TYPE_DEFAULT, "Failed to read CarPlayType due to error: %d", v307, 8u);
        }
        if (sub_10043F65C(a1, 0x40000u) != 4)
        {
          *(_DWORD *)(a1 + 1500) = 0;
LABEL_316:
          if (v245)
          {
            v246 = v245;
            operator delete(v245);
          }
          if (v248)
          {
            v249 = (char *)v248;
            operator delete(v248);
          }
          if (SBYTE7(v316) < 0)
            operator delete(*(void **)&__p[2]);
          if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v263.__r_.__value_.__l.__data_);
          *(_QWORD *)&__p[0] = &v313;
          sub_100091BF8((void ***)__p);
          sub_10001A82C((uint64_t)&v302, v303);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          return sub_100034234((uint64_t)v306);
        }
        v227 = 1;
LABEL_315:
        *(_DWORD *)(a1 + 1500) = v227;
        goto LABEL_316;
      }
    }
    v227 = v233;
    goto LABEL_315;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F1EF4();
  return sub_100034234((uint64_t)v306);
}

void sub_10043E09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;

  if (*(char *)(v55 - 105) < 0)
    operator delete(*(void **)(v55 - 128));
  sub_100034234((uint64_t)&a55);
  _Unwind_Resume(a1);
}

uint64_t sub_10043E330(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v6;
  _QWORD **v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  __int128 v12;
  uint8_t buf[8];
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[2];

  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1);
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Clearing SDP local memory database", buf, 2u);
  }
  v3 = *(_QWORD **)(a1 + 584);
  v4 = (_QWORD *)(a1 + 592);
  if (v3 != (_QWORD *)(a1 + 592))
  {
    do
    {
      *(_QWORD *)buf = 0;
      v14 = 0;
      v15 = 0;
      sub_10033F038((uint64_t)buf, (uint64_t)(v3 + 5));
      v5 = *(_QWORD ***)buf;
      if (*(_QWORD ***)buf != &v14)
      {
        do
        {
          v12 = *(_OWORD *)(v5 + 5);
          sub_1002C3FB4(&v12);
          v6 = v5[1];
          if (v6)
          {
            do
            {
              v7 = (_QWORD **)v6;
              v6 = (_QWORD *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              v7 = (_QWORD **)v5[2];
              v8 = *v7 == v5;
              v5 = v7;
            }
            while (!v8);
          }
          v5 = v7;
        }
        while (v7 != &v14);
      }
      sub_10001A82C((uint64_t)buf, v14);
      v14 = 0;
      v15 = 0;
      *(_QWORD *)buf = &v14;
      sub_1002C3FB4((_BYTE *)v3[4]);
      free((void *)v3[4]);
      sub_10001A82C((uint64_t)buf, v14);
      v9 = (_QWORD *)v3[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v3[2];
          v8 = *v10 == (_QWORD)v3;
          v3 = v10;
        }
        while (!v8);
      }
      v3 = v10;
    }
    while (v10 != v4);
  }
  sub_1002BB6B8(a1 + 584, *(_QWORD **)(a1 + 592));
  *(_QWORD *)(a1 + 584) = v4;
  *(_OWORD *)(a1 + 592) = 0u;
  if (objc_msgSend(*(id *)(a1 + 1296), "count"))
    objc_msgSend(*(id *)(a1 + 1296), "removeAllObjects");
  return sub_100034234((uint64_t)v16);
}

void sub_10043E4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10043E504(unsigned __int8 *a1)
{
  uint64_t result;
  NSObject *v3;
  void **v4;
  uint64_t v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;

  result = sub_10043E93C(a1);
  if ((result & 1) == 0)
  {
    v3 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8((uint64_t)a1, __p);
      if (v7 >= 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Removing device %{public}s from disk", buf, 0xCu);
      if (v7 < 0)
        operator delete(__p[0]);
    }
    v5 = sub_10034D650();
    return (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v5 + 24))(v5, a1);
  }
  return result;
}

void sub_10043E5F8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  std::string::size_type size;
  std::string *v6;
  __int128 v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  _QWORD v27[2];
  std::string::value_type *v28;
  std::string::size_type v29;
  uint64_t v30;
  std::string v31;
  int v32;
  __int16 v33;

  v32 = *(_DWORD *)(a1 + 128);
  v33 = *(_WORD *)(a1 + 132);
  v4 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 160))(v4))
  {
    memset(&v31, 0, sizeof(v31));
    sub_10043F6EC(a1, (uint64_t)&v31);
    v28 = 0;
    v29 = 0;
    v30 = 0;
    sub_10043F78C(a1, (uint64_t)&v28);
    v27[0] = 0;
    v27[1] = 0;
    sub_10003415C((uint64_t)v27, a1);
    size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v31.__r_.__value_.__l.__size_;
    if (!size)
      std::string::operator=(&v31, (const std::string *)(a1 + 200));
    sub_100034264((uint64_t)v27);
    sub_10046E9BC((unsigned __int8 *)&v32, &v21);
    v6 = std::string::append(&v21, " \"");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (v30 >= 0)
      v8 = (const std::string::value_type *)&v28;
    else
      v8 = v28;
    if (v30 >= 0)
      v9 = HIBYTE(v30);
    else
      v9 = v29;
    v10 = std::string::append(&v22, v8, v9);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v23, "\"");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v24, " - \"");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v31;
    else
      v16 = (std::string *)v31.__r_.__value_.__r.__words[0];
    v17 = std::string::append(&v25, (const std::string::value_type *)v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v26, "\"");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v19->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    sub_100034234((uint64_t)v27);
    if (SHIBYTE(v30) < 0)
      operator delete(v28);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_10046E9BC((unsigned __int8 *)&v32, a2);
  }
}

void sub_10043E864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (*(char *)(v42 - 105) < 0)
    operator delete(*(void **)(v42 - 128));
  if (a42 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  sub_100034234(v42 - 104);
  if (*(char *)(v42 - 65) < 0)
    operator delete(*(void **)(v42 - 88));
  if (*(char *)(v42 - 41) < 0)
    operator delete(*(void **)(v42 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_10043E93C(unsigned __int8 *a1)
{
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10092F5A0);
  return sub_1005BEA2C((uint64_t)off_100978158, a1);
}

uint64_t sub_10043E98C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  void *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  const char *v31;
  void *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  const char *v37;
  void *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  const char *v43;
  uint8_t *v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  NSObject *v48;
  void **v49;
  void *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  void *v54;
  const char *v55;
  uint8_t *v56;
  std::string::size_type v57;
  std::string *v58;
  __int128 v59;
  _OWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  BOOL v64;
  NSObject *v65;
  uint64_t v66;
  _QWORD *v68;
  _QWORD *v69;
  void *__p[2];
  int64_t v72;
  std::string v73;
  __int128 v74;
  _QWORD v75[2];
  _QWORD v76[2];
  _QWORD v77[2];
  _QWORD v78[2];
  _QWORD v79[2];
  _QWORD v80[2];
  _QWORD v81[2];
  std::string v82;
  uint8_t buf[32];
  _QWORD v84[2];
  _QWORD v85[2];
  _QWORD v86[2];
  _QWORD v87[2];
  _QWORD v88[2];
  _QWORD v89[2];
  uint8_t v90[16];
  uint64_t v91;
  __int128 v92;
  uint64_t v93;

  v75[0] = 0;
  v75[1] = 0;
  sub_10003415C((uint64_t)v75, a1);
  if (objc_msgSend(*(id *)(a1 + 1296), "count"))
  {
    objc_msgSend(*(id *)(a1 + 1296), "removeAllObjects");
  }
  else
  {
    v1 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v2 = *(void **)(a1 + 1296);
    *(_QWORD *)(a1 + 1296) = v1;

  }
  v3 = *(_QWORD **)(a1 + 584);
  v68 = (_QWORD *)(a1 + 592);
  if (v3 != (_QWORD *)(a1 + 592))
  {
    v4 = 0;
LABEL_6:
    v74 = 0uLL;
    v69 = v3;
    v74 = *(_OWORD *)v3[4];
    v92 = 0uLL;
    v93 = 0;
    v5 = sub_1004442A0(a1, (uint64_t)&v74, 4u, (void **)&v92);
    v6 = *((_QWORD *)&v92 + 1);
    v7 = v92;
    if ((_QWORD)v92 == *((_QWORD *)&v92 + 1))
      v8 = 0;
    else
      v8 = v5;
    if (v8 != 1)
    {
LABEL_83:
      if (!v7)
        goto LABEL_85;
LABEL_84:
      *((_QWORD *)&v92 + 1) = v7;
      operator delete((void *)v7);
      goto LABEL_85;
    }
    while (1)
    {
      v9 = *(unsigned __int16 *)(v7 + 2);
      if ((v9 & 1) == 0)
      {
        if (*(_WORD *)(v7 + 2))
          break;
      }
LABEL_79:
      v7 += 16;
      if (v7 == v6)
      {
        v60 = (_OWORD *)v92;
        if ((_QWORD)v92 != v6)
        {
          do
          {
            memset(v90, 0, sizeof(v90));
            *(_OWORD *)v90 = *v60;
            sub_1002C3FB4(v90);
            ++v60;
          }
          while (v60 != *((_OWORD **)&v92 + 1));
          v7 = v92;
          goto LABEL_83;
        }
        v7 = v6;
        if (v6)
          goto LABEL_84;
LABEL_85:
        v61 = v69;
        v62 = (_QWORD *)v69[1];
        if (v62)
        {
          do
          {
            v63 = v62;
            v62 = (_QWORD *)*v62;
          }
          while (v62);
        }
        else
        {
          do
          {
            v63 = (_QWORD *)v61[2];
            v64 = *v63 == (_QWORD)v61;
            v61 = v63;
          }
          while (!v64);
        }
        v3 = v63;
        if (v63 == v68)
          goto LABEL_95;
        goto LABEL_6;
      }
    }
    v10 = 0;
    v11 = (unsigned __int8 *)(*(_QWORD *)(v7 + 8) + 24);
    while (1)
    {
      v12 = *((_DWORD *)v11 - 4);
      if (v12 == 3)
        break;
      if (v12 == 256)
      {
        v13 = *(_DWORD *)v11;
        memset(v90, 0, sizeof(v90));
        v91 = 0;
        sub_100091AE8(v90, "L2CAP ServiceClass: ");
        memset(&v73, 0, sizeof(v73));
        if (v74 == 3)
        {
          if (WORD1(v74) > 4u)
          {
            v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", *((_QWORD *)&v74 + 1)));
            v27 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v26;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "service long UUID: %@", buf, 0xCu);
            }
            v28 = *(void **)(a1 + 1296);
            v84[0] = CFSTR("kCBMsgArgServiceUUID");
            v84[1] = CFSTR("kCBMsgArgPSM");
            v85[0] = v26;
            v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", (unsigned __int16)v13, v68));
            v85[1] = v29;
            v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v85, v84, 2));
            objc_msgSend(v28, "addObject:", v30);

            v31 = sub_10025099C(*((unsigned int **)&v74 + 1));
            std::string::assign(&v73, v31);

          }
          else
          {
            if (WORD1(v74) == 2)
            {
              LOWORD(__p[0]) = bswap32(WORD4(v74)) >> 16;
              v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", __p, 2));
              v15 = qword_1009997E8;
              if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109378;
                *(_DWORD *)&buf[4] = DWORD2(v74);
                *(_WORD *)&buf[8] = 2112;
                *(_QWORD *)&buf[10] = v14;
                _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "service short UUID: (0x%x) %@", buf, 0x12u);
              }
              v16 = *(void **)(a1 + 1296);
              v88[0] = CFSTR("kCBMsgArgServiceUUID");
              v88[1] = CFSTR("kCBMsgArgPSM");
              v89[0] = v14;
              v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", (unsigned __int16)v13, v68));
              v89[1] = v17;
              v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v89, v88, 2));
              objc_msgSend(v16, "addObject:", v18);

            }
            else
            {
              LODWORD(__p[0]) = bswap32(DWORD2(v74));
              v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", __p));
              v39 = qword_1009997E8;
              if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109378;
                *(_DWORD *)&buf[4] = DWORD2(v74);
                *(_WORD *)&buf[8] = 2112;
                *(_QWORD *)&buf[10] = v38;
                _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "service short UUID: (0x%x) %@", buf, 0x12u);
              }
              v40 = *(void **)(a1 + 1296);
              v86[0] = CFSTR("kCBMsgArgServiceUUID");
              v86[1] = CFSTR("kCBMsgArgPSM");
              v87[0] = v38;
              v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", (unsigned __int16)v13, v68));
              v87[1] = v41;
              v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v87, v86, 2));
              objc_msgSend(v40, "addObject:", v42);

            }
            v43 = sub_100250C9C(DWORD2(v74));
            std::string::assign(&v73, v43);
          }
          v4 = (v4 + 1);
        }
        memset(buf, 0, 24);
        sub_100091AE8(buf, "\n");
        __p[0] = 0;
        __p[1] = 0;
        v72 = 0;
        sub_100443628((const void **)v90, (const void **)&v73.__r_.__value_.__l.__data_, &v82);
        if ((buf[23] & 0x80u) == 0)
          v44 = buf;
        else
          v44 = *(uint8_t **)buf;
        if ((buf[23] & 0x80u) == 0)
          v45 = buf[23];
        else
          v45 = *(_QWORD *)&buf[8];
        v46 = std::string::append(&v82, (const std::string::value_type *)v44, v45);
        v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
        v72 = v46->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v47;
        v46->__r_.__value_.__l.__size_ = 0;
        v46->__r_.__value_.__r.__words[2] = 0;
        v46->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v82.__r_.__value_.__l.__data_);
        v48 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          v49 = __p;
          if (v72 < 0)
            v49 = (void **)__p[0];
          goto LABEL_68;
        }
        goto LABEL_69;
      }
LABEL_77:
      v11 += 32;
      v10 += 2;
      if (v10 >= v9)
      {
        v6 = *((_QWORD *)&v92 + 1);
        goto LABEL_79;
      }
    }
    v19 = *v11;
    v20 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v90 = 67109120;
      *(_DWORD *)&v90[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "RFCOMM CID: %d", v90, 8u);
    }
    memset(v90, 0, sizeof(v90));
    v91 = 0;
    sub_100091AE8(v90, "RFCOMM ServiceClass: ");
    memset(&v73, 0, sizeof(v73));
    if (v74 == 3)
    {
      if (WORD1(v74) > 4u)
      {
        v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", *((_QWORD *)&v74 + 1)));
        v33 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v32;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "service long UUID: %@", buf, 0xCu);
        }
        v34 = *(void **)(a1 + 1296);
        v76[0] = CFSTR("kCBMsgArgServiceUUID");
        v76[1] = CFSTR("kCBMsgArgRFCOMMChannelID");
        v77[0] = v32;
        v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v19, v68));
        v77[1] = v35;
        v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v77, v76, 2));
        objc_msgSend(v34, "addObject:", v36);

        v37 = sub_10025099C(*((unsigned int **)&v74 + 1));
        std::string::assign(&v73, v37);

      }
      else
      {
        if (WORD1(v74) == 2)
        {
          LOWORD(__p[0]) = bswap32(WORD4(v74)) >> 16;
          v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", __p, 2));
          v22 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109378;
            *(_DWORD *)&buf[4] = DWORD2(v74);
            *(_WORD *)&buf[8] = 2112;
            *(_QWORD *)&buf[10] = v21;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "service short UUID: (0x%x) %@", buf, 0x12u);
          }
          v23 = *(void **)(a1 + 1296);
          v80[0] = CFSTR("kCBMsgArgServiceUUID");
          v80[1] = CFSTR("kCBMsgArgRFCOMMChannelID");
          v81[0] = v21;
          v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v19, v68));
          v81[1] = v24;
          v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v81, v80, 2));
          objc_msgSend(v23, "addObject:", v25);

        }
        else
        {
          LODWORD(__p[0]) = bswap32(DWORD2(v74));
          v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", __p));
          v51 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109378;
            *(_DWORD *)&buf[4] = DWORD2(v74);
            *(_WORD *)&buf[8] = 2112;
            *(_QWORD *)&buf[10] = v50;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "service short UUID: (0x%x) %@", buf, 0x12u);
          }
          v52 = *(void **)(a1 + 1296);
          v78[0] = CFSTR("kCBMsgArgServiceUUID");
          v78[1] = CFSTR("kCBMsgArgRFCOMMChannelID");
          v79[0] = v50;
          v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v19, v68));
          v79[1] = v53;
          v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v79, v78, 2));
          objc_msgSend(v52, "addObject:", v54);

        }
        v55 = sub_100250C9C(DWORD2(v74));
        std::string::assign(&v73, v55);
      }
      v4 = (v4 + 1);
    }
    memset(buf, 0, 24);
    sub_100091AE8(buf, "\n");
    __p[0] = 0;
    __p[1] = 0;
    v72 = 0;
    sub_100443628((const void **)v90, (const void **)&v73.__r_.__value_.__l.__data_, &v82);
    if ((buf[23] & 0x80u) == 0)
      v56 = buf;
    else
      v56 = *(uint8_t **)buf;
    if ((buf[23] & 0x80u) == 0)
      v57 = buf[23];
    else
      v57 = *(_QWORD *)&buf[8];
    v58 = std::string::append(&v82, (const std::string::value_type *)v56, v57);
    v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v72 = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    v48 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v49 = __p;
      if (v72 < 0)
        v49 = (void **)__p[0];
LABEL_68:
      LODWORD(v82.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v82.__r_.__value_.__r.__words + 4) = (std::string::size_type)v49;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v82, 0xCu);
    }
LABEL_69:
    if (SHIBYTE(v72) < 0)
      operator delete(__p[0]);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
    if (SHIBYTE(v91) < 0)
      operator delete(*(void **)v90);
    goto LABEL_77;
  }
  v4 = 0;
LABEL_95:
  v65 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v66 = *(_QWORD *)(a1 + 1296);
    LODWORD(v92) = 138412290;
    *(_QWORD *)((char *)&v92 + 4) = v66;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "Services dictionary: %@", (uint8_t *)&v92, 0xCu);
  }
  sub_100034234((uint64_t)v75);
  return v4;
}

void sub_10043F4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  sub_100034234((uint64_t)&a32);
  _Unwind_Resume(a1);
}

uint64_t sub_10043F65C(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1);
  v4 = *(_QWORD *)(a1 + 336);
  if (!v4)
    goto LABEL_12;
  v5 = a1 + 336;
  do
  {
    v6 = *(_DWORD *)(v4 + 28);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 336 && *(_DWORD *)(v5 + 28) <= a2)
    v9 = *(unsigned int *)(v5 + 32);
  else
LABEL_12:
    v9 = 0;
  sub_100034234((uint64_t)v11);
  return v9;
}

uint64_t sub_10043F6EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v4 = a1 + 280;
  if (*(char *)(a1 + 303) < 0)
  {
    v5 = *(_QWORD *)(a1 + 288);
    if (v5)
      goto LABEL_8;
    goto LABEL_5;
  }
  if (!*(_BYTE *)(a1 + 303))
  {
LABEL_5:
    v4 = a1 + 240;
    if ((*(char *)(a1 + 263) & 0x80000000) == 0)
      goto LABEL_6;
    v5 = *(_QWORD *)(a1 + 248);
LABEL_8:
    sub_10003430C((_BYTE *)a2, *(void **)v4, v5);
    return sub_100034234((uint64_t)v7);
  }
LABEL_6:
  *(_OWORD *)a2 = *(_OWORD *)v4;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + 16);
  return sub_100034234((uint64_t)v7);
}

void sub_10043F778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10043F78C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  if (*(char *)(a1 + 263) < 0)
  {
    sub_10003430C((_BYTE *)a2, *(void **)(a1 + 240), *(_QWORD *)(a1 + 248));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 240);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 256);
  }
  return sub_100034234((uint64_t)v5);
}

void sub_10043F7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10043F80C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *a2 = *(_OWORD *)(a1 + 136);
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_10043F854(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 176);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10043F898@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  if (*(char *)(a1 + 303) < 0)
  {
    sub_10003430C((_BYTE *)a2, *(void **)(a1 + 280), *(_QWORD *)(a1 + 288));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 280);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 296);
  }
  return sub_100034234((uint64_t)v5);
}

void sub_10043F904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10043F918@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  if (*(char *)(a1 + 223) < 0)
  {
    sub_10003430C((_BYTE *)a2, *(void **)(a1 + 200), *(_QWORD *)(a1 + 208));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 200);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 216);
  }
  return sub_100034234((uint64_t)v5);
}

void sub_10043F984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10043F998(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1);
  v2 = *(_QWORD **)(a1 + 328);
  v3 = (_QWORD *)(a1 + 336);
  if (v2 == (_QWORD *)(a1 + 336))
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      if (*((_DWORD *)v2 + 8) == 4)
        v4 = *((_DWORD *)v2 + 7) | v4;
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v2[2];
          v7 = *v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  sub_100034234((uint64_t)v9);
  return v4;
}

uint64_t sub_10043FA40(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  if (*(_QWORD *)(a1 + 312) || *(_QWORD *)(a1 + 320))
  {
    *a2 = *(_DWORD *)(a1 + 304);
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  sub_100034234((uint64_t)v6);
  return v4;
}

uint64_t sub_10043FAA8(_QWORD *a1)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, (uint64_t)a1);
  if (a1[23])
    v2 = 1;
  else
    v2 = a1[24] != 0;
  if (a1[28])
  {
    v2 |= 2u;
  }
  else if (a1[29])
  {
    v2 |= 2u;
  }
  if (a1[33])
  {
    v2 |= 8u;
  }
  else if (a1[34])
  {
    v2 |= 8u;
  }
  if (a1[44])
  {
    v3 = v2 | 4;
  }
  else if (a1[45])
  {
    v3 = v2 | 4;
  }
  else
  {
    v3 = v2;
  }
  sub_100034234((uint64_t)v5);
  return v3;
}

uint64_t sub_10043FB64(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(char *)(a1 + 152);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10043FBA8(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 1412) = a2;
  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 1456))(v4, a1, *(unsigned __int8 *)(a1 + 1412));
  return sub_100034234((uint64_t)v6);
}

void sub_10043FC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10043FC18(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 1412);
  sub_100034234((uint64_t)v4);
  return v2;
}

BOOL sub_10043FC5C(uint64_t a1)
{
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_10092F5C0);
  return sub_100438E24((uint64_t)off_100978188, a1);
}

BOOL sub_10043FCAC(uint64_t a1)
{
  _BOOL8 v2;
  int v3;
  NSObject *v4;
  uint64_t v6;
  char v7;
  uint8_t buf[4];
  int v9;

  v7 = 0;
  sub_100043758(&v7);
  v6 = 0;
  if (sub_100182588(a1 + 128, &v6))
  {
    v2 = 1;
  }
  else
  {
    v3 = *(unsigned __int8 *)(v6 + 278);
    v2 = *(_BYTE *)(v6 + 278) != 0;
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HDR link is connected %d", buf, 8u);
    }
  }
  sub_100043728(&v7);
  return v2;
}

void sub_10043FD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

BOOL sub_10043FDB4(uint64_t a1)
{
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_10092F5C0);
  return sub_100438EB4((uint64_t)off_100978188, a1);
}

unsigned int *sub_10043FE04(uint64_t a1)
{
  unsigned int *result;

  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_10092F5C0);
  result = (unsigned int *)sub_10043926C((uint64_t)off_100978188, a1);
  if (result)
    return (unsigned int *)*result;
  return result;
}

BOOL sub_10043FE60(uint64_t a1)
{
  int v2;
  _BOOL8 v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  v2 = *(_DWORD *)(a1 + 176);
  v4 = v2 == 17 || v2 == 22;
  sub_100034234((uint64_t)v6);
  return v4;
}

uint64_t sub_10043FEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char **v5;
  char *v6;
  NSObject *v7;
  char v8;
  void *v9;
  _BYTE *v10;
  int64_t v11;
  int64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  int v16;
  void *v17;
  int64_t v18;
  char *v19;
  char *v20;
  void **v21;
  char **v22;
  char *v23;
  char **v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  uint64_t v29;
  void *v30[2];
  char v31;
  char **v32;
  char *v33[2];
  _BYTE __p[22];
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;

  if (qword_10097AC70 != -1)
    dispatch_once(&qword_10097AC70, &stru_10092F5E0);
  v4 = sub_1002F7C88(qword_10097AC68, 2);
  v32 = 0;
  v33[0] = 0;
  v33[1] = 0;
  sub_1005D9F28(v4, (uint64_t *)&v32);
  v5 = v32;
  if (v32 == v33)
  {
LABEL_49:
    v27 = 0;
  }
  else
  {
    v29 = a1;
    while (1)
    {
      v6 = (char *)(v5 + 4);
      v7 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
      {
        sub_10043F78C(a1, (uint64_t)v30);
        v21 = v30;
        if (v31 < 0)
          v21 = (void **)v30[0];
        if (*((char *)v5 + 55) < 0)
          v22 = *(char ***)v6;
        else
          v22 = v5 + 4;
        v26 = *((unsigned __int16 *)v5 + 28);
        *(_DWORD *)__p = 136446978;
        *(_QWORD *)&__p[4] = v21;
        *(_WORD *)&__p[12] = 2080;
        *(_QWORD *)&__p[14] = v22;
        v35 = 1024;
        v36 = a2;
        v37 = 1024;
        v38 = v26;
        _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Identification - isAutomationDongle comparing Friendly Names: \"%{public}s\" and \"%s\", and Chipset Manufacturer IDs: %d and %d", __p, 0x22u);
        if (v31 < 0)
          operator delete(v30[0]);
      }
      if (*((char *)v5 + 55) < 0)
      {
        if (!v5[5])
          goto LABEL_39;
      }
      else if (!*((_BYTE *)v5 + 55))
      {
        goto LABEL_39;
      }
      sub_10043F78C(a1, (uint64_t)__p);
      v8 = HIBYTE(v35);
      v9 = *(void **)__p;
      if (v35 >= 0)
        v10 = __p;
      else
        v10 = *(_BYTE **)__p;
      if (*((char *)v5 + 55) >= 0)
      {
        v11 = *((unsigned __int8 *)v5 + 55);
      }
      else
      {
        v6 = v5[4];
        v11 = (int64_t)v5[5];
      }
      if (!v11)
      {
LABEL_35:
        v13 = *((unsigned __int16 *)v5 + 28) == (_DWORD)a2;
        goto LABEL_36;
      }
      if (v35 >= 0)
        v12 = HIBYTE(v35);
      else
        v12 = *(_QWORD *)&__p[8];
      if (v12 < v11)
      {
        v13 = 0;
        goto LABEL_36;
      }
      v14 = a2;
      v15 = &v10[v12];
      v16 = *v6;
      v17 = v10;
      while (1)
      {
        v18 = v12 - v11;
        if (v18 == -1 || (v19 = (char *)memchr(v17, v16, v18 + 1)) == 0)
        {
LABEL_27:
          v13 = 0;
LABEL_28:
          a2 = v14;
          a1 = v29;
          goto LABEL_36;
        }
        v20 = v19;
        if (!memcmp(v19, v6, v11))
          break;
        v17 = v20 + 1;
        v12 = v15 - (v20 + 1);
        if (v12 < v11)
          goto LABEL_27;
      }
      v13 = 0;
      if (v20 == v15)
        goto LABEL_28;
      a2 = v14;
      a1 = v29;
      if (v20 - v10 != -1)
        goto LABEL_35;
LABEL_36:
      if (v8 < 0)
        operator delete(v9);
      if (v13)
        break;
LABEL_39:
      v23 = v5[1];
      if (v23)
      {
        do
        {
          v24 = (char **)v23;
          v23 = *(char **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (char **)v5[2];
          v25 = *v24 == (char *)v5;
          v5 = v24;
        }
        while (!v25);
      }
      v5 = v24;
      if (v24 == v33)
        goto LABEL_49;
    }
    v27 = 1;
  }
  sub_100056BAC((uint64_t)&v32, v33[0]);
  return v27;
}

void sub_1004401C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

BOOL sub_1004401EC(uint64_t a1)
{
  _BOOL8 v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(_DWORD *)(a1 + 176) == 25;
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_100440238(uint64_t a1, _OWORD *a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  if ((_OWORD *)(a1 + 136) != a2)
    *(_OWORD *)(a1 + 136) = *a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_10044028C(uint64_t a1, char a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 976) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_1004402D0(uint64_t a1, __int16 a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_WORD *)(a1 + 978) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_100440314(uint64_t a1, char a2, _OWORD *a3)
{
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  *(_BYTE *)(a1 + 152) = a2;
  if ((_OWORD *)(a1 + 160) != a3)
    *(_OWORD *)(a1 + 160) = *a3;
  return sub_100034234((uint64_t)v7);
}

uint64_t sub_100440378(uint64_t a1, int a2, _OWORD *a3)
{
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1);
  *(_DWORD *)(a1 + 176) = a2;
  if ((_OWORD *)(a1 + 184) != a3)
    *(_OWORD *)(a1 + 184) = *a3;
  v6 = *(_QWORD *)(a1 + 520);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  return sub_100034234((uint64_t)v8);
}

void sub_1004403F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100440404(uint64_t a1, std::string *a2, _OWORD *a3)
{
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type size;
  int v10;
  const void **v11;
  std::string *v12;
  uint64_t v13;
  _QWORD v15[2];

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1);
  v6 = (_OWORD *)(a1 + 224);
  if (*(_QWORD *)(a1 + 224) || *(_QWORD *)(a1 + 232))
  {
    v7 = *(unsigned __int8 *)(a1 + 223);
    if ((v7 & 0x80u) == 0)
      v8 = *(unsigned __int8 *)(a1 + 223);
    else
      v8 = *(_QWORD *)(a1 + 208);
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    v10 = (char)size;
    if ((size & 0x80u) != 0)
      size = a2->__r_.__value_.__l.__size_;
    if (v8 == size)
    {
      v11 = (const void **)(a1 + 200);
      if (v10 >= 0)
        v12 = a2;
      else
        v12 = (std::string *)a2->__r_.__value_.__r.__words[0];
      if ((v7 & 0x80) == 0)
      {
        if (*(_BYTE *)(a1 + 223))
        {
          while (*(unsigned __int8 *)v11 == v12->__r_.__value_.__s.__data_[0])
          {
            v11 = (const void **)((char *)v11 + 1);
            v12 = (std::string *)((char *)v12 + 1);
            if (!--v7)
              goto LABEL_22;
          }
          goto LABEL_18;
        }
LABEL_22:
        if (v6 != a3)
          *v6 = *a3;
        return sub_100034234((uint64_t)v15);
      }
      if (!memcmp(*v11, v12, *(_QWORD *)(a1 + 208)))
        goto LABEL_22;
    }
  }
LABEL_18:
  std::string::operator=((std::string *)(a1 + 200), a2);
  if (v6 != a3)
    *v6 = *a3;
  sub_100034264((uint64_t)v15);
  if (sub_10043E93C((unsigned __int8 *)a1))
  {
    v13 = sub_10034D650();
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v13 + 232))(v13, a1, a2);
  }
  return sub_100034234((uint64_t)v15);
}

void sub_100440538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044054C(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  char v6;
  unint64_t v7;
  std::string *v8;
  unint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::string::size_type size;
  const void **v14;
  std::string *p_str;
  uint64_t v16;
  int v17;
  NSObject *v18;
  void **v19;
  std::string *v20;
  uint64_t v21;
  uint64_t v22;
  void *v24[2];
  char v25;
  void *__p[2];
  char v27;
  std::string __str;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  uint8_t buf[4];
  int v37;
  __int16 v38;
  void **v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  std::string *v43;

  v35[0] = 0;
  v35[1] = 0;
  sub_10003415C((uint64_t)v35, a1);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  sub_1004174B8(a2, &v32);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  sub_100440950((_QWORD *)a1, &v29);
  memset(&__str, 0, sizeof(__str));
  v6 = HIBYTE(v31);
  if (v31 >= 0)
    v7 = HIBYTE(v31);
  else
    v7 = v30;
  v8 = (std::string *)&v32;
  if (v7)
    v8 = (std::string *)&v29;
  else
    v6 = HIBYTE(v34);
  if (v6 < 0)
  {
    if (v7)
      v9 = v30;
    else
      v9 = v33;
    sub_10003430C(&__str, v8->__r_.__value_.__l.__data_, v9);
  }
  else
  {
    __str = *v8;
  }
  v10 = (_OWORD *)(a1 + 264);
  if (*(_QWORD *)(a1 + 264) || *(_QWORD *)(a1 + 272))
  {
    v11 = *(unsigned __int8 *)(a1 + 263);
    if ((v11 & 0x80u) == 0)
      v12 = *(unsigned __int8 *)(a1 + 263);
    else
      v12 = *(_QWORD *)(a1 + 248);
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (v12 == size)
    {
      v14 = (const void **)(a1 + 240);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((v11 & 0x80) == 0)
      {
        if (*(_BYTE *)(a1 + 263))
        {
          while (*(unsigned __int8 *)v14 == p_str->__r_.__value_.__s.__data_[0])
          {
            v14 = (const void **)((char *)v14 + 1);
            p_str = (std::string *)((char *)p_str + 1);
            if (!--v11)
              goto LABEL_48;
          }
          goto LABEL_30;
        }
LABEL_48:
        if (v10 != a3)
          *v10 = *a3;
        goto LABEL_50;
      }
      if (!memcmp(*v14, p_str, *(_QWORD *)(a1 + 248)))
        goto LABEL_48;
    }
  }
LABEL_30:
  std::string::operator=((std::string *)(a1 + 240), &__str);
  if (v10 != a3)
    *v10 = *a3;
  *(_BYTE *)(a1 + 1361) = 1;
  sub_100034264((uint64_t)v35);
  if (sub_10043E93C((unsigned __int8 *)a1))
  {
    v16 = sub_10034D650();
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v16 + 40))(v16, a1, &__str);
    v18 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10046E9BC((unsigned __int8 *)(a1 + 128), __p);
      if (v27 >= 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      v20 = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v20 = (std::string *)__str.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 67109891;
      v37 = v17;
      v38 = 2082;
      v39 = v19;
      v40 = 2160;
      v41 = 1752392040;
      v42 = 2081;
      v43 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "setName result = %d, device address = %{public}s, value = %{private, mask.hash}s", buf, 0x26u);
      if (v27 < 0)
        operator delete(__p[0]);
    }
    sub_100440984(a1);
  }
  v21 = sub_10034FDA0();
  sub_10046E9BC((unsigned __int8 *)(a1 + 128), v24);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v21 + 40))(v21, v24);
  if (v25 < 0)
    operator delete(v24[0]);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092F540);
  sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 1);
  v22 = *(_QWORD *)(a1 + 520);
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
LABEL_50:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31) < 0)
    operator delete(v29);
  if (SHIBYTE(v34) < 0)
    operator delete(v32);
  return sub_100034234((uint64_t)v35);
}

void sub_1004408CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  sub_100034234(v36 - 96);
  _Unwind_Resume(a1);
}

_QWORD *sub_100440950@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  char *v3;

  v2 = result[97];
  if ((v2 & 0x800) != 0)
  {
    v3 = "DUALSHOCK 4 Wireless Controller";
  }
  else
  {
    if ((v2 & 0x2000) == 0)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      return result;
    }
    v3 = "DualSense Wireless Controller";
  }
  return sub_100091AE8(a2, v3);
}

void sub_100440984(uint64_t a1)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  NSObject *v5;
  void **v6;
  int v7;
  int v8;
  NSObject *v9;
  _BYTE *v10;
  NSObject *v11;
  int v12;
  void **v13;
  int v14;
  int v15;
  void **v16;
  void *v17[2];
  char v18;
  _BYTE buf[18];
  __int16 v20;
  int v21;
  void *__p[4];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092F540);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 740))
    {
      v42 = *(_DWORD *)(a1 + 716);
      v41 = *(_OWORD *)(a1 + 700);
      if (*(_DWORD *)(a1 + 1068) != 76
        || (v2 = *(_DWORD *)(a1 + 1072) - 8194, v2 > 0x1D)
        || ((1 << v2) & 0x20037F9B) == 0)
      {
        if (!*(_BYTE *)(a1 + 1061) || (*(_BYTE *)(a1 + 1081) & 0x10) == 0)
          goto LABEL_25;
      }
      __p[0] = 0;
      __p[1] = 0;
      sub_10003415C((uint64_t)__p, a1);
      v3 = *(_DWORD *)(a1 + 696);
      sub_100034234((uint64_t)__p);
      if (!v3)
        goto LABEL_25;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      v24 = 0u;
      v25 = 0u;
      v23 = 0u;
      memset(__p, 0, sizeof(__p));
      v4 = sub_10034D650();
      if ((*(unsigned int (**)(uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)v4 + 80))(v4, a1, __p, 80))
      {
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006F1F20();
        goto LABEL_24;
      }
      v7 = DWORD2(v24);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      sub_10003415C((uint64_t)buf, a1);
      v8 = *(_DWORD *)(a1 + 696);
      sub_100034234((uint64_t)buf);
      if (v7 == v8)
      {
LABEL_24:
        sub_100393448((uint64_t)__p);
LABEL_25:
        v9 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(a1, buf);
          if (v21 >= 0)
            v10 = buf;
          else
            v10 = *(_BYTE **)buf;
          LODWORD(__p[0]) = 136446722;
          *(void **)((char *)__p + 4) = v10;
          WORD2(__p[1]) = 1042;
          *(_DWORD *)((char *)&__p[1] + 6) = 20;
          WORD1(__p[2]) = 2098;
          *(void **)((char *)&__p[2] + 4) = &v41;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Identification - Identification hash exists for device %{public}s, primary hash %{public}.20P", (uint8_t *)__p, 0x1Cu);
          if (SHIBYTE(v21) < 0)
            operator delete(*(void **)buf);
        }
        return;
      }
      v11 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a1, v17);
        v12 = v18;
        v13 = (void **)v17[0];
        v14 = DWORD2(v24);
        v15 = sub_10044B37C(a1);
        v16 = v17;
        *(_DWORD *)buf = 136446722;
        if (v12 < 0)
          v16 = v13;
        *(_QWORD *)&buf[4] = v16;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v14;
        v20 = 1026;
        v21 = v15;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Identification - Apple Audio Device - firmware version has changed for device %{public}s (old firmware version %{public}d, new firmware version %{public}d)- regenerating primary hash.", buf, 0x18u);
        if (v18 < 0)
          operator delete(v17[0]);
      }
      *(_BYTE *)(a1 + 742) = 0;
      sub_10044B4E4(a1);
      sub_100393448((uint64_t)__p);
    }
    else
    {
      v5 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a1, __p);
        v6 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Identification - Identification hash does not exist for device %{public}s - generating.", buf, 0xCu);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
      }
      sub_10044B4E4(a1);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006F1F4C();
  }
}

void sub_100440D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a15 < 0)
    operator delete(__p);
  sub_100393448((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_100440D90(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 777) >> 3) & 1;
}

uint64_t sub_100440D9C(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  std::string::size_type size;
  std::string *p_str;
  std::string::size_type v9;
  const void *v10;
  size_t v11;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _BYTE *v20;
  const char *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint32_t v24;
  uint64_t v25;
  _BYTE *v26;
  std::string *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v31;
  std::string __str;
  _QWORD v33[2];
  uint8_t buf[4];
  _BYTE *v35;
  __int16 v36;
  std::string *v37;
  _BYTE __p[12];
  __int16 v39;
  std::string *v40;
  char v41;

  v33[0] = 0;
  v33[1] = 0;
  sub_10003415C((uint64_t)v33, a1);
  memset(&__str, 0, sizeof(__str));
  sub_1004174B8(a2, &__str);
  v6 = *(char *)(a1 + 263);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 263);
  else
    v9 = *(_QWORD *)(a1 + 248);
  if (v6 >= 0)
    v10 = (const void *)(a1 + 240);
  else
    v10 = *(const void **)(a1 + 240);
  if (v9 >= size)
    v11 = size;
  else
    v11 = v9;
  if (!memcmp(p_str, v10, v11) && v9 == size && v9 != 0)
  {
    std::string::assign((std::string *)(a1 + 280), "");
    v18 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      sub_10043E5F8(a1, __p);
      if (v41 >= 0)
        v20 = __p;
      else
        v20 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315138;
      v35 = v20;
      v21 = "Same username and name, empty out nickname for: %s";
      v22 = v18;
      v23 = OS_LOG_TYPE_INFO;
      v24 = 12;
LABEL_47:
      _os_log_impl((void *)&_mh_execute_header, v22, v23, v21, buf, v24);
      if (v41 < 0)
        operator delete(*(void **)__p);
      goto LABEL_49;
    }
    goto LABEL_49;
  }
  v14 = *(unsigned __int8 *)(a1 + 303);
  if ((v14 & 0x80u) == 0)
    v15 = *(unsigned __int8 *)(a1 + 303);
  else
    v15 = *(_QWORD *)(a1 + 288);
  if (v15 != size)
  {
LABEL_40:
    std::string::operator=((std::string *)(a1 + 280), &__str);
    v25 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a1, __p);
      if (v41 >= 0)
        v26 = __p;
      else
        v26 = *(_BYTE **)__p;
      v27 = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v27 = (std::string *)__str.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      v35 = v26;
      v36 = 2080;
      v37 = v27;
      v21 = "User defined name for %s updated to %s";
      v22 = v25;
      v23 = OS_LOG_TYPE_DEFAULT;
      v24 = 22;
      goto LABEL_47;
    }
LABEL_49:
    sub_100034264((uint64_t)v33);
    if (sub_10043E93C((unsigned __int8 *)a1))
    {
      v28 = sub_10034D650();
      (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v28 + 216))(v28, a1, &__str);
      v29 = *(_QWORD *)(a1 + 520);
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
    }
    if (a3)
    {
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_10092F540);
      sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 4098);
    }
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 2);
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_10092F600);
    sub_1004219B0((uint64_t)off_1009778D0, a1);
    goto LABEL_61;
  }
  if ((v14 & 0x80) != 0)
  {
    if (memcmp(*(const void **)(a1 + 280), p_str, *(_QWORD *)(a1 + 288)))
      goto LABEL_40;
  }
  else if (*(_BYTE *)(a1 + 303))
  {
    v16 = p_str;
    v17 = (unsigned __int8 *)(a1 + 280);
    while (*v17 == v16->__r_.__value_.__s.__data_[0])
    {
      ++v17;
      v16 = (std::string *)((char *)v16 + 1);
      if (!--v14)
        goto LABEL_64;
    }
    goto LABEL_40;
  }
LABEL_64:
  v31 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v10;
    v39 = 2080;
    v40 = p_str;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Did not change user defined name from %s updated to %s", __p, 0x16u);
  }
LABEL_61:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return sub_100034234((uint64_t)v33);
}

void sub_100441184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1004411C0(uint64_t a1, int a2)
{
  int v4;
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v9;
  _QWORD v10[2];
  uint8_t buf[4];
  void **v12;
  __int16 v13;
  int v14;

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1);
  v4 = *(unsigned __int8 *)(a1 + 1428);
  *(_BYTE *)(a1 + 1428) = a2;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a1, __p);
    v6 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v12 = v6;
    v13 = 1024;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "User routed changed: Device %{public}s, value %d", buf, 0x12u);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  if (v4 != a2)
  {
    sub_100034264((uint64_t)v10);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 15);
  }
  return sub_100034234((uint64_t)v10);
}

void sub_10044131C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10044133C(uint64_t a1, char **a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  if ((char **)(a1 + 1432) != a2)
    sub_100456468((_QWORD *)(a1 + 1432), *a2, a2[1], a2[1] - *a2);
  return sub_100034234((uint64_t)v5);
}

void sub_100441394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004413A8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_BYTE **)(a1 + 1432);
  v5 = *(_BYTE **)(a1 + 1440);
  v6 = v5 - v4;
  if (v5 != v4)
  {
    sub_1002A367C(a2, v5 - v4);
    v7 = (char *)a2[1];
    memmove(v7, v4, v6);
    a2[1] = &v7[v6];
  }
  return sub_100034234((uint64_t)v9);
}

void sub_100441430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100441444(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  *(_QWORD *)(a1 + 1464) = a2;
  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 1152))(v4, a1, *(_QWORD *)(a1 + 1464));
  return sub_100034234((uint64_t)v6);
}

void sub_1004414A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004414B4(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(_QWORD *)(a1 + 1464);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_1004414F8(uint64_t a1, int a2)
{
  int v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  v4 = *(_DWORD *)(a1 + 420);
  if (v4 != a2)
    *(_DWORD *)(a1 + 420) = a2;
  sub_100034264((uint64_t)v6);
  if (v4 != a2)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 3);
  }
  return sub_100034234((uint64_t)v6);
}

void sub_10044159C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004415B0(uint64_t a1, unsigned int a2, int a3, _OWORD *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  NSObject *v15;
  void **v16;
  uint64_t v17;
  void *__p[2];
  char v20;
  unsigned int *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD v24[2];
  unsigned int v25;
  uint8_t buf[4];
  void **v27;

  v25 = a2;
  v24[0] = 0;
  v24[1] = 0;
  sub_10003415C((uint64_t)v24, a1);
  v10 = *(_QWORD *)(a1 + 336);
  if (!v10)
    goto LABEL_12;
  v11 = a1 + 336;
  do
  {
    v12 = *(_DWORD *)(v10 + 28);
    v13 = v12 >= a2;
    if (v12 >= a2)
      v14 = (uint64_t *)v10;
    else
      v14 = (uint64_t *)(v10 + 8);
    if (v13)
      v11 = v10;
    v10 = *v14;
  }
  while (*v14);
  if (v11 == a1 + 336 || *(_DWORD *)(v11 + 28) > a2 || *(_DWORD *)(v11 + 32) != a3 && (a3 || a2 != 0x40000))
  {
LABEL_12:
    v21 = &v25;
    *((_DWORD *)sub_10033EC4C((uint64_t **)(a1 + 328), &v25, (uint64_t)&unk_100740F58, &v21) + 8) = a3;
    a5 = 1;
  }
  v21 = 0;
  v22 = 0;
  v23 = 0;
  sub_100456768((uint64_t *)&v21, a1 + 328);
  if ((_OWORD *)(a1 + 352) != a4)
    *(_OWORD *)(a1 + 352) = *a4;
  sub_100034264((uint64_t)v24);
  if ((a5 & sub_10043E93C((unsigned __int8 *)a1)) == 1)
  {
    v15 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a1, __p);
      if (v20 >= 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v27 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Writing capabilities map to disk for device %{public}s", buf, 0xCu);
      if (v20 < 0)
        operator delete(__p[0]);
    }
    v17 = sub_10034D650();
    (*(void (**)(uint64_t, uint64_t, unsigned int **))(*(_QWORD *)v17 + 248))(v17, a1, &v21);
  }
  *(_BYTE *)(a1 + 641) = 0;
  sub_10001A82C((uint64_t)&v21, v22);
  return sub_100034234((uint64_t)v24);
}

void sub_1004417B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  _QWORD *v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD *);
  v9 = va_arg(va1, _QWORD);
  sub_10001A82C((uint64_t)va, v8);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004417EC(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t *v5;
  int v7;
  uint64_t *v8;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0)
      v5 = a2;
    else
      v5 = (uint64_t *)*a2;
    v7 = 136315138;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Update magic paired device name to %s", (uint8_t *)&v7, 0xCu);
  }
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092F600);
  return sub_1004219B0((uint64_t)off_1009778D0, a1);
}

uint64_t sub_1004418E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  v2 = *(_QWORD *)(a1 + 624);
  v3 = *(_QWORD *)(a1 + 616);
  while (v2 != v3)
  {
    v2 -= 168;
    sub_100456028(a1 + 632, v2);
  }
  *(_QWORD *)(a1 + 624) = v3;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_100441954(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, (uint64_t)a1);
  v4 = a1[78];
  if (v4 >= a1[79])
  {
    v5 = sub_100456A70(a1 + 77, a2);
  }
  else
  {
    sub_100456B84(a1[78], a2);
    v5 = v4 + 168;
    a1[78] = v4 + 168;
  }
  a1[78] = v5;
  return sub_100034234((uint64_t)v7);
}

void sub_1004419D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1004419F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1);
  v4 = *(_QWORD *)(a1 + 624);
  v5 = *(_QWORD *)(a1 + 616);
  if (v4 != v5)
  {
    *(_BYTE *)a2 = *(_BYTE *)v5;
    sub_1005BCD5C((__n128 *)(a2 + 1), (__n128 *)(v5 + 1));
    v6 = *(_WORD *)(v5 + 18);
    *(_BYTE *)(a2 + 20) = *(_BYTE *)(v5 + 20);
    *(_WORD *)(a2 + 18) = v6;
    std::string::operator=((std::string *)(a2 + 24), (const std::string *)(v5 + 24));
    v7 = *(_DWORD *)(v5 + 48);
    *(_BYTE *)(a2 + 52) = *(_BYTE *)(v5 + 52);
    *(_DWORD *)(a2 + 48) = v7;
    std::string::operator=((std::string *)(a2 + 56), (const std::string *)(v5 + 56));
    *(_BYTE *)(a2 + 80) = *(_BYTE *)(v5 + 80);
    std::string::operator=((std::string *)(a2 + 88), (const std::string *)(v5 + 88));
    v8 = *(_OWORD *)(v5 + 112);
    v9 = *(_OWORD *)(v5 + 128);
    v10 = *(_OWORD *)(v5 + 144);
    *(_DWORD *)(a2 + 159) = *(_DWORD *)(v5 + 159);
    *(_OWORD *)(a2 + 128) = v9;
    *(_OWORD *)(a2 + 144) = v10;
    *(_OWORD *)(a2 + 112) = v8;
  }
  sub_100034234((uint64_t)v12);
  return v4 != v5;
}

void sub_100441AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100441AE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  _BOOL4 v7;
  int v8;
  uint64_t v9;
  _BOOL4 v10;
  NSObject *v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  _BOOL4 v23;
  NSObject *v24;
  char *v25;
  void **v26;
  _BOOL4 v27;
  _BOOL4 v28;
  int v29;
  int v30;
  uint64_t v31;
  _BOOL4 v32;
  NSObject *v33;
  void **v34;
  __int128 v36;
  void *__p[2];
  char v38;
  uint8_t v39[4];
  void **v40;
  uint8_t buf[48];
  void *v42[2];
  __int128 v43;
  void *v44[2];
  _OWORD v45[3];
  __int128 v46;
  uint64_t v47;

  v2 = sub_100027F68();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2))
    goto LABEL_26;
  LOBYTE(v36) = 0;
  v3 = sub_100027F68();
  sub_100091AE8(buf, "CATT");
  sub_100091AE8(__p, "ForceDisableAll");
  (*(void (**)(uint64_t, uint8_t *, void **, __int128 *))(*(_QWORD *)v3 + 72))(v3, buf, __p, &v36);
  if (v38 < 0)
    operator delete(__p[0]);
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
  if ((_BYTE)v36)
  {
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Classic GATT service ForceDisableAll override, disabling classic att support", buf, 2u);
    }
    return 0;
  }
  v39[0] = 0;
  v6 = *(_DWORD *)(a1 + 1064);
  if (v6 == 2)
  {
    v8 = 1452;
  }
  else
  {
    v7 = 0;
    if (v6 != 1)
      goto LABEL_15;
    v8 = 76;
  }
  v7 = *(_DWORD *)(a1 + 1068) == v8;
LABEL_15:
  v9 = sub_100027F68();
  sub_100091AE8(buf, "CATT");
  sub_100091AE8(__p, "AllowAppleDevices");
  (*(void (**)(uint64_t, uint8_t *, void **, uint8_t *))(*(_QWORD *)v9 + 72))(v9, buf, __p, v39);
  if (v38 < 0)
    operator delete(__p[0]);
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
  if (v39[0])
    v10 = v7;
  else
    v10 = 0;
  if (v10)
  {
    v11 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Classic GATT service AllowAppleDevices override, forcing classic att support", buf, 2u);
    }
    return 1;
  }
LABEL_26:
  v12 = *(_DWORD *)(a1 + 1068);
  if (v12 != 76
    || ((v13 = *(_DWORD *)(a1 + 1072) - 8202, v14 = v13 > 0x15, v15 = (1 << v13) & 0x20033F, !v14)
      ? (v16 = v15 == 0)
      : (v16 = 1),
        v16))
  {
    if (!*(_BYTE *)(a1 + 1061) || (*(_BYTE *)(a1 + 1082) & 0x80) == 0)
    {
      v17 = 0;
      goto LABEL_42;
    }
  }
  v18 = *(_DWORD *)(a1 + 1064);
  if (v18 == 2)
  {
    v19 = 1452;
  }
  else
  {
    if (v18 != 1)
    {
      v20 = 0;
      goto LABEL_41;
    }
    v19 = 76;
  }
  v20 = v12 == v19;
LABEL_41:
  v17 = (*(unsigned int *)(a1 + 176) < 0x30uLL) & (0x8000001B0000uLL >> *(_DWORD *)(a1 + 176)) & v20;
LABEL_42:
  v36 = xmmword_1007412F0;
  v21 = *(_DWORD *)(a1 + 1064);
  if (v21 == 2)
  {
    v22 = 1452;
  }
  else
  {
    if (v21 != 1)
      goto LABEL_48;
    v22 = 76;
  }
  if (v12 == v22)
  {
    v23 = 0;
    goto LABEL_49;
  }
LABEL_48:
  v23 = sub_100442444(a1, &v36, 4u);
LABEL_49:
  v5 = v17 | v23;
  v24 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v25 = (_DWORD)v5 ? "" : "not ";
    sub_10043E5F8(a1, __p);
    v26 = v38 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = v25;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v26;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&buf[24] = v17;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v23;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Classic GATT service is %ssupported for device %{public}s. appleDeviceAllowedForCatt %d, nonAppleWithSdpAttribute %d", buf, 0x22u);
    if (v38 < 0)
      operator delete(__p[0]);
  }
  v47 = 0;
  v46 = 0u;
  memset(v45, 0, sizeof(v45));
  v43 = 0u;
  *(_OWORD *)v44 = 0u;
  *(_OWORD *)v42 = 0u;
  memset(buf, 0, sizeof(buf));
  sub_1005BCCCC((uint64_t)&buf[1]);
  buf[18] = 0;
  buf[20] = 0;
  BYTE2(v42[0]) = 0;
  BYTE4(v42[0]) = 0;
  DWORD1(v45[1]) = 0;
  memset(&buf[24], 0, 24);
  LOBYTE(v42[0]) = 0;
  v43 = 0uLL;
  v42[1] = 0;
  LOBYTE(v44[0]) = 0;
  memset(v45, 0, 19);
  v44[1] = 0;
  BYTE8(v45[1]) = 1;
  BYTE2(v47) = 0;
  *(_QWORD *)((char *)&v45[1] + 14) = 0;
  *(_QWORD *)((char *)&v45[1] + 9) = 0;
  v46 = 0uLL;
  *((_QWORD *)&v45[2] + 1) = 0;
  LOBYTE(v47) = 0;
  v27 = sub_1004419F4(a1, (uint64_t)buf);
  if (BYTE12(v46))
    v28 = v27;
  else
    v28 = 0;
  v29 = sub_100442658(a1);
  __p[0] = 0;
  __p[1] = 0;
  sub_10003415C((uint64_t)__p, a1);
  v30 = *(_DWORD *)(a1 + 176);
  sub_100034234((uint64_t)__p);
  v32 = (v30 == 22 || v30 == 17) && *(_BYTE *)(a1 + 1060) == 0;
  if (((v28 | v29) & 1) != 0 || v32)
  {
    v33 = qword_1009997E8;
    v5 = 0;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a1, __p);
      if (v38 >= 0)
        v34 = __p;
      else
        v34 = (void **)__p[0];
      *(_DWORD *)v39 = 136446210;
      v40 = v34;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Override CATT feature to disable for %{public}s", v39, 0xCu);
      if (v38 < 0)
        operator delete(__p[0]);
      v5 = 0;
    }
  }
  if (SHIBYTE(v45[0]) < 0)
    operator delete(v44[1]);
  if (SHIBYTE(v43) < 0)
    operator delete(v42[1]);
  if ((char)buf[47] < 0)
    operator delete(*(void **)&buf[24]);
  nullsub_90(&buf[1], v31);
  return v5;
}

void sub_100442080(_Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_10026B73C((uint64_t)&a20, a2);
  _Unwind_Resume(a1);
}

BOOL sub_1004420E0(uint64_t a1)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)(a1 + 1064);
  if (v1 == 2)
  {
    v2 = 1452;
    return *(_DWORD *)(a1 + 1068) == v2;
  }
  if (v1 == 1)
  {
    v2 = 76;
    return *(_DWORD *)(a1 + 1068) == v2;
  }
  return 0;
}

uint64_t sub_100442118(uint64_t a1, int a2)
{
  unsigned int v3;
  int v4;
  uint64_t result;
  char v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  if (*(_DWORD *)(a1 + 1068) != 76)
    goto LABEL_26;
  v3 = *(_DWORD *)(a1 + 1072);
  if (v3 - 8194 > 0x1D)
    goto LABEL_26;
  v4 = 1 << (v3 - 2);
  if ((v4 & 0x20033F00) != 0)
    goto LABEL_4;
  if ((v4 & 0x409B) == 0)
    goto LABEL_26;
  result = 1;
  if (a2 <= 34)
  {
    if (a2 == 12)
      return result;
    if (a2 != 13)
    {
      if (a2 == 25)
        return v3 == 8194;
      goto LABEL_24;
    }
    if (v3 - 8201 > 0x16)
      goto LABEL_26;
    if (((1 << (v3 - 9)) & 0x40067E) != 0)
      goto LABEL_4;
    if (v3 == 8201)
      return 0;
LABEL_26:
    if (a2 != 32)
      goto LABEL_29;
    goto LABEL_27;
  }
  if ((a2 - 35) < 3)
    return result;
LABEL_24:
  if (v3 - 8202 > 0x15 || ((1 << (v3 - 10)) & 0x20033F) == 0)
    goto LABEL_26;
LABEL_4:
  if (a2 > 0x25)
    goto LABEL_29;
  if (((1 << a2) & 0x3800C01000) != 0)
    return 1;
  if (a2 != 1)
  {
    if (a2 != 32)
      goto LABEL_29;
LABEL_27:
    v6 = *(_BYTE *)(a1 + 1092);
    return v6 & 1;
  }
  if (v3 >> 1 == 4103)
    return 1;
LABEL_29:
  if (!*(_BYTE *)(a1 + 1061))
    return 0;
  result = 0;
  switch(a2)
  {
    case 0:
      v6 = *(_BYTE *)(a1 + 1080);
      return v6 & 1;
    case 1:
      v8 = *(unsigned __int8 *)(a1 + 1080);
      goto LABEL_77;
    case 2:
      v9 = *(unsigned __int8 *)(a1 + 1080);
      goto LABEL_79;
    case 3:
      v10 = *(unsigned __int8 *)(a1 + 1080);
      goto LABEL_81;
    case 4:
      v11 = *(unsigned __int8 *)(a1 + 1080);
      goto LABEL_83;
    case 5:
    case 6:
      v7 = *(unsigned __int8 *)(a1 + 1080);
      goto LABEL_85;
    case 7:
      v12 = *(unsigned __int8 *)(a1 + 1080);
      return v12 >> 7;
    case 8:
      v6 = *(_BYTE *)(a1 + 1081);
      return v6 & 1;
    case 9:
      v8 = *(unsigned __int8 *)(a1 + 1081);
      goto LABEL_77;
    case 10:
      v9 = *(unsigned __int8 *)(a1 + 1081);
      goto LABEL_79;
    case 11:
      v10 = *(unsigned __int8 *)(a1 + 1081);
      goto LABEL_81;
    case 12:
      v11 = *(unsigned __int8 *)(a1 + 1081);
      goto LABEL_83;
    case 13:
      v7 = *(unsigned __int8 *)(a1 + 1081);
      goto LABEL_85;
    case 14:
      v13 = *(unsigned __int8 *)(a1 + 1081);
      goto LABEL_87;
    case 15:
      v12 = *(unsigned __int8 *)(a1 + 1081);
      return v12 >> 7;
    case 16:
      v6 = *(_BYTE *)(a1 + 1082);
      return v6 & 1;
    case 17:
      v8 = *(unsigned __int8 *)(a1 + 1082);
      goto LABEL_77;
    case 19:
      v10 = *(unsigned __int8 *)(a1 + 1082);
      goto LABEL_81;
    case 20:
      v11 = *(unsigned __int8 *)(a1 + 1082);
      goto LABEL_83;
    case 21:
      v7 = *(unsigned __int8 *)(a1 + 1082);
      goto LABEL_85;
    case 22:
      v13 = *(unsigned __int8 *)(a1 + 1082);
      goto LABEL_87;
    case 23:
      v12 = *(unsigned __int8 *)(a1 + 1082);
      return v12 >> 7;
    case 24:
      v6 = *(_BYTE *)(a1 + 1083);
      return v6 & 1;
    case 25:
      v8 = *(unsigned __int8 *)(a1 + 1083);
      goto LABEL_77;
    case 26:
      v9 = *(unsigned __int8 *)(a1 + 1083);
      goto LABEL_79;
    case 27:
      v10 = *(unsigned __int8 *)(a1 + 1083);
      goto LABEL_81;
    case 28:
      v11 = *(unsigned __int8 *)(a1 + 1083);
      goto LABEL_83;
    case 29:
      v7 = *(unsigned __int8 *)(a1 + 1083);
      goto LABEL_85;
    case 30:
      v13 = *(unsigned __int8 *)(a1 + 1083);
      goto LABEL_87;
    case 31:
      return *(_DWORD *)(a1 + 1080) >> 31;
    case 33:
      v8 = *(unsigned __int8 *)(a1 + 1092);
      goto LABEL_77;
    case 34:
      v9 = *(unsigned __int8 *)(a1 + 1092);
      goto LABEL_79;
    case 35:
      v7 = *(unsigned __int8 *)(a1 + 1092);
      goto LABEL_85;
    case 36:
      v13 = *(unsigned __int8 *)(a1 + 1092);
      goto LABEL_87;
    case 37:
      v12 = *(unsigned __int8 *)(a1 + 1092);
      return v12 >> 7;
    case 38:
      v6 = *(_BYTE *)(a1 + 1093);
      return v6 & 1;
    case 39:
      v8 = *(unsigned __int8 *)(a1 + 1093);
      goto LABEL_77;
    case 40:
      v9 = *(unsigned __int8 *)(a1 + 1093);
      goto LABEL_79;
    case 41:
      v10 = *(unsigned __int8 *)(a1 + 1093);
      goto LABEL_81;
    case 42:
      v11 = *(unsigned __int8 *)(a1 + 1093);
      goto LABEL_83;
    case 43:
      v7 = *(unsigned __int8 *)(a1 + 1093);
      goto LABEL_85;
    case 44:
      v13 = *(unsigned __int8 *)(a1 + 1093);
      goto LABEL_87;
    case 45:
      v6 = *(_BYTE *)(a1 + 1094);
      return v6 & 1;
    case 46:
      v8 = *(unsigned __int8 *)(a1 + 1094);
LABEL_77:
      result = (v8 >> 1) & 1;
      break;
    case 47:
      v9 = *(unsigned __int8 *)(a1 + 1094);
LABEL_79:
      result = (v9 >> 2) & 1;
      break;
    case 48:
      v10 = *(unsigned __int8 *)(a1 + 1094);
LABEL_81:
      result = (v10 >> 3) & 1;
      break;
    case 49:
      v11 = *(unsigned __int8 *)(a1 + 1094);
LABEL_83:
      result = (v11 >> 4) & 1;
      break;
    case 50:
      v7 = *(unsigned __int8 *)(a1 + 1094);
LABEL_85:
      result = (v7 >> 5) & 1;
      break;
    case 51:
      v13 = *(unsigned __int8 *)(a1 + 1094);
LABEL_87:
      result = (v13 >> 6) & 1;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_100442444(uint64_t a1, _BYTE *a2, unsigned int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _BOOL8 v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t *v18;
  NSObject *v19;
  const char *v20;
  uint64_t v22;
  _QWORD v23[2];
  _QWORD v24[2];
  uint8_t buf[4];
  unsigned int v26;
  __int16 v27;
  const char *v28;

  if (*a2 != 3)
    return 0;
  v24[0] = 0;
  v24[1] = 0;
  sub_10003415C((uint64_t)v24, a1);
  v6 = *(_QWORD **)(a1 + 584);
  v7 = (_QWORD *)(a1 + 592);
  if (v6 == v7)
  {
LABEL_10:
    v11 = 0;
  }
  else
  {
    while (!sub_1002C5144(v6[4], (uint64_t)a2))
    {
      v8 = (_QWORD *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v6[2];
          v10 = *v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
      if (v9 == v7)
        goto LABEL_10;
    }
    v22 = 0;
    v23[0] = 0;
    v23[1] = 0;
    sub_10033F038((uint64_t)&v22, (uint64_t)(v6 + 5));
    v12 = (_QWORD *)v23[0];
    if (!v23[0])
      goto LABEL_21;
    v13 = v23;
    v14 = v23[0];
    do
    {
      v15 = (uint64_t *)v14;
      v16 = v13;
      v17 = *(_DWORD *)(v14 + 32);
      v18 = (uint64_t *)(v14 + 8);
      if (v17 >= a3)
      {
        v18 = v15;
        v13 = v15;
      }
      v14 = *v18;
    }
    while (v14);
    if (v13 == v23)
      goto LABEL_21;
    if (v17 < a3)
      v15 = v16;
    if (*((_DWORD *)v15 + 8) > a3)
LABEL_21:
      v13 = v23;
    v11 = v23 != v13;
    v19 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      v20 = "has not";
      if (v23 != v13)
        v20 = "has";
      *(_DWORD *)buf = 67109378;
      v26 = a3;
      v27 = 2082;
      v28 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "SDP attribute 0x%04x %{public}s been found", buf, 0x12u);
      v12 = (_QWORD *)v23[0];
    }
    sub_10001A82C((uint64_t)&v22, v12);
  }
  sub_100034234((uint64_t)v24);
  return v11;
}

void sub_100442638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100442658(uint64_t a1)
{
  char *p_p;
  char *v2;
  uint64_t v3;
  char **v4;
  char *v5;
  int64_t v6;
  char *v7;
  int v8;
  char **v9;
  int64_t v10;
  char *v11;
  char **v12;
  BOOL v13;
  int v14;
  int64_t v15;
  void *v16;
  int64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char **v22;
  char *v23[2];
  void *__p;
  int64_t v25;
  uint64_t v26;

  __p = 0;
  v25 = 0;
  v26 = 0;
  p_p = (char *)&__p;
  sub_10043F78C(a1, (uint64_t)&__p);
  if (v26 >= 0)
    v2 = (char *)&__p + HIBYTE(v26);
  else
    v2 = (char *)__p + v25;
  if (v26 < 0)
    p_p = (char *)__p;
  while (p_p != v2)
  {
    *p_p = __tolower(*p_p);
    ++p_p;
  }
  if (qword_10097AC70 != -1)
    dispatch_once(&qword_10097AC70, &stru_10092F5E0);
  v3 = sub_1002F7C88(qword_10097AC68, 2);
  v22 = 0;
  v23[0] = 0;
  v23[1] = 0;
  sub_1005D9E68(v3, (uint64_t *)&v22);
  v4 = v22;
  if (v22 == v23)
  {
LABEL_42:
    v20 = 0;
  }
  else
  {
    if (v26 >= 0)
      v5 = (char *)&__p;
    else
      v5 = (char *)__p;
    if (v26 >= 0)
      v6 = HIBYTE(v26);
    else
      v6 = v25;
    v7 = &v5[v6];
    while (1)
    {
      v8 = *((char *)v4 + 55);
      v9 = v8 >= 0 ? v4 + 4 : (char **)v4[4];
      v10 = v8 >= 0 ? *((unsigned __int8 *)v4 + 55) : (int64_t)v4[5];
      if (!v10)
        break;
      if (v6 >= v10)
      {
        v14 = *(unsigned __int8 *)v9;
        v15 = v6;
        v16 = v5;
        do
        {
          v17 = v15 - v10;
          if (v17 == -1)
            break;
          v18 = (char *)memchr(v16, v14, v17 + 1);
          if (!v18)
            break;
          v19 = v18;
          if (!memcmp(v18, v9, v10))
          {
            if (v19 == v7 || v19 - v5 == -1)
              break;
            goto LABEL_41;
          }
          v16 = v19 + 1;
          v15 = v7 - (v19 + 1);
        }
        while (v15 >= v10);
      }
      v11 = v4[1];
      if (v11)
      {
        do
        {
          v12 = (char **)v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char **)v4[2];
          v13 = *v12 == (char *)v4;
          v4 = v12;
        }
        while (!v13);
      }
      v4 = v12;
      if (v12 == v23)
        goto LABEL_42;
    }
LABEL_41:
    v20 = 1;
  }
  sub_100056BAC((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
  return v20;
}

void sub_100442854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100442878(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1060);
}

uint64_t sub_100442880(uint64_t a1)
{
  int v1;
  unsigned int v2;
  NSObject *v3;
  _DWORD v5[2];
  __int16 v6;
  int v7;

  if (*(_BYTE *)(a1 + 1061))
    v1 = (*(unsigned __int8 *)(a1 + 1094) >> 3) & 1;
  else
    v1 = 0;
  v2 = _os_feature_enabled_impl("BluetoothFeatures", "AACPTransportForUARP");
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109376;
    v5[1] = v2;
    v6 = 1024;
    v7 = v1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Device::supportsUARPOverAACP: feature flag: %u, DID bit: %u", (uint8_t *)v5, 0xEu);
  }
  return v1 & v2;
}

uint64_t sub_100442964(uint64_t a1)
{
  uint64_t v1;
  int v3;
  __int128 v5;
  void *v6[2];
  __int128 v7;
  void *v8[2];
  __int128 v9;
  void *__p[2];
  _OWORD v11[3];
  __int128 v12;
  uint64_t v13;

  v13 = 0;
  v12 = 0u;
  memset(v11, 0, sizeof(v11));
  v9 = 0u;
  *(_OWORD *)__p = 0u;
  v7 = 0u;
  *(_OWORD *)v8 = 0u;
  v5 = 0u;
  *(_OWORD *)v6 = 0u;
  sub_1005BCCCC((uint64_t)&v5 + 1);
  BYTE2(v6[0]) = 0;
  BYTE4(v6[0]) = 0;
  BYTE2(v8[0]) = 0;
  BYTE4(v8[0]) = 0;
  DWORD1(v11[1]) = 0;
  v7 = 0uLL;
  v6[1] = 0;
  LOBYTE(v8[0]) = 0;
  v9 = 0uLL;
  v8[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v11, 0, 19);
  __p[1] = 0;
  BYTE8(v11[1]) = 1;
  BYTE2(v13) = 0;
  *(_QWORD *)((char *)&v11[1] + 14) = 0;
  *(_QWORD *)((char *)&v11[1] + 9) = 0;
  v12 = 0uLL;
  *((_QWORD *)&v11[2] + 1) = 0;
  LOBYTE(v13) = 0;
  LODWORD(a1) = sub_1004419F4(a1, (uint64_t)&v5);
  v3 = BYTE14(v12);
  if (SHIBYTE(v11[0]) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[1]);
  if (SHIBYTE(v7) < 0)
    operator delete(v6[1]);
  if (v3)
    a1 = a1;
  else
    a1 = 0;
  nullsub_90((char *)&v5 + 1, v1);
  return a1;
}

void sub_100442A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10026B73C((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_100442AB4(uint64_t a1)
{
  char *p_p;
  char *v2;
  uint64_t v3;
  char **v4;
  char *v5;
  int64_t v6;
  char *v7;
  int v8;
  char **v9;
  int64_t v10;
  char *v11;
  char **v12;
  BOOL v13;
  int v14;
  int64_t v15;
  void *v16;
  int64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char **v22;
  char *v23[2];
  void *__p;
  int64_t v25;
  uint64_t v26;

  __p = 0;
  v25 = 0;
  v26 = 0;
  p_p = (char *)&__p;
  sub_10043F78C(a1, (uint64_t)&__p);
  if (v26 >= 0)
    v2 = (char *)&__p + HIBYTE(v26);
  else
    v2 = (char *)__p + v25;
  if (v26 < 0)
    p_p = (char *)__p;
  while (p_p != v2)
  {
    *p_p = __tolower(*p_p);
    ++p_p;
  }
  if (qword_10097AC70 != -1)
    dispatch_once(&qword_10097AC70, &stru_10092F5E0);
  v3 = sub_1002F7C88(qword_10097AC68, 2);
  v22 = 0;
  v23[0] = 0;
  v23[1] = 0;
  sub_1005D9DA8(v3, (uint64_t *)&v22);
  v4 = v22;
  if (v22 == v23)
  {
LABEL_42:
    v20 = 0;
  }
  else
  {
    if (v26 >= 0)
      v5 = (char *)&__p;
    else
      v5 = (char *)__p;
    if (v26 >= 0)
      v6 = HIBYTE(v26);
    else
      v6 = v25;
    v7 = &v5[v6];
    while (1)
    {
      v8 = *((char *)v4 + 55);
      v9 = v8 >= 0 ? v4 + 4 : (char **)v4[4];
      v10 = v8 >= 0 ? *((unsigned __int8 *)v4 + 55) : (int64_t)v4[5];
      if (!v10)
        break;
      if (v6 >= v10)
      {
        v14 = *(unsigned __int8 *)v9;
        v15 = v6;
        v16 = v5;
        do
        {
          v17 = v15 - v10;
          if (v17 == -1)
            break;
          v18 = (char *)memchr(v16, v14, v17 + 1);
          if (!v18)
            break;
          v19 = v18;
          if (!memcmp(v18, v9, v10))
          {
            if (v19 == v7 || v19 - v5 == -1)
              break;
            goto LABEL_41;
          }
          v16 = v19 + 1;
          v15 = v7 - (v19 + 1);
        }
        while (v15 >= v10);
      }
      v11 = v4[1];
      if (v11)
      {
        do
        {
          v12 = (char **)v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char **)v4[2];
          v13 = *v12 == (char *)v4;
          v4 = v12;
        }
        while (!v13);
      }
      v4 = v12;
      if (v12 == v23)
        goto LABEL_42;
    }
LABEL_41:
    v20 = 1;
  }
  sub_100056BAC((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
  return v20;
}

void sub_100442CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100442CD4(uint64_t a1)
{
  char *p_p;
  char *v2;
  uint64_t v3;
  char **v4;
  char *v5;
  int64_t v6;
  char *v7;
  int v8;
  char **v9;
  int64_t v10;
  char *v11;
  char **v12;
  BOOL v13;
  int v14;
  int64_t v15;
  void *v16;
  int64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char **v22;
  char *v23[2];
  void *__p;
  int64_t v25;
  uint64_t v26;

  __p = 0;
  v25 = 0;
  v26 = 0;
  p_p = (char *)&__p;
  sub_10043F78C(a1, (uint64_t)&__p);
  if (v26 >= 0)
    v2 = (char *)&__p + HIBYTE(v26);
  else
    v2 = (char *)__p + v25;
  if (v26 < 0)
    p_p = (char *)__p;
  while (p_p != v2)
  {
    *p_p = __tolower(*p_p);
    ++p_p;
  }
  if (qword_10097AC70 != -1)
    dispatch_once(&qword_10097AC70, &stru_10092F5E0);
  v3 = sub_1002F7C88(qword_10097AC68, 2);
  v22 = 0;
  v23[0] = 0;
  v23[1] = 0;
  sub_1005D9E08(v3, (uint64_t *)&v22);
  v4 = v22;
  if (v22 == v23)
  {
LABEL_42:
    v20 = 0;
  }
  else
  {
    if (v26 >= 0)
      v5 = (char *)&__p;
    else
      v5 = (char *)__p;
    if (v26 >= 0)
      v6 = HIBYTE(v26);
    else
      v6 = v25;
    v7 = &v5[v6];
    while (1)
    {
      v8 = *((char *)v4 + 55);
      v9 = v8 >= 0 ? v4 + 4 : (char **)v4[4];
      v10 = v8 >= 0 ? *((unsigned __int8 *)v4 + 55) : (int64_t)v4[5];
      if (!v10)
        break;
      if (v6 >= v10)
      {
        v14 = *(unsigned __int8 *)v9;
        v15 = v6;
        v16 = v5;
        do
        {
          v17 = v15 - v10;
          if (v17 == -1)
            break;
          v18 = (char *)memchr(v16, v14, v17 + 1);
          if (!v18)
            break;
          v19 = v18;
          if (!memcmp(v18, v9, v10))
          {
            if (v19 == v7 || v19 - v5 == -1)
              break;
            goto LABEL_41;
          }
          v16 = v19 + 1;
          v15 = v7 - (v19 + 1);
        }
        while (v15 >= v10);
      }
      v11 = v4[1];
      if (v11)
      {
        do
        {
          v12 = (char **)v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char **)v4[2];
          v13 = *v12 == (char *)v4;
          v4 = v12;
        }
        while (!v13);
      }
      v4 = v12;
      if (v12 == v23)
        goto LABEL_42;
    }
LABEL_41:
    v20 = 1;
  }
  sub_100056BAC((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
  return v20;
}

void sub_100442ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100442EF4(uint64_t a1)
{
  uint64_t v1;
  int v3;
  __int128 v5;
  void *v6[2];
  __int128 v7;
  void *v8[2];
  __int128 v9;
  void *__p[2];
  _OWORD v11[3];
  __int128 v12;
  uint64_t v13;

  v13 = 0;
  v12 = 0u;
  memset(v11, 0, sizeof(v11));
  v9 = 0u;
  *(_OWORD *)__p = 0u;
  v7 = 0u;
  *(_OWORD *)v8 = 0u;
  v5 = 0u;
  *(_OWORD *)v6 = 0u;
  sub_1005BCCCC((uint64_t)&v5 + 1);
  BYTE2(v6[0]) = 0;
  BYTE4(v6[0]) = 0;
  BYTE2(v8[0]) = 0;
  BYTE4(v8[0]) = 0;
  DWORD1(v11[1]) = 0;
  v7 = 0uLL;
  v6[1] = 0;
  LOBYTE(v8[0]) = 0;
  v9 = 0uLL;
  v8[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v11, 0, 19);
  __p[1] = 0;
  BYTE8(v11[1]) = 1;
  BYTE2(v13) = 0;
  *(_QWORD *)((char *)&v11[1] + 14) = 0;
  *(_QWORD *)((char *)&v11[1] + 9) = 0;
  v12 = 0uLL;
  *((_QWORD *)&v11[2] + 1) = 0;
  LOBYTE(v13) = 0;
  LODWORD(a1) = sub_1004419F4(a1, (uint64_t)&v5);
  v3 = HIBYTE(v12);
  if (SHIBYTE(v11[0]) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[1]);
  if (SHIBYTE(v7) < 0)
    operator delete(v6[1]);
  if (v3)
    a1 = a1;
  else
    a1 = 0;
  nullsub_90((char *)&v5 + 1, v1);
  return a1;
}

void sub_100443028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10026B73C((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_100443044(uint64_t a1, int a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_DWORD *)(a1 + 416) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_100443088(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  NSObject *v12;
  __int128 *v13;
  std::string::size_type v14;
  __int16 *v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  char *v20;
  std::string *v21;
  std::string *v22;
  BOOL v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t result;
  NSObject *v27;
  std::string v28;
  void *__p[2];
  int64_t v30;
  void *v31;
  std::string::size_type v32;
  uint64_t v33;
  void *v34[2];
  uint64_t v35;
  void *v36[2];
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  int64_t v40;
  void *v41;
  std::string::size_type v42;
  uint64_t v43;
  std::string v44;
  _QWORD v45[2];
  std::string v46;
  __int128 buf;
  uint64_t v48;

  v45[0] = 0;
  v45[1] = 0;
  sub_10003415C((uint64_t)v45, a1);
  v2 = *(_QWORD **)(a1 + 584);
  v3 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 344))(v3, a1);
  v4 = sub_100114574();
  if (v4 && (v5 = sub_1001144E8(0), (_DWORD)v5))
  {
    v27 = sub_1000544A0(0x5Cu);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = "Memory Manager initialization failed\n";
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    }
    result = sub_100112D60(v5);
    __break(1u);
  }
  else
  {
    if (v2 != (_QWORD *)(a1 + 592))
    {
      do
      {
        v6 = v2[4];
        buf = 0uLL;
        v48 = 0;
        sub_100091AE8(&buf, "\n|>> ServiceClass: ");
        memset(&v44, 0, sizeof(v44));
        if (*(_BYTE *)v6 == 3)
        {
          if (*(unsigned __int16 *)(v6 + 2) > 4u)
            v7 = sub_10025099C(*(unsigned int **)(v6 + 8));
          else
            v7 = sub_100250C9C(*(unsigned int *)(v6 + 8));
          std::string::assign(&v44, v7);
        }
        v41 = 0;
        v42 = 0;
        v43 = 0;
        sub_100091AE8(&v41, "\n");
        v39 = 0uLL;
        v40 = 0;
        sub_100443628((const void **)&buf, (const void **)&v44.__r_.__value_.__l.__data_, &v46);
        if (v43 >= 0)
          v8 = (const std::string::value_type *)&v41;
        else
          v8 = (const std::string::value_type *)v41;
        if (v43 >= 0)
          v9 = HIBYTE(v43);
        else
          v9 = v42;
        v10 = std::string::append(&v46, v8, v9);
        v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        v40 = v10->__r_.__value_.__r.__words[2];
        v39 = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v46.__r_.__value_.__l.__data_);
        v12 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          v13 = &v39;
          if (v40 < 0)
            v13 = (__int128 *)v39;
          LODWORD(v46.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v46.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v46, 0xCu);
        }
        memset(&v46, 0, sizeof(v46));
        sub_10033F038((uint64_t)&v46, (uint64_t)(v2 + 5));
        v14 = v46.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)v46.__r_.__value_.__l.__data_ != &v46.__r_.__value_.__r.__words[1])
        {
          do
          {
            v38 = *(_OWORD *)(v14 + 40);
            v36[0] = 0;
            v36[1] = 0;
            v37 = 0;
            sub_100091AE8(v36, "|Attribute Key: ");
            v34[0] = 0;
            v34[1] = 0;
            v35 = 0;
            v15 = sub_100250944(*(unsigned __int16 *)(v14 + 32));
            sub_100091AE8(v34, (char *)v15);
            v31 = 0;
            v32 = 0;
            v33 = 0;
            sub_100091AE8(&v31, "\n");
            __p[0] = 0;
            __p[1] = 0;
            v30 = 0;
            sub_100443628((const void **)v36, (const void **)v34, &v28);
            if (v33 >= 0)
              v16 = (const std::string::value_type *)&v31;
            else
              v16 = (const std::string::value_type *)v31;
            if (v33 >= 0)
              v17 = HIBYTE(v33);
            else
              v17 = v32;
            v18 = std::string::append(&v28, v16, v17);
            v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
            v30 = v18->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v19;
            v18->__r_.__value_.__l.__size_ = 0;
            v18->__r_.__value_.__r.__words[2] = 0;
            v18->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v28.__r_.__value_.__l.__data_);
            if (v30 >= 0)
              v20 = (char *)__p;
            else
              v20 = (char *)__p[0];
            sub_10017D55C((uint64_t)&v38, v20);
            if (SHIBYTE(v30) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v33) < 0)
              operator delete(v31);
            if (SHIBYTE(v35) < 0)
              operator delete(v34[0]);
            if (SHIBYTE(v37) < 0)
              operator delete(v36[0]);
            v21 = *(std::string **)(v14 + 8);
            if (v21)
            {
              do
              {
                v22 = v21;
                v21 = (std::string *)v21->__r_.__value_.__r.__words[0];
              }
              while (v21);
            }
            else
            {
              do
              {
                v22 = *(std::string **)(v14 + 16);
                v23 = v22->__r_.__value_.__r.__words[0] == v14;
                v14 = (std::string::size_type)v22;
              }
              while (!v23);
            }
            v14 = (std::string::size_type)v22;
          }
          while (v22 != (std::string *)&v46.__r_.__value_.__r.__words[1]);
        }
        sub_10001A82C((uint64_t)&v46, (_QWORD *)v46.__r_.__value_.__l.__size_);
        if (SHIBYTE(v40) < 0)
          operator delete((void *)v39);
        if (SHIBYTE(v43) < 0)
          operator delete(v41);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__r_.__value_.__l.__data_);
        if (SHIBYTE(v48) < 0)
          operator delete((void *)buf);
        v24 = (_QWORD *)v2[1];
        if (v24)
        {
          do
          {
            v25 = v24;
            v24 = (_QWORD *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v25 = (_QWORD *)v2[2];
            v23 = *v25 == (_QWORD)v2;
            v2 = v25;
          }
          while (!v23);
        }
        v2 = v25;
      }
      while (v25 != (_QWORD *)(a1 + 592));
    }
    if (v4)
      sub_100114548();
    return sub_100034234((uint64_t)v45);
  }
  return result;
}

void sub_100443508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  sub_100034234(v58 - 176);
  _Unwind_Resume(a1);
}

uint64_t sub_100443628@<X0>(const void **a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_1002D6774((uint64_t)a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

uint64_t sub_1004436F8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  NSObject *v7;
  void **v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  char *v12;
  char *v13;
  char *v14;
  const char *v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  void *v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t **v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t **v27;
  uint64_t v28;
  _QWORD v30[5];
  __int128 v31;
  __int128 v32;
  unsigned int v33;
  std::string v34;
  void *v35;
  std::string::size_type v36;
  uint64_t v37;
  void *__p;
  _QWORD *v39;
  uint64_t v40;
  _QWORD v41[2];
  unsigned int *v42;
  std::string buf;

  v41[0] = 0;
  v41[1] = 0;
  sub_10003415C((uint64_t)v41, a1);
  v6 = *(_QWORD **)(a1 + 584);
  v7 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a1, &__p);
    v8 = v40 >= 0 ? &__p : (void **)__p;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Setting SDP Attributes for %{public}s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(v40) < 0)
      operator delete(__p);
  }
  if (v6 != (_QWORD *)(a1 + 592))
  {
    while (!sub_1002C5144(v6[4], a2))
    {
      v9 = (_QWORD *)v6[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v6[2];
          v11 = *v10 == (_QWORD)v6;
          v6 = v10;
        }
        while (!v11);
      }
      v6 = v10;
      if (v10 == (_QWORD *)(a1 + 592))
        goto LABEL_24;
    }
    __p = 0;
    v39 = 0;
    v40 = 0;
    sub_10033F038((uint64_t)&__p, (uint64_t)(v6 + 5));
    v12 = (char *)__p;
    if (__p != &v39)
    {
      do
      {
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *(_OWORD *)(v12 + 40);
        sub_1002C3FB4(&buf);
        v13 = (char *)*((_QWORD *)v12 + 1);
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = *(char **)v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (char *)*((_QWORD *)v12 + 2);
            v11 = *(_QWORD *)v14 == (_QWORD)v12;
            v12 = v14;
          }
          while (!v11);
        }
        v12 = v14;
      }
      while (v14 != (char *)&v39);
    }
    sub_10001A82C((uint64_t)&__p, v39);
    v39 = 0;
    v40 = 0;
    __p = &v39;
    sub_1002C3FB4((_BYTE *)v6[4]);
    free((void *)v6[4]);
    sub_10039430C((uint64_t **)(a1 + 584), (uint64_t)v6);
    sub_10001A82C((uint64_t)&__p, v39);
  }
LABEL_24:
  __p = 0;
  v39 = 0;
  v40 = 0;
  sub_100091AE8(&__p, "\n|>> ServiceClass: ");
  memset(&buf, 0, sizeof(buf));
  if (*(_BYTE *)a2 == 3)
  {
    if (*(unsigned __int16 *)(a2 + 2) > 4u)
      v15 = sub_10025099C(*(unsigned int **)(a2 + 8));
    else
      v15 = sub_100250C9C(*(unsigned int *)(a2 + 8));
    std::string::assign(&buf, v15);
  }
  v35 = 0;
  v36 = 0;
  v37 = 0;
  sub_100091AE8(&v35, "\n");
  sub_100443628((const void **)&__p, (const void **)&buf.__r_.__value_.__l.__data_, &v34);
  if (v37 >= 0)
    v16 = (const std::string::value_type *)&v35;
  else
    v16 = (const std::string::value_type *)v35;
  if (v37 >= 0)
    v17 = HIBYTE(v37);
  else
    v17 = v36;
  v18 = std::string::append(&v34, v16, v17);
  v19 = (void *)v18->__r_.__value_.__r.__words[0];
  v20 = SHIBYTE(v18->__r_.__value_.__r.__words[2]);
  v18->__r_.__value_.__r.__words[0] = 0;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  *(_OWORD *)&v34.__r_.__value_.__r.__words[1] = 0uLL;
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34.__r_.__value_.__l.__size_;
  v23 = (_QWORD *)*a3;
  v21 = a3 + 1;
  v22 = v23;
  if (v23 != v21)
  {
    do
    {
      v33 = *((_DWORD *)v22 + 8);
      v32 = *(_OWORD *)(v22 + 5);
      v31 = 0uLL;
      if (sub_1002C5240(&v31, (uint64_t)&v32))
      {
        v42 = &v33;
        v24 = sub_10033ED08((uint64_t **)&v34, &v33, (uint64_t)&unk_100740F58, &v42);
        *(_OWORD *)(v24 + 5) = v31;
      }
      v25 = (_QWORD *)v22[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_QWORD *)v22[2];
          v11 = *v26 == (_QWORD)v22;
          v22 = v26;
        }
        while (!v11);
      }
      v22 = v26;
    }
    while (v26 != v21);
  }
  *(_QWORD *)&v31 = malloc_type_calloc(1uLL, 0x10uLL, 0x10F2040C8FBA5E1uLL);
  sub_1002C5240((_BYTE *)v31, a2);
  *(_QWORD *)&v32 = &v31;
  v27 = (uint64_t **)(sub_1002BBB54((uint64_t **)(a1 + 584), (unint64_t *)&v31, (uint64_t)&unk_100740F58, (uint64_t **)&v32)+ 5);
  if (v27 != (uint64_t **)&v34)
    sub_10033EDC8(v27, v34.__r_.__value_.__l.__data_, &v34.__r_.__value_.__l.__size_);
  sub_100034264((uint64_t)v41);
  sub_100443C40((_BYTE *)a1);
  v28 = sub_10006BBEC();
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_10044424C;
  v30[3] = &unk_100917378;
  v30[4] = a1;
  sub_100041A34(v28, v30);
  sub_10001A82C((uint64_t)&v34, (_QWORD *)v34.__r_.__value_.__l.__size_);
  if (v20 < 0)
    operator delete(v19);
  if (SHIBYTE(v37) < 0)
    operator delete(v35);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40) < 0)
    operator delete(__p);
  return sub_100034234((uint64_t)v41);
}

void sub_100443B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  sub_100034234((uint64_t)&a38);
  _Unwind_Resume(a1);
}

BOOL sub_100443C40(_BYTE *a1)
{
  _BOOL8 v2;
  _OWORD *v3;
  int v4;
  int v5;
  _OWORD *v6;
  _OWORD *v7;
  int v8;
  _OWORD *v9;
  _OWORD *v10;
  int v11;
  NSObject *v12;
  void **v13;
  _OWORD *i;
  _OWORD *j;
  _OWORD *k;
  _OWORD *v18;
  _OWORD *v19;
  void *__p[2];
  char v21;
  void *v22;
  _OWORD *v23;
  uint64_t v24;
  void *v25;
  _OWORD *v26;
  uint64_t v27;
  void *v28;
  _OWORD *v29;
  uint64_t v30;
  void *v31;
  _BYTE *v32;
  uint64_t v33;
  void *v34;
  _BYTE *v35;
  uint64_t v36;
  void *v37;
  _BYTE *v38;
  uint64_t v39;
  void *v40;
  _BYTE *v41;
  uint64_t v42;
  __int128 v43;
  _BYTE buf[18];
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;

  v43 = xmmword_100741300;
  v2 = sub_100442444((uint64_t)a1, &v43, 0);
  if (v2)
  {
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    if (sub_1004442A0((uint64_t)a1, (uint64_t)&v43, 0x205u, &v40)
      && sub_1004442A0((uint64_t)a1, (uint64_t)&v43, 0x201u, &v37))
    {
      v3 = v40;
      if (v41 - (_BYTE *)v40 == 16)
        v4 = *((_DWORD *)v40 + 2);
      else
        v4 = 0;
      v19 = v37;
      v18 = v38;
      if (v38 - (_BYTE *)v37 == 16)
        v5 = *((_DWORD *)v37 + 2);
      else
        v5 = 0;
      if (v40 != v41)
      {
        do
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          *(_OWORD *)buf = *v3;
          sub_1002C3FB4(buf);
          ++v3;
        }
        while (v3 != (_OWORD *)v41);
        v19 = v37;
        v18 = v38;
      }
      if (v19 != v18)
      {
        do
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          *(_OWORD *)buf = *v19;
          sub_1002C3FB4(buf);
          ++v19;
        }
        while (v19 != (_OWORD *)v38);
      }
    }
    else
    {
      v5 = 0;
      v4 = 0;
    }
    if (sub_1004442A0((uint64_t)a1, (uint64_t)&v43, 0x202u, &v34))
    {
      v7 = v34;
      v6 = v35;
      if (v35 - (_BYTE *)v34 == 16)
        v8 = *((_DWORD *)v34 + 2);
      else
        v8 = 0;
      while (v7 != v6)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        *(_OWORD *)buf = *v7;
        sub_1002C3FB4(buf);
        ++v7;
        v6 = v35;
      }
    }
    else
    {
      v8 = 0;
    }
    if (sub_1004442A0((uint64_t)a1, (uint64_t)&v43, 0x203u, &v31))
    {
      v10 = v31;
      v9 = v32;
      if (v32 - (_BYTE *)v31 == 16)
        v11 = *((_DWORD *)v31 + 2);
      else
        v11 = 0;
      while (v10 != v9)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        *(_OWORD *)buf = *v10;
        sub_1002C3FB4(buf);
        ++v10;
        v9 = v32;
      }
    }
    else
    {
      v11 = 0;
    }
    v12 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8((uint64_t)a1, __p);
      v13 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136447234;
      *(_QWORD *)&buf[4] = v13;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v4;
      v45 = 1024;
      v46 = v5;
      v47 = 1024;
      v48 = v8;
      v49 = 1024;
      v50 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "storeSdpDid “%{public}s deviceId information: vidSrc 0x%x vid 0x%x pid 0x%x version 0x%x", buf, 0x24u);
      if (v21 < 0)
        operator delete(__p[0]);
    }
    sub_100445BAC((uint64_t)a1, v4, v5, v8, v11);
    if (sub_1004442A0((uint64_t)a1, (uint64_t)&v43, 0xA000u, &v28))
    {
      if (v29 != v28)
      {
        if (*((_WORD *)v28 + 1) == 4)
        {
          sub_100445F58((uint64_t)a1, *((_DWORD *)v28 + 2), 0);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
            sub_1006F2050();
          a1[1061] = 0;
        }
      }
      for (i = v28; i != v29; ++i)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        *(_OWORD *)buf = *i;
        sub_1002C3FB4(buf);
      }
    }
    else
    {
      a1[1061] = 0;
    }
    if (sub_1004442A0((uint64_t)a1, (uint64_t)&v43, 0xA001u, &v22))
    {
      if (v23 != v22)
      {
        if (*((_WORD *)v22 + 1) == 8)
        {
          sub_100446234((uint64_t)a1, **((_QWORD **)v22 + 1), 0);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
            sub_1006F1FE4();
          a1[1062] = 0;
        }
      }
      for (j = v22; j != v23; ++j)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        *(_OWORD *)buf = *j;
        sub_1002C3FB4(buf);
      }
    }
    else
    {
      a1[1062] = 0;
    }
    if (sub_1004442A0((uint64_t)a1, (uint64_t)&v43, 0xAFFFu, &v25))
    {
      if (v26 != v25)
      {
        if (*((_WORD *)v25 + 1) == 2)
        {
          sub_1004463C4((uint64_t)a1, *((unsigned __int16 *)v25 + 4));
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
            sub_1006F1F78();
          a1[1063] = 0;
        }
      }
      for (k = v25; k != v26; ++k)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        *(_OWORD *)buf = *k;
        sub_1002C3FB4(buf);
      }
    }
    else
    {
      a1[1063] = 0;
    }
    if (v22)
    {
      v23 = v22;
      operator delete(v22);
    }
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
    if (v28)
    {
      v29 = v28;
      operator delete(v28);
    }
    if (v31)
    {
      v32 = v31;
      operator delete(v31);
    }
    if (v34)
    {
      v35 = v34;
      operator delete(v34);
    }
    if (v37)
    {
      v38 = v37;
      operator delete(v37);
    }
    if (v40)
    {
      v41 = v40;
      operator delete(v40);
    }
  }
  return v2;
}

void sub_1004441A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  if (a21)
    operator delete(a21);
  if (a24)
    operator delete(a24);
  if (a27)
    operator delete(a27);
  if (a30)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

void sub_10044424C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092F540);
  sub_1004703C8((os_unfair_lock_s *)off_1009778E0, v1, 4);
}

uint64_t sub_1004442A0(uint64_t a1, uint64_t a2, unsigned int a3, void **a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int v18;
  _QWORD *v19;
  NSObject *v20;
  uint64_t v21;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  _OWORD *v38;
  _OWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  _QWORD v52[2];
  _QWORD v53[2];
  uint8_t buf[16];

  v53[0] = 0;
  v53[1] = 0;
  sub_10003415C((uint64_t)v53, a1);
  v8 = *(_QWORD **)(a1 + 584);
  v9 = (_QWORD *)(a1 + 592);
  if (v8 != v9)
  {
    while (!sub_1002C5144(v8[4], a2))
    {
      v10 = (_QWORD *)v8[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v8[2];
          v12 = *v11 == (_QWORD)v8;
          v8 = v11;
        }
        while (!v12);
      }
      v8 = v11;
      if (v11 == v9)
        goto LABEL_24;
    }
    v51 = 0;
    v52[0] = 0;
    v52[1] = 0;
    sub_10033F038((uint64_t)&v51, (uint64_t)(v8 + 5));
    v13 = (_QWORD *)v52[0];
    if (!v52[0])
      goto LABEL_21;
    v14 = v52;
    v15 = (uint64_t *)v52[0];
    do
    {
      v16 = v15;
      v17 = v14;
      v18 = *((_DWORD *)v15 + 8);
      if (v18 >= a3)
        v14 = v15;
      else
        ++v15;
      v15 = (uint64_t *)*v15;
    }
    while (v15);
    if (v14 == v52 || (v18 >= a3 ? (v19 = v16) : (v19 = v17), *((_DWORD *)v19 + 8) > a3))
    {
LABEL_21:
      v20 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = a3;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Couldn't find SDP attribute 0x%04x", buf, 8u);
        v13 = (_QWORD *)v52[0];
      }
      sub_10001A82C((uint64_t)&v51, v13);
      goto LABEL_24;
    }
    *(_OWORD *)buf = *(_OWORD *)(v14 + 5);
    v50 = 0uLL;
    if (buf[0] - 6 < 2)
    {
      v23 = *(unsigned __int16 *)&buf[2];
      if (*(_WORD *)&buf[2])
      {
        v24 = 0;
        do
        {
          if (sub_1002C5240(&v50, *(_QWORD *)&buf[8] + 16 * v24))
          {
            v26 = a4[1];
            v25 = (unint64_t)a4[2];
            if ((unint64_t)v26 >= v25)
            {
              v28 = ((char *)v26 - (_BYTE *)*a4) >> 4;
              v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) >> 60)
                abort();
              v30 = v25 - (_QWORD)*a4;
              if (v30 >> 3 > v29)
                v29 = v30 >> 3;
              if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
                v31 = 0xFFFFFFFFFFFFFFFLL;
              else
                v31 = v29;
              if (v31)
                v32 = (char *)sub_10034957C((uint64_t)(a4 + 2), v31);
              else
                v32 = 0;
              v33 = &v32[16 * v28];
              *(_OWORD *)v33 = v50;
              v35 = (char *)*a4;
              v34 = (char *)a4[1];
              v36 = v33;
              if (v34 != *a4)
              {
                do
                {
                  *((_OWORD *)v36 - 1) = *((_OWORD *)v34 - 1);
                  v36 -= 16;
                  v34 -= 16;
                }
                while (v34 != v35);
                v34 = (char *)*a4;
              }
              v27 = v33 + 16;
              *a4 = v36;
              a4[1] = v33 + 16;
              a4[2] = &v32[16 * v31];
              if (v34)
                operator delete(v34);
            }
            else
            {
              *v26 = v50;
              v27 = v26 + 1;
            }
            a4[1] = v27;
            v23 = *(unsigned __int16 *)&buf[2];
          }
          ++v24;
        }
        while (v24 < v23);
      }
LABEL_70:
      v40 = (_QWORD *)v52[0];
      goto LABEL_71;
    }
    if (buf[0])
    {
      if ((sub_1002C5240(&v50, (uint64_t)buf) & 1) != 0)
      {
        v37 = (unint64_t)a4[2];
        v38 = a4[1];
        if ((unint64_t)v38 >= v37)
        {
          v41 = ((char *)v38 - (_BYTE *)*a4) >> 4;
          v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 60)
            abort();
          v43 = v37 - (_QWORD)*a4;
          if (v43 >> 3 > v42)
            v42 = v43 >> 3;
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
            v44 = 0xFFFFFFFFFFFFFFFLL;
          else
            v44 = v42;
          if (v44)
            v45 = (char *)sub_10034957C((uint64_t)(a4 + 2), v44);
          else
            v45 = 0;
          v46 = &v45[16 * v41];
          v47 = &v45[16 * v44];
          *(_OWORD *)v46 = v50;
          v39 = v46 + 16;
          v49 = (char *)*a4;
          v48 = (char *)a4[1];
          if (v48 != *a4)
          {
            do
            {
              *((_OWORD *)v46 - 1) = *((_OWORD *)v48 - 1);
              v46 -= 16;
              v48 -= 16;
            }
            while (v48 != v49);
            v48 = (char *)*a4;
          }
          *a4 = v46;
          a4[1] = v39;
          a4[2] = v47;
          if (v48)
            operator delete(v48);
        }
        else
        {
          *v38 = v50;
          v39 = v38 + 1;
        }
        a4[1] = v39;
        goto LABEL_70;
      }
      v13 = (_QWORD *)v52[0];
    }
    v40 = v13;
LABEL_71:
    sub_10001A82C((uint64_t)&v51, v40);
    v21 = 1;
    goto LABEL_25;
  }
LABEL_24:
  v21 = 0;
LABEL_25:
  sub_100034234((uint64_t)v53);
  return v21;
}

void sub_100444674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  _QWORD *v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD *);
  v8 = va_arg(va1, _QWORD);
  sub_10001A82C((uint64_t)va, v7);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_1004446B0(uint64_t a1, _BYTE *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _BOOL8 v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD v11[2];

  if (*a2 != 3)
    return 0;
  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1);
  v4 = *(_QWORD **)(a1 + 584);
  v5 = (_QWORD *)(a1 + 592);
  if (v4 == (_QWORD *)(a1 + 592))
  {
    v6 = 0;
  }
  else
  {
    while (1)
    {
      v6 = sub_1002C5144(v4[4], (uint64_t)a2);
      if (v6)
        break;
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
      if (v8 == v5)
        goto LABEL_14;
    }
    v6 = 1;
  }
LABEL_14:
  sub_100034234((uint64_t)v11);
  return v6;
}

void sub_10044477C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_100444790(uint64_t a1)
{
  _BOOL8 v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(_QWORD *)(a1 + 600) != 0;
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_1004447DC(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  _OWORD *v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD v10[2];
  uint8_t buf[4];
  int v12;

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1);
  v6 = (_OWORD *)(a1 + 312);
  if ((*(_QWORD *)(a1 + 312) || *(_QWORD *)(a1 + 320)) && *(_DWORD *)(a1 + 304) == (_DWORD)a2)
  {
    if (v6 != a3)
      *v6 = *a3;
  }
  else
  {
    *(_DWORD *)(a1 + 304) = a2;
    if (v6 != a3)
      *v6 = *a3;
    sub_100034264((uint64_t)v10);
    if (sub_10043E93C((unsigned __int8 *)a1))
    {
      v7 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v12 = a2;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Set class of device to %u", buf, 8u);
      }
      v8 = sub_10034D650();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 264))(v8, a1, a2);
    }
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 5);
  }
  return sub_100034234((uint64_t)v10);
}

void sub_100444954(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

unsigned __int16 *sub_100444970(_WORD *a1, uint64_t a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6)
{
  sub_100041698((uint64_t)(a1 + 500), a2);
  a1[508] = a3;
  a1[509] = a4;
  a1[510] = a5;
  a1[511] = a6;
  return sub_1004449C8((uint64_t)a1);
}

unsigned __int16 *sub_1004449C8(uint64_t a1)
{
  NSObject *v2;
  unsigned __int16 *result;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t i;
  int *v9;
  int *v10;
  unsigned int v11;
  uint8_t v12[16];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Updating HID Device Types", v12, 2u);
  }
  result = (unsigned __int16 *)sub_10003EB18(a1 + 1000);
  if (result)
  {
    v4 = *(unsigned __int16 *)(a1 + 1018);
    v5 = *(unsigned __int16 *)(a1 + 1016);
    v6 = *(unsigned __int16 *)(a1 + 1020);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 1060))
      return result;
    v4 = *(_DWORD *)(a1 + 1064);
    v5 = *(_DWORD *)(a1 + 1068);
    v6 = *(_DWORD *)(a1 + 1072);
  }
  v7 = qword_1009995C0;
  for (i = qword_1009995C8; v7 != i; v7 += 40)
  {
    result = (unsigned __int16 *)sub_1002629E0((uint64_t)&unk_100999578, (int *)v7);
    if (v4 == *result)
    {
      result = (unsigned __int16 *)sub_1002629E0((uint64_t)&unk_100999590, (int *)(v7 + 4));
      if (v5 == *result)
      {
        v10 = *(int **)(v7 + 8);
        v9 = *(int **)(v7 + 16);
        if (v9 != v10)
        {
          while (1)
          {
            result = (unsigned __int16 *)sub_1002629E0((uint64_t)&unk_1009995A8, v10);
            if (v6 == *result)
              break;
            if (++v10 == v9)
              goto LABEL_16;
          }
        }
        v11 = *(_DWORD *)(v7 + 32);
        if (v11 >= 0x20)
          abort();
        *(_QWORD *)(a1 + 776) |= 1 << v11;
      }
    }
LABEL_16:
    ;
  }
  return result;
}

BOOL sub_100444B3C(_WORD *a1, uint64_t a2, _WORD *a3, _WORD *a4, _WORD *a5, _WORD *a6)
{
  uint64_t v12;

  v12 = (uint64_t)(a1 + 500);
  if (sub_10003EB18((uint64_t)(a1 + 500)))
  {
    sub_100041698(a2, v12);
    *a3 = a1[508];
    *a4 = a1[509];
    *a5 = a1[510];
    *a6 = a1[511];
  }
  return sub_10003EB18(v12) != 0;
}

BOOL sub_100444BD0(uint64_t a1)
{
  return sub_10003EB18(a1 + 1000) != 0;
}

BOOL sub_100444BF0(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  int v5;

  v5 = *(unsigned __int8 *)(a1 + 1060);
  if (*(_BYTE *)(a1 + 1060))
  {
    *a2 = *(_DWORD *)(a1 + 1064);
    *a3 = *(_DWORD *)(a1 + 1068);
    *a4 = *(_DWORD *)(a1 + 1072);
    *a5 = *(_DWORD *)(a1 + 1076);
  }
  return v5 != 0;
}

uint64_t sub_100444C24(uint64_t a1)
{
  return *(_DWORD *)(a1 + 776) & 1;
}

uint64_t sub_100444C30(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 776) >> 2) & 1;
}

uint64_t sub_100444C3C(uint64_t a1)
{
  int v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v2 = *(_DWORD *)(a1 + 176);
  sub_100034234((uint64_t)v7);
  if (v2 != 26)
    return 0;
  v3 = *(_QWORD *)(a1 + 776);
  v4 = (v3 & 0x2E800) == 0;
  v5 = (v3 >> 18) & 1;
  if (v4)
    return v5;
  else
    return 1;
}

uint64_t sub_100444CA8(uint64_t a1)
{
  int v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(_DWORD *)(a1 + 176);
  sub_100034234((uint64_t)v4);
  if (v2 != 26)
    return 0;
  if ((*(_QWORD *)(a1 + 776) & 0x3000) != 0)
    return 1;
  return (*(_QWORD *)(a1 + 776) >> 14) & 1;
}

uint64_t sub_100444D0C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 776) >> 4) & 1;
}

uint64_t sub_100444D18(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 776) >> 5) & 1;
}

uint64_t sub_100444D24(uint64_t a1)
{
  return *(_BYTE *)(a1 + 777) & 1;
}

uint64_t sub_100444D30(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 777) >> 1) & 1;
}

BOOL sub_100444D3C(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 777) & 3) != 0;
}

uint64_t sub_100444D4C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 777) >> 2) & 1;
}

uint64_t sub_100444D58(uint64_t a1)
{
  uint64_t result;

  result = sub_10003EB18(a1 + 1000);
  if (result)
    return *(unsigned __int16 *)(a1 + 1022) > 0x100u;
  return result;
}

uint64_t sub_100444D8C(uint64_t a1)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  void *__p[2];
  char v9;
  uint8_t buf[8];
  char v11;
  unsigned __int8 v12;

  if ((_os_feature_enabled_impl("BluetoothFeatures", "GameControllerBlockListRemoval") & 1) != 0)
    return 1;
  v12 = 0;
  v3 = sub_100027F68();
  sub_100091AE8(buf, "HID");
  sub_100091AE8(__p, "EnableGamepads");
  (*(void (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(_QWORD *)v3 + 72))(v3, buf, __p, &v12);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(*(void **)buf);
  v4 = *(_QWORD *)(a1 + 776);
  v5 = v12;
  if ((v4 & 0x26800) != 0)
  {
    LODWORD(v6) = 1;
  }
  else
  {
    v6 = (v4 >> 15) & 1;
    if ((v4 & 0x8000) == 0 && v12)
    {
      v7 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Bypassing MFi gamepad authentication", buf, 2u);
        LODWORD(v6) = 0;
        v5 = v12;
      }
      else
      {
        LODWORD(v6) = 0;
        v5 = 1;
      }
    }
  }
  if (v5)
    return 1;
  else
    return v6;
}

void sub_100444EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100444EF8(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 778) >> 1) & 1;
}

uint64_t sub_100444F04(uint64_t a1)
{
  return *(_BYTE *)(a1 + 778) & 1;
}

uint64_t sub_100444F10(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 778) >> 2) & 1;
}

uint64_t sub_100444F1C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 778) >> 4) & 1;
}

uint64_t sub_100444F28(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 778) >> 5) & 1;
}

void sub_100444F34(uint64_t a1)
{
  uint64_t (**v2)();
  unsigned int *v3;

  v2 = &off_100918258;
  v3 = 0;
  sub_100041698(a1 + 1000, (uint64_t)&v2);
  v2 = &off_100918258;
  if (v3)
    sub_100056AAC(v3);
  *(_QWORD *)(a1 + 1016) = 0;
}

void sub_100444F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  if (a10)
    sub_100056AAC(a10);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_100444FA0(_BYTE *result, char a2, char a3)
{
  result[986] = 1;
  result[987] = a2;
  result[996] = a3;
  return result;
}

BOOL sub_100444FB4(_BYTE *a1, _BYTE *a2, _BYTE *a3)
{
  if (!a1[986])
    return 0;
  *a2 = a1[987];
  *a3 = a1[996];
  return a1[986] != 0;
}

uint64_t sub_100444FE4(uint64_t result, int a2)
{
  ++*(_DWORD *)(result + 1156);
  *(_DWORD *)(result + 1160) += a2;
  return result;
}

uint64_t sub_100445000(uint64_t result, int a2)
{
  ++*(_DWORD *)(result + 1148);
  *(_DWORD *)(result + 1152) += a2;
  return result;
}

BOOL sub_10044501C(uint64_t a1)
{
  _BOOL8 v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 988) != 255;
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_100445068(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  _QWORD v8[2];
  uint8_t buf[4];
  int v10;
  __int16 v11;
  int v12;

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1);
  *(_BYTE *)(a1 + 988) = a2;
  v4 = sub_10034D650();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 1392))(v4, a1, a2);
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v10 = a2;
    v11 = 1024;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "setEncryptionKeySize to %d with result %d", buf, 0xEu);
  }
  return sub_100034234((uint64_t)v8);
}

void sub_100445158(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100445174(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 988);
  sub_100034234((uint64_t)v4);
  return v2;
}

BOOL sub_1004451B8(uint64_t a1)
{
  _BOOL8 v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 989) != 255;
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_100445204(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  _QWORD v8[2];
  uint8_t buf[4];
  int v10;
  __int16 v11;
  int v12;

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1);
  *(_BYTE *)(a1 + 989) = a2;
  v4 = sub_10034D650();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 1408))(v4, a1, a2);
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v10 = a2;
    v11 = 1024;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "setEncryptionMode to %d with result %d", buf, 0xEu);
  }
  return sub_100034234((uint64_t)v8);
}

void sub_1004452F4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100445310(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 989);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_100445354(uint64_t a1, int a2)
{
  uint64_t v3;

  *(_DWORD *)(a1 + 992) = a2;
  v3 = sub_10034D650();
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 1424))(v3, a1, *(unsigned int *)(a1 + 992));
}

uint64_t sub_100445388(uint64_t a1)
{
  return *(unsigned int *)(a1 + 992);
}

void sub_100445390(uint64_t a1, int a2)
{
  uint64_t v4;
  NSObject *v5;

  if (sub_10003EB18(a1 + 1000))
  {
    *(_DWORD *)(a1 + 1356) = a2;
    v4 = sub_10034D650();
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 1440))(v4, a1, *(unsigned int *)(a1 + 1356));
  }
  else
  {
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F20BC(a1, v5);
  }
}

uint64_t sub_10044540C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1356);
}

uint64_t sub_100445414(uint64_t a1)
{
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  void **v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void **v12;
  void *__p[2];
  char v15;
  _QWORD v16[4];
  _QWORD v17[4];
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  void **v21;

  v2 = *(unsigned __int8 *)(a1 + 1060);
  v3 = qword_1009997E8;
  v4 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      sub_10043F6EC(a1, (uint64_t)__p);
      if (v15 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v19 = "BOOL BT::Device::isDeviceSupported()";
      v20 = 2082;
      v21 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s - “%{public}s” has deviceID - calling CBUtil isDeviceSupported:", buf, 0x16u);
      if (v15 < 0)
        operator delete(__p[0]);
    }
    v16[0] = CFSTR("DeviceType");
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 176)));
    v17[0] = v6;
    v16[1] = CFSTR("VendorIDSrc");
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 1064)));
    v17[1] = v7;
    v16[2] = CFSTR("VendorID");
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 1068)));
    v17[2] = v8;
    v16[3] = CFSTR("ProductID");
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 1072)));
    v17[3] = v9;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 4));
    v11 = +[CBUtil isDeviceSupported:](CBUtil, "isDeviceSupported:", v10);

  }
  else
  {
    if (v4)
    {
      sub_10043F6EC(a1, (uint64_t)__p);
      v12 = v15 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v19 = "BOOL BT::Device::isDeviceSupported()";
      v20 = 2082;
      v21 = v12;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s - “%{public}s” no deviceID - returning true", buf, 0x16u);
      if (v15 < 0)
        operator delete(__p[0]);
    }
    return 1;
  }
  return (uint64_t)v11;
}

void sub_100445680(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t sub_1004456C8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v11;
  int v12;
  void **v13;
  void *__p[2];
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  void **v24;

  if (qword_10097AC70 != -1)
    dispatch_once(&qword_10097AC70, &stru_10092F5E0);
  v2 = sub_1002F7C88(qword_10097AC68, 2);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  sub_1005D9EC8(v2, &v16);
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
  {
    v11 = *(_DWORD *)(a1 + 1064);
    v12 = *(_DWORD *)(a1 + 1068);
    sub_10043E5F8(a1, __p);
    if (v15 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    *(_DWORD *)buf = 67109634;
    v20 = v11;
    v21 = 1024;
    v22 = v12;
    v23 = 2082;
    v24 = v13;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Identification - isVendorWithInvalidOUIs looking for vidSrc: %d and vendorID: %d for device %{public}s", buf, 0x18u);
    if (v15 < 0)
      operator delete(__p[0]);
  }
  if (v17)
  {
    v4 = *(_DWORD *)(a1 + 1064);
    v5 = *(_DWORD *)(a1 + 1068);
    v6 = v17;
    while (1)
    {
      v7 = *((_DWORD *)v6 + 7);
      if (v4 >= v7)
      {
        if (v7 < v4)
          goto LABEL_10;
        v8 = *((_DWORD *)v6 + 8);
        if (v5 >= v8)
          break;
      }
LABEL_11:
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_12;
    }
    if (v8 >= v5)
    {
      v9 = 1;
      goto LABEL_13;
    }
LABEL_10:
    ++v6;
    goto LABEL_11;
  }
LABEL_12:
  v9 = 0;
LABEL_13:
  sub_10001A82C((uint64_t)&v16, v17);
  return v9;
}

void sub_100445874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_10001A82C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100445894(uint64_t result, __int16 a2, int a3)
{
  uint64_t v3;
  NSObject *v4;
  void *p_p;
  int v6;
  int v7;
  void *__p;
  uint64_t v9;
  char v10;
  uint8_t buf[4];
  void *v12;

  if (a3 == 8194)
  {
    v3 = result;
    if (*(_BYTE *)(result + 1061))
    {
      if ((a2 & 0x4000) != 0 && (*(_DWORD *)(result + 1080) & 0x4000) == 0)
      {
        v4 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(v3, &__p);
          if (v10 >= 0)
            p_p = &__p;
          else
            p_p = __p;
          *(_DWORD *)buf = 136446210;
          v12 = p_p;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Upgrading Device %{public}s to enhanced double tap", buf, 0xCu);
          if (v10 < 0)
            operator delete(__p);
        }
        __p = 0;
        v9 = 0;
        sub_10003415C((uint64_t)&__p, v3);
        v6 = *(_DWORD *)(v3 + 792);
        sub_100034234((uint64_t)&__p);
        __p = 0;
        v9 = 0;
        sub_10003415C((uint64_t)&__p, v3);
        v7 = *(_DWORD *)(v3 + 792);
        sub_100034234((uint64_t)&__p);
        return sub_100445A14(v3, v6 | (v7 << 8));
      }
    }
  }
  return result;
}

uint64_t sub_1004459D0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 792);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_100445A14(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  void **v8;
  void *__p[2];
  char v11;
  _QWORD v12[2];
  uint8_t buf[4];
  int v14;
  __int16 v15;
  void **v16;

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1);
  v4 = *(_DWORD *)(a1 + 792);
  *(_DWORD *)(a1 + 792) = a2;
  v5 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 856))(v5, a1, *(unsigned int *)(a1 + 792));
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(a1 + 792);
    sub_10043E5F8(a1, __p);
    v8 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    v14 = v7;
    v15 = 2082;
    v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Double tap settings is set to %d for Device %{public}s", buf, 0x12u);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  if (v4 != a2)
  {
    sub_100034264((uint64_t)v12);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 10);
  }
  return sub_100034234((uint64_t)v12);
}

void sub_100445B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100445BAC(uint64_t a1, int a2, int a3, int a4, int a5)
{
  int v10;
  _BOOL4 v12;
  uint64_t v13;
  NSObject *v14;
  void **v15;
  int v16;
  NSObject *v17;
  void **v18;
  uint64_t v19;
  NSObject *v20;
  void **v21;
  int v22;
  void *__p[2];
  char v24;
  _BYTE buf[18];
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  if ((*(_BYTE *)(a1 + 572) & 2) != 0)
  {
    v20 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a1, __p);
      v21 = v24 >= 0 ? __p : (void **)__p[0];
      v22 = *(_DWORD *)(a1 + 572);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = v21;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = a2;
      v26 = 1024;
      v27 = a3;
      v28 = 1024;
      v29 = a4;
      v30 = 1024;
      v31 = a5;
      v32 = 1024;
      v33 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Skip device ID for device %{public}s: vidSrc 0x%x vid 0x%x pid 0x%x version 0x%x GAPA 0x%x", buf, 0x2Au);
      if (v24 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    sub_10003415C((uint64_t)buf, a1);
    v10 = *(_DWORD *)(a1 + 176);
    v12 = v10 == 17 || v10 == 22;
    sub_100034234((uint64_t)buf);
    if (a3 == 76 && v12)
    {
      if (qword_10097AA70 != -1)
        dispatch_once(&qword_10097AA70, &stru_10092F620);
      v13 = qword_10097AA68;
      sub_100091AE8(buf, "DID Corruption");
      sub_10043E5F8(a1, __p);
      sub_10047C59C(0.0, v13, (uint64_t *)buf, (uint64_t *)__p);
      if (v24 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v27) < 0)
        operator delete(*(void **)buf);
      v14 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a1, __p);
        v15 = v24 >= 0 ? __p : (void **)__p[0];
        v16 = *(_DWORD *)(a1 + 1068);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = v15;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v16;
        v26 = 1024;
        v27 = 76;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Warning: DID Corruption. Setting DID for %{public}s from 0x%x to 0x%x", buf, 0x18u);
        if (v24 < 0)
          operator delete(__p[0]);
      }
    }
    *(_BYTE *)(a1 + 1060) = 1;
    *(_DWORD *)(a1 + 1064) = a2;
    *(_DWORD *)(a1 + 1068) = a3;
    *(_DWORD *)(a1 + 1072) = a4;
    if (a5)
      *(_DWORD *)(a1 + 1076) = a5;
    v17 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a1, __p);
      v18 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136447234;
      *(_QWORD *)&buf[4] = v18;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = a2;
      v26 = 1024;
      v27 = a3;
      v28 = 1024;
      v29 = a4;
      v30 = 1024;
      v31 = a5;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Setting device ID info for device %{public}s: vidSrc 0x%x vid 0x%x pid 0x%x version 0x%x", buf, 0x24u);
      if (v24 < 0)
        operator delete(__p[0]);
    }
    v19 = *(_QWORD *)(a1 + 520);
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
    if (sub_10043F998(a1) == 32)
      sub_1004449C8(a1);
  }
}

void sub_100445F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_100445F58(uint64_t a1, int a2, char a3)
{
  int v4;
  int v7;
  NSObject *v8;
  unsigned int v9;
  BOOL v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  __int128 v15;
  uint8_t buf[8];

  v4 = *(_DWORD *)(a1 + 572);
  if ((v4 & 2) != 0)
  {
    v11 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v15) = 67109376;
      DWORD1(v15) = a2;
      WORD4(v15) = 1024;
      *(_DWORD *)((char *)&v15 + 10) = v4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Skip supportedFeatures 0x%x GAPA 0x%x", (uint8_t *)&v15, 0xEu);
    }
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 1080);
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v15) = 67109120;
      DWORD1(v15) = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "supportedFeatures 0x%x", (uint8_t *)&v15, 8u);
    }
    sub_100445894(a1, a2, *(_DWORD *)(a1 + 1072));
    *(_BYTE *)(a1 + 1061) = 1;
    *(_DWORD *)(a1 + 1080) = a2;
    if (*(_DWORD *)(a1 + 1068) == 76
      && ((v9 = *(_DWORD *)(a1 + 1072) - 8194, v9 <= 0x1D) ? (v10 = ((1 << v9) & 0x20037F9B) == 0) : (v10 = 1), !v10)
      || (a2 & 0x1000) != 0
      || (*(_BYTE *)(a1 + 1093) & 2) != 0)
    {
      *(_QWORD *)buf = 0;
      sub_10004AD30((uint64_t)buf);
      *(_QWORD *)&v15 = *(int *)buf;
      *((_QWORD *)&v15 + 1) = *(__int16 *)&buf[4];
      if (!*(_DWORD *)(a1 + 176))
      {
        v12 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Applying workaround for Apple Audio Device: BT_DEVICE_TYPE_GENERIC->BT_DEVICE_TYPE_HEADPHONES", buf, 2u);
        }
        sub_100440378(a1, 20, &v15);
      }
      if (!*(_DWORD *)(a1 + 304))
      {
        v13 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = 2098200;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Applying workaround for Apple Audio Device, CoD: 0->%u", buf, 8u);
        }
        sub_1004447DC(a1, 2098200, &v15);
      }
      v14 = sub_10003BE44();
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 336))(v14) & 1) == 0)
        sub_100446814(a1, 0);
    }
    else
    {
      sub_100446814(a1, 1);
    }
    if ((a3 & 1) == 0 && v7 != a2)
    {
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_10092F540);
      sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 4099);
    }
  }
}

void sub_100446234(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v4;
  int v5;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;

  v4 = HIDWORD(a2);
  v5 = *(_DWORD *)(a1 + 572);
  if ((v5 & 2) != 0)
  {
    v10 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 67109632;
      v12 = a2;
      v13 = 1024;
      v14 = v4;
      v15 = 1024;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Skip supportedExtendedFeatures I1: 0x%x, I2: 0x%x GAPA 0x%x", (uint8_t *)&v11, 0x14u);
    }
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 1088);
    *(_BYTE *)(a1 + 1062) = 1;
    *(_QWORD *)(a1 + 1088) = a2;
    v9 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 67109376;
      v12 = a2;
      v13 = 1024;
      v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "supportedExtendedFeatures I1: 0x%x, I2: 0x%x", (uint8_t *)&v11, 0xEu);
    }
    if ((a3 & 1) == 0 && v8 != a2)
    {
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_10092F540);
      sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 4099);
    }
  }
}

void sub_1004463C4(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "supportedFeaturesVersion 0x%x", (uint8_t *)v5, 8u);
  }
  *(_BYTE *)(a1 + 1063) = 1;
  *(_WORD *)(a1 + 1084) = a2;
}

uint64_t sub_10044647C(unsigned __int8 *a1)
{
  _BOOL4 v2;
  uint64_t v3;
  _BOOL4 v4;
  NSObject *v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  void **v12;
  __int128 v13;
  void *v14[2];
  __int128 v15;
  void *v16[2];
  __int128 v17;
  void *v18[2];
  _QWORD v19[6];
  __int128 v20;
  uint64_t v21;

  v21 = 0;
  v20 = 0u;
  memset(v19, 0, sizeof(v19));
  v17 = 0u;
  *(_OWORD *)v18 = 0u;
  v15 = 0u;
  *(_OWORD *)v16 = 0u;
  v13 = 0u;
  *(_OWORD *)v14 = 0u;
  sub_1005BCCCC((uint64_t)&v13 + 1);
  BYTE2(v14[0]) = 0;
  BYTE4(v14[0]) = 0;
  BYTE2(v16[0]) = 0;
  BYTE4(v16[0]) = 0;
  HIDWORD(v19[2]) = 0;
  v15 = 0uLL;
  v14[1] = 0;
  LOBYTE(v16[0]) = 0;
  v17 = 0uLL;
  v16[1] = 0;
  LOBYTE(v18[0]) = 0;
  v19[0] = 0;
  v19[1] = 0;
  v18[1] = 0;
  *(_DWORD *)((char *)&v19[1] + 7) = 0;
  LOBYTE(v19[3]) = 1;
  BYTE2(v21) = 0;
  *(_QWORD *)((char *)&v19[3] + 6) = 0;
  *(_QWORD *)((char *)&v19[3] + 1) = 0;
  v20 = 0uLL;
  v19[5] = 0;
  LOBYTE(v21) = 0;
  v2 = sub_1004419F4((uint64_t)a1, (uint64_t)&v13);
  if (BYTE13(v20))
    v4 = v2;
  else
    v4 = 0;
  if (v4)
  {
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      sub_10043E5F8((uint64_t)a1, __p);
      v6 = v10 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Invoking Single Shot Role Switch WAR for %{public}s", buf, 0xCu);
      if (v10 < 0)
        operator delete(__p[0]);
    }
    v7 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v7 + 3376))(v7, 1, ((unint64_t)a1[128] << 40) | ((unint64_t)a1[129] << 32) | ((unint64_t)a1[130] << 24) | ((unint64_t)a1[131] << 16) | ((unint64_t)a1[132] << 8) | a1[133])&& os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8((uint64_t)a1, __p);
      sub_1006F2164();
    }
  }
  if (SHIBYTE(v19[1]) < 0)
    operator delete(v18[1]);
  if (SHIBYTE(v17) < 0)
    operator delete(v16[1]);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[1]);
  return nullsub_90((char *)&v13 + 1, v3);
}

void sub_1004466B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_10026B73C((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

BOOL sub_1004466D8(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 1061);
  if (*(_BYTE *)(a1 + 1061))
    *a2 = *(_DWORD *)(a1 + 1080);
  return v2 != 0;
}

BOOL sub_1004466F4(uint64_t a1, _WORD *a2, _BYTE *a3, _WORD *a4)
{
  _BOOL8 v8;
  char v10;

  v10 = 0;
  sub_100043758(&v10);
  v8 = sub_1001827E4(a1 + 128, a2, a3, a4) == 0;
  sub_100043728(&v10);
  return v8;
}

void sub_100446760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

BOOL sub_100446774(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 1063);
  if (*(_BYTE *)(a1 + 1063))
    *a2 = *(unsigned __int16 *)(a1 + 1084);
  return v2 != 0;
}

BOOL sub_100446790(uint64_t a1, _QWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 1062);
  if (*(_BYTE *)(a1 + 1062))
    *a2 = *(_QWORD *)(a1 + 1088);
  return v2 != 0;
}

uint64_t sub_1004467AC(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  int v4;

  if (a2 == 32)
  {
    v3 = 0;
    *(_DWORD *)(a1 + 1092) |= a3;
  }
  else
  {
    v3 = 2;
    if (a2 == 14 && *(_BYTE *)(a1 + 1061))
    {
      if (a3)
        v4 = 0x4000;
      else
        v4 = 0;
      sub_100445F58(a1, *(_DWORD *)(a1 + 1080) & 0xFFFFBFFF | v4, 0);
      return 0;
    }
  }
  return v3;
}

uint64_t sub_100446814(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  *(_BYTE *)(a1 + 980) = a2;
  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 1288))(v4, a1, *(unsigned __int8 *)(a1 + 980));
  return sub_100034234((uint64_t)v6);
}

void sub_100446870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100446884(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 984);
}

uint64_t sub_10044688C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 984) = a2;
  return result;
}

BOOL sub_100446894(uint64_t a1)
{
  return sub_10043F998(a1) == 0x2000;
}

void sub_1004468B0(uint64_t a1)
{
  char v2;
  NSObject *v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t **v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t **v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  unsigned int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unsigned int v37;
  uint8_t v38[8];
  _QWORD *v39[3];
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  void *__p[2];
  uint64_t v47;
  _QWORD v48[2];
  __int128 __dst;
  uint64_t v50;
  unsigned int *v51;
  __int128 v52;
  __int128 v53;
  __int128 buf;
  uint64_t v55;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092F540);
  v2 = sub_100471484((uint64_t)off_1009778E0);
  v3 = qword_1009997E8;
  if ((v2 & 1) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a1, &__dst);
      v4 = v50 >= 0 ? &__dst : (__int128 *)__dst;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Flushing settings to disk for device %{public}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(v50) < 0)
        operator delete((void *)__dst);
    }
    v48[0] = 0;
    v48[1] = 0;
    sub_10003415C((uint64_t)v48, a1);
    __dst = 0uLL;
    v50 = 0;
    if (*(char *)(a1 + 223) < 0)
    {
      sub_10003430C(&__dst, *(void **)(a1 + 200), *(_QWORD *)(a1 + 208));
    }
    else
    {
      __dst = *(_OWORD *)(a1 + 200);
      v50 = *(_QWORD *)(a1 + 216);
    }
    v5 = *(_QWORD *)(a1 + 224);
    v6 = *(_QWORD *)(a1 + 232);
    buf = 0uLL;
    v55 = 0;
    if (*(char *)(a1 + 263) < 0)
    {
      sub_10003430C(&buf, *(void **)(a1 + 240), *(_QWORD *)(a1 + 248));
    }
    else
    {
      buf = *(_OWORD *)(a1 + 240);
      v55 = *(_QWORD *)(a1 + 256);
    }
    v7 = *(_QWORD *)(a1 + 264);
    v8 = *(_QWORD *)(a1 + 272);
    __p[0] = 0;
    __p[1] = 0;
    v47 = 0;
    if (*(char *)(a1 + 303) < 0)
    {
      sub_10003430C(__p, *(void **)(a1 + 280), *(_QWORD *)(a1 + 288));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(a1 + 280);
      v47 = *(_QWORD *)(a1 + 296);
    }
    *(_QWORD *)&v34 = v8;
    *((_QWORD *)&v34 + 1) = v7;
    *(_QWORD *)&v35 = v6;
    *((_QWORD *)&v35 + 1) = v5;
    v31 = *(_DWORD *)(a1 + 304);
    *(_QWORD *)&v33 = *(_QWORD *)(a1 + 320);
    *((_QWORD *)&v33 + 1) = *(_QWORD *)(a1 + 312);
    v43 = 0;
    v44 = 0;
    v45 = 0;
    sub_100456768(&v43, a1 + 328);
    *(_QWORD *)&v32 = *(_QWORD *)(a1 + 360);
    *((_QWORD *)&v32 + 1) = *(_QWORD *)(a1 + 352);
    *(_DWORD *)(a1 + 1320) = *(_DWORD *)(a1 + 1320) & 0xFFFFFFE0 | *(unsigned __int8 *)(a1 + 642) | (2 * *(unsigned __int8 *)(a1 + 643)) | (4 * *(unsigned __int8 *)(a1 + 644)) | (8 * *(unsigned __int8 *)(a1 + 645)) | (16 * *(unsigned __int8 *)(a1 + 646));
    v41 = 0;
    v42 = 0;
    v36 = a1;
    v40 = (uint64_t *)&v41;
    v9 = *(_QWORD **)(a1 + 584);
    if (v9 != (_QWORD *)(a1 + 592))
    {
      do
      {
        v39[0] = 0;
        v39[1] = 0;
        *(_QWORD *)v38 = v39;
        v10 = (_QWORD *)v9[5];
        if (v10 != v9 + 6)
        {
          do
          {
            v37 = *((_DWORD *)v10 + 8);
            v52 = *(_OWORD *)(v10 + 5);
            v53 = 0uLL;
            if (sub_1002C5240(&v53, (uint64_t)&v52))
            {
              v51 = &v37;
              v11 = sub_10033ED08((uint64_t **)v38, &v37, (uint64_t)&unk_100740F58, &v51);
              *(_OWORD *)(v11 + 5) = v53;
            }
            v12 = (_QWORD *)v10[1];
            if (v12)
            {
              do
              {
                v13 = v12;
                v12 = (_QWORD *)*v12;
              }
              while (v12);
            }
            else
            {
              do
              {
                v13 = (_QWORD *)v10[2];
                v14 = *v13 == (_QWORD)v10;
                v10 = v13;
              }
              while (!v14);
            }
            v10 = v13;
          }
          while (v13 != v9 + 6);
        }
        *(_QWORD *)&v53 = 0;
        *(_QWORD *)&v53 = malloc_type_calloc(1uLL, 0x10uLL, 0x10F2040C8FBA5E1uLL);
        sub_1002C5240((_BYTE *)v53, v9[4]);
        *(_QWORD *)&v52 = &v53;
        v15 = (uint64_t **)(sub_1002BBB54(&v40, (unint64_t *)&v53, (uint64_t)&unk_100740F58, (uint64_t **)&v52) + 5);
        if (v15 != (uint64_t **)v38)
          sub_10033EDC8(v15, *(_QWORD **)v38, v39);
        sub_10001A82C((uint64_t)v38, v39[0]);
        v16 = (_QWORD *)v9[1];
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (_QWORD *)v9[2];
            v14 = *v17 == (_QWORD)v9;
            v9 = v17;
          }
          while (!v14);
        }
        v9 = v17;
      }
      while (v17 != (_QWORD *)(a1 + 592));
    }
    sub_100034264((uint64_t)v48);
    if (sub_10043E93C((unsigned __int8 *)a1))
    {
      v18 = sub_10034D650();
      v19 = v18;
      if (v35 != 0)
        goto LABEL_44;
      v20 = HIBYTE(v50);
      if (v50 < 0)
        v20 = *((_QWORD *)&__dst + 1);
      if (v20)
LABEL_44:
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v18 + 232))(v18, v36, &__dst);
      if (v34 != 0)
        goto LABEL_49;
      v21 = HIBYTE(v55);
      if (v55 < 0)
        v21 = *((_QWORD *)&buf + 1);
      if (v21)
LABEL_49:
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v19 + 40))(v19, v36, &buf);
      v22 = (void *)HIBYTE(v47);
      if (v47 < 0)
        v22 = __p[1];
      if (v22)
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v19 + 216))(v19, v36, __p);
      if (v33 != 0)
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v19 + 264))(v19, v36, v31);
      if (v32 == 0
        || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v19 + 248))(v19, v36, &v43))
      {
        if (sub_10003EB18(v36 + 1000))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 352))(v19, v36);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 1472))(v19, v36);
        if (qword_10097B080 != -1)
          dispatch_once(&qword_10097B080, &stru_10092F640);
        sub_10048BDB8();
      }
      v23 = v41;
    }
    else
    {
      v24 = v40;
      if (v40 != (uint64_t *)&v41)
      {
        do
        {
          v25 = (uint64_t *)v24[5];
          v26 = v24 + 6;
          if (v25 != v24 + 6)
          {
            do
            {
              v52 = *(_OWORD *)(v25 + 5);
              sub_1002C3FB4(&v52);
              v27 = (uint64_t *)v25[1];
              if (v27)
              {
                do
                {
                  v28 = v27;
                  v27 = (uint64_t *)*v27;
                }
                while (v27);
              }
              else
              {
                do
                {
                  v28 = (uint64_t *)v25[2];
                  v14 = *v28 == (_QWORD)v25;
                  v25 = v28;
                }
                while (!v14);
              }
              v25 = v28;
            }
            while (v28 != v26);
          }
          sub_10001A82C((uint64_t)(v24 + 5), (_QWORD *)v24[6]);
          v24[6] = 0;
          v24[7] = 0;
          v24[5] = (uint64_t)v26;
          sub_1002C3FB4((_BYTE *)v24[4]);
          free((void *)v24[4]);
          v29 = (uint64_t *)v24[1];
          if (v29)
          {
            do
            {
              v30 = v29;
              v29 = (uint64_t *)*v29;
            }
            while (v29);
          }
          else
          {
            do
            {
              v30 = (uint64_t *)v24[2];
              v14 = *v30 == (_QWORD)v24;
              v24 = v30;
            }
            while (!v14);
          }
          v24 = v30;
        }
        while (v30 != (uint64_t *)&v41);
      }
      sub_1002BB6B8((uint64_t)&v40, v41);
      v23 = 0;
      v41 = 0;
      v42 = 0;
      v40 = (uint64_t *)&v41;
    }
    sub_1002BB6B8((uint64_t)&v40, v23);
    sub_10001A82C((uint64_t)&v43, v44);
    if (SHIBYTE(v47) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v55) < 0)
      operator delete((void *)buf);
    if (SHIBYTE(v50) < 0)
      operator delete((void *)__dst);
    sub_100034234((uint64_t)v48);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006F2204();
  }
}

void sub_100447120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,_QWORD *a26,uint64_t a27,char a28,_QWORD *a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,char a38)
{
  void **v38;
  uint64_t v39;

  sub_1002BB6B8((uint64_t)&a25, a26);
  sub_10001A82C((uint64_t)&a28, a29);
  if (a36 < 0)
    operator delete(__p);
  if (*(char *)(v39 - 105) < 0)
    operator delete(v38[10]);
  if (*(char *)(v39 - 185) < 0)
    operator delete(*v38);
  sub_100034234((uint64_t)&a38);
  _Unwind_Resume(a1);
}

uint64_t sub_1004471D4(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 642);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_100447218(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v4 = *(_QWORD *)(a1 + 520);
  if (v4 && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 56))(v4, a2) & 1) != 0)
    v5 = 0;
  else
    v5 = 602;
  sub_100034234((uint64_t)v7);
  return v5;
}

void sub_100447284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100447298(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v6;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v4 = *(_QWORD *)(a1 + 520);
  if (!v4)
    sub_10034FF90();
  v6 = 0;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v4 + 56))(v4, &v6);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 520) + 48))(*(_QWORD *)(a1 + 520), a2);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 520) + 16))(*(_QWORD *)(a1 + 520));
  if (v6 != (_DWORD)a2)
    sub_100447350(a1);
  return sub_100034234((uint64_t)v7);
}

void sub_100447338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100447350(uint64_t a1)
{
  int v1;
  uint64_t v3;
  _QWORD v4[5];

  v1 = *(_DWORD *)(a1 + 568);
  *(_DWORD *)(a1 + 568) = v1 + 1;
  if (!v1)
  {
    v3 = sub_10006BBEC();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10044775C;
    v4[3] = &unk_100917378;
    v4[4] = a1;
    sub_100041A34(v3, v4);
  }
}

BOOL sub_1004473C0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 520) != 0;
}

uint64_t sub_1004473D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  v4 = *(_QWORD *)(a1 + 520);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(v4, a2);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 520) + 16))(*(_QWORD *)(a1 + 520));
  }
  return sub_100034234((uint64_t)v6);
}

void sub_100447438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044744C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v6;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v6 = 0;
  v2 = *(_QWORD *)(a1 + 520);
  if (v2)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v2 + 56))(v2, &v6);
    v3 = *(_QWORD *)(a1 + 520);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v6;
    *(_QWORD *)(a1 + 520) = 0;
    if (v4)
      sub_100447350(a1);
  }
  else
  {
    *(_QWORD *)(a1 + 520) = 0;
  }
  return sub_100034234((uint64_t)v7);
}

void sub_1004474D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004474E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  char v12;
  int v13;
  char v14;
  int v15;
  char v16;
  int v18;
  _QWORD v19[2];

  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1);
  v18 = 0;
  v4 = *(_QWORD *)(a1 + 520);
  if (!v4 || ((*(void (**)(uint64_t, int *))(*(_QWORD *)v4 + 56))(v4, &v18), v5 = v18, v18 <= 0))
  {
    v5 = *(_DWORD *)(a1 + 528);
    if (v5 <= 0)
    {
      v5 = *(_DWORD *)(a1 + 560);
      v6 = (unsigned __int8 *)(a1 + 564);
    }
    else
    {
      v6 = (unsigned __int8 *)(a1 + 532);
    }
    v7 = *v6;
    if (v7)
      goto LABEL_17;
  }
  v8 = *(unsigned __int16 *)(a1 + 1020);
  v9 = v8 - 613;
  v10 = (v8 - 613) > 0x3A || ((1 << (v8 - 101)) & 0x4A0000000000095) == 0;
  if ((!v10 || (v8 - 781) < 2) && *(_BYTE *)(a1 + 1288))
  {
    LOBYTE(v7) = 1;
LABEL_17:
    *(_DWORD *)a2 = v5;
    goto LABEL_18;
  }
  if (v5 >= 1)
  {
    LOBYTE(v7) = 2;
    goto LABEL_17;
  }
  *(_DWORD *)a2 = v5;
  LOBYTE(v7) = (v9 <= 0x3A && ((1 << v9) & 0x4A0000000000095) != 0 || (v8 - 781) < 2)
            && *(_BYTE *)(a1 + 1288);
LABEL_18:
  *(_BYTE *)(a2 + 4) = v7;
  v11 = *(_DWORD *)(a1 + 536);
  *(_DWORD *)(a2 + 8) = v11;
  v12 = 2 * (v11 > 0);
  if (*(_BYTE *)(a1 + 540))
    v12 = *(_BYTE *)(a1 + 540);
  *(_BYTE *)(a2 + 12) = v12;
  v13 = *(_DWORD *)(a1 + 544);
  *(_DWORD *)(a2 + 16) = v13;
  v14 = 2 * (v13 > 0);
  if (*(_BYTE *)(a1 + 548))
    v14 = *(_BYTE *)(a1 + 548);
  *(_BYTE *)(a2 + 20) = v14;
  v15 = *(_DWORD *)(a1 + 552);
  *(_DWORD *)(a2 + 24) = v15;
  v16 = 2 * (v15 > 0);
  if (*(_BYTE *)(a1 + 556))
    v16 = *(_BYTE *)(a1 + 556);
  *(_BYTE *)(a2 + 28) = v16;
  return sub_100034234((uint64_t)v19);
}

void sub_100447680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100447694(unsigned int *a1, int a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, (uint64_t)a1);
  switch(a2)
  {
    case 1:
      v4 = a1[132];
      break;
    case 2:
      v4 = a1[136];
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_5;
    case 4:
      v4 = a1[134];
      break;
    case 8:
      v4 = a1[138];
      break;
    default:
      if (a2 == 16)
      {
        v4 = a1[140];
      }
      else
      {
LABEL_5:
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006F2230();
        v4 = 0xFFFFFFFFLL;
      }
      break;
  }
  sub_100034234((uint64_t)v6);
  return v4;
}

uint64_t sub_10044775C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  NSObject *v9;
  void **v10;
  void *__p[2];
  char v13;
  int v14;
  _QWORD v15[2];
  uint8_t buf[4];
  void **v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;

  v1 = *(_QWORD *)(a1 + 32);
  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, v1);
  v2 = *(_DWORD *)(v1 + 568);
  if (v2)
  {
    *(_DWORD *)(v1 + 568) = 0;
    v14 = 0;
    v3 = *(_QWORD *)(v1 + 520);
    if (v3)
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v3 + 56))(v3, &v14);
    v4 = *(_DWORD *)(v1 + 528);
    v5 = *(_DWORD *)(v1 + 536);
    v6 = *(_DWORD *)(v1 + 544);
    v7 = *(_DWORD *)(v1 + 552);
    v8 = *(_DWORD *)(v1 + 560);
    sub_100034264((uint64_t)v15);
    v9 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v1, __p);
      v10 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136448002;
      v17 = v10;
      v18 = 1024;
      v19 = v14;
      v20 = 1024;
      v21 = v4;
      v22 = 1024;
      v23 = v5;
      v24 = 1024;
      v25 = v6;
      v26 = 1024;
      v27 = v7;
      v28 = 1024;
      v29 = v8;
      v30 = 1024;
      v31 = v2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Battery changed: device %{public}s, I %d%%, S %d%%, L %d%%, R %d%%, Cs %d%%, Cm %d%%, CP %d", buf, 0x36u);
      if (v13 < 0)
        operator delete(__p[0]);
    }
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, v1, 13);
  }
  return sub_100034234((uint64_t)v15);
}

void sub_100447924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100447948(uint64_t a1, uint64_t a2)
{
  _QWORD v5[2];

  if (a2)
  {
    v5[0] = 0;
    v5[1] = 0;
    sub_10003415C((uint64_t)v5, a1);
    *(_BYTE *)a2 = *(_DWORD *)(a1 + 528);
    *(_DWORD *)(a2 + 4) = *(unsigned __int8 *)(a1 + 532) == 1;
    *(_BYTE *)(a2 + 16) = *(_DWORD *)(a1 + 536);
    *(_DWORD *)(a2 + 20) = *(unsigned __int8 *)(a1 + 540) == 1;
    *(_BYTE *)(a2 + 8) = *(_DWORD *)(a1 + 544);
    *(_DWORD *)(a2 + 12) = *(unsigned __int8 *)(a1 + 548) == 1;
    *(_BYTE *)(a2 + 24) = *(_DWORD *)(a1 + 552);
    *(_DWORD *)(a2 + 28) = *(unsigned __int8 *)(a1 + 556) == 1;
    *(_BYTE *)(a2 + 32) = *(_DWORD *)(a1 + 560);
    *(_DWORD *)(a2 + 36) = *(unsigned __int8 *)(a1 + 564) == 1;
    sub_100034234((uint64_t)v5);
    return 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F2290();
    return 3;
  }
}

uint64_t sub_100447A38(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int *v6;
  unsigned int v7;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1);
  if (a2 < 0x65)
  {
    switch(a3)
    {
      case 1:
        v6 = (unsigned int *)(a1 + 528);
        goto LABEL_13;
      case 2:
        v6 = (unsigned int *)(a1 + 544);
        goto LABEL_13;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_8;
      case 4:
        v6 = (unsigned int *)(a1 + 536);
        goto LABEL_13;
      case 8:
        v6 = (unsigned int *)(a1 + 552);
        goto LABEL_13;
      default:
        if (a3 == 16)
        {
          v6 = (unsigned int *)(a1 + 560);
LABEL_13:
          v7 = *v6;
          *v6 = a2;
          if (v7 != a2)
            sub_100447350(a1);
        }
        else
        {
LABEL_8:
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
            sub_1006F2230();
        }
        break;
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006F22BC();
  }
  return sub_100034234((uint64_t)v9);
}

void sub_100447B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100447B60(uint64_t a1, int a2, int a3)
{
  _BYTE *v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1);
  switch(a3)
  {
    case 1:
      v6 = (_BYTE *)(a1 + 532);
      goto LABEL_10;
    case 2:
      v6 = (_BYTE *)(a1 + 548);
      goto LABEL_10;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_5;
    case 4:
      v6 = (_BYTE *)(a1 + 540);
      goto LABEL_10;
    case 8:
      v6 = (_BYTE *)(a1 + 556);
      goto LABEL_10;
    default:
      if (a3 != 16)
      {
LABEL_5:
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006F2230();
LABEL_11:
        v8 = 0;
        goto LABEL_13;
      }
      v6 = (_BYTE *)(a1 + 564);
LABEL_10:
      v7 = *v6;
      *v6 = a2;
      if (v7 == a2)
        goto LABEL_11;
      sub_100447350(a1);
      v8 = 1;
LABEL_13:
      sub_100034234((uint64_t)v10);
      return v8;
  }
}

void sub_100447C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100447C64(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 572);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_100447CA8(uint64_t a1, int a2, int a3)
{
  int v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1);
  v6 = *(_DWORD *)(a1 + 572);
  v7 = v6 & ~a3 | a3 & a2;
  *(_DWORD *)(a1 + 572) = v7;
  if (v7 != v6)
  {
    sub_100034264((uint64_t)v10);
    v8 = sub_10034D650();
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 1504))(v8, a1, *(unsigned int *)(a1 + 572));
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 4102);
  }
  return sub_100034234((uint64_t)v10);
}

void sub_100447D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100447D80(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  void *__p[2];
  char v6;
  _QWORD v7[2];
  uint8_t buf[4];
  void **v9;

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a1, __p);
    if (v6 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Device %{public}s supports phonebook sync", buf, 0xCu);
    if (v6 < 0)
      operator delete(__p[0]);
  }
  *(_BYTE *)(a1 + 642) = 1;
  return sub_100034234((uint64_t)v7);
}

void sub_100447E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100447E94(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 643);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_100447ED8(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  void **v6;
  void *__p[2];
  char v9;
  _QWORD v10[2];
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  void **v14;

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1);
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a1, __p);
    v5 = "disabled";
    if (a2)
      v5 = "enabled";
    if (v9 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v12 = v5;
    v13 = 2082;
    v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Phonebook sync %s for device %{public}s", buf, 0x16u);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  *(_BYTE *)(a1 + 643) = a2;
  return sub_100034234((uint64_t)v10);
}

void sub_100447FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100448010(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 644);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_100448054(uint64_t a1, char a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 644) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_100448098(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 645);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_1004480DC(uint64_t a1, char a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 645) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_100448120(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 646);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_100448164(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  void **v6;
  void *__p[2];
  char v9;
  _QWORD v10[2];
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  void **v14;

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1);
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a1, __p);
    v5 = "unselected";
    if (a2)
      v5 = "selected";
    if (v9 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v12 = v5;
    v13 = 2082;
    v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Phonebook privacy %s for device %{public}s", buf, 0x16u);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  *(_BYTE *)(a1 + 646) = a2;
  return sub_100034234((uint64_t)v10);
}

void sub_100448280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10044829C(uint64_t a1, char a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 648) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_1004482E0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 648);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_100448324(uint64_t a1, __int16 a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_WORD *)(a1 + 650) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_100448368(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int16 *)(a1 + 650);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_1004483AC(uint64_t a1, int a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_DWORD *)(a1 + 852) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_1004483F0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 852);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_100448434(_QWORD *a1, _DWORD **a2)
{
  char *v4;
  _DWORD *v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  uint64_t v16;
  _QWORD v18[2];

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, (uint64_t)a1);
  v4 = (char *)a1[93];
  a1[94] = v4;
  v5 = *a2;
  if (*a2 != a2[1])
  {
    v6 = a1 + 95;
    do
    {
      if ((unint64_t)v4 >= *v6)
      {
        v8 = (char *)a1[93];
        v9 = (v4 - v8) >> 2;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62)
          abort();
        v11 = *v6 - (_QWORD)v8;
        if (v11 >> 1 > v10)
          v10 = v11 >> 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
          v12 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v12 = v10;
        if (v12)
        {
          v13 = (char *)sub_1002B46E0((uint64_t)(a1 + 95), v12);
          v4 = (char *)a1[94];
          v8 = (char *)a1[93];
        }
        else
        {
          v13 = 0;
        }
        v14 = &v13[4 * v9];
        *(_DWORD *)v14 = *v5;
        v7 = v14 + 4;
        while (v4 != v8)
        {
          v15 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v14 - 1) = v15;
          v14 -= 4;
        }
        a1[93] = v14;
        a1[94] = v7;
        a1[95] = &v13[4 * v12];
        if (v8)
          operator delete(v8);
      }
      else
      {
        *(_DWORD *)v4 = *v5;
        v7 = v4 + 4;
      }
      a1[94] = v7;
      ++v5;
      v4 = v7;
    }
    while (v5 != a2[1]);
  }
  v16 = sub_10034FB88();
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  return sub_100034234((uint64_t)v18);
}

void sub_100448584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004485A0(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v4 = *(_QWORD *)(a1 + 744);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 752) - v4) >> 2))
    v5 = 0xFFFFFFFFLL;
  else
    v5 = *(unsigned int *)(v4 + 4 * a2);
  sub_100034234((uint64_t)v7);
  return v5;
}

uint64_t sub_100448608@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  sub_1002D70C0(a2, a1 + 744);
  return sub_100034234((uint64_t)v5);
}

void sub_100448654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100448668(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _DWORD v5[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 743);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Read fMapEnabled : %d", (uint8_t *)v5, 8u);
  }
  return *(unsigned __int8 *)(a1 + 743);
}

uint64_t sub_100448710(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  int v6;
  uint64_t v7;
  _DWORD v9[2];
  __int16 v10;
  int v11;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a1 + 743);
    v9[0] = 67109376;
    v9[1] = v5;
    v10 = 1024;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Set mapEnabled %d -> %d", (uint8_t *)v9, 0xEu);
  }
  *(_BYTE *)(a1 + 743) = a2;
  if (a2)
    v6 = 32;
  else
    v6 = 0;
  *(_DWORD *)(a1 + 1320) = *(_DWORD *)(a1 + 1320) & 0xFFFFFFDF | v6;
  v7 = sub_10034D650();
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 392))(v7, a1, *(unsigned __int8 *)(a1 + 743));
}

uint64_t sub_100448804(uint64_t a1, int a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_DWORD *)(a1 + 512) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_100448848(uint64_t a1, _DWORD *a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *a2 = *(_DWORD *)(a1 + 512);
  sub_100034234((uint64_t)v5);
  return 0;
}

BOOL sub_100448894(uint64_t a1)
{
  std::string *v2;
  _BOOL4 v3;
  _BOOL8 v4;
  _QWORD *v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int v11;
  std::string v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];
  char v17;
  std::string v18;

  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1);
  v14 = 0;
  v15[0] = 0;
  v15[1] = 0;
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = xmmword_100741384;
  LOWORD(v18.__r_.__value_.__r.__words[2]) = 626;
  sub_100456FC4((uint64_t)&v14, (unsigned __int16 *)&v18, 9);
  if (*(char *)(a1 + 263) < 0)
  {
    if (!*(_QWORD *)(a1 + 248))
      goto LABEL_13;
LABEL_5:
    v2 = std::string::basic_string(&v18, (const std::string *)(a1 + 240), 0, 3uLL, (std::allocator<char> *)&v13);
    if (!std::string::compare(v2, "BMW"))
    {
      v3 = 1;
    }
    else
    {
      std::string::basic_string(&v13, (const std::string *)(a1 + 240), 0, 3uLL, (std::allocator<char> *)&v17);
      v3 = std::string::compare(&v13, "MB ") == 0;
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v18.__r_.__value_.__l.__data_);
      if (!v3)
        goto LABEL_13;
    }
    else if (!v3)
    {
      goto LABEL_13;
    }
    v4 = 1;
    v5 = (_QWORD *)v15[0];
    goto LABEL_25;
  }
  if (*(_BYTE *)(a1 + 263))
    goto LABEL_5;
LABEL_13:
  v5 = (_QWORD *)v15[0];
  if (!v15[0])
    goto LABEL_23;
  v6 = *(unsigned __int16 *)(a1 + 1068);
  v7 = v15;
  v8 = (uint64_t *)v15[0];
  do
  {
    v9 = v8;
    v10 = v7;
    v11 = *((unsigned __int16 *)v8 + 13);
    if (v11 >= v6)
      v7 = v8;
    else
      ++v8;
    v8 = (uint64_t *)*v8;
  }
  while (v8);
  if (v7 == v15)
    goto LABEL_23;
  if (v11 < v6)
    v9 = v10;
  if (*((unsigned __int16 *)v9 + 13) > v6)
LABEL_23:
    v7 = v15;
  v4 = v7 != v15;
LABEL_25:
  sub_10001A82C((uint64_t)&v14, v5);
  sub_100034234((uint64_t)v16);
  return v4;
}

void sub_100448A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  _QWORD *v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD *);
  v10 = va_arg(va1, _QWORD);
  if (*(char *)(v5 - 25) < 0)
    operator delete(*(void **)(v5 - 48));
  sub_10001A82C((uint64_t)va, v9);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100448AA0(uint64_t a1)
{
  const std::string *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  std::string __p;
  _QWORD v14[2];
  char v15;

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1);
  if (*(char *)(a1 + 263) < 0)
  {
    if (!*(_QWORD *)(a1 + 248))
      goto LABEL_23;
  }
  else if (!*(_BYTE *)(a1 + 263))
  {
    goto LABEL_23;
  }
  v2 = (const std::string *)(a1 + 240);
  std::string::basic_string(&__p, v2, 0, 4uLL, (std::allocator<char> *)&v15);
  v3 = std::string::compare(&__p, "Audi");
  v4 = v3;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v4)
      goto LABEL_15;
  }
  else if (!v3)
  {
    goto LABEL_15;
  }
  std::string::basic_string(&__p, v2, 0, 9uLL, (std::allocator<char> *)&v15);
  v5 = std::string::compare(&__p, "bluetouch");
  v6 = v5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v6)
      goto LABEL_11;
  }
  else if (v5)
  {
LABEL_11:
    std::string::basic_string(&__p, v2, 0, 3uLL, (std::allocator<char> *)&v15);
    v7 = std::string::compare(&__p, "BMW");
    v8 = v7;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v8)
        goto LABEL_23;
    }
    else if (!v7)
    {
      goto LABEL_23;
    }
    std::string::basic_string(&__p, v2, 0, 5uLL, (std::allocator<char> *)&v15);
    v10 = std::string::compare(&__p, "Parrot");
    v11 = v10;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!v10)
        goto LABEL_23;
LABEL_21:
      std::string::basic_string(&__p, v2, 0, 5uLL, (std::allocator<char> *)&v15);
      std::string::compare(&__p, "TomTom");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_23;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v11)
      goto LABEL_21;
LABEL_23:
    v9 = 0;
    goto LABEL_24;
  }
LABEL_15:
  v9 = 1;
LABEL_24:
  sub_100034234((uint64_t)v14);
  return v9;
}

void sub_100448C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100448C84(uint64_t a1, int *a2)
{
  const std::string *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  std::string __p;
  _QWORD v13[2];
  char v14;

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1);
  if ((*(char *)(a1 + 263) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 263))
      goto LABEL_9;
LABEL_5:
    v4 = (const std::string *)(a1 + 240);
    std::string::basic_string(&__p, v4, 0, 9uLL, (std::allocator<char> *)&v14);
    v5 = std::string::compare(&__p, "bluetouch");
    v6 = v5;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v6)
        goto LABEL_7;
    }
    else if (v5)
    {
LABEL_7:
      std::string::basic_string(&__p, v4, 0, 3uLL, (std::allocator<char> *)&v14);
      v7 = std::string::compare(&__p, "BMW");
      v8 = v7;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v8)
          goto LABEL_9;
      }
      else if (v7)
      {
        goto LABEL_9;
      }
      v10 = 33;
LABEL_14:
      *a2 = v10;
      v9 = 1;
      goto LABEL_15;
    }
    v10 = 25;
    goto LABEL_14;
  }
  if (*(_QWORD *)(a1 + 248))
    goto LABEL_5;
LABEL_9:
  v9 = 0;
LABEL_15:
  sub_100034234((uint64_t)v13);
  return v9;
}

void sub_100448D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100448DAC(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1);
  v4 = *(__int128 **)(a1 + 1176);
  v5 = *(_QWORD *)(a1 + 1168);
  v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - v5) >> 3);
  if (v6 < 0xB)
    goto LABEL_2;
  if (*(char *)(v5 + 71) < 0)
  {
    if (!*(_QWORD *)(v5 + 56))
    {
LABEL_2:
      v7 = 0;
      goto LABEL_10;
    }
  }
  else if (!*(_BYTE *)(v5 + 71))
  {
    goto LABEL_2;
  }
  if (a1 + 1168 != a2)
    sub_100455DD8(a2, (std::string *)v5, v4, v6);
  v7 = 1;
LABEL_10:
  sub_100034234((uint64_t)v9);
  return v7;
}

void sub_100448E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100448E60(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  _QWORD v15[3];
  void **v16[3];
  _QWORD v17[3];
  _QWORD v18[2];
  void ***v19;

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1);
  v4 = (uint64_t *)(a1 + 1168);
  if (a1 + 1168 != a2)
    sub_100455DD8(a1 + 1168, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 1176) - *(_QWORD *)(a1 + 1168)) >> 3) >= 2)
  {
    v5 = 1;
    v6 = 24;
    do
    {
      if (qword_100977A88 != -1)
        dispatch_once(&qword_100977A88, &stru_10092F660);
      v7 = (uint64_t)off_100977A80;
      memset(v17, 0, sizeof(v17));
      sub_1002A46F4((char *)v17, *(__int128 **)(a1 + 1168), *(__int128 **)(a1 + 1176), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 1176) - *(_QWORD *)(a1 + 1168)) >> 3));
      LOBYTE(v7) = sub_100290CFC(v7, v17, v5);
      v16[0] = (void **)v17;
      sub_100091BF8(v16);
      if ((v7 & 1) == 0)
        std::string::assign((std::string *)(*v4 + v6), "");
      ++v5;
      v6 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 1176) - *(_QWORD *)(a1 + 1168)) >> 3) > v5);
  }
  memset(v16, 0, sizeof(v16));
  if (sub_100448DAC(a1, (uint64_t)v16))
  {
    v8 = *(_QWORD *)(a1 + 1168);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 1176) - v8) >> 3) >= 2)
    {
      v9 = 1;
      v10 = 3;
      do
      {
        if (v9 != 5)
        {
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_10092F660);
          v11 = (uint64_t)off_100977A80;
          memset(v15, 0, sizeof(v15));
          sub_1002A46F4((char *)v15, *(__int128 **)(a1 + 1168), *(__int128 **)(a1 + 1176), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 1176) - *(_QWORD *)(a1 + 1168)) >> 3));
          LOBYTE(v11) = sub_100290CFC(v11, v15, v9);
          v19 = (void ***)v15;
          sub_100091BF8((void ***)&v19);
          v8 = *v4;
          if ((v11 & 1) == 0)
          {
            std::string::operator=((std::string *)(v8 + v10 * 8), (const std::string *)&v16[0][v10]);
            v8 = *v4;
          }
        }
        ++v9;
        v10 += 3;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 1176) - v8) >> 3) > v9);
    }
  }
  v12 = sub_10034D650();
  memset(v14, 0, sizeof(v14));
  sub_1002A46F4((char *)v14, *(__int128 **)(a1 + 1168), *(__int128 **)(a1 + 1176), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 1176) - *(_QWORD *)(a1 + 1168)) >> 3));
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v12 + 944))(v12, a1, v14);
  v19 = (void ***)v14;
  sub_100091BF8((void ***)&v19);
  v19 = v16;
  sub_100091BF8((void ***)&v19);
  return sub_100034234((uint64_t)v18);
}

void sub_100449148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004491B4@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  __int128 v9;
  void *__p[2];
  uint64_t v12;
  _QWORD v13[2];

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1);
  v6 = *(_QWORD *)(a1 + 1168);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 1176) - v6) >> 3);
  if (v7 < 0xB || v7 <= a2)
  {
    sub_100091AE8(a3, "");
    return sub_100034234((uint64_t)v13);
  }
  __p[0] = 0;
  __p[1] = 0;
  v12 = 0;
  v8 = (__int128 *)(v6 + 24 * a2);
  if (*((char *)v8 + 23) < 0)
  {
    sub_10003430C(__p, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v12 = *((_QWORD *)v8 + 2);
    *(_OWORD *)__p = v9;
  }
  if (SHIBYTE(v12) < 0)
  {
    if (__p[1] > (void *)1)
    {
      sub_10003430C(a3, __p[0], (unint64_t)__p[1]);
      goto LABEL_14;
    }
  }
  else if (HIBYTE(v12) >= 2u)
  {
    *(_OWORD *)a3 = *(_OWORD *)__p;
    a3[2] = v12;
    goto LABEL_14;
  }
  sub_100091AE8(a3, "");
LABEL_14:
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  return sub_100034234((uint64_t)v13);
}

void sub_1004492E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100449310(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  if (a2 <= 2)
    v3 = byte_100741396[a2];
  else
    v3 = 0;
  sub_100034234((uint64_t)v5);
  return v3;
}

BOOL sub_10044936C(uint64_t a1)
{
  std::string::size_type size;
  _BOOL8 v3;
  std::string v5;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  memset(&v5, 0, sizeof(v5));
  sub_1004491B4(a1, 7u, &v5);
  if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v5.__r_.__value_.__r.__words[2]);
  else
    size = v5.__r_.__value_.__l.__size_;
  if (size >= 6)
    v3 = !std::string::compare(&v5, size - 3, 3uLL, "dev") || std::string::compare(&v5, size - 5, 5uLL, "insec") == 0;
  else
    v3 = 0;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  sub_100034234((uint64_t)v6);
  return v3;
}

void sub_10044943C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100449468(uint64_t a1, std::string *a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  if (*(char *)(a1 + 1215) < 0)
  {
    if (*(_QWORD *)(a1 + 1200))
      goto LABEL_3;
LABEL_5:
    v4 = 0;
    goto LABEL_6;
  }
  if (!*(_BYTE *)(a1 + 1215))
    goto LABEL_5;
LABEL_3:
  std::string::operator=(a2, (const std::string *)(a1 + 1192));
  v4 = 1;
LABEL_6:
  sub_100034234((uint64_t)v6);
  return v4;
}

void sub_1004494D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004494EC(uint64_t a1, const std::string *a2)
{
  uint64_t v4;
  void *__p[2];
  uint64_t v7;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1);
  std::string::operator=((std::string *)(a1 + 1192), a2);
  v4 = sub_10034D650();
  if (*(char *)(a1 + 1215) < 0)
  {
    sub_10003430C(__p, *(void **)(a1 + 1192), *(_QWORD *)(a1 + 1200));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 1192);
    v7 = *(_QWORD *)(a1 + 1208);
  }
  (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v4 + 960))(v4, a1, __p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  return sub_100034234((uint64_t)v8);
}

void sub_1004495A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_1004495CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v4 = *(_QWORD *)(a1 + 1232);
  if (v4)
  {
    v5 = *(_OWORD *)(a1 + 1216);
    *(_OWORD *)(a2 + 12) = *(_OWORD *)(a1 + 1228);
    *(_OWORD *)a2 = v5;
    std::string::operator=((std::string *)(a2 + 32), (const std::string *)(a1 + 1248));
  }
  sub_100034234((uint64_t)v7);
  return v4 != 0;
}

void sub_100449648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044965C(uint64_t a1, char a2, __int16 a3, int a4, __int16 a5, char a6, uint64_t a7, int a8, const std::string *a9)
{
  uint64_t v17;
  _OWORD v19[2];
  __int128 __p;
  uint64_t v21;
  _QWORD v22[2];

  v22[0] = 0;
  v22[1] = 0;
  sub_10003415C((uint64_t)v22, a1);
  *(_BYTE *)(a1 + 1216) = a2;
  *(_WORD *)(a1 + 1218) = a3;
  *(_DWORD *)(a1 + 1220) = a4;
  *(_WORD *)(a1 + 1224) = a5;
  *(_BYTE *)(a1 + 1226) = a6;
  *(_QWORD *)(a1 + 1232) = a7;
  *(_DWORD *)(a1 + 1240) = a8;
  std::string::operator=((std::string *)(a1 + 1248), a9);
  v17 = sub_10034D650();
  v19[0] = *(_OWORD *)(a1 + 1216);
  *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)(a1 + 1228);
  if (*(char *)(a1 + 1271) < 0)
  {
    sub_10003430C(&__p, *(void **)(a1 + 1248), *(_QWORD *)(a1 + 1256));
  }
  else
  {
    __p = *(_OWORD *)(a1 + 1248);
    v21 = *(_QWORD *)(a1 + 1264);
  }
  (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v17 + 976))(v17, a1, v19);
  if (SHIBYTE(v21) < 0)
    operator delete((void *)__p);
  return sub_100034234((uint64_t)v22);
}

void sub_100449778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a18 < 0)
    operator delete(__p);
  sub_100034234((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1004497A4(uint64_t a1)
{
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_10092F5C0);
  return sub_100439360((uint64_t)off_100978188, a1);
}

uint64_t sub_1004497F4(uint64_t a1)
{
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_10092F5C0);
  return sub_1004393D4((uint64_t)off_100978188, a1);
}

uint64_t sub_100449844(uint64_t a1)
{
  unsigned int v2;
  unsigned __int8 v3;
  BOOL v4;

  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_10092F5C0);
  v2 = sub_1004393D4((uint64_t)off_100978188, a1);
  v3 = 0;
  if (v2)
  {
    do
    {
      v3 += v2 & 1;
      v4 = v2 > 1;
      v2 >>= 1;
    }
    while (v4);
  }
  return v3;
}

uint64_t sub_1004498BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1304) = a2;
  *(_BYTE *)(result + 1308) = 1;
  return result;
}

void sub_1004498CC(uint64_t a1, int a2, char a3)
{
  uint64_t v6;
  NSObject *v7;
  void **v8;
  void *__p[2];
  char v10;
  _BYTE buf[12];
  __int16 v12;
  int v13;

  if (!a2)
  {
    __p[0] = 0;
    __p[1] = 0;
    sub_10003415C((uint64_t)__p, a1);
    *(_BYTE *)(a1 + 1324) = 1;
    *(_QWORD *)buf = 0;
    sub_10004AD30((uint64_t)buf);
    v6 = *(__int16 *)&buf[4];
    *(_QWORD *)(a1 + 1328) = *(int *)buf;
    *(_QWORD *)(a1 + 1336) = v6;
    *(_BYTE *)(a1 + 1325) = a3;
    *(_BYTE *)(a1 + 1376) = 0;
    sub_100034264((uint64_t)__p);
    sub_10044647C((unsigned __int8 *)a1);
    sub_100034234((uint64_t)__p);
  }
  v7 = qword_1009997E8;
  if (os_signpost_enabled((os_log_t)qword_1009997E8))
  {
    sub_10043E5F8(a1, __p);
    if (v10 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v8;
    v12 = 1024;
    v13 = a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BTSignPost", "ACL connected for device %{public}s with result:%d", buf, 0x12u);
    if (v10 < 0)
      operator delete(__p[0]);
  }
}

void sub_100449A20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100449A40(uint64_t a1, int a2, int a3)
{
  int v5;
  uint64_t v6;
  NSObject *v7;
  void **v8;
  uint64_t v9;
  NSObject *v10;
  void **v11;
  uint64_t v12;
  void *v13[2];
  char v14;
  char v15;
  uint8_t buf[4];
  void **v17;
  void *__p[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  if (!a2)
  {
    __p[0] = 0;
    __p[1] = 0;
    sub_10003415C((uint64_t)__p, a1);
    *(_WORD *)(a1 + 1324) = 0;
    *(_BYTE *)(a1 + 1113) = 0;
    v13[0] = 0;
    sub_10004AD30((uint64_t)v13);
    if ((unint64_t)(SLODWORD(v13[0]) - *(_QWORD *)(a1 + 1328)) > 0x3C)
    {
      *(_WORD *)(a1 + 1345) = 0;
      *(_DWORD *)(a1 + 1348) = 0;
    }
    else
    {
      v5 = *(_DWORD *)(a1 + 1348);
      if (!v5 || v5 == a3)
      {
        ++*(_BYTE *)(a1 + 1346);
      }
      else
      {
        *(_BYTE *)(a1 + 1346) = 0;
        *(_DWORD *)(a1 + 1348) = 0;
      }
      *(_DWORD *)(a1 + 1348) = a3;
      ++*(_BYTE *)(a1 + 1345);
    }
    *(_QWORD *)(a1 + 1328) = 0;
    *(_QWORD *)(a1 + 1336) = 0;
    sub_100034234((uint64_t)__p);
  }
  __p[0] = 0;
  __p[1] = 0;
  sub_10003415C((uint64_t)__p, a1);
  *(_BYTE *)(a1 + 1424) = 0;
  sub_100034234((uint64_t)__p);
  v15 = 0;
  v6 = sub_10034D650();
  sub_100091AE8(__p, "HasTS");
  (*(void (**)(uint64_t, uint64_t, void **, char *))(*(_QWORD *)v6 + 784))(v6, a1, __p, &v15);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  if (!v15)
  {
    if (*(unsigned __int8 *)(a1 + 1345) >= 5u)
    {
      *(_BYTE *)(a1 + 1345) = 0;
      v24 = 0;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      *(_OWORD *)__p = 0u;
      v19 = 0u;
      if (sub_100449DC8(a1, 0, 409, a3, (uint64_t)__p))
      {
        v7 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(a1, v13);
          v8 = v14 >= 0 ? v13 : (void **)v13[0];
          *(_DWORD *)buf = 136315138;
          v17 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Submitting contextual metric for event 'BT_CONNECTION_DISCONNECTION_RED_FLAG' for %s", buf, 0xCu);
          if (v14 < 0)
            operator delete(v13[0]);
        }
        v9 = sub_100065478();
        (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v9 + 248))(v9, __p, *(unsigned __int8 *)(a1 + 1308));
      }
    }
    if (*(unsigned __int8 *)(a1 + 1346) >= 5u)
    {
      *(_BYTE *)(a1 + 1346) = 0;
      *(_DWORD *)(a1 + 1348) = 0;
      v24 = 0;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      *(_OWORD *)__p = 0u;
      v19 = 0u;
      if (sub_100449DC8(a1, 0, 410, a3, (uint64_t)__p))
      {
        v10 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(a1, v13);
          if (v14 >= 0)
            v11 = v13;
          else
            v11 = (void **)v13[0];
          *(_DWORD *)buf = 136315138;
          v17 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Submitting contextual metric for event 'BT_CONNECTION_DISCONNECTION_SAME_REASON_RED_FLAG' for %s", buf, 0xCu);
          if (v14 < 0)
            operator delete(v13[0]);
        }
        v12 = sub_100065478();
        (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v12 + 248))(v12, __p, *(unsigned __int8 *)(a1 + 1308));
      }
    }
  }
}

void sub_100449D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_100034234((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100449D84(uint64_t a1, char a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 1424) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_100449DC8(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  id v10;
  void *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  void *v32;
  NSObject *v33;
  NSObject *v34;
  _QWORD v36[2];
  char v37;
  uint8_t buf[4];
  int v39;
  __int16 v40;
  _BYTE v41[20];
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  _BOOL4 v69;

  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10092F680);
  if (*((_BYTE *)off_100977A50 + 60))
  {
    v37 = 0;
    sub_100043758(&v37);
    *(_BYTE *)(a5 + 54) = sub_100185E60(a1 + 128);
    sub_10004339C(&v37);
    *(_DWORD *)a5 = a3;
    *(_DWORD *)(a5 + 44) = a2;
    *(_DWORD *)(a5 + 48) = a4;
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    *(_BYTE *)(a5 + 52) = sub_1004728B8((uint64_t)off_1009778E0);
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10092F6A0);
    v10 = sub_100069E14((uint64_t)off_1009778A0);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    *(_BYTE *)(a5 + 53) = objc_msgSend(v11, "count");

    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    *(_QWORD *)(a5 + 64) = *((unsigned int *)off_1009778E0 + 75);
    v36[0] = 0;
    v36[1] = 0;
    sub_10003415C((uint64_t)v36, a1 + 64);
    v12 = (_OWORD *)(a5 + 4);
    if (*(_BYTE *)(a1 + 740)
      && (v13 = *(_OWORD *)(a1 + 700), *(_DWORD *)(a5 + 20) = *(_DWORD *)(a1 + 716), *v12 = v13, *(_BYTE *)(a1 + 741)))
    {
      v14 = *(_OWORD *)(a1 + 720);
      *(_DWORD *)(a5 + 40) = *(_DWORD *)(a1 + 736);
      *(_OWORD *)(a5 + 24) = v14;
      v15 = 1;
    }
    else
    {
      v15 = 0;
    }
    *(_DWORD *)(a5 + 56) = *(_DWORD *)(a1 + 1312);
    *(_DWORD *)(a5 + 72) = sub_1004497F4(a1);
    *(_DWORD *)(a5 + 76) = sub_1004497A4(a1);
    v16 = *(unsigned int *)(a1 + 1320);
    *(_QWORD *)(a5 + 88) = v16;
    *(_WORD *)(a5 + 80) = 0;
    if (*(_BYTE *)(a1 + 1308))
    {
      *(_BYTE *)(a5 + 80) = *(_DWORD *)(a1 + 1304);
      *(_BYTE *)(a5 + 81) = *(_BYTE *)(a1 + 1316);
    }
    *(_QWORD *)(a5 + 88) = v16;
    v17 = sub_10043F65C(a1, 0x20u);
    *(_BYTE *)(a5 + 98) = v17 == 4;
    if ((_DWORD)v15)
    {
      v18 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v19 = *(_DWORD *)a5;
        v20 = *(_DWORD *)(a5 + 44);
        v21 = *(_DWORD *)(a5 + 48);
        v22 = *(unsigned __int8 *)(a5 + 52);
        v23 = *(unsigned __int8 *)(a5 + 53);
        v24 = *(unsigned __int8 *)(a5 + 54);
        v25 = *(_DWORD *)(a5 + 56);
        v26 = *(_QWORD *)(a5 + 64);
        v27 = *(_DWORD *)(a5 + 72);
        v28 = *(_DWORD *)(a5 + 76);
        v29 = *(unsigned __int8 *)(a5 + 80);
        v30 = *(unsigned __int8 *)(a5 + 81);
        v31 = *(_QWORD *)(a5 + 88);
        *(_DWORD *)buf = 67113474;
        v39 = v19;
        v40 = 1042;
        *(_DWORD *)v41 = 20;
        *(_WORD *)&v41[4] = 2098;
        *(_QWORD *)&v41[6] = a5 + 4;
        *(_WORD *)&v41[14] = 1042;
        *(_DWORD *)&v41[16] = 20;
        v42 = 2098;
        v43 = a5 + 24;
        v44 = 1024;
        v45 = v20;
        v46 = 1024;
        v47 = v21;
        v48 = 1024;
        v49 = v22;
        v50 = 1024;
        v51 = v23;
        v52 = 1024;
        v53 = v24;
        v54 = 1024;
        v55 = v25;
        v56 = 2048;
        v57 = v26;
        v58 = 1024;
        v59 = v27;
        v60 = 1024;
        v61 = v28;
        v62 = 1024;
        v63 = v29;
        v64 = 1024;
        v65 = v30;
        v66 = 2048;
        v67 = v31;
        v68 = 1024;
        v69 = v17 == 4;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Contextual Metric - {0x%x, %{public}.20P, %{public}.20P, 0x%x, %d, %d, %d, %d, 0x%x, 0x%llx, 0x%x, 0x%x, %d, %d, 0x%llx, %d}", buf, 0x7Eu);
      }
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a5 + 4, 20));
      v33 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        v39 = 20;
        v40 = 2098;
        *(_QWORD *)v41 = v12;
        *(_WORD *)&v41[8] = 2112;
        *(_QWORD *)&v41[10] = v32;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Contextual Metric primary hash %{public}.20P    data hash %@", buf, 0x1Cu);
      }

    }
    sub_100034234((uint64_t)v36);
    sub_100043728(&v37);
  }
  else
  {
    v34 = qword_1009997E8;
    v15 = 0;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Stack is not ready, not generating contextual metric", buf, 2u);
      return 0;
    }
  }
  return v15;
}

void sub_10044A214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_100034234((uint64_t)&a10);
  sub_100043728(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10044A254(uint64_t a1, int a2)
{
  uint64_t v3;

  *(_BYTE *)(a1 + 786) = a2 != 0;
  v3 = sub_10034D650();
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 408))(v3, a1, *(unsigned __int8 *)(a1 + 786));
}

uint64_t sub_10044A290(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 647);
}

uint64_t sub_10044A298(uint64_t a1, int a2)
{
  NSObject *v4;
  void **v5;
  const char *v6;
  uint64_t v7;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  void **v12;
  __int16 v13;
  const char *v14;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    sub_10043E5F8(a1, __p);
    v5 = (void **)__p[0];
    v6 = "No";
    if (v10 >= 0)
      v5 = __p;
    if (a2)
      v6 = "Yes";
    *(_DWORD *)buf = 136446466;
    v12 = v5;
    v13 = 2080;
    v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Setting device %{public}s to allow sco for turn by turn: %s", buf, 0x16u);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  *(_BYTE *)(a1 + 647) = a2;
  v7 = sub_10034D650();
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 424))(v7, a1, *(unsigned __int8 *)(a1 + 647));
}

uint64_t sub_10044A3B4(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  _QWORD v6[2];
  uint8_t buf[4];
  int v8;

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int16 *)(a1 + 654);
    *(_DWORD *)buf = 67109120;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Last AVRCP version is %d", buf, 8u);
  }
  v4 = *(unsigned __int16 *)(a1 + 654);
  sub_100034234((uint64_t)v6);
  return v4;
}

uint64_t sub_10044A478(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD v7[2];
  uint8_t buf[4];
  int v9;

  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 440))(v4, a1, a2);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  *(_WORD *)(a1 + 654) = a2;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting AVRCP version to %d", buf, 8u);
  }
  return sub_100034234((uint64_t)v7);
}

uint64_t sub_10044A550(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int16 *)(a1 + 660);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044A594(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD v7[2];
  uint8_t buf[4];
  int v9;

  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 488))(v4, a1, a2);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  *(_WORD *)(a1 + 660) = a2;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting AVRCP Controller version to %d", buf, 8u);
  }
  return sub_100034234((uint64_t)v7);
}

uint64_t sub_10044A66C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int16 *)(a1 + 662);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044A6B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 504))(v4, a1, a2);
  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  *(_WORD *)(a1 + 662) = a2;
  return sub_100034234((uint64_t)v6);
}

uint64_t sub_10044A70C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int16 *)(a1 + 664);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044A750(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD v7[2];
  uint8_t buf[4];
  int v9;

  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 520))(v4, a1, a2);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  *(_WORD *)(a1 + 664) = a2;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting AVRCP Target version to %d", buf, 8u);
  }
  return sub_100034234((uint64_t)v7);
}

uint64_t sub_10044A828(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int16 *)(a1 + 666);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044A86C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 536))(v4, a1, a2);
  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  *(_WORD *)(a1 + 666) = a2;
  return sub_100034234((uint64_t)v6);
}

uint64_t sub_10044A8C8(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int16 *)(a1 + 668);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044A90C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD v7[2];
  uint8_t buf[4];
  int v9;

  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 552))(v4, a1, a2);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  *(_WORD *)(a1 + 668) = a2;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting Handsfree version to %d", buf, 8u);
  }
  return sub_100034234((uint64_t)v7);
}

uint64_t sub_10044A9E4(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int16 *)(a1 + 670);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044AA28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 568))(v4, a1, a2);
  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  *(_WORD *)(a1 + 670) = a2;
  return sub_100034234((uint64_t)v6);
}

uint64_t sub_10044AA84(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  _QWORD v7[2];
  unsigned __int16 v8;
  uint8_t buf[4];
  int v10;

  v8 = a2;
  v3 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(_QWORD *)v3 + 584))(v3, a1, &v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v4 = v8;
  *(_WORD *)(a1 + 672) = v8;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting A2DP Sink version to %d", buf, 8u);
  }
  return sub_100034234((uint64_t)v7);
}

uint64_t sub_10044AB60(uint64_t a1, __int16 a2)
{
  uint64_t v3;
  _QWORD v5[2];
  __int16 v6;

  v6 = a2;
  v3 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v3 + 600))(v3, a1, &v6);
  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_WORD *)(a1 + 674) = v6;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_10044ABC0(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  _QWORD v7[2];
  unsigned __int16 v8;
  uint8_t buf[4];
  int v10;

  v8 = a2;
  v3 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(_QWORD *)v3 + 616))(v3, a1, &v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v4 = v8;
  *(_WORD *)(a1 + 676) = v8;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting MAP version to %d", buf, 8u);
  }
  return sub_100034234((uint64_t)v7);
}

uint64_t sub_10044AC9C(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  _QWORD v7[2];
  unsigned __int16 v8;
  uint8_t buf[4];
  int v10;

  v8 = a2;
  v3 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(_QWORD *)v3 + 632))(v3, a1, &v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v4 = v8;
  *(_WORD *)(a1 + 678) = v8;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting Object Push version to %d", buf, 8u);
  }
  return sub_100034234((uint64_t)v7);
}

uint64_t sub_10044AD78(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  _QWORD v7[2];
  unsigned __int16 v8;
  uint8_t buf[4];
  int v10;

  v8 = a2;
  v3 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(_QWORD *)v3 + 648))(v3, a1, &v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v4 = v8;
  *(_WORD *)(a1 + 680) = v8;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting PNP version to %d", buf, 8u);
  }
  return sub_100034234((uint64_t)v7);
}

uint64_t sub_10044AE54(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  _QWORD v7[2];
  unsigned __int16 v8;
  uint8_t buf[4];
  int v10;

  v8 = a2;
  v3 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(_QWORD *)v3 + 664))(v3, a1, &v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v4 = v8;
  *(_WORD *)(a1 + 682) = v8;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting SerialPort version to %d", buf, 8u);
  }
  return sub_100034234((uint64_t)v7);
}

uint64_t sub_10044AF30(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  _QWORD v7[2];
  unsigned __int16 v8;
  uint8_t buf[4];
  int v10;

  v8 = a2;
  v3 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(_QWORD *)v3 + 680))(v3, a1, &v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v4 = v8;
  *(_WORD *)(a1 + 684) = v8;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting HID version to %d", buf, 8u);
  }
  return sub_100034234((uint64_t)v7);
}

uint64_t sub_10044B00C(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  _QWORD v7[2];
  unsigned __int16 v8;
  uint8_t buf[4];
  int v10;

  v8 = a2;
  v3 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(_QWORD *)v3 + 696))(v3, a1, &v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v4 = v8;
  *(_WORD *)(a1 + 686) = v8;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting GATT version to %d", buf, 8u);
  }
  return sub_100034234((uint64_t)v7);
}

uint64_t sub_10044B0E8(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  _QWORD v7[2];
  unsigned __int16 v8;
  uint8_t buf[4];
  int v10;

  v8 = a2;
  v3 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(_QWORD *)v3 + 712))(v3, a1, &v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v4 = v8;
  *(_WORD *)(a1 + 688) = v8;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting WIAP version to %d", buf, 8u);
  }
  return sub_100034234((uint64_t)v7);
}

uint64_t sub_10044B1C4(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  _QWORD v7[2];
  unsigned __int16 v8;
  uint8_t buf[4];
  int v10;

  v8 = a2;
  v3 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(_QWORD *)v3 + 728))(v3, a1, &v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v4 = v8;
  *(_WORD *)(a1 + 690) = v8;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting AVDTP version to %d", buf, 8u);
  }
  return sub_100034234((uint64_t)v7);
}

uint64_t sub_10044B2A0(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  _QWORD v7[2];
  unsigned __int16 v8;
  uint8_t buf[4];
  int v10;

  v8 = a2;
  v3 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(_QWORD *)v3 + 744))(v3, a1, &v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v4 = v8;
  *(_WORD *)(a1 + 692) = v8;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting AVCTP version to %d", buf, 8u);
  }
  return sub_100034234((uint64_t)v7);
}

uint64_t sub_10044B37C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 696);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044B3C0(uint64_t a1, int a2)
{
  NSObject *v4;
  _QWORD v6[2];
  uint8_t buf[4];
  int v8;

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 696) = a2;
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Setting Firmware version to %d", buf, 8u);
  }
  return sub_100034234((uint64_t)v6);
}

uint64_t sub_10044B480(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 740);
}

BOOL sub_10044B488(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v3;

  v2 = *(unsigned __int8 *)(a1 + 740);
  if (a2 && *(_BYTE *)(a1 + 740))
  {
    v3 = *(_OWORD *)(a1 + 700);
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 716);
    *(_OWORD *)a2 = v3;
  }
  return v2 != 0;
}

uint64_t sub_10044B4B4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 741);
}

BOOL sub_10044B4BC(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v3;

  v2 = *(unsigned __int8 *)(a1 + 741);
  if (a2 && *(_BYTE *)(a1 + 741))
  {
    v3 = *(_OWORD *)(a1 + 720);
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 736);
    *(_OWORD *)a2 = v3;
  }
  return v2 != 0;
}

uint64_t sub_10044B4E4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int *v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  NSObject *v11;
  _BYTE *v12;
  void *v13;
  NSObject *v14;
  int v15;
  __int128 *v16;
  int v17;
  int v18;
  int v19;
  __int128 *v20;
  char v21;
  unsigned __int8 *v22;
  void **v23;
  unsigned __int8 *v24;
  char *v25;
  void **v26;
  unsigned __int8 *v27;
  void **v28;
  unsigned __int8 *v29;
  char *v30;
  void **v31;
  unsigned __int8 *v32;
  void **v33;
  unsigned __int8 *v34;
  char *v35;
  void **v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  _BOOL4 v57;
  int v59;
  int v60;
  int v61;
  int v62;
  CC_LONG v63;
  _OWORD *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 *v68;
  size_t v69;
  int v70;
  int v71;
  char *v72;
  size_t v73;
  int v74;
  __int128 *v75;
  size_t v76;
  uint64_t v77;
  NSObject *v78;
  NSObject *v79;
  void **v80;
  __int128 *v81;
  char *v82;
  char *v83;
  __int128 *v84;
  __int128 *v85;
  char *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BOOL4 v105;
  int v106;
  NSObject *v107;
  uint64_t v108;
  int v109;
  int v110;
  _BOOL4 v111;
  NSObject *v112;
  uint64_t v113;
  int v114;
  int v115;
  _BOOL4 v116;
  char *v117;
  int64_t v118;
  const void *v119;
  CC_LONG v120;
  NSObject *v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  NSObject *v126;
  _BYTE *v127;
  NSObject *v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t (**v132)();
  unsigned int *v133;
  char v134;
  void *v135[2];
  __int128 v136;
  _QWORD v137[2];
  _BYTE buf[24];
  __int16 v139;
  __int128 *v140;
  __int16 v141;
  void **v142;
  __int16 v143;
  int v144;
  __int16 v145;
  int v146;
  __int16 v147;
  int v148;
  __int16 v149;
  int v150;
  __int16 v151;
  __int128 *v152;
  __int16 v153;
  int v154;
  __int16 v155;
  char *v156;
  __int16 v157;
  int v158;
  __int16 v159;
  int v160;
  __int16 v161;
  int v162;
  __int16 v163;
  int v164;
  __int16 v165;
  int v166;
  __int16 v167;
  int v168;
  __int16 v169;
  int v170;
  __int16 v171;
  int v172;
  __int16 v173;
  int v174;
  __int16 v175;
  int v176;
  __int16 v177;
  int v178;
  __int16 v179;
  int v180;
  __int16 v181;
  int v182;
  __int16 v183;
  int v184;
  __int16 v185;
  int v186;
  __int16 v187;
  int v188;
  __int16 v189;
  int v190;
  __int16 v191;
  int v192;
  __int16 v193;
  int v194;
  __int16 v195;
  int v196;
  __int16 v197;
  int v198;
  __int16 v199;
  int v200;
  __int16 v201;
  __int128 *v202;
  __int16 v203;
  char *v204;
  __int16 v205;
  char *v206;
  __int16 v207;
  __int128 *v208;
  __int16 v209;
  __int128 *v210;
  __int16 v211;
  char *v212;
  __int16 v213;
  _QWORD *v214;
  __int16 v215;
  int v216;
  __int128 v217;
  char v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  _QWORD v225[6];
  __int128 v226;
  uint64_t v227;
  __int128 v228;
  __int128 v229;
  _OWORD v230[2];
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  _QWORD v241[8];
  void *__p[2];
  __int128 v243;

  v137[0] = 0;
  v137[1] = 0;
  sub_10003415C((uint64_t)v137, a1 + 64);
  *(_OWORD *)__p = 0u;
  v243 = 0u;
  memset(v241, 0, sizeof(v241));
  v239 = 0u;
  v240 = 0u;
  v237 = 0u;
  v238 = 0u;
  v235 = 0u;
  v236 = 0u;
  v233 = 0u;
  v234 = 0u;
  v231 = 0u;
  v232 = 0u;
  memset(v230, 0, sizeof(v230));
  v228 = 0u;
  v229 = 0u;
  *(_OWORD *)v135 = 0u;
  v136 = 0u;
  sub_1004806B4((uint64_t)v135, 0);
  v227 = 0;
  v226 = 0u;
  memset(v225, 0, sizeof(v225));
  v223 = 0u;
  v224 = 0u;
  v221 = 0u;
  v222 = 0u;
  v219 = 0u;
  v220 = 0u;
  sub_1005BCCCC((uint64_t)&v219 + 1);
  BYTE2(v220) = 0;
  BYTE4(v220) = 0;
  BYTE2(v222) = 0;
  BYTE4(v222) = 0;
  HIDWORD(v225[2]) = 0;
  *((_QWORD *)&v220 + 1) = 0;
  v221 = 0uLL;
  LOBYTE(v222) = 0;
  *((_QWORD *)&v222 + 1) = 0;
  v223 = 0uLL;
  LOBYTE(v224) = 0;
  *((_QWORD *)&v224 + 1) = 0;
  memset(v225, 0, 19);
  LOBYTE(v225[3]) = 1;
  BYTE2(v227) = 0;
  *(_QWORD *)((char *)&v225[3] + 6) = 0;
  *(_QWORD *)((char *)&v225[3] + 1) = 0;
  v225[5] = 0;
  v226 = 0uLL;
  LOBYTE(v227) = 0;
  if (*(_BYTE *)(a1 + 742))
  {
    v2 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Identification - metric has already been updated", buf, 2u);
    }
    goto LABEL_228;
  }
  v4 = (int *)(a1 + 1068);
  v5 = *(_DWORD *)(a1 + 1068);
  if (v5 == 76 && (v6 = *(_DWORD *)(a1 + 1072) - 8194, v6 <= 0x1D) && ((1 << v6) & 0x20037F9B) != 0
    || *(_BYTE *)(a1 + 1061) && (*(_BYTE *)(a1 + 1081) & 0x10) != 0)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    sub_10003415C((uint64_t)buf, a1);
    v7 = *(_DWORD *)(a1 + 696);
    sub_100034234((uint64_t)buf);
    if (!v7)
    {
      v11 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_228;
      sub_10043E5F8(a1, buf);
      v12 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
      LODWORD(v217) = 136446210;
      *(_QWORD *)((char *)&v217 + 4) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Identification - Apple Audio Device firmware version not yet known for device %{public}s. Waiting until firmware version comes in.", (uint8_t *)&v217, 0xCu);
      if ((buf[23] & 0x80000000) == 0)
        goto LABEL_228;
      v13 = *(void **)buf;
LABEL_35:
      operator delete(v13);
      goto LABEL_228;
    }
    v5 = *v4;
  }
  if (v5 == 76 && (v8 = *(_DWORD *)(a1 + 1072) - 8194, v8 <= 0x1D) && ((1 << v8) & 0x20037F9B) != 0
    || *(_BYTE *)(a1 + 1061) && (*(_BYTE *)(a1 + 1081) & 0x10) != 0
    || *(_BYTE *)(a1 + 1361) && *(_BYTE *)(a1 + 1362) && (sub_10043E93C((unsigned __int8 *)a1) & 1) != 0)
  {
    sub_10043F78C(a1, (uint64_t)buf);
    if (SBYTE7(v243) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = *(_OWORD *)buf;
    *(_QWORD *)&v243 = *(_QWORD *)&buf[16];
    v9 = *(_DWORD *)(a1 + 1064);
    if (v9 == 2)
    {
      v10 = 1452;
    }
    else
    {
      if (v9 != 1)
        goto LABEL_39;
      v10 = 76;
    }
    if (*v4 == v10)
    {
      LOWORD(v228) = 2560;
      v21 = 39;
LABEL_42:
      BYTE2(v228) = v21;
      v22 = (unsigned __int8 *)BYTE7(v243);
      if ((SBYTE7(v243) & 0x80u) == 0)
        v23 = __p;
      else
        v23 = (void **)__p[0];
      if (SBYTE7(v243) < 0)
        v22 = (unsigned __int8 *)__p[1];
      buf[0] = 13;
      v24 = sub_10044CC00(v23, &v22[(_QWORD)v23], buf);
      v25 = (char *)__p + BYTE7(v243);
      if ((SBYTE7(v243) & 0x80u) == 0)
      {
        v26 = __p;
      }
      else
      {
        v25 = (char *)__p[0] + (unint64_t)__p[1];
        v26 = (void **)__p[0];
      }
      std::string::erase((std::string *)__p, v24 - (unsigned __int8 *)v26, v25 - (char *)v24);
      v27 = (unsigned __int8 *)BYTE7(v243);
      if ((SBYTE7(v243) & 0x80u) == 0)
        v28 = __p;
      else
        v28 = (void **)__p[0];
      if (SBYTE7(v243) < 0)
        v27 = (unsigned __int8 *)__p[1];
      buf[0] = 10;
      v29 = sub_10044CC00(v28, &v27[(_QWORD)v28], buf);
      v30 = (char *)__p + BYTE7(v243);
      if ((SBYTE7(v243) & 0x80u) == 0)
      {
        v31 = __p;
      }
      else
      {
        v30 = (char *)__p[0] + (unint64_t)__p[1];
        v31 = (void **)__p[0];
      }
      std::string::erase((std::string *)__p, v29 - (unsigned __int8 *)v31, v30 - (char *)v29);
      v32 = (unsigned __int8 *)BYTE7(v243);
      if ((SBYTE7(v243) & 0x80u) == 0)
        v33 = __p;
      else
        v33 = (void **)__p[0];
      if (SBYTE7(v243) < 0)
        v32 = (unsigned __int8 *)__p[1];
      buf[0] = 44;
      v34 = sub_10044CC00(v33, &v32[(_QWORD)v33], buf);
      v35 = (char *)__p + BYTE7(v243);
      if ((SBYTE7(v243) & 0x80u) == 0)
      {
        v36 = __p;
      }
      else
      {
        v35 = (char *)__p[0] + (unint64_t)__p[1];
        v36 = (void **)__p[0];
      }
      std::string::erase((std::string *)__p, v34 - (unsigned __int8 *)v36, v35 - (char *)v34);
      sub_100034264((uint64_t)v137);
      sub_1004466F4(a1, (_WORD *)&v228 + 2, (_BYTE *)&v228 + 8, (_WORD *)&v228 + 3);
      v134 = 0;
      sub_100043758(&v134);
      if (sub_100182784(a1 + 128, &v231, (_QWORD *)&v231 + 1)
        && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        sub_1006F23CC();
      }
      sub_10004339C(&v134);
      sub_100034188((uint64_t)v137);
      sub_10043FA40(a1, (_DWORD *)&v230[1] + 3);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      sub_10003415C((uint64_t)buf, a1);
      v37 = *(_WORD *)(a1 + 686);
      sub_100034234((uint64_t)buf);
      WORD5(v228) = v37;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      sub_10003415C((uint64_t)buf, a1);
      v38 = *(_WORD *)(a1 + 688);
      sub_100034234((uint64_t)buf);
      WORD6(v228) = v38;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      sub_10003415C((uint64_t)buf, a1);
      v39 = *(_WORD *)(a1 + 676);
      sub_100034234((uint64_t)buf);
      HIWORD(v228) = v39;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      sub_10003415C((uint64_t)buf, a1);
      v40 = *(_WORD *)(a1 + 668);
      sub_100034234((uint64_t)buf);
      LOWORD(v229) = v40;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      sub_10003415C((uint64_t)buf, a1);
      v41 = *(_WORD *)(a1 + 670);
      sub_100034234((uint64_t)buf);
      WORD1(v229) = v41;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      sub_10003415C((uint64_t)buf, a1);
      v42 = *(_WORD *)(a1 + 672);
      sub_100034234((uint64_t)buf);
      WORD2(v229) = v42;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      sub_10003415C((uint64_t)buf, a1);
      v43 = *(_WORD *)(a1 + 674);
      sub_100034234((uint64_t)buf);
      WORD3(v229) = v43;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      sub_10003415C((uint64_t)buf, a1);
      v44 = *(_WORD *)(a1 + 660);
      sub_100034234((uint64_t)buf);
      WORD4(v229) = v44;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      sub_10003415C((uint64_t)buf, a1);
      v45 = *(_WORD *)(a1 + 662);
      sub_100034234((uint64_t)buf);
      WORD5(v229) = v45;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      sub_10003415C((uint64_t)buf, a1);
      v46 = *(_WORD *)(a1 + 680);
      sub_100034234((uint64_t)buf);
      WORD6(v229) = v46;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      sub_10003415C((uint64_t)buf, a1);
      v47 = *(_WORD *)(a1 + 678);
      sub_100034234((uint64_t)buf);
      HIWORD(v229) = v47;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      sub_10003415C((uint64_t)buf, a1);
      v48 = *(_WORD *)(a1 + 682);
      sub_100034234((uint64_t)buf);
      LOWORD(v230[0]) = v48;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      sub_10003415C((uint64_t)buf, a1);
      v49 = *(_WORD *)(a1 + 684);
      sub_100034234((uint64_t)buf);
      WORD1(v230[0]) = v49;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      sub_10003415C((uint64_t)buf, a1);
      v50 = *(_WORD *)(a1 + 690);
      sub_100034234((uint64_t)buf);
      WORD2(v230[0]) = v50;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      sub_10003415C((uint64_t)buf, a1);
      v51 = *(_WORD *)(a1 + 692);
      sub_100034234((uint64_t)buf);
      WORD3(v230[0]) = v51;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      sub_10003415C((uint64_t)buf, a1);
      v52 = *(_DWORD *)(a1 + 696);
      sub_100034234((uint64_t)buf);
      DWORD2(v230[1]) = v52;
      v53 = *(_DWORD *)(a1 + 1064);
      if (*(_BYTE *)(a1 + 1060))
      {
        *(_QWORD *)((char *)v230 + 12) = *(_QWORD *)v4;
        v54 = *(_DWORD *)(a1 + 1076);
        DWORD2(v230[0]) = v53;
        DWORD1(v230[1]) = v54;
      }
      BYTE3(v228) = 0;
      if (v53 == 2)
      {
        v55 = 1452;
      }
      else
      {
        if (v53 != 1)
          goto LABEL_76;
        v55 = 76;
      }
      if (*v4 == v55)
      {
LABEL_83:
        if (HIDWORD(v230[1]))
        {
          if ((WORD6(v230[1]) & 0x400) != 0 && (BYTE12(v230[1]) & 0x28) != 0)
            HIDWORD(v230[1]) &= 0xFF001FFF;
          v59 = BYTE7(v233);
          if (SBYTE7(v233) < 0)
            v59 = DWORD2(v232);
          v60 = HIBYTE(v234);
          if (v234 < 0)
            v60 = v234;
          v61 = v59 + v60;
          v62 = BYTE7(v236);
          if (SBYTE7(v236) < 0)
            v62 = DWORD2(v235);
          v63 = v61 + v62 + 80;
          v64 = malloc_type_calloc(v63, 1uLL, 0x100004077774924uLL);
          *v64 = v228;
          v65 = v229;
          v66 = v230[0];
          v67 = v231;
          v64[3] = v230[1];
          v64[4] = v67;
          v64[1] = v65;
          v64[2] = v66;
          if ((SBYTE7(v233) & 0x80u) == 0)
            v68 = &v232;
          else
            v68 = (__int128 *)v232;
          if ((SBYTE7(v233) & 0x80u) == 0)
            v69 = BYTE7(v233);
          else
            v69 = *((_QWORD *)&v232 + 1);
          memcpy(v64 + 5, v68, v69);
          v70 = BYTE7(v233);
          if (SBYTE7(v233) < 0)
            v70 = DWORD2(v232);
          v71 = v70 + 80;
          if (v234 >= 0)
            v72 = (char *)&v233 + 8;
          else
            v72 = (char *)*((_QWORD *)&v233 + 1);
          if (v234 >= 0)
            v73 = HIBYTE(v234);
          else
            v73 = v234;
          memcpy((char *)v64 + (v70 + 80), v72, v73);
          v74 = HIBYTE(v234);
          if (v234 < 0)
            v74 = v234;
          if ((SBYTE7(v236) & 0x80u) == 0)
            v75 = &v235;
          else
            v75 = (__int128 *)v235;
          if ((SBYTE7(v236) & 0x80u) == 0)
            v76 = BYTE7(v236);
          else
            v76 = *((_QWORD *)&v235 + 1);
          memcpy((char *)v64 + (v74 + v71), v75, v76);
          CC_SHA1(v64, v63, (unsigned __int8 *)&v241[3]);
          v77 = sub_100027F68();
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 160))(v77) & 1) == 0)
          {
            v78 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "Identification - clearing friendly name due to release version", buf, 2u);
            }
            if (SBYTE7(v243) < 0)
            {
              *(_BYTE *)__p[0] = 0;
              __p[1] = 0;
            }
            else
            {
              LOBYTE(__p[0]) = 0;
              BYTE7(v243) = 0;
            }
          }
          v79 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109634;
            *(_DWORD *)&buf[4] = v63;
            *(_WORD *)&buf[8] = 1040;
            *(_DWORD *)&buf[10] = v63;
            *(_WORD *)&buf[14] = 2098;
            *(_QWORD *)&buf[16] = &v228;
            _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "Identification - raw serialized data dump of length %d {%{public}.*P}", buf, 0x18u);
            v79 = qword_1009997E8;
          }
          if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
          {
            if ((SBYTE7(v243) & 0x80u) == 0)
              v80 = __p;
            else
              v80 = (void **)__p[0];
            v81 = (__int128 *)v232;
            if ((SBYTE7(v233) & 0x80u) == 0)
              v81 = &v232;
            v82 = (char *)*((_QWORD *)&v236 + 1);
            if (v237 >= 0)
              v82 = (char *)&v236 + 8;
            v83 = (char *)&v233 + 8;
            if (v234 < 0)
              v83 = (char *)*((_QWORD *)&v233 + 1);
            v84 = &v235;
            if (SBYTE7(v236) < 0)
              v84 = (__int128 *)v235;
            v85 = &v238;
            if (SBYTE7(v239) < 0)
              v85 = (__int128 *)v238;
            v86 = (char *)&v239 + 8;
            if (v240 < 0)
              v86 = (char *)*((_QWORD *)&v239 + 1);
            *(_DWORD *)&buf[4] = 20;
            *(_DWORD *)&buf[20] = 3;
            v140 = &v228;
            v142 = v80;
            v144 = WORD2(v228);
            v146 = BYTE8(v228);
            v148 = WORD3(v228);
            *(_WORD *)&buf[18] = 1042;
            v149 = 1042;
            v153 = 1042;
            v150 = 8;
            v154 = 8;
            *(_WORD *)&buf[8] = 2098;
            v139 = 2098;
            v151 = 2098;
            v155 = 2098;
            v160 = WORD5(v228);
            v164 = HIWORD(v228);
            v168 = WORD1(v229);
            v172 = WORD3(v229);
            v176 = WORD5(v229);
            v180 = HIWORD(v229);
            v184 = WORD1(v230[0]);
            v188 = WORD3(v230[0]);
            v192 = HIDWORD(v230[0]);
            v196 = DWORD1(v230[1]);
            v200 = BYTE3(v228);
            v202 = v81;
            v204 = v82;
            v152 = &v231;
            v156 = (char *)&v231 + 8;
            v208 = v84;
            v210 = v85;
            v212 = v86;
            v216 = BYTE8(v243);
            v158 = HIDWORD(v230[1]);
            v162 = WORD6(v228);
            v166 = (unsigned __int16)v229;
            v170 = WORD2(v229);
            v174 = WORD4(v229);
            v178 = WORD6(v229);
            v182 = LOWORD(v230[0]);
            v186 = WORD2(v230[0]);
            v190 = DWORD2(v230[0]);
            v194 = v230[1];
            v198 = DWORD2(v230[1]);
            v206 = v83;
            v141 = 2082;
            v201 = 2082;
            v203 = 2082;
            v205 = 2082;
            v207 = 2082;
            v209 = 2082;
            v211 = 2082;
            v213 = 2082;
            v87 = (_QWORD *)v241[0];
            if (v241[2] >= 0)
              v87 = v241;
            v214 = v87;
            v143 = 1024;
            v145 = 1024;
            v147 = 1024;
            v157 = 1024;
            v159 = 1024;
            v161 = 1024;
            v163 = 1024;
            v165 = 1024;
            v167 = 1024;
            v169 = 1024;
            v171 = 1024;
            v173 = 1024;
            v175 = 1024;
            v177 = 1024;
            v179 = 1024;
            v181 = 1024;
            v183 = 1024;
            v185 = 1024;
            v187 = 1024;
            v189 = 1024;
            v191 = 1024;
            v193 = 1024;
            v195 = 1024;
            v197 = 1024;
            v199 = 1024;
            v215 = 1024;
            *(_DWORD *)buf = 68299266;
            *(_QWORD *)&buf[10] = &v241[3];
            _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "Identification - generating metric {%{public}.20P, %{public}.3P, %{public}s, 0x%x, 0x%x, 0x%x, %{public}.8P, %{public}.8P, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, %d, %{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %d}", buf, 0x12Eu);
          }
          free(v64);
          *(_OWORD *)(a1 + 700) = *(_OWORD *)&v241[3];
          *(_DWORD *)(a1 + 716) = v241[5];
          v88 = sub_10034D650();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v88 + 56))(v88, a1, a1 + 700))
          {
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
              sub_1006F23A0();
          }
          else
          {
            *(_BYTE *)(a1 + 740) = 1;
            v89 = sub_10034D650();
            if ((*(unsigned int (**)(uint64_t, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v89 + 88))(v89, a1, &v228, 80)&& os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
            {
              sub_1006F2374();
            }
            v90 = BYTE7(v233);
            if (SBYTE7(v233) < 0)
              v90 = *((_QWORD *)&v232 + 1);
            if (v90)
            {
              v91 = sub_10034D650();
              (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v91 + 104))(v91, a1, &v232);
            }
            v92 = HIBYTE(v237);
            if (v237 < 0)
              v92 = v237;
            if (v92)
            {
              v93 = sub_10034D650();
              (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v93 + 120))(v93, a1, (char *)&v236 + 8);
            }
            v94 = HIBYTE(v234);
            if (v234 < 0)
              v94 = v234;
            if (v94)
            {
              v95 = sub_10034D650();
              (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v95 + 136))(v95, a1, (char *)&v233 + 8);
            }
            v96 = BYTE7(v236);
            if (SBYTE7(v236) < 0)
              v96 = *((_QWORD *)&v235 + 1);
            if (v96)
            {
              v97 = sub_10034D650();
              (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v97 + 152))(v97, a1, &v235);
            }
            v98 = BYTE7(v239);
            if (SBYTE7(v239) < 0)
              v98 = *((_QWORD *)&v238 + 1);
            if (v98)
            {
              v99 = sub_10034D650();
              (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v99 + 168))(v99, a1, &v238);
            }
            v100 = HIBYTE(v240);
            if (v240 < 0)
              v100 = v240;
            if (v100)
            {
              v101 = sub_10034D650();
              (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v101 + 184))(v101, a1, (char *)&v239 + 8);
            }
            v102 = HIBYTE(v241[2]);
            if (v241[2] < 0)
              v102 = v241[1];
            if (v102)
            {
              v103 = sub_10034D650();
              (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v103 + 200))(v103, a1, v241);
            }
            v104 = sub_100027F68();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104)
              && (WORD1(v230[0]) || ((v105 = sub_10043FE60(a1), BYTE3(v228)) ? (v106 = 1) : (v106 = v105), v106 == 1)))
            {
              v107 = qword_1009997E8;
              if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
              {
                v108 = sub_100027F68();
                v109 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 8))(v108);
                v110 = WORD1(v230[0]);
                v111 = sub_10043FE60(a1);
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&buf[4] = v109;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v110;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&buf[16] = v111;
                _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, "Identification - routing friendly name: internal %d, hid %d, carkit %d", buf, 0x14u);
              }
            }
            else
            {
              v112 = qword_1009997E8;
              if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
              {
                v113 = sub_100027F68();
                v114 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
                v115 = WORD1(v230[0]);
                v116 = sub_10043FE60(a1);
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&buf[4] = v114;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v115;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&buf[16] = v116;
                _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEFAULT, "Identification - clearing friendly name: internal %d, hid %d, carkit %d", buf, 0x14u);
              }
              if (SBYTE7(v243) < 0)
              {
                *(_BYTE *)__p[0] = 0;
                __p[1] = 0;
              }
              else
              {
                LOBYTE(__p[0]) = 0;
                BYTE7(v243) = 0;
              }
            }
            sub_1004806E0((uint64_t)v135, SBYTE3(v228));
            sub_10048071C((uint64_t)v135, SWORD2(v228));
            sub_10048071C((uint64_t)v135, SWORD3(v228));
            sub_1004806E0((uint64_t)v135, SBYTE8(v228));
            sub_10048071C((uint64_t)v135, SWORD5(v228));
            sub_10048071C((uint64_t)v135, SWORD6(v228));
            sub_10048071C((uint64_t)v135, SHIWORD(v228));
            sub_10048071C((uint64_t)v135, v229);
            sub_10048071C((uint64_t)v135, SWORD1(v229));
            sub_10048071C((uint64_t)v135, SWORD2(v229));
            sub_10048071C((uint64_t)v135, SWORD3(v229));
            sub_10048071C((uint64_t)v135, SWORD4(v229));
            sub_10048071C((uint64_t)v135, SWORD5(v229));
            sub_10048071C((uint64_t)v135, SWORD6(v229));
            sub_10048071C((uint64_t)v135, SHIWORD(v229));
            sub_10048071C((uint64_t)v135, v230[0]);
            sub_10048071C((uint64_t)v135, SWORD1(v230[0]));
            sub_10048071C((uint64_t)v135, SWORD2(v230[0]));
            sub_10048071C((uint64_t)v135, SWORD3(v230[0]));
            sub_10048076C((uint64_t)v135, DWORD2(v230[0]));
            sub_10048076C((uint64_t)v135, HIDWORD(v230[0]));
            sub_10048076C((uint64_t)v135, DWORD2(v230[1]));
            sub_10048076C((uint64_t)v135, HIDWORD(v230[1]));
            sub_1004806C4((uint64_t)v135, (char *)&v231, 8);
            sub_1004806C4((uint64_t)v135, (char *)&v231 + 8, 8);
            if (v234 >= 0)
              v117 = (char *)&v233 + 8;
            else
              v117 = (char *)*((_QWORD *)&v233 + 1);
            if (v234 >= 0)
              v118 = HIBYTE(v234);
            else
              v118 = v234;
            sub_1004806C4((uint64_t)v135, v117, v118);
            sub_10003994C(buf, v135[1], v136 - (unint64_t)v135[1]);
            v119 = (const void *)sub_10003EB18((uint64_t)buf);
            sub_10003994C(&v217, v135[1], v136 - (unint64_t)v135[1]);
            v120 = sub_10003F8C4((uint64_t)&v217);
            CC_SHA1(v119, v120, (unsigned __int8 *)&v241[5] + 4);
            *(_QWORD *)&v217 = &off_100918258;
            if (*((_QWORD *)&v217 + 1))
              sub_100056AAC(*((unsigned int **)&v217 + 1));
            *(_QWORD *)buf = &off_100918258;
            if (*(_QWORD *)&buf[8])
              sub_100056AAC(*(unsigned int **)&buf[8]);
            v121 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 68289026;
              *(_DWORD *)&buf[4] = 20;
              *(_WORD *)&buf[8] = 2098;
              *(_QWORD *)&buf[10] = (char *)&v241[5] + 4;
              _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_DEFAULT, "Identification - Secondary hash {%{public}.20P}", buf, 0x12u);
              v121 = qword_1009997E8;
            }
            if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
            {
              sub_10003994C(&v217, v135[1], v136 - (unint64_t)v135[1]);
              v122 = sub_10003F8C4((uint64_t)&v217);
              sub_10003994C(&v132, v135[1], v136 - (unint64_t)v135[1]);
              v123 = sub_10003EB18((uint64_t)&v132);
              *(_DWORD *)buf = 68157954;
              *(_DWORD *)&buf[4] = v122;
              *(_WORD *)&buf[8] = 2098;
              *(_QWORD *)&buf[10] = v123;
              _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_DEFAULT, "Identification - Raw buffer to create secondary hash {%{public}.*P}", buf, 0x12u);
              v132 = &off_100918258;
              if (v133)
                sub_100056AAC(v133);
              *(_QWORD *)&v217 = &off_100918258;
              if (*((_QWORD *)&v217 + 1))
                sub_100056AAC(*((unsigned int **)&v217 + 1));
            }
            *(_OWORD *)(a1 + 720) = *(_OWORD *)((char *)&v241[5] + 4);
            *(_DWORD *)(a1 + 736) = HIDWORD(v241[7]);
            v124 = sub_10034D650();
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v124 + 72))(v124, a1, a1 + 720))
            {
              if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
                sub_1006F2348();
            }
            else
            {
              *(_BYTE *)(a1 + 741) = 1;
            }
            *(_BYTE *)(a1 + 742) = 1;
            if (sub_10043FEB0(a1, WORD2(v228))
              && (v125 = sub_100027F68(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125)))
            {
              v126 = qword_1009997E8;
              if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
              {
                sub_10043E5F8(a1, buf);
                v127 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
                LODWORD(v217) = 136446210;
                *(_QWORD *)((char *)&v217 + 4) = v127;
                _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEFAULT, "Identification - skipping Core Analytics metric upload for automation dongle %{public}s", (uint8_t *)&v217, 0xCu);
                if ((buf[23] & 0x80000000) != 0)
                  operator delete(*(void **)buf);
              }
            }
            else
            {
              v128 = qword_1009997E8;
              if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
              {
                sub_10043E5F8(a1, buf);
                v129 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
                LODWORD(v217) = 136446210;
                *(_QWORD *)((char *)&v217 + 4) = v129;
                _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_DEFAULT, "Identification - submitting Core Analytics metric upload for device %{public}s", (uint8_t *)&v217, 0xCu);
                if ((buf[23] & 0x80000000) != 0)
                  operator delete(*(void **)buf);
              }
              sub_100034264((uint64_t)v137);
              v130 = sub_100065478();
              (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v130 + 224))(v130, &v228);
            }
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        {
          sub_1006F231C();
        }
        sub_100043728(&v134);
        goto LABEL_228;
      }
LABEL_76:
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      sub_10003415C((uint64_t)buf, a1);
      v56 = *(_DWORD *)(a1 + 176);
      sub_100034234((uint64_t)buf);
      if (v56 == 22 || v56 == 17)
      {
        v57 = sub_1004419F4(a1, (uint64_t)&v219);
        if ((_BYTE)v224 && v57)
          std::string::operator=((std::string *)((char *)&v236 + 8), (const std::string *)((char *)&v224 + 8));
      }
      goto LABEL_83;
    }
LABEL_39:
    if (sub_1004456C8(a1))
    {
      LOWORD(v228) = -1;
      v21 = -1;
    }
    else
    {
      LOWORD(v228) = *(_WORD *)(a1 + 128);
      v21 = *(_BYTE *)(a1 + 130);
    }
    goto LABEL_42;
  }
  v14 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a1, &v217);
    v15 = v218;
    v16 = (__int128 *)v217;
    v17 = *(unsigned __int8 *)(a1 + 1361);
    v18 = *(unsigned __int8 *)(a1 + 1362);
    v19 = sub_10043E93C((unsigned __int8 *)a1);
    v20 = &v217;
    *(_DWORD *)buf = 136446978;
    if (v15 < 0)
      v20 = v16;
    *(_QWORD *)&buf[4] = v20;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v17;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v18;
    v139 = 1024;
    LODWORD(v140) = v19;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Identification - 3rd Party Device  %{public}s. Waiting until all criteria is met. Product Name Update:%d SDP Query Complete:%d Paired:%d", buf, 0x1Eu);
    if (v218 < 0)
    {
      v13 = (void *)v217;
      goto LABEL_35;
    }
  }
LABEL_228:
  if (SHIBYTE(v225[1]) < 0)
    operator delete(*((void **)&v224 + 1));
  if (SHIBYTE(v223) < 0)
    operator delete(*((void **)&v222 + 1));
  if (SHIBYTE(v221) < 0)
    operator delete(*((void **)&v220 + 1));
  nullsub_90((char *)&v219 + 1, v3);
  if (v135[1])
  {
    *(void **)&v136 = v135[1];
    operator delete(v135[1]);
  }
  sub_100393448((uint64_t)&v228);
  return sub_100034234((uint64_t)v137);
}

void sub_10044CAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  uint64_t v73;

  sub_100043728(&a23);
  sub_10026B73C((uint64_t)&a72, v73);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_100393448((uint64_t)&STACK[0x290]);
  sub_100034234((uint64_t)&a28);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10044CC00(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *result;
  unsigned __int8 *v6;
  int v8;

  result = (unsigned __int8 *)memchr(a1, *a3, a2 - (_BYTE *)a1);
  if (!result)
    result = a2;
  v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      v8 = *v6;
      if (v8 != *a3)
        *result++ = v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

uint64_t sub_10044CC64(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 652);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044CCA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 760))(v4, a1, a2);
  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  *(_BYTE *)(a1 + 652) = a2;
  return sub_100034234((uint64_t)v6);
}

uint64_t sub_10044CD04(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _QWORD v5[2];

  v2 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 272))(v2))
  {
    v5[0] = 0;
    v5[1] = 0;
    sub_10003415C((uint64_t)v5, a1);
    v3 = *(_DWORD *)(a1 + 176);
    sub_100034234((uint64_t)v5);
    if (v3 == 25 || (*(_BYTE *)(a1 + 777) & 1) != 0)
      return 1;
  }
  if (*(_BYTE *)(a1 + 1360))
    return 1;
  else
    return (*(unsigned __int8 *)(a1 + 776) >> 1) & 1;
}

void sub_10044CD80(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  int v4;
  uint64_t v6;
  int v7;
  NSObject *v8;
  _BOOL4 v9;
  const char *v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  void **v14;
  void *p_p;
  int v16;
  BOOL v17;
  _DWORD *v18;
  char v19;
  BOOL v20;
  BOOL v21;
  void *v22;
  _DWORD *v23;
  _BOOL4 v24;
  NSObject *v25;
  uint8_t v26[8];
  void *v27;
  void *v28;
  char *v29;
  void *__p;
  void *v31;
  uint64_t v32;
  uint8_t buf[24];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F78C(a1, (uint64_t)&__p);
    v3 = v32 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "HIDIdentification - Start identification for %s", buf, 0xCu);
    if (SHIBYTE(v32) < 0)
      operator delete(__p);
  }
  __p = 0;
  v31 = 0;
  sub_10003415C((uint64_t)&__p, a1);
  v4 = *(_DWORD *)(a1 + 176);
  sub_100034234((uint64_t)&__p);
  if (v4 == 25 || (*(_QWORD *)(a1 + 776) & 0x302) != 0)
  {
    if ((*(_QWORD *)(a1 + 776) & 2) != 0
      || (v6 = sub_10003BE44(), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 272))(v6) & 1) != 0))
    {
      v7 = 1;
      goto LABEL_14;
    }
    if ((*(_BYTE *)(a1 + 777) & 3) != 0)
    {
      v7 = 0;
      goto LABEL_14;
    }
    memset(buf, 0, 20);
    v16 = *(unsigned __int8 *)(a1 + 740);
    if (*(_BYTE *)(a1 + 740))
    {
      *(_DWORD *)&buf[16] = *(_DWORD *)(a1 + 716);
      *(_OWORD *)buf = *(_OWORD *)(a1 + 700);
    }
    if (*(char *)(a1 + 263) < 0)
    {
      if (*(_QWORD *)(a1 + 248))
        goto LABEL_42;
    }
    else if (*(_BYTE *)(a1 + 263))
    {
LABEL_42:
      __p = 0;
      v31 = 0;
      v32 = 0;
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_10092F540);
      v17 = v16 == 0;
      sub_100472E48((const void **)(a1 + 240), &__p);
      v18 = __p;
      v19 = __p == v31 || v17;
      if ((v19 & 1) == 0
        && (*(_QWORD *)__p == *(_QWORD *)buf ? (v20 = *((_QWORD *)__p + 1) == *(_QWORD *)&buf[8]) : (v20 = 0),
            v20 ? (v21 = *((unsigned int *)__p + 4) == (unint64_t)*(unsigned int *)&buf[16]) : (v21 = 0),
            v21))
      {
        *(_BYTE *)(a1 + 1360) = 1;
        v25 = qword_1009997E8;
        v7 = 0;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v26 = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "HIDIdentification - Device found in allowlist", v26, 2u);
          v7 = 0;
          v18 = __p;
        }
      }
      else
      {
        v7 = 2;
      }
      if (!v18)
      {
LABEL_14:
        if (_os_feature_enabled_impl("BluetoothFeatures", "RuleBasedHIDClassification"))
        {
          v8 = qword_1009997E8;
          v9 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
          if (v7 == 2)
          {
            if (v9)
            {
              LOWORD(__p) = 0;
              v10 = "HIDIdentification - Classic HID Device behavior is unknown. Wait for sniff param update";
              v11 = v8;
LABEL_20:
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&__p, 2u);
              return;
            }
          }
          else
          {
            if (v9)
            {
              sub_10043F78C(a1, (uint64_t)&__p);
              if (v32 >= 0)
                p_p = &__p;
              else
                p_p = __p;
              *(_DWORD *)buf = 67109378;
              *(_DWORD *)&buf[4] = v7;
              *(_WORD *)&buf[8] = 2080;
              *(_QWORD *)&buf[10] = p_p;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "HIDIdentification - Set classic HID device behavior : %u for %s", buf, 0x12u);
              if (SHIBYTE(v32) < 0)
                operator delete(__p);
            }
            sub_100445390(a1, v7);
          }
        }
        else
        {
          v13 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043F78C(a1, (uint64_t)&__p);
            v14 = v32 >= 0 ? &__p : (void **)__p;
            *(_DWORD *)buf = 67109378;
            *(_DWORD *)&buf[4] = v7;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = v14;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "HIDIdentification - Set classic HID device behavior : %u for %s", buf, 0x12u);
            if (SHIBYTE(v32) < 0)
              operator delete(__p);
          }
          sub_100445390(a1, v7);
        }
        return;
      }
      v31 = v18;
LABEL_68:
      operator delete(v18);
      goto LABEL_14;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F242C();
    v18 = operator new(0x14uLL);
    *(_OWORD *)v18 = *(_OWORD *)buf;
    v18[4] = *(_DWORD *)&buf[16];
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    v22 = off_1009778E0;
    v27 = 0;
    v23 = operator new(0x14uLL);
    v28 = v23 + 5;
    v29 = (char *)(v23 + 5);
    *(_OWORD *)v23 = *(_OWORD *)v18;
    v23[4] = v18[4];
    v27 = v23;
    v24 = sub_100473248((uint64_t)v22, (uint64_t)&v27);
    if (v27)
    {
      v28 = v27;
      operator delete(v27);
    }
    if (v24)
    {
      v7 = 0;
      *(_BYTE *)(a1 + 1360) = 1;
    }
    else
    {
      v7 = 2;
    }
    goto LABEL_68;
  }
  v12 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    v10 = "HIDIdentification - Not a mouse/TP. Wait for sniff param update";
    v11 = v12;
    goto LABEL_20;
  }
}

void sub_10044D264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_10044D298(uint64_t a1, int a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  NSObject *v7;
  void **v8;
  void *v9;
  void *v10;
  void *__p[2];
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  void **v16;

  v4 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 328))(v4) & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    v6 = sub_10003BE44();
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 336))(v6) ^ 1;
  }
  if (_os_feature_enabled_impl("BluetoothFeatures", "RuleBasedHIDClassification")
    && (v5 & 1) == 0
    && sub_10003EB18(a1 + 1000)
    && (sub_10044CD04(a1) & 1) == 0)
  {
    v7 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F78C(a1, (uint64_t)__p);
      if (v12 >= 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      *(_DWORD *)buf = 67109378;
      v14 = a2;
      v15 = 2080;
      v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "HIDIdentification - Update classic HID device behavior to %d for %s", buf, 0x12u);
      if (v12 < 0)
        operator delete(__p[0]);
    }
    sub_100445390(a1, a2);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDistributedNotificationCenter defaultCenter](NSDistributedNotificationCenter, "defaultCenter"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotification notificationWithName:object:](NSNotification, "notificationWithName:object:", CFSTR("com.apple.bluetooth.leHIDBehaviorKnown"), 0));
    objc_msgSend(v9, "postNotification:", v10);

  }
}

void sub_10044D438(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10044D45C(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v4 = *(_DWORD *)(a1 + 788);
  *(_DWORD *)(a1 + 788) = a2;
  v5 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 840))(v5, a1, *(unsigned int *)(a1 + 788));
  if (v4 != a2)
  {
    sub_100034264((uint64_t)v7);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 11);
  }
  return sub_100034234((uint64_t)v7);
}

void sub_10044D510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_10044D524(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  char v10;
  _QWORD v11[2];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  void **v15;

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1);
  v4 = *(_DWORD *)(a1 + 800);
  *(_DWORD *)(a1 + 800) = a2;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a1, __p);
    v6 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    v13 = a2;
    v14 = 2082;
    v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Smart Route enabled setting is set to %d for Device %{public}s", buf, 0x12u);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  v7 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 888))(v7, a1, a2);
  if (v4 != (_DWORD)a2)
  {
    sub_100034264((uint64_t)v11);
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_10092F660);
    sub_100279E6C((uint64_t)off_100977A80, a1, 32, a2, 1u);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 7);
  }
  sub_100034234((uint64_t)v11);
  return v4 != (_DWORD)a2;
}

void sub_10044D6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10044D708(uint64_t a1)
{
  int v2;
  int v3;
  NSObject *v4;
  void **v5;
  const char *v6;
  const char *v7;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  void **v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092F540);
  v2 = *((unsigned __int8 *)off_1009778E0 + 304);
  v3 = *(_DWORD *)(a1 + 1092);
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    sub_10043E5F8(a1, __p);
    if (v10 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    v6 = "No";
    if (v2)
      v7 = "Yes";
    else
      v7 = "No";
    *(_DWORD *)buf = 136446722;
    v12 = v5;
    v13 = 2080;
    if ((v3 & 1) != 0)
      v6 = "Yes";
    v14 = v7;
    v15 = 2080;
    v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Smart Route Support: Device: %{public}s, SRDaemon Support: %s, Device Support: %s", buf, 0x20u);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  return (v2 != 0) & v3;
}

BOOL sub_10044D860(uint64_t a1)
{
  return *(_BYTE *)(a1 + 1061) && (*(_BYTE *)(a1 + 1094) & 0x10) != 0 && *(_DWORD *)(a1 + 1072) != 8212;
}

void sub_10044D88C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  void **v4;
  int v5;
  void **v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;
  __int16 v11;
  int v12;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
  {
    sub_10043F6EC(a1, (uint64_t)__p);
    v3 = v8;
    v4 = (void **)__p[0];
    v5 = sub_10044D708(a1);
    v6 = __p;
    if (v3 < 0)
      v6 = v4;
    *(_DWORD *)buf = 136446466;
    v10 = v6;
    v11 = 1024;
    v12 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Smart Route Supported was updated by SR daemon, updating device: “%{public}s” (state = %d)", buf, 0x12u);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092F540);
  sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 17);
}

void sub_10044D9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10044D9DC(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  char v10;
  _QWORD v11[2];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  void **v15;

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1);
  v4 = *(_DWORD *)(a1 + 804);
  *(_DWORD *)(a1 + 804) = a2;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a1, __p);
    v6 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    v13 = a2;
    v14 = 2082;
    v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Spatial Audio Allowed is set to %d for Device %{public}s", buf, 0x12u);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  v7 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 912))(v7, a1, a2);
  if (v4 != (_DWORD)a2)
  {
    sub_100034264((uint64_t)v11);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 12);
  }
  return sub_100034234((uint64_t)v11);
}

void sub_10044DB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10044DB70(uint64_t a1, int a2, int a3)
{
  int v6;
  NSObject *v7;
  void **v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  _QWORD v13[2];
  uint8_t buf[4];
  int v15;
  __int16 v16;
  void **v17;

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1);
  v6 = *(unsigned __int8 *)(a1 + 796);
  *(_BYTE *)(a1 + 796) = a2;
  v7 = qword_1009997E8;
  if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT)
    || ((sub_10043E5F8(a1, __p), v12 >= 0) ? (v8 = __p) : (v8 = (void **)__p[0]),
        *(_DWORD *)buf = 67109378,
        v15 = a2,
        v16 = 2082,
        v17 = v8,
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "IED enabled setting is set to %d for Device %{public}s", buf, 0x12u), (v12 & 0x80000000) == 0))
  {
    if (!a3)
      goto LABEL_8;
    goto LABEL_7;
  }
  operator delete(__p[0]);
  if (a3)
  {
LABEL_7:
    v9 = sub_10034D650();
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 872))(v9, a1, *(unsigned __int8 *)(a1 + 796));
  }
LABEL_8:
  if (v6 != a2)
  {
    sub_100034264((uint64_t)v13);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 9);
  }
  return sub_100034234((uint64_t)v13);
}

void sub_10044DCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10044DD14(uint64_t a1, int a2)
{
  int v4;
  NSObject *v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  char v10;
  _QWORD v11[2];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  void **v15;

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1);
  v4 = *(_DWORD *)(a1 + 808);
  *(_DWORD *)(a1 + 808) = a2;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a1, __p);
    v6 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    v13 = a2;
    v14 = 2082;
    v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Listening Mode is set to %d for Device %{public}s", buf, 0x12u);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  v7 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 928))(v7, a1, *(unsigned int *)(a1 + 808));
  if (v4 != a2)
  {
    sub_100034264((uint64_t)v11);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 15);
  }
  return sub_100034234((uint64_t)v11);
}

void sub_10044DE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10044DEA8(uint64_t a1, int a2)
{
  int v4;
  NSObject *v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  char v10;
  _QWORD v11[2];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  void **v15;

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1);
  v4 = *(_DWORD *)(a1 + 812);
  *(_DWORD *)(a1 + 812) = a2;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a1, __p);
    v6 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    v13 = a2;
    v14 = 2082;
    v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Listening Mode Configs is set to %d for Device %{public}s", buf, 0x12u);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  v7 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 992))(v7, a1, *(unsigned int *)(a1 + 812));
  if (v4 != a2)
  {
    sub_100034264((uint64_t)v11);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 15);
  }
  return sub_100034234((uint64_t)v11);
}

void sub_10044E01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10044E03C(uint64_t a1, char a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 816) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_10044E080(uint64_t a1, char a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 817) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_10044E0C4(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 820) = a2;
  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 1008))(v4, a1, *(unsigned int *)(a1 + 820));
  return sub_100034234((uint64_t)v6);
}

void sub_10044E120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044E134(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 824) = a2;
  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 1024))(v4, a1, *(unsigned int *)(a1 + 824));
  return sub_100034234((uint64_t)v6);
}

void sub_10044E190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044E1A4(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v4 = *(_DWORD *)(a1 + 828);
  *(_DWORD *)(a1 + 828) = a2;
  v5 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 1040))(v5, a1, *(unsigned int *)(a1 + 828));
  if (v4 != a2)
  {
    sub_100034264((uint64_t)v7);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 16);
  }
  return sub_100034234((uint64_t)v7);
}

void sub_10044E258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044E26C(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 832) = a2;
  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 1056))(v4, a1, *(unsigned int *)(a1 + 832));
  return sub_100034234((uint64_t)v6);
}

void sub_10044E2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044E2DC(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 836) = a2;
  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 1072))(v4, a1, *(unsigned int *)(a1 + 836));
  return sub_100034234((uint64_t)v6);
}

void sub_10044E338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044E34C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  *(_BYTE *)(a1 + 840) = a2;
  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 1088))(v4, a1, a2);
  return sub_100034234((uint64_t)v6);
}

void sub_10044E3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044E3BC(uint64_t a1, char a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 841) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_10044E400(uint64_t a1, char a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 842) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_10044E444(uint64_t a1, int a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_DWORD *)(a1 + 844) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_10044E488(uint64_t a1, char a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 848) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_10044E4CC(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  *(_BYTE *)(a1 + 856) = a2;
  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 1104))(v4, a1, *(unsigned __int8 *)(a1 + 856));
  return sub_100034234((uint64_t)v6);
}

void sub_10044E528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044E53C(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 860) = a2;
  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 1120))(v4, a1, *(unsigned int *)(a1 + 860));
  return sub_100034234((uint64_t)v6);
}

void sub_10044E598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044E5AC(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v4 = *(unsigned __int8 *)(a1 + 868);
  *(_BYTE *)(a1 + 868) = a2;
  v5 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 1168))(v5, a1, *(unsigned __int8 *)(a1 + 868));
  if (v4 != a2)
  {
    sub_100034264((uint64_t)v7);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 15);
  }
  return sub_100034234((uint64_t)v7);
}

void sub_10044E660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044E674(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v4 = *(_DWORD *)(a1 + 864);
  *(_DWORD *)(a1 + 864) = a2;
  if (v4 != a2)
  {
    sub_100034264((uint64_t)v7);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 15);
  }
  v5 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 1136))(v5, a1, *(unsigned int *)(a1 + 864));
  return sub_100034234((uint64_t)v7);
}

void sub_10044E720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044E734(uint64_t a1, int a2)
{
  int v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  v4 = *(_DWORD *)(a1 + 872);
  *(_DWORD *)(a1 + 872) = a2;
  if (v4 != a2)
  {
    sub_100034264((uint64_t)v6);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 15);
  }
  return sub_100034234((uint64_t)v6);
}

void sub_10044E7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044E7DC(uint64_t a1, int a2)
{
  int v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  v4 = *(_DWORD *)(a1 + 876);
  *(_DWORD *)(a1 + 876) = a2;
  if (v4 != a2)
  {
    sub_100034264((uint64_t)v6);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 15);
  }
  return sub_100034234((uint64_t)v6);
}

void sub_10044E870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044E884(uint64_t a1, int a2)
{
  int v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  v4 = *(_DWORD *)(a1 + 880);
  *(_DWORD *)(a1 + 880) = a2;
  if (v4 != a2)
  {
    sub_100034264((uint64_t)v6);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 15);
  }
  return sub_100034234((uint64_t)v6);
}

void sub_10044E918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044E92C(uint64_t a1, int a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_DWORD *)(a1 + 892) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_10044E970(uint64_t a1, int a2)
{
  int v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  v4 = *(_DWORD *)(a1 + 884);
  *(_DWORD *)(a1 + 884) = a2;
  if (v4 != a2)
  {
    sub_100034264((uint64_t)v6);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 15);
  }
  return sub_100034234((uint64_t)v6);
}

void sub_10044EA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044EA18(uint64_t a1, int a2)
{
  int v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  v4 = *(_DWORD *)(a1 + 888);
  *(_DWORD *)(a1 + 888) = a2;
  if (v4 != a2)
  {
    sub_100034264((uint64_t)v6);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 15);
  }
  return sub_100034234((uint64_t)v6);
}

void sub_10044EAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044EAC0(uint64_t a1, int a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  if (*(_DWORD *)(a1 + 896) != a2)
  {
    *(_DWORD *)(a1 + 896) = a2;
    sub_100034264((uint64_t)v5);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 15);
  }
  return sub_100034234((uint64_t)v5);
}

void sub_10044EB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044EB68(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  *(_BYTE *)(a1 + 952) = a2;
  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 1224))(v4, a1, *(unsigned __int8 *)(a1 + 952));
  return sub_100034234((uint64_t)v6);
}

void sub_10044EBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044EBD8(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  *(_BYTE *)(a1 + 968) = a2;
  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 1240))(v4, a1, *(unsigned __int8 *)(a1 + 968));
  return sub_100034234((uint64_t)v6);
}

void sub_10044EC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044EC48(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  *(_BYTE *)(a1 + 977) = a2;
  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 1272))(v4, a1, *(unsigned __int8 *)(a1 + 977));
  return sub_100034234((uint64_t)v6);
}

void sub_10044ECA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044ECB8(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 956);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044ECFC(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 956) = *a2;
  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 1264))(v4, a1, a1 + 956);
  return sub_100034234((uint64_t)v6);
}

void sub_10044ED5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044ED70(unsigned __int8 *a1, int a2)
{
  int v4;
  int v5;
  NSObject *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  _QWORD v12[2];
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, (uint64_t)a1);
  v4 = a1[981];
  if (a1[981])
    v5 = a2;
  else
    v5 = 1;
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = "On";
    if (v4)
      v8 = "On";
    else
      v8 = "Off";
    if (!a2)
      v7 = "Off";
    *(_DWORD *)buf = 136315650;
    v14 = v8;
    v15 = 2080;
    v16 = v7;
    if (v5)
      v9 = "No";
    else
      v9 = "Yes";
    v17 = 2080;
    v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Guest Pairing: Changing Mode %s -> %s, trigger Magic Pairing: %s", buf, 0x20u);
  }
  a1[981] = a2;
  v10 = sub_10034D650();
  (*(void (**)(uint64_t, unsigned __int8 *, _QWORD))(*(_QWORD *)v10 + 1304))(v10, a1, a1[981]);
  if ((v5 & 1) == 0)
  {
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_10092F660);
    sub_1002830C8((uint64_t)off_100977A80, a1);
  }
  return sub_100034234((uint64_t)v12);
}

void sub_10044EEEC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10044EF08(uint64_t a1, int a2)
{
  int v4;
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v9;
  _QWORD v10[2];
  uint8_t buf[4];
  void **v12;
  __int16 v13;
  int v14;

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1);
  v4 = *(unsigned __int8 *)(a1 + 982);
  *(_BYTE *)(a1 + 982) = a2;
  if (v4 != a2)
  {
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a1, __p);
      v6 = v9 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v12 = v6;
      v13 = 1024;
      v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Ownership changed: device %{public}s, state %d", buf, 0x12u);
      if (v9 < 0)
        operator delete(__p[0]);
    }
    sub_100034264((uint64_t)v10);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 8);
  }
  return sub_100034234((uint64_t)v10);
}

void sub_10044F05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10044F07C(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void *v10[3];
  void *__p;
  void *v12;
  char *v13;
  _QWORD v14[2];

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1);
  *(_QWORD *)(a1 + 912) = *(_QWORD *)(a1 + 904);
  *(_QWORD *)(a1 + 936) = *(_QWORD *)(a1 + 928);
  *(_BYTE *)(a1 + 1426) = 0;
  v2 = sub_10034D650();
  __p = 0;
  v12 = 0;
  v13 = 0;
  v3 = *(_BYTE **)(a1 + 904);
  v4 = *(_BYTE **)(a1 + 912);
  v5 = v4 - v3;
  if (v4 != v3)
  {
    if (v4 - v3 < 0)
      abort();
    v6 = (char *)operator new(v4 - v3);
    v7 = &v6[v5];
    __p = v6;
    v13 = &v6[v5];
    memmove(v6, v3, v5);
    v12 = v7;
  }
  (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v2 + 1184))(v2, a1, &__p);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  v8 = sub_10034D650();
  sub_1002D70C0(v10, a1 + 928);
  (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v8 + 1200))(v8, a1, v10);
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
  return sub_100034234((uint64_t)v14);
}

void sub_10044F190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10044F1D0(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1);
  *(_BYTE *)(a1 + 1426) = 1;
  return sub_100034234((uint64_t)v3);
}

uint64_t sub_10044F214(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 1426);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044F258(uint64_t a1, int a2, int a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  char v11;
  NSObject *v12;
  void **v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  size_t v17;
  char *v18;
  char *v19;
  void *v21;
  void *v22;
  char *v23;
  void *__p[2];
  char v25;
  _QWORD v26[2];
  uint8_t buf[4];
  void **v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;

  v26[0] = 0;
  v26[1] = 0;
  sub_10003415C((uint64_t)v26, a1);
  if (a2 >= 0)
    v6 = a2;
  else
    v6 = (a2 + 7);
  v7 = *(_QWORD *)(a1 + 904);
  v8 = *(_QWORD *)(a1 + 912) - v7;
  v9 = (unsigned __int16)(v6 >> 3);
  if (v8 <= (unsigned __int16)(v6 >> 3))
  {
    buf[0] = 0;
    sub_10033F348((_QWORD *)(a1 + 904), (v9 + 1) - v8, buf);
    v7 = *(_QWORD *)(a1 + 904);
  }
  v10 = *(unsigned __int8 *)(v7 + v9);
  v11 = a2 - (v6 & 0xF8);
  if (((1 << v11) & v10) == a3 << v11)
  {
    if (v8 > v9)
      return sub_100034234((uint64_t)v26);
  }
  else
  {
    *(_BYTE *)(v7 + v9) = v10 ^ (1 << v11);
  }
  v12 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a1, __p);
    v13 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446722;
    v28 = v13;
    v29 = 1024;
    v30 = a2;
    v31 = 1024;
    v32 = a3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "setAACPCapabilityBit: Writing device %{public}s, bit %d, value %d", buf, 0x18u);
    if (v25 < 0)
      operator delete(__p[0]);
  }
  v14 = sub_10034D650();
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v15 = *(_BYTE **)(a1 + 904);
  v16 = *(_BYTE **)(a1 + 912);
  v17 = v16 - v15;
  if (v16 != v15)
  {
    if (v16 - v15 < 0)
      abort();
    v18 = (char *)operator new(v16 - v15);
    v19 = &v18[v17];
    v21 = v18;
    v23 = &v18[v17];
    memmove(v18, v15, v17);
    v22 = v19;
  }
  (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v14 + 1184))(v14, a1, &v21);
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  return sub_100034234((uint64_t)v26);
}

void sub_10044F46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10044F4A8(uint64_t result, unsigned int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  void *__p[3];
  int v10;
  _QWORD v11[2];

  if (a2 <= 0xFF)
  {
    v5 = result;
    v11[0] = 0;
    v11[1] = 0;
    sub_10003415C((uint64_t)v11, result);
    v6 = *(_QWORD *)(v5 + 928);
    if (a2 >= (unint64_t)((*(_QWORD *)(v5 + 936) - v6) >> 2))
    {
      if (!a3)
        return sub_100034234((uint64_t)v11);
      v10 = 0;
      sub_10033D8D8(v5 + 928, a2 + 1, &v10);
      v7 = (_DWORD *)(*(_QWORD *)(v5 + 928) + 4 * a2);
      if (*v7 == a3)
      {
LABEL_8:
        v8 = sub_10034D650();
        sub_1002D70C0(__p, v5 + 928);
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v8 + 1200))(v8, v5, __p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        return sub_100034234((uint64_t)v11);
      }
    }
    else
    {
      v7 = (_DWORD *)(v6 + 4 * a2);
      if (*v7 == a3)
        return sub_100034234((uint64_t)v11);
    }
    *v7 = a3;
    goto LABEL_8;
  }
  return result;
}

void sub_10044F5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10044F5D0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 788);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044F614(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 796);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044F658(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  if ((sub_10044D708(a1) & 1) != 0)
    v2 = *(unsigned int *)(a1 + 800);
  else
    v2 = 2;
  sub_100034234((uint64_t)v4);
  return v2;
}

void sub_10044F6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044F6C4(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 804);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044F708(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 808);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044F74C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 812);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044F790(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 816);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044F7D4(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 817);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044F818(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 820);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044F85C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 824);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044F8A0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 828);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044F8E4(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 832);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044F928(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 836);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044F96C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 840);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044F9B0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 841);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044F9F4(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 842);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044FA38(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 844);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044FA7C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 856);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044FAC0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 860);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044FB04(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 864);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044FB48(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 868);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044FB8C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 872);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044FBD0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 876);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044FC14(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 880);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044FC58(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 884);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044FC9C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 888);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044FCE0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 892);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044FD24(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 896);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044FD68(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 982);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044FDAC(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int16 *)(a1 + 1496);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044FDF0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 848);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10044FE34(uint64_t a1, int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1);
  LODWORD(v4) = a2 + 7;
  if (a2 >= 0)
    v4 = a2;
  else
    v4 = v4;
  v5 = *(_QWORD *)(a1 + 904);
  if (*(_QWORD *)(a1 + 912) - v5 <= (unint64_t)(unsigned __int16)(v4 >> 3))
    v6 = 0;
  else
    v6 = (*(unsigned __int8 *)(v5 + (unsigned __int16)(v4 >> 3)) >> (a2 & 7)) & 1;
  sub_100034234((uint64_t)v8);
  return v6;
}

uint64_t sub_10044FEB8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_BYTE **)(a1 + 904);
  v5 = *(_BYTE **)(a1 + 912);
  v6 = v5 - v4;
  if (v5 != v4)
  {
    sub_1002A367C(a2, v5 - v4);
    v7 = (char *)a2[1];
    memmove(v7, v4, v6);
    a2[1] = &v7[v6];
  }
  return sub_100034234((uint64_t)v9);
}

void sub_10044FF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10044FF54(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v4 = *(_QWORD *)(a1 + 928);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 936) - v4) >> 2))
    v5 = 0;
  else
    v5 = *(unsigned int *)(v4 + 4 * a2);
  sub_100034234((uint64_t)v7);
  return v5;
}

id sub_10044FFBC(uint64_t a1, void *a2, uint64_t **a3)
{
  id v5;
  uint64_t *v6;
  uint64_t *v7;
  _BYTE *v8;
  void *v9;
  NSObject *v10;
  signed int v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  id v19;
  void *v21;
  int v22;
  _BYTE __p[12];
  __int16 v24;
  id v25;
  char v26;

  v5 = a2;
  v7 = *a3;
  v6 = a3[1];
  if (*a3 == v6)
    goto LABEL_26;
  v22 = 0;
  do
  {
    if (*v7 != a1)
    {
      sub_10043F6EC(*v7, (uint64_t)__p);
      if (v26 >= 0)
        v8 = __p;
      else
        v8 = *(_BYTE **)__p;
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v8, 4));
      if (v26 < 0)
        operator delete(*(void **)__p);
      v10 = qword_100999870;
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__p = 138412546;
        *(_QWORD *)&__p[4] = v9;
        v24 = 2112;
        v25 = v5;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device Name: %@, Localized Name: %@", __p, 0x16u);
      }
      if (objc_msgSend(v9, "length") && objc_msgSend(v9, "hasPrefix:", v5))
      {
        if ((objc_msgSend(v5, "isEqualToString:", v9) & 1) != 0)
        {
          v11 = 1;
        }
        else
        {
          v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("^%@ #\\d*$"), v5));
          v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSRegularExpression regularExpressionWithPattern:options:error:](NSRegularExpression, "regularExpressionWithPattern:options:error:"));
          if (objc_msgSend(v12, "numberOfMatchesInString:options:range:", v9, 0, 0, objc_msgSend(v9, "length")) == (id)1)
          {
            v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet decimalDigitCharacterSet](NSCharacterSet, "decimalDigitCharacterSet"));
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "invertedSet"));
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "componentsSeparatedByCharactersInSet:", v14));
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "componentsJoinedByString:", &stru_100941758));

            v11 = objc_msgSend(v16, "intValue");
          }
          else
          {
            v11 = 0;
          }

        }
        v17 = v22;
        if (v11 > v22)
          v17 = v11;
        v22 = v17;
      }

      v6 = a3[1];
    }
    ++v7;
  }
  while (v7 != v6);
  if (v22 <= 0)
  {
LABEL_26:
    v19 = v5;
  }
  else
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR(" #%d"), (v22 + 1)));
    v19 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stringByAppendingString:", v18));

  }
  return v19;
}

void sub_100450294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_100450334(uint64_t a1)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  BOOL v5;
  std::string::size_type size;
  NSObject *v7;
  void *v8;
  std::string *v9;
  __CFString *v10;
  void *v11;
  __CFString *v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *p_p;
  uint64_t v21;
  NSObject *v22;
  id v23;
  void *v24;
  id v25;
  NSObject *v26;
  NSObject *v27;
  void *v28;
  int64_t v29;
  char *v30;
  id v31;
  void *v32;
  NSObject *v33;
  uint8_t *v34;
  NSObject *v35;
  uint64_t v36;
  id v37;
  id v38;
  id v39;
  void *v40;
  void *__dst;
  uint64_t v42;
  id v43;
  void *__p;
  uint64_t v45;
  uint64_t v46;
  std::string v47;
  void *v48;
  _BYTE *v49;
  uint64_t v50;
  _BYTE v51[12];
  uint8_t buf[24];

  if (*(_DWORD *)(a1 + 1068) != 76
    || ((v2 = *(_DWORD *)(a1 + 1072) - 8194, v3 = v2 > 0x1D, v4 = (1 << v2) & 0x20037F9B, !v3)
      ? (v5 = v4 == 0)
      : (v5 = 1),
        v5))
  {
    if (!*(_BYTE *)(a1 + 1061) || (*(_BYTE *)(a1 + 1081) & 0x10) == 0 && (*(_BYTE *)(a1 + 1093) & 2) == 0)
      return;
  }
  v48 = 0;
  v49 = 0;
  v50 = 0;
  memset(&v47, 0, sizeof(v47));
  sub_10043F6EC(a1, (uint64_t)&v47);
  if (!std::string::compare(&v47, "AirPods"))
  {
    v13 = sub_100355F10(CFSTR("AIRPODS"), CFSTR("Headsets"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v14));
LABEL_41:
    v10 = (__CFString *)v15;

    goto LABEL_42;
  }
  if (!std::string::compare(&v47, "Powerbeats³"))
  {
    v16 = sub_100355F10(CFSTR("POWERBEATS3"), CFSTR("Headsets"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(v16);
    v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v14));
    goto LABEL_41;
  }
  if (!std::string::compare(&v47, "Beats Solo³"))
  {
    v18 = sub_100355F10(CFSTR("SOLO3"), CFSTR("Headsets"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v14));
    goto LABEL_41;
  }
  if (!std::string::compare(&v47, "Beatsˣ") || !std::string::compare(&v47, "BeatsX"))
  {
    v17 = sub_100355F10(CFSTR("BEATSX"), CFSTR("Headsets"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(v17);
    v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v14));
    goto LABEL_41;
  }
  if (!std::string::compare(&v47, "Beats Studio³"))
  {
    v37 = sub_100355F10(CFSTR("BEATSSTUDIO3"), CFSTR("Headsets"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(v37);
    v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v14));
    goto LABEL_41;
  }
  if (!std::string::compare(&v47, "Beats Studio Pro"))
  {
    v10 = CFSTR("Beats Studio Pro");
    goto LABEL_42;
  }
  if (!std::string::compare(&v47, "Powerbeats Pro"))
  {
    v38 = sub_100355F10(CFSTR("POWERBEATSPRO"), CFSTR("Headsets"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(v38);
    v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v14));
    goto LABEL_41;
  }
  if (!std::string::compare(&v47, "Solo Pro"))
  {
    v39 = sub_100355F30(CFSTR("SOLOPRO"), CFSTR("Headsets"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(v39);
    v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v14));
    goto LABEL_41;
  }
  if (!std::string::compare(&v47, "AirPods Pro"))
  {
    v10 = CFSTR("AirPods Pro");
    goto LABEL_42;
  }
  if (!std::string::compare(&v47, "AirPods Max"))
  {
    v10 = CFSTR("AirPods Max");
    goto LABEL_42;
  }
  if (!std::string::compare(&v47, "Beats Studio Buds"))
  {
    v10 = CFSTR("Beats Studio Buds");
    goto LABEL_42;
  }
  if (!std::string::compare(&v47, "Beats Studio Buds +"))
  {
    v10 = CFSTR("Beats Studio Buds +");
LABEL_42:
    if (!sub_10034FB08())
    {
      sub_100450D44(a1);
      goto LABEL_47;
    }
    __p = 0;
    v45 = 0;
    v46 = 0;
    v19 = sub_10034FB08();
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v19 + 112))(&__p);
    if (SHIBYTE(v46) < 0)
    {
      if (v45)
      {
        p_p = __p;
        goto LABEL_50;
      }
    }
    else if (HIBYTE(v46))
    {
      p_p = &__p;
LABEL_50:
      v21 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p));
      v22 = qword_100999870;
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v21;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v10;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Name prefix: %@, Device type: %@", buf, 0x16u);
      }
      v23 = sub_100355F10(CFSTR("APPLE_AUDIO_DEVICE_NAME"), v10);
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      v43 = 0;
      v12 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithValidatedFormat:validFormatSpecifiers:error:](NSString, "stringWithValidatedFormat:validFormatSpecifiers:error:", v24, CFSTR("%@%@"), &v43, v21, v10));
      v25 = v43;

      if (!v12)
      {
        v35 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006F2458((uint64_t)v25, v35, v36);
        v12 = 0;
        v11 = (void *)v21;
        goto LABEL_74;
      }

      v11 = (void *)v21;
LABEL_57:
      v27 = qword_100999870;
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Localized name: %@", buf, 0xCu);
      }
      if (qword_100978150 != -1)
        dispatch_once(&qword_100978150, &stru_10092F6C0);
      sub_10006CA88((uint64_t)off_100978148, (uint64_t **)&v48);
      v40 = 0;
      __dst = 0;
      v42 = 0;
      v28 = v48;
      v29 = v49 - (_BYTE *)v48;
      if (v49 != v48)
      {
        sub_1002A3F78(&v40, v29 >> 3);
        v30 = (char *)__dst;
        memmove(__dst, v28, v29);
        __dst = &v30[8 * (v29 >> 3)];
      }
      v31 = sub_10044FFBC(a1, v12, (uint64_t **)&v40);
      v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
      if (v40)
      {
        __dst = v40;
        operator delete(v40);
      }
      memset(buf, 0, sizeof(buf));
      v25 = objc_retainAutorelease(v32);
      sub_100091AE8(buf, (char *)objc_msgSend(v25, "UTF8String"));
      v33 = qword_100999870;
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
      {
        v34 = buf;
        if ((buf[23] & 0x80u) != 0)
          v34 = *(uint8_t **)buf;
        *(_DWORD *)v51 = 136315138;
        *(_QWORD *)&v51[4] = v34;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Renaming device to: %s", v51, 0xCu);
      }
      sub_100440D9C(a1, (uint64_t)buf, 1);
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
LABEL_74:

      if (SHIBYTE(v46) < 0)
        operator delete(__p);
      goto LABEL_76;
    }
    v26 = qword_100999870;
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "No name prefix", buf, 2u);
    }
    v12 = v10;
    v11 = 0;
    goto LABEL_57;
  }
  size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v47.__r_.__value_.__l.__size_;
  if (size)
  {
    v7 = qword_100999870;
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a1, &__p);
      if (v46 >= 0)
        v8 = &__p;
      else
        v8 = __p;
      v9 = &v47;
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v9 = (std::string *)v47.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Set user-defined name for Apple Audio Device: %s to: %s", buf, 0x16u);
      if (SHIBYTE(v46) < 0)
        operator delete(__p);
    }
    sub_100091AE8(&__p, "");
    *(_QWORD *)v51 = 0;
    sub_10004AD30((uint64_t)v51);
    *(_QWORD *)buf = *(int *)v51;
    *(_QWORD *)&buf[8] = *(__int16 *)&v51[4];
    sub_10044054C(a1, (uint64_t)&__p, buf);
    if (SHIBYTE(v46) < 0)
      operator delete(__p);
    v10 = 0;
    sub_100440D9C(a1, (uint64_t)&v47, 0);
    v11 = 0;
    v12 = 0;
    goto LABEL_76;
  }
  v10 = 0;
LABEL_47:
  v11 = 0;
  v12 = 0;
LABEL_76:
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }

}

void sub_100450BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29)
{
  if (a27 < 0)
    operator delete(__p);
  if (a28)
    operator delete(a28);

  _Unwind_Resume(a1);
}

void sub_100450D44(uint64_t a1)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  void *v11[2];
  char v12;

  sub_10043F898(a1, (uint64_t)v11);
  if (v12 < 0)
  {
    if (v11[1])
    {
      operator delete(v11[0]);
      return;
    }
  }
  else if (v12)
  {
    return;
  }
  if (*(_DWORD *)(a1 + 1068) == 76
    && ((v2 = *(_DWORD *)(a1 + 1072) - 8194, v3 = v2 > 0x1D, v4 = (1 << v2) & 0x20037F9B, !v3)
      ? (v5 = v4 == 0)
      : (v5 = 1),
        !v5)
    || *(_BYTE *)(a1 + 1061) && ((*(_BYTE *)(a1 + 1081) & 0x10) != 0 || (*(_BYTE *)(a1 + 1093) & 2) != 0))
  {
    if (v12 < 0)
      operator delete(v11[0]);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 776);
    if (v12 < 0)
    {
      operator delete(v11[0]);
      if ((v6 & 1) == 0)
        return;
    }
    else if ((v6 & 1) == 0)
    {
      return;
    }
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100450E80;
  v8[3] = &unk_10092F520;
  v9 = objc_alloc_init((Class)CBUserController);
  v10 = a1;
  v7 = v9;
  objc_msgSend(v7, "getCurrentUserGivenNameWithCompletion:", v8);

}

void sub_100450E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_100450E80(uint64_t a1, void *a2)
{
  id v3;
  _BYTE *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  int64_t v13;
  char *v14;
  id v15;
  void *v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *__dst;
  uint64_t v29;
  id v30;
  void *v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE __p[12];
  char v35;

  v3 = a2;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_10043F78C(*(_QWORD *)(a1 + 40), (uint64_t)__p);
  if (v35 >= 0)
    v4 = __p;
  else
    v4 = *(_BYTE **)__p;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v4, 4));
  if (v35 < 0)
    operator delete(*(void **)__p);
  v6 = objc_msgSend(v3, "length");
  if (v3 && v6)
  {
    v7 = sub_100355F10(CFSTR("APPLE_DEVICE_NAME"), v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v30 = 0;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithValidatedFormat:validFormatSpecifiers:error:](NSString, "stringWithValidatedFormat:validFormatSpecifiers:error:", v8, CFSTR("%@%@"), &v30, v3, v5));
    v10 = v30;

    if (v9)
    {
      if (qword_100978150 != -1)
        dispatch_once(&qword_100978150, &stru_10092F6C0);
      sub_10006CA88((uint64_t)off_100978148, (uint64_t **)&v31);
      v11 = *(_QWORD *)(a1 + 40);
      __dst = 0;
      v29 = 0;
      v27 = 0;
      v12 = v31;
      v13 = v32 - (_BYTE *)v31;
      if (v32 != v31)
      {
        sub_1002A3F78(&v27, v13 >> 3);
        v14 = (char *)__dst;
        memmove(__dst, v12, v13);
        __dst = &v14[8 * (v13 >> 3)];
      }
      v15 = sub_10044FFBC(v11, v9, (uint64_t **)&v27);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      if (v27)
      {
        __dst = v27;
        operator delete(v27);
      }
      v17 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v18 = objc_msgSend(objc_retainAutorelease(v16), "UTF8String");
        *(_DWORD *)__p = 136315138;
        *(_QWORD *)&__p[4] = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Bluetooth device name is auto updated to %s", __p, 0xCu);
      }
      v19 = *(_QWORD *)(a1 + 40);
      v20 = objc_retainAutorelease(v16);
      sub_100091AE8(__p, (char *)objc_msgSend(v20, "UTF8String"));
      sub_100440D9C(v19, (uint64_t)__p, 1);
      if (v35 < 0)
        operator delete(*(void **)__p);
    }
    else
    {
      v24 = qword_1009997E8;
      if (v10 && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 138412290;
        *(_QWORD *)&__p[4] = v10;
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "stringWithValidatedFormat failed for APPLE_DEVICE_NAME: %@", __p, 0xCu);
        v24 = qword_1009997E8;
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        sub_1006F24C0(v24, v25, v26);
      v20 = 0;
    }

  }
  else
  {
    v21 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F2534(v21, v22, v23);
    v9 = 0;
    v20 = 0;
  }

  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }

}

void sub_1004511D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_100451298(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = result;
    if (*(_DWORD *)(result + 424) != a2)
    {
      *(_DWORD *)(result + 424) = a2;
      v3 = sub_10034D650();
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 1328))(v3, v2, *(unsigned int *)(v2 + 424));
    }
  }
  return result;
}

uint64_t sub_1004512E8(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 424);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10045132C(uint64_t a1, float a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  *(float *)(a1 + 1116) = a2;
  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v4 + 1360))(v4, a1, *(float *)(a1 + 1116));
  return sub_100034234((uint64_t)v6);
}

void sub_100451390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float sub_1004513A4(uint64_t a1)
{
  float v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(float *)(a1 + 1116);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_1004513F0(uint64_t a1, char a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 1144) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_100451434(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 1144);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_100451478(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *__p[3];
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  if (a1 + 1120 != a2)
    sub_1002D6FBC((char *)(a1 + 1120), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v4 = sub_10034D650();
  sub_1002D70C0(__p, a1 + 1120);
  (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v4 + 1376))(v4, a1, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return sub_100034234((uint64_t)v7);
}

void sub_10045151C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100451548(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD v7[2];
  uint8_t buf[4];
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v4 = *(_QWORD *)(a1 + 1272);
  if (v4 != a2)
  {
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      v9 = v4;
      v10 = 2048;
      v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updating powerUISmartChargingState from %lu->%lu", buf, 0x16u);
    }
    *(_QWORD *)(a1 + 1272) = a2;
  }
  return sub_100034234((uint64_t)v7);
}

void sub_100451628(uint64_t a1, void *a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD v7[2];
  uint8_t buf[4];
  uint64_t v9;
  __int16 v10;
  id v11;

  v4 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  if (!v4 || (objc_msgSend(*(id *)(a1 + 1280), "isEqualToDate:", v4) & 1) == 0)
  {
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 1280);
      *(_DWORD *)buf = 138412546;
      v9 = v6;
      v10 = 2112;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updating powerUISmartChargingDeadline from %@->%@", buf, 0x16u);
    }
    objc_storeStrong((id *)(a1 + 1280), a2);
  }
  sub_100034234((uint64_t)v7);

}

void sub_100451728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_100451750(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(_QWORD *)(a1 + 1272);
  sub_100034234((uint64_t)v4);
  return v2;
}

id sub_100451794(uint64_t a1)
{
  id v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(id *)(a1 + 1280);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_1004517E0(uint64_t a1)
{
  uint64_t (**v3)();
  unsigned int *v4;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 432);
  v3 = &off_100918258;
  v4 = 0;
  sub_100041698(a1 + 496, (uint64_t)&v3);
  v3 = &off_100918258;
  if (v4)
    sub_100056AAC(v4);
  return sub_100034234((uint64_t)v5);
}

void sub_100451844(_Unwind_Exception *a1, uint64_t a2, unsigned int *a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    sub_100056AAC(a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100451868(unsigned __int8 *a1, unsigned int a2)
{
  int v4;
  int v5;
  BOOL v6;
  unsigned __int8 v7;
  unsigned int v8;
  BOOL v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  id v16;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  __int16 v21;
  __int16 v22;

  v4 = *a1;
  v5 = v4 | (a1[1] << 8);
  v6 = v5 == 19456 || v5 == 76;
  if (v6)
    v7 = 2;
  else
    v7 = 1;
  if (v6)
    v8 = 3;
  else
    v8 = 2;
  v9 = v4 == 76 || v5 == 19456;
  if (!v9 && v5 != 76)
    return 0;
  v10 = objc_alloc_init((Class)NSMutableDictionary);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", 76));
  objc_msgSend(v10, "setObject:forKey:", v11, CFSTR("kCBMsgArgVID"));

  objc_msgSend(v10, "setObject:forKey:", &off_100960760, CFSTR("kCBMsgArgVIDSource"));
  v12 = v7;
  LODWORD(v11) = a1[v7];
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a1[v7]));
  objc_msgSend(v10, "setObject:forKey:", v13, CFSTR("CBCentralManagerScanOptionMatchingRuleTypeKey"));

  v14 = (_DWORD)v11 - 1;
  v15 = v12 + 1;
  switch(v14)
  {
    case 0:
      if (a2 > v8)
      {
        if (a2 == 20)
        {
          v16 = (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &a1[v15], 16));
          objc_msgSend(v10, "setObject:forKey:", v16, CFSTR("ServiceUUIDHash"));
        }
        else
        {
          v16 = objc_msgSend(objc_alloc((Class)NSString), "initWithBytes:length:encoding:", &a1[v15], a2 - v8, 4);
          if (v16)
            objc_msgSend(v10, "setObject:forKey:", v16, CFSTR("kCBMsgArgModelIdentifier"));
        }
        goto LABEL_24;
      }
      break;
    case 1:
      v18 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v22 = 0;
        v19 = "Warning: Received Apple EIR 3rd party advertising data - not processed";
        v20 = (uint8_t *)&v22;
        goto LABEL_27;
      }
      break;
    case 2:
      v16 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a1[v15]));
      objc_msgSend(v10, "setObject:forKey:", v16, CFSTR("kCBMsgArgColorID"));
LABEL_24:

      break;
    case 6:
      v18 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v21 = 0;
        v19 = "Warning: Received Apple EIR ProxPairing data - not processed";
        v20 = (uint8_t *)&v21;
LABEL_27:
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v19, v20, 2u);
      }
      break;
    default:
      return v10;
  }
  return v10;
}

void sub_100451AE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_100451B38(uint64_t a1, void *a2, unsigned int a3)
{
  size_t v6;
  const void *v7;
  int v8;
  _BOOL8 v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  void **v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  NSObject *v30;
  unsigned __int8 *v31;
  int v33;
  void *v34;
  std::string __str;
  void *__p[2];
  char v37;
  _QWORD v38[2];
  unsigned __int8 v39;
  unsigned __int8 *v40;
  _BYTE __n[16];
  unsigned __int8 v42;
  void *__s2;
  _BYTE buf[20];
  _BYTE v45[6];
  int v46;
  __int16 v47;
  int v48;

  __s2 = 0;
  v42 = 0;
  *(_QWORD *)&__n[1] = 0;
  __n[0] = 0;
  v40 = 0;
  v39 = 0;
  v38[0] = 0;
  v38[1] = 0;
  sub_10003415C((uint64_t)v38, a1 + 432);
  v6 = sub_10003F8C4(a1 + 496);
  if (v6 == a3)
  {
    v7 = (const void *)sub_10003EB18(a1 + 496);
    if (!memcmp(a2, v7, v6))
    {
      v9 = 0;
      goto LABEL_50;
    }
  }
  if (!a3
    || sub_10018FBB4((unsigned __int8 *)a2, 255, __n, (unsigned __int8 **)&__n[1])
    || sub_10003F8C4(a1 + 496)
    && (v31 = (unsigned __int8 *)sub_10003EB18(a1 + 496),
        sub_10018FBB4(v31, 255, &v42, (unsigned __int8 **)&__s2)))
  {
    v8 = 0;
LABEL_6:
    v9 = 1;
    goto LABEL_7;
  }
  if (__n[0] != v42)
  {
    v8 = 1;
    goto LABEL_6;
  }
  v9 = memcmp(*(const void **)&__n[1], __s2, __n[0]) != 0;
  v8 = 1;
LABEL_7:
  v10 = sub_10003BE44();
  if (v8 & (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 384))(v10) & v9)
  {
    v11 = sub_100451868(*(unsigned __int8 **)&__n[1], __n[0]);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    NSLog(CFSTR("Received EIR dict: %@"), v12);
    if (v12)
    {
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "valueForKey:", CFSTR("kCBMsgArgVID")));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "valueForKey:", CFSTR("kCBMsgArgVIDSource")));
      v14 = objc_opt_class(NSNumber);
      if ((objc_opt_isKindOfClass(v34, v14) & (v13 != 0)) == 1)
      {
        v15 = objc_opt_class(NSNumber);
        if ((objc_opt_isKindOfClass(v13, v15) & 1) != 0)
        {
          v33 = objc_msgSend(v34, "unsignedShortValue");
          v16 = objc_msgSend(v13, "unsignedCharValue");
          v17 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(a1, __p);
            v18 = __p;
            if (v37 < 0)
              v18 = (void **)__p[0];
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = v18;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v16;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)v45 = v33;
            *(_WORD *)&v45[4] = 1024;
            v46 = 0;
            v47 = 1024;
            v48 = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "setEIRData %{public}s deviceId information: vidSrc 0x%x vid 0x%x pid 0x%x version 0x%x", buf, 0x24u);
            if (v37 < 0)
              operator delete(__p[0]);
          }
          sub_100445BAC(a1, v16, v33, 0, 0);
        }
      }
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "valueForKey:", CFSTR("kCBMsgArgColorID")));
      if (v19)
      {
        v20 = objc_opt_class(NSNumber);
        if ((objc_opt_isKindOfClass(v19, v20) & 1) != 0)
          sub_100451298(a1, (int)objc_msgSend(v19, "unsignedCharValue"));
      }
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "valueForKey:", CFSTR("kCBMsgArgModelIdentifier")));
      if (v21)
      {
        v22 = objc_opt_class(NSString);
        if ((objc_opt_isKindOfClass(v21, v22) & 1) != 0)
        {
          v23 = objc_retainAutorelease(v21);
          sub_100091AE8(&__str, (char *)objc_msgSend(v23, "UTF8String"));
          std::string::operator=((std::string *)(a1 + 392), &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);

        }
      }

    }
  }
  sub_10003994C(buf, a2, a3);
  sub_100041698(a1 + 496, (uint64_t)buf);
  *(_QWORD *)buf = &off_100918258;
  if (*(_QWORD *)&buf[8])
    sub_100056AAC(*(unsigned int **)&buf[8]);
  if (a3)
  {
    v24 = sub_10018FBB4((unsigned __int8 *)a2, 16, &v39, &v40);
    v25 = v39;
    if (!v24 && v39)
    {
      if (!v40)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/Device.mm");
      if (v39 <= 1u)
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/Device.mm", 6215, "BOOL BT::Device::setEIRData(uint8_t *, uint8_t)");
        v26 = 0;
      }
      else
      {
        v26 = *(unsigned __int16 *)v40;
        if (v39 > 3u)
        {
          v27 = *((unsigned __int16 *)v40 + 1);
          if (v39 > 5u)
          {
            v28 = *((unsigned __int16 *)v40 + 2);
            if (v39 >= 8u)
            {
              v29 = *((unsigned __int16 *)v40 + 3);
LABEL_49:
              sub_100445BAC(a1, v26, v27, v28, v29);
              goto LABEL_50;
            }
LABEL_48:
            v29 = 0;
            goto LABEL_49;
          }
LABEL_47:
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/Device.mm", 6217, "BOOL BT::Device::setEIRData(uint8_t *, uint8_t)");
          v28 = 0;
          goto LABEL_48;
        }
      }
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/Device.mm", 6216, "BOOL BT::Device::setEIRData(uint8_t *, uint8_t)");
      v27 = 0;
      goto LABEL_47;
    }
    v30 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)&buf[4] = v25;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = a3;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = v42;
      *(_WORD *)v45 = 1024;
      *(_DWORD *)&v45[2] = __n[0];
      _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Invalid newDeviceIdDataLength:%d, dataLength:%d, oldManufacturerDataLength:%d, newManufacturerDataLength:%d skipping setDeviceId", buf, 0x1Au);
    }
  }
LABEL_50:
  sub_100034234((uint64_t)v38);
  return v9;
}

void sub_10045209C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void *v31;
  void *v32;

  sub_100034234((uint64_t)&a22);
  _Unwind_Resume(a1);
}

BOOL sub_100452168(uint64_t a1, void *a2, _BYTE *a3)
{
  uint64_t v5;
  size_t v6;
  char v7;
  _BOOL8 v8;
  _QWORD v10[2];

  v5 = a1;
  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 432);
  v5 += 496;
  v6 = sub_10003F8C4(v5);
  v7 = sub_1000455DC(v5, a2, v6);
  *a3 = v7;
  v8 = v7 != 0;
  sub_100034234((uint64_t)v10);
  return v8;
}

void sub_1004521E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004521F4(uint64_t a1, _BYTE *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  void **v15;
  void *__p[2];
  char v18;
  _QWORD v19[2];
  unsigned __int8 v20;
  unsigned __int8 *v21;
  uint8_t buf[4];
  void **v23;

  v21 = 0;
  v20 = 0;
  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 432);
  if (!sub_10003F8C4(a1 + 496))
  {
LABEL_27:
    v13 = 0;
    goto LABEL_28;
  }
  v4 = (unsigned __int8 *)sub_10003EB18(a1 + 496);
  if (sub_10018FBB4(v4, 255, &v20, &v21) || !v21 || !v20)
  {
    v11 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Could not get the EIR manufacturer data", (uint8_t *)__p, 2u);
    }
    goto LABEL_27;
  }
  if (*v21 && v21[1] != 76)
  {
    v14 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      sub_10043E5F8(a1, __p);
      v15 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v23 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Device %{public}s is not an Apple device", buf, 0xCu);
      if (v18 < 0)
        operator delete(__p[0]);
    }
    goto LABEL_27;
  }
  v5 = 0;
  v6 = 1;
  if (*v21 != 76)
    v6 = 2;
  v7 = &v21[v6];
  v21 = v7;
  v8 = *v7;
  while (v8 == 1)
  {
    v9 = v5;
    do
    {
      v5 = v9;
      v10 = v7[v9];
      v9 = (v9 + 1);
    }
    while (v10);
    v8 = 0;
    if (v20 <= v5)
      goto LABEL_27;
  }
  if (v8 != 2)
    goto LABEL_27;
  if (v7[v5 + 1] < 3u)
    goto LABEL_27;
  v12 = (v5 + 2);
  if (v7[v12] != 2)
    goto LABEL_27;
  *a2 = v7[v12 + 1];
  v13 = 1;
LABEL_28:
  sub_100034234((uint64_t)v19);
  return v13;
}

void sub_100452420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100452440(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  void **v16;
  const char *v17;
  NSObject *v18;
  unsigned int v19;
  uint64_t v20;
  void **v21;
  void *__p[2];
  char v24;
  _QWORD v25[2];
  unsigned __int8 v26;
  unsigned __int8 *v27;
  uint8_t buf[4];
  void **v29;

  v27 = 0;
  v26 = 0;
  v25[0] = 0;
  v25[1] = 0;
  sub_10003415C((uint64_t)v25, a1 + 432);
  if (!sub_10003F8C4(a1 + 496))
  {
    v15 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      sub_10043E5F8(a1, __p);
      if (v24 >= 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v29 = v16;
      v17 = "No EIR for device %{public}s";
LABEL_21:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, v17, buf, 0xCu);
      if (v24 < 0)
        operator delete(__p[0]);
    }
LABEL_34:
    v20 = 0;
    goto LABEL_35;
  }
  v6 = (unsigned __int8 *)sub_10003EB18(a1 + 496);
  if (sub_10018FBB4(v6, 255, &v26, &v27) || !v27 || !v26)
  {
    v18 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Could not get the EIR manufacturer data", (uint8_t *)__p, 2u);
    }
    goto LABEL_34;
  }
  v7 = *v27;
  if (*v27 && v7 != 76 && v27[1] != 76)
  {
    v15 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      sub_10043E5F8(a1, __p);
      if (v24 >= 0)
        v21 = __p;
      else
        v21 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v29 = v21;
      v17 = "Device %{public}s is not an Apple device";
      goto LABEL_21;
    }
    goto LABEL_34;
  }
  v8 = 0;
  v9 = v7 == 76;
  v10 = 1;
  if (!v9)
    v10 = 2;
  v11 = &v27[v10];
  v27 = v11;
  v12 = *v11;
  while (v12 == 1)
  {
    v13 = v8;
    do
    {
      v8 = v13;
      v14 = v11[v13];
      v13 = (v13 + 1);
    }
    while (v14);
    v12 = 0;
    if (v26 <= v8)
      goto LABEL_34;
  }
  if (v12 != 2)
    goto LABEL_34;
  v19 = v11[v8 + 1];
  if (v19 < 3 || v11[(v8 + 2)] != 2)
    goto LABEL_34;
  v20 = sub_100475214((uint64_t)&v11[(v8 + 4)], (v19 - 4), a2, a3);
LABEL_35:
  sub_100034234((uint64_t)v25);
  return v20;
}

void sub_1004526EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100452714(uint64_t a1, void *a2, size_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  int v12;
  char *v13;
  int v14;
  BOOL v15;
  int v17;
  __int128 *v18;
  char *v19;
  __int128 *v20;
  __int128 *v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  void *__src;
  size_t __n;
  int v31;
  void *__s2;
  int v33;
  __int128 v34;
  __int128 v35;
  void *__p;
  char *v37;
  uint64_t v38;
  void *v39;
  __int128 *v40;
  uint64_t v41;
  _QWORD v42[2];

  v42[0] = 0;
  v42[1] = 0;
  sub_10003415C((uint64_t)v42, a1);
  if (!*(_QWORD *)(a1 + 600))
  {
    a5 = 0;
    goto LABEL_81;
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  __p = 0;
  v37 = 0;
  v38 = 0;
  v35 = xmmword_100741310;
  v12 = sub_1004442A0(a1, (uint64_t)&v35, 0x200u, &__p);
  v13 = (char *)__p;
  if (!v12 || v37 - (_BYTE *)__p != 16)
    goto LABEL_76;
  if (*(_BYTE *)__p == 1)
  {
    v33 = *((_DWORD *)__p + 2);
    if (__p != v37)
    {
      do
      {
        v34 = 0uLL;
        v34 = *(_OWORD *)v13;
        sub_1002C3FB4(&v34);
        v13 += 16;
      }
      while (v13 != v37);
      v13 = (char *)__p;
    }
    v37 = v13;
    if (v33)
    {
      __s2 = a2;
      v14 = 0;
      if (a4)
        v15 = a6 == 0;
      else
        v15 = 1;
      v17 = !v15 && a5 != 0;
      v31 = v17;
      do
      {
        v18 = (__int128 *)v39;
        if (v39 == v40)
        {
          v40 = (__int128 *)v39;
        }
        else
        {
          do
          {
            v34 = 0uLL;
            v34 = *v18;
            sub_1002C3FB4(&v34);
            ++v18;
          }
          while (v18 != v40);
          v19 = (char *)__p;
          v13 = v37;
          v40 = (__int128 *)v39;
          if (__p != v37)
          {
            do
            {
              v34 = 0uLL;
              v34 = *(_OWORD *)v19;
              sub_1002C3FB4(&v34);
              v19 += 16;
            }
            while (v19 != v37);
            v13 = (char *)__p;
          }
        }
        v37 = v13;
        if (!sub_1004442A0(a1, (uint64_t)&v35, 2 * v14 + 513, &v39)
          || (sub_1004442A0(a1, (uint64_t)&v35, 2 * v14 + 514, &__p) & 1) == 0)
        {
          goto LABEL_74;
        }
        v21 = (__int128 *)v39;
        v20 = v40;
        if ((char *)v40 - (_BYTE *)v39 == 16 && (v22 = (char *)__p, v13 = v37, v37 - (_BYTE *)__p == 16))
        {
          if (*(_BYTE *)v39 == 4 && *(_BYTE *)__p == 4)
          {
            if (*((unsigned __int16 *)v39 + 1) == a3)
            {
              __n = *((unsigned __int16 *)__p + 1);
              __src = (void *)*((_QWORD *)__p + 1);
              if (!memcmp(*((const void **)v39 + 1), __s2, a3))
              {
                if (v31)
                {
                  v23 = *(unsigned int *)a5;
                  v24 = __n + v23 + 2;
                  if (v24 <= a6)
                  {
                    *(_WORD *)(a4 + v23) = __n;
                    v25 = (*(_DWORD *)a5 + 2);
                    *(_DWORD *)a5 = v25;
                    memcpy((void *)(a4 + v25), __src, __n);
                    v26 = __n;
                    v27 = *(_DWORD *)a5;
                    goto LABEL_64;
                  }
                }
                else
                {
                  if (!a5)
                  {
                    if (v21 != v20)
                    {
                      do
                      {
                        v34 = *v21;
                        sub_1002C3FB4(&v34);
                        ++v21;
                      }
                      while (v21 != v40);
                      v20 = (__int128 *)v39;
                      v22 = (char *)__p;
                      v13 = v37;
                    }
                    v40 = v20;
                    if (v22 == v13)
                    {
                      a5 = 1;
                      goto LABEL_77;
                    }
                    do
                    {
                      v34 = *(_OWORD *)v22;
                      sub_1002C3FB4(&v34);
                      v22 += 16;
                    }
                    while (v22 != v37);
                    a5 = 1;
                    goto LABEL_75;
                  }
                  v27 = __n + 2;
                  v26 = *(_DWORD *)a5;
LABEL_64:
                  v24 = v27 + v26;
                }
                *(_DWORD *)a5 = v24;
                if (v21 != v20)
                {
                  do
                  {
                    v34 = 0uLL;
                    v34 = *v21;
                    sub_1002C3FB4(&v34);
                    ++v21;
                  }
                  while (v21 != v40);
                  v20 = (__int128 *)v39;
                  v22 = (char *)__p;
                  v13 = v37;
                }
                v40 = v20;
                if (v22 == v13)
                  goto LABEL_45;
                do
                {
                  v34 = 0uLL;
                  v34 = *(_OWORD *)v22;
                  sub_1002C3FB4(&v34);
                  v22 += 16;
                }
                while (v22 != v37);
                goto LABEL_44;
              }
              if (v21 != v20)
              {
                do
                {
                  v34 = 0uLL;
                  v34 = *v21;
                  sub_1002C3FB4(&v34);
                  ++v21;
                }
                while (v21 != v40);
                v20 = (__int128 *)v39;
                v22 = (char *)__p;
                v13 = v37;
              }
              v40 = v20;
              if (v22 == v13)
                goto LABEL_45;
              do
              {
                v34 = 0uLL;
                v34 = *(_OWORD *)v22;
                sub_1002C3FB4(&v34);
                v22 += 16;
              }
              while (v22 != v37);
            }
            else
            {
              if (v39 != v40)
              {
                do
                {
                  v34 = 0uLL;
                  v34 = *v21;
                  sub_1002C3FB4(&v34);
                  ++v21;
                }
                while (v21 != v40);
                v20 = (__int128 *)v39;
                v22 = (char *)__p;
                v13 = v37;
              }
              v40 = v20;
              if (v22 == v13)
                goto LABEL_45;
              do
              {
                v34 = 0uLL;
                v34 = *(_OWORD *)v22;
                sub_1002C3FB4(&v34);
                v22 += 16;
              }
              while (v22 != v37);
            }
          }
          else
          {
            if (v39 != v40)
            {
              do
              {
                v34 = 0uLL;
                v34 = *v21;
                sub_1002C3FB4(&v34);
                ++v21;
              }
              while (v21 != v40);
              v20 = (__int128 *)v39;
              v22 = (char *)__p;
              v13 = v37;
            }
            v40 = v20;
            if (v22 == v13)
              goto LABEL_45;
            do
            {
              v34 = 0uLL;
              v34 = *(_OWORD *)v22;
              sub_1002C3FB4(&v34);
              v22 += 16;
            }
            while (v22 != v37);
          }
        }
        else
        {
          if (v39 != v40)
          {
            do
            {
              v34 = 0uLL;
              v34 = *v21;
              sub_1002C3FB4(&v34);
              ++v21;
            }
            while (v21 != v40);
            v20 = (__int128 *)v39;
          }
          v40 = v20;
          v13 = (char *)__p;
          if (__p == v37)
            goto LABEL_45;
          do
          {
            v34 = 0uLL;
            v34 = *(_OWORD *)v13;
            sub_1002C3FB4(&v34);
            v13 += 16;
          }
          while (v13 != v37);
        }
LABEL_44:
        v13 = (char *)__p;
LABEL_45:
        v37 = v13;
        ++v14;
      }
      while (v14 != v33);
    }
    if (a5)
      a5 = *(_DWORD *)a5 != 0;
    goto LABEL_77;
  }
  if (__p != v37)
  {
    do
    {
      v34 = *(_OWORD *)v13;
      sub_1002C3FB4(&v34);
      v13 += 16;
    }
    while (v13 != v37);
LABEL_74:
    a5 = 0;
LABEL_75:
    v13 = (char *)__p;
  }
  else
  {
LABEL_76:
    a5 = 0;
  }
LABEL_77:
  if (v13)
  {
    v37 = v13;
    operator delete(v13);
  }
  if (v39)
  {
    v40 = (__int128 *)v39;
    operator delete(v39);
  }
LABEL_81:
  sub_100034234((uint64_t)v42);
  return a5;
}

void sub_100452CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;

  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  sub_100034234(v23 - 96);
  _Unwind_Resume(a1);
}

void sub_100452D38(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  __int128 v10;

  v6 = *a2;
  if ((v6 - 6) < 2)
  {
    if (*((_WORD *)a2 + 1))
    {
      v9 = 0;
      do
        sub_100452D38(a1, *((_QWORD *)a2 + 1) + 16 * v9++, a3);
      while (*((unsigned __int16 *)a2 + 1) > v9);
    }
  }
  else if (v6 == 3)
  {
    v10 = xmmword_100741320;
    if (sub_1002C5144((uint64_t)a2, (uint64_t)&v10))
      *(_BYTE *)(a1 + 579) = 1;
  }
  else if (v6 == 1 && *(_BYTE *)(a1 + 579))
  {
    v7 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *((_DWORD *)a2 + 2);
      LODWORD(v10) = 67109376;
      DWORD1(v10) = v8;
      WORD4(v10) = 1024;
      *(_DWORD *)((char *)&v10 + 10) = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Updating RFCOMM channel from %d -> %d ", (uint8_t *)&v10, 0xEu);
    }
    *(_BYTE *)(a1 + 579) = 0;
    *((_DWORD *)a2 + 2) = a3;
  }
}

uint64_t sub_100452E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned __int8 *v16;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1);
  v6 = *(_QWORD **)(a1 + 584);
  if (v6 != (_QWORD *)(a1 + 592))
  {
    while (!sub_1002C5144(v6[4], a2))
    {
      v7 = (_QWORD *)v6[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v6[2];
          v9 = *v8 == (_QWORD)v6;
          v6 = v8;
        }
        while (!v9);
      }
      v6 = v8;
      if (v8 == (_QWORD *)(a1 + 592))
        goto LABEL_23;
    }
    v18 = 0;
    v19[0] = 0;
    v19[1] = 0;
    sub_10033F038((uint64_t)&v18, (uint64_t)(v6 + 5));
    v10 = (_QWORD *)v19[0];
    if (v19[0])
    {
      v11 = (unsigned __int8 *)v19;
      v12 = (uint64_t *)v19[0];
      do
      {
        v13 = (unsigned __int8 *)v12;
        v14 = v11;
        v15 = *((_DWORD *)v12 + 8);
        if (v15 >= 4)
          v11 = (unsigned __int8 *)v12;
        else
          ++v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
      if (v11 != (unsigned __int8 *)v19)
      {
        v16 = v15 >= 4 ? v13 : v14;
        if (*((_DWORD *)v16 + 8) <= 4u)
        {
          sub_100452D38(a1, v11 + 40, a3);
          v10 = (_QWORD *)v19[0];
        }
      }
    }
    sub_10001A82C((uint64_t)&v18, v10);
  }
LABEL_23:
  *(_BYTE *)(a1 + 579) = 0;
  sub_100034234((uint64_t)v20);
  return 0;
}

void sub_100452FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  sub_10001A82C((uint64_t)va, v5);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100452FF4(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _OWORD *v7;
  _QWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int v13;
  const char *v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  NSObject *v19;
  void **v20;
  _OWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v26;
  _QWORD *v27;
  void *__p[2];
  int64_t v29;
  void *v30;
  std::string::size_type v31;
  uint64_t v32;
  std::string v33;
  void *v34[2];
  uint64_t v35;
  _OWORD *v36;
  _OWORD *v37;
  uint64_t v38;
  __n128 v39;
  _QWORD v40[2];
  std::string v41;

  v3 = a1;
  v40[0] = 0;
  v40[1] = 0;
  sub_10003415C((uint64_t)v40, a1);
  v4 = *(_QWORD **)(v3 + 584);
  v27 = (_QWORD *)(v3 + 592);
  if (v4 != (_QWORD *)(v3 + 592))
  {
    v5 = 0;
    v26 = v3;
    while (1)
    {
      v39 = 0uLL;
      v39 = *(__n128 *)v4[4];
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v6 = sub_1004442A0(v3, (uint64_t)&v39, 4u, (void **)&v36);
      v8 = v36;
      v7 = v37;
      if (v36 == v37)
        v9 = 0;
      else
        v9 = v6;
      if (v9 == 1)
      {
        do
        {
          v10 = *((unsigned __int16 *)v8 + 1);
          if ((v10 & 1) == 0 && *((_WORD *)v8 + 1))
          {
            v11 = 0;
            v12 = (int *)(v8[1] + 8);
            do
            {
              v13 = *v12;
              v12 += 8;
              if (v13 == 3)
              {
                v34[0] = 0;
                v34[1] = 0;
                v35 = 0;
                sub_100091AE8(v34, "RFCOMM ServiceClass: ");
                memset(&v33, 0, sizeof(v33));
                if (v39.n128_u8[0] == 3)
                {
                  if (v39.n128_u16[1] > 4u)
                    v14 = sub_10025099C((unsigned int *)v39.n128_u64[1]);
                  else
                    v14 = sub_100250C9C(v39.n128_u32[2]);
                  std::string::assign(&v33, v14);
                }
                v30 = 0;
                v31 = 0;
                v32 = 0;
                sub_100091AE8(&v30, "\n");
                __p[0] = 0;
                __p[1] = 0;
                v29 = 0;
                sub_100443628((const void **)v34, (const void **)&v33.__r_.__value_.__l.__data_, &v41);
                if (v32 >= 0)
                  v15 = (const std::string::value_type *)&v30;
                else
                  v15 = (const std::string::value_type *)v30;
                if (v32 >= 0)
                  v16 = HIBYTE(v32);
                else
                  v16 = v31;
                v17 = std::string::append(&v41, v15, v16);
                v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
                v29 = v17->__r_.__value_.__r.__words[2];
                *(_OWORD *)__p = v18;
                v17->__r_.__value_.__l.__size_ = 0;
                v17->__r_.__value_.__r.__words[2] = 0;
                v17->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v41.__r_.__value_.__l.__data_);
                v19 = qword_1009997E8;
                if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
                {
                  v20 = __p;
                  if (v29 < 0)
                    v20 = (void **)__p[0];
                  LODWORD(v41.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
                  _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v41, 0xCu);
                }
                sub_1004533F0(a2, &v39);
                if (SHIBYTE(v29) < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v32) < 0)
                  operator delete(v30);
                if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v33.__r_.__value_.__l.__data_);
                if (SHIBYTE(v35) < 0)
                  operator delete(v34[0]);
                v5 = (v5 + 1);
              }
              v11 += 2;
            }
            while (v11 < v10);
            v7 = v37;
          }
          v8 += 2;
        }
        while (v8 != (_QWORD *)v7);
        v21 = v36;
        if (v36 == v7)
        {
          v8 = v7;
          if (!v7)
            goto LABEL_45;
LABEL_44:
          v37 = v8;
          operator delete(v8);
          goto LABEL_45;
        }
        do
        {
          v34[0] = 0;
          v34[1] = 0;
          *(_OWORD *)v34 = *v21;
          sub_1002C3FB4(v34);
          ++v21;
        }
        while (v21 != v37);
        v8 = v36;
      }
      if (v8)
        goto LABEL_44;
LABEL_45:
      v22 = (_QWORD *)v4[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v4[2];
          v24 = *v23 == (_QWORD)v4;
          v4 = v23;
        }
        while (!v24);
      }
      v4 = v23;
      v3 = v26;
      if (v23 == v27)
        goto LABEL_55;
    }
  }
  v5 = 0;
LABEL_55:
  sub_100034234((uint64_t)v40);
  return v5;
}

void sub_10045334C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39)
{
  _Unwind_Resume(exception_object);
}

__n128 sub_1004533F0(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100457400(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

id sub_100453478(uint64_t a1)
{
  id v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = objc_msgSend(*(id *)(a1 + 1296), "copy");
  sub_100034234((uint64_t)v4);
  return v2;
}

void sub_1004534C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_1004534D8(uint64_t a1, int a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = *(id *)(a1 + 1296);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v13;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("kCBMsgArgPSM"), (_QWORD)v12));
        v9 = v8;
        if (v8 && objc_msgSend(v8, "intValue") == a2)
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("kCBMsgArgServiceUUID")));

          goto LABEL_12;
        }

      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v4)
        continue;
      break;
    }
  }
  v10 = 0;
LABEL_12:

  return v10;
}

void sub_10045362C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_100453660(uint64_t a1, int a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = *(id *)(a1 + 1296);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v13;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("kCBMsgArgRFCOMMChannelID"), (_QWORD)v12));
        v9 = v8;
        if (v8 && objc_msgSend(v8, "intValue") == a2)
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("kCBMsgArgServiceUUID")));

          goto LABEL_12;
        }

      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v4)
        continue;
      break;
    }
  }
  v10 = 0;
LABEL_12:

  return v10;
}

void sub_1004537B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1004537E8(uint64_t a1, void *a2, size_t a3)
{
  return sub_100452714(a1, a2, a3, 0, 0, 0);
}

uint64_t sub_1004537F8(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 368);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10045383C(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 368) = *a2;
  v4 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 376))(v4, a1, a1 + 368);
  return sub_100034234((uint64_t)v6);
}

void sub_10045389C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004538B0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];
  uint64_t v5;

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v5 = 0;
  sub_10004AD30((uint64_t)&v5);
  v2 = SWORD2(v5);
  *(_QWORD *)(a1 + 376) = (int)v5;
  *(_QWORD *)(a1 + 384) = v2;
  return sub_100034234((uint64_t)v4);
}

void sub_100453904(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100453918(uint64_t a1, int a2)
{
  unint64_t v4;
  _BOOL8 v5;
  _QWORD v7[2];
  _DWORD v8[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1);
  v4 = *(_QWORD *)(a1 + 384) + (1000 * a2);
  v8[0] = v4 / 0x3E8 + *(_DWORD *)(a1 + 376);
  v8[1] = v4 % 0x3E8;
  v5 = !sub_100258AE0((uint64_t)v8);
  sub_100034234((uint64_t)v7);
  return v5;
}

void sub_1004539AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004539C0(uint64_t a1, char a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 1362) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_100453A04(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1);
  ++*(_BYTE *)(a1 + 1367);
  return sub_100034234((uint64_t)v3);
}

uint64_t sub_100453A4C(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1);
  *(_BYTE *)(a1 + 1367) = 0;
  return sub_100034234((uint64_t)v3);
}

uint64_t sub_100453A8C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 1367);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_100453AD0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  void **v6;
  dispatch_time_t v7;
  void *__p[2];
  char v10;
  _QWORD handler[5];
  _QWORD v12[2];
  uint8_t buf[4];
  int v14;
  __int16 v15;
  void **v16;

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1);
  v2 = *(NSObject **)(a1 + 1368);
  if (v2)
    goto LABEL_3;
  v3 = sub_10006BBEC();
  v4 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v3 + 8));
  *(_QWORD *)(a1 + 1368) = v4;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100453CA4;
  handler[3] = &unk_100917378;
  handler[4] = a1;
  dispatch_source_set_event_handler(v4, handler);
  v2 = *(NSObject **)(a1 + 1368);
  if (v2)
  {
LABEL_3:
    ++*(_WORD *)(a1 + 1392);
    ++*(_BYTE *)(a1 + 1376);
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a1, __p);
      if (v10 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      *(_DWORD *)buf = 67109378;
      v14 = 300;
      v15 = 2082;
      v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Start Scan Core Page Scan backoff timer of %d seconds for device %{public}s", buf, 0x12u);
      if (v10 < 0)
        operator delete(__p[0]);
      v2 = *(NSObject **)(a1 + 1368);
    }
    v7 = dispatch_time(0, 300000000000);
    dispatch_source_set_timer(v2, v7, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_resume(*(dispatch_object_t *)(a1 + 1368));
  }
  return sub_100034234((uint64_t)v12);
}

void sub_100453C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100453CA4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  ++*(_WORD *)(v1 + 1400);
  return sub_100453CB8(v1);
}

uint64_t sub_100453CB8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  void **v4;
  void *__p[2];
  char v7;
  _QWORD v8[2];
  uint8_t buf[4];
  void **v10;

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1);
  __p[0] = 0;
  __p[1] = 0;
  sub_10003415C((uint64_t)__p, a1);
  *(_BYTE *)(a1 + 1367) = 0;
  sub_100034234((uint64_t)__p);
  v2 = *(NSObject **)(a1 + 1368);
  if (v2)
  {
    v3 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a1, __p);
      if (v7 >= 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Stopping Scan Core Page Scan backoff timer for device %{public}s", buf, 0xCu);
      if (v7 < 0)
        operator delete(__p[0]);
      v2 = *(NSObject **)(a1 + 1368);
    }
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 1368));
    *(_QWORD *)(a1 + 1368) = 0;
  }
  return sub_100034234((uint64_t)v8);
}

void sub_100453DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100453E04(uint64_t a1)
{
  _BOOL8 v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(_QWORD *)(a1 + 1368) != 0;
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_100453E50(uint64_t a1, int a2)
{
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10092F560);
  sub_1004B9FA4((uint64_t)off_100977B38, a2);
  return sub_100034234((uint64_t)v4);
}

void sub_100453EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100453ED8(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  void **v8;
  dispatch_time_t v9;
  void *__p[2];
  char v12;
  _QWORD handler[5];
  _QWORD v14[2];
  uint8_t buf[4];
  void **v16;

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1);
  v4 = *(NSObject **)(a1 + 1416);
  if (v4)
    goto LABEL_3;
  v5 = sub_10006BBEC();
  v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v5 + 8));
  *(_QWORD *)(a1 + 1416) = v6;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100454088;
  handler[3] = &unk_100917378;
  handler[4] = a1;
  dispatch_source_set_event_handler(v6, handler);
  v4 = *(NSObject **)(a1 + 1416);
  if (v4)
  {
LABEL_3:
    v7 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a1, __p);
      if (v12 >= 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Starting connection request watchdog timer for %{public}s", buf, 0xCu);
      if (v12 < 0)
        operator delete(__p[0]);
      v4 = *(NSObject **)(a1 + 1416);
    }
    v9 = dispatch_time(0, 1000000000 * a2);
    dispatch_source_set_timer(v4, v9, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_resume(*(dispatch_object_t *)(a1 + 1416));
  }
  return sub_100034234((uint64_t)v14);
}

void sub_100454068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100454088(uint64_t a1)
{
  return sub_100454090(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100454090(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  _QWORD v5[5];
  void *__p[2];
  char v7;
  _QWORD v8[2];
  uint8_t buf[4];
  void **v10;

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1);
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a1, __p);
    v3 = v7 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stalled connection request for %{public}s", buf, 0xCu);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 1416));
  *(_QWORD *)(a1 + 1416) = 0;
  sub_100034264((uint64_t)v8);
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_10092F6E0);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1004543D8;
  v5[3] = &unk_100917378;
  v5[4] = a1;
  sub_1004965EC((uint64_t)off_100977A70, v5);
  return sub_100034234((uint64_t)v8);
}

void sub_1004541FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10045421C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  void **v4;
  void *__p[2];
  char v7;
  _QWORD v8[2];
  uint8_t buf[4];
  void **v10;

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1);
  v2 = *(NSObject **)(a1 + 1416);
  if (v2)
  {
    v3 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a1, __p);
      if (v7 >= 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Stopping connection request watchdog timer for %{public}s", buf, 0xCu);
      if (v7 < 0)
        operator delete(__p[0]);
      v2 = *(NSObject **)(a1 + 1416);
    }
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 1416));
    *(_QWORD *)(a1 + 1416) = 0;
  }
  return sub_100034234((uint64_t)v8);
}

void sub_10045432C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100454348(uint64_t a1)
{
  _BOOL8 v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(_QWORD *)(a1 + 1416) != 0;
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_100454394(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 1456);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_1004543D8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_10092F6E0);
  return sub_10049466C((int64x2_t *)off_100977A70, v1);
}

uint64_t sub_100454428(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 1424);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10045446C(uint64_t a1, char a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 1425) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_1004544B0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 1425);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_1004544F4(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  _DWORD *v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  void *__p[2];
  char v18;
  _QWORD v19[2];
  uint8_t buf[4];
  void **v21;

  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1);
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a1, __p);
    v3 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v21 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Resetting device %{public}s ", buf, 0xCu);
    if (v18 < 0)
      operator delete(__p[0]);
  }
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  if (*(char *)(a1 + 263) < 0)
  {
    **(_BYTE **)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 240) = 0;
    *(_BYTE *)(a1 + 263) = 0;
  }
  if (*(char *)(a1 + 303) < 0)
  {
    **(_BYTE **)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 280) = 0;
    *(_BYTE *)(a1 + 303) = 0;
  }
  *(_OWORD *)(a1 + 312) = 0u;
  sub_10001A82C(a1 + 328, *(_QWORD **)(a1 + 336));
  *(_QWORD *)(a1 + 328) = a1 + 336;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  v4 = *(_DWORD **)(a1 + 744);
  *(_QWORD *)(a1 + 752) = v4;
  v5 = *(_QWORD *)(a1 + 760);
  if ((unint64_t)v4 >= v5)
  {
    v7 = v5 - (_QWORD)v4;
    v8 = v7 >> 1;
    if ((unint64_t)(v7 >> 1) <= 1)
      v8 = 1;
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL)
      v9 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    v10 = sub_1002B46E0(a1 + 760, v9);
    v11 = *(char **)(a1 + 752);
    v12 = *(char **)(a1 + 744);
    v14 = &v10[v13];
    *v10 = -1;
    v6 = v10 + 1;
    while (v11 != v12)
    {
      v15 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *--v10 = v15;
    }
    *(_QWORD *)(a1 + 744) = v10;
    *(_QWORD *)(a1 + 752) = v6;
    *(_QWORD *)(a1 + 760) = v14;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v4 = -1;
    v6 = v4 + 1;
  }
  *(_QWORD *)(a1 + 752) = v6;
  sub_10043E330(a1);
  *(_DWORD *)(a1 + 642) = 16842752;
  *(_WORD *)(a1 + 646) = 0;
  *(_BYTE *)(a1 + 743) = 0;
  *(_BYTE *)(a1 + 1308) = 0;
  *(_DWORD *)(a1 + 1312) = 0;
  *(_BYTE *)(a1 + 1316) = 0;
  *(_DWORD *)(a1 + 1320) = 0;
  *(_BYTE *)(a1 + 1324) = 0;
  *(_DWORD *)(a1 + 1348) = 0;
  *(_BYTE *)(a1 + 1424) = 0;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_DWORD *)(a1 + 1343) = 0;
  sub_1004517E0(a1);
  sub_10044744C(a1);
  sub_100444F34(a1);
  *(_QWORD *)(a1 + 788) = 0xFFFF00000000;
  *(_BYTE *)(a1 + 796) = 1;
  *(_OWORD *)(a1 + 800) = xmmword_1007412E0;
  *(_OWORD *)(a1 + 820) = xmmword_1007412D0;
  *(_DWORD *)(a1 + 836) = 0;
  *(_WORD *)(a1 + 840) = 2;
  *(_BYTE *)(a1 + 842) = 0;
  *(_DWORD *)(a1 + 844) = 80;
  sub_10044F07C(a1);
  *(_BYTE *)(a1 + 856) = 0;
  *(_BYTE *)(a1 + 868) = 0;
  *(_QWORD *)(a1 + 860) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_DWORD *)(a1 + 896) = 0;
  sub_100091C38((uint64_t *)(a1 + 1168));
  *(_BYTE *)(a1 + 1426) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_DWORD *)(a1 + 1116) = -1082130432;
  *(_QWORD *)(a1 + 1128) = *(_QWORD *)(a1 + 1120);
  *(_BYTE *)(a1 + 1144) = 0;
  *(_BYTE *)(a1 + 984) = 1;
  *(_WORD *)(a1 + 986) = 0;
  *(_BYTE *)(a1 + 988) = -1;
  *(_DWORD *)(a1 + 992) = 0;
  *(_DWORD *)(a1 + 1356) = 0;
  *(_BYTE *)(a1 + 1360) = 0;
  *(_BYTE *)(a1 + 996) = 0;
  *(_BYTE *)(a1 + 652) = 1;
  *(_BYTE *)(a1 + 641) = 1;
  *(_BYTE *)(a1 + 1112) = 0;
  *(_BYTE *)(a1 + 952) = 0;
  *(_DWORD *)(a1 + 956) = 0;
  *(_DWORD *)(a1 + 964) = 0;
  *(_BYTE *)(a1 + 968) = 0;
  *(_WORD *)(a1 + 740) = 0;
  *(_BYTE *)(a1 + 742) = 0;
  *(_WORD *)(a1 + 1361) = 0;
  *(_DWORD *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 686) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_QWORD *)(a1 + 972) = 0;
  *(_BYTE *)(a1 + 980) = 0;
  *(_OWORD *)(a1 + 1148) = 0u;
  sub_100453CB8(a1);
  *(_BYTE *)(a1 + 1376) = 0;
  *(_BYTE *)(a1 + 1427) = 0;
  *(_WORD *)(a1 + 1364) = 0;
  *(_DWORD *)(a1 + 1500) = 0;
  *(_DWORD *)(a1 + 572) = 0;
  *(_DWORD *)(a1 + 1412) = 0;
  *(_OWORD *)(a1 + 1380) = 0u;
  *(_OWORD *)(a1 + 1396) = 0u;
  if (*(char *)(a1 + 1495) < 0)
  {
    **(_BYTE **)(a1 + 1472) = 0;
    *(_QWORD *)(a1 + 1480) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 1472) = 0;
    *(_BYTE *)(a1 + 1495) = 0;
  }
  return sub_100034234((uint64_t)v19);
}

void sub_100454898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004548BC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1112) = a2;
  return result;
}

uint64_t sub_1004548C4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1112);
}

uint64_t sub_1004548CC(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint8_t *v4;
  const char *v5;
  _QWORD *v6;
  int v7;
  int v8;
  const char *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  NSObject *v13;
  const char *v14;
  const char *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  NSObject *v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  unsigned int *i;
  _QWORD *v27;
  NSObject *v28;
  _BYTE *v29;
  uint64_t v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  NSObject *v34;
  int v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  void **v49;
  void **v50;
  char *v51;
  char *v52;
  __int128 *v53;
  __int128 *v54;
  char *v55;
  __int128 *v56;
  uint64_t v57;
  _BYTE v58[24];
  __int16 v59;
  uint8_t *v60;
  __int16 v61;
  void **v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  __int128 *v72;
  __int16 v73;
  int v74;
  __int16 v75;
  char *v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  int v102;
  __int16 v103;
  int v104;
  __int16 v105;
  int v106;
  __int16 v107;
  int v108;
  __int16 v109;
  int v110;
  __int16 v111;
  int v112;
  __int16 v113;
  int v114;
  __int16 v115;
  int v116;
  __int16 v117;
  int v118;
  __int16 v119;
  int v120;
  __int16 v121;
  void **v122;
  __int16 v123;
  char *v124;
  __int16 v125;
  char *v126;
  __int16 v127;
  __int128 *v128;
  __int16 v129;
  __int128 *v130;
  __int16 v131;
  char *v132;
  __int16 v133;
  __int128 *v134;
  __int16 v135;
  int v136;
  uint8_t buf[32];
  __int128 v138;
  __int128 v139;
  __int128 v140;
  void *__p[2];
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  void *v154[2];
  __int128 v155;
  uint8_t v156[4];
  _BYTE *v157;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)(a1 + 240);
    if (*(char *)(a1 + 263) < 0)
      v3 = (_QWORD *)*v3;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: \"%s\"", buf, 0xCu);
    v2 = qword_1009997E8;
  }
  v57 = a1;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_10046E9BC((unsigned __int8 *)(a1 + 128), buf);
    if ((buf[23] & 0x80u) == 0)
      v4 = buf;
    else
      v4 = *(uint8_t **)buf;
    *(_DWORD *)v58 = 136446210;
    *(_QWORD *)&v58[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    Address: %{public}s", v58, 0xCu);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    v2 = qword_1009997E8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v5 = sub_100471FE4((int *)(a1 + 176));
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    Type: %s", buf, 0xCu);
    v2 = qword_1009997E8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (_QWORD *)(a1 + 200);
    if (*(char *)(a1 + 223) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    Default name: \"%s\"", buf, 0xCu);
    v2 = qword_1009997E8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(char *)(a1 + 152);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    RSSI: %d", buf, 8u);
    v2 = qword_1009997E8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(a1 + 1112);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: \tderivedFromLE: %d", buf, 8u);
    v2 = qword_1009997E8;
  }
  if (*(_DWORD *)(a1 + 512) && os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v9 = sub_100423144((_DWORD *)(a1 + 512));
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    Accessory state: %{public}s", buf, 0xCu);
    v2 = qword_1009997E8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    Supported services:", buf, 2u);
  }
  v10 = *(_QWORD **)(a1 + 328);
  v11 = (_QWORD *)(a1 + 336);
  if (v10 != (_QWORD *)(a1 + 336))
  {
    do
    {
      v12 = *((_DWORD *)v10 + 8);
      *(_DWORD *)v58 = *((_DWORD *)v10 + 7);
      if (v12 >= 2)
      {
        v13 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          v14 = sub_100497E14((int *)v58);
          if (v12 == 3)
            v15 = "- Likely";
          else
            v15 = "";
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v14;
          if (v12 == 2)
            v15 = "- Unlikely";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v15;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "statedump:       %{public}s %{public}s", buf, 0x16u);
        }
      }
      v16 = (_QWORD *)v10[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v10[2];
          v18 = *v17 == (_QWORD)v10;
          v10 = v17;
        }
        while (!v18);
      }
      v10 = v17;
    }
    while (v17 != v11);
  }
  v19 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v20 = v57;
    if (*(_BYTE *)(v57 + 642))
      v21 = "Yes";
    else
      v21 = "No";
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump:    Supports phonebook sync: %{public}s", buf, 0xCu);
    v19 = qword_1009997E8;
  }
  else
  {
    v20 = v57;
  }
  if (*(_BYTE *)(v20 + 642))
  {
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(v20 + 643))
        v22 = "Yes";
      else
        v22 = "No";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump:       Sync enabled: %{public}s", buf, 0xCu);
      v19 = qword_1009997E8;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(v20 + 644))
        v23 = "Yes";
      else
        v23 = "No";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v23;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump:       Sync recents: %{public}s", buf, 0xCu);
      v19 = qword_1009997E8;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(v20 + 645))
        v24 = "Yes";
      else
        v24 = "No";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v24;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump:       Sync favorites: %{public}s", buf, 0xCu);
      v19 = qword_1009997E8;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(v20 + 646))
        v25 = "Yes";
      else
        v25 = "No";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v25;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump:       Sync user permission: %{public}s", buf, 0xCu);
    }
    *(_QWORD *)&v153 = 0;
    v151 = 0u;
    v152 = 0u;
    v149 = 0u;
    v150 = 0u;
    v147 = 0u;
    v148 = 0u;
    v145 = 0u;
    v146 = 0u;
    v143 = 0u;
    v144 = 0u;
    *(_OWORD *)__p = 0u;
    v142 = 0u;
    v139 = 0u;
    v140 = 0u;
    v138 = 0u;
    memset(buf, 0, sizeof(buf));
    sub_1002613AC((uint64_t)buf);
    for (i = *(unsigned int **)(v57 + 744); i != *(unsigned int **)(v57 + 752); ++i)
    {
      v27 = (_QWORD *)std::ostream::operator<<(&buf[16], *i);
      sub_1002614D8(v27, (uint64_t)" ", 1);
    }
    v28 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str(&buf[24]);
      v29 = v58[23] >= 0 ? v58 : *(_BYTE **)v58;
      *(_DWORD *)v156 = 136315138;
      v157 = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "statedump:       Sync group ID(s): %s", v156, 0xCu);
      if ((v58[23] & 0x80000000) != 0)
        operator delete(*(void **)v58);
    }
    *(_QWORD *)&buf[16] = v30;
    if (SHIBYTE(v142) < 0)
      operator delete(__p[1]);
    std::streambuf::~streambuf(&buf[24]);
    std::ios::~ios(&v144);
    v19 = qword_1009997E8;
    v20 = v57;
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(v20 + 647))
      v31 = "Yes";
    else
      v31 = "No";
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v31;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump: \tAllow sco for turn by turn enabled: %{public}s", buf, 0xCu);
    v19 = qword_1009997E8;
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    sub_100091AE8(buf, off_10092F700[*(int *)(v20 + 1500)]);
    if ((buf[23] & 0x80u) == 0)
      v32 = buf;
    else
      v32 = *(uint8_t **)buf;
    *(_DWORD *)v58 = 136446210;
    *(_QWORD *)&v58[4] = v32;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump: \tCarPlay type: %{public}s", v58, 0xCu);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    v19 = qword_1009997E8;
    v20 = v57;
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(v20 + 952))
      v33 = "is";
    else
      v33 = "is not";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v33;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump:  Device %s guest device", buf, 0xCu);
  }
  if (*(_BYTE *)(v20 + 952))
  {
    v34 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v35 = *(_DWORD *)(v20 + 956);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "statedump:  Guest device last seen %d", buf, 8u);
    }
  }
  sub_100443088(v20);
  v36 = sub_10034D650();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 816))(v36, v57);
  if (*(_BYTE *)(v57 + 740))
  {
    *(_OWORD *)v154 = 0u;
    v155 = 0u;
    v152 = 0u;
    v153 = 0u;
    v150 = 0u;
    v151 = 0u;
    v148 = 0u;
    v149 = 0u;
    v146 = 0u;
    v147 = 0u;
    v144 = 0u;
    v145 = 0u;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    *(_OWORD *)__p = 0u;
    v138 = 0u;
    v139 = 0u;
    memset(buf, 0, sizeof(buf));
    v38 = sub_10034D650();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint8_t *, uint64_t))(*(_QWORD *)v38 + 80))(v38, v57, buf, 80))
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F25A8();
    }
    else if (HIDWORD(v139))
    {
      v39 = sub_100027F68();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v39 + 160))(v39))
      {
        sub_10043F78C(v57, (uint64_t)v58);
        if (SBYTE7(v155) < 0)
          operator delete(v154[0]);
        *(_OWORD *)v154 = *(_OWORD *)v58;
        *(_QWORD *)&v155 = *(_QWORD *)&v58[16];
      }
      else
      {
        v40 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v58 = 0;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Identification - clearing friendly name in statedump. Release version with no profile installed.", v58, 2u);
        }
      }
      v41 = sub_10034D650();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 96))(v41, v57);
      v42 = sub_10034D650();
      (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v42 + 112))(v42, v57, (char *)&v145 + 8);
      v43 = sub_10034D650();
      (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v43 + 128))(v43, v57, (char *)&v142 + 8);
      v44 = sub_10034D650();
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v44 + 144))(v44, v57, &v144);
      v45 = sub_10034D650();
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v45 + 160))(v45, v57, &v147);
      v46 = sub_10034D650();
      (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v46 + 176))(v46, v57, (char *)&v148 + 8);
      v47 = sub_10034D650();
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v47 + 192))(v47, v57, &v150);
      v48 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v58 = 68157954;
        *(_DWORD *)&v58[4] = 152;
        *(_WORD *)&v58[8] = 2098;
        *(_QWORD *)&v58[10] = buf;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Identification - raw dump {%{public}.*P}", v58, 0x12u);
        v48 = qword_1009997E8;
      }
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        if ((SBYTE7(v155) & 0x80u) == 0)
          v49 = v154;
        else
          v49 = (void **)v154[0];
        if ((SBYTE7(v142) & 0x80u) == 0)
          v50 = __p;
        else
          v50 = (void **)__p[0];
        if (v146 >= 0)
          v51 = (char *)&v145 + 8;
        else
          v51 = (char *)*((_QWORD *)&v145 + 1);
        v52 = (char *)*((_QWORD *)&v142 + 1);
        if (v143 >= 0)
          v52 = (char *)&v142 + 8;
        if ((SBYTE7(v145) & 0x80u) == 0)
          v53 = &v144;
        else
          v53 = (__int128 *)v144;
        if ((SBYTE7(v148) & 0x80u) == 0)
          v54 = &v147;
        else
          v54 = (__int128 *)v147;
        if (v149 >= 0)
          v55 = (char *)&v148 + 8;
        else
          v55 = (char *)*((_QWORD *)&v148 + 1);
        v56 = (__int128 *)v150;
        if ((SBYTE7(v151) & 0x80u) == 0)
          v56 = &v150;
        *(_DWORD *)&v58[4] = 20;
        *(_QWORD *)&v58[10] = v57 + 700;
        *(_DWORD *)&v58[20] = 3;
        v60 = buf;
        v62 = v49;
        v64 = *(unsigned __int16 *)&buf[4];
        v66 = buf[8];
        v68 = *(unsigned __int16 *)&buf[6];
        v72 = &v140;
        *(_WORD *)&v58[18] = 1042;
        v69 = 1042;
        v73 = 1042;
        v70 = 8;
        v74 = 8;
        *(_WORD *)&v58[8] = 2098;
        v59 = 2098;
        v71 = 2098;
        v75 = 2098;
        v76 = (char *)&v140 + 8;
        v92 = *(unsigned __int16 *)&buf[22];
        v96 = *(unsigned __int16 *)&buf[26];
        v100 = *(unsigned __int16 *)&buf[30];
        v104 = WORD1(v138);
        v108 = WORD3(v138);
        v112 = HIDWORD(v138);
        v116 = DWORD1(v139);
        v120 = buf[3];
        v122 = v50;
        v124 = v51;
        v128 = v53;
        v130 = v54;
        v132 = v55;
        v136 = BYTE8(v155);
        v78 = HIDWORD(v139);
        v80 = *(unsigned __int16 *)&buf[10];
        v82 = *(unsigned __int16 *)&buf[12];
        v84 = *(unsigned __int16 *)&buf[14];
        v86 = *(unsigned __int16 *)&buf[16];
        v88 = *(unsigned __int16 *)&buf[18];
        v90 = *(unsigned __int16 *)&buf[20];
        v94 = *(unsigned __int16 *)&buf[24];
        v98 = *(unsigned __int16 *)&buf[28];
        v102 = (unsigned __int16)v138;
        v106 = WORD2(v138);
        v110 = DWORD2(v138);
        v114 = v139;
        v118 = DWORD2(v139);
        v126 = v52;
        v61 = 2082;
        v121 = 2082;
        v123 = 2082;
        v125 = 2082;
        v127 = 2082;
        v129 = 2082;
        v131 = 2082;
        v133 = 2082;
        v134 = v56;
        v63 = 1024;
        v65 = 1024;
        v67 = 1024;
        v77 = 1024;
        v79 = 1024;
        v81 = 1024;
        v83 = 1024;
        v85 = 1024;
        v87 = 1024;
        v89 = 1024;
        v91 = 1024;
        v93 = 1024;
        v95 = 1024;
        v97 = 1024;
        v99 = 1024;
        v101 = 1024;
        v103 = 1024;
        v105 = 1024;
        v107 = 1024;
        v109 = 1024;
        v111 = 1024;
        v113 = 1024;
        v115 = 1024;
        v117 = 1024;
        v119 = 1024;
        v135 = 1024;
        *(_DWORD *)v58 = 68299266;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "statedump: Identification - metric dump {%{public}.20P, %{public}.3P, %{public}s, 0x%x, 0x%x, 0x%x, %{public}.8P, %{public}.8P, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, %d, %{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %d}", v58, 0x12Eu);
      }
    }
    return sub_100393448((uint64_t)buf);
  }
  return result;
}

void sub_100455770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  sub_100393448((uint64_t)&a53);
  _Unwind_Resume(a1);
}

uint64_t sub_1004557A4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v4 = 0;
  sub_100043758(&v4);
  v2 = sub_100185E60(a1 + 128) ^ 1;
  sub_100043728(&v4);
  return v2;
}

void sub_1004557EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100455800(uint64_t result, int a2)
{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[5];
  __int16 v7;
  _QWORD v8[2];

  if (a2)
  {
    v2 = a2;
    v3 = result;
    if (*(unsigned __int16 *)(result + 1496) != a2)
    {
      v8[0] = 0;
      v8[1] = 0;
      v4 = sub_10003415C((uint64_t)v8, result);
      *(_WORD *)(v3 + 1496) = v2;
      sub_100034264(v4);
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_10092F540);
      sub_1004703C8((os_unfair_lock_s *)off_1009778E0, v3, 19);
      v5 = sub_10006BBEC();
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_1004558E8;
      v6[3] = &unk_100920960;
      v6[4] = v3;
      v7 = v2;
      sub_100041A34(v5, v6);
      return sub_100034234((uint64_t)v8);
    }
  }
  return result;
}

void sub_1004558D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100034234(v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_1004558E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = sub_100016B48();
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 72))(v3, v2, *(unsigned __int16 *)(a1 + 40), 1);
}

uint64_t sub_100455920(uint64_t a1)
{
  uint64_t result;

  result = _os_feature_enabled_impl("BluetoothFeatures", "HandsfreeAoS");
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 1061))
      return (*(unsigned __int8 *)(a1 + 1094) >> 5) & 1;
    else
      return 0;
  }
  return result;
}

uint64_t sub_10045596C(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[5];
  char v8;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  v4 = sub_10003415C((uint64_t)v9, a1);
  if (*(unsigned __int8 *)(a1 + 1363) != a2)
  {
    *(_BYTE *)(a1 + 1363) = a2;
    sub_100034264(v4);
    v5 = sub_10006BBEC();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100455A14;
    v7[3] = &unk_100918888;
    v7[4] = a1;
    v8 = a2;
    sub_100041A34(v5, v7);
  }
  return sub_100034234((uint64_t)v9);
}

void sub_100455A00(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100034234(v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_100455A14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092F540);
  sub_1004703C8((os_unfair_lock_s *)off_1009778E0, v2, 21);
  v3 = sub_100016B48();
  return (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)v3 + 80))(v3, (*(_BYTE *)(a1 + 40) & 0xFE) == 2);
}

uint64_t sub_100455A8C(uint64_t a1, int a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  if (*(unsigned __int8 *)(a1 + 1365) != a2)
  {
    *(_BYTE *)(a1 + 1365) = a2;
    sub_100034264((uint64_t)v5);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092F540);
    sub_1004703C8((os_unfair_lock_s *)off_1009778E0, a1, 20);
  }
  return sub_100034234((uint64_t)v5);
}

void sub_100455B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_100455B34(_DWORD *result, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  *a2 = result[257];
  *a3 = result[258];
  *a4 = result[259];
  *a5 = result[260];
  return result;
}

__n128 sub_100455B58(uint64_t a1)
{
  __n128 result;
  __int128 v2;

  *(_DWORD *)(a1 + 1056) = *(_DWORD *)(a1 + 1092);
  result = *(__n128 *)(a1 + 1060);
  v2 = *(_OWORD *)(a1 + 1076);
  *(__n128 *)(a1 + 1024) = result;
  *(_OWORD *)(a1 + 1040) = v2;
  return result;
}

uint64_t sub_100455B74(uint64_t a1, int a2)
{
  NSObject *v4;
  void **v5;
  uint64_t v6;
  void *__p[2];
  char v9;
  _QWORD v10[2];
  uint8_t buf[4];
  void **v12;

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1);
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    sub_100091AE8(__p, off_10092F700[a2]);
    v5 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Set CarPlayType : %s", buf, 0xCu);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  if (*(_DWORD *)(a1 + 1500) != a2)
    *(_DWORD *)(a1 + 1500) = a2;
  v6 = sub_10034D650();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 1488))(v6, a1, *(unsigned int *)(a1 + 1500));
  return sub_100034234((uint64_t)v10);
}

void sub_100455C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100455CB8(uint64_t a1, int a2)
{
  NSObject *v4;
  int *v5;
  int v6;
  uint64_t v7;
  _DWORD v9[2];

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 67109120;
    v9[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "blockIncomingConnections %d", (uint8_t *)v9, 8u);
  }
  LOBYTE(v9[0]) = 0;
  sub_100043758(v9);
  v5 = (int *)(a1 + 128);
  if (a2)
    v6 = sub_100182FA0(v5);
  else
    v6 = sub_1001830BC((uint64_t)v5);
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F25D4();
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  sub_100043728(v9);
  return v7;
}

void sub_100455DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  sub_100043728(&a9);
  _Unwind_Resume(a1);
}

void sub_100455DD8(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  int v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_10034750C((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    sub_1002A4750((_QWORD *)a1, v11);
    v12 = sub_1002A47E0(v8, (__int128 *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    sub_100455F48(__str, v13, v9);
    v12 = sub_1002A47E0(v8, (__int128 *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_100455F48(__str, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0)
        operator delete(*(void **)(v16 - 24));
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_100455F38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100455F40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *sub_100455F48(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void sub_100455FA4(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 168;
        sub_100456028((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_100456028(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 111) < 0)
    operator delete(*(void **)(a2 + 88));
  if (*(char *)(a2 + 79) < 0)
    operator delete(*(void **)(a2 + 56));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  return nullsub_90(a2 + 1, a2);
}

void sub_100456078(id a1)
{
  operator new();
}

void sub_1004560B8()
{
  operator delete();
}

void sub_1004560DC(id a1)
{
  operator new();
}

void sub_1004561F4()
{
  operator delete();
}

uint64_t **sub_100456218(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = sub_10001FD34((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *(uint64_t *)((char *)v8 + 28) = *(_QWORD *)((char *)v9 + 28);
          sub_10001FCC8(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = sub_10001FD34((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_1002C6244((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_100456378(v5, (_QWORD *)((char *)a2 + 28));
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_100456364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002C6244((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100456378(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x28uLL);
  v5 = *a2;
  *(uint64_t *)((char *)v4 + 28) = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (*((_DWORD *)v7 + 7) <= v5)
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  sub_100004078(a1, (uint64_t)v6, v8, v4);
  return v4;
}

void sub_100456404(id a1)
{
  operator new();
}

void sub_100456444()
{
  operator delete();
}

_QWORD *sub_100456468(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      abort();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1002A367C(v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

void sub_100456570(id a1)
{
  operator new();
}

void sub_1004565B0()
{
  operator delete();
}

void sub_1004565D4(id a1)
{
  operator new();
}

void sub_100456614()
{
  operator delete();
}

void sub_100456638(id a1)
{
  operator new();
}

void sub_1004566B8()
{
  uint64_t v0;
  uint64_t v1;
  void **v2;
  void *v3;

  v3 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v0 + 48) = v3;
    operator delete(v3);
  }
  sub_1002F95D8(v1, *(_QWORD **)(v0 + 16));

  operator delete();
}

void sub_100456704(id a1)
{
  operator new();
}

void sub_100456744()
{
  operator delete();
}

uint64_t *sub_100456768(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1004567BC(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1004567A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001A82C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1004567BC(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_100456840(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      v7 = (unsigned int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100456840(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v10 = 0;
  v11 = 0;
  v6 = sub_1004568C8(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    sub_100004078(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_1004568C8(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t sub_100456A70(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v2 = *a1;
  v3 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x186186186186186)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = 0xCF3CF3CF3CF3CF3DLL * ((v8 - v2) >> 3);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0xC30C30C30C30C3)
    v10 = 0x186186186186186;
  else
    v10 = v4;
  v18 = v7;
  if (v10)
    v11 = (char *)sub_100456D50(v7, v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[168 * v3];
  v17 = &v11[168 * v10];
  sub_100456B84((uint64_t)v15, a2);
  v16 = v15 + 168;
  sub_100456CDC(a1, &v14);
  v12 = a1[1];
  sub_100456EAC(&v14);
  return v12;
}

void sub_100456B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100456EAC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100456B84(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  __int128 v5;
  int v6;
  __int128 v7;
  _BYTE *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  sub_1005BCD5C((__n128 *)(a1 + 1), (__n128 *)(a2 + 1));
  v4 = *(_WORD *)(a2 + 18);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_WORD *)(a1 + 18) = v4;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_10003430C((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v5;
  }
  v6 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v6;
  if (*(char *)(a2 + 79) < 0)
  {
    sub_10003430C((_BYTE *)(a1 + 56), *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v7;
  }
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v8 = (_BYTE *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    sub_10003430C(v8, *(void **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)v8 = v9;
  }
  v10 = *(_OWORD *)(a2 + 112);
  v11 = *(_OWORD *)(a2 + 128);
  v12 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 112) = v10;
  return a1;
}

void sub_100456C98(_Unwind_Exception *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void **v5;

  if (*(char *)(v3 + 79) < 0)
    operator delete(*v5);
  if (*(char *)(v3 + 47) < 0)
    operator delete(*v4);
  nullsub_90(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_100456CDC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100456D98((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100456D50(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x186186186186187)
    sub_10007ABD4();
  return operator new(168 * a2);
}

uint64_t sub_100456D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  __int128 v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      v13 = a3 + v11;
      *(_BYTE *)(a7 + v11 - 168) = *(_BYTE *)(a3 + v11 - 168);
      sub_1005BCD5C((__n128 *)(a7 + v11 - 167), (__n128 *)(a3 + v11 - 167));
      v14 = *(_WORD *)(a3 + v11 - 150);
      *(_BYTE *)(v12 - 148) = *(_BYTE *)(a3 + v11 - 148);
      *(_WORD *)(v12 - 150) = v14;
      v15 = *(_OWORD *)(a3 + v11 - 144);
      *(_QWORD *)(v12 - 128) = *(_QWORD *)(a3 + v11 - 128);
      *(_OWORD *)(v12 - 144) = v15;
      *(_QWORD *)(v13 - 144) = 0;
      *(_QWORD *)(v13 - 136) = 0;
      *(_QWORD *)(v13 - 128) = 0;
      v16 = *(_DWORD *)(a3 + v11 - 120);
      *(_BYTE *)(v12 - 116) = *(_BYTE *)(a3 + v11 - 116);
      *(_DWORD *)(v12 - 120) = v16;
      v17 = *(_OWORD *)(a3 + v11 - 112);
      *(_QWORD *)(v12 - 96) = *(_QWORD *)(a3 + v11 - 96);
      *(_OWORD *)(v12 - 112) = v17;
      *(_QWORD *)(v13 - 104) = 0;
      *(_QWORD *)(v13 - 96) = 0;
      *(_QWORD *)(v13 - 112) = 0;
      *(_BYTE *)(v12 - 88) = *(_BYTE *)(a3 + v11 - 88);
      v18 = *(_OWORD *)(a3 + v11 - 80);
      *(_QWORD *)(v12 - 64) = *(_QWORD *)(a3 + v11 - 64);
      *(_OWORD *)(v12 - 80) = v18;
      *(_QWORD *)(v13 - 72) = 0;
      *(_QWORD *)(v13 - 64) = 0;
      *(_QWORD *)(v13 - 80) = 0;
      v19 = *(_OWORD *)(a3 + v11 - 56);
      v20 = *(_OWORD *)(a3 + v11 - 40);
      v21 = *(_OWORD *)(a3 + v11 - 24);
      *(_DWORD *)(v12 - 9) = *(_DWORD *)(a3 + v11 - 9);
      *(_OWORD *)(v12 - 24) = v21;
      *(_OWORD *)(v12 - 40) = v20;
      *(_OWORD *)(v12 - 56) = v19;
      v11 -= 168;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void **sub_100456EAC(void **a1)
{
  sub_100456EDC((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_100456EDC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 168;
      result = sub_100456028(v4, v1 - 168);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

void sub_100456F20(id a1)
{
  operator new();
}

void sub_100456F60(id a1)
{
  operator new();
}

void sub_100456FA0()
{
  operator delete();
}

uint64_t sub_100456FC4(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 2 * a3;
    do
    {
      sub_100457040((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 2;
    }
    while (v6);
  }
  return a1;
}

void sub_100457028(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001A82C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100457040(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _WORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v10 = 0;
  v11 = 0;
  v6 = sub_1004570C8(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_WORD *)v7 + 13) = *a4;
    sub_100004078(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_1004570C8(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int16 *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((unsigned __int16 *)a2 + 13), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((unsigned __int16 *)v10 + 13) < v15)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(unsigned __int16 *)(v16 + 26);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int16 *)a4 + 13))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(unsigned __int16 *)(v20 + 26);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_100457270(id a1)
{
  operator new();
}

void sub_1004572B0()
{
  operator delete();
}

void sub_1004572D4(id a1)
{
  operator new();
}

void sub_100457314()
{
  operator delete();
}

void sub_100457338(id a1)
{
  operator new();
}

void sub_100457378()
{
  operator delete();
}

void sub_10045739C(id a1)
{
  operator new();
}

void sub_1004573DC()
{
  operator delete();
}

void sub_100457400(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10007ABA0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1002A61DC(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_1002A62F0((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10007ABA0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10007ABA0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_1002A640C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002A6520((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1004576C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100457714(id a1)
{
  operator new();
}

void sub_100457754()
{
  operator delete();
}

void sub_100457B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id sub_100457B88(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleCTCellularTransmitStateChangedNotification:", a2);
}

void sub_100457BEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100457C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)Communicator;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100457CE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100457D5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100458360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char *a49)
{
  void *v49;

  a49 = &a32;
  sub_10026BD18((void ***)&a49);
  a49 = &a35;
  sub_10026BD18((void ***)&a49);

  _Unwind_Resume(a1);
}

uint64_t sub_1004584AC(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  sub_1005D4204(a1 + 24);

  return a1;
}

void sub_100458524(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100458750(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100458A20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100458B64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100458CE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100458E48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100458F38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100459048(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10045912C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1004593B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1004593D8(uint64_t a1)
{
  id result;
  NSObject *v3;
  uint64_t (***v4)(id, _QWORD);
  uint8_t v5[16];

  result = objc_msgSend(*(id *)(a1 + 32), "delegate");
  if (result)
  {
    v3 = qword_100999858;
    if (os_log_type_enabled((os_log_t)qword_100999858, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received 'call status changed' notification", v5, 2u);
    }
    objc_msgSend(*(id *)(a1 + 32), "_updateCalls");
    v4 = (uint64_t (***)(id, _QWORD))objc_msgSend(*(id *)(a1 + 32), "delegate");
    return (id)(**v4)(v4, *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_100459544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100459788(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100459964(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100459A98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100459C78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100459EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10045A0AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10045A438(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10045A6A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10045A8A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10045AA84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10045ABB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  a16 = &a22;
  sub_10026BD18((void ***)&a16);
  _Unwind_Resume(a1);
}

void sub_10045ADC4()
{
  operator delete();
}

void sub_10045AEA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10045B184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  uint64_t v23;

  sub_10026BD18((void ***)&__p);
  sub_1004584AC((uint64_t)&a22);

  a22 = v23 - 96;
  sub_10026BD18((void ***)&a22);
  _Unwind_Resume(a1);
}

void sub_10045B33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void **a15, void **a16)
{
  void *v16;

  sub_10026BD18(&a15);

  a16 = (void **)&a12;
  sub_10026BD18(&a16);
  _Unwind_Resume(a1);
}

void sub_10045B3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_10026BD18(&a12);
  _Unwind_Resume(a1);
}

void sub_10045B4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  *(_QWORD *)(v13 - 24) = &a10;
  sub_10026BD18((void ***)(v13 - 24));
  a10 = (void **)&a13;
  sub_10026BD18(&a10);
  _Unwind_Resume(a1);
}

void sub_10045B6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, char a15)
{
  void *v15;
  void *v16;

  sub_10026BD18(&a13);
  a13 = (void **)&a15;
  sub_10026BD18(&a13);

  _Unwind_Resume(a1);
}

void sub_10045B814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  *(_QWORD *)(v13 - 24) = &a10;
  sub_10026BD18((void ***)(v13 - 24));
  a10 = (void **)&a13;
  sub_10026BD18(&a10);
  _Unwind_Resume(a1);
}

void sub_10045B9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10045BB3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10045BC74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10045BD54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  sub_1005D4204(va);

  _Unwind_Resume(a1);
}

void sub_10045BF78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10045C09C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10045C1B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *sub_10045C374(_QWORD *a1, uint64_t a2)
{
  Communicator *v3;
  void *v4;

  *a1 = off_10092F750;
  a1[1] = 0;
  v3 = -[Communicator initWithDelegate:]([Communicator alloc], "initWithDelegate:", a2);
  v4 = (void *)a1[1];
  a1[1] = v3;

  return a1;
}

void sub_10045C3C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10045C3DC(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_10092F750;
  objc_msgSend(*(id *)(a1 + 8), "invalidate");
  v2 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

  return a1;
}

void sub_10045C424(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_10045C43C(uint64_t a1)
{
  sub_10045C3DC(a1);
  operator delete();
}

id sub_10045C460(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "supports3WC");
}

id sub_10045C468(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  void *__p[2];
  uint64_t v7;

  v3 = *(id *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003430C(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
  }
  v4 = objc_msgSend(v3, "answerIncomingCall:", __p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);

  return v4;
}

void sub_10045C4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id sub_10045C510(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "rejectIncomingCall");
}

id sub_10045C518(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "hangupActiveCall");
}

id sub_10045C520(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "releaseHeldCalls");
}

id sub_10045C528(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  void *__p[2];
  uint64_t v7;

  v3 = *(id *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003430C(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
  }
  v4 = objc_msgSend(v3, "releaseActiveCalls:", __p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);

  return v4;
}

void sub_10045C5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id sub_10045C5D0(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  void *__p[2];
  uint64_t v7;

  v3 = *(id *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003430C(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
  }
  v4 = objc_msgSend(v3, "holdActiveCalls:", __p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);

  return v4;
}

void sub_10045C650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id sub_10045C678(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "addHeldCall");
}

id sub_10045C680(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 8), "releaseCall:", a2);
}

id sub_10045C68C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 8), "privateConference:", a2);
}

id sub_10045C698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  id v6;
  void *__p[2];
  uint64_t v9;

  v5 = *(id *)(a1 + 8);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10003430C(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v9 = *(_QWORD *)(a3 + 16);
  }
  v6 = objc_msgSend(v5, "dialNumber:uid:", a2, __p);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);

  return v6;
}

void sub_10045C728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id sub_10045C750(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  void *__p[2];
  uint64_t v7;

  v3 = *(id *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003430C(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
  }
  v4 = objc_msgSend(v3, "redialLastNumberWithUid:", __p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);

  return v4;
}

void sub_10045C7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id sub_10045C7F8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 8), "sendDTMFTone:", a2);
}

id sub_10045C804(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 8), "enableEchoCancellationNoiseReduction:", a2);
}

id sub_10045C810(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "addVirtualCall");
}

id sub_10045C818(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "removeVirtualCall");
}

id sub_10045C820(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 8), "getCurrentCalls:", a2);
}

id sub_10045C82C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 8), "getCurrentExpanseCalls:", a2);
}

id sub_10045C838(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  NSObject *v6;
  id v7;
  _DWORD v9[2];

  v5 = a2;
  v6 = qword_100999858;
  if (os_log_type_enabled((os_log_t)qword_100999858, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 67109120;
    v9[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Communicator isScreening: %d", (uint8_t *)v9, 8u);
  }
  v7 = objc_msgSend(*(id *)(a1 + 8), "setScreeningCall:isScreening:", v5, a3);

  return v7;
}

void sub_10045C908(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10045C920(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 8), "getCurrentScreeningCalls:", a2);
}

id sub_10045C92C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 8), "getOperatorStatus:", a2);
}

id sub_10045C938(uint64_t a1)
{
  return (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "getRegistrationStatus"));
}

id sub_10045C954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 8), "getSignalStrength:mode:", a2, a3);
}

id sub_10045C964(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 8), "getSubscriberNumber:", a2);
}

id sub_10045C970(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 8), "getMobileSubscriberIdentity:", a2);
}

id sub_10045C97C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 8), "getMobileEquipmentIdentity:", a2);
}

id sub_10045C988(uint64_t a1, uint64_t *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = *(id *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
    a2 = (uint64_t *)*a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "getCountryCodeForIdentifier:", v4));

  return v5;
}

void sub_10045C9FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_10045CA18(uint64_t a1)
{
  return (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "getCountryCode"));
}

id sub_10045CA34(uint64_t a1)
{
  return (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "getCountryCodeIdentifer"));
}

id sub_10045CA50(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 8), "getTransmitState:", a2);
}

uint64_t sub_10045CA5C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_10045CA68(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  sub_1005D3E2C(a1 + 24);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;

  return a1;
}

void sub_10045CAB8(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10045CAD0(uint64_t a1)
{
  *(_QWORD *)a1 = off_10092F868;
  *(_QWORD *)(a1 + 8) = off_10092F928;
  *(_QWORD *)(a1 + 16) = off_10092F978;
  *(_QWORD *)(a1 + 24) = off_10092F9A8;
  *(_QWORD *)(a1 + 32) = off_10092F9C8;
  *(_QWORD *)(a1 + 40) = off_10092FA08;
  *(_BYTE *)(a1 + 48) = 0;
  sub_1000160D0(a1 + 104);
  *(_DWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_WORD *)(a1 + 244) = 1;
  *(_OWORD *)(a1 + 49) = 0u;
  *(_OWORD *)(a1 + 65) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  *(_QWORD *)(a1 + 95) = 0;
  return a1;
}

uint64_t sub_10045CB4C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_10092F868;
  *(_QWORD *)(a1 + 8) = off_10092F928;
  *(_QWORD *)(a1 + 16) = off_10092F978;
  *(_QWORD *)(a1 + 24) = off_10092F9A8;
  *(_QWORD *)(a1 + 32) = off_10092F9C8;
  *(_QWORD *)(a1 + 40) = off_10092FA08;
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));

  v2 = *(void **)(a1 + 176);
  if (v2)
  {
    *(_QWORD *)(a1 + 184) = v2;
    operator delete(v2);
  }
  sub_100069BDC(a1 + 104);
  return a1;
}

uint64_t sub_10045CBC8(uint64_t a1)
{
  return sub_10045CB4C(a1 - 32);
}

void sub_10045CBD0(uint64_t a1)
{
  sub_10045CB4C(a1);
  operator delete();
}

void sub_10045CBF4(uint64_t a1)
{
  sub_10045CB4C(a1 - 32);
  operator delete();
}

void sub_10045CC1C(uint64_t a1)
{
  dispatch_queue_attr_t v2;
  NSObject *v3;
  dispatch_queue_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t v8[16];

  *(_QWORD *)(a1 + 168) = sub_100350078();
  v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = dispatch_queue_create("com.apple.bluetooth.mp.serial", v3);
  v5 = *(void **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v4;

  sub_10045CDB8(a1);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10092FBD0);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1 + 16);
  if ((sub_10045D35C() & 1) != 0)
  {
    v6 = sub_100038E50();
    sub_10046E1C0(v6 + 328, a1 + 24);
    sub_10045D3E8(a1);
    if (qword_100978150 != -1)
      dispatch_once(&qword_100978150, &stru_10092FBF0);
    sub_1005B40C8(off_100978148, a1 + 32);
    (***(void (****)(_QWORD, uint64_t))(a1 + 168))(*(_QWORD *)(a1 + 168), a1 + 8);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092FC10);
    sub_10007A76C((uint64_t)off_1009778E0 + 240, a1 + 40);
  }
  else
  {
    v7 = qword_100999870;
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Magic Pairing cannot initialize, not supported on this platform.", v8, 2u);
    }
  }
}

uint64_t sub_10045CDB8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  uint64_t (***v6)(_QWORD, __int128 *);
  int v7;
  NSObject *v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  NSObject *v23;
  const char *v24;
  int v26;
  char v27;
  uint8_t v28;
  _BYTE v29[15];
  _QWORD v30[2];
  _BYTE v31[18];
  char v32;
  uint8_t v33[4];
  _BYTE *v34;
  _QWORD v35[2];
  _QWORD v36[2];
  _QWORD v37[2];
  _QWORD v38[2];
  __int128 buf;
  uint64_t v40;

  v30[0] = 0;
  v30[1] = 0;
  sub_10003415C((uint64_t)v30, a1 + 104);
  v2 = sub_10034D508();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 136))(v2, a1 + 49, a1 + 65);
  v4 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "not available";
    if (!v3)
      v5 = "available";
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Cloud master keys are %s in storage", (uint8_t *)&buf, 0xCu);
  }
  buf = 0uLL;
  v40 = 0;
  v6 = (uint64_t (***)(_QWORD, __int128 *))sub_10034D508();
  v7 = (**v6)(v6, &buf);
  v8 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v31 = 67109376;
    *(_DWORD *)&v31[4] = v7;
    *(_WORD *)&v31[8] = 2048;
    *(_QWORD *)&v31[10] = (uint64_t)(*((_QWORD *)&buf + 1) - buf) >> 3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "read device list result %d, pairedDev list size = %lu", v31, 0x12u);
  }
  for (i = (uint64_t *)buf; i != *((uint64_t **)&buf + 1); ++i)
  {
    v10 = *i;
    if (*(_BYTE *)(*i + 128))
    {
LABEL_9:
      v38[0] = 0;
      v38[1] = 0;
      v37[0] = 0;
      v37[1] = 0;
      v36[0] = 0;
      v36[1] = 0;
      v35[0] = 0;
      v35[1] = 0;
      v27 = 0;
      v26 = 0;
      v11 = sub_10034D508();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v11 + 96))(v11, v10, 0, v36))
      {
        v16 = sub_10034D508();
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v16 + 96))(v16, v10, 3, v37);
        v17 = sub_10034D508();
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v17 + 96))(v17, v10, 2, v38);
        v18 = sub_10034D508();
        (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)v18 + 96))(v18, v10, 4, &v26);
        v19 = sub_10034D508();
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v19 + 96))(v19, v10, 1, v35);
        operator new();
      }
      v12 = (id)qword_100999870;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(v10, v31);
        v20 = v31;
        if (v32 < 0)
          v20 = *(_BYTE **)v31;
        *(_DWORD *)v33 = 136446210;
        v34 = v20;
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Unable to read Magic Keys for %{public}s", v33, 0xCu);
        if (v32 < 0)
          operator delete(*(void **)v31);
      }

    }
    else
    {
      v13 = 0;
      while (v13 != 5)
      {
        if (*(unsigned __int8 *)(v10 + 129 + v13++))
        {
          if ((unint64_t)(v13 - 1) < 5)
            goto LABEL_9;
          break;
        }
      }
      v15 = qword_100999870;
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
        sub_1006F2B58(&v28, v29, v15);
    }
  }
  if (*(_QWORD *)(a1 + 184) != *(_QWORD *)(a1 + 176))
    *(_BYTE *)(a1 + 240) = 1;
  v21 = sub_10034D508();
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 144))(v21, a1 + 81, a1 + 97);
  v23 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    v24 = "not available";
    if (!v22)
      v24 = "available";
    *(_DWORD *)v31 = 136315138;
    *(_QWORD *)&v31[4] = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Cloud master IRK and address are %s in storage", v31, 0xCu);
  }
  sub_10046C644(a1);
  if ((_QWORD)buf)
  {
    *((_QWORD *)&buf + 1) = buf;
    operator delete((void *)buf);
  }
  return sub_100034234((uint64_t)v30);
}

void sub_10045D2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10045D35C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v0 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 328))(v0) & 1) != 0)
    return 1;
  v1 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 424))(v1) & 1) != 0)
    return 1;
  v2 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 336))(v2))
  {
    v3 = sub_10003BE44();
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 400))(v3))
      return 1;
  }
  v4 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 344))(v4) & 1) != 0)
    return 1;
  v6 = sub_10003BE44();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 384))(v6);
}

void sub_10045D3E8(uint64_t a1)
{
  CFPropertyListRef v2;
  const void *v3;
  char v4;
  const __CFString *v5;
  const __CFString *v6;
  CFTypeID v7;
  char *CStringPtr;
  void **v9;
  NSObject *v10;
  int v11;
  _QWORD *v12;
  _BYTE v13[28];

  v2 = CFPreferencesCopyAppValue(CFSTR("SignInstatus"), CFSTR("com.apple.BTServer"));
  if (v2)
  {
    v3 = v2;
    if (CFEqual(v2, CFSTR("SignedIn")))
    {
      v4 = 1;
    }
    else
    {
      if (!CFEqual(v3, CFSTR("SignedOut")))
      {
LABEL_7:
        CFRelease(v3);
        goto LABEL_8;
      }
      v4 = 0;
    }
    *(_BYTE *)(a1 + 241) = v4;
    goto LABEL_7;
  }
LABEL_8:
  v5 = (const __CFString *)CFPreferencesCopyAppValue(CFSTR("CloudAccountID"), CFSTR("com.apple.BTServer"));
  v6 = v5;
  if (v5)
  {
    v7 = CFGetTypeID(v5);
    if (v7 == CFStringGetTypeID())
    {
      CStringPtr = (char *)CFStringGetCStringPtr(v6, 0x8000100u);
      if (CStringPtr)
      {
        sub_100091AE8(v13, CStringPtr);
        v9 = (void **)(a1 + 216);
        if (*(char *)(a1 + 239) < 0)
          operator delete(*v9);
        *(_OWORD *)v9 = *(_OWORD *)v13;
        *(_QWORD *)(a1 + 232) = *(_QWORD *)&v13[16];
      }
      goto LABEL_16;
    }
  }
  if ((*(char *)(a1 + 239) & 0x80000000) == 0)
  {
    *(_BYTE *)(a1 + 216) = 0;
    *(_BYTE *)(a1 + 239) = 0;
    if (!v6)
      goto LABEL_17;
    goto LABEL_16;
  }
  **(_BYTE **)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  if (v6)
LABEL_16:
    CFRelease(v6);
LABEL_17:
  v10 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(unsigned __int8 *)(a1 + 241);
    v12 = (_QWORD *)(a1 + 216);
    if (*(char *)(a1 + 239) < 0)
      v12 = (_QWORD *)*v12;
    *(_DWORD *)v13 = 67109635;
    *(_DWORD *)&v13[4] = v11;
    *(_WORD *)&v13[8] = 2160;
    *(_QWORD *)&v13[10] = 1752392040;
    *(_WORD *)&v13[18] = 2081;
    *(_QWORD *)&v13[20] = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump: MagicPairingManager: SignedIn: %d, loginID: %{private, mask.hash}s", v13, 0x1Cu);
  }
}

uint64_t sub_10045D5C8(_QWORD **a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD v7[2];

  result = sub_10045D35C();
  if ((_DWORD)result)
  {
    v3 = sub_100038E50();
    sub_1002B43D4(v3 + 328, (uint64_t)(a1 + 3));
    v7[0] = 0;
    v7[1] = 0;
    sub_10003415C((uint64_t)v7, (uint64_t)(a1 + 13));
    v5 = a1[22];
    v4 = a1[23];
    if (v5 != v4)
    {
      do
      {
        v6 = *v5;
        if (*v5)
        {
          if (*(char *)(v6 + 111) < 0)
            operator delete(*(void **)(v6 + 88));
          operator delete();
        }
        ++v5;
      }
      while (v5 != v4);
      v5 = a1[22];
    }
    a1[23] = v5;
    (*(void (**)(_QWORD *, _QWORD **))(*a1[21] + 8))(a1[21], a1 + 1);
    (*(void (**)(_QWORD *))(*a1[21] + 120))(a1[21]);
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_10092FBD0);
    sub_100069060((uint64_t)off_100977A50 + 64, (uint64_t)(a1 + 2));
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092FC10);
    sub_100069060((uint64_t)off_1009778E0 + 240, (uint64_t)(a1 + 5));
    return sub_100034234((uint64_t)v7);
  }
  return result;
}

void sub_10045D714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10045D728(int *a1)
{
  int v2;
  __int16 v3;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092FC10);
  v2 = *a1;
  v3 = *((_WORD *)a1 + 2);
  sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v2, 1);
  sub_10006BBEC();
  operator new();
}

void sub_10045D824()
{
  operator delete();
}

void sub_10045D848(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t *i;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  NSObject *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD v13[5];
  char v14;
  _QWORD block[5];
  _BYTE buf[22];
  char v17;
  uint8_t v18[4];
  _BYTE *v19;
  __n128 v20;
  int v21;

  if (!*(_BYTE *)(a1 + 48))
  {
    *(_BYTE *)(a1 + 48) = 1;
    if ((sub_10045D35C() & 1) != 0)
    {
      v14 = 0;
      sub_100043758(&v14);
      v2 = qword_100999870;
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
      {
        v3 = "Signed in";
        if (!*(_BYTE *)(a1 + 241))
          v3 = "Not Signed in";
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "stackDidStart";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s, Device sign in status %s", buf, 0x16u);
      }
      sub_100229C64();
      sub_100229414((uint64_t)&off_10092FA28);
      sub_10045E1AC(a1);
      sub_10004339C(&v14);
      for (i = *(uint64_t **)(a1 + 176); i != *(uint64_t **)(a1 + 184); ++i)
      {
        v5 = *i;
        v20 = 0uLL;
        v21 = 0;
        sub_1005A9714((uint64_t)&v20);
        v6 = *(unsigned __int8 **)v5;
        if (qword_100978160 != -1)
          dispatch_once(&qword_100978160, &stru_10092FC30);
        if (sub_1005BEB64((uint64_t)off_100978158, v6, &v20) == 150)
        {
          v8 = (id)qword_100999870;
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8((uint64_t)v6, buf);
            v9 = buf;
            if (v17 < 0)
              v9 = *(_BYTE **)buf;
            *(_DWORD *)v18 = 136446210;
            v19 = v9;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Deferred Magic pairing device from cloud %{public}s", v18, 0xCu);
            if (v17 < 0)
              operator delete(*(void **)buf);
          }

          if (qword_100978150 != -1)
            dispatch_once(&qword_100978150, &stru_10092FBF0);
          sub_1005B961C((uint64_t)off_100978148, (uint64_t)v6);
          memset(buf, 0, 20);
          sub_1005A9734((uint64_t)buf, (_OWORD *)(v5 + 40), 4u);
          if (qword_100978160 != -1)
            dispatch_once(&qword_100978160, &stru_10092FC30);
          sub_1005BEC60((uint64_t)off_100978158, v6, (__n128 *)buf, 0);
          nullsub_90(buf, v10);
        }
        if (((unint64_t)*(unsigned __int8 *)(v5 + 78) << 40) | ((unint64_t)*(unsigned __int8 *)(v5 + 79) << 32) | ((unint64_t)*(unsigned __int8 *)(v5 + 80) << 24) | ((unint64_t)*(unsigned __int8 *)(v5 + 81) << 16) | ((unint64_t)*(unsigned __int8 *)(v5 + 82) << 8) | *(unsigned __int8 *)(v5 + 83))
        {
          v11 = sub_1000419F4();
          v13[0] = _NSConcreteStackBlock;
          v13[1] = 3221225472;
          v13[2] = sub_10045E444;
          v13[3] = &unk_100917378;
          v13[4] = v5;
          sub_100041A34(v11, v13);
        }
        nullsub_90(&v20, v7);
      }
      sub_100043728(&v14);
    }
    else
    {
      v12 = *(NSObject **)(a1 + 208);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10045DC30;
      block[3] = &unk_100917378;
      block[4] = a1;
      dispatch_async(v12, block);
    }
  }
}

void sub_10045DBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_100043728(&a20);
  _Unwind_Resume(a1);
}

_BYTE *sub_10045DC30(uint64_t a1)
{
  return sub_10045DC3C(*(_QWORD *)(a1 + 32), 0);
}

_BYTE *sub_10045DC3C(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  const char *v7;
  uint64_t *i;
  uint64_t v9;
  _QWORD **j;
  void *v11;
  void *v12;
  uint64_t **v13;
  uint64_t *v14;
  int v15;
  NSObject *v16;
  NSObject *v17;
  uint8_t *v18;
  uint8_t *v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t **v23;
  int64_t v24;
  uint64_t v25;
  _BYTE *result;
  char v27;
  void *__p[2];
  char v29;
  uint8_t v30[4];
  uint8_t *v31;
  __int16 v32;
  int v33;
  uint8_t buf[24];
  _QWORD *v35;
  __int16 v36;
  const char *v37;

  v4 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (uint64_t)(*(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176)) >> 3;
    v6 = (_QWORD *)(a1 + 216);
    if (*(char *)(a1 + 239) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 134218755;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 2160;
    if (a2)
      v7 = " <user-switched>";
    else
      v7 = "";
    *(_QWORD *)&buf[14] = 1752392040;
    *(_WORD *)&buf[22] = 2081;
    v35 = v6;
    v36 = 2080;
    v37 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Removing %lu magic paired devices from local device database for %{private, mask.hash}s%s", buf, 0x2Au);
  }
  *(_BYTE *)(a1 + 240) = 0;
  if (a2)
  {
    memset(buf, 0, sizeof(buf));
    if (qword_100978150 != -1)
      dispatch_once(&qword_100978150, &stru_10092FBF0);
    sub_10006CA88((uint64_t)off_100978148, (uint64_t **)buf);
    for (i = *(uint64_t **)buf; i != *(uint64_t **)&buf[8]; ++i)
    {
      v9 = *i;
      for (j = *(_QWORD ***)(a1 + 176); j != *(_QWORD ***)(a1 + 184); ++j)
      {
        if (**j == v9)
          goto LABEL_18;
      }
      sub_10046E9BC((unsigned __int8 *)(v9 + 128), __p);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 104))(a1, __p);
      if (v29 < 0)
        operator delete(__p[0]);
LABEL_18:
      ;
    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "cloudClient"));
    objc_msgSend(v12, "invalidate");

    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }
  v13 = *(uint64_t ***)(a1 + 176);
  if (v13 == *(uint64_t ***)(a1 + 184))
    goto LABEL_53;
  while (1)
  {
    v14 = *v13;
    if (!sub_10043FC5C(**v13))
      goto LABEL_35;
    v27 = 0;
    sub_100043758(&v27);
    v15 = sub_10018070C(*v14 + 128);
    v16 = (id)qword_100999870;
    v17 = v16;
    if (v15)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(*v14, buf);
        v18 = buf;
        if ((buf[23] & 0x80u) != 0)
          v18 = *(uint8_t **)buf;
        *(_DWORD *)v30 = 136446466;
        v31 = v18;
        v32 = 1024;
        v33 = v15;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Magic Pairing disconnect failed for %{public}s on user logout with status: %d", v30, 0x12u);
LABEL_32:
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
      }
    }
    else if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(*v14, buf);
      v19 = buf;
      if ((buf[23] & 0x80u) != 0)
        v19 = *(uint8_t **)buf;
      *(_DWORD *)v30 = 136446210;
      v31 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Magic Pairing disconnected for %{public}s on user logout", v30, 0xCu);
      goto LABEL_32;
    }

    sub_100043728(&v27);
LABEL_35:
    *((_DWORD *)v14 + 21) = 3;
    v20 = sub_10034D508();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 104))(v20, *v14);
    if (a2)
    {
      if (qword_100977A88 != -1)
        dispatch_once(&qword_100977A88, &stru_10092FC90);
      v21 = 3;
    }
    else
    {
      if (qword_100977A88 != -1)
        dispatch_once(&qword_100977A88, &stru_10092FC90);
      v21 = 1;
    }
    *((_BYTE *)off_100977A80 + 431) = v21;
    *(_OWORD *)(a1 + 49) = 0u;
    *(_OWORD *)(a1 + 65) = 0u;
    if (*(_BYTE *)(a1 + 48))
    {
      if (qword_100978150 != -1)
        dispatch_once(&qword_100978150, &stru_10092FBF0);
      sub_1005B8744((uint64_t)off_100978148, (unsigned __int8 *)*v14);
    }
    v22 = *v13;
    if (*v13)
    {
      if (*((char *)v22 + 111) < 0)
        operator delete((void *)v22[11]);
      operator delete();
    }
    v23 = *(uint64_t ***)(a1 + 184);
    v24 = (char *)v23 - (char *)(v13 + 1);
    if (v23 == v13 + 1)
      break;
    memmove(v13, v13 + 1, (char *)v23 - (char *)(v13 + 1));
    *(_QWORD *)(a1 + 184) = (char *)v13 + v24;
  }
  *(_QWORD *)(a1 + 184) = v23 - 1;
LABEL_53:
  v25 = sub_10034D508();
  result = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 168))(v25);
  if (*(_BYTE *)(a1 + 48))
  {
    buf[0] = 0;
    sub_100043758(buf);
    sub_10045E1AC(a1);
    result = sub_100043728(buf);
  }
  if (*(char *)(a1 + 239) < 0)
  {
    **(_BYTE **)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 216) = 0;
    *(_BYTE *)(a1 + 239) = 0;
  }
  return result;
}

void sub_10045E120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  void *v28;
  void *v29;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10045E1AC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t buf[4];

  v1 = *(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176);
  if (v1)
  {
    is_mul_ok(v1 >> 3, 0x2CuLL);
    operator new[]();
  }
  v2 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Magic paired device list is empty", buf, 2u);
  }
  return sub_100229BC8(0, 0);
}

void sub_10045E42C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10045E444(uint64_t a1)
{
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_10092FC50);
  sub_10066DE10((uint64_t)off_100977FA8, (unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 77), *(_QWORD *)(a1 + 32) + 24);
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_10092FC70);
  sub_100694CF4(qword_1009778B0, (unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 77), *(_QWORD *)(a1 + 32) + 8);
}

void sub_10045E4DC(uint64_t a1)
{
  sub_10045D848(a1 - 16);
}

uint64_t sub_10045E4E4(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  NSObject *v4;
  uint8_t v5[15];
  char v6;
  uint8_t buf[8];
  uint64_t v8;

  v2 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "MagicPairingManager::stackWillStop enter", buf, 2u);
  }
  result = sub_10045D35C();
  if ((_DWORD)result)
  {
    *(_QWORD *)buf = 0;
    v8 = 0;
    sub_10003415C((uint64_t)buf, a1 + 104);
    *(_BYTE *)(a1 + 48) = 0;
    v6 = 0;
    sub_100043758(&v6);
    sub_10022A76C();
    sub_10004339C(&v6);
    v4 = qword_100999870;
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "MagicPairingManager::stackWillStop exit", v5, 2u);
    }
    sub_100043728(&v6);
    return sub_100034234((uint64_t)buf);
  }
  return result;
}

void sub_10045E5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10045E5F8(uint64_t a1)
{
  return sub_10045E4E4(a1 - 16);
}

uint64_t sub_10045E600(uint64_t a1)
{
  uint64_t result;

  result = sub_10045D35C();
  if ((_DWORD)result)
  {
    result = *(_QWORD *)(a1 + 200);
    if (result)
      operator delete[]();
  }
  return result;
}

uint64_t sub_10045E644(uint64_t a1)
{
  return sub_10045E600(a1 - 16);
}

id sub_10045E64C(uint64_t a1)
{
  id v2;
  void **v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void **v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  char v14;

  if (a1)
  {
    v2 = objc_alloc((Class)BTCloudDevice);
    sub_10046E9BC((unsigned __int8 *)(a1 + 128), __p);
    if (v14 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3));
    v5 = objc_msgSend(v2, "initWithBluetoothAddress:", v4);

    if (v14 < 0)
      operator delete(__p[0]);
    v11 = 0;
    v12 = 0;
    if (sub_100444BF0(a1, (_DWORD *)&v12 + 1, &v12, (_DWORD *)&v11 + 1, &v11))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), HIDWORD(v11)));
      objc_msgSend(v5, "setProductID:", v6);

      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), v12));
      objc_msgSend(v5, "setVendorID:", v7);

    }
    sub_10043F6EC(a1, (uint64_t)__p);
    if (v14 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
    objc_msgSend(v5, "setNickname:", v9);

    if (v14 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v5 = 0;
  }
  return v5;
}

void sub_10045E7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t sub_10045E83C(uint64_t a1, char *a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 104);
  if ((char *)(a1 + 176) != a2)
    sub_1002A7150(a2, *(char **)(a1 + 176), *(_QWORD *)(a1 + 184), (uint64_t)(*(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176)) >> 3);
  sub_100034234((uint64_t)v5);
  return 0;
}

void sub_10045E8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_10045E8B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  v4 = sub_10003415C((uint64_t)v9, a1 + 104);
  if (sub_10045E940(v4, a2))
  {
    v5 = *(_QWORD **)(a1 + 176);
    v6 = *(_QWORD **)(a1 + 184);
    while (v5 != v6)
    {
      v7 = (_QWORD *)*v5;
      if (*(_QWORD *)*v5 == a2)
        goto LABEL_7;
      ++v5;
    }
  }
  v7 = 0;
LABEL_7:
  sub_100034234((uint64_t)v9);
  return v7;
}

void sub_10045E92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10045E940(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[2];

  result = sub_10045D35C();
  if ((_DWORD)result)
  {
    v5[0] = 0;
    v5[1] = 0;
    v4 = sub_10034D508();
    return (*(unsigned int (**)(uint64_t, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v4 + 96))(v4, a2, 0, v5) == 0;
  }
  return result;
}

uint64_t sub_10045E9C0(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v4;
  NSObject *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char *v13;
  unsigned __int8 ***v14;
  unsigned __int8 ***v15;
  unsigned __int8 **v16;
  int v17;
  NSObject *v18;
  _BYTE *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  _BYTE *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void **v28;
  void *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void **v33;
  void *v34;
  NSObject *v35;
  const char *v36;
  NSObject *v37;
  _BYTE *v38;
  NSObject *v39;
  _QWORD v40[5];
  void *v41[2];
  char v42;
  _QWORD v43[5];
  void *__p[2];
  char v45;
  _QWORD v46[5];
  char v47;
  _QWORD v48[2];
  uint64_t v49[3];
  _BYTE buf[12];
  __int16 v51;
  int v52;
  char v53;
  _BYTE v54[12];
  char v55;

  if (a2[952])
  {
    v4 = sub_10034D508();
    (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v4 + 128))(v4, a2);
    return 1;
  }
  if ((a3 & 1) == 0)
  {
    v7 = (id)qword_100999870;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8((uint64_t)a2, v49);
      sub_1006F2CBC();
    }

    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_10092FC90);
    *((_BYTE *)off_100977A80 + 431) = 1;
  }
  v8 = sub_10045E940(a1, (uint64_t)a2);
  v9 = sub_10034D508();
  (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v9 + 104))(v9, a2);
  if (a2[980])
    v10 = v8;
  else
    v10 = 1;
  if (v10 != 1 || a2[981])
    return 1;
  if (sub_10045D35C() && *(_BYTE *)(a1 + 240) && *(_BYTE *)(a1 + 241))
  {
    v48[0] = 0;
    v48[1] = 0;
    sub_10003415C((uint64_t)v48, a1 + 104);
    v13 = *(char **)(a1 + 176);
    v14 = *(unsigned __int8 ****)(a1 + 184);
    if (v13 == (char *)v14)
    {
LABEL_23:
      v16 = 0;
    }
    else
    {
      v15 = *(unsigned __int8 ****)(a1 + 176);
      while (1)
      {
        v16 = *v15;
        if (**v15 == a2)
          break;
        if (++v15 == v14)
          goto LABEL_23;
      }
    }
    if ((char *)v14 - v13 == 8 && *(_BYTE *)(a1 + 243))
      *(_BYTE *)(a1 + 243) = 0;
    if (v16)
    {
      v17 = *((_DWORD *)v16 + 21);
      v18 = (id)qword_100999870;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8((uint64_t)a2, v54);
        v19 = v55 >= 0 ? v54 : *(_BYTE **)v54;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v19;
        v51 = 1024;
        v52 = v17;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Removing Magic Pairing, Cloud status of magic device %{public}s = %d", buf, 0x12u);
        if (v55 < 0)
          operator delete(*(void **)v54);
      }

      if (v17 != 3)
      {
        if ((sub_10045F220((uint64_t *)(a1 + 176), (uint64_t)a2) & 1) == 0)
        {
          v39 = (id)qword_100999870;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            sub_10043E5F8((uint64_t)a2, v54);
            sub_1006F2C70();
          }

          v11 = 0;
          goto LABEL_82;
        }
        if (*(_BYTE *)(a1 + 48))
        {
          if ((a3 & 1) == 0)
          {
            if (qword_100978150 != -1)
              dispatch_once(&qword_100978150, &stru_10092FBF0);
            sub_1005B8744(off_100978148, a2);
          }
          v47 = 0;
          sub_100043758(&v47);
          sub_10045E1AC(a1);
          sub_10004339C(&v47);
          sub_10045F2D4(a1);
          if (a3 && *(_BYTE *)(a1 + 240))
          {
            v20 = (id)qword_100999870;
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              sub_10043E5F8((uint64_t)a2, v54);
              sub_1006F2C24();
            }

            v21 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "cloudClient"));
            sub_10046E9BC(a2 + 128, buf);
            if (v53 >= 0)
              v23 = buf;
            else
              v23 = *(_BYTE **)buf;
            v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v23));
            v46[0] = _NSConcreteStackBlock;
            v46[1] = 3221225472;
            v46[2] = sub_10045F3E4;
            v46[3] = &unk_10092FA30;
            v46[4] = a2;
            objc_msgSend(v22, "deleteDeviceRecord:completion:", v24, v46);

            if (v53 < 0)
              operator delete(*(void **)buf);

            v25 = (id)qword_100999870;
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              sub_10043E5F8((uint64_t)a2, buf);
              sub_1006F2BD8();
            }

            v26 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
            v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "cloudClient"));
            sub_10046E9BC(a2 + 128, __p);
            if (v45 >= 0)
              v28 = __p;
            else
              v28 = (void **)__p[0];
            v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v28));
            v43[0] = _NSConcreteStackBlock;
            v43[1] = 3221225472;
            v43[2] = sub_10045F524;
            v43[3] = &unk_10092FA30;
            v43[4] = a2;
            objc_msgSend(v27, "deleteMagicSettingsRecord:completion:", v29, v43);

            if (v45 < 0)
              operator delete(__p[0]);

            v30 = (id)qword_100999870;
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            {
              sub_10043E5F8((uint64_t)a2, __p);
              sub_1006F2B8C();
            }

            v31 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
            v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "cloudClient"));
            sub_10046E9BC(a2 + 128, v41);
            if (v42 >= 0)
              v33 = v41;
            else
              v33 = (void **)v41[0];
            v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v33));
            v40[0] = _NSConcreteStackBlock;
            v40[1] = 3221225472;
            v40[2] = sub_10045F664;
            v40[3] = &unk_10092FA30;
            v40[4] = a2;
            objc_msgSend(v32, "deleteDeviceSupportInformationRecord:completion:", v34, v40);

            if (v42 < 0)
              operator delete(v41[0]);

            sub_10045F7A4(a1);
          }
          sub_100043728(&v47);
        }
      }
    }
    else
    {
      v37 = (id)qword_100999870;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8((uint64_t)a2, v54);
        v38 = v55 >= 0 ? v54 : *(_BYTE **)v54;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Device %{public}s not in Magic pairing list", buf, 0xCu);
        if (v55 < 0)
          operator delete(*(void **)v54);
      }

    }
    v11 = 1;
LABEL_82:
    sub_100034234((uint64_t)v48);
    return v11;
  }
  v35 = (id)qword_100999870;
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    if (sub_10045D35C())
    {
      if (*(_BYTE *)(a1 + 241))
        v36 = "Signed In";
      else
        v36 = "Not Signed in";
    }
    else
    {
      v36 = "Not Supported";
    }
    *(_DWORD *)v54 = 136315138;
    *(_QWORD *)&v54[4] = v36;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Magic pairing: %s", v54, 0xCu);
  }

  return 0;
}

void sub_10045F0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  void *v41;

  sub_100043728(&a40);
  sub_100034234((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t sub_10045F220(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *a1;
  v3 = (_QWORD *)a1[1];
  if ((_QWORD *)*a1 != v3)
  {
    v4 = -v2;
    do
    {
      v5 = *(_QWORD **)v2;
      if (**(_QWORD **)v2 == a2)
      {
        if (*((char *)v5 + 111) < 0)
          operator delete((void *)v5[11]);
        operator delete();
      }
      v2 += 8;
      v4 -= 8;
    }
    while ((_QWORD *)v2 != v3);
  }
  return 0;
}

uint64_t sub_10045F2D4(uint64_t a1)
{
  uint64_t **v2;
  int v3;
  NSObject *v4;
  uint8_t v6[16];
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 104);
  v2 = *(uint64_t ***)(a1 + 176);
  if (v2 == *(uint64_t ***)(a1 + 184))
    goto LABEL_12;
  do
    v3 = sub_100460960(a1, **v2++);
  while (v2 != *(uint64_t ***)(a1 + 184));
  if (v3)
  {
LABEL_12:
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
      sub_1006F2D08();
  }
  else
  {
    v4 = qword_100999870;
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Successfully stored MagicPairing device information in storage", v6, 2u);
    }
    sub_10046C644(a1);
  }
  return sub_100034234((uint64_t)v7);
}

void sub_10045F3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10045F3E4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;

  v3 = a2;
  v4 = (id)qword_100999870;
  v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(*(_QWORD *)(a1 + 32), __p);
      sub_1006F2D68();
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(*(_QWORD *)(a1 + 32), __p);
    v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MP-] Removed cloud device for %{public}s", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }

}

void sub_10045F504(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10045F524(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;

  v3 = a2;
  v4 = (id)qword_100999870;
  v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(*(_QWORD *)(a1 + 32), __p);
      sub_1006F2DAC();
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(*(_QWORD *)(a1 + 32), __p);
    v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MP-] Removed new cloud magic settings for %{public}s", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }

}

void sub_10045F644(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10045F664(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;

  v3 = a2;
  v4 = (id)qword_100999870;
  v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(*(_QWORD *)(a1 + 32), __p);
      sub_1006F2DF0();
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(*(_QWORD *)(a1 + 32), __p);
    v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MP-] Removed Device Support Information for %{public}s", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }

}

void sub_10045F784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10045F7A4(uint64_t a1)
{
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  NSObject *v13;
  int buf;
  uint8_t buf_4[8];

  if (sub_10045D35C() && *(_BYTE *)(a1 + 240))
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092FC10);
    if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
    {
      v2 = *(unsigned __int8 *)(a1 + 241);
      v3 = qword_100999870;
      v4 = os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT);
      if (v2)
      {
        if (v4)
        {
          v5 = (uint64_t)(*(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176)) >> 3;
          buf = 134217984;
          *(_QWORD *)buf_4 = v5;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CloudSync: Uploading information for %lu devices to cloud", (uint8_t *)&buf, 0xCu);
        }
        v6 = *(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176);
        if (v6)
        {
          is_mul_ok(v6 >> 3, 0x98uLL);
          operator new[]();
        }
        v13 = qword_100999870;
        if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "CloudSync: pushing updates to legacy layer", (uint8_t *)&buf, 2u);
        }
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 168) + 40))(*(_QWORD *)(a1 + 168), 0, 0);
        return;
      }
      if (!v4)
        return;
      LOWORD(buf) = 0;
      v11 = "Warning: Account not signed in";
      v12 = v3;
    }
    else
    {
      v10 = qword_100999870;
      if (!os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
        return;
      LOWORD(buf) = 0;
      v11 = "System has not passed first unlock (or device prefs not read yet). Do not write DeviceList to Cloud";
      v12 = v10;
    }
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&buf, 2u);
    return;
  }
  v7 = (id)qword_100999870;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = sub_10045D35C();
    v9 = "supported";
    if (v8)
      v9 = "initialized";
    buf = 136315138;
    *(_QWORD *)buf_4 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "writeDeviceListToCloud, Magic Pairing not %s.", (uint8_t *)&buf, 0xCu);
  }

}

void sub_1004604B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;

  _Unwind_Resume(a1);
}

void sub_100460584(uint64_t a1, uint64_t a2)
{
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;
  _QWORD v11[2];

  if (sub_10045D35C() && *(_BYTE *)(a1 + 240))
  {
    if (a2)
    {
      if (*(_OWORD *)(a1 + 49) == 0 || *(_OWORD *)(a1 + 65) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
          sub_1006F2E8C();
      }
      else
      {
        v11[0] = 0;
        v11[1] = 0;
        if (!sub_10022A6A4(a1 + 65, a2 + 56, (uint64_t)v11, 0x10uLL)
          && LODWORD(v11[0]) == *(_DWORD *)(*(_QWORD *)a2 + 128)
          && WORD2(v11[0]) == *(unsigned __int16 *)(*(_QWORD *)a2 + 132))
        {
          if (sub_1004607FC((uint64_t *)a2, a1 + 49, a1 + 65))
          {
            if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
              sub_1006F2EB8();
          }
          else
          {
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 84) = 2;
            v5 = (id)qword_100999870;
            if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043E5F8(*(_QWORD *)a2, __p);
              v6 = v8 >= 0 ? __p : (void **)__p[0];
              *(_DWORD *)buf = 136446210;
              v10 = v6;
              _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Reset Magic Pairing keys for device %{public}s", buf, 0xCu);
              if (v8 < 0)
                operator delete(__p[0]);
            }

            if (*(_BYTE *)(a1 + 48))
            {
              LOBYTE(__p[0]) = 0;
              sub_100043758(__p);
              sub_10045E1AC(a1);
              sub_100043728(__p);
            }
            sub_100460960(a1, *(_QWORD *)a2);
          }
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
    {
      sub_1006F2E60();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
  {
    sub_1006F2E34();
  }
}

void sub_1004607D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1004607FC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t i;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t result;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v5 = *a1;
  v16 = 0;
  v15 = 0;
  v13 = *(_DWORD *)(v5 + 128);
  v14 = *(_WORD *)(v5 + 132);
  v6 = (char *)(v5 + 133);
  for (i = 6; i != 12; ++i)
  {
    v8 = *v6--;
    *((_BYTE *)&v13 + i) = v8;
  }
  v9 = *(_BYTE *)(v5 + 129);
  v17 = v9 ^ *(_BYTE *)(v5 + 128);
  v10 = *(_BYTE *)(v5 + 130);
  v18 = v10 ^ v9;
  v11 = *(_BYTE *)(v5 + 131);
  v19 = v11 ^ v10;
  v20 = *(_BYTE *)(v5 + 132) ^ v11;
  if (sub_10022A708(a2, (uint64_t)&v13, (uint64_t)(a1 + 5), 0x10uLL))
  {
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
      sub_1006F2F44();
  }
  else
  {
    result = sub_10022A708(a3, (uint64_t)&v13, (uint64_t)(a1 + 7), 0x10uLL);
    if (!(_DWORD)result)
      return result;
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
      sub_1006F2EE4();
  }
  return 1;
}

uint64_t sub_100460960(uint64_t a1, uint64_t a2)
{
  _QWORD *i;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  _BYTE *v13;
  NSObject *v14;
  _BYTE *v15;
  NSObject *v16;
  _BYTE *v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  _QWORD *v21;
  int v22;
  int v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  int v29;
  _BYTE *v30;
  int v31;
  char v32;
  _BYTE *v33;
  NSObject *v34;
  int v35;
  NSObject *v36;
  int v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  unsigned int v41;
  char v42;
  _BYTE __p[18];
  __int16 v44;
  int v45;
  __int16 v46;
  _QWORD *v47;
  __int16 v48;
  int v49;
  _BYTE buf[18];
  char v51;

  if (!a2)
    return 1;
  for (i = *(_QWORD **)(a1 + 176); i != *(_QWORD **)(a1 + 184); ++i)
  {
    v5 = (_QWORD *)*i;
    if (*(_QWORD *)*i == a2)
      goto LABEL_7;
  }
  v5 = 0;
LABEL_7:
  v41 = bswap32(*((_DWORD *)v5 + 18));
  v42 = *((_DWORD *)v5 + 21);
  v6 = sub_10034D508();
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v6 + 88))(v6, a2, 0, v5 + 5);
  if (!(_DWORD)result)
  {
    v8 = sub_10034D508();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v8 + 88))(v8, a2, 3, v5 + 3);
    if (!(_DWORD)result)
    {
      v9 = sub_10034D508();
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v9 + 88))(v9, a2, 2, v5 + 1);
      if (!(_DWORD)result)
      {
        v10 = sub_10034D508();
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v10 + 88))(v10, a2, 1, v5 + 7);
        if (!(_DWORD)result)
        {
          v11 = sub_10034D508();
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)v11 + 88))(v11, a2, 4, &v41);
          if (!(_DWORD)result)
          {
            if ((sub_100442118(a2, 12) & 1) != 0 || sub_100442118(a2, 39))
            {
              *(_QWORD *)__p = 0;
              sub_10004AD30((uint64_t)__p);
              *(_QWORD *)&v40 = *(int *)__p;
              *((_QWORD *)&v40 + 1) = *(__int16 *)&__p[4];
              if (!sub_10043F854(a2))
              {
                v12 = (id)qword_100999870;
                if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
                {
                  sub_10043E5F8(a2, __p);
                  v13 = v45 >= 0 ? __p : *(_BYTE **)__p;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = v13;
                  _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Applying workaround for Apple Audio Device: BT_DEVICE_TYPE_GENERIC->BT_DEVICE_TYPE_HEADPHONES for %{public}s", buf, 0xCu);
                  if (SHIBYTE(v45) < 0)
                    operator delete(*(void **)__p);
                }

                sub_100440378(a2, 20, &v40);
              }
              HIDWORD(v39) = 0;
              sub_10043FA40(a2, (_DWORD *)&v39 + 1);
              if (!HIDWORD(v39))
              {
                v14 = (id)qword_100999870;
                if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
                {
                  sub_10043E5F8(a2, __p);
                  v15 = v45 >= 0 ? __p : *(_BYTE **)__p;
                  *(_DWORD *)buf = 67109378;
                  *(_DWORD *)&buf[4] = 2098200;
                  *(_WORD *)&buf[8] = 2082;
                  *(_QWORD *)&buf[10] = v15;
                  _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Applying workaround for Apple Audio Device, CoD: 0->%u for %{public}s", buf, 0x12u);
                  if (SHIBYTE(v45) < 0)
                    operator delete(*(void **)__p);
                }

                sub_1004447DC(a2, 2098200, &v40);
              }
            }
            else
            {
              v16 = (id)qword_100999870;
              if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
              {
                sub_10043E5F8(a2, __p);
                v17 = v45 >= 0 ? __p : *(_BYTE **)__p;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = v17;
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Cannot apply workaround this device is not Apple Audio Device: %{public}s", buf, 0xCu);
                if (SHIBYTE(v45) < 0)
                  operator delete(*(void **)__p);
              }

            }
            v18 = sub_100027F68();
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
            if ((_DWORD)result)
            {
              LODWORD(v40) = 0;
              v39 = 0;
              v38 = 0;
              sub_100444BF0(a2, &v40, (_DWORD *)&v39 + 1, &v39, &v38);
              v19 = qword_100999870;
              if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)__p = 0;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump: ----------------- Magic Pairing Manager ------------------", __p, 2u);
              }
              v20 = (id)qword_100999870;
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
              {
                v21 = (_QWORD *)(a1 + 216);
                if (*(char *)(a1 + 239) < 0)
                  v21 = (_QWORD *)*v21;
                v22 = *(unsigned __int8 *)(a1 + 241);
                if (sub_10045D35C())
                  v23 = *(unsigned __int8 *)(a1 + 240);
                else
                  v23 = 0;
                *(_DWORD *)__p = 136315650;
                *(_QWORD *)&__p[4] = v21;
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = v22;
                v44 = 1024;
                v45 = v23;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Cloud Account ID: %s, Cloud Signed in: %d, Initialized: %d", __p, 0x18u);
              }

              v24 = qword_100999870;
              if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
              {
                *(_QWORD *)__p = 0x1004100202;
                *(_WORD *)&__p[8] = 2096;
                *(_QWORD *)&__p[10] = a1 + 49;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Cached Acc Master Key:%.16P", __p, 0x12u);
              }
              v25 = qword_100999870;
              if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
              {
                *(_QWORD *)__p = 0x1004100202;
                *(_WORD *)&__p[8] = 2096;
                *(_QWORD *)&__p[10] = a1 + 65;
                _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Cached Acc Master Hint:%.16P", __p, 0x12u);
              }
              v26 = qword_100999870;
              if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
              {
                *(_QWORD *)__p = 0x1004100202;
                *(_WORD *)&__p[8] = 2096;
                *(_QWORD *)&__p[10] = a1 + 81;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Cached Acc Master Cloud IRK:%.16P", __p, 0x12u);
              }
              v27 = qword_100999870;
              if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
              {
                *(_QWORD *)__p = 0x604100202;
                *(_WORD *)&__p[8] = 2096;
                *(_QWORD *)&__p[10] = a1 + 97;
                _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Cached Acc Master Cloud Addr:%.6P", __p, 0x12u);
              }
              v28 = (id)qword_100999870;
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
              {
                sub_10043E5F8(a2, buf);
                v29 = v51;
                v30 = *(_BYTE **)buf;
                v31 = HIDWORD(v39);
                v37 = v39;
                v32 = sub_100447C64(a2);
                v33 = buf;
                *(_DWORD *)__p = 136446978;
                if (v29 < 0)
                  v33 = v30;
                *(_QWORD *)&__p[4] = v33;
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = v31;
                v44 = 1024;
                v45 = v37;
                v46 = 1024;
                LODWORD(v47) = v32 & 2;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "statedump: Cached Device %{public}s, vid: %x, pid: %x, Fake: %d", __p, 0x1Eu);
                if (v51 < 0)
                  operator delete(*(void **)buf);
              }

              v34 = qword_100999870;
              if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
              {
                v35 = *((_DWORD *)v5 + 18);
                *(_QWORD *)__p = 0x1004100502;
                *(_WORD *)&__p[8] = 2096;
                *(_QWORD *)&__p[10] = v5 + 5;
                v44 = 1040;
                v45 = 16;
                v46 = 2096;
                v47 = v5 + 7;
                v48 = 1024;
                v49 = v35;
                _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Cached Acc Key %.16P for Hint %.16P and Ratchet %d ", __p, 0x28u);
              }
              v36 = qword_100999870;
              if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
              {
                *(_QWORD *)__p = 0x1004100402;
                *(_WORD *)&__p[8] = 2096;
                *(_QWORD *)&__p[10] = v5 + 1;
                v44 = 1040;
                v45 = 16;
                v46 = 2096;
                v47 = v5 + 3;
                _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Cached IRK %.16P and Encryption key %.16P", __p, 0x22u);
              }
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_100461124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

uint64_t sub_100461188(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  unsigned __int8 **i;
  unsigned __int8 *v8;
  int v9;
  NSObject *v10;
  const char *v11;
  void **v12;
  NSObject *v13;
  int v14;
  _BYTE *v15;
  void *v16;
  NSObject *v18;
  const char *v19;
  void **v20;
  void **v21;
  _QWORD v22[2];
  _BYTE buf[12];
  __int16 v24;
  void **v25;
  char v26;
  void *__p;
  __int16 v28;
  int v29;
  __int16 v30;
  _BYTE *v31;
  _QWORD v32[2];

  result = IsAppleInternalBuild(a1);
  if ((_DWORD)result)
  {
    result = sub_10045D35C();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a1 + 240))
      {
        v22[0] = 0;
        v22[1] = 0;
        sub_10003415C((uint64_t)v22, a1 + 104);
        for (i = *(unsigned __int8 ***)(a1 + 176); ; ++i)
        {
          if (i == *(unsigned __int8 ***)(a1 + 184))
            return sub_100034234((uint64_t)v22);
          v8 = *i;
          if (*(_QWORD *)*i == a2)
            break;
        }
        v32[0] = 0;
        v32[1] = 0;
        v9 = v8[72];
        if (!sub_10022A6A4(a1 + 65, (uint64_t)(v8 + 56), (uint64_t)v32, 0x10uLL)
          && (LODWORD(v32[0]) != *(_DWORD *)(*(_QWORD *)v8 + 128)
           || WORD2(v32[0]) != *(unsigned __int16 *)(*(_QWORD *)v8 + 132)))
        {
          v18 = (id)qword_100999870;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            v19 = sub_1002292BC(a3);
            sub_10043E5F8(a2, &__p);
            v20 = SHIBYTE(v31) >= 0 ? &__p : (void **)__p;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v19;
            v24 = 2082;
            v25 = v20;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Bad Main Account Keys; Unable to simulate Magic Pairing Error %s for device %{public}s",
              buf,
              0x16u);
            if (SHIBYTE(v31) < 0)
              operator delete(__p);
          }

          return sub_100034234((uint64_t)v22);
        }
        v10 = (id)qword_100999870;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          v11 = sub_1002292BC(a3);
          sub_10043E5F8(a2, &__p);
          v12 = SHIBYTE(v31) >= 0 ? &__p : (void **)__p;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v11;
          v24 = 2082;
          v25 = v12;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Simulating Magic Pairing Error %s for device %{public}s", buf, 0x16u);
          if (SHIBYTE(v31) < 0)
            operator delete(__p);
        }

        if (a3 == 7)
        {
          if (sub_1004607FC((uint64_t *)v8, a1 + 49, a1 + 65))
          {
            if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
              sub_1006F2EB8();
            return sub_100034234((uint64_t)v22);
          }
          v13 = (id)qword_100999870;
          if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            goto LABEL_44;
          sub_10043E5F8(a2, &__p);
          v21 = SHIBYTE(v31) >= 0 ? &__p : (void **)__p;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v21;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Simulating Magic Pairing Error reset accessory key without changing ratchet for device %{public}s", buf, 0xCu);
          if ((SHIBYTE(v31) & 0x80000000) == 0)
            goto LABEL_44;
          v16 = __p;
        }
        else
        {
          if (a3 != 1)
          {
LABEL_45:
            if (*(_BYTE *)(a1 + 48))
            {
              LOBYTE(__p) = 0;
              sub_100043758(&__p);
              sub_10045E1AC(a1);
              sub_100043728(&__p);
            }
            sub_100460960(a1, *(_QWORD *)v8);
            return sub_100034234((uint64_t)v22);
          }
          *((_DWORD *)v8 + 18) = v9 + 10;
          v13 = (id)qword_100999870;
          if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            goto LABEL_44;
          v14 = *((_DWORD *)v8 + 18);
          sub_10043E5F8(a2, buf);
          v15 = v26 >= 0 ? buf : *(_BYTE **)buf;
          LODWORD(__p) = 67109634;
          HIDWORD(__p) = v9;
          v28 = 1024;
          v29 = v14;
          v30 = 2082;
          v31 = v15;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Simulating Magic Pairing Error bumped ratchet from %d -> %d for device %{public}s", (uint8_t *)&__p, 0x18u);
          if ((v26 & 0x80000000) == 0)
          {
LABEL_44:

            goto LABEL_45;
          }
          v16 = *(void **)buf;
        }
        operator delete(v16);
        goto LABEL_44;
      }
    }
  }
  return result;
}

void sub_10046156C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004615D4(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD **v10;
  NSObject *v11;
  void **v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  void *__p[2];
  char v20;
  _QWORD v21[2];
  uint8_t buf[4];
  void **v23;

  if (!*(_BYTE *)(a2 + 128))
  {
    v13 = 0;
    while (v13 != 5)
    {
      v14 = v13;
      if (*(unsigned __int8 *)(a2 + 129 + v13++))
      {
        if (v14 < 5)
          goto LABEL_2;
        break;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
      sub_1006F2FA4();
    return 1;
  }
LABEL_2:
  if (*(_OWORD *)(a1 + 49) == 0 || !*(_BYTE *)(a1 + 241))
  {
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
      sub_1006F2FD0();
    return 1;
  }
  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 104);
  v8 = *(_QWORD **)(a1 + 176);
  v9 = *(_QWORD **)(a1 + 184);
  if (v8 == v9)
  {
LABEL_8:
    v11 = (id)qword_100999870;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      if (v20 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v23 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "creating new Magic pairing device for device %{public}s", buf, 0xCu);
      if (v20 < 0)
        operator delete(__p[0]);
    }

    operator new();
  }
  v10 = *(_QWORD ***)(a1 + 176);
  while (**v10 != a2)
  {
    if (++v10 == v9)
      goto LABEL_8;
  }
  while (v8 != v9)
  {
    v17 = (_QWORD *)*v8;
    if (*(_QWORD *)*v8 == a2)
      goto LABEL_28;
    ++v8;
  }
  v17 = 0;
LABEL_28:
  v16 = 0;
  *a3 = *(_OWORD *)(v17 + 5);
  *a4 = *(_OWORD *)(v17 + 7);
  sub_100034234((uint64_t)v21);
  return v16;
}

void sub_1004619B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004619F4(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _OWORD *v7;
  uint64_t result;
  int v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD v13[2];
  uint8_t buf[4];
  int v15;
  __int16 v16;
  uint64_t v17;
  _QWORD v18[2];

  v3 = a1 + 49;
  if (*(_OWORD *)(a1 + 49) == 0 || !*(_BYTE *)(a1 + 241))
  {
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
      sub_1006F3028();
  }
  else
  {
    v7 = (_OWORD *)(a1 + 81);
    if (*(_OWORD *)(a1 + 81) != 0)
    {
LABEL_4:
      result = 0;
      *a2 = *v7;
      v9 = *(_DWORD *)(a1 + 97);
      *(_WORD *)(a3 + 4) = *(_WORD *)(a1 + 101);
      *(_DWORD *)a3 = v9;
      return result;
    }
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
      sub_1006F3174();
    v13[0] = 0;
    v13[1] = 0;
    sub_10003415C((uint64_t)v13, a1 + 104);
    v18[0] = 0;
    v18[1] = 0;
    *(_DWORD *)(a1 + 97) = 0;
    *(_WORD *)(a1 + 101) = 0;
    if (sub_10022A708(v3, a1 + 65, a1 + 81, 0x10uLL))
    {
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
        sub_1006F3114();
    }
    else if (sub_10022A708(a1 + 65, v3, (uint64_t)v18, 0x10uLL))
    {
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
        sub_1006F30B4();
    }
    else
    {
      *(_DWORD *)(a1 + 97) = v18[0];
      *(_WORD *)(a1 + 101) = WORD2(v18[0]);
      v10 = qword_100999870;
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68157954;
        v15 = 16;
        v16 = 2096;
        v17 = a1 + 81;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "fcCloudIRK %.16P ", buf, 0x12u);
      }
      v11 = qword_100999870;
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68157954;
        v15 = 6;
        v16 = 2096;
        v17 = a1 + 97;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "fMasterCloudAddress %.6P ", buf, 0x12u);
      }
      v12 = sub_10034D508();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 160))(v12, a1 + 81, a1 + 97))
      {
        sub_100034234((uint64_t)v13);
        goto LABEL_4;
      }
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
        sub_1006F3054();
    }
    sub_100034234((uint64_t)v13);
  }
  return 1;
}

void sub_100461CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100461CE4(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  _WORD **v6;
  _WORD **v7;
  _QWORD **v8;
  _WORD *v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  __int16 v16;
  uint8_t buf[8];
  uint64_t v19;

  if (!sub_10045D35C())
    return 2;
  if (!*(_BYTE *)(a2 + 128))
  {
    v13 = 0;
    while (v13 != 5)
    {
      v14 = v13;
      if (*(unsigned __int8 *)(a2 + 129 + v13++))
      {
        if (v14 < 5)
          goto LABEL_3;
        break;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
      sub_1006F31A0();
    return 1;
  }
LABEL_3:
  if (*(_OWORD *)(a1 + 49) == 0 || !*(_BYTE *)(a1 + 241))
  {
    v11 = qword_100999870;
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(unsigned __int8 *)(a1 + 241);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Device not signed in / master key not available. signed in = %d", buf, 8u);
    }
    return 1;
  }
  *(_QWORD *)buf = 0;
  v19 = 0;
  sub_10003415C((uint64_t)buf, a1 + 104);
  v6 = *(_WORD ***)(a1 + 176);
  v7 = *(_WORD ***)(a1 + 184);
  if (v6 == v7)
LABEL_9:
    operator new();
  v8 = *(_QWORD ***)(a1 + 176);
  while (**v8 != a2)
  {
    if (++v8 == (_QWORD **)v7)
      goto LABEL_9;
  }
  while (1)
  {
    v9 = *v6;
    if (*(_QWORD *)*v6 == a2)
      break;
    if (++v6 == v7)
    {
      v9 = 0;
      break;
    }
  }
  if (a3)
  {
    *(_OWORD *)(v9 + 4) = *a3;
    *((_BYTE *)v9 + 77) = 0;
    v16 = *(_WORD *)(*(_QWORD *)v9 + 132);
    *(_DWORD *)(v9 + 39) = *(_DWORD *)(*(_QWORD *)v9 + 128);
    v9[41] = v16;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 144))(*(_QWORD *)(a1 + 168));
  v10 = 0;
  sub_100034234((uint64_t)buf);
  return v10;
}

void sub_10046200C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

__n128 sub_100462028(_WORD *a1, __n128 *a2)
{
  __n128 result;
  __int16 v3;

  if (a2)
  {
    result = *a2;
    *(__n128 *)(a1 + 4) = *a2;
    *((_BYTE *)a1 + 77) = 0;
    v3 = *(_WORD *)(*(_QWORD *)a1 + 132);
    *(_DWORD *)(a1 + 39) = *(_DWORD *)(*(_QWORD *)a1 + 128);
    a1[41] = v3;
  }
  return result;
}

uint64_t sub_100462050(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  NSObject *v6;
  void **v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD **v10;
  uint64_t v11;
  _QWORD *v12;
  NSObject *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  NSObject *v19;
  uint64_t v20;
  BOOL v21;
  NSObject *v22;
  void **v23;
  _QWORD *v24;
  uint8_t v25[4];
  void **v26;
  __int128 buf;
  void *__p[2];
  char v29;

  v6 = (id)qword_100999870;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v7 = v29 >= 0 ? __p : (void **)__p[0];
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "updating encryption key for device %{public}s", (uint8_t *)&buf, 0xCu);
    if (v29 < 0)
      operator delete(__p[0]);
  }

  if (!sub_10045D35C())
    return 2;
  if (!*(_BYTE *)(a2 + 128))
  {
    v15 = 0;
    while (v15 != 5)
    {
      v16 = v15;
      if (*(unsigned __int8 *)(a2 + 129 + v15++))
      {
        if (v16 < 5)
          goto LABEL_9;
        break;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
      sub_1006F31CC();
    return 1;
  }
LABEL_9:
  if (*(_OWORD *)(a1 + 49) == 0 || !*(_BYTE *)(a1 + 241))
  {
    v13 = qword_100999870;
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(unsigned __int8 *)(a1 + 241);
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Device not signed in / master key not available. signed in = %d", (uint8_t *)__p, 8u);
    }
    return 1;
  }
  if (*(_BYTE *)(a1 + 240))
  {
    buf = 0uLL;
    sub_10003415C((uint64_t)&buf, a1 + 104);
    v8 = *(_QWORD **)(a1 + 176);
    v9 = *(_QWORD **)(a1 + 184);
    if (v8 == v9)
LABEL_16:
      operator new();
    v10 = *(_QWORD ***)(a1 + 176);
    while (**v10 != a2)
    {
      if (++v10 == v9)
        goto LABEL_16;
    }
    while (1)
    {
      v12 = (_QWORD *)*v8;
      if (*(_QWORD *)*v8 == a2)
        break;
      if (++v8 == v9)
      {
        v12 = 0;
        break;
      }
    }
    v20 = v12[3];
    v24 = v12;
    v21 = v20 == *a3 && v12[4] == a3[1];
    if (v21 && *((_DWORD *)v12 + 21) == 1)
    {
      v22 = (id)qword_100999870;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        if (v29 >= 0)
          v23 = __p;
        else
          v23 = (void **)__p[0];
        *(_DWORD *)v25 = 136446210;
        v26 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Encryption key for device %{public}s is already up to date", v25, 0xCu);
        if (v29 < 0)
          operator delete(__p[0]);
      }

    }
    else
    {
      if (a3)
        *(_OWORD *)(v12 + 3) = *(_OWORD *)a3;
      sub_10045F7A4(a1);
    }
    v11 = 0;
    sub_100034234((uint64_t)&buf);
  }
  else
  {
    v19 = qword_100999870;
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "updateDeviceEncryptionKey, Magic Pairing Layer not initialized", (uint8_t *)__p, 2u);
    }
    return 17;
  }
  return v11;
}

void sub_1004624A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004624D8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  NSObject *v6;
  _BYTE *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD **v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  NSObject *v18;
  _QWORD *v19;
  _QWORD **v20;
  _QWORD *v21;
  unsigned int v22;
  NSObject *v23;
  _BYTE *v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD v27[2];
  _BYTE buf[12];
  __int16 v29;
  unsigned int v30;
  char v31;
  _BYTE __p[18];
  __int16 v33;
  int v34;

  if (!sub_10045D35C())
    return 2;
  if (!*(_BYTE *)(a2 + 128))
  {
    v14 = 0;
    while (v14 != 5)
    {
      v15 = v14;
      if (*(unsigned __int8 *)(a2 + 129 + v14++))
      {
        if (v15 < 5)
          goto LABEL_3;
        break;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
      sub_1006F31F8();
    return 1;
  }
LABEL_3:
  if (*(_OWORD *)(a1 + 49) == 0 || !*(_BYTE *)(a1 + 241))
  {
    v12 = qword_100999870;
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(unsigned __int8 *)(a1 + 241);
      *(_DWORD *)__p = 67109120;
      *(_DWORD *)&__p[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Device not signed in / master key not available. signed in = %d", __p, 8u);
    }
    return 1;
  }
  if (*(_BYTE *)(a1 + 240))
  {
    v27[0] = 0;
    v27[1] = 0;
    sub_10003415C((uint64_t)v27, a1 + 104);
    v6 = (id)qword_100999870;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      v7 = v34 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v7;
      v29 = 1024;
      v30 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "MagicPairingManager::updateDeviceRatchet from device %{public}s, ratchet %d", buf, 0x12u);
      if (SHIBYTE(v34) < 0)
        operator delete(*(void **)__p);
    }

    v8 = *(_QWORD **)(a1 + 184);
    v9 = *(_QWORD **)(a1 + 176);
    if (v9 == v8)
LABEL_16:
      operator new();
    v10 = *(_QWORD ***)(a1 + 176);
    while (**v10 != a2)
    {
      if (++v10 == v8)
        goto LABEL_16;
    }
    v19 = (_QWORD *)*v9;
    if (*(_QWORD *)*v9 != a2)
    {
      v20 = (_QWORD **)(v9 + 1);
      do
      {
        v21 = *v20++;
        v19 = v21;
      }
      while (*v21 != a2);
    }
    v26 = v19;
    v22 = *((_DWORD *)v19 + 18);
    v23 = (id)qword_100999870;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, buf);
      v24 = v31 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)__p = 136446722;
      *(_QWORD *)&__p[4] = v24;
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = v22;
      v33 = 1024;
      v34 = a3;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "MagicPairingManager::updateDeviceRatchet from device %{public}s, current %d -> new %d", __p, 0x18u);
      if (v31 < 0)
        operator delete(*(void **)buf);
    }

    v25 = a3 - v22;
    if (a3 != v22)
    {
      if (a3 > v22)
      {
        while (1)
        {
          *(_QWORD *)__p = 0;
          *(_QWORD *)&__p[8] = 0;
          if (sub_100229BE0((uint64_t)(v19 + 5), (uint64_t)__p))
            break;
          v19 = v26;
          *(_OWORD *)(v26 + 5) = *(_OWORD *)__p;
          if (!--v25)
          {
            v22 = a3;
            goto LABEL_46;
          }
        }
        if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
          sub_1006F3224();
        v11 = 1;
        goto LABEL_52;
      }
LABEL_46:
      if (v22)
        *((_DWORD *)v19 + 18) = v22;
      if (*(_BYTE *)(a1 + 48))
      {
        __p[0] = 0;
        sub_100043758(__p);
        sub_10045E1AC(a1);
        sub_100043728(__p);
      }
      sub_100460960(a1, a2);
    }
    v11 = 0;
LABEL_52:
    sub_100034234((uint64_t)v27);
    return v11;
  }
  v18 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__p = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "updateDeviceRatchet, Magic Pairing Layer not initialized", __p, 2u);
  }
  return 17;
}

void sub_1004629C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100462A10(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  NSObject *v7;
  _BOOL4 v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];

  if ((sub_10045D35C() & 1) != 0)
  {
    if (*a2 != *(_QWORD *)(a1 + 49) || a2[1] != *(_QWORD *)(a1 + 57))
    {
      if (!a2 || !a3)
        goto LABEL_31;
      goto LABEL_20;
    }
    v9 = *a3 != *(_QWORD *)(a1 + 65) || a3[1] != *(_QWORD *)(a1 + 73);
    if (a2 && a3 && v9)
    {
LABEL_20:
      v10 = qword_100999870;
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(unsigned __int8 *)(a1 + 240);
        LODWORD(v19) = 67109376;
        HIDWORD(v19) = v11;
        LOWORD(v20[0]) = 1024;
        *(_DWORD *)((char *)v20 + 2) = 1;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "MagicPairingInitialized: %d, keysChanged: %d, Cloud master keys are updated. Updating local keys", (uint8_t *)&v19, 0xEu);
      }
      *(_OWORD *)(a1 + 49) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 65) = *(_OWORD *)a3;
      v12 = sub_10034D508();
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 152))(v12, a1 + 49, a1 + 65);
      v14 = sub_100027F68();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14))
      {
        v15 = qword_100999870;
        if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
        {
          v19 = 0x1004100202;
          LOWORD(v20[0]) = 2096;
          *(_QWORD *)((char *)v20 + 2) = a1 + 49;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "cloudKeysAvailable Acc Master Key:%.16P", (uint8_t *)&v19, 0x12u);
        }
        v16 = qword_100999870;
        if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
        {
          v19 = 0x1004100202;
          LOWORD(v20[0]) = 2096;
          *(_QWORD *)((char *)v20 + 2) = a1 + 65;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "cloudKeysAvailable Acc Master Hint:%.16P", (uint8_t *)&v19, 0x12u);
        }
      }
      if (v13)
      {
        if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
          sub_1006F3448();
      }
      else
      {
        v19 = 0;
        v20[0] = 0;
        sub_10003415C((uint64_t)&v19, a1 + 104);
        v17 = *(_QWORD *)(a1 + 176);
        v18 = *(_QWORD *)(a1 + 184);
        sub_100034234((uint64_t)&v19);
        if (v17 == v18 && !*(_BYTE *)(a1 + 240))
        {
          if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
            sub_1006F341C();
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 32))(*(_QWORD *)(a1 + 168));
        }
      }
      return;
    }
    if (v9)
    {
LABEL_31:
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEBUG))
        sub_1006F33B8();
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
        sub_1006F3350();
      return;
    }
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEBUG))
      sub_1006F32EC();
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
      sub_1006F3284();
  }
  else
  {
    v7 = qword_100999870;
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v19) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "cloudKeysAvailable, Magic Pairing not supported", (uint8_t *)&v19, 2u);
    }
  }
}

void sub_100462DA8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  sub_100462A10(a1 - 8, a2, a3);
}

uint64_t sub_100462DB0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 ***i;
  NSObject *v6;
  __n128 *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  NSObject *v17;
  __n128 *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[5];
  _QWORD v28[2];
  __n128 __p;
  int v30;
  char v31;
  uint8_t buf[4];
  __n128 *v33;

  v28[0] = 0;
  v28[1] = 0;
  sub_10003415C((uint64_t)v28, a1 + 104);
  v4 = *(unsigned __int8 **)a2;
  for (i = *(unsigned __int8 ****)(a1 + 176); i != *(unsigned __int8 ****)(a1 + 184); ++i)
  {
    if (**i == v4)
    {
      v17 = (id)qword_100999870;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8((uint64_t)v4, &__p);
        v18 = v31 >= 0 ? &__p : (__n128 *)__p.n128_u64[0];
        *(_DWORD *)buf = 136446210;
        v33 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Update Magic pairing device from cloud %{public}s", buf, 0xCu);
        if (v31 < 0)
          operator delete((void *)__p.n128_u64[0]);
      }

      goto LABEL_35;
    }
  }
  v6 = (id)qword_100999870;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8((uint64_t)v4, &__p);
    v7 = v31 >= 0 ? &__p : (__n128 *)__p.n128_u64[0];
    *(_DWORD *)buf = 136446210;
    v33 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "New Magic pairing device from cloud %{public}s", buf, 0xCu);
    if (v31 < 0)
      operator delete((void *)__p.n128_u64[0]);
  }

  v8 = *(_QWORD *)(a1 + 192);
  v9 = *(_QWORD **)(a1 + 184);
  if ((unint64_t)v9 >= v8)
  {
    v11 = *(_QWORD *)(a1 + 176);
    v12 = ((uint64_t)v9 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      abort();
    v13 = v8 - v11;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
      v16 = (char *)sub_10007ABA0(a1 + 192, v15);
    else
      v16 = 0;
    v19 = &v16[8 * v12];
    v20 = &v16[8 * v15];
    *(_QWORD *)v19 = a2;
    v10 = v19 + 8;
    v22 = *(char **)(a1 + 176);
    v21 = *(char **)(a1 + 184);
    if (v21 != v22)
    {
      do
      {
        v23 = *((_QWORD *)v21 - 1);
        v21 -= 8;
        *((_QWORD *)v19 - 1) = v23;
        v19 -= 8;
      }
      while (v21 != v22);
      v21 = *(char **)(a1 + 176);
    }
    *(_QWORD *)(a1 + 176) = v19;
    *(_QWORD *)(a1 + 184) = v10;
    *(_QWORD *)(a1 + 192) = v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v9 = a2;
    v10 = v9 + 1;
  }
  *(_QWORD *)(a1 + 184) = v10;
LABEL_35:
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10092FC30);
  if ((sub_1005BEA2C((uint64_t)off_100978158, v4) & 1) == 0 && *(_BYTE *)(a1 + 48))
  {
    if (qword_100978150 != -1)
      dispatch_once(&qword_100978150, &stru_10092FBF0);
    sub_1005B961C((uint64_t)off_100978148, (uint64_t)v4);
    __p = 0uLL;
    v30 = 0;
    sub_1005A9734((uint64_t)&__p, (_OWORD *)(a2 + 40), 4u);
    if (qword_100978160 != -1)
      dispatch_once(&qword_100978160, &stru_10092FC30);
    sub_1005BEC60((uint64_t)off_100978158, v4, &__p, 0);
    nullsub_90(&__p, v24);
  }
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10092FC30);
  sub_1005BF870((uint64_t)off_100978158, v4);
  if (*(_BYTE *)(a1 + 48))
  {
    __p.n128_u8[0] = 0;
    sub_100043758(&__p);
    sub_10045E1AC(a1);
    sub_10004339C(&__p);
    if (((unint64_t)*(unsigned __int8 *)(a2 + 78) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 79) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 80) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 81) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 82) << 8) | *(unsigned __int8 *)(a2 + 83))
    {
      v25 = sub_1000419F4();
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_100463230;
      v27[3] = &unk_100917378;
      v27[4] = a2;
      sub_100041A34(v25, v27);
    }
    sub_100043728(&__p);
  }
  sub_100460960(a1, (uint64_t)v4);
  *(_DWORD *)(a2 + 84) = 1;
  *(_BYTE *)(a1 + 240) = 1;
  return sub_100034234((uint64_t)v28);
}

void sub_1004631D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  va_list va;

  va_start(va, a6);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100463230(uint64_t a1)
{
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_10092FC50);
  sub_10066DE10((uint64_t)off_100977FA8, (unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 77), *(_QWORD *)(a1 + 32) + 24);
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_10092FC70);
  sub_100694CF4(qword_1009778B0, (unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 77), *(_QWORD *)(a1 + 32) + 8);
}

uint64_t sub_1004632C8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  __int16 v11;
  int v12;
  int *v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  NSObject *v24;
  _BYTE *v25;
  std::string *v26;
  uint64_t v27;
  _QWORD **i;
  _QWORD *v29;
  _BOOL4 v30;
  NSObject *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int16 *v37;
  int v38;
  uint64_t v39;
  unsigned __int16 *v40;
  int v41;
  int v42;
  NSObject *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  NSObject *v57;
  int v58;
  BOOL v59;
  unsigned int v60;
  unsigned int v61;
  NSObject *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  int v67;
  _BYTE *v68;
  int v69;
  _BYTE *v70;
  unsigned int v71;
  NSObject *v72;
  int v73;
  _BYTE *v74;
  int v75;
  _BYTE *v76;
  const char *v77;
  const char *v78;
  NSObject *v79;
  _BYTE *v80;
  int v81;
  uint64_t v82;
  NSObject *v83;
  int v84;
  _BYTE *v85;
  int v86;
  _BYTE *v87;
  NSObject *v88;
  int v89;
  _BYTE *v90;
  int v91;
  _BYTE *v92;
  uint64_t v93;
  NSObject *v94;
  int v95;
  _BYTE *v96;
  int v97;
  _BYTE *v98;
  NSObject *v99;
  int v100;
  _BYTE *v101;
  int v102;
  _BYTE *v103;
  unsigned int v104;
  NSObject *v105;
  int v106;
  _BYTE *v107;
  int v108;
  _BYTE *v109;
  uint64_t v110;
  NSObject *v111;
  int v112;
  _BYTE *v113;
  int v114;
  _BYTE *v115;
  char v116;
  char v117;
  NSObject *v118;
  int v119;
  _BYTE *v120;
  int v121;
  _BYTE *v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;
  NSObject *v129;
  uint64_t v130;
  int j;
  NSObject *v132;
  int v133;
  int v134;
  int v135;
  uint64_t *v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  uint64_t *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  NSObject *v150;
  std::string *v151;
  NSObject *v152;
  std::string *v153;
  std::string *v154;
  unsigned __int8 **v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  void *v159;
  std::string *v160;
  void *v161;
  void *v162;
  void *v163;
  std::string *v164;
  void *v165;
  void *v166;
  void *v167;
  std::string *v168;
  void *v169;
  int v170;
  NSObject *v171;
  NSObject *v172;
  std::string *v173;
  std::string *v174;
  uint64_t *k;
  uint64_t v176;
  NSObject *v177;
  const char *v178;
  NSObject *v179;
  uint64_t v180;
  unsigned __int8 **v181;
  unsigned __int8 *v182;
  int v183;
  _BOOL4 v184;
  uint64_t v185;
  BOOL v186;
  NSObject *v187;
  _BYTE *v188;
  _WORD *v190;
  uint64_t v191;
  _BYTE *v192;
  char v194;
  uint64_t v196;
  _QWORD v197[5];
  _QWORD v198[5];
  _QWORD v199[5];
  _QWORD v200[6];
  int v201;
  std::string __str;
  unsigned int v203;
  int v204;
  unint64_t v205;
  uint8_t v206;
  char v207[15];
  _QWORD v208[2];
  uint8_t v209[4];
  _BYTE *v210;
  _BYTE buf[40];
  _BYTE v212[14];
  _BYTE v213[12];
  __int16 v214;
  int v215;
  char v216;
  std::string v217;

  v208[1] = 0;
  v208[0] = 0;
  sub_10003415C((uint64_t)v208, a1 + 104);
  *(_BYTE *)(a1 + 242) = 1;
  v4 = (id)qword_100999870;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "device info update callback from cloudkit for %d devices", buf, 8u);
  }

  if (a3)
  {
    v5 = 0;
    v191 = a3;
    do
    {
      v6 = a2 + 152 * v5;
      *(_DWORD *)v209 = *(_DWORD *)v6;
      LOWORD(v210) = *(_WORD *)(v6 + 4);
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_10092FC10);
      v7 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)v209, 1);
      v8 = v7;
      v9 = a2 + 152 * v5;
      v11 = *(_WORD *)(v9 + 150);
      v10 = (_WORD *)(v9 + 150);
      if ((v11 & 2) != 0)
        sub_100447CA8(v7, 1, 1);
      v196 = v5;
      if (*(_BYTE *)(v8 + 128))
      {
LABEL_10:
        v205 = 0;
        v204 = 1;
        memset(&v217, 0, sizeof(v217));
        sub_100091AE8(&v217, (char *)(a2 + 152 * v5 + 74));
        v12 = 0;
        v13 = (int *)(a2 + 152 * v5 + 138);
        do
        {
          if ((*v13 & (1 << v12)) != 0)
          {
            *(_QWORD *)v213 = 0;
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = 0;
            sub_10004AD30((uint64_t)v213);
            *(_QWORD *)buf = *(int *)v213;
            *(_QWORD *)&buf[8] = *(__int16 *)&v213[4];
            sub_1004415B0(v8, 1 << v12, 4, buf, 0);
          }
          ++v12;
        }
        while (v12 != 31);
        v14 = (id)qword_100999850;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          v15 = *v13;
          if (qword_100977A78 != -1)
            dispatch_once(&qword_100977A78, &stru_10092FCB0);
          v16 = sub_100498AC8((uint64_t)off_100977A70, v8);
          v17 = *(unsigned __int8 *)(a2 + 152 * v196 + 130);
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)&buf[4] = v15;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v16;
          *(_WORD *)&buf[14] = 1024;
          *(_DWORD *)&buf[16] = v17;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Updating in memory device service capability details: received service mask %x, device service mask after update %x, blob version %d", buf, 0x14u);
        }

        v18 = sub_100027F68();
        v19 = a2;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18))
        {
          v20 = (id)qword_100999870;
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(v8, v213);
            v21 = v213;
            if (v216 < 0)
              v21 = *(_BYTE **)v213;
            v22 = a2 + 152 * v196;
            v23 = *(_DWORD *)(v22 + 38);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = v21;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v23;
            *(_WORD *)&buf[18] = 1040;
            *(_DWORD *)&buf[20] = 16;
            *(_WORD *)&buf[24] = 2096;
            *(_QWORD *)&buf[26] = v22 + 6;
            *(_WORD *)&buf[34] = 1040;
            *(_DWORD *)&buf[36] = 16;
            *(_WORD *)v212 = 2096;
            *(_QWORD *)&v212[2] = v22 + 22;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Update received for magic device %{public}s with info,  ratchet = %d accessory key %.16P and Hint %.16P", buf, 0x32u);
            if (v216 < 0)
              operator delete(*(void **)v213);
          }

          v24 = (id)qword_100999870;
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(v8, v213);
            v25 = v213;
            if (v216 < 0)
              v25 = *(_BYTE **)v213;
            v26 = &v217;
            if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v26 = (std::string *)v217.__r_.__value_.__r.__words[0];
            v27 = a2 + 152 * v196;
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = v25;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v26;
            *(_WORD *)&buf[22] = 1040;
            *(_DWORD *)&buf[24] = 16;
            *(_WORD *)&buf[28] = 2096;
            *(_QWORD *)&buf[30] = v27 + 42;
            *(_WORD *)&buf[38] = 1040;
            *(_DWORD *)v212 = 16;
            *(_WORD *)&v212[4] = 2096;
            *(_QWORD *)&v212[6] = v27 + 58;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Update received for magic device %{public}s with info,  name = %s IRK %.16P and Enc Key %.16P", buf, 0x36u);
            if (v216 < 0)
              operator delete(*(void **)v213);
          }

          v19 = a2;
        }
        for (i = *(_QWORD ***)(a1 + 176); i != *(_QWORD ***)(a1 + 184); ++i)
        {
          v29 = *i;
          if (**i == v8)
            goto LABEL_37;
        }
        v29 = 0;
LABEL_37:
        v203 = 0;
        v30 = sub_100444BF0(v8, &v203, (_DWORD *)&v205 + 1, &v205, &v204);
        v31 = (id)qword_100999870;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          v32 = v19 + 152 * v196;
          v33 = *(unsigned __int16 *)(v32 + 142);
          LODWORD(v32) = *(unsigned __int16 *)(v32 + 144);
          *(_DWORD *)buf = 67110400;
          *(_DWORD *)&buf[4] = v33;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v32;
          *(_WORD *)&buf[14] = 1024;
          *(_DWORD *)&buf[16] = v30;
          *(_WORD *)&buf[20] = 1024;
          *(_DWORD *)&buf[22] = HIDWORD(v205);
          *(_WORD *)&buf[26] = 1024;
          *(_DWORD *)&buf[28] = v205;
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v203;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Device vid/pid from cloud vid - %x, cloud pid - %x; (%d) Local vid - %x, Local pid - %x, Local vidSrc - %x",
            buf,
            0x26u);
        }

        v34 = a2;
        v35 = v196;
        v36 = a2 + 152 * v196;
        v38 = *(unsigned __int16 *)(v36 + 142);
        v37 = (unsigned __int16 *)(v36 + 142);
        if (v38)
        {
          v39 = a2 + 152 * v196;
          v41 = *(unsigned __int16 *)(v39 + 144);
          v40 = (unsigned __int16 *)(v39 + 144);
          if (v41)
          {
            if (v203 <= 1)
              v42 = 1;
            else
              v42 = v203;
            v43 = (id)qword_100999870;
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
            {
              v44 = *v37;
              v45 = *v40;
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)&buf[4] = v44;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v45;
              _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "New Magic Paired Device's Cloud vid - %x, Cloud pid - %x", buf, 0xEu);
            }

            v46 = *v37;
            v47 = *v40;
            v205 = __PAIR64__(v46, v47);
            sub_100445BAC(v8, v42, v46, v47, v204);
            v34 = a2;
            v35 = v196;
          }
        }
        v192 = (_BYTE *)(v34 + 152 * v35 + 130);
        v48 = v34;
        if (*v192)
        {
          v49 = v34 + 152 * v196;
          v52 = *(unsigned __int8 *)(v49 + 147);
          v50 = (_BYTE *)(v49 + 147);
          v51 = v52;
          v53 = v50[1];
          v54 = v53 & 0xF;
          v55 = v53 >> 4;
          v56 = v54 | (v53 >> 4 << 8);
          v57 = (id)qword_100999870;
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v56;
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "Retrieved double tap from cloud: %d", buf, 8u);
          }

          v190 = v10;
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_10092FC90);
          v58 = sub_100282EAC((uint64_t)off_100977A80, v8, v54 | (v55 << 8), (v51 >> 4) & 1);
          v59 = v56 == v58;
          if (v56 == v58)
            v60 = v54;
          else
            v60 = v58;
          if (v59)
            v61 = v55;
          else
            v61 = BYTE1(v58);
          if (sub_1004459D0(v8) != v58)
          {
            v62 = (id)qword_100999870;
            if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "Updating double tap settings from cloud", buf, 2u);
            }

            if ((v51 & 8) != 0)
            {
              if (qword_100977A88 != -1)
                dispatch_once(&qword_100977A88, &stru_10092FC90);
              sub_100285094((uint64_t)off_100977A80, v8, v61, v60, 4);
            }
          }
          v63 = *v50 & 3;
          if (v63 == 2)
            v64 = 2;
          else
            v64 = v63 == 1;
          if (sub_10044F5D0(v8) != (_DWORD)v64)
          {
            if (qword_100977A88 != -1)
              dispatch_once(&qword_100977A88, &stru_10092FC90);
            sub_100284E30((uint64_t)off_100977A80, v8, v64, 4u);
          }
          v65 = a2 + 152 * v196;
          if (*(_BYTE *)(v65 + 149))
          {
            sub_100451298(v8, *(unsigned __int8 *)(v65 + 149));
            v66 = (id)qword_100999870;
            if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043E5F8(v8, buf);
              v67 = buf[23];
              v68 = *(_BYTE **)buf;
              v69 = sub_1004512E8(v8);
              *(_DWORD *)v213 = 136446466;
              v70 = buf;
              if (v67 < 0)
                v70 = v68;
              *(_QWORD *)&v213[4] = v70;
              v214 = 1024;
              v215 = v69;
              _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Color info updated for device %{public}s, color code %d", v213, 0x12u);
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
            }

          }
          v71 = *v50 & 4;
          v72 = (id)qword_100999870;
          if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(v8, v213);
            v73 = v216;
            v74 = *(_BYTE **)v213;
            v75 = sub_10044F614(v8);
            v76 = v213;
            if (v73 < 0)
              v76 = v74;
            if (v71)
              v77 = "Enabled";
            else
              v77 = "Disabled";
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = v76;
            *(_WORD *)&buf[12] = 2080;
            if (v75)
              v78 = "Enabled";
            else
              v78 = "Disabled";
            *(_QWORD *)&buf[14] = v77;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = v78;
            _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "In Ear Detection state update from cloud for device %{public}s is %s, local state %s", buf, 0x20u);
            if (v216 < 0)
              operator delete(*(void **)v213);
          }

          if (sub_10044F614(v8) != v71 >> 2)
          {
            if (qword_100977A88 != -1)
              dispatch_once(&qword_100977A88, &stru_10092FC90);
            sub_100285264((uint64_t)off_100977A80, v8, v71 != 0, 4u);
          }
          v79 = (id)qword_100999870;
          if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(v8, buf);
            v80 = buf;
            if (buf[23] < 0)
              v80 = *(_BYTE **)buf;
            v81 = (unsigned __int16)*v190;
            *(_DWORD *)v213 = 136446466;
            *(_QWORD *)&v213[4] = v80;
            v214 = 1024;
            v215 = v81;
            _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "Update listening mode services for device %{public}s with service - %d", v213, 0x12u);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }

          v82 = ((unsigned __int16)*v190 >> 5) & 0x700 | ((unsigned __int16)*v190 >> 10) & 7u;
          v83 = (id)qword_100999870;
          if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(v8, v213);
            v84 = v216;
            v85 = *(_BYTE **)v213;
            v86 = sub_10044F8A0(v8);
            *(_DWORD *)buf = 136446722;
            v87 = v213;
            if (v84 < 0)
              v87 = v85;
            *(_QWORD *)&buf[4] = v87;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v86;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v82;
            _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "Click Hold mode info update for device %{public}s, current value: %d, cloud value %d", buf, 0x18u);
            if (v216 < 0)
              operator delete(*(void **)v213);
          }

          if ((_DWORD)v82 && sub_10044F8A0(v8) != (_DWORD)v82)
          {
            if (qword_100977A88 != -1)
              dispatch_once(&qword_100977A88, &stru_10092FC90);
            sub_100279E6C((uint64_t)off_100977A80, v8, 22, v82, 4u);
            v88 = (id)qword_100999870;
            if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043E5F8(v8, buf);
              v89 = buf[23];
              v90 = *(_BYTE **)buf;
              v91 = sub_10044F8A0(v8);
              *(_DWORD *)v213 = 136446466;
              v92 = buf;
              if (v89 < 0)
                v92 = v90;
              *(_QWORD *)&v213[4] = v92;
              v214 = 1024;
              v215 = v91;
              _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "Click Hold mode info updated for device %{public}s, new mode %d", v213, 0x12u);
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
            }

          }
          v93 = ((unsigned __int16)*v190 >> 7) & 7;
          v94 = (id)qword_100999870;
          if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(v8, v213);
            v95 = v216;
            v96 = *(_BYTE **)v213;
            v97 = sub_10044F74C(v8);
            *(_DWORD *)buf = 136446722;
            v98 = v213;
            if (v95 < 0)
              v98 = v96;
            *(_QWORD *)&buf[4] = v98;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v97;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v93;
            _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "Listening mode config update for device %{public}s, current value: %d, cloud configs: %d", buf, 0x18u);
            if (v216 < 0)
              operator delete(*(void **)v213);
          }

          if ((_DWORD)v93 && sub_10044F74C(v8) != (_DWORD)v93)
          {
            if (qword_100977A88 != -1)
              dispatch_once(&qword_100977A88, &stru_10092FC90);
            sub_100279E6C((uint64_t)off_100977A80, v8, 26, v93, 4u);
            v99 = (id)qword_100999870;
            if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043E5F8(v8, buf);
              v100 = buf[23];
              v101 = *(_BYTE **)buf;
              v102 = sub_10044F74C(v8);
              *(_DWORD *)v213 = 136446466;
              v103 = buf;
              if (v100 < 0)
                v103 = v101;
              *(_QWORD *)&v213[4] = v103;
              v214 = 1024;
              v215 = v102;
              _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "Listening mode config updated for device %{public}s, new configs %d", v213, 0x12u);
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
            }

          }
          v104 = *v190 & 0x40;
          v105 = (id)qword_100999870;
          if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(v8, v213);
            v106 = v216;
            v107 = *(_BYTE **)v213;
            v108 = sub_100442118(v8, 32);
            *(_DWORD *)buf = 136446722;
            v109 = v213;
            if (v106 < 0)
              v109 = v107;
            *(_QWORD *)&buf[4] = v109;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v108;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v104 >> 6;
            _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEFAULT, "TiPi supported flag update from macOS %{public}s, current local value: %d, macOS value: %d", buf, 0x18u);
            if (v216 < 0)
              operator delete(*(void **)v213);
          }

          if (v104)
          {
            if ((sub_100442118(v8, 32) & 1) == 0)
            {
              sub_1004467AC(v8, 32, 1);
              if (!sub_10044F658(v8))
                sub_10044D524(v8, 1);
            }
          }
          v110 = (*(unsigned __int8 *)v190 >> 2) & 3;
          v111 = (id)qword_100999870;
          if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(v8, v213);
            v112 = v216;
            v113 = *(_BYTE **)v213;
            v114 = sub_10044F96C(v8);
            *(_DWORD *)buf = 136446722;
            v115 = v213;
            if (v112 < 0)
              v115 = v113;
            *(_QWORD *)&buf[4] = v115;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v114;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v110;
            _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "One Bud ANC mode update for device %{public}s, current value: %d, cloud value %d", buf, 0x18u);
            if (v216 < 0)
              operator delete(*(void **)v213);
          }

          v116 = sub_100442118(v8, 43);
          v48 = a2;
          if ((_DWORD)v110)
            v117 = v116;
          else
            v117 = 1;
          if ((v117 & 1) == 0 && sub_10044F96C(v8) != (_DWORD)v110)
          {
            if (qword_100977A88 != -1)
              dispatch_once(&qword_100977A88, &stru_10092FC90);
            sub_100279E6C((uint64_t)off_100977A80, v8, 27, v110, 4u);
            v118 = (id)qword_100999870;
            if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043E5F8(v8, buf);
              v119 = buf[23];
              v120 = *(_BYTE **)buf;
              v121 = sub_10044F96C(v8);
              *(_DWORD *)v213 = 136446466;
              v122 = buf;
              if (v119 < 0)
                v122 = v120;
              *(_QWORD *)&v213[4] = v122;
              v214 = 1024;
              v215 = v121;
              _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEFAULT, "One Bud ANC mode updated for device %{public}s, new mode %d", v213, 0x12u);
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
            }

            v48 = a2;
          }
        }
        if (!v29)
          operator new();
        v123 = v48 + 152 * v196;
        *(_OWORD *)(v29 + 5) = *(_OWORD *)(v123 + 6);
        *(_OWORD *)(v29 + 7) = *(_OWORD *)(v123 + 22);
        v124 = *(_DWORD *)(v123 + 38);
        if (v124)
          *((_DWORD *)v29 + 18) = v124;
        v125 = v48 + 152 * v196;
        *(_OWORD *)(v29 + 1) = *(_OWORD *)(v125 + 42);
        *((_BYTE *)v29 + 77) = 0;
        v126 = *(_WORD *)(*v29 + 132);
        *(_DWORD *)((char *)v29 + 78) = *(_DWORD *)(*v29 + 128);
        *((_WORD *)v29 + 41) = v126;
        *(_OWORD *)(v29 + 3) = *(_OWORD *)(v125 + 58);
        if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
          sub_10003430C(&__str, v217.__r_.__value_.__l.__data_, v217.__r_.__value_.__l.__size_);
        else
          __str = v217;
        std::string::operator=((std::string *)(v29 + 11), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        sub_100440D9C(v8, (uint64_t)&v217, 1);
        *((_DWORD *)v29 + 21) = 2;
        if (*(_BYTE *)(a1 + 48)
          && ((unint64_t)*((unsigned __int8 *)v29 + 78) << 40) | ((unint64_t)*((unsigned __int8 *)v29 + 79) << 32) | ((unint64_t)*((unsigned __int8 *)v29 + 80) << 24) | ((unint64_t)*((unsigned __int8 *)v29 + 81) << 16) | ((unint64_t)*((unsigned __int8 *)v29 + 82) << 8) | *((unsigned __int8 *)v29 + 83))
        {
          v130 = sub_1000419F4();
          v200[0] = _NSConcreteStackBlock;
          v200[1] = 3221225472;
          v200[2] = sub_100465B18;
          v200[3] = &unk_1009180B0;
          v200[4] = v29;
          v200[5] = v48;
          v201 = v196;
          sub_100023D84(v130, v200);
        }
        for (j = 0; j != 31; ++j)
        {
          if ((*v13 & (1 << j)) != 0)
          {
            *(_QWORD *)v213 = 0;
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = 0;
            sub_10004AD30((uint64_t)v213);
            *(_QWORD *)buf = *(int *)v213;
            *(_QWORD *)&buf[8] = *(__int16 *)&v213[4];
            sub_1004415B0(v8, 1 << j, 4, buf, 1);
          }
        }
        v132 = (id)qword_100999850;
        if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
        {
          v133 = *v13;
          if (qword_100977A78 != -1)
            dispatch_once(&qword_100977A78, &stru_10092FCB0);
          v134 = sub_100498AC8((uint64_t)off_100977A70, v8);
          v135 = *v192;
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)&buf[4] = v133;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v134;
          *(_WORD *)&buf[14] = 1024;
          *(_DWORD *)&buf[16] = v135;
          _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_DEFAULT, "Device service capability details: received service mask %x, device service mask after update %x, blob version %d", buf, 0x14u);
        }

        if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v217.__r_.__value_.__l.__data_);
      }
      else
      {
        v127 = 0;
        while (v127 != 5)
        {
          if (*(unsigned __int8 *)(v8 + 129 + v127++))
          {
            if ((unint64_t)(v127 - 1) < 5)
              goto LABEL_10;
            break;
          }
        }
        v129 = (id)qword_100999870;
        if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
          sub_1006F34A8(&v206, v207, v129);

      }
      v5 = v196 + 1;
    }
    while (v196 + 1 != v191);
  }
  memset(buf, 0, 24);
  v136 = *(uint64_t **)(a1 + 176);
  if (v136 != *(uint64_t **)(a1 + 184))
  {
    v194 = 0;
    while (1)
    {
      v137 = *v136;
      v138 = *(_DWORD *)(*v136 + 84);
      if (v138 == 1)
      {
        *(_DWORD *)(v137 + 84) = 3;
        v139 = *(_QWORD *)v137;
        v140 = *(_QWORD *)&buf[8];
        if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
        {
          v142 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
          if ((unint64_t)(v142 + 1) >> 61)
            abort();
          v143 = (uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 2;
          if (v143 <= v142 + 1)
            v143 = v142 + 1;
          if (*(_QWORD *)&buf[16] - *(_QWORD *)buf >= 0x7FFFFFFFFFFFFFF8uLL)
            v144 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v144 = v143;
          if (v144)
            v145 = (char *)sub_10007ABA0((uint64_t)&buf[16], v144);
          else
            v145 = 0;
          v146 = (uint64_t *)&v145[8 * v142];
          *v146 = v139;
          v141 = v146 + 1;
          v148 = *(char **)buf;
          v147 = *(char **)&buf[8];
          if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
          {
            do
            {
              v149 = *((_QWORD *)v147 - 1);
              v147 -= 8;
              *--v146 = v149;
            }
            while (v147 != v148);
            v147 = *(char **)buf;
          }
          *(_QWORD *)buf = v146;
          *(_QWORD *)&buf[8] = v141;
          *(_QWORD *)&buf[16] = &v145[8 * v144];
          if (v147)
            operator delete(v147);
        }
        else
        {
          **(_QWORD **)&buf[8] = v139;
          v141 = (_QWORD *)(v140 + 8);
        }
        *(_QWORD *)&buf[8] = v141;
        v150 = (id)qword_100999870;
        if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(*(_QWORD *)v137, &v217);
          v151 = (v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &v217
               : (std::string *)v217.__r_.__value_.__r.__words[0];
          *(_DWORD *)v213 = 136446210;
          *(_QWORD *)&v213[4] = v151;
          _os_log_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_DEFAULT, "Local device info for device %{public}s needs to be pruned", v213, 0xCu);
          if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v217.__r_.__value_.__l.__data_);
        }

        v138 = *(_DWORD *)(v137 + 84);
      }
      if (!v138)
        break;
      if (v138 == 2)
      {
        *(_DWORD *)(v137 + 84) = 1;
        v152 = (id)qword_100999870;
        if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(*(_QWORD *)v137, &v217);
          v153 = (v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &v217
               : (std::string *)v217.__r_.__value_.__r.__words[0];
          *(_DWORD *)v213 = 136446210;
          *(_QWORD *)&v213[4] = v153;
          _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_DEFAULT, "Local device info for device %{public}s needs to be updated", v213, 0xCu);
          if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v217.__r_.__value_.__l.__data_);
        }
LABEL_227:

      }
      if (++v136 == *(uint64_t **)(a1 + 184))
        goto LABEL_231;
    }
    v152 = (id)qword_100999870;
    if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(*(_QWORD *)v137, &v217);
      v154 = (v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &v217
           : (std::string *)v217.__r_.__value_.__r.__words[0];
      *(_DWORD *)v213 = 136446210;
      *(_QWORD *)&v213[4] = v154;
      _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_DEFAULT, "Local device info for device %{public}s needs to be sent to cloud", v213, 0xCu);
      if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v217.__r_.__value_.__l.__data_);
    }
    v194 = 1;
    goto LABEL_227;
  }
  v194 = 0;
LABEL_231:
  sub_100034264((uint64_t)v208);
  v155 = *(unsigned __int8 ***)buf;
  if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
  {
    while (1)
    {
      v156 = sub_10034D508();
      (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v156 + 104))(v156, *v155);
      if (*(_BYTE *)(a1 + 48))
        break;
LABEL_266:
      if (++v155 == *(unsigned __int8 ***)&buf[8])
        goto LABEL_267;
    }
    v157 = (uint64_t)*v155;
    v158 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
    v159 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v158, "cloudClient"));
    sub_10046E9BC((unsigned __int8 *)(v157 + 128), &v217);
    if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v160 = &v217;
    else
      v160 = (std::string *)v217.__r_.__value_.__r.__words[0];
    v161 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v160));
    v199[0] = _NSConcreteStackBlock;
    v199[1] = 3221225472;
    v199[2] = sub_1004660BC;
    v199[3] = &unk_10092FA30;
    v199[4] = v157;
    objc_msgSend(v159, "deleteDeviceRecord:completion:", v161, v199);

    if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v217.__r_.__value_.__l.__data_);

    v162 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
    v163 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v162, "cloudClient"));
    sub_10046E9BC((unsigned __int8 *)(v157 + 128), &v217);
    if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v164 = &v217;
    else
      v164 = (std::string *)v217.__r_.__value_.__r.__words[0];
    v165 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v164));
    v198[0] = _NSConcreteStackBlock;
    v198[1] = 3221225472;
    v198[2] = sub_1004661FC;
    v198[3] = &unk_10092FA30;
    v198[4] = v157;
    objc_msgSend(v163, "deleteMagicSettingsRecord:completion:", v165, v198);

    if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v217.__r_.__value_.__l.__data_);

    v166 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
    v167 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v166, "cloudClient"));
    sub_10046E9BC((unsigned __int8 *)(v157 + 128), &v217);
    if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v168 = &v217;
    else
      v168 = (std::string *)v217.__r_.__value_.__r.__words[0];
    v169 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v168));
    v197[0] = _NSConcreteStackBlock;
    v197[1] = 3221225472;
    v197[2] = sub_10046633C;
    v197[3] = &unk_10092FA30;
    v197[4] = v157;
    objc_msgSend(v167, "deleteDeviceSupportInformationRecord:completion:", v169, v197);

    if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v217.__r_.__value_.__l.__data_);

    if (!sub_10043FC5C(v157))
    {
LABEL_263:
      if (qword_100978150 != -1)
        dispatch_once(&qword_100978150, &stru_10092FBF0);
      sub_1005B8744((uint64_t)off_100978148, *v155);
      goto LABEL_266;
    }
    v209[0] = 0;
    sub_100043758(v209);
    v170 = sub_10018070C(v157 + 128);
    v171 = (id)qword_100999870;
    v172 = v171;
    if (v170)
    {
      if (os_log_type_enabled(v171, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(v157, &v217);
        if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v173 = &v217;
        else
          v173 = (std::string *)v217.__r_.__value_.__r.__words[0];
        *(_DWORD *)v213 = 136315394;
        *(_QWORD *)&v213[4] = v173;
        v214 = 1024;
        v215 = v170;
        _os_log_error_impl((void *)&_mh_execute_header, v172, OS_LOG_TYPE_ERROR, "Magic Pairing disconnect failed for %s when removing magic pairing status: %d", v213, 0x12u);
        goto LABEL_260;
      }
    }
    else if (os_log_type_enabled(v171, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v157, &v217);
      if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v174 = &v217;
      else
        v174 = (std::string *)v217.__r_.__value_.__r.__words[0];
      *(_DWORD *)v213 = 136315138;
      *(_QWORD *)&v213[4] = v174;
      _os_log_impl((void *)&_mh_execute_header, v172, OS_LOG_TYPE_DEFAULT, "Magic Pairing disconnected for %s as update is from legacy cloud removing magic pairing", v213, 0xCu);
LABEL_260:
      if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v217.__r_.__value_.__l.__data_);
    }

    sub_100043728(v209);
    goto LABEL_263;
  }
LABEL_267:
  sub_100034188((uint64_t)v208);
  for (k = *(uint64_t **)(a1 + 176); k != *(uint64_t **)(a1 + 184); ++k)
  {
    v176 = *k;
    if (*(_DWORD *)(*k + 84) == 3)
    {
      if (*(char *)(v176 + 111) < 0)
        operator delete(*(void **)(v176 + 88));
      operator delete();
    }
  }
  sub_100034264((uint64_t)v208);
  if (*(_BYTE *)(a1 + 48))
  {
    v217.__r_.__value_.__s.__data_[0] = 0;
    sub_100043758(&v217);
    sub_10045E1AC(a1);
    sub_100043728(&v217);
  }
  sub_10045F2D4(a1);
  *(_BYTE *)(a1 + 242) = 0;
  v177 = (id)qword_100999870;
  if (os_log_type_enabled(v177, OS_LOG_TYPE_DEFAULT))
  {
    v178 = "No";
    if ((v194 & 1) != 0)
      v178 = "Yes";
    LODWORD(v217.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v217.__r_.__value_.__r.__words + 4) = (std::string::size_type)v178;
    _os_log_impl((void *)&_mh_execute_header, v177, OS_LOG_TYPE_DEFAULT, "Magic Device list Update Required ? %{public}s", (uint8_t *)&v217, 0xCu);
  }

  if ((v194 & 1) != 0)
    sub_10045F7A4(a1);
  if (!*(_BYTE *)(a1 + 240))
  {
    v179 = (id)qword_100999870;
    if (os_log_type_enabled(v179, OS_LOG_TYPE_DEFAULT))
    {
      v180 = (uint64_t)(*(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176)) >> 3;
      LODWORD(v217.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)v217.__r_.__value_.__r.__words + 4) = v180;
      _os_log_impl((void *)&_mh_execute_header, v179, OS_LOG_TYPE_DEFAULT, "Initial Magic Devices Initialized with devices: %lu", (uint8_t *)&v217, 0xCu);
    }

    *(_BYTE *)(a1 + 240) = 1;
    memset(&v217, 0, sizeof(v217));
    if (qword_100977898 != -1)
      dispatch_once(&qword_100977898, &stru_10092FCD0);
    sub_10006D830((uint64_t)off_100977890, (void **)&v217.__r_.__value_.__l.__data_);
    v181 = (unsigned __int8 **)v217.__r_.__value_.__r.__words[0];
    if (v217.__r_.__value_.__r.__words[0] != v217.__r_.__value_.__l.__size_)
    {
      do
      {
        v182 = *v181;
        v183 = (*v181)[952];
        if (_os_feature_enabled_impl("BluetoothFeatures", "GAPA"))
        {
          if ((sub_100447C64((uint64_t)v182) & 2) != 0)
          {
            v184 = 0;
          }
          else
          {
            if (qword_100977A88 != -1)
              dispatch_once(&qword_100977A88, &stru_10092FC90);
            v184 = sub_10027EA3C((uint64_t)off_100977A80, (uint64_t)v182);
          }
        }
        else
        {
          v184 = 1;
        }
        v185 = sub_10043F65C((uint64_t)v182, 0x80000u);
        if (v183)
          v186 = 0;
        else
          v186 = (_DWORD)v185 == 4;
        if (v186 && v184 && !v182[981] && (!v182[980] || sub_10045E940(v185, (uint64_t)v182)))
        {
          v187 = (id)qword_100999870;
          if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8((uint64_t)v182, v213);
            v188 = v213;
            if (v216 < 0)
              v188 = *(_BYTE **)v213;
            *(_DWORD *)v209 = 136446210;
            v210 = v188;
            _os_log_impl((void *)&_mh_execute_header, v187, OS_LOG_TYPE_DEFAULT, "Send Magic Keys to connected device: %{public}s", v209, 0xCu);
            if (v216 < 0)
              operator delete(*(void **)v213);
          }

          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_10092FC90);
          sub_1002830C8((uint64_t)off_100977A80, v182);
        }
        ++v181;
      }
      while (v181 != (unsigned __int8 **)v217.__r_.__value_.__l.__size_);
      v181 = (unsigned __int8 **)v217.__r_.__value_.__r.__words[0];
    }
    if (v181)
    {
      v217.__r_.__value_.__l.__size_ = (std::string::size_type)v181;
      operator delete(v181);
    }
  }
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  return sub_100034234((uint64_t)v208);
}

void sub_1004656E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 - 144);
  if (v3)
  {
    *(_QWORD *)(v1 - 136) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 240);
  if (v4)
  {
    *(_QWORD *)(v1 - 232) = v4;
    operator delete(v4);
  }
  sub_100034234((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_100465B18(uint64_t a1)
{
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_10092FC50);
  sub_10066DE10((uint64_t)off_100977FA8, (unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 77), *(_QWORD *)(a1 + 40) + 152 * *(int *)(a1 + 48) + 58);
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_10092FC70);
  sub_100694CF4(qword_1009778B0, (unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 77), *(_QWORD *)(a1 + 40) + 152 * *(int *)(a1 + 48) + 42);
}

void sub_100465BCC(uint64_t a1)
{
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_10092FC50);
  sub_10066DE10((uint64_t)off_100977FA8, (unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 77), *(_QWORD *)(a1 + 40) + 152 * *(int *)(a1 + 48) + 58);
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_10092FC70);
  sub_100694CF4(qword_1009778B0, (unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 77), *(_QWORD *)(a1 + 40) + 152 * *(int *)(a1 + 48) + 42);
}

void sub_100465C7C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  _BOOL4 v8;
  void *v9;
  BOOL v10;
  id v11;
  int v12;
  BOOL v13;
  NSObject *v15;
  std::string *v16;
  void *v17;
  BOOL v18;
  id v19;
  unint64_t v20;
  NSObject *v21;
  _BYTE *v22;
  unint64_t v23;
  _BYTE v24[12];
  __int16 v25;
  int v26;
  char v27;
  std::string buf;

  v5 = a2;
  v6 = a3;
  v7 = qword_100999870;
  v8 = os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT);
  if (!v5 || v6)
  {
    if (v8)
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 138412546;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "After legacy magic pairing, unable to fetch magic setting record: %@, Error: %@", (uint8_t *)&buf, 0x16u);
    }
  }
  else
  {
    if (v8)
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "After legacy magic pairing, fetched magic setting record: %@", (uint8_t *)&buf, 0xCu);
    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deviceIDFeatureBitsV1"));
    v10 = objc_msgSend(v9, "length") == 0;

    if (!v10)
    {
      LODWORD(v23) = 0;
      v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deviceIDFeatureBitsV1")));
      sub_100091AE8(&buf, (char *)objc_msgSend(v11, "UTF8String"));
      v12 = std::stoul(&buf, 0, 0);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);

      v13 = sub_1004466D8(*(_QWORD *)(a1 + 32), &v23);
      if ((_DWORD)v23 != v12 || !v13)
      {
        v15 = (id)qword_100999870;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          sub_10046E9BC((unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 128), &buf);
          v16 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          *(_DWORD *)v24 = 136446466;
          *(_QWORD *)&v24[4] = v16;
          v25 = 1024;
          v26 = v12;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Fetched iCloud update for DID supported feature bits version 1, address: %{public}s, supported feature bits 0x%x", v24, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }

        sub_100445F58(*(_QWORD *)(a1 + 32), v12, 0);
      }
    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deviceIDFeatureBitsV2"));
    v18 = objc_msgSend(v17, "length") == 0;

    if (!v18)
    {
      v23 = 0;
      v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deviceIDFeatureBitsV2")));
      sub_100091AE8(&buf, (char *)objc_msgSend(v19, "UTF8String"));
      v20 = std::stoull(&buf, 0, 0);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);

      if (!sub_100446790(*(_QWORD *)(a1 + 32), &v23) || v23 != (HIDWORD(v20) | (v20 << 32)))
      {
        v21 = (id)qword_100999870;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          sub_10046E9BC((unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 128), v24);
          if (v27 >= 0)
            v22 = v24;
          else
            v22 = *(_BYTE **)v24;
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446722;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = HIDWORD(v20);
          WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(buf.__r_.__value_.__r.__words[2]) = v20;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Apply Fetched iCloud update for DID extended supported feature bits version 2, address: %{public}s, extended supported feature bits I1: 0x%x, I2: 0x%x", (uint8_t *)&buf, 0x18u);
          if (v27 < 0)
            operator delete(*(void **)v24);
        }

        HIDWORD(v23) |= v20;
        sub_100446234(*(_QWORD *)(a1 + 32), v23, 0);
      }
    }
  }

}

void sub_10046601C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1004660BC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;

  v3 = a2;
  v4 = (id)qword_100999870;
  v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(*(_QWORD *)(a1 + 32), __p);
      sub_1006F34DC();
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(*(_QWORD *)(a1 + 32), __p);
    v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MP] Removed cloud device for %{public}s", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }

}

void sub_1004661DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1004661FC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;

  v3 = a2;
  v4 = (id)qword_100999870;
  v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(*(_QWORD *)(a1 + 32), __p);
      sub_1006F3520();
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(*(_QWORD *)(a1 + 32), __p);
    v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MP] Removed new cloud magic settings for %{public}s", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }

}

void sub_10046631C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10046633C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;

  v3 = a2;
  v4 = (id)qword_100999870;
  v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(*(_QWORD *)(a1 + 32), __p);
      sub_1006F3564();
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(*(_QWORD *)(a1 + 32), __p);
    v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MP] Removed cloud info settings for %{public}s", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }

}

void sub_10046645C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10046647C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return sub_1004632C8(a1 - 8, a2, a3);
}

void sub_100466484(uint64_t a1, int a2, const std::string *a3)
{
  char v6;
  NSObject *v7;
  _BOOL4 v8;
  const char *v9;
  const std::string *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  std::string __p;
  _BYTE buf[22];
  __int16 v17;
  const std::string *v18;

  v6 = sub_10045D35C();
  v7 = qword_100999870;
  v8 = os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT);
  if ((v6 & 1) != 0)
  {
    if (v8)
    {
      v9 = "Signed in";
      if (!a2)
        v9 = "Not Signed in";
      v10 = a3;
      if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
        v10 = (const std::string *)a3->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446723;
      *(_QWORD *)&buf[4] = v9;
      *(_WORD *)&buf[12] = 2160;
      *(_QWORD *)&buf[14] = 1752392040;
      v17 = 2081;
      v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received Cloud Sign in status as %{public}s for %{private, mask.hash}s", buf, 0x20u);
    }
    *(_BYTE *)(a1 + 241) = a2;
    if (a2)
    {
      std::string::operator=((std::string *)(a1 + 216), a3);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168));
      if (*(_OWORD *)(a1 + 49) != 0)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        sub_10003415C((uint64_t)buf, a1 + 104);
        v11 = *(_QWORD *)(a1 + 176);
        v12 = *(_QWORD *)(a1 + 184);
        sub_100034234((uint64_t)buf);
        if (v11 == v12 && !*(_BYTE *)(a1 + 240))
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 32))(*(_QWORD *)(a1 + 168));
      }
      sub_1004666F8(a1);
    }
    else
    {
      sub_10045DC3C(a1, 0);
    }
    sub_100466804(a1);
    if (qword_10097AA50 != -1)
      dispatch_once(&qword_10097AA50, &stru_10092FCF0);
    v13 = qword_10097AA48;
    v14 = *(unsigned __int8 *)(a1 + 241);
    if (*(char *)(a1 + 239) < 0)
      sub_10003430C(&__p, *(void **)(a1 + 216), *(_QWORD *)(a1 + 224));
    else
      __p = *(std::string *)(a1 + 216);
    sub_100264AB0(v13, v14 != 0, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else if (v8)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "cloudSignStatusChanged, Magic Pairing not supported", buf, 2u);
  }
}

void sub_1004666D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1004666F8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  dispatch_time_t v4;
  NSObject *v5;
  _QWORD block[5];
  uint8_t buf[4];
  int v8;

  v2 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 245);
    *(_DWORD *)buf = 67109120;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Resync Local Records to Cloud, in-progress - %d", buf, 8u);
  }
  if (!*(_BYTE *)(a1 + 245))
  {
    if (*(_QWORD *)(a1 + 208))
    {
      *(_BYTE *)(a1 + 245) = 1;
      v4 = dispatch_time(0, 120000000000);
      v5 = *(NSObject **)(a1 + 208);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100469304;
      block[3] = &unk_100917378;
      block[4] = a1;
      dispatch_after(v4, v5, block);
    }
  }
}

void sub_100466804(uint64_t a1)
{
  const __CFString *v1;
  const char *v3;
  CFStringRef v4;
  CFStringRef v5;

  v1 = CFSTR("SignedOut");
  if (!*(_BYTE *)(a1 + 241))
  {
    v4 = 0;
    goto LABEL_15;
  }
  v3 = (const char *)(a1 + 216);
  if (*(char *)(a1 + 239) < 0)
  {
    if (!*(_QWORD *)(a1 + 224))
    {
LABEL_14:
      v4 = 0;
      v1 = CFSTR("SignedIn");
      goto LABEL_15;
    }
    v3 = *(const char **)v3;
  }
  else if (!*(_BYTE *)(a1 + 239))
  {
    goto LABEL_14;
  }
  v5 = CFStringCreateWithCString(0, v3, 0x8000100u);
  if (v5)
    v4 = v5;
  else
    v4 = 0;
  if (*(_BYTE *)(a1 + 241))
    v1 = CFSTR("SignedIn");
LABEL_15:
  CFPreferencesSetAppValue(CFSTR("SignInstatus"), v1, CFSTR("com.apple.BTServer"));
  CFPreferencesSetAppValue(CFSTR("CloudAccountID"), v4, CFSTR("com.apple.BTServer"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.BTServer"));
  if (v4)
    CFRelease(v4);
}

void sub_1004668EC(uint64_t a1, int a2, const std::string *a3)
{
  sub_100466484(a1 - 8, a2, a3);
}

void sub_1004668F4(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  _OWORD *v5;
  NSObject *v6;
  const char *v7;
  _BYTE v8[24];
  _OWORD *v9;

  *a2 = *(_BYTE *)(a1 + 241);
  v5 = (_OWORD *)(a1 + 216);
  if (*(char *)(a1 + 239) < 0)
  {
    sub_10003430C(v8, *(void **)(a1 + 216), *(_QWORD *)(a1 + 224));
  }
  else
  {
    *(_OWORD *)v8 = *v5;
    *(_QWORD *)&v8[16] = *(_QWORD *)(a1 + 232);
  }
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = *(_OWORD *)v8;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&v8[16];
  v6 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    v7 = "Signed in";
    if (!*(_BYTE *)(a1 + 241))
      v7 = "Not Signed in";
    if (*(char *)(a1 + 239) < 0)
      v5 = *(_OWORD **)v5;
    *(_DWORD *)v8 = 136446723;
    *(_QWORD *)&v8[4] = v7;
    *(_WORD *)&v8[12] = 2160;
    *(_QWORD *)&v8[14] = 1752392040;
    *(_WORD *)&v8[22] = 2081;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Current Cloud Sign in status as %{public}s with login %{private, mask.hash}s", v8, 0x20u);
  }
}

uint64_t sub_100466A3C(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v5;
  _QWORD **v6;
  _QWORD **v7;
  _QWORD *v8;
  NSObject *v9;
  uint8_t *v10;
  char *v11;
  NSObject *v12;
  _BYTE *v13;
  BOOL v14;
  NSObject *v16;
  NSObject *v17;
  _BYTE *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  NSObject *v24;
  uint8_t *v25;
  _BOOL4 v27;
  __int16 v28;
  uint64_t v29;
  uint8_t *v30;
  int v31;
  void **v32;
  void **v33;
  void **v34;
  NSObject *v35;
  uint8_t *v36;
  int v37;
  void **v38;
  void **v39;
  void **v40;
  _QWORD v41[5];
  std::string __str;
  void *__p[2];
  char v44;
  void *__dst[2];
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  _QWORD v50[2];
  _BYTE buf[32];
  uint8_t v52[23];
  char v53;

  if (a3 > 4096)
  {
    v5 = result;
    v50[0] = 0;
    v50[1] = 0;
    sub_10003415C((uint64_t)v50, result + 104);
    v6 = *(_QWORD ***)(v5 + 176);
    v7 = *(_QWORD ***)(v5 + 184);
    if (v6 == v7)
      return sub_100034234((uint64_t)v50);
    while (1)
    {
      v8 = *v6;
      if (**v6 == a2)
        break;
      if (++v6 == v7)
        return sub_100034234((uint64_t)v50);
    }
    v9 = (id)qword_100999870;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, v52);
      v10 = v53 >= 0 ? v52 : *(uint8_t **)v52;
      v11 = *(_BYTE *)(v5 + 242) ? "in" : "not in";
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = a3;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = v10;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Local Magic device info changed (%d) for device %{public}s with cloud sync is %{public}s progress", buf, 0x1Cu);
      if (v53 < 0)
        operator delete(*(void **)v52);
    }

    if (*(_BYTE *)(v5 + 242))
      return sub_100034234((uint64_t)v50);
    switch(a3)
    {
      case 4102:
        if ((sub_100447C64(a2) & 2) != 0)
        {
          v17 = (id)qword_100999870;
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(a2, buf);
            v18 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
            *(_DWORD *)v52 = 136446210;
            *(_QWORD *)&v52[4] = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Fake magic paired device %{public}s", v52, 0xCu);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }

          v19 = *((_DWORD *)v8 + 21);
          if (v19 != 1)
          {
            if (!v19)
            {
              sub_10043F78C(a2, (uint64_t)buf);
              sub_100440D9C(a2, (uint64_t)buf, 0);
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
              sub_10045F220((uint64_t *)(v5 + 176), a2);
              v20 = sub_10034D508();
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 104))(v20, a2);
            }
            return sub_100034234((uint64_t)v50);
          }
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_10092FC90);
          if (!sub_10027DF9C((uint64_t)off_100977A80, (_DWORD *)a2))
            return sub_100034234((uint64_t)v50);
          v27 = v8[3] != 0x101010101010101 || v8[4] != 0x101010101010101;
          v8[1] = 0x101010101010101;
          v8[2] = 0x101010101010101;
          *((_BYTE *)v8 + 77) = 0;
          v28 = *(_WORD *)(*v8 + 132);
          *(_DWORD *)((char *)v8 + 78) = *(_DWORD *)(*v8 + 128);
          *((_WORD *)v8 + 41) = v28;
          v8[3] = 0x101010101010101;
          v8[4] = 0x101010101010101;
          if (*(_BYTE *)(v5 + 48)
            && ((unint64_t)*((unsigned __int8 *)v8 + 78) << 40) | ((unint64_t)*((unsigned __int8 *)v8 + 79) << 32) | ((unint64_t)*((unsigned __int8 *)v8 + 80) << 24) | ((unint64_t)*((unsigned __int8 *)v8 + 81) << 16) | ((unint64_t)*((unsigned __int8 *)v8 + 82) << 8) | *((unsigned __int8 *)v8 + 83))
          {
            v29 = sub_1000419F4();
            v41[0] = _NSConcreteStackBlock;
            v41[1] = 3221225472;
            v41[2] = sub_100467414;
            v41[3] = &unk_100917378;
            v41[4] = v8;
            sub_100041A34(v29, v41);
          }
          if (!v27)
            return sub_100034234((uint64_t)v50);
        }
        else
        {
          if (*((_DWORD *)v8 + 21))
            return sub_100034234((uint64_t)v50);
          if ((sub_100447C64(a2) & 2) != 0)
          {
            if (qword_100977A88 != -1)
              dispatch_once(&qword_100977A88, &stru_10092FC90);
            if (!sub_10027EA3C((uint64_t)off_100977A80, a2))
              return sub_100034234((uint64_t)v50);
          }
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_10092FC90);
          if ((sub_10027DF9C((uint64_t)off_100977A80, (_DWORD *)a2) & 1) != 0)
            return sub_100034234((uint64_t)v50);
          v12 = (id)qword_100999870;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(a2, buf);
            v13 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
            *(_DWORD *)v52 = 136446210;
            *(_QWORD *)&v52[4] = v13;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Seems like genuine magic paired device %{public}s, needs to be synced", v52, 0xCu);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }

        }
        break;
      case 4099:
        __dst[0] = 0;
        v14 = sub_100446790(a2, __dst);
        if (HIDWORD(__dst[0]) == -1 && v14)
        {
          v16 = (id)qword_100999870;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            sub_10046E9BC((unsigned __int8 *)(a2 + 128), v52);
            v30 = v53 >= 0 ? v52 : *(uint8_t **)v52;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = v30;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = __dst[0];
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = HIDWORD(__dst[0]);
            _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Dropping iCloud update for DID extended supported feature bits version 2, address: %{public}s, extended supported feature bits I1: 0x%x, I2: 0x%x", buf, 0x18u);
            if (v53 < 0)
              operator delete(*(void **)v52);
          }

          return sub_100034234((uint64_t)v50);
        }
        break;
      case 4098:
        sub_10043F6EC(a2, (uint64_t)buf);
        if ((buf[23] & 0x80000000) != 0)
        {
          v21 = *(_QWORD *)&buf[8];
          operator delete(*(void **)buf);
          if (!v21)
            goto LABEL_58;
        }
        else if (!buf[23])
        {
LABEL_58:
          v48 = 1;
          v49 = 0;
          v47 = 0;
          if (sub_100444BF0(a2, &v49, (_DWORD *)&v47 + 1, &v47, &v48))
          {
            v22 = (void *)objc_claimAutoreleasedReturnValue(+[CBProductInfo productInfoWithProductID:](CBProductInfo, "productInfoWithProductID:", v47));
            v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "productName"));

            if (v23)
            {
              v24 = (id)qword_100999870;
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
              {
                v25 = v52;
                sub_10043E5F8(a2, v52);
                if (v53 < 0)
                  v25 = *(uint8_t **)v52;
                if (*((char *)v8 + 111) < 0)
                {
                  sub_10003430C(__dst, (void *)v8[11], v8[12]);
                }
                else
                {
                  *(_OWORD *)__dst = *(_OWORD *)(v8 + 11);
                  v46 = v8[13];
                }
                v31 = SHIBYTE(v46);
                v32 = (void **)__dst[0];
                sub_10043F6EC(a2, (uint64_t)__p);
                v33 = __dst;
                if (v31 < 0)
                  v33 = v32;
                v34 = __p;
                if (v44 < 0)
                  v34 = (void **)__p[0];
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = v25;
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = v33;
                *(_WORD *)&buf[22] = 2080;
                *(_QWORD *)&buf[24] = v34;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Device name changed to default for %{public}s, Old Name: %s, New Name: %s", buf, 0x20u);
                if (v44 < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v46) < 0)
                  operator delete(__dst[0]);
                if (v53 < 0)
                  operator delete(*(void **)v52);
              }

              sub_100091AE8(buf, (char *)objc_msgSend(v23, "utf8ValueSafe"));
              __dst[0] = 0;
              *(_QWORD *)v52 = 0;
              *(_QWORD *)&v52[8] = 0;
              sub_10004AD30((uint64_t)__dst);
              *(_QWORD *)v52 = SLODWORD(__dst[0]);
              *(_QWORD *)&v52[8] = SWORD2(__dst[0]);
              sub_10044054C(a2, (uint64_t)buf, v52);
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
            }

          }
        }
        v35 = (id)qword_100999870;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          v36 = v52;
          sub_10043E5F8(a2, v52);
          if (v53 < 0)
            v36 = *(uint8_t **)v52;
          if (*((char *)v8 + 111) < 0)
          {
            sub_10003430C(__dst, (void *)v8[11], v8[12]);
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)(v8 + 11);
            v46 = v8[13];
          }
          v37 = SHIBYTE(v46);
          v38 = (void **)__dst[0];
          sub_10043F6EC(a2, (uint64_t)__p);
          v39 = __dst;
          if (v37 < 0)
            v39 = v38;
          if (v44 >= 0)
            v40 = __p;
          else
            v40 = (void **)__p[0];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = v36;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v39;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = v40;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Magic device name changed for %{public}s, Old Name: %s, New Name: %s", buf, 0x20u);
          if (v44 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v46) < 0)
            operator delete(__dst[0]);
          if (v53 < 0)
            operator delete(*(void **)v52);
        }

        sub_10043F6EC(a2, (uint64_t)&__str);
        std::string::operator=((std::string *)(v8 + 11), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        break;
    }
    if (*(_OWORD *)(v8 + 3) != 0 && *(_OWORD *)(v8 + 1) != 0)
      sub_10045F7A4(v5);
    return sub_100034234((uint64_t)v50);
  }
  return result;
}

void sub_1004672DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  void *v41;
  uint64_t v42;

  if (*(char *)(v42 - 105) < 0)
    operator delete(*(void **)(v42 - 128));

  sub_100034234((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_100467414(uint64_t a1)
{
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_10092FC50);
  sub_10066DE10((uint64_t)off_100977FA8, (unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 77), *(_QWORD *)(a1 + 32) + 24);
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_10092FC70);
  sub_100694CF4(qword_1009778B0, (unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 77), *(_QWORD *)(a1 + 32) + 8);
}

void sub_1004674AC(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  _QWORD v7[5];
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  int v12;

  v4 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a1 + 244);
    *(_DWORD *)buf = 67109376;
    v10 = v5;
    v11 = 1024;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "deviceOnlineStatusChanged from [%d] to [%d]", buf, 0xEu);
  }
  v6 = *(NSObject **)(a1 + 208);
  if (v6)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1004675AC;
    v7[3] = &unk_100918888;
    v7[4] = a1;
    v8 = a2;
    dispatch_async(v6, v7);
  }
}

void sub_1004675AC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 244) && *(_BYTE *)(a1 + 40))
    sub_1004666F8(*(_QWORD *)(a1 + 32));
  *(_BYTE *)(v2 + 244) = *(_BYTE *)(a1 + 40);
}

void sub_1004675EC(uint64_t a1, int a2)
{
  sub_1004674AC(a1 - 8, a2);
}

void sub_1004675F4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  void **v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  _QWORD v15[4];
  id v16;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  void *__p[2];
  char v21;
  uint8_t buf[4];
  void **v23;

  if (a2 && *(_BYTE *)(a1 + 241) && (!*(_BYTE *)(a2 + 980) || (sub_10045E940(a1, a2) & 1) != 0))
  {
    v4 = (id)qword_100999870;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      v5 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v23 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "updateAACPVersionInfo: Updating %{public}s", buf, 0xCu);
      if (v21 < 0)
        operator delete(__p[0]);
    }

    sub_10046E9BC((unsigned __int8 *)(a2 + 128), __p);
    if (v21 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6));
    if (v21 < 0)
      operator delete(__p[0]);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "cloudClient"));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1004678E8;
    v17[3] = &unk_10092FAA0;
    v10 = v7;
    v18 = v10;
    v19 = a2;
    objc_msgSend(v9, "deviceRecord:completion:", v10, v17);

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "cloudClient"));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100468048;
    v15[3] = &unk_10092FB08;
    v13 = v10;
    v16 = v13;
    objc_msgSend(v12, "deviceSupportInformationRecord:completion:", v13, v15);

  }
  else
  {
    v14 = qword_100999870;
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEBUG))
      sub_1006F35A8(a1, v14);
  }
}

void sub_10046785C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1004678E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _BOOL4 v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  __int128 *v18;
  void *v19;
  NSObject *v20;
  void **v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  NSObject *v28;
  _QWORD v29[4];
  NSObject *v30;
  _QWORD v31[3];
  _QWORD v32[3];
  __int128 *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 **v36;
  void *__p[2];
  char v38;
  _BYTE buf[12];
  __int16 v40;
  id v41;
  __int16 v42;
  id v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  void *v47;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
      sub_1006F3718();
LABEL_4:

    goto LABEL_5;
  }
  v7 = sub_100649C7C(*(void **)(a1 + 32));
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
      sub_1006F361C();
    goto LABEL_4;
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092FC10);
  v8 = sub_10006D488((uint64_t)off_1009778E0, v7, 0);
  if (!v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
      sub_1006F3648();
    goto LABEL_4;
  }
  v9 = qword_100999870;
  v10 = os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v10)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "updateAACPVersionInfo: updating pid/vid for cloudDevice", buf, 2u);
    }
    *(_DWORD *)buf = 0;
    LODWORD(v33) = 0;
    LODWORD(__p[0]) = 0;
    LODWORD(v36) = 0;
    if (sub_100444BF0(*(_QWORD *)(a1 + 40), buf, &v33, __p, &v36))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), LODWORD(__p[0])));
      objc_msgSend(v5, "setProductID:", v11);

      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), v33));
      objc_msgSend(v5, "setVendorID:", v12);

    }
    else if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
    {
      sub_1006F36EC();
    }
LABEL_28:
    v33 = 0;
    v34 = 0;
    v35 = 0;
    if ((sub_100448DAC(v8, (uint64_t)&v33) & 1) != 0)
    {
      if (qword_100977A88 != -1)
        dispatch_once(&qword_100977A88, &stru_10092FC90);
      v14 = off_100977A80;
      memset(v32, 0, sizeof(v32));
      sub_1002A46F4((char *)v32, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
      LODWORD(v14) = sub_100290CFC((uint64_t)v14, v32, 1u);
      *(_QWORD *)buf = v32;
      sub_100091BF8((void ***)buf);
      if ((_DWORD)v14)
      {
        v15 = (_QWORD *)v33 + 3;
        if (*((char *)v33 + 47) < 0)
          v15 = (_QWORD *)*v15;
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15));
        objc_msgSend(v5, "setModelNumber:", v16);

      }
      if (qword_100977A88 != -1)
        dispatch_once(&qword_100977A88, &stru_10092FC90);
      v17 = off_100977A80;
      memset(v31, 0, sizeof(v31));
      sub_1002A46F4((char *)v31, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
      LODWORD(v17) = sub_100290CFC((uint64_t)v17, v31, 2u);
      *(_QWORD *)buf = v31;
      sub_100091BF8((void ***)buf);
      if ((_DWORD)v17)
      {
        v18 = v33 + 3;
        if (*((char *)v33 + 71) < 0)
          v18 = *(__int128 **)v18;
        v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18));
        objc_msgSend(v5, "setManufacturer:", v19);

      }
      v20 = (id)qword_100999870;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v8, __p);
        if (v38 >= 0)
          v21 = __p;
        else
          v21 = (void **)__p[0];
        v22 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "vendorID"));
        v23 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "productID"));
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "modelNumber"));
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "manufacturer"));
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = v21;
        v40 = 2112;
        v41 = v22;
        v42 = 2112;
        v43 = v23;
        v44 = 2112;
        v45 = v24;
        v46 = 2112;
        v47 = v25;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "updateAACPVersionInfo: cloudDevice for %{public}s vendorId = %@ productId = %@ model = %@ manufacturer = %@ ", buf, 0x34u);

        if (v38 < 0)
          operator delete(__p[0]);

      }
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "cloudClient"));
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_100467FEC;
      v29[3] = &unk_10092FA78;
      v30 = 0;
      objc_msgSend(v27, "createDeviceRecord:completion:", v5, v29);

      v28 = v30;
    }
    else
    {
      v28 = (id)qword_100999870;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(v8, buf);
        sub_1006F36A0();
      }
    }

    v36 = &v33;
    sub_100091BF8((void ***)&v36);

    goto LABEL_5;
  }
  if (v10)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "updateAACPVersionInfo: Creating new cloudDevice", buf, 2u);
  }
  v13 = sub_10045E64C(v8);
  v5 = (id)objc_claimAutoreleasedReturnValue(v13);
  if (v5)
    goto LABEL_28;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
    sub_1006F3674();
LABEL_5:

}

void sub_100467EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  uint64_t v32;

  *(_QWORD *)(v32 - 144) = &a21;
  sub_100091BF8((void ***)(v32 - 144));

  _Unwind_Resume(a1);
}

void sub_100467FEC(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (*(_QWORD *)(a1 + 32) && os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
    sub_1006F377C();

}

void sub_100468048(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  void *v25;
  std::string *p_p;
  void *v27;
  NSObject *v28;
  void **v29;
  void *v30;
  void *v31;
  NSObject *v32;
  _QWORD v33[3];
  _QWORD v34[3];
  _QWORD v35[3];
  _QWORD v36[3];
  _QWORD v37[3];
  std::string __p;
  uint8_t buf[8];
  __int128 *v40;
  uint64_t v41;
  void *v42[2];
  char v43;
  _BYTE v44[24];

  v5 = a2;
  v6 = v5;
  v7 = a3;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
      sub_1006F37E0();
  }
  else
  {
    v8 = sub_100649C7C(*(void **)(a1 + 32));
    if (v8)
    {
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_10092FC10);
      v9 = sub_10006D488((uint64_t)off_1009778E0, v8, 0);
      if (v9)
      {
        if (!v5)
        {
          v10 = qword_100999870;
          if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "updateAACPVersionInfo: Creating new deviceSupportInformation", buf, 2u);
          }
          v6 = objc_msgSend(objc_alloc((Class)BTCloudDeviceSupportInformation), "initWithBluetoothAddress:", *(_QWORD *)(a1 + 32));
        }
        *(_QWORD *)buf = 0;
        v40 = 0;
        v41 = 0;
        if ((sub_100448DAC(v9, (uint64_t)buf) & 1) != 0)
        {
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_10092FC90);
          v11 = off_100977A80;
          memset(v37, 0, sizeof(v37));
          sub_1002A46F4((char *)v37, *(__int128 **)buf, v40, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - *(_QWORD *)buf) >> 3));
          LODWORD(v11) = sub_100290CFC((uint64_t)v11, v37, 3u);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
          sub_100091BF8((void ***)&__p);
          if ((_DWORD)v11)
          {
            v12 = (_QWORD *)(*(_QWORD *)buf + 72);
            if (*(char *)(*(_QWORD *)buf + 95) < 0)
              v12 = (_QWORD *)*v12;
            v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
            objc_msgSend(v6, "setCaseSerialNumber:", v13);

          }
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_10092FC90);
          v14 = off_100977A80;
          memset(v36, 0, sizeof(v36));
          sub_1002A46F4((char *)v36, *(__int128 **)buf, v40, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - *(_QWORD *)buf) >> 3));
          LODWORD(v14) = sub_100290CFC((uint64_t)v14, v36, 6u);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
          sub_100091BF8((void ***)&__p);
          if ((_DWORD)v14)
          {
            v15 = (_QWORD *)(*(_QWORD *)buf + 144);
            if (*(char *)(*(_QWORD *)buf + 167) < 0)
              v15 = (_QWORD *)*v15;
            v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15));
            objc_msgSend(v6, "setHardwareVersion:", v16);

          }
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_10092FC90);
          v17 = off_100977A80;
          memset(v35, 0, sizeof(v35));
          sub_1002A46F4((char *)v35, *(__int128 **)buf, v40, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - *(_QWORD *)buf) >> 3));
          LODWORD(v17) = sub_100290CFC((uint64_t)v17, v35, 8u);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
          sub_100091BF8((void ***)&__p);
          if ((_DWORD)v17)
          {
            v18 = (_QWORD *)(*(_QWORD *)buf + 192);
            if (*(char *)(*(_QWORD *)buf + 215) < 0)
              v18 = (_QWORD *)*v18;
            v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18));
            objc_msgSend(v6, "setLeftBudSerialNumber:", v19);

          }
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_10092FC90);
          v20 = off_100977A80;
          memset(v34, 0, sizeof(v34));
          sub_1002A46F4((char *)v34, *(__int128 **)buf, v40, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - *(_QWORD *)buf) >> 3));
          LODWORD(v20) = sub_100290CFC((uint64_t)v20, v34, 9u);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
          sub_100091BF8((void ***)&__p);
          if ((_DWORD)v20)
          {
            v21 = (_QWORD *)(*(_QWORD *)buf + 216);
            if (*(char *)(*(_QWORD *)buf + 239) < 0)
              v21 = (_QWORD *)*v21;
            v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v21));
            objc_msgSend(v6, "setRightBudSerialNumber:", v22);

          }
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_10092FC90);
          v23 = off_100977A80;
          memset(v33, 0, sizeof(v33));
          sub_1002A46F4((char *)v33, *(__int128 **)buf, v40, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - *(_QWORD *)buf) >> 3));
          LODWORD(v23) = sub_100290CFC((uint64_t)v23, v33, 0xAu);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
          sub_100091BF8((void ***)&__p);
          if ((_DWORD)v23)
          {
            v24 = (_QWORD *)(*(_QWORD *)buf + 240);
            if (*(char *)(*(_QWORD *)buf + 263) < 0)
              v24 = (_QWORD *)*v24;
            v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v24));
            objc_msgSend(v6, "setBudsFirmwareVersion:", v25);

          }
          memset(&__p, 0, sizeof(__p));
          if (sub_100449468(v9, &__p))
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p));
            objc_msgSend(v6, "setAncAssetVersion:", v27);

          }
          v28 = (id)qword_100999870;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(v9, v42);
            v29 = v43 >= 0 ? v42 : (void **)v42[0];
            *(_DWORD *)v44 = 136446210;
            *(_QWORD *)&v44[4] = v29;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "updateAACPVersionInfo: Writing cloud record for %{public}s", v44, 0xCu);
            if (v43 < 0)
              operator delete(v42[0]);
          }

          if (v5)
          {
            v30 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
            v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "cloudClient"));
            objc_msgSend(v31, "modifyDeviceSupportInformationRecord:completion:", v6, &stru_10092FAE0);
          }
          else
          {
            v30 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
            v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "cloudClient"));
            objc_msgSend(v31, "createDeviceSupportInformationRecord:completion:", v6, &stru_10092FAC0);
          }

          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          v32 = (id)qword_100999870;
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            sub_10043E5F8(v9, &__p);
            sub_1006F36A0();
          }

        }
        *(_QWORD *)v44 = buf;
        sub_100091BF8((void ***)v44);
      }
      else if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
      {
        sub_1006F3648();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
    {
      sub_1006F361C();
    }
  }

}

void sub_100468748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;

  if (a29 < 0)
    operator delete(__p);
  __p = &a30;
  sub_100091BF8((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_100468850(id a1, NSError *a2)
{
  NSError *v2;

  v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
    sub_1006F3844();

}

void sub_1004688A4(id a1, NSError *a2)
{
  NSError *v2;

  v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
    sub_1006F38A8();

}

void sub_1004688F8(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void **v4;
  void **v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  void **v15;

  if (a2)
  {
    v3 = (id)qword_100999870;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      v4 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v15 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "updateCaseInfo: Updating %{public}s", buf, 0xCu);
      if (v13 < 0)
        operator delete(__p[0]);
    }

    sub_10046E9BC((unsigned __int8 *)(a2 + 128), __p);
    if (v13 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5));
    if (v13 < 0)
      operator delete(__p[0]);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "cloudClient"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100468AFC;
    v10[3] = &unk_10092FB08;
    v9 = v6;
    v11 = v9;
    objc_msgSend(v8, "deviceSupportInformationRecord:completion:", v9, v10);

  }
}

void sub_100468AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

void sub_100468AFC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  void *v13;
  NSObject *v14;
  void *v15;
  NSObject *v16;
  void **v17;
  void *v18;
  void *v19;
  void *v20;
  uint8_t buf[16];
  __int128 v22;
  void *v23[2];
  uint64_t v24;
  void *__p[2];
  char v26;
  uint8_t v27[4];
  void **v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;

  v5 = a2;
  v6 = v5;
  v7 = a3;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
      sub_1006F3958();
    goto LABEL_34;
  }
  if (!v5)
  {
    v8 = qword_100999870;
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "updateCaseInfo: Creating new deviceSupportInformation", buf, 2u);
    }
    v6 = objc_msgSend(objc_alloc((Class)BTCloudDeviceSupportInformation), "initWithBluetoothAddress:", *(_QWORD *)(a1 + 32));
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bluetoothAddress"));
  v10 = sub_100649C7C(v9);

  if (v10)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092FC10);
    v11 = sub_10006D488((uint64_t)off_1009778E0, v10, 0);
    if (v11)
    {
      v12 = v23;
      v24 = 0;
      v22 = 0u;
      *(_OWORD *)v23 = 0u;
      *(_OWORD *)buf = 0u;
      sub_100091AE8(v23, "");
      if (!sub_1004495CC(v11, (uint64_t)buf))
      {
        v14 = (id)qword_100999870;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          sub_10043E5F8(v11, v27);
          sub_1006F390C();
        }
        goto LABEL_32;
      }
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), (_QWORD)v22));
      objc_msgSend(v6, "setCaseFirmwareVersion:", v13);

      if (SHIBYTE(v24) < 0)
      {
        if (v23[1] <= (void *)1)
        {
LABEL_21:
          v16 = (id)qword_100999870;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(v11, __p);
            if (v26 >= 0)
              v17 = __p;
            else
              v17 = (void **)__p[0];
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "caseFirmwareVersion"));
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "caseName"));
            *(_DWORD *)v27 = 136446722;
            v28 = v17;
            v29 = 2112;
            v30 = v18;
            v31 = 2112;
            v32 = v19;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "updateCaseInfo: Writing cloud record for %{public}s: caseVersion %@, caseName %@", v27, 0x20u);
            if (v26 < 0)
              operator delete(__p[0]);

          }
          if (v5)
          {
            v14 = objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
            v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject cloudClient](v14, "cloudClient"));
            objc_msgSend(v20, "modifyDeviceSupportInformationRecord:completion:", v6, &stru_10092FB48);
          }
          else
          {
            v14 = objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
            v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject cloudClient](v14, "cloudClient"));
            objc_msgSend(v20, "createDeviceSupportInformationRecord:completion:", v6, &stru_10092FB28);
          }

LABEL_32:
          if (SHIBYTE(v24) < 0)
            operator delete(v23[0]);
          goto LABEL_34;
        }
        v12 = (void **)v23[0];
      }
      else if (HIBYTE(v24) <= 1u)
      {
        goto LABEL_21;
      }
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
      objc_msgSend(v6, "setCaseName:", v15);

      goto LABEL_21;
    }
  }
LABEL_34:

}

void sub_100468EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100468F80(id a1, NSError *a2)
{
  NSError *v2;

  v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
    sub_1006F39BC();

}

void sub_100468FD4(id a1, NSError *a2)
{
  NSError *v2;

  v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
    sub_1006F3A20();

}

void sub_100469028(uint64_t a1)
{
  char v2;
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  void **v12;
  void *__p[2];
  char v14;
  _QWORD v15[2];
  uint8_t buf[4];
  void **v17;

  v2 = sub_10045D35C();
  v3 = qword_100999870;
  v4 = os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT);
  if ((v2 & 1) != 0)
  {
    if (v4)
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "UpdateCloudDeviceInformation triggered", (uint8_t *)__p, 2u);
    }
    if (*(_OWORD *)(a1 + 49) == 0)
    {
      v9 = qword_100999870;
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "UpdateCloudDeviceInformation trigger, no master key found, pull from cloud", (uint8_t *)__p, 2u);
      }
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168));
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      sub_10003415C((uint64_t)__p, a1 + 104);
      v5 = *(_QWORD *)(a1 + 176);
      v6 = *(_QWORD *)(a1 + 184);
      sub_100034234((uint64_t)__p);
      if (v5 == v6 && !*(_BYTE *)(a1 + 240))
      {
        v10 = qword_100999870;
        if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "UpdateCloudDeviceInformation triggers, Master key is available but no Magic Paired Devices. Let's fetch if any available.", (uint8_t *)__p, 2u);
        }
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 32))(*(_QWORD *)(a1 + 168));
      }
      else
      {
        v15[0] = 0;
        v15[1] = 0;
        sub_10003415C((uint64_t)v15, a1 + 104);
        for (i = *(uint64_t **)(a1 + 176); i != *(uint64_t **)(a1 + 184); ++i)
        {
          v8 = *i;
          if (*(_DWORD *)(*i + 84) != 1 && *(_OWORD *)(v8 + 24) != 0 && *(_OWORD *)(v8 + 8) != 0)
          {
            v11 = (id)qword_100999870;
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043E5F8(*(_QWORD *)v8, __p);
              if (v14 >= 0)
                v12 = __p;
              else
                v12 = (void **)__p[0];
              *(_DWORD *)buf = 136446210;
              v17 = v12;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Local device info for device %{public}s needs to be pushed again", buf, 0xCu);
              if (v14 < 0)
                operator delete(__p[0]);
            }

            goto LABEL_30;
          }
        }
        if (!*(_BYTE *)(a1 + 243))
          goto LABEL_31;
LABEL_30:
        *(_BYTE *)(a1 + 243) = 0;
        sub_10045F7A4(a1);
LABEL_31:
        sub_100034264((uint64_t)v15);
        sub_100034234((uint64_t)v15);
      }
    }
  }
  else if (v4)
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Skipping UpdateCloudDeviceInformation for Magic Pairing, not supported on this platform", (uint8_t *)__p, 2u);
  }
}

void sub_1004692DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100469304(uint64_t a1)
{
  unsigned __int8 *v1;
  NSObject *v2;
  int v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  int v7;

  v1 = *(unsigned __int8 **)(a1 + 32);
  v2 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    v3 = v1[241];
    v4 = v1[244];
    v5[0] = 67109376;
    v5[1] = v3;
    v6 = 1024;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Initiate Sync, Signed in - %d, Network available - %d", (uint8_t *)v5, 0xEu);
  }
  if (v1[241] && v1[244])
    sub_100469028((uint64_t)v1);
  v1[245] = 0;
}

void sub_1004693D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  std::string *v6;
  NSObject *v7;
  _BYTE *v8;
  int v9;
  unsigned __int8 v10;
  NSObject *v11;
  int v12;
  std::string::size_type v13;
  int v14;
  std::string *v15;
  const char *v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  id v21;
  void *v22;
  BOOL v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  NSObject *v28;
  int v29;
  const char *v30;
  NSString *v31;
  id v32;
  std::string *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  NSString *v47;
  void *v48;
  void *v49;
  NSString *v50;
  void *v51;
  void *v52;
  void *v53;
  NSObject *v54;
  std::string *v55;
  void *v56;
  _BOOL4 v57;
  NSObject *v59;
  std::string *v60;
  void *v61;
  id v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  int v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  int v74;
  unsigned __int8 v75;
  void *v76;
  void *v77;
  _QWORD v78[5];
  unsigned int __val;
  uint64_t v80;
  int v81;
  int v82;
  _BYTE buf[12];
  __int16 v84;
  const char *v85;
  char v86;
  std::string v87;

  if (sub_10045D35C() && *(_BYTE *)(a1 + 240))
  {
    if (!a2 || !*(_BYTE *)(a1 + 241))
      return;
    v4 = *(_QWORD *)a2;
    v5 = (id)qword_100999870;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v4, &v87);
      v6 = (v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v87
         : (std::string *)v87.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "writeMagicPairingSettingToCloud Update cloud device information, write magic pairing setting to cloud for %{public}s", buf, 0xCu);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
    }

    v81 = 1;
    v82 = 0;
    v80 = 0;
    if (!sub_100444BF0(v4, &v82, (_DWORD *)&v80 + 1, &v80, &v81))
    {
      v7 = (id)qword_100999870;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v4, buf);
        v8 = v86 >= 0 ? buf : *(_BYTE **)buf;
        LODWORD(v87.__r_.__value_.__l.__data_) = 136446722;
        *(std::string::size_type *)((char *)v87.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
        WORD2(v87.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v87.__r_.__value_.__r.__words[1] + 6) = v80;
        WORD1(v87.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v87.__r_.__value_.__r.__words[2]) = HIDWORD(v80);
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "writeMagicPairingSettingToCloud Error fetching DeviceId for magic paired device %{public}s with pid: %x, vid: %x", (uint8_t *)&v87, 0x18u);
        if (v86 < 0)
          operator delete(*(void **)buf);
      }

    }
    v9 = sub_10044F5D0(v4);
    if (v9 == 2)
      v10 = 2;
    else
      v10 = v9 == 1;
    if (sub_10044F614(v4))
      v10 |= 4u;
    v11 = (id)qword_100999870;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v4, &v87);
      v12 = SHIBYTE(v87.__r_.__value_.__r.__words[2]);
      v13 = v87.__r_.__value_.__r.__words[0];
      v14 = sub_10044F614(v4);
      v15 = &v87;
      v16 = "disabled";
      if (v12 < 0)
        v15 = (std::string *)v13;
      if (v14)
        v16 = "Enabled";
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v15;
      v84 = 2080;
      v85 = v16;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "In Ear Detection  state for device  %{public}s is %s", buf, 0x16u);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
    }

    if (sub_100442118(v4, 14))
      v10 |= 8u;
    if (sub_100442118(v4, 22))
      v10 |= 0x10u;
    v75 = sub_1004459D0(v4);
    v17 = sub_1004459D0(v4);
    v74 = sub_10044F8A0(v4);
    v73 = sub_10044F8A0(v4);
    v72 = sub_10044F74C(v4);
    v70 = sub_10044F74C(v4);
    v18 = sub_100442118(v4, 32);
    v71 = sub_10044F96C(v4);
    v69 = sub_100447C64(v4);
    if (v18)
      v19 = 64;
    else
      v19 = 0;
    v68 = v19;
    v20 = _os_feature_enabled_impl("PowerUI", "audioAccessoryOBC");
    if (v20)
    {
      v21 = sub_100451794(v4);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      v23 = v22 == 0;

      if (v23)
      {
        v76 = 0;
      }
      else
      {
        v24 = objc_alloc_init((Class)NSDateFormatter);
        v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone"));
        objc_msgSend(v24, "setTimeZone:", v25);

        objc_msgSend(v24, "setDateFormat:", CFSTR("yyyy-MM-dd'T'HH:mm:ss.SSSSSSSZZZZZ"));
        v26 = sub_100451794(v4);
        v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
        v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "stringFromDate:", v27));

      }
      if (sub_100451750(v4) != -1)
      {
        v31 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lu"), sub_100451750(v4));
        v77 = (void *)objc_claimAutoreleasedReturnValue(v31);
LABEL_52:
        v32 = objc_alloc((Class)BTMagicPairingSettings);
        sub_10046E9BC((unsigned __int8 *)(v4 + 128), &v87);
        if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = &v87;
        else
          v33 = (std::string *)v87.__r_.__value_.__r.__words[0];
        v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v33));
        v35 = objc_msgSend(v32, "initWithBluetoothAddress:", v34);

        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v87.__r_.__value_.__l.__data_);
        v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), HIDWORD(v80)));
        objc_msgSend(v35, "setVendorID:", v36);

        v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), v80));
        objc_msgSend(v35, "setProductID:", v37);

        v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a1 + 49, 16));
        objc_msgSend(v35, "setMasterKey:", v38);

        v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a1 + 65, 16));
        objc_msgSend(v35, "setMasterHint:", v39);

        v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a2 + 40, 16));
        objc_msgSend(v35, "setAccessoryKey:", v40);

        v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a2 + 56, 16));
        objc_msgSend(v35, "setAccessoryHint:", v41);

        v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a2 + 24, 16));
        objc_msgSend(v35, "setEncryptionKey:", v42);

        v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a2 + 8, 16));
        objc_msgSend(v35, "setIrk:", v43);

        v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), *(unsigned int *)(a2 + 72)));
        objc_msgSend(v35, "setRatchet:", v44);

        v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), v10));
        objc_msgSend(v35, "setSettingsMask:", v45);

        v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), (v17 >> 4) & 0xFF0 | v75));
        objc_msgSend(v35, "setButtonModes:", v46);

        v47 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), sub_1004512E8(v4));
        v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
        objc_msgSend(v35, "setColor:", v48);

        v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), 2));
        objc_msgSend(v35, "setVersion:", v49);

        if (qword_100977A78 != -1)
          dispatch_once(&qword_100977A78, &stru_10092FCB0);
        v50 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), sub_100498AC8((uint64_t)off_100977A70, v4));
        v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
        objc_msgSend(v35, "setSupportedServices:", v51);

        v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), (32 * v74) & 0xE000 | ((v73 & 7) << 10) | ((v72 & 7) << 7) | v68 & 0xFFFFFFF1 | (4 * (v71 & 3)) | (2 * (v69 & 1))));
        objc_msgSend(v35, "setListeningServices:", v52);

        v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), v70 & 0xF));
        objc_msgSend(v35, "setListeningServicesV2:", v53);

        if (v20)
        {
          if (v77)
            objc_msgSend(v35, "setOptimizedBatteryCharging:", v77);
          if (v76)
            objc_msgSend(v35, "setOptimizedBatteryFullChargeDeadline:", v76);
        }
        __val = 0;
        *(_QWORD *)buf = 0;
        if (sub_1004466D8(v4, &__val))
        {
          v54 = qword_100999870;
          if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v87.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(v87.__r_.__value_.__r.__words[0]) = __val;
            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "DID supported fetaure bits (version 1) is updated to 0x%x. Sync to iCloud", (uint8_t *)&v87, 8u);
          }
          std::to_string(&v87, __val);
          if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v55 = &v87;
          else
            v55 = (std::string *)v87.__r_.__value_.__r.__words[0];
          v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v55));
          objc_msgSend(v35, "setDeviceIDFeatureBitsV1:", v56);

          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v87.__r_.__value_.__l.__data_);
          v57 = sub_100446790(v4, buf);
          if (*(_DWORD *)&buf[4] != -1 && v57)
          {
            v59 = qword_100999870;
            if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(v87.__r_.__value_.__l.__data_) = 67109376;
              HIDWORD(v87.__r_.__value_.__r.__words[0]) = *(_DWORD *)buf;
              LOWORD(v87.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&v87.__r_.__value_.__r.__words[1] + 2) = *(_DWORD *)&buf[4];
              _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "DID extended supported fetaure bits (version 2) is updated to I1 0x%x I2 0x%x. Sync to iCloud", (uint8_t *)&v87, 0xEu);
            }
            std::to_string(&v87, *(unsigned int *)&buf[4] | ((unint64_t)*(unsigned int *)buf << 32));
            if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v60 = &v87;
            else
              v60 = (std::string *)v87.__r_.__value_.__r.__words[0];
            v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v60));
            objc_msgSend(v35, "setDeviceIDFeatureBitsV2:", v61);

            if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v87.__r_.__value_.__l.__data_);
          }
        }
        v62 = sub_10045E64C(v4);
        v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
        if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEBUG))
          sub_1006F3AE4();
        if (v63)
        {
          v64 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
          v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "cloudClient"));
          objc_msgSend(v65, "createDeviceRecord:completion:", v63, &stru_10092FB68);

        }
        if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEBUG))
          sub_1006F3A84();
        v66 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
        v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "cloudClient"));
        v78[0] = _NSConcreteStackBlock;
        v78[1] = 3221225472;
        v78[2] = sub_10046A1CC;
        v78[3] = &unk_10092FA30;
        v78[4] = v4;
        objc_msgSend(v67, "createMagicSettingsRecord:completion:", v35, v78);

        return;
      }
    }
    else
    {
      v76 = 0;
    }
    v77 = 0;
    goto LABEL_52;
  }
  v28 = (id)qword_100999870;
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    v29 = sub_10045D35C();
    v30 = "supported";
    if (v29)
      v30 = "initialized";
    LODWORD(v87.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v87.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "writeMagicPairingSettingToCloud, Magic Pairing not %s.", (uint8_t *)&v87, 0xCu);
  }

}

void sub_100469F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  uint64_t v18;

  if (*(char *)(v18 - 105) < 0)
    operator delete(*(void **)(v18 - 128));

  _Unwind_Resume(a1);
}

void sub_10046A178(id a1, NSError *a2)
{
  NSError *v2;

  v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
    sub_1006F3B44();

}

void sub_10046A1CC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;

  v3 = a2;
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
      sub_1006F3BA8();
  }
  else
  {
    v4 = (id)qword_100999870;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(*(_QWORD *)(a1 + 32), __p);
      v5 = v7 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Magic Setting created cloud device %{public}s", buf, 0xCu);
      if (v7 < 0)
        operator delete(__p[0]);
    }

  }
}

void sub_10046A2DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10046A2F4(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  void **v7;
  void *v8;
  void *v9;
  void **v10;
  void *v11;
  void *v12;
  void *v13;
  void **v14;
  void *v15;
  _QWORD v16[6];
  _QWORD v17[5];
  void *__p[2];
  char v19;
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  int v23;

  v6 = (id)qword_100999870;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v7 = v19 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v21 = v7;
    v22 = 1024;
    v23 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Pairing Completed for device: %{public}s with result - %d", buf, 0x12u);
    if (v19 < 0)
      operator delete(__p[0]);
  }

  if (!a3)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "cloudClient"));
    sub_10046E9BC((unsigned __int8 *)(a2 + 128), __p);
    if (v19 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10046A5E0;
    v17[3] = &unk_10092FA50;
    v17[4] = a2;
    objc_msgSend(v9, "magicSettingsRecord:completion:", v11, v17);

    if (v19 < 0)
      operator delete(__p[0]);

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "cloudClient"));
    sub_10046E9BC((unsigned __int8 *)(a2 + 128), __p);
    if (v19 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14));
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10046A934;
    v16[3] = &unk_10092FB88;
    v16[4] = a1;
    v16[5] = a2;
    objc_msgSend(v13, "deviceRecord:completion:", v15, v16);

    if (v19 < 0)
      operator delete(__p[0]);

  }
}

void sub_10046A560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;

  if (a25 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10046A5E0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  __int128 *v11;
  int i;
  void *v13;
  BOOL v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  unsigned int v18;
  int v19;
  void *v20;
  unsigned int v21;
  __int128 __p;
  unsigned int v23;
  char v24;
  _BYTE buf[12];
  __int16 v26;
  __int128 *v27;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    v16 = (id)qword_100999870;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(*(_QWORD *)(a1 + 32), &__p);
      sub_1006F3C0C();
    }
    goto LABEL_20;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "supportedServices"));
  v9 = objc_msgSend(v8, "length");

  if (v9)
  {
    v10 = (id)qword_100999870;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(*(_QWORD *)(a1 + 32), &__p);
      v11 = v24 >= 0 ? &__p : (__int128 *)__p;
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v5;
      v26 = 2082;
      v27 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[Pairing] fetched magic settings: %@ for device: %{public}s", buf, 0x16u);
      if (v24 < 0)
        operator delete((void *)__p);
    }

    for (i = 0; i != 31; ++i)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "supportedServices"));
      v14 = (objc_msgSend(v13, "integerValue") & (1 << i)) == 0;

      if (!v14)
      {
        v15 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)buf = 0;
        __p = 0uLL;
        sub_10004AD30((uint64_t)buf);
        *(_QWORD *)&__p = *(int *)buf;
        *((_QWORD *)&__p + 1) = *(__int16 *)&buf[4];
        sub_1004415B0(v15, 1 << i, 4, &__p, 1);
      }
    }
    v16 = (id)qword_100999870;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "supportedServices"));
      v18 = objc_msgSend(v17, "intValue");
      if (qword_100977A78 != -1)
        dispatch_once(&qword_100977A78, &stru_10092FCB0);
      v19 = sub_100498AC8((uint64_t)off_100977A70, *(_QWORD *)(a1 + 32));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "version"));
      v21 = objc_msgSend(v20, "intValue");
      LODWORD(__p) = 67109632;
      DWORD1(__p) = v18;
      WORD4(__p) = 1024;
      *(_DWORD *)((char *)&__p + 10) = v19;
      HIWORD(__p) = 1024;
      v23 = v21;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Cloud: Device service capability details: received service mask %x, device service mask after update %x, blob version %d", (uint8_t *)&__p, 0x14u);

    }
LABEL_20:

  }
}

void sub_10046A8B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v3;

  _Unwind_Resume(a1);
}

void sub_10046A934(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  void **v10;
  id v11;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  void *__p[2];
  char v17;
  uint8_t buf[4];
  id v19;
  __int16 v20;
  void **v21;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = (id)qword_100999870;
  v9 = v8;
  if (!v5 || v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(*(_QWORD *)(a1 + 40), __p);
      sub_1006F3C50();
    }
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(*(_QWORD *)(a1 + 40), __p);
      v10 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 138412546;
      v19 = v5;
      v20 = 2082;
      v21 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[Pairing] fetched cloud record: %@ for device: %{public}s", buf, 0x16u);
      if (v17 < 0)
        operator delete(__p[0]);
    }

    v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bluetoothAddress")));
    sub_100091AE8(v14, (char *)-[NSObject UTF8String](v9, "UTF8String"));
    v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "nickname")));
    sub_100091AE8(v12, (char *)objc_msgSend(v11, "UTF8String"));
    (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v7 + 96))(v7, v14, v12);
    if (v13 < 0)
      operator delete(v12[0]);

    if (v15 < 0)
      operator delete(v14[0]);
  }

}

void sub_10046AB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_10046AB8C(uint64_t a1, uint64_t a2, int a3)
{
  sub_10046A2F4(a1 - 32, a2, a3);
}

void sub_10046ABA4(uint64_t a1, int a2)
{
  NSObject *v3;
  _DWORD v4[2];

  v3 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Airplane mode is now %d", (uint8_t *)v4, 8u);
  }
}

uint64_t sub_10046AC50(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t *v6;
  uint64_t *i;
  uint64_t v8;
  __int128 v10;

  v4 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "fail";
    if (a2)
      v5 = "success";
    LODWORD(v10) = 136446210;
    *(_QWORD *)((char *)&v10 + 4) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device info upload status from cloud with status = %{public}s", (uint8_t *)&v10, 0xCu);
  }
  v10 = 0uLL;
  sub_10003415C((uint64_t)&v10, a1 + 104);
  if (a2)
  {
    v6 = *(uint64_t **)(a1 + 176);
    for (i = *(uint64_t **)(a1 + 184); v6 != i; *(_DWORD *)(v8 + 84) = 1)
      v8 = *v6++;
    *(_BYTE *)(a1 + 243) = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
      sub_1006F3C94();
    *(_BYTE *)(a1 + 243) = *(_QWORD *)(a1 + 176) == *(_QWORD *)(a1 + 184);
  }
  sub_10045F2D4(a1);
  return sub_100034234((uint64_t)&v10);
}

void sub_10046AD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10046ADA8(uint64_t a1, int a2)
{
  return sub_10046AC50(a1 - 8, a2);
}

void sub_10046ADB0(_QWORD *a1, char *a2, uint64_t a3)
{
  char *v4;
  int v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  void **v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  std::string v17;
  void *__p[2];
  char v19;
  int v20;
  __int16 v21;
  void *__dst[2];
  uint64_t v23;
  uint8_t buf[4];
  void **v25;
  __int16 v26;
  void *v27;

  v4 = a2;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a3 + 23))
      goto LABEL_3;
LABEL_23:
    if (a2[23] < 0)
    {
      sub_10003430C(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a2;
      v23 = *((_QWORD *)a2 + 2);
    }
    (*(void (**)(_QWORD *, void **))(*a1 + 104))(a1, __dst);
    if (SHIBYTE(v23) < 0)
      operator delete(__dst[0]);
    return;
  }
  if (!*(_QWORD *)(a3 + 8))
    goto LABEL_23;
LABEL_3:
  v6 = a2[23];
  v21 = 0;
  v20 = 0;
  if (v6 < 0)
    a2 = *(char **)a2;
  if (!sub_10006D80C((uint64_t)&v20, (unsigned __int8 *)a2))
  {
LABEL_32:
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
      sub_1006F3CC0();
    return;
  }
  if (!(_BYTE)v20)
  {
    v15 = 1;
    while (v15 != 6)
    {
      if (*((unsigned __int8 *)&v20 + v15++))
      {
        if ((unint64_t)(v15 - 2) < 5)
          goto LABEL_7;
        goto LABEL_32;
      }
    }
    goto LABEL_32;
  }
LABEL_7:
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092FC10);
  v7 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v20, 0);
  v8 = qword_100999870;
  if (v7)
  {
    v9 = (id)qword_100999870;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v7, __p);
      if (v19 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      v11 = (void *)a3;
      if (*(char *)(a3 + 23) < 0)
        v11 = *(void **)a3;
      *(_DWORD *)buf = 136446466;
      v25 = v10;
      v26 = 2080;
      v27 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Device's user-defined name changing for %{public}s, new nickname: %s", buf, 0x16u);
      if (v19 < 0)
        operator delete(__p[0]);
    }

    sub_100440D9C(v7, a3, 0);
    __p[0] = 0;
    __p[1] = 0;
    sub_10003415C((uint64_t)__p, (uint64_t)(a1 + 13));
    v12 = (_QWORD *)a1[22];
    v13 = (_QWORD *)a1[23];
    while (v12 != v13)
    {
      v14 = (_QWORD *)*v12;
      if (*(_QWORD *)*v12 == v7)
      {
        if (*(char *)(a3 + 23) < 0)
          sub_10003430C(&v17, *(void **)a3, *(_QWORD *)(a3 + 8));
        else
          v17 = *(std::string *)a3;
        std::string::operator=((std::string *)(v14 + 11), &v17);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v17.__r_.__value_.__l.__data_);
        break;
      }
      ++v12;
    }
    sub_100034234((uint64_t)__p);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
  {
    sub_1006F3CEC(v4 + 23, v4, v8);
  }
}

void sub_10046B09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_10046B0F4(uint64_t a1, char *a2, uint64_t a3)
{
  sub_10046ADB0((_QWORD *)(a1 - 8), a2, a3);
}

uint64_t sub_10046B0FC(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  void *v9;
  size_t v10;
  void **v11;
  size_t v12;
  const void *v13;
  size_t v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _QWORD **i;
  NSObject *v18;
  void **v19;
  NSObject *v20;
  void **v21;
  uint64_t v22;
  uint64_t v25;
  NSObject *v26;
  void **v27;
  void *__p[2];
  unsigned __int8 v29;
  void *v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  void **v37;

  v35[0] = 0;
  v35[1] = 0;
  sub_10003415C((uint64_t)v35, a1 + 104);
  v34 = 0;
  v33 = 0;
  v4 = (unsigned __int8 *)a2;
  if (*(char *)(a2 + 23) < 0)
    v4 = *(unsigned __int8 **)a2;
  if (!sub_10006D80C((uint64_t)&v33, v4))
    goto LABEL_56;
  if (!(_BYTE)v33)
  {
    v22 = 1;
    do
    {
      if (v22 == 6)
        goto LABEL_56;
    }
    while (!*((unsigned __int8 *)&v33 + v22++));
    if ((unint64_t)(v22 - 2) >= 5)
    {
LABEL_56:
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
        sub_1006F3CC0();
      return sub_100034234((uint64_t)v35);
    }
  }
  v30 = 0;
  v31 = 0;
  v32 = 0;
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10092FBF0);
  sub_10006CA88((uint64_t)off_100978148, (uint64_t **)&v30);
  v5 = (uint64_t *)v30;
  if (v31 != v30)
  {
    while (1)
    {
      v6 = *v5;
      sub_10046E9BC((unsigned __int8 *)(*v5 + 128), __p);
      v7 = *(char *)(a2 + 23);
      v8 = (char)v29;
      v9 = __p[0];
      if ((v29 & 0x80u) == 0)
        v10 = v29;
      else
        v10 = (size_t)__p[1];
      if ((v29 & 0x80u) == 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      if (v7 >= 0)
        v12 = *(unsigned __int8 *)(a2 + 23);
      else
        v12 = *(_QWORD *)(a2 + 8);
      if (v7 >= 0)
        v13 = (const void *)a2;
      else
        v13 = *(const void **)a2;
      if (v12 >= v10)
        v14 = v10;
      else
        v14 = v12;
      v15 = memcmp(v11, v13, v14) == 0;
      v16 = v12 == v10 && v15;
      if (v8 < 0)
      {
        operator delete(v9);
        if (v16)
        {
LABEL_30:
          for (i = *(_QWORD ***)(a1 + 176); i != *(_QWORD ***)(a1 + 184); ++i)
          {
            if (**i == v6)
            {
              v20 = (id)qword_100999870;
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
              {
                sub_10043E5F8(v6, __p);
                v21 = (v29 & 0x80u) == 0 ? __p : (void **)__p[0];
                *(_DWORD *)buf = 136446210;
                v37 = v21;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Magic Device do not set empty nickname - %{public}s", buf, 0xCu);
                if ((char)v29 < 0)
                  operator delete(__p[0]);
              }

              goto LABEL_49;
            }
          }
          v18 = (id)qword_100999870;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(v6, __p);
            v19 = (v29 & 0x80u) == 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 136446210;
            v37 = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Device nickname being set to empty for %{public}s", buf, 0xCu);
            if ((char)v29 < 0)
              operator delete(__p[0]);
          }

          sub_100091AE8(__p, "");
          sub_100440D9C(v6, (uint64_t)__p, 0);
          if ((char)v29 < 0)
            operator delete(__p[0]);
        }
      }
      else if (v16)
      {
        goto LABEL_30;
      }
LABEL_49:
      if (++v5 == v31)
        goto LABEL_50;
    }
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092FC10);
  v25 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v33, 0);
  if (v25)
  {
    v26 = (id)qword_100999870;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v25, __p);
      v27 = (v29 & 0x80u) == 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v37 = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Non-paired device nickname being set to empty for %{public}s", buf, 0xCu);
      if ((char)v29 < 0)
        operator delete(__p[0]);
    }

    sub_100091AE8(__p, "");
    sub_100440D9C(v25, (uint64_t)__p, 0);
    if ((char)v29 < 0)
      operator delete(__p[0]);
  }
LABEL_50:
  if (v30)
  {
    v31 = (uint64_t *)v30;
    operator delete(v30);
  }
  return sub_100034234((uint64_t)v35);
}

void sub_10046B544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;

  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_10046B5C8(uint64_t a1, uint64_t a2)
{
  return sub_10046B0FC(a1 - 8, a2);
}

void sub_10046B5D0(uint64_t a1, uint64_t a2)
{
  void **v3;
  void *v4;
  NSObject *v5;
  void **v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *__p[2];
  uint64_t v21;
  uint8_t buf[4];
  void **v23;

  if (sub_10045D35C())
  {
    sub_10043F898(a2, (uint64_t)__p);
    if (v21 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3));
    if (SHIBYTE(v21) < 0)
      operator delete(__p[0]);
    if ((objc_msgSend(v4, "hasSuffix:", CFSTR(" - Find My")) & 1) != 0)
    {
      v5 = (id)qword_100999870;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        v6 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v23 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Device has FM suffix: %{public}s", buf, 0xCu);
        if (SHIBYTE(v21) < 0)
          operator delete(__p[0]);
      }

      *(_DWORD *)buf = *(_DWORD *)(a2 + 128);
      LOWORD(v23) = *(_WORD *)(a2 + 132);
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", buf, 6));
      __p[0] = 0;
      __p[1] = 0;
      v21 = 0;
      sub_10046E9BC(buf, __p);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "substringToIndex:", (_BYTE *)objc_msgSend(v4, "length") - (_BYTE *)objc_msgSend(CFSTR(" - Find My"), "length")));
      v9 = objc_alloc_init((Class)SPOwnerInterface);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "ownerSession"));
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_10046B900;
      v14[3] = &unk_10092FBB0;
      v11 = v9;
      v15 = v11;
      v16 = v10;
      v19 = a2;
      v12 = v8;
      v17 = v12;
      v18 = v4;
      v13 = v10;
      objc_msgSend(v13, "fetchFindMyNetworkStatusForMACAddress:completion:", v7, v14);

      if (SHIBYTE(v21) < 0)
        operator delete(__p[0]);

    }
  }
}

void sub_10046B854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_10046B900(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  NSObject *v7;
  _BYTE *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE __p[12];
  __int16 v14;
  uint64_t v15;
  char v16;
  uint8_t buf[4];
  _BYTE *v18;
  __int16 v19;
  int v20;

  v5 = a3;
  v6 = (id)qword_100999870;
  v7 = v6;
  if (v5)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(*(_QWORD *)(a1 + 64), __p);
      sub_1006F3D64();
    }

  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(*(_QWORD *)(a1 + 64), __p);
      v8 = v16 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446466;
      v18 = v8;
      v19 = 1024;
      v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "FM Status for %{public}s device is: %d", buf, 0x12u);
      if (v16 < 0)
        operator delete(*(void **)__p);
    }

    if (a2 && *(_QWORD *)(a1 + 48))
    {
      v9 = qword_100999870;
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a1 + 48);
        v10 = *(_QWORD *)(a1 + 56);
        *(_DWORD *)__p = 138412546;
        *(_QWORD *)&__p[4] = v10;
        v14 = 2112;
        v15 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Renaming '%@' -> '%@'", __p, 0x16u);
      }
      v12 = *(_QWORD *)(a1 + 64);
      sub_100091AE8(__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 48)), "UTF8String"));
      sub_100440D9C(v12, (uint64_t)__p, 1);
      if (v16 < 0)
        operator delete(*(void **)__p);
    }
  }

}

void sub_10046BADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10046BB24(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  _QWORD v7[6];
  int v8;

  v6 = sub_10006BBEC();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10046BB98;
  v7[3] = &unk_1009180B0;
  v7[4] = a1;
  v7[5] = a2;
  v8 = a3;
  sub_100041A34(v6, v7);
}

void sub_10046BB98(uint64_t a1)
{
  sub_10046BBA8(*(_QWORD *)(a1 + 32), *(unsigned __int8 **)(a1 + 40), *(_DWORD *)(a1 + 48));
}

void sub_10046BBA8(uint64_t a1, unsigned __int8 *a2, int a3)
{
  NSObject *v6;
  _BYTE *v7;
  char *v8;
  unsigned __int8 ***i;
  unsigned __int8 **v10;
  NSObject *v11;
  int v12;
  uint8_t *v13;
  uint8_t *v14;
  _BYTE *v15;
  id v16;
  void *v17;
  NSObject *v18;
  uint8_t *v19;
  void *v20;
  void *v21;
  _BYTE *v22;
  uint64_t v23;
  NSObject *v24;
  int v25;
  char *v26;
  uint64_t v27;
  NSObject *v28;
  uint8_t *v29;
  uint8_t *v30;
  void *v31;
  _QWORD v32[5];
  _QWORD v33[5];
  _QWORD v34[2];
  uint8_t v35[4];
  uint8_t *v36;
  __int16 v37;
  _BYTE *v38;
  _BYTE __p[12];
  __int16 v40;
  void *v41;
  char v42;
  uint8_t buf[8];
  _BYTE v44[10];
  __int16 v45;
  char *v46;

  if (*(_BYTE *)(a1 + 241))
  {
    v6 = (id)qword_100999870;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8((uint64_t)a2, __p);
      v7 = v42 >= 0 ? __p : *(_BYTE **)__p;
      v8 = *(_BYTE *)(a1 + 242) ? "in" : "not in";
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = a3;
      *(_WORD *)v44 = 2082;
      *(_QWORD *)&v44[2] = v7;
      v45 = 2082;
      v46 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Device info changed (%d) for device %{public}s with cloud sync is %{public}s progress", buf, 0x1Cu);
      if (v42 < 0)
        operator delete(*(void **)__p);
    }

    if (a3 > 4096)
    {
      v34[0] = 0;
      v34[1] = 0;
      sub_10003415C((uint64_t)v34, a1 + 104);
      for (i = *(unsigned __int8 ****)(a1 + 176); i != *(unsigned __int8 ****)(a1 + 184); ++i)
      {
        v10 = *i;
        if (**i == a2)
          goto LABEL_19;
      }
      v10 = 0;
LABEL_19:
      sub_100034264((uint64_t)v34);
      if (v10)
      {
        if (a3 == 4101)
          sub_1004693D4(a1, (uint64_t)v10);
        else
          sub_100466A3C(a1, (uint64_t)a2, a3);
        goto LABEL_80;
      }
      if (a3 == 4102)
      {
        if (qword_100977A68 != -1)
          dispatch_once(&qword_100977A68, &stru_10092FD10);
        v22 = off_100977A60;
        if (sub_10045D35C())
        {
          if (v22[240])
          {
            if (!a2[980]
              && !a2[981]
              && !sub_10043FC5C((uint64_t)a2)
              && sub_10043F65C((uint64_t)a2, 0x80000u) == 4)
            {
              v23 = sub_100447C64((uint64_t)a2);
              if ((v23 & 2) == 0)
              {
                if (qword_100977A68 != -1)
                  dispatch_once(&qword_100977A68, &stru_10092FD10);
                if ((sub_10045E940(v23, (uint64_t)a2) & 1) == 0)
                {
                  v24 = (id)qword_100999870;
                  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
                  {
                    v25 = sub_100447C64((uint64_t)a2);
                    sub_10043F6EC((uint64_t)a2, (uint64_t)__p);
                    v26 = v42 >= 0 ? __p : *(char **)__p;
                    *(_DWORD *)buf = 67109635;
                    *(_DWORD *)&buf[4] = v25;
                    strcpy(v44, "p\bhash");
                    v44[7] = 0;
                    *(_WORD *)&v44[8] = 0;
                    v45 = 2081;
                    v46 = v26;
                    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "GAPA Flags - %d, sending magic keys and renaming genuine device %{private, mask.hash}s", buf, 0x1Cu);
                    if (v42 < 0)
                      operator delete(*(void **)__p);
                  }

                  if (qword_100977A88 != -1)
                    dispatch_once(&qword_100977A88, &stru_10092FC90);
                  sub_1002830C8((uint64_t)off_100977A80, a2);
                  if (qword_1009778E8 != -1)
                    dispatch_once(&qword_1009778E8, &stru_10092FC10);
                  sub_10047200C((uint64_t)off_1009778E0, (uint64_t)a2);
                }
              }
            }
          }
        }
        goto LABEL_80;
      }
      if (a3 != 4098)
      {
LABEL_80:
        sub_100034234((uint64_t)v34);
        return;
      }
      v11 = (id)qword_100999870;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043F78C((uint64_t)a2, (uint64_t)buf);
        v12 = SBYTE3(v46);
        v13 = *(uint8_t **)buf;
        sub_10043F6EC((uint64_t)a2, (uint64_t)__p);
        v14 = buf;
        if (v12 < 0)
          v14 = v13;
        if (v42 >= 0)
          v15 = __p;
        else
          v15 = *(_BYTE **)__p;
        *(_DWORD *)v35 = 136315394;
        v36 = v14;
        v37 = 2080;
        v38 = v15;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[3rd] Nickname info changed from %s to %s", v35, 0x16u);
        if (v42 < 0)
          operator delete(*(void **)__p);
        if (SBYTE3(v46) < 0)
          operator delete(*(void **)buf);
      }

      sub_10043F898((uint64_t)a2, (uint64_t)buf);
      if (SBYTE3(v46) < 0)
      {
        v27 = *(_QWORD *)v44;
        operator delete(*(void **)buf);
        if (v27)
          goto LABEL_36;
      }
      else if (BYTE3(v46))
      {
LABEL_36:
        v16 = sub_10045E64C((uint64_t)a2);
        v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        v18 = (id)qword_100999870;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8((uint64_t)a2, buf);
          if (SBYTE3(v46) >= 0)
            v19 = buf;
          else
            v19 = *(uint8_t **)buf;
          *(_DWORD *)__p = 136446466;
          *(_QWORD *)&__p[4] = v19;
          v40 = 2112;
          v41 = v17;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[3rd] Add nickname info from %{public}s with record: %@", __p, 0x16u);
          if (SBYTE3(v46) < 0)
            operator delete(*(void **)buf);
        }

        v20 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "cloudClient"));
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472;
        v32[2] = sub_10046C504;
        v32[3] = &unk_10092FA30;
        v32[4] = a2;
        objc_msgSend(v21, "createDeviceRecord:completion:", v17, v32);

LABEL_79:
        goto LABEL_80;
      }
      v28 = (id)qword_100999870;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8((uint64_t)a2, buf);
        v29 = SBYTE3(v46) >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)__p = 136446210;
        *(_QWORD *)&__p[4] = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "[3rd] Remove nickname info from %{public}s", __p, 0xCu);
        if (SBYTE3(v46) < 0)
          operator delete(*(void **)buf);
      }

      v17 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "cloudClient"));
      sub_10046E9BC(a2 + 128, buf);
      if (SBYTE3(v46) >= 0)
        v30 = buf;
      else
        v30 = *(uint8_t **)buf;
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v30));
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472;
      v33[2] = sub_10046C3C4;
      v33[3] = &unk_10092FA30;
      v33[4] = a2;
      objc_msgSend(v20, "deleteDeviceRecord:completion:", v31, v33);

      if (SBYTE3(v46) < 0)
        operator delete(*(void **)buf);
      goto LABEL_79;
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
  {
    sub_1006F3DA8();
  }
}

void sub_10046C274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10046C350(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[6];
  int v8;

  v5 = a1 - 40;
  v6 = sub_10006BBEC();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10046BB98;
  v7[3] = &unk_1009180B0;
  v7[4] = v5;
  v7[5] = a2;
  v8 = a3;
  sub_100041A34(v6, v7);
}

void sub_10046C3C4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;

  v3 = a2;
  v4 = (id)qword_100999870;
  v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(*(_QWORD *)(a1 + 32), __p);
      sub_1006F3DD4();
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(*(_QWORD *)(a1 + 32), __p);
    v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[3rd] Removed cloud device %{public}s", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }

}

void sub_10046C4E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10046C504(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;

  v3 = a2;
  v4 = (id)qword_100999870;
  v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(*(_QWORD *)(a1 + 32), __p);
      sub_1006F3E18();
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(*(_QWORD *)(a1 + 32), __p);
    v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[3rd] Create cloud device %{public}s", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }

}

void sub_10046C624(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10046C644(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  int v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t **v13;
  mach_header_64 *v14;
  uint64_t v15;
  _BOOL8 v16;
  NSObject *v17;
  mach_header_64 *v18;
  int v19;
  void **v20;
  int v21;
  int v22;
  char v23;
  void **v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  void *__p[2];
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t buf[4];
  _BYTE v39[14];
  __int16 v40;
  int v41;
  __int16 v42;
  _OWORD *v43;
  __int16 v44;
  int v45;
  _OWORD v46[2];
  _OWORD v47[2];

  v2 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ----------------- Magic Pairing Manager ------------------", buf, 2u);
  }
  v3 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: Magic Paired devices:", buf, 2u);
  }
  v4 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4))
  {
    v5 = (id)qword_100999870;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (_QWORD *)(a1 + 216);
      if (*(char *)(a1 + 239) < 0)
        v6 = (_QWORD *)*v6;
      v7 = *(unsigned __int8 *)(a1 + 241);
      if (sub_10045D35C())
        v8 = *(unsigned __int8 *)(a1 + 240);
      else
        v8 = 0;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v39 = v6;
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)&v39[10] = v7;
      v40 = 1024;
      v41 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Cloud Account ID: %s, Cloud Signed in: %d, Initialized: %d", buf, 0x18u);
    }

    v9 = qword_100999870;
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      *(_DWORD *)v39 = 16;
      *(_WORD *)&v39[4] = 2096;
      *(_QWORD *)&v39[6] = a1 + 49;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Acc Master Key:%.16P", buf, 0x12u);
    }
    v10 = qword_100999870;
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      *(_DWORD *)v39 = 16;
      *(_WORD *)&v39[4] = 2096;
      *(_QWORD *)&v39[6] = a1 + 65;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Acc Master Hint:%.16P", buf, 0x12u);
    }
    v11 = qword_100999870;
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      *(_DWORD *)v39 = 16;
      *(_WORD *)&v39[4] = 2096;
      *(_QWORD *)&v39[6] = a1 + 81;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Acc Master Cloud IRK:%.16P", buf, 0x12u);
    }
    v12 = qword_100999870;
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      *(_DWORD *)v39 = 6;
      *(_WORD *)&v39[4] = 2096;
      *(_QWORD *)&v39[6] = a1 + 97;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Acc Master Cloud Addr:%.6P", buf, 0x12u);
    }
    v13 = *(uint64_t ***)(a1 + 176);
    if (v13 != *(uint64_t ***)(a1 + 184))
    {
      v14 = (mach_header_64 *)&_mh_execute_header;
      do
      {
        v15 = **v13;
        v36 = 0;
        v37 = 0;
        v16 = sub_100444BF0(v15, (_DWORD *)&v37 + 1, &v37, (_DWORD *)&v36 + 1, &v36);
        v33 = ccsha256_di(v16);
        memset(v47, 0, sizeof(v47));
        memset(v46, 0, sizeof(v46));
        v17 = (id)qword_100999870;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          v18 = v14;
          sub_10043E5F8(v15, __p);
          v19 = v35;
          v20 = (void **)__p[0];
          v21 = HIDWORD(v36);
          v22 = v37;
          v23 = sub_100447C64(v15);
          *(_DWORD *)buf = 136446978;
          v24 = __p;
          if (v19 < 0)
            v24 = v20;
          *(_QWORD *)v39 = v24;
          *(_WORD *)&v39[8] = 1024;
          *(_DWORD *)&v39[10] = v22;
          v40 = 1024;
          v41 = v21;
          v42 = 1024;
          LODWORD(v43) = v23 & 2;
          v14 = v18;
          _os_log_impl(v18, v17, OS_LOG_TYPE_DEFAULT, "statedump: Device %{public}s, vid: %x, pid: %x, Fake: %d", buf, 0x1Eu);
          if (v35 < 0)
            operator delete(__p[0]);
        }

        v25 = qword_100999870;
        if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
        {
          v26 = (uint64_t)(*v13 + 5);
          v27 = (uint64_t)(*v13 + 7);
          v28 = *((_DWORD *)*v13 + 18);
          *(_DWORD *)buf = 68158722;
          *(_DWORD *)v39 = 16;
          *(_WORD *)&v39[4] = 2096;
          *(_QWORD *)&v39[6] = v26;
          v40 = 1040;
          v41 = 16;
          v42 = 2096;
          v43 = (_OWORD *)v27;
          v44 = 1024;
          v45 = v28;
          _os_log_impl(v14, v25, OS_LOG_TYPE_DEFAULT, "Acc Key %.16P for Hint %.16P  and Ratchet %d ", buf, 0x28u);
        }
        v29 = qword_100999870;
        if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
        {
          v30 = (uint64_t)(*v13 + 1);
          v31 = (uint64_t)(*v13 + 3);
          *(_DWORD *)buf = 68158466;
          *(_DWORD *)v39 = 16;
          *(_WORD *)&v39[4] = 2096;
          *(_QWORD *)&v39[6] = v30;
          v40 = 1040;
          v41 = 16;
          v42 = 2096;
          v43 = (_OWORD *)v31;
          _os_log_impl(v14, v29, OS_LOG_TYPE_DEFAULT, "IRK %.16P and Encryption key %.16P", buf, 0x22u);
        }
        ccdigest(v33, 16, *v13 + 1, v47);
        ccdigest(v33, 16, *v13 + 3, v46);
        v32 = qword_100999870;
        if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68158466;
          *(_DWORD *)v39 = 32;
          *(_WORD *)&v39[4] = 2096;
          *(_QWORD *)&v39[6] = v47;
          v40 = 1040;
          v41 = 32;
          v42 = 2096;
          v43 = v46;
          _os_log_impl(v14, v32, OS_LOG_TYPE_DEFAULT, "Hashed IRK %.32P and Hashed Encryption key %.32P", buf, 0x22u);
        }
        ++v13;
      }
      while (v13 != *(uint64_t ***)(a1 + 184));
    }
  }
}

void sub_10046CBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  _Unwind_Resume(a1);
}

void sub_10046CC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6, _OWORD *a7)
{
  NSObject *v12;
  int v13;
  unint64_t v14;
  const char *v15;
  __n128 *v16;
  _QWORD **i;
  _QWORD *v18;
  const char *v19;
  __CFString *v20;
  NSObject *v21;
  uint64_t v22;
  NSString *v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  __n128 *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  NSObject *v41;
  void *v42;
  _QWORD block[6];
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[5];
  _QWORD v48[2];
  _QWORD v49[9];
  _QWORD v50[9];
  _BYTE buf[32];
  uint64_t (*v52)();
  void *v53;
  _DWORD v54[4];
  __n128 v55;
  int v56;
  char v57;

  v12 = (id)qword_100999870;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, &v55);
    v13 = v57;
    v14 = v55.n128_u64[0];
    v15 = sub_1002292BC(a3);
    v16 = &v55;
    *(_DWORD *)buf = 136446722;
    if (v13 < 0)
      v16 = (__n128 *)v14;
    *(_QWORD *)&buf[4] = v16;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v15;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Magic pairing completed with device %{public}s status:%d, %s", buf, 0x1Cu);
    if (v57 < 0)
      operator delete((void *)v55.n128_u64[0]);
  }

  v48[0] = 0;
  v48[1] = 0;
  sub_10003415C((uint64_t)v48, a1 + 104);
  for (i = *(_QWORD ***)(a1 + 176); i != *(_QWORD ***)(a1 + 184); ++i)
  {
    v18 = *i;
    if (**i == a2)
      goto LABEL_11;
  }
  v18 = 0;
LABEL_11:
  switch((int)a3)
  {
    case 0:
      v55 = 0uLL;
      v56 = 0;
      sub_1005A9734((uint64_t)&v55, a7, 4u);
      if (qword_100978160 != -1)
        dispatch_once(&qword_100978160, &stru_10092FC30);
      sub_1005BEC60((uint64_t)off_100978158, (unsigned __int8 *)a2, &v55, 1);
      if (v18)
      {
        if (a5)
          *(_OWORD *)(v18 + 5) = *a5;
        if ((_DWORD)a6)
          *((_DWORD *)v18 + 18) = a6;
        if (*(_BYTE *)(a1 + 48))
        {
          buf[0] = 0;
          sub_100043758(buf);
          sub_10045E1AC(a1);
          sub_100043728(buf);
        }
        sub_100460960(a1, a2);
        nullsub_90(&v55, v22);
        v20 = CFSTR("Success");
        goto LABEL_40;
      }
      v30 = (id)qword_100999870;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(a2, buf);
        sub_1006F3F08();
      }

      nullsub_90(&v55, v31);
      v20 = CFSTR("Success");
      goto LABEL_71;
    case 1:
    case 7:
      v19 = "BT_MAGIC_PAIRING_FAILED_VERIFICATION";
      if ((_DWORD)a3 == 1)
        v19 = "BT_MAGIC_PAIRING_INTERNAL_ERROR";
      v20 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Magic Pairing failed due to %s"), v19));
      v21 = qword_100999870;
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v20;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
      }
      sub_100460584(a1, (uint64_t)v18);
      goto LABEL_28;
    case 2:
      v25 = qword_100999870;
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = CFSTR("Peer device has no pairing keys BT_MAGIC_PAIRING_KEY_NOT_FOUND");
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
      }
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3812000000;
      *(_QWORD *)&buf[24] = sub_100062630;
      v52 = nullsub_21;
      v53 = &unk_10083E079;
      *(_DWORD *)((char *)v54 + 3) = 0;
      v54[0] = 0;
      *(_WORD *)((char *)&v54[1] + 1) = *(_WORD *)(a2 + 132);
      *(_DWORD *)((char *)v54 + 1) = *(_DWORD *)(a2 + 128);
      v26 = sub_1000419F4();
      v47[0] = _NSConcreteStackBlock;
      v47[1] = 3221225472;
      v47[2] = sub_10046D5B4;
      v47[3] = &unk_1009193E8;
      v47[4] = buf;
      sub_100041A34(v26, v47);
      _Block_object_dispose(buf, 8);
      v20 = CFSTR("Peer device has no pairing keys BT_MAGIC_PAIRING_KEY_NOT_FOUND");
      goto LABEL_40;
    case 8:
      v27 = qword_100999870;
      v20 = CFSTR("We dont have keys for the peer device BT_MAGIC_PAIRING_NO_KEYS_FOR_PEER");
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = CFSTR("We dont have keys for the peer device BT_MAGIC_PAIRING_NO_KEYS_FOR_PEER");
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
      }
      goto LABEL_40;
    default:
      v23 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Magic Pairing failed due to %s"), sub_1002292BC(a3));
      v20 = (__CFString *)objc_claimAutoreleasedReturnValue(v23);
LABEL_28:
      v24 = (id)qword_100999870;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(a2, buf);
        sub_1006F3EBC();
      }

      v55.n128_u8[0] = 0;
      sub_100043758(&v55);
      if (sub_10018070C(a2 + 128))
      {

        v20 = CFSTR("Magic Pairing error disconnect failed");
      }
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
        sub_1006F3E5C();
      sub_100043728(&v55);
LABEL_40:
      v45 = 0;
      v46 = 0;
      sub_100444BF0(a2, (_DWORD *)&v46 + 1, &v46, (_DWORD *)&v45 + 1, &v45);
      if (v18)
      {
        v28 = *((unsigned __int8 *)v18 + 112);
        if ((_DWORD)v28 != (_DWORD)a3)
          *((_BYTE *)v18 + 112) = a3;
        if (a6 <= 0x3A98)
        {
          if ((a6 - 10001) >> 3 > 0x270)
          {
            if ((a6 - 7501) >= 0x9C4)
            {
              if ((a6 - 5001) >= 0x9C4)
              {
                if ((a6 - 2501) >= 0x9C4)
                {
                  if ((a6 - 1001) >= 0x5DC)
                  {
                    if ((a6 - 501) >= 0x1F4)
                    {
                      if ((a6 - 251) >= 0xFA)
                      {
                        if ((a6 - 1) >= 0xFA)
                          v29 = 0;
                        else
                          v29 = 250;
                      }
                      else
                      {
                        v29 = 500;
                      }
                    }
                    else
                    {
                      v29 = 1000;
                    }
                  }
                  else
                  {
                    v29 = 2500;
                  }
                }
                else
                {
                  v29 = 5000;
                }
              }
              else
              {
                v29 = 7500;
              }
            }
            else
            {
              v29 = 10000;
            }
          }
          else
          {
            v29 = 15000;
          }
        }
        else
        {
          v29 = 0xFFFFFFFFLL;
        }
        v49[0] = CFSTR("FWVersion");
        sub_1004491B4(a2, 0xAu, &v55);
        if (v57 >= 0)
          v32 = &v55;
        else
          v32 = (__n128 *)v55.n128_u64[0];
        v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v32));
        v50[0] = v42;
        v49[1] = CFSTR("PID");
        v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(v45)));
        v50[1] = v33;
        v49[2] = CFSTR("PreviousStatus");
        v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v28));
        v50[2] = v34;
        v49[3] = CFSTR("RatchetRange");
        v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v29));
        v50[3] = v35;
        v49[4] = CFSTR("RatchetInternal");
        v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a6));
        v50[4] = v36;
        v50[5] = v20;
        v49[5] = CFSTR("Reason");
        v49[6] = CFSTR("RepeatingStatus");
        v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (_DWORD)v28 == (_DWORD)a3));
        v50[6] = v37;
        v49[7] = CFSTR("Status");
        v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a3));
        v50[7] = v38;
        v49[8] = CFSTR("VID");
        v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v46));
        v50[8] = v39;
        v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v50, v49, 9));

        if (v57 < 0)
          operator delete((void *)v55.n128_u64[0]);
        v41 = *(NSObject **)(a1 + 208);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10046D64C;
        block[3] = &unk_100918868;
        block[4] = v40;
        block[5] = a2;
        dispatch_async(v41, block);

      }
LABEL_71:
      sub_100034234((uint64_t)v48);

      return;
  }
}

void sub_10046D440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  uint64_t v18;
  uint64_t v20;
  va_list va;

  va_start(va, a17);

  nullsub_90(v18 - 128, v20);
  sub_100034234((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_10046D5B4(uint64_t a1)
{
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_10092FC50);
  sub_1006840C4((uint64_t)off_100977FA8, (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48));
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_10092FC70);
  return sub_10069E810(qword_1009778B0, (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48));
}

uint64_t sub_10046D64C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100065478();
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 336))(v2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_10046D678(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4, _OWORD *a5, _OWORD *a6, int a7)
{
  uint64_t v8;
  int v9;
  __int128 v11;
  uint64_t v12;

  *(_QWORD *)(a1 + 88) = 0;
  v8 = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = -1;
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *a3;
  *(_OWORD *)(a1 + 24) = *a4;
  *(_DWORD *)(a1 + 72) = a7;
  *(_DWORD *)(a1 + 84) = 0;
  *(_OWORD *)(a1 + 40) = *a5;
  *(_OWORD *)(a1 + 56) = *a6;
  *(_BYTE *)(a1 + 77) = 0;
  v9 = *(_DWORD *)(a2 + 128);
  *(_WORD *)(a1 + 82) = *(_WORD *)(a2 + 132);
  *(_DWORD *)(a1 + 78) = v9;
  sub_10043F6EC(a2, (uint64_t)&v11);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)v8);
  *(_OWORD *)v8 = v11;
  *(_QWORD *)(v8 + 16) = v12;
  return a1;
}

void sub_10046D728(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 111) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10046D744(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  NSObject *v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  int buf;
  uint8_t buf_4[8];

  if ((sub_10045D35C() & 1) == 0)
  {
    v10 = qword_100999870;
    if (!os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
      return;
    LOWORD(buf) = 0;
    v11 = "upgradeToManatee, Magic Pairing not supported";
LABEL_17:
    v12 = v10;
    v13 = 2;
    goto LABEL_18;
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092FC10);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) == 0)
  {
    v10 = qword_100999870;
    if (!os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
      return;
    LOWORD(buf) = 0;
    v11 = "upgradeToManatee System has not passed first unlock (or device prefs not read yet). Do not write DeviceList to Cloud";
    goto LABEL_17;
  }
  v31 = a1;
  if (*(_OWORD *)(a1 + 49) != 0 && *(_OWORD *)(a1 + 65) != 0)
  {
    v29 = a1 + 65;
    v30 = a1 + 49;
    v32 = 0;
    v2 = sub_100038E50();
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v2 + 72))(v2, (char *)&v32 + 1);
    v3 = sub_100038E50();
    (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v3 + 80))(v3, &v32);
    v4 = *(unsigned __int8 *)(a1 + 241);
    v5 = HIBYTE(v32);
    v6 = qword_100999870;
    v7 = os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT);
    if (v4 && !v5)
    {
      if (v7)
      {
        v8 = (uint64_t)(*(_QWORD *)(v31 + 184) - *(_QWORD *)(v31 + 176)) >> 3;
        buf = 134217984;
        *(_QWORD *)buf_4 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "upgradeToManatee information for %lu devices to cloud", (uint8_t *)&buf, 0xCu);
      }
      v9 = *(_QWORD *)(v31 + 184) - *(_QWORD *)(v31 + 176);
      if (v9)
      {
        is_mul_ok(v9 >> 3, 0x98uLL);
        operator new[]();
      }
      (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v31 + 168) + 168))(*(_QWORD *)(v31 + 168), 0, 0, v30, v29);
      return;
    }
    if (!v7)
      return;
    if (*(_BYTE *)(v31 + 241))
      v28 = "online";
    else
      v28 = "signed in";
    buf = 136446210;
    *(_QWORD *)buf_4 = v28;
    v11 = "Warning: Device is not %{public}s";
    v12 = v6;
    v13 = 12;
LABEL_18:
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&buf, v13);
    return;
  }
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
    sub_1006F4040();
  v14 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
    sub_1006F3FCC(a1 + 49, v14, v15, v16, v17, v18, v19, v20);
  v21 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
    sub_1006F3F54(a1, v21, v22, v23, v24, v25, v26, v27);
}

void sub_10046E120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  _Unwind_Resume(a1);
}

void sub_10046E1B0(uint64_t a1)
{
  sub_10046D744(a1 - 8);
}

void sub_10046E1C0(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  v6 = *(char **)(a1 + 8);
  while (*(_QWORD *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      v7 = a2;
      sub_10046E274(a1 + 8, v6, (char *)&v7);
      sub_10007AA30(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_10046E274(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_10046E478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10046E4B0(id a1)
{
  operator new();
}

void sub_10046E4F0()
{
  operator delete();
}

void sub_10046E514(id a1)
{
  operator new();
}

void sub_10046E554()
{
  operator delete();
}

void sub_10046E578(id a1)
{
  operator new();
}

void sub_10046E5B8()
{
  operator delete();
}

void sub_10046E5DC(id a1)
{
  operator new();
}

void sub_10046E61C()
{
  operator delete();
}

void sub_10046E640(id a1)
{
  operator new();
}

void sub_10046E680()
{
  operator delete();
}

void sub_10046E6A4(id a1)
{
  operator new();
}

void sub_10046E6E4()
{
  operator delete();
}

void sub_10046E708(id a1)
{
  operator new();
}

void sub_10046E748()
{
  operator delete();
}

void sub_10046E76C(id a1)
{
  operator new();
}

void sub_10046E7AC()
{
  operator delete();
}

void sub_10046E7D0(id a1)
{
  operator new();
}

void sub_10046E810()
{
  operator delete();
}

void sub_10046E834(id a1)
{
  operator new();
}

void sub_10046E874()
{
  operator delete();
}

void sub_10046E898(id a1)
{
  operator new();
}

void sub_10046E930()
{
  operator delete();
}

_QWORD *sub_10046E954(_QWORD *result, uint64_t a2, uint64_t a3, float a4)
{
  int v4;
  _QWORD *v5;

  if (v4 >= 0)
    v5 = result;
  else
    v5 = (_QWORD *)*result;
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = v5;
  *(_WORD *)(a3 + 12) = 2112;
  *(_QWORD *)(a3 + 14) = a2;
  return result;
}

void sub_10046E9A8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x22u);
}

_QWORD *sub_10046E9BC@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  char __str[8];
  uint64_t v5;
  char v6;
  char v7;

  *(_QWORD *)__str = 0;
  v5 = 0;
  v6 = 0;
  snprintf(__str, 0x12uLL, "%02X:%02X:%02X:%02X:%02X:%02X", *a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  v7 = 0;
  return sub_100091AE8(a2, __str);
}

BOOL sub_10046EA5C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v3)
  {
    while (*v2 != a2)
    {
      if (++v2 == v3)
      {
        v2 = *(_QWORD **)(a1 + 8);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

BOOL sub_10046EA90(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    while (*(_QWORD *)v3 != a2)
    {
      v3 += 8;
      if (v3 == v4)
      {
        v3 = a1[1];
        break;
      }
    }
  }
  if (v3 != v4)
  {
    if (v4 != v3 + 8)
      memmove(v3, v3 + 8, v4 - (v3 + 8));
    a1[1] = v4 - 8;
  }
  return v3 != v4;
}

uint64_t sub_10046EB0C(uint64_t a1)
{
  *(_QWORD *)a1 = off_10092FD40;
  *(_QWORD *)(a1 + 8) = off_10092FDC8;
  *(_QWORD *)(a1 + 16) = off_10092FDE8;
  *(_QWORD *)(a1 + 24) = off_10092FE20;
  *(_QWORD *)(a1 + 32) = &off_10092FE48;
  *(_QWORD *)(a1 + 40) = off_10092FE60;
  sub_1000160D0(a1 + 48);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  sub_1000160D0(a1 + 168);
  *(_DWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  *(_BYTE *)(a1 + 305) = 0;
  return a1;
}

void sub_10046EBB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  _QWORD **v5;
  void **v6;
  void *v8;

  v6 = v4;
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 152) = v8;
    operator delete(v8);
  }
  sub_10001A82C(v3, *v5);
  sub_100069BDC(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10046EBEC(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = off_10092FD40;
  *(_QWORD *)(a1 + 8) = off_10092FDC8;
  *(_QWORD *)(a1 + 16) = off_10092FDE8;
  *(_QWORD *)(a1 + 24) = off_10092FE20;
  *(_QWORD *)(a1 + 32) = &off_10092FE48;
  *(_QWORD *)(a1 + 40) = off_10092FE60;
  sub_10001A82C(a1 + 272, *(_QWORD **)(a1 + 280));
  v2 = *(void **)(a1 + 248);
  if (v2)
  {
    *(_QWORD *)(a1 + 256) = v2;
    operator delete(v2);
  }
  sub_100069BDC(a1 + 168);
  v3 = *(void **)(a1 + 144);
  if (v3)
  {
    *(_QWORD *)(a1 + 152) = v3;
    operator delete(v3);
  }
  sub_10001A82C(a1 + 112, *(_QWORD **)(a1 + 120));
  sub_100069BDC(a1 + 48);
  return a1;
}

uint64_t sub_10046EC80(uint64_t a1)
{
  return sub_10046EBEC(a1 - 16);
}

void sub_10046EC88(uint64_t a1)
{
  sub_10046EBEC(a1);
  operator delete();
}

void sub_10046ECAC(uint64_t a1)
{
  sub_10046EBEC(a1 - 16);
  operator delete();
}

uint64_t sub_10046ECD4(uint64_t a1)
{
  void (***v2)(_QWORD);
  NSObject *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  NSObject *v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  std::string *p_p;
  std::string::size_type size;
  std::string *v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  std::string __p;
  uint8_t buf[16];
  _OWORD v20[4];
  void *v21[2];
  __int128 v22;
  __int128 v23;
  _BYTE v24[144];
  uint64_t v25;
  _QWORD handler[5];
  int out_token;
  _QWORD v28[2];

  v28[0] = 0;
  v28[1] = 0;
  sub_10003415C((uint64_t)v28, a1 + 168);
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092FEE8);
  sub_10042381C(qword_100977B48 + 8, a1 + 8);
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10092FF08);
  sub_1005BF4A0(off_100978158, a1 + 16);
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_10092FF28);
  sub_1000D96F8((uint64_t)off_100978188 + 24, a1 + 24);
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_10092FF48);
  sub_1002B4110((uint64_t)off_100978128 + 80, a1 + 32);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10092FF68);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1 + 40);
  atomic_store(0, (unsigned __int8 *)(a1 + 232));
  if (MKBDeviceUnlockedSinceBoot())
  {
    v2 = (void (***)(_QWORD))sub_10034D650();
    (**v2)(v2);
    v3 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "DeviceManager init, system already unlocked, allow read/write device settings", buf, 2u);
    }
    atomic_store(1u, (unsigned __int8 *)(a1 + 232));
    v4 = *(uint64_t **)(a1 + 144);
    v5 = *(uint64_t **)(a1 + 152);
    while (v4 != v5)
      sub_10043C174(*v4++);
    sub_10046F210(a1);
    if (qword_100977898 != -1)
      dispatch_once(&qword_100977898, &stru_10092FF88);
    sub_10047A054((uint64_t)off_100977890);
  }
  else
  {
    out_token = 0;
    v8 = *(NSObject **)(sub_10006BBEC() + 8);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10046F3CC;
    handler[3] = &unk_100927440;
    handler[4] = a1;
    v9 = notify_register_dispatch("com.apple.mobile.keybagd.first_unlock", &out_token, v8, handler);
    v10 = v9;
    if ((_DWORD)v9)
    {
      if (IsAppleInternalBuild(v9))
      {
        v25 = 0;
        v23 = 0u;
        memset(v24, 0, sizeof(v24));
        *(_OWORD *)v21 = 0u;
        v22 = 0u;
        memset(v20, 0, sizeof(v20));
        *(_OWORD *)buf = 0u;
        sub_1002613AC((uint64_t)buf);
        v11 = sub_1002614D8(v20, (uint64_t)"Failed registration for MKB first unlock notification with error : ", 67);
        std::to_string(&__p, v10);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        sub_1002614D8(v11, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        std::stringbuf::str((char *)v20 + 8);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &__p;
        else
          v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
        sub_10011D44C((const char *)v14);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *(_QWORD *)&v20[0] = v15;
        if (SHIBYTE(v22) < 0)
          operator delete(v21[1]);
        std::streambuf::~streambuf((char *)v20 + 8);
        std::ios::~ios(v24);
      }
      else
      {
        v17 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
          sub_1006F406C(v10, v17);
      }
    }
    else
    {
      v16 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Successfully registered for MKB first unlock notification", buf, 2u);
      }
    }
  }
  *(_DWORD *)(a1 + 296) = 0;
  v6 = sub_100027F68();
  sub_100091AE8(buf, "A2DP");
  sub_100091AE8(&__p, "WirelessSplitterLinkKeyTimeout");
  (*(void (**)(uint64_t, uint8_t *, std::string *, uint64_t))(*(_QWORD *)v6 + 88))(v6, buf, &__p, a1 + 296);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SBYTE7(v20[0]) < 0)
    operator delete(*(void **)buf);
  *(_DWORD *)(a1 + 300) = 0;
  *(_BYTE *)(a1 + 304) = 1;
  return sub_100034234((uint64_t)v28);
}

void sub_10046F188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  sub_1006CC5C8((uint64_t)&a16);
  sub_100034234(v21 - 64);
  _Unwind_Resume(a1);
}

void sub_10046F210(uint64_t a1)
{
  NSObject *v2;
  uint64_t *i;
  uint64_t *v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t *v7;
  uint8_t buf[8];
  char v9;
  uint8_t v10[4];
  uint8_t *v11;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Device Database has been updated, update device info for all paired devices", buf, 2u);
  }
  v4 = *(uint64_t **)(a1 + 144);
  for (i = *(uint64_t **)(a1 + 152); v4 != i; ++v4)
  {
    v5 = *v4;
    if (*v4)
    {
      v6 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v5, buf);
        v7 = v9 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)v10 = 136446210;
        v11 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending 'name changed' event for device %{public}s", v10, 0xCu);
        if (v9 < 0)
          operator delete(*(void **)buf);
      }
      sub_1004703C8((os_unfair_lock_s *)a1, v5, 6);
      if (qword_100977A78 != -1)
        dispatch_once(&qword_100977A78, &stru_10092FFA8);
      sub_100497FB4((uint64_t)off_100977A70, v5, 0xFFFFFFFFLL, 0, 701, 0);
      i = *(uint64_t **)(a1 + 152);
    }
  }
}

void sub_10046F3CC(uint64_t a1)
{
  sub_10046F3D4(*(_QWORD *)(a1 + 32));
}

void sub_10046F3D4(uint64_t a1)
{
  NSObject *v2;
  void (***v3)(_QWORD);
  uint64_t v4;
  _QWORD v5[5];
  uint8_t buf[4];
  int v7;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v7 = MKBDeviceUnlockedSinceBoot();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "DeviceManager: Received MKB first unlock notification. MKBDeviceUnlockedSinceBoot returns : %d", buf, 8u);
  }
  if (MKBDeviceUnlockedSinceBoot() != 1
    && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
  {
    sub_1006F40DC();
  }
  v3 = (void (***)(_QWORD))sub_10034D650();
  (**v3)(v3);
  v4 = sub_10006BBEC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100473790;
  v5[3] = &unk_100917378;
  v5[4] = a1;
  sub_100475CEC(v4, 2000, v5);
  *(_BYTE *)(a1 + 305) = 1;
}

void sub_10046F504(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_10092FF28);
  sub_100069060((uint64_t)off_100978188 + 24, (uint64_t)(a1 + 3));
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10092FF08);
  sub_1005BF5D8((uint64_t)off_100978158, (uint64_t)(a1 + 2));
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092FEE8);
  sub_100069060(qword_100977B48 + 8, (uint64_t)(a1 + 1));
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10092FF68);
  sub_100069060((uint64_t)off_100977A50 + 64, (uint64_t)(a1 + 5));
  v2 = (_QWORD *)a1[14];
  v3 = a1 + 15;
  if (v2 != a1 + 15)
  {
    do
    {
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_10092FEE8);
      sub_10050ABD0(qword_100977B48, v2[4]);
      v4 = (_QWORD *)v2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  sub_10001A82C((uint64_t)(a1 + 14), (_QWORD *)a1[15]);
  a1[15] = 0;
  a1[16] = 0;
  a1[14] = v3;
}

unint64_t sub_10046F6C0(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 48);
  if (a2)
  {
    v6 = *(_QWORD **)(a1 + 120);
    v5 = (_QWORD *)(a1 + 120);
    v4 = v6;
    if (!v6)
      goto LABEL_13;
    v7 = v5;
    do
    {
      v8 = v4[4];
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = v4;
      else
        v10 = v4 + 1;
      if (v9)
        v7 = v4;
      v4 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 != v5 && v7[4] <= a2)
      a2 = v7[5];
    else
LABEL_13:
      a2 = 0;
  }
  sub_100034234((uint64_t)v12);
  return a2;
}

unint64_t sub_10046F750(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t **v12;
  BOOL v13;
  unint64_t v15;
  _QWORD v16[2];
  unint64_t *v17;

  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 48);
  v6 = 0;
  if (a2 && a3)
  {
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_10092FEE8);
    v7 = sub_100021398(qword_100977B48, a2);
    if (!v7)
      goto LABEL_22;
    v10 = *(uint64_t ***)(a1 + 112);
    v8 = (uint64_t **)(a1 + 112);
    v9 = (uint64_t *)v10;
    if (v10 != v8 + 1)
    {
      do
      {
        if (v9[5] == a3)
        {
          v6 = v9[4];
          if (v6 == a2)
          {
            v6 = a2;
            goto LABEL_23;
          }
          if (qword_100977B50 != -1)
            dispatch_once(&qword_100977B50, &stru_10092FEE8);
          if (sub_100021398(qword_100977B48, v6) == v7)
            goto LABEL_23;
        }
        v11 = (uint64_t *)v9[1];
        if (v11)
        {
          do
          {
            v12 = (uint64_t **)v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (uint64_t **)v9[2];
            v13 = *v12 == v9;
            v9 = (uint64_t *)v12;
          }
          while (!v13);
        }
        v9 = (uint64_t *)v12;
      }
      while (v12 != v8 + 1);
    }
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_10092FEE8);
    v15 = sub_1000221B8(qword_100977B48, v7);
    if (v15)
    {
      v17 = &v15;
      sub_10002252C(v8, &v15, (uint64_t)&unk_100740F58, (uint64_t **)&v17)[5] = a3;
      v6 = v15;
    }
    else
    {
LABEL_22:
      v6 = 0;
    }
  }
LABEL_23:
  sub_100034234((uint64_t)v16);
  return v6;
}

void sub_10046F918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10046F938(uint64_t a1, uint64_t a2)
{
  sub_1004468B0(a2);
}

void sub_10046F940(uint64_t a1, uint64_t a2)
{
  sub_1004468B0(a2);
}

uint64_t sub_10046F948(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;

  sub_10043E504(a2);
  result = sub_10043FC5C((uint64_t)a2);
  if ((result & 1) == 0)
  {
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8((uint64_t)a2, __p);
      if (v7 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device %{public}s is fully disconnected and now unpaired, resetting it", buf, 0xCu);
      if (v7 < 0)
        operator delete(__p[0]);
    }
    return sub_1004544F4((uint64_t)a2);
  }
  return result;
}

uint64_t sub_10046FA40(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = 0;
  if (*(_BYTE *)(a2 + 952))
  {
    sub_10044ECFC(a2, &v6);
    result = (uint64_t)sub_10046FAD0(v5, a2);
  }
  if (!a3)
  {
    sub_10011344C(&v6, 0);
    sub_10045383C(a2, &v6);
    result = sub_10043F854(a2);
    *(_DWORD *)(v5 + 300) |= 1 << result;
  }
  return result;
}

uint64_t **sub_10046FAD0(uint64_t a1, uint64_t a2)
{
  uint64_t **v2;
  unsigned __int8 *v4;
  void *v5;
  NSObject *v7;
  std::string *v8;
  NSObject *v9;
  int v10;
  _BYTE *v11;
  _BYTE *v12;
  void **v13;
  uint64_t **result;
  void *v15[2];
  char v16;
  std::string __dst;
  std::string __p;
  uint64_t v19;
  _BYTE buf[12];
  char v21;
  uint8_t v22[4];
  _BYTE *v23;
  __int16 v24;
  void **v25;

  v19 = a2;
  v2 = (uint64_t **)(a1 + 272);
  if (*(_QWORD *)(a1 + 288))
  {
    v4 = (unsigned __int8 *)(*v2)[4];
    if (v4 == (unsigned __int8 *)a2)
    {
      if (*((_BYTE *)*v2 + 40))
      {
        v7 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(a2, &__p);
          v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? &__p
             : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Wireless Splitter cancelling linkkey timeout for guest device %{public}s", buf, 0xCu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        sub_100473894(a1, 0, 0);
        *(_DWORD *)(a2 + 964) = 3;
      }
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      v5 = sub_100091AE8(&__p, "WS_ERROR_OTHER_DELETE_GUEST_ONLY_ONE_ALLOWED");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        v5 = sub_10003430C(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        __dst = __p;
      sub_1004700FC((uint64_t)v5, &__dst);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v9 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8((uint64_t)v4, buf);
        v10 = v21;
        v11 = *(_BYTE **)buf;
        sub_10043E5F8(a2, v15);
        v12 = buf;
        if (v10 < 0)
          v12 = v11;
        if (v16 >= 0)
          v13 = v15;
        else
          v13 = (void **)v15[0];
        *(_DWORD *)v22 = 136446466;
        v23 = v12;
        v24 = 2082;
        v25 = v13;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Wireless Splitter deleting guest device %{public}s, to only allow one guest at a time. New guest device will be %{public}s", v22, 0x16u);
        if (v16 < 0)
          operator delete(v15[0]);
        if (v21 < 0)
          operator delete(*(void **)buf);
      }
      if (qword_100978150 != -1)
        dispatch_once(&qword_100978150, &stru_100930028);
      sub_1005B8744((uint64_t)off_100978148, v4);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  result = sub_100474FBC(v2, (unint64_t *)&v19, (uint64_t)&unk_100740F58, &__p);
  *((_BYTE *)result + 40) = 0;
  return result;
}

void sub_10046FD84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10046FDD8(uint64_t a1, uint64_t a2, int a3)
{
  return sub_10046FA40(a1 - 24, a2, a3);
}

uint64_t sub_10046FDE0(uint64_t a1, unint64_t a2, int a3, int a4)
{
  uint64_t result;
  NSObject *v9;
  std::string *v10;
  _QWORD *v11;
  NSObject *v12;
  std::string *v13;
  std::string v14;
  int v15;
  std::string __p;
  std::string buf;

  result = sub_10043FC5C(a2);
  if ((result & 1) != 0 || (result = sub_10043E93C((unsigned __int8 *)a2), (result & 1) != 0))
  {
    if (!a3)
    {
      v15 = 0;
      sub_10011344C(&v15, 0);
      sub_10045383C(a2, &v15);
      *(_DWORD *)(a1 + 300) &= ~(1 << sub_10043F854(a2));
      if (*(_BYTE *)(a2 + 952))
      {
        v9 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(a2, &__p);
          v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Wireless Splitter guest device %{public}s disconnected with reason %u", (uint8_t *)&buf, 0x12u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        memset(&__p, 0, sizeof(__p));
        std::to_string(&__p, a4);
        memset(&buf, 0, sizeof(buf));
        v11 = std::operator+<char>(&buf, "WS_ERROR_DISCONNECTION_", &__p);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          v11 = sub_10003430C(&v14, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        else
          v14 = buf;
        sub_1004700FC((uint64_t)v11, &v14);
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v14.__r_.__value_.__l.__data_);
        sub_10044ECFC(a2, &v15);
        sub_100470254(a1, a2);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_100091AE8(&__p, "");
      *(_BYTE *)(a2 + 1427) = 0;
      std::string::operator=((std::string *)(a2 + 1472), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return sub_1004411C0(a2, 0);
    }
  }
  else
  {
    v12 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, &__p);
      v13 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Device %{public}s is unpaired and now fully disconnected, resetting it", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    return sub_1004544F4(a2);
  }
  return result;
}

void sub_1004700A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_1004700FC(uint64_t a1, const std::string *a2)
{
  NSObject *v3;
  void **v4;
  uint64_t v5;
  _OWORD v6[5];
  void *v7[2];
  void *v8[2];
  __int128 v9;
  void *v10[2];
  void *__p[2];
  __int128 v12;
  uint8_t buf[4];
  void **v14;

  *(_OWORD *)__p = 0u;
  v12 = 0u;
  v9 = 0u;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)v8 = 0u;
  memset(v6, 0, sizeof(v6));
  sub_1003ED09C((uint64_t)v6);
  std::string::operator=((std::string *)&__p[1], a2);
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (v12 >= 0)
      v4 = &__p[1];
    else
      v4 = (void **)__p[1];
    *(_DWORD *)buf = 136315138;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Wireless Splitter submitting following error metric: fErrorCode %s", buf, 0xCu);
  }
  v5 = sub_100065478();
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v5 + 168))(v5, v6);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v10[0]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[1]);
  if (SHIBYTE(v8[0]) < 0)
    operator delete(v7[0]);
}

void sub_100470238(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_100470254(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  void **v12;
  void *__p[2];
  char v14;
  unint64_t v15;
  uint8_t buf[4];
  void **v17;
  __int16 v18;
  uint64_t v19;

  v15 = a2;
  v2 = *(_QWORD **)(a1 + 280);
  if (v2)
  {
    v4 = a1 + 272;
    v5 = a1 + 280;
    do
    {
      v6 = v2[4];
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = v2;
      else
        v8 = v2 + 1;
      if (v7)
        v5 = (uint64_t)v2;
      v2 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != a1 + 280 && *(_QWORD *)(v5 + 32) <= a2)
    {
      *(_BYTE *)sub_10047396C(a1 + 272, &v15) = 1;
      v9 = *(_DWORD *)(a1 + 296);
      if (!v9)
        v9 = 480000;
      v10 = v9;
      v11 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(*(_QWORD *)(*(_QWORD *)v4 + 32), __p);
        if (v14 >= 0)
          v12 = __p;
        else
          v12 = (void **)__p[0];
        *(_DWORD *)buf = 136446466;
        v17 = v12;
        v18 = 2048;
        v19 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Wireless Splitter starting linkkey timeout for guest device %{public}s with timeout %llums", buf, 0x16u);
        if (v14 < 0)
          operator delete(__p[0]);
      }
      sub_100473894(a1, 1, v10);
    }
  }
}

uint64_t sub_1004703C0(uint64_t a1, unint64_t a2, int a3, int a4)
{
  return sub_10046FDE0(a1 - 24, a2, a3, a4);
}

void sub_1004703C8(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  sqlite3 **v7;
  _QWORD v8[5];
  int v9;

  if (a3 != 18
    || (v6 = sub_10003BE44(), !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 384))(v6))
    || sub_100471B3C((uint64_t)a1))
  {
    v7 = (sqlite3 **)sub_10034D5AC();
    sub_100336910(v7, a2);
    if (qword_100977A78 != -1)
      dispatch_once(&qword_100977A78, &stru_10092FFA8);
    sub_10049B904((uint64_t)off_100977A70, a2);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100471DC4;
    v8[3] = &unk_10092FEA8;
    v8[4] = a2;
    v9 = a3;
    sub_100471D08(a1 + 60, v8);
  }
}

uint64_t sub_1004704A8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *i;
  uint64_t v17;
  _QWORD v20[2];

  if (!*(_BYTE *)a2)
  {
    v6 = 1;
    while (v6 != 6)
    {
      if (*(unsigned __int8 *)(a2 + v6++))
      {
        if ((unint64_t)(v6 - 2) < 5)
          goto LABEL_8;
        break;
      }
    }
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006F4114(v8, v9, v10, v11, v12, v13, v14, v15);
  }
LABEL_8:
  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 168);
  for (i = *(uint64_t **)(a1 + 144); i != *(uint64_t **)(a1 + 152); ++i)
  {
    v17 = *i;
    if (*(_DWORD *)(*i + 128) == *(_DWORD *)a2 && *(unsigned __int16 *)(*i + 132) == *(unsigned __int16 *)(a2 + 4))
      goto LABEL_18;
  }
  if (a3)
    operator new();
  v17 = 0;
LABEL_18:
  sub_100034234((uint64_t)v20);
  return v17;
}

void sub_100470660()
{
  operator delete();
}

unsigned __int8 *sub_100470694(uint64_t a1, uint64_t a2, _OWORD *a3, BOOL *a4, char *a5)
{
  unsigned __int8 *v10;
  int v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  std::string::size_type size;
  std::string *v16;
  uint64_t v17;
  int v18;
  int v19;
  void *v21;
  int v22;
  NSObject *v23;
  __int128 *v24;
  NSObject *v25;
  std::string *v26;
  sqlite3 **v27;
  std::string v29;
  char v30;
  _QWORD v31[2];
  _BYTE __len[9];
  uint8_t buf[4];
  __int128 *v34;
  __int128 __p;
  unsigned __int8 v36;

  memset(__len, 0, sizeof(__len));
  *a4 = 0;
  *a5 = 0;
  v31[0] = 0;
  v31[1] = 0;
  sub_10003415C((uint64_t)v31, a1 + 168);
  LODWORD(v29.__r_.__value_.__l.__data_) = *(_DWORD *)a2;
  WORD2(v29.__r_.__value_.__r.__words[0]) = *(_WORD *)(a2 + 4);
  v10 = (unsigned __int8 *)sub_1004704A8(a1, (uint64_t)&v29, 1);
  v11 = v10[641];
  sub_100440238((uint64_t)v10, a3);
  sub_100440314((uint64_t)v10, *(_BYTE *)(a2 + 13), a3);
  sub_100470B08(a1, (uint64_t)v10, *(unsigned int *)(a2 + 8));
  if (sub_10043E93C(v10))
  {
    LODWORD(v29.__r_.__value_.__l.__data_) = 0;
    sub_10011344C(&v29, 0);
    sub_10045383C((uint64_t)v10, &v29);
  }
  sub_100034264((uint64_t)v31);
  v12 = *(_BYTE **)(a2 + 16);
  if (v12 && *v12)
  {
    v30 = 0;
    sub_100043758(&v30);
    v13 = sub_10018F790(*(unsigned __int8 **)(a2 + 16), &__len[1], __len, a5);
    sub_10004339C(&v30);
    *a4 = sub_100451B38((uint64_t)v10, *(void **)(a2 + 16), 0xF0u);
    if (v13 || !*(_QWORD *)&__len[1] || !__len[0])
    {
LABEL_43:
      sub_100043728(&v30);
      goto LABEL_44;
    }
    memset(&v29, 0, sizeof(v29));
    sub_1002D236C(&v29, *(void **)&__len[1], __len[0]);
    if (!*a5)
    {
      sub_100440404((uint64_t)v10, &v29, a3);
      goto LABEL_41;
    }
    sub_10043F78C((uint64_t)v10, (uint64_t)&__p);
    if ((v36 & 0x80u) == 0)
      v14 = v36;
    else
      v14 = *((_QWORD *)&__p + 1);
    size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v29.__r_.__value_.__l.__size_;
    if (v14 == size)
    {
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &v29;
      else
        v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
      if ((v36 & 0x80) != 0)
      {
        v21 = (void *)__p;
        v22 = memcmp((const void *)__p, v16, *((size_t *)&__p + 1));
        operator delete(v21);
        if (!v22)
          goto LABEL_41;
      }
      else
      {
        if (!v36)
          goto LABEL_41;
        v17 = 0;
        do
        {
          v18 = *((unsigned __int8 *)&__p + v17);
          v19 = v16->__r_.__value_.__s.__data_[v17];
        }
        while (v18 == v19 && v36 - 1 != v17++);
        if (v18 == v19)
        {
LABEL_41:
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v29.__r_.__value_.__l.__data_);
          goto LABEL_43;
        }
      }
    }
    else if ((v36 & 0x80) != 0)
    {
      operator delete((void *)__p);
    }
    sub_10044054C((uint64_t)v10, (uint64_t)&v29, a3);
    v23 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8((uint64_t)v10, &__p);
      v24 = (v36 & 0x80u) == 0 ? &__p : (__int128 *)__p;
      *(_DWORD *)buf = 136446210;
      v34 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Sending 'name changed' event for device %{public}s", buf, 0xCu);
      if ((char)v36 < 0)
        operator delete((void *)__p);
    }
    if (qword_100977A78 != -1)
      dispatch_once(&qword_100977A78, &stru_10092FFA8);
    sub_100497FB4((uint64_t)off_100977A70, (uint64_t)v10, 0xFFFFFFFFLL, 0, 701, 0);
    goto LABEL_41;
  }
LABEL_44:
  v25 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8((uint64_t)v10, &v29);
    v26 = (v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v29
        : (std::string *)v29.__r_.__value_.__r.__words[0];
    LODWORD(__p) = 136446210;
    *(_QWORD *)((char *)&__p + 4) = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Discovered device %{public}s", (uint8_t *)&__p, 0xCu);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_10092FFA8);
  sub_10049B904((uint64_t)off_100977A70, (uint64_t)v10);
  if (v11)
  {
    v27 = (sqlite3 **)sub_10034D5AC();
    sub_100336910(v27, (uint64_t)v10);
  }
  sub_100034234((uint64_t)v31);
  return v10;
}

void sub_100470AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a14 < 0)
    operator delete(__p);
  sub_100043728(&a18);
  sub_100034234((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_100470B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  NSObject *v9;
  const char *v10;
  const char *v11;
  NSObject *v12;
  const char *v13;
  void **v14;
  void *__p[2];
  char v16;
  __int128 v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint8_t buf[8];
  __int16 v23;
  const char *v24;
  __int16 v25;
  _QWORD v26[2];

  v20 = 0;
  v21 = a3;
  v5 = sub_10043FA40(a2, &v20);
  v6 = sub_1004711A8(v5, &v20, a2);
  v19 = v6;
  v7 = sub_1004711A8(v6, &v21, a2);
  v18 = v7;
  *(_QWORD *)buf = 0;
  sub_10004AD30((uint64_t)buf);
  *(_QWORD *)&v17 = *(int *)buf;
  *((_QWORD *)&v17 + 1) = *(__int16 *)&buf[4];
  if ((_DWORD)a3 && v7)
  {
    v8 = v20;
    if (v20 != (_DWORD)a3)
    {
      v9 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v10 = sub_100471FE4(&v18);
        v11 = sub_100471FE4(&v19);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = a3;
        v23 = 2080;
        v24 = v10;
        v25 = 1024;
        LODWORD(v26[0]) = v8;
        WORD2(v26[0]) = 2080;
        *(_QWORD *)((char *)v26 + 6) = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Attempting to set new class of device: %u, type: %s. Prior cached value is %u, %s", buf, 0x22u);
      }
      sub_100440378(a2, v7, &v17);
      sub_1004447DC(a2, a3, &v17);
      sub_1004719E4(v7, (std::string *)buf);
      sub_100440404(a2, (std::string *)buf, &v17);
      if (SBYTE3(v26[0]) < 0)
        operator delete(*(void **)buf);
      sub_100443044(a2, a3);
    }
  }
  else
  {
    v12 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      v13 = sub_100471FE4(&v18);
      sub_10043E5F8(a2, __p);
      v14 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = a3;
      v23 = 2080;
      v24 = v13;
      v25 = 2082;
      v26[0] = v14;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Not setting new class of %u, type %s for device %{public}s because it is invalid", buf, 0x1Cu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_100470D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100470D78(uint64_t a1, uint64_t a2)
{
  _BOOL4 v3;
  _BOOL4 v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  NSObject *v10;
  uint8_t *v11;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;
  uint8_t buf[8];
  uint64_t v18;
  int data;
  __int16 v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD v28[6];
  __int128 v29;
  uint64_t v30;

  v30 = 0;
  v29 = 0u;
  memset(v28, 0, sizeof(v28));
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  sub_1005BCCCC((uint64_t)&v22 + 1);
  BYTE2(v23) = 0;
  BYTE4(v23) = 0;
  BYTE2(v25) = 0;
  BYTE4(v25) = 0;
  HIDWORD(v28[2]) = 0;
  v24 = 0uLL;
  *((_QWORD *)&v23 + 1) = 0;
  LOBYTE(v25) = 0;
  v26 = 0uLL;
  *((_QWORD *)&v25 + 1) = 0;
  LOBYTE(v27) = 0;
  v28[0] = 0;
  v28[1] = 0;
  *((_QWORD *)&v27 + 1) = 0;
  *(_DWORD *)((char *)&v28[1] + 7) = 0;
  LOBYTE(v28[3]) = 1;
  BYTE2(v30) = 0;
  *(_QWORD *)((char *)&v28[3] + 6) = 0;
  *(_QWORD *)((char *)&v28[3] + 1) = 0;
  v29 = 0uLL;
  v28[5] = 0;
  LOBYTE(v30) = 0;
  v3 = sub_1004419F4(a2, (uint64_t)&v22);
  if (BYTE7(v29))
    v4 = v3;
  else
    v4 = 0;
  if (!v4)
  {
    sub_10043F78C(a2, (uint64_t)buf);
    v7 = BYTE1(v21);
    if ((v21 & 0x8000) != 0)
      v7 = v18;
    if (v7)
    {
      sub_10043F78C(a2, (uint64_t)&v16);
      if (!std::string::compare(&v16, 0, 0xBuLL, "FLEXSMART X"))
      {
        v8 = 1;
      }
      else
      {
        sub_10043F78C(a2, (uint64_t)&v15);
        if (!std::string::compare(&v15, "Car Kit"))
        {
          v8 = 1;
        }
        else
        {
          sub_10043F78C(a2, (uint64_t)&v14);
          if (!std::string::compare(&v14, 0, 5uLL, "BTC45"))
          {
            v8 = 1;
          }
          else
          {
            sub_10043F78C(a2, (uint64_t)&v13);
            v8 = std::string::compare(&v13, "Land Rover") == 0;
            if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v13.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v14.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      if ((v21 & 0x8000) == 0)
      {
LABEL_28:
        if (v8)
          goto LABEL_29;
        goto LABEL_17;
      }
    }
    else
    {
      v8 = 0;
      if ((v21 & 0x8000) == 0)
        goto LABEL_28;
    }
    operator delete(*(void **)buf);
    if (v8)
    {
LABEL_29:
      v10 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043F78C(a2, (uint64_t)buf);
        v11 = (v21 & 0x8000) == 0 ? buf : *(uint8_t **)buf;
        LODWORD(v16.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v16.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Car Stereo Type override due to name match (%s)", (uint8_t *)&v16, 0xCu);
        if (SBYTE1(v21) < 0)
          operator delete(*(void **)buf);
      }
      goto LABEL_35;
    }
LABEL_17:
    v9 = 0;
    goto LABEL_36;
  }
  LODWORD(v16.__r_.__value_.__l.__data_) = 0;
  LODWORD(v15.__r_.__value_.__l.__data_) = 0;
  LODWORD(v14.__r_.__value_.__l.__data_) = 0;
  LODWORD(v13.__r_.__value_.__l.__data_) = 0;
  sub_100444BF0(a2, &v16, &v15, &v14, &v13);
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v16.__r_.__value_.__l.__data_;
    LOWORD(v18) = 1024;
    *(_DWORD *)((char *)&v18 + 2) = v15.__r_.__value_.__l.__data_;
    HIWORD(v18) = 1024;
    data = (int)v14.__r_.__value_.__l.__data_;
    v20 = 1024;
    v21 = (int)v13.__r_.__value_.__l.__data_;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Car Stereo Type override due to VID/PID. [VidSrc 0x%x, VID 0x%x, PID 0x%x, version 0x%x]", buf, 0x1Au);
  }
LABEL_35:
  v9 = 22;
LABEL_36:
  if (SHIBYTE(v28[1]) < 0)
    operator delete(*((void **)&v27 + 1));
  if (SHIBYTE(v26) < 0)
    operator delete(*((void **)&v25 + 1));
  if (SHIBYTE(v24) < 0)
    operator delete(*((void **)&v23 + 1));
  nullsub_90((char *)&v22 + 1, v6);
  return v9;
}

void sub_100471118(_Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (a30 < 0)
    operator delete(a25);
  if (a37 < 0)
    operator delete(a32);
  sub_10026B73C((uint64_t)&a39, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_1004711A8(uint64_t a1, int *a2, uint64_t a3)
{
  int v3;
  uint64_t result;
  int v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v3 = *a2;
  result = sub_100470D78(a1, a3);
  if (!(_DWORD)result)
  {
    v5 = v3 & 0xFC;
    result = 15;
    switch(((v3 & 0x1F00u) - 256) >> 8)
    {
      case 0u:
        v6 = v5 - 4;
        if (v6 < 0x18)
        {
          v7 = (char *)&unk_100741410;
          goto LABEL_17;
        }
        result = 1;
        break;
      case 1u:
        v6 = v5 - 4;
        if (v6 < 0x14)
        {
          v7 = (char *)&unk_100741428;
          goto LABEL_17;
        }
        result = 2;
        break;
      case 2u:
        return result;
      case 3u:
        v6 = v5 - 4;
        if (v6 < 0x48)
        {
          v7 = (char *)&unk_10074143C;
          goto LABEL_17;
        }
        result = 3;
        break;
      case 4u:
        v8 = sub_10003BE44();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 384))(v8))
          v9 = (v3 & 0x24) == 0;
        else
          v9 = 1;
        if (v9)
        {
          if ((v3 & 0x40) != 0)
          {
            result = 24;
          }
          else
          {
            v6 = (v3 & 0x3C) - 4;
            if (v6 >= 0x18)
            {
              if ((v3 & 0x80) != 0)
                result = 25;
              else
                result = 4;
            }
            else
            {
              v7 = (char *)&unk_100741484;
LABEL_17:
              result = *(unsigned int *)&v7[v6];
            }
          }
        }
        else
        {
          result = 49;
        }
        break;
      case 5u:
        if ((v3 & 0x10) != 0)
          v10 = 35;
        else
          v10 = 5;
        if ((v3 & 0x20) != 0)
          v11 = 33;
        else
          v11 = v10;
        if ((v3 & 0x40) != 0)
          v12 = 32;
        else
          v12 = v11;
        if ((v3 & 0x80) != 0)
          result = 31;
        else
          result = v12;
        break;
      case 6u:
        v13 = v5 - 4;
        if (v13 >= 0x14)
          goto LABEL_32;
        result = (v13 >> 2) + 42;
        break;
      case 7u:
        v14 = v5 - 4;
        if (v14 == 16)
          v15 = 40;
        else
          v15 = 6;
        if (v14 == 12)
          result = 41;
        else
          result = v15;
        break;
      default:
LABEL_32:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t sub_10047134C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned __int8 v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  int v9;

  *a3 = 0;
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_10092FF48);
  if (sub_10002527C((uint64_t)off_100978128) != 1)
    return 202;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092FFC8);
  v5 = atomic_load((unsigned __int8 *)off_1009778E0 + 232);
  if ((v5 & 1) != 0)
  {
    v7 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 800))(v7) == 1)
    {
      if (qword_100977A58 != -1)
        dispatch_once(&qword_100977A58, &stru_10092FF68);
      v8 = sub_10049D55C((uint64_t)off_100977A50);
    }
    else
    {
      v8 = sub_10044F6C4(a2);
    }
    v9 = v8;
    result = 0;
    *a3 = v9;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F41F4();
    return 1;
  }
  return result;
}

uint64_t sub_100471484(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 232));
  return v1 & 1;
}

uint64_t sub_100471494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  uint64_t v7;

  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_10092FF48);
  if (sub_10002527C((uint64_t)off_100978128) != 1)
    return 202;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092FFC8);
  v5 = atomic_load((unsigned __int8 *)off_1009778E0 + 232);
  if ((v5 & 1) != 0)
  {
    v7 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 800))(v7) == 1)
    {
      if (qword_100977A58 != -1)
        dispatch_once(&qword_100977A58, &stru_10092FF68);
      sub_1004A6850((uint64_t)off_100977A50, a3);
    }
    else
    {
      sub_10044D9DC(a2, a3);
    }
    return 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F4220();
    return 1;
  }
}

uint64_t sub_1004715C8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8;
  NSObject *v9;
  NSObject *v10;
  _QWORD v12[4];
  id v13;
  int v14;
  int v15;
  int v16;
  unsigned __int8 v17;
  char v18;
  int v19;
  uint64_t v20;
  unsigned __int8 v21;
  int v22;
  uint8_t buf[4];
  id v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v8 = a3;
  v22 = 0;
  v21 = 1;
  if (v8)
  {
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_10092FFE8);
    sub_1005271AC((uint64_t)off_100977A90, v8, &v21, &v22);
    v9 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412802;
      v24 = v8;
      v25 = 1024;
      v26 = a4;
      v27 = 1024;
      v28 = a5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "DeviceManager Set Spatial Mode: bundleID: %@, mode: %u head Tracking %d", buf, 0x18u);
    }
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_10092FFE8);
    sub_100526ECC((uint64_t)off_100977A90, v8, a4, a5);
    *(_DWORD *)buf = 0;
    v20 = 0;
    v19 = 0;
    sub_100444BF0(a2, buf, (_DWORD *)&v20 + 1, &v20, &v19);
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_10092FFE8);
    v10 = *((_QWORD *)off_100977A90 + 31);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100471804;
    v12[3] = &unk_10092FE88;
    v13 = v8;
    v14 = v22;
    v15 = a4;
    v17 = v21;
    v18 = a5;
    v16 = v20;
    dispatch_async(v10, v12);

  }
  return 0;
}

void sub_1004717E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100471804(uint64_t a1)
{
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10092FFE8);
  sub_100526854((uint64_t)off_100977A90, *(void **)(a1 + 32), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), *(unsigned __int8 *)(a1 + 52), *(unsigned __int8 *)(a1 + 53));
}

uint64_t sub_100471864(uint64_t a1, uint64_t a2, void *a3, int *a4, _BYTE *a5)
{
  id v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint8_t buf[4];
  id v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;

  v7 = a3;
  if (v7)
  {
    v16 = 1;
    v15 = 1;
    v8 = sub_100038E50();
    (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v8 + 240))(v8, &v15);
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_10092FFE8);
    sub_1005271AC((uint64_t)off_100977A90, v7, &v16, a4);
    v9 = v16;
    v10 = v15;
    if (v15)
      v11 = v16;
    else
      v11 = 0;
    *a5 = v11;
    v12 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
    {
      v14 = *a4;
      *(_DWORD *)buf = 138413314;
      v18 = v7;
      v19 = 1024;
      v20 = v14;
      v21 = 1024;
      v22 = v9;
      v23 = 1024;
      v24 = v10;
      v25 = 1024;
      v26 = v11;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "DeviceManager Get Spatial Mode: bundleID: %@, mode: %u, headtracking: %u Accessibility Head tracking %d, returning: %u", buf, 0x24u);
    }
  }

  return 0;
}

void sub_1004719CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

std::string *sub_1004719E4@<X0>(int a1@<W1>, std::string *a2@<X8>)
{
  const std::string::value_type *v4;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  sub_100091AE8(a2, "Misc");
  v4 = "Laptop";
  switch(a1)
  {
    case 1:
    case 7:
      v4 = "Computer";
      break;
    case 2:
      v4 = "Phone";
      break;
    case 3:
      v4 = "Audio";
      break;
    case 4:
      v4 = "Peripheral";
      break;
    case 5:
      v4 = "Imaging";
      break;
    case 6:
      v4 = "Toy";
      break;
    case 8:
      return std::string::assign(a2, v4);
    case 9:
    case 10:
    case 14:
    case 15:
    case 18:
    case 21:
    case 22:
    case 23:
      goto LABEL_5;
    case 11:
      v4 = "PDA";
      break;
    case 12:
      v4 = "Mobile Phone";
      break;
    case 13:
      v4 = "Cordless Phone";
      break;
    case 16:
      v4 = "Headset";
      break;
    case 17:
      v4 = "Handsfree";
      break;
    case 19:
      v4 = "Speaker";
      break;
    case 20:
      v4 = "Headphones";
      break;
    case 24:
      v4 = "Keyboard";
      break;
    case 25:
      v4 = "Mouse";
      break;
    default:
      if (a1 == 49)
        v4 = "Trackpad";
      else
LABEL_5:
        v4 = "Misc";
      break;
  }
  return std::string::assign(a2, v4);
}

void sub_100471B20(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_100471B3C(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 **v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  _BOOL8 v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  _QWORD v12[2];
  void *__p;
  unsigned __int8 **v14;
  uint64_t v15;
  _QWORD v16[2];
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;

  v2 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 384))(v2))
    return 0;
  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 168);
  __p = 0;
  v14 = 0;
  v15 = 0;
  sub_10001FE6C(&__p, a1 + 144);
  sub_100034264((uint64_t)v16);
  v3 = (unsigned __int8 **)__p;
  v4 = v14;
  while (1)
  {
    if (v3 == v4)
    {
      v7 = 0;
      goto LABEL_10;
    }
    v5 = *v3;
    if (sub_10043E93C(*v3))
    {
      if ((sub_100454394((uint64_t)v5) & 1) != 0)
        break;
    }
    ++v3;
  }
  v7 = 1;
LABEL_10:
  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 168);
  v8 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(unsigned __int8 *)(a1 + 136);
    *(_DWORD *)buf = 67109376;
    v18 = v9;
    v19 = 1024;
    v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "DeviceManager:: compute Classic incompatible device: curr %u, new %u", buf, 0xEu);
  }
  v10 = *(unsigned __int8 *)(a1 + 136);
  v6 = v10 != v7;
  if (v10 != v7)
    *(_BYTE *)(a1 + 136) = v7;
  sub_100034234((uint64_t)v12);
  if (__p)
  {
    v14 = (unsigned __int8 **)__p;
    operator delete(__p);
  }
  sub_100034234((uint64_t)v16);
  return v6;
}

void sub_100471CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_100471D08(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_100471D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_100471DC4(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, _QWORD))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

BOOL sub_100471DE0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _BOOL8 v4;
  _QWORD v6[2];

  v2 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 384))(v2))
    return 0;
  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 168);
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
    sub_1006F424C(a1, v3);
  v4 = *(_BYTE *)(a1 + 136) != 0;
  sub_100034234((uint64_t)v6);
  return v4;
}

uint64_t sub_100471E74(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 168);
  if (*(unsigned __int8 *)(a1 + 304) != a2)
  {
    *(_BYTE *)(a1 + 304) = a2;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    sub_10001FE6C(&v7, a1 + 144);
    sub_100034264((uint64_t)v10);
    v4 = v7;
    if (v7 != v8)
    {
      do
      {
        v5 = *v4;
        if (sub_100442118(*v4, 32))
        {
          if (sub_10044F658(v5) != 2)
            sub_10044D524(v5, 1);
          sub_10044D88C(v5);
        }
        ++v4;
      }
      while (v4 != v8);
      v4 = v7;
    }
    if (v4)
    {
      v8 = v4;
      operator delete(v4);
    }
  }
  return sub_100034234((uint64_t)v10);
}

void sub_100471F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100471F78(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, char a6, int a7)
{
  sub_100447ED8(a2, a4);
  sub_100448054(a2, a5);
  sub_1004480DC(a2, a6);
  sub_100448164(a2, a7);
  sub_1004468B0(a2);
  return 0;
}

const char *sub_100471FE4(int *a1)
{
  uint64_t v1;

  v1 = *a1;
  if (v1 > 0x31)
    return "Unknown";
  else
    return off_100930048[v1];
}

void sub_10047200C(uint64_t a1, uint64_t a2)
{
  sub_100450334(a2);
}

uint64_t sub_100472014(uint64_t result, int a2, int a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned __int8 *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD v11[2];

  if (a2 == 1)
  {
    v4 = result;
    v11[0] = 0;
    v11[1] = 0;
    sub_10003415C((uint64_t)v11, result + 168);
    v8 = 0;
    v9 = 0;
    v10 = 0;
    sub_10001FE6C(&v8, v4 + 144);
    sub_100034264((uint64_t)v11);
    v5 = v8;
    v6 = v9;
    if (v8 != v9)
    {
      do
      {
        v7 = (unsigned __int8 *)*v5;
        if (!sub_1004420E0(*v5) && (sub_10044B480((uint64_t)v7) & 1) == 0)
          v7[578] = a3 == 1;
        if (v7[952])
          sub_100472124(v4, a3, v7);
        ++v5;
      }
      while (v5 != v6);
      v5 = v8;
    }
    if (v5)
    {
      v9 = v5;
      operator delete(v5);
    }
    return sub_100034234((uint64_t)v11);
  }
  return result;
}

void sub_1004720F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_100472124(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  NSObject *v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  std::string *p_buf;
  uint64_t v26;
  std::string __p;
  std::string buf;
  int v29;
  unsigned __int8 *v30;
  uint8_t v31[4];
  std::string *v32;
  __int16 v33;
  uint64_t v34;

  v30 = a3;
  v29 = 0;
  sub_10011344C(&v29, 0);
  v6 = v29;
  v7 = sub_10044ECB8((uint64_t)a3);
  if (a2 == 1)
  {
    v8 = v7;
    v9 = a1 + 272;
    v10 = a1 + 280;
    v11 = *(_QWORD **)(a1 + 280);
    if (!v11)
      goto LABEL_16;
    v12 = a1 + 280;
    do
    {
      v13 = v11[4];
      v14 = v13 >= (unint64_t)a3;
      if (v13 >= (unint64_t)a3)
        v15 = v11;
      else
        v15 = v11 + 1;
      if (v14)
        v12 = (uint64_t)v11;
      v11 = (_QWORD *)*v15;
    }
    while (*v15);
    if (v12 == v10 || *(_QWORD *)(v12 + 32) > (unint64_t)a3)
    {
LABEL_16:
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
      *((_BYTE *)sub_100474FBC((uint64_t **)(a1 + 272), (unint64_t *)&v30, (uint64_t)&unk_100740F58, &buf) + 40) = 0;
      v16 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Wireless Splitter repopulating fGuestDevices after boot up", (uint8_t *)&buf, 2u);
      }
    }
    v17 = v6 - v8;
    v18 = *(_DWORD *)(a1 + 296);
    if (v18)
      v19 = v18 / 1000;
    else
      v19 = 480;
    v20 = v19 - v17;
    if (v19 >= v17)
    {
      if (!sub_10043FC5C((uint64_t)v30) && *(_QWORD *)v9 != v10)
      {
        v23 = *(_QWORD *)(*(_QWORD *)v9 + 32);
        v24 = qword_1009997E8;
        if (v23)
        {
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(v23, &buf);
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_buf = &buf;
            else
              p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
            v26 = 1000 * v20;
            *(_DWORD *)v31 = 136446466;
            v32 = p_buf;
            v33 = 2048;
            v34 = 1000 * v20;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Wireless Splitter starting linkkey timeout for guest device %{public}s with timeout %llums", v31, 0x16u);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
          }
          else
          {
            v26 = 1000 * v20;
          }
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
          *((_BYTE *)sub_100474FBC((uint64_t **)(a1 + 272), (unint64_t *)&v30, (uint64_t)&unk_100740F58, &buf) + 40) = 1;
          sub_100473894(a1, 1, v26);
        }
        else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        {
          sub_1006F42C0();
        }
      }
    }
    else
    {
      v21 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Wireless Splitter bt powered on, guest device needs to be deleted", (uint8_t *)&buf, 2u);
      }
      memset(&buf, 0, sizeof(buf));
      v22 = sub_100091AE8(&buf, "WS_ERROR_DISCONNECTION_GUEST_NEEDS_DELETION");
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        v22 = sub_10003430C(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
      else
        __p = buf;
      sub_1004700FC((uint64_t)v22, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (qword_100978150 != -1)
        dispatch_once(&qword_100978150, &stru_100930028);
      sub_1005B8744((uint64_t)off_100978148, v30);
      sub_100015ECC(v9, (unint64_t *)&v30);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  else if (!a2 && sub_10043FC5C((uint64_t)a3))
  {
    sub_10044ECFC((uint64_t)v30, &v29);
  }
}

void sub_1004724C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100472504(uint64_t a1, int a2, int a3)
{
  return sub_100472014(a1 - 32, a2, a3);
}

uint64_t sub_10047250C(uint64_t a1)
{
  unsigned __int8 **v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  void *__p;
  unsigned __int8 **v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 168);
  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_10001FE6C(&__p, a1 + 144);
  sub_100034264((uint64_t)v10);
  v2 = (unsigned __int8 **)__p;
  v3 = v8;
  if (__p == v8)
  {
    v4 = 0;
    if (!__p)
      goto LABEL_8;
    goto LABEL_7;
  }
  v4 = 0;
  do
  {
    v5 = *v2;
    if (sub_10043E93C(*v2))
      v4 = v4 + sub_100442118((uint64_t)v5, 12);
    ++v2;
  }
  while (v2 != v3);
  v2 = (unsigned __int8 **)__p;
  if (__p)
  {
LABEL_7:
    v8 = v2;
    operator delete(v2);
  }
LABEL_8:
  sub_100034234((uint64_t)v10);
  return v4;
}

void sub_1004725CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004725FC(uint64_t a1)
{
  unsigned __int8 **v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  void *__p;
  unsigned __int8 **v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 168);
  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_10001FE6C(&__p, a1 + 144);
  sub_100034264((uint64_t)v10);
  v2 = (unsigned __int8 **)__p;
  v3 = v8;
  if (__p == v8)
  {
    v4 = 0;
    if (!__p)
      goto LABEL_9;
    goto LABEL_8;
  }
  v4 = 0;
  do
  {
    v5 = *v2;
    if (sub_10043E93C(*v2) && sub_10043FC5C((uint64_t)v5))
      v4 = (v4 + sub_100444BD0((uint64_t)v5));
    ++v2;
  }
  while (v2 != v3);
  v2 = (unsigned __int8 **)__p;
  if (__p)
  {
LABEL_8:
    v8 = v2;
    operator delete(v2);
  }
LABEL_9:
  sub_100034234((uint64_t)v10);
  return v4;
}

void sub_1004726C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004726F4(uint64_t a1)
{
  unsigned __int8 **v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  void *__p;
  unsigned __int8 **v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 168);
  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_10001FE6C(&__p, a1 + 144);
  sub_100034264((uint64_t)v10);
  v2 = (unsigned __int8 **)__p;
  v3 = v8;
  if (__p == v8)
  {
    v4 = 0;
    if (!__p)
      goto LABEL_9;
    goto LABEL_8;
  }
  v4 = 0;
  do
  {
    v5 = *v2;
    if (sub_10043E93C(*v2) && sub_100442118((uint64_t)v5, 12))
      v4 = (v4 + sub_10043FC5C((uint64_t)v5));
    ++v2;
  }
  while (v2 != v3);
  v2 = (unsigned __int8 **)__p;
  if (__p)
  {
LABEL_8:
    v8 = v2;
    operator delete(v2);
  }
LABEL_9:
  sub_100034234((uint64_t)v10);
  return v4;
}

void sub_1004727C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004727F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 168);
  v6 = 0;
  v7 = 0;
  v8 = 0;
  sub_10001FE6C(&v6, a1 + 144);
  sub_100034264((uint64_t)v9);
  if (v6 == v7)
  {
    v2 = 0;
    if (!v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  LODWORD(v2) = 0;
  v3 = v6;
  do
  {
    v4 = *v3++;
    v2 = v2 + *(unsigned __int8 *)(v4 + 1114);
  }
  while (v3 != v7);
  if (v6)
  {
LABEL_5:
    v7 = v6;
    operator delete(v6);
  }
LABEL_6:
  sub_100034234((uint64_t)v9);
  return v2;
}

void sub_10047288C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004728B8(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 168);
  v6 = 0;
  v7 = 0;
  v8 = 0;
  sub_10001FE6C(&v6, a1 + 144);
  sub_100034264((uint64_t)v9);
  if (v6 == v7)
  {
    v2 = 0;
    if (!v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = 0;
  v3 = v6;
  do
  {
    v4 = *v3++;
    v2 += *(_BYTE *)(v4 + 1324);
  }
  while (v3 != v7);
  if (v6)
  {
LABEL_5:
    v7 = v6;
    operator delete(v6);
  }
LABEL_6:
  sub_100034234((uint64_t)v9);
  return v2;
}

void sub_100472954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100472980(uint64_t a1)
{
  unsigned __int8 **v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  void *__p;
  unsigned __int8 **v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 168);
  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_10001FE6C(&__p, a1 + 144);
  sub_100034264((uint64_t)v10);
  v2 = (unsigned __int8 **)__p;
  v3 = v8;
  if (__p == v8)
  {
    v4 = 0;
    if (!__p)
      goto LABEL_10;
    goto LABEL_9;
  }
  v4 = 0;
  do
  {
    v5 = *v2;
    if (sub_10043E93C(*v2) && sub_10043FC5C((uint64_t)v5) && sub_100444BD0((uint64_t)v5))
      v4 = (v4 + sub_100444D3C((uint64_t)v5));
    ++v2;
  }
  while (v2 != v3);
  v2 = (unsigned __int8 **)__p;
  if (__p)
  {
LABEL_9:
    v8 = v2;
    operator delete(v2);
  }
LABEL_10:
  sub_100034234((uint64_t)v10);
  return v4;
}

void sub_100472A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100472A84(uint64_t a1)
{
  unsigned __int8 **v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  void *__p;
  unsigned __int8 **v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 168);
  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_10001FE6C(&__p, a1 + 144);
  sub_100034264((uint64_t)v10);
  v2 = (unsigned __int8 **)__p;
  v3 = v8;
  if (__p == v8)
  {
    v4 = 0;
    if (!__p)
      goto LABEL_12;
    goto LABEL_11;
  }
  v4 = 0;
  do
  {
    v5 = *v2;
    if (sub_10043E93C(*v2)
      && sub_10043FC5C((uint64_t)v5)
      && sub_100444BD0((uint64_t)v5)
      && ((sub_100444D0C((uint64_t)v5) & 1) != 0 || sub_100444D18((uint64_t)v5)))
    {
      v4 = (v4 + 1);
    }
    ++v2;
  }
  while (v2 != v3);
  v2 = (unsigned __int8 **)__p;
  if (__p)
  {
LABEL_11:
    v8 = v2;
    operator delete(v2);
  }
LABEL_12:
  sub_100034234((uint64_t)v10);
  return v4;
}

void sub_100472B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100472B98@<X0>(uint64_t a1@<X0>, int a2@<W1>, void **a3@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  NSObject *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void **v25;
  void *__p[2];
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD v34[2];
  uint8_t buf[4];
  void **v36;

  v34[0] = 0;
  v34[1] = 0;
  sub_10003415C((uint64_t)v34, a1 + 168);
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_10001FE6C(&v31, a1 + 144);
  sub_100034264((uint64_t)v34);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = v31;
  v7 = v32;
  if (v31 != v32)
  {
    do
    {
      v8 = *v6;
      v29 = 0;
      v30 = 0;
      v9 = sub_100444BF0(v8, (_DWORD *)&v30 + 1, &v30, (_DWORD *)&v29 + 1, &v29);
      v10 = (_DWORD)v30 == 76 && v9;
      if (v10 && HIDWORD(v29) == a2)
      {
        v12 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
        {
          sub_10043E5F8(v8, __p);
          v25 = __p;
          if (v28 < 0)
            v25 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v36 = v25;
          _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "getDevicesForAppleProductID for CaseSerial adding %{public}s", buf, 0xCu);
          if (v28 < 0)
            operator delete(__p[0]);
        }
        v14 = (uint64_t *)a3[1];
        v13 = (unint64_t)a3[2];
        if ((unint64_t)v14 >= v13)
        {
          v16 = ((char *)v14 - (_BYTE *)*a3) >> 3;
          if ((unint64_t)(v16 + 1) >> 61)
            abort();
          v17 = v13 - (_QWORD)*a3;
          v18 = v17 >> 2;
          if (v17 >> 2 <= (unint64_t)(v16 + 1))
            v18 = v16 + 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          if (v19)
            v20 = (char *)sub_10007ABA0((uint64_t)(a3 + 2), v19);
          else
            v20 = 0;
          v21 = (uint64_t *)&v20[8 * v16];
          *v21 = v8;
          v15 = v21 + 1;
          v23 = (char *)*a3;
          v22 = (char *)a3[1];
          if (v22 != *a3)
          {
            do
            {
              v24 = *((_QWORD *)v22 - 1);
              v22 -= 8;
              *--v21 = v24;
            }
            while (v22 != v23);
            v22 = (char *)*a3;
          }
          *a3 = v21;
          a3[1] = v15;
          a3[2] = &v20[8 * v19];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *v14 = v8;
          v15 = v14 + 1;
        }
        a3[1] = v15;
      }
      ++v6;
    }
    while (v6 != v7);
    v6 = v31;
  }
  if (v6)
  {
    v32 = v6;
    operator delete(v6);
  }
  return sub_100034234((uint64_t)v34);
}

void sub_100472DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_100472E48(const void **a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t i;
  const void **v8;
  void *v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  void *__p;
  void *v16;
  char *v17;
  void *v18[2];
  char v19;
  void *v20;
  void *v21;
  char *v22;
  void *v23[2];
  char v24;
  void *v25;
  void *v26;
  char *v27;
  void *v28[2];
  char v29;
  uint64_t v30;
  _QWORD *v31[2];
  const void *__dst[6];
  uint64_t v33[6];
  _QWORD v34[6];

  v30 = 0;
  v31[0] = 0;
  v31[1] = 0;
  sub_100091AE8(v28, "Bluetooth Mouse M336/M337/M535");
  v4 = operator new(0x14uLL);
  v26 = v4 + 5;
  v27 = (char *)(v4 + 5);
  v4[4] = 325704422;
  *(_OWORD *)v4 = xmmword_1007413D1;
  v25 = v4;
  sub_1004743CC(__dst, (__int128 *)v28, (uint64_t)&v25);
  sub_100091AE8(v23, "Bluetooth Mouse M557");
  v5 = operator new(0x14uLL);
  v21 = v5 + 5;
  v22 = (char *)(v5 + 5);
  v5[4] = 601617057;
  *(_OWORD *)v5 = xmmword_1007413E5;
  v20 = v5;
  sub_1004743CC(v33, (__int128 *)v23, (uint64_t)&v20);
  sub_100091AE8(v18, "Microsoft Sculpt Comfort Mouse");
  v6 = operator new(0x14uLL);
  v16 = v6 + 5;
  v17 = (char *)(v6 + 5);
  v6[4] = 2014317364;
  *(_OWORD *)v6 = xmmword_1007413F9;
  __p = v6;
  sub_1004743CC(v34, (__int128 *)v18, (uint64_t)&__p);
  sub_100474AC0((uint64_t)&v30, __dst, 3);
  for (i = 0; i != -18; i -= 6)
  {
    v8 = &__dst[i];
    v9 = (void *)v34[i + 3];
    if (v9)
    {
      v8[16] = v9;
      operator delete(v9);
    }
    if (*((char *)v8 + 119) < 0)
      operator delete((void *)v8[12]);
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v19 < 0)
    operator delete(v18[0]);
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v24 < 0)
    operator delete(v23[0]);
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  if (v29 < 0)
    operator delete(v28[0]);
  v10 = sub_10001F2AC((uint64_t)&v30, a1);
  if (v31 == (_QWORD **)v10)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v12 = *(_BYTE **)(v10 + 56);
    v11 = *(_BYTE **)(v10 + 64);
    v13 = v11 - v12;
    if (v11 != v12)
    {
      sub_1002A367C(a2, v11 - v12);
      v14 = (char *)a2[1];
      memmove(v14, v12, v13);
      a2[1] = &v14[v13];
    }
  }
  sub_100474D84((uint64_t)&v30, v31[0]);
}

void sub_1004730DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;
  uint64_t i;

  for (i = 96; i != -48; i -= 48)
    sub_100473208(v41 + i);
  if (__p)
    operator delete(__p);
  if (a19 < 0)
    operator delete(a14);
  if (a20)
    operator delete(a20);
  if (a28 < 0)
    operator delete(a23);
  if (a29)
    operator delete(a29);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(a1);
}

uint64_t sub_100473208(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

BOOL sub_100473248(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  void **v7;
  _BOOL8 v8;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;
  void **v14[9];
  uint64_t v15;

  v3 = (char *)operator new(0x14uLL);
  *((_DWORD *)v3 + 4) = 325704422;
  *(_OWORD *)v3 = xmmword_1007413D1;
  v14[0] = (void **)v3;
  v14[1] = (void **)(v3 + 20);
  v14[2] = (void **)(v3 + 20);
  v4 = (char *)operator new(0x14uLL);
  *((_DWORD *)v4 + 4) = 601617057;
  *(_OWORD *)v4 = xmmword_1007413E5;
  v14[3] = (void **)v4;
  v14[4] = (void **)(v4 + 20);
  v14[5] = (void **)(v4 + 20);
  v5 = (char *)operator new(0x14uLL);
  v14[7] = (void **)(v5 + 20);
  v14[8] = (void **)(v5 + 20);
  *((_DWORD *)v5 + 4) = 2014317364;
  *(_OWORD *)v5 = xmmword_1007413F9;
  v14[6] = (void **)v5;
  v10 = operator new(0x48uLL);
  v12 = v10 + 9;
  v6 = 0;
  v11 = sub_100474DCC((int)&v12, (uint64_t)v14, (uint64_t)&v15, v10);
  do
  {
    v7 = v14[v6 + 6];
    if (v7)
    {
      v14[v6 + 7] = v7;
      operator delete(v7);
    }
    v6 -= 3;
  }
  while (v6 != -9);
  v13 = 0;
  v8 = sub_100474EEC((uint64_t)v10, (uint64_t)v11, a2) != (_QWORD)v11;
  v14[0] = (void **)&v10;
  sub_100474E58(v14);
  return v8;
}

void sub_1004733DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  sub_100474E58(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10047346C(uint64_t a1)
{
  NSObject *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD v9[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ Device Manager -------------------", (uint8_t *)&v6, 2u);
    v2 = qword_1009997E8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Devices:", (uint8_t *)&v6, 2u);
  }
  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 168);
  v6 = 0;
  v7 = 0;
  v8 = 0;
  sub_10001FE6C(&v6, a1 + 144);
  sub_100034264((uint64_t)v9);
  v3 = v6;
  v4 = v7;
  if (v6 != v7)
  {
    do
      sub_1004548CC(*v3++);
    while (v3 != v4);
    v3 = v6;
  }
  if (v3)
  {
    v7 = v3;
    operator delete(v3);
  }
  return sub_100034234((uint64_t)v9);
}

void sub_100473580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004735B0(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  void **v7;
  void *__p[2];
  char v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD v16[2];

  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 168);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  sub_10001FE6C(&v13, a1 + 144);
  sub_100034264((uint64_t)v16);
  v2 = v13;
  v3 = v14;
  if (v13 != v14)
  {
    do
    {
      v4 = *v2;
      if (sub_10043FC5C(*v2))
      {
        if (qword_10097AA40 != -1)
          dispatch_once(&qword_10097AA40, &stru_100930008);
        v5 = sub_1004CD5FC((uint64_t)off_10097AA38, v4);
        if (v5)
          v6 = sub_10026BA9C(v5 + 400);
        else
          v6 = 0;
        v12 = 0;
        v11 = 0;
        if (sub_100442878(v4))
        {
          LODWORD(__p[0]) = 0;
          sub_100444BF0(v4, __p, (_DWORD *)&v12 + 1, &v12, &v11);
        }
        sub_10043F78C(v4, (uint64_t)__p);
        if (v10 >= 0)
          v7 = __p;
        else
          v7 = (void **)__p[0];
        sub_10011D47C(v4 + 128, (const char *)v7, v6, SWORD2(v12), v12, v11);
        if (v10 < 0)
          operator delete(__p[0]);
      }
      ++v2;
    }
    while (v2 != v3);
    v2 = v13;
  }
  if (v2)
  {
    v14 = v2;
    operator delete(v2);
  }
  return sub_100034234((uint64_t)v16);
}

void sub_100473738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_100473790(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint8_t v6[16];
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 32);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, v1 + 168);
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "DeviceManager init, first unlock delay expired, allow read/write device settings", v6, 2u);
  }
  atomic_store(1u, (unsigned __int8 *)(v1 + 232));
  v3 = *(uint64_t **)(v1 + 144);
  v4 = *(uint64_t **)(v1 + 152);
  while (v3 != v4)
    sub_10043C174(*v3++);
  sub_10046F210(v1);
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092FF88);
  sub_10047A054((uint64_t)off_100977890);
  return sub_100034234((uint64_t)v7);
}

void sub_10047387C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100473894(uint64_t a1, int a2, uint64_t a3)
{
  dispatch_block_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD block[5];

  if (!a2 || qword_100992B98)
  {
    if (a2)
    {
      v7 = sub_10006BBEC();
      sub_100475CEC(v7, a3, (void *)qword_100992B98);
    }
    else
    {
      if (qword_100992B98)
      {
        dispatch_block_cancel((dispatch_block_t)qword_100992B98);
        v8 = (void *)qword_100992B98;
      }
      else
      {
        v8 = 0;
      }
      qword_100992B98 = 0;

    }
  }
  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100473A70;
    block[3] = &unk_100917378;
    block[4] = a1;
    v4 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, block);
    v5 = (void *)qword_100992B98;
    qword_100992B98 = (uint64_t)v4;

    v6 = sub_10006BBEC();
    sub_100475CEC(v6, a3, (void *)qword_100992B98);
  }
}

_QWORD *sub_10047396C(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
LABEL_8:
    abort();
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = v2[4];
      if (v3 >= v4)
        break;
      v2 = (_QWORD *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 5;
    v2 = (_QWORD *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

void sub_1004739B8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;

  sub_10001A82C(a1 + 272, *(_QWORD **)(a1 + 280));
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = 134217984;
    v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Wireless Splitter cleanUpGuestDevice due to unpairing  fGuestDevicesSize is %lu", (uint8_t *)&v3, 0xCu);
  }
}

void sub_100473A70(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  std::string::size_type v3;
  uint64_t v4;
  unsigned __int8 *v5;
  NSObject *v6;
  std::string *v7;
  void *v8;
  std::string __p;
  std::string buf;
  uint8_t v11[4];
  std::string *v12;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(v1 + 288);
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Wireless Splitter linkkey timeout check, fGuestDevicesSize is %lu", (uint8_t *)&buf, 0xCu);
  }
  if (*(_QWORD *)(v1 + 288))
  {
    v4 = *(_QWORD *)(v1 + 272);
    if (*(_BYTE *)(v4 + 40))
    {
      v5 = *(unsigned __int8 **)(v4 + 32);
      v6 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8((uint64_t)v5, &buf);
        v7 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &buf
           : (std::string *)buf.__r_.__value_.__r.__words[0];
        *(_DWORD *)v11 = 136446210;
        v12 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Wireless Splitter linkkey timeout reached, guest device %{public}s needs to be deleted", v11, 0xCu);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
      memset(&buf, 0, sizeof(buf));
      v8 = sub_100091AE8(&buf, "WS_ERROR_DISCONNECTION_LINK_KEY_TIMEOUT_REACHED");
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        v8 = sub_10003430C(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
      else
        __p = buf;
      sub_1004700FC((uint64_t)v8, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (qword_100978150 != -1)
        dispatch_once(&qword_100978150, &stru_100930028);
      sub_1005B8744((uint64_t)off_100978148, v5);
      sub_1004739B8(v1);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
}

void sub_100473C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_100473C90(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  void **v11;
  _QWORD v12[5];
  int v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  void **v17;
  __int16 v18;
  int v19;

  v7 = sub_10006D488((uint64_t)a1, a3, 1);
  if (v7)
  {
    v8 = v7;
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_10092FF68);
    v9 = sub_1004A35C0((uint64_t)off_100977A50, a2, 10000);
    v10 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F6EC(v8, (uint64_t)__p);
      if (v15 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v17 = v11;
      v18 = 1024;
      v19 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "ACL connected aclConnectCfm for device %s status %d", buf, 0x12u);
      if (v15 < 0)
        operator delete(__p[0]);
    }
    sub_1004498CC(v8, v9, a4);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100473E30;
    v12[3] = &unk_10092FEA8;
    v12[4] = v8;
    v13 = v9;
    sub_100471D08(a1 + 60, v12);
  }
}

uint64_t sub_100473E30(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_100473E4C(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  _QWORD v11[5];
  int v12;
  int v13;

  v7 = sub_10006D488((uint64_t)a1, a3, 0);
  if (v7)
  {
    v8 = v7;
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_10092FF68);
    v9 = sub_1004A35C0((uint64_t)off_100977A50, a2, 10000);
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_10092FF68);
    v10 = sub_1004A35C0((uint64_t)off_100977A50, a4, 10000);
    sub_100449A40(v8, v9, v10);
    if (qword_100978190 != -1)
      dispatch_once(&qword_100978190, &stru_10092FF28);
    if (sub_1004391E8((uint64_t)off_100978188, v8))
      sub_100453E50(v8, 0);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100473FAC;
    v11[3] = &unk_10092FEC8;
    v11[4] = v8;
    v12 = v9;
    v13 = v10;
    sub_100471D08(a1 + 60, v11);
  }
}

uint64_t sub_100473FAC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
}

_BYTE *sub_100473FC8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _BOOL4 v16;
  void *__p[2];
  char v19;
  unsigned __int8 v20;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD v24[2];
  char v25;

  v25 = 0;
  sub_100043758(&v25);
  v2 = sub_100182288((uint64_t)&unk_10097B2E8);
  if ((_DWORD)v2)
  {
    v3 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F42EC(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  sub_10004339C(&v25);
  v24[0] = 0;
  v24[1] = 0;
  sub_10003415C((uint64_t)v24, a1 + 168);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  sub_10001FE6C(&v21, a1 + 144);
  sub_100034264((uint64_t)v24);
  v10 = _os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit");
  v11 = (uint64_t *)v21;
  if (v10)
  {
    v12 = v22;
    if (v21 != v22)
    {
      while (1)
      {
        v13 = *v11;
        v20 = 0;
        v14 = sub_10034D650();
        sub_100091AE8(__p, "_DENY_INCOMING_CLASSIC_CONNECTION_");
        v15 = !(*(unsigned int (**)(uint64_t, uint64_t, void **, unsigned __int8 *))(*(_QWORD *)v14 + 784))(v14, v13, __p, &v20)|| v20 == 0;
        v16 = !v15;
        if ((v19 & 0x80000000) == 0)
          break;
        operator delete(__p[0]);
        if (v16)
          goto LABEL_16;
LABEL_17:
        if (++v11 == v12)
        {
          v11 = (uint64_t *)v21;
          goto LABEL_19;
        }
      }
      if (!v16)
        goto LABEL_17;
LABEL_16:
      sub_100455CB8(v13, v20);
      goto LABEL_17;
    }
  }
LABEL_19:
  if (v11)
  {
    v22 = v11;
    operator delete(v11);
  }
  sub_100034234((uint64_t)v24);
  return sub_100043728(&v25);
}

void sub_10047414C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  sub_100034234((uint64_t)&a19);
  sub_100043728((_BYTE *)(v19 - 49));
  _Unwind_Resume(a1);
}

_BYTE *sub_1004741AC(uint64_t a1)
{
  return sub_100473FC8(a1 - 40);
}

_BYTE *sub_1004741B4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint8_t v17[16];
  _QWORD v18[6];
  uint8_t buf[8];
  uint64_t v20;
  char v21;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "DeviceManager::stackWillStop enter", buf, 2u);
  }
  v21 = 0;
  sub_100043758(&v21);
  v3 = sub_100182378((uint64_t)&unk_10097B2E8);
  if ((_DWORD)v3)
  {
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F4350(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  sub_100183200();
  sub_10004339C(&v21);
  *(_QWORD *)buf = 0;
  v20 = 0;
  sub_10003415C((uint64_t)buf, a1 + 168);
  v12 = *(_QWORD *)(a1 + 144);
  for (i = *(_QWORD *)(a1 + 152); v12 != i; v12 += 8)
  {
    v13 = ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v12 + 128) << 40) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v12 + 129) << 32) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v12 + 130) << 24) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v12 + 131) << 16) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v12 + 132) << 8) | *(unsigned __int8 *)(*(_QWORD *)v12 + 133);
    if (v13)
    {
      v14 = sub_10006BBEC();
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_1004743A0;
      v18[3] = &unk_100918090;
      v18[4] = a1;
      v18[5] = v13;
      sub_100041A34(v14, v18);
      i = *(_QWORD *)(a1 + 152);
    }
  }
  v15 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "DeviceManager::stackWillStop exit", v17, 2u);
  }
  sub_100034234((uint64_t)buf);
  return sub_100043728(&v21);
}

void sub_100474378(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100043728((_BYTE *)(v1 - 81));
  _Unwind_Resume(a1);
}

void sub_1004743A0(uint64_t a1)
{
  sub_100473E4C(*(os_unfair_lock_s **)(a1 + 32), 0, *(_QWORD *)(a1 + 40), 722);
}

_BYTE *sub_1004743B4(uint64_t a1)
{
  return sub_1004741B4(a1 - 40);
}

_QWORD *sub_1004743CC(_QWORD *__dst, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  const void *v6;
  size_t v7;
  char *v8;

  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  v6 = *(const void **)a3;
  v7 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v7)
  {
    sub_1002A367C(__dst + 3, v7);
    v8 = (char *)__dst[4];
    memmove(v8, v6, v7);
    __dst[4] = &v8[v7];
  }
  return __dst;
}

void sub_100474460(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_10047447C(int a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[6];
  int v8;

  v5 = ((unint64_t)*a3 << 40) | ((unint64_t)a3[1] << 32) | ((unint64_t)a3[2] << 24) | ((unint64_t)a3[3] << 16) | ((unint64_t)a3[4] << 8) | a3[5];
  v6 = sub_10006BBEC();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100474604;
  v7[3] = &unk_1009180B0;
  v8 = a1;
  v7[4] = v5;
  v7[5] = a2;
  sub_100041A34(v6, v7);
}

void sub_10047451C(int a1, uint64_t a2, int a3)
{
  NSObject *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[5];
  int v10;
  int v11;
  int v12;
  __int16 v13;

  v13 = 0;
  v12 = 0;
  if (sub_100182620(a2, (uint64_t)&v12))
  {
    v6 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F43B4(a2, v6);
  }
  else
  {
    v7 = ((unint64_t)v12 << 40) | ((unint64_t)BYTE1(v12) << 32) | ((unint64_t)BYTE2(v12) << 24) | ((unint64_t)HIBYTE(v12) << 16) | ((unint64_t)v13 << 8) | HIBYTE(v13);
    v8 = sub_10006BBEC();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1004746E8;
    v9[3] = &unk_100918090;
    v9[4] = v7;
    v10 = a1;
    v11 = a3;
    sub_100041A34(v8, v9);
  }
}

void sub_100474604(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 48);
    v4[0] = 67109120;
    v4[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Device connected connectCfmCb status %d", (uint8_t *)v4, 8u);
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092FFC8);
  sub_100473C90((os_unfair_lock_s *)off_1009778E0, *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 32), *(_BYTE *)(*(_QWORD *)(a1 + 40) + 327));
}

void sub_1004746E8(uint64_t a1)
{
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092FFC8);
  sub_100473E4C((os_unfair_lock_s *)off_1009778E0, *(unsigned int *)(a1 + 40), *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 44));
}

void sub_10047473C(id a1)
{
  operator new();
}

void sub_10047477C()
{
  operator delete();
}

void sub_1004747A0(id a1)
{
  operator new();
}

void sub_1004747E0()
{
  operator delete();
}

void sub_100474804(id a1)
{
  operator new();
}

void sub_100474844()
{
  operator delete();
}

void sub_100474868(id a1)
{
  operator new();
}

void sub_1004748A8()
{
  operator delete();
}

void sub_1004748CC(id a1)
{
  operator new();
}

void sub_10047490C()
{
  operator delete();
}

void sub_100474930(id a1)
{
  operator new();
}

void sub_100474970()
{
  operator delete();
}

void sub_100474994(id a1)
{
  operator new();
}

void sub_1004749D4()
{
  operator delete();
}

void sub_1004749F8(id a1)
{
  operator new();
}

void sub_100474A38()
{
  operator delete();
}

void sub_100474A5C(id a1)
{
  operator new();
}

void sub_100474A9C()
{
  operator delete();
}

uint64_t sub_100474AC0(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 48 * a3;
    do
    {
      sub_100474B40((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_100474B28(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100474D84(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100474B40(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v11 = 0;
  v12 = 0;
  v6 = sub_1002A4958(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_100474BE0((uint64_t)a1, a4, v10);
    sub_100004078(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100474CFC((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_100474BE0@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = sub_100474C50(v6 + 4, a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_100474C38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100474CFC(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100474C50(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  size_t v7;
  char *v8;

  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 3);
  v5 = (_BYTE *)*((_QWORD *)a2 + 4);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    sub_1002A367C(__dst + 3, v5 - v6);
    v8 = (char *)__dst[4];
    memmove(v8, v6, v7);
    __dst[4] = &v8[v7];
  }
  return __dst;
}

void sub_100474CE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100474CFC(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100474D40((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_100474D40(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_100474D84(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100474D84(a1, *a2);
    sub_100474D84(a1, a2[1]);
    sub_100474D40((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_QWORD *sub_100474DCC(int a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  size_t v9;
  char *v10;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v8 = *(const void **)v6;
      v7 = *(_QWORD *)(v6 + 8);
      v9 = v7 - *(_QWORD *)v6;
      if (v7 != *(_QWORD *)v6)
      {
        sub_1002A367C(a4, v7 - *(_QWORD *)v6);
        v10 = (char *)a4[1];
        memmove(v10, v8, v9);
        a4[1] = &v10[v9];
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_100474E58(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100474E98((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_100474E98(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t sub_100474EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const void *v5;
  size_t v6;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *(const void **)a3;
    v6 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    while (*(_QWORD *)(v3 + 8) - *(_QWORD *)v3 != v6 || memcmp(*(const void **)v3, v5, v6))
    {
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

void sub_100474F58(id a1)
{
  operator new();
}

void sub_100474F98()
{
  operator delete();
}

uint64_t **sub_100474FBC(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_BYTE *)v11 + 40) = 0;
    sub_100004078(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_10047507C(id a1)
{
  operator new();
}

void sub_1004750BC()
{
  operator delete();
}

uint64_t sub_1004750E0(unsigned __int8 *a1, _BYTE *a2, _BYTE *a3)
{
  int v6;
  uint64_t result;
  NSObject *v8;
  unsigned int v9;
  __int128 *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  __int16 v16;
  __int128 v17;

  v17 = 0uLL;
  v6 = *a1;
  if (v6 == 16)
  {
LABEL_6:
    result = sub_1000689E4(a1, &v17);
    goto LABEL_7;
  }
  if (v6 != 2)
  {
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006F4424((uint64_t)a1, v8);
    goto LABEL_6;
  }
  v16 = 0;
  result = sub_1000689E4(a1, &v16);
  v17 = xmmword_100739850;
  WORD1(v17) = v16;
LABEL_7:
  v9 = 0;
  v10 = &v17;
  v11 = 15;
  do
  {
    v12 = v11;
    v9 ^= *(unsigned __int8 *)v10;
    v13 = 8;
    do
    {
      v14 = 2 * v9;
      v15 = (char)v9;
      v9 = (2 * v9) ^ 9;
      if (v15 >= 0)
        v9 = v14;
      --v13;
    }
    while (v13);
    v10 = (__int128 *)((char *)v10 + 1);
    v11 = v12 - 1;
  }
  while (v12);
  *a2 = (v9 >> 3) & 0xF;
  *a3 = v9 & 7;
  return result;
}

uint64_t sub_100475214(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  unsigned int i;
  char v5;

  for (i = 0; a4; --a4)
  {
    v5 = *a3++;
    i = byte_10074149C[(v5 ^ i)];
  }
  return (*(unsigned __int8 *)(a1 + ((unint64_t)i >> 3)) >> (i & 7)) & 1;
}

uint64_t sub_100475258(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  unsigned int i;
  char v5;
  unint64_t v6;
  char v7;
  int v8;
  int v9;

  for (i = 0; a4; --a4)
  {
    v5 = *a3++;
    i = byte_10074149C[(v5 ^ i)];
  }
  v6 = (unint64_t)i >> 3;
  v7 = i & 7;
  v8 = *(unsigned __int8 *)(a1 + v6);
  v9 = 1 << v7;
  if ((v9 & v8) != 0)
    return 0;
  *(_BYTE *)(a1 + v6) = v8 | v9;
  return 1;
}

_QWORD *sub_1004752B8(_QWORD *a1, int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8;
  NSObject *global_queue;
  int v10;
  const char *v11;
  xpc_object_t v12;
  uint64_t v14;

  *a1 = &off_1009301E8;
  v8 = (uint64_t)(a1 + 1);
  global_queue = dispatch_get_global_queue(21, 0);
  sub_10026C3D0(v8, (int)a1, "com.apple.BTServer.pbap", global_queue);
  v10 = a2 - 3;
  if ((a2 - 3) >= 7 || ((0x5Fu >> v10) & 1) == 0)
  {
    v14 = sub_100027F68();
    sub_100576500(v14, 0);
  }
  v11 = (&off_100930210)[v10];
  sub_10026C40C(v8);
  v12 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v12, "kArgType", v11);
  xpc_dictionary_set_uint64(v12, "kArgOffset", a3);
  xpc_dictionary_set_uint64(v12, "kArgCount", a4);
  sub_10026C614(v8, "Open", v12, 0);
  return a1;
}

void sub_1004753C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10026C408(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004753E4(_QWORD *a1)
{
  *a1 = &off_1009301E8;
  sub_10026C408((uint64_t)(a1 + 1));
  return a1;
}

void sub_100475414(_QWORD *a1)
{
  *a1 = &off_1009301E8;
  sub_10026C408((uint64_t)(a1 + 1));
  operator delete();
}

void sub_100475454(uint64_t a1)
{
  _QWORD v1[5];

  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472;
  v1[2] = sub_1004754AC;
  v1[3] = &unk_100917378;
  v1[4] = a1;
  sub_10026C4B8(a1 + 8, v1);
}

uint64_t sub_1004754AC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t sub_1004754C4(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100475574;
  v3[3] = &unk_100917358;
  v3[4] = &v4;
  sub_10026C724(a1 + 8, "GetSize", 0, v3);
  v1 = *((unsigned int *)v5 + 6);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10047555C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100475574(uint64_t a1, xpc_object_t xdict)
{
  uint64_t result;

  result = xpc_dictionary_get_uint64(xdict, "kValue");
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1004755B0(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v4 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_uint64(v4, "kArgIndex", a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100475698;
  v7[3] = &unk_100917358;
  v7[4] = &v8;
  sub_10026C724(a1 + 8, "GetRecentCall", v4, v7);
  v5 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_100475680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100475698()
{
  operator new();
}

void sub_10047580C()
{
  uint64_t v0;

  v0 = sub_100027F68();
  sub_100576500(v0, 0);
}

void sub_100475820(id a1)
{
  operator new();
}

_QWORD *sub_100475860(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 0;
  return result;
}

void sub_100475868(uint64_t a1, dispatch_qos_class_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v4 = qword_100999970;
    if (os_log_type_enabled((os_log_t)qword_100999970, OS_LOG_TYPE_FAULT))
      sub_1006F44DC(v4, v5, v6);
  }
  v7 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v8 = dispatch_queue_attr_make_with_qos_class(v7, a2, 0);
  *(_QWORD *)(a1 + 8) = dispatch_queue_create(*(const char **)a1, v8);
  if (qword_10097B308 != -1)
    dispatch_once(&qword_10097B308, &stru_1009303C0);
  sub_100475E14((NSObject **)qword_10097B300, *(dispatch_queue_t *)(a1 + 8));
}

void sub_100475920(id a1)
{
  operator new();
}

uint64_t sub_100475960()
{
  if (qword_100992BC8 != -1)
    dispatch_once(&qword_100992BC8, &stru_100930288);
  return qword_100992BC0;
}

void sub_1004759A0(id a1)
{
  operator new();
}

uint64_t sub_1004759E0()
{
  if (qword_100992BD8 != -1)
    dispatch_once(&qword_100992BD8, &stru_1009302A8);
  return qword_100992BD0;
}

void sub_100475A20(id a1)
{
  operator new();
}

uint64_t sub_100475A60()
{
  if (qword_100992BE8 != -1)
    dispatch_once(&qword_100992BE8, &stru_1009302C8);
  return qword_100992BE0;
}

void sub_100475AA0(id a1)
{
  operator new();
}

void sub_100475AE0(id a1)
{
  operator new();
}

uint64_t sub_100475B20()
{
  if (qword_100992C08 != -1)
    dispatch_once(&qword_100992C08, &stru_100930308);
  return qword_100992C00;
}

void sub_100475B60(id a1)
{
  operator new();
}

void sub_100475BA0(id a1)
{
  operator new();
}

uint64_t sub_100475BE0()
{
  if (qword_100992C28 != -1)
    dispatch_once(&qword_100992C28, &stru_100930348);
  return qword_100992C20;
}

void sub_100475C20(id a1)
{
  operator new();
}

void sub_100475C60(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    if (qword_10097B308 != -1)
      dispatch_once(&qword_10097B308, &stru_1009303C0);
    sub_100475EC0((NSObject **)qword_10097B300, *(dispatch_queue_t *)(a1 + 8));
    dispatch_release(*(dispatch_object_t *)(a1 + 8));
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t sub_100475CC8(uint64_t a1)
{
  sub_100475C60(a1);
  return a1;
}

void sub_100475CEC(uint64_t a1, uint64_t a2, void *a3)
{
  int64_t v4;
  dispatch_time_t v5;
  dispatch_block_t block;

  v4 = 1000000 * a2;
  block = a3;
  v5 = dispatch_time(0, v4);
  dispatch_after(v5, *(dispatch_queue_t *)(a1 + 8), block);

}

void sub_100475D40(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2;
  if (qword_100992BA8 != -1)
    dispatch_once(&qword_100992BA8, &stru_100930248);
  if (qword_100992BA0 == a1)
  {
    v4 = qword_100999970;
    if (os_log_type_enabled((os_log_t)qword_100999970, OS_LOG_TYPE_FAULT))
      sub_1006F4550(v4, v5, v6);
  }
  dispatch_async_and_wait(*(dispatch_queue_t *)(a1 + 8), v3);

}

const char *sub_100475DDC(const char **a1)
{
  const char *result;

  result = dispatch_queue_get_label(0);
  if (result)
    return (const char *)(strcmp(result, *a1) == 0);
  return result;
}

void sub_100475E14(NSObject **a1, dispatch_queue_t queue)
{
  NSObject *v4;
  _QWORD v5[6];

  if (dispatch_queue_get_qos_class(queue, 0) >= QOS_CLASS_DEFAULT)
  {
    if (os_log_type_enabled((os_log_t)qword_100999970, OS_LOG_TYPE_DEBUG))
      sub_1006F45C4(queue);
    v4 = *a1;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1004762C4;
    v5[3] = &unk_100918090;
    v5[4] = a1;
    v5[5] = queue;
    dispatch_async(v4, v5);
  }
}

void sub_100475EC0(NSObject **a1, dispatch_queue_t queue)
{
  NSObject *v4;
  _QWORD v5[6];

  if (dispatch_queue_get_qos_class(queue, 0) >= QOS_CLASS_DEFAULT)
  {
    if (os_log_type_enabled((os_log_t)qword_100999970, OS_LOG_TYPE_DEBUG))
      sub_1006F4634(queue);
    v4 = *a1;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100476300;
    v5[3] = &unk_100918090;
    v5[4] = a1;
    v5[5] = queue;
    dispatch_sync(v4, v5);
  }
}

void sub_100475F6C(void *a1, NSObject *a2)
{
  void (__cdecl *v4)(void *);

  v4 = (void (__cdecl *)(void *))(*(uint64_t (**)(void *))(*(_QWORD *)a1 + 32))(a1);
  dispatch_async_f(a2, a1, v4);
}

_BYTE *sub_100475FA4(_BYTE *result)
{
  _BYTE *v1;

  v1 = result;
  if (!result[9])
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 16))(result);
  if (v1[8])
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 8))(v1);
  return result;
}

void sub_100475FF8(_QWORD *a1, NSObject *a2)
{
  unsigned int *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  v4 = (unsigned int *)(a1 + 7);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  if (!v5)
  {
    sub_10034CAA4(&v9, a1 + 3);
    sub_100274874((uint64_t)(a1 + 5), &v9);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (*((_QWORD *)&v9 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  sub_10006DDEC(a1, a2);
}

void sub_1004760A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 24);
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
    v16 = 0;
    v17 = std::__shared_weak_count::lock(v2);
    if (v17)
    {
      v16 = v3;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  v6 = (unsigned int *)(a1 + 56);
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    v15 = 0uLL;
    sub_100274874(a1 + 40, &v15);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_1004761C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::__shared_weak_count *v3;
  va_list va;

  va_start(va, a3);
  sub_10009F88C((uint64_t)va);
  std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004761E0(_QWORD *a1)
{
  _QWORD block[5];

  a1[2] = 0;
  a1[1] = a1 + 2;
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  a1[3] = 0;
  a1[4] = a1 + 5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100476278;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992C30 != -1)
    dispatch_once(&qword_100992C30, block);
  return a1;
}

void sub_100476278(uint64_t a1)
{
  dispatch_queue_t *v1;
  NSObject *v2;
  NSObject *v3;

  v1 = *(dispatch_queue_t **)(a1 + 32);
  v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v3 = dispatch_queue_attr_make_with_qos_class(v2, QOS_CLASS_DEFAULT, 0);
  *v1 = dispatch_queue_create("com.apple.bluetooth.DispatcherWatchdog", v3);
  sub_1000107AC((uint64_t)v1);
}

uint64_t *sub_1004762C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *result;

  v1 = *(_QWORD *)(a1 + 32);
  result = sub_10000F7A0((uint64_t **)(v1 + 8), (unint64_t *)(a1 + 40), (uint64_t *)(a1 + 40));
  ++*(_QWORD *)(v1 + 56);
  return result;
}

uint64_t sub_100476300(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = sub_100015ECC(v1 + 8, (unint64_t *)(a1 + 40));
  --*(_QWORD *)(v1 + 56);
  return result;
}

void sub_100476338(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  const char *label;
  _QWORD *v8;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  _QWORD *v12;
  _QWORD *v13;
  std::string *p_buf;
  uint64_t v15;
  std::string *v16;
  NSObject *v17;
  std::string *v18;
  uint64_t v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  uint8_t v24[4];
  const char *v25;
  std::string buf;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  if (os_log_type_enabled((os_log_t)qword_100999970, OS_LOG_TYPE_ERROR))
    sub_1006F47B4();
  v2 = *(_QWORD **)(a1 + 8);
  if (v2 != (_QWORD *)(a1 + 16))
  {
    v3 = qword_100999970;
    do
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        label = dispatch_queue_get_label((dispatch_queue_t)v2[4]);
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)label;
        _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
        v3 = qword_100999970;
      }
      v4 = (_QWORD *)v2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != (_QWORD *)(a1 + 16));
  }
  memset(&buf, 0, sizeof(buf));
  sub_100091AE8(&buf, "BT Stuck on ");
  if (os_log_type_enabled((os_log_t)qword_100999970, OS_LOG_TYPE_ERROR))
    sub_1006F4788();
  v8 = *(_QWORD **)(a1 + 32);
  if (v8 != (_QWORD *)(a1 + 40))
  {
    do
    {
      v9 = v8[4];
      v10 = qword_100999970;
      if (os_log_type_enabled((os_log_t)qword_100999970, OS_LOG_TYPE_ERROR))
        sub_1006F4720(v24, v9, &v25, v10);
      v11 = dispatch_queue_get_label(v9);
      std::string::append(&buf, v11);
      std::string::append(&buf, " ");
      v12 = (_QWORD *)v8[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v8[2];
          v6 = *v13 == (_QWORD)v8;
          v8 = v13;
        }
        while (!v6);
      }
      v8 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 40));
  }
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_buf = &buf;
  else
    p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  WriteStackshotReport_stdc(p_buf, 3735936685);
  if (qword_10097AA70 != -1)
    dispatch_once(&qword_10097AA70, &stru_1009303E0);
  v15 = qword_10097AA68;
  sub_100091AE8(v22, "DispatcherWatchdog");
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &buf;
  else
    v16 = (std::string *)buf.__r_.__value_.__r.__words[0];
  sub_100091AE8(__p, (char *)v16);
  sub_10047C59C(0.0, v15, (uint64_t *)v22, (uint64_t *)__p);
  if (v21 < 0)
    operator delete(__p[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  if (qword_100992C40 != -1)
    dispatch_once(&qword_100992C40, &stru_100930368);
  if (byte_100992C38)
  {
    sub_100253460();
    v18 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v18 = (std::string *)buf.__r_.__value_.__r.__words[0];
    qword_10097BA60 = (uint64_t)v18;
    v19 = sub_100027F68();
    sub_100576500(v19, 0);
  }
  v17 = qword_100999970;
  if (os_log_type_enabled((os_log_t)qword_100999970, OS_LOG_TYPE_FAULT))
    sub_1006F46A4((char *)&buf.__r_.__value_.__r.__words[2] + 7, &buf, v17);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
}

void sub_1004766A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void sub_1004766FC(id a1)
{
  uint64_t v1;
  void *__p[2];
  char v3;
  void *v4[2];
  char v5;

  v1 = sub_100027F68();
  sub_100091AE8(v4, "DispatcherWatchdog");
  sub_100091AE8(__p, "enableCrash");
  (*(void (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v1 + 72))(v1, v4, __p, &byte_100992C38);
  if (v3 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4[0]);
}

void sub_100476784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1004767B8(uint64_t a1)
{
  sub_100004B6C(*(_QWORD *)(a1 + 32));
}

void sub_1004767C0(id a1)
{
  operator new();
}

void sub_1004767F4(id a1)
{
  operator new();
}

_QWORD *sub_100476838(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10[3];

  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  v10[2] = 0;
  v2 = *(_QWORD **)(a1 + 8);
  if (v2 != (_QWORD *)a1)
  {
    do
    {
      v6 = (_QWORD *)v2[1];
      v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (_QWORD *)a1)
        {
          v8 = 1;
LABEL_8:
          v6 = (_QWORD *)a1;
        }
        else
        {
          while (1)
          {
            v7 = v6[2];
            v8 = v7 == v5;
            if (v7 != v5)
              break;
            v6 = (_QWORD *)v6[1];
            if (v6 == (_QWORD *)a1)
              goto LABEL_8;
          }
        }
        sub_10047B820((uint64_t)v10, v10, a1, v2, v6);
        if (!v8)
          v6 = (_QWORD *)v6[1];
      }
      v2 = v6;
    }
    while (v6 != (_QWORD *)a1);
  }
  return sub_10002074C(v10);
}

void sub_1004768F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10002074C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100476904(_QWORD *a1, unint64_t a2, int a3)
{
  _QWORD *v6;
  _QWORD *i;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void **v12;
  const char *v13;
  uint64_t v14;
  void *__p[2];
  char v17;
  _QWORD v18[2];
  unint64_t v19;
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  const char *v23;

  v18[1] = 0;
  v19 = a2;
  v18[0] = 0;
  sub_10003415C((uint64_t)v18, (uint64_t)(a1 + 72));
  v6 = a1 + 80;
  if (a3)
  {
    for (i = (_QWORD *)a1[81]; i != v6; i = (_QWORD *)i[1])
    {
      if (i[2] == a2)
      {
        if (i != v6)
          goto LABEL_9;
        break;
      }
    }
    v8 = operator new(0x18uLL);
    v8[1] = v6;
    v8[2] = a2;
    v9 = a1[80];
    *v8 = v9;
    *(_QWORD *)(v9 + 8) = v8;
    a1[80] = v8;
    ++a1[82];
  }
  else
  {
    sub_10047936C((uint64_t)(a1 + 80), &v19);
  }
LABEL_9:
  sub_100034264((uint64_t)v18);
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100930720);
  v10 = sub_1000229D8((_QWORD *)qword_100977B48, v19);
  if (v10)
  {
    v11 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(v10, (uint64_t)__p);
      v12 = (void **)__p[0];
      v13 = "off";
      if (v17 >= 0)
        v12 = __p;
      if (a3)
        v13 = "on";
      *(_DWORD *)buf = 136446466;
      v21 = v12;
      v22 = 2082;
      v23 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" wants connectability %{public}s", buf, 0x16u);
      if (v17 < 0)
        operator delete(__p[0]);
    }
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930740);
  v14 = sub_1004A24B4((uint64_t)off_100977A50);
  sub_100034234((uint64_t)v18);
  return v14;
}

void sub_100476B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100476B34(_QWORD *a1, unint64_t a2, int a3)
{
  _QWORD *v6;
  _QWORD *i;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void **v12;
  const char *v13;
  uint64_t v14;
  void *__p[2];
  char v17;
  _QWORD v18[2];
  unint64_t v19;
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  const char *v23;

  v18[1] = 0;
  v19 = a2;
  v18[0] = 0;
  sub_10003415C((uint64_t)v18, (uint64_t)(a1 + 72));
  v6 = a1 + 83;
  if (a3)
  {
    for (i = (_QWORD *)a1[84]; i != v6; i = (_QWORD *)i[1])
    {
      if (i[2] == a2)
      {
        if (i != v6)
          goto LABEL_9;
        break;
      }
    }
    v8 = operator new(0x18uLL);
    v8[1] = v6;
    v8[2] = a2;
    v9 = a1[83];
    *v8 = v9;
    *(_QWORD *)(v9 + 8) = v8;
    a1[83] = v8;
    ++a1[85];
  }
  else
  {
    sub_10047936C((uint64_t)(a1 + 83), &v19);
  }
LABEL_9:
  sub_100034264((uint64_t)v18);
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100930720);
  v10 = sub_1000229D8((_QWORD *)qword_100977B48, v19);
  if (v10)
  {
    v11 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(v10, (uint64_t)__p);
      v12 = (void **)__p[0];
      v13 = "off";
      if (v17 >= 0)
        v12 = __p;
      if (a3)
        v13 = "on";
      *(_DWORD *)buf = 136446466;
      v21 = v12;
      v22 = 2082;
      v23 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" wants discoverability %{public}s", buf, 0x16u);
      if (v17 < 0)
        operator delete(__p[0]);
    }
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930740);
  v14 = sub_1004A330C(off_100977A50);
  sub_100034234((uint64_t)v18);
  return v14;
}

void sub_100476D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100476D64(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 504);
  v4 = *(_QWORD **)(a1 + 568);
  if (v4 && *v4 == a2)
    operator delete();
  sub_100034234((uint64_t)v6);
  return 7;
}

uint64_t sub_100476DE0(uint64_t a1)
{
  *(_QWORD *)a1 = off_100930410;
  *(_QWORD *)(a1 + 8) = off_1009304B8;
  *(_QWORD *)(a1 + 16) = off_1009304E0;
  *(_QWORD *)(a1 + 24) = off_100930520;
  *(_QWORD *)(a1 + 32) = &off_100930540;
  *(_QWORD *)(a1 + 40) = off_100930558;
  *(_QWORD *)(a1 + 48) = off_100930580;
  *(_QWORD *)(a1 + 56) = off_100930630;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  sub_1000160D0(a1 + 96);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  sub_1000160D0(a1 + 184);
  *(_QWORD *)(a1 + 248) = a1 + 248;
  *(_QWORD *)(a1 + 256) = a1 + 248;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  sub_1000160D0(a1 + 280);
  *(_QWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  sub_1000160D0(a1 + 416);
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  sub_1000160D0(a1 + 504);
  *(_QWORD *)(a1 + 568) = 0;
  sub_1000160D0(a1 + 576);
  *(_QWORD *)(a1 + 640) = a1 + 640;
  *(_QWORD *)(a1 + 648) = a1 + 640;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 664) = a1 + 664;
  *(_QWORD *)(a1 + 672) = a1 + 664;
  *(_QWORD *)(a1 + 680) = 0;
  return a1;
}

void sub_100476F04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void **v9;
  void **v10;
  uint64_t v11;
  void *v13;
  void *v14;
  void *v15;

  v11 = v5;
  sub_100069BDC(v11);
  v13 = *(void **)(v1 + 480);
  if (v13)
  {
    *(_QWORD *)(v1 + 488) = v13;
    operator delete(v13);
  }
  sub_100069BDC(v7);
  if (*(char *)(v1 + 415) < 0)
    operator delete(*(void **)(v1 + 392));
  if (*(char *)(v1 + 391) < 0)
    operator delete(*(void **)(v1 + 368));
  if (*(char *)(v1 + 367) < 0)
    operator delete(*v10);
  sub_100069BDC(v6);
  sub_10002074C(v4);
  sub_100069BDC(v3);
  v14 = *v9;
  if (*v9)
  {
    *(_QWORD *)(v1 + 168) = v14;
    operator delete(v14);
  }
  sub_100069BDC(v2);
  v15 = *v8;
  if (*v8)
  {
    *(_QWORD *)(v1 + 80) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

void sub_100476FC8()
{
  JUMPOUT(0x100476FB0);
}

uint64_t sub_100476FD4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = off_100930410;
  *(_QWORD *)(a1 + 8) = off_1009304B8;
  *(_QWORD *)(a1 + 16) = off_1009304E0;
  *(_QWORD *)(a1 + 24) = off_100930520;
  *(_QWORD *)(a1 + 32) = &off_100930540;
  *(_QWORD *)(a1 + 40) = off_100930558;
  *(_QWORD *)(a1 + 48) = off_100930580;
  *(_QWORD *)(a1 + 56) = off_100930630;
  sub_10002074C((_QWORD *)(a1 + 664));
  sub_10002074C((_QWORD *)(a1 + 640));
  sub_100069BDC(a1 + 576);
  sub_100069BDC(a1 + 504);
  v2 = *(void **)(a1 + 480);
  if (v2)
  {
    *(_QWORD *)(a1 + 488) = v2;
    operator delete(v2);
  }
  sub_100069BDC(a1 + 416);
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  if (*(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  sub_100069BDC(a1 + 280);
  sub_10002074C((_QWORD *)(a1 + 248));
  sub_100069BDC(a1 + 184);
  v3 = *(void **)(a1 + 160);
  if (v3)
  {
    *(_QWORD *)(a1 + 168) = v3;
    operator delete(v3);
  }
  sub_100069BDC(a1 + 96);
  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1004770D4(uint64_t a1)
{
  return sub_100476FD4(a1 - 16);
}

void sub_1004770DC(uint64_t a1)
{
  sub_100476FD4(a1);
  operator delete();
}

void sub_100477100(uint64_t a1)
{
  sub_100476FD4(a1 - 16);
  operator delete();
}

uint64_t sub_100477128(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  NSObject *v8;
  _QWORD v10[2];
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  _QWORD *v14;
  __int16 v15;
  _QWORD *v16;

  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100930720);
  sub_10042381C(qword_100977B48 + 8, a1 + 24);
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_100930780);
  sub_1000D96F8((uint64_t)off_100978188 + 24, a1 + 8);
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_1009307A0);
  sub_1005B40C8(off_100978148, a1 + 16);
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_1009307C0);
  sub_1002B4110((uint64_t)off_100978128 + 80, a1 + 32);
  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_1009307E0);
  sub_1005FC26C((uint64_t)off_100977C28, a1 + 40);
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100930800);
  sub_10061F358((uint64_t)off_1009778A0, a1 + 48, 0);
  v2 = sub_100038E50();
  sub_10046E1C0(v2 + 328, a1 + 56);
  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 280);
  v3 = sub_10003BE44();
  v4 = (const char *)(a1 + 344);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 8))(v3, a1 + 344))
    std::string::assign((std::string *)(a1 + 344), "Unknown");
  v5 = sub_10003BE44();
  v6 = (_QWORD *)(a1 + 368);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a1 + 368, 1))
    std::string::assign((std::string *)(a1 + 368), "Unknown");
  v7 = (_QWORD *)(a1 + 392);
  std::string::assign((std::string *)(a1 + 392), "Apple Inc.");
  v8 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 367) < 0)
      v4 = *(const char **)v4;
    if (*(char *)(a1 + 391) < 0)
      v6 = (_QWORD *)*v6;
    if (*(char *)(a1 + 415) < 0)
      v7 = (_QWORD *)*v7;
    *(_DWORD *)buf = 136446722;
    v12 = v4;
    v13 = 2082;
    v14 = v6;
    v15 = 2082;
    v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Model: %{public}s, Version: %{public}s, Manufacturer: %{public}s", buf, 0x20u);
    v8 = qword_1009997E8;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    v12 = "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/LocalDevice.mm";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
  }
  return sub_100034234((uint64_t)v10);
}

void sub_100477458(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100477474(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD v7[2];

  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100930720);
  sub_100069060(qword_100977B48 + 8, a1 + 24);
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_100930780);
  sub_100069060((uint64_t)off_100978188 + 24, a1 + 8);
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_1009307A0);
  sub_1005B4200((uint64_t)off_100978148, a1 + 16);
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_1009307C0);
  sub_100069060((uint64_t)off_100978128 + 80, a1 + 32);
  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_1009307E0);
  sub_1005FC2D4((uint64_t)off_100977C28, a1 + 40);
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100930800);
  sub_10061F45C((uint64_t)off_1009778A0, a1 + 48);
  v2 = sub_100038E50();
  sub_1002B43D4(v2 + 328, a1 + 56);
  sub_1004776DC(v3, 0);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 280);
  v4 = *(unint64_t **)(a1 + 160);
  if (v4 != *(unint64_t **)(a1 + 168))
  {
    do
    {
      v5 = *v4;
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_100930720);
      sub_10050ABD0(qword_100977B48, v5);
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_100930720);
      sub_10050AC6C(qword_100977B48, v5);
      ++v4;
    }
    while (v4 != *(unint64_t **)(a1 + 168));
    v4 = *(unint64_t **)(a1 + 160);
  }
  *(_QWORD *)(a1 + 168) = v4;
  return sub_100034234((uint64_t)v7);
}

void sub_1004776C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004776DC(uint64_t a1, char a2)
{
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_1009307C0);
  return sub_10047DED4((uint64_t)off_100978128, a2);
}

uint64_t sub_10047772C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 416);
  v12 = *a3;
  v13 = *((_QWORD *)a3 + 2);
  v6 = *(_QWORD *)(a1 + 480);
  v7 = *(_QWORD *)(a1 + 488);
  v11 = a2;
  v8 = sub_10047BDEC(v6, v7, &v11);
  sub_10047B8FC(a1 + 480, v8, *(_QWORD *)(a1 + 488));
  sub_100034234((uint64_t)v10);
  return 0;
}

void sub_1004777AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004777C0(uint64_t a1)
{
  uint64_t v2;
  int v4;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 504);
  if (!*(_QWORD *)(a1 + 568))
  {
    v4 = 0;
    v2 = sub_1000438A4();
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v2 + 200))(v2, &v4);
    operator new();
  }
  sub_100034234((uint64_t)v5);
  return 101;
}

void sub_100477870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100477884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 504);
  v6 = *(_QWORD **)(a1 + 568);
  if (v6 && *v6 == a2)
  {
    v8 = sub_1000438A4();
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 200))(v8, a3);
  }
  else
  {
    v7 = 7;
  }
  sub_100034234((uint64_t)v10);
  return v7;
}

void sub_100477908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10047791C(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 504);
  if (!*(_QWORD *)(a1 + 568))
    operator new();
  sub_100034234((uint64_t)v3);
  return 101;
}

void sub_1004779B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004779C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 504);
  v14 = *(_QWORD **)(a1 + 568);
  if (v14 && *v14 == a2)
  {
    v17 = sub_100038E50();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 176))(v17, a3))
    {
      v18 = sub_1000438A4();
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 1168))(v18, a3, a4, a5, a6, a7);
    }
    else
    {
      v15 = 205;
    }
  }
  else
  {
    v15 = 7;
  }
  sub_100034234((uint64_t)v19);
  return v15;
}

void sub_100477A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100477AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint8_t v16[16];
  _QWORD v17[2];

  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 504);
  v8 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): readEnhancedPowerProfileStatistics", v16, 2u);
  }
  v9 = *(_QWORD **)(a1 + 568);
  if (v9 && *v9 == a2)
  {
    v13 = sub_100038E50();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 176))(v13, a3))
    {
      v14 = sub_1000438A4();
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 1176))(v14, a3, a4);
    }
    else
    {
      v15 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): (readEnhancedPowerProfileStatistics) can't read power profile stats: BT_ERROR_LOCAL_DEVICE_NOT_READY", v16, 2u);
      }
      v11 = 205;
    }
  }
  else
  {
    v10 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): (readEnhancedPowerProfileStatistics) BT_ERROR_INVALID_HANDLE", v16, 2u);
    }
    v11 = 7;
  }
  sub_100034234((uint64_t)v17);
  return v11;
}

void sub_100477C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100477C34(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 504);
  v14 = *(_QWORD **)(a1 + 568);
  if (v14 && *v14 == a2)
  {
    if (a3 == 1)
    {
      v16 = sub_1000438A4();
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 1192))(v16);
    }
    v17 = sub_1000438A4();
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 1184))(v17, a4, a5, a6, a7);
  }
  else
  {
    v15 = 7;
  }
  sub_100034234((uint64_t)v19);
  return v15;
}

void sub_100477CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100477D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  NSObject *v25;
  _QWORD *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint8_t buf[8];
  _QWORD v35[3];

  v35[0] = 0;
  v35[1] = 0;
  sub_10003415C((uint64_t)v35, a1 + 504);
  v25 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): readDetailedPowerProfileStatistics", buf, 2u);
  }
  v26 = *(_QWORD **)(a1 + 568);
  if (v26 && *v26 == a2)
  {
    v30 = sub_100038E50();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 176))(v30, a3))
    {
      v31 = sub_1000438A4();
      v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v31 + 1200))(v31, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
      if ((_DWORD)a3)
      {
        v32 = sub_1000438A4();
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 1208))(v32);
      }
    }
    else
    {
      v33 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): (readDetailedPowerProfileStatistics) can't read power profile stats: BT_ERROR_LOCAL_DEVICE_NOT_READY", buf, 2u);
      }
      v28 = 205;
    }
  }
  else
  {
    v27 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): (readDetailedPowerProfileStatistics) BT_ERROR_INVALID_HANDLE", buf, 2u);
    }
    v28 = 7;
  }
  sub_100034234((uint64_t)v35);
  return v28;
}

void sub_100477EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100477EF8(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 184);
  *(_BYTE *)(a2 + 35) = 0;
  *(_OWORD *)(a2 + 19) = 0u;
  *(_OWORD *)(a2 + 3) = 0u;
  *(_WORD *)a2 = 9218;
  *(_BYTE *)(a2 + 2) = 2;
  *(_BYTE *)(a2 + 3) = *(_BYTE *)(a1 + 272);
  v6 = a1 + 248;
  v7 = *(_QWORD *)(a1 + 256);
  if (v7 != v6)
  {
    v8 = a2 + 4;
    do
    {
      sub_100475258(v8, 256, *(char **)(*(_QWORD *)(v7 + 16) + 8), *(_QWORD *)(*(_QWORD *)(v7 + 16) + 16));
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != v6);
  }
  *a3 = 36;
  sub_100034234((uint64_t)v10);
  return 1;
}

void sub_100477FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100477FC0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 184);
  v2 = *(_QWORD *)(a1 + 264);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_100478004(uint64_t a1, uint64_t *a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 184);
  if ((uint64_t *)(a1 + 248) != a2)
    sub_10047BEAC(a2, *(_QWORD *)(a1 + 256), a1 + 248);
  return sub_100034234((uint64_t)v5);
}

void sub_10047805C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100478070(uint64_t a1, _BYTE *a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 184);
  *a2 = *(_BYTE *)(a1 + 272);
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_1004780B8(uint64_t a1, uint64_t a2, const void *a3, size_t a4, const void *a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t i;
  uint64_t v13;
  size_t v14;
  size_t v15;
  _QWORD v17[2];

  v6 = 3;
  if (a6 && a4 && a3 && a5)
  {
    v17[0] = 0;
    v17[1] = 0;
    sub_10003415C((uint64_t)v17, a1 + 184);
    for (i = *(_QWORD *)(a1 + 256); i != a1 + 248; i = *(_QWORD *)(i + 8))
    {
      v13 = *(_QWORD *)(i + 16);
      if (*(_QWORD *)(v13 + 16) >= a4)
        v14 = a4;
      else
        v14 = *(_QWORD *)(v13 + 16);
      if (!memcmp(*(const void **)(v13 + 8), a3, v14))
      {
        v15 = *(_QWORD *)(v13 + 32) >= a6 ? a6 : *(_QWORD *)(v13 + 32);
        if (!memcmp(*(const void **)(v13 + 24), a5, v15))
          goto LABEL_20;
      }
    }
    if (*(_QWORD *)(a1 + 264) < 0x1FuLL)
    {
      ++*(_BYTE *)(a1 + 272);
      operator new();
    }
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F48AC();
LABEL_20:
    v6 = 1;
    sub_100034234((uint64_t)v17);
  }
  return v6;
}

void sub_100478364()
{
  operator delete();
}

uint64_t sub_100478398(uint64_t a1, uint64_t a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[2];

  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 184);
  for (i = *(_QWORD *)(a1 + 256); i != a1 + 248; i = *(_QWORD *)(i + 8))
  {
    v13 = *(_QWORD *)(i + 16);
    v16 = v13;
    if (*(_QWORD *)v13 == a2
      && *(_QWORD *)(v13 + 16) == a4
      && !memcmp(*(const void **)(v13 + 8), a3, a4)
      && *(_QWORD *)(v13 + 32) == a6
      && !memcmp(*(const void **)(v13 + 24), a5, a6))
    {
      sub_100476838(a1 + 248, &v16);
      v14 = v16;
      if (v16)
      {
        *(_QWORD *)(v16 + 16) = 0;
        free(*(void **)(v14 + 8));
        *(_QWORD *)(v14 + 8) = 0;
        *(_QWORD *)(v14 + 32) = 0;
        free(*(void **)(v14 + 24));
        *(_QWORD *)(v14 + 24) = 0;
        operator delete();
      }
      break;
    }
  }
  ++*(_BYTE *)(a1 + 272);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930740);
  if (sub_1004A5144((uint64_t)off_100977A50)
    && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006F4904();
  }
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_100930760);
  if (sub_10049BBBC() && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F48D8();
  sub_100034234((uint64_t)v17);
  return 0;
}

void sub_100478588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004785A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;

  v13 = 0;
  v12 = 0;
  v15 = 0;
  v14 = 255;
  if (sub_100182620(a2, (uint64_t)&v12))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F495C();
  }
  else
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100930820);
    v10 = v12;
    v11 = v13;
    v7 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v10, 0);
    if (v7)
    {
      v8 = v7;
      if (a3)
      {
        v14 = *(_QWORD *)a4;
        v15 = *(_WORD *)(a4 + 8);
      }
      if (qword_100977898 != -1)
      {
        v9 = v7;
        dispatch_once(&qword_100977898, &stru_100930840);
        v8 = v9;
      }
      sub_10047872C((uint64_t)off_100977890, a1, v8, (uint64_t)&v14);
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      sub_1006F4930();
    }
  }
}

uint64_t sub_10047872C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  _QWORD v16[2];
  uint8_t buf[4];
  int v18;
  __int16 v19;
  uint64_t v20;

  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 416);
  v7 = *(_QWORD *)(a1 + 480);
  v8 = *(_QWORD *)(a1 + 488);
  if (v7 != v8)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    sub_10047C230((char *)&v13, v7, v8, 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 4));
    sub_100034264((uint64_t)v16);
    v9 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      v18 = 10;
      v19 = 2096;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending AFH map changed event to local device listeners %{AFHMap}.10P", buf, 0x12u);
    }
    v10 = v13;
    if (v13 != v14)
    {
      while (1)
      {
        if (v10[3])
        {
          if (!a3)
            goto LABEL_18;
          if (qword_1009778E8 != -1)
            dispatch_once(&qword_1009778E8, &stru_100930820);
          if (!sub_10046F750((uint64_t)off_1009778E0, *v10, a3))
          {
LABEL_18:
            v10 = v13;
            break;
          }
          if (qword_100977B50 != -1)
            dispatch_once(&qword_100977B50, &stru_100930720);
          if (sub_100021398(qword_100977B48, *v10))
          {
            if (qword_10097AB48 != -1)
              dispatch_once(&qword_10097AB48, &stru_1009308A0);
            operator new();
          }
          sub_100034188((uint64_t)v16);
          v11 = sub_10047B940(*(_QWORD *)(a1 + 480), *(_QWORD *)(a1 + 488), *v10);
          sub_10047B8FC(a1 + 480, v11, *(_QWORD *)(a1 + 488));
          sub_100034264((uint64_t)v16);
        }
        v10 += 6;
        if (v10 == v14)
          goto LABEL_18;
      }
    }
    if (v10)
    {
      v14 = v10;
      operator delete(v10);
    }
  }
  return sub_100034234((uint64_t)v16);
}

void sub_1004789E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100478A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_1009307C0);
  if (sub_10002527C((uint64_t)off_100978128) != 1)
    return 202;
  v12 = 0;
  sub_100043758(&v12);
  v10 = sub_100192970(nullsub_329, a3, v4, v5, v6, v7, v8, v9);
  sub_10004339C(&v12);
  if ((_DWORD)v10)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F4988();
    v10 = 1;
  }
  sub_100043728(&v12);
  return v10;
}

void sub_100478AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100478B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;

  v13 = 0;
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_1009307C0);
  if (sub_10002527C((uint64_t)off_100978128) != 1)
    return 202;
  v12 = 0;
  sub_100043758(&v12);
  if (sub_100182588(a3 + 128, &v13))
  {
    v10 = 312;
  }
  else if (sub_10019299C((uint64_t (*)())sub_1004785A4, v13, v4, v5, v6, v7, v8, v9))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F4988();
    v10 = 1;
  }
  else
  {
    sub_10004339C(&v12);
    v10 = 0;
  }
  sub_100043728(&v12);
  return v10;
}

void sub_100478BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_100043728(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_100478C04(uint64_t a1, char a2)
{
  sub_100478C60(a1, 0, 0);
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_1009307C0);
  return sub_10047DB7C((uint64_t)off_100978128, a2);
}

uint64_t sub_100478C60(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void **v9;
  const char *v10;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  void **v15;
  __int16 v16;
  const char *v17;

  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100930720);
  v6 = sub_1000229D8((_QWORD *)qword_100977B48, a2);
  if (v6)
  {
    v7 = v6;
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(v7, (uint64_t)__p);
      v9 = (void **)__p[0];
      v10 = "off";
      if (v13 >= 0)
        v9 = __p;
      if (a3)
        v10 = "on";
      *(_DWORD *)buf = 136446466;
      v15 = v9;
      v16 = 2082;
      v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" wants denylisting %{public}s", buf, 0x16u);
      if (v13 < 0)
        operator delete(__p[0]);
    }
  }
  if (sub_1000261E4() != a3)
  {
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100930740);
    sub_1004A1A58((uint64_t)off_100977A50, a3);
    sub_1004794D4(a1, 10, 0);
  }
  return 0;
}

uint64_t sub_100478E04()
{
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_1009307C0);
  return sub_10047E110((uint64_t)off_100978128);
}

uint64_t sub_100478E44()
{
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_1009307C0);
  return sub_10047E22C((uint64_t)off_100978128);
}

uint64_t sub_100478E84(uint64_t a1, uint64_t a2, char *a3)
{
  NSObject *v5;
  uint64_t v6;
  _BYTE __p[12];
  char v8;

  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_1009307C0);
  if (sub_10002527C((uint64_t)off_100978128))
    return 201;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Displaying power prompt on behalf of application \"%s\"", __p, 0xCu);
  }
  v6 = sub_100069D20();
  sub_100091AE8(__p, a3);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 32))(v6, __p);
  if (v8 < 0)
    operator delete(*(void **)__p);
  return 0;
}

void sub_100478FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100478FC4()
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930740);
  return sub_1004A9A34((uint64_t)off_100977A50);
}

uint64_t sub_100479004(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930740);
  return sub_1004A9E00((uint64_t)off_100977A50, a2, a3, a4);
}

uint64_t sub_10047906C(uint64_t a1, int a2)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930740);
  return sub_1004A9FA8((uint64_t)off_100977A50, a2);
}

uint64_t sub_1004790BC()
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930740);
  return sub_1004AA288((uint64_t)off_100977A50);
}

uint64_t sub_1004790FC(uint64_t a1, _BYTE *a2)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930740);
  return sub_1004A9DB4((uint64_t)off_100977A50, a2);
}

uint64_t sub_10047914C(uint64_t a1, uint64_t a2)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930740);
  return sub_1004A3424((uint64_t)off_100977A50, a2);
}

uint64_t sub_10047919C(uint64_t a1, std::string *a2)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930740);
  return sub_1004A34EC((uint64_t)off_100977A50, a2);
}

uint64_t sub_1004791EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 280);
  if (*(char *)(a1 + 367) < 0)
  {
    sub_10003430C((_BYTE *)a2, *(void **)(a1 + 344), *(_QWORD *)(a1 + 352));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 344);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 360);
  }
  return sub_100034234((uint64_t)v5);
}

void sub_100479258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10047926C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 280);
  if (*(char *)(a1 + 391) < 0)
  {
    sub_10003430C((_BYTE *)a2, *(void **)(a1 + 368), *(_QWORD *)(a1 + 376));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 368);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 384);
  }
  return sub_100034234((uint64_t)v5);
}

void sub_1004792D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004792EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 280);
  if (*(char *)(a1 + 415) < 0)
  {
    sub_10003430C((_BYTE *)a2, *(void **)(a1 + 392), *(_QWORD *)(a1 + 400));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 392);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 408);
  }
  return sub_100034234((uint64_t)v5);
}

void sub_100479358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_10047936C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10[3];

  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  v10[2] = 0;
  v2 = *(_QWORD **)(a1 + 8);
  if (v2 != (_QWORD *)a1)
  {
    do
    {
      v6 = (_QWORD *)v2[1];
      v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (_QWORD *)a1)
        {
          v8 = 1;
LABEL_8:
          v6 = (_QWORD *)a1;
        }
        else
        {
          while (1)
          {
            v7 = v6[2];
            v8 = v7 == v5;
            if (v7 != v5)
              break;
            v6 = (_QWORD *)v6[1];
            if (v6 == (_QWORD *)a1)
              goto LABEL_8;
          }
        }
        sub_10047B820((uint64_t)v10, v10, a1, v2, v6);
        if (!v8)
          v6 = (_QWORD *)v6[1];
      }
      v2 = v6;
    }
    while (v6 != (_QWORD *)a1);
  }
  return sub_10002074C(v10);
}

void sub_100479424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10002074C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100479438(uint64_t a1, _BYTE *a2)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930740);
  return sub_1004A5288((uint64_t)off_100977A50, a2);
}

BOOL sub_100479488(uint64_t a1)
{
  _BOOL8 v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 576);
  v2 = *(_QWORD *)(a1 + 656) != 0;
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_1004794D4(uint64_t a1, int a2, int a3)
{
  unint64_t *v5;
  unint64_t *v6;
  int v7;
  const char *v8;
  NSObject *v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  _BYTE *v13;
  uint64_t v14;
  const char *v16;
  _QWORD v17[2];
  _QWORD v18[4];
  int v19;
  int v20;
  _BYTE buf[12];
  char v22;
  uint8_t v23[4];
  const char *v24;
  __int16 v25;
  _BYTE *v26;

  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10047A834;
  v18[3] = &unk_100930640;
  v19 = a2;
  v20 = a3;
  sub_10047A778((os_unfair_lock_s *)(a1 + 64), v18);
  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 416);
  v6 = *(unint64_t **)(a1 + 480);
  v5 = *(unint64_t **)(a1 + 488);
  if (v6 != v5)
  {
    switch(a2)
    {
      case 0:
        v7 = 1;
        v8 = "power changed";
        goto LABEL_15;
      case 1:
        v7 = 2;
        v8 = "device name changed";
        goto LABEL_15;
      case 2:
        v7 = 4;
        v8 = "discoverability changed";
        goto LABEL_15;
      case 3:
        v7 = 8;
        v8 = "connectability changed";
        goto LABEL_15;
      case 4:
        v7 = 16;
        v8 = "pairing status changed";
        goto LABEL_15;
      case 5:
        v7 = 32;
        v8 = "connection status changed";
        goto LABEL_15;
      case 6:
        v7 = 64;
        v8 = "discovery started";
        goto LABEL_15;
      case 7:
        v7 = 128;
        v8 = "discovery stopped";
        goto LABEL_15;
      case 8:
        return sub_100034234((uint64_t)v17);
      case 9:
        v7 = 512;
        v8 = "airplane mode status changed";
        goto LABEL_15;
      case 10:
        v7 = 1024;
        v8 = "denylist mode changed";
        goto LABEL_15;
      case 11:
        v7 = 2048;
        v8 = "first unlock completed";
        goto LABEL_15;
      default:
        v7 = 0;
        v8 = "unknown";
LABEL_15:
        v16 = v8;
        v9 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v16;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending '%{public}s' event to local device listeners", buf, 0xCu);
          v6 = *(unint64_t **)(a1 + 480);
          v5 = *(unint64_t **)(a1 + 488);
        }
        if (v6 != v5)
        {
          do
          {
            if (v6[1])
            {
              if (qword_100977B50 != -1)
                dispatch_once(&qword_100977B50, &stru_100930720);
              v10 = sub_100021398(qword_100977B48, *v6);
              if (v10)
              {
                if (qword_100977B50 != -1)
                  dispatch_once(&qword_100977B50, &stru_100930720);
                if ((sub_10050B568(qword_100977B48, *v6) & v7) == 0)
                {
                  if (qword_10097AB48 != -1)
                    dispatch_once(&qword_10097AB48, &stru_1009308A0);
                  operator new();
                }
                if (qword_100977B50 != -1)
                  dispatch_once(&qword_100977B50, &stru_100930720);
                v11 = sub_1000229D8((_QWORD *)qword_100977B48, v10);
                if (!v11)
                  __assert_rtn("notifyStatusEvent", "LocalDevice.mm", 1078, "session");
                v12 = qword_1009997E8;
                if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
                {
                  sub_1000340DC(v11, (uint64_t)buf);
                  v13 = buf;
                  if (v22 < 0)
                    v13 = *(_BYTE **)buf;
                  *(_DWORD *)v23 = 136446466;
                  v24 = v16;
                  v25 = 2080;
                  v26 = v13;
                  _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Masking '%{public}s' event from local device listener : %s", v23, 0x16u);
                  if (v22 < 0)
                    operator delete(*(void **)buf);
                }
              }
              else
              {
                v14 = sub_10047B940(*(_QWORD *)(a1 + 480), *(_QWORD *)(a1 + 488), *v6);
                sub_10047B8FC(a1 + 480, v14, *(_QWORD *)(a1 + 488));
              }
            }
            v6 += 6;
          }
          while (v6 != *(unint64_t **)(a1 + 488));
        }
        break;
    }
  }
  return sub_100034234((uint64_t)v17);
}

void sub_10047991C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100479974(uint64_t a1, char *a2, unint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  const char *p_buf;
  unint64_t v10;
  NSObject *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  BOOL v19;
  const char *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  id obj;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  void *v37[2];
  char v38;
  void *__p[2];
  char v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint8_t v48[128];
  __int128 buf;
  unsigned __int8 v50;

  v45 = 0;
  v46 = 0;
  v47 = 0;
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_100930780);
  sub_10006A8A0((uint64_t)off_100978188, &v45);
  v6 = (uint64_t *)v45;
  if (v45 == v46)
  {
    v10 = 0;
  }
  else
  {
    v7 = 0;
    v8 = a2;
    while (a4 + v7)
    {
      sub_10043F6EC(*v6, (uint64_t)&buf);
      if ((v50 & 0x80u) == 0)
        p_buf = (const char *)&buf;
      else
        p_buf = (const char *)buf;
      strlcpy(v8, p_buf, 0xF8uLL);
      if ((char)v50 < 0)
        operator delete((void *)buf);
      ++v6;
      --v7;
      v8 += 248;
      if (v6 == v46)
      {
        v10 = -v7;
        goto LABEL_16;
      }
    }
    v11 = qword_1009997E8;
    v10 = a4;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = a4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Warning: More than %zu classic devices connected", (uint8_t *)&buf, 0xCu);
      v10 = a4;
    }
  }
LABEL_16:
  v43 = 0u;
  v44 = 0u;
  v42 = 0u;
  v41 = 0u;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100930800);
  v12 = sub_100069E14((uint64_t)off_1009778A0);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v41, v48, 16);
  if (!v14)
    goto LABEL_80;
  v15 = *(_QWORD *)v42;
  obj = v13;
  while (2)
  {
    v16 = 0;
    do
    {
      if (*(_QWORD *)v42 != v15)
        objc_enumerationMutation(obj);
      v17 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)v16);
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100930860);
      v18 = off_1009778C0;
      sub_100091AE8(__p, "IsAppleWatch");
      if ((sub_10000628C((uint64_t)v18, v17, (uint64_t)__p) & 1) != 0)
        goto LABEL_29;
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100930860);
      if ((sub_100658AD4((uint64_t)off_1009778C0, v17) & 1) != 0)
      {
LABEL_29:
        v19 = 1;
      }
      else
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_100930860);
        v21 = off_1009778C0;
        sub_100091AE8(v37, "A1603");
        if ((sub_10000628C((uint64_t)v21, v17, (uint64_t)v37) & 1) != 0)
        {
          v19 = 1;
        }
        else
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_100930860);
          v22 = off_1009778C0;
          sub_100091AE8(v35, "A2051");
          if ((sub_10000628C((uint64_t)v22, v17, (uint64_t)v35) & 1) != 0)
          {
            v19 = 1;
          }
          else
          {
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_100930860);
            v23 = off_1009778C0;
            sub_100091AE8(v33, "A3085");
            if ((sub_10000628C((uint64_t)v23, v17, (uint64_t)v33) & 1) != 0)
            {
              v19 = 1;
            }
            else
            {
              if (qword_1009778C8 != -1)
                dispatch_once(&qword_1009778C8, &stru_100930860);
              v24 = off_1009778C0;
              sub_100091AE8(v31, "A2538");
              if ((sub_10000628C((uint64_t)v24, v17, (uint64_t)v31) & 1) != 0)
              {
                v19 = 1;
              }
              else
              {
                if (qword_1009778C8 != -1)
                  dispatch_once(&qword_1009778C8, &stru_100930860);
                sub_1006594CC((uint64_t)off_1009778C0, v17, (uint64_t)&buf);
                v25 = *((_QWORD *)&buf + 1);
                if ((v50 & 0x80u) == 0)
                  v25 = v50;
                v19 = v25 != 0;
                if ((char)v50 < 0)
                  operator delete((void *)buf);
              }
              if (v32 < 0)
                operator delete(v31[0]);
            }
            if (v34 < 0)
              operator delete(v33[0]);
          }
          if (v36 < 0)
            operator delete(v35[0]);
        }
        if (v38 < 0)
          operator delete(v37[0]);
      }
      if (v40 < 0)
      {
        operator delete(__p[0]);
        if (v19)
          goto LABEL_43;
      }
      else if (v19)
      {
        goto LABEL_43;
      }
      if (v10 >= a4)
      {
        v27 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 134217984;
          *(_QWORD *)((char *)&buf + 4) = a4;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Warning: More than %zu classic and/or LE devices connected", (uint8_t *)&buf, 0xCu);
        }
        v13 = obj;
        goto LABEL_80;
      }
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100930860);
      sub_10000602C((uint64_t)off_1009778C0, v17, (uint64_t)&buf);
      if ((v50 & 0x80u) == 0)
        v20 = (const char *)&buf;
      else
        v20 = (const char *)buf;
      strlcpy(&a2[248 * v10], v20, 0xF8uLL);
      if ((char)v50 < 0)
        operator delete((void *)buf);
      ++v10;
LABEL_43:
      v16 = (char *)v16 + 1;
    }
    while (v14 != v16);
    v13 = obj;
    v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v48, 16);
    v14 = v26;
    if (v26)
      continue;
    break;
  }
LABEL_80:

  *a3 = v10;
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  return 0;
}

void sub_100479F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  if (a41 < 0)
    operator delete(a36);

  if (a51)
    operator delete(a51);
  _Unwind_Resume(a1);
}

uint64_t sub_10047A054(uint64_t a1)
{
  return sub_1004794D4(a1, 11, 0);
}

uint64_t sub_10047A060(uint64_t a1, _BYTE *a2)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930740);
  return sub_1004A4164((uint64_t)off_100977A50, a2);
}

BOOL sub_10047A0B0(uint64_t a1)
{
  _BOOL8 v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 576);
  v2 = *(_QWORD *)(a1 + 680) != 0;
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10047A0FC(uint64_t a1, BOOL *a2)
{
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_1009307A0);
  *a2 = sub_1005B93C0();
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100930880);
  *a2 |= sub_10068E528(qword_1009778B0);
  return 0;
}

uint64_t sub_10047A194(uint64_t a1, _BYTE *a2)
{
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_100930780);
  *a2 = sub_100438F30((uint64_t)off_100978188);
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100930800);
  *a2 |= sub_100624570((uint64_t)off_1009778A0);
  return 0;
}

uint64_t sub_10047A22C(uint64_t a1, char **a2)
{
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_100930780);
  sub_10043901C((uint64_t)off_100978188, a2);
  return 0;
}

uint64_t sub_10047A284(uint64_t a1, BOOL *a2)
{
  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_1009307E0);
  *a2 = sub_10060006C((uint64_t)off_100977C28);
  return 0;
}

uint64_t sub_10047A2DC()
{
  char v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v4[15];
  char v5;

  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_1009307C0);
  if (sub_10002527C((uint64_t)off_100978128) == 1)
  {
    v5 = 0;
    sub_100043758(&v5);
    v0 = sub_10011CBB8();
    v1 = qword_1009997E8;
    if ((v0 & 1) != 0)
    {
      v2 = 0;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v4 = 0;
        _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Successfully started HCI tracing", v4, 2u);
        v2 = 0;
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F49B4();
      v2 = 1;
    }
    sub_100043728(&v5);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F49E0();
    return 1;
  }
  return v2;
}

void sub_10047A3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10047A40C(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint8_t v16[15];
  char v17;

  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_1009307C0);
  if (sub_10002527C((uint64_t)off_100978128) == 1)
  {
    if (a3 && *a3)
    {
      v9 = sub_10034D508();
      v10 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 72))(v9, a3);
      if (v10 < 0)
      {
        v11 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006F4A38(v10, v11);
      }
    }
    else
    {
      v10 = -1;
    }
    if (!a5)
      a4 = 0;
    v17 = 0;
    sub_100043758(&v17);
    if ((sub_10011CE30(a2, a4) & 1) != 0)
    {
      v12 = 0;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F4A0C();
      v12 = 1;
    }
    sub_10004339C(&v17);
    v13 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Successfully stopped HCI tracing", v16, 2u);
    }
    if ((v10 & 0x8000000000000000) == 0)
    {
      v14 = sub_10034D508();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 80))(v14, v10);
    }
    sub_100043728(&v17);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F49E0();
    return 1;
  }
  return v12;
}

void sub_10047A5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10047A5F4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930740);
  result = sub_1004A24B4((uint64_t)off_100977A50);
  if (!a3)
    return sub_1004794D4(a1, 4, 0);
  return result;
}

uint64_t sub_10047A664(uint64_t a1, uint64_t a2, int a3)
{
  return sub_10047A5F4(a1 - 16, a2, a3);
}

uint64_t sub_10047A66C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930740);
  result = sub_1004A24B4((uint64_t)off_100977A50);
  if (!a3)
    return sub_1004794D4(a1, 4, 0);
  return result;
}

uint64_t sub_10047A6DC(uint64_t a1, uint64_t a2, int a3)
{
  return sub_10047A66C(a1 - 16, a2, a3);
}

uint64_t sub_10047A6E4(uint64_t a1)
{
  return sub_1004794D4(a1, 5, 0);
}

uint64_t sub_10047A6F0(uint64_t a1)
{
  return sub_1004794D4(a1 - 8, 5, 0);
}

uint64_t sub_10047A700(uint64_t a1)
{
  return sub_1004794D4(a1, 5, 0);
}

uint64_t sub_10047A70C(uint64_t a1)
{
  return sub_1004794D4(a1 - 8, 5, 0);
}

uint64_t sub_10047A724(uint64_t a1)
{
  return sub_1004794D4(a1, 5, 0);
}

uint64_t sub_10047A730(uint64_t a1)
{
  return sub_1004794D4(a1 - 48, 5, 0);
}

uint64_t sub_10047A740(uint64_t a1)
{
  return sub_1004794D4(a1, 5, 0);
}

uint64_t sub_10047A74C(uint64_t a1)
{
  return sub_1004794D4(a1 - 48, 5, 0);
}

uint64_t sub_10047A75C(uint64_t a1)
{
  return sub_1004794D4(a1, 8, 0);
}

uint64_t sub_10047A768(uint64_t a1)
{
  return sub_1004794D4(a1 - 40, 8, 0);
}

void sub_10047A778(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_10047A80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_10047A834(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 36));
}

uint64_t sub_10047A84C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  unint64_t *v5;
  uint64_t v6;
  uint8_t v8[8];
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 416);
  v2 = *(_QWORD *)(a1 + 480);
  v3 = *(_QWORD *)(a1 + 488);
  if (v2 != v3)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    sub_10047C230((char *)&v9, v2, v3, 0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 4));
    sub_100034264((uint64_t)v12);
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending LE Test mode stopped event to local device listeners", v8, 2u);
    }
    v5 = v9;
    if (v9 != v10)
    {
      do
      {
        if (v5[2])
        {
          if (qword_100977B50 != -1)
            dispatch_once(&qword_100977B50, &stru_100930720);
          if (sub_100021398(qword_100977B48, *v5))
          {
            if (qword_10097AB48 != -1)
              dispatch_once(&qword_10097AB48, &stru_1009308A0);
            operator new();
          }
          sub_100034188((uint64_t)v12);
          v6 = sub_10047B940(*(_QWORD *)(a1 + 480), *(_QWORD *)(a1 + 488), *v5);
          sub_10047B8FC(a1 + 480, v6, *(_QWORD *)(a1 + 488));
          sub_100034264((uint64_t)v12);
        }
        v5 += 6;
      }
      while (v5 != v10);
      v5 = v9;
    }
    if (v5)
    {
      v10 = v5;
      operator delete(v5);
    }
  }
  return sub_100034234((uint64_t)v12);
}

void sub_10047AA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10047AA8C(uint64_t a1)
{
  return sub_1004794D4(a1, 0, 0);
}

uint64_t sub_10047AA98(uint64_t a1)
{
  return sub_1004794D4(a1 - 32, 0, 0);
}

uint64_t sub_10047AAA8(uint64_t a1)
{
  return sub_1004794D4(a1, 9, 0);
}

uint64_t sub_10047AAB4(uint64_t a1)
{
  return sub_1004794D4(a1 - 56, 9, 0);
}

uint64_t sub_10047AACC(uint64_t a1, int a2)
{
  return sub_1004794D4(a1, a2, 0);
}

uint64_t sub_10047AAD4()
{
  if (qword_100977D80 != -1)
    dispatch_once(&qword_100977D80, &stru_1009308C0);
  if ((sub_1004C18C4((uint64_t)off_100977D78) & 1) != 0)
    return 1;
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_1009308E0);
  return sub_1006790DC((uint64_t)off_100977FA8);
}

uint64_t sub_10047AB58()
{
  if (qword_100977D80 != -1)
    dispatch_once(&qword_100977D80, &stru_1009308C0);
  return sub_1004C18C4((uint64_t)off_100977D78);
}

uint64_t sub_10047AB98(uint64_t a1)
{
  _QWORD *v2;
  const char *v3;
  size_t v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  uint64_t v21;
  _QWORD *v22;
  const char *locale;
  size_t v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  const std::locale::facet *v34;
  uint64_t v35;
  _QWORD *v36;
  const char *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  const char *v41;
  uint64_t v42;
  _QWORD *v43;
  const std::locale::facet *v44;
  uint64_t v45;
  uint64_t v46;
  char v48;
  char v49;
  std::locale v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  __int16 v54;
  __int128 v55;
  _OWORD v56[4];
  void *__p[2];
  __int128 v58;
  __int128 v59;
  _BYTE v60[144];
  uint64_t v61;
  std::locale v62;

  v61 = 0;
  v59 = 0u;
  memset(v60, 0, sizeof(v60));
  v58 = 0u;
  *(_OWORD *)__p = 0u;
  v55 = 0u;
  memset(v56, 0, sizeof(v56));
  sub_1002613AC((uint64_t)&v55);
  v54 = 0;
  v53 = 0;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930740);
  sub_1004A3424((uint64_t)off_100977A50, (uint64_t)&v53);
  v2 = sub_1002614D8(v56, (uint64_t)"Name: ", 6);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930740);
  v3 = (char *)off_100977A50 + 280;
  if (*((char *)off_100977A50 + 303) < 0)
    v3 = *(const char **)v3;
  v4 = strlen(v3);
  v5 = sub_1002614D8(v2, (uint64_t)v3, v4);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
  v6 = std::locale::use_facet(&v50, &std::ctype<char>::id);
  v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v50);
  std::ostream::put(v5, v7);
  std::ostream::flush(v5);
  v8 = sub_1002614D8(v56, (uint64_t)"Model: ", 7);
  v9 = *(char *)(a1 + 367);
  if (v9 >= 0)
    v10 = a1 + 344;
  else
    v10 = *(_QWORD *)(a1 + 344);
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a1 + 367);
  else
    v11 = *(_QWORD *)(a1 + 352);
  v12 = sub_1002614D8(v8, v10, v11);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  v13 = std::locale::use_facet(&v50, &std::ctype<char>::id);
  v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&v50);
  std::ostream::put(v12, v14);
  std::ostream::flush(v12);
  v15 = sub_1002614D8(v56, (uint64_t)"SW Version: ", 12);
  v16 = *(char *)(a1 + 391);
  if (v16 >= 0)
    v17 = a1 + 368;
  else
    v17 = *(_QWORD *)(a1 + 368);
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a1 + 391);
  else
    v18 = *(_QWORD *)(a1 + 376);
  v19 = sub_1002614D8(v15, v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
  v20 = std::locale::use_facet(&v50, &std::ctype<char>::id);
  v21 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v50);
  std::ostream::put(v19, v21);
  std::ostream::flush(v19);
  v22 = sub_1002614D8(v56, (uint64_t)"Address: ", 9);
  locale = (const char *)&v50;
  sub_10046E9BC((unsigned __int8 *)&v53, &v50);
  if (v52 < 0)
    locale = (const char *)v50.__locale_;
  v24 = strlen(locale);
  v25 = sub_1002614D8(v22, (uint64_t)locale, v24);
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
  v26 = std::locale::use_facet(&v62, &std::ctype<char>::id);
  v27 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
  std::locale::~locale(&v62);
  std::ostream::put(v25, v27);
  std::ostream::flush(v25);
  if (SHIBYTE(v52) < 0)
    operator delete(v50.__locale_);
  v50.__locale_ = 0;
  v51 = 0;
  v52 = 0;
  v28 = sub_10034D3CC();
  if (!(*(unsigned int (**)(uint64_t, std::locale *))(*(_QWORD *)v28 + 64))(v28, &v50))
  {
    v29 = HIBYTE(v52);
    if (v52 < 0)
      v29 = v51;
    if (v29)
    {
      v30 = sub_1002614D8(v56, (uint64_t)"FW Version: ", 12);
      if (v52 >= 0)
        v31 = &v50;
      else
        v31 = v50.__locale_;
      if (v52 >= 0)
        v32 = HIBYTE(v52);
      else
        v32 = v51;
      v33 = sub_1002614D8(v30, (uint64_t)v31, v32);
      std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(_QWORD *)(*v33 - 24)));
      v34 = std::locale::use_facet(&v62, &std::ctype<char>::id);
      v35 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
      std::locale::~locale(&v62);
      std::ostream::put(v33, v35);
      std::ostream::flush(v33);
    }
  }
  v49 = 0;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930740);
  sub_1004A4164((uint64_t)off_100977A50, &v49);
  v48 = 0;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930740);
  sub_1004A5288((uint64_t)off_100977A50, &v48);
  v36 = sub_1002614D8(v56, (uint64_t)"Discoverable: ", 14);
  if (v49)
    v37 = "Yes";
  else
    v37 = "No";
  if (v49)
    v38 = 3;
  else
    v38 = 2;
  v39 = sub_1002614D8(v36, (uint64_t)v37, v38);
  v40 = sub_1002614D8(v39, (uint64_t)" Connectable: ", 14);
  if (v48)
    v41 = "Yes";
  else
    v41 = "No";
  if (v48)
    v42 = 3;
  else
    v42 = 2;
  v43 = sub_1002614D8(v40, (uint64_t)v41, v42);
  std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(_QWORD *)(*v43 - 24)));
  v44 = std::locale::use_facet(&v62, &std::ctype<char>::id);
  v45 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
  std::locale::~locale(&v62);
  std::ostream::put(v43, v45);
  std::ostream::flush(v43);
  std::stringbuf::str((char *)v56 + 8);
  if (SHIBYTE(v52) < 0)
    operator delete(v50.__locale_);
  *(_QWORD *)((char *)&v56[-1]
  *(_QWORD *)&v56[0] = v46;
  if (SHIBYTE(v58) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v56 + 8);
  return std::ios::~ios(v60);
}

void sub_10047B150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;

  std::locale::~locale((std::locale *)(v18 - 72));
  if (a16 < 0)
    operator delete(__p);
  sub_1006CC5C8((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_10047B1BC(uint64_t a1)
{
  sub_10047AB98(a1);
}

void sub_10047B3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10047B3D8(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v13;
  uint64_t v14;
  int v15;
  __int16 v16;

  v15 = a2;
  v16 = WORD2(a2);
  v14 = 0;
  v13 = 0;
  sub_100043758(&v13);
  if (sub_100182588((uint64_t)&v15, &v14))
  {
    v10 = 312;
  }
  else
  {
    if (*(_BYTE *)(v14 + 278))
      v11 = sub_1001FA87C();
    else
      v11 = sub_10019284C(v14, a3, v4, v5, v6, v7, v8, v9);
    if (v11)
    {
      v10 = 1;
    }
    else
    {
      sub_10004339C(&v13);
      v10 = 0;
    }
  }
  sub_100043728(&v13);
  return v10;
}

void sub_10047B47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

_QWORD *sub_10047B49C(_QWORD *result)
{
  *result = off_100930670;
  return result;
}

void sub_10047B4AC(_QWORD *a1)
{
  *a1 = off_100930670;
  operator delete();
}

uint64_t sub_10047B4CC(unint64_t *a1)
{
  uint64_t result;

  result = sub_10047B568((uint64_t)a1, a1[2]);
  if ((_DWORD)result)
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))(a1, a1[2], a1[3], a1[4]);
  return result;
}

uint64_t sub_10047B514(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;

  result = sub_10047B568(a1, *(_QWORD *)(a1 + 40));
  if ((_DWORD)result)
    return sub_100435A6C(a2, a3, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), a4);
  return result;
}

BOOL sub_10047B568(uint64_t a1, unint64_t a2)
{
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100930720);
  return sub_10050AB38(qword_100977B48, a2);
}

_QWORD *sub_10047B5B8(_QWORD *result)
{
  *result = off_1009306B0;
  return result;
}

void sub_10047B5C8(_QWORD *a1)
{
  *a1 = off_1009306B0;
  operator delete();
}

uint64_t sub_10047B5E8(unint64_t *a1)
{
  uint64_t result;

  result = sub_10047B568((uint64_t)a1, a1[2]);
  if ((_DWORD)result)
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))(a1, a1[2], a1[3], a1[4]);
  return result;
}

uint64_t sub_10047B630(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;

  result = sub_10047B568(a1, *(_QWORD *)(a1 + 40));
  if ((_DWORD)result)
    return sub_100435A6C(a2, a3, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), a4);
  return result;
}

_QWORD *sub_10047B684(_QWORD *result)
{
  *result = &off_1009306F0;
  return result;
}

void sub_10047B694(_QWORD *a1)
{
  *a1 = &off_1009306F0;
  operator delete();
}

uint64_t sub_10047B6B4(unint64_t *a1)
{
  uint64_t result;

  result = sub_10047B568((uint64_t)a1, a1[2]);
  if ((_DWORD)result)
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))(a1, a1[2], a1[3], a1[4]);
  return result;
}

uint64_t sub_10047B6FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t), uint64_t a4)
{
  uint64_t result;

  result = sub_10047B568(a1, *(_QWORD *)(a1 + 40));
  if ((_DWORD)result)
    return sub_100435A84(a2, a3, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_WORD *)(a1 + 72), a4);
  return result;
}

void sub_10047B758(id a1)
{
  operator new();
}

void sub_10047B798()
{
  operator delete();
}

void sub_10047B7BC(id a1)
{
  operator new();
}

void sub_10047B7FC()
{
  operator delete();
}

uint64_t sub_10047B820(uint64_t result, uint64_t *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a4 != a5)
  {
    v5 = (_QWORD *)*a5;
    if (result != a3)
    {
      v6 = 1;
      if (v5 != a4)
      {
        v7 = a4;
        do
        {
          v7 = (_QWORD *)v7[1];
          ++v6;
        }
        while (v7 != v5);
      }
      *(_QWORD *)(a3 + 16) -= v6;
      *(_QWORD *)(result + 16) += v6;
    }
    v8 = *a4;
    *(_QWORD *)(v8 + 8) = v5[1];
    *(_QWORD *)v5[1] = v8;
    v9 = *a2;
    *(_QWORD *)(v9 + 8) = a4;
    *a4 = v9;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }
  return result;
}

void sub_10047B898(id a1)
{
  operator new();
}

void sub_10047B8D8()
{
  operator delete();
}

uint64_t sub_10047B8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a2 != a3)
  {
    sub_10047B9B4(a3, *(_QWORD *)(a1 + 8), a2);
    *(_QWORD *)(a1 + 8) = v5;
  }
  return a2;
}

uint64_t sub_10047B940(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  __int128 v4;

  while (1)
  {
    if (result == a2)
      return a2;
    if (*(_QWORD *)result == a3)
      break;
    result += 48;
  }
  if (result != a2)
  {
    for (i = result + 48; i != a2; i += 48)
    {
      if (*(_QWORD *)i != a3)
      {
        *(_QWORD *)result = *(_QWORD *)i;
        v4 = *(_OWORD *)(i + 8);
        *(_QWORD *)(result + 24) = *(_QWORD *)(i + 24);
        *(_OWORD *)(result + 8) = v4;
        *(_DWORD *)(result + 32) = *(_DWORD *)(i + 32);
        *(_QWORD *)(result + 40) = *(_QWORD *)(i + 40);
        result += 48;
      }
    }
  }
  return result;
}

uint64_t sub_10047B9B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;

  if (a1 == a2)
    return a1;
  do
  {
    *(_QWORD *)a3 = *(_QWORD *)a1;
    v3 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a1 + 24);
    *(_OWORD *)(a3 + 8) = v3;
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(a1 + 32);
    *(_QWORD *)(a3 + 40) = *(_QWORD *)(a1 + 40);
    a3 += 48;
    a1 += 48;
  }
  while (a1 != a2);
  return a2;
}

void sub_10047BA08(id a1)
{
  operator new();
}

void sub_10047BA48()
{
  operator delete();
}

void sub_10047BA6C(id a1)
{
  operator new();
}

void sub_10047BAAC()
{
  operator delete();
}

void sub_10047BAD0(id a1)
{
  operator new();
}

void sub_10047BB10()
{
  operator delete();
}

void sub_10047BB34(id a1)
{
  operator new();
}

void sub_10047BB74()
{
  operator delete();
}

void sub_10047BB98(id a1)
{
  operator new();
}

void sub_10047BBD8()
{
  operator delete();
}

uint64_t sub_10047BBFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v2 = *a1;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v2) >> 4);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x2AAAAAAAAAAAAAALL)
    v10 = 0x555555555555555;
  else
    v10 = v4;
  v21 = v7;
  v11 = (char *)sub_1002B50E8(v7, v10);
  v12 = &v11[48 * v3];
  __p = v11;
  v18 = v12;
  v20 = &v11[48 * v13];
  *(_QWORD *)v12 = *(_QWORD *)a2;
  v14 = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v12 + 3) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(v12 + 8) = v14;
  *((_DWORD *)v12 + 8) = *(_DWORD *)(a2 + 32);
  *((_QWORD *)v12 + 5) = *(_QWORD *)(a2 + 40);
  v19 = v12 + 48;
  sub_10047BD74(a1, &__p);
  v15 = a1[1];
  if (v19 != v18)
    v19 = &v18[(v19 - v18 - 48) % 0x30uLL];
  if (__p)
    operator delete(__p);
  return v15;
}

void sub_10047BD28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10047BD74(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 48);
    v2 -= 48;
    *(_QWORD *)(v4 - 48) = v5;
    v4 -= 48;
    v6 = *(_OWORD *)(v2 + 8);
    *(_QWORD *)(v4 + 24) = *(_QWORD *)(v2 + 24);
    *(_OWORD *)(v4 + 8) = v6;
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(v2 + 32);
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(v2 + 40);
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10047BDEC(uint64_t result, uint64_t a2, _QWORD *a3)
{
  BOOL v3;
  uint64_t i;
  BOOL v6;
  __int128 v8;

  if (result == a2)
    return a2;
  while (1)
  {
    if (*a3 == *(_QWORD *)result)
    {
      v3 = a3[1] == *(_QWORD *)(result + 8) && a3[2] == *(_QWORD *)(result + 16);
      if (v3 && a3[3] == *(_QWORD *)(result + 24))
        break;
    }
    result += 48;
    if (result == a2)
      return a2;
  }
  if (result != a2)
  {
    for (i = result + 48; i != a2; i += 48)
    {
      if (*a3 == *(_QWORD *)i)
      {
        v6 = a3[1] == *(_QWORD *)(i + 8) && a3[2] == *(_QWORD *)(i + 16);
        if (v6 && a3[3] == *(_QWORD *)(i + 24))
          continue;
      }
      *(_QWORD *)result = *(_QWORD *)i;
      v8 = *(_OWORD *)(i + 8);
      *(_QWORD *)(result + 24) = *(_QWORD *)(i + 24);
      *(_OWORD *)(result + 8) = v8;
      *(_DWORD *)(result + 32) = *(_DWORD *)(i + 32);
      *(_QWORD *)(result + 40) = *(_QWORD *)(i + 40);
      result += 48;
    }
  }
  return result;
}

uint64_t *sub_10047BEAC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *i;

  for (i = (uint64_t *)a1[1]; a2 != a3 && i != a1; i = (uint64_t *)i[1])
  {
    i[2] = *(_QWORD *)(a2 + 16);
    a2 = *(_QWORD *)(a2 + 8);
  }
  if (i == a1)
    return sub_10047BEFC((uint64_t)a1, a1, a2, a3);
  else
    return sub_10047BFCC((uint64_t)a1, i, a1);
}

uint64_t *sub_10047BEFC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  if (a3 != a4)
  {
    v8 = operator new(0x18uLL);
    v9 = v8;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = *(_QWORD *)(a3 + 16);
    v10 = *(_QWORD *)(a3 + 8);
    v11 = 1;
    if (v10 != a4)
    {
      v12 = v8;
      do
      {
        v8 = operator new(0x18uLL);
        *v8 = v12;
        v8[1] = 0;
        v8[2] = *(_QWORD *)(v10 + 16);
        v12[1] = v8;
        ++v11;
        v10 = *(_QWORD *)(v10 + 8);
        v12 = v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    *(_QWORD *)(v13 + 8) = v9;
    *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

uint64_t *sub_10047BFCC(uint64_t a1, uint64_t *__p, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (__p != a3)
  {
    v5 = *a3;
    v6 = *__p;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    do
    {
      v7 = (uint64_t *)__p[1];
      --*(_QWORD *)(a1 + 16);
      operator delete(__p);
      __p = v7;
    }
    while (v7 != a3);
  }
  return a3;
}

void sub_10047C03C(id a1)
{
  operator new();
}

void sub_10047C07C()
{
  operator delete();
}

void sub_10047C0A0(id a1)
{
  operator new();
}

void sub_10047C0E0()
{
  operator delete();
}

void sub_10047C104(id a1)
{
  operator new();
}

void sub_10047C144()
{
  operator delete();
}

void sub_10047C168(id a1)
{
  operator new();
}

void sub_10047C1A8()
{
  operator delete();
}

void sub_10047C1CC(id a1)
{
  operator new();
}

void sub_10047C20C()
{
  operator delete();
}

char *sub_10047C230(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = sub_10047C2AC(result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *(_QWORD *)v7 = *(_QWORD *)a2;
      v8 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(v7 + 8) = v8;
      *(_DWORD *)(v7 + 32) = *(_DWORD *)(a2 + 32);
      *(_QWORD *)(v7 + 40) = *(_QWORD *)(a2 + 40);
      v7 += 48;
      a2 += 48;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

char *sub_10047C2AC(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    abort();
  result = (char *)sub_1002B50E8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void sub_10047C2F8(id a1)
{
  operator new();
}

void sub_10047C338()
{
  operator delete();
}

void sub_10047C35C(id a1)
{
  operator new();
}

void sub_10047C39C()
{
  operator delete();
}

void sub_10047C3C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  NSObject *v6;
  int v7;
  void *__p[2];
  char v9;
  uint8_t buf[8];
  char v11;

  v2 = sub_100027F68();
  sub_100091AE8(buf, "TTRUI");
  sub_100091AE8(__p, "Disable");
  (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(_QWORD *)v2 + 72))(v2, buf, __p, a1 + 12);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(*(void **)buf);
  v3 = sub_100027F68();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3) & 1) == 0)
    *(_BYTE *)(a1 + 12) = 1;
  v4 = sub_100027F68();
  sub_100091AE8(buf, "TTRUIDisabledByUser");
  sub_100091AE8(__p, "Disable");
  v5 = (int *)(a1 + 16);
  (*(void (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v4 + 128))(v4, buf, __p, v5);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(*(void **)buf);
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *v5;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "TTRUIDisabledByUser %d", buf, 8u);
  }
}

void sub_10047C558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_10047C59C(double a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v7;
  void *v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = objc_alloc_init((Class)SDRDiagnosticReporter);
  if (*((char *)a3 + 23) >= 0)
    v7 = a3;
  else
    v7 = (uint64_t *)*a3;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7));
  if (*((char *)a4 + 23) >= 0)
    v9 = a4;
  else
    v9 = (uint64_t *)*a4;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "signatureWithDomain:type:subType:subtypeContext:detectedProcess:triggerThresholdValues:", CFSTR("Bluetooth"), CFSTR("Networking"), v8, v10, CFSTR("bluetoothd"), 0));

  objc_msgSend(v12, "snapshotWithSignature:duration:events:payload:actions:reply:", v11, 0, 0, 0, &stru_100930920, a1);
}

void sub_10047C694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10047C6D0(id a1, NSDictionary *a2)
{
  NSDictionary *v2;
  void *v3;
  unsigned int v4;
  id v5;
  NSObject *v6;
  void *v7;
  signed int v8;
  NSObject *v9;
  int v10;
  id v11;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", kSymptomDiagnosticReplySuccess));
  v4 = objc_msgSend(v3, "BOOLValue");

  if (v4)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", kSymptomDiagnosticReplySessionID));
    v6 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = objc_retainAutorelease(v5);
      v10 = 136315138;
      v11 = objc_msgSend(v5, "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ABC Snapshot successful with SessionID %s", (uint8_t *)&v10, 0xCu);
    }
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", kSymptomDiagnosticReplyReason));
    v8 = objc_msgSend(v7, "intValue");

    v5 = (id)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", kSymptomDiagnosticReplyReasonString));
    v9 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      v5 = objc_retainAutorelease(v5);
      sub_1006F4AAC((uint64_t)objc_msgSend(v5, "UTF8String"), (uint8_t *)&v10, v8, v9);
    }
  }

}

void sub_10047C85C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10047C898(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  void *__p[2];
  char v11;
  _BYTE buf[12];
  __int16 v13;
  uint64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = "unknown";
    if (v4 == 1)
      v5 = "Cancel";
    if (!v4)
      v5 = "File a Radar";
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v5;
    v13 = 2048;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BluetoothDiagnosticsManager: User responded with %{public}s (%ld) button ", buf, 0x16u);
  }
  v6 = *(_QWORD *)(a1 + 40);
  if (v6 == 2)
  {
    *(_DWORD *)(v2 + 16) |= 1 << *(_DWORD *)(v2 + 8);
    v7 = sub_100027F68();
    sub_100091AE8(buf, "TTRUIDisabledByUser");
    sub_100091AE8(__p, "Disable");
    (*(void (**)(uint64_t, _BYTE *, void **, _QWORD))(*(_QWORD *)v7 + 136))(v7, buf, __p, *(unsigned int *)(v2 + 16));
    if (v11 < 0)
      operator delete(__p[0]);
    if (v15 < 0)
      operator delete(*(void **)buf);
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_DWORD *)(v2 + 16);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "set TTRUIDisabledByUser %d", buf, 8u);
    }
  }
  else if (!v6)
  {
    sub_10047CAAC(v2);
  }
  CFRelease(*(CFTypeRef *)v2);
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
}

void sub_10047CA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_10047CAAC(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  _QWORD v19[8];
  _QWORD v20[8];

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Bluetooth TTR %i"), *(unsigned int *)(a1 + 8)));
  v19[0] = CFSTR("Classification");
  v19[1] = CFSTR("ComponentID");
  v20[0] = CFSTR("Other Bug");
  v20[1] = CFSTR("1335920");
  v19[2] = CFSTR("ComponentName");
  v19[3] = CFSTR("ComponentVersion");
  v20[2] = CFSTR("CoreBluetooth - Auto TTR");
  v20[3] = CFSTR("iOS");
  v19[4] = CFSTR("ExtensionIdentifiers");
  v19[5] = CFSTR("Reproducibility");
  v20[4] = CFSTR("com.apple.DiagnosticExtensions.Bluetooth");
  v20[5] = CFSTR("I Didn't Try");
  v19[6] = CFSTR("Description");
  v19[7] = CFSTR("Title");
  v20[6] = CFSTR("\n 1. Were you attempting to connect out to a device? \n2. Were you expecting an incoming connection? \n3. Is the remote device that you were trying to connect to/from an Apple Device? \n4. Was this a Bluetooth Classic connection or a Bluetooth Low Energy Connection(BLE) connection? \n5. What is the Make/Model/Year of the remote device?\n6. Did you encounter a UI issue? \n7. Did you encounter an issue while trying to discover devices from Bluetooth Settings? \n\n Please provide a brief description of the issue...");
  v20[7] = v1;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 8));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = v13;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v5)
          objc_enumerationMutation(v3);
        v7 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v7));
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLQueryItem queryItemWithName:value:](NSURLQueryItem, "queryItemWithName:value:", v7, v8));
        objc_msgSend(v2, "addObject:", v9);

      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v4);
  }

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLComponents componentsWithString:](NSURLComponents, "componentsWithString:", CFSTR("tap-to-radar://new")));
  objc_msgSend(v10, "setQueryItems:", v2);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "URL"));
  objc_msgSend(v11, "openURL:configuration:completionHandler:", v12, 0, 0);

}

void sub_10047CD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v15 = v12;

  _Unwind_Resume(a1);
}

void sub_10047CDD8(uint64_t a1, int a2)
{
  NSObject *v2;
  const char *v3;
  uint64_t v6;
  _QWORD v7[5];
  int v8;
  uint8_t buf[16];

  if (*(_BYTE *)(a1 + 12))
  {
    v2 = qword_1009997E8;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v3 = "BluetoothDiagnosticsManager: Skipping TTR Alert UI";
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, buf, 2u);
    return;
  }
  if (((*(_DWORD *)(a1 + 16) >> a2) & 1) != 0)
  {
    v2 = qword_1009997E8;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v3 = "BluetoothDiagnosticsManager: Skipping TTR Alert UI By user";
    goto LABEL_7;
  }
  v6 = sub_10006BBEC();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10047CED0;
  v7[3] = &unk_1009173C0;
  v7[4] = a1;
  v8 = a2;
  sub_100041A34(v6, v7);
}

void sub_10047CED0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  const __CFString *v5;
  int v6;
  void *v7;
  const __CFDictionary *v8;
  __CFUserNotification *v9;
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoop *Main;
  NSObject *v12;
  uint8_t v13[16];
  uint8_t buf[4];
  _QWORD v15[8];
  _QWORD v16[8];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BluetoothDiagnosticsManager: Show TTR Alert", buf, 2u);
  }
  if (!*(_QWORD *)v2)
  {
    *(_DWORD *)buf = 0;
    v5 = CFSTR("Bluetooth Issue detected. Please file a radar.");
    v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(v2 + 8) = v6;
    if (v6 == 2)
      v5 = CFSTR("Bluetooth maximum connection request number exceeded. Please file a radar.");
    if (v6 == 1)
      v5 = CFSTR("Bluetooth toggle detected. Is Bluetooth working as expected?");
    v15[0] = kCFUserNotificationAlertTopMostKey;
    v15[1] = SBUserNotificationAllowMenuButtonDismissal;
    v16[0] = &__kCFBooleanTrue;
    v16[1] = &__kCFBooleanTrue;
    v15[2] = SBUserNotificationDismissOnLock;
    v15[3] = kCFUserNotificationAlertHeaderKey;
    v16[2] = &__kCFBooleanTrue;
    v16[3] = CFSTR("Bluetooth Issue?");
    v15[4] = kCFUserNotificationAlertMessageKey;
    v15[5] = kCFUserNotificationDefaultButtonTitleKey;
    v16[4] = v5;
    v16[5] = CFSTR("File a Radar");
    v15[6] = kCFUserNotificationAlternateButtonTitleKey;
    v15[7] = kCFUserNotificationOtherButtonTitleKey;
    v16[6] = CFSTR("Cancel");
    v16[7] = CFSTR("Do not ask again.");
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 8));
    v8 = (const __CFDictionary *)objc_msgSend(v7, "mutableCopy");

    v9 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 3uLL, (SInt32 *)buf, v8);
    *(_QWORD *)v2 = v9;
    RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v9, (CFUserNotificationCallBack)sub_10047D1B4, 0);
    if (RunLoopSource)
    {
      Main = CFRunLoopGetMain();
      CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopCommonModes);
    }
    else
    {
      if (!v9)
      {
        v12 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v13 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "BluetoothDiagnosticsManager: notification is null", v13, 2u);
        }
        goto LABEL_15;
      }
      CFUserNotificationCancel(v9);
      RunLoopSource = v9;
    }
    CFRelease(RunLoopSource);
LABEL_15:

    return;
  }
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BluetoothDiagnosticsManager: Already busy with another notification, waiting for the current one to complete", buf, 2u);
  }
}

void sub_10047D18C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10047D1B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[6];

  if (qword_10097AA70 != -1)
    dispatch_once(&qword_10097AA70, &stru_100930940);
  v3 = qword_10097AA68;
  v4 = sub_10006BBEC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10047C898;
  v5[3] = &unk_100918090;
  v5[4] = v3;
  v5[5] = a2;
  sub_100041A34(v4, v5);
}

void sub_10047D244(char *__s, char *a2, double a3)
{
  _QWORD *v6;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  if (qword_10097AA70 != -1)
    dispatch_once(&qword_10097AA70, &stru_100930940);
  sub_100091AE8(v9, __s);
  v6 = sub_100091AE8(__p, a2);
  sub_10047C59C(a3, (uint64_t)v6, (uint64_t *)v9, (uint64_t *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_10047D2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_10047D31C(id a1)
{
  operator new();
}

uint64_t sub_10047D35C(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  return result;
}

_DWORD *sub_10047D368(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

uint64_t sub_10047D370(uint64_t a1, int a2, __int128 *a3, char a4, void *a5)
{
  id v9;
  _BYTE *v10;
  __int128 v11;

  v9 = a5;
  *(_DWORD *)a1 = a2;
  v10 = (_BYTE *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003430C(v10, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v11 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v10 = v11;
  }
  *(_BYTE *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = v9;
  return a1;
}

void sub_10047D3E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10047D3F8(uint64_t a1, __int128 *a2, char a3, char a4, char a5, char a6, char a7, __int128 *a8, __int128 *a9)
{
  __int128 v16;
  __int128 v17;
  _BYTE *v18;
  __int128 v19;

  *(_DWORD *)a1 = 4;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C((_BYTE *)(a1 + 8), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v16 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v16;
  }
  *(_BYTE *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 33) = a4;
  *(_BYTE *)(a1 + 34) = a5;
  *(_BYTE *)(a1 + 35) = a6;
  *(_BYTE *)(a1 + 36) = a7;
  if (*((char *)a8 + 23) < 0)
  {
    sub_10003430C((_BYTE *)(a1 + 40), *(void **)a8, *((_QWORD *)a8 + 1));
  }
  else
  {
    v17 = *a8;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a8 + 2);
    *(_OWORD *)(a1 + 40) = v17;
  }
  v18 = (_BYTE *)(a1 + 64);
  if (*((char *)a9 + 23) < 0)
  {
    sub_10003430C(v18, *(void **)a9, *((_QWORD *)a9 + 1));
  }
  else
  {
    v19 = *a9;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a9 + 2);
    *(_OWORD *)v18 = v19;
  }
  return a1;
}

void sub_10047D4EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10047D520(uint64_t a1, __int128 *a2, char a3, char a4, char a5, char a6, char a7, __int128 *a8, __int128 *a9)
{
  return sub_10047D3F8(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_10047D52C(uint64_t a1, __int128 *a2, char a3, void *a4)
{
  return sub_10047D370(a1, 5, a2, a3, a4);
}

uint64_t sub_10047D540(uint64_t a1, __int128 *a2, char a3, void *a4, int a5, int a6)
{
  uint64_t result;

  result = sub_10047D370(a1, 6, a2, a3, a4);
  *(_DWORD *)(result + 48) = a5;
  *(_DWORD *)(result + 52) = a6;
  return result;
}

uint64_t sub_10047D578(uint64_t a1, __int128 *a2, char a3, void *a4)
{
  return sub_10047D370(a1, 7, a2, a3, a4);
}

uint64_t sub_10047D58C(uint64_t a1, __int128 *a2, char a3, void *a4, int a5)
{
  uint64_t result;

  result = sub_10047D370(a1, 8, a2, a3, a4);
  *(_DWORD *)(result + 48) = a5;
  return result;
}

uint64_t sub_10047D5C0(uint64_t a1, __int128 *a2, char a3, void *a4, uint64_t a5)
{
  uint64_t result;

  result = sub_10047D370(a1, 9, a2, a3, a4);
  *(_QWORD *)(result + 48) = a5;
  return result;
}

uint64_t sub_10047D5F4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;

  v5 = a2;
  *(_DWORD *)a1 = 10;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = a3;
  return a1;
}

uint64_t sub_10047D628(uint64_t a1, void *a2, int a3, char a4)
{
  id v7;

  v7 = a2;
  *(_DWORD *)a1 = 11;
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 20) = a4;
  return a1;
}

uint64_t sub_10047D670(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  *(_DWORD *)a1 = 12;
  *(_QWORD *)(a1 + 8) = v3;
  return a1;
}

uint64_t sub_10047D6A0(uint64_t a1)
{
  *(_QWORD *)a1 = off_100930970;
  *(_QWORD *)(a1 + 8) = &off_1009309B0;
  sub_1000160D0(a1 + 16);
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 144) = a1 + 144;
  *(_QWORD *)(a1 + 152) = a1 + 144;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 112) = 2;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  return a1;
}

void sub_10047D6FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[5];

  v2 = sub_100038E50();
  sub_10046E1C0(v2 + 328, a1 + 8);
  v3 = sub_10006BBEC();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10047D76C;
  v4[3] = &unk_100917378;
  v4[4] = a1;
  sub_100041A34(v3, v4);
}

void sub_10047D76C(uint64_t a1)
{
  sub_10047D774(*(_QWORD *)(a1 + 32));
}

void sub_10047D774(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _BOOL4 v7;
  void *v8;
  unsigned __int8 v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  NSObject *v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  uint8_t v19[16];
  uint8_t v20[16];
  uint8_t v21[16];
  uint8_t buf[16];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Beginning asynchronous power init", buf, 2u);
  }
  if (!sub_10047E4F4(a1))
  {
    *(_DWORD *)(a1 + 112) = 3;
    return;
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930A00);
  (*(void (**)(void *))(*(_QWORD *)off_100977A50 + 32))(off_100977A50);
  v3 = sub_100038E50();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 72))(v3, a1 + 116);
  v4 = sub_100038E50();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 80))(v4, a1 + 117);
  v5 = *(unsigned __int8 *)(a1 + 116);
  v6 = *(_QWORD *)sub_10034D3CC();
  if (v5)
    v7 = (*(uint64_t (**)(void))(v6 + 104))() != 0;
  else
    v7 = (*(uint64_t (**)(void))(v6 + 88))() == 1;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"));
  v9 = objc_msgSend(v8, "isBluetoothModificationAllowed");

  if ((v9 & 1) != 0)
  {
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_100930A20);
    if (sub_1004B9B48((uint64_t)off_100977B38))
    {
      v10 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Bluetooth modification is allowed and OS build updated. Turning BT on", v20, 2u);
      }
      v11 = sub_10034D3CC();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 96))(v11, 1);
      v12 = sub_10034D3CC();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 112))(v12, 1);
      sub_10047DC6C(a1);
      if (qword_100977A58 != -1)
        dispatch_once(&qword_100977A58, &stru_100930A00);
      sub_1004A1A58((uint64_t)off_100977A50, 0);
      v13 = sub_100027F68();
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13) & 1) == 0)
      {
        v14 = *(void (**)(void))(*(_QWORD *)sub_100065478() + 152);
LABEL_38:
        v14();
        return;
      }
      return;
    }
  }
  else
  {
    v15 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Bluetooth modification is not allowed", v21, 2u);
    }
  }
  if (!v7)
  {
    *(_DWORD *)(a1 + 112) = 0;
    sub_10047DC6C(a1);
    sub_10047DFC4(a1);
    sub_10047E974((os_unfair_lock_s *)a1, 0);
    return;
  }
  sub_10047DC6C(a1);
  if (!*(_BYTE *)(a1 + 116))
    goto LABEL_33;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930A00);
  if (sub_1004A7550((uint64_t)off_100977A50) == 2)
  {
    v16 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Airplane mode is ON and airplane mode default grant list state is enabled on power init", v19, 2u);
    }
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100930A00);
    v17 = 1;
  }
  else
  {
LABEL_33:
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100930A00);
    v17 = 0;
  }
  sub_1004A1A58((uint64_t)off_100977A50, v17);
  v18 = sub_100027F68();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18) & 1) == 0)
  {
    v14 = *(void (**)(void))(*(_QWORD *)sub_100065478() + 152);
    goto LABEL_38;
  }
}

void sub_10047DB3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10047DB4C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100038E50();
  sub_1002B43D4(v2 + 328, a1 + 8);
}

uint64_t sub_10047DB74(uint64_t a1)
{
  return sub_10047DB7C(a1, 0);
}

uint64_t sub_10047DB7C(uint64_t a1, char a2)
{
  void *v5;
  char v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];

  if (*(_DWORD *)(a1 + 112) == 3)
    return 2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"));
  v6 = objc_msgSend(v5, "isBluetoothModificationAllowed") | a2;

  if ((v6 & 1) == 0)
    return 200;
  v7 = *(unsigned __int8 *)(a1 + 116);
  v8 = (_QWORD *)sub_10034D3CC();
  v9 = 112;
  if (!v7)
    v9 = 96;
  (*(void (**)(_QWORD *, uint64_t))(*v8 + v9))(v8, 1);
  v10 = sub_10006BBEC();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10047DC64;
  v11[3] = &unk_100917378;
  v11[4] = a1;
  sub_100041A34(v10, v11);
  return 0;
}

void sub_10047DC54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10047DC64(uint64_t a1)
{
  sub_10047DC6C(*(_QWORD *)(a1 + 32));
}

void sub_10047DC6C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t buf[4];
  int v12;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Beginning asynchronous power on", buf, 2u);
  }
  if (*(_DWORD *)(a1 + 112) == 1)
    goto LABEL_16;
  *(_DWORD *)(a1 + 112) = 2;
  v3 = sub_10034D3CC();
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v4)
  {
    v5 = v4;
    do
    {
      v6 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v12 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Power on failed - %{bluetooth:OI_STATUS}u", buf, 8u);
      }
      sub_10047E4F4(a1);
      v7 = sub_10034D3CC();
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
    while (v5);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930A00);
  if (!sub_10049FBD8((uint64_t)off_100977A50))
  {
LABEL_16:
    *(_DWORD *)(a1 + 112) = 1;
    v9 = mach_absolute_time();
    if ((unint64_t)UpTicksToSeconds(v9 - *(_QWORD *)(a1 + 120)) <= 2)
    {
      if (qword_10097AA70 != -1)
        dispatch_once(&qword_10097AA70, &stru_100930A40);
      sub_10047CDD8(qword_10097AA68, 1);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F4B60();
    v8 = sub_10034D3CC();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8))
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F4B00();
      v10 = sub_100027F68();
      sub_100576500(v10, 1);
    }
    *(_DWORD *)(a1 + 112) = 0;
  }
  sub_10047E974((os_unfair_lock_s *)a1, *(_DWORD *)(a1 + 112));
}

uint64_t sub_10047DECC(uint64_t a1)
{
  return sub_10047DED4(a1, 0);
}

uint64_t sub_10047DED4(uint64_t a1, char a2)
{
  void *v5;
  char v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];

  if (*(_DWORD *)(a1 + 112) == 3)
    return 2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"));
  v6 = objc_msgSend(v5, "isBluetoothModificationAllowed") | a2;

  if ((v6 & 1) == 0)
    return 200;
  v7 = *(unsigned __int8 *)(a1 + 116);
  v8 = (_QWORD *)sub_10034D3CC();
  v9 = 112;
  if (!v7)
    v9 = 96;
  (*(void (**)(_QWORD *, _QWORD))(*v8 + v9))(v8, 0);
  v10 = sub_10006BBEC();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10047DFBC;
  v11[3] = &unk_100917378;
  v11[4] = a1;
  sub_100041A34(v10, v11);
  return 0;
}

void sub_10047DFAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10047DFBC(uint64_t a1)
{
  sub_10047DFC4(*(_QWORD *)(a1 + 32));
}

void sub_10047DFC4(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6[16];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Beginning asynchronous power off", v6, 2u);
  }
  if (*(_DWORD *)(a1 + 112) != 1)
    goto LABEL_11;
  *(_DWORD *)(a1 + 112) = 2;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930A00);
  if (!sub_1004A2A44((uint64_t)off_100977A50))
  {
    v4 = sub_10034D3CC();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4))
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F4B00();
      v5 = sub_100027F68();
      sub_100576500(v5, 1);
    }
LABEL_11:
    *(_DWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = mach_absolute_time();
    v3 = *(_DWORD *)(a1 + 112);
    goto LABEL_12;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F4BC0();
  v3 = 1;
  *(_DWORD *)(a1 + 112) = 1;
LABEL_12:
  sub_10047E974((os_unfair_lock_s *)a1, v3);
}

uint64_t sub_10047E110(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[5];

  v2 = sub_10006BBEC();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10047E174;
  v4[3] = &unk_100917378;
  v4[4] = a1;
  sub_100041A34(v2, v4);
  return 0;
}

void sub_10047E174(uint64_t a1)
{
  sub_10047E17C(*(os_unfair_lock_s **)(a1 + 32));
}

void sub_10047E17C(os_unfair_lock_s *a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Beginning asynchronous power shutdown", v3, 2u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930A00);
  sub_1004A2A44((uint64_t)off_100977A50);
  a1[28]._os_unfair_lock_opaque = 4;
  sub_10047E974(a1, 4u);
}

uint64_t sub_10047E22C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[5];

  v2 = sub_10006BBEC();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10047E290;
  v4[3] = &unk_100917378;
  v4[4] = a1;
  sub_100041A34(v2, v4);
  return 0;
}

void sub_10047E290(uint64_t a1)
{
  sub_10047E298(*(os_unfair_lock_s **)(a1 + 32));
}

void sub_10047E298(os_unfair_lock_s *a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint8_t v7[16];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Beginning asynchronous power reset", v7, 2u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930A00);
  v3 = sub_1004A2A44((uint64_t)off_100977A50);
  if (v3 && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F4BC0();
  v4 = sub_10034D3CC();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  if (v5 && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F4C20();
  if (!(v5 | v3))
  {
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100930A00);
    if (sub_10049FBD8((uint64_t)off_100977A50))
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F4B60();
      v6 = sub_10034D3CC();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6))
      {
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006F4B00();
      }
    }
    else
    {
      sub_10047E974(a1, 1u);
    }
  }
}

uint64_t sub_10047E460(uint64_t a1)
{
  uint64_t v2;

  *(_DWORD *)(a1 + 112) = 2;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930A00);
  v2 = sub_1004A2598((uint64_t)off_100977A50);
  if ((_DWORD)v2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F4C80();
  }
  else
  {
    *(_DWORD *)(a1 + 112) = 0;
  }
  return v2;
}

BOOL sub_10047E4F4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t (***v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  int v10;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  void **v14;
  uint64_t v15;
  char *v16;
  void *v17;
  void *v18;
  char v19;
  void *v20[2];
  char v21;
  void *__p;
  char v23;
  uint8_t buf[16];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[144];
  uint64_t v32;
  _BYTE v33[12];
  __int16 v34;
  int v35;
  char v36;

  v2 = sub_100038E50();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 264))(v2))
  {
    v3 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Bluetooth is running inside a Virtual Machine, so skipping chip initialization", buf, 2u);
    }
    return sub_1001702EC() == 10;
  }
  v32 = 0;
  v30 = 0u;
  memset(v31, 0, sizeof(v31));
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  *(_OWORD *)buf = 0u;
  v25 = 0u;
  sub_100272ADC((uint64_t)buf);
  while (1)
  {
    v5 = (uint64_t (***)(_QWORD))sub_10034D3CC();
    v6 = (**v5)(v5);
    v7 = v6;
    if ((_DWORD)v6 == 2)
    {
      v11 = "Unknown platform/chipset/manufacturer combination, restarting";
      v12 = 61;
      goto LABEL_16;
    }
    if ((_DWORD)v6 != 213)
      break;
    v11 = "timed out booting the chip, restarting";
    v12 = 38;
LABEL_16:
    sub_1002614D8(buf, (uint64_t)v11, v12);
    v10 = 1;
LABEL_17:
    sub_10047F50C(a1, 2);
    v13 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      std::stringbuf::str(&buf[8]);
      v14 = v20;
      if (v21 < 0)
        v14 = (void **)v20[0];
      *(_DWORD *)v33 = 136315394;
      *(_QWORD *)&v33[4] = v14;
      v34 = 1024;
      v35 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%s - %{bluetooth:OI_STATUS}u", v33, 0x12u);
      if (v21 < 0)
        operator delete(v20[0]);
      if ((v10 & 1) != 0)
      {
LABEL_29:
        sub_100112D5C();
        v15 = sub_100065478();
        std::stringbuf::str(&buf[8]);
        if (v36 >= 0)
          v16 = v33;
        else
          v16 = *(char **)v33;
        sub_100091AE8(v20, v16);
        (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)v15 + 112))(v15, (unsigned __int16)v7, v20);
        if (v21 < 0)
          operator delete(v20[0]);
        if (v36 < 0)
          operator delete(*(void **)v33);
        if (qword_100977A58 != -1)
          dispatch_once(&qword_100977A58, &stru_100930A00);
        v17 = off_100977A50;
        std::stringbuf::str(&buf[8]);
        sub_1004A5DDC((uint64_t)v17, v7, 0, (uint64_t)&v18);
        if (v19 < 0)
          operator delete(v18);
        usleep(0xF4240u);
        _exit(1);
      }
    }
    else if (v10)
    {
      goto LABEL_29;
    }
  }
  if ((_DWORD)v6)
  {
    v8 = sub_1002614D8(buf, (uint64_t)"Init failed, still in high power result=", 40);
    std::ostream::operator<<(v8, v7);
    sub_10047F50C(a1, 2);
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100930A00);
    v9 = off_100977A50;
    std::stringbuf::str(&buf[8]);
    sub_1004A5DDC((uint64_t)v9, v7, 1, (uint64_t)&__p);
    if (v23 < 0)
      operator delete(__p);
    v10 = 0;
    goto LABEL_17;
  }
  sub_10047F50C(a1, 1);
  if (SHIBYTE(v29) < 0)
    operator delete(*((void **)&v28 + 1));
  std::streambuf::~streambuf(&buf[8]);
  std::ios::~ios(v31);
  return 1;
}

void sub_10047E8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a17 < 0)
    operator delete(__p);
  sub_100272CFC((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_10047E974(os_unfair_lock_s *a1, unsigned int a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD v7[4];
  unsigned int v8;
  _QWORD v9[4];
  unsigned int v10;
  uint8_t buf[4];
  unsigned int v12;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'power state changed' event for local device - {powerstate: %d}", buf, 8u);
  }
  v5 = qword_1009998E8;
  if (os_log_type_enabled((os_log_t)qword_1009998E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Power state change - {powerstate: %d}", buf, 8u);
  }
  if (a2 <= 1)
  {
    v6 = sub_10006BBEC();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10047F618;
    v9[3] = &unk_100918130;
    v10 = a2;
    sub_100041A34(v6, v9);
  }
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10047F740;
  v7[3] = &unk_1009309E0;
  v8 = a2;
  sub_10047F684(a1 + 20, v7);
}

void sub_10047EAE0(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  void *v6;
  unsigned __int8 v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  NSObject *v23;
  NSObject *v24;
  char v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  int v29;
  const char *v30;

  if (*(unsigned __int8 *)(a1 + 116) == a2)
    return;
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "false";
    if (a2)
      v5 = "true";
    v29 = 136446210;
    v30 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Setting airplane mode to %{public}s", (uint8_t *)&v29, 0xCu);
  }
  *(_BYTE *)(a1 + 116) = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"));
  v7 = objc_msgSend(v6, "isBluetoothModificationAllowed");

  if ((v7 & 1) != 0)
  {
    v8 = *(_DWORD *)(a1 + 112);
    if ((a2 & 1) != 0)
    {
      if (!v8)
      {
        v9 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v29) = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Override power state transition : Don't turn on bluetooth in airplane mode if current power state is off", (uint8_t *)&v29, 2u);
        }
        v10 = sub_10034D3CC();
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 112))(v10, 0);
LABEL_21:
        v15 = 1;
LABEL_23:
        v16 = sub_10034D3CC();
        v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 104))(v16);
        v18 = sub_10034D3CC();
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 88))(v18);
        if (qword_100977A58 != -1)
          dispatch_once(&qword_100977A58, &stru_100930A00);
        v20 = sub_1004A7550((uint64_t)off_100977A50);
        if (a2)
        {
          if ((v15 & 1) == 0)
          {
            v21 = *(_DWORD *)(a1 + 112);
            if (v17 == 1)
            {
              v22 = v20;
              if (v21 != 1)
              {
                v23 = qword_1009997E8;
                if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(v29) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Turn power on for airplane mode", (uint8_t *)&v29, 2u);
                }
                sub_10047DC6C(a1);
              }
              if (v22 == 2)
              {
                v24 = qword_1009997E8;
                if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(v29) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Default airplane mode denylist state is enabled. Entering grant list mode for AirplaneMode", (uint8_t *)&v29, 2u);
                }
                if (qword_100977A58 != -1)
                  dispatch_once(&qword_100977A58, &stru_100930A00);
                sub_1004A1A58((uint64_t)off_100977A50, 1);
              }
            }
            else if (!v17 && v21)
            {
              v27 = qword_1009997E8;
              if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(v29) = 0;
                _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Turn power off for airplane mode", (uint8_t *)&v29, 2u);
              }
              sub_10047DFC4(a1);
            }
          }
        }
        else
        {
          if (*(_DWORD *)(a1 + 112) == v19)
            v25 = 1;
          else
            v25 = v15;
          if ((v25 & 1) == 0)
          {
            if (v19)
            {
              if (v19 == 1)
              {
                v26 = qword_1009997E8;
                if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(v29) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Exiting airplane mode : Turn power on", (uint8_t *)&v29, 2u);
                }
                sub_10047DC6C(a1);
              }
            }
            else
            {
              v28 = qword_1009997E8;
              if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(v29) = 0;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Exiting airplane mode : Turn power off", (uint8_t *)&v29, 2u);
              }
              sub_10047DFC4(a1);
            }
          }
          if (qword_100977A58 != -1)
            dispatch_once(&qword_100977A58, &stru_100930A00);
          sub_1004A1A58((uint64_t)off_100977A50, 0);
        }
        return;
      }
    }
    else if (v8)
    {
      v13 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v29) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Override power state transition : Don't turn off bluetooth in normal mode if current airplane mode power is on", (uint8_t *)&v29, 2u);
      }
      v14 = sub_10034D3CC();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 96))(v14, 1);
      goto LABEL_21;
    }
    v15 = 0;
    goto LABEL_23;
  }
  v11 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v12 = "false";
    if (a2)
      v12 = "true";
    v29 = 136446210;
    v30 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Bluetooth modification is not allowed. Ignore airplane mode change to %{public}s", (uint8_t *)&v29, 0xCu);
  }
}

void sub_10047EF78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10047EF90(uint64_t a1, int a2)
{
  sub_10047EAE0(a1 - 8, a2);
}

uint64_t sub_10047EFA0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t Int64;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v18 = 0;
  Int64 = CFPrefs_GetInt64(CFSTR("com.apple.bluetooth"), CFSTR("lastHardwareStatus"), &v18);
  if (v18)
    v10 = 0;
  else
    v10 = Int64;
  *a2 = v10;
  v18 = 0;
  v11 = CFPrefs_GetInt64(CFSTR("com.apple.bluetooth"), CFSTR("lastHardwareStatusFailureTime"), &v18);
  if (v18)
    v12 = 0;
  else
    v12 = v11;
  *a3 = v12;
  v18 = 0;
  v13 = CFPrefs_GetInt64(CFSTR("com.apple.bluetooth"), CFSTR("lastHardwareStatusFailureCount"), &v18);
  if (v18)
    v14 = 0;
  else
    v14 = v13;
  *a4 = v14;
  v18 = 0;
  result = CFPrefs_GetInt64(CFSTR("com.apple.bluetooth"), CFSTR("deviceLastRebootTime"), &v18);
  if (v18)
    v16 = 0;
  else
    v16 = result;
  *a5 = v16;
  if (!v16)
  {
    v17 = sub_10047F0AC();
    *a5 = v17;
    return CFPrefs_SetInt64(CFSTR("com.apple.bluetooth"), CFSTR("deviceLastRebootTime"), v17);
  }
  return result;
}

uint64_t sub_10047F0AC()
{
  uint64_t result;
  NSObject *v1;
  _BOOL4 v2;
  uint8_t v3[8];
  size_t v4;
  uint64_t v5;
  uint64_t v6;

  result = qword_100992C48;
  if (!qword_100992C48)
  {
    v5 = 0;
    v6 = 0;
    v4 = 16;
    if (sysctlbyname("kern.boottime", &v5, &v4, 0, 0) == -1)
    {
      qword_100992C48 = 0;
      v1 = qword_1009997E8;
      v2 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR);
      result = 0;
      if (v2)
      {
        *(_WORD *)v3 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Unable to read kern.boottime", v3, 2u);
        return qword_100992C48;
      }
    }
    else
    {
      result = (int)v6 + 1000000 * v5;
      qword_100992C48 = result;
    }
  }
  return result;
}

uint64_t sub_10047F17C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t result;
  uint64_t v9;

  CFPrefs_SetInt64(CFSTR("com.apple.bluetooth"), CFSTR("lastHardwareStatus"), a2);
  CFPrefs_SetInt64(CFSTR("com.apple.bluetooth"), CFSTR("lastHardwareStatusFailureTime"), a3);
  result = CFPrefs_SetInt64(CFSTR("com.apple.bluetooth"), CFSTR("lastHardwareStatusFailureCount"), a4);
  if (a5)
  {
    v9 = sub_10047F0AC();
    return CFPrefs_SetInt64(CFSTR("com.apple.bluetooth"), CFSTR("deviceLastRebootTime"), v9);
  }
  return result;
}

BOOL sub_10047F218(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;

  v3 = sub_10047F0AC();
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 134218240;
    v8 = v3;
    v9 = 2048;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Check device boot time: current: %llu last: %llu", (uint8_t *)&v7, 0x16u);
  }
  if (v3)
    v5 = v3 == a2;
  else
    v5 = 1;
  return !v5;
}

void sub_10047F2E0(uint64_t a1, uint64_t *a2, char *a3)
{
  __uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  NSObject *v9;
  char v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint8_t buf[4];
  uint64_t v18;

  v15 = 0;
  v16 = 0;
  v14 = 0;
  v6 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  v13 = 0;
  v7 = sub_10047EFA0(a1, (uint64_t *)&v16, &v15, (uint64_t *)&v14, &v13);
  if ((unint64_t)*a2 < 2)
  {
    if (v16 >= 2)
      sub_10047F17C(v7, 0, 0, 0, 0);
    goto LABEL_15;
  }
  if (v16 < 2)
  {
LABEL_6:
    v10 = 1;
    sub_10047F17C(v7, *a2, v6, 1, 1);
    *a2 = 0;
    goto LABEL_16;
  }
  v8 = sub_10047F218(v7, v13);
  if (v8)
  {
    v9 = qword_1009997E8;
    v7 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v7)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Device was rebooted since last reported bluetooth Hardware Status sent.", buf, 2u);
    }
    goto LABEL_6;
  }
  if (v14 <= 2)
  {
    sub_10047F17C(v8, *a2, v6, v14 + 1, 0);
    *a2 = 0;
LABEL_15:
    v10 = 1;
    goto LABEL_16;
  }
  if (v14 == 3)
  {
    sub_10047F17C(v8, *a2, v6, 4, 0);
    v11 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *a2;
      *(_DWORD *)buf = 134217984;
      v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending %llu state to mobilerepaird", buf, 0xCu);
    }
    goto LABEL_15;
  }
  if (v6 - v15 >= 0xD18C2E28000)
    sub_10047F17C(v8, 0, 0, 0, 0);
  v10 = 0;
LABEL_16:
  *a3 = v10;
}

void sub_10047F50C(uint64_t a1, uint64_t a2)
{
  id v2;
  char v3;
  uint64_t v4;

  v4 = a2;
  v3 = 0;
  sub_10047F2E0(a1, &v4, &v3);
  if (v3)
  {
    v2 = (id)objc_opt_new(SystemHealthManager);
    objc_msgSend(v2, "postComponentStatusEventFor:status:withReply:", 5, v4, &stru_1009309C0);

  }
}

void sub_10047F580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10047F594(id a1, BOOL a2, NSError *a3)
{
  NSError *v4;
  NSObject *v5;

  v4 = a3;
  v5 = qword_1009997E8;
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F4D54(a2, (uint64_t)v4, v5);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
  {
    sub_1006F4CE0(a2, v5);
  }

}

uint64_t sub_10047F618(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_DWORD *)(a1 + 32);
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_100930A20);
  v2 = v1 == 1;
  sub_1004B9B58((uint64_t)off_100977B38, v2);
  v3 = sub_100065478();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 144))(v3, v2);
}

void sub_10047F684(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_10047F718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_10047F740(uint64_t a1, uint64_t (***a2)(_QWORD, uint64_t, _QWORD))
{
  return (**a2)(a2, 1, *(unsigned int *)(a1 + 32));
}

uint64_t sub_10047F758(uint64_t a1)
{
  NSObject *v2;
  double Current;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  double v8;
  int v9;
  char v10;
  int v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  const char *v16;
  const char *v17;
  const __CFString *v18;
  uint64_t i;
  id v21;
  NSObject *log;
  void *v23;
  _QWORD v24[2];
  uint8_t buf[4];
  id v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  const __CFString *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;

  v24[0] = 0;
  v24[1] = 0;
  sub_10003415C((uint64_t)v24, a1 + 16);
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Power Assertion History:", buf, 2u);
  }
  Current = CFAbsoluteTimeGetCurrent();
  v21 = objc_alloc_init((Class)NSDateFormatter);
  objc_msgSend(v21, "setDateFormat:", CFSTR("yyyy-MM-dd H:mm:ss"));
  v4 = *(_QWORD *)(a1 + 152);
  for (i = a1 + 144; v4 != i; v4 = *(_QWORD *)(v4 + 8))
  {
    v5 = *(_DWORD *)(v4 + 20);
    v6 = *(int *)(v4 + 16);
    v7 = *(_DWORD *)(v4 + 24);
    v8 = *(double *)(v4 + 32);
    v9 = *(_DWORD *)(v4 + 40);
    v10 = *(_BYTE *)(v4 + 44);
    v11 = *(_DWORD *)(v4 + 48);
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v8));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "stringFromDate:"));
    LODWORD(v13) = llround((v8 - floor(v8)) * 1000.0);
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%000d"), v12, v13));
    log = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v15 = objc_msgSend(objc_retainAutorelease(v14), "UTF8String");
      v16 = "Unknown";
      if (v6 <= 6)
        v16 = off_100930A60[v6];
      v17 = "Unknown";
      if (v5 == 1)
        v17 = "Destroy";
      if (!v5)
        v17 = "Create";
      v18 = CFSTR("com.apple.bluetooth.LeBroadcaster.AdvertisingConfigAssertion");
      if ((v7 - 1) <= 0xA)
        v18 = off_100930A98[v7 - 1];
      *(_DWORD *)buf = 136317186;
      v26 = v15;
      v27 = 2048;
      v28 = v8;
      v29 = 2048;
      v30 = Current - v8;
      v31 = 2080;
      v32 = v16;
      v33 = 2080;
      v34 = v17;
      v35 = 2112;
      v36 = v18;
      v37 = 1024;
      v38 = v9;
      v39 = 1024;
      v40 = v10 & 1;
      v41 = 1024;
      v42 = v11;
      _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "statedump: time:%s %.3f secs(%-12.2f secs ago) source:%-22s event:%-7s %@ ret:%d fw:%d ID:%08X", buf, 0x50u);
    }

  }
  return sub_100034234((uint64_t)v24);
}

void sub_10047FA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10047FA94(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  const char *v4;
  const char *v5;
  int v7;
  const char *v8;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ------------------- Power Manager -------------------", (uint8_t *)&v7, 2u);
    v2 = qword_1009997E8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 116))
      v3 = "On";
    else
      v3 = "Off";
    v7 = 136446210;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Airplane Mode: %{public}s", (uint8_t *)&v7, 0xCu);
    v2 = qword_1009997E8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 117))
      v4 = "On";
    else
      v4 = "Off";
    v7 = 136446210;
    v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Low Power Mode: %{public}s", (uint8_t *)&v7, 0xCu);
    v2 = qword_1009997E8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 112))
      v5 = "On";
    else
      v5 = "Off";
    v7 = 136446210;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Power State: %{public}s", (uint8_t *)&v7, 0xCu);
  }
  return sub_10047F758(a1);
}

uint64_t sub_10047FC44(uint64_t a1, int *a2)
{
  unint64_t v4;
  NSObject *v5;
  unint64_t v6;
  uint64_t *v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  int v16;
  int v17;
  const __CFString *v18;
  int v19;
  _QWORD v21[2];
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const __CFString *v29;
  __int16 v30;
  int v31;

  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 16);
  v4 = *(_QWORD *)(a1 + 160);
  if (v4 >= 0x1F4)
  {
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
      sub_1006F4DDC(v4 - 499, v4, v5);
    if ((_WORD)v4 == 499)
    {
      v7 = *(uint64_t **)(a1 + 152);
    }
    else
    {
      v6 = (unsigned __int16)(v4 - 499) + 1;
      v7 = *(uint64_t **)(a1 + 152);
      do
      {
        v7 = (uint64_t *)v7[1];
        --v6;
      }
      while (v6 > 1);
    }
    sub_10047BFCC(a1 + 144, *(uint64_t **)(a1 + 152), v7);
  }
  v8 = operator new(0x38uLL);
  v9 = *((_OWORD *)a2 + 1);
  v8[1] = *(_OWORD *)a2;
  v8[2] = v9;
  *((_QWORD *)v8 + 6) = *((_QWORD *)a2 + 4);
  v10 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)v8 = v10;
  *((_QWORD *)v8 + 1) = a1 + 144;
  *(_QWORD *)(v10 + 8) = v8;
  *(_QWORD *)(a1 + 144) = v8;
  ++*(_QWORD *)(a1 + 160);
  v11 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *a2;
    v13 = "Unknown";
    v14 = "Unknown";
    if (v12 <= 6)
      v14 = off_100930A60[v12];
    v15 = *((_QWORD *)a2 + 2);
    v16 = a2[1];
    v17 = a2[2];
    if (v16 == 1)
      v13 = "Destroy";
    if (!v16)
      v13 = "Create";
    if ((v17 - 1) > 0xA)
      v18 = CFSTR("com.apple.bluetooth.LeBroadcaster.AdvertisingConfigAssertion");
    else
      v18 = off_100930A98[v17 - 1];
    v19 = a2[8];
    *(_DWORD *)buf = 134219010;
    v23 = v15;
    v24 = 2080;
    v25 = v14;
    v26 = 2080;
    v27 = v13;
    v28 = 2112;
    v29 = v18;
    v30 = 1024;
    v31 = v19;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "PowerAssertionHistory push time:%.2f source:%s event:%s %@ ID:%08X", buf, 0x30u);
  }
  return sub_100034234((uint64_t)v21);
}

void sub_10047FE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10047FE7C(uint64_t a1)
{
  double Current;
  uint64_t v3;
  double v4;
  char v5;
  __int128 v6;
  __int128 v7;
  int v8;
  _QWORD *v9;
  double *v10;
  double *v11;
  double *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t v20;
  void *__p[2];
  char v22;
  void *v23[2];
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27[2];

  Current = CFAbsoluteTimeGetCurrent();
  v27[0] = 0;
  v27[1] = 0;
  v26 = (uint64_t *)v27;
  if (*(_BYTE *)(a1 + 136))
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (v3 != a1 + 144)
    {
      v4 = Current;
      v5 = 0;
      do
      {
        v25 = 0;
        v24 = 0u;
        v6 = *(_OWORD *)(v3 + 16);
        v7 = *(_OWORD *)(v3 + 32);
        v25 = *(_QWORD *)(v3 + 48);
        *(_OWORD *)v23 = v6;
        v24 = v7;
        v8 = DWORD1(v6);
        if (!DWORD1(v6))
        {
          sub_100480398(&v26, (unsigned int *)&v25, &v25, (uint64_t)v23);
          v8 = HIDWORD(v23[0]);
        }
        if (v8 == 1)
        {
          v9 = v27[0];
          if (v27[0])
          {
            v10 = (double *)v27;
            do
            {
              v11 = (double *)v9;
              v12 = v10;
              v13 = *((_DWORD *)v9 + 8);
              if (v13 >= v25)
                v10 = (double *)v9;
              else
                ++v9;
              v9 = (_QWORD *)*v9;
            }
            while (v9);
            if (v10 != (double *)v27)
            {
              if (v13 < v25)
                v11 = v12;
              if (v25 >= *((_DWORD *)v11 + 8))
              {
                v14 = v10[7] - *(double *)&v24 > 5400.0;
                sub_100480468((uint64_t)&v26, (unsigned int *)&v25);
                v5 |= v14;
              }
            }
          }
        }
        v3 = *(_QWORD *)(v3 + 8);
      }
      while (v3 != a1 + 144);
      v15 = v26;
      if (v26 != (uint64_t *)v27)
      {
        do
        {
          v16 = v4 - *((double *)v15 + 7) > 5400.0;
          v17 = (uint64_t *)v15[1];
          if (v17)
          {
            do
            {
              v18 = v17;
              v17 = (uint64_t *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              v18 = (uint64_t *)v15[2];
              v19 = *v18 == (_QWORD)v15;
              v15 = v18;
            }
            while (!v19);
          }
          v5 |= v16;
          v15 = v18;
        }
        while (v18 != (uint64_t *)v27);
      }
      if ((v5 & 1) != 0)
      {
        if (qword_10097AA70 != -1)
          dispatch_once(&qword_10097AA70, &stru_100930A40);
        v20 = qword_10097AA68;
        sub_100091AE8(v23, "Assertion");
        sub_100091AE8(__p, "MAX_ASSERTION_TIME_SECONDS");
        sub_10047C59C(0.0, v20, (uint64_t *)v23, (uint64_t *)__p);
        if (v22 < 0)
          operator delete(__p[0]);
        if (SBYTE7(v24) < 0)
          operator delete(v23[0]);
        *(CFAbsoluteTime *)(a1 + 128) = CFAbsoluteTimeGetCurrent();
      }
    }
  }
  sub_10001A82C((uint64_t)&v26, v27[0]);
}

void sub_1004800BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,_QWORD *a25)
{
  sub_10001A82C((uint64_t)&a24, a25);
  _Unwind_Resume(a1);
}

_QWORD *sub_100480110(_QWORD *a1)
{
  void *v2;

  *a1 = off_100930970;
  a1[1] = &off_1009309B0;
  sub_10002074C(a1 + 18);
  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  sub_100069BDC(a1 + 2);
  return a1;
}

void sub_10048015C(_QWORD *a1)
{
  void *v2;

  *a1 = off_100930970;
  a1[1] = &off_1009309B0;
  sub_10002074C(a1 + 18);
  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  sub_100069BDC(a1 + 2);
  operator delete();
}

void sub_1004801B8(id a1)
{
  operator new();
}

void sub_1004801F8()
{
  operator delete();
}

void sub_10048021C(id a1)
{
  operator new();
}

void sub_100480334()
{
  operator delete();
}

void sub_100480358(id a1)
{
  operator new();
}

uint64_t **sub_100480398(uint64_t **a1, unsigned int *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t **v10;
  unsigned int v11;
  char *v12;
  __int128 v13;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = *((_DWORD *)v7 + 8);
        if (v9 >= v11)
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_10;
      }
      if (v11 >= v9)
        break;
      v7 = v10[1];
      if (!v7)
      {
        v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_10:
    v12 = (char *)operator new(0x50uLL);
    *((_DWORD *)v12 + 8) = *a3;
    v13 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(v12 + 40) = *(_OWORD *)a4;
    *(_OWORD *)(v12 + 56) = v13;
    *((_QWORD *)v12 + 9) = *(_QWORD *)(a4 + 32);
    sub_100004078(a1, (uint64_t)v10, v8, (uint64_t *)v12);
    return (uint64_t **)v12;
  }
  return v10;
}

uint64_t sub_100480468(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32))
    return 0;
  sub_1000040CC((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t sub_1004804E0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;

  *(_DWORD *)a1 = a2;
  v4 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 8) = &off_100918258;
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
    sub_10003C37C(v4);
  *(_QWORD *)(a1 + 24) = 0;
  return a1;
}

size_t sub_100480520(uint64_t a1, void *a2, size_t __n)
{
  size_t result;

  result = sub_100041DE0(a1 + 8, a2, *(_QWORD *)(a1 + 24), __n);
  *(_QWORD *)(a1 + 24) += result;
  return result;
}

uint64_t sub_100480558(uint64_t a1)
{
  unsigned __int8 __dst;

  __dst = 0;
  *(_QWORD *)(a1 + 24) += sub_100041DE0(a1 + 8, &__dst, *(_QWORD *)(a1 + 24), 1uLL);
  return __dst;
}

uint64_t sub_1004805A4(uint64_t a1)
{
  unsigned int v2;
  unsigned __int16 __dst;

  __dst = 0;
  *(_QWORD *)(a1 + 24) += sub_100041DE0(a1 + 8, &__dst, *(_QWORD *)(a1 + 24), 2uLL);
  v2 = bswap32(__dst) >> 16;
  if (*(_DWORD *)a1 == 1)
    return (unsigned __int16)v2;
  else
    return __dst;
}

uint64_t sub_100480608(uint64_t a1)
{
  unsigned int v2;
  unsigned int __dst;

  __dst = 0;
  *(_QWORD *)(a1 + 24) += sub_100041DE0(a1 + 8, &__dst, *(_QWORD *)(a1 + 24), 4uLL);
  v2 = bswap32(__dst);
  if (*(_DWORD *)a1 == 1)
    return v2;
  else
    return __dst;
}

unint64_t sub_100480664(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t result;

  v3 = *(_QWORD *)(a1 + 24) + a2;
  *(_QWORD *)(a1 + 24) = v3;
  v4 = a1 + 8;
  result = sub_10003F8C4(a1 + 8);
  if (v3 > result)
  {
    result = sub_10003F8C4(v4);
    *(_QWORD *)(a1 + 24) = result;
  }
  return result;
}

uint64_t sub_1004806B4(uint64_t result, int a2)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

char *sub_1004806C4(uint64_t a1, char *__src, int64_t a3)
{
  return sub_1002A4510(a1 + 8, *(char **)(a1 + 16), __src, &__src[a3], a3);
}

char *sub_1004806E0(uint64_t a1, char a2)
{
  char __src;
  uint64_t vars0;

  __src = a2;
  return sub_1002A4510(a1 + 8, *(char **)(a1 + 16), &__src, (char *)&vars0, 1);
}

char *sub_10048071C(uint64_t a1, __int16 a2)
{
  __int16 __src;
  uint64_t vars0;

  __src = a2;
  if (*(_DWORD *)a1 == 1)
    __src = __rev16(a2);
  return sub_1002A4510(a1 + 8, *(char **)(a1 + 16), (char *)&__src, (char *)&vars0, 2);
}

char *sub_10048076C(uint64_t a1, unsigned int a2)
{
  unsigned int __src;
  uint64_t vars0;

  __src = a2;
  if (*(_DWORD *)a1 == 1)
    __src = bswap32(a2);
  return sub_1002A4510(a1 + 8, *(char **)(a1 + 16), (char *)&__src, (char *)&vars0, 4);
}

char *sub_1004807BC(uint64_t a1, unint64_t a2)
{
  unint64_t __src;
  uint64_t vars0;

  __src = a2;
  if (*(_DWORD *)a1 == 1)
    __src = bswap64(a2);
  return sub_1002A4510(a1 + 8, *(char **)(a1 + 16), (char *)&__src, (char *)&vars0, 8);
}

uint64_t sub_10048080C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[2];

  if (a2)
  {
    v6[0] = 0;
    v6[1] = 0;
    sub_10003415C((uint64_t)v6, a1 + 16);
    if (*(_DWORD *)(a1 + 80))
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F4F9C(a1);
      goto LABEL_5;
    }
    *(_DWORD *)(a1 + 80) = 3;
    *(_QWORD *)(a1 + 8) = a2;
    sub_100034264((uint64_t)v6);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    if ((_DWORD)v4)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F4F34();
    }
    else
    {
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      if (!(_DWORD)v4)
      {
        sub_100034188((uint64_t)v6);
        *(_DWORD *)(a1 + 80) = 1;
        sub_100034264((uint64_t)v6);
LABEL_5:
        v4 = 0;
LABEL_17:
        sub_100034234((uint64_t)v6);
        return v4;
      }
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F4ECC();
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    }
    *(_DWORD *)(a1 + 80) = 0;
    goto LABEL_17;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F4E64(a1);
  return 1;
}

void sub_1004809A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const char *sub_1004809B4(unsigned int a1)
{
  if (a1 > 0x19)
    return "Unknown";
  else
    return off_100930C48[a1];
}

uint64_t sub_1004809D8(uint64_t a1, int a2)
{
  char *v4;
  char *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *i;
  NSObject *v12;
  void **v13;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *__p[2];
  char v25;
  _QWORD v26[2];
  _QWORD v27[2];
  uint8_t v28[4];
  void **v29;
  uint8_t buf[24];
  uint64_t v31;
  __int16 v32;
  uint64_t v33;

  v27[0] = 0;
  v27[1] = 0;
  sub_10003415C((uint64_t)v27, a1 + 16);
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    sub_100034264((uint64_t)v27);
    v26[0] = 0;
    v26[1] = 0;
    sub_10003415C((uint64_t)v26, a1 + 88);
    v4 = *(char **)(a1 + 152);
    v5 = *(char **)(a1 + 160);
    if (v4 == v5 && *(_QWORD *)(a1 + 176) == *(_QWORD *)(a1 + 184) && *(_QWORD *)(a1 + 200) == *(_QWORD *)(a1 + 208))
    {
      sub_100034264((uint64_t)v26);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1))
      {
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006F506C();
        v17 = sub_100027F68();
        v18 = (char *)sub_1004809B4(*(_DWORD *)(a1 + 248));
        sub_100091AE8(&v22, v18);
        sub_1005756F0(v17, 9504, &v22, 1);
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
      {
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006F5004();
        v19 = sub_100027F68();
        v20 = (char *)sub_1004809B4(*(_DWORD *)(a1 + 248));
        sub_100091AE8(&v21, v20);
        sub_1005756F0(v19, 9505, &v21, 1);
      }
      sub_100034188((uint64_t)v27);
      *(_DWORD *)(a1 + 80) = 0;
      sub_100034264((uint64_t)v27);
      if (a2)
        sub_10048D87C(*(_QWORD *)(a1 + 8));
    }
    else
    {
      v6 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v7 = sub_1004809B4(*(_DWORD *)(a1 + 248));
        v8 = (uint64_t)(*(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176)) >> 3;
        v9 = (uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 3;
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = v7;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = (v5 - v4) >> 3;
        *(_WORD *)&buf[22] = 2048;
        v31 = v8;
        v32 = 2048;
        v33 = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Can't stop \"%{public}s\" profile - there are still devices attached: connecting %lu connected %lu disconnecting %lu", buf, 0x2Au);
        v4 = *(char **)(a1 + 152);
        v5 = *(char **)(a1 + 160);
      }
      memset(buf, 0, sizeof(buf));
      sub_10048293C((uint64_t)buf, 0, v4, v5, (v5 - v4) >> 3);
      sub_10048293C((uint64_t)buf, *(uint64_t *)&buf[8], *(char **)(a1 + 176), *(char **)(a1 + 184), (uint64_t)(*(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176)) >> 3);
      sub_10048293C((uint64_t)buf, *(uint64_t *)&buf[8], *(char **)(a1 + 200), *(char **)(a1 + 208), (uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 3);
      v10 = *(uint64_t **)buf;
      for (i = *(uint64_t **)&buf[8]; v10 != i; ++v10)
      {
        v12 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        {
          sub_10043E5F8(*v10, __p);
          v13 = v25 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)v28 = 136446210;
          v29 = v13;
          _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Still attached device: %{public}s", v28, 0xCu);
          if (v25 < 0)
            operator delete(__p[0]);
        }
      }
      if ((a2 & 1) == 0)
      {
        if (qword_100978130 != -1)
          dispatch_once(&qword_100978130, &stru_100930C08);
        if (sub_10002527C((uint64_t)off_100978128) == 1)
        {
          v15 = sub_100027F68();
          v16 = (char *)sub_1004809B4(*(_DWORD *)(a1 + 248));
          sub_100091AE8(&v23, v16);
          sub_1005756F0(v15, 9503, &v23, 1);
        }
      }
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
    }
    sub_100034234((uint64_t)v26);
  }
  return sub_100034234((uint64_t)v27);
}

void sub_100480DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a16 < 0)
    operator delete(__p);
  sub_100034234((uint64_t)&a32);
  sub_100034234((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_100480E84(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  NSObject *v4;
  unsigned int v5;
  const char *v6;
  void **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  NSObject *v11;
  unsigned int v12;
  const char *v13;
  void **v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  unsigned int v18;
  const char *v19;
  void **v20;
  void **v21;
  uint64_t v22;
  char v24;
  void *__p[2];
  char v26;
  _QWORD v27[2];
  _QWORD v28[2];
  void *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  void *__dst;
  uint64_t v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void **v38;

  v32 = 0;
  __dst = 0;
  v34 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v28[0] = 0;
  v28[1] = 0;
  sub_10003415C((uint64_t)v28, a1 + 16);
  if (*(_DWORD *)(a1 + 80) == 1)
  {
    *(_DWORD *)(a1 + 80) = 2;
    sub_100034264((uint64_t)v28);
    v27[0] = 0;
    v27[1] = 0;
    sub_10003415C((uint64_t)v27, a1 + 88);
    sub_10048293C((uint64_t)&v32, (uint64_t)__dst, *(char **)(a1 + 152), *(char **)(a1 + 160), (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 3);
    sub_10048293C((uint64_t)&v32, (uint64_t)__dst, *(char **)(a1 + 176), *(char **)(a1 + 184), (uint64_t)(*(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176)) >> 3);
    if (&v29 != (void **)(a1 + 176))
      sub_1002A7150((char *)&v29, *(char **)(a1 + 176), *(_QWORD *)(a1 + 184), (uint64_t)(*(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176)) >> 3);
    sub_100034264((uint64_t)v27);
    v2 = (uint64_t *)v32;
    v3 = (uint64_t *)__dst;
    if (v32 == __dst)
      goto LABEL_41;
    do
    {
      v4 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(_DWORD *)(a1 + 248);
        sub_10043E5F8(*v2, __p);
        v6 = sub_1004809B4(v5);
        v7 = v26 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446466;
        v36 = (void *)v6;
        v37 = 2082;
        v38 = v7;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "\"%{public}s\" profile waiting for device %{public}s to disconnect", buf, 0x16u);
        if (v26 < 0)
          operator delete(__p[0]);
      }
      ++v2;
    }
    while (v2 != v3);
    v9 = (uint64_t *)v29;
    v8 = v30;
    if (v29 != v30)
    {
      do
      {
        v10 = *v9;
        v11 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          v12 = *(_DWORD *)(a1 + 248);
          sub_10043E5F8(v10, __p);
          v13 = sub_1004809B4(v12);
          v14 = v26 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v36 = (void *)v13;
          v37 = 2082;
          v38 = v14;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "\"%{public}s\" profile is disconnecting device %{public}s", buf, 0x16u);
          if (v26 < 0)
            operator delete(__p[0]);
        }
        if (sub_100481364(a1, v10))
        {
          v15 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          {
            v18 = *(_DWORD *)(a1 + 248);
            sub_10043E5F8(v10, __p);
            v19 = sub_1004809B4(v18);
            v20 = v26 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 136446466;
            v36 = (void *)v19;
            v37 = 2082;
            v38 = v20;
            _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "\"%{public}s\" profile failed to disconnect device %{public}s, forcing disconnection", buf, 0x16u);
            if (v26 < 0)
              operator delete(__p[0]);
          }
          v24 = 0;
          sub_100043758(&v24);
          v16 = sub_10018070C(v10 + 128);
          sub_10004339C(&v24);
          if (v16)
          {
            v17 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
            {
              sub_10043E5F8(v10, __p);
              v21 = v26 >= 0 ? __p : (void **)__p[0];
              *(_DWORD *)buf = 136446466;
              v36 = v21;
              v37 = 1024;
              LODWORD(v38) = v16;
              _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Force disconnect for device %{public}s failed with reason %{bluetooth:OI_STATUS}u", buf, 0x12u);
              if (v26 < 0)
                operator delete(__p[0]);
            }
          }
          sub_10046EA90((char **)&v32, v10);
          sub_100043728(&v24);
        }
        ++v9;
      }
      while (v9 != v8);
    }
    if (v32 == __dst)
    {
LABEL_41:
      sub_1004809D8(a1, 0);
      v22 = 0;
    }
    else
    {
      v22 = 113;
    }
    sub_100034234((uint64_t)v27);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F50D4(a1);
    v22 = 0;
  }
  sub_100034234((uint64_t)v28);
  if (v29)
  {
    v30 = (uint64_t *)v29;
    operator delete(v29);
  }
  if (v32)
  {
    __dst = v32;
    operator delete(v32);
  }
  return v22;
}

void sub_1004812DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100481364(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 88);
  if (!sub_10046EA5C(a1 + 176, a2))
  {
LABEL_5:
    v4 = 306;
    goto LABEL_6;
  }
  if (!sub_10046EA5C(a1 + 200, a2))
  {
    sub_100034264((uint64_t)v6);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2))
      sub_1004819B8(a1, a2);
    goto LABEL_5;
  }
  v4 = 0;
LABEL_6:
  sub_100034234((uint64_t)v6);
  return v4;
}

void sub_10048140C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100481424(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  void **v7;
  const char *v8;
  const char *v9;
  int v10;
  void *__p[2];
  char v12;
  _QWORD v13[2];
  _BYTE buf[22];
  __int16 v15;
  const char *v16;

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 16);
  if (*(_DWORD *)(a1 + 80) == 1)
  {
    sub_100034264((uint64_t)v13);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    sub_10003415C((uint64_t)buf, a1 + 88);
    if (!sub_10046EA5C(a1 + 152, a2))
    {
      if (sub_10046EA5C(a1 + 176, a2))
        operator new();
      sub_100034264((uint64_t)buf);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2);
      sub_1004816DC((_QWORD *)a1, a2);
    }
    v4 = 0;
    sub_100034234((uint64_t)buf);
  }
  else
  {
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(a2, __p);
      if (v12 >= 0)
        v7 = __p;
      else
        v7 = (void **)__p[0];
      v8 = sub_1004809B4(*(_DWORD *)(a1 + 248));
      v9 = "starting";
      v10 = *(_DWORD *)(a1 + 80);
      if (v10 == 2)
        v9 = "stopping";
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v8;
      if (!v10)
        v9 = "stopped";
      v15 = 2082;
      v16 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Can't connect to device %{public}s as \"%{public}s\" profile state is %{public}s, not started", buf, 0x20u);
      if (v12 < 0)
        operator delete(__p[0]);
    }
    v4 = 105;
  }
  sub_100034234((uint64_t)v13);
  return v4;
}

void sub_1004816A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_100034234((uint64_t)va1);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004816DC(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD v18[2];

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, (uint64_t)(a1 + 11));
  v4 = a1[21];
  v5 = (_QWORD *)a1[20];
  if ((unint64_t)v5 >= v4)
  {
    v7 = a1[19];
    v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v9 = v4 - v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)sub_10007ABA0((uint64_t)(a1 + 21), v11);
    else
      v12 = 0;
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    v16 = (char *)a1[19];
    v15 = (char *)a1[20];
    if (v15 != v16)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      v15 = (char *)a1[19];
    }
    a1[19] = v13;
    a1[20] = v6;
    a1[21] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  a1[20] = v6;
  operator new();
}

void sub_100481828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10048183C(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;

  v20[1] = 0;
  v21 = a2;
  v20[0] = 0;
  sub_10003415C((uint64_t)v20, a1 + 88);
  sub_10046EA90((char **)(a1 + 152), a2);
  if (a3)
  {
    sub_100015ECC(a1 + 224, (unint64_t *)&v21);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 192);
    v7 = *(uint64_t **)(a1 + 184);
    if ((unint64_t)v7 >= v6)
    {
      v9 = *(_QWORD *)(a1 + 176);
      v10 = ((uint64_t)v7 - v9) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
        abort();
      v11 = v6 - v9;
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)sub_10007ABA0(a1 + 192, v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = a2;
      v8 = v15 + 1;
      v18 = *(char **)(a1 + 176);
      v17 = *(char **)(a1 + 184);
      if (v17 != v18)
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = *(char **)(a1 + 176);
      }
      *(_QWORD *)(a1 + 176) = v15;
      *(_QWORD *)(a1 + 184) = v8;
      *(_QWORD *)(a1 + 192) = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v7 = a2;
      v8 = v7 + 1;
    }
    *(_QWORD *)(a1 + 184) = v8;
  }
  operator new();
}

void sub_1004819A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004819B8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  void **v19;
  void *__p[2];
  char v21;
  _QWORD v22[2];
  uint8_t buf[4];
  void **v24;

  v22[0] = 0;
  v22[1] = 0;
  sub_10003415C((uint64_t)v22, a1 + 88);
  v4 = *(_QWORD *)(a1 + 216);
  v5 = *(uint64_t **)(a1 + 208);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *(_QWORD *)(a1 + 200);
    v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v9 = v4 - v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)sub_10007ABA0(a1 + 216, v11);
    else
      v12 = 0;
    v13 = (uint64_t *)&v12[8 * v8];
    v14 = &v12[8 * v11];
    *v13 = a2;
    v6 = v13 + 1;
    v16 = *(char **)(a1 + 200);
    v15 = *(char **)(a1 + 208);
    if (v15 != v16)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *--v13 = v17;
      }
      while (v15 != v16);
      v15 = *(char **)(a1 + 200);
    }
    *(_QWORD *)(a1 + 200) = v13;
    *(_QWORD *)(a1 + 208) = v6;
    *(_QWORD *)(a1 + 216) = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  *(_QWORD *)(a1 + 208) = v6;
  if (*(_DWORD *)(a1 + 248) == 24)
  {
    v18 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      if (v21 >= 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v24 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "AACPClient reportDisconnectionAttempt for %{public}s", buf, 0xCu);
      if (v21 < 0)
        operator delete(__p[0]);
    }
  }
  operator new();
}

void sub_100481BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100481BE4(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  char v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, (uint64_t)(a1 + 11));
  v2 = (uint64_t *)a1[22];
  v3 = (uint64_t *)a1[23];
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *v2;
      if (!sub_10046EA5C((uint64_t)(a1 + 25), *v2))
      {
        if (!(*(unsigned int (**)(_QWORD *, uint64_t))(*a1 + 80))(a1, v5))
          sub_1004819B8((uint64_t)a1, v5);
        v4 = 1;
      }
      ++v2;
    }
    while (v2 != v3);
  }
  sub_100034234((uint64_t)v7);
  return v4 & 1;
}

void sub_100481C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_100481CB4(uint64_t a1)
{
  _BOOL8 v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 88);
  v2 = *(_QWORD *)(a1 + 176) != *(_QWORD *)(a1 + 184);
  sub_100034234((uint64_t)v4);
  return v2;
}

BOOL sub_100481D00(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 88);
  v4 = sub_10046EA5C(a1 + 176, a2);
  sub_100034234((uint64_t)v6);
  return v4;
}

void sub_100481D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100481D68(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 88);
  v2 = *(uint64_t **)(a1 + 176);
  v3 = *(uint64_t **)(a1 + 184);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *v2;
      if (!v5 || v5 > (int)sub_1004537F8(*v2))
      {
        v5 = sub_1004537F8(v6);
        v4 = v6;
      }
      ++v2;
    }
    while (v2 != v3);
  }
  sub_100034234((uint64_t)v8);
  return v4;
}

void sub_100481E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100481E1C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 88);
  sub_10001FE6C(a2, a1 + 176);
  return sub_100034234((uint64_t)v5);
}

void sub_100481E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100481E7C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 88);
  v2 = (uint64_t)(*(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176)) >> 3;
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_100481EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v8;
  unsigned int v9;
  int v10;
  _QWORD v11[2];
  _QWORD v12[2];
  _BYTE v13[24];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 16);
  if (!a2 || *(_DWORD *)(a1 + 80) != 1)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F513C();
    goto LABEL_10;
  }
  sub_100034264((uint64_t)v12);
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_100930C08);
  if (sub_10002527C((uint64_t)off_100978128) != 1)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F5248(a1);
LABEL_10:
    v6 = 0;
    goto LABEL_11;
  }
  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 88);
  v5 = *(_QWORD *)(a1 + 176);
  v4 = *(_QWORD *)(a1 + 184);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) <= (unint64_t)((v4 - v5) >> 3))
  {
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      v9 = *(_DWORD *)(a1 + 248);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      sub_1006F51D8(v9, (uint64_t)v13, v10, v8);
    }
    v6 = 0;
  }
  else
  {
    v6 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), a2, *(unsigned int *)(a1 + 248));
  }
  sub_100034234((uint64_t)v11);
LABEL_11:
  sub_100034234((uint64_t)v12);
  return v6;
}

void sub_10048209C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100034234((uint64_t)&a9);
  sub_100034234((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1004820D0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1004820E0(uint64_t a1, unint64_t a2, __int16 a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  unint64_t v18;
  unint64_t *v19;

  v17[1] = 0;
  v18 = a2;
  v17[0] = 0;
  sub_10003415C((uint64_t)v17, a1 + 88);
  v8 = *(_QWORD **)(a1 + 232);
  v7 = (_QWORD *)(a1 + 232);
  v6 = v8;
  if (v8)
  {
    v9 = v7;
    do
    {
      v10 = v6[4];
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = v6;
      else
        v12 = v6 + 1;
      if (v11)
        v9 = v6;
      v6 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v9 != v7 && v9[4] <= a2)
    {
      v13 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
        sub_1006F52B0(v13, v14, v15);
    }
  }
  v19 = &v18;
  *((_WORD *)sub_100482BA8((uint64_t **)v7 - 1, &v18, (uint64_t)&unk_100740F58, &v19) + 20) = a3;
  return sub_100034234((uint64_t)v17);
}

void sub_1004821C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004821D4(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, (uint64_t)(a1 + 11));
  if (a2)
  {
    v4 = (_QWORD *)a1[29];
    if (!v4)
      goto LABEL_20;
    v5 = a1 + 29;
    do
    {
      v6 = v4[4];
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = v4;
      else
        v8 = v4 + 1;
      if (v7)
        v5 = v4;
      v4 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 == a1 + 29 || v5[4] > a2)
      goto LABEL_20;
  }
  else
  {
    if ((*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1) >= 2)
    {
      v9 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
        sub_1006F5324(v9, v10, v11);
    }
    v5 = (_QWORD *)a1[28];
  }
  if (v5 == a1 + 29)
  {
LABEL_20:
    v12 = 0;
    goto LABEL_21;
  }
  v12 = *((unsigned __int16 *)v5 + 20);
LABEL_21:
  sub_100034234((uint64_t)v14);
  return v12;
}

void sub_1004822BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004822D0(_QWORD *a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, (uint64_t)(a1 + 11));
  if (a2)
  {
    v4 = (_QWORD *)a1[28];
    if (v4 != a1 + 29)
    {
      while (*((unsigned __int16 *)v4 + 20) != a2)
      {
        v5 = (_QWORD *)v4[1];
        if (v5)
        {
          do
          {
            v6 = v5;
            v5 = (_QWORD *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v6 = (_QWORD *)v4[2];
            v7 = *v6 == (_QWORD)v4;
            v4 = v6;
          }
          while (!v7);
        }
        v4 = v6;
        if (v6 == a1 + 29)
          goto LABEL_16;
      }
      goto LABEL_15;
    }
LABEL_16:
    v11 = 0;
    goto LABEL_17;
  }
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1) >= 2)
  {
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006F5324(v8, v9, v10);
  }
  v4 = (_QWORD *)a1[28];
  if (v4 == a1 + 29)
    goto LABEL_16;
LABEL_15:
  v11 = v4[4];
LABEL_17:
  sub_100034234((uint64_t)v13);
  return v11;
}

void sub_1004823CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004823E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  _QWORD v7[2];

  v3 = a3;
  (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 160))(*(_QWORD *)(a1 + 8), a2, *(unsigned int *)(a1 + 248), a3);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 16);
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    sub_100034264((uint64_t)v7);
    if (v3)
      sub_1004809D8(a1, 1);
    else
      sub_100481364(a1, a2);
  }
  return sub_100034234((uint64_t)v7);
}

void sub_100482478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10048248C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 248);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930C28);
  v10 = sub_1004A35C0((uint64_t)off_100977A50, a4, 10000);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 168))(v8, a2, v9, a3, v10);
  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 16);
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    sub_100034264((uint64_t)v12);
    sub_1004809D8(a1, 1);
  }
  return sub_100034234((uint64_t)v12);
}

void sub_100482568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10048257C(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  void **v7;
  _BOOL4 v8;
  _BOOL4 v9;
  NSObject *v10;
  void *__p[2];
  char v13;
  _QWORD v14[2];
  uint64_t v15;
  uint8_t buf[4];
  void **v17;

  v14[1] = 0;
  v15 = a2;
  v14[0] = 0;
  sub_10003415C((uint64_t)v14, a1 + 88);
  if (*(_DWORD *)(a1 + 248) == 24
    && (v6 = qword_1009997E8, os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    && ((sub_10043E5F8(a2, __p), v13 >= 0) ? (v7 = __p) : (v7 = (void **)__p[0]),
        *(_DWORD *)buf = 136446210,
        v17 = v7,
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "AACPClient reportDisconnectionResult for %{public}s", buf, 0xCu), v13 < 0))
  {
    operator delete(__p[0]);
    if (a3)
      return sub_100034234((uint64_t)v14);
  }
  else if (a3)
  {
    return sub_100034234((uint64_t)v14);
  }
  v8 = sub_10046EA90((char **)(a1 + 152), a2);
  v9 = sub_10046EA90((char **)(a1 + 176), a2);
  if (v8 && v9)
  {
    v10 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006F5398((unsigned int *)(a1 + 248), v10);
  }
  sub_10046EA90((char **)(a1 + 200), a2);
  sub_100015ECC(a1 + 224, (unint64_t *)&v15);
  if (v8)
    operator new();
  if (v9)
    operator new();
  return sub_100034234((uint64_t)v14);
}

void sub_1004827AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004827CC()
{
  operator new();
}

uint64_t sub_100482850(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 144))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 32), *(unsigned __int8 *)(a1 + 36));
}

uint64_t sub_10048286C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 152))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 32), *(unsigned __int8 *)(a1 + 36));
}

uint64_t sub_100482888(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 176))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 36), *(unsigned int *)(a1 + 40));
}

void sub_1004828A8()
{
  operator delete();
}

void sub_1004828C0()
{
  operator delete();
}

void sub_1004828D8()
{
  operator delete();
}

void sub_1004828F0()
{
  operator delete();
}

uint64_t sub_100482904(uint64_t a1)
{
  return sub_1004823E0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 32));
}

void sub_100482918()
{
  operator delete();
}

uint64_t sub_10048292C(uint64_t a1)
{
  return sub_10048248C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 36));
}

char *sub_10048293C(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      abort();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)sub_10007ABA0(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = sub_10007AADC((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_100482B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100482B44(id a1)
{
  operator new();
}

void sub_100482B84()
{
  operator delete();
}

uint64_t **sub_100482BA8(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_WORD *)v11 + 20) = 0;
    sub_100004078(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_100482C68(id a1)
{
  operator new();
}

void sub_100482CA8()
{
  operator delete();
}

const char *sub_100482CCC(uint64_t a1)
{
  return sub_1004809B4(*(_DWORD *)(a1 + 248));
}

uint64_t sub_100482CD8(uint64_t result)
{
  *(_QWORD *)result = off_100930D28;
  *(_BYTE *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = result + 56;
  return result;
}

void sub_100482D04(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  int v5;
  int v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  unsigned int v12;
  uint8_t buf[8];
  char v14;

  v2 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v3 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v2;

  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930E40);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1);
  v12 = 0;
  v4 = sub_100027F68();
  sub_100091AE8(buf, "ATT");
  sub_100091AE8(__p, "ResponseTimeout");
  v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned int *))(*(_QWORD *)v4 + 88))(v4, buf, __p, &v12);
  if (v12)
    v6 = v5;
  else
    v6 = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
  {
    operator delete(*(void **)buf);
    if (!v6)
      return;
  }
  else if (!v6)
  {
    return;
  }
  v7 = qword_100999820;
  v8 = os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT);
  v9 = v12;
  if (v8)
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Overriding the ATT Response timeout to %d", buf, 8u);
    v9 = v12;
  }
  sub_100228738(v9);
}

void sub_100482E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_100482EC8(unsigned __int8 *a1, __int16 a2, uint64_t a3, int a4, int a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[7];
  int v15;
  int v16;
  __int16 v17;

  if (a4 == 1)
  {
    v10 = ((unint64_t)a1[48] << 40) | ((unint64_t)a1[49] << 32) | ((unint64_t)a1[50] << 24) | ((unint64_t)a1[51] << 16) | ((unint64_t)a1[52] << 8) | a1[53];
  }
  else
  {
    if (a1[55])
    {
      v11 = ((unint64_t)a1[57] << 40) | ((unint64_t)a1[58] << 32) | ((unint64_t)a1[59] << 24) | ((unint64_t)a1[60] << 16) | ((unint64_t)a1[61] << 8) | a1[62];
      v12 = a1[56];
    }
    else
    {
      v11 = ((unint64_t)a1[49] << 40) | ((unint64_t)a1[50] << 32) | ((unint64_t)a1[51] << 24) | ((unint64_t)a1[52] << 16) | ((unint64_t)a1[53] << 8) | a1[54];
      v12 = a1[48];
    }
    v10 = v11 | (v12 << 48);
  }
  v13 = sub_1000419F4();
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100484A00;
  v14[3] = &unk_100930E20;
  v14[4] = a1;
  v14[5] = v10;
  v17 = a2;
  v14[6] = a3;
  v15 = a4;
  v16 = a5;
  sub_100041A34(v13, v14);
}

void sub_100483008(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD v5[5];
  int v6;

  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100484A94;
  v5[3] = &unk_1009173C0;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

void sub_100483070(__int16 *a1, char a2, __int16 a3, int a4)
{
  __int16 v8;
  uint64_t v9;
  _QWORD v10[5];
  int v11;
  __int16 v12;
  __int16 v13;
  char v14;

  v8 = *a1;
  v9 = sub_1000419F4();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100484AE8;
  v10[3] = &unk_10091FF68;
  v10[4] = a1;
  v14 = a2;
  v12 = a3;
  v13 = v8;
  v11 = a4;
  sub_100041A34(v9, v10);
}

double sub_100483100(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)&result = sub_1002286D4((__n128 *)off_100930D58).n128_u64[0];
  return result;
}

void sub_100483114(uint64_t a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930E40);
  sub_100069060((uint64_t)off_100977A50 + 64, a1);
}

void sub_100483168(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  NSObject *v5;
  uint8_t v6[16];
  uint8_t buf[16];

  v2 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Gatt::stackWillStop enter", buf, 2u);
  }
  v4 = *(_QWORD **)(a1 + 56);
  v3 = (_QWORD *)(a1 + 56);
  *((_BYTE *)v3 - 48) = 0;
  sub_10001A82C((uint64_t)(v3 - 1), v4);
  *(v3 - 1) = v3;
  *v3 = 0;
  v3[1] = 0;
  sub_100228724();
  v5 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Gatt::stackWillStop exit", v6, 2u);
  }
}

id sub_100483230(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 72), "removeAllObjects");
}

void sub_100483238(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, int a6, int a7)
{
  id v14;
  void *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  int v29;
  NSObject *v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  dispatch_block_t v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  _QWORD block[4];
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  __int16 v46;
  uint8_t buf[4];
  _BYTE v48[24];
  __int16 v49;
  int v50;
  uuid_t uu;

  if (*(_BYTE *)(a1 + 8))
  {
    memset(uu, 0, sizeof(uu));
    uuid_clear(uu);
    if (a6 == 1)
      v14 = sub_100649588(a3);
    else
      v14 = sub_100021770(a3);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    if (a7)
    {
      v16 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)v48 = v15;
        *(_WORD *)&v48[8] = 1024;
        *(_DWORD *)&v48[10] = a7;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Gatt device %{public}@ connected with error %{bluetooth:OI_STATUS}u", buf, 0x12u);
        v16 = qword_100999820;
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
        sub_1006F5410(a7, v16);
LABEL_37:

      return;
    }
    v17 = qword_100999820;
    if (!a5 && os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v48 = "pAttDBSession";
      _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
      v17 = qword_100999820;
      if (a4)
        goto LABEL_15;
    }
    else if (a4)
    {
      goto LABEL_15;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v48 = "gattHandle != LE_GATT_INVALID_SESSION_HANDLE";
      _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
      v17 = qword_100999820;
    }
LABEL_15:
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)v48 = a6;
      *(_WORD *)&v48[4] = 2048;
      *(_QWORD *)&v48[6] = a2;
      *(_WORD *)&v48[14] = 2114;
      *(_QWORD *)&v48[16] = v15;
      v49 = 1024;
      v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Gatt device connected on transport %d on handle %p address:%{public}@ with status %{bluetooth:OI_STATUS}u", buf, 0x22u);
    }
    if (a6 == 2)
    {
      if (qword_1009778A8 != -1)
        dispatch_once(&qword_1009778A8, &stru_100930E60);
      if (!sub_10061E090((uint64_t)off_1009778A0, a2, uu) || uuid_is_null(uu))
      {
        v18 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
        {
          v19 = sub_100021770(a3);
          v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)v48 = v20;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Warning: Device %{public}@ wasn't being tracked by le device manager, ignoring connection indication", buf, 0xCu);

        }
        goto LABEL_37;
      }
    }
    else if (a6 == 1)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100930E80);
      sub_10003F924((uint64_t)off_1009778C0, a3, 1u, 0, 0, 0, buf);
      uuid_copy(uu, buf);
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100930E80);
      v21 = off_1009778C0;
      v22 = sub_100030DF4(uu);
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      sub_10065B5BC((uint64_t)v21, v23, 1, a3);

      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100930E80);
      v24 = off_1009778C0;
      v25 = sub_100030DF4(uu);
      v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
      sub_10065C750((uint64_t)v24, v26, 1, 1, 0);

    }
    v27 = sub_100030DF4(uu);
    v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
    v29 = sub_100483844(a1, v28, a6);

    if (v29)
    {
      v30 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
      {
        v31 = sub_100030DF4(uu);
        v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)v48 = v32;
        *(_WORD *)&v48[8] = 2114;
        *(_QWORD *)&v48[10] = v15;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Waiting on disconnection of BR/EDR GATT L2CAP for device %{public}@ %{public}@", buf, 0x16u);

      }
      v33 = sub_100030DF4(uu);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100483B44;
      block[3] = &unk_100930D78;
      v42 = a1;
      v34 = (id)objc_claimAutoreleasedReturnValue(v33);
      v41 = v34;
      v43 = a2;
      v44 = a5;
      v45 = a6;
      v46 = a4;
      v35 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, block);
      v36 = *(void **)(a1 + 72);
      v37 = objc_retainBlock(v35);
      objc_msgSend(v36, "setObject:forKey:", v37, v34);

    }
    else
    {
      v38 = sub_100030DF4(uu);
      v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
      sub_100483B5C(a1, v39, a2, a6, a4, a5);

    }
    goto LABEL_37;
  }
}

void sub_1004837CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100483844(uint64_t a1, void *a2, int a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  _BYTE *v12;
  uint64_t v13;
  NSObject *v14;
  _BOOL4 v15;
  _BYTE __p[12];
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  _BYTE *v23;
  __int16 v24;
  id v25;
  unsigned __int8 uu2[16];

  v5 = a2;
  if (!sub_10000671C(a1, v5))
    goto LABEL_27;
  v6 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__p = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "GATT is connected on 2 transports! Serializing disconnection of prev in favor of current.", __p, 2u);
  }
  sub_100030BCC(uu2, v5);
  if (!*(_BYTE *)(a1 + 8))
    goto LABEL_27;
  v7 = sub_10000C5B8(a1 + 48, uu2);
  if (a1 + 56 == v7)
    goto LABEL_27;
  v8 = *(_DWORD *)(v7 + 56);
  if (a3 != 2 || v8 != 1)
  {
    v14 = qword_100999820;
    v15 = os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT);
    if (a3 == 1 && v8 == 2)
    {
      if (v15)
        sub_1006F5480((uint64_t)v5, v14);
    }
    else if (v15)
    {
      *(_DWORD *)__p = 138543874;
      *(_QWORD *)&__p[4] = v5;
      v18 = 1024;
      v19 = v8;
      v20 = 1024;
      v21 = a3;
      _os_log_fault_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Gatt device %{public}@ connected twice with previousTransport %d and currentTransport %d", __p, 0x18u);
    }
LABEL_27:
    v13 = 0;
    goto LABEL_28;
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100930E80);
  v9 = sub_1000589DC((uint64_t)off_1009778C0, v5, 0);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100930EA0);
  v10 = sub_10006D488((uint64_t)off_1009778E0, v9, 0);
  v11 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v10, __p);
    v12 = v21 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136446466;
    v23 = v12;
    v24 = 2114;
    v25 = v5;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Disconnecting classic device %{public}s because LE GATT connected for device %{public}@", buf, 0x16u);
    if (SHIBYTE(v21) < 0)
      operator delete(*(void **)__p);
  }
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_100930EC0);
  sub_100499FC8((uint64_t)off_100977A70, v10, 0x100000);
  v13 = 1;
LABEL_28:

  return v13;
}

void sub_100483B1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100483B44(uint64_t a1)
{
  sub_100483B5C(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32), *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 64), *(unsigned __int16 *)(a1 + 68), *(_QWORD *)(a1 + 56));
}

void sub_100483B5C(uint64_t a1, void *a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  id v11;
  int v12;
  uint64_t *v13;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  __int16 v20;
  char v21;
  uint8_t *v22;
  uint8_t buf[4];
  id v24;
  __int16 v25;
  _BYTE v26[18];

  v11 = a2;
  v21 = 0;
  sub_100043758(&v21);
  v12 = sub_100226350(a3);
  sub_10004339C(&v21);
  if (v12 == a5 && v12)
  {
    sub_100030BCC(buf, v11);
    v22 = buf;
    v13 = sub_100484F0C((uint64_t **)(a1 + 48), buf, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v22);
    v13[6] = a3;
    *((_DWORD *)v13 + 14) = a4;
    *((_DWORD *)v13 + 15) = 0;
    v14 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      v15 = "CLASSIC";
      *(_DWORD *)buf = 138543874;
      v24 = v11;
      if (a4 == 2)
        v15 = "LE";
      v25 = 2080;
      *(_QWORD *)v26 = v15;
      *(_WORD *)&v26[8] = 2048;
      *(_QWORD *)&v26[10] = a3;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Notify gattDeviceConnected %{public}@ transport=%s handle=%p", buf, 0x20u);
    }
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1004844D4;
    v17[3] = &unk_100930E00;
    v20 = a5;
    v18 = v11;
    v19 = a6;
    sub_100484BE0((os_unfair_lock_s *)(a1 + 16), v17);

  }
  else
  {
    v16 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543874;
      v24 = v11;
      v25 = 1024;
      *(_DWORD *)v26 = a5;
      *(_WORD *)&v26[4] = 2048;
      *(_QWORD *)&v26[6] = a6;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Gatt device %{public}@ with gattHandle %d ATT_DB_Session %p is no longer connected, not notifying of connection", buf, 0x1Cu);
    }
  }
  sub_100043728(&v21);

}

void sub_100483D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17)
{
  void *v17;

  sub_100043728(&a17);
  _Unwind_Resume(a1);
}

void sub_100483DC4(uint64_t a1, void *a2, int a3)
{
  NSObject *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  BOOL v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  NSObject *v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  int v28;
  void *v29;
  __int16 v30;
  id v31;
  _QWORD v32[6];
  unsigned __int8 v33[16];
  uuid_t dst;

  if (*(_BYTE *)(a1 + 8))
  {
    v6 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      v28 = 134218240;
      v29 = a2;
      v30 = 1024;
      LODWORD(v31) = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Gatt device disconnected on handle %p with status %{bluetooth:OI_STATUS}u", (uint8_t *)&v28, 0x12u);
    }
    v7 = *(unsigned __int8 **)(a1 + 48);
    if (v7 == (unsigned __int8 *)(a1 + 56))
    {
LABEL_12:
      v11 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
        sub_1006F54F4(v11);
    }
    else
    {
      while (*((void **)v7 + 6) != a2)
      {
        v8 = (unsigned __int8 *)*((_QWORD *)v7 + 1);
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = *(unsigned __int8 **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (unsigned __int8 *)*((_QWORD *)v7 + 2);
            v10 = *(_QWORD *)v9 == (_QWORD)v7;
            v7 = v9;
          }
          while (!v10);
        }
        v7 = v9;
        if (v9 == (unsigned __int8 *)(a1 + 56))
          goto LABEL_12;
      }
      v12 = *((_QWORD *)v7 + 7);
      memset(dst, 0, sizeof(dst));
      uuid_copy(dst, v7 + 32);
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100930E80);
      v13 = off_1009778C0;
      v14 = sub_100030DF4(dst);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      sub_10065B7FC((uint64_t)v13, v15, 0);

      sub_1000040CC((uint64_t **)(a1 + 48), (uint64_t *)v7);
      operator delete(v7);
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3321888768;
      v32[2] = sub_1004840F0;
      v32[3] = &unk_100930D98;
      uuid_copy(v33, dst);
      v32[4] = a2;
      v32[5] = v12;
      sub_100484BE0((os_unfair_lock_s *)(a1 + 16), v32);
      v16 = *(void **)(a1 + 72);
      v17 = sub_100030DF4(dst);
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKey:", v18));

      if (v19)
      {
        v20 = *(void **)(a1 + 72);
        v21 = sub_100030DF4(dst);
        v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
        objc_msgSend(v20, "removeObjectForKey:", v22);

        v23 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
        {
          v24 = sub_100030DF4(dst);
          v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
          v26 = objc_msgSend(*(id *)(a1 + 72), "count");
          v28 = 138543618;
          v29 = v25;
          v30 = 2048;
          v31 = v26;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Found pending connection to be processed for device %{public}@. transitioningGattDevices size: %lu", (uint8_t *)&v28, 0x16u);

        }
        v27 = sub_1000419F4();
        sub_100041A34(v27, v19);
      }

    }
  }
}

void sub_1004840AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1004840F0(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = sub_100030DF4((const unsigned __int8 *)(a1 + 48));
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);

}

void sub_100484144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100484158(uint64_t a1, uint64_t a2)
{
  uuid_copy((unsigned __int8 *)(a1 + 48), (const unsigned __int8 *)(a2 + 48));
}

void sub_100484168(uint64_t a1, uint64_t a2, unsigned __int8 a3, int a4, __int16 a5, int a6)
{
  NSObject *v12;
  const unsigned __int8 *v13;
  unsigned __int8 *v14;
  const unsigned __int8 **v15;
  BOOL v16;
  NSObject *v17;
  void *v18;
  id v19;
  void *v20;
  _QWORD v21[4];
  __int16 v22;
  unsigned __int8 v23[22];
  uint8_t buf[4];
  int v25;
  __int16 v26;
  int v27;
  uuid_t uu;

  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  if (*(_BYTE *)(a1 + 8))
  {
    v12 = qword_100999820;
    if (a6)
    {
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        v25 = a6;
        _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Gatt callback connected with error %{bluetooth:OI_STATUS}u", buf, 8u);
        v12 = qword_100999820;
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        sub_1006F556C(a6, v12);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        v25 = a4;
        v26 = 1024;
        v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Gatt device ready with mtu %d and status %{bluetooth:OI_STATUS}u", buf, 0xEu);
      }
      v13 = *(const unsigned __int8 **)(a1 + 48);
      if (v13 == (const unsigned __int8 *)(a1 + 56))
      {
LABEL_17:
        v17 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
          sub_1006F5530(v17);
      }
      else
      {
        while (*((_QWORD *)v13 + 6) != a2)
        {
          v14 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
          if (v14)
          {
            do
            {
              v15 = (const unsigned __int8 **)v14;
              v14 = *(unsigned __int8 **)v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              v15 = (const unsigned __int8 **)*((_QWORD *)v13 + 2);
              v16 = *v15 == v13;
              v13 = (const unsigned __int8 *)v15;
            }
            while (!v16);
          }
          v13 = (const unsigned __int8 *)v15;
          if (v15 == (const unsigned __int8 **)(a1 + 56))
            goto LABEL_17;
        }
        uuid_copy(uu, v13 + 32);
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_100930E80);
        v18 = off_1009778C0;
        v19 = sub_100030DF4(uu);
        v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
        sub_1006599CC((uint64_t)v18, v20, a5);

        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3321888768;
        v21[2] = sub_1004843FC;
        v21[3] = &unk_100930DC8;
        uuid_copy(v23, uu);
        v23[16] = a3;
        v22 = a4;
        sub_100484BE0((os_unfair_lock_s *)(a1 + 16), v21);
      }
    }
  }
}

void sub_1004843E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1004843FC(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = sub_100030DF4((const unsigned __int8 *)(a1 + 34));
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);

}

void sub_100484454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100484468(uint64_t a1, uint64_t a2)
{
  uuid_copy((unsigned __int8 *)(a1 + 34), (const unsigned __int8 *)(a2 + 34));
}

uint64_t sub_100484478(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if (!*(_BYTE *)(a1 + 8))
    return 408;
  v5 = sub_10000C5B8(a1 + 48, a2);
  if (a1 + 56 == v5)
    return 1;
  v6 = v5;
  result = 0;
  *a3 = *(_DWORD *)(v6 + 56);
  return result;
}

uint64_t sub_1004844D4(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

BOOL sub_1004844F0(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 uu2[8];
  uint64_t v6;

  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100930E80);
  *(_QWORD *)uu2 = 0;
  v6 = 0;
  sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133], 0, 1u, 0, 0, uu2);
  return a1 + 56 != sub_10000C5B8(a1 + 48, uu2);
}

uint64_t sub_1004845D8(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a2;
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100930EE0);
  if (sub_100030864(qword_1009778B0, v2))
  {
    v3 = 1;
  }
  else
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100930E80);
    v4 = sub_1000589DC((uint64_t)off_1009778C0, v2, 0);
    if ((v4 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_100930EA0);
      v3 = sub_10006D488((uint64_t)off_1009778E0, v4, 0);
      if (v3)
      {
        if (qword_100978150 != -1)
          dispatch_once(&qword_100978150, &stru_100930F00);
        v3 = sub_1005B86F4((uint64_t)off_100978148, (unsigned __int8 *)v3);
      }
    }
    else
    {
      v3 = 0;
    }
  }

  return v3;
}

void sub_100484714(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_10048472C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64) != 0;
}

id sub_10048473C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 72), "allKeys");
}

void sub_100484744(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unsigned int a4)
{
  NSObject *v8;
  char *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  void **v17;
  uint64_t v18;
  void *__p[2];
  char v20;
  uuid_t dst;
  uuid_string_t out;

  v8 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (_DWORD)a3 ? "Enabling" : "Disabling";
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a2, out);
    sub_100091AE8(__p, out);
    v10 = v20 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)out = 136446722;
    *(_QWORD *)&out[4] = v9;
    *(_WORD *)&out[12] = 1024;
    *(_DWORD *)&out[14] = a4;
    *(_WORD *)&out[18] = 2082;
    *(_QWORD *)&out[20] = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}s high priority stream for %d ms for device UUID %{public}s", (uint8_t *)out, 0x1Cu);
    if (v20 < 0)
      operator delete(__p[0]);
  }
  uuid_copy(dst, a2);
  if (!*(_BYTE *)(a1 + 8) || (v11 = sub_10000C5B8(a1 + 48, dst), a1 + 56 == v11))
  {
    v16 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    {
      memset(out, 0, sizeof(out));
      uuid_unparse_upper(a2, out);
      sub_100091AE8(__p, out);
      v17 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)out = 136446210;
      *(_QWORD *)&out[4] = v17;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Unable to find acl connection handle for %{public}s", (uint8_t *)out, 0xCu);
      if (v20 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    v12 = *(_QWORD *)(v11 + 48);
    if ((_DWORD)a3)
    {
      if (qword_100977B40 != -1)
        dispatch_once(&qword_100977B40, &stru_100930F20);
      ++*((_QWORD *)off_100977B38 + 26);
    }
    if (*(_DWORD *)(sub_1000438A4() + 712) < 0x7D0u || *(_DWORD *)(sub_1000438A4() + 712) > 0xF9Fu)
    {
      v18 = sub_1000438A4();
      (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v18 + 80))(v18, *(unsigned int *)(v12 + 48) | ((unint64_t)*(unsigned __int16 *)(v12 + 52) << 32), 17, 4, a3, 1, 1, 0);
    }
    else
    {
      v13 = sub_1000438A4();
      if ((_DWORD)a3)
        v14 = 4;
      else
        v14 = 0;
      if ((_DWORD)a3)
        v15 = a4;
      else
        v15 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 1672))(v13, v12, v14, v15);
    }
  }
}

void sub_100484A00(uint64_t a1)
{
  if (qword_10097AC28 != -1)
    dispatch_once(&qword_10097AC28, &stru_100930F40);
  sub_100483238(qword_10097AC20, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 64), *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60));
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_100930F20);
  *((_QWORD *)off_100977B38 + 26) = 0;
}

void sub_100484A94(uint64_t a1)
{
  if (qword_10097AC28 != -1)
    dispatch_once(&qword_10097AC28, &stru_100930F40);
  sub_100483DC4(qword_10097AC20, *(void **)(a1 + 32), *(_DWORD *)(a1 + 40));
}

void sub_100484AE8(uint64_t a1)
{
  if (qword_10097AC28 != -1)
    dispatch_once(&qword_10097AC28, &stru_100930F40);
  sub_100484168(qword_10097AC20, *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 48), *(unsigned __int16 *)(a1 + 44), *(_WORD *)(a1 + 46), *(_DWORD *)(a1 + 40));
}

void sub_100484B48(uint64_t a1, uint64_t a2)
{
  sub_100484B50(a1 + 16, a2);
}

void sub_100484B50(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_100485280(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_100484BD8(uint64_t a1, uint64_t a2)
{
  sub_100069060(a1 + 16, a2);
}

void sub_100484BE0(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_100484C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_100484CA4(uint64_t a1)
{
  sub_100484CC8(a1);
  operator delete();
}

uint64_t sub_100484CC8(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_100930D28;

  sub_10001A82C(a1 + 48, *(_QWORD **)(a1 + 56));
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100484D18(id a1)
{
  operator new();
}

void sub_100484D58()
{
  operator delete();
}

void sub_100484D7C(id a1)
{
  operator new();
}

void sub_100484DBC()
{
  operator delete();
}

void sub_100484DE0(id a1)
{
  operator new();
}

void sub_100484E20()
{
  operator delete();
}

void sub_100484E44(id a1)
{
  operator new();
}

void sub_100484E84()
{
  operator delete();
}

void sub_100484EA8(id a1)
{
  operator new();
}

void sub_100484EE8()
{
  operator delete();
}

uint64_t *sub_100484F0C(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t **v6;
  uint64_t *result;
  unsigned __int8 *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_10000DC28((uint64_t)a1, &v9, uu1);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100484FAC((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_100484FAC(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (unsigned __int8 *)operator new(0x40uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 7) = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_10048500C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_100485024(id a1)
{
  operator new();
}

void sub_100485064()
{
  operator delete();
}

void sub_100485088(id a1)
{
  operator new();
}

void sub_1004850C8()
{
  operator delete();
}

void sub_1004850EC(id a1)
{
  operator new();
}

void sub_100485204()
{
  operator delete();
}

void sub_100485228(id a1)
{
  operator new();
}

char *sub_100485280(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_100485484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004854C0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1004854F0(uint64_t a1)
{
  sub_10001A82C(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_100485518(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_1000160D0(a1 + 48);
  *(_QWORD *)(a1 + 112) = a2;
  *(_DWORD *)(a1 + 132) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 140) = -1;
  *(_QWORD *)(a1 + 148) = 0;
  *(_BYTE *)(a1 + 156) = 2;
  return a1;
}

void sub_100485568(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1003FA7A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100485580(_QWORD *a1)
{
  sub_100069BDC(a1 + 6);
  return sub_1003FA7A0(a1);
}

uint64_t sub_1004855A8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  int v3;
  void *__p[2];
  char v6;
  _QWORD v7[2];
  uint8_t buf[8];
  char v9;

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, (uint64_t)&unk_1009994C0);
  qword_100999500 = 0;
  sub_100034264((uint64_t)v7);
  v0 = qword_100992C80;
  if (qword_100992C80)
  {
    free((void *)qword_100992C80);
    qword_100992C80 = 0;
  }
  sub_1004857C0(v0, 0);
  v1 = sub_100027F68();
  sub_100091AE8(buf, "SDPMirroring");
  sub_100091AE8(__p, "DisableSDPMirroring");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, __p, &byte_100992C88);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(*(void **)buf);
  v2 = qword_100999848;
  if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = byte_100992C88;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SDP Mirroring is disabled: %d", buf, 8u);
  }
  buf[0] = 0;
  sub_100043758(buf);
  v3 = sub_100248C3C((uint64_t)&off_100930F60);
  sub_100247708(byte_100992C88);
  sub_10004339C(buf);
  if (v3 && os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
    sub_1006F55DC();
  sub_100043728(buf);
  return sub_100034234((uint64_t)v7);
}

void sub_10048575C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1004857C0(uint64_t a1, char a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[2];
  _OWORD v11[2];
  __int128 v12;
  uint8_t buf[4];
  uint64_t v14;

  v12 = 0u;
  memset(v11, 0, sizeof(v11));
  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, (uint64_t)&unk_1009994C0);
  v3 = *((_QWORD *)&xmmword_100999528 + 1);
  if (*((_QWORD *)&xmmword_100999528 + 1))
  {
    v4 = qword_100999848;
    if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Clearing the client queue (had %lu queries)", buf, 0xCu);
    }
    sub_10048A6B0(v11, &qword_100999508);
    while (*((_QWORD *)&xmmword_100999528 + 1))
    {
      *(_QWORD *)&xmmword_100999528 = xmmword_100999528 + 1;
      --*((_QWORD *)&xmmword_100999528 + 1);
      sub_1002BB5F8((uint64_t)&qword_100999508, 1);
    }
  }
  if ((a2 & 1) == 0)
  {
    v5 = qword_100999500;
    if (qword_100999500)
    {
      v6 = qword_100999848;
      if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "We don't want to keep the current query alive", buf, 2u);
        v5 = qword_100999500;
      }
      *(_QWORD *)(v5 + 120) = 0;
    }
  }
  sub_100034264((uint64_t)v10);
  if (*((_QWORD *)&v12 + 1))
  {
    v7 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v11[0] + 1) + (((unint64_t)v12 >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * (v12 & 0x1FF));
    v8 = v7[15];
    if (v8)
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v8 + 16))(v8, v7, 308);
    sub_100069BDC(v7 + 6);
    sub_1003FA7A0(v7);
    operator delete();
  }
  sub_100034234((uint64_t)v10);
  return sub_1002A6638(v11);
}

void sub_1004859EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1002A6638((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100485A18()
{
  NSObject *v0;
  NSObject *v1;
  uint8_t v3[16];
  uint8_t buf[8];
  uint64_t v5;

  v0 = qword_100999848;
  if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "SdpClient::stackWillStop enter", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v5 = 0;
  sub_10003415C((uint64_t)buf, (uint64_t)&unk_1009994C0);
  if (qword_100992C80)
    *(_BYTE *)(qword_100992C80 + 212) = 1;
  sub_100034264((uint64_t)buf);
  v1 = qword_100999848;
  if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "SdpClient::stackWillStop exit", v3, 2u);
  }
  return sub_100034234((uint64_t)buf);
}

void sub_100485AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100485B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD v8[2];
  _QWORD v9[2];
  uint8_t buf[24];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, (uint64_t)&unk_100999538);
  if (byte_10097B310)
  {
    sub_100034264((uint64_t)v9);
    *(_QWORD *)(a1 + 120) = a2;
    *(_DWORD *)(a1 + 128) = 1;
    v8[0] = 0;
    v8[1] = 0;
    sub_10003415C((uint64_t)v8, (uint64_t)&unk_1009994C0);
    if (qword_100999500)
    {
      *(_QWORD *)buf = a1;
      sub_10048A2B4(&qword_100999508, buf);
    }
    else
    {
      if (*((_QWORD *)&xmmword_100999528 + 1))
        sub_100253460();
      qword_100999500 = a1;
    }
    v5 = *((_QWORD *)&xmmword_100999528 + 1);
    sub_100034264((uint64_t)v8);
    if (v5)
    {
      v6 = qword_100999848;
      if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Waiting for %zu queries ahead of us", buf, 0xCu);
      }
    }
    else
    {
      sub_100485CE8(a1, 0);
    }
    sub_100034234((uint64_t)v8);
    v4 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
      sub_1006F563C();
    sub_100034264((uint64_t)v9);
    v4 = 17;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1, 17);
  }
  sub_100034234((uint64_t)v9);
  return v4;
}

void sub_100485CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100034234((uint64_t)&a9);
  sub_100034234((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_100485CE8(uint64_t a1, int a2)
{
  _DWORD *v3;
  uint64_t v4;
  NSObject *v6;
  const char *v7;
  _BYTE *v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  const char *v12;
  int v13;
  NSObject *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  _BYTE __p[22];
  char v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  _BYTE *v24;

  v3 = (_DWORD *)qword_100992C80;
  if (qword_100992C80)
  {
    v4 = *(_QWORD *)qword_100992C80;
  }
  else
  {
    v3 = malloc_type_malloc(0xD8uLL, 0x1020040C4BBD58BuLL);
    qword_100992C80 = (uint64_t)v3;
    v4 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)v3 = v4;
    v3[52] = 0;
    *((_BYTE *)v3 + 212) = 0;
  }
  v6 = qword_100999848;
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
    {
      if (v3[52])
        v7 = "Retrying connection to";
      else
        v7 = "Connecting to";
      sub_10043E5F8(v4, __p);
      if (v20 >= 0)
        v8 = __p;
      else
        v8 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136446466;
      v22 = v7;
      v23 = 2082;
      v24 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}s SDP server for device %{public}s", buf, 0x16u);
      if (v20 < 0)
        operator delete(*(void **)__p);
      v6 = qword_100999848;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(int *)(qword_100999500 + 132);
      if (v9 > 0xA)
        v10 = "unknown sdp state";
      else
        v10 = off_100931190[v9];
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = v10;
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = "SDP_CONNECT_STATE";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", __p, 0x16u);
    }
    *(_DWORD *)(qword_100999500 + 132) = 1;
    if (sub_100440D90(*(_QWORD *)qword_100992C80))
    {
      v11 = qword_100999848;
      if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(*(_QWORD *)qword_100992C80, __p);
        v12 = v20 >= 0 ? __p : *(const char **)__p;
        *(_DWORD *)buf = 136446210;
        v22 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Applying SDP workaround for Type S Game Controllers to device %{public}s", buf, 0xCu);
        if (v20 < 0)
          operator delete(*(void **)__p);
      }
      sub_1002443C4();
    }
    if (a2)
    {
      v13 = sub_1002443D4((uint64_t)sub_100486164, (uint64_t)sub_1004861DC, *(_QWORD *)qword_100992C80 + 128);
      if (v13)
        goto LABEL_32;
    }
    else
    {
      __p[0] = 0;
      sub_100043758(__p);
      v13 = sub_1002443D4((uint64_t)sub_100486164, (uint64_t)sub_1004861DC, *(_QWORD *)qword_100992C80 + 128);
      sub_100043728(__p);
      if (v13)
      {
LABEL_32:
        v14 = qword_100999848;
        if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
          sub_1006F570C(v13, v14);
        *(_QWORD *)__p = 0;
        *(_QWORD *)&__p[8] = 0;
        sub_10003415C((uint64_t)__p, (uint64_t)&unk_1009994C0);
        v15 = (_QWORD *)qword_100999500;
        if (!qword_100999500)
        {
          sub_100253460();
          v15 = (_QWORD *)qword_100999500;
        }
        qword_100999500 = 0;
        if (*((_QWORD *)&xmmword_100999528 + 1))
        {
          v16 = *(_QWORD *)(*(_QWORD *)(qword_100999510
                                      + (((unint64_t)xmmword_100999528 >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * (xmmword_100999528 & 0x1FF));
          *(_QWORD *)&xmmword_100999528 = xmmword_100999528 + 1;
          --*((_QWORD *)&xmmword_100999528 + 1);
          sub_1002BB5F8((uint64_t)&qword_100999508, 1);
          qword_100999500 = v16;
        }
        sub_100034264((uint64_t)__p);
        v18 = v15[15];
        if (v18)
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v18 + 16))(v18, v15, 309);
        sub_100069BDC(v15 + 6);
        sub_1003FA7A0(v15);
        operator delete();
      }
    }
    return 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
      sub_1006F566C();
    return 1;
  }
}

void sub_100486114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  sub_100043728(&a9);
  _Unwind_Resume(a1);
}

const char *sub_100486140(unsigned int a1)
{
  if (a1 > 0xA)
    return "unknown sdp state";
  else
    return off_100931190[a1];
}

void sub_100486164(uint64_t a1)
{
  uint64_t v2;

  if ((_DWORD)a1)
  {
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_1009310A0);
    *(_DWORD *)(qword_100999500 + 128) = sub_1004A35C0((uint64_t)off_100977A50, a1, 10000);
    v2 = sub_10006BBEC();
    sub_100041A34(v2, &stru_100930FB0);
  }
  else
  {
    sub_1004861F8();
  }
}

void sub_1004861DC()
{
  uint64_t v0;

  v0 = sub_10006BBEC();
  sub_100041A34(v0, &stru_100930FB0);
}

void sub_1004861F8()
{
  _BOOL4 v0;
  NSObject *v1;
  uint64_t v2;
  const char *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  void *v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  NSObject *v23;
  const char *v24;
  __int16 v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  _BYTE v31[10];
  __int16 v32;
  _BOOL4 v33;
  __int16 v34;
  int v35;

  v27 = xmmword_100741730;
  v0 = sub_1004446B0(*(_QWORD *)qword_100992C80, &v27);
  v1 = qword_100999848;
  if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
  {
    if (qword_100999500)
    {
      v2 = *(int *)(qword_100999500 + 132);
      if (v2 > 0xA)
        v3 = "unknown sdp state";
      else
        v3 = off_100931190[v2];
    }
    else
    {
      v3 = "";
    }
    v4 = *(unsigned __int8 *)(*(_QWORD *)qword_100992C80 + 784);
    v5 = sub_1004420E0(*(_QWORD *)qword_100992C80);
    v6 = *(unsigned __int8 *)(*(_QWORD *)qword_100992C80 + 578);
    *(_DWORD *)buf = 136316162;
    v29 = v3;
    v30 = 1024;
    *(_DWORD *)v31 = v4;
    *(_WORD *)&v31[4] = 1024;
    *(_DWORD *)&v31[6] = v0;
    v32 = 1024;
    v33 = v5;
    v34 = 1024;
    v35 = v6;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Statemachine start: %s, d2d %d, isLocalServiceDiscoveryClassExist %d, AppleBT %d isFullSDPRequired %d", buf, 0x24u);
  }
  v7 = *(_QWORD *)qword_100992C80;
  if (*(_BYTE *)(*(_QWORD *)qword_100992C80 + 784))
  {
    *(_BYTE *)(v7 + 784) = 0;
    v26 = unk_100930F70;
    v8 = sub_100244B90((uint64_t)sub_100486724, 0x30u, (unsigned __int8 *)&v26);
    if (v8)
      goto LABEL_37;
    v9 = qword_100999848;
    if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(int *)(qword_100999500 + 132);
      if (v10 > 0xA)
        v11 = "unknown sdp state";
      else
        v11 = off_100931190[v10];
      *(_DWORD *)buf = 136315394;
      v29 = v11;
      v30 = 2080;
      *(_QWORD *)v31 = "SDP_SEARCH_D2D_STATE";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", buf, 0x16u);
    }
    v20 = qword_100999500;
    v21 = 3;
    goto LABEL_36;
  }
  if (v0
    && sub_100442444(v7, &v27, 0x201u)
    && *(_DWORD *)(qword_100999500 + 132) != 7
    && !*(_BYTE *)(*(_QWORD *)qword_100992C80 + 578))
  {
    v22 = qword_100999848;
    if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Executing Service Database State lookup", buf, 2u);
    }
    v26 = unk_100930F80;
    v8 = sub_100244EFC((uint64_t)sub_1004868D8, 0, (unsigned __int8 *)&v26);
    v23 = qword_100999848;
    if (!v8)
    {
      if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
      {
        v24 = sub_100486140(*(_DWORD *)(qword_100999500 + 132));
        *(_DWORD *)buf = 136315394;
        v29 = v24;
        v30 = 2080;
        *(_QWORD *)v31 = "SDP_DATABASE_QUERY_STATE";
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", buf, 0x16u);
      }
      v20 = qword_100999500;
      v21 = 5;
      goto LABEL_36;
    }
    if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
      sub_1006F5844();
  }
  else
  {
    v12 = qword_100999848;
    if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Executing full SDP", buf, 2u);
    }
    *(_BYTE *)(*(_QWORD *)qword_100992C80 + 578) = 0;
    v26 = 0uLL;
    v25 = 0;
    v13 = *(_QWORD *)(qword_100999500 + 112);
    v14 = sub_100182F58(v13 + 128, &v25);
    v15 = &unk_100741608;
    if (!v14 && v25 == 97)
    {
      if (sub_100440D90(v13))
      {
        v16 = qword_100999848;
        if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Overriding SDP search for unauthorized Type S controller", buf, 2u);
        }
        v15 = &unk_1007415F8;
      }
      else
      {
        v15 = &unk_100741608;
      }
    }
    LOBYTE(v26) = 6;
    WORD1(v26) = 1;
    *((_QWORD *)&v26 + 1) = v15;
    v8 = sub_100244B90((uint64_t)sub_100486724, 0x30u, (unsigned __int8 *)&v26);
    if (!v8)
    {
      v17 = qword_100999848;
      if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
      {
        v18 = *(int *)(qword_100999500 + 132);
        if (v18 > 0xA)
          v19 = "unknown sdp state";
        else
          v19 = off_100931190[v18];
        *(_DWORD *)buf = 136315394;
        v29 = v19;
        v30 = 2080;
        *(_QWORD *)v31 = "SDP_SEARCH_STATE";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", buf, 0x16u);
      }
      v20 = qword_100999500;
      v21 = 2;
LABEL_36:
      *(_DWORD *)(v20 + 132) = v21;
    }
  }
LABEL_37:
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
      sub_1006F57E4();
    *(_DWORD *)(qword_100999500 + 128) = 0;
    sub_1004870DC();
  }
}

void sub_100486724(int *a1, unsigned int a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  NSObject *v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;

  v6 = qword_100999848;
  if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(int *)(qword_100999500 + 132);
    if (v7 > 0xA)
      v8 = "unknown sdp state";
    else
      v8 = off_100931190[v7];
    v14[0] = 67109634;
    v14[1] = a2;
    v15 = 1024;
    v16 = a3;
    v17 = 2080;
    v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Service search response with %d records, status %{bluetooth:OI_STATUS}u with state %s", (uint8_t *)v14, 0x18u);
  }
  if (a3)
  {
    if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
      sub_1006F58A4();
    *(_DWORD *)(qword_100999500 + 128) = 1;
LABEL_10:
    sub_1004870DC();
    return;
  }
  if (!a2)
  {
    v13 = qword_100999848;
    if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Service search yields no records, we're done", (uint8_t *)v14, 2u);
    }
    *(_DWORD *)(qword_100999500 + 128) = 0;
    goto LABEL_10;
  }
  v9 = qword_100992C80;
  *(_DWORD *)(qword_100992C80 + 200) = a2;
  v10 = a2;
  v11 = (_DWORD *)(v9 + 8);
  do
  {
    v12 = *a1++;
    *v11++ = v12;
    --v10;
  }
  while (v10);
  *(_DWORD *)(v9 + 204) = 0;
  sub_1004878EC();
}

void sub_1004868D8(unsigned __int8 *a1, int a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  int v20;
  uint64_t v21;
  int v22;
  NSObject *v23;
  const char *v24;
  int v25;
  uint64_t v26;
  NSObject *v27;
  const char *v28;
  unsigned int v29;
  const char *v30;
  _OWORD *v31;
  uint64_t v32;
  const char *v33;
  NSObject *v34;
  int v35;
  NSObject *v36;
  _BOOL4 v37;
  uint64_t v38;
  int v39;
  NSObject *v40;
  _BOOL4 v41;
  const char *v42;
  uint64_t v43;
  NSObject *v44;
  const char *v45;
  __int128 v46;
  _BYTE v47[22];
  uint8_t buf[24];

  v6 = qword_100999848;
  if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(int *)(qword_100999500 + 132);
    if (v7 > 0xA)
      v8 = "unknown sdp state";
    else
      v8 = off_100931190[v7];
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v8;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a2;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Service database state response with state %s, more %d, status %{bluetooth:OI_STATUS}u", buf, 0x18u);
  }
  if (a3)
  {
    if (a3 == 802)
    {
      v9 = qword_100999500;
      v10 = qword_100999848;
      if (*(_DWORD *)(qword_100999500 + 132) == 5)
      {
        if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Remote device does not support ServiceDataBaseState restarting full SDP", buf, 2u);
          v10 = qword_100999848;
          v9 = qword_100999500;
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          v11 = *(int *)(v9 + 132);
          if (v11 > 0xA)
            v12 = "unknown sdp state";
          else
            v12 = off_100931190[v11];
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v12;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "SDP_DATABASE_CACHE_UPDATE_REQUIRED";
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", buf, 0x16u);
          v9 = qword_100999500;
        }
        *(_DWORD *)(v9 + 132) = 7;
        v26 = sub_10006BBEC();
        sub_100041A34(v26, &stru_100931020);
        return;
      }
    }
    else
    {
      v10 = qword_100999848;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_1006F5904();
    *(_DWORD *)(qword_100999500 + 128) = 1;
    sub_1004870DC();
  }
  else if ((*a1 & 0xFE) == 6)
  {
    v13 = qword_100999500;
    if (*(_DWORD *)(qword_100999500 + 132) == 5)
    {
      v46 = xmmword_100741730;
      v14 = qword_100999848;
      if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Starting SDP database state matching", buf, 2u);
      }
      sub_100488984(a1);
      v15 = qword_100999500;
      if (*(_DWORD *)(qword_100999500 + 140) == -1)
      {
        v27 = qword_100999848;
        if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
        {
          v28 = sub_100486140(*(_DWORD *)(v15 + 132));
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v28;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "SDP_DATABASE_REMOTE_STATE_NOT_FOUND";
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", buf, 0x16u);
          v15 = qword_100999500;
        }
        v29 = 6;
        *(_DWORD *)(v15 + 132) = 6;
LABEL_49:
        v32 = qword_100999848;
        if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
        {
          v33 = sub_100486140(v29);
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v33;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "SDP_DATABASE_RFCOMM_UPDATE_STATE";
          v34 = v32;
LABEL_51:
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", buf, 0x16u);
          v15 = qword_100999500;
        }
      }
      else
      {
        memset(buf, 0, sizeof(buf));
        v16 = sub_1004442A0(*(_QWORD *)(qword_100999500 + 112), (uint64_t)&v46, 0x201u, (void **)buf);
        if ((_DWORD)v16 && **(_BYTE **)buf == 1)
        {
          v18 = *(_DWORD *)(*(_QWORD *)buf + 8);
          v19 = qword_100999848;
          if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
          {
            v20 = *(_DWORD *)(qword_100999500 + 140);
            *(_DWORD *)v47 = 67109376;
            *(_DWORD *)&v47[4] = v18;
            *(_WORD *)&v47[8] = 1024;
            *(_DWORD *)&v47[10] = v20;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "SdpServiceDataBaseState [local 0x%x, remote 0x%x]", v47, 0xEu);
          }
          v21 = qword_100999500;
          v22 = *(_DWORD *)(qword_100999500 + 140);
          v23 = qword_100999848;
          v16 = os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT);
          if (v18 == v22)
          {
            if ((_DWORD)v16)
            {
              v24 = sub_100486140(*(_DWORD *)(v21 + 132));
              *(_DWORD *)v47 = 136315394;
              *(_QWORD *)&v47[4] = v24;
              *(_WORD *)&v47[12] = 2080;
              *(_QWORD *)&v47[14] = "SDP_DATABASE_VERIFY_COMPLETE_STATE";
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", v47, 0x16u);
              v21 = qword_100999500;
            }
            v25 = 8;
          }
          else
          {
            if ((_DWORD)v16)
            {
              v30 = sub_100486140(*(_DWORD *)(v21 + 132));
              *(_DWORD *)v47 = 136315394;
              *(_QWORD *)&v47[4] = v30;
              *(_WORD *)&v47[12] = 2080;
              *(_QWORD *)&v47[14] = "SDP_DATABASE_CACHE_UPDATE_REQUIRED";
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", v47, 0x16u);
              v21 = qword_100999500;
            }
            v25 = 7;
          }
          *(_DWORD *)(v21 + 132) = v25;
        }
        v31 = *(_OWORD **)buf;
        if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
        {
          do
          {
            *(_QWORD *)v47 = 0;
            *(_QWORD *)&v47[8] = 0;
            *(_OWORD *)v47 = *v31;
            sub_1002C3FB4(v47);
            ++v31;
          }
          while (v31 != *(_OWORD **)&buf[8]);
          v31 = *(_OWORD **)buf;
        }
        if (v31)
        {
          *(_QWORD *)&buf[8] = v31;
          operator delete(v31);
        }
        v15 = qword_100999500;
        v29 = *(_DWORD *)(qword_100999500 + 132);
        switch(v29)
        {
          case 5u:
            v39 = *(_DWORD *)(qword_100999500 + 140);
            v40 = qword_100999848;
            v41 = os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT);
            if (v39 != -1)
            {
              if (v41)
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Local database state not found, but remote state exists, full SDP", buf, 2u);
                v40 = qword_100999848;
                v15 = qword_100999500;
              }
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
              {
                v42 = sub_100486140(*(_DWORD *)(v15 + 132));
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v42;
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = "SDP_DATABASE_CACHE_UPDATE_REQUIRED";
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", buf, 0x16u);
                v15 = qword_100999500;
              }
              *(_DWORD *)(v15 + 132) = 7;
              v43 = sub_10006BBEC();
              sub_100041A34(v43, &stru_100931040);
              goto LABEL_53;
            }
            if (v41)
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Local database state not found and remote state does not exist, move onto RFCOMM", buf, 2u);
              v40 = qword_100999848;
              v15 = qword_100999500;
            }
            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
            {
              v45 = sub_100486140(*(_DWORD *)(v15 + 132));
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = v45;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = "SDP_DATABASE_RFCOMM_UPDATE_STATE";
              v34 = v40;
              goto LABEL_51;
            }
            break;
          case 6u:
          case 8u:
            goto LABEL_49;
          case 7u:
            sub_1004861F8(v16, v17);
            goto LABEL_53;
          default:
            v44 = qword_100999848;
            if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
              sub_1006F5964(v29, v44);
            goto LABEL_53;
        }
      }
      *(_DWORD *)(v15 + 132) = 9;
LABEL_53:
      if (*(_DWORD *)(qword_100999500 + 132) == 9)
      {
        v35 = sub_100452FF4(*(_QWORD *)(qword_100999500 + 112), (_QWORD *)qword_100999500);
        v36 = qword_100999848;
        v37 = os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT);
        if (v35)
        {
          if (v37)
          {
            v38 = *(_QWORD *)(qword_100999500 + 40);
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = v38;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Found %lu services supported RFCOMM, starting channel query", buf, 0xCu);
          }
          byte_10097B311 = 0;
          sub_100488D88();
        }
        else
        {
          if (v37)
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "No RFCOMM services, we're done", buf, 2u);
          }
          *(_DWORD *)(qword_100999500 + 128) = 0;
          sub_1004870DC();
        }
      }
      v13 = qword_100999500;
    }
    *(_DWORD *)(v13 + 140) = -1;
  }
  else if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
  {
    sub_1006F59E4();
  }
}

void sub_1004870B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1004870DC()
{
  NSObject *v0;
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  int v4;
  const char *v5;
  __int16 v6;
  const char *v7;

  v0 = qword_100999848;
  if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
  {
    v1 = *(int *)(qword_100999500 + 132);
    if (v1 > 0xA)
      v2 = "unknown sdp state";
    else
      v2 = off_100931190[v1];
    v4 = 136315394;
    v5 = v2;
    v6 = 2080;
    v7 = "SDP_DISCONNECT_STATE";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", (uint8_t *)&v4, 0x16u);
  }
  *(_DWORD *)(qword_100999500 + 132) = 10;
  if (sub_100244A44())
  {
    v3 = sub_10006BBEC();
    sub_100041A34(v3, &stru_100930FB0);
  }
}

void sub_1004871DC()
{
  uint64_t v0;
  unsigned int v1;
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  NSObject *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  _BYTE *v18;
  int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned __int16 v25;
  _BYTE buf[12];
  char v27;
  _BYTE __p[22];
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;

  v0 = *(_QWORD *)qword_100992C80;
  v24 = *(_DWORD *)(*(_QWORD *)qword_100992C80 + 128);
  v25 = *(_WORD *)(*(_QWORD *)qword_100992C80 + 132);
  v1 = bswap32(v24);
  if (v1 != 693561)
  {
    v2 = 693561;
LABEL_5:
    if (v1 < v2)
      v3 = -1;
    else
      v3 = 1;
    goto LABEL_8;
  }
  v1 = bswap32(v25) >> 16;
  v2 = 0xFFFF;
  if (v1 != 0xFFFF)
    goto LABEL_5;
  v3 = 0;
LABEL_8:
  if (v3 >= 1)
  {
    v4 = bswap32(v24);
    v5 = 693586;
    if (v4 != 693586 || (v5 = 0, v6 = 0, (v4 = bswap32(v25) >> 16) != 0))
    {
      if (v4 < v5)
        v6 = -1;
      else
        v6 = 1;
    }
    if (v6 < 0)
    {
      v7 = qword_100999500;
      v8 = *(_DWORD *)(qword_100999500 + 128);
      if (v8 == 307 || (v8 - 316) <= 0x12)
      {
        v10 = qword_100999848;
        if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(v0, __p);
          if (v29 >= 0)
            v11 = __p;
          else
            v11 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Unsupported legacy Q6 keyboard discovered in device %{public}s", buf, 0xCu);
          if (SHIBYTE(v29) < 0)
            operator delete(*(void **)__p);
          v7 = qword_100999500;
        }
        *(_DWORD *)(v7 + 128) = 109;
LABEL_28:
        if (qword_100992C80)
        {
          free((void *)qword_100992C80);
          qword_100992C80 = 0;
        }
        *(_QWORD *)__p = 0;
        *(_QWORD *)&__p[8] = 0;
        sub_10003415C((uint64_t)__p, (uint64_t)&unk_1009994C0);
        v12 = qword_100999500;
        if (!qword_100999500)
        {
          sub_100253460();
          v12 = qword_100999500;
        }
        qword_100999500 = 0;
        if (*((_QWORD *)&xmmword_100999528 + 1))
        {
          v13 = *(_QWORD *)(*(_QWORD *)(qword_100999510
                                      + (((unint64_t)xmmword_100999528 >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * (xmmword_100999528 & 0x1FF));
          *(_QWORD *)&xmmword_100999528 = xmmword_100999528 + 1;
          --*((_QWORD *)&xmmword_100999528 + 1);
          sub_1002BB5F8((uint64_t)&qword_100999508, 1);
          qword_100999500 = v13;
        }
        sub_100034264((uint64_t)__p);
        v22 = *(_QWORD *)(v12 + 120);
        if (v22)
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v22 + 16))(v22, v12, *(unsigned int *)(v12 + 128));
        sub_100069BDC(v12 + 48);
        sub_1003FA7A0((_QWORD *)v12);
        operator delete();
      }
    }
  }
  if (*(_BYTE *)(qword_100992C80 + 212))
    goto LABEL_28;
  v14 = *(_DWORD *)(qword_100992C80 + 208);
  v15 = qword_100999500;
  v16 = *(unsigned __int8 *)(qword_100999500 + 156);
  v17 = qword_100999848;
  if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v0, buf);
    if (v27 >= 0)
      v18 = buf;
    else
      v18 = *(_BYTE **)buf;
    v19 = *(_DWORD *)(qword_100999500 + 128);
    *(_DWORD *)__p = 136316162;
    *(_QWORD *)&__p[4] = "handleDisconnectInd";
    *(_WORD *)&__p[12] = 2082;
    *(_QWORD *)&__p[14] = v18;
    v29 = 1024;
    v30 = v19;
    v31 = 1024;
    v32 = v14;
    v33 = 1024;
    v34 = v16;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%s: device %{public}s, result %d, attempts %d, totalRetries %d", __p, 0x28u);
    if (v27 < 0)
      operator delete(*(void **)buf);
    v15 = qword_100999500;
  }
  v20 = *(_DWORD *)(v15 + 128);
  if (v20 != 307 && (v20 - 316) > 0x12)
  {
    if (v20 != 314 && v20 != 310 || v14 >= v16 && (v14 || v16))
      goto LABEL_28;
    ++*(_DWORD *)(qword_100992C80 + 208);
    v23 = sub_10006BBEC();
    sub_100475CEC(v23, 500, &stru_100930F90);
  }
  else
  {
    if (v14 >= v16)
      goto LABEL_28;
    ++*(_DWORD *)(qword_100992C80 + 208);
    sub_100485CE8(v15, 1);
  }
}

void sub_1004875F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void sub_100487614(id a1)
{
  sub_100485CE8(qword_100999500, 0);
}

void sub_100487624()
{
  NSObject *v0;
  void **v1;
  int v2;
  int v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  _BYTE v19[10];
  __int16 v20;
  const char *v21;

  v0 = qword_100999848;
  if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(*(_QWORD *)qword_100992C80, __p);
    v1 = (void **)__p[0];
    if (v15 >= 0)
      v1 = __p;
    v2 = *(_DWORD *)(qword_100992C80 + 208);
    v3 = *(_DWORD *)(qword_100999500 + 128);
    v4 = *(int *)(qword_100999500 + 132);
    if (v4 > 0xA)
      v5 = "unknown sdp state";
    else
      v5 = off_100931190[v4];
    *(_DWORD *)buf = 136446978;
    v17 = v1;
    v18 = 1024;
    *(_DWORD *)v19 = v3;
    *(_WORD *)&v19[4] = 1024;
    *(_DWORD *)&v19[6] = v2;
    v20 = 2080;
    v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "SDP disconnected from device %{public}s with result %d, outstanding attempts %d, state %s", buf, 0x22u);
    if (v15 < 0)
      operator delete(__p[0]);
  }
  v6 = qword_100999500;
  if ((*(_DWORD *)(qword_100999500 + 132) - 2) <= 2)
  {
    v7 = qword_100999848;
    if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_DWORD *)(*(_QWORD *)(v6 + 112) + 608);
      *(_DWORD *)buf = 67109120;
      LODWORD(v17) = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SDP disconnected during query states, version %d", buf, 8u);
      v6 = qword_100999500;
    }
    v9 = *(_QWORD *)(v6 + 112);
    if (!*(_DWORD *)(v9 + 608))
    {
      sub_10043E330(v9);
      v6 = qword_100999500;
    }
  }
  v10 = qword_100999848;
  if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(int *)(v6 + 132);
    if (v11 > 0xA)
      v12 = "unknown sdp state";
    else
      v12 = off_100931190[v11];
    *(_DWORD *)buf = 136315394;
    v17 = (void *)v12;
    v18 = 2080;
    *(_QWORD *)v19 = "SDP_IDLE_STATE";
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", buf, 0x16u);
    v6 = qword_100999500;
  }
  *(_DWORD *)(v6 + 132) = 0;
  if (*(_BYTE *)(qword_100992C80 + 212))
  {
    v13 = qword_100999848;
    if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "SDPClient Disconnect dispatch called during system shut down, clean up", buf, 2u);
    }
    sub_1004871DC();
  }
  else
  {
    buf[0] = 0;
    sub_100043758(buf);
    sub_1004871DC();
    sub_100043728(buf);
  }
}

void sub_1004878CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

void sub_1004878EC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  int v3;
  uint64_t v4;
  const char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  int v19;
  NSObject *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  __int128 v26;
  uint8_t buf[4];
  _BYTE v28[10];
  _BYTE v29[10];

  v26 = unk_100930FD0;
  v0 = qword_100992C80;
  v1 = *(int *)(qword_100992C80 + 204);
  v2 = qword_100999848;
  if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(v0 + 200);
    if (qword_100999500)
    {
      v4 = *(int *)(qword_100999500 + 132);
      if (v4 > 0xA)
        v5 = "unknown sdp state";
      else
        v5 = off_100931190[v4];
    }
    else
    {
      v5 = "";
    }
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)v28 = v1;
    *(_WORD *)&v28[4] = 1024;
    *(_DWORD *)&v28[6] = v3;
    *(_WORD *)v29 = 2080;
    *(_QWORD *)&v29[2] = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Issuing attribute request service-index [current %d, total %d], state %s", buf, 0x18u);
    v7 = qword_100992C80;
    v6 = *(_DWORD *)(qword_100992C80 + 204);
  }
  else
  {
    v6 = v1;
    v7 = v0;
  }
  if (v6 == *(_DWORD *)(v7 + 200))
  {
    v8 = qword_100999500;
    v9 = *(_DWORD *)(qword_100999500 + 132);
    if (v9 == 3)
    {
      v13 = qword_100999848;
      if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v14 = "D2D look up complete";
LABEL_25:
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v14, buf, 2u);
        v8 = qword_100999500;
      }
    }
    else
    {
      if (v9 != 5)
      {
        if (v9 == 4)
        {
          v25 = unk_100930FE0;
          v10 = qword_100999848;
          if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "DID complete, start service discovery class search", buf, 2u);
          }
          v11 = sub_100244B90((uint64_t)sub_100486724, 0x30u, (unsigned __int8 *)&v25);
          v12 = qword_100999848;
          if (v11)
          {
            if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
              sub_1006F5AE4();
LABEL_38:
            *(_DWORD *)(qword_100999500 + 128) = 0;
            goto LABEL_39;
          }
          if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
          {
            v17 = *(int *)(qword_100999500 + 132);
            if (v17 > 0xA)
              v18 = "unknown sdp state";
            else
              v18 = off_100931190[v17];
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)v28 = v18;
            *(_WORD *)&v28[8] = 2080;
            *(_QWORD *)v29 = "SDP_DATABASE_QUERY_STATE";
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", buf, 0x16u);
          }
          v23 = qword_100999500;
          v24 = 5;
        }
        else
        {
          v15 = qword_100999848;
          if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
          {
            if (v9 > 0xA)
              v16 = "unknown sdp state";
            else
              v16 = off_1009310C0[v9];
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)v28 = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Found all services, starting DID while in state %s", buf, 0xCu);
          }
          v25 = unk_100930FF0;
          v19 = sub_100244B90((uint64_t)sub_100486724, 0x30u, (unsigned __int8 *)&v25);
          v20 = qword_100999848;
          if (v19)
          {
            if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
              sub_1006F5A84();
            goto LABEL_38;
          }
          if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
          {
            v21 = *(int *)(qword_100999500 + 132);
            if (v21 > 0xA)
              v22 = "unknown sdp state";
            else
              v22 = off_100931190[v21];
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)v28 = v22;
            *(_WORD *)&v28[8] = 2080;
            *(_QWORD *)v29 = "SDP_DID_STATE";
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "SDP Client State Change: %s -> %s\n", buf, 0x16u);
          }
          v23 = qword_100999500;
          v24 = 4;
        }
        *(_DWORD *)(v23 + 132) = v24;
        return;
      }
      v13 = qword_100999848;
      if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v14 = "Database state lookup complete";
        goto LABEL_25;
      }
    }
    *(_DWORD *)(v8 + 128) = 0;
LABEL_39:
    sub_1004870DC();
    return;
  }
  if (sub_100244EFC((uint64_t)sub_100487D74, *(_DWORD *)(v0 + 4 * v1 + 8), (unsigned __int8 *)&v26)
    && os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
  {
    sub_1006F5B44();
  }
}

void sub_100487D74(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  const char *v29;
  unsigned __int16 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t **v41;
  NSObject *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  NSObject *v48;
  const char *v49;
  int v50;
  int v51;
  void **v52;
  NSObject *v53;
  const char *v54;
  int v55;
  int v56;
  void **v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  NSObject *v63;
  int v64;
  void *v65[3];
  void *__p[2];
  char v67;
  char v68;
  char v69[15];
  char v70;
  char v71[15];
  char v72;
  char v73[15];
  char v74;
  char v75[15];
  char v76;
  char v77[15];
  __int128 v78;
  __int128 v79;
  _BYTE buf[18];
  __int16 v81;
  int v82;
  __int16 v83;
  void **v84;
  __int16 v85;
  uint64_t v86;

  v6 = qword_100999848;
  if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(int *)(qword_100999500 + 132);
    if (v7 > 0xA)
      v8 = "unknown sdp state";
    else
      v8 = off_100931190[v7];
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Service attribute response, more %d, state is %s", buf, 0x12u);
  }
  if (a3)
  {
    if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
      sub_1006F5C84();
    v9 = qword_100999500;
    v10 = *(_QWORD *)(qword_100999500 + 112);
    if (v10)
    {
      if (a3 == 802 && *(_DWORD *)(qword_100999500 + 132) == 5)
      {
        *(_DWORD *)(qword_100999500 + 128) = 0;
        sub_1004870DC();
      }
      else
      {
        if (!*(_DWORD *)(v10 + 608))
        {
          sub_10043E330(v10);
          v9 = qword_100999500;
        }
        *(_DWORD *)(v9 + 128) = 1;
        sub_1004870DC();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
    {
      sub_1006F5C54();
    }
    return;
  }
  if ((*(_BYTE *)a1 & 0xFE) == 6)
  {
    v64 = a2;
    v11 = *(unsigned __int16 *)(a1 + 2);
    if ((v11 & 1) != 0)
    {
      v42 = qword_100999848;
      if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "This is weird, there are an odd number of elements in this sdp query %d", buf, 8u);
      }
    }
    else if (*(_WORD *)(a1 + 2))
    {
      v12 = 0;
      while (1)
      {
        __p[0] = 0;
        __p[1] = 0;
        v13 = *(_QWORD *)(a1 + 8);
        *(_OWORD *)__p = *(_OWORD *)(v13 + 16 * v12);
        v79 = 0uLL;
        v79 = *(_OWORD *)(v13 + ((16 * v12) | 0x10));
        v78 = 0uLL;
        if (LOBYTE(__p[0]) != 1)
        {
          if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
            sub_1006F5C28(&v76, v77);
          goto LABEL_80;
        }
        v14 = (int)__p[1];
        if (LODWORD(__p[1]) == 9)
          break;
        if (LODWORD(__p[1]) != 1)
          goto LABEL_58;
        if (v79 == 6 && WORD1(v79))
        {
          v15 = 0;
          do
          {
            v16 = (_BYTE *)(*((_QWORD *)&v79 + 1) + 16 * v15);
            if (*v16 == 3 && sub_1002C5240(&v78, (uint64_t)v16))
            {
              v17 = qword_100992C58;
              if (qword_100992C58 >= (unint64_t)qword_100992C60)
              {
                v19 = (qword_100992C58 - qword_100992C50) >> 4;
                v20 = v19 + 1;
                if ((unint64_t)(v19 + 1) >> 60)
                  abort();
                v21 = qword_100992C60 - qword_100992C50;
                if ((qword_100992C60 - qword_100992C50) >> 3 > v20)
                  v20 = v21 >> 3;
                if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
                  v22 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v22 = v20;
                if (v22)
                  v23 = (char *)sub_10034957C((uint64_t)&qword_100992C60, v22);
                else
                  v23 = 0;
                v24 = &v23[16 * v19];
                *(_OWORD *)v24 = v78;
                v26 = qword_100992C50;
                v25 = (char *)qword_100992C58;
                v27 = (uint64_t)v24;
                if (qword_100992C58 != qword_100992C50)
                {
                  do
                  {
                    *(_OWORD *)(v27 - 16) = *((_OWORD *)v25 - 1);
                    v27 -= 16;
                    v25 -= 16;
                  }
                  while (v25 != (char *)v26);
                  v25 = (char *)qword_100992C50;
                }
                v18 = (uint64_t)(v24 + 16);
                qword_100992C50 = v27;
                qword_100992C58 = (uint64_t)(v24 + 16);
                qword_100992C60 = (uint64_t)&v23[16 * v22];
                if (v25)
                  operator delete(v25);
              }
              else
              {
                *(_OWORD *)qword_100992C58 = v78;
                v18 = v17 + 16;
              }
              qword_100992C58 = v18;
              v28 = qword_100999848;
              if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
              {
                v29 = sub_100250C9C(*(unsigned int *)(*((_QWORD *)&v79 + 1) + 16 * v15 + 8));
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v29;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Found service class %{public}s HFP: %d", buf, 0x12u);
              }
            }
            ++v15;
          }
          while (v15 < WORD1(v79));
        }
LABEL_80:
        v12 += 2;
        if (v12 >= *(unsigned __int16 *)(a1 + 2))
          goto LABEL_91;
      }
      if (v79 != 6)
      {
        if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
          sub_1006F5BFC(&v74, v75);
        goto LABEL_80;
      }
      v30 = WORD1(v79);
      if (WORD1(v79))
      {
        v31 = 0;
        v32 = 0;
        do
        {
          if (*(_BYTE *)(*((_QWORD *)&v79 + 1) + v31) == 6)
          {
            v33 = *((_QWORD *)&v79 + 1) + v31;
            v34 = qword_100999500;
            *(_DWORD *)(qword_100999500 + 148) = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v79 + 1) + v31 + 8) + 8);
            *(_WORD *)(v34 + 152) = *(_DWORD *)(*(_QWORD *)(v33 + 8) + 24);
          }
          else
          {
            v35 = qword_100999848;
            if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "AttributeValue inside OI_ATTRID_BluetoothProfileDescriptorList wasn't a OI_DATAELEM_SEQ, skipping", buf, 2u);
              v30 = WORD1(v79);
            }
          }
          ++v32;
          v31 += 16;
        }
        while (v32 < v30);
        v14 = (int)__p[1];
LABEL_58:
        if (v14 != 4)
          goto LABEL_71;
        if (v79 != 6)
        {
          if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
            sub_1006F5BFC(&v72, v73);
          goto LABEL_80;
        }
        if (WORD1(v79))
        {
          v36 = 0;
          v37 = 0;
          do
          {
            if (*(_BYTE *)(*((_QWORD *)&v79 + 1) + v36) == 6)
            {
              v38 = *(_QWORD *)(*((_QWORD *)&v79 + 1) + v36 + 8);
              v39 = *(unsigned __int16 *)(v38 + 8);
              v40 = *(_DWORD *)(v38 + 24);
              if (v39 == 25)
              {
                sub_10044B1C4(*(_QWORD *)(qword_100999500 + 112), v40);
              }
              else if (v39 == 23)
              {
                sub_10044B2A0(*(_QWORD *)(qword_100999500 + 112), v40);
              }
            }
            else if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
            {
              sub_1006F5BD0(&v70, v71);
            }
            ++v37;
            v36 += 16;
          }
          while (v37 < WORD1(v79));
          v14 = (int)__p[1];
LABEL_71:
          if (v14 == 785)
          {
            if (v79 != 1)
            {
              if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
                sub_1006F5BA4(&v68, v69);
              goto LABEL_80;
            }
            *(_WORD *)(qword_100999500 + 154) = WORD4(v79);
          }
        }
      }
      if (sub_1002C5240(&v78, (uint64_t)&v79))
      {
        *(_QWORD *)buf = &__p[1];
        v41 = sub_10033ED08((uint64_t **)&qword_100992C68, (unsigned int *)&__p[1], (uint64_t)&unk_100740F58, (_DWORD **)buf);
        *(_OWORD *)(v41 + 5) = v78;
      }
      goto LABEL_80;
    }
LABEL_91:
    if (v64)
    {
      if (!sub_1002454C8())
        return;
      goto LABEL_143;
    }
    *(_QWORD *)&v79 = 0;
    v43 = sub_100182588(*(_QWORD *)(qword_100999500 + 112) + 128, (uint64_t *)&v79);
    v45 = qword_100992C50;
    v44 = qword_100992C58;
    if (!v43)
    {
      if (qword_100992C50 == qword_100992C58)
      {
        *(_QWORD *)(qword_100999500 + 148) = 0;
LABEL_135:
        v59 = qword_100992C68;
        if ((uint64_t *)qword_100992C68 != &qword_100992C70)
        {
          do
          {
            *(_OWORD *)buf = *(_OWORD *)(v59 + 40);
            sub_1002C3FB4(buf);
            v60 = *(uint64_t **)(v59 + 8);
            if (v60)
            {
              do
              {
                v61 = v60;
                v60 = (uint64_t *)*v60;
              }
              while (v60);
            }
            else
            {
              do
              {
                v61 = *(uint64_t **)(v59 + 16);
                v47 = *v61 == v59;
                v59 = (uint64_t)v61;
              }
              while (!v47);
            }
            v59 = (uint64_t)v61;
          }
          while (v61 != &qword_100992C70);
        }
        sub_10001A82C((uint64_t)&qword_100992C68, (_QWORD *)qword_100992C70);
        qword_100992C68 = (uint64_t)&qword_100992C70;
        qword_100992C78 = 0;
        qword_100992C70 = 0;
        qword_100992C58 = qword_100992C50;
LABEL_143:
        v62 = qword_100999500;
        if (*(_DWORD *)(qword_100999500 + 132) == 5)
        {
          v63 = qword_100999848;
          if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "Database state lookup complete", buf, 2u);
            v62 = qword_100999500;
          }
          *(_DWORD *)(v62 + 128) = 0;
          sub_1004870DC();
        }
        else
        {
          ++*(_DWORD *)(qword_100992C80 + 204);
          sub_1004878EC();
        }
        return;
      }
      do
      {
        v46 = *(unsigned int *)(v45 + 8);
        v47 = (v46 - 4364) > 0x12 || ((1 << (v46 - 12)) & 0x4000D) == 0;
        if (v47)
        {
          v53 = qword_100999848;
          if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
          {
            v54 = sub_100250C9C(v46);
            v55 = *(unsigned __int16 *)(qword_100999500 + 152);
            v56 = *(unsigned __int16 *)(qword_100999500 + 154);
            sub_10043E5F8(*(_QWORD *)(qword_100999500 + 112), __p);
            v57 = __p;
            if (v67 < 0)
              v57 = (void **)__p[0];
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = v54;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v55;
            v81 = 1024;
            v82 = v56;
            v83 = 2082;
            v84 = v57;
            v85 = 2048;
            v86 = v79;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "Found service class %{public}s with profile version: %x, supported features: %x. Not creating remote SDP record for device \"%{public}s\" with hci handle: %p", buf, 0x2Cu);
            if (v67 < 0)
              operator delete(__p[0]);
          }
        }
        else
        {
          v48 = qword_100999848;
          if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
          {
            v49 = sub_100250C9C(v46);
            v50 = *(unsigned __int16 *)(qword_100999500 + 152);
            v51 = *(unsigned __int16 *)(qword_100999500 + 154);
            sub_10043E5F8(*(_QWORD *)(qword_100999500 + 112), __p);
            v52 = __p;
            if (v67 < 0)
              v52 = (void **)__p[0];
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = v49;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v50;
            v81 = 1024;
            v82 = v51;
            v83 = 2082;
            v84 = v52;
            v85 = 2048;
            v86 = v79;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Found service class %{public}s with profile version: %x, supported features: %x. Creating/Updating remote SDP record for device \"%{public}s\" with hci handle: %p", buf, 0x2Cu);
            if (v67 < 0)
              operator delete(__p[0]);
          }
          sub_1002473B4((const void *)v79, v46, *(_WORD *)(qword_100999500 + 152), *(_WORD *)(qword_100999500 + 154));
        }
        if ((int)v46 > 4381)
        {
          if ((int)v46 <= 4402)
          {
            if ((_DWORD)v46 == 4382)
            {
              sub_10044A90C(*(_QWORD *)(qword_100999500 + 112), *(unsigned __int16 *)(qword_100999500 + 152));
              sub_10044AA28(*(_QWORD *)(qword_100999500 + 112), *(unsigned __int16 *)(qword_100999500 + 154));
            }
            else if ((_DWORD)v46 == 4388)
            {
              sub_10044AF30(*(_QWORD *)(qword_100999500 + 112), *(_WORD *)(qword_100999500 + 152));
            }
          }
          else
          {
            switch((_DWORD)v46)
            {
              case 0x1133:
                sub_10044ABC0(*(_QWORD *)(qword_100999500 + 112), *(_WORD *)(qword_100999500 + 152));
                break;
              case 0x1200:
                sub_10044AD78(*(_QWORD *)(qword_100999500 + 112), *(_WORD *)(qword_100999500 + 152));
                break;
              case 0x1801:
                sub_10044B00C(*(_QWORD *)(qword_100999500 + 112), *(_WORD *)(qword_100999500 + 152));
                break;
            }
          }
        }
        else
        {
          switch((int)v46)
          {
            case 4353:
              sub_10044AE54(*(_QWORD *)(qword_100999500 + 112), *(_WORD *)(qword_100999500 + 152));
              break;
            case 4357:
              sub_10044AC9C(*(_QWORD *)(qword_100999500 + 112), *(_WORD *)(qword_100999500 + 152));
              break;
            case 4363:
              sub_10044AA84(*(_QWORD *)(qword_100999500 + 112), *(_WORD *)(qword_100999500 + 152));
              sub_10044AB60(*(_QWORD *)(qword_100999500 + 112), *(_WORD *)(qword_100999500 + 154));
              break;
            case 4364:
              sub_10044A750(*(_QWORD *)(qword_100999500 + 112), *(unsigned __int16 *)(qword_100999500 + 152));
              sub_10044A86C(*(_QWORD *)(qword_100999500 + 112), *(unsigned __int16 *)(qword_100999500 + 154));
              break;
            case 4366:
            case 4367:
              sub_10044A594(*(_QWORD *)(qword_100999500 + 112), *(unsigned __int16 *)(qword_100999500 + 152));
              sub_10044A6B0(*(_QWORD *)(qword_100999500 + 112), *(unsigned __int16 *)(qword_100999500 + 154));
              break;
            default:
              break;
          }
        }
        v45 += 16;
      }
      while (v45 != qword_100992C58);
      v44 = v45;
      v45 = qword_100992C50;
    }
    *(_QWORD *)(qword_100999500 + 148) = 0;
    if (v45 != v44)
    {
      do
      {
        *(_OWORD *)buf = *(_OWORD *)v45;
        v58 = *(_QWORD *)(qword_100999500 + 112);
        sub_10033F038((uint64_t)v65, (uint64_t)&qword_100992C68);
        sub_1004436F8(v58, (uint64_t)buf, v65);
        sub_10001A82C((uint64_t)v65, (_QWORD *)v65[1]);
        sub_1002C3FB4(buf);
        v45 += 16;
      }
      while (v45 != qword_100992C58);
    }
    goto LABEL_135;
  }
  if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
    sub_1006F59E4();
}

void sub_100488964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21)
{
  sub_10001A82C((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void sub_100488984(unsigned __int8 *a1)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  __int128 v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  const char *v15;

  v2 = *a1;
  if ((v2 - 1) < 2)
  {
    v4 = qword_100999500;
    v5 = *(_DWORD *)(qword_100999500 + 136);
    if (v5 == 2)
    {
      *(_DWORD *)(qword_100999500 + 140) = *((_DWORD *)a1 + 2);
      v10 = qword_100999848;
      if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v13 = "SDP_PARSER_FOUND_ATTRIBUTE_ID_STATE";
        v14 = 2080;
        v15 = "SDP_PARSER_IDLE_STATE";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "SDP Client Parser State Change: %s -> %s\n", buf, 0x16u);
        v4 = qword_100999500;
      }
      *(_DWORD *)(v4 + 136) = 0;
    }
    else if (v5 == 1 && *((_DWORD *)a1 + 2) == 513)
    {
      v6 = qword_100999848;
      if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v13 = "SDP_PARSER_FOUND_SERVICE_CLASS_STATE";
        v14 = 2080;
        v15 = "SDP_PARSER_FOUND_ATTRIBUTE_ID_STATE";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SDP Client Parser State Change: %s -> %s\n", buf, 0x16u);
        v4 = qword_100999500;
      }
      *(_DWORD *)(v4 + 136) = 2;
    }
  }
  else if ((v2 - 6) >= 2)
  {
    if (v2 == 3)
    {
      v11 = xmmword_100741690;
      if (sub_1002C5144((uint64_t)a1, (uint64_t)&v11))
      {
        v7 = qword_100999848;
        if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
        {
          v8 = *(int *)(qword_100999500 + 136);
          if (v8 > 3)
            v9 = "unknown sdp parser state";
          else
            v9 = off_100931118[v8];
          *(_DWORD *)buf = 136315394;
          v13 = v9;
          v14 = 2080;
          v15 = "SDP_PARSER_FOUND_SERVICE_CLASS_STATE";
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SDP Client Parser State Change: %s -> %s\n", buf, 0x16u);
        }
        *(_DWORD *)(qword_100999500 + 136) = 1;
      }
    }
  }
  else if (*((_WORD *)a1 + 1))
  {
    v3 = 0;
    do
      sub_100488984(*((_QWORD *)a1 + 1) + 16 * v3++);
    while (*((unsigned __int16 *)a1 + 1) > v3);
  }
}

void sub_100488C0C(unsigned __int8 *a1)
{
  int v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  __int128 v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  const char *v11;

  v2 = *a1;
  if ((v2 - 1) < 2)
  {
    if (*(_DWORD *)(qword_100999500 + 136) == 3)
      *(_DWORD *)(qword_100999500 + 144) = *((_DWORD *)a1 + 2);
  }
  else if ((v2 - 6) >= 2)
  {
    if (v2 == 3)
    {
      v7 = xmmword_10073B9B0;
      if (sub_1002C5144((uint64_t)a1, (uint64_t)&v7))
      {
        v4 = qword_100999848;
        if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
        {
          v5 = *(int *)(qword_100999500 + 136);
          if (v5 > 3)
            v6 = "unknown sdp parser state";
          else
            v6 = off_100931118[v5];
          *(_DWORD *)buf = 136315394;
          v9 = v6;
          v10 = 2080;
          v11 = "SDP_PARSER_FOUND_RFCOMM_UUID_STATE";
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SDP Client Parser State Change: %s -> %s\n", buf, 0x16u);
        }
        *(_DWORD *)(qword_100999500 + 136) = 3;
      }
    }
  }
  else if (*((_WORD *)a1 + 1))
  {
    v3 = 0;
    do
      sub_100488C0C(*((_QWORD *)a1 + 1) + 16 * v3++);
    while (*((unsigned __int16 *)a1 + 1) > v3);
  }
}

void sub_100488D88()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  _BOOL4 v6;
  unsigned int v7;
  int v8;
  const char *v9;
  NSObject *v10;
  const char *v11;
  void *v12;
  uint8_t *v13;
  int v14;
  int v15;
  NSObject *v16;
  _QWORD v17[2];
  uint64_t v18;
  uint8_t *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t v31[4];
  void *v32;
  __int128 v33;
  _OWORD v34[2];
  uint8_t buf[8];
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];

  v0 = qword_100999500;
  v1 = *(_DWORD *)(qword_100999500 + 132);
  if (v1 != 9)
  {
    v4 = qword_100999848;
    if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
      sub_1006F5CE4(v1, v4, v5);
    return;
  }
  if (*(_QWORD *)(qword_100999500 + 40))
  {
    while (1)
    {
      v29 = xmmword_1007416B0;
      v30 = xmmword_1007416A0;
      v27 = xmmword_1007416D0;
      v28 = xmmword_1007416C0;
      v26 = xmmword_1007416E0;
      v24 = xmmword_100741700;
      v25 = xmmword_1007416F0;
      v22 = unk_100931000;
      v23 = xmmword_100741710;
      v21 = unk_100931010;
      v20 = 0uLL;
      v20 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 8) + ((*(_QWORD *)(v0 + 32) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * *(_QWORD *)(v0 + 32));
      if (!sub_1002C5144((uint64_t)&v20, (uint64_t)&v30)
        && !sub_1002C5144((uint64_t)&v20, (uint64_t)&v29)
        && !sub_1002C5144((uint64_t)&v20, (uint64_t)&v28)
        && !sub_1002C5144((uint64_t)&v20, (uint64_t)&v27)
        && !sub_1002C5144((uint64_t)&v20, (uint64_t)&v26)
        && !sub_1002C5144((uint64_t)&v20, (uint64_t)&v24)
        && !sub_1002C5144((uint64_t)&v20, (uint64_t)&v23)
        && !sub_1002C5144((uint64_t)&v20, (uint64_t)&v25))
      {
        if (!byte_10097B311)
          goto LABEL_24;
        if (!sub_1002C5144((uint64_t)&v20, (uint64_t)&v22))
        {
          if (!byte_10097B311)
          {
LABEL_24:
            v6 = 1;
            goto LABEL_26;
          }
          if (!sub_1002C5144((uint64_t)&v20, (uint64_t)&v21))
            break;
        }
      }
      v2 = qword_100999500;
      *(int64x2_t *)(qword_100999500 + 32) = vaddq_s64(*(int64x2_t *)(qword_100999500 + 32), (int64x2_t)xmmword_10073D4C0);
      sub_1003FAE34(v2, 1);
      v0 = qword_100999500;
      if (!*(_QWORD *)(qword_100999500 + 40))
        goto LABEL_16;
    }
    v6 = byte_10097B311 == 0;
LABEL_26:
    v39[0] = 0;
    v39[1] = 0;
    *(_QWORD *)buf = 1048579;
    v36 = v39;
    v37 = 131075;
    v38 = 3;
    v34[0] = xmmword_100741668;
    v34[1] = unk_100741678;
    v33 = xmmword_100741720;
    v18 = 0;
    v19 = 0;
    v17[0] = 0;
    if (!v6 || sub_1002C5144((uint64_t)&v20, (uint64_t)&v22) || sub_1002C5144((uint64_t)&v20, (uint64_t)&v21))
      byte_10097B311 = 1;
    if (v20 != 3)
    {
LABEL_43:
      LOBYTE(v17[0]) = 6;
      WORD1(v17[0]) = 1;
      v17[1] = &v33;
      v14 = sub_100245200((uint64_t)sub_1004892CC, (unsigned __int8 *)&v18, (unsigned __int8 *)v17);
      if (v14)
      {
        v15 = v14;
        v16 = qword_100999848;
        if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v31 = 67109120;
          LODWORD(v32) = v15;
          _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Service+RFCOMM search failed with %{bluetooth:OI_STATUS}u", v31, 8u);
        }
        *(_DWORD *)(qword_100999500 + 128) = 0;
        goto LABEL_20;
      }
      return;
    }
    v7 = WORD1(v20);
    v8 = sub_10005549C();
    if (v7 > 4)
    {
      if (v8)
      {
        v11 = sub_10025099C(*((unsigned int **)&v20 + 1));
        sub_100054530("Querying RFCOMM Service : %s", v11);
        v10 = sub_1000544A0(0x5Cu);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          goto LABEL_37;
      }
    }
    else if (v8)
    {
      v9 = sub_100250C9C(DWORD2(v20));
      sub_100054530("Querying RFCOMM Service : %s", v9);
      v10 = sub_1000544A0(0x5Cu);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
LABEL_37:
        v12 = sub_100054494();
        *(_DWORD *)v31 = 136446210;
        v32 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, " %{public}s", v31, 0xCu);
      }
    }
    if (v20 == 3)
    {
      if (WORD1(v20) == 16)
      {
        *v36 = **((_OWORD **)&v20 + 1);
        v13 = buf;
      }
      else
      {
        DWORD2(v34[0]) = DWORD2(v20);
        v13 = (uint8_t *)v34;
      }
      LOBYTE(v18) = 6;
      WORD1(v18) = 2;
      v19 = v13;
    }
    goto LABEL_43;
  }
LABEL_16:
  if (*(_DWORD *)(v0 + 132) == 9)
  {
    v3 = qword_100999848;
    if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "RFCOMM channel update complete", buf, 2u);
      v0 = qword_100999500;
    }
    *(_DWORD *)(v0 + 128) = 0;
LABEL_20:
    sub_1004870DC();
  }
}

void sub_1004892CC(unsigned __int8 *a1, int a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  int64x2_t *v10;
  uint64_t v11;
  __int128 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  v6 = qword_100999848;
  if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(int *)(qword_100999500 + 132);
    if (v7 > 0xA)
      v8 = "unknown sdp state";
    else
      v8 = off_100931190[v7];
    v9 = *(_QWORD *)(qword_100999500 + 40);
    LODWORD(v12) = 67109890;
    DWORD1(v12) = a2;
    WORD4(v12) = 1024;
    *(_DWORD *)((char *)&v12 + 10) = a3;
    HIWORD(v12) = 2080;
    v13 = v8;
    v14 = 2048;
    v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "RFCOMM service attribute response: more %d, status %{bluetooth:OI_STATUS}u, state %s RFCOMM service size %lu", (uint8_t *)&v12, 0x22u);
  }
  if (a3)
  {
    if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
      sub_1006F5D6C();
    *(_DWORD *)(qword_100999500 + 128) = 1;
    sub_1004870DC();
  }
  else if ((*a1 & 0xFE) == 6)
  {
    if (*(_QWORD *)(qword_100999500 + 40))
    {
      v12 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(qword_100999500 + 8)
                                  + ((*(_QWORD *)(qword_100999500 + 32) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * *(_QWORD *)(qword_100999500 + 32));
      *(_DWORD *)(qword_100999500 + 144) = -1;
      sub_100488C0C(a1);
      v10 = (int64x2_t *)qword_100999500;
      if (*(_DWORD *)(qword_100999500 + 144) != -1)
      {
        sub_100452E88(*(_QWORD *)(qword_100999500 + 112), (uint64_t)&v12, (unsigned __int16)*(_DWORD *)(qword_100999500 + 144));
        v10 = (int64x2_t *)qword_100999500;
      }
      v10[2] = vaddq_s64(v10[2], (int64x2_t)xmmword_10073D4C0);
      v11 = sub_1003FAE34((uint64_t)v10, 1);
      sub_100488D88(v11);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
  {
    sub_1006F59E4();
  }
}

void sub_1004894C8(id a1)
{
  char v1;

  v1 = 0;
  sub_100043758(&v1);
  sub_1004861F8();
  sub_100043728(&v1);
}

void sub_100489500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_100489514(id a1)
{
  char v1;

  v1 = 0;
  sub_100043758(&v1);
  sub_1004861F8();
  sub_100043728(&v1);
}

void sub_10048954C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100489560(uint64_t a1, char a2)
{
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, (uint64_t)&unk_100999538);
  byte_10097B310 = a2;
  sub_100034264((uint64_t)v4);
  return sub_100034234((uint64_t)v4);
}

void sub_1004895B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1004895C4()
{
  int v0;
  _BOOL8 v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, (uint64_t)&unk_1009994C0);
  if (qword_100999500)
  {
    v0 = *(_DWORD *)(qword_100999500 + 132);
    v2 = v0 != 10 && v0 != 0;
  }
  else
  {
    v2 = 0;
  }
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_100489628(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  void **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v15;
  _OWORD v17[2];
  __int128 v18;
  _QWORD v19[2];

  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, (uint64_t)&unk_1009994C0);
  if (qword_100999500)
  {
    v3 = *(_QWORD *)(qword_100999500 + 112);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 128);
      v5 = *(unsigned __int16 *)(v3 + 132);
      if (v4 == *(_DWORD *)(a2 + 128) && v5 == *(unsigned __int16 *)(a2 + 132))
      {
LABEL_22:
        v15 = 1;
        goto LABEL_23;
      }
    }
  }
  if (*((_QWORD *)&xmmword_100999528 + 1))
  {
    v18 = 0u;
    memset(v17, 0, sizeof(v17));
    sub_10048AF1C((uint64_t)v17, &qword_100999508);
    v7 = *((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1))
    {
      v8 = (void **)*((_QWORD *)&v17[0] + 1);
      v9 = v18;
      while (1)
      {
        v10 = (*(_QWORD **)((char *)v8 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)))[v9 & 0x1FF];
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 112);
          if (v11)
          {
            v12 = *(_DWORD *)(v11 + 128);
            v13 = *(unsigned __int16 *)(v11 + 132);
            if (v12 == *(_DWORD *)(a2 + 128) && v13 == *(unsigned __int16 *)(a2 + 132))
              break;
          }
        }
        --v7;
        *(_QWORD *)&v18 = ++v9;
        *((_QWORD *)&v18 + 1) = v7;
        if (v9 >= 0x400)
        {
          operator delete(*v8);
          v8 = (void **)(*((_QWORD *)&v17[0] + 1) + 8);
          v9 = v18 - 512;
          *((_QWORD *)&v17[0] + 1) += 8;
          *(_QWORD *)&v18 = v18 - 512;
          v7 = *((_QWORD *)&v18 + 1);
        }
        if (!v7)
          goto LABEL_19;
      }
      sub_1002A6638(v17);
      goto LABEL_22;
    }
LABEL_19:
    sub_1002A6638(v17);
  }
  v15 = 0;
LABEL_23:
  sub_100034234((uint64_t)v19);
  return v15;
}

void sub_100489768(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100034234(v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_10048977C(uint64_t a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v20;
  const void *v21;
  __int16 v22;
  __int16 v23;
  NSObject *v24;
  uint8_t *v25;
  const void *v26;
  __int16 v27;
  __int16 v28;
  const void *v29;
  __int16 v30;
  __int16 v31;
  BOOL v32;
  BOOL v33;
  NSObject *v34;
  _BYTE *v35;
  _BOOL4 v36;
  uint64_t v37;
  _BOOL4 v38;
  NSObject *v39;
  _BYTE *v40;
  NSObject *v41;
  int v42;
  const char *v43;
  int v44;
  NSObject *v45;
  char *v46;
  uint8_t *v47;
  _QWORD v48[5];
  int v49;
  int v50;
  __int16 v51;
  const void *v52;
  _BYTE v53[12];
  __int16 v54;
  uint8_t *v55;
  char v56;
  uint8_t v57[4];
  _BYTE *v58;
  uint8_t buf[48];
  void *v60[2];
  __int128 v61;
  void *__p[2];
  _OWORD v63[3];
  __int128 v64;
  uint64_t v65;

  v4 = qword_100999500;
  v5 = qword_100999848;
  if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 141558531;
    *(_QWORD *)&buf[4] = 1752392040;
    *(_WORD *)&buf[12] = 1041;
    *(_DWORD *)&buf[14] = 6;
    *(_WORD *)&buf[18] = 2097;
    *(_QWORD *)&buf[20] = a1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Incoming SDP request from %{private,bluetooth:BD_ADDR,mask.hash}.6P", buf, 0x1Cu);
  }
  if (v4
    && (v6 = *(_QWORD *)(v4 + 112)) != 0
    && ((v7 = *(_DWORD *)(v6 + 128), v8 = *(unsigned __int16 *)(v6 + 132), v7 == *(_DWORD *)a1)
      ? (v9 = v8 == *(unsigned __int16 *)(a1 + 4))
      : (v9 = 0),
        v9))
  {
    v18 = qword_100999848;
    if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 141558531;
      *(_QWORD *)&buf[4] = 1752392040;
      *(_WORD *)&buf[12] = 1041;
      *(_DWORD *)&buf[14] = 6;
      *(_WORD *)&buf[18] = 2097;
      *(_QWORD *)&buf[20] = a1;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Already have outgoing SDP with %{private,bluetooth:BD_ADDR,mask.hash}.6P", buf, 0x1Cu);
    }
  }
  else
  {
    if (!byte_100992C88)
    {
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_100931060);
      *(_DWORD *)buf = *(_DWORD *)a1;
      *(_WORD *)&buf[4] = *(_WORD *)(a1 + 4);
      v13 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 0);
      v14 = v13;
      if (v13)
      {
        if (sub_10044CC64(v13))
        {
          v15 = qword_100999848;
          if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 141558787;
            *(_QWORD *)&buf[4] = 1752392040;
            *(_WORD *)&buf[12] = 1041;
            *(_DWORD *)&buf[14] = 6;
            *(_WORD *)&buf[18] = 2097;
            *(_QWORD *)&buf[20] = a1;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = a2;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "stalling incoming SDP request from %{private,bluetooth:BD_ADDR,mask.hash}.6P for cid: %d. Initiating an outgoing SDP request for SDP Mirroring", buf, 0x22u);
          }
          sub_10044829C(v14, 1);
          sub_100448324(v14, a2);
          if (qword_10097B080 != -1)
            dispatch_once(&qword_10097B080, &stru_100931080);
          sub_10048BB30(qword_10097B078, v14);
        }
        v52 = 0;
        if (!sub_100182588(v14 + 128, (uint64_t *)&v52))
        {
          v20 = qword_100999848;
          if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 141558787;
            *(_QWORD *)&buf[4] = 1752392040;
            *(_WORD *)&buf[12] = 1041;
            *(_DWORD *)&buf[14] = 6;
            *(_WORD *)&buf[18] = 2097;
            *(_QWORD *)&buf[20] = a1;
            *(_WORD *)&buf[28] = 2048;
            *(_QWORD *)&buf[30] = v52;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "No need to stall incoming SDP request from %{private,bluetooth:BD_ADDR,mask.hash}.6P with handle %p", buf, 0x26u);
          }
          v21 = v52;
          v22 = sub_10044A8C8(v14);
          v23 = sub_10044A9E4(v14);
          sub_1002473B4(v21, 4382, v22, v23);
          if (sub_100442CD4(v14))
          {
            v24 = qword_100999848;
            if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043F78C(v14, (uint64_t)buf);
              v25 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
              *(_DWORD *)v53 = 136315138;
              *(_QWORD *)&v53[4] = v25;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Forcing legacy AVRCP SDP for device %s", v53, 0xCu);
              if ((char)buf[23] < 0)
                operator delete(*(void **)buf);
            }
            sub_1002473B4(v52, 4364, 260, 0);
            sub_1002473B4(v52, 4367, 260, 0);
          }
          else
          {
            v26 = v52;
            v27 = sub_10044A70C(v14);
            v28 = sub_10044A828(v14);
            sub_1002473B4(v26, 4364, v27, v28);
            v29 = v52;
            v30 = sub_10044A550(v14);
            v31 = sub_10044A66C(v14);
            sub_1002473B4(v29, 4367, v30, v31);
          }
          v65 = 0;
          v64 = 0u;
          memset(v63, 0, sizeof(v63));
          v61 = 0u;
          *(_OWORD *)__p = 0u;
          *(_OWORD *)v60 = 0u;
          memset(buf, 0, sizeof(buf));
          sub_1005BCCCC((uint64_t)&buf[1]);
          buf[18] = 0;
          buf[20] = 0;
          BYTE2(v60[0]) = 0;
          BYTE4(v60[0]) = 0;
          DWORD1(v63[1]) = 0;
          memset(&buf[24], 0, 24);
          LOBYTE(v60[0]) = 0;
          v61 = 0uLL;
          v60[1] = 0;
          LOBYTE(__p[0]) = 0;
          memset(v63, 0, 19);
          __p[1] = 0;
          BYTE8(v63[1]) = 1;
          BYTE2(v65) = 0;
          *(_QWORD *)((char *)&v63[1] + 14) = 0;
          *(_QWORD *)((char *)&v63[1] + 9) = 0;
          v64 = 0uLL;
          *((_QWORD *)&v63[2] + 1) = 0;
          LOBYTE(v65) = 0;
          v32 = sub_1004419F4(v14, (uint64_t)buf);
          if (BYTE1(v64))
            v33 = v32;
          else
            v33 = 0;
          if (v33 || sub_100442AB4(v14))
          {
            v34 = qword_100999848;
            if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043F78C(v14, (uint64_t)v53);
              v35 = v56 >= 0 ? v53 : *(_BYTE **)v53;
              *(_DWORD *)v57 = 136315138;
              v58 = v35;
              _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Forcing legacy PBAP SDP for device %s", v57, 0xCu);
              if (v56 < 0)
                operator delete(*(void **)v53);
            }
            sub_1002473B4(v52, 4398, 256, 0);
          }
          v36 = sub_1004419F4(v14, (uint64_t)buf);
          if (BYTE2(v64))
            v38 = v36;
          else
            v38 = 0;
          if (v38)
          {
            v39 = qword_100999848;
            if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043F78C(v14, (uint64_t)v53);
              v40 = v56 >= 0 ? v53 : *(_BYTE **)v53;
              *(_DWORD *)v57 = 136315138;
              v58 = v40;
              _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Forcing legacy MAP SDP for device %s", v57, 0xCu);
              if (v56 < 0)
                operator delete(*(void **)v53);
            }
            sub_1002473B4(v52, 4404, 257, 0);
          }
          if (SHIBYTE(v63[0]) < 0)
            operator delete(__p[1]);
          if (SHIBYTE(v61) < 0)
            operator delete(v60[1]);
          if ((char)buf[47] < 0)
            operator delete(*(void **)&buf[24]);
          nullsub_90(&buf[1], v37);
        }
        v41 = qword_100999848;
        if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
        {
          v42 = *(unsigned __int8 *)(v14 + 968);
          *(_DWORD *)buf = 136315907;
          if (v42)
            v43 = "true";
          else
            v43 = "false";
          *(_QWORD *)&buf[4] = v43;
          *(_WORD *)&buf[12] = 2160;
          *(_QWORD *)&buf[14] = 1752392040;
          *(_WORD *)&buf[22] = 1041;
          *(_DWORD *)&buf[24] = 6;
          *(_WORD *)&buf[28] = 2097;
          *(_QWORD *)&buf[30] = a1;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Wireless Splitter set guest device not in contacts to '%s ' into the remote SDP record for %{private,bluetooth:BD_ADDR,mask.hash}.6P ", buf, 0x26u);
        }
        sub_1002470CC(v52, *(_BYTE *)(v14 + 968));
        v44 = sub_100442118(v14, 12);
        v45 = qword_100999848;
        if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
        {
          v46 = v44 ? "false" : "true";
          sub_10043F78C(v14, (uint64_t)buf);
          v47 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)v53 = 136315394;
          *(_QWORD *)&v53[4] = v46;
          v54 = 2080;
          v55 = v47;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Setting requiresLegacyPnPInformationRecord to %s for device %s", v53, 0x16u);
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
        }
        sub_100247240(v52, v44 ^ 1);
      }
    }
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_1009310A0);
    sub_1004A84C8((uint64_t)off_100977A50, a1);
    v10 = sub_100185EF4(a1);
    *(_DWORD *)v53 = *(_DWORD *)a1;
    *(_WORD *)&v53[4] = *(_WORD *)(a1 + 4);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100931060);
    *(_DWORD *)buf = *(_DWORD *)v53;
    *(_WORD *)&buf[4] = *(_WORD *)&v53[4];
    v11 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
    if ((v10 & 0x1FFC) == 0x41C || (v10 & 0x1FFC) == 0x20C)
    {
      v12 = qword_100999848;
      if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 141558531;
        *(_QWORD *)&buf[4] = 1752392040;
        *(_WORD *)&buf[12] = 1041;
        *(_DWORD *)&buf[14] = 6;
        *(_WORD *)&buf[18] = 2097;
        *(_QWORD *)&buf[20] = a1;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received incoming SDP connection from possible iPhone/iPod %{private,bluetooth:BD_ADDR,mask.hash}.6P", buf, 0x1Cu);
      }
      if (qword_10097B080 != -1)
        dispatch_once(&qword_10097B080, &stru_100931080);
      sub_10048BFF0();
    }
    v16 = v11;
    v17 = sub_10006BBEC();
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472;
    v48[2] = sub_10048A158;
    v48[3] = &unk_1009186D0;
    v48[4] = v16;
    v49 = v10;
    v50 = *(_DWORD *)v53;
    v51 = *(_WORD *)&v53[4];
    sub_100041A34(v17, v48);
  }
  return 845;
}

void sub_10048A134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_10026B73C((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_10048A158(uint64_t a1)
{
  NSObject *v2;

  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100931060);
    sub_100470B08((uint64_t)off_1009778E0, *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
  }
  else
  {
    v2 = qword_100999848;
    if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
      sub_1006F5DCC(a1, v2);
  }
}

void sub_10048A1EC(id a1)
{
  operator new();
}

void sub_10048A22C()
{
  operator delete();
}

void sub_10048A250(id a1)
{
  operator new();
}

void sub_10048A290()
{
  operator delete();
}

void sub_10048A2B4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_10048A338(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_10048A338(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10007ABA0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1002A61DC(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_1002A62F0((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10007ABA0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10007ABA0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_1002A640C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002A6520((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10048A600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_10048A64C(id a1)
{
  operator new();
}

void sub_10048A68C()
{
  operator delete();
}

_QWORD *sub_10048A6B0(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;

  if (a1 != a2)
  {
    v4 = a2[4];
    v5 = a2[1];
    v6 = a2[2];
    v7 = (char **)(v5 + 8 * (v4 >> 9));
    if (v6 == v5)
    {
      v8 = 0;
      v11 = 0;
      v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
    }
    else
    {
      v8 = &(*v7)[8 * (v4 & 0x1FF)];
      v9 = a2[5] + v4;
      v10 = (char *)(v5 + 8 * (v9 >> 9));
      v11 = (char *)(*(_QWORD *)v10 + 8 * (v9 & 0x1FF));
    }
    sub_10048A740(a1, v7, v8, v10, v11);
  }
  return a1;
}

_QWORD *sub_10048A740(_QWORD *a1, char **a2, char *a3, char *a4, char *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = ((uint64_t)&a5[-*(_QWORD *)a4] >> 3) + ((a4 - (char *)a2) << 6) - ((a3 - *a2) >> 3);
  return sub_10048A774(a1, a2, a3, v5);
}

_QWORD *sub_10048A774(_QWORD *a1, char **a2, char *a3, unint64_t a4)
{
  unint64_t v7;
  char *v8;
  char **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char **v18;
  char *v19;
  char **v20;
  char *v21;
  _QWORD v22[2];
  char *v23;
  uint64_t v24;

  v20 = a2;
  v21 = a3;
  v7 = a1[5];
  if (v7 >= a4)
  {
    v14 = a1[1];
    v15 = (char *)(v14 + 8 * (a1[4] >> 9));
    if (a1[2] == v14)
      v16 = 0;
    else
      v16 = *(_QWORD *)v15 + 8 * (a1[4] & 0x1FFLL);
    v22[0] = a2;
    v22[1] = a3;
    v18 = (char **)sub_1002A6178((uint64_t)v22, a4);
    v23 = v15;
    v24 = v16;
    sub_1002A7F8C(a2, a3, v18, v19, (uint64_t)&v23);
    return (_QWORD *)sub_1002A7E94((uint64_t)a1, v23, v24);
  }
  else
  {
    v9 = (char **)sub_1002A6178((uint64_t)&v20, v7);
    v10 = (uint64_t *)v8;
    v11 = a1[1];
    if (a1[2] == v11)
      v12 = 0;
    else
      v12 = *(_QWORD *)(v11 + 8 * (a1[4] >> 9)) + 8 * (a1[4] & 0x1FFLL);
    v23 = (char *)(v11 + 8 * (a1[4] >> 9));
    v24 = v12;
    sub_1002A7F8C(v20, v21, v9, v8, (uint64_t)&v23);
    return sub_10048A898(a1, v9, v10, a4 - a1[5]);
  }
}

_QWORD *sub_10048A898(_QWORD *a1, _QWORD *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD v23[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = ((v9 - v8) << 6) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_10048A9C8(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 9));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 8 * (v11 & 0x1FF);
  v23[0] = v8 + 8 * (v11 >> 9);
  v23[1] = v14;
  result = sub_1002A6178((uint64_t)v23, a4);
  if (v14 != v16)
  {
    v17 = a1[5];
    do
    {
      if (v13 == result)
        v18 = v16;
      else
        v18 = *v13 + 4096;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = (_QWORD *)v14;
        do
        {
          v20 = *a3++;
          *v19++ = v20;
          if ((uint64_t *)((char *)a3 - *a2) == (uint64_t *)4096)
          {
            v21 = (uint64_t *)a2[1];
            ++a2;
            a3 = v21;
          }
        }
        while (v19 != (_QWORD *)v18);
      }
      v17 += (v18 - v14) >> 3;
      if (v13 == result)
        break;
      v22 = v13[1];
      ++v13;
      v14 = v22;
    }
    while (v22 != v16);
    a1[5] = v17;
  }
  return result;
}

void sub_10048A9C8(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = a1[4];
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10007ABA0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_1002A61DC(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_1002A62F0((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 511;
          else
            v64 = 512;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10007ABA0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10007ABA0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_1002A640C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10007ABA0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1002A6520((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_10048AEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10048AF1C(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t *v11;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char *)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
  }
  else
  {
    v8 = (uint64_t *)(*(_QWORD *)v7 + 8 * (v4 & 0x1FF));
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 9));
    v11 = (uint64_t *)(*(_QWORD *)v10 + 8 * (v9 & 0x1FF));
  }
  sub_10048AFC4((_QWORD *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_10048AFB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002A4304(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10048AFC4(_QWORD *a1, char *a2, uint64_t *a3, char *a4, uint64_t *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = (((uint64_t)a5 - *(_QWORD *)a4) >> 3) + ((a4 - a2) << 6) - (((uint64_t)a3 - *(_QWORD *)a2) >> 3);
  return sub_10048A898(a1, a2, a3, v5);
}

void sub_10048AFF8()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  sub_1000160D0(&unk_1009994C0);
  __cxa_atexit((void (*)(void *))sub_100069BDC, &unk_1009994C0, (void *)&_mh_execute_header);
  *(_OWORD *)&qword_100999508 = 0u;
  unk_100999518 = 0u;
  xmmword_100999528 = 0u;
  __cxa_atexit((void (*)(void *))sub_1004854BC, &qword_100999508, (void *)&_mh_execute_header);
  sub_1000160D0(&unk_100999538);
  __cxa_atexit((void (*)(void *))sub_100069BDC, &unk_100999538, (void *)&_mh_execute_header);
  qword_100992C58 = 0;
  qword_100992C60 = 0;
  qword_100992C50 = 0;
  __cxa_atexit((void (*)(void *))sub_1004854C0, &qword_100992C50, (void *)&_mh_execute_header);
  qword_100992C78 = 0;
  qword_100992C70 = 0;
  qword_100992C68 = (uint64_t)&qword_100992C70;
  __cxa_atexit((void (*)(void *))sub_1004854F0, &qword_100992C68, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

_QWORD *sub_10048B0E0(_QWORD *a1)
{
  *a1 = off_1009311F8;
  sub_1000160D0(a1 + 1);
  a1[9] = 0;
  return a1;
}

_QWORD *sub_10048B114(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint8_t v5[16];

  *a1 = off_1009311F8;
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SDP Manager deconstructor", v5, 2u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_1009312F8);
  sub_100069060((uint64_t)off_100977A50 + 64, (uint64_t)a1);
  v3 = a1[9];
  if (v3)
  {
    sub_100475CC8(v3);
    operator delete();
  }
  sub_100069BDC(a1 + 1);
  return a1;
}

void sub_10048B1F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100069BDC(v1 + 8);
  _Unwind_Resume(a1);
}

void sub_10048B208(_QWORD *a1)
{
  sub_10048B114(a1);
  operator delete();
}

void sub_10048B22C()
{
  operator new();
}

void sub_10048B2AC()
{
  operator delete();
}

void sub_10048B2D0(uint64_t a1)
{
  NSObject *v2;
  _QWORD v3[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v3[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SDP Manager stackDidStart", (uint8_t *)v3, 2u);
  }
  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 8);
  sub_100475868(*(_QWORD *)(a1 + 72), QOS_CLASS_USER_INITIATED);
  *(_BYTE *)(a1 + 80) = 1;
  operator new();
}

void sub_10048B3B8()
{
  operator delete();
}

void sub_10048B3F0(uint64_t a1)
{
  NSObject *v2;
  uint8_t buf[8];
  uint64_t v4;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SdpManager::stackWillStop enter", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v4 = 0;
  sub_10003415C((uint64_t)buf, a1 + 8);
  sub_100475C60(*(_QWORD *)(a1 + 72));
  *(_BYTE *)(a1 + 80) = 0;
  operator new();
}

void sub_10048B514()
{
  operator delete();
}

uint64_t sub_10048B54C(uint64_t a1, _BYTE *a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 8);
  sub_10006BB10(*(_QWORD *)(a1 + 72), a2);
  return sub_100034234((uint64_t)v5);
}

void sub_10048B598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10048B5AC()
{
  operator new();
}

void sub_10048B658()
{
  operator delete();
}

void sub_10048B67C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  NSObject *v3;
  void **v5;
  unsigned int v6;
  NSObject *v7;
  void **v8;
  uint64_t v9;
  unsigned int v10;
  NSObject *v11;
  void **v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  char v19;
  char v20;
  int v21;
  _BYTE buf[12];
  __int16 v23;
  unsigned int v24;
  char v25;
  void *__p[2];
  char v27;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = qword_1009997E8;
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8((uint64_t)v2, __p);
      v5 = v27 >= 0 ? __p : (void **)__p[0];
      v6 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v5;
      v23 = 1024;
      v24 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "SDP query has completed for device %{public}s with status %d", buf, 0x12u);
      if (v27 < 0)
        operator delete(__p[0]);
    }
    v21 = 0;
    sub_10043FA40((uint64_t)v2, &v21);
    if (!*(_DWORD *)(a2 + 24))
    {
      sub_1004539C0((uint64_t)v2, 1);
      if (sub_10043E93C(v2))
      {
        v7 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8((uint64_t)v2, __p);
          v8 = v27 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Identification - SDP complete. Checking if we need to generate hash for device %{public}s", buf, 0xCu);
          if (v27 < 0)
            operator delete(__p[0]);
        }
        sub_100440984((uint64_t)v2);
        sub_10044CD80((uint64_t)v2);
      }
    }
    v20 = 0;
    v9 = sub_100027F68();
    sub_100091AE8(__p, "SDPMirroring");
    sub_100091AE8(buf, "DisableSDPMirroring");
    (*(void (**)(uint64_t, void **, _BYTE *, char *))(*(_QWORD *)v9 + 72))(v9, __p, buf, &v20);
    if (v25 < 0)
      operator delete(*(void **)buf);
    if (v27 < 0)
      operator delete(__p[0]);
    v19 = 0;
    sub_100043758(&v19);
    if (sub_1004482E0((uint64_t)v2))
    {
      v10 = sub_100448368((uint64_t)v2);
      v11 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8((uint64_t)v2, __p);
        v12 = v27 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v12;
        v23 = 1024;
        v24 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "We have a stalled incoming SDP request from device %{public}s with cid: %d. Responding to stalled request", buf, 0x12u);
        if (v27 < 0)
          operator delete(__p[0]);
      }
      sub_100248C68(*(_DWORD *)(a2 + 24) == 0, v10);
      sub_10044829C((uint64_t)v2, 0);
      sub_100448324((uint64_t)v2, 0);
    }
    v13 = sub_100185F70((uint64_t)(v2 + 128), v21);
    if (v13)
    {
      v14 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Set Remote Device class failed with %{bluetooth:OI_STATUS}u", (uint8_t *)__p, 8u);
      }
    }
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_1009312F8);
    sub_1004A84C8((uint64_t)off_100977A50, (uint64_t)(v2 + 128));
    sub_10004339C(&v19);
    if (!v20)
      sub_10044CCA8((uint64_t)v2, 0);
    v15 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 384))(v15))
    {
      v16 = sub_10043E98C((uint64_t)v2);
      v17 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Number of services %d found using PSM/RFCOMM", (uint8_t *)__p, 8u);
      }
    }
    v18 = *(_QWORD *)(a2 + 16);
    if (v18)
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v18 + 16))(v18, *(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 24));
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
    sub_100043728(&v19);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
  {
    sub_1006F5E68(v3);
  }
}

void sub_10048BAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_100043728(&a11);
  _Unwind_Resume(a1);
}

void sub_10048BB30(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void **v4;
  void *__p[2];
  char v6;
  uint8_t buf[4];
  void **v8;

  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    if (v6 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Running SDP on device %{public}s", buf, 0xCu);
    if (v6 < 0)
      operator delete(__p[0]);
  }
  operator new();
}

void sub_10048BC9C()
{
  operator new();
}

void sub_10048BD10()
{
  operator delete();
}

void sub_10048BD34()
{
  operator new();
}

void sub_10048BD94()
{
  operator delete();
}

void sub_10048BDB8()
{
  operator new();
}

void sub_10048BE20()
{
  operator delete();
}

void sub_10048BE44()
{
  operator new();
}

void sub_10048BEB4()
{
  operator delete();
}

void sub_10048BED8()
{
  if (qword_10097B080 != -1)
    dispatch_once(&qword_10097B080, &stru_100931318);
  sub_10048B5AC();
}

void sub_10048BF20(uint64_t a1)
{
  if (qword_10097B080 != -1)
    dispatch_once(&qword_10097B080, &stru_100931318);
  sub_10048B67C(a1, *(_QWORD *)(a1 + 16));
}

void sub_10048BF68(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a1 + 24) = a3;
  if (qword_10097B080 != -1)
    dispatch_once(&qword_10097B080, &stru_100931318);
  operator new();
}

void sub_10048BFF0()
{
  operator new();
}

_BYTE *sub_10048C048(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  uint64_t v5;
  int v7;
  __int16 v8;
  char v9;

  v9 = 0;
  sub_100043758(&v9);
  v2 = sub_100185EF4(*(_QWORD *)(a1 + 16));
  sub_10004339C(&v9);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100931338);
  v3 = *(int **)(a1 + 16);
  v4 = *((_WORD *)v3 + 2);
  v7 = *v3;
  v8 = v4;
  v5 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v7, 1);
  if (v5)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100931338);
    sub_100470B08((uint64_t)off_1009778E0, v5, v2);
    if (!sub_100444790(v5))
    {
      *(_BYTE *)(v5 + 784) = 1;
      if (qword_100977A78 != -1)
        dispatch_once(&qword_100977A78, &stru_100931358);
      sub_10049B904((uint64_t)off_100977A70, v5);
      operator new();
    }
  }
  return sub_100043728(&v9);
}

void sub_10048C250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_10048C274()
{
  operator delete();
}

void sub_10048C28C()
{
  operator delete();
}

void sub_10048C2A4()
{
  operator delete();
}

void sub_10048C2BC()
{
  operator delete();
}

void sub_10048C2D0(id a1)
{
  operator new();
}

void sub_10048C310()
{
  operator delete();
}

void sub_10048C334(id a1)
{
  operator new();
}

void sub_10048C384()
{
  operator delete();
}

void sub_10048C3A8(id a1)
{
  operator new();
}

void sub_10048C3E8()
{
  operator delete();
}

void sub_10048C40C(id a1)
{
  operator new();
}

void sub_10048C44C()
{
  operator delete();
}

void sub_10048C470(id a1)
{
  operator new();
}

void sub_10048C4B0()
{
  operator delete();
}

uint64_t sub_10048C4D4(uint64_t a1)
{
  sub_10001A82C(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_10048C4FC(uint64_t a1)
{
  sub_10001A82C(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_10048C524(uint64_t a1)
{
  sub_10001A82C(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void **sub_10048C54C(void **a1)
{
  void **v3;

  v3 = a1;
  sub_10048C9B4(&v3);
  return a1;
}

uint64_t sub_10048C580(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      sub_10048C5FC((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_10048C5E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001A82C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10048C5FC(uint64_t **a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v10 = 0;
  v11 = 0;
  v6 = sub_10048C684(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    sub_100004078(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_10048C684(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t sub_10048C82C(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      sub_10048C5FC((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_10048C890(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001A82C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_10048C8A8(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      sub_10048C5FC((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_10048C90C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001A82C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *sub_10048C924(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  v4 = result[1];
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a2 + v7;
      *(_QWORD *)(v4 + v7) = *(_QWORD *)(a2 + v7);
      result = sub_1002D70C0((_QWORD *)(v4 + v7 + 8), a2 + v7 + 8);
      *(_DWORD *)(v4 + v7 + 32) = *(_DWORD *)(a2 + v7 + 32);
      v7 += 40;
    }
    while (v8 + 40 != a3);
    v4 += v7;
  }
  v3[1] = v4;
  return result;
}

void sub_10048C9AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10048C9B4(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_10048C9F4((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_10048C9F4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    v4 = *(void **)(i - 32);
    if (v4)
    {
      *(_QWORD *)(i - 24) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void sub_10048CA40()
{
  void *v0;
  _OWORD *v1;
  _OWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  _OWORD *v8;
  _OWORD *v9;
  _OWORD *v10;
  _DWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _QWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  void *v26;
  _OWORD __dst[21];
  __int128 v28;
  int v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  _OWORD *v33;
  int v34;
  __int128 v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  _OWORD *v41;
  int v42;
  __int128 v43;
  __int128 v44;
  int v45;
  __int128 v46;
  __int128 v47;
  int v48;
  __int128 v49;
  __int128 v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  _DWORD *v58;
  _DWORD *v59;
  _DWORD *v60;
  int v61;
  uint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  int v66;
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  _DWORD *v70;
  int v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  int v76;
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  char *v80;
  int v81;
  uint64_t v82;
  _DWORD *v83;
  char *v84;
  char *v85;
  int v86;
  uint64_t v87;
  _DWORD *v88;
  char *v89;
  char *v90;
  int v91;
  uint64_t v92;
  _DWORD *v93;
  char *v94;
  char *v95;
  int v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  int v101;
  uint64_t v102;
  _DWORD *v103;
  char *v104;
  char *v105;
  int v106;
  uint64_t v107;

  v0 = objc_autoreleasePoolPush();
  LODWORD(__dst[0]) = 0;
  WORD2(__dst[0]) = 1;
  DWORD2(__dst[0]) = 1;
  WORD6(__dst[0]) = 2;
  sub_10048C580((uint64_t)&unk_100999578, (int *)__dst, 2);
  __cxa_atexit((void (*)(void *))sub_10048C4D4, &unk_100999578, (void *)&_mh_execute_header);
  __dst[0] = xmmword_1007417A0;
  __dst[1] = unk_1007417B0;
  *(_QWORD *)&__dst[2] = 0x57E00000004;
  sub_10048C82C((uint64_t)&unk_100999590, (int *)__dst, 5);
  __cxa_atexit((void (*)(void *))sub_10048C4FC, &unk_100999590, (void *)&_mh_execute_header);
  memcpy(__dst, &unk_1007417C8, sizeof(__dst));
  sub_10048C8A8((uint64_t)&unk_1009995A8, (int *)__dst, 42);
  __cxa_atexit((void (*)(void *))sub_10048C524, &unk_1009995A8, (void *)&_mh_execute_header);
  memset(__dst, 0, 36);
  *((_QWORD *)&__dst[2] + 1) = 0x100000001;
  memset(&__dst[3], 0, 28);
  __dst[5] = 0x100000001uLL;
  __dst[6] = 0uLL;
  v1 = operator new(0x10uLL);
  *((_QWORD *)&__dst[5] + 1) = v1;
  *v1 = xmmword_100741740;
  *(_QWORD *)&__dst[6] = v1 + 1;
  *((_QWORD *)&__dst[6] + 1) = v1 + 1;
  LODWORD(__dst[7]) = 1;
  *(_OWORD *)((char *)&__dst[7] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[8] + 8) = 0u;
  v2 = operator new(0x30uLL);
  *((_QWORD *)&__dst[8] + 1) = v2 + 3;
  *(_QWORD *)&__dst[9] = v2 + 3;
  *v2 = xmmword_100741918;
  v2[1] = unk_100741928;
  v2[2] = xmmword_100741938;
  *(_QWORD *)&__dst[8] = v2;
  DWORD2(__dst[9]) = 2;
  memset(&__dst[10], 0, 32);
  v3 = operator new(0x38uLL);
  *(_QWORD *)&__dst[11] = v3 + 7;
  *((_QWORD *)&__dst[11] + 1) = v3 + 7;
  v3[6] = 0x1200000011;
  *(_OWORD *)v3 = xmmword_100741948;
  *((_OWORD *)v3 + 1) = unk_100741958;
  *((_OWORD *)v3 + 2) = xmmword_100741968;
  *((_QWORD *)&__dst[10] + 1) = v3;
  LODWORD(__dst[12]) = 3;
  *((_QWORD *)&__dst[12] + 1) = 0x100000001;
  memset(&__dst[13], 0, 24);
  v4 = operator new(0x38uLL);
  *((_QWORD *)&__dst[13] + 1) = v4 + 7;
  *(_QWORD *)&__dst[14] = v4 + 7;
  v4[6] = 0x1200000011;
  *(_OWORD *)v4 = xmmword_100741948;
  *((_OWORD *)v4 + 1) = unk_100741958;
  *((_OWORD *)v4 + 2) = xmmword_100741968;
  *(_QWORD *)&__dst[13] = v4;
  DWORD2(__dst[14]) = 3;
  memset(&__dst[15], 0, 32);
  v5 = operator new(0x20uLL);
  *(_QWORD *)&__dst[16] = v5 + 2;
  *((_QWORD *)&__dst[16] + 1) = v5 + 2;
  *v5 = xmmword_100741980;
  v5[1] = unk_100741990;
  *((_QWORD *)&__dst[15] + 1) = v5;
  LODWORD(__dst[17]) = 4;
  *((_QWORD *)&__dst[17] + 1) = 0x100000001;
  memset(&__dst[18], 0, 24);
  v6 = operator new(0x20uLL);
  *((_QWORD *)&__dst[18] + 1) = v6 + 2;
  *(_QWORD *)&__dst[19] = v6 + 2;
  *v6 = xmmword_100741980;
  v6[1] = unk_100741990;
  *(_QWORD *)&__dst[18] = v6;
  DWORD2(__dst[19]) = 4;
  __dst[20] = 0u;
  v28 = 0u;
  v7 = operator new(0x10uLL);
  *((_QWORD *)&__dst[20] + 1) = v7;
  *v7 = xmmword_100741750;
  *(_QWORD *)&v28 = v7 + 1;
  *((_QWORD *)&v28 + 1) = v7 + 1;
  v29 = 5;
  v30 = 0x100000001;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v8 = operator new(0x10uLL);
  v31 = v8;
  *v8 = xmmword_100741750;
  v32 = v8 + 1;
  v33 = v8 + 1;
  v34 = 5;
  v35 = 0u;
  v36 = 0u;
  v9 = operator new(0x10uLL);
  *((_QWORD *)&v35 + 1) = v9;
  *v9 = xmmword_100741760;
  *(_QWORD *)&v36 = v9 + 1;
  *((_QWORD *)&v36 + 1) = v9 + 1;
  v37 = 6;
  v38 = 0x100000001;
  v40 = 0;
  v41 = 0;
  v39 = 0;
  v10 = operator new(0x10uLL);
  v39 = v10;
  *v10 = xmmword_100741760;
  v40 = v10 + 1;
  v41 = v10 + 1;
  v42 = 6;
  v43 = 0u;
  v44 = 0u;
  v11 = operator new(0xCuLL);
  *(_QWORD *)&v44 = v11 + 3;
  *((_QWORD *)&v44 + 1) = v11 + 3;
  *(_QWORD *)v11 = 0x1700000016;
  v11[2] = 24;
  *((_QWORD *)&v43 + 1) = v11;
  v45 = 7;
  v46 = 0u;
  v47 = 0u;
  v12 = operator new(8uLL);
  *((_QWORD *)&v46 + 1) = v12;
  *v12 = 0x1800000017;
  *((_QWORD *)&v47 + 1) = v12 + 1;
  *(_QWORD *)&v47 = v12 + 1;
  v48 = 8;
  v49 = 0u;
  v50 = 0u;
  v13 = operator new(8uLL);
  *((_QWORD *)&v49 + 1) = v13;
  *v13 = 0x1500000014;
  *((_QWORD *)&v50 + 1) = v13 + 1;
  *(_QWORD *)&v50 = v13 + 1;
  v51 = 9;
  v52 = 0x200000001;
  v53 = 0;
  v55 = 0;
  v54 = 0;
  v14 = operator new(8uLL);
  v53 = v14;
  *v14 = 0x1D0000001CLL;
  v55 = v14 + 1;
  v54 = v14 + 1;
  v56 = 11;
  v57 = 0x200000001;
  v58 = 0;
  v60 = 0;
  v59 = 0;
  v15 = operator new(4uLL);
  v58 = v15;
  *v15 = 29;
  v60 = v15 + 1;
  v59 = v15 + 1;
  v61 = 12;
  v62 = 0x200000001;
  v63 = 0;
  v65 = 0;
  v64 = 0;
  v16 = operator new(4uLL);
  v63 = v16;
  *v16 = 30;
  v65 = v16 + 1;
  v64 = v16 + 1;
  v66 = 13;
  v67 = 0x200000001;
  v68 = 0;
  v70 = 0;
  v69 = 0;
  v17 = operator new(4uLL);
  v68 = v17;
  *v17 = 31;
  v70 = v17 + 1;
  v69 = v17 + 1;
  v71 = 14;
  v72 = 0x200000001;
  v73 = 0;
  v75 = 0;
  v74 = 0;
  v18 = operator new(8uLL);
  v73 = v18;
  *v18 = 0x2100000020;
  v75 = v18 + 1;
  v74 = v18 + 1;
  v76 = 15;
  v77 = 0x200000001;
  v78 = 0;
  v80 = 0;
  v79 = 0;
  v19 = operator new(0x18uLL);
  v78 = v19;
  v80 = (char *)(v19 + 3);
  v19[2] = 0x2100000020;
  *(_OWORD *)v19 = xmmword_1007419A0;
  v79 = (char *)(v19 + 3);
  v81 = 16;
  v82 = 0x300000001;
  v83 = 0;
  v85 = 0;
  v84 = 0;
  v20 = operator new(0x14uLL);
  v83 = v20;
  v85 = (char *)(v20 + 5);
  v20[4] = 38;
  *(_OWORD *)v20 = xmmword_1007419B8;
  v84 = (char *)(v20 + 5);
  v86 = 17;
  v87 = 0x300000001;
  v88 = 0;
  v90 = 0;
  v89 = 0;
  v21 = operator new(0xCuLL);
  v88 = v21;
  v90 = (char *)(v21 + 3);
  *(_QWORD *)v21 = 0x2500000024;
  v21[2] = 38;
  v89 = (char *)(v21 + 3);
  v91 = 18;
  v92 = 0x400000001;
  v93 = 0;
  v95 = 0;
  v94 = 0;
  v22 = operator new(0xCuLL);
  v93 = v22;
  v95 = (char *)(v22 + 3);
  *(_QWORD *)v22 = 0x2800000027;
  v22[2] = 41;
  v94 = (char *)(v22 + 3);
  v96 = 19;
  v97 = 0x300000001;
  v98 = 0;
  v100 = 0;
  v99 = 0;
  v23 = operator new(8uLL);
  v98 = v23;
  *v23 = 0x2300000022;
  v100 = v23 + 1;
  v99 = v23 + 1;
  v101 = 20;
  v102 = 0x300000001;
  v103 = 0;
  v105 = 0;
  v104 = 0;
  v24 = operator new(0xCuLL);
  v103 = v24;
  v105 = (char *)(v24 + 3);
  *(_QWORD *)v24 = 0x2500000024;
  v24[2] = 38;
  v104 = (char *)(v24 + 3);
  v106 = 21;
  qword_1009995C8 = 0;
  qword_1009995D0 = 0;
  qword_1009995C0 = 0;
  qword_1009995C0 = (uint64_t)operator new(0x410uLL);
  qword_1009995C8 = qword_1009995C0;
  qword_1009995D0 = qword_1009995C0 + 1040;
  sub_10048C924(&qword_1009995C0, (uint64_t)__dst, (uint64_t)&v107);
  v25 = 1040;
  do
  {
    v26 = *(void **)((char *)&__dst[-2] + v25);
    if (v26)
    {
      *(_QWORD *)((char *)&__dst[-1] + v25 - 8) = v26;
      operator delete(v26);
    }
    v25 -= 40;
  }
  while (v25);
  __cxa_atexit((void (*)(void *))sub_10048C54C, &qword_1009995C0, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_10048D234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  char *v17;
  void *v19;

  while (1)
  {
    v19 = (void *)*((_QWORD *)v17 - 4);
    if (v19)
    {
      *((_QWORD *)v17 - 3) = v19;
      operator delete(v19);
    }
    v17 -= 40;
    if (v17 == &a17)
      _Unwind_Resume(exception_object);
  }
}

void sub_10048D2BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  void *v18;

  v17 = 1040;
  while (1)
  {
    v18 = *(void **)(&a17 + v17 - 32);
    if (v18)
    {
      *(_QWORD *)(&a17 + v17 - 24) = v18;
      operator delete(v18);
    }
    v17 -= 40;
    if (!v17)
      JUMPOUT(0x10048D2B4);
  }
}

void sub_10048D2E8()
{
  JUMPOUT(0x10048D2B4);
}

uint64_t sub_10048D2F0(uint64_t a1, char *a2, int a3)
{
  *(_QWORD *)a1 = off_1009313A8;
  sub_100091AE8((_QWORD *)(a1 + 8), a2);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 32) = a3;
  *(_OWORD *)(a1 + 56) = 0u;
  sub_1000160D0(a1 + 72);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  sub_1000160D0(a1 + 184);
  *(_QWORD *)(a1 + 248) = 0;
  sub_1000160D0(a1 + 256);
  *(_BYTE *)(a1 + 320) = 0;
  return a1;
}

void sub_10048D388(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  void *v9;

  v7 = v4;
  sub_100069BDC(v7);
  sub_10048FB38(v5);
  sub_100069BDC(v3);
  v9 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 48) = v9;
    operator delete(v9);
  }
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10048D3E0(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_1009313A8;
  v2 = *(_QWORD *)(a1 + 248);
  if (v2)
  {
    sub_100475CC8(v2);
    operator delete();
  }
  sub_100069BDC(a1 + 256);
  sub_100069BDC(a1 + 184);
  sub_10048FB38((_QWORD *)(a1 + 136));
  sub_100069BDC(a1 + 72);
  v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_10048D474(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 184);
  v2 = *(_QWORD *)(a1 + 248);
  if (!v2)
    operator new();
  sub_100034234((uint64_t)v4);
  return v2;
}

void sub_10048D504()
{
  operator delete();
}

void sub_10048D538(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  v3 = sub_10048D474(a1);
  sub_100041A34(v3, v4);

}

void sub_10048D578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL sub_10048D58C(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;

  v3 = sub_10048D474(a1);
  return sub_10006BB10(v3, a2);
}

void sub_10048D5B0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  _QWORD *v25;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = sub_1004809B4(*(_DWORD *)(a2 + 248));
    v6 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v6 = (_QWORD *)*v6;
    v22 = 136446466;
    v23 = v5;
    v24 = 2082;
    v25 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Registering \"%{public}s\" profile in %{public}s", (uint8_t *)&v22, 0x16u);
  }
  v7 = *(_QWORD **)(a1 + 40);
  v8 = *(_QWORD **)(a1 + 48);
  v9 = v7;
  if (v7 != v8)
  {
    while (*v9 != a2)
    {
      if (++v9 == v8)
      {
        v9 = *(_QWORD **)(a1 + 48);
        break;
      }
    }
  }
  if (v9 == v8)
  {
    v10 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v8 >= v10)
    {
      v12 = v8 - v7;
      if ((unint64_t)(v12 + 1) >> 61)
        abort();
      v13 = v10 - (_QWORD)v7;
      v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
        v16 = (char *)sub_10007ABA0(a1 + 56, v15);
      else
        v16 = 0;
      v17 = &v16[8 * v12];
      v18 = &v16[8 * v15];
      *(_QWORD *)v17 = a2;
      v11 = v17 + 8;
      v20 = *(char **)(a1 + 40);
      v19 = *(char **)(a1 + 48);
      if (v19 != v20)
      {
        do
        {
          v21 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *((_QWORD *)v17 - 1) = v21;
          v17 -= 8;
        }
        while (v19 != v20);
        v19 = *(char **)(a1 + 40);
      }
      *(_QWORD *)(a1 + 40) = v17;
      *(_QWORD *)(a1 + 48) = v11;
      *(_QWORD *)(a1 + 56) = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v8 = a2;
      v11 = v8 + 1;
    }
    *(_QWORD *)(a1 + 48) = v11;
  }
}

uint64_t sub_10048D760(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *i;
  _QWORD v6[2];
  _QWORD v7[2];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F5EA8();
    return 0;
  }
  else
  {
    v7[0] = 0;
    v7[1] = 0;
    sub_10003415C((uint64_t)v7, a1 + 256);
    *(_BYTE *)(a1 + 320) = 1;
    v6[0] = 0;
    v6[1] = 0;
    sub_10003415C((uint64_t)v6, a1 + 184);
    v3 = *(_QWORD *)(a1 + 248);
    if (v3)
      sub_100475868(v3, QOS_CLASS_USER_INITIATED);
    sub_100034264((uint64_t)v6);
    for (i = *(uint64_t **)(a1 + 40); i != *(uint64_t **)(a1 + 48); ++i)
    {
      v2 = sub_10048080C(*i, a1);
      if ((_DWORD)v2)
        goto LABEL_12;
    }
    v2 = 0;
LABEL_12:
    sub_100034234((uint64_t)v6);
    sub_100034234((uint64_t)v7);
  }
  return v2;
}

void sub_10048D854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10048D87C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _BOOL4 v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v8[2];
  _BYTE buf[22];

  v2 = *(_QWORD *)(a1 + 64) - 1;
  *(_QWORD *)(a1 + 64) = v2;
  v3 = qword_1009997E8;
  v4 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      v5 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v5 = (_QWORD *)*v5;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v5;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s still has %zu profile(s) pending disconnection", buf, 0x16u);
    }
  }
  else
  {
    if (v4)
    {
      v6 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v6 = (_QWORD *)*v6;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s has stopped", buf, 0xCu);
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    sub_10003415C((uint64_t)buf, a1 + 256);
    *(_BYTE *)(a1 + 320) = 0;
    sub_100034264((uint64_t)buf);
    v8[0] = 0;
    v8[1] = 0;
    sub_10003415C((uint64_t)v8, a1 + 184);
    v7 = *(_QWORD *)(a1 + 248);
    if (v7)
      sub_100475C60(v7);
    sub_100034264((uint64_t)v8);
    if (qword_100977A78 != -1)
      dispatch_once(&qword_100977A78, &stru_100931508);
    sub_100493F98((uint64_t)off_100977A70, a1);
    sub_100034234((uint64_t)v8);
    sub_100034234((uint64_t)buf);
  }
}

void sub_10048DA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10048DA54(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  _QWORD *v18;
  uint64_t v19;
  NSObject *v20;
  _QWORD *v21;
  _QWORD v23[2];
  _QWORD v24[2];
  uint8_t v25[4];
  _QWORD *v26;
  _BYTE buf[22];

  v24[0] = 0;
  v24[1] = 0;
  sub_10003415C((uint64_t)v24, a1 + 256);
  v2 = qword_1009997E8;
  if (*(_BYTE *)(a1 + 320))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopping %{public}s and its registered profiles", buf, 0xCu);
    }
    sub_100034264((uint64_t)v24);
    v23[0] = 0;
    v23[1] = 0;
    sub_10003415C((uint64_t)v23, a1 + 72);
    v4 = *(void ***)(a1 + 144);
    v5 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 176) = 0;
    v6 = v5 - (_QWORD)v4;
    if (v6 >= 0x11)
    {
      do
      {
        operator delete(*v4);
        v7 = *(_QWORD *)(a1 + 152);
        v4 = (void **)(*(_QWORD *)(a1 + 144) + 8);
        *(_QWORD *)(a1 + 144) = v4;
        v6 = v7 - (_QWORD)v4;
      }
      while (v6 > 0x10);
    }
    if (v6 >> 3 == 1)
    {
      v8 = 51;
    }
    else
    {
      if (v6 >> 3 != 2)
      {
LABEL_16:
        sub_100034264((uint64_t)v23);
        v10 = *(uint64_t **)(a1 + 40);
        v11 = *(_QWORD *)(a1 + 48) - (_QWORD)v10;
        v12 = v11 >> 3;
        *(_QWORD *)(a1 + 64) = v11 >> 3;
        if (v11)
        {
          do
          {
            v13 = sub_100480E84(*v10);
            v14 = v13;
            if (v13 != 113)
            {
              if (v13)
              {
                v15 = qword_1009997E8;
                if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
                {
                  v16 = a1 + 8;
                  if (*(char *)(a1 + 31) < 0)
                    v16 = *(_QWORD *)(a1 + 8);
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = v16;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v14;
                  _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Failed to stop %{public}s with result %d", buf, 0x12u);
                }
              }
              else
              {
                --*(_QWORD *)(a1 + 64);
              }
            }
            ++v10;
          }
          while (v10 != *(uint64_t **)(a1 + 48));
          v12 = *(_QWORD *)(a1 + 64);
        }
        if (v12)
        {
          v17 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            v18 = (_QWORD *)(a1 + 8);
            if (*(char *)(a1 + 31) < 0)
              v18 = (_QWORD *)*v18;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = v18;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v12;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}s still has %zu profile(s) pending disconnection - delaying stop", buf, 0x16u);
          }
          v9 = 113;
        }
        else
        {
          sub_100034188((uint64_t)v24);
          *(_BYTE *)(a1 + 320) = 0;
          sub_100034264((uint64_t)v24);
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          sub_10003415C((uint64_t)buf, a1 + 184);
          v19 = *(_QWORD *)(a1 + 248);
          if (v19)
            sub_100475C60(v19);
          sub_100034264((uint64_t)buf);
          v20 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            v21 = (_QWORD *)(a1 + 8);
            if (*(char *)(a1 + 31) < 0)
              v21 = (_QWORD *)*v21;
            *(_DWORD *)v25 = 136446210;
            v26 = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%{public}s has stopped", v25, 0xCu);
          }
          sub_100034234((uint64_t)buf);
          v9 = 0;
        }
        sub_100034234((uint64_t)v23);
        goto LABEL_40;
      }
      v8 = 102;
    }
    *(_QWORD *)(a1 + 168) = v8;
    goto LABEL_16;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F5F10();
  v9 = 0;
LABEL_40:
  sub_100034234((uint64_t)v24);
  return v9;
}

void sub_10048DDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_100034234((uint64_t)va);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10048DE0C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 256);
  v2 = *(unsigned __int8 *)(a1 + 320);
  sub_100034234((uint64_t)v4);
  return v2;
}

BOOL sub_10048DE50(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a2)
  {
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006F5F78(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  return sub_10043F65C(a2, *(_DWORD *)(a1 + 32)) == 4;
}

uint64_t sub_10048DEB8(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void ***v16;
  void **v17;
  uint64_t v18;
  NSObject *v19;
  _QWORD *v20;
  void *v21;
  NSObject *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void **v26;
  uint64_t v27;
  void **v28;
  int v29;
  NSObject *v30;
  _QWORD *v31;
  void *v32;
  NSObject *v33;
  _QWORD *v34;
  void *p_p;
  _QWORD *v37;
  void *v38;
  void *__p;
  int v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  _QWORD v45[2];
  uint8_t buf[4];
  _QWORD *v47;
  __int16 v48;
  void *v49;

  if (!a2)
  {
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006F5F78(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) & 1) != 0)
  {
    if (((*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)a1 + 48))(a1, a2) & 1) != 0)
    {
      if (((*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)a1 + 56))(a1, a2) & 1) != 0)
      {
        v45[0] = 0;
        v45[1] = 0;
        sub_10003415C((uint64_t)v45, a1 + 72);
        v12 = *(_QWORD *)(a1 + 176);
        if (v12)
        {
          v13 = *(_QWORD *)(a1 + 168);
          v14 = *(_QWORD *)(a1 + 144);
          v15 = *(_QWORD *)(a1 + 152);
          v16 = (void ***)(v14 + 8 * (v13 / 0x66));
          if (v15 == v14)
            v17 = 0;
          else
            v17 = &(*v16)[5 * (v13 % 0x66)];
          v23 = v13 + v12;
          v24 = v23 / 0x66;
          v25 = v23 % 0x66;
LABEL_26:
          v26 = v17 - 510;
          while (1)
          {
            v27 = v15 == v14 ? 0 : *(_QWORD *)(v14 + 8 * v24) + 40 * v25;
            if (v17 == (void **)v27)
              break;
            if (*v17 == a2)
            {
              v33 = qword_1009997E8;
              if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
              {
                v34 = (_QWORD *)(a1 + 8);
                if (*(char *)(a1 + 31) < 0)
                  v34 = (_QWORD *)*v34;
                sub_10043E5F8((uint64_t)a2, &__p);
                if (v41 >= 0)
                  p_p = &__p;
                else
                  p_p = __p;
                *(_DWORD *)buf = 136446466;
                v47 = v34;
                v48 = 2082;
                v49 = p_p;
                _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "%{public}s is currently processing another connection for device %{public}s - ignoring duplicate request", buf, 0x16u);
                if (SHIBYTE(v41) < 0)
                  operator delete(__p);
              }
              v18 = 302;
              goto LABEL_54;
            }
            v17 += 5;
            v26 += 5;
            if (*v16 == v26)
            {
              v28 = v16[1];
              ++v16;
              v17 = v28;
              goto LABEL_26;
            }
          }
        }
        v29 = *(_DWORD *)(a1 + 32);
        __p = a2;
        v40 = 0;
        v41 = 0;
        v42 = v29;
        v43 = 2;
        v44 = mach_continuous_time();
        sub_10048E394((_QWORD *)(a1 + 136), (uint64_t)&__p);
        if (*(_QWORD *)(a1 + 176) < 2uLL)
        {
          sub_100034264((uint64_t)v45);
          v18 = sub_10048E448(a1);
        }
        else
        {
          v30 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            v31 = (_QWORD *)(a1 + 8);
            if (*(char *)(a1 + 31) < 0)
              v31 = (_QWORD *)*v31;
            sub_10043E5F8((uint64_t)a2, &__p);
            if (v41 >= 0)
              v32 = &__p;
            else
              v32 = __p;
            *(_DWORD *)buf = 136446466;
            v47 = v31;
            v48 = 2082;
            v49 = v32;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%{public}s is currently processing another connection - queueing connection to device %{public}s", buf, 0x16u);
            if (SHIBYTE(v41) < 0)
              operator delete(__p);
          }
          v18 = 303;
        }
LABEL_54:
        sub_100034234((uint64_t)v45);
      }
      else
      {
        v22 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        {
          v37 = (_QWORD *)(a1 + 8);
          if (*(char *)(a1 + 31) < 0)
            v37 = (_QWORD *)*v37;
          sub_10043E5F8((uint64_t)a2, &__p);
          if (v41 >= 0)
            v38 = &__p;
          else
            v38 = __p;
          *(_DWORD *)buf = 136446466;
          v47 = v37;
          v48 = 2082;
          v49 = v38;
          _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%{public}s is not available on device %{public}s", buf, 0x16u);
          if (SHIBYTE(v41) < 0)
            operator delete(__p);
        }
        return 114;
      }
    }
    else
    {
      v19 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
      {
        v20 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v20 = (_QWORD *)*v20;
        sub_10043E5F8((uint64_t)a2, &__p);
        if (v41 >= 0)
          v21 = &__p;
        else
          v21 = __p;
        *(_DWORD *)buf = 136446466;
        v47 = v20;
        v48 = 2082;
        v49 = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%{public}s is not supported by device %{public}s", buf, 0x16u);
        if (SHIBYTE(v41) < 0)
          operator delete(__p);
      }
      return 108;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F5FE8();
    return 105;
  }
  return v18;
}

void sub_10048E368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_10048E394(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 102 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10048FC30(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

uint64_t sub_10048E448(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  void **v10;
  unint64_t v11;
  _QWORD *i;
  uint64_t v13;
  NSObject *v14;
  _QWORD *v15;
  void **v16;
  uint64_t v17;
  void *__p[2];
  char v19;
  _QWORD v20[2];
  uint8_t buf[4];
  _QWORD *v22;
  __int16 v23;
  void **v24;

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 72);
  if (*(_QWORD *)(a1 + 176)
    && (v2 = *(_QWORD *)(a1 + 168),
        v3 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * (v2 / 0x66)),
        v4 = v2 % 0x66,
        !*(_DWORD *)(v3 + 40 * (v2 % 0x66) + 8)))
  {
    v7 = *(_QWORD *)(v3 + 40 * v4);
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v9 = (_QWORD *)*v9;
      sub_10043E5F8(v7, __p);
      if (v19 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v22 = v9;
      v23 = 2082;
      v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}s - handling connection that was pending for device %{public}s", buf, 0x16u);
      if (v19 < 0)
        operator delete(__p[0]);
      v11 = *(_QWORD *)(a1 + 168);
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * (v11 / 0x66));
      v4 = v11 % 0x66;
    }
    *(_DWORD *)(v3 + 40 * v4 + 8) = 3;
    for (i = *(_QWORD **)(a1 + 40); i != *(_QWORD **)(a1 + 48); ++i)
    {
      v13 = *i;
      if ((*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*i + 24))(*i, v7))
      {
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * (*(_QWORD *)(a1 + 168) / 0x66uLL))
                  + 40 * (*(_QWORD *)(a1 + 168) % 0x66uLL)
                  + 16) = v13;
        sub_100034264((uint64_t)v20);
        operator new();
      }
    }
    sub_100034264((uint64_t)v20);
    v14 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v15 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v15 = (_QWORD *)*v15;
      sub_10043E5F8(v7, __p);
      if (v19 >= 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v22 = v15;
      v23 = 2082;
      v24 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%{public}s found no connectable profiles on device %{public}s", buf, 0x16u);
      if (v19 < 0)
        operator delete(__p[0]);
    }
    v17 = a1 + 136;
    *(int64x2_t *)(a1 + 168) = vaddq_s64(*(int64x2_t *)(a1 + 168), (int64x2_t)xmmword_10073D4C0);
    v5 = 1;
    sub_10048FF44(v17, 1);
  }
  else
  {
    v5 = 0;
  }
  sub_100034234((uint64_t)v20);
  return v5;
}

void sub_10048E770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10048E79C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _QWORD *v16;
  int v17;
  void **v18;
  void *__p[2];
  char v21;
  _QWORD v22[2];
  uint8_t buf[4];
  _QWORD *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  void **v28;

  if (!a2)
  {
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006F5F78(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) & 1) == 0
    && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006F5FE8();
  }
  v22[0] = 0;
  v22[1] = 0;
  sub_10003415C((uint64_t)v22, a1 + 72);
  if (*(_QWORD *)(a1 + 176))
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * (*(_QWORD *)(a1 + 168) / 0x66uLL))
                    + 40 * (*(_QWORD *)(a1 + 168) % 0x66uLL)
                    + 16);
  else
    v12 = 0;
  sub_100034264((uint64_t)v22);
  if (v12)
  {
    v13 = sub_100481E7C(v12);
    if (v13 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12)
      && (v14 = sub_100481D68(v12)) != 0
      && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2) & 1) == 0)
    {
      sub_100034188((uint64_t)v22);
      if (*(_QWORD *)(a1 + 176))
      {
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * (*(_QWORD *)(a1 + 168) / 0x66uLL))
                  + 40 * (*(_QWORD *)(a1 + 168) % 0x66uLL)
                  + 8) = 2;
        sub_100034264((uint64_t)v22);
        v15 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          v16 = (_QWORD *)(a1 + 8);
          if (*(char *)(a1 + 31) < 0)
            v16 = (_QWORD *)*v16;
          v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          sub_10043E5F8(v14, __p);
          if (v21 >= 0)
            v18 = __p;
          else
            v18 = (void **)__p[0];
          *(_DWORD *)buf = 136446722;
          v24 = v16;
          v25 = 1024;
          v26 = v17;
          v27 = 2082;
          v28 = v18;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}s connection would exceed maximum allowed connections (%d) - disconnecting device %{public}s", buf, 0x1Cu);
          if (v21 < 0)
            operator delete(__p[0]);
        }
        sub_100481364(v12, v14);
      }
    }
    else
    {
      sub_100481424(v12, a2);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006F6050();
  }
  return sub_100034234((uint64_t)v22);
}

void sub_10048EA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10048EA9C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _QWORD *v14;
  void **v15;
  void *__p[2];
  char v18;
  _QWORD v19[2];
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  void **v23;

  if (!a2)
  {
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006F5F78(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 72);
  v12 = *(_QWORD *)(a1 + 176);
  if (v12)
  {
    v13 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v14 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v14 = (_QWORD *)*v14;
      sub_10043E5F8(a2, __p);
      if (v18 >= 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v21 = v14;
      v22 = 2082;
      v23 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}s already has a pending outgoing connection to device %{public}s", buf, 0x16u);
      if (v18 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    sub_100034264((uint64_t)v19);
  }
  sub_100034234((uint64_t)v19);
  return v12 == 0;
}

void sub_10048EBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10048EC1C(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD v26[2];

  if (!a2)
  {
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006F5F78(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v26[0] = 0;
  v26[1] = 0;
  sub_10003415C((uint64_t)v26, (uint64_t)(a1 + 9));
  v12 = a1[22];
  if (v12)
  {
    v13 = a1[21];
    v14 = a1[18];
    v15 = a1[19];
    v16 = (_QWORD *)(v14 + 8 * (v13 / 0x66));
    if (v15 == v14)
      v17 = 0;
    else
      v17 = (_QWORD *)(*v16 + 40 * (v13 % 0x66));
    v18 = v13 + v12;
    v19 = v18 / 0x66;
    v20 = v18 % 0x66;
LABEL_9:
    v21 = v17 - 510;
    while (1)
    {
      v22 = v15 == v14 ? 0 : *(_QWORD *)(v14 + 8 * v19) + 40 * v20;
      if (v17 == (_QWORD *)v22)
        break;
      if (*v17 == a2)
      {
        v24 = 1;
        goto LABEL_19;
      }
      v17 += 5;
      v21 += 5;
      if ((_QWORD *)*v16 == v21)
      {
        v23 = (_QWORD *)v16[1];
        ++v16;
        v17 = v23;
        goto LABEL_9;
      }
    }
  }
  sub_100034264((uint64_t)v26);
  v24 = 0;
LABEL_19:
  sub_100034234((uint64_t)v26);
  return v24;
}

void sub_10048ED5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10048ED70(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD *v5;
  void **v6;
  int64x2_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *i;
  uint64_t v18;
  NSObject *v19;
  void *__p[2];
  char v22;
  uint8_t buf[4];
  _QWORD *v24;
  __int16 v25;
  void **v26;

  v4 = qword_1009997E8;
  if (!a2 && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
  {
    LODWORD(__p[0]) = 136446210;
    *(void **)((char *)__p + 4) = "device != NULL";
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)__p, 0xCu);
    v4 = qword_1009997E8;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v5 = (_QWORD *)*v5;
    sub_10043E5F8(a2, __p);
    if (v22 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v24 = v5;
    v25 = 2082;
    v26 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}s is disconnecting device %{public}s", buf, 0x16u);
    if (v22 < 0)
      operator delete(__p[0]);
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) & 1) != 0)
  {
    *(_OWORD *)__p = 0uLL;
    sub_10003415C((uint64_t)__p, a1 + 72);
    v7 = (int64x2_t *)(a1 + 136);
    v8 = *(_QWORD *)(a1 + 168);
    v9 = *(_QWORD *)(a1 + 144);
    v10 = *(_QWORD *)(a1 + 152);
    v11 = (_QWORD *)(v9 + 8 * (v8 / 0x66));
    if (v10 == v9)
      v12 = 0;
    else
      v12 = *v11 + 40 * (v8 % 0x66);
LABEL_19:
    v14 = (_QWORD *)v12;
    while (1)
    {
      v15 = v10 == v9
          ? 0
          : *(_QWORD *)(v9 + 8 * ((*(_QWORD *)(a1 + 176) + v8) / 0x66)) + 40 * ((*(_QWORD *)(a1 + 176) + v8) % 0x66);
      if (v14 == (_QWORD *)v15)
        break;
      if (*v14 == a2)
      {
        v19 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Connection was still pending - cancelling", buf, 2u);
        }
        sub_10048F0A0(v7, v11, v12);
        v13 = 0;
        goto LABEL_36;
      }
      v14 += 5;
      v12 += 40;
      if (*v11 + 4080 == v12)
      {
        v16 = v11[1];
        ++v11;
        v12 = v16;
        goto LABEL_19;
      }
    }
    sub_100034264((uint64_t)__p);
    for (i = *(uint64_t **)(a1 + 40); ; ++i)
    {
      if (i == *(uint64_t **)(a1 + 48))
      {
        v13 = 1;
        goto LABEL_36;
      }
      v18 = *i;
      if (sub_100481D00(*i, a2))
        break;
    }
    v13 = sub_100481364(v18, a2);
LABEL_36:
    sub_100034234((uint64_t)__p);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F5FE8();
    return 105;
  }
  return v13;
}

void sub_10048F078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_10048F0A0(int64x2_t *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  __n128 v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 **v14;
  __int128 *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 **v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  __n128 v28;

  v4 = a1[2].u64[0];
  v5 = a1->i64[1];
  v6 = (uint64_t *)(v5 + 8 * (v4 / 0x66));
  if (a1[1].i64[0] == v5)
    v7 = 0;
  else
    v7 = *v6 + 40 * (v4 % 0x66);
  if (a3 == v7)
    v8 = 0;
  else
    v8 = 102 * (a2 - v6) - 0x3333333333333333 * ((a3 - *a2) >> 3) + 0x3333333333333333 * ((v7 - *v6) >> 3);
  v28.n128_u64[0] = v5 + 8 * (v4 / 0x66);
  v28.n128_u64[1] = v7;
  sub_100490014(&v28, v8);
  v9 = v28;
  v10 = a1[2].i64[1];
  v11 = v28.n128_u64[1] - *(_QWORD *)v28.n128_u64[0];
  v12 = 0xCCCCCCCCCCCCCCCDLL * (v11 >> 3);
  if (v8 <= (unint64_t)(v10 - 1) >> 1)
  {
    if (v11 < -39)
    {
      v16 = (uint64_t *)(v28.n128_u64[0] - 8 * ((100 - v12) / 0x66));
      v17 = *v16 + 40 * (102 * ((100 - v12) / 0x66) - (100 - v12)) + 4040;
    }
    else
    {
      v16 = (uint64_t *)(v28.n128_u64[0] + 8 * ((v12 + 1) / 0x66));
      v17 = *v16 + 40 * ((v12 + 1) % 0x66);
    }
    memset(&v28, 0, 32);
    sub_1004900C0(v6, v7, (uint64_t *)v9.n128_u64[0], v9.n128_i64[1], v16, v17, &v28);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_10073D4C0);
    sub_10048FF44((uint64_t)a1, 1);
  }
  else
  {
    if (v11 < -39)
    {
      v18 = 100 - v12;
      v14 = (__int128 **)(v28.n128_u64[0] - 8 * (v18 / 0x66));
      v15 = (__int128 *)((char *)*v14 + 40 * (102 * (v18 / 0x66) - v18) + 4040);
    }
    else
    {
      v13 = v12 + 1;
      v14 = (__int128 **)(v28.n128_u64[0] + 8 * (v13 / 0x66));
      v15 = (__int128 *)((char *)*v14 + 40 * (v13 % 0x66));
    }
    v19 = a1[2].i64[0] + v10;
    v20 = a1->i64[1];
    v21 = (__int128 **)(v20 + 8 * (v19 / 0x66));
    if (a1[1].i64[0] == v20)
      v22 = 0;
    else
      v22 = (char *)*v21 + 40 * (v19 % 0x66);
    sub_100490270(v14, v15, v21, v22, (uint64_t)&v28);
    --a1[2].i64[1];
    sub_10048FFA0(a1, 1);
  }
  v23 = a1[2].u64[0];
  v24 = a1->i64[1];
  v25 = (_QWORD *)(v24 + 8 * (v23 / 0x66));
  if (a1[1].i64[0] == v24)
    v26 = 0;
  else
    v26 = *v25 + 40 * (v23 % 0x66);
  v28.n128_u64[0] = (unint64_t)v25;
  v28.n128_u64[1] = v26;
  sub_100490014(&v28, v8);
  return v28.n128_u64[0];
}

uint64_t sub_10048F3AC(_QWORD *a1)
{
  _QWORD **v2;
  int v3;
  _QWORD *v4;

  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 32))(a1) || (v2 = (_QWORD **)a1[5], v2 == (_QWORD **)a1[6]))
  {
    LOBYTE(v3) = 0;
  }
  else
  {
    v3 = 0;
    do
    {
      v4 = *v2++;
      v3 |= sub_100481BE4(v4);
    }
    while (v2 != (_QWORD **)a1[6]);
  }
  return v3 & 1;
}

uint64_t sub_10048F414(_QWORD *a1)
{
  uint64_t *i;
  uint64_t v3;

  if ((*(unsigned int (**)(_QWORD *))(*a1 + 32))(a1))
  {
    for (i = (uint64_t *)a1[5]; i != (uint64_t *)a1[6]; ++i)
    {
      v3 = *i;
      if (sub_100481CB4(*i))
        return sub_100481D68(v3);
    }
  }
  return 0;
}

uint64_t sub_10048F488(_QWORD *a1)
{
  uint64_t result;
  uint64_t *v3;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  if ((_DWORD)result)
  {
    v3 = (uint64_t *)a1[5];
    if (v3 == (uint64_t *)a1[6])
    {
      return 0;
    }
    else
    {
      do
      {
        result = sub_100481CB4(*v3);
        if ((_DWORD)result)
          break;
        ++v3;
      }
      while (v3 != (uint64_t *)a1[6]);
    }
  }
  return result;
}

uint64_t sub_10048F4E4(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  if ((_DWORD)result)
  {
    v5 = (uint64_t *)a1[5];
    if (v5 == (uint64_t *)a1[6])
    {
      return 0;
    }
    else
    {
      do
      {
        result = sub_100481D00(*v5, a2);
        if ((_DWORD)result)
          break;
        ++v5;
      }
      while (v5 != (uint64_t *)a1[6]);
    }
  }
  return result;
}

uint64_t sub_10048F550(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_100931508);
  return sub_100496660((uint64_t)off_100977A70, a2, *(unsigned int *)(a1 + 32), a3, a4);
}

uint64_t sub_10048F5C0(uint64_t a1, uint64_t a2)
{
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_100931508);
  return sub_100497298((uint64_t)off_100977A70, a2, *(unsigned int *)(a1 + 32));
}

uint64_t sub_10048F630(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  NSObject *v10;
  unsigned int v11;
  __int128 v13;
  _QWORD v14[3];
  _QWORD v15[2];
  uint64_t v16;
  uint8_t buf[24];

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 72);
  v8 = *(_QWORD *)(a1 + 176);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 168);
    if (*(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * (v9 / 0x66)) + 40 * (v9 % 0x66)) == a2)
    {
      *(_QWORD *)(a1 + 168) = v9 + 1;
      *(_QWORD *)(a1 + 176) = v8 - 1;
      sub_10048FF44(a1 + 136, 1);
    }
  }
  sub_100034264((uint64_t)v15);
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_100931508);
  sub_1004953B8((uint64_t)off_100977A70, (uint64_t)a2, *(unsigned int *)(a1 + 32), a3, a4);
  if (!(_DWORD)a4)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1) && (sub_10043E93C(a2) & 1) == 0)
    {
      v10 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8((uint64_t)a2, v14);
        sub_1006F60B8((char *)v14, a1, buf, v10);
      }
      operator new();
    }
    v11 = *(_DWORD *)(a1 + 32);
    v16 = 0;
    sub_10004AD30((uint64_t)&v16);
    *(_QWORD *)&v13 = (int)v16;
    *((_QWORD *)&v13 + 1) = SWORD2(v16);
    sub_1004415B0((uint64_t)a2, v11, 4, &v13, 0);
  }
  sub_10048E448(a1);
  return sub_100034234((uint64_t)v15);
}

void sub_10048F838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10048F860(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  uint64_t result;
  NSObject *v11;
  _QWORD *v12;
  _QWORD v13[2];
  uint8_t buf[4];
  _QWORD *v15;

  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_100931508);
  result = sub_100497318((uint64_t)off_100977A70, a2, *(unsigned int *)(a1 + 32), a3, a4, a5);
  if (!(_DWORD)a4)
  {
    v13[0] = 0;
    v13[1] = 0;
    sub_10003415C((uint64_t)v13, a1 + 72);
    if (*(_QWORD *)(a1 + 176)
      && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * (*(_QWORD *)(a1 + 168) / 0x66uLL))
                   + 40 * (*(_QWORD *)(a1 + 168) % 0x66uLL)
                   + 8) == 2)
    {
      sub_100034264((uint64_t)v13);
      v11 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        *(_DWORD *)buf = 136446210;
        v15 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}s had a queued connection pending this disconnection", buf, 0xCu);
      }
      operator new();
    }
    return sub_100034234((uint64_t)v13);
  }
  return result;
}

void sub_10048FA34(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10048FA50()
{
  return 2;
}

uint64_t sub_10048FA58()
{
  return 2;
}

uint64_t sub_10048FA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_100931508);
  return sub_100497FB4((uint64_t)off_100977A70, a2, *(unsigned int *)(a1 + 32), a3, a4, a5);
}

void sub_10048FAE0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *a3 = 0;
}

void sub_10048FAEC()
{
  operator delete();
}

uint64_t sub_10048FB00(uint64_t a1)
{
  return sub_10048E79C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

void sub_10048FB10()
{
  operator delete();
}

uint64_t sub_10048FB24(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 88))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_10048FB38(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 51;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 102;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_1002A4304((uint64_t)a1);
}

void sub_10048FBCC(id a1)
{
  operator new();
}

void sub_10048FC0C()
{
  operator delete();
}

void sub_10048FC30(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x66;
  v4 = v2 - 102;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10007ABA0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_1002A61DC(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_1002A62F0((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10007ABA0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10007ABA0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_1002A640C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002A6520((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10048FEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10048FF44(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x66)
    a2 = 1;
  if (v2 < 0xCC)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 102;
  }
  return v4 ^ 1u;
}

uint64_t sub_10048FFA0(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 102 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x66)
    a2 = 1;
  if (v5 < 0xCC)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

_QWORD *sub_100490014(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 - 0x3333333333333333 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      v5 = 101 - v3;
      v6 = &v2[-(v5 / 0x66)];
      *result = v6;
      v4 = *v6 + 40 * (102 * (v5 / 0x66) - v5) + 4040;
    }
    else
    {
      *result = &v2[v3 / 0x66];
      v4 = v2[v3 / 0x66] + 40 * (v3 % 0x66);
    }
    result[1] = v4;
  }
  return result;
}

__n128 sub_1004900C0@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v21 = 0;
    v22 = 0uLL;
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v21 = 0;
    v22 = 0uLL;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_1004901AC(v12, v14, v15, v16, &v21);
      v16 = v22.n128_i64[1];
      v15 = (uint64_t *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4080;
      v21 = 0;
      v22 = 0uLL;
    }
    v18 = *a1 + 4080;
    v21 = 0;
    v22 = 0uLL;
    v19 = a2;
  }
  sub_1004901AC(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

void sub_1004901AC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 == a2)
  {
    a2 = a1;
  }
  else
  {
    v5 = *a3;
    v6 = a4;
    v7 = a2;
    while (1)
    {
      v8 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v5) >> 3);
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v7 - a1) >> 3)) < v8)
        v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - a1) >> 3);
      if (v8)
      {
        v9 = -40 * v8;
        v10 = (__int128 *)(v7 - 40);
        do
        {
          a4 = v6 - 40;
          v11 = *v10;
          v12 = v10[1];
          *(_QWORD *)(v6 - 8) = *((_QWORD *)v10 + 4);
          *(_OWORD *)(v6 - 24) = v12;
          *(_OWORD *)(v6 - 40) = v11;
          v10 = (__int128 *)((char *)v10 - 40);
          v6 -= 40;
          v9 += 40;
        }
        while (v9);
      }
      else
      {
        a4 = v6;
      }
      v7 -= 40 * v8;
      if (v7 == a1)
        break;
      v13 = *--a3;
      v5 = v13;
      v6 = v13 + 4080;
    }
    if (*a3 + 4080 == a4)
    {
      v14 = a3[1];
      ++a3;
      a4 = v14;
    }
  }
  *a5 = a2;
  a5[1] = a3;
  a5[2] = a4;
}

double sub_100490270(__int128 **a1, __int128 *a2, __int128 **a3, char *a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  __int128 **v10;
  char *i;
  uint64_t v12;
  double result;
  char *v14;
  __int128 v15;

  v7 = *(uint64_t **)a5;
  v8 = *(_QWORD *)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = (char *)(*a1 + 255); ; i = (char *)(v12 + 4080))
    {
      v14 = 0;
      v15 = 0uLL;
      sub_100490310(a2, i, v7, v8, &v14);
      v8 = *((_QWORD *)&v15 + 1);
      v7 = (uint64_t *)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = (uint64_t)*v10++;
      a2 = (__int128 *)v12;
    }
    a2 = *a3;
  }
  v14 = 0;
  v15 = 0uLL;
  sub_100490310(a2, a4, v7, v8, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void sub_100490310(__int128 *a1@<X1>, char *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, char **a5@<X8>)
{
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 == (__int128 *)a2)
  {
    a2 = (char *)a1;
  }
  else
  {
    v5 = *a3;
    while (1)
    {
      v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - a4 + 4080) >> 3);
      v7 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - (char *)a1) >> 3);
      if (v7 >= v6)
        v7 = v6;
      if (v7)
      {
        v8 = (__int128 *)((char *)a1 + 40 * v7);
        v9 = 40 * v7;
        do
        {
          v10 = *a1;
          v11 = a1[1];
          *(_QWORD *)(a4 + 32) = *((_QWORD *)a1 + 4);
          *(_OWORD *)a4 = v10;
          *(_OWORD *)(a4 + 16) = v11;
          a1 = (__int128 *)((char *)a1 + 40);
          a4 += 40;
          v9 -= 40;
        }
        while (v9);
        a1 = v8;
      }
      if (a1 == (__int128 *)a2)
        break;
      v12 = a3[1];
      ++a3;
      v5 = v12;
      a4 = v12;
    }
    if (*a3 + 4080 == a4)
    {
      v13 = a3[1];
      ++a3;
      a4 = v13;
    }
  }
  *a5 = a2;
  a5[1] = (char *)a3;
  a5[2] = (char *)a4;
}

void sub_1004903BC(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

uint64_t sub_1004903D0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  xpc_object_t v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD v20[2];

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 8);
  v10 = *(_QWORD **)(a1 + 80);
  v11 = (_QWORD *)(a1 + 88);
  if (v10 != (_QWORD *)(a1 + 88))
  {
    v12 = a5;
    do
    {
      v13 = v10[4];
      if (v13)
      {
        if (*(_BYTE *)(*(_QWORD *)(v13 + 64) + 160))
        {
          v14 = xpc_dictionary_create(0, 0, 0);
          v15 = v14;
          if (v14)
          {
            xpc_dictionary_set_uint64(v14, "kCBMsgArgID", *(_QWORD *)(v13 + 48));
            xpc_dictionary_set_uint64(v15, "kCBMsgArgPairingAgentID", a2);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgResult", v12);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgEvent", a3);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgBTDevice", a4);
            sub_1002C5EC8(*(_QWORD *)(v13 + 64), "kCBMsgIdPairingAgentStatusEvent", v15, 1);
          }
        }
      }
      v16 = (_QWORD *)v10[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v10[2];
          v18 = *v17 == (_QWORD)v10;
          v10 = v17;
        }
        while (!v18);
      }
      v10 = v17;
    }
    while (v17 != v11);
  }
  return sub_100034234((uint64_t)v20);
}

void sub_10049053C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100490550(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  xpc_object_t v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD v17[2];

  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 8);
  v8 = *(_QWORD **)(a1 + 80);
  v9 = (_QWORD *)(a1 + 88);
  if (v8 != (_QWORD *)(a1 + 88))
  {
    do
    {
      v10 = v8[4];
      if (v10)
      {
        if (*(_BYTE *)(*(_QWORD *)(v10 + 64) + 160))
        {
          v11 = xpc_dictionary_create(0, 0, 0);
          v12 = v11;
          if (v11)
          {
            xpc_dictionary_set_uint64(v11, "kCBMsgArgID", *(_QWORD *)(v10 + 48));
            xpc_dictionary_set_uint64(v12, "kCBMsgArgPairingAgentID", a2);
            xpc_dictionary_set_uint64(v12, "kCBMsgArgBTDevice", a3);
            xpc_dictionary_set_uint64(v12, "kCBMsgArgMinLength", a4);
            sub_1002C5EC8(*(_QWORD *)(v10 + 64), "kCBMsgIdPairingAgentPincode", v12, 1);
          }
        }
      }
      v13 = (_QWORD *)v8[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v8[2];
          v15 = *v14 == (_QWORD)v8;
          v8 = v14;
        }
        while (!v15);
      }
      v8 = v14;
    }
    while (v14 != v9);
  }
  return sub_100034234((uint64_t)v17);
}

void sub_1004906A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004906B8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  xpc_object_t v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD v17[2];

  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 8);
  v8 = *(_QWORD **)(a1 + 80);
  v9 = (_QWORD *)(a1 + 88);
  if (v8 != (_QWORD *)(a1 + 88))
  {
    do
    {
      v10 = v8[4];
      if (v10)
      {
        if (*(_BYTE *)(*(_QWORD *)(v10 + 64) + 160))
        {
          v11 = xpc_dictionary_create(0, 0, 0);
          v12 = v11;
          if (v11)
          {
            xpc_dictionary_set_uint64(v11, "kCBMsgArgID", *(_QWORD *)(v10 + 48));
            xpc_dictionary_set_uint64(v12, "kCBMsgArgPairingAgentID", a2);
            xpc_dictionary_set_uint64(v12, "kCBMsgArgBTDevice", a3);
            xpc_dictionary_set_uint64(v12, "kCBMsgArgServices", a4);
            sub_1002C5EC8(*(_QWORD *)(v10 + 64), "kCBMsgIdPairingAgentAuthorization", v12, 1);
          }
        }
      }
      v13 = (_QWORD *)v8[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v8[2];
          v15 = *v14 == (_QWORD)v8;
          v8 = v14;
        }
        while (!v15);
      }
      v8 = v14;
    }
    while (v14 != v9);
  }
  return sub_100034234((uint64_t)v17);
}

void sub_10049080C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100490820(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  xpc_object_t v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD v20[2];

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 8);
  v10 = *(_QWORD **)(a1 + 80);
  v11 = (_QWORD *)(a1 + 88);
  if (v10 != (_QWORD *)(a1 + 88))
  {
    v12 = a5;
    do
    {
      v13 = v10[4];
      if (v13)
      {
        if (*(_BYTE *)(*(_QWORD *)(v13 + 64) + 160))
        {
          v14 = xpc_dictionary_create(0, 0, 0);
          v15 = v14;
          if (v14)
          {
            xpc_dictionary_set_uint64(v14, "kCBMsgArgID", *(_QWORD *)(v13 + 48));
            xpc_dictionary_set_uint64(v15, "kCBMsgArgPairingAgentID", a2);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgBTDevice", a3);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgValue", a4);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgMITM", v12);
            sub_1002C5EC8(*(_QWORD *)(v13 + 64), "kCBMsgIdPairingAgentUserConfirmation", v15, 1);
          }
        }
      }
      v16 = (_QWORD *)v10[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v10[2];
          v18 = *v17 == (_QWORD)v10;
          v10 = v17;
        }
        while (!v18);
      }
      v10 = v17;
    }
    while (v17 != v11);
  }
  return sub_100034234((uint64_t)v20);
}

void sub_10049098C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004909A0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  xpc_object_t v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD v17[2];

  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 8);
  v8 = *(_QWORD **)(a1 + 80);
  v9 = (_QWORD *)(a1 + 88);
  if (v8 != (_QWORD *)(a1 + 88))
  {
    do
    {
      v10 = v8[4];
      if (v10)
      {
        if (*(_BYTE *)(*(_QWORD *)(v10 + 64) + 160))
        {
          v11 = xpc_dictionary_create(0, 0, 0);
          v12 = v11;
          if (v11)
          {
            xpc_dictionary_set_uint64(v11, "kCBMsgArgID", *(_QWORD *)(v10 + 48));
            xpc_dictionary_set_uint64(v12, "kCBMsgArgPairingAgentID", a2);
            xpc_dictionary_set_uint64(v12, "kCBMsgArgBTDevice", a3);
            xpc_dictionary_set_uint64(v12, "kCBMsgArgValue", a4);
            sub_1002C5EC8(*(_QWORD *)(v10 + 64), "kCBMsgIdPairingAgentPassKeyDisplay", v12, 1);
          }
        }
      }
      v13 = (_QWORD *)v8[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v8[2];
          v15 = *v14 == (_QWORD)v8;
          v8 = v14;
        }
        while (!v15);
      }
      v8 = v14;
    }
    while (v14 != v9);
  }
  return sub_100034234((uint64_t)v17);
}

void sub_100490AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100490B08(uint64_t a1, uint64_t a2, const void *a3, const void *a4, const void *a5, const void *a6)
{
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  xpc_object_t v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD v21[2];

  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 8);
  v12 = *(_QWORD **)(a1 + 80);
  v13 = (_QWORD *)(a1 + 88);
  if (v12 != (_QWORD *)(a1 + 88))
  {
    do
    {
      v14 = v12[4];
      if (v14)
      {
        if (*(_BYTE *)(*(_QWORD *)(v14 + 64) + 160))
        {
          v15 = xpc_dictionary_create(0, 0, 0);
          v16 = v15;
          if (v15)
          {
            xpc_dictionary_set_uint64(v15, "kCBMsgArgID", *(_QWORD *)(v14 + 48));
            xpc_dictionary_set_uint64(v16, "kCBMsgArgPairingAgentID", a2);
            if (a3)
              xpc_dictionary_set_data(v16, "kCBMsgArgC192", a3, 0x10uLL);
            if (a4)
              xpc_dictionary_set_data(v16, "kCBMsgArgR192", a4, 0x10uLL);
            if (a5)
              xpc_dictionary_set_data(v16, "kCBMsgArgC256", a5, 0x10uLL);
            if (a6)
              xpc_dictionary_set_data(v16, "kCBMsgArgR256", a6, 0x10uLL);
            sub_1002C5EC8(*(_QWORD *)(v14 + 64), "kCBMsgIdPairingAgentOOBDataReady", v16, 1);
          }
        }
      }
      v17 = (_QWORD *)v12[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v12[2];
          v19 = *v18 == (_QWORD)v12;
          v12 = v18;
        }
        while (!v19);
      }
      v12 = v18;
    }
    while (v18 != v13);
  }
  return sub_100034234((uint64_t)v21);
}

void sub_100490CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100490CB4(uint64_t result, unsigned int a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a5)
    return sub_1004903D0(a5, result, a2, a3, a4);
  return result;
}

uint64_t sub_100490CD8(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a4)
    return sub_100490550(a4, result, a2, a3);
  return result;
}

uint64_t sub_100490CF8(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a4)
    return sub_1004906B8(a4, result, a2, a3);
  return result;
}

uint64_t sub_100490D18(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  if (a5)
    return sub_100490820(a5, result, a2, a3, a4);
  return result;
}

uint64_t sub_100490D3C(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a4)
    return sub_1004909A0(a4, result, a2, a3);
  return result;
}

uint64_t sub_100490D5C(uint64_t result, const void *a2, const void *a3, const void *a4, const void *a5, uint64_t a6)
{
  if (a6)
    return sub_100490B08(a6, result, a2, a3, a4, a5);
  return result;
}

void sub_100490D84(id a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint64_t v14;
  const char **v15;

  v13 = "kCBMsgIdPairingAgentCreateMsg";
  v14 = 29;
  v15 = &v13;
  v1 = sub_100491FF0((uint64_t)&xmmword_1009995D8, (uint64_t)&v13, (uint64_t)&unk_100740F58, (_OWORD **)&v15);
  v1[4] = sub_10049105C;
  v1[5] = 0;
  v13 = "kCBMsgIdPairingAgentDestroyMsg";
  v14 = 30;
  v15 = &v13;
  v2 = sub_100491FF0((uint64_t)&xmmword_1009995D8, (uint64_t)&v13, (uint64_t)&unk_100740F58, (_OWORD **)&v15);
  v2[4] = sub_10049129C;
  v2[5] = 0;
  v13 = "kCBMsgIdPairingAgentStartMsg";
  v14 = 28;
  v15 = &v13;
  v3 = sub_100491FF0((uint64_t)&xmmword_1009995D8, (uint64_t)&v13, (uint64_t)&unk_100740F58, (_OWORD **)&v15);
  v3[4] = sub_1004914C8;
  v3[5] = 0;
  v13 = "kCBMsgIdPairingAgentStopMsg";
  v14 = 27;
  v15 = &v13;
  v4 = sub_100491FF0((uint64_t)&xmmword_1009995D8, (uint64_t)&v13, (uint64_t)&unk_100740F58, (_OWORD **)&v15);
  v4[4] = sub_10049158C;
  v4[5] = 0;
  v13 = "kCBMsgIdPairingAgentCancelPairingMsg";
  v14 = 36;
  v15 = &v13;
  v5 = sub_100491FF0((uint64_t)&xmmword_1009995D8, (uint64_t)&v13, (uint64_t)&unk_100740F58, (_OWORD **)&v15);
  v5[4] = sub_100491650;
  v5[5] = 0;
  v13 = "kCBMsgIdPairingAgentSetPincodeMsg";
  v14 = 33;
  v15 = &v13;
  v6 = sub_100491FF0((uint64_t)&xmmword_1009995D8, (uint64_t)&v13, (uint64_t)&unk_100740F58, (_OWORD **)&v15);
  v6[4] = sub_100491714;
  v6[5] = 0;
  v13 = "kCBMsgIdPairingAgentAcceptSSPMsg";
  v14 = 32;
  v15 = &v13;
  v7 = sub_100491FF0((uint64_t)&xmmword_1009995D8, (uint64_t)&v13, (uint64_t)&unk_100740F58, (_OWORD **)&v15);
  v7[4] = sub_100491814;
  v7[5] = 0;
  v13 = "kCBMsgIdPairingAgentDeletePairedDeviceMsg";
  v14 = 41;
  v15 = &v13;
  v8 = sub_100491FF0((uint64_t)&xmmword_1009995D8, (uint64_t)&v13, (uint64_t)&unk_100740F58, (_OWORD **)&v15);
  v8[4] = sub_100491914;
  v8[5] = 0;
  v13 = "kCBMsgIdPairingAgentSetIOCapabilityMsg";
  v14 = 38;
  v15 = &v13;
  v9 = sub_100491FF0((uint64_t)&xmmword_1009995D8, (uint64_t)&v13, (uint64_t)&unk_100740F58, (_OWORD **)&v15);
  v9[4] = sub_1004919FC;
  v9[5] = 0;
  v13 = "kCBMsgIdPairingAgentClearOOBDataForDeviceMsg";
  v14 = 44;
  v15 = &v13;
  v10 = sub_100491FF0((uint64_t)&xmmword_1009995D8, (uint64_t)&v13, (uint64_t)&unk_100740F58, (_OWORD **)&v15);
  v10[4] = sub_100491AE4;
  v10[5] = 0;
  v13 = "kCBMsgIdPairingAgentSetOOBDataForDeviceMsg";
  v14 = 42;
  v15 = &v13;
  v11 = sub_100491FF0((uint64_t)&xmmword_1009995D8, (uint64_t)&v13, (uint64_t)&unk_100740F58, (_OWORD **)&v15);
  v11[4] = sub_100491BCC;
  v11[5] = 0;
  v13 = "kCBMsgIdPairingAgentGetLocalOOBDataMsg";
  v14 = 38;
  v15 = &v13;
  v12 = sub_100491FF0((uint64_t)&xmmword_1009995D8, (uint64_t)&v13, (uint64_t)&unk_100740F58, (_OWORD **)&v15);
  v12[4] = sub_100491E58;
  v12[5] = 0;
}

uint64_t sub_10049105C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  int v8;
  au_asid_t asid;
  _QWORD *v10;
  xpc_object_t reply;
  void *v12;
  _QWORD *v14;
  _QWORD v15[2];
  uint64_t value;

  value = 0;
  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgSessionID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006F6148();
  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 8);
  if (uint64)
  {
    v7 = *(_QWORD *)(a1 + 72);
    v8 = *(_DWORD *)(v7 + 40);
    asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_100931578);
    if (sub_10050AE70(qword_100977B48, uint64, v8, asid))
    {
      v10 = malloc_type_calloc(1uLL, 0x48uLL, 0x10A00405596F149uLL);
      v14 = v10;
      *v10 = sub_100490CB4;
      v10[1] = sub_100490CD8;
      v10[2] = sub_100490CF8;
      v10[3] = sub_100490D18;
      v10[5] = sub_100490D5C;
      v10[6] = v6;
      v10[4] = sub_100490D3C;
      v10[8] = *(_QWORD *)(a1 + 72);
      LODWORD(uint64) = sub_1005A883C(uint64, v10, a1, &value);
      if ((_DWORD)uint64)
      {
        free(v10);
      }
      else
      {
        v10[7] = value;
        sub_10000F7A0((uint64_t **)(a1 + 80), (unint64_t *)&v14, (uint64_t *)&v14);
      }
      uint64 = (int)uint64;
    }
    else
    {
      uint64 = 7;
    }
  }
  else
  {
    uint64 = 1;
  }
  reply = xpc_dictionary_create_reply(xdict);
  v12 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgPairingAgentID", value);
    xpc_dictionary_set_uint64(v12, "kCBMsgArgResult", uint64);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
  return sub_100034234((uint64_t)v15);
}

void sub_100491280(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10049129C(_QWORD *a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  NSObject *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  xpc_object_t reply;
  void *v20;
  void *v21;
  _QWORD v22[2];
  uint64_t v23;
  uint8_t buf[4];
  uint64_t v25;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPairingAgentID");
  v6 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006F61A8(uint64, v6, v7, v8, v9, v10, v11, v12);
  if (uint64)
  {
    v22[1] = 0;
    v23 = uint64;
    v22[0] = 0;
    sub_10003415C((uint64_t)v22, (uint64_t)(a1 + 1));
    v13 = (_QWORD *)a1[10];
    if (v13 != a1 + 11)
    {
      v14 = 0;
      while (1)
      {
        v21 = (void *)v13[4];
        if (v23 == *((_QWORD *)v21 + 7))
        {
          v14 = sub_1005A88D8(&v23);
          if (!v14)
          {
            sub_100015ECC((uint64_t)(a1 + 10), (unint64_t *)&v21);
            free(v21);
            break;
          }
          v15 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134217984;
            v25 = uint64;
            _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Could not destroy pairing agent %llx", buf, 0xCu);
          }
        }
        v16 = (_QWORD *)v13[1];
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (_QWORD *)v13[2];
            v18 = *v17 == (_QWORD)v13;
            v13 = v17;
          }
          while (!v18);
        }
        v13 = v17;
        if (v17 == a1 + 11)
          goto LABEL_20;
      }
    }
    v14 = 0;
LABEL_20:
    sub_100034234((uint64_t)v22);
  }
  else
  {
    v14 = 0;
  }
  reply = xpc_dictionary_create_reply(xdict);
  v20 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v14);
    xpc_connection_send_message(*(xpc_connection_t *)(a1[9] + 16), v20);
    xpc_release(v20);
  }
}

void sub_1004914A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004914C8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPairingAgentID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006F6210();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_1005A8934(uint64);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_10049158C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPairingAgentID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006F6270();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_1005A89A0(uint64);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_100491650(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPairingAgentID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006F62D0();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_1005A8A0C(uint64);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_100491714(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  char *string;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPairingAgentID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  string = (char *)xpc_dictionary_get_string(value, "kCBMsgIdPairingAgentPincode");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006F6330();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v8 = (int)sub_1005A8A74(uint64, v6, string);
    goto LABEL_6;
  }
  v8 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_100491814(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  int v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPairingAgentID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgError");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006F6390();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v8 = (int)sub_1005A8BBC(uint64, v6, v7);
    goto LABEL_6;
  }
  v8 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_100491914(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPairingAgentID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006F63F0();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_1005A8C84(uint64, v6);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1004919FC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  int v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPairingAgentID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgIOCapabilities");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006F6450();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_1005A9088(uint64, v6);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100491AE4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPairingAgentID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006F64B0();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_1005A9138(uint64, v6);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100491BCC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  const void *data;
  unsigned int v8;
  const void *v9;
  const void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  xpc_object_t reply;
  void *v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  size_t length;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPairingAgentID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  length = 0;
  data = xpc_dictionary_get_data(value, "kCBMsgArgC192", &length);
  if (length == 16)
  {
    v8 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_FAULT))
      sub_1006F65F4();
    v8 = 3;
  }
  v19 = 0;
  v9 = xpc_dictionary_get_data(value, "kCBMsgArgR192", &v19);
  if (v19 != 16)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_FAULT))
      sub_1006F65C8();
    v8 = 3;
  }
  v18 = 0;
  v10 = xpc_dictionary_get_data(value, "kCBMsgArgC256", &v18);
  if (v18 != 16)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_FAULT))
      sub_1006F659C();
    v8 = 3;
  }
  v17 = 0;
  v11 = xpc_dictionary_get_data(value, "kCBMsgArgR256", &v17);
  if (v17 != 16)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_FAULT))
      sub_1006F6570();
    v8 = 3;
    goto LABEL_22;
  }
  if (v8)
  {
LABEL_22:
    reply = xpc_dictionary_create_reply(xdict);
    if (!reply)
      return;
    v15 = reply;
    v16 = v8;
    goto LABEL_24;
  }
  v12 = (uint64_t)v11;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006F6510();
    if (uint64)
      goto LABEL_18;
  }
  else if (uint64)
  {
LABEL_18:
    v13 = (int)sub_1005A921C(uint64, v6, (uint64_t)data, (uint64_t)v9, (uint64_t)v10, v12);
    goto LABEL_28;
  }
  v13 = 1;
LABEL_28:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v15 = reply;
    v16 = v13;
LABEL_24:
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v16);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v15);
    xpc_release(v15);
  }
}

void sub_100491E58(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPairingAgentID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006F6620();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_1005A9424(uint64);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_100491F20(_QWORD *a1)
{
  sub_1003BEE80(a1);
  operator delete();
}

uint64_t sub_100491F44(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, (uint64_t)(a1 + 1));
  v2 = (_QWORD *)a1[10];
  v3 = a1 + 11;
  if (v2 != a1 + 11)
  {
    do
    {
      free((void *)v2[4]);
      v4 = (_QWORD *)v2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  sub_10001A82C((uint64_t)(a1 + 10), (_QWORD *)a1[11]);
  a1[11] = 0;
  a1[12] = 0;
  a1[10] = v3;
  return sub_100034234((uint64_t)v8);
}

void *sub_100491FF0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  void *v14;
  uint64_t *v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char v29;

  v7 = sub_10039B518((uint64_t)&v29, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v9)
        v12 = v7 % v9;
    }
    else
    {
      v12 = (v9 - 1) & v7;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v17 = a2;
        v15 = *(uint64_t **)a2;
        v16 = *(_QWORD *)(v17 + 8);
        do
        {
          v18 = *((_QWORD *)v14 + 1);
          if (v18 == v8)
          {
            if (*((_QWORD *)v14 + 3) == v16 && !memcmp(*((const void **)v14 + 2), v15, v16))
              return v14;
          }
          else
          {
            if (v11 > 1)
            {
              if (v18 >= v9)
                v18 %= v9;
            }
            else
            {
              v18 &= v9 - 1;
            }
            if (v18 != v12)
              break;
          }
          v14 = *(void **)v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v14 = operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v8;
  *((_OWORD *)v14 + 1) = **a4;
  *((_QWORD *)v14 + 4) = 0;
  *((_QWORD *)v14 + 5) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    sub_1000B678C(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v12 = v8 % v9;
      else
        v12 = v8;
    }
    else
    {
      v12 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
  if (v26)
  {
    *(_QWORD *)v14 = *v26;
LABEL_40:
    *v26 = v14;
    goto LABEL_41;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v25 + 8 * v12) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_100492244(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100492258(id a1)
{
  operator new();
}

void sub_100492298()
{
  operator delete();
}

void sub_1004922BC()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  xmmword_1009995D8 = 0u;
  unk_1009995E8 = 0u;
  dword_1009995F8 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_1004903CC, &xmmword_1009995D8, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_10049230C(uint64_t a1)
{
  sub_100056BAC(a1, *(char **)(a1 + 8));
  return a1;
}

void sub_100492334(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  NSObject *v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  int v27;
  NSObject *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  NSObject *v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  int v57;
  NSObject *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  NSObject *v66;
  void *v67;
  _QWORD *v68;
  uint64_t v69;
  NSObject *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  void *__p[2];
  char v75;
  void *v76[2];
  char v77;
  char v78;

  *(_QWORD *)a1 = off_1009315A8;
  *(_QWORD *)(a1 + 8) = off_100931618;
  *(_QWORD *)(a1 + 16) = off_100931648;
  *(_QWORD *)(a1 + 24) = off_100931678;
  *(_QWORD *)(a1 + 32) = &off_100931698;
  sub_1000160D0(a1 + 40);
  *(_WORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 114) = 0;
  sub_1000160D0(a1 + 120);
  v2 = a1 + 184;
  *(_QWORD *)(a1 + 184) = a1 + 184;
  *(_QWORD *)(a1 + 192) = a1 + 184;
  *(_QWORD *)(a1 + 200) = 0;
  sub_1000160D0(a1 + 208);
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  sub_1000160D0(a1 + 320);
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  sub_1000160D0(a1 + 408);
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  sub_1000160D0(a1 + 496);
  sub_1002A90C4((pthread_cond_t *)(a1 + 560));
  *(_QWORD *)(a1 + 608) = a1 + 608;
  *(_QWORD *)(a1 + 616) = a1 + 608;
  *(_QWORD *)(a1 + 624) = 0;
  sub_1000160D0(a1 + 632);
  *(_WORD *)(a1 + 700) = 0;
  *(_DWORD *)(a1 + 696) = 0;
  v78 = 0;
  v3 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3))
  {
    v4 = sub_100027F68();
    sub_100091AE8(v76, "WiAP");
    sub_100091AE8(__p, "enableSink");
    (*(void (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v4 + 72))(v4, v76, __p, &v78);
    if (v75 < 0)
      operator delete(__p[0]);
    if (v77 < 0)
      operator delete(v76[0]);
  }
  v5 = sub_10003BE44();
  v76[0] = 0;
  v76[1] = 0;
  sub_10003415C((uint64_t)v76, a1 + 120);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, 1))
  {
    v6 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Supporting service handsfree", (uint8_t *)__p, 2u);
    }
    if (qword_10097B320 != -1)
      dispatch_once(&qword_10097B320, &stru_100931730);
    v7 = qword_10097B318;
    v8 = operator new(0x18uLL);
    v8[1] = v2;
    v8[2] = v7;
    v9 = *(_QWORD *)(a1 + 184);
    *v8 = v9;
    *(_QWORD *)(v9 + 8) = v8;
    *(_QWORD *)(a1 + 184) = v8;
    ++*(_QWORD *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, 2))
  {
    v10 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Supporting service phonebook", (uint8_t *)__p, 2u);
    }
    if (qword_10097B330 != -1)
      dispatch_once(&qword_10097B330, &stru_100931750);
    v11 = off_10097B328;
    v12 = operator new(0x18uLL);
    v12[1] = v2;
    v12[2] = v11;
    v13 = *(_QWORD *)(a1 + 184);
    *v12 = v13;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(a1 + 184) = v12;
    ++*(_QWORD *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, 32))
  {
    v14 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Supporting service HID", (uint8_t *)__p, 2u);
    }
    if (qword_10097B1B0 != -1)
      dispatch_once(&qword_10097B1B0, &stru_100931770);
    v15 = off_10097B1A8;
    v16 = operator new(0x18uLL);
    v16[1] = v2;
    v16[2] = v15;
    v17 = *(_QWORD *)(a1 + 184);
    *v16 = v17;
    *(_QWORD *)(v17 + 8) = v16;
    *(_QWORD *)(a1 + 184) = v16;
    ++*(_QWORD *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, 16))
  {
    v18 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Supporting service A2DP", (uint8_t *)__p, 2u);
    }
    if (qword_10097B340 != -1)
      dispatch_once(&qword_10097B340, &stru_100931790);
    v19 = off_10097B338;
    v20 = operator new(0x18uLL);
    v20[1] = v2;
    v20[2] = v19;
    v21 = *(_QWORD *)(a1 + 184);
    *v20 = v21;
    *(_QWORD *)(v21 + 8) = v20;
    *(_QWORD *)(a1 + 184) = v20;
    ++*(_QWORD *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, 8))
  {
    v22 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Supporting service Remote", (uint8_t *)__p, 2u);
    }
    if (qword_10097B350 != -1)
      dispatch_once(&qword_10097B350, &stru_1009317B0);
    v23 = off_10097B348;
    v24 = operator new(0x18uLL);
    v24[1] = v2;
    v24[2] = v23;
    v25 = *(_QWORD *)(a1 + 184);
    *v24 = v25;
    *(_QWORD *)(v25 + 8) = v24;
    *(_QWORD *)(a1 + 184) = v24;
    ++*(_QWORD *)(a1 + 200);
  }
  v26 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, 128);
  if (v78)
    v27 = 0;
  else
    v27 = v26;
  if (v27 == 1)
  {
    v28 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Supporting service WirelessiAP", (uint8_t *)__p, 2u);
    }
    if (qword_10097AB38 != -1)
      dispatch_once(&qword_10097AB38, &stru_1009317D0);
    v29 = off_10097AB30;
    v30 = operator new(0x18uLL);
    v30[1] = v2;
    v30[2] = v29;
    v31 = *(_QWORD *)(a1 + 184);
    *v30 = v31;
    *(_QWORD *)(v31 + 8) = v30;
    *(_QWORD *)(a1 + 184) = v30;
    ++*(_QWORD *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, 256))
  {
    v32 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Supporting service NetSharing", (uint8_t *)__p, 2u);
    }
    if (qword_10097B360 != -1)
      dispatch_once(&qword_10097B360, &stru_1009317F0);
    v33 = qword_10097B358;
    v34 = operator new(0x18uLL);
    v34[1] = v2;
    v34[2] = v33;
    v35 = *(_QWORD *)(a1 + 184);
    *v34 = v35;
    *(_QWORD *)(v35 + 8) = v34;
    *(_QWORD *)(a1 + 184) = v34;
    ++*(_QWORD *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, 4096))
  {
    v36 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Supporting service NetConsumer", (uint8_t *)__p, 2u);
    }
    if (qword_10097B370 != -1)
      dispatch_once(&qword_10097B370, &stru_100931810);
    v37 = qword_10097B368;
    v38 = operator new(0x18uLL);
    v38[1] = v2;
    v38[2] = v37;
    v39 = *(_QWORD *)(a1 + 184);
    *v38 = v39;
    *(_QWORD *)(v39 + 8) = v38;
    *(_QWORD *)(a1 + 184) = v38;
    ++*(_QWORD *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, 2048))
  {
    v40 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Supporting service Gaming", (uint8_t *)__p, 2u);
    }
    if (qword_10097B380 != -1)
      dispatch_once(&qword_10097B380, &stru_100931830);
    v41 = off_10097B378;
    v42 = operator new(0x18uLL);
    v42[1] = v2;
    v42[2] = v41;
    v43 = *(_QWORD *)(a1 + 184);
    *v42 = v43;
    *(_QWORD *)(v43 + 8) = v42;
    *(_QWORD *)(a1 + 184) = v42;
    ++*(_QWORD *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, 0x2000))
  {
    v44 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Supporting service Braille", (uint8_t *)__p, 2u);
    }
    if (qword_10097B390 != -1)
      dispatch_once(&qword_10097B390, &stru_100931850);
    v45 = qword_10097B388;
    v46 = operator new(0x18uLL);
    v46[1] = v2;
    v46[2] = v45;
    v47 = *(_QWORD *)(a1 + 184);
    *v46 = v47;
    *(_QWORD *)(v47 + 8) = v46;
    *(_QWORD *)(a1 + 184) = v46;
    ++*(_QWORD *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, 512))
  {
    v48 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Supporting service MAP", (uint8_t *)__p, 2u);
    }
    if (qword_10097AD80 != -1)
      dispatch_once(&qword_10097AD80, &stru_100931870);
    v49 = qword_10097AD78;
    v50 = operator new(0x18uLL);
    v50[1] = v2;
    v50[2] = v49;
    v51 = *(_QWORD *)(a1 + 184);
    *v50 = v51;
    *(_QWORD *)(v51 + 8) = v50;
    *(_QWORD *)(a1 + 184) = v50;
    ++*(_QWORD *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, 0x10000))
  {
    v52 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "Supporting service LE Audio", (uint8_t *)__p, 2u);
    }
    if (qword_10097B3A0 != -1)
      dispatch_once(&qword_10097B3A0, &stru_100931890);
    v53 = qword_10097B398;
    v54 = operator new(0x18uLL);
    v54[1] = v2;
    v54[2] = v53;
    v55 = *(_QWORD *)(a1 + 184);
    *v54 = v55;
    *(_QWORD *)(v55 + 8) = v54;
    *(_QWORD *)(a1 + 184) = v54;
    ++*(_QWORD *)(a1 + 200);
  }
  v56 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, 0x20000);
  if (v78)
    v57 = v56;
  else
    v57 = 0;
  if (v57 == 1)
  {
    v58 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Supporting service WirelessiAPSink", (uint8_t *)__p, 2u);
    }
    if (qword_10097B3B0 != -1)
      dispatch_once(&qword_10097B3B0, &stru_1009318B0);
    v59 = qword_10097B3A8;
    v60 = operator new(0x18uLL);
    v60[1] = v2;
    v60[2] = v59;
    v61 = *(_QWORD *)(a1 + 184);
    *v60 = v61;
    *(_QWORD *)(v61 + 8) = v60;
    *(_QWORD *)(a1 + 184) = v60;
    ++*(_QWORD *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, 0x40000))
  {
    v62 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "Supporting service WirelessCarPlay", (uint8_t *)__p, 2u);
    }
    if (qword_10097B3C0 != -1)
      dispatch_once(&qword_10097B3C0, &stru_1009318D0);
    v63 = qword_10097B3B8;
    v64 = operator new(0x18uLL);
    v64[1] = v2;
    v64[2] = v63;
    v65 = *(_QWORD *)(a1 + 184);
    *v64 = v65;
    *(_QWORD *)(v65 + 8) = v64;
    *(_QWORD *)(a1 + 184) = v64;
    ++*(_QWORD *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, 0x80000))
  {
    v66 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Supporting service AACP Client", (uint8_t *)__p, 2u);
    }
    if (qword_10097AB28 != -1)
      dispatch_once(&qword_10097AB28, &stru_1009318F0);
    v67 = off_10097AB20;
    v68 = operator new(0x18uLL);
    v68[1] = v2;
    v68[2] = v67;
    v69 = *(_QWORD *)(a1 + 184);
    *v68 = v69;
    *(_QWORD *)(v69 + 8) = v68;
    *(_QWORD *)(a1 + 184) = v68;
    ++*(_QWORD *)(a1 + 200);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, 0x100000))
  {
    v70 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "Supporting service GATT", (uint8_t *)__p, 2u);
    }
    if (qword_10097B3D0 != -1)
      dispatch_once(&qword_10097B3D0, &stru_100931910);
    v71 = qword_10097B3C8;
    v72 = operator new(0x18uLL);
    v72[1] = v2;
    v72[2] = v71;
    v73 = *(_QWORD *)(a1 + 184);
    *v72 = v73;
    *(_QWORD *)(v73 + 8) = v72;
    *(_QWORD *)(a1 + 184) = v72;
    ++*(_QWORD *)(a1 + 200);
  }
  sub_100034264((uint64_t)v76);
  operator new();
}

void sub_100493080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void *v34;
  void *v35;

  sub_100034234((uint64_t)&a20);
  sub_100069BDC(v25);
  sub_10002074C(v32);
  sub_1002A912C(v31);
  sub_100069BDC(v30);
  v34 = (void *)v26[59];
  if (v34)
  {
    v26[60] = v34;
    operator delete(v34);
  }
  sub_100069BDC(v29);
  v35 = (void *)v26[48];
  if (v35)
  {
    v26[49] = v35;
    operator delete(v35);
  }
  sub_100069BDC(a10);
  sub_10048FB38(v26 + 34);
  sub_100069BDC(a11);
  sub_10002074C(v28);
  sub_100069BDC(v27);
  sub_100069BDC(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1004931F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD v7[2];
  _QWORD v8[2];

  *(_QWORD *)a1 = off_1009315A8;
  *(_QWORD *)(a1 + 8) = off_100931618;
  *(_QWORD *)(a1 + 16) = off_100931648;
  *(_QWORD *)(a1 + 24) = off_100931678;
  *(_QWORD *)(a1 + 32) = &off_100931698;
  v8[0] = 0;
  v8[1] = 0;
  v2 = a1 + 120;
  sub_10003415C((uint64_t)v8, a1 + 120);
  sub_10002074C((_QWORD *)(a1 + 184));
  *(_WORD *)(a1 + 700) = 0;
  *(_DWORD *)(a1 + 696) = 0;
  sub_100034264((uint64_t)v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 40);
  v3 = *(_QWORD *)(a1 + 104);
  if (v3)
  {
    sub_100475CC8(v3);
    operator delete();
  }
  sub_100034234((uint64_t)v7);
  sub_100034234((uint64_t)v8);
  sub_100069BDC(a1 + 632);
  sub_10002074C((_QWORD *)(a1 + 608));
  sub_1002A912C(a1 + 560);
  sub_100069BDC(a1 + 496);
  v4 = *(void **)(a1 + 472);
  if (v4)
  {
    *(_QWORD *)(a1 + 480) = v4;
    operator delete(v4);
  }
  sub_100069BDC(a1 + 408);
  v5 = *(void **)(a1 + 384);
  if (v5)
  {
    *(_QWORD *)(a1 + 392) = v5;
    operator delete(v5);
  }
  sub_100069BDC(a1 + 320);
  sub_10048FB38((_QWORD *)(a1 + 272));
  sub_100069BDC(a1 + 208);
  sub_10002074C((_QWORD *)(a1 + 184));
  sub_100069BDC(v2);
  sub_100069BDC(a1 + 40);
  return a1;
}

void sub_100493330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _QWORD *v3;
  uint64_t v4;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  sub_100069BDC(v3 + 79);
  sub_10002074C(v3 + 76);
  sub_1002A912C(v3 + 70);
  sub_100069BDC(v3 + 62);
  v6 = (void *)v3[59];
  if (v6)
  {
    v3[60] = v6;
    operator delete(v6);
  }
  sub_100069BDC(v3 + 51);
  v7 = (void *)v3[48];
  if (v7)
  {
    v3[49] = v7;
    operator delete(v7);
  }
  sub_100069BDC(v3 + 40);
  sub_10048FB38(v3 + 34);
  sub_100069BDC(v3 + 26);
  sub_10002074C(v3 + 23);
  sub_100069BDC(v4);
  sub_100069BDC(v3 + 5);
  _Unwind_Resume(a1);
}

uint64_t sub_1004933CC(uint64_t a1)
{
  return sub_1004931F0(a1 - 32);
}

void sub_1004933D4(uint64_t a1)
{
  sub_1004931F0(a1);
  operator delete();
}

void sub_1004933F8(uint64_t a1)
{
  sub_1004931F0(a1 - 32);
  operator delete();
}

uint64_t sub_100493420(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 40);
  sub_100475868(*(_QWORD *)(a1 + 104), QOS_CLASS_USER_INITIATED);
  sub_100034264((uint64_t)v3);
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100931930);
  sub_10042381C(qword_100977B48 + 8, a1 + 24);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100931950);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1 + 8);
  return sub_100034234((uint64_t)v3);
}

void sub_1004934E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004934FC(uint64_t a1)
{
  _QWORD v3[2];

  *(_WORD *)(a1 + 700) = 0;
  *(_DWORD *)(a1 + 696) = 0;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100931950);
  sub_100069060((uint64_t)off_100977A50 + 64, a1 + 8);
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100931930);
  sub_100069060(qword_100977B48 + 8, a1 + 24);
  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 40);
  sub_100475C60(*(_QWORD *)(a1 + 104));
  return sub_100034234((uint64_t)v3);
}

void sub_1004935C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004935D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  int v5;
  NSObject *v6;
  void **v7;
  void *__p[2];
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[2];
  uint8_t buf[4];
  void **v17;
  __int16 v18;
  int v19;

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 40);
  *(_BYTE *)(a1 + 112) = 1;
  *(_DWORD *)(a1 + 696) = 0;
  *(_WORD *)(a1 + 700) = 0;
  sub_100034264((uint64_t)v15);
  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 120);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  sub_10049C8D4(&v11, a1 + 184);
  sub_100034264((uint64_t)v14);
  v2 = sub_100038E50();
  sub_100260C8C(v2 + 368, a1 + 16);
  for (i = v12; i != &v11; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    if (v5)
    {
      v6 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v4 + 192))(__p, v4);
        if (v10 >= 0)
          v7 = __p;
        else
          v7 = (void **)__p[0];
        *(_DWORD *)buf = 136446466;
        v17 = v7;
        v18 = 1024;
        v19 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Could not start service %{public}s - result was %d", buf, 0x12u);
        if (v10 < 0)
          operator delete(__p[0]);
      }
    }
  }
  sub_10002074C(&v11);
  sub_100034234((uint64_t)v14);
  return sub_100034234((uint64_t)v15);
}

void sub_1004937A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_100034234((uint64_t)va);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004937EC(uint64_t a1)
{
  return sub_1004935D4(a1 - 8);
}

uint64_t sub_1004937F4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  __int128 v19;
  void **v20;
  std::string::size_type v21;
  uint64_t v22;
  std::string *v23;
  uint8_t v24[8];
  __int128 v25;
  void *__p[2];
  uint64_t v27;
  std::string v28;
  pthread_mutex_t *v29[2];
  uint8_t buf[8];
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ServiceManager::stackWillStop enter", buf, 2u);
  }
  v33[0] = 0;
  v33[1] = 0;
  sub_10003415C((uint64_t)v33, a1 + 120);
  *(_QWORD *)buf = 0;
  v31 = 0;
  v32 = 0;
  sub_10049C8D4(buf, a1 + 184);
  sub_100034264((uint64_t)v33);
  v3 = sub_100038E50();
  sub_1002B43D4(v3 + 368, a1 + 16);
  for (i = v31; (uint8_t *)i != buf; i = *(_QWORD *)(i + 8))
  {
    __p[0] = *(void **)(i + 16);
    if ((*(unsigned int (**)(void *))(*(_QWORD *)__p[0] + 32))(__p[0]))
    {
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = 0uLL;
      sub_10003415C((uint64_t)&v28, a1 + 496);
      v5 = operator new(0x18uLL);
      v6 = __p[0];
      v5[1] = a1 + 608;
      v5[2] = v6;
      v7 = *(_QWORD *)(a1 + 608);
      *v5 = v7;
      *(_QWORD *)(v7 + 8) = v5;
      *(_QWORD *)(a1 + 608) = v5;
      ++*(_QWORD *)(a1 + 624);
      sub_100034264((uint64_t)&v28);
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p[0] + 24))(__p[0]) != 113)
      {
        sub_100034188((uint64_t)&v28);
        sub_100493C70(a1 + 608, __p);
        sub_100034264((uint64_t)&v28);
      }
      sub_100034234((uint64_t)&v28);
    }
  }
  v29[0] = 0;
  v29[1] = 0;
  sub_10003415C((uint64_t)v29, a1 + 496);
  while (*(_QWORD *)(a1 + 624))
  {
    if (!sub_100043714((pthread_cond_t *)(a1 + 560), v29, 0x2710uLL))
    {
      v8 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F6680((uint64_t *)(a1 + 624), v8, v9);
      memset(&v28, 0, sizeof(v28));
      sub_100091AE8(&v28, "ServiceManager shutdown failure, waiting for ");
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 616) + 16);
      if (*(char *)(v10 + 31) < 0)
      {
        sub_10003430C(__p, *(void **)(v10 + 8), *(_QWORD *)(v10 + 16));
      }
      else
      {
        v19 = *(_OWORD *)(v10 + 8);
        v27 = *(_QWORD *)(v10 + 24);
        *(_OWORD *)__p = v19;
      }
      if (v27 >= 0)
        v20 = __p;
      else
        v20 = (void **)__p[0];
      if (v27 >= 0)
        v21 = HIBYTE(v27);
      else
        v21 = (std::string::size_type)__p[1];
      std::string::append(&v28, (const std::string::value_type *)v20, v21);
      if (SHIBYTE(v27) < 0)
        operator delete(__p[0]);
      v22 = sub_100027F68();
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &v28;
      else
        v23 = (std::string *)v28.__r_.__value_.__r.__words[0];
      sub_100091AE8(&v25, (char *)v23);
      sub_1005756F0(v22, 3715, &v25, 1);
    }
  }
  sub_10002074C((_QWORD *)(a1 + 608));
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = 0uLL;
  sub_10003415C((uint64_t)&v28, a1 + 40);
  *(_BYTE *)(a1 + 112) = 0;
  sub_100034264((uint64_t)&v28);
  __p[0] = 0;
  __p[1] = 0;
  sub_10003415C((uint64_t)__p, a1 + 208);
  v11 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "stack will stop, clearing the connection request queue", v24, 2u);
  }
  v12 = *(void ***)(a1 + 280);
  v13 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 312) = 0;
  v14 = v13 - (_QWORD)v12;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v12);
      v15 = *(_QWORD *)(a1 + 288);
      v12 = (void **)(*(_QWORD *)(a1 + 280) + 8);
      *(_QWORD *)(a1 + 280) = v12;
      v14 = v15 - (_QWORD)v12;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    v16 = 51;
  }
  else
  {
    if (v14 >> 3 != 2)
      goto LABEL_25;
    v16 = 102;
  }
  *(_QWORD *)(a1 + 304) = v16;
LABEL_25:
  sub_100493D3C((_QWORD *)a1);
  sub_100034264((uint64_t)__p);
  v17 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "ServiceManager::stackWillStop exit", v24, 2u);
  }
  sub_100034234((uint64_t)__p);
  sub_100034234((uint64_t)&v28);
  sub_100034234((uint64_t)v29);
  sub_10002074C(buf);
  return sub_100034234((uint64_t)v33);
}

void sub_100493BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;

  sub_100034234((uint64_t)&a22);
  sub_100034234((uint64_t)&a28);
  sub_10002074C(&a30);
  sub_100034234(v30 - 64);
  _Unwind_Resume(a1);
}

_QWORD *sub_100493C70(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10[3];

  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  v10[2] = 0;
  v2 = *(_QWORD **)(a1 + 8);
  if (v2 != (_QWORD *)a1)
  {
    do
    {
      v6 = (_QWORD *)v2[1];
      v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (_QWORD *)a1)
        {
          v8 = 1;
LABEL_8:
          v6 = (_QWORD *)a1;
        }
        else
        {
          while (1)
          {
            v7 = v6[2];
            v8 = v7 == v5;
            if (v7 != v5)
              break;
            v6 = (_QWORD *)v6[1];
            if (v6 == (_QWORD *)a1)
              goto LABEL_8;
          }
        }
        sub_10047B820((uint64_t)v10, v10, a1, v2, v6);
        if (!v8)
          v6 = (_QWORD *)v6[1];
      }
      v2 = v6;
    }
    while (v6 != (_QWORD *)a1);
  }
  return sub_10002074C(v10);
}

void sub_100493D28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10002074C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100493D3C(_QWORD *a1)
{
  NSObject *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  NSObject *v10;
  _BOOL4 v11;
  void **v12;
  int v13;
  int v14;
  unint64_t v15;
  void *__p[2];
  char v18;
  _QWORD v19[2];
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, (uint64_t)(a1 + 26));
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "------------ Connection Requests ------------", buf, 2u);
  }
  v3 = a1[38];
  v4 = a1[35];
  v5 = a1[36];
  v6 = (_QWORD *)(v4 + 8 * (v3 / 0x66));
  if (v5 == v4)
    v7 = 0;
  else
    v7 = *v6 + 40 * (v3 % 0x66);
  while (1)
  {
    if (v5 == v4)
    {
      v9 = 0;
    }
    else
    {
      v8 = a1[39] + a1[38];
      v9 = *(_QWORD *)(v4 + 8 * (v8 / 0x66)) + 40 * (v8 % 0x66);
    }
    v10 = qword_1009997E8;
    v11 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
    if (v7 == v9)
      break;
    if (v11)
    {
      sub_10043E5F8(*(_QWORD *)v7, __p);
      v12 = __p;
      if (v18 < 0)
        v12 = (void **)__p[0];
      v13 = *(_DWORD *)(v7 + 24);
      v14 = *(_DWORD *)(v7 + 8);
      *(_DWORD *)buf = 136446722;
      v21 = v12;
      v22 = 1024;
      v23 = v13;
      v24 = 1024;
      v25 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device: %{public}s with Services: 0x%x and in state %d ", buf, 0x18u);
      if (v18 < 0)
        operator delete(__p[0]);
    }
    v7 += 40;
    if (v7 - *v6 == 4080)
    {
      v15 = v6[1];
      ++v6;
      v7 = v15;
    }
    v4 = a1[35];
    v5 = a1[36];
  }
  if (v11)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "----------------------------------------------", buf, 2u);
  }
  return sub_100034234((uint64_t)v19);
}

void sub_100493F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100493F90(uint64_t a1)
{
  return sub_1004937F4(a1 - 8);
}

uint64_t sub_100493F98(uint64_t a1, uint64_t a2)
{
  _QWORD v4[2];
  uint64_t v5;

  v4[1] = 0;
  v5 = a2;
  v4[0] = 0;
  sub_10003415C((uint64_t)v4, a1 + 496);
  sub_100493C70(a1 + 608, &v5);
  sub_1002A9188((pthread_cond_t *)(a1 + 560));
  return sub_100034234((uint64_t)v4);
}

void sub_100493FEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100494004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 320);
  v6 = sub_10049CB78(*(_QWORD *)(a1 + 384), *(_QWORD *)(a1 + 392), a2, a3);
  sub_100067634(a1 + 384, v6, *(_QWORD *)(a1 + 392));
  sub_100034234((uint64_t)v8);
  return 0;
}

void sub_100494074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100494088(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD v19[2];

  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, (uint64_t)(a1 + 51));
  v5 = (_QWORD *)a1[60];
  v4 = a1[61];
  if ((unint64_t)v5 >= v4)
  {
    v7 = a1[59];
    v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v9 = v4 - v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)sub_10007ABA0((uint64_t)(a1 + 61), v11);
    else
      v12 = 0;
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    v16 = (char *)a1[59];
    v15 = (char *)a1[60];
    if (v15 != v16)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      v15 = (char *)a1[59];
    }
    a1[59] = v13;
    a1[60] = v6;
    a1[61] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  a1[60] = v6;
  return sub_100034234((uint64_t)v19);
}

void sub_10049417C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100494190(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  int64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 408);
  v5 = *(char **)(a1 + 472);
  v4 = *(char **)(a1 + 480);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 480);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8)
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    *(_QWORD *)(a1 + 480) = &v5[v6];
  }
  return sub_100034234((uint64_t)v8);
}

uint64_t sub_100494228(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  uint8_t v22;
  _BYTE v23[7];
  _QWORD v24[2];
  void *__p;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v28[2];
  uint8_t buf[4];
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  unsigned int v38;

  v28[0] = 0;
  v28[1] = 0;
  sub_10003415C((uint64_t)v28, a1 + 408);
  __p = 0;
  v26 = 0;
  v27 = 0;
  sub_10001FE6C(&__p, a1 + 472);
  sub_100034264((uint64_t)v28);
  v12 = __p;
  if (__p != v26)
  {
    if ((_DWORD)a5 == 12)
      v13 = a7;
    else
      v13 = a6;
    do
    {
      v14 = v13;
      if ((a5 - 105) >= 0xFFFFFFFE)
      {
        sub_1002A8D18(4);
        v14 = a6;
      }
      (**(void (***)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))*v12)(*v12, a2, a3, a5, v14);
      ++v12;
    }
    while (v12 != v26);
  }
  v24[0] = 0;
  v24[1] = 0;
  sub_10003415C((uint64_t)v24, a1 + 320);
  for (i = *(_QWORD *)(a1 + 384); i != *(_QWORD *)(a1 + 392); i += 32)
  {
    if ((a3 & ~*(_DWORD *)(i + 16)) == 0)
    {
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_100931930);
      if (sub_100021398(qword_100977B48, *(_QWORD *)i))
      {
        if (*(_QWORD *)(i + 8))
        {
          if (qword_1009778E8 != -1)
            dispatch_once(&qword_1009778E8, &stru_100931970);
          if (!sub_10046F750((uint64_t)off_1009778E0, *(_QWORD *)i, a2))
          {
            v16 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
              sub_1006F66F0(&v22, v23, v16);
          }
          if (qword_10097AB48 != -1)
            dispatch_once(&qword_10097AB48, &stru_100931990);
          operator new();
        }
        v18 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67110144;
          v30 = a3;
          v31 = 1024;
          v32 = a4;
          v33 = 1024;
          v34 = a5;
          v35 = 1024;
          v36 = a6;
          v37 = 1024;
          v38 = a7;
          _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Invalid fCallback: service %d, eventType %d, event %d, result %d, reason %d", buf, 0x20u);
        }
      }
      else
      {
        v17 = sub_10049C96C(*(_QWORD *)(a1 + 384), *(_QWORD *)(a1 + 392), *(_QWORD *)i);
        sub_100067634(a1 + 384, v17, *(_QWORD *)(a1 + 392));
      }
    }
  }
  sub_100034234((uint64_t)v24);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  return sub_100034234((uint64_t)v28);
}

void sub_10049461C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_10049466C(int64x2_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  _BYTE *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _BYTE *v16;
  int v17;
  NSObject *v18;
  _BYTE *v19;
  uint64_t i;
  NSObject *v21;
  _BYTE *v22;
  uint64_t v23;
  NSObject *v24;
  _BYTE *v25;
  void *v27;
  id v28;
  void *v29;
  double v30;
  double Current;
  NSObject *v32;
  _BYTE *v33;
  _QWORD v34[2];
  _QWORD v35[2];
  _BYTE v36[12];
  __int16 v37;
  int v38;
  char v39;
  unsigned __int8 uu[8];
  uint64_t v41;
  __int128 buf;
  uint64_t v43;
  _BYTE __p[40];
  uint64_t v45;
  char v46;

  v35[0] = 0;
  v35[1] = 0;
  sub_10003415C((uint64_t)v35, (uint64_t)a1[13].i64);
  sub_100493D3C(a1);
  if (a1[19].i64[1])
    v4 = *(_QWORD *)(*(_QWORD *)(a1[17].i64[1] + 8 * (a1[19].i64[0] / 0x66uLL)) + 40 * (a1[19].i64[0] % 0x66uLL));
  else
    v4 = 0;
  sub_100034264((uint64_t)v35);
  if (!v4)
    return sub_100034234((uint64_t)v35);
  if (v4 == a2)
  {
    v10 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      v11 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Removing stalled device %{public}s from connection request queue and processing next conenction.", (uint8_t *)&buf, 0xCu);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    sub_100494DFC(a1, a2);
LABEL_32:
    v34[0] = 0;
    v34[1] = 0;
    sub_10003415C((uint64_t)v34, (uint64_t)&a1[7].i64[1]);
    buf = 0uLL;
    v43 = 0;
    sub_10049C8D4(&buf, (uint64_t)&a1[11].i64[1]);
    sub_100034264((uint64_t)v34);
    if (qword_100978190 != -1)
      dispatch_once(&qword_100978190, &stru_1009319B0);
    v17 = sub_100439360((uint64_t)off_100978188, a2);
    if (v17)
    {
      v18 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        v19 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)v36 = 136446466;
        *(_QWORD *)&v36[4] = v19;
        v37 = 1024;
        v38 = v17;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Device %{public}s has pending services:0x%x for a stalled connection request in the queue. Reporting conenction result for the pending services.", v36, 0x12u);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      for (i = *((_QWORD *)&buf + 1); (__int128 *)i != &buf; i = *(_QWORD *)(i + 8))
      {
        if ((*(_DWORD *)(*(_QWORD *)(i + 16) + 32) & v17) != 0)
          sub_1004953B8(a1, a2);
      }
    }
    if (sub_10043FC5C(a2))
    {
      v21 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        v22 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)v36 = 136446210;
        *(_QWORD *)&v36[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Force Disconnect %{public}s since it had a stalled connection request in the queue.", v36, 0xCu);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      v23 = a1[6].i64[1];
      *(_QWORD *)__p = _NSConcreteStackBlock;
      *(_QWORD *)&__p[8] = 3221225472;
      *(_QWORD *)&__p[16] = sub_10049A8D0;
      *(_QWORD *)&__p[24] = &unk_10091FF68;
      *(_QWORD *)&__p[32] = a1;
      v45 = a2;
      v46 = 1;
      sub_100041A34(v23, __p);
    }
    v24 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      v25 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)v36 = 136446210;
      *(_QWORD *)&v36[4] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Check if we can inititate a reconnection for the stalled device %{public}s.", v36, 0xCu);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    *(_QWORD *)uu = 0;
    v41 = 0;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009319D0);
    sub_10065A6B4((uint64_t)off_1009778C0, (unsigned __int8 *)(a2 + 128), uu);
    if (!uuid_is_null(uu))
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009319D0);
      v27 = off_1009778C0;
      v28 = sub_100030DF4(uu);
      v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
      v30 = sub_100660234((uint64_t)v27, v29);

      Current = CFAbsoluteTimeGetCurrent();
      if (Current > v30 && Current - v30 <= 1.0)
      {
        v32 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(a2, v36);
          v33 = v39 >= 0 ? v36 : *(_BYTE **)v36;
          *(_DWORD *)__p = 136446978;
          *(_QWORD *)&__p[4] = v33;
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 1;
          *(_WORD *)&__p[18] = 2048;
          *(double *)&__p[20] = Current;
          *(_WORD *)&__p[28] = 2048;
          *(double *)&__p[30] = v30;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "LE Adv for the stalled device %{public}s was last seen within %d second(s). CurrentTimeStamp: %f, lastSeenTimeStamp: %f. Initiating reconnection.", __p, 0x26u);
          if (v39 < 0)
            operator delete(*(void **)v36);
        }
        memset(__p, 0, 24);
        sub_100495A98(a1, a2, -1, (const std::string *)__p, 2);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
    }
    sub_10002074C(&buf);
    sub_100034234((uint64_t)v34);
    return sub_100034234((uint64_t)v35);
  }
  sub_100034188((uint64_t)v35);
  v5 = a1[19].u64[0];
  v6 = a1[17].i64[1];
  v7 = a1[18].i64[0];
  v8 = (_QWORD *)(v6 + 8 * (v5 / 0x66));
  if (v7 == v6)
    v9 = 0;
  else
    v9 = *v8 + 40 * (v5 % 0x66);
LABEL_16:
  v12 = (_QWORD *)v9;
  while (1)
  {
    v13 = v7 == v6 ? 0 : *(_QWORD *)(v6 + 8 * ((a1[19].i64[1] + v5) / 0x66)) + 40 * ((a1[19].i64[1] + v5) % 0x66);
    if (v12 == (_QWORD *)v13)
      break;
    if (*v12 == a2)
    {
      v15 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        v16 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Removing stalled device %{public}s from connection request queue.", (uint8_t *)&buf, 0xCu);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      sub_100453E50(a2, 0);
      sub_10048F0A0(a1 + 17, v8, v9);
      break;
    }
    v12 += 5;
    v9 += 40;
    if (*v8 + 4080 == v9)
    {
      v14 = v8[1];
      ++v8;
      v9 = v14;
      goto LABEL_16;
    }
  }
  sub_100493D3C(a1);
  sub_100034264((uint64_t)v35);
  if (v12 != (_QWORD *)v13)
    goto LABEL_32;
  return sub_100034234((uint64_t)v35);
}

void sub_100494D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_10002074C(&a19);
  sub_100034234((uint64_t)&a9);
  sub_100034234((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_100494DFC(int64x2_t *a1, uint64_t a2)
{
  NSObject *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  NSObject *v14;
  void **v15;
  NSObject *v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  void **v21;
  NSObject *v22;
  void *__p[2];
  char v25;
  _QWORD v26[2];
  uint8_t buf[4];
  void **v28;

  v26[0] = 0;
  v26[1] = 0;
  sub_10003415C((uint64_t)v26, (uint64_t)a1[13].i64);
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "processing next connection", (uint8_t *)__p, 2u);
  }
  sub_100493D3C(a1);
  v5 = a1[19].u64[0];
  v6 = a1[17].i64[1];
  v7 = a1[18].i64[0];
  v8 = (_QWORD *)(v6 + 8 * (v5 / 0x66));
  if (v7 == v6)
    v9 = 0;
  else
    v9 = *v8 + 40 * (v5 % 0x66);
LABEL_6:
  v10 = v9;
  while (1)
  {
    v11 = v7 == v6 ? 0 : *(_QWORD *)(v6 + 8 * ((a1[19].i64[1] + v5) / 0x66)) + 40 * ((a1[19].i64[1] + v5) % 0x66);
    if (v10 == v11)
      break;
    if (*(_QWORD *)v10 == a2)
    {
      v13 = sub_100496DBC((uint64_t)a1, a2);
      if (v13)
      {
        if (sub_10043F65C(a2, 0x80000u) == 4 && (v13 & 0x80000) == 0 && (*(_BYTE *)(v10 + 26) & 8) != 0)
        {
          v14 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(a2, __p);
            v15 = v25 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 136446210;
            v28 = v15;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "AACP is not being connected to %{public}s", buf, 0xCu);
            if (v25 < 0)
              operator delete(__p[0]);
          }
        }
      }
      v16 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        v17 = v25 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v28 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Removing device %{public}s from connection request queue", buf, 0xCu);
        if (v25 < 0)
          operator delete(__p[0]);
      }
      sub_100453E50(a2, 0);
      if (sub_100454348(a2))
        sub_10045421C(a2);
      sub_10048F0A0(a1 + 17, v8, v9);
      sub_100493D3C(a1);
      break;
    }
    v10 += 40;
    v9 += 40;
    if (*v8 + 4080 == v9)
    {
      v12 = v8[1];
      ++v8;
      v9 = v12;
      goto LABEL_6;
    }
  }
  if (a1[19].i64[1])
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a1[17].i64[1] + 8 * (a1[19].i64[0] / 0x66uLL)) + 40 * (a1[19].i64[0] % 0x66uLL));
    v19 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 384))(v19) && sub_100444C24(v18))
    {
      if (qword_10097B080 != -1)
        dispatch_once(&qword_10097B080, &stru_100931A10);
      sub_10048BE44();
    }
    v20 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v18, __p);
      v21 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v28 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Connecting to device %{public}s", buf, 0xCu);
      if (v25 < 0)
        operator delete(__p[0]);
    }
    if (qword_100978190 != -1)
      dispatch_once(&qword_100978190, &stru_1009319B0);
    sub_100439750((uint64_t)off_100978188, v18);
    sub_100494228((uint64_t)a1, v18, 0xFFFFFFFFLL, 0, 0, 0, 0);
    sub_100453E50(v18, 1);
    if (qword_10097B080 != -1)
      dispatch_once(&qword_10097B080, &stru_100931A10);
    sub_10048BB30(qword_10097B078, v18);
  }
  v22 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "No pending connection to process", (uint8_t *)__p, 2u);
  }
  return sub_100034234((uint64_t)v26);
}

void sub_100495384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004953B8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  int v10;
  NSObject *v11;
  int v12;
  void **v13;
  int v14;
  void **p_p;
  void *__p;
  char v18;
  _QWORD v19[2];
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  int v23;

  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 40);
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_1009319B0);
  v10 = sub_100439F48((uint64_t)off_100978188, a2, a3, a4, a5);
  sub_100494228(a1, a2, a3, 0, 11, a5, 0);
  if ((_DWORD)a3 == 2 && !(_DWORD)a5 && !*(_BYTE *)(a2 + 1308))
  {
    LODWORD(__p) = 0;
    if (qword_10097B3E0 != -1)
      dispatch_once(&qword_10097B3E0, &stru_1009319F0);
    (*(void (**)(void *, uint64_t, void **))(*(_QWORD *)off_10097B3D8 + 88))(off_10097B3D8, a2, &__p);
    sub_1004498BC(a2, (int)__p);
  }
  if (v10)
  {
    v11 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, &__p);
      v12 = v18;
      v13 = (void **)__p;
      v14 = sub_100442118(a2, 40);
      p_p = &__p;
      if (v12 < 0)
        p_p = v13;
      *(_DWORD *)buf = 136446466;
      v21 = p_p;
      v22 = 1024;
      v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received all connection results for device %{public}s AACP incoming %d", buf, 0x12u);
      if (v18 < 0)
        operator delete(__p);
    }
    sub_1004468B0(a2);
    if (qword_10097B080 != -1)
      dispatch_once(&qword_10097B080, &stru_100931A10);
    sub_10048BD34();
  }
  return sub_100034234((uint64_t)v19);
}

void sub_1004959DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_100495A3C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  _QWORD v4[6];
  char v5;

  v3 = *(_QWORD *)(a1 + 104);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10049A8D0;
  v4[3] = &unk_10091FF68;
  v4[4] = a1;
  v4[5] = a2;
  v5 = a3;
  sub_100041A34(v3, v4);
}

uint64_t sub_100495A98(int64x2_t *a1, uint64_t a2, int a3, const std::string *a4, uint64_t a5)
{
  const std::string *v10;
  __CFString *v11;
  NSObject *v12;
  void *v13;
  id v14;
  void *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  _BYTE *v21;
  int v22;
  _BYTE *v23;
  NSObject *v24;
  int v25;
  int64_t size;
  BOOL v27;
  uint64_t v28;
  const std::string *v29;
  char *v30;
  int v31;
  unsigned __int8 *v32;
  int64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  int64_t v37;
  std::string *v38;
  int64_t v39;
  char *v40;
  char *v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  unint64_t v54;
  NSObject *v55;
  _BYTE *v56;
  unint64_t v57;
  unint64_t v58;
  NSObject *v59;
  _BYTE *v60;
  int v61;
  int v62;
  int i;
  BOOL v64;
  NSObject *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  NSObject *v70;
  uint64_t (***v71)(void *, uint64_t);
  int v72;
  BOOL v74;
  const std::string *v75;
  char v76;
  uint64_t v77;
  _QWORD v78[6];
  _QWORD v79[2];
  _QWORD v80[2];
  void *__p[2];
  char v82;
  uint64_t v83[3];
  _BYTE uu[24];
  int v85;
  char v86;
  uint64_t v87;
  _BYTE buf[18];
  char v89;
  char v90[24];

  if (!sub_100442118(a2, 12))
    goto LABEL_22;
  if ((SHIBYTE(a4->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v10 = a4;
    if (!*((_BYTE *)&a4->__r_.__value_.__s + 23))
      goto LABEL_8;
LABEL_7:
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10));
    goto LABEL_9;
  }
  if (a4->__r_.__value_.__l.__size_)
  {
    v10 = (const std::string *)a4->__r_.__value_.__r.__words[0];
    goto LABEL_7;
  }
LABEL_8:
  v11 = CFSTR("Unknown");
LABEL_9:
  *(_QWORD *)uu = 0;
  *(_QWORD *)&uu[8] = 0;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009319D0);
  sub_10065A6B4((uint64_t)off_1009778C0, (unsigned __int8 *)(a2 + 128), uu);
  if (uuid_is_null(uu))
  {
    v12 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(a2, v83);
      sub_1006F679C(v83, (uint64_t)v90, v12);
    }
LABEL_18:
    v17 = -1;
    goto LABEL_19;
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009319D0);
  v13 = off_1009778C0;
  v14 = sub_100030DF4(uu);
  v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  v16 = sub_100660234((uint64_t)v13, v15);

  if (v16 <= 0.0)
    goto LABEL_18;
  v17 = (uint64_t)(CFAbsoluteTimeGetCurrent() - v16);
LABEL_19:
  v18 = sub_100065478();
  sub_10043E5F8(a2, __p);
  (*(void (**)(uint64_t, void **, __CFString *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v18 + 392))(v18, __p, v11, v17, 0, a5);
  if (v82 < 0)
    operator delete(__p[0]);

LABEL_22:
  v80[0] = 0;
  v80[1] = 0;
  sub_10003415C((uint64_t)v80, (uint64_t)&a1[2].i64[1]);
  v19 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, buf);
    v20 = v89;
    v21 = *(_BYTE **)buf;
    v22 = sub_10043E93C((unsigned __int8 *)a2);
    v23 = buf;
    *(_DWORD *)uu = 67109634;
    if (v20 < 0)
      v23 = v21;
    *(_DWORD *)&uu[4] = a3;
    *(_WORD *)&uu[8] = 2082;
    *(_QWORD *)&uu[10] = v23;
    *(_WORD *)&uu[18] = 1024;
    *(_DWORD *)&uu[20] = v22;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Connecting 0x%x services to device %{public}s, paired %d", uu, 0x18u);
    if (v89 < 0)
      operator delete(*(void **)buf);
  }
  if (a1[7].i8[0])
  {
    sub_100034264((uint64_t)v80);
    if (qword_100978130 != -1)
      dispatch_once(&qword_100978130, &stru_100931A50);
    if (sub_10002527C((uint64_t)off_100978128) == 1)
    {
      if (*(_BYTE *)(a2 + 968))
      {
        a3 &= 0xFFEFFFFE;
        v24 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uu = 67109120;
          *(_DWORD *)&uu[4] = a3;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Wireless Splitter Guest Not In Contacts connecting with services 0x%x", uu, 8u);
        }
      }
      v25 = SHIBYTE(a4->__r_.__value_.__r.__words[2]);
      if (v25 >= 0)
        size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      else
        size = a4->__r_.__value_.__l.__size_;
      if (size)
      {
        v27 = *(_BYTE *)(a2 + 1427) != 0;
        v28 = qword_100999600;
        if ((_UNKNOWN *)qword_100999600 != &unk_100999608)
        {
          v74 = *(_BYTE *)(a2 + 1427) != 0;
          v76 = a5;
          v77 = (uint64_t)a1;
          v75 = a4;
          if (v25 >= 0)
            v29 = a4;
          else
            v29 = (const std::string *)a4->__r_.__value_.__r.__words[0];
          v30 = (char *)v29 + size;
          while (1)
          {
            v31 = *(char *)(v28 + 55);
            v32 = v31 >= 0 ? (unsigned __int8 *)(v28 + 32) : *(unsigned __int8 **)(v28 + 32);
            v33 = v31 >= 0 ? *(unsigned __int8 *)(v28 + 55) : *(_QWORD *)(v28 + 40);
            if (!v33)
              break;
            if (size >= v33)
            {
              v36 = *v32;
              v37 = size;
              v38 = (std::string *)v29;
              do
              {
                v39 = v37 - v33;
                if (v39 == -1)
                  break;
                v40 = (char *)memchr(v38, v36, v39 + 1);
                if (!v40)
                  break;
                v41 = v40;
                if (!memcmp(v40, v32, v33))
                {
                  if (v41 == v30 || v41 - (char *)v29 == -1)
                    break;
                  goto LABEL_66;
                }
                v38 = (std::string *)(v41 + 1);
                v37 = v30 - (v41 + 1);
              }
              while (v37 >= v33);
            }
            v34 = *(_QWORD **)(v28 + 8);
            if (v34)
            {
              do
              {
                v35 = v34;
                v34 = (_QWORD *)*v34;
              }
              while (v34);
            }
            else
            {
              do
              {
                v35 = *(_QWORD **)(v28 + 16);
                v64 = *v35 == v28;
                v28 = (uint64_t)v35;
              }
              while (!v64);
            }
            v28 = (uint64_t)v35;
            if (v35 == (_QWORD *)&unk_100999608)
            {
              a1 = (int64x2_t *)v77;
              LOBYTE(a5) = v76;
              a4 = v75;
              v27 = v74;
              goto LABEL_70;
            }
          }
LABEL_66:
          a1 = (int64x2_t *)v77;
          sub_100494228(v77, a2, 0, 3, 901, 0, 0);
          v27 = 1;
          LOBYTE(a5) = v76;
          a4 = v75;
        }
LABEL_70:
        *(_BYTE *)(a2 + 1427) = v27;
        std::string::operator=((std::string *)(a2 + 1472), a4);
      }
      v79[0] = 0;
      v79[1] = 0;
      sub_10003415C((uint64_t)v79, (uint64_t)a1[13].i64);
      v46 = a1[19].u64[0];
      v47 = a1[17].i64[1];
      v48 = a1[18].i64[0];
      v49 = (_QWORD *)(v47 + 8 * (v46 / 0x66));
      if (v48 == v47)
        v50 = 0;
      else
        v50 = *v49 + 40 * (v46 % 0x66);
LABEL_74:
      v51 = v50 - 4080;
      while (1)
      {
        v52 = v48 == v47
            ? 0
            : *(_QWORD *)(v47 + 8 * ((a1[19].i64[1] + v46) / 0x66)) + 40 * ((a1[19].i64[1] + v46) % 0x66);
        if (v50 == v52)
          break;
        if (*(_QWORD *)v50 == a2)
        {
          v53 = *(_DWORD *)(v50 + 24);
          if ((v53 & a3) != 0)
          {
            v55 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043E5F8(a2, uu);
              if (uu[23] >= 0)
                v56 = uu;
              else
                v56 = *(_BYTE **)uu;
              *(_DWORD *)buf = 67109378;
              *(_DWORD *)&buf[4] = v53;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = v56;
              _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "Connection request for 0x%x to device %{public}s already queued, ignoring duplicate request", buf, 0x12u);
              if ((uu[23] & 0x80000000) != 0)
                operator delete(*(void **)uu);
              v53 = *(_DWORD *)(v50 + 24);
            }
            sub_100493D3C(a1);
            a3 &= ~v53;
            v47 = a1[17].i64[1];
            v48 = a1[18].i64[0];
            break;
          }
        }
        v50 += 40;
        v51 += 40;
        if (*v49 == v51)
        {
          v54 = v49[1];
          ++v49;
          v50 = v54;
          goto LABEL_74;
        }
      }
      if (v48 == v47)
      {
        v58 = 0;
      }
      else
      {
        v57 = a1[19].i64[1] + a1[19].i64[0];
        v58 = *(_QWORD *)(v47 + 8 * (v57 / 0x66)) + 40 * (v57 % 0x66);
      }
      if (v50 == v58)
      {
        v65 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(a2, uu);
          v66 = uu[23] >= 0 ? uu : *(_BYTE **)uu;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v66;
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "No connection request for the device %{public}s, adding to connection request queue", buf, 0xCu);
          if ((uu[23] & 0x80000000) != 0)
            operator delete(*(void **)uu);
        }
        *(_QWORD *)uu = a2;
        *(_DWORD *)&uu[8] = 0;
        *(_QWORD *)&uu[16] = 0;
        v85 = a3;
        v86 = a5;
        v87 = mach_continuous_time();
        sub_10048E394((int64x2_t *)a1[17].i64, (uint64_t)uu);
        v67 = sub_100027F68();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67))
        {
          v68 = a1[6].i64[1];
          v78[0] = _NSConcreteStackBlock;
          v78[1] = 3221225472;
          v78[2] = sub_100498044;
          v78[3] = &unk_100918090;
          v78[4] = a1;
          v78[5] = a2;
          sub_100475CEC(v68, 60000, v78);
        }
        sub_100493D3C(a1);
        v69 = a1[19].u64[1];
        if (v69 < 2)
        {
          sub_100034264((uint64_t)v79);
          sub_100494228((uint64_t)a1, a2, 0xFFFFFFFFLL, 0, 0, 0, 0);
          sub_100453E50(a2, 1);
          if (sub_10043E93C((unsigned __int8 *)a2)
            && !sub_10043FC5C(a2)
            && sub_100442118(a2, 19))
          {
            v71 = (uint64_t (***)(void *, uint64_t))sub_100350148();
            v45 = (**v71)(v71, a2);
            if ((_DWORD)v45)
            {
              if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
              {
                sub_10043E5F8(a2, uu);
                sub_1006F6724();
              }
              sub_100494DFC(a1, a2);
            }
            goto LABEL_135;
          }
          if (sub_10043E93C((unsigned __int8 *)a2))
            v72 = sub_100442118(a2, 21);
          else
            v72 = 0;
          sub_100498214((uint64_t)a1, a2, v72);
        }
        else
        {
          v70 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uu = 134217984;
            *(_QWORD *)&uu[4] = v69;
            _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "Queued up connection request - queue size is %lu", uu, 0xCu);
          }
          sub_100493D3C(a1);
        }
      }
      else
      {
        if (a3)
        {
          v59 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(a2, buf);
            v60 = v89 >= 0 ? buf : *(_BYTE **)buf;
            v61 = *(_DWORD *)(v50 + 24);
            *(_DWORD *)uu = 136446722;
            *(_QWORD *)&uu[4] = v60;
            *(_WORD *)&uu[12] = 1024;
            *(_DWORD *)&uu[14] = v61;
            *(_WORD *)&uu[18] = 1024;
            *(_DWORD *)&uu[20] = a3;
            _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "There is an existing connection request for the device %{public}s, but current service mask 0x%x and new service mask 0x%x are different. Appening new service to existing service mask", uu, 0x18u);
            if (v89 < 0)
              operator delete(*(void **)buf);
          }
          v62 = sub_100496DBC((uint64_t)a1, *(_QWORD *)v50);
          for (i = 0; i != 31; ++i)
          {
            v64 = ((1 << i) & a3) != 0 && (v62 & a3) == 0;
            if (v64)
              *(_DWORD *)(v50 + 24) |= 1 << i;
          }
        }
        sub_100493D3C(a1);
      }
      v45 = 0;
LABEL_135:
      sub_100034234((uint64_t)v79);
      goto LABEL_136;
    }
    v42 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F6768(v42, v43, v44);
  }
  v45 = 202;
LABEL_136:
  sub_100034234((uint64_t)v80);
  return v45;
}

void sub_1004964E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_100034234((uint64_t)&a19);
  sub_100034234((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_10049658C(uint64_t a1, _BYTE *a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 40);
  sub_10006BB10(*(_QWORD *)(a1 + 104), a2);
  return sub_100034234((uint64_t)v5);
}

void sub_1004965D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1004965EC(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[2];

  v3 = a2;
  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 40);
  sub_100041A34(*(_QWORD *)(a1 + 104), v3);
  sub_100034234((uint64_t)v4);

}

void sub_100496640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_100496660(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 40);
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_1009319B0);
  sub_100439A10((uint64_t)off_100978188, a2, a3, a4, a5);
  sub_100494228(a1, a2, a3, 0, 1, 0, 0);
  return sub_100034234((uint64_t)v11);
}

void sub_100496720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100496734(int64x2_t *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t result;
  char v8;
  NSObject *v9;
  std::string *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  NSObject *v19;
  int v20;
  std::string *p_p;
  NSObject *v22;
  std::string *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  std::string::size_type v28;
  NSObject *v29;
  void **v30;
  int v31;
  void *v32[2];
  char v33;
  _QWORD v34[2];
  std::string __p;
  unsigned int v36;
  __int128 buf;
  uint64_t v38;

  v6 = sub_10003BE44();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, 0x80000);
  if ((_DWORD)result)
  {
    if (sub_10043F65C(a2, 0x80000u) != 4)
      return 0;
    if (qword_10097AB28 != -1)
      dispatch_once(&qword_10097AB28, &stru_1009318F0);
    if (((*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)off_10097AB20 + 136))(off_10097AB20, a2) & 1) != 0)
      return 0;
    if (qword_10097AB28 != -1)
      dispatch_once(&qword_10097AB28, &stru_1009318F0);
    v8 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)off_10097AB20 + 120))(off_10097AB20, a2);
    result = 0;
    if (a3 != 0x80000 && (v8 & 1) == 0)
    {
      if (qword_10097AB28 != -1)
        dispatch_once(&qword_10097AB28, &stru_1009318F0);
      if (sub_100277FA0((uint64_t)off_10097AB20, a2))
      {
        v9 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(a2, &__p);
          v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Remove %{public}s from stale AACP connection device list and return false", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (qword_10097AB28 != -1)
          dispatch_once(&qword_10097AB28, &stru_1009318F0);
        sub_100277FD4(off_10097AB20, a2);
        return 0;
      }
      v34[0] = 0;
      v34[1] = 0;
      sub_10003415C((uint64_t)v34, (uint64_t)a1[13].i64);
      v11 = a1[19].u64[0];
      v12 = a1[17].i64[1];
      v13 = a1[18].i64[0];
      v14 = (_QWORD *)(v12 + 8 * (v11 / 0x66));
      if (v13 == v12)
        v15 = 0;
      else
        v15 = *v14 + 40 * (v11 % 0x66);
LABEL_27:
      v16 = v15 - 4080;
      while (1)
      {
        if (v13 == v12)
          v17 = 0;
        else
          v17 = *(_QWORD *)(v12 + 8 * ((a1[19].i64[1] + v11) / 0x66)) + 40 * ((a1[19].i64[1] + v11) % 0x66);
        if (v15 == v17)
          goto LABEL_48;
        if (*(_QWORD *)v15 == a2 && (*(_BYTE *)(v15 + 26) & 8) != 0)
          break;
        v15 += 40;
        v16 += 40;
        if (*v14 == v16)
        {
          v18 = v14[1];
          ++v14;
          v15 = v18;
          goto LABEL_27;
        }
      }
      if (qword_100978190 != -1)
        dispatch_once(&qword_100978190, &stru_1009319B0);
      if ((sub_100439360((uint64_t)off_100978188, a2) & 0x80000) == 0)
      {
        if (qword_100978190 != -1)
          dispatch_once(&qword_100978190, &stru_1009319B0);
        if (sub_1004392D8((uint64_t)off_100978188, a2, 0x80000))
        {
          v19 = qword_1009997E8;
          v20 = 0;
          if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
            goto LABEL_56;
          sub_10043E5F8(a2, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = p_p;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Connection request list for %{public}s has AACP -- Condition for waiting not met", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
LABEL_48:
          v20 = 0;
          goto LABEL_56;
        }
      }
      v22 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, &__p);
        v23 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Connection request list for %{public}s has AACP pending -- Wait for it to complete", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v20 = 1;
LABEL_56:
      v24 = a1[17].i64[1];
      if (a1[18].i64[0] == v24)
      {
        v26 = 0;
      }
      else
      {
        v25 = a1[19].i64[1] + a1[19].i64[0];
        v26 = *(_QWORD *)(v24 + 8 * (v25 / 0x66)) + 40 * (v25 % 0x66);
      }
      if (v15 == v26)
      {
        buf = 0uLL;
        v38 = 0;
        if (qword_10097AB58 != -1)
          dispatch_once(&qword_10097AB58, &stru_100931A70);
        sub_1006109F8((uint64_t)off_10097AB50, (void **)&buf);
        v27 = 16;
        if (!sub_10046EA5C((uint64_t)&buf, a2))
        {
          v28 = a1[19].u64[1];
          if (v28)
            v27 = 16;
          else
            v27 = 8;
          v29 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(a2, v32);
            v30 = v33 >= 0 ? v32 : (void **)v32[0];
            LODWORD(__p.__r_.__value_.__l.__data_) = 134218498;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v28;
            WORD2(__p.__r_.__value_.__r.__words[1]) = 2082;
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v30;
            HIWORD(__p.__r_.__value_.__r.__words[2]) = 1024;
            v36 = v27;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Connection request queue size is %luu. Initite AACP client connection request for %{public}s using watchdog stall timeout as %d seconds", (uint8_t *)&__p, 0x1Cu);
            if (v33 < 0)
              operator delete(v32[0]);
          }
          memset(&__p, 0, sizeof(__p));
          v31 = sub_100495A98(a1, a2, 0x80000, &__p, 2);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (!v31)
            v20 = 1;
        }
        if ((_QWORD)buf)
        {
          *((_QWORD *)&buf + 1) = buf;
          operator delete((void *)buf);
        }
      }
      else
      {
        v27 = 16;
      }
      sub_100034234((uint64_t)v34);
      if (!v20)
        return 0;
      if (!sub_100454348(a2))
        sub_100453ED8(a2, v27);
      return 1;
    }
  }
  return result;
}

void sub_100496D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23)
{
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100496DBC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 120);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_10049C8D4(&v8, a1 + 184);
  sub_100034264((uint64_t)v11);
  v4 = v9;
  if (v9 == &v8)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = (_DWORD *)v4[2];
      if ((*(unsigned int (**)(_DWORD *, uint64_t))(*(_QWORD *)v6 + 120))(v6, a2))
        v5 = v6[8] | v5;
      v4 = (uint64_t *)v4[1];
    }
    while (v4 != &v8);
  }
  sub_10002074C(&v8);
  sub_100034234((uint64_t)v11);
  return v5;
}

void sub_100496E80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_10002074C((uint64_t *)va);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100496EA8(uint64_t a1)
{
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_100931A30);
  return sub_100496EF8((int64x2_t *)off_100977A70, *(_QWORD *)(a1 + 32));
}

uint64_t sub_100496EF8(int64x2_t *a1, uint64_t a2)
{
  char v4;
  int v5;
  uint64_t result;
  unsigned int v7;
  NSObject *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  _BYTE *v15;
  NSObject *v16;
  _BYTE *v17;
  NSObject *v18;
  _QWORD v19[2];
  _BYTE __p[12];
  __int16 v21;
  unsigned int v22;
  char v23;
  _BYTE buf[12];
  __int16 v25;
  _BYTE v26[10];
  const char *v27;
  _BYTE v28[10];
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  _BYTE *v36;

  v4 = sub_100496DBC((uint64_t)a1, a2);
  v5 = 25;
  result = sub_100444790(a2);
  if ((_DWORD)result)
  {
    result = sub_100498AC8((uint64_t)a1, a2);
    v5 = result & 0x19;
  }
  if ((v4 & 0x19) != 0)
  {
    v7 = v5 & ~(v4 & 0x19);
    if (v7)
    {
      v8 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        if ((v7 & 1) != 0)
          v9 = " HFP";
        else
          v9 = "";
        if (v7 >= 0x10)
          v10 = " A2DP";
        else
          v10 = "";
        if ((v7 & 8) != 0)
          v11 = " AVRCP";
        else
          v11 = "";
        if ((v4 & 1) != 0)
          v12 = " HFP";
        else
          v12 = "";
        if ((v4 & 0x10) != 0)
          v13 = " A2DP";
        else
          v13 = "";
        if ((v4 & 8) != 0)
          v14 = " AVRCP";
        else
          v14 = "";
        sub_10043E5F8(a2, __p);
        v15 = __p;
        if (v23 < 0)
          v15 = *(_BYTE **)__p;
        *(_DWORD *)buf = 136448003;
        *(_QWORD *)&buf[4] = v9;
        v25 = 2082;
        *(_QWORD *)v26 = v10;
        *(_WORD *)&v26[8] = 2082;
        v27 = v11;
        *(_WORD *)v28 = 2082;
        *(_QWORD *)&v28[2] = v12;
        v29 = 2082;
        v30 = v13;
        v31 = 2082;
        v32 = v14;
        v33 = 2160;
        v34 = 1752392040;
        v35 = 2081;
        v36 = v15;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Forcing connection of%{public}s%{public}s%{public}s after incoming connection of only%{public}s%{public}s%{public}s for device %{private, mask.hash}s", buf, 0x52u);
        if (v23 < 0)
          operator delete(*(void **)__p);
      }
      v19[0] = 0;
      v19[1] = 0;
      sub_10003415C((uint64_t)v19, (uint64_t)a1[13].i64);
      *(_QWORD *)buf = a2;
      *(_DWORD *)&buf[8] = 0;
      *(_QWORD *)&v26[2] = 0;
      LODWORD(v27) = v7;
      BYTE4(v27) = 2;
      *(_QWORD *)v28 = mach_continuous_time();
      sub_10048E394((int64x2_t *)a1[17].i64, (uint64_t)buf);
      v16 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, buf);
        v17 = v26[9] >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)__p = 136446466;
        *(_QWORD *)&__p[4] = v17;
        v21 = 1024;
        v22 = v7;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Added device %{public}s to the connction request queue for the missing services 0x%x", __p, 0x12u);
        if ((v26[9] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      sub_100493D3C(a1);
      sub_100034264((uint64_t)v19);
      if (qword_100978190 != -1)
        dispatch_once(&qword_100978190, &stru_1009319B0);
      if ((sub_100438FA8((uint64_t)off_100978188) & 1) == 0)
      {
        v18 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "No device currently connecting. lets process nexct connection", buf, 2u);
        }
        sub_100494DFC(a1, 0);
      }
      return sub_100034234((uint64_t)v19);
    }
  }
  return result;
}

void sub_100497220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100497248(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 72))(v2, *(unsigned int *)(a1 + 32));
}

void sub_100497274(id a1)
{
  uint64_t v1;

  v1 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 208))(v1, 1, 1);
}

uint64_t sub_100497298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 40);
  sub_100494228(a1, a2, a3, 1, 2, 0, 0);
  return sub_100034234((uint64_t)v7);
}

void sub_100497304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100497318(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  NSObject *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  NSObject *v31;
  _BYTE *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  int v36;
  int v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  NSObject *v43;
  std::string *v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v55;
  NSObject *v57;
  std::string *v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  _QWORD v70[4];
  int v71;
  _QWORD v72[5];
  _QWORD v73[5];
  _QWORD v74[2];
  int v75;
  _BYTE __p[12];
  char v77;
  std::string buf;
  int v79;
  __int16 v80;
  unsigned int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  unsigned int v85;
  __int16 v86;
  const char *v87;
  __int16 v88;
  const char *v89;
  __int16 v90;
  const char *v91;
  __int16 v92;
  const char *v93;

  v75 = a3;
  v74[0] = 0;
  v74[1] = 0;
  sub_10003415C((uint64_t)v74, a1 + 40);
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_1009319B0);
  sub_10043A70C((uint64_t)off_100978188, (uint64_t)a2, a3, a4, a5, a6);
  sub_100494228(a1, (uint64_t)a2, a3, 1, 12, a5, a6);
  v68 = a4;
  if ((_DWORD)a3 == 1)
  {
    v19 = *(_QWORD *)(a1 + 104);
    v73[0] = _NSConcreteStackBlock;
    v73[1] = 3221225472;
    v73[2] = sub_100497D14;
    v73[3] = &unk_100917378;
    v73[4] = a2;
    sub_100041A34(v19, v73);
LABEL_10:
    v18 = 0;
    goto LABEL_27;
  }
  if ((_DWORD)a3 == 16)
  {
    v17 = *(_QWORD *)(a1 + 104);
    v72[0] = _NSConcreteStackBlock;
    v72[1] = 3221225472;
    v72[2] = sub_100497D6C;
    v72[3] = &unk_100917378;
    v72[4] = a2;
    sub_100041A34(v17, v72);
    v18 = 1;
    goto LABEL_27;
  }
  if ((_DWORD)a3 != 0x80000)
    goto LABEL_10;
  v67 = a5;
  v12 = *(_QWORD *)(a1 + 304);
  v13 = *(_QWORD *)(a1 + 280);
  v14 = *(_QWORD *)(a1 + 288);
  v15 = (_QWORD *)(v13 + 8 * (v12 / 0x66));
  if (v14 == v13)
    v16 = 0;
  else
    v16 = *v15 + 40 * (v12 % 0x66);
  while (1)
  {
    if (v14 == v13)
    {
      v21 = 0;
    }
    else
    {
      v20 = *(_QWORD *)(a1 + 312) + *(_QWORD *)(a1 + 304);
      v21 = *(_QWORD *)(v13 + 8 * (v20 / 0x66)) + 40 * (v20 % 0x66);
    }
    if (v16 == v21)
      break;
    if (*(unsigned __int8 **)v16 == a2 && *(_DWORD *)(v16 + 24) == 0x80000)
    {
      v22 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Stale request for service connection request (AACP only), add device to staleAACPConnReqDevList", (uint8_t *)&buf, 2u);
      }
      if (qword_10097AB28 != -1)
        dispatch_once(&qword_10097AB28, &stru_1009318F0);
      sub_100277E80(off_10097AB20, (uint64_t)a2);
    }
    v16 += 40;
    if (v16 - *v15 == 4080)
    {
      v23 = v15[1];
      ++v15;
      v16 = v23;
    }
    v13 = *(_QWORD *)(a1 + 280);
    v14 = *(_QWORD *)(a1 + 288);
  }
  v18 = 0;
  LODWORD(a5) = v67;
LABEL_27:
  v24 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 48))(v24, 16))
    goto LABEL_47;
  if (qword_10097B340 != -1)
    dispatch_once(&qword_10097B340, &stru_100931790);
  if ((*(unsigned int (**)(void *))(*(_QWORD *)off_10097B338 + 112))(off_10097B338))
  {
    memset(&buf, 0, sizeof(buf));
    if (qword_100978190 != -1)
      dispatch_once(&qword_100978190, &stru_1009319B0);
    v25 = a5;
    sub_10006A8A0((uint64_t)off_100978188, (void **)&buf.__r_.__value_.__l.__data_);
    v26 = (_QWORD *)buf.__r_.__value_.__r.__words[0];
    if (buf.__r_.__value_.__r.__words[0] == buf.__r_.__value_.__l.__size_)
    {
      v27 = 0;
      if (buf.__r_.__value_.__r.__words[0])
      {
LABEL_39:
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
        operator delete(v26);
      }
    }
    else
    {
      v27 = 0;
      do
      {
        if ((sub_100496DBC(a1, *v26) & 0x10) == 0)
          v27 += sub_100185E60(*v26 + 128) ^ 1;
        ++v26;
      }
      while (v26 != (_QWORD *)buf.__r_.__value_.__l.__size_);
      v26 = (_QWORD *)buf.__r_.__value_.__r.__words[0];
      if (buf.__r_.__value_.__r.__words[0])
        goto LABEL_39;
    }
    LODWORD(a5) = v25;
    if (v27)
      goto LABEL_42;
  }
  v28 = *(_QWORD *)(a1 + 104);
  v70[0] = _NSConcreteStackBlock;
  v70[1] = 3221225472;
  v70[2] = sub_100497DC4;
  v70[3] = &unk_100918130;
  v71 = 0;
  sub_100041A34(v28, v70);
LABEL_42:
  if (v18)
  {
    if (qword_10097B340 != -1)
      dispatch_once(&qword_10097B340, &stru_100931790);
    if (((*(uint64_t (**)(void *))(*(_QWORD *)off_10097B338 + 112))(off_10097B338) & 1) == 0)
    {
      v29 = sub_10006BBEC();
      sub_100041A34(v29, &stru_1009316D0);
    }
  }
LABEL_47:
  v30 = a5;
  v31 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v69 = a6;
    v32 = __p;
    sub_10043E5F8((uint64_t)a2, __p);
    if (v77 < 0)
      v32 = *(_BYTE **)__p;
    v33 = sub_100497E14(&v75);
    if (sub_10043E93C(a2))
      v34 = "paired";
    else
      v34 = "not paired";
    if (sub_100442118((uint64_t)a2, 0))
      v35 = "yes";
    else
      v35 = "no";
    v36 = sub_100442118((uint64_t)a2, 1);
    v37 = sub_100442118((uint64_t)a2, 3);
    v38 = "not supported";
    LODWORD(buf.__r_.__value_.__l.__data_) = 136448514;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    if (v36)
      v39 = "supported";
    else
      v39 = "not supported";
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v33;
    if (v37)
      v38 = "supported";
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
    v79 = a3;
    v80 = 1024;
    v81 = v68;
    v82 = 1024;
    v83 = v30;
    v84 = 1024;
    v85 = v69;
    v86 = 2080;
    v87 = v34;
    v88 = 2080;
    v89 = v35;
    v90 = 2080;
    v91 = v39;
    v92 = 2080;
    v93 = v38;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "ServiceManager disconnection result for device %{public}s with service %{public}s (%d), profile 0x%x, result %d, reason %d, isPaired %s, bs %s, inear %s, unt %s", (uint8_t *)&buf, 0x56u);
    if (v77 < 0)
      operator delete(*(void **)__p);
    a6 = v69;
  }
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_1009319B0);
  if (!sub_10043926C((uint64_t)off_100978188, (uint64_t)a2))
  {
    if (*(_BYTE *)(a1 + 696))
    {
LABEL_68:
      v40 = a1 + 696;
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_100931970);
      v41 = (unsigned __int8 *)sub_1004704A8((uint64_t)off_1009778E0, a1 + 696, 1);
      v42 = (uint64_t)v41;
      if (v41 && sub_10043E93C(v41))
      {
        v43 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10046E9BC((unsigned __int8 *)v40, &buf);
          v44 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          *(_DWORD *)__p = 136446210;
          *(_QWORD *)&__p[4] = v44;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "quickDisconnect reconnection attempt for device %{public}s", __p, 0xCu);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (qword_100977A78 != -1)
          dispatch_once(&qword_100977A78, &stru_100931A30);
        memset(&buf, 0, sizeof(buf));
        v45 = sub_100495A98((int64x2_t *)off_100977A70, v42, -1, &buf, 2);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        if ((_DWORD)v45)
        {
          v46 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
            sub_1006F6860(v45, v46, v47, v48, v49, v50, v51, v52);
        }
      }
      else
      {
        v53 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "QuickDisconnect device not found or not paired", (uint8_t *)&buf, 2u);
        }
      }
      *(_WORD *)(v40 + 4) = 0;
      *(_DWORD *)v40 = 0;
    }
    else
    {
      v55 = 0;
      while (v55 != 5)
      {
        if (*(unsigned __int8 *)(a1 + 697 + v55++))
        {
          if ((unint64_t)(v55 - 1) <= 4)
            goto LABEL_68;
          break;
        }
      }
      if (a6 == 10721
        && sub_10043E93C(a2)
        && sub_100442118((uint64_t)a2, 0)
        && sub_100442118((uint64_t)a2, 1)
        && sub_100442118((uint64_t)a2, 3))
      {
        v57 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8((uint64_t)a2, &buf);
          v58 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          *(_DWORD *)__p = 136446210;
          *(_QWORD *)&__p[4] = v58;
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "Post-swap reconnection attempt for device %{public}s", __p, 0xCu);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (qword_100977A78 != -1)
          dispatch_once(&qword_100977A78, &stru_100931A30);
        memset(&buf, 0, sizeof(buf));
        v59 = sub_100495A98((int64x2_t *)off_100977A70, (uint64_t)a2, -1, &buf, 2);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        if ((_DWORD)v59)
        {
          v60 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
            sub_1006F67FC(v59, v60, v61, v62, v63, v64, v65, v66);
        }
      }
    }
  }
  return sub_100034234((uint64_t)v74);
}

void sub_100497C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  sub_100034234((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_100497D14(uint64_t a1)
{
  if (qword_10097B330 != -1)
    dispatch_once(&qword_10097B330, &stru_100931750);
  return (*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)off_10097B328 + 88))(off_10097B328, *(_QWORD *)(a1 + 32));
}

uint64_t sub_100497D6C(uint64_t a1)
{
  if (qword_10097B350 != -1)
    dispatch_once(&qword_10097B350, &stru_1009317B0);
  return (*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)off_10097B348 + 88))(off_10097B348, *(_QWORD *)(a1 + 32));
}

uint64_t sub_100497DC4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 72))(v2, *(unsigned int *)(a1 + 32));
}

void sub_100497DF0(id a1)
{
  uint64_t v1;

  v1 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 208))(v1, 2, 1);
}

const char *sub_100497E14(int *a1)
{
  int v1;
  const char *result;

  v1 = *a1;
  if (*a1 > 2047)
  {
    if (v1 < 0x8000)
    {
      if (v1 >= 0x2000)
      {
        if (v1 == 0x2000)
          return "Braille";
        if (v1 == 0x4000)
          return "Passive Multi Stream";
      }
      else
      {
        if (v1 == 2048)
          return "Gaming";
        if (v1 == 4096)
          return "Network (Client)";
      }
    }
    else if (v1 < 0x20000)
    {
      if (v1 == 0x8000)
        return "GATT (Client)";
      if (v1 == 0x10000)
        return "LE Audio";
    }
    else
    {
      switch(v1)
      {
        case 0x20000:
          return "WirelessiAPSink";
        case 0x80000:
          return "AACP";
        case 0x100000:
          return "GATT";
      }
    }
    return "Unknown";
  }
  if (v1 > 31)
  {
    if (v1 > 255)
    {
      if (v1 == 256)
        return "Network (Server)";
      if (v1 == 512)
        return "MAP";
    }
    else
    {
      if (v1 == 32)
        return "HID";
      if (v1 == 128)
        return "WirelessiAP";
    }
    return "Unknown";
  }
  result = "Handsfree";
  switch(v1)
  {
    case -1:
      result = "ALL";
      break;
    case 0:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return "Unknown";
    case 1:
      return result;
    case 2:
      result = "Phonebook";
      break;
    case 8:
      result = "Remote";
      break;
    default:
      if (v1 != 16)
        return "Unknown";
      result = "A2DP";
      break;
  }
  return result;
}

uint64_t sub_100497FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 40);
  sub_100494228(a1, a2, a3, 2, a5, a6, 0);
  return sub_100034234((uint64_t)v12);
}

void sub_100498030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100498044(uint64_t a1)
{
  sub_100498050(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_100498050(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  uint64_t v17;
  uint8_t v18[16];
  _QWORD v19[6];
  _QWORD v20[2];

  if (*(_BYTE *)(a1 + 114))
  {
    v2 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F68C4(v2, v3, v4);
  }
  else
  {
    v20[0] = 0;
    v20[1] = 0;
    sub_10003415C((uint64_t)v20, a1 + 208);
    v7 = *(_QWORD *)(a1 + 312);
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 280);
      if (*(_QWORD *)(a1 + 288) != v8)
      {
        v9 = *(_QWORD *)(a1 + 304);
        v10 = (_QWORD *)(v8 + 8 * (v9 / 0x66));
        v11 = (_QWORD *)(*v10 + 40 * (v9 % 0x66));
        v12 = *(_QWORD *)(v8 + 8 * ((v9 + v7) / 0x66)) + 40 * ((v9 + v7) % 0x66);
        while (v11 != (_QWORD *)v12)
        {
          if (*v11 == a2)
          {
            v13 = v11[4];
            v14 = mach_continuous_time();
            if ((unint64_t)UpTicksToSeconds(v14 - v13) >= 0x3C)
            {
              v17 = *(_QWORD *)(a1 + 104);
              v19[0] = _NSConcreteStackBlock;
              v19[1] = 3221225472;
              v19[2] = sub_10049BD78;
              v19[3] = &unk_100918090;
              v19[4] = a1;
              v19[5] = a2;
              sub_100041A34(v17, v19);
              goto LABEL_14;
            }
          }
          v11 += 5;
          if ((_QWORD *)((char *)v11 - *v10) == (_QWORD *)4080)
          {
            v15 = (_QWORD *)v10[1];
            ++v10;
            v11 = v15;
          }
        }
      }
    }
    v16 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "No device stalls detected in Service Manager", v18, 2u);
    }
LABEL_14:
    sub_100034234((uint64_t)v20);
  }
}

void sub_1004981FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100498214(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  NSObject *v10;
  _BYTE *v11;
  _BOOL4 v12;
  int v13;
  int v14;
  int v15;
  int v16;
  NSObject *v17;
  char v18;
  char v19;
  int v20;
  int v21;
  int v22;
  NSObject *v23;
  _BYTE *v24;
  NSObject *v25;
  _BYTE *v26;
  __int128 v27;
  void *__p;
  void *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _BYTE v32[12];
  char v33;
  _BYTE buf[12];
  __int16 v35;
  _BOOL4 v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;

  if (!a3)
    goto LABEL_47;
  v31 = 0;
  v4 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4))
  {
    v5 = sub_100027F68();
    sub_100091AE8(buf, "FastConnect");
    sub_100091AE8(&__p, "DisableFastConnect");
    (*(void (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v5 + 72))(v5, buf, &__p, &v31);
    if (SHIBYTE(v30) < 0)
      operator delete(__p);
    if (SHIBYTE(v38) < 0)
      operator delete(*(void **)buf);
    v6 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v31;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Outgoing Connection, disableFastConnect = %d", buf, 8u);
    }
  }
  v7 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = sub_100442118(a2, 21);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "startConnectServices supportsProfileFastConnect:%d", buf, 8u);
  }
  v27 = xmmword_100741730;
  __p = 0;
  v29 = 0;
  v30 = 0;
  if (sub_1004442A0(a2, (uint64_t)&v27, 0x201u, &__p))
  {
    if (*(_BYTE *)__p == 1)
      v9 = *((_DWORD *)__p + 2);
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  if (v31)
    goto LABEL_17;
  if (!sub_100442118(a2, 21))
    goto LABEL_92;
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_1009319B0);
  if (sub_10043926C((uint64_t)off_100978188, a2))
  {
LABEL_92:
    if (qword_10097AB58 != -1)
      dispatch_once(&qword_10097AB58, &stru_100931A70);
    if (!sub_1006097A4((uint64_t)off_10097AB50, a2))
      goto LABEL_17;
    if (qword_100978190 != -1)
      dispatch_once(&qword_100978190, &stru_1009319B0);
    if (sub_1004393D4((uint64_t)off_100978188, a2))
      goto LABEL_17;
  }
  v20 = sub_100442118(a2, 12);
  v21 = v9 ? v20 : 0;
  if (v21 != 1)
  {
LABEL_17:
    v10 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, v32);
      if (v33 >= 0)
        v11 = v32;
      else
        v11 = *(_BYTE **)v32;
      if (qword_100978190 != -1)
        dispatch_once(&qword_100978190, &stru_1009319B0);
      v12 = sub_10043926C((uint64_t)off_100978188, a2) != 0;
      if (qword_100978190 != -1)
        dispatch_once(&qword_100978190, &stru_1009319B0);
      v13 = sub_1004393D4((uint64_t)off_100978188, a2);
      if (qword_10097AB58 != -1)
        dispatch_once(&qword_10097AB58, &stru_100931A70);
      v14 = sub_1006097A4((uint64_t)off_10097AB50, a2);
      *(_DWORD *)buf = 136447234;
      *(_QWORD *)&buf[4] = v11;
      v35 = 1024;
      v36 = v12;
      v37 = 1024;
      v38 = v9;
      v39 = 1024;
      v40 = v13;
      v41 = 1024;
      v42 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Did not do PFC for device %{public}s. Connection for device exits: %d, SDP service database state: %d, service connected:%d, PFCALL:%d", buf, 0x24u);
      if (v33 < 0)
        operator delete(*(void **)v32);
    }
    if (!v31)
    {
      if (qword_10097AB58 != -1)
        dispatch_once(&qword_10097AB58, &stru_100931A70);
      v15 = sub_1006097A4((uint64_t)off_10097AB50, a2);
      v16 = v9 ? 0 : v15;
      if (v16 == 1)
      {
        v17 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "No SDP record but both supports PFC all, start PFC after SDP", buf, 2u);
        }
        if (qword_10097AB58 != -1)
          dispatch_once(&qword_10097AB58, &stru_100931A70);
        v18 = 1;
        goto LABEL_43;
      }
    }
    if (qword_10097AB58 == -1)
    {
      v18 = 0;
LABEL_43:
      *((_BYTE *)off_10097AB50 + 682) = v18;
      v19 = 1;
      goto LABEL_44;
    }
LABEL_89:
    dispatch_once(&qword_10097AB58, &stru_100931A70);
    v18 = 0;
    goto LABEL_43;
  }
  if (qword_10097AB58 != -1)
    dispatch_once(&qword_10097AB58, &stru_100931A70);
  v22 = sub_100609610((uint64_t)off_10097AB50, a2);
  v19 = v22;
  if (v22)
  {
    if (v22 == 4506)
    {
      v25 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, buf);
        v26 = v38 >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)v32 = 136446210;
        *(_QWORD *)&v32[4] = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "PFC device %{public}s already connected!", v32, 0xCu);
        if (SHIBYTE(v38) < 0)
          operator delete(*(void **)buf);
      }
    }
    else
    {
      if (v22 == 4508)
      {
        v23 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(a2, buf);
          v24 = v38 >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)v32 = 136446210;
          *(_QWORD *)&v32[4] = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "PFC connection for device %{public}s already in progress", v32, 0xCu);
          if (SHIBYTE(v38) < 0)
            operator delete(*(void **)buf);
        }
        sub_100453E50(a2, 0);
        v19 = 0;
        goto LABEL_44;
      }
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(a2, buf);
        sub_1006F68F8();
      }
    }
    if (qword_10097AB58 == -1)
    {
      v18 = 0;
      goto LABEL_43;
    }
    goto LABEL_89;
  }
LABEL_44:
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  if ((v19 & 1) != 0)
  {
LABEL_47:
    if (qword_100978190 != -1)
      dispatch_once(&qword_100978190, &stru_1009319B0);
    sub_100439750((uint64_t)off_100978188, a2);
    if (qword_10097B080 != -1)
      dispatch_once(&qword_10097B080, &stru_100931A10);
    sub_10048BB30(qword_10097B078, a2);
  }
}

void sub_100498960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004989D8(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  void **v5;
  int v6;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  void **v11;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10046E9BC(a2, __p);
    if (v9 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "delayedConnectServices addr %{public}s", buf, 0xCu);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  v6 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 700) = *((_WORD *)a2 + 2);
  *(_DWORD *)(a1 + 696) = v6;
  return 0;
}

uint64_t sub_100498AC8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 120);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_10049C8D4(&v8, a1 + 184);
  sub_100034264((uint64_t)v11);
  v4 = v9;
  if (v9 == &v8)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = (_DWORD *)v4[2];
      if ((*(unsigned int (**)(_DWORD *, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2))
        v5 = v6[8] | v5;
      v4 = (uint64_t *)v4[1];
    }
    while (v4 != &v8);
  }
  sub_10002074C(&v8);
  sub_100034234((uint64_t)v11);
  return v5;
}

void sub_100498B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_10002074C((uint64_t *)va);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

_BYTE *sub_100498BB4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  NSObject *v7;
  char v9;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  int v14;

  v10 = 1;
  v9 = 0;
  sub_100043758(&v9);
  sub_10024B3A8((uint64_t)(a2 + 128), (BOOL *)&v10);
  sub_10004339C(&v9);
  if (((a4 & 1) != 0 || !v10) && (sub_10043E93C(a2) & 1) == 0 && !sub_1004420E0((uint64_t)a2))
  {
    v7 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      v12 = a4;
      v13 = 1024;
      v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sleep workaround after SDP due device-database %d, remote ssp %d", buf, 0xEu);
    }
    sub_100113670(1800);
  }
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_100931A30);
  sub_100498D28((int64x2_t *)off_100977A70, a2, a3);
  return sub_100043728(&v9);
}

void sub_100498D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100498D28(int64x2_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  _BYTE *v22;
  int v23;
  _BYTE *v24;
  NSObject *v25;
  _BYTE *v26;
  uint64_t v27;
  NSObject *v28;
  int v29;
  uint8_t *v30;
  int v31;
  uint8_t *v32;
  int v33;
  _BOOL4 v34;
  NSObject *v35;
  uint64_t v36;
  _BYTE *v37;
  int v38;
  int v39;
  _BOOL4 v40;
  int v41;
  char v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int v47;
  char v48;
  NSObject *v49;
  uint64_t v50;
  _BYTE *v51;
  NSObject *v52;
  const char *v53;
  uint64_t v54;
  _BYTE *v55;
  unsigned int v56;
  NSObject *v57;
  _BYTE *v58;
  __int128 v59;
  void **v60;
  unsigned int v62;
  int v63;
  void *v64;
  const char *v65;
  int v66;
  NSObject *v67;
  _BYTE *v68;
  uint64_t v69;
  NSObject *v70;
  uint64_t v71;
  char v72;
  int v73;
  unsigned int v75;
  NSObject *v76;
  _BYTE *v77;
  unsigned int v79;
  unsigned int v80;
  void *__dst[2];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[2];
  _QWORD v86[2];
  _BYTE __p[12];
  __int16 v88;
  _BYTE *v89;
  char v90;
  uint8_t buf[32];
  _BYTE v92[32];
  __int128 v93;
  char v94;

  if (!(_DWORD)a3)
  {
    v86[0] = 0;
    v86[1] = 0;
    sub_10003415C((uint64_t)v86, (uint64_t)a1[13].i64);
    v7 = a1[19].i64[1];
    if (!v7)
    {
      if (qword_100978190 != -1)
        dispatch_once(&qword_100978190, &stru_1009319B0);
      sub_1004398C0((uint64_t)off_100978188, a2, 0);
      if (qword_10097B080 != -1)
        dispatch_once(&qword_10097B080, &stru_100931A10);
      sub_10048BD34();
    }
    v8 = a1[19].u64[0];
    v9 = a1[17].i64[1];
    v10 = a1[18].i64[0];
    v11 = (_QWORD *)(v9 + 8 * (v8 / 0x66));
    if (v10 == v9)
      v12 = 0;
    else
      v12 = *v11 + 40 * (v8 % 0x66);
    v13 = v8 + v7;
    v14 = v13 / 0x66;
    v15 = v13 % 0x66;
LABEL_19:
    v16 = v12 - 4080;
    while (1)
    {
      v17 = v10 == v9 ? 0 : *(_QWORD *)(v9 + 8 * v14) + 40 * v15;
      if (v12 == v17 || *(unsigned __int8 **)v12 == a2)
        break;
      v12 += 40;
      v16 += 40;
      if (*v11 == v16)
      {
        v18 = v11[1];
        ++v11;
        v12 = v18;
        goto LABEL_19;
      }
    }
    if (v10 == v9)
      v19 = 0;
    else
      v19 = *(_QWORD *)(v9 + 8 * v14) + 40 * v15;
    if (v12 == v19)
    {
      v25 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8((uint64_t)a2, v92);
        v26 = v92[23] >= 0 ? v92 : *(_BYTE **)v92;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Got an SDP response without a connection in progress for device %{public}s - was there a successful incoming connection during the outgoing one?", buf, 0xCu);
        if ((v92[23] & 0x80000000) != 0)
          operator delete(*(void **)v92);
      }
      if (qword_100978190 != -1)
        dispatch_once(&qword_100978190, &stru_1009319B0);
      sub_1004398C0((uint64_t)off_100978188, a2, 0);
      if (qword_10097B080 != -1)
        dispatch_once(&qword_10097B080, &stru_100931A10);
      sub_10048BD34();
    }
    sub_100034264((uint64_t)v86);
    if (qword_10097AB58 != -1)
      dispatch_once(&qword_10097AB58, &stru_100931A70);
    if (sub_1006097A4((uint64_t)off_10097AB50, (uint64_t)a2))
    {
      if (qword_10097AB58 != -1)
        dispatch_once(&qword_10097AB58, &stru_100931A70);
      if (*((_BYTE *)off_10097AB50 + 682))
      {
        if (qword_100978190 != -1)
          dispatch_once(&qword_100978190, &stru_1009319B0);
        if (sub_10043926C((uint64_t)off_100978188, (uint64_t)a2)
          && !sub_100496DBC((uint64_t)a1, (uint64_t)a2))
        {
          v20 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8((uint64_t)a2, v92);
            v21 = v92[23];
            v22 = *(_BYTE **)v92;
            v23 = sub_10043E93C(a2);
            v24 = v92;
            if (v21 < 0)
              v24 = v22;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = v24;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v23;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Fast connect after SDP, device %{public}s, paired:%d", buf, 0x12u);
            if ((v92[23] & 0x80000000) != 0)
              operator delete(*(void **)v92);
          }
          if (qword_10097B080 != -1)
            dispatch_once(&qword_10097B080, &stru_100931A10);
          sub_10048BD34();
        }
LABEL_71:
        v85[0] = 0;
        v85[1] = 0;
        sub_10003415C((uint64_t)v85, (uint64_t)&a1[7].i64[1]);
        memset(buf, 0, 24);
        sub_10049C8D4(buf, (uint64_t)&a1[11].i64[1]);
        sub_100034264((uint64_t)v85);
        v33 = *(_DWORD *)(v12 + 24);
        v83 = 0;
        v84 = 0;
        v34 = sub_100444BF0((uint64_t)a2, (_DWORD *)&v84 + 1, &v84, &v83, (_DWORD *)&v83 + 1);
        v35 = qword_1009997E8;
        v36 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v36)
        {
          sub_10043E5F8((uint64_t)a2, __p);
          v37 = v90 >= 0 ? __p : *(_BYTE **)__p;
          v38 = sub_10043E93C(a2);
          v39 = v83;
          v40 = sub_1004420E0((uint64_t)a2);
          *(_DWORD *)v92 = 136447490;
          *(_QWORD *)&v92[4] = v37;
          *(_WORD *)&v92[12] = 1024;
          *(_DWORD *)&v92[14] = v38;
          *(_WORD *)&v92[18] = 1024;
          *(_DWORD *)&v92[20] = v34;
          *(_WORD *)&v92[24] = 1024;
          *(_DWORD *)&v92[26] = v39;
          *(_WORD *)&v92[30] = 1024;
          LODWORD(v93) = v40;
          WORD2(v93) = 1024;
          *(_DWORD *)((char *)&v93 + 6) = v33;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Handle query complete for device %{public}s isPaired %d deviceIDStatus %d pid 0x%x isAppleBluetooth %d mask 0x%x", v92, 0x2Au);
          if (v90 < 0)
            operator delete(*(void **)__p);
        }
        if (!v34)
          goto LABEL_87;
        if (!sub_100445414((uint64_t)a2))
        {
          v67 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043F6EC((uint64_t)a2, (uint64_t)v92);
            v68 = v92[23] >= 0 ? v92 : *(_BYTE **)v92;
            *(_DWORD *)__p = 136446466;
            *(_QWORD *)&__p[4] = "void BT::ServiceManager::handleQueryComplete(Device *, BTResult)";
            v88 = 2082;
            v89 = v68;
            _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "%{public}s - Device “%{public}s” not supported on this platform, disconnecting", __p, 0x16u);
            if ((v92[23] & 0x80000000) != 0)
              operator delete(*(void **)v92);
          }
          sub_100494228((uint64_t)a1, (uint64_t)a2, 0, 0, 11, 0, 0);
          v69 = a1[6].i64[1];
          *(_QWORD *)v92 = _NSConcreteStackBlock;
          *(_QWORD *)&v92[8] = 3221225472;
          *(_QWORD *)&v92[16] = sub_10049A8D0;
          *(_QWORD *)&v92[24] = &unk_10091FF68;
          *(_QWORD *)&v93 = a1;
          *((_QWORD *)&v93 + 1) = a2;
          v94 = 1;
          sub_100041A34(v69, v92);
          goto LABEL_156;
        }
        v36 = sub_1004420E0((uint64_t)a2);
        v41 = (_DWORD)v83 == 8207 ? v36 : 0;
        if (v41 == 1 && ((v36 = sub_10043E93C(a2), !v33) ? (v42 = 1) : (v42 = v36), (v42 & 1) == 0))
        {
          v71 = *(_QWORD *)&buf[8];
          v72 = 0;
          if (*(uint8_t **)&buf[8] == buf)
          {
            v80 = 109;
          }
          else
          {
            v80 = 109;
            do
            {
              v36 = *(_QWORD *)(v71 + 16);
              v73 = *(_DWORD *)(v36 + 32);
              if (v73 == 0x80000 && (v33 & 0x80000) != 0)
              {
                v75 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v36 + 80))(v36, a2);
                v76 = qword_1009997E8;
                v36 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v36)
                {
                  sub_10043E5F8((uint64_t)a2, __p);
                  v77 = __p;
                  if (v90 < 0)
                    v77 = *(_BYTE **)__p;
                  *(_DWORD *)v92 = 136315650;
                  *(_QWORD *)&v92[4] = v77;
                  *(_WORD *)&v92[12] = 1024;
                  *(_DWORD *)&v92[14] = v33;
                  *(_WORD *)&v92[18] = 1024;
                  *(_DWORD *)&v92[20] = v75;
                  _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "AACPFirst: Connecting AACP first for %s mask 0x%x with result %d", v92, 0x18u);
                  if (v90 < 0)
                    operator delete(*(void **)__p);
                }
                if (v75 - 107 >= 2)
                {
                  if (v75 == 303 || v75 == 0)
                  {
                    v80 = 0;
                  }
                  else
                  {
                    v79 = v80;
                    if (v80 == 109)
                      v79 = v75;
                    v80 = v79;
                  }
                }
                v72 = 1;
              }
              v71 = *(_QWORD *)(v71 + 8);
            }
            while ((uint8_t *)v71 != buf);
          }
          v43 = v72 & 1;
        }
        else
        {
LABEL_87:
          v43 = 0;
          v80 = 109;
        }
        v44 = *(_QWORD *)&buf[8];
        if (*(uint8_t **)&buf[8] != buf)
        {
          v45 = v43 ^ 1;
          do
          {
            v46 = *(_QWORD *)(v44 + 16);
            v47 = *(_DWORD *)(v46 + 32);
            if ((v47 & v33) == 0)
              goto LABEL_134;
            if (v47 == 0x80000)
              v48 = v45;
            else
              v48 = 1;
            if ((v48 & 1) == 0)
            {
              v49 = qword_1009997E8;
              v36 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v36)
              {
                *(_DWORD *)v92 = 67109120;
                *(_DWORD *)&v92[4] = v33;
                _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "AACPFirst: Skipping AACP Connection mask 0x%x", v92, 8u);
              }
              goto LABEL_134;
            }
            if (v47 == 0x100000)
            {
              if ((sub_100499CB4(v36, a2) & 1) != 0)
              {
                v50 = qword_1009997E8;
                v36 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v36)
                {
                  sub_10043E5F8((uint64_t)a2, v92);
                  v51 = v92;
                  if (v92[23] < 0)
                    v51 = *(_BYTE **)v92;
                  *(_DWORD *)__p = 136315394;
                  *(_QWORD *)&__p[4] = v51;
                  v88 = 1024;
                  LODWORD(v89) = v33;
                  v52 = v50;
                  v53 = "Skipping CATT Connection for device %s with mask 0x%x";
LABEL_109:
                  _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, v53, __p, 0x12u);
                  if ((v92[23] & 0x80000000) != 0)
                    operator delete(*(void **)v92);
                  goto LABEL_134;
                }
                goto LABEL_134;
              }
              v47 = *(_DWORD *)(v46 + 32);
            }
            if (v47 != 512)
            {
              v56 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v46 + 80))(v46, a2);
              v57 = qword_1009997E8;
              v36 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v36)
              {
                sub_10043F6EC((uint64_t)a2, (uint64_t)__p);
                if (v90 >= 0)
                  v58 = __p;
                else
                  v58 = *(_BYTE **)__p;
                if (*(char *)(v46 + 31) < 0)
                {
                  sub_10003430C(__dst, *(void **)(v46 + 8), *(_QWORD *)(v46 + 16));
                }
                else
                {
                  v59 = *(_OWORD *)(v46 + 8);
                  v82 = *(_QWORD *)(v46 + 24);
                  *(_OWORD *)__dst = v59;
                }
                v60 = __dst;
                if (v82 < 0)
                  v60 = (void **)__dst[0];
                *(_DWORD *)v92 = 67109634;
                *(_DWORD *)&v92[4] = v56;
                *(_WORD *)&v92[8] = 2080;
                *(_QWORD *)&v92[10] = v58;
                *(_WORD *)&v92[18] = 2080;
                *(_QWORD *)&v92[20] = v60;
                _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "Connection Result %d for device %s for service %s", v92, 0x1Cu);
                if (SHIBYTE(v82) < 0)
                  operator delete(__dst[0]);
                if (v90 < 0)
                  operator delete(*(void **)__p);
              }
              if (v56 - 107 >= 2)
              {
                if (v56 == 303 || v56 == 0)
                {
                  v80 = 0;
                }
                else
                {
                  v62 = v80;
                  if (v80 == 109)
                    v62 = v56;
                  v80 = v62;
                }
              }
              goto LABEL_134;
            }
            v54 = qword_1009997E8;
            v36 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v36)
            {
              sub_10043E5F8((uint64_t)a2, v92);
              v55 = v92;
              if (v92[23] < 0)
                v55 = *(_BYTE **)v92;
              *(_DWORD *)__p = 136315394;
              *(_QWORD *)&__p[4] = v55;
              v88 = 1024;
              LODWORD(v89) = v33;
              v52 = v54;
              v53 = "Skipping outgoing MAP Connection for device %s with mask 0x%x";
              goto LABEL_109;
            }
LABEL_134:
            v44 = *(_QWORD *)(v44 + 8);
          }
          while ((uint8_t *)v44 != buf);
        }
        if (v80)
        {
          if (v80 != 109)
            goto LABEL_143;
          sub_10043F78C((uint64_t)a2, (uint64_t)v92);
          v63 = v92[23];
          v64 = *(void **)v92;
          if (v92[23] >= 0)
            v65 = v92;
          else
            v65 = *(const char **)v92;
          v66 = strncmp(v65, "MB Bluetooth", 0xCuLL);
          if (v63 < 0)
            operator delete(v64);
          if (!v66)
          {
            sub_100494228((uint64_t)a1, (uint64_t)a2, 0, 0, 11, 0, 0);
            v70 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v92 = 0;
              _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "This device reports no services supported and then makes incoming connection :( ", v92, 2u);
            }
          }
          else
          {
LABEL_143:
            if (qword_100978190 != -1)
              dispatch_once(&qword_100978190, &stru_1009319B0);
            sub_1004398C0((uint64_t)off_100978188, a2, v80);
            sub_100494228((uint64_t)a1, (uint64_t)a2, 0xFFFFFFFFLL, 0, 11, v80, 0);
          }
          if (qword_10097B080 != -1)
            dispatch_once(&qword_10097B080, &stru_100931A10);
          sub_10048BD34();
        }
LABEL_156:
        sub_10002074C(buf);
        sub_100034234((uint64_t)v85);
        return sub_100034234((uint64_t)v86);
      }
    }
    else if (qword_10097AB58 != -1)
    {
      dispatch_once(&qword_10097AB58, &stru_100931A70);
    }
    v27 = *((_QWORD *)off_10097AB50 + 84);
    v28 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8((uint64_t)a2, buf);
      v29 = (char)buf[23];
      v30 = *(uint8_t **)buf;
      v31 = sub_10043E93C(a2);
      v32 = buf;
      *(_DWORD *)v92 = 136446722;
      if (v29 < 0)
        v32 = v30;
      *(_QWORD *)&v92[4] = v32;
      *(_WORD *)&v92[12] = 1024;
      *(_DWORD *)&v92[14] = v31;
      *(_WORD *)&v92[18] = 2048;
      *(_QWORD *)&v92[20] = v27;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Lagacy profile connection after SDP, device %{public}s, paired:%d, FC features:%llx", v92, 0x1Cu);
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
    }
    if ((v27 & 0x10) != 0)
    {
      if (qword_10097AB58 != -1)
        dispatch_once(&qword_10097AB58, &stru_100931A70);
      *((_BYTE *)off_10097AB50 + 682) = 1;
    }
    goto LABEL_71;
  }
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_1009319B0);
  sub_1004398C0((uint64_t)off_100978188, a2, a3);
  sub_100494228((uint64_t)a1, (uint64_t)a2, 0xFFFFFFFFLL, 0, 11, a3, 0);
  if ((_DWORD)a3 != 17)
  {
    if (qword_10097B080 != -1)
      dispatch_once(&qword_10097B080, &stru_100931A10);
    sub_10048BD34();
  }
  return sub_100494DFC(a1, (uint64_t)a2);
}

void sub_100499BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (*(char *)(v39 - 137) < 0)
    operator delete(*(void **)(v39 - 160));
  sub_100034234((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_100499CB4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v3 = a2[128];
  v4 = a2[129];
  v5 = a2[130];
  v6 = a2[131];
  v7 = a2[132];
  v8 = a2[133];
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009319D0);
  v10[0] = 0;
  v10[1] = 0;
  sub_10003F924((uint64_t)off_1009778C0, (v3 << 40) | (v4 << 32) | (v5 << 24) | (v6 << 16) | (v7 << 8) | v8, 0, 1u, 0, 0, (unsigned __int8 *)v10);
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100931AB0);
  if (sub_100069F08((uint64_t)off_1009778A0, (unsigned __int8 *)v10))
    return 1;
  else
    return sub_100441AE4((uint64_t)a2) ^ 1;
}

uint64_t sub_100499DE8(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];
  int v13;
  BOOL v14;
  __int128 v15;
  void *v16[2];
  __int128 v17;
  void *v18[2];
  __int128 v19;
  __int128 v20;
  _QWORD v21[6];
  __int128 v22;
  uint64_t v23;

  if (!a2)
  {
    v6 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006F693C(v6);
  }
  v23 = 0;
  v22 = 0u;
  memset(v21, 0, sizeof(v21));
  v20 = 0u;
  *(_OWORD *)v18 = 0u;
  v19 = 0u;
  *(_OWORD *)v16 = 0u;
  v17 = 0u;
  v15 = 0u;
  sub_1005BCCCC((uint64_t)&v15 + 1);
  BYTE2(v16[0]) = 0;
  BYTE4(v16[0]) = 0;
  BYTE2(v18[0]) = 0;
  BYTE4(v18[0]) = 0;
  HIDWORD(v21[2]) = 0;
  v17 = 0uLL;
  v16[1] = 0;
  LOBYTE(v18[0]) = 0;
  v19 = 0uLL;
  v18[1] = 0;
  LOBYTE(v20) = 0;
  v21[0] = 0;
  v21[1] = 0;
  *((_QWORD *)&v20 + 1) = 0;
  *(_DWORD *)((char *)&v21[1] + 7) = 0;
  LOBYTE(v21[3]) = 1;
  BYTE2(v23) = 0;
  *(_QWORD *)((char *)&v21[3] + 6) = 0;
  *(_QWORD *)((char *)&v21[3] + 1) = 0;
  v22 = 0uLL;
  v21[5] = 0;
  LOBYTE(v23) = 0;
  v7 = sub_1004419F4(a2, (uint64_t)&v15);
  if (BYTE1(v21[2]))
    v8 = v7;
  else
    v8 = 0;
  v9 = *(_QWORD *)(a1 + 104);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100499FB0;
  v12[3] = &unk_1009226D0;
  v12[4] = a1;
  v12[5] = a2;
  v13 = a3;
  v14 = v8;
  sub_100041A34(v9, v12);
  if (SHIBYTE(v21[1]) < 0)
    operator delete(*((void **)&v20 + 1));
  if (SHIBYTE(v19) < 0)
    operator delete(v18[1]);
  if (SHIBYTE(v17) < 0)
    operator delete(v16[1]);
  return nullsub_90((char *)&v15 + 1, v10);
}

void sub_100499F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _Unwind_Resume(exception_object);
}

_BYTE *sub_100499FB0(uint64_t a1)
{
  return sub_100498BB4(a1, *(unsigned __int8 **)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 52));
}

uint64_t sub_100499FC0(uint64_t a1, uint64_t a2, int a3)
{
  return sub_100499DE8(a1 - 32, a2, a3);
}

uint64_t sub_100499FC8(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  void **v7;
  void *__p;
  char v10;
  _BYTE buf[18];

  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, &__p);
    v7 = v10 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Disconnecting services from device %{public}s with mask 0x%x", buf, 0x12u);
    if (v10 < 0)
      operator delete(__p);
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  sub_10003415C((uint64_t)buf, a1 + 40);
  if (*(_BYTE *)(a1 + 112))
  {
    sub_100034264((uint64_t)buf);
    if (qword_100978130 != -1)
      dispatch_once(&qword_100978130, &stru_100931A50);
    if (sub_10002527C((uint64_t)off_100978128))
    {
      if (qword_10097B080 != -1)
        dispatch_once(&qword_10097B080, &stru_100931A10);
      sub_10048BD34();
    }
  }
  sub_100034234((uint64_t)buf);
  return 202;
}

void sub_10049A23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  sub_10002074C((uint64_t *)va1);
  sub_100034234((uint64_t)va);
  sub_100034234((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_10049A280(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 88))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_10049A294(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  void *v6;
  int v7;
  NSObject *v8;
  void **v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v20[2];
  char v21;
  void *__p[2];
  char v23;
  int v24;
  __int16 v25;
  _QWORD v26[2];
  uint8_t buf[4];
  void **v28;
  unsigned __int8 uu[8];
  uint64_t v30;
  char out[40];

  if (!a2)
    return 3;
  v26[0] = 0;
  v26[1] = 0;
  sub_10003415C((uint64_t)v26, a1 + 40);
  if (!*(_BYTE *)(a1 + 112))
    goto LABEL_29;
  sub_100034264((uint64_t)v26);
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_100931A50);
  if (sub_10002527C((uint64_t)off_100978128))
  {
    v24 = *(_DWORD *)(a2 + 128);
    v25 = *(_WORD *)(a2 + 132);
    *(_QWORD *)uu = 0;
    v30 = 0;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009319D0);
    sub_10065A6B4((uint64_t)off_1009778C0, (unsigned __int8 *)&v24, uu);
    if (!uuid_is_null(uu))
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009319D0);
      v4 = off_1009778C0;
      v5 = sub_100030DF4(uu);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      sub_100091AE8(__p, "_CTKD_");
      v7 = sub_10000628C((uint64_t)v4, v6, (uint64_t)__p);
      if (v23 < 0)
        operator delete(__p[0]);

      if (v7)
      {
        if (qword_1009778A8 != -1)
          dispatch_once(&qword_1009778A8, &stru_100931AB0);
        if (sub_100069F08((uint64_t)off_1009778A0, uu))
        {
          v8 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            memset(out, 0, 37);
            uuid_unparse_upper(uu, out);
            sub_100091AE8(v20, out);
            v9 = v21 >= 0 ? v20 : (void **)v20[0];
            *(_DWORD *)buf = 136315138;
            v28 = v9;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "LE device %s is connected, forcing disconnection", buf, 0xCu);
            if (v21 < 0)
              operator delete(v20[0]);
          }
          if (qword_1009778A8 != -1)
            dispatch_once(&qword_1009778A8, &stru_100931AB0);
          v10 = sub_100622358((uint64_t)off_1009778A0, uu, 4u);
          if ((_DWORD)v10)
          {
            v11 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
              sub_1006F69BC(v10, v11, v12, v13, v14, v15, v16, v17);
          }
        }
      }
    }
    v18 = 0;
  }
  else
  {
LABEL_29:
    v18 = 202;
  }
  sub_100034234((uint64_t)v26);
  return v18;
}

void sub_10049A574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  sub_100034234((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_10049A5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[6];

  v2 = *(_QWORD *)(a1 + 104);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10049A618;
  v3[3] = &unk_100918090;
  v3[4] = a1;
  v3[5] = a2;
  sub_100041A34(v2, v3);
}

void sub_10049A618(uint64_t a1)
{
  int64x2_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  std::string *p_p;
  std::string __p;
  uint8_t buf[4];
  std::string *v17;

  v2 = *(int64x2_t **)(a1 + 32);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100931970);
  v3 = sub_10006D488((uint64_t)off_1009778E0, *(_QWORD *)(a1 + 40), 1);
  if (v3)
  {
    v4 = v3;
    if (sub_10043FC5C(v3))
    {
      v5 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        return;
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = sub_100496DBC((uint64_t)v2, v4);
      v6 = "CTKD le device connected, not bridging classic services because services %x is already connected";
      v7 = v5;
      v8 = 8;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&__p, v8);
      return;
    }
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_100931A90);
    if (*((_BYTE *)off_100977B38 + 198) || *((_BYTE *)off_100977B38 + 197) || *((_BYTE *)off_100977B38 + 199))
    {
      v12 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        return;
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      v6 = "Device is currently streaming, not bridging";
      v7 = v12;
      v8 = 2;
      goto LABEL_16;
    }
    if ((sub_10043F998(v4) & 0x19) != 0 || !sub_100444790(v4))
    {
      v13 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v4, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136446210;
        v17 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "This is a disconnected CTKD device (%{public}s) that connected over LE, bringing up classic audio services as well", buf, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      memset(&__p, 0, sizeof(__p));
      sub_100495A98(v2, v4, -1048577, &__p, 2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v9 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F6A20(v9, v10, v11);
  }
}

void sub_10049A8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10049A8D0(uint64_t a1)
{
  uint64_t v2;
  char v4;
  _QWORD v5[2];

  v2 = *(_QWORD *)(a1 + 32);
  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, v2 + 40);
  if (*(_BYTE *)(v2 + 112))
  {
    v4 = 0;
    sub_100043758(&v4);
    sub_10018070C(*(_QWORD *)(a1 + 40) + 128);
    sub_10004339C(&v4);
    if (*(_BYTE *)(a1 + 48))
      sub_10049A294(v2, *(_QWORD *)(a1 + 40));
    sub_100043728(&v4);
  }
  return sub_100034234((uint64_t)v5);
}

void sub_10049A954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10049A978(uint64_t a1, uint64_t a2, int a3, _BYTE *a4, _DWORD *a5)
{
  uint64_t *v10;
  os_log_t *v11;
  _DWORD *v12;
  NSObject *v13;
  os_log_t *v14;
  int v15;
  void **v16;
  void **v17;
  void **v18;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD v27[2];
  char v28;
  int v29;
  uint8_t buf[4];
  void **v31;
  __int16 v32;
  void **v33;

  v29 = 0;
  v28 = 0;
  v27[0] = 0;
  v27[1] = 0;
  sub_10003415C((uint64_t)v27, a1 + 120);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  sub_10049C8D4(&v24, a1 + 184);
  sub_100034264((uint64_t)v27);
  *a4 = 0;
  v10 = v25;
  if (v25 != &v24)
  {
    v11 = (os_log_t *)&qword_1009997E8;
    do
    {
      v12 = (_DWORD *)v10[2];
      if ((v12[8] & a3) != 0)
      {
        v29 = 0;
        v28 = 0;
        (*(void (**)(_DWORD *, uint64_t, char *, int *))(*(_QWORD *)v12 + 64))(v12, a2, &v28, &v29);
        *a5 |= v29;
        if (v28)
        {
          v13 = *v11;
          if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
          {
            v14 = v11;
            (*(void (**)(void **__return_ptr, _DWORD *))(*(_QWORD *)v12 + 192))(v22, v12);
            v15 = v23;
            v16 = (void **)v22[0];
            sub_10043E5F8(a2, __p);
            v17 = v22;
            if (v15 < 0)
              v17 = v16;
            v18 = __p;
            if (v21 < 0)
              v18 = (void **)__p[0];
            *(_DWORD *)buf = 136446466;
            v31 = v17;
            v32 = 2082;
            v33 = v18;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}s supports device %{public}s", buf, 0x16u);
            if (v21 < 0)
              operator delete(__p[0]);
            v11 = v14;
            if (v23 < 0)
              operator delete(v22[0]);
          }
          *a4 = 1;
        }
      }
      v10 = (uint64_t *)v10[1];
    }
    while (v10 != &v24);
  }
  sub_10002074C(&v24);
  return sub_100034234((uint64_t)v27);
}

void sub_10049AB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  sub_10002074C(&a20);
  sub_100034234((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_10049ABD4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 120);
  v6 = 0;
  v7 = 0;
  v8 = 0;
  sub_10049C8D4(&v6, a1 + 184);
  sub_100034264((uint64_t)v9);
  v2 = v7;
  if (v7 == &v6)
  {
    v3 = 0;
  }
  else
  {
    LODWORD(v3) = 0;
    do
    {
      v4 = v2 + 1;
      v2 = (uint64_t *)v2[1];
      v3 = *(_DWORD *)(v4[1] + 32) | v3;
    }
    while (v2 != &v6);
  }
  sub_10002074C(&v6);
  sub_100034234((uint64_t)v9);
  return v3;
}

void sub_10049AC68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_10002074C((uint64_t *)va);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10049AC8C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t *i;
  _DWORD *v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD v16[2];

  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 120);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  sub_10049C8D4(&v13, a1 + 184);
  sub_100034264((uint64_t)v16);
  for (i = v14; i != &v13; i = (uint64_t *)i[1])
  {
    v11 = (_DWORD *)i[2];
    if ((v11[8] & a3) != 0)
      (*(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 208))(v11, a2, a4, a5);
  }
  sub_10002074C(&v13);
  sub_100034234((uint64_t)v16);
  return 0;
}

void sub_10049AD50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_10002074C((uint64_t *)va);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10049AD78(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t *i;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 120);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  sub_10049C8D4(&v14, a1 + 184);
  sub_100034264((uint64_t)v17);
  for (i = v15; ; i = (uint64_t *)i[1])
  {
    if (i == &v14)
    {
      v12 = 1;
      goto LABEL_7;
    }
    v11 = (_DWORD *)i[2];
    if (v11[8] == a3)
      break;
  }
  v12 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 216))(v11, a2, a4, a5);
LABEL_7:
  sub_10002074C(&v14);
  sub_100034234((uint64_t)v17);
  return v12;
}

void sub_10049AE48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_10002074C((uint64_t *)va);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10049AE70(uint64_t a1, uint64_t a2, int a3, char *a4, size_t a5)
{
  uint64_t *i;
  _DWORD *v11;
  uint64_t v12;
  void *v13;
  id v14;
  const char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD v21[2];

  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 120);
  v18 = 0;
  v19 = 0;
  v20 = 0;
  sub_10049C8D4(&v18, a1 + 184);
  sub_100034264((uint64_t)v21);
  for (i = v19; ; i = (uint64_t *)i[1])
  {
    if (i == &v18)
      goto LABEL_8;
    v11 = (_DWORD *)i[2];
    if (v11[8] == a3)
      break;
  }
  v12 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v11 + 184))(v11, a2);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  if (!v13)
  {
LABEL_8:
    v16 = 800;
    goto LABEL_9;
  }
  v14 = objc_retainAutorelease(v13);
  v15 = (const char *)objc_msgSend(v14, "UTF8String");
  if (strlen(v15) >= a5)
  {
    v16 = 5;
  }
  else
  {
    strlcpy(a4, v15, a5);
    v16 = 0;
  }

LABEL_9:
  sub_10002074C(&v18);
  sub_100034234((uint64_t)v21);
  return v16;
}

void sub_10049AF78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);

  sub_10002074C((uint64_t *)va);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10049AFAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 120);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10049C8D4(&v5, a1 + 184);
  sub_100034264((uint64_t)v8);
  v2 = v6;
  v3 = 1;
  while ((uint64_t *)v2 != &v5)
  {
    v3 = v3 & (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 224))(*(_QWORD *)(v2 + 16));
    v2 = *(_QWORD *)(v2 + 8);
  }
  sub_10002074C(&v5);
  sub_100034234((uint64_t)v8);
  return v3;
}

void sub_10049B048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_10002074C((uint64_t *)va);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10049B070(uint64_t a1)
{
  return sub_10049AFAC(a1 - 16);
}

uint64_t sub_10049B078(uint64_t a1)
{
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 120);
  v4 = 0;
  v5 = 0;
  v6 = 0;
  sub_10049C8D4(&v4, a1 + 184);
  sub_100034264((uint64_t)v7);
  for (i = v5; (uint64_t *)i != &v4; i = *(_QWORD *)(i + 8))
    (*(void (**)(_QWORD))(**(_QWORD **)(i + 16) + 232))(*(_QWORD *)(i + 16));
  *(_BYTE *)(a1 + 113) = 1;
  sub_10002074C(&v4);
  return sub_100034234((uint64_t)v7);
}

void sub_10049B110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_10002074C((uint64_t *)va);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10049B138(uint64_t a1)
{
  return sub_10049B078(a1 - 16);
}

uint64_t sub_10049B140(uint64_t result)
{
  *(_BYTE *)(result + 113) = 0;
  return result;
}

uint64_t sub_10049B148(uint64_t result)
{
  *(_BYTE *)(result + 97) = 0;
  return result;
}

uint64_t sub_10049B150(_DWORD *a1)
{
  int v2;
  _QWORD *v3;
  const char *v4;
  size_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  void *v10[2];
  char v11;
  __int128 v12;
  _OWORD v13[4];
  void *__p[2];
  __int128 v15;
  __int128 v16;
  _BYTE v17[144];
  uint64_t v18;

  v18 = 0;
  v16 = 0u;
  memset(v17, 0, sizeof(v17));
  *(_OWORD *)__p = 0u;
  v15 = 0u;
  memset(v13, 0, sizeof(v13));
  v12 = 0u;
  sub_1002613AC((uint64_t)&v12);
  v2 = 1;
  do
  {
    LODWORD(v10[0]) = *a1 & v2;
    if (LODWORD(v10[0]))
    {
      v3 = sub_1002614D8(v13, (uint64_t)"\"", 1);
      v4 = sub_100497E14((int *)v10);
      v5 = strlen(v4);
      v6 = sub_1002614D8(v3, (uint64_t)v4, v5);
      sub_1002614D8(v6, (uint64_t)"\" ", 2);
    }
    v2 *= 2;
  }
  while ((v2 & 0x80000000) == 0);
  std::stringbuf::str((char *)v13 + 8);
  if (v11 < 0)
  {
    v7 = v10[1];
    operator delete(v10[0]);
    if (v7)
      goto LABEL_10;
  }
  else if (v11)
  {
    goto LABEL_10;
  }
  sub_1002614D8(v13, (uint64_t)"None", 4);
LABEL_10:
  std::stringbuf::str((char *)v13 + 8);
  *(_QWORD *)((char *)&v13[-1]
  *(_QWORD *)&v13[0] = v8;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v13 + 8);
  return std::ios::~ios(v17);
}

void sub_10049B2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1006CC5C8((uint64_t)va);
  _Unwind_Resume(a1);
}

const char *sub_10049B308(int *a1)
{
  int v1;
  const char *result;

  v1 = *a1;
  if (*a1 > 1023)
  {
    if (v1 < 0x8000)
    {
      if (v1 <= 4095)
      {
        if (v1 == 1024)
          return "BT_SERVICE_PASSTHROUGH";
        if (v1 == 2048)
          return "BT_SERVICE_GAMING";
      }
      else
      {
        switch(v1)
        {
          case 0x1000:
            return "BT_SERVICE_NETWORK_CONSUMER";
          case 0x2000:
            return "BT_SERVICE_BRAILLE";
          case 0x4000:
            return "BT_SERVICE_PASSIVE_MULTI_STREAM";
        }
      }
    }
    else if (v1 >= 0x40000)
    {
      switch(v1)
      {
        case 0x40000:
          return "BT_SERVICE_WIRELESS_CARPLAY";
        case 0x80000:
          return "BT_SERVICE_AACP";
        case 0x100000:
          return "BT_SERVICE_GATT";
      }
    }
    else
    {
      switch(v1)
      {
        case 0x8000:
          return "BT_SERVICE_LE_GATT_CLIENT";
        case 0x10000:
          return "BT_SERVICE_LEA";
        case 0x20000:
          return "BT_SERVICE_WIRELESS_IAP_SINK";
      }
    }
    return "Unknown";
  }
  if (v1 > 15)
  {
    if (v1 > 127)
    {
      switch(v1)
      {
        case 128:
          return "BT_SERVICE_WIRELESS_IAP";
        case 256:
          return "BT_SERVICE_NET_SHARING";
        case 512:
          return "BT_SERVICE_MAP";
      }
    }
    else
    {
      switch(v1)
      {
        case 16:
          return "BT_SERVICE_A2DP";
        case 32:
          return "BT_SERVICE_HID";
        case 64:
          return "BT_SERVICE_SENSOR";
      }
    }
    return "Unknown";
  }
  result = "BT_SERVICE_NONE";
  switch(v1)
  {
    case -1:
      result = "BT_SERVICE_ALL";
      break;
    case 0:
      return result;
    case 1:
      result = "BT_SERVICE_HANDSFREE";
      break;
    case 2:
      result = "BT_SERVICE_PHONEBOOK";
      break;
    case 8:
      result = "BT_SERVICE_REMOTE";
      break;
    default:
      return "Unknown";
  }
  return result;
}

const char *sub_10049B4F4(int *a1)
{
  int v1;

  v1 = *a1;
  if (*a1 <= 300)
  {
    if (v1 > 101)
    {
      if (v1 <= 110)
      {
        if (v1 == 102)
          return "BT_SERVICE_HANDSFREE_AUDIO_DISCONNECTED";
        if (v1 == 110)
          return "BT_SERVICE_A2DP_LOW_LATENCY_ON";
      }
      else
      {
        switch(v1)
        {
          case 111:
            return "BT_SERVICE_A2DP_LOW_LATENCY_OFF";
          case 201:
            return "BT_SERVICE_A2DP_AUDIO_CONNECTED";
          case 202:
            return "BT_SERVICE_A2DP_AUDIO_DISCONNECTED";
        }
      }
    }
    else if (v1 <= 10)
    {
      if (v1 == 1)
        return "BT_SERVICE_CONNECTION_ATTEMPT";
      if (v1 == 2)
        return "BT_SERVICE_DISCONNECTION_ATTEMPT";
    }
    else
    {
      switch(v1)
      {
        case 11:
          return "BT_SERVICE_CONNECTION_RESULT";
        case 12:
          return "BT_SERVICE_DISCONNECTION_RESULT";
        case 101:
          return "BT_SERVICE_HANDSFREE_AUDIO_CONNECTED";
      }
    }
    return "Unknown";
  }
  if (v1 <= 700)
  {
    if (v1 <= 500)
    {
      if (v1 == 301)
        return "BT_SERVICE_PHONE_BOOK_SEND_INITIATED";
      if (v1 == 302)
        return "BT_SERVICE_PHONE_BOOK_SEND_COMPLETE";
    }
    else
    {
      switch(v1)
      {
        case 501:
          return "BT_SERVICE_REMOTE_PLAY";
        case 502:
          return "BT_SERVICE_REMOTE_PAUSE";
        case 601:
          return "BT_SERVICE_SENSOR_RSSI";
      }
    }
    return "Unknown";
  }
  if (v1 > 702)
  {
    switch(v1)
    {
      case 703:
        return "BT_SERVICE_HIGH_POWER_DISABLED";
      case 901:
        return "BT_UI_INITIATED_CONNECTION_REQUEST";
      case 902:
        return "BT_CONNECTION_RESULT_PROCESSED";
    }
    return "Unknown";
  }
  if (v1 == 701)
    return "BT_SERVICE_LMP_NAME_CHANGED";
  else
    return "BT_SERVICE_HIGH_POWER_ENABLED";
}

void sub_10049B6CC(uint64_t a1)
{
  NSObject *v2;
  uint64_t i;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  int v9;
  uint8_t buf[4];
  const char *v11;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ Service Manager ------------------", buf, 2u);
    v2 = qword_1009997E8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Supported services:", buf, 2u);
    v2 = qword_1009997E8;
  }
  for (i = *(_QWORD *)(a1 + 192); i != a1 + 184; i = *(_QWORD *)(i + 8))
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_DWORD *)(*(_QWORD *)(i + 16) + 32);
      v4 = sub_100497E14(&v9);
      *(_DWORD *)buf = 136446210;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", buf, 0xCu);
      v2 = qword_1009997E8;
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Services pending stop:", buf, 2u);
  }
  v5 = a1 + 608;
  v6 = *(_QWORD *)(a1 + 616);
  if (v6 != a1 + 608)
  {
    v7 = qword_1009997E8;
    do
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(_DWORD *)(*(_QWORD *)(v6 + 16) + 32);
        v8 = sub_100497E14(&v9);
        *(_DWORD *)buf = 136446210;
        v11 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", buf, 0xCu);
        v7 = qword_1009997E8;
      }
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6 != v5);
  }
}

uint64_t sub_10049B904(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 120);
  v6 = 0;
  v7 = 0;
  v8 = 0;
  sub_10049C8D4(&v6, a1 + 184);
  sub_100034264((uint64_t)v9);
  for (i = v7; (uint64_t *)i != &v6; i = *(_QWORD *)(i + 8))
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(i + 16) + 40))(*(_QWORD *)(i + 16), a2);
  sub_10002074C(&v6);
  return sub_100034234((uint64_t)v9);
}

void sub_10049B99C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_10002074C((uint64_t *)va);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10049B9C4(uint64_t a1, char *a2, _WORD *a3)
{
  _WORD *v6;
  int v7;
  int v8;
  NSObject *v9;
  _WORD __len[5];
  _WORD *v12;
  uint64_t v13;
  _QWORD v14[2];
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  _OWORD v23[16];

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 120);
  *(_QWORD *)&__len[1] = 0;
  v12 = 0;
  v13 = 0;
  sub_10049C8D4(&__len[1], a1 + 184);
  sub_100034264((uint64_t)v14);
  *a3 = 0;
  v6 = v12;
  if (v12 == &__len[1])
    goto LABEL_9;
  while (1)
  {
    memset(v23, 0, sizeof(v23));
    __len[0] = 0;
    (*(void (**)(_QWORD, _OWORD *, _WORD *))(**((_QWORD **)v6 + 2) + 200))(*((_QWORD *)v6 + 2), v23, __len);
    v7 = __len[0];
    if (__len[0])
      break;
LABEL_5:
    v6 = (_WORD *)*((_QWORD *)v6 + 1);
    if (v6 == &__len[1])
      goto LABEL_9;
  }
  v8 = (unsigned __int16)*a3;
  if (v8 + __len[0] <= 8)
  {
    memmove(&a2[(unsigned __int16)*a3], a2, __len[0]);
    *a3 += v7;
    goto LABEL_5;
  }
  v9 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109888;
    v16 = v7;
    v17 = 1024;
    v18 = v8;
    v19 = 1024;
    v20 = v8 + v7;
    v21 = 2048;
    v22 = 8;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "EIR data length: %d + data length: %d = %d > %lu", buf, 0x1Eu);
  }
LABEL_9:
  sub_10002074C(&__len[1]);
  sub_100034234((uint64_t)v14);
  return 1;
}

void sub_10049BB8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_10002074C((uint64_t *)va);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10049BBBC()
{
  uint64_t v0;

  v0 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 48))(v0, 2048))
    return 1;
  if (qword_10097B380 != -1)
    dispatch_once(&qword_10097B380, &stru_100931830);
  return (*(uint64_t (**)(void *))(*(_QWORD *)off_10097B378 + 240))(off_10097B378);
}

uint64_t sub_10049BC28(int64x2_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  NSObject *v6;
  _DWORD *v7;
  NSObject *v8;
  uint8_t v10[16];

  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F6A54((uint64_t)a2, v6);
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_1009319B0);
  v7 = (_DWORD *)sub_10043926C((uint64_t)off_100978188, (uint64_t)a2);
  if ((_DWORD)a3 && v7 && *v7 == 3)
  {
    if (qword_100978190 != -1)
      dispatch_once(&qword_100978190, &stru_1009319B0);
    sub_1004398C0((uint64_t)off_100978188, a2, a3);
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Removed device tracking for fast connect after SDP", v10, 2u);
    }
  }
  sub_100494228((uint64_t)a1, (uint64_t)a2, 0, 0, 11, a3, 0);
  return sub_100494DFC(a1, (uint64_t)a2);
}

uint64_t sub_10049BD78(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;
  std::string::size_type size;
  _QWORD *v5;
  _QWORD *v6;
  std::string *p_p;
  std::string::size_type v8;
  uint64_t v9;
  NSObject *v10;
  int v12;
  std::string::size_type v13;
  std::string *v14;
  std::string *v15;
  std::string __p;
  std::string v17;
  _OWORD v18[4];
  void *v19[2];
  __int128 v20;
  __int128 v21;
  _OWORD v22[9];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t buf[4];
  std::string *v27;
  __int16 v28;
  std::string *v29;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 114) = 1;
  v24 = 0;
  v25 = 0;
  sub_100444BF0(*(_QWORD *)(a1 + 40), (_DWORD *)&v25 + 1, &v25, (_DWORD *)&v24 + 1, &v24);
  v23 = 0;
  v21 = 0u;
  memset(v22, 0, sizeof(v22));
  *(_OWORD *)v19 = 0u;
  v20 = 0u;
  memset(v18, 0, sizeof(v18));
  sub_100272ADC((uint64_t)v18);
  v2 = sub_1002614D8(v18, (uint64_t)"VID:", 4);
  std::to_string(&v17, v25);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v17;
  else
    v3 = (std::string *)v17.__r_.__value_.__r.__words[0];
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  else
    size = v17.__r_.__value_.__l.__size_;
  v5 = sub_1002614D8(v2, (uint64_t)v3, size);
  v6 = sub_1002614D8(v5, (uint64_t)" PID:", 5);
  std::to_string(&__p, HIDWORD(v24));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v8 = __p.__r_.__value_.__l.__size_;
  sub_1002614D8(v6, (uint64_t)p_p, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (qword_10097AA70 != -1)
    dispatch_once(&qword_10097AA70, &stru_100931AD0);
  v9 = qword_10097AA68;
  sub_100091AE8(&v17, "Service Manager Stall");
  std::stringbuf::str((char *)v18 + 8);
  sub_10047C59C(0.0, v9, (uint64_t *)&v17, (uint64_t *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  v10 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8(*(_QWORD *)(a1 + 40), &v17);
    v12 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
    v13 = v17.__r_.__value_.__r.__words[0];
    std::stringbuf::str((char *)v18 + 8);
    v14 = &v17;
    if (v12 < 0)
      v14 = (std::string *)v13;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &__p;
    else
      v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446466;
    v27 = v14;
    v28 = 2080;
    v29 = v15;
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Service Manager Stalled due to %{public}s. Triggering ABC for %s", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20) < 0)
    operator delete(v19[1]);
  std::streambuf::~streambuf((char *)v18 + 8);
  return std::ios::~ios(v22);
}

void sub_10049C084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  sub_100272CFC((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_10049C0E4()
{
  JUMPOUT(0x10049C0DCLL);
}

void sub_10049C0F0()
{
  operator delete();
}

uint64_t sub_10049C104(unint64_t *a1)
{
  uint64_t result;

  result = sub_10049C17C((uint64_t)a1, a1[2]);
  if ((_DWORD)result)
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))(a1, a1[2], a1[3], a1[4]);
  return result;
}

uint64_t sub_10049C14C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  return sub_100424570(a2, a3, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), a4);
}

BOOL sub_10049C17C(uint64_t a1, unint64_t a2)
{
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100931930);
  return sub_10050AB38(qword_100977B48, a2);
}

void sub_10049C1CC(id a1)
{
  operator new();
}

void sub_10049C20C()
{
  operator delete();
}

void sub_10049C230(id a1)
{
  operator new();
}

void sub_10049C270()
{
  operator delete();
}

void sub_10049C294(id a1)
{
  operator new();
}

void sub_10049C2D4()
{
  operator delete();
}

void sub_10049C2F8(id a1)
{
  operator new();
}

void sub_10049C338()
{
  operator delete();
}

void sub_10049C35C(id a1)
{
  operator new();
}

void sub_10049C39C()
{
  operator delete();
}

void sub_10049C3C0(id a1)
{
  operator new();
}

void sub_10049C400()
{
  operator delete();
}

void sub_10049C424(id a1)
{
  operator new();
}

void sub_10049C464()
{
  operator delete();
}

void sub_10049C488(id a1)
{
  operator new();
}

void sub_10049C4C8()
{
  operator delete();
}

void sub_10049C4EC(id a1)
{
  operator new();
}

void sub_10049C52C()
{
  operator delete();
}

void sub_10049C550(id a1)
{
  operator new();
}

void sub_10049C590()
{
  operator delete();
}

void sub_10049C5B4(id a1)
{
  operator new();
}

void sub_10049C5F4()
{
  operator delete();
}

void sub_10049C618(id a1)
{
  operator new();
}

void sub_10049C658()
{
  operator delete();
}

void sub_10049C67C(id a1)
{
  operator new();
}

void sub_10049C6BC()
{
  operator delete();
}

void sub_10049C6E0(id a1)
{
  operator new();
}

void sub_10049C720()
{
  operator delete();
}

void sub_10049C744(id a1)
{
  operator new();
}

void sub_10049C784()
{
  operator delete();
}

void sub_10049C7A8(id a1)
{
  operator new();
}

void sub_10049C7E8()
{
  operator delete();
}

void sub_10049C80C(id a1)
{
  operator new();
}

void sub_10049C84C()
{
  operator delete();
}

void sub_10049C870(id a1)
{
  operator new();
}

void sub_10049C8B0()
{
  operator delete();
}

_QWORD *sub_10049C8D4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x18uLL);
      v8 = *(_QWORD *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_10049C958(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10002074C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10049C96C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v4;

  while (1)
  {
    if (result == a2)
      return a2;
    if (*(_QWORD *)result == a3)
      break;
    result += 32;
  }
  if (result != a2)
  {
    for (i = result + 32; i != a2; i += 32)
    {
      if (*(_QWORD *)i != a3)
      {
        v4 = *(_QWORD *)(i + 8);
        *(_QWORD *)result = *(_QWORD *)i;
        *(_QWORD *)(result + 8) = v4;
        *(_DWORD *)(result + 16) = *(_DWORD *)(i + 16);
        *(_QWORD *)(result + 24) = *(_QWORD *)(i + 24);
        result += 32;
      }
    }
  }
  return result;
}

uint64_t sub_10049C9D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = *a1;
  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = v8 - v2;
  if (v9 >> 4 > v4)
    v4 = v9 >> 4;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
    v10 = 0x7FFFFFFFFFFFFFFLL;
  else
    v10 = v4;
  v20 = v7;
  v11 = (char *)sub_1002A7408(v7, v10);
  v12 = &v11[32 * v3];
  __p = v11;
  v17 = v12;
  v19 = &v11[32 * v13];
  *(_OWORD *)v12 = *(_OWORD *)a2;
  *((_DWORD *)v12 + 4) = *(_DWORD *)(a2 + 16);
  *((_QWORD *)v12 + 3) = *(_QWORD *)(a2 + 24);
  v18 = v12 + 32;
  sub_10049CAF4(a1, &__p);
  v14 = a1[1];
  if (v18 != v17)
    v18 += (v17 - v18 + 31) & 0xFFFFFFFFFFFFFFE0;
  if (__p)
    operator delete(__p);
  return v14;
}

void sub_10049CABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10049CAF4(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(_DWORD *)(v6 - 16) = *(_DWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10049CB78(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t v5;

  if (result != a2)
  {
    while (*(_QWORD *)result != a3 || a4 != *(_QWORD *)(result + 8))
    {
      result += 32;
      if (result == a2)
        return a2;
    }
  }
  if (result == a2)
    return a2;
  for (i = result + 32; i != a2; i += 32)
  {
    if (*(_QWORD *)i != a3 || a4 != *(_QWORD *)(i + 8))
    {
      v5 = *(_QWORD *)(i + 8);
      *(_QWORD *)result = *(_QWORD *)i;
      *(_QWORD *)(result + 8) = v5;
      *(_DWORD *)(result + 16) = *(_DWORD *)(i + 16);
      *(_QWORD *)(result + 24) = *(_QWORD *)(i + 24);
      result += 32;
    }
  }
  return result;
}

void sub_10049CC10(id a1)
{
  operator new();
}

void sub_10049CC50()
{
  operator delete();
}

void sub_10049CC74(id a1)
{
  operator new();
}

void sub_10049CCB4()
{
  operator delete();
}

void sub_10049CCD8(id a1)
{
  operator new();
}

void sub_10049CD18()
{
  operator delete();
}

void sub_10049CD3C(id a1)
{
  operator new();
}

void sub_10049CD7C()
{
  operator delete();
}

void sub_10049CDA0(id a1)
{
  operator new();
}

void sub_10049CDE0()
{
  operator delete();
}

void sub_10049CE04(id a1)
{
  operator new();
}

void sub_10049CE44()
{
  operator delete();
}

void sub_10049CE68(id a1)
{
  operator new();
}

void sub_10049CEA8()
{
  operator delete();
}

void sub_10049CECC(id a1)
{
  operator new();
}

void sub_10049CF0C()
{
  operator delete();
}

void sub_10049CF30(id a1)
{
  operator new();
}

void sub_10049CF70()
{
  operator delete();
}

void sub_10049CF94(id a1)
{
  operator new();
}

void sub_10049D0AC()
{
  operator delete();
}

void sub_10049D0D0(id a1)
{
  operator new();
}

void sub_10049D110()
{
  operator delete();
}

void sub_10049D134(id a1)
{
  operator new();
}

void sub_10049D174()
{
  void *v0;
  uint64_t i;
  const void *v2[3];
  _QWORD v3[3];
  _QWORD v4[3];
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[3];

  v0 = objc_autoreleasePoolPush();
  sub_100091AE8(v2, "com.apple.springboard");
  sub_100091AE8(v3, "com.apple.Preferences");
  sub_100091AE8(v4, "com.apple.preferences");
  sub_100091AE8(v5, "com.apple.figEndpoint");
  sub_100091AE8(v6, "SFBluetoothPairingSession");
  sub_100091AE8(v7, "com.apple.NanoSettings");
  sub_100091AE8(v8, "com.apple.NanoMusic");
  sub_100393D54((uint64_t)&qword_100999600, v2, 7);
  for (i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v8[i + 2]) < 0)
      operator delete((void *)v8[i]);
  }
  __cxa_atexit((void (*)(void *))sub_10049230C, &qword_100999600, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_10049D2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v13;

  v13 = 0;
  while (1)
  {
    if (*(char *)(v11 + v13 + 167) < 0)
      operator delete(*(void **)(v11 + v13 + 144));
    v13 -= 24;
    if (v13 == -168)
      _Unwind_Resume(exception_object);
  }
}

uint64_t sub_10049D32C(uint64_t a1)
{
  *(_QWORD *)a1 = off_100931B00;
  *(_QWORD *)(a1 + 8) = &off_100931B98;
  *(_QWORD *)(a1 + 16) = off_100931BB0;
  *(_QWORD *)(a1 + 24) = &off_100931BE0;
  *(_QWORD *)(a1 + 32) = &off_100931BF8;
  *(_QWORD *)(a1 + 40) = &off_100931C10;
  *(_QWORD *)(a1 + 48) = off_100931C28;
  *(_DWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  sub_1000160D0(a1 + 128);
  *(_BYTE *)(a1 + 199) = 0;
  *(_WORD *)(a1 + 202) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 196) = 0;
  sub_1000160D0(a1 + 208);
  *(_WORD *)(a1 + 276) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 352) = 0xFFFF;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  sub_1000160D0(a1 + 392);
  *(_QWORD *)(a1 + 464) = 0;
  sub_1000160D0(a1 + 472);
  *(_BYTE *)(a1 + 540) = 0;
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_100931F18);
  *(_BYTE *)(a1 + 203) = sub_1004BA7B4() != 0.0;
  return a1;
}

void sub_10049D46C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  void *v10;
  va_list va;

  va_start(va, a2);
  v8 = v5;
  sub_100069BDC(v8);

  sub_100069BDC(v6);
  if (*(char *)(v2 + 383) < 0)
    operator delete(*(void **)(v2 + 360));
  if (*(char *)(v2 + 303) < 0)
    operator delete(*(void **)(v2 + 280));
  sub_100069BDC(v4);
  sub_100069BDC(v3);
  sub_1004AA560((void ***)va);
  v10 = *v7;
  if (*v7)
  {
    *(_QWORD *)(v2 + 80) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10049D50C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  *(_BYTE *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 384) = sub_10049D55C(a1);
  *(_BYTE *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 456) = sub_10049D5C4(a1);
  *(_DWORD *)(a1 + 536) = 0;
  v2 = sub_100027F68();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 656))(v2);
  *(_BYTE *)(a1 + 202) = result;
  return result;
}

uint64_t sub_10049D55C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 392);
  v2 = *(unsigned __int8 *)(a1 + 384);
  if (!*(_BYTE *)(a1 + 384))
    v2 = sub_1004A67CC(a1);
  sub_100034234((uint64_t)v4);
  return v2;
}

void sub_10049D5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10049D5C4(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 392);
  v2 = *(unsigned __int8 *)(a1 + 456);
  if (!*(_BYTE *)(a1 + 456))
    v2 = sub_1004A6600(a1);
  sub_100034234((uint64_t)v4);
  return v2;
}

void sub_10049D618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10049D62C()
{
  if (qword_100992C98 != -1)
    dispatch_once(&qword_100992C98, &stru_100931C58);
}

void sub_10049D654(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  if (sub_1001702EC() == 7)
  {
    v6 = sub_1000DFE30((uint64_t (*)(_QWORD, _QWORD))sub_10049D75C, (uint64_t)sub_10049D880, (uint64_t (*)(_QWORD, _QWORD))sub_10049DA40, v1, v2, v3, v4, v5);
    v7 = sub_100027F68();
    v8 = v7;
    if ((v6 & 1) == 0)
    {
      sub_100091AE8(&v18, "StackManager::initTransport");
      sub_1005756F0(v8, 3713, &v18, 1);
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 488))(v7, 0);
    if ((sub_1000E001C((uint64_t)sub_10049DAF8, v9, v10, v11, v12, v13, v14, v15) & 1) == 0)
    {
      v16 = sub_100027F68();
      sub_100091AE8(&v17, "StackManager::initTransport");
      sub_1005756F0(v16, 3714, &v17, 1);
    }
  }
}

void sub_10049D728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_10049D75C(char *a1, int a2)
{
  uint64_t v3;
  void *v4;
  void *__p[2];
  char v6;
  __int128 v7;

  if (a2)
  {
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100931E98);
    sub_1004A3CCC((uint64_t)a1, 8, 0, (uint64_t)a1);
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100931E98);
    v4 = off_100977A50;
    sub_100091AE8(&v7, a1);
    sub_1004A37B0((uint64_t)v4, 1214, &v7);
  }
  if (sub_100065478())
  {
    v3 = sub_100065478();
    sub_100091AE8(__p, a1);
    (*(void (**)(uint64_t, uint64_t, _QWORD, void **))(*(_QWORD *)v3 + 104))(v3, 9, 0, __p);
    if (v6 < 0)
      operator delete(__p[0]);
  }
}

void sub_10049D850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10049D880(char *a1, _BYTE *a2)
{
  int v4;
  NSObject *v5;
  _BOOL8 v6;
  const char *v7;
  void *v8;
  __int128 v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;

  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_100931EF8);
  v4 = sub_10002527C((uint64_t)off_100978128);
  v5 = qword_1009997E8;
  v6 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    v7 = "non-";
    if (v4 == 1)
      v7 = "";
    *(_DWORD *)buf = 67109378;
    v11 = v4;
    v12 = 2080;
    v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Controller is resetting in power state %d, treating as %sfatal", buf, 0x12u);
  }
  if (v4 == 1)
  {
    *a2 = 1;
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100931E98);
    sub_1004A3CCC(v6, 10, 0, (uint64_t)a1);
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100931E98);
    v8 = off_100977A50;
    sub_100091AE8(&v9, a1);
    sub_1004A37B0((uint64_t)v8, 1214, &v9);
  }
}

void sub_10049DA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10049DA40(int a1, uint64_t a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  uint64_t v7;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109376;
    v5[1] = a1;
    v6 = 2048;
    v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "driverMetricsCb: type %u arg %llu", (uint8_t *)v5, 0x12u);
  }
}

void sub_10049DAF8(__int128 *a1)
{
  uint64_t v1;
  _QWORD v2[4];
  __int128 v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *((_QWORD *)a1 + 2);
  v1 = sub_10006BBEC();
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1004A76FC;
  v2[3] = &unk_1009210D8;
  sub_100041A34(v1, v2);
}

uint64_t sub_10049DB58(uint64_t a1, unsigned int a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  char v12;
  int v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;

  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(int *)(a1 + 56);
    if (v7 > 2)
      v8 = "Unknown State";
    else
      v8 = off_100932058[v7];
    v9 = "StackStarted";
    if (*(_BYTE *)(a1 + 60))
      v10 = "StackStarted";
    else
      v10 = "StackStopped";
    if (a2 > 2)
      v11 = "Unknown State";
    else
      v11 = off_100932058[a2];
    if (!a3)
      v9 = "StackStopped";
    v14 = 136446978;
    v15 = v8;
    v16 = 2082;
    v17 = v10;
    v18 = 2082;
    v19 = v11;
    v20 = 2082;
    v21 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Stack: %{public}s/%{public}s -> %{public}s/%{public}s", (uint8_t *)&v14, 0x2Au);
  }
  *(_DWORD *)(a1 + 56) = a2;
  if (a2 == 1)
    v12 = a3;
  else
    v12 = 0;
  *(_BYTE *)(a1 + 60) = v12;
  return 0;
}

_BYTE *sub_10049DC98()
{
  uint64_t v0;
  uint64_t v2;
  char v3;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100931F38);
  sub_1004735B0((uint64_t)off_1009778E0);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100931F58);
  sub_100668BD0((uint64_t)off_1009778C0);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100931E98);
  if (*((_BYTE *)off_100977A50 + 60))
  {
    v3 = 0;
    sub_100043758(&v3);
    sub_1000F3C84();
    v0 = sub_100038E50();
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 56))(v0);
    return sub_100043728(&v3);
  }
  else
  {
    sub_1000F3C84();
    v2 = sub_100038E50();
    return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  }
}

void sub_10049DDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10049DDB4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  NSObject *v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  int v49;
  NSObject *v50;
  uint64_t v51;
  int v52;
  NSObject *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  const char *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  NSObject *v107;
  _QWORD *v108;
  NSObject *v109;
  _BYTE *v110;
  _BOOL8 v111;
  unsigned __int16 v112;
  __int16 v113;
  __int16 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  unsigned __int8 v145;
  __int16 v146;
  unsigned __int8 v147;
  char v148;
  int v149;
  __int16 v150;
  int v151;
  int v152;
  int v153;
  unsigned __int8 v154;
  char v155;
  char v156;
  unsigned __int8 v157;
  char v158;
  uint64_t (*v159)(void *);
  void *__p[2];
  uint64_t v161;
  _QWORD v162[2];
  _BYTE buf[14];
  _BYTE v164[14];
  int v165;
  __int16 v166;
  unsigned int v167;
  _BYTE v168[12];
  __int16 v169;
  _BYTE *v170;
  char v171;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "Sep  3 2024";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)v164 = "19:42:29";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting bluetooth core stack (BUILD %{public}s %{public}s)", buf, 0x16u);
  }
  v162[0] = 0;
  v162[1] = 0;
  sub_10003415C((uint64_t)v162, a1 + 208);
  *(_WORD *)(a1 + 276) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  if (*(char *)(a1 + 303) < 0)
  {
    **(_BYTE **)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 280) = 0;
    *(_BYTE *)(a1 + 303) = 0;
  }
  *(_BYTE *)(a1 + 540) = 0;
  sub_100034264((uint64_t)v162);
  __p[0] = 0;
  __p[1] = 0;
  v161 = 0;
  v3 = sub_100038E50();
  sub_1003F93A0(v3 + 208, a1 + 8);
  v4 = sub_100038E50();
  if (!(*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v4 + 16))(v4, __p))
  {
    if (v161 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    strlcpy("iOS", (const char *)v5, 0x82uLL);
  }
  v6 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, 256))
  {
    v7 = sub_100038E50();
    sub_1004AA5E8(v7 + 248, a1 + 24);
  }
  v8 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(v8, 0x40000))
  {
    v9 = sub_100038E50();
    sub_1004AA8D8(v9 + 688, a1 + 40);
  }
  v159 = sub_10049F614;
  sub_10016F964((void **)&v159, a1);
  v158 = 0;
  v10 = sub_100027F68();
  sub_100091AE8(buf, "Stack");
  sub_100091AE8(v168, "force1M");
  v11 = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, char *))(*(_QWORD *)v10 + 72))(v10, buf, v168, &v158);
  if (v158)
    v12 = v11;
  else
    v12 = 0;
  v144 = v12;
  if (v171 < 0)
    operator delete(*(void **)v168);
  if ((v164[9] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (v144)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F6E9C();
    sub_100192EB4();
  }
  v157 = 0;
  v13 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(v168, "enableLELRInSetDefaultPhy");
  v14 = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, unsigned __int8 *))(*(_QWORD *)v13 + 72))(v13, buf, v168, &v157);
  if (v171 < 0)
    operator delete(*(void **)v168);
  if ((v164[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v14)
      goto LABEL_35;
  }
  else if (!v14)
  {
    goto LABEL_35;
  }
  v15 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v157;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "LELR for testing enableLELR=%d", buf, 8u);
  }
  LOBYTE(v144) = 1;
LABEL_35:
  sub_100192ED0(v157);
  v156 = 0;
  v16 = sub_100027F68();
  sub_100091AE8(buf, "Stack");
  sub_100091AE8(v168, "disableConnUpdateWAR");
  v17 = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, char *))(*(_QWORD *)v16 + 72))(v16, buf, v168, &v156);
  if (v156)
    v18 = v17;
  else
    v18 = 0;
  if (v171 < 0)
    operator delete(*(void **)v168);
  if ((v164[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v18)
      goto LABEL_47;
  }
  else if (!v18)
  {
    goto LABEL_47;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F6E70();
  LOBYTE(v144) = 1;
LABEL_47:
  v155 = 0;
  v19 = sub_100027F68();
  sub_100091AE8(buf, "Stack");
  sub_100091AE8(v168, "disableWriteCODWAR");
  v20 = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, char *))(*(_QWORD *)v19 + 72))(v19, buf, v168, &v155);
  if (v155)
    v21 = v20;
  else
    v21 = 0;
  if (v171 < 0)
    operator delete(*(void **)v168);
  if ((v164[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v21)
      goto LABEL_59;
  }
  else if (!v21)
  {
    goto LABEL_59;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F6E44();
  LOBYTE(v144) = 1;
LABEL_59:
  v22 = sub_100027F68();
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 656))(v22);
  *(_BYTE *)(a1 + 202) = v23;
  if ((v23 & 1) == 0 && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F6E18();
  v154 = 0;
  v24 = sub_100027F68();
  sub_100091AE8(buf, "Stack");
  sub_100091AE8(v168, "disableClassicSecureConnections");
  v25 = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, unsigned __int8 *))(*(_QWORD *)v24 + 72))(v24, buf, v168, &v154);
  if (v154)
    v26 = v25;
  else
    v26 = 0;
  if (v171 < 0)
    operator delete(*(void **)v168);
  if ((v164[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v26)
      goto LABEL_74;
  }
  else if (!v26)
  {
    goto LABEL_74;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F6DEC();
  LOBYTE(v144) = 1;
LABEL_74:
  sub_10024BB28(v154);
  sub_10019DCBC(sub_10049F6A4);
  v27 = sub_10003BE44();
  v141 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 560))(v27);
  v28 = sub_10003BE44();
  v142 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 480))(v28);
  v29 = sub_10003BE44();
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 568))(v29);
  v31 = sub_10003BE44();
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 576))(v31);
  v33 = sub_10003BE44();
  v140 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 584))(v33);
  v34 = sub_10003BE44();
  v139 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 592))(v34);
  v35 = sub_10003BE44();
  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 608))(v35);
  v37 = sub_10003BE44();
  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 616))(v37);
  v39 = sub_10003BE44();
  v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 640))(v39);
  v41 = sub_10003BE44();
  v143 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 680))(v41);
  v42 = sub_10003BE44();
  v137 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 648))(v42);
  v43 = sub_10003BE44();
  v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 488))(v43);
  v45 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v44;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "initCoreStack enablePeriodicAdvertisingAdv=%d", buf, 8u);
  }
  v46 = sub_10003BE44();
  v138 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 496))(v46);
  v136 = v40;
  v47 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v138;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "initCoreStack enablePeriodicAdvertisingSync=%d", buf, 8u);
  }
  v48 = sub_10003BE44();
  v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 504))(v48);
  v50 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v49;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "initCoreStack enablePeriodidAdvSyncTranSender=%d", buf, 8u);
  }
  v51 = sub_10003BE44();
  v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 512))(v51);
  v53 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v52;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "initCoreStack enablePeriodidAdvSyncTranRecipient=%d", buf, 8u);
  }
  v54 = sub_10003BE44();
  v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 744))(v54);
  v56 = sub_10003BE44();
  v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 752))(v56);
  v58 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v57;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "enable ABC logs for Magnet Timer: %d", buf, 8u);
  }
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_100931EF8);
  sub_10026AD44((uint64_t)off_100978128, v57);
  if (v142)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F6DC0();
    v141 = 1;
  }
  v59 = sub_1000438A4();
  v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 2696))(v59);
  v61 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if ((_DWORD)v60)
      v62 = "supports";
    else
      v62 = "does not support";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v62;
    _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "This platform %s address rotation while scanning or connecting", buf, 0xCu);
    v61 = qword_1009997E8;
  }
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
  {
    if (v55)
      v63 = "supports";
    else
      v63 = "does not support";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v63;
    _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "This platform %s rssi connection statistics and detection", buf, 0xCu);
  }
  v64 = sub_10003BE44();
  v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 824))(v64);
  sub_100206F70(v142);
  sub_100206F64(v141);
  sub_10021851C(v32);
  sub_100218528(v140);
  sub_10022B978(v38 | v30);
  sub_10022B9CC(v139);
  sub_10022B9D8(v36);
  sub_10022B9E4(v38);
  sub_10022B9F8(v136);
  sub_10022BA04(v137);
  v66 = sub_1000438A4();
  v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 3344))(v66);
  v68 = v67;
  sub_100206F8C(v67);
  nullsub_90(v143, v69);
  sub_10022BAB0(v143);
  nullsub_90(v143, v70);
  sub_100224C84(v60);
  sub_100208548(v44);
  sub_100111244(v138);
  v71 = sub_1000438A4();
  v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 3512))(v71);
  v73 = sub_1000438A4();
  v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 3504))(v73);
  sub_1002187DC(v74, v72, v75, v76, v77, v78, v79, v80);
  sub_10022BA10(v65);
  v81 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67110400;
    *(_DWORD *)&buf[4] = v141;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v142;
    *(_WORD *)v164 = 1024;
    *(_DWORD *)&v164[2] = v38 | v30;
    *(_WORD *)&v164[6] = 1024;
    *(_DWORD *)&v164[8] = v139;
    *(_WORD *)&v164[12] = 1024;
    v165 = v68;
    v166 = 1024;
    v167 = v140;
    _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "enableBTSpecAdvertisingSets=%d enableExtendedAdvertising=%d enableExtendedScanning=%d enableExtendedScanHCI=%d maxAdvHandles=%d enableEnhancedConnectionsV2=%d", buf, 0x26u);
  }
  v82 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v82 + 2752))(v82))
    v83 = 16;
  else
    v83 = 8;
  sub_100225374(v83);
  if (*(_DWORD *)(sub_1000438A4() + 712))
  {
    v84 = (int *)sub_1000438A4();
    if (sub_100333228(v84))
      goto LABEL_116;
  }
  if (*(_DWORD *)(sub_1000438A4() + 712) == 6000)
  {
    v85 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "initCoreStack";
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEFAULT, "%s: register BTVirtualController callbacks", buf, 0xCu);
    }
    if (qword_10097B488 != -1)
      dispatch_once(&qword_10097B488, &stru_100931F78);
    sub_1006C2518();
  }
  if (sub_10010B3DC(1, sub_10049F724, 0))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F6D60();
LABEL_116:
    v86 = 110;
    goto LABEL_209;
  }
  v153 = 0;
  v87 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(v168, "overridePrivateAddressRotationInterval");
  v88 = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, int *))(*(_QWORD *)v87 + 88))(v87, buf, v168, &v153);
  if (v171 < 0)
    operator delete(*(void **)v168);
  if ((v164[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v88)
      goto LABEL_126;
  }
  else if (!v88)
  {
    goto LABEL_126;
  }
  v89 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F6CF8((uint64_t)&v153, v89, v90, v91, v92, v93, v94, v95);
  sub_100224C70((unsigned __int16)v153);
LABEL_126:
  v96 = sub_100027F68();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96))
    goto LABEL_148;
  v149 = 0;
  v97 = sub_100027F68();
  sub_100091AE8(buf, "FastR1ScanInterval");
  sub_100091AE8(v168, "interval");
  v98 = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, int *))(*(_QWORD *)v97 + 88))(v97, buf, v168, &v149);
  if (v171 < 0)
    operator delete(*(void **)v168);
  if ((v164[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v98)
      goto LABEL_134;
    goto LABEL_133;
  }
  if (v98)
  {
LABEL_133:
    buf[0] = 0;
    sub_100043758(buf);
    sub_100187A88((unsigned __int16)v149);
    sub_100043728(buf);
  }
LABEL_134:
  v152 = 0;
  v99 = sub_100027F68();
  sub_100091AE8(buf, "FastR1ScanType");
  sub_100091AE8(v168, "scanType");
  v100 = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, int *))(*(_QWORD *)v99 + 88))(v99, buf, v168, &v152);
  if (v171 < 0)
    operator delete(*(void **)v168);
  if ((v164[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v100)
      goto LABEL_141;
    goto LABEL_140;
  }
  if (v100)
  {
LABEL_140:
    buf[0] = 0;
    sub_100043758(buf);
    sub_100187A94(v152);
    sub_100043728(buf);
  }
LABEL_141:
  v151 = 0;
  v101 = sub_100027F68();
  sub_100091AE8(buf, "MediumR1ScanInterval");
  sub_100091AE8(v168, "interval");
  v102 = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, int *))(*(_QWORD *)v101 + 88))(v101, buf, v168, &v151);
  if (v171 < 0)
    operator delete(*(void **)v168);
  if ((v164[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v102)
      goto LABEL_148;
    goto LABEL_147;
  }
  if (v102)
  {
LABEL_147:
    buf[0] = 0;
    sub_100043758(buf);
    sub_100187AA0((unsigned __int16)v151);
    sub_100043728(buf);
  }
LABEL_148:
  dword_1009996B8 = 0;
  byte_1009996BD = 0;
  v150 = 0;
  v149 = 0;
  LOBYTE(v152) = 0;
  sub_100043758(&v152);
  v103 = sub_100187E98((uint64_t)&v149);
  sub_10004339C(&v152);
  if (v103)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F6C98();
    sub_10049F74C(a1);
  }
  else
  {
    sub_10006D81C(&v152);
    v104 = sub_10003BE44();
    v105 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v104 + 184))(v104);
    sub_1000EA254(v105);
    sub_10004339C(&v152);
    sub_100034188((uint64_t)v162);
    v106 = (_QWORD *)(a1 + 280);
    *(_DWORD *)(a1 + 272) = v149;
    *(_WORD *)(a1 + 276) = v150;
    std::string::assign((std::string *)(a1 + 280), "iOS");
    v107 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v108 = (_QWORD *)(a1 + 280);
      if (*(char *)(a1 + 303) < 0)
        v108 = (_QWORD *)*v106;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v108;
      *(_WORD *)&buf[12] = 1040;
      *(_DWORD *)v164 = 6;
      *(_WORD *)&v164[4] = 2096;
      *(_QWORD *)&v164[6] = a1 + 272;
      _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, "statedump: Local device is \"%s\" (%{bluetooth:BD_ADDR}.6P)", buf, 0x1Cu);
    }
    v109 = qword_1009998E8;
    if (os_log_type_enabled((os_log_t)qword_1009998E8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 303) < 0)
        v106 = (_QWORD *)*v106;
      sub_10046E9BC((unsigned __int8 *)(a1 + 272), buf);
      if (v164[9] >= 0)
        v110 = buf;
      else
        v110 = *(_BYTE **)buf;
      *(_DWORD *)v168 = 136315394;
      *(_QWORD *)&v168[4] = v106;
      v169 = 2080;
      v170 = v110;
      _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEFAULT, "Init Core Stack - {localname: %s, local-addr: %s}", v168, 0x16u);
      if ((v164[9] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    sub_100034264((uint64_t)v162);
    sub_10006D81C(&v152);
    sub_1000438A4();
    sub_100333368();
    if (*(_DWORD *)(sub_1000438A4() + 712) >= 0x7D0u && *(_DWORD *)(sub_1000438A4() + 712) <= 0xF9Fu)
    {
      sub_1000438A4();
      sub_1003332A4();
    }
    v111 = *(_DWORD *)(sub_1000438A4() + 712) && *(_DWORD *)(sub_1000438A4() + 712) < 0x7D0u;
    sub_10019F2BC(v111);
    sub_10004339C(&v152);
    *(_OWORD *)(a1 + 320) = 0u;
    *(_OWORD *)(a1 + 336) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_WORD *)(a1 + 304) = sub_1003CD8D8();
    *(_WORD *)(a1 + 306) = sub_1003CD8E0();
    *(_WORD *)(a1 + 308) = sub_1003CD804();
    *(_BYTE *)(a1 + 310) = 1;
    *(_WORD *)(a1 + 312) = sub_10005549C();
    *(_QWORD *)(a1 + 328) = 0;
    *(_QWORD *)(a1 + 336) = aPnpInformation;
    *(_QWORD *)(a1 + 344) = 0;
    *(_DWORD *)(a1 + 316) = 10495684;
    *(_WORD *)(a1 + 314) = 1;
    *(_QWORD *)(a1 + 320) = 0x7D0C0D00000000;
    sub_10006D81C(&v152);
    v112 = sub_1003CD8D8();
    v113 = getpid();
    v114 = sub_1003CD804();
    v115 = sub_1000438A4();
    sub_1000F3FA4(v112, v113, v114, *(_WORD *)(v115 + 712));
    v116 = sub_10003BE44();
    v117 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v116 + 72))(v116);
    sub_1000F4344(v117);
    sub_10004339C(&v152);
    LOBYTE(v151) = 0;
    v148 = 0;
    v118 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118))
    {
      v119 = sub_100027F68();
      sub_100091AE8(buf, "FastConnect");
      sub_100091AE8(v168, "DisableFastConnect");
      (*(void (**)(uint64_t, _BYTE *, _BYTE *, int *))(*(_QWORD *)v119 + 72))(v119, buf, v168, &v151);
      if (v171 < 0)
        operator delete(*(void **)v168);
      if ((v164[9] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v120 = sub_100027F68();
      sub_100091AE8(buf, "FastConnect");
      sub_100091AE8(v168, "DisableFastConnectAll");
      (*(void (**)(uint64_t, _BYTE *, _BYTE *, char *))(*(_QWORD *)v120 + 72))(v120, buf, v168, &v148);
      if (v171 < 0)
        operator delete(*(void **)v168);
      if ((v164[9] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if ((_BYTE)v151)
        *(_DWORD *)(a1 + 316) &= ~0x200000u;
      if (v148)
        *(_DWORD *)(a1 + 324) &= ~0x40000u;
    }
    v121 = sub_10003BE44();
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v121 + 792))(v121, 11) & 1) == 0)
      *(_DWORD *)(a1 + 324) &= ~0x800u;
    if ((_os_feature_enabled_impl("BluetoothFeatures", "AACPServerConnection") & 1) == 0)
      *(_DWORD *)(a1 + 324) &= ~0x400u;
    v122 = sub_1000438A4();
    if ((sub_1003312CC(v122, 1u) & 1) == 0)
      *(_DWORD *)(a1 + 324) &= ~0x10000u;
    sub_1000438A4();
    if (sub_100331634())
      *(_DWORD *)(a1 + 324) |= 0x20000u;
    if ((_os_feature_enabled_impl("BluetoothFeatures", "AACPTransportForUARP") & 1) == 0)
      *(_DWORD *)(a1 + 324) &= ~0x80000u;
    v123 = sub_10003BE44();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v123 + 240))(v123) & 1) == 0)
      *(_DWORD *)(a1 + 324) &= ~0x100000u;
    v124 = sub_1000438A4();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v124 + 2512))(v124) & 1) == 0)
      *(_DWORD *)(a1 + 324) &= ~0x200000u;
    v125 = sub_1000438A4();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 2520))(v125) & 1) == 0)
      *(_DWORD *)(a1 + 324) &= ~0x400000u;
    sub_10006D81C(&v152);
    v126 = sub_100186504((uint64_t)sub_10049F914, 0);
    sub_10004339C(&v152);
    if (v126)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F6C38();
    }
    else
    {
      sub_10006D81C(&v152);
      v127 = sub_100186514((uint64_t)nullsub_357, 0);
      sub_10004339C(&v152);
      if (v127)
      {
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006F6BD8();
      }
      else
      {
        sub_10006D81C(&v152);
        v129 = sub_100154684((__int16 *)(a1 + 304), &dword_100992CA0);
        sub_10011D850(sub_10049DC98);
        sub_10004339C(&v152);
        if (!v129)
        {
          v147 = 0;
          v146 = 0;
          v130 = sub_100038E50();
          (*(void (**)(uint64_t, unsigned __int8 *, char *, __int16 *))(*(_QWORD *)v130 + 24))(v130, &v147, (char *)&v146 + 1, &v146);
          if (v147)
          {
            sub_10006D81C(&v152);
            sub_10018C8A4(HIBYTE(v146) != 0);
            sub_10004339C(&v152);
          }
          v131 = sub_100027F68();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131))
          {
            v145 = 0;
            v132 = sub_100027F68();
            sub_100091AE8(buf, "Stack");
            sub_100091AE8(v168, "IOTDataCollection");
            (*(void (**)(uint64_t, _BYTE *, _BYTE *, unsigned __int8 *))(*(_QWORD *)v132 + 72))(v132, buf, v168, &v145);
            if (v171 < 0)
              operator delete(*(void **)v168);
            if ((v164[9] & 0x80000000) != 0)
              operator delete(*(void **)buf);
            if (v145)
            {
              sub_10006D81C(&v152);
              nullsub_90(v145, v133);
              sub_10004339C(&v152);
            }
          }
          v134 = sub_100027F68();
          sub_100091AE8(buf, "Stack");
          sub_100091AE8(v168, "PacketAggregation");
          v135 = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, unsigned __int8 *))(*(_QWORD *)v134 + 72))(v134, buf, v168, &v147);
          if (v171 < 0)
            operator delete(*(void **)v168);
          if ((v164[9] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          if (v135)
          {
            sub_1001E4174(v147);
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
              sub_1006F6AFC();
          }
          sub_10049F980();
          sub_100034188((uint64_t)v162);
          v86 = 0;
          *(_BYTE *)(a1 + 540) = v144;
          goto LABEL_208;
        }
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006F6B78();
      }
    }
    sub_10049F74C(a1);
  }
  v86 = 110;
LABEL_208:
  sub_100043728(&v152);
LABEL_209:
  if (SHIBYTE(v161) < 0)
    operator delete(__p[0]);
  sub_100034234((uint64_t)v162);
  return v86;
}

void sub_10049F424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 105) < 0)
    operator delete(*(void **)(v35 - 128));
  if (a35 < 0)
    operator delete(__p);
  sub_100043728(&a19);
  if (a27 < 0)
    operator delete(a22);
  sub_100034234((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_10049F614(void *a1)
{
  uint64_t v1;

  off_1009931B0 = a1;
  xmmword_1009931B8 = xmmword_100741A64;
  *(_QWORD *)((char *)&xmmword_1009931B8 + 14) = 0x101020100000000;
  v1 = sub_100187EC8((void (*)(int))sub_1004AAFDC, (uint64_t)&xmmword_1009931B8);
  if ((_DWORD)v1)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F6EC8();
    off_1009931B0 = 0;
  }
  return v1;
}

void sub_10049F6A4(int a1, __int16 a2, char a3)
{
  NSObject *global_queue;
  _QWORD block[4];
  int v8;
  __int16 v9;
  char v10;

  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004A5B7C;
  block[3] = &unk_100931C98;
  v8 = a1;
  v9 = a2;
  v10 = a3;
  dispatch_async(global_queue, block);
}

void sub_10049F724()
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100931E98);
}

uint64_t sub_10049F74C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint8_t buf[8];
  uint64_t v20;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Terminating core stack", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v20 = 0;
  sub_10003415C((uint64_t)buf, a1 + 208);
  *(_WORD *)(a1 + 276) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  if (*(char *)(a1 + 303) < 0)
  {
    **(_BYTE **)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 280) = 0;
    *(_BYTE *)(a1 + 303) = 0;
  }
  sub_100034264((uint64_t)buf);
  v18 = 0;
  sub_100043758(&v18);
  if (sub_100154DD0(dword_100992CA0) && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F6F28();
  v3 = sub_10004339C(&v18);
  sub_10010B83C(v3, v4, v5, v6, v7, v8, v9, v10, v17);
  dword_1009996B8 = 103;
  byte_1009996BD = 0;
  sub_1000445E0(&stru_100999658);
  sub_1000445E0(&stru_100999688);
  v11 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v11, 256))
  {
    v12 = sub_100038E50();
    sub_1002B43D4(v12 + 248, a1 + 24);
  }
  v13 = sub_100038E50();
  sub_1002B43D4(v13 + 208, a1 + 8);
  v14 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 48))(v14, 0x40000))
  {
    v15 = sub_100038E50();
    sub_1002B43D4(v15 + 688, a1 + 40);
  }
  sub_100043728(&v18);
  sub_100034234((uint64_t)buf);
  return 0;
}

void sub_10049F8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10049F914(char a1)
{
  NSObject *global_queue;
  _QWORD block[4];
  char v4;

  global_queue = dispatch_get_global_queue(2, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004A7FF0;
  block[3] = &unk_100927558;
  v4 = a1;
  dispatch_async(global_queue, block);
}

uint64_t sub_10049F980()
{
  uint64_t v0;
  int v1;
  NSObject *v2;
  uint64_t v3;
  _BYTE *v4;
  void *__p[2];
  char v7;
  unsigned __int8 v8;
  uint8_t buf[8];
  uint64_t v10;
  char v11;

  v8 = 0;
  v0 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "enableLEPowerControl");
  v1 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(_QWORD *)v0 + 72))(v0, buf, __p, &v8);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
  {
    operator delete(*(void **)buf);
    if (!v1)
      goto LABEL_9;
  }
  else if (!v1)
  {
    goto LABEL_9;
  }
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LE Power Control enableLEPowerControl=%d", buf, 8u);
  }
LABEL_9:
  if (sub_100182968())
  {
    if (v8)
      goto LABEL_16;
    *(_QWORD *)buf = *(_QWORD *)((char *)&xmmword_100998F78 + 4);
    buf[4] = BYTE8(xmmword_100998F78) & 0xF9;
    LOBYTE(__p[0]) = 0;
    sub_100043758(__p);
    sub_100182740(buf);
    sub_10004339C(__p);
    goto LABEL_15;
  }
  if (v8)
  {
    v3 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 2304))(v3))
    {
      *(_QWORD *)buf = *(_QWORD *)((char *)&xmmword_100998F78 + 4);
      buf[4] = BYTE8(xmmword_100998F78) | 6;
      LOBYTE(__p[0]) = 0;
      sub_100043758(__p);
      sub_100182740(buf);
      sub_10004339C(__p);
LABEL_15:
      sub_100043728(__p);
    }
  }
LABEL_16:
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100931E98);
  v4 = off_100977A50;
  *(_QWORD *)buf = 0;
  v10 = 0;
  sub_10003415C((uint64_t)buf, (uint64_t)off_100977A50 + 208);
  v4[540] = v1;
  return sub_100034234((uint64_t)buf);
}

void sub_10049FB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_100043728(&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10049FBD8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  int v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  unsigned __int16 v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  NSObject *v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BOOL8 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  _BOOL4 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 v109;
  NSObject *v110;
  uint64_t v111;
  NSObject *v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE v116[112];
  _BYTE v117[112];
  _BYTE v118[112];
  _BYTE v119[112];
  _BYTE v120[112];
  _BYTE v121[104];
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  char v130;
  unsigned int v131;
  int v132;
  unsigned __int8 v133;
  void *__p[2];
  char v135;
  unsigned int v136;
  char v137;
  _QWORD v138[5];
  __int128 __dst;
  uint64_t v140;
  _QWORD v141[2];
  int v142;
  __int128 buf;
  __int128 v144;
  unint64_t v145;

  v142 = 0;
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting up StackManager", (uint8_t *)&buf, 2u);
  }
  v141[0] = 0;
  v141[1] = 0;
  sub_10003415C((uint64_t)v141, a1 + 128);
  v3 = *(_DWORD *)(a1 + 56);
  if (v3)
  {
    if (v3 == 2)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F6F88();
      v4 = 111;
    }
    else
    {
      v5 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "StackManager is already running", (uint8_t *)&buf, 2u);
      }
      v4 = 110;
    }
    goto LABEL_228;
  }
  sub_10049DB58(a1, 2u, 0);
  *(_BYTE *)(a1 + 193) = 0;
  sub_100034264((uint64_t)v141);
  v4 = sub_10049DDB4(a1);
  if ((_DWORD)v4)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F7038();
    sub_100034188((uint64_t)v141);
    sub_10049DB58(a1, 0, 0);
    sub_100034264((uint64_t)v141);
    goto LABEL_228;
  }
  v6 = sub_1000438A4();
  sub_100332258(v6);
  sub_1004A1828((os_unfair_lock_s *)a1);
  sub_100034188((uint64_t)v141);
  sub_10049DB58(a1, 1u, 0);
  *(_BYTE *)(a1 + 192) = 0;
  *(_WORD *)(a1 + 194) = 0;
  *(_BYTE *)(a1 + 196) = 0;
  *(_BYTE *)(a1 + 199) = 0;
  sub_100034264((uint64_t)v141);
  if (*(_BYTE *)(a1 + 193))
  {
    LOBYTE(__p[0]) = 0;
    LOBYTE(v136) = 0;
    LOBYTE(v132) = 0;
    v7 = sub_100038E50();
    if (!(*(unsigned int (**)(uint64_t, void **, unsigned int *, int *))(*(_QWORD *)v7 + 24))(v7, __p, &v136, &v132))(*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 72))(a1, LOBYTE(__p[0]), v136, v132);
    buf = 0uLL;
    *(_QWORD *)&v144 = 0;
    v8 = sub_100038E50();
    if (!(*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v8 + 16))(v8, &buf))
    {
      if (SBYTE7(v144) < 0)
      {
        sub_10003430C(&__dst, (void *)buf, *((unint64_t *)&buf + 1));
      }
      else
      {
        __dst = buf;
        v140 = v144;
      }
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 40))(a1, &__dst);
      if (SHIBYTE(v140) < 0)
        operator delete((void *)__dst);
    }
    if (SBYTE7(v144) < 0)
      operator delete((void *)buf);
  }
  v9 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Done starting up stack", (uint8_t *)&buf, 2u);
  }
  v10 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 408))(v10))
  {
    LOBYTE(buf) = 0;
    sub_100043758(&buf);
    sub_10018C8A4(1);
    sub_100043728(&buf);
  }
  v11 = sub_100038E50();
  sub_100260C8C(v11 + 368, a1 + 16);
  v12 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 104))(v12))
  {
    v13 = sub_100038E50();
    sub_1004AABC8(v13 + 568, a1 + 32);
    LOBYTE(buf) = 0;
    v14 = sub_100038E50();
    if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v14 + 128))(v14, &buf))
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, buf);
  }
  v15 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 112))(v15))
  {
    v16 = sub_100475960();
    v138[0] = _NSConcreteStackBlock;
    v138[1] = 3221225472;
    v138[2] = sub_1004A18A0;
    v138[3] = &unk_100917378;
    v138[4] = a1;
    sub_100023D84(v16, v138);
  }
  if (*(_BYTE *)(a1 + 203))
  {
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_100931F18);
    v17 = sub_1004BA7B4();
    v18 = sub_1004A1950(v17);
    if (v17 == 0.0
      || (v19 = v18,
          +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate"),
          v20 >= v19))
    {
      v22 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Disabling denylist on expiration", (uint8_t *)&buf, 2u);
      }
      sub_1004A1A58(a1, 0);
    }
    else
    {
      LOBYTE(__p[0]) = 0;
      sub_100043758(__p);
      v21 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Re-enabling the denylist mode", (uint8_t *)&buf, 2u);
      }
      *(_BYTE *)(a1 + 203) = 1;
      sub_1004A1E84(1, v19);
      if (qword_100978170 != -1)
        dispatch_once(&qword_100978170, &stru_100931FB8);
      sub_1002E6B9C((uint64_t)off_100978168, *(_BYTE *)(a1 + 203));
      sub_100043728(__p);
    }
  }
  if (qword_100992CA8 != -1)
    dispatch_once(&qword_100992CA8, &stru_100931C78);
  v137 = 0;
  v136 = 0;
  v23 = sub_100027F68();
  sub_100091AE8(&buf, "Device");
  sub_100091AE8(__p, "HDRForcePkt");
  v24 = (*(uint64_t (**)(uint64_t, __int128 *, void **, char *))(*(_QWORD *)v23 + 72))(v23, &buf, __p, &v137);
  if (v135 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v144) < 0)
  {
    operator delete((void *)buf);
    if (!v24)
      goto LABEL_59;
  }
  else if (!v24)
  {
    goto LABEL_59;
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100931E98);
  v25 = off_100977A50;
  buf = 0uLL;
  v26 = sub_10003415C((uint64_t)&buf, (uint64_t)off_100977A50 + 208);
  v25[540] = 1;
  sub_100034234(v26);
LABEL_59:
  v27 = sub_100027F68();
  sub_100091AE8(&buf, "Device");
  sub_100091AE8(__p, "HDRPktTypeMask");
  v28 = (*(uint64_t (**)(uint64_t, __int128 *, void **, unsigned int *))(*(_QWORD *)v27 + 128))(v27, &buf, __p, &v136);
  if (v135 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v144) < 0)
  {
    operator delete((void *)buf);
    if (!v28)
      goto LABEL_68;
  }
  else if (!v28)
  {
    goto LABEL_68;
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100931E98);
  v29 = off_100977A50;
  buf = 0uLL;
  v30 = sub_10003415C((uint64_t)&buf, (uint64_t)off_100977A50 + 208);
  v29[540] = 1;
  sub_100034234(v30);
LABEL_68:
  v133 = 1;
  v31 = sub_100027F68();
  sub_100091AE8(&buf, "Device");
  sub_100091AE8(__p, "EnableHDR");
  v32 = (*(uint64_t (**)(uint64_t, __int128 *, void **, unsigned __int8 *))(*(_QWORD *)v31 + 72))(v31, &buf, __p, &v133);
  if (v135 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v144) < 0)
  {
    operator delete((void *)buf);
    if (!v32)
      goto LABEL_77;
  }
  else if (!v32)
  {
    goto LABEL_77;
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100931E98);
  v33 = off_100977A50;
  buf = 0uLL;
  v34 = sub_10003415C((uint64_t)&buf, (uint64_t)off_100977A50 + 208);
  v33[540] = 1;
  sub_100034234(v34);
LABEL_77:
  v35 = sub_1000438A4();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v35 + 1304))(v35, v133, 1);
  v36 = sub_1000438A4();
  v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 2552))(v36);
  if (v133)
    v38 = v37;
  else
    v38 = 0;
  if (v38 == 1)
  {
    v39 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)&buf = 0x16804000200;
      WORD4(buf) = 1024;
      *(_DWORD *)((char *)&buf + 10) = 1;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Adjust sco hci buffer length bufferSize %d numBuffer %d", (uint8_t *)&buf, 0xEu);
    }
    v40 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v40 + 1352))(v40, 1, 360, 1, 1);
  }
  v41 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v41 + 2912))(v41, 20, 1, 1);
  v42 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 1312))(v42, 1);
  if (v137)
  {
    v43 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Forcing HDR packet type", (uint8_t *)&buf, 2u);
    }
    sub_10018324C(1);
    sub_100183258(v136);
  }
  v44 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 368))(v44, 1);
  if (*(_BYTE *)(a1 + 202))
  {
    if (*(_DWORD *)(sub_1000438A4() + 712) >= 0x7D0u && *(_DWORD *)(sub_1000438A4() + 712) <= 0xF9Fu)
    {
      v45 = sub_1000438A4();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 1272))(v45, 1);
    }
    if (*(_DWORD *)(sub_1000438A4() + 712) && *(_DWORD *)(sub_1000438A4() + 712) <= 0x7CFu)
    {
      if (*(_DWORD *)(sub_1000438A4() + 712) < 0x13u)
      {
        v48 = sub_1000438A4();
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 1272))(v48, 1))
        {
          LOBYTE(buf) = 0;
          sub_100043758(&buf);
          sub_100192D0C();
          sub_10004339C(&buf);
          sub_100043728(&buf);
        }
      }
      else
      {
        v46 = sub_1000438A4();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 1288))(v46, 1);
        v47 = sub_1000438A4();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 1760))(v47, 1);
      }
    }
  }
  if (*(_DWORD *)(sub_1000438A4() + 712) && *(_DWORD *)(sub_1000438A4() + 712) <= 0x7CFu)
  {
    if (*(_DWORD *)(sub_1000438A4() + 712) >= 0x13u)
    {
      v49 = sub_1000438A4();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 1704))(v49, 1);
    }
    v50 = sub_100027F68();
    v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    v52 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 1056))(v52, v51);
  }
  v53 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v53 + 2088))(v53))
  {
    LOBYTE(v129) = 0;
    v131 = 1;
    v132 = 0;
    v54 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v54 + 424))(v54))
      v55 = 5;
    else
      v55 = 1;
    v56 = sub_100027F68();
    sub_100091AE8(&buf, "LE");
    sub_100091AE8(__p, "PowerTagV2ForceHandleEnable");
    (*(void (**)(uint64_t, __int128 *, void **, int *))(*(_QWORD *)v56 + 72))(v56, &buf, __p, &v129);
    if (v135 < 0)
      operator delete(__p[0]);
    if (SBYTE7(v144) < 0)
      operator delete((void *)buf);
    v57 = sub_100027F68();
    sub_100091AE8(&buf, "LE");
    sub_100091AE8(__p, "PowerTagV2ForceHandleValue");
    (*(void (**)(uint64_t, __int128 *, void **, int *))(*(_QWORD *)v57 + 128))(v57, &buf, __p, &v132);
    if (v135 < 0)
      operator delete(__p[0]);
    if (SBYTE7(v144) < 0)
      operator delete((void *)buf);
    v58 = sub_100027F68();
    sub_100091AE8(&buf, "LE");
    sub_100091AE8(__p, "PowerTagV2ForceEnableFeatureSet");
    (*(void (**)(uint64_t, __int128 *, void **, unsigned int *))(*(_QWORD *)v58 + 128))(v58, &buf, __p, &v131);
    if (v135 < 0)
      operator delete(__p[0]);
    if (SBYTE7(v144) < 0)
      operator delete((void *)buf);
    if ((_BYTE)v129)
    {
      v59 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 67109632;
        DWORD1(buf) = v131;
        WORD4(buf) = 1024;
        *(_DWORD *)((char *)&buf + 10) = v132;
        HIWORD(buf) = 1024;
        LODWORD(v144) = v132;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "Force PowerTagV2 %d:  %d (0x%04x)", (uint8_t *)&buf, 0x14u);
      }
      v55 = v131;
      v60 = v132;
      if ((v131 & 4) == 0)
        goto LABEL_130;
    }
    else
    {
      v60 = 0;
      if ((v55 & 4) == 0)
      {
LABEL_130:
        v65 = sub_1000438A4();
        v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v65 + 1736))(v65, v55, 1, v60);
        if (v66)
        {
          v67 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf) = 67109120;
            DWORD1(buf) = v66;
            _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "PowerTag BTCLK V2 error configuring %d ", (uint8_t *)&buf, 8u);
          }
        }
        goto LABEL_133;
      }
    }
    v63 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "PowerTag V2 BTCLK is enable ", (uint8_t *)&buf, 2u);
    }
    v64 = sub_10003BE44();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 872))(v64, 1);
    goto LABEL_130;
  }
  v61 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v61 + 2080))(v61))
  {
    v62 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v62 + 1712))(v62, 1);
  }
LABEL_133:
  if (*(_DWORD *)(sub_1000438A4() + 712) == 15)
  {
    v132 = 0;
    v68 = sub_100027F68();
    sub_100091AE8(&buf, "CoEx");
    sub_100091AE8(__p, "EnableDebugCounters");
    v69 = (*(uint64_t (**)(uint64_t, __int128 *, void **, int *))(*(_QWORD *)v68 + 128))(v68, &buf, __p, &v132);
    if (v132)
      v70 = v69;
    else
      v70 = 0;
    if (v135 < 0)
      operator delete(__p[0]);
    if (SBYTE7(v144) < 0)
      operator delete((void *)buf);
    if (v70)
    {
      v71 = sub_1000438A4();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 1256))(v71, v132);
    }
  }
  v72 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v72 + 2096))(v72))
  {
    v73 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 1720))(v73, 1, 0);
  }
  if (*(_DWORD *)(sub_1000438A4() + 712) < 0x7D0u || *(_DWORD *)(sub_1000438A4() + 712) > 0xF9Fu)
    goto LABEL_162;
  v74 = sub_100027F68();
  sub_100091AE8(&buf, "fw");
  sub_100091AE8(__p, "TraceMode");
  v75 = (*(uint64_t (**)(uint64_t, __int128 *, void **, int *))(*(_QWORD *)v74 + 88))(v74, &buf, __p, &v142);
  if (v135 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v144) < 0)
    operator delete((void *)buf);
  if (v142 >= 0)
    v76 = v75;
  else
    v76 = 0;
  if (v76 == 1 && v142 <= 6)
  {
    v77 = sub_1000438A4();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 1280))(v77, v142);
    v78 = sub_100027F68();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78) & 1) == 0)
    {
      v79 = sub_100027F68();
      v80 = v142 != 0;
LABEL_161:
      (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v79 + 504))(v79, v80);
    }
  }
  else
  {
    v81 = sub_100027F68();
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81))
    {
      v83 = sub_1000438A4();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 1280))(v83, 0);
      v79 = sub_100027F68();
      v80 = 0;
      goto LABEL_161;
    }
    v82 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v82 + 1280))(v82, 6);
  }
LABEL_162:
  v130 = 0;
  v84 = sub_100027F68();
  sub_100091AE8(&buf, "hci");
  sub_100091AE8(__p, "AssertOnFlowErrors");
  (*(void (**)(uint64_t, __int128 *, void **, char *))(*(_QWORD *)v84 + 72))(v84, &buf, __p, &v130);
  if (v135 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v144) < 0)
    operator delete((void *)buf);
  if (v130)
    sub_1001A2440();
  v85 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v85 + 320))(v85))
  {
    v86 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v86 + 1632))(v86, 1, 1);
  }
  v131 = 2;
  v132 = 124;
  v128 = 2;
  v129 = 10;
  v127 = 50;
  v87 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v87 + 680))(v87))
    v131 |= 4u;
  v88 = sub_100027F68();
  sub_100091AE8(&buf, "LE");
  sub_100091AE8(__p, "AElengthAllowed");
  (*(void (**)(uint64_t, __int128 *, void **, int *))(*(_QWORD *)v88 + 128))(v88, &buf, __p, &v132);
  if (v135 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v144) < 0)
    operator delete((void *)buf);
  v89 = sub_100027F68();
  sub_100091AE8(&buf, "LE");
  sub_100091AE8(__p, "AEAuxPhyMask");
  (*(void (**)(uint64_t, __int128 *, void **, unsigned int *))(*(_QWORD *)v89 + 128))(v89, &buf, __p, &v131);
  if (v135 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v144) < 0)
    operator delete((void *)buf);
  v90 = sub_100027F68();
  sub_100091AE8(&buf, "LE");
  sub_100091AE8(__p, "AEMaxAuxOffset");
  (*(void (**)(uint64_t, __int128 *, void **, int *))(*(_QWORD *)v90 + 128))(v90, &buf, __p, &v129);
  if (v135 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v144) < 0)
    operator delete((void *)buf);
  v91 = sub_100027F68();
  sub_100091AE8(&buf, "LE");
  sub_100091AE8(__p, "AEMaxChanins");
  (*(void (**)(uint64_t, __int128 *, void **, int *))(*(_QWORD *)v91 + 128))(v91, &buf, __p, &v128);
  if (v135 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v144) < 0)
    operator delete((void *)buf);
  v92 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v92 + 1016))(v92, 1, (unsigned __int16)v132, v131, (unsigned __int16)v129, v128);
  v93 = sub_100027F68();
  sub_100091AE8(&buf, "LE");
  sub_100091AE8(__p, "AEMaxScanBuffers");
  (*(void (**)(uint64_t, __int128 *, void **, int *))(*(_QWORD *)v93 + 128))(v93, &buf, __p, &v127);
  if (v135 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v144) < 0)
    operator delete((void *)buf);
  v94 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v94 + 1024))(v94, 1, (unsigned __int16)v127, 0);
  v132 = 10;
  v95 = sub_100027F68();
  sub_100091AE8(&buf, "LE");
  sub_100091AE8(__p, "AEMaxAuxOffset");
  (*(void (**)(uint64_t, __int128 *, void **, int *))(*(_QWORD *)v95 + 128))(v95, &buf, __p, &v132);
  if (v135 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v144) < 0)
    operator delete((void *)buf);
  v96 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v96 + 1040))(v96, 1, (unsigned __int16)v132);
  sub_1000438A4();
  v97 = sub_100331028();
  v98 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG);
  if (v97)
  {
    if (v98)
      sub_1006F6FE0();
    v99 = sub_1000438A4();
    *(_DWORD *)&v121[100] = 10000;
    *(_QWORD *)&v121[92] = 0x500000004;
    *(_QWORD *)&v121[84] = 0x300000002;
    *(_QWORD *)&v121[76] = 20;
    *(_QWORD *)&v121[68] = 0xF0000000ALL;
    *(_QWORD *)&v121[60] = 0x50000C350;
    *(_QWORD *)&v121[52] = 171798691870000;
    *(_QWORD *)&v121[44] = 0x3A9800000005;
    *(_QWORD *)&v121[36] = 0x400000003;
    *(_QWORD *)&v121[28] = 0x200000000;
    *(_QWORD *)&v121[20] = 0x3200000028;
    *(_QWORD *)&v121[12] = 0x140000000ALL;
    *(_QWORD *)&v121[4] = 0x5A00000050;
    *(_DWORD *)v121 = 60;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _BYTE, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))(*(_QWORD *)v99 + 3432))(v99, 0, 29, 29, 29, 29, 0, 0, 1929379840, 0, *(_QWORD *)v121, *(_QWORD *)&v121[8], *(_QWORD *)&v121[16], *(_QWORD *)&v121[24], *(_QWORD *)&v121[32], *(_QWORD *)&v121[40], *(_QWORD *)&v121[48], *(_QWORD *)&v121[56], *(_QWORD *)&v121[64],
      *(_QWORD *)&v121[72],
      *(_QWORD *)&v121[80],
      *(_QWORD *)&v121[88],
      *(_QWORD *)&v121[96],
      115);
    v100 = sub_1000438A4();
    LOBYTE(v122) = 115;
    *(_DWORD *)&v116[108] = 10000;
    *(_QWORD *)&v116[100] = 0x500000004;
    *(_QWORD *)&v116[92] = 0x300000002;
    *(_QWORD *)&v116[84] = 20;
    *(_QWORD *)&v116[76] = 0xF0000000ALL;
    *(_QWORD *)&v116[68] = 0x50000C350;
    *(_QWORD *)&v116[60] = 171798691870000;
    *(_QWORD *)&v116[52] = 0x3A9800000005;
    *(_QWORD *)&v116[44] = 0x400000003;
    *(_QWORD *)&v116[36] = 0x200000000;
    *(_QWORD *)&v116[28] = 0x3200000028;
    *(_QWORD *)&v116[20] = 0x140000000ALL;
    *(_QWORD *)&v116[12] = 0x5A00000050;
    *(_QWORD *)&v116[4] = 0x3C00000032;
    v116[0] = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))(*(_QWORD *)v100 + 3432))(v100, 1, 29, 49, 75, 149, 1, 1, 0x101000073000001, *(_QWORD *)v116, *(_QWORD *)&v116[8], *(_QWORD *)&v116[16], *(_QWORD *)&v116[24], *(_QWORD *)&v116[32], *(_QWORD *)&v116[40], *(_QWORD *)&v116[48], *(_QWORD *)&v116[56], *(_QWORD *)&v116[64], *(_QWORD *)&v116[72],
      *(_QWORD *)&v116[80],
      *(_QWORD *)&v116[88],
      *(_QWORD *)&v116[96],
      *(_QWORD *)&v116[104],
      v122);
    v101 = sub_1000438A4();
    LOBYTE(v123) = -123;
    *(_DWORD *)&v117[108] = 10000;
    *(_QWORD *)&v117[100] = 0x500000004;
    *(_QWORD *)&v117[92] = 0x300000002;
    *(_QWORD *)&v117[84] = 20;
    *(_QWORD *)&v117[76] = 0xF0000000ALL;
    *(_QWORD *)&v117[68] = 0x50000C350;
    *(_QWORD *)&v117[60] = 171798691870000;
    *(_QWORD *)&v117[52] = 0x3A9800000005;
    *(_QWORD *)&v117[44] = 0x400000003;
    *(_QWORD *)&v117[36] = 0x200000000;
    *(_QWORD *)&v117[28] = 0x1E00000014;
    *(_QWORD *)&v117[20] = 0xA00000005;
    *(_QWORD *)&v117[12] = 0x5F00000055;
    *(_QWORD *)&v117[4] = 0x4B00000032;
    v117[0] = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))(*(_QWORD *)v101 + 3432))(v101, 2, 49, 75, 115, 163, 1, 1, 0x1010000A3010101, *(_QWORD *)v117, *(_QWORD *)&v117[8], *(_QWORD *)&v117[16], *(_QWORD *)&v117[24], *(_QWORD *)&v117[32], *(_QWORD *)&v117[40], *(_QWORD *)&v117[48], *(_QWORD *)&v117[56], *(_QWORD *)&v117[64], *(_QWORD *)&v117[72],
      *(_QWORD *)&v117[80],
      *(_QWORD *)&v117[88],
      *(_QWORD *)&v117[96],
      *(_QWORD *)&v117[104],
      v123);
    v102 = sub_1000438A4();
    LOBYTE(v124) = -105;
    *(_DWORD *)&v118[108] = 10000;
    *(_QWORD *)&v118[100] = 0x500000004;
    *(_QWORD *)&v118[92] = 0x300000002;
    *(_QWORD *)&v118[84] = 20;
    *(_QWORD *)&v118[76] = 0xF0000000ALL;
    *(_QWORD *)&v118[68] = 0x50000C350;
    *(_QWORD *)&v118[60] = 171798691870000;
    *(_QWORD *)&v118[52] = 0x3A9800000005;
    *(_QWORD *)&v118[44] = 0x400000003;
    *(_QWORD *)&v118[36] = 0x200000000;
    *(_QWORD *)&v118[28] = 0x1000000008;
    *(_QWORD *)&v118[20] = 0x400000002;
    *(_QWORD *)&v118[12] = 0x5F00000055;
    *(_QWORD *)&v118[4] = 0x4B00000032;
    v118[0] = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))(*(_QWORD *)v102 + 3432))(v102, 3, 75, 115, 163, 167, 1, 1, 0x1010000A7010101, *(_QWORD *)v118, *(_QWORD *)&v118[8], *(_QWORD *)&v118[16], *(_QWORD *)&v118[24], *(_QWORD *)&v118[32], *(_QWORD *)&v118[40], *(_QWORD *)&v118[48], *(_QWORD *)&v118[56], *(_QWORD *)&v118[64], *(_QWORD *)&v118[72],
      *(_QWORD *)&v118[80],
      *(_QWORD *)&v118[88],
      *(_QWORD *)&v118[96],
      *(_QWORD *)&v118[104],
      v124);
    v103 = sub_1000438A4();
    LOBYTE(v125) = -105;
    *(_DWORD *)&v119[108] = 10000;
    *(_QWORD *)&v119[100] = 0x500000004;
    *(_QWORD *)&v119[92] = 0x300000002;
    *(_QWORD *)&v119[84] = 20;
    *(_QWORD *)&v119[76] = 0xF0000000ALL;
    *(_QWORD *)&v119[68] = 0x50000C350;
    *(_QWORD *)&v119[60] = 171798691870000;
    *(_QWORD *)&v119[52] = 0x3A9800000005;
    *(_QWORD *)&v119[44] = 0x400000003;
    *(_QWORD *)&v119[36] = 0x200000000;
    *(_QWORD *)&v119[28] = 0x1000000008;
    *(_QWORD *)&v119[20] = 0x400000002;
    *(_QWORD *)&v119[12] = 0x5F00000055;
    *(_QWORD *)&v119[4] = 0x4B00000032;
    v119[0] = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))(*(_QWORD *)v103 + 3432))(v103, 4, 29, 29, 29, 29, 1, 1, 0x1010000A7010101, *(_QWORD *)v119, *(_QWORD *)&v119[8], *(_QWORD *)&v119[16], *(_QWORD *)&v119[24], *(_QWORD *)&v119[32], *(_QWORD *)&v119[40], *(_QWORD *)&v119[48], *(_QWORD *)&v119[56], *(_QWORD *)&v119[64], *(_QWORD *)&v119[72],
      *(_QWORD *)&v119[80],
      *(_QWORD *)&v119[88],
      *(_QWORD *)&v119[96],
      *(_QWORD *)&v119[104],
      v125);
    v104 = sub_1000438A4();
    LOBYTE(v126) = -105;
    *(_DWORD *)&v120[108] = 10000;
    *(_QWORD *)&v120[100] = 0x500000004;
    *(_QWORD *)&v120[92] = 0x300000002;
    *(_QWORD *)&v120[84] = 20;
    *(_QWORD *)&v120[76] = 0xF0000000ALL;
    *(_QWORD *)&v120[68] = 0x50000C350;
    *(_QWORD *)&v120[60] = 171798691870000;
    *(_QWORD *)&v120[52] = 0x3A9800000005;
    *(_QWORD *)&v120[44] = 0x400000003;
    *(_QWORD *)&v120[36] = 0x200000000;
    *(_QWORD *)&v120[28] = 0x3200000032;
    *(_QWORD *)&v120[20] = 0x3200000032;
    *(_QWORD *)&v120[12] = 0x6400000064;
    *(_QWORD *)&v120[4] = 0x6400000064;
    v120[0] = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))(*(_QWORD *)v104 + 3432))(v104, 5, 17, 17, 17, 17, 0, 0, 2801795072, *(_QWORD *)v120, *(_QWORD *)&v120[8], *(_QWORD *)&v120[16], *(_QWORD *)&v120[24], *(_QWORD *)&v120[32], *(_QWORD *)&v120[40], *(_QWORD *)&v120[48], *(_QWORD *)&v120[56], *(_QWORD *)&v120[64], *(_QWORD *)&v120[72],
      *(_QWORD *)&v120[80],
      *(_QWORD *)&v120[88],
      *(_QWORD *)&v120[96],
      *(_QWORD *)&v120[104],
      v126);
  }
  else if (v98)
  {
    sub_1006F700C();
  }
  LOBYTE(v131) = 0;
  v105 = sub_100027F68();
  sub_100091AE8(&buf, "HRB");
  sub_100091AE8(__p, "SwitchToHRB");
  (*(void (**)(uint64_t, __int128 *, void **, unsigned int *))(*(_QWORD *)v105 + 72))(v105, &buf, __p, &v131);
  if (v135 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v144) < 0)
    operator delete((void *)buf);
  sub_100183264(v131);
  v132 = 1;
  v106 = sub_100027F68();
  sub_100091AE8(&buf, "HRB");
  sub_100091AE8(__p, "HRBBand");
  (*(void (**)(uint64_t, __int128 *, void **, int *))(*(_QWORD *)v106 + 128))(v106, &buf, __p, &v132);
  if (v135 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v144) < 0)
    operator delete((void *)buf);
  sub_100183270(v132);
  v107 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v107 + 2616))(v107))
  {
    v145 = 0xFFFF0000FFFF0046;
    buf = xmmword_100741A3C;
    v144 = unk_100741A4C;
    v108 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v108 + 264))(v108))
      v109 = 5;
    else
      v109 = 4;
    v110 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEFAULT, "stackManager sending Apple LE Feature Set Vendor List", (uint8_t *)__p, 2u);
    }
    v111 = sub_1000438A4();
    (*(void (**)(uint64_t, _QWORD, __int128 *))(*(_QWORD *)v111 + 1936))(v111, v109, &buf);
  }
  sub_100034188((uint64_t)v141);
  sub_10049DB58(a1, 1u, 1);
  sub_100034264((uint64_t)v141);
  sub_1004A243C((os_unfair_lock_s *)a1);
  sub_1004A24B4(a1);
  if (*(_DWORD *)(sub_1000438A4() + 712)
    && *(_DWORD *)(sub_1000438A4() + 712) <= 0x7CFu
    && *(_DWORD *)(sub_1000438A4() + 712) == 24)
  {
    v112 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEFAULT, "Disable antenna switch VSE for unsupported platforms!", (uint8_t *)&buf, 2u);
    }
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100931F38);
    v113 = sub_10006D488((uint64_t)off_1009778E0, 1, 1);
    v114 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v114 + 176))(v114, 255, v113)
      && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      sub_1006F6FB4();
    }
  }
  v4 = 0;
LABEL_228:
  sub_100034234((uint64_t)v141);
  return v4;
}

void sub_1004A1684(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100034234(v1 - 152);
  _Unwind_Resume(a1);
}

void sub_1004A1828(os_unfair_lock_s *a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Notifying stack listeners that the stack will start", v3, 2u);
  }
  sub_1004AA400(a1 + 16, &stru_100931D28);
}

uint64_t sub_1004A18A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100931F98);
  sub_1005D458C((uint64_t)off_10097AB00, v1 + 48);
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100931F98);
  result = sub_1005D4868((uint64_t)off_10097AB00);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 128))(v1, 0);
  return result;
}

double sub_1004A1950(double a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  double v8;

  v2 = objc_autoreleasePoolPush();
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a1));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "components:fromDate:", 60, v3));
  objc_msgSend(v5, "setHour:", 5);
  objc_msgSend(v5, "setDay:", (char *)objc_msgSend(v5, "day") + 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "dateFromComponents:", v5));
  objc_msgSend(v6, "timeIntervalSinceReferenceDate");
  v8 = v7;

  objc_autoreleasePoolPop(v2);
  return v8;
}

void sub_1004A1A20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1004A1A58(uint64_t a1, int a2)
{
  uint64_t v3;
  const char *v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  int v9;
  NSObject *v10;
  _BOOL4 v11;
  const char *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  __int128 v19;
  uint64_t v20;

  if (*(unsigned __int8 *)(a1 + 203) == a2)
  {
    v3 = qword_1009997E8;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      return;
    v4 = "disabled";
    if (a2)
      v4 = "enabled";
    LODWORD(v19) = 136315138;
    *(_QWORD *)((char *)&v19 + 4) = v4;
    v5 = "Denylist already %s";
    v6 = v3;
    v7 = 12;
LABEL_28:
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v19, v7);
    return;
  }
  v9 = *(_DWORD *)(a1 + 56);
  v10 = qword_1009997E8;
  v11 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
  if (v9 != 1)
  {
    if (!v11)
      return;
    LOWORD(v19) = 0;
    v5 = "Ignore set denylist mode due to stack not ready";
    v6 = v10;
    v7 = 2;
    goto LABEL_28;
  }
  if (v11)
  {
    v12 = "disabled";
    if (a2)
      v12 = "enabled";
    LODWORD(v19) = 136315138;
    *(_QWORD *)((char *)&v19 + 4) = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "denylist mode %s", (uint8_t *)&v19, 0xCu);
  }
  *(_BYTE *)(a1 + 203) = a2;
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_100931EF8);
  if (sub_10006D828((uint64_t)off_100978128))
  {
    if (a2)
      v13 = 2;
    else
      v13 = 1;
    sub_1004A3188(a1, v13);
  }
  if (*(_BYTE *)(a1 + 203))
  {
    v19 = 0uLL;
    v20 = 0;
    if (qword_100978190 != -1)
      dispatch_once(&qword_100978190, &stru_100931FD8);
    sub_10006A8A0((uint64_t)off_100978188, (void **)&v19);
    v14 = (uint64_t *)v19;
    if ((_QWORD)v19 != *((_QWORD *)&v19 + 1))
    {
      do
      {
        v15 = *v14;
        if (qword_100977A78 != -1)
          dispatch_once(&qword_100977A78, &stru_100931ED8);
        sub_100495A3C((uint64_t)off_100977A70, v15, 1);
        ++v14;
      }
      while (v14 != *((uint64_t **)&v19 + 1));
      v14 = (uint64_t *)v19;
    }
    if (v14)
    {
      *((_QWORD *)&v19 + 1) = v14;
      operator delete(v14);
    }
  }
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_100931EB8);
  sub_1004794D4((uint64_t)off_100977890, 10, 0);
  LOBYTE(v19) = 0;
  sub_100043758(&v19);
  if (*(_BYTE *)(a1 + 203))
  {
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_100931F18);
    +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
    sub_1004BA740(v16);
    +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
    v18 = sub_1004A1950(v17);
    sub_1004A1E84(1, v18);
  }
  else
  {
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_100931F18);
    sub_1004BA740(0.0);
    sub_100183240();
  }
  sub_10004339C(&v19);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100931FB8);
  sub_1002E6B9C((uint64_t)off_100978168, *(_BYTE *)(a1 + 203));
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100931F58);
  sub_100659A54((uint64_t)off_1009778C0, *(_BYTE *)(a1 + 203));
  sub_1004A330C((_BYTE *)a1);
  sub_100043728(&v19);
}

void sub_1004A1E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1004A1E84(int a1, double a2)
{
  xpc_object_t v3;
  double v4;

  if (a1)
  {
    sub_1001831F0();
    v3 = xpc_dictionary_create(0, 0, 0);
    +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
    xpc_dictionary_set_double(v3, XPC_ACTIVITY_DELAY, a2 - v4);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_MIN);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
    xpc_activity_register("com.apple.bluetooth.denylist.autoExpire", v3, &stru_100931E00);
    xpc_release(v3);
  }
  else
  {
    sub_100183240();
  }
}

void sub_1004A1F48(id a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = sub_10034D3CC();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 136))(v1) && sub_1001702EC() != 10)
  {
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100931E98);
    sub_1004A2020();
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100931E98);
    sub_1004A224C();
    v2 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 544))(v2, 1)
      && sub_1001702EC() == 7
      && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
    {
      sub_1006F7064();
    }
  }
}

void sub_1004A2020()
{
  NSObject *v0;
  char *v1;
  NSObject *v2;
  uint8_t v3[16];
  size_t v4;
  unsigned __int16 v5;
  void *v6;
  char __str[1024];

  v6 = 0;
  v5 = 0;
  bzero(__str, 0x400uLL);
  v4 = 1024;
  if (sysctlbyname("kern.bootargs", __str, &v4, 0, 0) || (v1 = strtok(__str, " ")) == 0)
  {
LABEL_2:
    v0 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Load and send calibration data to host controller", v3, 2u);
    }
    if (sub_1004A5EA0(CFSTR("bluetooth-taurus-calibration-bf"), (UInt8 **)&v6, &v5)
      && sub_1004A5EA0(CFSTR("bluetooth-taurus-calibration"), (UInt8 **)&v6, &v5)
      && sub_1004A605C((UInt8 **)&v6, &v5))
    {
      if (sub_10005F864() != 236
        && sub_10005F864() != 259
        && sub_10005F864() != 260)
      {
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
          sub_1006F70BC();
        return;
      }
      sub_1004A628C((uint64_t)&v6, &v5);
    }
    if (sub_1004A6418((char *)v6, v5, 0xE6u)
      && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
    {
      sub_1006F7090();
    }
    if (v6)
      free(v6);
    return;
  }
  while (!strstr(v1, "wifibt-external"))
  {
    v1 = strtok(0, " ");
    if (!v1)
      goto LABEL_2;
  }
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Thunderbolt to PCIe expansion chassis, so skip loading calibration data", v3, 2u);
  }
}

void sub_1004A224C()
{
  NSObject *v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  void *__p[2];
  uint64_t v7;
  uint8_t buf[16];
  void *v9[2];
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  int v13;
  char *v14;

  v14 = 0;
  v13 = 0;
  v11[0] = 0;
  v11[1] = 0;
  v12 = 0;
  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  sub_100091AE8(v9, ".ptb");
  v0 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Load and send regulatory data to host controller", buf, 2u);
  }
  v1 = sub_100038E50();
  if (SHIBYTE(v10) < 0)
  {
    sub_10003430C(__p, v9[0], (unint64_t)v9[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v9;
    v7 = v10;
  }
  v2 = (*(uint64_t (**)(uint64_t, void **, char **, int *, void **))(*(_QWORD *)v1 + 408))(v1, __p, &v14, &v13, v11);
  v3 = v2;
  if (SHIBYTE(v7) < 0)
  {
    operator delete(__p[0]);
    if (v3)
    {
LABEL_8:
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
        sub_1006F7114();
      goto LABEL_19;
    }
  }
  else if (v2)
  {
    goto LABEL_8;
  }
  if (v13 < 251)
  {
    v5 = sub_1000438A4();
    v4 = (*(uint64_t (**)(uint64_t, char *, _QWORD, uint64_t))(*(_QWORD *)v5 + 3616))(v5, v14, (unsigned __int16)v13, 1);
  }
  else
  {
    v4 = sub_1004A6418(v14, (unsigned __int16)v13, 0xCFu);
  }
  if (v4 && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
    sub_1006F70E8();
  if (v14)
    free(v14);
LABEL_19:
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
}

void sub_1004A23F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a14 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

void sub_1004A243C(os_unfair_lock_s *a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Notifying stack listeners that the stack did start", v3, 2u);
  }
  sub_1004AA400(a1 + 16, &stru_100931D48);
}

uint64_t sub_1004A24B4(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 128);
  if ((*(_DWORD *)(a1 + 56) | 2) != 2)
  {
    *(_BYTE *)(a1 + 200) = sub_1004A51B0();
    sub_10006BBEC();
    operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F7140();
  sub_100034234((uint64_t)v3);
  return 111;
}

void sub_1004A2584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A2598(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  pthread_mutex_t *v25[2];
  char v26;
  _QWORD v27[5];
  uint8_t buf[8];
  uint64_t v29;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "StackManager halting stack", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v29 = 0;
  sub_10003415C((uint64_t)buf, a1 + 128);
  v3 = *(_DWORD *)(a1 + 56);
  if (v3)
  {
    if (v3 == 2)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F71E4();
      v4 = 111;
      goto LABEL_36;
    }
    sub_10049DB58(a1, 2u, 0);
    sub_100034264((uint64_t)buf);
    v6 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v25[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Starting event un-registerations", (uint8_t *)v25, 2u);
    }
    v7 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 112))(v7))
    {
      v8 = sub_100475960();
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_1004A2990;
      v27[3] = &unk_100917378;
      v27[4] = a1;
      sub_100023D84(v8, v27);
    }
    v9 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 104))(v9))
    {
      v10 = sub_100038E50();
      sub_1002B43D4(v10 + 568, a1 + 32);
    }
    v11 = sub_100038E50();
    sub_1002B43D4(v11 + 368, a1 + 16);
    v26 = 0;
    sub_100043758(&v26);
    v12 = sub_1001702EC();
    v13 = qword_1009997E8;
    v14 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
    if (v12 == 7)
    {
      if (v14)
      {
        LOWORD(v25[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Hard reset transport...", (uint8_t *)v25, 2u);
      }
      if (sub_10016F8AC())
      {
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006F71B8();
        v4 = 1;
LABEL_35:
        sub_100043728(&v26);
        goto LABEL_36;
      }
    }
    else
    {
      if (v14)
      {
        LOWORD(v25[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Sending HCI reset", (uint8_t *)v25, 2u);
      }
      byte_100999730 = 1;
      sub_10004C9BC(55, sub_1004A29E0, v15, v16, v17, v18, v19, v20, (uint64_t)v25[0]);
      sub_10004339C(&v26);
      v21 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v25[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Waiting for controller reset complete", (uint8_t *)v25, 2u);
      }
      v25[0] = 0;
      v25[1] = 0;
      sub_10003415C((uint64_t)v25, (uint64_t)&unk_1009996F0);
      if (byte_100999730)
        sub_1002A9180(&stru_1009996C0, v25);
      sub_100034234((uint64_t)v25);
    }
    v22 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v25[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Configuring stack to halt", (uint8_t *)v25, 2u);
    }
    sub_10017FDA8();
    v23 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v25[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Halting core stack", (uint8_t *)v25, 2u);
    }
    sub_10016F818();
    sub_10016F808();
    v4 = 0;
    goto LABEL_35;
  }
  v5 = qword_1009997E8;
  v4 = 0;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v25[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "StackManager is already stopped", (uint8_t *)v25, 2u);
    v4 = 0;
  }
LABEL_36:
  sub_100034234((uint64_t)buf);
  return v4;
}

void sub_1004A2954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  sub_100034234((uint64_t)&a9);
  sub_100043728(&a14);
  sub_100034234(v14 - 48);
  _Unwind_Resume(a1);
}

void sub_1004A2990(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100931F98);
  sub_1005D4648((uint64_t)off_10097AB00, v1 + 48);
}

uint64_t sub_1004A29E0()
{
  _QWORD v1[2];

  v1[0] = 0;
  v1[1] = 0;
  sub_10003415C((uint64_t)v1, (uint64_t)&unk_1009996F0);
  byte_100999730 = 0;
  sub_1000445E0(&stru_1009996C0);
  return sub_100034234((uint64_t)v1);
}

void sub_1004A2A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A2A44(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD v24[5];
  uint8_t v25[16];
  uint8_t buf[8];
  uint64_t v27;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "StackManager shutting down", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v27 = 0;
  sub_10003415C((uint64_t)buf, a1 + 128);
  v3 = *(_DWORD *)(a1 + 56);
  if (!v3)
  {
    v5 = qword_1009997E8;
    v4 = 0;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_39;
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "StackManager is already stopped", v25, 2u);
LABEL_38:
    v4 = 0;
    goto LABEL_39;
  }
  if (v3 != 2)
  {
    sub_10049DB58(a1, 2u, 0);
    sub_100034264((uint64_t)buf);
    if (*(_BYTE *)(a1 + 202) && *(_DWORD *)(sub_1000438A4() + 712) && *(_DWORD *)(sub_1000438A4() + 712) <= 0x7CFu)
    {
      v6 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "StackManager preparing for chip power down", v25, 2u);
      }
      if (*(_DWORD *)(sub_1000438A4() + 712) <= 0x12u)
      {
        v7 = sub_1000438A4();
        if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 1272))(v7, 0))
        {
          v25[0] = 0;
          sub_100043758(v25);
          sub_100192D0C();
          sub_10004339C(v25);
          sub_100043728(v25);
        }
      }
    }
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Starting event un-registerations", v25, 2u);
    }
    v9 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 112))(v9))
    {
      v10 = sub_100475960();
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_1004A2EC4;
      v24[3] = &unk_100917378;
      v24[4] = a1;
      sub_100023D84(v10, v24);
    }
    v11 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11))
    {
      v12 = sub_100038E50();
      sub_1002B43D4(v12 + 568, a1 + 32);
    }
    v13 = sub_100038E50();
    sub_1002B43D4(v13 + 368, a1 + 16);
    v14 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Configuring stack to stop", v25, 2u);
    }
    v25[0] = 0;
    sub_100043758(v25);
    sub_10017FD8C();
    sub_10004339C(v25);
    sub_1004A2F14((os_unfair_lock_s *)a1);
    sub_10006D81C(v25);
    byte_1009996BD = 1;
    v22 = sub_100192A88((uint64_t (*)())sub_1004A2F8C, v15, v16, v17, v18, v19, v20, v21);
    sub_10004339C(v25);
    if (v22)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F7270();
      byte_1009996BD = 0;
    }
    else if (sub_1004A2FFC(a1) && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      sub_1006F7210();
    }
    sub_10049F74C(a1);
    sub_10017FB08(0);
    sub_100034188((uint64_t)buf);
    sub_10049DB58(a1, 0, 0);
    *(_BYTE *)(a1 + 192) = 0;
    *(_WORD *)(a1 + 194) = 0;
    *(_BYTE *)(a1 + 196) = 0;
    *(_BYTE *)(a1 + 199) = 0;
    *(_BYTE *)(a1 + 203) = 0;
    sub_100034264((uint64_t)buf);
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_100931FB8);
    sub_1002E6B9C((uint64_t)off_100978168, *(_BYTE *)(a1 + 203));
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_100931F18);
    sub_1004BA740(0.0);
    sub_10011D988();
    sub_1004A3110((os_unfair_lock_s *)a1);
    sub_100043728(v25);
    goto LABEL_38;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F6F88();
  v4 = 111;
LABEL_39:
  sub_100034234((uint64_t)buf);
  return v4;
}

void sub_1004A2E88(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100034234(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_1004A2EC4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100931F98);
  sub_1005D4648((uint64_t)off_10097AB00, v1 + 48);
}

void sub_1004A2F14(os_unfair_lock_s *a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Notifying stack listeners that the stack will stop", v3, 2u);
  }
  sub_1004AA400(a1 + 16, &stru_100931D68);
}

uint64_t sub_1004A2F8C(int a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, (uint64_t)&unk_100999618);
  byte_1009996BD = 0;
  dword_1009996B8 = a1;
  sub_1000445E0(&stru_100999658);
  return sub_100034234((uint64_t)v3);
}

void sub_1004A2FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A2FFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  void *__p[2];
  uint64_t v7;
  pthread_mutex_t *v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, (uint64_t)&unk_100999618);
  if (byte_1009996BD && !sub_100043714(&stru_100999658, v8, 0x3A98uLL))
  {
    if (sub_100065478())
    {
      v4 = sub_100065478();
      __p[0] = 0;
      __p[1] = 0;
      v7 = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD, void **))(*(_QWORD *)v4 + 104))(v4, 4, 0, __p);
      if (SHIBYTE(v7) < 0)
        operator delete(__p[0]);
    }
    sub_100091AE8(&v5, "");
    sub_1004A37B0(a1, 9500, &v5);
  }
  v2 = dword_1009996B8;
  sub_100034234((uint64_t)v8);
  return v2;
}

void sub_1004A30D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  sub_100034234(v20 - 32);
  _Unwind_Resume(a1);
}

void sub_1004A3110(os_unfair_lock_s *a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Notifying stack listeners that the stack did stop", v3, 2u);
  }
  sub_1004AA400(a1 + 16, &stru_100931D88);
}

uint64_t sub_1004A3188(uint64_t a1, int a2)
{
  NSObject *v4;
  const __CFString *v5;
  NSObject *v6;
  _QWORD v8[2];
  uint8_t buf[4];
  int v10;
  __int16 v11;
  int v12;

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 472);
  if (*(_DWORD *)(a1 + 536) == a2)
  {
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      v10 = a2;
      v11 = 1024;
      v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Not writing default airplane mode grant list state. As current state (%d) == new state (%d)", buf, 0xEu);
    }
  }
  else
  {
    if (a2 == 2)
      v5 = CFSTR("on");
    else
      v5 = 0;
    *(_DWORD *)(a1 + 536) = a2;
    v6 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Write default airplane mode grant list state: %d to CFPrefs", buf, 8u);
    }
    CFPreferencesSetAppValue(CFSTR("defaultAirplaneModeDenylistState"), v5, CFSTR("com.apple.BTServer"));
    CFPreferencesAppSynchronize(CFSTR("com.apple.BTServer"));
  }
  return sub_100034234((uint64_t)v8);
}

void sub_1004A32F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A330C(_BYTE *a1)
{
  BOOL v2;
  BOOL v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, (uint64_t)(a1 + 128));
  if (a1[60])
  {
    if (qword_100977898 != -1)
      dispatch_once(&qword_100977898, &stru_100931EB8);
    v2 = sub_10047A0B0((uint64_t)off_100977890);
    if (a1[203])
      v3 = 0;
    else
      v3 = v2;
    a1[197] = v3;
    sub_10006BBEC();
    operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F72D0();
  sub_100034234((uint64_t)v5);
  return 111;
}

void sub_1004A3410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A3424(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 128);
  if (*(_BYTE *)(a1 + 60))
  {
    sub_100034264((uint64_t)v8);
    v7[0] = 0;
    v7[1] = 0;
    sub_10003415C((uint64_t)v7, a1 + 208);
    v4 = *(_DWORD *)(a1 + 272);
    *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 276);
    *(_DWORD *)a2 = v4;
    sub_100034234((uint64_t)v7);
    v5 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F734C();
    v5 = 111;
  }
  sub_100034234((uint64_t)v8);
  return v5;
}

void sub_1004A34D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A34EC(uint64_t a1, std::string *a2)
{
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 128);
  if (*(_BYTE *)(a1 + 60))
  {
    sub_100034264((uint64_t)v7);
    v6[0] = 0;
    v6[1] = 0;
    sub_10003415C((uint64_t)v6, a1 + 208);
    std::string::operator=(a2, (const std::string *)(a1 + 280));
    sub_100034234((uint64_t)v6);
    v4 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F734C();
    v4 = 111;
  }
  sub_100034234((uint64_t)v7);
  return v4;
}

void sub_1004A3598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100034234((uint64_t)&a9);
  sub_100034234((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A35C0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  result = a2;
  if ((int)a2 > 733)
  {
    if ((int)a2 <= 1338)
    {
      if ((int)a2 > 924)
      {
        switch((_DWORD)a2)
        {
          case 0x39D:
            return 118;
          case 0x4C1:
            return 323;
          case 0x536:
            return 334;
        }
      }
      else
      {
        switch((_DWORD)a2)
        {
          case 0x2DE:
            return 327;
          case 0x340:
            return 332;
          case 0x342:
            return 333;
        }
      }
    }
    else if ((int)a2 <= 2042)
    {
      switch((_DWORD)a2)
      {
        case 0x53B:
          return 310;
        case 0x586:
          return 181;
        case 0x716:
          return 319;
      }
    }
    else if ((int)a2 > 3311)
    {
      if ((_DWORD)a2 == 3312)
        return 317;
      if ((_DWORD)a2 == 5014)
        return 320;
    }
    else
    {
      if ((_DWORD)a2 == 2043)
        return 318;
      if ((_DWORD)a2 == 2604)
        return 326;
    }
    return (a3 + a2);
  }
  if ((int)a2 <= 557)
  {
    if ((int)a2 > 149)
    {
      switch((_DWORD)a2)
      {
        case 0x96:
          return 322;
        case 0x97:
          return 324;
        case 0x1B5:
          return 331;
      }
    }
    else
    {
      switch((_DWORD)a2)
      {
        case 0:
          return result;
        case 0x70:
          return 316;
        case 0x7A:
          return 312;
      }
    }
    return (a3 + a2);
  }
  switch((int)a2)
  {
    case 704:
      return 329;
    case 705:
      return 158;
    case 706:
      return 151;
    case 707:
    case 709:
    case 710:
    case 712:
    case 713:
    case 715:
    case 717:
    case 718:
    case 719:
    case 720:
    case 721:
    case 722:
      return (a3 + a2);
    case 708:
      return 328;
    case 711:
      return 314;
    case 714:
    case 724:
      return 162;
    case 716:
      return 330;
    case 723:
      return 166;
    default:
      if ((_DWORD)a2 == 558)
      {
        result = 321;
      }
      else
      {
        if ((_DWORD)a2 != 559)
          return (a3 + a2);
        result = 325;
      }
      break;
  }
  return result;
}

void sub_1004A37B0(uint64_t a1, int a2, __int128 *a3)
{
  NSObject *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD block[5];
  __int128 v7;
  uint64_t v8;
  int v9;
  uint8_t buf[4];
  int v11;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1004A78E8;
  block[3] = &unk_100931CD8;
  block[4] = a1;
  v9 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003430C(&v7, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    v8 = *((_QWORD *)a3 + 2);
  }
  if (qword_1009931A8 != -1)
    dispatch_once(&qword_1009931A8, block);
  sleep(0x384u);
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    v11 = 15;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "We've been sleeping for %d minutes during a coredump, restarting", buf, 8u);
  }
  v4 = sub_100027F68();
  sub_100091AE8(&v5, "");
  sub_1005756F0(v4, 3706, &v5, 1);
}

void sub_1004A38E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_1004A391C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  _QWORD v5[4];
  char v6;

  v4 = sub_10006BBEC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1004A397C;
  v5[3] = &unk_100927558;
  v6 = a3;
  sub_100041A34(v4, v5);
}

void sub_1004A397C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v5;

  if (sub_100065478())
  {
    v2 = sub_100065478();
    v3 = *(unsigned __int8 *)(a1 + 32);
    __p[0] = 0;
    __p[1] = 0;
    v5 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v2 + 104))(v2, 2, v3, __p);
    if (SHIBYTE(v5) < 0)
      operator delete(__p[0]);
  }
}

void sub_1004A39DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1004A39F8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  if (a2 == 1)
  {
    if (qword_10097AA70 != -1)
      dispatch_once(&qword_10097AA70, &stru_100931FF8);
    v3 = qword_10097AA68;
    sub_100091AE8(v6, "TransportError");
    sub_100091AE8(__p, "TransportErrorDeviceOfflineError");
    sub_10047C59C(0.0, v3, (uint64_t *)v6, (uint64_t *)__p);
  }
  else
  {
    if (a2)
      return;
    if (qword_10097AA70 != -1)
      dispatch_once(&qword_10097AA70, &stru_100931FF8);
    v2 = qword_10097AA68;
    sub_100091AE8(v6, "TransportError");
    sub_100091AE8(__p, "TransportErrorNoMemError");
    sub_10047C59C(0.0, v2, (uint64_t *)v6, (uint64_t *)__p);
  }
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1004A3B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1004A3B4C(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;

  snprintf(byte_100992CB0, 0x200uLL, "AppleBT Device Error (Recovery)\n Code: %llu\n Reason: %s\n", a3, a4);
  snprintf(byte_100992EB0, 0x200uLL, "AppleBT Device Error (Recovery) Code: %llu Reason: %s", a3, a4);
  qword_10097BA60 = (uint64_t)byte_100992CB0;
  qword_10097BA90 = a3;
  if (sub_100065478())
  {
    v7 = sub_100065478();
    sub_100091AE8(__p, a4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v7 + 104))(v7, a2, a3, __p);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  if (qword_10097AA70 != -1)
    dispatch_once(&qword_10097AA70, &stru_100931FF8);
  v8 = qword_10097AA68;
  sub_100091AE8(__p, "FWErrorDeviceError");
  sub_100091AE8(v9, a4);
  sub_10047C59C(0.0, v8, (uint64_t *)__p, (uint64_t *)v9);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_1004A3C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1004A3CCC(uint64_t a1, int a2, int a3, uint64_t a4)
{
  _QWORD v4[5];
  int v5;
  int v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1004A3D3C;
  v4[3] = &unk_100918090;
  v5 = a2;
  v6 = a3;
  v4[4] = a4;
  if (qword_1009930B0 != -1)
    dispatch_once(&qword_1009930B0, v4);
}

void sub_1004A3D3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *__p[2];
  char v6;

  if (sub_100065478())
  {
    v2 = sub_100065478();
    v3 = *(unsigned int *)(a1 + 40);
    v4 = *(unsigned int *)(a1 + 44);
    sub_100091AE8(__p, *(char **)(a1 + 32));
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v2 + 104))(v2, v3, v4, __p);
    if (v6 < 0)
      operator delete(__p[0]);
  }
}

void sub_1004A3DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004A3DD0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100931E98);
  result = sub_1004A3E48((uint64_t)off_100977A50);
  if ((_DWORD)result)
  {
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 100;
    v3 = sub_10006BBEC();
    return sub_10006BB10(v3, (_BYTE *)a1);
  }
  return result;
}

uint64_t sub_1004A3E48(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  int v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD v18[2];
  uint8_t buf[4];
  const char *v20;

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 128);
  v2 = *(_DWORD *)(a1 + 56);
  if (v2 != 2)
  {
    if (!v2)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F73F4();
      sub_100034264((uint64_t)v18);
      if (qword_100977898 != -1)
        dispatch_once(&qword_100977898, &stru_100931EB8);
      v3 = 111;
      goto LABEL_8;
    }
    if (!*(_BYTE *)(a1 + 192))
    {
      v8 = *(unsigned __int8 *)(a1 + 196);
      if (v8 != *(unsigned __int8 *)(a1 + 197))
      {
        buf[0] = 0;
        sub_100043758(buf);
        v17 = sub_100188A78(sub_1004A432C, 2 * *(unsigned __int8 *)(a1 + 197), v11, v12, v13, v14, v15, v16);
        sub_10004339C(buf);
        if (v17)
        {
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
            sub_1006F7378();
          sub_100034264((uint64_t)v18);
          if (qword_100977898 != -1)
            dispatch_once(&qword_100977898, &stru_100931EB8);
          sub_1004794D4((uint64_t)off_100977890, 2, 1);
        }
        else
        {
          *(_BYTE *)(a1 + 192) = 1;
          *(_BYTE *)(a1 + 198) = *(_BYTE *)(a1 + 197);
        }
        sub_100043728(buf);
        goto LABEL_9;
      }
      v9 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v10 = "discoverable";
        if (!v8)
          v10 = "not discoverable";
        *(_DWORD *)buf = 136446210;
        v20 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Local device state is already %{public}s", buf, 0xCu);
      }
      sub_100034264((uint64_t)v18);
      if (qword_100977898 != -1)
        dispatch_once(&qword_100977898, &stru_100931EB8);
      if (*(_BYTE *)(a1 + 196))
        v3 = 122;
      else
        v3 = 123;
LABEL_8:
      sub_1004794D4((uint64_t)off_100977890, 2, v3);
LABEL_9:
      v4 = 1;
      goto LABEL_15;
    }
  }
  v5 = qword_1009997E8;
  v4 = 0;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = "busy";
    if (v2 == 2)
      v6 = "in flux";
    *(_DWORD *)buf = 136446210;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Delaying discoverability change event as stack is %{public}s", buf, 0xCu);
    v4 = 0;
  }
LABEL_15:
  sub_100034234((uint64_t)v18);
  return v4;
}

void sub_1004A4134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A4164(uint64_t a1, _BYTE *a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 128);
  *a2 = *(_BYTE *)(a1 + 196);
  sub_100034234((uint64_t)v5);
  return 0;
}

uint64_t sub_1004A41B0(_BYTE *a1, int a2)
{
  int v4;
  NSObject *v5;
  const char *v6;
  _QWORD v8[2];
  uint8_t buf[4];
  const char *v10;

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, (uint64_t)(a1 + 128));
  if (a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F7420();
  }
  else
  {
    v4 = a1[198];
    a1[196] = v4;
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = "discoverable";
      if (!v4)
        v6 = "not discoverable";
      *(_DWORD *)buf = 136446210;
      v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Local device is now %{public}s", buf, 0xCu);
    }
  }
  a1[192] = 0;
  sub_100034264((uint64_t)v8);
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_100931EB8);
  sub_1004794D4((uint64_t)off_100977890, 2, a2 != 0);
  return sub_100034234((uint64_t)v8);
}

void sub_1004A4310(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1004A432C(int a1)
{
  uint64_t v2;
  _QWORD v3[4];
  int v4;

  v2 = sub_10006BBEC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1004AB3E4;
  v3[3] = &unk_100918130;
  v4 = a1;
  sub_100041A34(v2, v3);
}

uint64_t sub_1004A438C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 128);
  if (*(_BYTE *)(a1 + 60) && sub_100187EB8() >= 4)
  {
    sub_1004A4470();
    sub_100034264((uint64_t)v9);
    v8 = 0;
    sub_100043758(&v8);
    if (sub_100192AFC((uint64_t (*)())sub_1004A50F8, 1u, (uint64_t)byte_1009930B8, v2, v3, v4, v5, v6)&& os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      sub_1006F749C();
    }
    sub_100043728(&v8);
  }
  return sub_100034234((uint64_t)v9);
}

void sub_1004A4448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
  sub_100043728(&a13);
  sub_100034234((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_1004A4470()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  NSObject *v21;
  uint64_t v22;
  int v23;
  NSObject *v24;
  uint64_t v25;
  int v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  NSObject *v32;
  uint64_t v33;
  int v34;
  int v35;
  NSObject *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t i;
  NSObject *v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t j;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  int v60;
  uint64_t v61;
  int v62;
  NSObject *v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  NSObject *v70;
  int v71;
  unsigned int v72;
  int v73;
  int v74;
  int v75;
  NSObject *v76;
  NSObject *v77;
  char v78;
  char v79;
  char v80;
  _WORD __n[5];
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  uint8_t buf[16];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;

  bzero(byte_1009930B8, dword_1009931D0);
  v0 = strlen("iOS");
  byte_1009930B8[0] = v0 + 1;
  byte_1009930B9 = 9;
  v1 = (v0 + 1);
  memcpy(&unk_1009930BA, "iOS", v1 - 1);
  v2 = v1 + 1;
  dword_1009931D0 = v2;
  LOBYTE(__n[0]) = 0;
  v80 = 0;
  v3 = sub_100027F68();
  sub_100091AE8(buf, "WiAP");
  sub_100091AE8(&__n[1], "enableSink");
  (*(void (**)(uint64_t, uint8_t *, _WORD *, _WORD *))(*(_QWORD *)v3 + 72))(v3, buf, &__n[1], __n);
  if (SBYTE1(v87) < 0)
    operator delete(*(void **)&__n[1]);
  if (SBYTE7(v89) < 0)
    operator delete(*(void **)buf);
  if (LOBYTE(__n[0]))
  {
    v4 = sub_100027F68();
    sub_100091AE8(buf, "CarPlay");
    sub_100091AE8(&__n[1], "enableLeCarPlay");
    (*(void (**)(uint64_t, uint8_t *, _WORD *, char *))(*(_QWORD *)v4 + 72))(v4, buf, &__n[1], &v80);
    if (SBYTE1(v87) < 0)
      operator delete(*(void **)&__n[1]);
    if (SBYTE7(v89) < 0)
      operator delete(*(void **)buf);
  }
  v5 = dword_1009931D0;
  *(_DWORD *)&byte_1009930B8[dword_1009931D0] = 301990656;
  dword_1009931D0 = v5 + 4;
  v6 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, 1))
  {
    v7 = dword_1009931D0;
    *(_WORD *)&byte_1009930B8[dword_1009931D0] = 4383;
    dword_1009931D0 = v7 + 2;
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Advertising HFP AG", buf, 2u);
    }
  }
  v9 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(v9, 2))
  {
    v10 = dword_1009931D0;
    *(_WORD *)&byte_1009930B8[dword_1009931D0] = 4399;
    dword_1009931D0 = v10 + 2;
    v11 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Advertising PBAP Server", buf, 2u);
    }
  }
  v12 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v12, 16))
  {
    v13 = dword_1009931D0;
    *(_WORD *)&byte_1009930B8[dword_1009931D0] = 4362;
    dword_1009931D0 = v13 + 2;
    v14 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Advertising A2DP Source", buf, 2u);
    }
  }
  v15 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 48))(v15, 8))
  {
    v16 = dword_1009931D0;
    *(_WORD *)&byte_1009930B8[dword_1009931D0] = 4364;
    dword_1009931D0 = v16 + 2;
    v17 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Advertising AVRCP Target", buf, 2u);
    }
  }
  v18 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 48))(v18, 256))
  {
    LOBYTE(__n[1]) = 0;
    v79 = 0;
    v78 = 0;
    v19 = sub_100038E50();
    (*(void (**)(uint64_t, _WORD *, char *, char *))(*(_QWORD *)v19 + 24))(v19, &__n[1], &v79, &v78);
    if (LOBYTE(__n[1]))
    {
      v20 = dword_1009931D0;
      *(_WORD *)&byte_1009930B8[dword_1009931D0] = 4374;
      dword_1009931D0 = v20 + 2;
      v21 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Advertising PAN-NAP", buf, 2u);
      }
    }
  }
  v22 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 48))(v22, 2048))
  {
    if (qword_100977898 != -1)
      dispatch_once(&qword_100977898, &stru_100931EB8);
    if (sub_100477FC0((uint64_t)off_100977890))
    {
      v23 = dword_1009931D0;
      *(_WORD *)&byte_1009930B8[dword_1009931D0] = 4373;
      dword_1009931D0 = v23 + 2;
      v24 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Advertising PAN-U", buf, 2u);
      }
    }
  }
  v25 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 48))(v25, 512))
  {
    v26 = dword_1009931D0;
    *(_WORD *)&byte_1009930B8[dword_1009931D0] = 4402;
    dword_1009931D0 = v26 + 2;
    v27 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Advertising MAP Server", buf, 2u);
    }
  }
  v79 = 0;
  v28 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28))
  {
    v29 = sub_100027F68();
    sub_100091AE8(buf, "CATT");
    sub_100091AE8(&__n[1], "DisableSdp");
    (*(void (**)(uint64_t, uint8_t *, _WORD *, char *))(*(_QWORD *)v29 + 72))(v29, buf, &__n[1], &v79);
    if (SBYTE1(v87) < 0)
      operator delete(*(void **)&__n[1]);
    if (SBYTE7(v89) < 0)
      operator delete(*(void **)buf);
  }
  if (!v79)
  {
    v30 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 48))(v30, 0x100000))
    {
      v31 = dword_1009931D0;
      *(_WORD *)&byte_1009930B8[dword_1009931D0] = 6145;
      dword_1009931D0 = v31 + 2;
      v32 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Advertising GATT Source", buf, 2u);
      }
    }
  }
  v33 = sub_10003BE44();
  v34 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 48))(v33, 0x20000);
  v35 = dword_1009931D0;
  if (v34)
  {
    if (LOBYTE(__n[0]))
    {
      if (v80)
      {
        byte_1009930B8[dword_1009931D0] = -108;
        byte_1009930B8[v35 + 1] = -4;
        v35 += 2;
        dword_1009931D0 = v35;
        v36 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Advertising LE CarPlay", buf, 2u);
          v35 = dword_1009931D0;
        }
      }
    }
  }
  byte_1009930B8[v2] = v35 - v0 - 3;
  *(_DWORD *)&byte_1009930B8[v35] = 117441793;
  dword_1009931D0 = v35 + 4;
  v37 = sub_10003BE44();
  v38 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 48))(v37, 128);
  if (LOBYTE(__n[0]))
    v39 = 0;
  else
    v39 = v38;
  if (v39 == 1)
  {
    v78 = 0;
    v40 = sub_100027F68();
    sub_100091AE8(buf, "IAP");
    sub_100091AE8(&__n[1], "enableIAP");
    (*(void (**)(uint64_t, uint8_t *, _WORD *, char *))(*(_QWORD *)v40 + 72))(v40, buf, &__n[1], &v78);
    if (SBYTE1(v87) < 0)
      operator delete(*(void **)&__n[1]);
    if (SBYTE7(v89) < 0)
      operator delete(*(void **)buf);
    if (v78 || (v41 = sub_10003BE44(), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 384))(v41) & 1) == 0))
    {
      v42 = dword_1009931D0;
      v43 = &dword_10000000C + 3;
      v44 = dword_1009931D0;
      do
        byte_1009930B8[v44++] = byte_100741A7A[v43--];
      while (v43 != -1);
      v45 = v42 + 16;
      dword_1009931D0 = v42 + 16;
      for (i = &dword_10000000C + 3; i != -1; --i)
        byte_1009930B8[v45++] = byte_100741A8A[i];
      dword_1009931D0 = v42 + 32;
      v47 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "Advertising WiAP", buf, 2u);
      }
    }
  }
  v48 = sub_10003BE44();
  v49 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 48))(v48, 0x20000);
  if (LOBYTE(__n[0]))
    v50 = v49;
  else
    v50 = 0;
  if (v50 == 1)
  {
    v51 = dword_1009931D0;
    v52 = &dword_10000000C + 3;
    v53 = dword_1009931D0;
    do
      byte_1009930B8[v53++] = byte_100741A9A[v52--];
    while (v52 != -1);
    v54 = v51 + 16;
    dword_1009931D0 = v51 + 16;
    for (j = &dword_10000000C + 3; j != -1; --j)
      byte_1009930B8[v54++] = byte_100741AAA[j];
    dword_1009931D0 = v51 + 32;
    v56 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "Advertising WiAP Sink and Classic CarPlay", buf, 2u);
    }
  }
  v57 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 48))(v57, 0x40000))
  {
    LOBYTE(__n[1]) = 0;
    v58 = sub_100038E50();
    if (!(*(unsigned int (**)(uint64_t, _WORD *))(*(_QWORD *)v58 + 144))(v58, &__n[1])
      && LOBYTE(__n[1]) != 0)
    {
      v60 = dword_1009931D0;
      v61 = &dword_10000000C + 3;
      v62 = dword_1009931D0;
      do
        byte_1009930B8[v62++] = byte_100741ABA[v61--];
      while (v61 != -1);
      dword_1009931D0 = v60 + 16;
      v63 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_INFO, "Advertising  CarPlay Gateway", buf, 2u);
      }
    }
  }
  v64 = dword_1009931D0;
  byte_1009930B8[v35 + 2] = dword_1009931D0 - v35 - 3;
  v118 = 0u;
  v119 = 0u;
  v116 = 0u;
  v117 = 0u;
  v114 = 0u;
  v115 = 0u;
  v112 = 0u;
  v113 = 0u;
  v110 = 0u;
  v111 = 0u;
  v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  v107 = 0u;
  v104 = 0u;
  v105 = 0u;
  v102 = 0u;
  v103 = 0u;
  v100 = 0u;
  v101 = 0u;
  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  v90 = 0u;
  v91 = 0u;
  *(_OWORD *)buf = 0u;
  v89 = 0u;
  __n[0] = 0;
  *(_DWORD *)&byte_1009930B8[v64] = 1275133696;
  dword_1009931D0 = v64 + 4;
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_100931EB8);
  v65 = sub_100477EF8((uint64_t)off_100977890, (uint64_t)buf, __n);
  v66 = __n[0];
  if (__n[0])
    v67 = v65;
  else
    v67 = 0;
  if (v67 == 1)
  {
    v68 = dword_1009931D0;
    v69 = dword_1009931D0 + __n[0];
    if (v69 > 240)
    {
      v70 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        *(_QWORD *)&__n[1] = __PAIR64__(v66, 67109888);
        v82 = 1024;
        v83 = v68;
        v84 = 1024;
        v85 = v69;
        v86 = 1024;
        v87 = 240;
        _os_log_error_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "EIR data length: %d + constEirLen: %d = %d > %d", (uint8_t *)&__n[1], 0x1Au);
      }
    }
    else
    {
      memcpy(&byte_1009930B8[dword_1009931D0], buf, __n[0]);
      dword_1009931D0 = v69;
    }
  }
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_100931ED8);
  v71 = sub_10049B9C4((uint64_t)off_100977A70, (char *)buf, __n);
  v72 = __n[0];
  if (__n[0])
    v73 = v71;
  else
    v73 = 0;
  v74 = dword_1009931D0;
  if (v73 != 1)
    goto LABEL_103;
  v75 = dword_1009931D0 + __n[0];
  if (v75 <= 240)
  {
    memcpy(&byte_1009930B8[dword_1009931D0], buf, __n[0]);
    dword_1009931D0 = v75;
    goto LABEL_104;
  }
  v76 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    *(_QWORD *)&__n[1] = __PAIR64__(v72, 67109888);
    v82 = 1024;
    v83 = v74;
    v84 = 1024;
    v85 = v75;
    v86 = 1024;
    v87 = 240;
    _os_log_error_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "Service specific EIR data length: %d + constEirLen: %d = %d > %d", (uint8_t *)&__n[1], 0x1Au);
    v75 = dword_1009931D0;
  }
  else
  {
LABEL_103:
    v75 = v74;
  }
LABEL_104:
  byte_1009930B8[v64] = v75 + ~(_BYTE)v64;
  if (v75 >= 240)
  {
    v77 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006F74FC(v77);
  }
}

void sub_1004A50A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_1004A50F8(int a1)
{
  if (a1)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F7578();
  }
}

uint64_t sub_1004A5144(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[5];

  v2 = sub_10006BBEC();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1004A51A8;
  v4[3] = &unk_100917378;
  v4[4] = a1;
  sub_100041A34(v2, v4);
  return 0;
}

uint64_t sub_1004A51A8(uint64_t a1)
{
  return sub_1004A438C(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1004A51B0()
{
  _BOOL4 v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_100932018);
  sub_10006CA88((uint64_t)off_100978148, &v4);
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_100931EB8);
  v0 = sub_100479488((uint64_t)off_100977890);
  v1 = v4;
  v2 = v5;
  if (v4)
  {
    v5 = v4;
    operator delete(v4);
  }
  return v1 != v2 || v0;
}

void sub_1004A526C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004A5288(uint64_t a1, _BYTE *a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 128);
  *a2 = *(_BYTE *)(a1 + 199);
  sub_100034234((uint64_t)v5);
  return 0;
}

uint64_t sub_1004A52D4(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  const char *v7;
  _QWORD v9[2];
  uint8_t buf[4];
  const char *v11;

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 128);
  if (a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F75D8();
  }
  else
  {
    *(_BYTE *)(a1 + 199) = a3;
    v6 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = "not connectable";
      if (a3)
        v7 = "connectable";
      *(_DWORD *)buf = 136446210;
      v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Local device is now %{public}s", buf, 0xCu);
    }
  }
  *(_BYTE *)(a1 + 192) = 0;
  sub_100034264((uint64_t)v9);
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_100931EB8);
  sub_1004794D4((uint64_t)off_100977890, 3, a2 != 0);
  return sub_100034234((uint64_t)v9);
}

void sub_1004A5434(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004A5450(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  int v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD v18[2];
  uint8_t buf[4];
  const char *v20;

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 128);
  v2 = *(_DWORD *)(a1 + 56);
  if (v2 != 2)
  {
    if (!v2)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F76D0();
      sub_100034264((uint64_t)v18);
      if (qword_100977898 != -1)
        dispatch_once(&qword_100977898, &stru_100931EB8);
      v3 = 111;
      goto LABEL_8;
    }
    if (!*(_BYTE *)(a1 + 192))
    {
      v8 = *(unsigned __int8 *)(a1 + 199);
      if (v8 != *(unsigned __int8 *)(a1 + 200))
      {
        buf[0] = 0;
        sub_100043758(buf);
        v17 = sub_100188E28((void (*)(int))sub_1004A5760, *(unsigned __int8 *)(a1 + 200), v11, v12, v13, v14, v15, v16);
        sub_10004339C(buf);
        if (v17)
        {
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
            sub_1006F7654();
          sub_100034264((uint64_t)v18);
          if (qword_100977898 != -1)
            dispatch_once(&qword_100977898, &stru_100931EB8);
          sub_1004794D4((uint64_t)off_100977890, 3, 1);
        }
        else
        {
          *(_BYTE *)(a1 + 192) = 1;
        }
        sub_100043728(buf);
        goto LABEL_9;
      }
      v9 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v10 = "connectable";
        if (!v8)
          v10 = "not connectable";
        *(_DWORD *)buf = 136446210;
        v20 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Local device state is already %{public}s", buf, 0xCu);
      }
      sub_100034264((uint64_t)v18);
      if (qword_100977898 != -1)
        dispatch_once(&qword_100977898, &stru_100931EB8);
      if (*(_BYTE *)(a1 + 199))
        v3 = 120;
      else
        v3 = 121;
LABEL_8:
      sub_1004794D4((uint64_t)off_100977890, 3, v3);
LABEL_9:
      v4 = 1;
      goto LABEL_15;
    }
  }
  v5 = qword_1009997E8;
  v4 = 0;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = "busy";
    if (v2 == 2)
      v6 = "in flux";
    *(_DWORD *)buf = 136446210;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Delaying connectability change event as stack is %{public}s", buf, 0xCu);
    v4 = 0;
  }
LABEL_15:
  sub_100034234((uint64_t)v18);
  return v4;
}

void sub_1004A5730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1004A5760(int a1, char a2)
{
  uint64_t v4;
  _QWORD v5[4];
  int v6;
  char v7;

  v4 = sub_10006BBEC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1004AB4C4;
  v5[3] = &unk_100931E78;
  v6 = a1;
  v7 = a2;
  sub_100041A34(v4, v5);
}

void sub_1004A57C8(uint64_t a1, uint64_t a2)
{
  char *v4;
  int v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 __dst;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[2];
  _BYTE buf[12];
  __int16 v22;
  int v23;
  char v24;

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 128);
  v19 = 0uLL;
  sub_10047D368(&v19, 17);
  *(_QWORD *)((char *)&v19 + 4) = 0xD8D0000003ALL;
  HIDWORD(v19) = a2;
  if ((a2 + 16) <= 0x10u)
    sub_1001145B4();
  switch((int)a2)
  {
    case 240:
      v4 = "received invalid data from BT chip";
      v5 = 643;
      break;
    case 241:
      v4 = "Timed out while waiting for data from BT Chip";
      v5 = 644;
      break;
    case 242:
      v4 = "Invalid receive state from BT Chip";
      v5 = 645;
      break;
    case 243:
      v4 = "Timed out in invalid receive state from BT Chip";
      v5 = 646;
      break;
    case 244:
      v4 = "Invalid packet length received from BT Chip";
      v5 = 647;
      break;
    case 245:
      v4 = "Core dump";
      v5 = 3703;
      break;
    default:
      if ((_DWORD)a2)
      {
        if ((_DWORD)a2 == 8)
        {
          v4 = "Bt chip timed out while trying to transfer data to SPMI master";
          v5 = 652;
        }
        else
        {
          v4 = "unknown";
          v5 = 648;
        }
      }
      else
      {
        v4 = "BT chip received invalid data from iOS";
        v5 = 642;
      }
      break;
  }
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v4;
    v22 = 1024;
    v23 = a2;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Hardware error - %{public}s (%u)", buf, 0x12u);
  }
  v7 = *(unsigned __int8 *)(a1 + 194);
  if (*(_BYTE *)(a1 + 194) || *(_BYTE *)(a1 + 195))
  {
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      v9 = "DUT";
      if (!v7)
        v9 = "LE Test";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Can not restore state while in %{public}s mode", buf, 0xCu);
    }
  }
  if ((_DWORD)a2 == 245)
  {
    if (sub_100065478())
    {
      v14 = sub_100065478();
      sub_100091AE8(buf, v4);
      (*(void (**)(uint64_t, uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v14 + 104))(v14, 1, 0, buf);
      if (v24 < 0)
        operator delete(*(void **)buf);
    }
    v10 = sub_100027F68();
    (*(void (**)(uint64_t, const char *))(*(_QWORD *)v10 + 496))(v10, "UART core dump");
    v11 = sub_100027F68();
    v12 = *(unsigned int *)(a1 + 352);
    if (*(char *)(a1 + 383) < 0)
    {
      sub_10003430C(&__dst, *(void **)(a1 + 360), *(_QWORD *)(a1 + 368));
    }
    else
    {
      __dst = *(_OWORD *)(a1 + 360);
      v18 = *(_QWORD *)(a1 + 376);
    }
    sub_1005756F0(v11, v12, &__dst, 1);
  }
  if (sub_100065478())
  {
    v15 = sub_100065478();
    sub_100091AE8(buf, v4);
    (*(void (**)(uint64_t, _QWORD, uint64_t, _BYTE *))(*(_QWORD *)v15 + 104))(v15, 0, a2, buf);
    if (v24 < 0)
      operator delete(*(void **)buf);
  }
  v13 = sub_100065478();
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v13 + 40))(v13, &v19);
  sub_100034264((uint64_t)v20);
  sub_100091AE8(&v16, "");
  sub_1004A37B0(a1, v5, &v16);
}

void sub_1004A5B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a15 < 0)
    operator delete(__p);
  sub_100034234((uint64_t)&a25);
  _Unwind_Resume(a1);
}

float sub_1004A5B7C(uint64_t a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100931E98);
  return sub_1004A5BD4((uint64_t)off_100977A50, *(_DWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 36), *(unsigned __int8 *)(a1 + 38));
}

float sub_1004A5BD4(uint64_t a1, int a2, int a3, int a4)
{
  int v6;
  NSObject *v8;
  float result;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __int128 v19;
  char v20;
  uint8_t buf[16];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v6 = *(_DWORD *)(a1 + 56);
  if (v6 == 1)
  {
    if (sub_10002825C())
    {
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      *(_OWORD *)buf = 0u;
      v22 = 0u;
      v20 = 0;
      sub_100043758(&v20);
      v10 = sub_1001D8754(a3);
      sub_1002532F8((uint64_t)buf, 256, (uint64_t)"HCI stall detected, %s (0x%x)", v11, v12, v13, v14, v15, (uint64_t)v10);
      sub_10011D44C((const char *)buf);
      sub_10004339C(&v20);
      sub_100043728(&v20);
    }
    if (sub_100065478())
    {
      v17 = sub_100065478();
      memset(buf, 0, sizeof(buf));
      *(_QWORD *)&v22 = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint8_t *))(*(_QWORD *)v17 + 104))(v17, 5, a3 | (a4 << 16), buf);
      if (SBYTE7(v22) < 0)
        operator delete(*(void **)buf);
    }
    v16 = (char *)sub_1001D8754(a3);
    sub_100091AE8(&v19, v16);
    sub_1004A37B0(a1, 621, &v19);
  }
  v8 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v6;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    *(_WORD *)&buf[14] = 1024;
    LODWORD(v22) = a4;
    WORD2(v22) = 1024;
    *(_DWORD *)((char *)&v22 + 6) = a2;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "HCI event timeout occured during state %d on opcode 0x%x with subopcode 0x%x due to %{bluetooth:OI_STATUS}u, ignoring", buf, 0x1Au);
  }
  return result;
}

void sub_1004A5D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1004A5DDC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  __int128 v9;

  v7 = sub_1001702EC();
  v8 = *(char *)(a4 + 23);
  if ((_DWORD)v7 == 7 && a3)
  {
    if (v8 < 0)
      a4 = *(_QWORD *)a4;
    sub_1004A3CCC(v7, 11, 0, a4);
    sub_100091AE8(&v9, "chip boot failure");
    sub_1004A37B0(a1, 1214, &v9);
  }
  if (v8 < 0)
    a4 = *(_QWORD *)a4;
  sub_1004A3CCC(v7, 12, 0, a4);
}

void sub_1004A5E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004A5E90(uint64_t a1)
{
  return *(unsigned int *)(a1 + 316);
}

uint64_t sub_1004A5E98(uint64_t a1)
{
  return *(_QWORD *)(a1 + 320);
}

uint64_t sub_1004A5EA0(const __CFString *a1, UInt8 **a2, _WORD *a3)
{
  const __CFDictionary *v6;
  io_service_t MatchingService;
  io_object_t v8;
  const __CFData *v9;
  const __CFData *v10;
  CFTypeID TypeID;
  CFIndex Length;
  CFIndex v13;
  UInt8 *v14;
  uint64_t v15;
  CFRange v17;

  v6 = IOServiceNameMatching("bluetooth");
  if (!v6)
    return 131;
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v6);
  if (!MatchingService)
    return 131;
  v8 = MatchingService;
  v9 = (const __CFData *)IORegistryEntrySearchCFProperty(MatchingService, "IODeviceTree", a1, kCFAllocatorDefault, 1u);
  if (v9)
  {
    v10 = v9;
    TypeID = CFDataGetTypeID();
    if (TypeID == CFGetTypeID(v10))
    {
      Length = CFDataGetLength(v10);
      v13 = Length;
      if (Length)
      {
        v14 = (UInt8 *)malloc_type_malloc(Length, 0x100004077774924uLL);
        *a2 = v14;
        v17.location = 0;
        v17.length = v13;
        CFDataGetBytes(v10, v17, v14);
      }
      *a3 = v13;
    }
    CFRelease(v10);
    v15 = 0;
  }
  else
  {
    v15 = 131;
  }
  IOObjectRelease(v8);
  return v15;
}

uint64_t sub_1004A5FAC(const void **a1, _QWORD *a2, uint64_t a3)
{
  const __CFDictionary *v5;
  const __CFDictionary *v6;
  const void *Value;
  uint64_t v8;
  uint64_t v10;

  v10 = 0;
  v5 = (const __CFDictionary *)AMFDRSealingMapCopyLocalDictForClass(a3, 0, &v10);
  v6 = v5;
  if (a1 && v5)
  {
    Value = CFDictionaryGetValue(v5, CFSTR("BTBF"));
    *a1 = Value;
    if (!Value)
      goto LABEL_9;
LABEL_7:
    CFRetain(Value);
    v8 = 0;
    if (!a2)
      goto LABEL_12;
    goto LABEL_10;
  }
  if (a1)
  {
    Value = *a1;
    if (*a1)
      goto LABEL_7;
  }
LABEL_9:
  v8 = 131;
  if (!a2)
    goto LABEL_12;
LABEL_10:
  if (v10)
    *a2 = v10;
LABEL_12:
  if (v6)
    CFRelease(v6);
  return v8;
}

uint64_t sub_1004A605C(UInt8 **a1, _WORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  __CFError *v8;
  NSObject *v9;
  CFIndex Code;
  CFIndex Length;
  CFIndex v12;
  UInt8 *v13;
  NSObject *v14;
  CFDataRef theData;
  CFTypeRef cf;
  uint8_t buf[4];
  CFIndex v19;
  CFRange v20;

  theData = 0;
  cf = 0;
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Loading calibration of FATP stage", buf, 2u);
  }
  if (!sub_1004A5FAC((const void **)&theData, &cf, (uint64_t)CFSTR("BWCl")))
    goto LABEL_12;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "FATP stage calibration not found, looking for Golden calibration from SMT", buf, 2u);
  }
  if (cf)
    CFRelease(cf);
  v6 = sub_1004A5FAC((const void **)&theData, &cf, (uint64_t)CFSTR("0BCl"));
  if ((_DWORD)v6)
  {
    v7 = v6;
    v8 = (__CFError *)cf;
    if (cf)
    {
      v9 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        Code = CFErrorGetCode(v8);
        *(_DWORD *)buf = 134217984;
        v19 = Code;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Loading FDR data got error %ld", buf, 0xCu);
      }
    }
  }
  else
  {
LABEL_12:
    Length = CFDataGetLength(theData);
    v12 = Length;
    if (Length)
    {
      v13 = (UInt8 *)malloc_type_malloc(Length, 0x100004077774924uLL);
      *a1 = v13;
      v20.location = 0;
      v20.length = v12;
      CFDataGetBytes(theData, v20, v13);
      v14 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v19 = v12;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "btbf length %ld", buf, 0xCu);
      }
    }
    v7 = 0;
    *a2 = v12;
  }
  if (theData)
    CFRelease(theData);
  if (cf)
    CFRelease(cf);
  return v7;
}

uint64_t sub_1004A628C(uint64_t a1, _WORD *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  int v13;
  void *v14[2];
  uint64_t v15;

  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v13 = 0;
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Looking for fail safe calibration file", buf, 2u);
  }
  v5 = sub_100038E50();
  sub_100091AE8(__p, ".msf");
  v6 = (*(uint64_t (**)(uint64_t, void **, uint64_t, int *, void **))(*(_QWORD *)v5 + 408))(v5, __p, a1, &v13, v14);
  v7 = v6;
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if ((_DWORD)v7)
      goto LABEL_5;
  }
  else if ((_DWORD)v6)
  {
LABEL_5:
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F7800();
    v7 = 131;
    goto LABEL_11;
  }
  *a2 = v13;
  v8 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Found fail safe calibration file", buf, 2u);
    v7 = 0;
  }
LABEL_11:
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  return v7;
}

void sub_1004A63E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004A6418(char *a1, uint64_t a2, unsigned int a3)
{
  unsigned int v4;
  char *v5;
  size_t v6;
  uint64_t v7;
  uint8_t *v8;
  NSObject *v9;
  int v10;
  char v11;
  size_t v12;
  size_t v13;
  uint8_t *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint8_t buf[4];
  unsigned int v22;

  v4 = a2;
  v5 = a1;
  v6 = a3;
  __chkstk_darwin(a1, a2);
  v8 = &buf[-v7];
  bzero(&buf[-v7], v6);
  v9 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v22 = v4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Calibration/Regulatory data size %d", buf, 8u);
  }
  v10 = v4 % a3;
  if ((((v4 / a3) - ((unsigned __int16)(v4 % a3) == 0)) & 0x80) != 0)
    return 1;
  v11 = v4 / a3 - ((unsigned __int16)(v4 % a3) == 0);
  v12 = (unsigned __int16)(v4 % a3);
  v13 = v6 - (unsigned __int16)v10;
  v14 = &v8[(unsigned __int16)v10];
  while (1)
  {
    v15 = v6;
    if (!v11)
    {
      bzero(v14, v13);
      v15 = v12;
    }
    memcpy(v8, v5, v15);
    v16 = *(_QWORD *)sub_1000438A4();
    v17 = a3 == 230 ? (*(uint64_t (**)(void))(v16 + 3608))() : (*(uint64_t (**)(void))(v16 + 3624))();
    v18 = v17;
    if ((_DWORD)v17)
      break;
    v19 = v11--;
    v5 += v6;
    if (v19 < 1)
      return 0;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F782C();
  return v18;
}

uint64_t sub_1004A6600(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;

  v2 = (void *)CFPreferencesCopyAppValue(CFSTR("GlobalAllowSoundProfile"), CFSTR("com.apple.BTServer"));
  v3 = 1;
  *(_BYTE *)(a1 + 456) = 1;
  if (v2)
  {
    if (objc_msgSend(CFSTR("on"), "isEqualToString:", v2))
      v3 = 1;
    else
      v3 = 2;
    *(_BYTE *)(a1 + 456) = v3;
  }

  return v3;
}

void sub_1004A6670(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1004A6680(uint64_t a1, int a2)
{
  NSObject *v3;
  const __CFString *v4;
  _DWORD v6[2];

  *(_BYTE *)(a1 + 456) = a2;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Spatial Spatial Profile Global Allowed Written:  %d", (uint8_t *)v6, 8u);
  }
  if (a2 == 1)
    v4 = CFSTR("on");
  else
    v4 = CFSTR("off");
  CFPreferencesSetAppValue(CFSTR("GlobalAllowSoundProfile"), v4, CFSTR("com.apple.BTServer"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.BTServer"));
}

uint64_t sub_1004A6760(uint64_t a1, int a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 392);
  if (*(unsigned __int8 *)(a1 + 456) != a2)
    sub_1004A6680(a1, a2);
  return sub_100034234((uint64_t)v5);
}

void sub_1004A67B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A67CC(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)CFPreferencesCopyAppValue(CFSTR("GlobalAllowSpatial"), CFSTR("com.apple.BTServer"));
  if (v2)
  {
    if (objc_msgSend(CFSTR("on"), "isEqualToString:", v2))
      v3 = 1;
    else
      v3 = 2;
    *(_BYTE *)(a1 + 384) = v3;
  }
  else
  {
    v3 = *(unsigned __int8 *)(a1 + 384);
  }

  return v3;
}

void sub_1004A6840(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1004A6850(uint64_t a1, int a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 392);
  if (*(unsigned __int8 *)(a1 + 384) != a2)
    sub_1004A68BC(a1, a2);
  return sub_100034234((uint64_t)v5);
}

void sub_1004A68A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A68BC(uint64_t a1, int a2)
{
  NSObject *v3;
  const __CFString *v4;
  _DWORD v6[2];

  *(_BYTE *)(a1 + 384) = a2;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Spatial Audio Global Allowed Written:  %d", (uint8_t *)v6, 8u);
  }
  if (a2 == 1)
    v4 = CFSTR("on");
  else
    v4 = CFSTR("off");
  CFPreferencesSetAppValue(CFSTR("GlobalAllowSpatial"), v4, CFSTR("com.apple.BTServer"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.BTServer"));
}

void sub_1004A699C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[2];
  _QWORD v16[2];
  uint8_t buf[4];
  id v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;

  v7 = a2;
  v8 = qword_1009997E8;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412802;
      v18 = v7;
      v19 = 1024;
      v20 = a3;
      v21 = 1024;
      v22 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "StackManager setSpatialModeWithBundleID：%@, mode:%u, headtrack:%u", buf, 0x18u);
    }
    if (!*(_QWORD *)(a1 + 464))
    {
      v9 = sub_1004A6B84(a1);
      v10 = objc_claimAutoreleasedReturnValue(v9);
      v11 = *(void **)(a1 + 464);
      *(_QWORD *)(a1 + 464) = v10;

    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a4, CFSTR("kCBMsgArgParamSpatialHeadTracking")));
    v15[1] = CFSTR("kCBMsgArgParamSpatialMode");
    v16[0] = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a3));
    v16[1] = v13;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 2));

    objc_msgSend(*(id *)(a1 + 464), "setObject:forKey:", v14, v7);
    sub_1004A71DC(a1, *(void **)(a1 + 464));

  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006F788C();
  }

}

void sub_1004A6B44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1004A6B84(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;
  id v4;
  void *i;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char isKindOfClass;
  NSObject *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  void *v17;
  unsigned int v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  unsigned int v25;
  NSObject *v26;
  id v27;
  id v28;
  uint64_t v29;
  void *j;
  uint64_t v31;
  void *v32;
  id v34;
  void *v35;
  char v37;
  id v38;
  uint64_t v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD v49[2];
  uint8_t v50[128];
  uint8_t buf[4];
  uint64_t v52;
  __int16 v53;
  unsigned int v54;
  __int16 v55;
  unsigned int v56;
  _BYTE v57[128];

  v49[0] = 0;
  v49[1] = 0;
  sub_10003415C((uint64_t)v49, a1 + 392);
  v1 = *(void **)(a1 + 464);
  if (v1)
  {
    v2 = v1;
    goto LABEL_35;
  }
  v35 = (void *)CFPreferencesCopyAppValue(CFSTR("SpatialModeDict"), CFSTR("com.apple.BTServer"));
  v34 = objc_msgSend(v35, "mutableCopy");
  if (v34)
  {
    v38 = objc_alloc_init((Class)NSMutableDictionary);
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v3 = v34;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v45, v57, 16);
    if (!v4)
    {
      v37 = 0;
      goto LABEL_24;
    }
    v37 = 0;
    v39 = *(_QWORD *)v46;
    while (1)
    {
      v40 = v4;
      for (i = 0; i != v40; i = (char *)i + 1)
      {
        if (*(_QWORD *)v46 != v39)
          objc_enumerationMutation(v3);
        v6 = *(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)i);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v6));
        v8 = objc_opt_class(NSMutableDictionary);
        if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0)
        {

LABEL_12:
          v12 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v6));
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("kCBMsgArgParamSpatialMode")));
            v15 = objc_msgSend(v14, "unsignedIntValue");
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v6));
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("kCBMsgArgParamSpatialHeadTracking")));
            v18 = objc_msgSend(v17, "BOOLValue");
            *(_DWORD *)buf = 138412802;
            v52 = v6;
            v53 = 1024;
            v54 = v15;
            v55 = 1024;
            v56 = v18;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "StackManager Get Spatial Mode Bundle ID Dict, key: %@, value: %u headtrack: %u", buf, 0x18u);

          }
          continue;
        }
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v6));
        v10 = objc_opt_class(NSDictionary);
        isKindOfClass = objc_opt_isKindOfClass(v9, v10);

        if ((isKindOfClass & 1) != 0)
          goto LABEL_12;
        v19 = objc_alloc_init((Class)NSMutableDictionary);
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v6));
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v20, "unsignedIntValue")));

        objc_msgSend(v19, "setObject:forKey:", v21, CFSTR("kCBMsgArgParamSpatialMode"));
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
        objc_msgSend(v19, "setObject:forKey:", v22, CFSTR("kCBMsgArgParamSpatialHeadTracking"));
        objc_msgSend(v38, "setObject:forKey:", v19, v6);
        v23 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v6));
          v25 = objc_msgSend(v24, "unsignedIntValue");
          *(_DWORD *)buf = 138412546;
          v52 = v6;
          v53 = 1024;
          v54 = v25;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "StackManager Converting Bundle ID Dict, key: %@, value: %u", buf, 0x12u);

        }
        v37 = 1;
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v45, v57, 16);
      if (!v4)
      {
LABEL_24:

        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v27 = v38;
        v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v41, v50, 16);
        if (v28)
        {
          v29 = *(_QWORD *)v42;
          do
          {
            for (j = 0; j != v28; j = (char *)j + 1)
            {
              if (*(_QWORD *)v42 != v29)
                objc_enumerationMutation(v27);
              v31 = *(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)j);
              objc_msgSend(v3, "removeObjectForKey:", v31);
              v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKeyedSubscript:", v31));
              objc_msgSend(v3, "setObject:forKey:", v32, v31);

            }
            v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v41, v50, 16);
          }
          while (v28);
        }

        if ((v37 & 1) != 0)
          sub_1004A71DC(a1, v3);
        v2 = v3;

        goto LABEL_34;
      }
    }
  }
  v26 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "StackManager create a new dict", buf, 2u);
  }
  v2 = objc_alloc_init((Class)NSMutableDictionary);
LABEL_34:

LABEL_35:
  sub_100034234((uint64_t)v49);
  return v2;
}

void sub_1004A70C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{

  sub_100034234((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_1004A71DC(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[2];

  v3 = a2;
  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 392);
  CFPreferencesSetAppValue(CFSTR("SpatialModeDict"), v3, CFSTR("com.apple.BTServer"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.BTServer"));
  sub_100034234((uint64_t)v4);

}

void sub_1004A7248(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1004A7268(uint64_t a1, void *a2, _BYTE *a3, int *a4)
{
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  int v19;
  NSObject *v20;
  int v21;
  int v22;
  int v23;
  id v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v7 = a2;
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F793C();
    *a3 = 1;
    *a4 = 1;
  }
  v8 = *(void **)(a1 + 464);
  if (!v8)
  {
    v9 = sub_1004A6B84(a1);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    v11 = *(void **)(a1 + 464);
    *(_QWORD *)(a1 + 464) = v10;

    v8 = *(void **)(a1 + 464);
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", v7));
  v13 = v12;
  if (v12)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("kCBMsgArgParamSpatialMode")));
    v15 = v14;
    if (v14)
    {
      *a4 = objc_msgSend(v14, "unsignedIntValue");
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKey:", CFSTR("kCBMsgArgParamSpatialHeadTracking")));
      v17 = v16;
      if (v16)
      {
        *a3 = objc_msgSend(v16, "BOOLValue");
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006F7910();
        *a3 = 1;
        *a4 = 1;
      }

    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F78E4();
      if (objc_msgSend(v7, "caseInsensitiveCompare:", CFSTR("com.apple.facetime")))
      {
        v19 = 1;
        *a3 = 1;
      }
      else
      {
        *a3 = 0;
        *a3 = _os_feature_enabled_impl("CoreLocation", "Zelda");
        v19 = 2;
      }
      *a4 = v19;
    }

  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F78B8();
    if (objc_msgSend(v7, "caseInsensitiveCompare:", CFSTR("com.apple.facetime")))
    {
      v18 = 1;
      *a3 = 1;
    }
    else
    {
      *a3 = 0;
      *a3 = _os_feature_enabled_impl("CoreLocation", "Zelda");
      v18 = 2;
    }
    *a4 = v18;
  }
  v20 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v21 = *a4;
    v22 = *a3;
    v23 = 138412802;
    v24 = v7;
    v25 = 1024;
    v26 = v21;
    v27 = 1024;
    v28 = v22;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "StackManager Get Spatial Mode with Bundle ID: %@=>%u,%u", (uint8_t *)&v23, 0x18u);
  }

}

void sub_1004A7508(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_1004A7550(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  int v5;
  NSObject *v6;
  _BOOL4 v7;
  _QWORD v9[2];
  uint8_t buf[4];
  int v11;

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 472);
  v2 = *(unsigned int *)(a1 + 536);
  if ((_DWORD)v2)
  {
    v3 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v11 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Default airplane mode denylist state is %d", buf, 8u);
      v2 = *(unsigned int *)(a1 + 536);
    }
    goto LABEL_13;
  }
  v4 = (void *)CFPreferencesCopyAppValue(CFSTR("defaultAirplaneModeDenylistState"), CFSTR("com.apple.BTServer"));
  if (v4)
  {
    if ((objc_msgSend(CFSTR("on"), "isEqualToString:", v4) & 1) != 0)
    {
      v5 = 2;
LABEL_9:
      *(_DWORD *)(a1 + 536) = v5;
      goto LABEL_10;
    }
    if (objc_msgSend(CFSTR("off"), "isEqualToString:", v4))
    {
      v5 = 1;
      goto LABEL_9;
    }
  }
LABEL_10:
  v6 = qword_1009997E8;
  v7 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
  v2 = *(unsigned int *)(a1 + 536);
  if (v7)
  {
    *(_DWORD *)buf = 67109120;
    v11 = v2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Read from CFPRefs. Default airplane mode grant list state is %d", buf, 8u);
    v2 = *(unsigned int *)(a1 + 536);
  }

LABEL_13:
  sub_100034234((uint64_t)v9);
  return v2;
}

void sub_1004A76D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1004A76FC(uint64_t a1)
{
  _QWORD v2[4];
  __int128 v3;
  uint64_t v4;

  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100931E98);
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 48);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1004A78CC;
  v2[3] = &unk_100931CB8;
  sub_1004A7798((uint64_t)off_100977A50 + 96, v2);
}

void sub_1004A7798(uint64_t a1, void *a2)
{
  void (**v3)(id, void ***);
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void **v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  sub_1004ABBA0((char *)&v12, *(_QWORD **)(a1 + 8), *(_QWORD **)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4);
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  v4 = v12;
  v5 = v13;
  while (v4 != v5)
  {
    v10 = 0;
    v11 = 0;
    v6 = *(std::__shared_weak_count **)(v4 + 8);
    if (!v6)
      goto LABEL_14;
    v7 = std::__shared_weak_count::lock(v6);
    v11 = v7;
    if (!v7)
    {
      if (!v10)
        goto LABEL_9;
LABEL_8:
      v3[2](v3, &v10);
      v7 = v11;
      goto LABEL_9;
    }
    v10 = *(void ***)v4;
    if (v10)
      goto LABEL_8;
LABEL_9:
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
LABEL_14:
    v4 += 16;
  }
  v10 = (void **)&v12;
  sub_1004AA560(&v10);

}

void sub_1004A789C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1004A78CC(uint64_t a1, _QWORD *a2)
{
  return (**(uint64_t (***)(_QWORD, _QWORD, _QWORD, _QWORD))*a2)(*a2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48));
}

void sub_1004A78E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  uint8_t *v28;
  const void *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  void *__p[2];
  char v36;
  uint64_t v37;
  char *v38[2];
  uint8_t buf[8];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[3];
  uint64_t v43[3];
  uint64_t v44[3];
  _QWORD v45[3];

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(a1 + 64) == 3703)
  {
    buf[0] = 0;
    sub_100043758(buf);
    sub_10011D44C("Host Initiated Core Dump");
    sub_10004339C(buf);
    sub_100043728(buf);
  }
  v3 = sub_100027F68();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3))
  {
LABEL_22:
    v9 = sub_100027F68();
    v10 = *(unsigned int *)(a1 + 64);
    v11 = (char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
    {
      if (*(_QWORD *)(a1 + 48))
      {
        v12 = *(char **)v11;
LABEL_27:
        if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v9 + 512))(v9, v10, v12))
        {
          v14 = sub_100027F68();
          if (*(char *)(a1 + 63) < 0)
            v11 = *(char **)v11;
          v15 = *(unsigned int *)(a1 + 64);
          sub_100091AE8(&v34, v11);
          sub_1005756F0(v14, v15, &v34, 1);
        }
        if ((sub_1001148F4() & 1) == 0)
        {
          v19 = sub_100027F68();
          if (*(char *)(a1 + 63) < 0)
            v11 = *(char **)v11;
          v20 = *(unsigned int *)(a1 + 64);
          sub_100091AE8(&v33, v11);
          sub_1005756F0(v19, v20, &v33, 1);
        }
        *(_DWORD *)(v2 + 352) = *(_DWORD *)(a1 + 64);
        std::string::operator=((std::string *)(v2 + 360), (const std::string *)(a1 + 40));
        v16 = sub_1000438A4();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 1216))(v16))
        {
          v21 = sub_100027F68();
          if (*(char *)(a1 + 63) < 0)
            v11 = *(char **)v11;
          v22 = *(unsigned int *)(a1 + 64);
          sub_100091AE8(&v32, v11);
          sub_1005756F0(v21, v22, &v32, 1);
        }
        v17 = 0;
        while (1)
        {
          v18 = v17;
          sleep(0xAu);
          v17 = sub_10011493C();
          if (v17 == v18)
            break;
          if ((sub_100052F88() & 1) == 0)
            goto LABEL_49;
        }
        v17 = v18;
LABEL_49:
        v24 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)&buf[4] = v17;
          LOWORD(v40) = 1024;
          *(_DWORD *)((char *)&v40 + 2) = v18;
          HIWORD(v40) = 1024;
          LODWORD(v41) = 10;
          _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "coreDumpPacketCounter:%d coreDumpLastPacketCounter:%d no change detected for %d seconds, aborting", buf, 0x14u);
        }
        v25 = sub_100027F68();
        v26 = *(unsigned int *)(a1 + 64);
        if (*(char *)(a1 + 63) >= 0)
          v27 = *(unsigned __int8 *)(a1 + 63);
        else
          v27 = *(_QWORD *)(a1 + 48);
        v40 = 0;
        v41 = 0;
        *(_QWORD *)buf = 0;
        v28 = buf;
        sub_1002D6774((uint64_t)buf, v27 + 21);
        if (v41 < 0)
          v28 = *(uint8_t **)buf;
        if (v27)
        {
          if (*(char *)(a1 + 63) >= 0)
            v29 = (const void *)(a1 + 40);
          else
            v29 = *(const void **)(a1 + 40);
          memmove(v28, v29, v27);
        }
        strcpy((char *)&v28[v27], " BD_COREDUMP_TOO_LONG");
        if (v41 >= 0)
          v30 = (char *)buf;
        else
          v30 = *(char **)buf;
        sub_100091AE8(&v31, v30);
        sub_1005756F0(v25, v26, &v31, 1);
      }
    }
    else
    {
      v12 = (char *)(a1 + 40);
      if (*(_BYTE *)(a1 + 63))
        goto LABEL_27;
    }
    sub_100255B10(*(unsigned int *)(a1 + 64));
    v12 = v13;
    goto LABEL_27;
  }
  v37 = 0;
  v38[0] = 0;
  v38[1] = 0;
  sub_100091AE8(buf, "Firmware crash detected :(pc = 0xc6dce, lr = 0xc6de5, bcsReason = 0x0, trapReason = 0x5)");
  sub_100091AE8(v42, "Firmware crash detected :(pc = 0x82c, lr = 0x7bf, bcsReason = 0x0, trapReason = 0x25)");
  sub_100091AE8(v43, "pci error: kACIPCEnterLowPowerFailed: (0x2, 0x0)");
  sub_100091AE8(v44, "chip boot failure");
  sub_100091AE8(v45, "BD_VSC_LE_META_ADD_IRK_TO_LIST");
  sub_100393D54((uint64_t)&v37, (const void **)buf, 5);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v45[i + 2]) < 0)
      operator delete((void *)v45[i]);
  }
  if (v38 == (char **)sub_10001F2AC((uint64_t)&v37, (const void **)(a1 + 40)))
  {
    v5 = *(_DWORD *)(a1 + 64);
    if (v5 == 133)
    {
      if (qword_10097AA70 != -1)
        dispatch_once(&qword_10097AA70, &stru_100931FF8);
      v23 = qword_10097AA68;
      sub_100091AE8(buf, "FW Crash");
      sub_100091AE8(__p, "OI_STATUS_ALREADY_CONNECTED");
      sub_10047C59C(0.0, v23, (uint64_t *)buf, (uint64_t *)__p);
    }
    else
    {
      if (v5 != 652)
      {
LABEL_21:
        sub_100056BAC((uint64_t)&v37, v38[0]);
        goto LABEL_22;
      }
      if (qword_10097AA70 != -1)
        dispatch_once(&qword_10097AA70, &stru_100931FF8);
      v6 = qword_10097AA68;
      sub_100091AE8(buf, "FW Crash");
      sub_100091AE8(__p, "OI_HCI_HW_ERROR_SPMI_TIMEOUT");
      sub_10047C59C(0.0, v6, (uint64_t *)buf, (uint64_t *)__p);
    }
    if (v36 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v7 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Targetted FW Crash signature found, filing ABC Snapshot", buf, 2u);
    }
    if (qword_10097AA70 != -1)
      dispatch_once(&qword_10097AA70, &stru_100931FF8);
    v8 = qword_10097AA68;
    sub_100091AE8(buf, "FW Crash");
    sub_10047C59C(60.0, v8, (uint64_t *)buf, (uint64_t *)(a1 + 40));
  }
  if (SHIBYTE(v41) < 0)
    operator delete(*(void **)buf);
  goto LABEL_21;
}

void sub_1004A7E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a14 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1004A7FAC(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
    return sub_10003430C(result, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  v3 = *(_OWORD *)(a2 + 40);
  result[2] = *(_QWORD *)(a2 + 56);
  *(_OWORD *)result = v3;
  return result;
}

void sub_1004A7FDC(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void sub_1004A7FF0(uint64_t a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100931E98);
  sub_1004A57C8((uint64_t)off_100977A50, *(unsigned __int8 *)(a1 + 32));
}

uint64_t sub_1004A8038(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  _QWORD v21[5];
  char v22;
  _QWORD v23[2];
  _QWORD v24[2];
  uint8_t buf[4];
  unsigned __int8 **v26;

  v24[0] = 0;
  v24[1] = 0;
  sub_10003415C((uint64_t)v24, a1 + 128);
  if (*(_BYTE *)(a1 + 60))
  {
    sub_100034264((uint64_t)v24);
    v23[0] = 0;
    v23[1] = 0;
    sub_10003415C((uint64_t)v23, a1 + 208);
    v4 = (unsigned __int8 **)(a1 + 280);
    v5 = a2[23];
    if ((v5 & 0x80u) == 0)
      v6 = a2[23];
    else
      v6 = *((_QWORD *)a2 + 1);
    v7 = *(unsigned __int8 *)(a1 + 303);
    v8 = (char)v7;
    if ((v7 & 0x80u) != 0)
      v7 = *(_QWORD *)(a1 + 288);
    if (v6 == v7)
    {
      if (v8 >= 0)
        v9 = (unsigned __int8 *)(a1 + 280);
      else
        v9 = *v4;
      if ((v5 & 0x80) == 0)
      {
        if (a2[23])
        {
          v10 = a2;
          while (*v10 == *v9)
          {
            ++v10;
            ++v9;
            if (!--v5)
              goto LABEL_32;
          }
          goto LABEL_20;
        }
LABEL_32:
        sub_100034234((uint64_t)v23);
        return sub_100034234((uint64_t)v24);
      }
      if (!memcmp(*(const void **)a2, v9, *((_QWORD *)a2 + 1)))
        goto LABEL_32;
    }
LABEL_20:
    sub_100034264((uint64_t)v23);
    if ((char)a2[23] < 0)
      a2 = *(unsigned __int8 **)a2;
    strlcpy("iOS", (const char *)a2, 0x82uLL);
    v22 = 0;
    sub_100043758(&v22);
    byte_1009996BD = 1;
    v17 = sub_1001928B0((uint64_t (*)())sub_1004A2F8C, (uint64_t)"iOS", v11, v12, v13, v14, v15, v16);
    sub_10004339C(&v22);
    if (v17)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F7968();
    }
    else if (!sub_1004A2FFC(a1))
    {
      v18 = sub_10006BBEC();
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_1004A8320;
      v21[3] = &unk_100917378;
      v21[4] = a1;
      sub_100041A34(v18, v21);
      sub_100034188((uint64_t)v23);
      std::string::assign((std::string *)(a1 + 280), "iOS");
      v19 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 303) < 0)
          v4 = (unsigned __int8 **)*v4;
        *(_DWORD *)buf = 136446210;
        v26 = v4;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Local device name changed to \"%{public}s\"", buf, 0xCu);
      }
      sub_100034264((uint64_t)v23);
    }
    sub_100043728(&v22);
    goto LABEL_32;
  }
  *(_BYTE *)(a1 + 193) = 1;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F734C();
  return sub_100034234((uint64_t)v24);
}

void sub_1004A82DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_100034234((uint64_t)va);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A8320(uint64_t a1)
{
  return sub_1004A438C(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1004A8328(uint64_t a1, unsigned __int8 *a2)
{
  return sub_1004A8038(a1 - 8, a2);
}

uint64_t sub_1004A8330(int a1, uint64_t a2, char a3)
{
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, (uint64_t)&unk_100999618);
  dword_1009996B8 = a1;
  byte_1009996BC = a3;
  byte_1009996BD = 0;
  sub_1000445E0(&stru_100999658);
  return sub_100034234((uint64_t)v6);
}

void sub_1004A8398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A83AC(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;
  int v6;
  char v7;

  result = 1;
  if (a2 && a3)
  {
    v7 = 0;
    sub_100043758(&v7);
    byte_1009996BD = 1;
    v6 = sub_100192918((uint64_t)sub_1004A8330);
    sub_10004339C(&v7);
    if (v6)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F7A28();
    }
    else
    {
      if (!sub_1004A2FFC(a1))
      {
        *a3 = byte_1009996BC;
        sub_100043728(&v7);
        return 0;
      }
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F79C8();
    }
    sub_100043728(&v7);
    return 1;
  }
  return result;
}

void sub_1004A84B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A84C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  _BOOL4 v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  std::string __p;
  int v16;
  _BYTE buf[18];
  __int16 v18;
  uint64_t v19;
  __int128 v20;
  void *v21[2];
  __int128 v22;
  void *v23[2];
  __int128 v24;
  void *v25[2];
  _OWORD v26[3];
  __int128 v27;
  uint64_t v28;

  v28 = 0;
  v27 = 0u;
  memset(v26, 0, sizeof(v26));
  v24 = 0u;
  *(_OWORD *)v25 = 0u;
  v22 = 0u;
  *(_OWORD *)v23 = 0u;
  v20 = 0u;
  *(_OWORD *)v21 = 0u;
  sub_1005BCCCC((uint64_t)&v20 + 1);
  BYTE2(v21[0]) = 0;
  BYTE4(v21[0]) = 0;
  BYTE2(v23[0]) = 0;
  BYTE4(v23[0]) = 0;
  DWORD1(v26[1]) = 0;
  v22 = 0uLL;
  v21[1] = 0;
  LOBYTE(v23[0]) = 0;
  v24 = 0uLL;
  v23[1] = 0;
  LOBYTE(v25[0]) = 0;
  memset(v26, 0, 19);
  v25[1] = 0;
  BYTE8(v26[1]) = 1;
  BYTE2(v28) = 0;
  *(_QWORD *)((char *)&v26[1] + 14) = 0;
  *(_QWORD *)((char *)&v26[1] + 9) = 0;
  v27 = 0uLL;
  *((_QWORD *)&v26[2] + 1) = 0;
  LOBYTE(v28) = 0;
  v16 = 0;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100931F38);
  *(_DWORD *)buf = *(_DWORD *)a2;
  *(_WORD *)&buf[4] = *(_WORD *)(a2 + 4);
  v3 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  if (sub_1004419F4(v3, (uint64_t)&v20))
  {
    if (BYTE5(v27))
    {
      v4 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68157954;
        *(_DWORD *)&buf[4] = 6;
        *(_WORD *)&buf[8] = 2096;
        *(_QWORD *)&buf[10] = a2;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Invoking roleswitch disable for %{bluetooth:BD_ADDR}.6P", buf, 0x12u);
      }
      if (sub_10018B4A0(v3 + 128, 1) && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F7BA8();
    }
    if (BYTE6(v27))
    {
      v5 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 141558531;
        *(_QWORD *)&buf[4] = 1752392040;
        *(_WORD *)&buf[12] = 1041;
        *(_DWORD *)&buf[14] = 6;
        v18 = 2097;
        v19 = a2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting extended LSTO for %{private,bluetooth:BD_ADDR,mask.hash}.6P to 10000ms", buf, 0x1Cu);
      }
      if (sub_10018B444(v3 + 128, 10000)
        && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        sub_1006F7C68();
      }
    }
    if (BYTE1(v28))
    {
      v6 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68157954;
        *(_DWORD *)&buf[4] = 6;
        *(_WORD *)&buf[8] = 2096;
        *(_QWORD *)&buf[10] = a2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Invoking reduced QoS Latency for %{bluetooth:BD_ADDR}.6P", buf, 0x12u);
      }
      if (sub_10018B4E8(v3 + 128, 1) && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F7C08();
    }
  }
  sub_10043F78C(v3, (uint64_t)buf);
  v7 = BYTE3(v19);
  if ((v19 & 0x80000000) != 0)
    v7 = *(_QWORD *)&buf[8];
  if (v7)
  {
    sub_10043F78C(v3, (uint64_t)&__p);
    v8 = std::string::compare(&__p, "INTEGRATED HANDSFREE") == 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_28:
      if (!v8)
        goto LABEL_37;
      goto LABEL_32;
    }
  }
  else
  {
    v8 = 0;
    if ((v19 & 0x80000000) == 0)
      goto LABEL_28;
  }
  operator delete(*(void **)buf);
  if (!v8)
    goto LABEL_37;
LABEL_32:
  v9 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68157954;
    *(_DWORD *)&buf[4] = 6;
    *(_WORD *)&buf[8] = 2096;
    *(_QWORD *)&buf[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Name matched, invoking roleswitch disable for %{bluetooth:BD_ADDR}.6P", buf, 0x12u);
  }
  if (sub_10018B4A0(v3 + 128, 1) && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F7BA8();
LABEL_37:
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_100931ED8);
  v10 = sub_100498AC8((uint64_t)off_100977A70, v3);
  v11 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68158210;
    *(_DWORD *)&buf[4] = 6;
    *(_WORD *)&buf[8] = 2096;
    *(_QWORD *)&buf[10] = a2;
    v18 = 1024;
    LODWORD(v19) = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Device %{bluetooth:BD_ADDR}.6P services are %x", buf, 0x18u);
  }
  if ((v10 & 0x20080) != 0
    && sub_100182B3C(a2, 1u)
    && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006F7B48();
  }
  if (sub_1004420E0(v3))
  {
    sub_10043FA40(v3, &v16);
    v12 = v16 & 0x1F00;
    if ((v12 == 512 || v12 == 256)
      && sub_100182D54(a2, 1u)
      && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      sub_1006F7AE8();
    }
  }
  if (sub_10043F854(v3) == 26
    && sub_100440D90(v3)
    && sub_100182E5C(a2, 2)
    && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006F7A88();
  }
  if (SHIBYTE(v26[0]) < 0)
    operator delete(v25[1]);
  if (SHIBYTE(v24) < 0)
    operator delete(v23[1]);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[1]);
  return nullsub_90((char *)&v20 + 1, v13);
}

void sub_1004A8AF0(_Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a18 < 0)
    operator delete(__p);
  sub_10026B73C((uint64_t)&a20, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A8B30()
{
  uint64_t v0;
  char v2;

  v2 = 0;
  sub_100043758(&v2);
  v0 = sub_100187A10();
  sub_100043728(&v2);
  return v0;
}

void sub_1004A8B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

_BYTE *sub_1004A8B88(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v6[14];
  char v7;
  char v8;

  if (*(_BYTE *)(a1 + 202))
  {
    if (*(_DWORD *)(sub_1000438A4() + 712))
    {
      if (*(_DWORD *)(sub_1000438A4() + 712) <= 0x7CFu && *(_DWORD *)(sub_1000438A4() + 712) <= 0x12u)
      {
        v1 = sub_1000438A4();
        if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 1272))(v1, 0))
        {
          v8 = 0;
          sub_100043758(&v8);
          sub_100192D0C();
          sub_10004339C(&v8);
          sub_100043728(&v8);
        }
      }
    }
  }
  if (qword_100977D80 != -1)
    dispatch_once(&qword_100977D80, &stru_100932038);
  sub_1004C4824((uint64_t)off_100977D78, 3, 1u);
  v7 = 0;
  sub_100043758(&v7);
  v2 = sub_10010BA44();
  sub_10004339C(&v7);
  v3 = sub_1000438A4();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 568))(v3, 0, 1);
  if (v2 == 118)
  {
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Waiting for 'YOU MAY SLEEP'", v6, 2u);
    }
    sub_100113670(500);
  }
  return sub_100043728(&v7);
}

void sub_1004A8CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

_BYTE *sub_1004A8D04(uint64_t a1)
{
  return sub_1004A8B88(a1 - 16);
}

_BYTE *sub_1004A8D0C(uint64_t a1)
{
  _BOOL4 v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const __CFString *v6;
  NSObject *v7;
  char v9;
  size_t v10;
  uint8_t buf[4];
  char *v12;
  __int16 v13;
  _BOOL4 v14;
  __int16 v15;
  int v16;
  char __big[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  *(_OWORD *)__big = 0u;
  v18 = 0u;
  v10 = 256;
  sysctlbyname("kern.wakereason", __big, &v10, 0, 0);
  if (strnstr(__big, "bluetooth", 0x100uLL))
    v2 = 1;
  else
    v2 = strnstr(__big, "BT.Ou", 0x100uLL) != 0;
  HIBYTE(v32) = 0;
  if (*(_BYTE *)(a1 + 202))
  {
    if (*(_DWORD *)(sub_1000438A4() + 712))
    {
      if (*(_DWORD *)(sub_1000438A4() + 712) <= 0x7CFu && *(_DWORD *)(sub_1000438A4() + 712) <= 0x12u)
      {
        v3 = sub_1000438A4();
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 1272))(v3, 1))
        {
          buf[0] = 0;
          sub_100043758(buf);
          sub_100192D0C();
          sub_10004339C(buf);
          sub_100043728(buf);
        }
      }
    }
  }
  v9 = 0;
  sub_100043758(&v9);
  sub_10010BA58(v2);
  sub_10004339C(&v9);
  v4 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 568))(v4, 1, 1);
  if (v2)
  {
    v5 = *sub_10019CCA4(0);
    if ((v5 - 2) > 2)
      v6 = CFSTR("Unknown");
    else
      v6 = *(&off_100932070 + (char)(v5 - 2));
    IOPMClaimSystemWakeEvent(CFSTR("bluetooth"), v6, 0);
  }
  else
  {
    v5 = 0;
  }
  v7 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    v12 = __big;
    v13 = 1024;
    v14 = v2;
    v15 = 1024;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "wakeReason:%s reasonWasBluetooth:%d controllerPacketType:%d", buf, 0x18u);
  }
  return sub_100043728(&v9);
}

void sub_1004A8F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

_BYTE *sub_1004A8F84(uint64_t a1)
{
  return sub_1004A8D0C(a1 - 16);
}

uint64_t sub_1004A8F8C(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  char v9;
  _QWORD v10[5];
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 128);
  if (*(_BYTE *)(a1 + 60))
  {
    sub_100034264((uint64_t)v11);
    v6 = sub_10006BBEC();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1004A90A0;
    v10[3] = &unk_100917378;
    v10[4] = a1;
    sub_100041A34(v6, v10);
    v9 = 0;
    sub_100043758(&v9);
    if (a3)
      v7 = a2;
    else
      v7 = 0;
    sub_10018C8A4(v7);
    sub_100043728(&v9);
  }
  else
  {
    *(_BYTE *)(a1 + 193) = 1;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F734C();
  }
  return sub_100034234((uint64_t)v11);
}

void sub_1004A9078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  sub_100043728(&a12);
  sub_100034234((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A90A0(uint64_t a1)
{
  return sub_1004A438C(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1004A90A8(uint64_t a1, unsigned int a2, int a3)
{
  return sub_1004A8F8C(a1 - 24, a2, a3);
}

uint64_t sub_1004A90B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 1152))(v3, a2);
}

uint64_t sub_1004A90E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[5];
  uint8_t buf[16];
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  v2 = sub_10003415C((uint64_t)v8, a1 + 128);
  if (*(_BYTE *)(a1 + 60))
  {
    sub_100034264(v2);
    v3 = sub_10006BBEC();
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1004A91C0;
    v6[3] = &unk_100917378;
    v6[4] = a1;
    sub_100041A34(v3, v6);
  }
  else
  {
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Ignoring CarPlay state change notification as stack is not ready", buf, 2u);
    }
  }
  return sub_100034234((uint64_t)v8);
}

void sub_1004A91AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100034234(v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A91C0(uint64_t a1)
{
  return sub_1004A438C(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1004A91C8(uint64_t a1)
{
  return sub_1004A90E0(a1 - 40);
}

uint64_t sub_1004A91D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_100931F18);
  sub_1004BA69C((uint64_t)off_100977B38, a2);
  v3 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 576))(v3, a2, 1);
}

uint64_t sub_1004A9240(uint64_t a1, uint64_t a2, __int16 *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v24;
  _QWORD v25[2];
  __int16 v26;
  int v27;
  unsigned __int8 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v25[0] = 0;
  v25[1] = 0;
  sub_10003415C((uint64_t)v25, a1 + 128);
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v5 = sub_1000438A4();
  if ((*(_DWORD *)(a1 + 56) | 2) == 2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F734C();
    v6 = 111;
  }
  else
  {
    v7 = *(_DWORD *)(v5 + 712);
    sub_100034264((uint64_t)v25);
    if ((v7 - 2000) < 0x7D0 || (v6 = 1, v7 != 6) && (v7 - 1) <= 0x7CE)
    {
      v26 = *a3;
      v27 = *(_DWORD *)(a3 + 1);
      v28 = *((_BYTE *)a3 + 6);
      v8 = v28;
      if (v28)
      {
        v9 = a3 + 4;
        v10 = 7;
        v11 = v28;
        do
        {
          v12 = *v9++;
          *(__int16 *)((char *)&v26 + v10) = v12;
          v10 += 2;
          --v11;
        }
        while (v11);
        v13 = 2 * v8 + 7;
        v14 = (char *)(a3 + 36);
        v15 = v8;
        do
        {
          v16 = *v14++;
          *((_BYTE *)&v26 + v13++) = v16;
          --v15;
        }
        while (v15);
      }
      v24 = 0;
      sub_100043758(&v24);
      v22 = sub_100192B5C(0, (3 * v8 + 7), (uint64_t)&v26, v17, v18, v19, v20, v21);
      sub_10004339C(&v24);
      sub_100043728(&v24);
      v6 = v22 != 0;
    }
  }
  sub_100034234((uint64_t)v25);
  return v6;
}

void sub_1004A93F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A9424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t (**v17)();
  unsigned int *v18;
  uint64_t (**v19)();
  unsigned int *v20;
  char v21;
  void *__p[2];
  __int128 v23;
  _QWORD v24[2];

  v24[0] = 0;
  v24[1] = 0;
  sub_10003415C((uint64_t)v24, a1 + 128);
  v5 = sub_1000438A4();
  if ((*(_DWORD *)(a1 + 56) | 2) == 2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F734C();
    v6 = 111;
  }
  else
  {
    v7 = *(_DWORD *)(v5 + 712);
    sub_100034264((uint64_t)v24);
    if ((v7 - 2000) < 0x7D0 || (v6 = 0, v7 != 6) && (v7 - 1) <= 0x7CE)
    {
      *(_OWORD *)__p = 0u;
      v23 = 0u;
      sub_1004806B4((uint64_t)__p, 0);
      sub_1004806E0((uint64_t)__p, *(_BYTE *)a3);
      sub_10048071C((uint64_t)__p, *(_WORD *)(a3 + 2));
      sub_10048071C((uint64_t)__p, *(_WORD *)(a3 + 4));
      sub_10048071C((uint64_t)__p, *(_WORD *)(a3 + 6));
      sub_10048071C((uint64_t)__p, *(_WORD *)(a3 + 8));
      sub_1004806E0((uint64_t)__p, *(_BYTE *)(a3 + 10));
      v21 = 0;
      sub_100043758(&v21);
      sub_10003994C(&v19, __p[1], v23 - (unint64_t)__p[1]);
      v8 = sub_10003F8C4((uint64_t)&v19);
      sub_10003994C(&v17, __p[1], v23 - (unint64_t)__p[1]);
      v9 = sub_10003EB18((uint64_t)&v17);
      v15 = sub_100192B2C(0, v8, v9, v10, v11, v12, v13, v14);
      v17 = &off_100918258;
      if (v18)
        sub_100056AAC(v18);
      v19 = &off_100918258;
      if (v20)
        sub_100056AAC(v20);
      sub_10004339C(&v21);
      sub_100043728(&v21);
      if (__p[1])
      {
        *(void **)&v23 = __p[1];
        operator delete(__p[1]);
      }
      v6 = v15 != 0;
    }
  }
  sub_100034234((uint64_t)v24);
  return v6;
}

void sub_1004A95E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;

  sub_100043728(&a17);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_100034234(v20 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A9670(uint64_t a1, uint64_t a2, __int16 *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t (**v17)();
  unsigned int *v18;
  uint64_t (**v19)();
  unsigned int *v20;
  char v21;
  void *__p[2];
  __int128 v23;
  _QWORD v24[2];

  v24[0] = 0;
  v24[1] = 0;
  sub_10003415C((uint64_t)v24, a1 + 128);
  v5 = sub_1000438A4();
  if ((*(_DWORD *)(a1 + 56) | 2) == 2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F734C();
    v6 = 111;
  }
  else
  {
    v8 = *(_DWORD *)(v5 + 712);
    sub_100034264((uint64_t)v24);
    if ((v8 - 1) > 0xF9E)
    {
      v6 = 1;
    }
    else
    {
      *(_OWORD *)__p = 0u;
      v23 = 0u;
      sub_1004806B4((uint64_t)__p, 0);
      sub_10048071C((uint64_t)__p, *a3);
      sub_10048071C((uint64_t)__p, a3[1]);
      sub_10048071C((uint64_t)__p, a3[2]);
      sub_10048071C((uint64_t)__p, a3[3]);
      sub_10048071C((uint64_t)__p, a3[4]);
      sub_10048071C((uint64_t)__p, a3[5]);
      sub_10048071C((uint64_t)__p, a3[6]);
      sub_10048071C((uint64_t)__p, a3[7]);
      sub_10048071C((uint64_t)__p, a3[8]);
      sub_10048071C((uint64_t)__p, a3[9]);
      sub_10048071C((uint64_t)__p, a3[10]);
      sub_10048071C((uint64_t)__p, a3[11]);
      sub_10048071C((uint64_t)__p, a3[12]);
      sub_10048071C((uint64_t)__p, a3[13]);
      sub_10048071C((uint64_t)__p, a3[14]);
      v21 = 0;
      sub_100043758(&v21);
      sub_10003994C(&v19, __p[1], v23 - (unint64_t)__p[1]);
      v9 = sub_10003F8C4((uint64_t)&v19);
      sub_10003994C(&v17, __p[1], v23 - (unint64_t)__p[1]);
      v10 = sub_10003EB18((uint64_t)&v17);
      v16 = sub_100192B8C(0, v9, v10, v11, v12, v13, v14, v15);
      v17 = &off_100918258;
      if (v18)
        sub_100056AAC(v18);
      v19 = &off_100918258;
      if (v20)
        sub_100056AAC(v20);
      sub_10004339C(&v21);
      sub_100043728(&v21);
      if (__p[1])
      {
        *(void **)&v23 = __p[1];
        operator delete(__p[1]);
      }
      v6 = v16 != 0;
    }
  }
  sub_100034234((uint64_t)v24);
  return v6;
}

void sub_1004A9884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;

  sub_100043728(&a17);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_100034234(v20 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A9910(uint64_t a1, uint64_t a2, char *a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  _QWORD v15[2];

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 128);
  v5 = *a3;
  v6 = sub_1000438A4();
  if ((*(_DWORD *)(a1 + 56) | 2) == 2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F734C();
    v7 = 111;
  }
  else
  {
    v9 = *(_DWORD *)(v6 + 712);
    sub_100034264((uint64_t)v15);
    if ((v9 - 1) > 0xF9E)
    {
      v7 = 1;
    }
    else
    {
      v14 = 0;
      sub_100043758(&v14);
      v13 = sub_100192BBC(0, (4 * v5) | 1u, *a3, (uint64_t)(a3 + 2), (uint64_t)(a3 + 34), v10, v11, v12);
      sub_10004339C(&v14);
      sub_100043728(&v14);
      v7 = v13 != 0;
    }
  }
  sub_100034234((uint64_t)v15);
  return v7;
}

void sub_1004A9A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A9A34(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  char v33;
  uint8_t buf[8];
  uint64_t v35;
  char v36;

  v36 = 2;
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Putting device into test mode", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v35 = 0;
  sub_10003415C((uint64_t)buf, a1 + 128);
  if (*(_DWORD *)(a1 + 56) != 1)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F734C();
    v30 = 111;
    goto LABEL_16;
  }
  sub_100034264((uint64_t)buf);
  v33 = 0;
  sub_100043758(&v33);
  byte_1009996BD = 1;
  v10 = sub_100192A88((uint64_t (*)())sub_1004A2F8C, v3, v4, v5, v6, v7, v8, v9);
  sub_10004339C(&v33);
  if (v10)
  {
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    goto LABEL_18;
  }
  if (!sub_1004A2FFC(a1))
  {
    sub_10006D81C(&v33);
    sub_10022532C(1);
    sub_10004339C(&v33);
    sub_10006D81C(&v33);
    byte_1009996BD = 1;
    v17 = sub_10004C9BC(71, (uint64_t (*)())sub_1004A2F8C, v11, v12, v13, v14, v15, v16, 3);
    sub_10004339C(&v33);
    if (v17)
    {
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        goto LABEL_33;
    }
    else
    {
      if (sub_1004A2FFC(a1))
      {
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006F7E48();
        goto LABEL_33;
      }
      sub_10006D81C(&v33);
      byte_1009996BD = 1;
      v21 = sub_100192874((uint64_t (*)())sub_1004A2F8C, 2u, 0, 1, (uint64_t)&v36, v18, v19, v20);
      sub_10004339C(&v33);
      if (!v21)
      {
        if (sub_1004A2FFC(a1))
        {
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
            sub_1006F7D88();
          goto LABEL_33;
        }
        sub_10006D81C(&v33);
        byte_1009996BD = 1;
        v29 = sub_100192EA8((uint64_t (*)())sub_1004A2F8C, v22, v23, v24, v25, v26, v27, v28, v32);
        sub_10004339C(&v33);
        if (!v29)
        {
          if (!sub_1004A2FFC(a1))
          {
            sub_10006D81C(&v33);
            sub_10017FB08(1);
            sub_10004339C(&v33);
            sub_100034188((uint64_t)buf);
            *(_BYTE *)(a1 + 194) = 1;
            sub_100043728(&v33);
            v30 = 0;
LABEL_16:
            sub_100034234((uint64_t)buf);
            return v30;
          }
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
            goto LABEL_32;
          goto LABEL_33;
        }
        if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          goto LABEL_33;
LABEL_18:
        sub_1006F7D28();
        goto LABEL_33;
      }
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        goto LABEL_33;
    }
    sub_1006F7DE8();
    goto LABEL_33;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
LABEL_32:
    sub_1006F7CC8();
LABEL_33:
  result = sub_100112D60(408);
  __break(1u);
  return result;
}

void sub_1004A9D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A9DB4(uint64_t a1, _BYTE *a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 128);
  *a2 = *(_BYTE *)(a1 + 194);
  sub_100034234((uint64_t)v5);
  return 0;
}

uint64_t sub_1004A9E00(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char v17;
  uint8_t buf[8];
  uint64_t v19;

  v8 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Putting device into LE TX test mode", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v19 = 0;
  sub_10003415C((uint64_t)buf, a1 + 128);
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    if (*(_BYTE *)(a1 + 195))
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F7F08();
      v9 = 1;
    }
    else
    {
      sub_100034264((uint64_t)buf);
      v17 = 0;
      sub_100043758(&v17);
      v15 = a2 - 2402;
      if (a2 < 2402)
        v15 = a2 - 2401;
      v9 = sub_10023990C((v15 >> 1), a3, a4, v10, v11, v12, v13, v14);
      sub_10004339C(&v17);
      if ((_DWORD)v9)
      {
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006F7EA8();
        v9 = 111;
      }
      else
      {
        *(_BYTE *)(a1 + 195) = 1;
      }
      sub_100043728(&v17);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F734C();
    v9 = 111;
  }
  sub_100034234((uint64_t)buf);
  return v9;
}

void sub_1004A9F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A9FA8(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char v15;
  uint8_t buf[8];
  uint64_t v17;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Putting device into LE RX test mode", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v17 = 0;
  sub_10003415C((uint64_t)buf, a1 + 128);
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    if (*(_BYTE *)(a1 + 195))
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F7F08();
      v5 = 1;
    }
    else
    {
      sub_100034264((uint64_t)buf);
      v15 = 0;
      sub_100043758(&v15);
      v13 = a2 - 2402;
      if (a2 < 2402)
        v13 = a2 - 2401;
      v5 = sub_100239774((v13 >> 1), v6, v7, v8, v9, v10, v11, v12);
      sub_10004339C(&v15);
      if ((_DWORD)v5)
      {
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006F7EA8();
        v5 = 111;
      }
      else
      {
        *(_BYTE *)(a1 + 195) = 1;
      }
      sub_100043728(&v15);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F734C();
    v5 = 111;
  }
  sub_100034234((uint64_t)buf);
  return v5;
}

void sub_1004AA110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AA138(int a1, int a2)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100931E98);
  return sub_1004AA190((uint64_t)off_100977A50, a1, a2);
}

uint64_t sub_1004AA190(uint64_t a1, int a2, int a3)
{
  NSObject *v5;
  _DWORD v7[2];
  __int16 v8;
  int v9;

  *(_BYTE *)(a1 + 195) = 0;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109376;
    v7[1] = a2;
    v8 = 1024;
    v9 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "LE test mode stopped : %{bluetooth:OI_STATUS}u, packets = %d", (uint8_t *)v7, 0xEu);
  }
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_100931EB8);
  return sub_10047A84C((uint64_t)off_100977890);
}

uint64_t sub_1004AA288(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint8_t buf[8];
  uint64_t v14;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopping LE test mode", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v14 = 0;
  sub_10003415C((uint64_t)buf, a1 + 128);
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    if (*(_BYTE *)(a1 + 195))
    {
      sub_100034264((uint64_t)buf);
      v12 = 0;
      sub_100043758(&v12);
      v10 = sub_100239B60(sub_1004AA138, v3, v4, v5, v6, v7, v8, v9);
      sub_10004339C(&v12);
      if ((_DWORD)v10)
      {
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006F7F60();
        v10 = 111;
      }
      sub_100043728(&v12);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F7F34();
      v10 = 1;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F734C();
    v10 = 111;
  }
  sub_100034234((uint64_t)buf);
  return v10;
}

void sub_1004AA3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004AA400(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1004AA494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1004AA4BC(id a1, StackEventListener *a2)
{
  ((void (*)(StackEventListener *))*a2->var0)(a2);
}

void sub_1004AA4CC(id a1, StackEventListener *a2)
{
  (*((void (**)(StackEventListener *))a2->var0 + 1))(a2);
}

void sub_1004AA4DC(id a1, StackEventListener *a2)
{
  (*((void (**)(StackEventListener *))a2->var0 + 2))(a2);
}

void sub_1004AA4EC(id a1, StackEventListener *a2)
{
  (*((void (**)(StackEventListener *))a2->var0 + 3))(a2);
}

void sub_1004AA500()
{
  operator delete();
}

void sub_1004AA51C(uint64_t a1)
{
  sub_1004AB518(a1);
  operator delete();
}

void sub_1004AA560(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1004AA5A0((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1004AA5A0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 16)
  {
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
  }
  a1[1] = v2;
}

void sub_1004AA5E8(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  v6 = *(char **)(a1 + 8);
  while (*(_QWORD *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      v7 = a2;
      sub_1004AA69C(a1 + 8, v6, (char *)&v7);
      sub_10007AA30(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1004AA69C(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1004AA8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1004AA8D8(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  v6 = *(char **)(a1 + 8);
  while (*(_QWORD *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      v7 = a2;
      sub_1004AA98C(a1 + 8, v6, (char *)&v7);
      sub_10007AA30(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1004AA98C(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1004AAB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1004AABC8(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  v6 = *(char **)(a1 + 8);
  while (*(_QWORD *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      v7 = a2;
      sub_1004AAC7C(a1 + 8, v6, (char *)&v7);
      sub_10007AA30(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1004AAC7C(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1004AAE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1004AAEB8(id a1, _xpc_activity_s *a2)
{
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  double v5;
  double v6;
  uint8_t v7[16];
  uint8_t buf[16];

  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_100931EF8);
  v2 = sub_10006D828((uint64_t)off_100978128);
  v3 = qword_1009997E8;
  v4 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Timeout passed. Not Resetting the denylist since Airplane mode is enabled", buf, 2u);
    }
    +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
    v6 = sub_1004A1950(v5);
    sub_1004A1E84(1, v6);
  }
  else
  {
    if (v4)
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Timeout passed. Resetting the denylist", v7, 2u);
    }
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_100931F18);
    sub_1004BA740(0.0);
    sub_100183240();
  }
}

void sub_1004AAFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);

  v8 = a1;
  if ((a1 - 701) > 0x44)
  {
    if ((_DWORD)a1)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F8020();
      goto LABEL_10;
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006F7FC0();
  }
  v9 = sub_1001928B0((uint64_t (*)())sub_1004AB0C0, (uint64_t)"iOS", a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)v9)
    return;
  v8 = v9;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006F7968();
LABEL_10:
  v10 = (void (*)(uint64_t))off_1009931B0;
  if (off_1009931B0)
  {
    off_1009931B0 = 0;
    v10(v8);
  }
}

void sub_1004AB0C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);

  if (sub_100187EB8() < 4)
  {
    sub_1004AB160(a1);
  }
  else
  {
    sub_1004A4470();
    v7 = sub_100192AFC((uint64_t (*)())sub_1004AB160, 1u, (uint64_t)byte_1009930B8, v2, v3, v4, v5, v6);
    if ((_DWORD)v7)
    {
      v8 = v7;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006F8080();
      v9 = (void (*)(uint64_t))off_1009931B0;
      if (off_1009931B0)
      {
        off_1009931B0 = 0;
        v9(v8);
      }
    }
  }
}

void sub_1004AB160(uint64_t a1)
{
  uint64_t v2;
  int v3;
  __int16 v4;
  char v5;
  uint64_t (**v6)();
  uint64_t v7;
  uint64_t (**v8)();
  uint64_t v9;
  void (*v10)(uint64_t);
  void (*v11)(_QWORD);

  v2 = sub_10003BE44();
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  if ((_DWORD)a1)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F8200();
LABEL_31:
    v10 = (void (*)(uint64_t))off_1009931B0;
    if (off_1009931B0)
    {
      off_1009931B0 = 0;
      v10(a1);
    }
    return;
  }
  if (v3 <= 20)
  {
    if (v3 != 7)
    {
      if (v3 == 8)
      {
        v4 = 256;
        v5 = 16;
      }
      else
      {
        if (v3 != 12)
          goto LABEL_21;
        v4 = 512;
        v5 = 12;
      }
      goto LABEL_18;
    }
    v4 = 256;
    goto LABEL_14;
  }
  switch(v3)
  {
    case 21:
      v4 = 1024;
      v5 = 28;
      break;
    case 40:
      v4 = 1024;
      v5 = 72;
      break;
    case 42:
      v4 = 1792;
LABEL_14:
      v5 = 4;
      break;
    default:
      goto LABEL_21;
  }
LABEL_18:
  a1 = sub_1001892A4(v4, v5);
  if ((_DWORD)a1)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F81A0();
    goto LABEL_31;
  }
LABEL_21:
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_100931E20);
  v6 = sub_1005C1354();
  v7 = sub_10024BB34(v6);
  if ((_DWORD)v7)
  {
    a1 = v7;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F8140();
    goto LABEL_31;
  }
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_100931E20);
  v8 = sub_1005C1360();
  v9 = sub_10024BD84(v8);
  if ((_DWORD)v9)
  {
    a1 = v9;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006F80E0();
    goto LABEL_31;
  }
  v11 = (void (*)(_QWORD))off_1009931B0;
  if (off_1009931B0)
  {
    off_1009931B0 = 0;
    v11(0);
  }
}

void sub_1004AB380(id a1)
{
  operator new();
}

void sub_1004AB3C0()
{
  operator delete();
}

uint64_t sub_1004AB3E4(uint64_t a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100931E98);
  return sub_1004A41B0(off_100977A50, *(_DWORD *)(a1 + 32));
}

void sub_1004AB438()
{
  operator delete();
}

uint64_t sub_1004AB44C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100931E98);
  result = sub_1004A5450((uint64_t)off_100977A50);
  if ((_DWORD)result)
  {
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 100;
    v3 = sub_10006BBEC();
    return sub_10006BB10(v3, (_BYTE *)a1);
  }
  return result;
}

uint64_t sub_1004AB4C4(uint64_t a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100931E98);
  return sub_1004A52D4((uint64_t)off_100977A50, *(_DWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 36));
}

uint64_t sub_1004AB518(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = off_100931B00;
  *(_QWORD *)(a1 + 8) = &off_100931B98;
  *(_QWORD *)(a1 + 16) = off_100931BB0;
  *(_QWORD *)(a1 + 24) = &off_100931BE0;
  *(_QWORD *)(a1 + 32) = &off_100931BF8;
  *(_QWORD *)(a1 + 40) = &off_100931C10;
  *(_QWORD *)(a1 + 48) = off_100931C28;
  sub_100069BDC(a1 + 472);

  sub_100069BDC(a1 + 392);
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  if (*(char *)(a1 + 303) < 0)
    operator delete(*(void **)(a1 + 280));
  sub_100069BDC(a1 + 208);
  sub_100069BDC(a1 + 128);
  v4 = (void **)(a1 + 104);
  sub_1004AA560(&v4);
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1004AB5D8(id a1)
{
  operator new();
}

void sub_1004AB618()
{
  operator delete();
}

void sub_1004AB63C(id a1)
{
  operator new();
}

void sub_1004AB67C()
{
  operator delete();
}

void sub_1004AB6A0(id a1)
{
  operator new();
}

void sub_1004AB6E0()
{
  operator delete();
}

void sub_1004AB704(id a1)
{
  operator new();
}

void sub_1004AB744()
{
  operator delete();
}

void sub_1004AB768(id a1)
{
  operator new();
}

void sub_1004AB880()
{
  operator delete();
}

void sub_1004AB8A4(id a1)
{
  operator new();
}

void sub_1004AB8E4()
{
  operator delete();
}

void sub_1004AB908(id a1)
{
  operator new();
}

void sub_1004AB948()
{
  operator delete();
}

void sub_1004AB96C(id a1)
{
  operator new();
}

void sub_1004AB9AC()
{
  operator delete();
}

void sub_1004AB9D0(id a1)
{
  operator new();
}

void sub_1004ABA10()
{
  operator delete();
}

void sub_1004ABA34(id a1)
{
  operator new();
}

void sub_1004ABA74()
{
  operator delete();
}

void sub_1004ABA98(id a1)
{
  operator new();
}

void sub_1004ABAD8()
{
  operator delete();
}

void sub_1004ABAFC(id a1)
{
  operator new();
}

void sub_1004ABB3C(id a1)
{
  operator new();
}

void sub_1004ABB7C()
{
  operator delete();
}

char *sub_1004ABBA0(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = sub_100349540(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = a2[1];
      *v7 = *a2;
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 16);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1004ABC14(id a1)
{
  operator new();
}

void sub_1004ABC54()
{
  operator delete();
}

void sub_1004ABCC0()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  sub_1000160D0(&unk_100999618);
  __cxa_atexit((void (*)(void *))sub_100069BDC, &unk_100999618, (void *)&_mh_execute_header);
  sub_1002A90C4(&stru_100999658);
  __cxa_atexit((void (*)(void *))sub_1002A912C, &stru_100999658, (void *)&_mh_execute_header);
  sub_1002A90C4(&stru_100999688);
  __cxa_atexit((void (*)(void *))sub_1002A912C, &stru_100999688, (void *)&_mh_execute_header);
  sub_1002A90C4(&stru_1009996C0);
  __cxa_atexit((void (*)(void *))sub_1002A912C, &stru_1009996C0, (void *)&_mh_execute_header);
  sub_1000160D0(&unk_1009996F0);
  __cxa_atexit((void (*)(void *))sub_100069BDC, &unk_1009996F0, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_1004ABDB8(unint64_t a1, uint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v13;
  std::__shared_weak_count *v14;

  if (qword_100977D80 != -1)
    dispatch_once(&qword_100977D80, &stru_1009320A8);
  v13 = 0;
  v14 = 0;
  sub_1004C0B94((uint64_t)off_100977D78, a1, a4, (uint64_t *)&v13);
  if (v13)
  {
    sub_1004BCEBC(v13, *a4, a2, a3);
    v8 = 0;
  }
  else
  {
    v8 = 7;
  }
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v8;
}

void sub_1004ABE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10009F88C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004ABEA8(unint64_t *a1)
{
  if (qword_100977D80 != -1)
    dispatch_once(&qword_100977D80, &stru_1009320A8);
  sub_1004C1014(off_100977D78, *a1);
  *a1 = 0;
  return 0;
}

uint64_t sub_1004ABF04(unint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6;
  NSObject *v7;
  void **v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *__p[2];
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint8_t buf[4];
  void **v27;

  if (qword_100977D80 != -1)
    dispatch_once(&qword_100977D80, &stru_1009320A8);
  v24 = 0;
  v25 = 0;
  sub_1004C0E3C((uint64_t)off_100977D78, a1, &v24);
  if (v24)
  {
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_100932088);
    v6 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
    if (v6)
    {
      v7 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000340DC(v6, (uint64_t)__p);
        v8 = v23 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v27 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to start classic scan", buf, 0xCu);
        if (v23 < 0)
          operator delete(__p[0]);
      }
    }
    if (qword_100977D80 != -1)
      dispatch_once(&qword_100977D80, &stru_1009320A8);
    v9 = off_100977D78;
    v20 = v24;
    v21 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v12 = sub_1004C1908((uint64_t)v9, &v20, a2, a3);
    v13 = v21;
    if (v21)
    {
      v14 = (unint64_t *)&v21->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    v12 = 7;
  }
  v16 = v25;
  if (v25)
  {
    v17 = (unint64_t *)&v25->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v12;
}

void sub_1004AC154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_10009F88C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AC184(unint64_t a1)
{
  void *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  if (qword_100977D80 != -1)
    dispatch_once(&qword_100977D80, &stru_1009320A8);
  v15 = 0;
  v16 = 0;
  sub_1004C0E3C((uint64_t)off_100977D78, a1, &v15);
  if (v15)
  {
    if (qword_100977D80 != -1)
      dispatch_once(&qword_100977D80, &stru_1009320A8);
    v2 = off_100977D78;
    v13 = v15;
    v14 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
    v5 = sub_1004C1908((uint64_t)v2, &v13, 2u, 2048);
    v6 = v14;
    if (v14)
    {
      v7 = (unint64_t *)&v14->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    v5 = 7;
  }
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v5;
}

void sub_1004AC2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_10009F88C((uint64_t)&a9);
  sub_10009F88C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AC2EC(unint64_t a1)
{
  _QWORD *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  if (qword_100977D80 != -1)
    dispatch_once(&qword_100977D80, &stru_1009320A8);
  v15 = 0;
  v16 = 0;
  sub_1004C0E3C((uint64_t)off_100977D78, a1, &v15);
  if (v15)
  {
    if (qword_100977D80 != -1)
      dispatch_once(&qword_100977D80, &stru_1009320A8);
    v2 = off_100977D78;
    v13 = v15;
    v14 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
    v5 = sub_1004C153C(v2, &v13);
    v6 = v14;
    if (v14)
    {
      v7 = (unint64_t *)&v14->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    v5 = 7;
  }
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v5;
}

void sub_1004AC430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_10009F88C((uint64_t)&a9);
  sub_10009F88C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AC44C(unint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  if (qword_100977D80 != -1)
    dispatch_once(&qword_100977D80, &stru_1009320A8);
  v23 = 0;
  v24 = 0;
  sub_1004C0E3C((uint64_t)off_100977D78, a1, &v23);
  if (v23)
  {
    __p = 0;
    v21 = 0;
    v22 = 0;
    if ((void **)(v23 + 256) == &__p)
    {
      v8 = 0;
    }
    else
    {
      sub_1002A7150((char *)&__p, *(char **)(v23 + 256), *(_QWORD *)(v23 + 264), (uint64_t)(*(_QWORD *)(v23 + 264) - *(_QWORD *)(v23 + 256)) >> 3);
      v8 = 0;
      if (a4 && __p != v21)
      {
        v9 = (char *)__p + 8;
        v10 = 1;
        do
        {
          v11 = *((_QWORD *)v9 - 1);
          if (qword_1009778E8 != -1)
            dispatch_once(&qword_1009778E8, &stru_1009320C8);
          v12 = sub_10046F750((uint64_t)off_1009778E0, a1, v11);
          if (!v12)
          {
            v15 = 7;
            goto LABEL_20;
          }
          *a2++ = v12;
          v13 = v10 + 1;
          if (v10 >= a4)
            break;
          ++v10;
          v14 = v9 == v21;
          v9 += 8;
        }
        while (!v14);
        v8 = v13 - 1;
      }
    }
    v15 = 0;
    *a3 = v8;
LABEL_20:
    if (__p)
    {
      v21 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    v15 = 7;
  }
  v16 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v15;
}

void sub_1004AC610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_10009F88C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AC638(unint64_t a1, const void *a2, size_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t *v11;
  std::__shared_weak_count *v12;

  if (qword_100977D80 != -1)
    dispatch_once(&qword_100977D80, &stru_1009320A8);
  v11 = 0;
  v12 = 0;
  sub_1004C0E3C((uint64_t)off_100977D78, a1, &v11);
  if (v11)
    v6 = sub_1004BDB44(v11, a2, a3);
  else
    v6 = 7;
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1004AC708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10009F88C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AC71C(unint64_t a1, const void *a2, size_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  if (qword_100977D80 != -1)
    dispatch_once(&qword_100977D80, &stru_1009320A8);
  v11 = 0;
  v12 = 0;
  sub_1004C0E3C((uint64_t)off_100977D78, a1, &v11);
  if (v11)
    v6 = sub_1004BDD74(v11, a2, a3);
  else
    v6 = 7;
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1004AC7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10009F88C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1004AC800(id a1)
{
  operator new();
}

void sub_1004AC840()
{
  operator delete();
}

void sub_1004AC864(id a1)
{
  operator new();
}

void sub_1004AC8A4()
{
  operator delete();
}

void sub_1004AC8C8(id a1)
{
  operator new();
}

void sub_1004AC908()
{
  operator delete();
}

uint64_t sub_1004AC92C(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = sub_10026CA3C(a1, a2, a3);
  *(_QWORD *)v4 = off_1009320F8;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_DWORD *)(v4 + 224) = 1065353216;
  sub_1000160D0(v4 + 232);
  *(_QWORD *)(a1 + 296) = 0;
  v5 = objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", 0));
  v6 = *(void **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v5;

  return a1;
}

void sub_1004AC9AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100069BDC(v3);
  sub_1000B69C0(v2);
  sub_10026CB14(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AC9E0(uint64_t a1)
{
  _QWORD *i;
  NSObject *v3;
  uint8_t v5[4];
  uint64_t v6;

  *(_QWORD *)a1 = off_1009320F8;
  for (i = *(_QWORD **)(a1 + 208); i; i = (_QWORD *)*i)
  {
    if (!i[3])
    {
      v3 = qword_1009999B0;
      if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_FAULT))
        sub_1006F8260(v5, &v6, v3);
    }
  }

  sub_100069BDC(a1 + 232);
  sub_1000B69C0(a1 + 192);
  sub_10026CB14(a1);
  return a1;
}

void sub_1004ACAD0(uint64_t a1)
{
  sub_1004AC9E0(a1);
  operator delete();
}

void sub_1004ACAF4(uint64_t a1)
{
  NSObject *v1;
  _QWORD *i;
  uint8_t v4[16];

  if (*(_BYTE *)(a1 + 42))
  {
    v1 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Keyholed input device is already scheduled", v4, 2u);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 42) = 1;
    for (i = *(_QWORD **)(a1 + 208); i; i = (_QWORD *)*i)
      IOHIDUserDeviceScheduleWithDispatchQueue(i[3], *(_QWORD *)(a1 + 16));
  }
}

void sub_1004ACB8C(uint64_t a1)
{
  uint64_t i;
  NSObject *v3;
  uint8_t v4[16];

  if (*(_BYTE *)(a1 + 42))
  {
    *(_BYTE *)(a1 + 42) = 0;
    for (i = *(_QWORD *)(a1 + 208); i; i = sub_1004AD6F4((_QWORD *)(a1 + 192), (uint64_t *)i))
    {
      IOHIDUserDeviceUnscheduleFromDispatchQueue(*(_QWORD *)(i + 24), *(_QWORD *)(a1 + 16));
      CFRelease(*(CFTypeRef *)(i + 24));
    }
    sub_10026D3DC(a1, 0, -536870212, 0);
  }
  else
  {
    v3 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Keyholed input device is not scheduled", v4, 2u);
    }
  }
}

uint64_t sub_1004ACC64(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;

  v11 = objc_msgSend(a2, "mutableCopy");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a3, a4));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", v12, CFSTR("ReportDescriptor"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a5));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", v13, CFSTR("KeyholeReportID"));

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a6));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", v14, CFSTR("bInterfaceNumber"));

  v15 = IOHIDUserDeviceCreateWithOptions(kCFAllocatorDefault, v11, 1);
  if (v15)
  {
    LOBYTE(v24) = a5;
    *((_QWORD *)&v24 + 1) = v15;
    sub_1004AD734(a1 + 192, (unsigned __int8 *)&v24, &v24);
  }
  else
  {
    v16 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006F82AC((uint64_t)v11, v16, v17, v18, v19, v20, v21, v22);
  }

  return v15;
}

void sub_1004ACDBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1004ACDF8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  _BYTE v15[22];

  *(_OWORD *)v15 = xmmword_100741ACA;
  *(_QWORD *)&v15[14] = 0xC002810125001503;
  v3 = objc_msgSend(a2, "mutableCopy");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v15, 22));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v4, CFSTR("ReportDescriptor"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", &off_100961218, CFSTR("ExtendedData"));
  v5 = IOHIDUserDeviceCreateWithOptions(kCFAllocatorDefault, v3, 1);
  if (v5)
  {
    LOBYTE(v14) = 0;
    *((_QWORD *)&v14 + 1) = v5;
    sub_1004AD734(a1 + 192, (unsigned __int8 *)&v14, &v14);
    IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback(v5, sub_10026D5A4, a1);
    IOHIDUserDeviceRegisterSetReportCallback(v5, sub_10026D5A8, a1);
  }
  else
  {
    v6 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006F8310((uint64_t)v3, v6, v7, v8, v9, v10, v11, v12);
  }

  return v5;
}

void sub_1004ACF54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1004ACF80(id *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *a2;
  switch(v6)
  {
    case 254:
      if (!objc_msgSend(a1[37], "length"))
      {
        v15 = qword_1009999B0;
        if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
          sub_1006F8434(v15, v16, v17, v18, v19, v20, v21, v22);
      }
      objc_msgSend(a1[37], "appendBytes:length:", a2 + 1, a3 - 1);
      (*((void (**)(id *, id, id))*a1 + 8))(a1, objc_msgSend(a1[37], "mutableBytes"), objc_msgSend(a1[37], "length"));
      objc_msgSend(a1[37], "setLength:", 0);
      break;
    case 253:
      if (!objc_msgSend(a1[37], "length"))
      {
        v23 = qword_1009999B0;
        if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
          sub_1006F8404(v23, v24, v25, v26, v27, v28, v29, v30);
      }
      goto LABEL_15;
    case 252:
      if (objc_msgSend(a1[37], "length"))
      {
        v7 = qword_1009999B0;
        if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
          sub_1006F83D4(v7, v8, v9, v10, v11, v12, v13, v14);
        objc_msgSend(a1[37], "setLength:", 0);
      }
LABEL_15:
      objc_msgSend(a1[37], "appendBytes:length:", a2 + 1, a3 - 1);
      return;
    default:
      if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
        sub_1006F8374();
      break;
  }
}

uint64_t sub_1004AD100(uint64_t a1, int a2, int a3, void *a4, uint64_t *a5, int a6)
{
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  NSObject *v17;
  uint64_t v18;
  _QWORD v20[5];
  int v21;
  char v22;
  uint64_t v23;
  _QWORD v24[5];
  int v25;
  _QWORD v26[2];
  uint8_t buf[4];
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  int v34;

  v26[0] = 0;
  v26[1] = 0;
  sub_10003415C((uint64_t)v26, a1 + 232);
  v12 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *a5;
    *(_DWORD *)buf = 67109888;
    v28 = a2;
    v29 = 1024;
    v30 = a3;
    v31 = 2048;
    v32 = v13;
    v33 = 1024;
    v34 = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "getReportWithKeyhole type = %u, reportID = 0x%x, max reportLength = %lu, keyholeID = 0x%x", buf, 0x1Eu);
  }
  if (a4 && a5)
  {
    v14 = *a5;
    *a5 = 0;
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_1004AD414;
    v24[3] = &unk_100932178;
    v24[4] = a1;
    v25 = a3;
    v15 = sub_10026D8F0(a1, v24);
    if ((_DWORD)v15)
    {
      if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
        sub_1006F84E0();
    }
    else
    {
      v16 = v14 + 1;
      v23 = v16;
      *(_QWORD *)(a1 + 32) = &v23;
      *(_QWORD *)(a1 + 24) = malloc_type_malloc(v16, 0xD37D7DCuLL);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_1004AD460;
      v20[3] = &unk_100932198;
      v20[4] = a1;
      v21 = a2;
      v22 = a6;
      v15 = sub_10026D8F0(a1, v20);
      if ((_DWORD)v15)
      {
        v17 = qword_1009999B0;
        if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109632;
          v28 = a3;
          v29 = 1024;
          v30 = a6;
          v31 = 1024;
          LODWORD(v32) = v15;
          _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "getReportWithKeyhole 0x%x with keyholeID 0x%x failed: 0x%x", buf, 0x14u);
        }
      }
      else
      {
        v18 = v23;
        if (v23 < 2 || v23 > v16)
        {
          if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
            sub_1006F8464();
        }
        else
        {
          memcpy(a4, (const void *)(*(_QWORD *)(a1 + 24) + 1), v23 - 1);
          *a5 = v18 - 1;
        }
      }
      *(_QWORD *)(a1 + 32) = 0;
      free(*(void **)(a1 + 24));
      *(_QWORD *)(a1 + 24) = 0;
    }
  }
  else
  {
    v15 = 3758097090;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006F855C();
  }
  sub_100034234((uint64_t)v26);
  return v15;
}

void sub_1004AD3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AD414(uint64_t a1)
{
  uint64_t v1;
  __int16 v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = 255;
  HIBYTE(v3) = *(_DWORD *)(a1 + 40);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, __int16 *, uint64_t))(**(_QWORD **)(v1 + 8) + 8))(*(_QWORD *)(v1 + 8), v1, 3, 255, &v3, 2);
}

uint64_t sub_1004AD460(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 32) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
}

uint64_t sub_1004AD488(uint64_t a1, int a2, int a3, const void *a4, size_t a5, int a6)
{
  NSObject *v12;
  _BYTE *v13;
  uint64_t v14;
  NSObject *v15;
  _QWORD v17[7];
  int v18;
  char v19;
  _QWORD v20[2];
  uint8_t buf[4];
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  size_t v26;
  __int16 v27;
  int v28;

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 232);
  v12 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109888;
    v22 = a2;
    v23 = 1024;
    v24 = a3;
    v25 = 2048;
    v26 = a5;
    v27 = 1024;
    v28 = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "setReportWithKeyhole type = %u, reportID = 0x%x, reportLength = %lu, keyholeID = 0x%x", buf, 0x1Eu);
  }
  if (a4 && a5)
  {
    v13 = malloc_type_malloc(a5 + 1, 0x97671842uLL);
    *v13 = a6;
    memcpy(v13 + 1, a4, a5);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1004AD6C8;
    v17[3] = &unk_1009321B8;
    v18 = a2;
    v19 = a6;
    v17[4] = a1;
    v17[5] = v13;
    v17[6] = a5 + 1;
    v14 = sub_10026D8F0(a1, v17);
    if ((_DWORD)v14)
    {
      v15 = qword_1009999B0;
      if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109632;
        v22 = a3;
        v23 = 1024;
        v24 = a6;
        v25 = 1024;
        LODWORD(v26) = v14;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "setReportWithKeyhole 0x%x with keyholeID 0x%x failed: 0x%x", buf, 0x14u);
      }
    }
    free(v13);
  }
  else
  {
    v14 = 3758097090;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006F85BC();
  }
  sub_100034234((uint64_t)v20);
  return v14;
}

void sub_1004AD6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AD6C8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
}

uint64_t sub_1004AD6F4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  sub_1002A6804(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *sub_1004AD734(uint64_t a1, unsigned __int8 *a2, _OWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = *a2;
      if (v6 <= v5)
        v8 = v5 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & v5;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v5)
          {
            if (*((unsigned __int8 *)v10 + 16) == (_DWORD)v5)
              return v10;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6)
                v11 %= v6;
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  *((_OWORD *)v10 + 1) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v14 = 1;
    if (v6 >= 3)
      v14 = (v6 & (v6 - 1)) != 0;
    v15 = v14 | (2 * v6);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_1000B678C(a1, v17);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & v5;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v8) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6)
        v20 %= v6;
    }
    else
    {
      v20 &= v6 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1004AD940(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AD954(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(_QWORD *)a1 = off_100932248;
  sub_1000160D0(a1 + 8);
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = a4;
  *(_QWORD *)a1 = off_1009321E8;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = off_100932220;
  sub_1000160D0(a1 + 96);
  *(_DWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 164) = a3;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  return a1;
}

void sub_1004AD9D8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_100069BDC(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004AD9F4(_QWORD *a1)
{
  void *v2;

  *a1 = off_1009321E8;
  a1[11] = off_100932220;
  v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }
  sub_100069BDC(a1 + 12);
  *a1 = off_100932248;
  sub_100069BDC(a1 + 1);
  return a1;
}

_QWORD *sub_1004ADA58(uint64_t a1)
{
  return sub_1004AD9F4((_QWORD *)(a1 - 88));
}

void sub_1004ADA60(_QWORD *a1)
{
  sub_1004AD9F4(a1);
  operator delete();
}

void sub_1004ADA84(uint64_t a1)
{
  sub_1004AD9F4((_QWORD *)(a1 - 88));
  operator delete();
}

uint64_t sub_1004ADAAC(uint64_t a1, uint64_t a2, int a3)
{
  int v7;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 96);
  sub_10046EA90((char **)(a1 + 168), a2);
  sub_100034264((uint64_t)v8);
  if (!a3)
  {
    v7 = 0;
    sub_10011344C(&v7, 0);
    v7 += 120;
    sub_10045383C(a2, &v7);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), a2);
  }
  sub_1004ADB6C(a1);
  return sub_100034234((uint64_t)v8);
}

void sub_1004ADB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004ADB6C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint8_t buf[4];
  int v20;

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 96);
  v2 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
  {
    v3 = *(_DWORD *)(a1 + 160);
    *(_DWORD *)buf = 67109120;
    v20 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Stepping scan with mode %u", buf, 8u);
  }
  v4 = *(_DWORD *)(a1 + 160);
  if (v4 == 16)
  {
LABEL_11:
    if (sub_1004AE1CC(a1))
      return sub_100034234((uint64_t)v18);
    goto LABEL_12;
  }
  if (!v4)
  {
    if (sub_1004ADF6C(a1) && sub_1004AE1CC(a1))
    {
      buf[0] = 0;
      sub_100043758(buf);
      if (sub_1001928E8((uint64_t (*)())sub_1004AE260, 0x870u, v5, v6, v7, v8, v9, v10)
        && os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_ERROR))
      {
        sub_1006F8650();
      }
      sub_100043728(buf);
      return sub_100034234((uint64_t)v18);
    }
    goto LABEL_11;
  }
LABEL_12:
  buf[0] = 0;
  sub_100043758(buf);
  if (sub_1001928E8((uint64_t (*)())sub_1004AE260, 0x2000u, v11, v12, v13, v14, v15, v16)
    && os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_ERROR))
  {
    sub_1006F8624();
  }
  sub_100043728(buf);
  sub_100034264((uint64_t)v18);
  sub_1004AE2A4(a1, 0);
  return sub_100034234((uint64_t)v18);
}

void sub_1004ADD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100043728(&a11);
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004ADD3C(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1004ADAAC(a1 - 88, a2, a3);
}

void sub_1004ADD44(uint64_t a1)
{
  int v2;
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 8);
  v2 = *(unsigned __int8 *)(a1 + 72);
  sub_100034234((uint64_t)v3);
  if (v2)
  {
    sub_100253460();
  }
  else
  {
    sub_1004ADDA0(a1);
    sub_1004ADB6C(a1);
  }
}

uint64_t sub_1004ADDA0(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 8);
  *(_BYTE *)(a1 + 72) = 1;
  sub_100034234((uint64_t)v3);
  return (***(uint64_t (****)(_QWORD, uint64_t))(a1 + 80))(*(_QWORD *)(a1 + 80), a1);
}

uint64_t sub_1004ADDF8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  _QWORD v6[2];
  uint8_t buf[4];
  int v8;

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 96);
  v2 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 160);
    *(_DWORD *)buf = 67109120;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopping scan with mode %u", buf, 8u);
  }
  v4 = *(_DWORD *)(a1 + 160);
  if (v4 != 128)
  {
    if (v4 == 16)
    {
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 168);
      *(_DWORD *)(a1 + 160) = 128;
      sub_100034264((uint64_t)v6);
      if (qword_10097B080 != -1)
        dispatch_once(&qword_10097B080, &stru_100932268);
      sub_10048BC9C();
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_ERROR))
        sub_1006F867C();
    }
    else
    {
      *(_DWORD *)(a1 + 160) = 128;
    }
  }
  return sub_100034234((uint64_t)v6);
}

void sub_1004ADF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004ADF6C(uint64_t a1)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  NSObject *v9;
  int v10;
  void **v11;
  int v12;
  void **v13;
  void *v14[2];
  char v15;
  void *__p;
  uint64_t *v17;
  uint64_t v18;
  uint8_t buf[4];
  void **v20;
  __int16 v21;
  int v22;

  __p = 0;
  v17 = 0;
  v18 = 0;
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_100932288);
  v2 = sub_10006D888((uint64_t)off_100977890, (uint64_t **)&__p);
  v3 = (uint64_t *)__p;
  if (v2 || v17 == __p)
  {
    v4 = 0;
    goto LABEL_5;
  }
  v14[0] = sub_1004AE2FC;
  sub_1004AE4DC((uint64_t)__p, v17, (uint64_t (**)(uint64_t, uint64_t))v14, 126 - 2 * __clz(((char *)v17 - (_BYTE *)__p) >> 3), 1);
  v3 = (uint64_t *)__p;
  if (__p != v17)
  {
    while (1)
    {
      v6 = *(_DWORD *)(a1 + 164);
      if (!v6)
        goto LABEL_23;
      v7 = *v3;
      v8 = 1;
      while ((v6 & v8) == 0)
      {
LABEL_15:
        v8 *= 2;
        if (v8 > v6)
          goto LABEL_23;
      }
      if (sub_10043F65C(v7, v6 & v8))
        break;
      v9 = qword_100999800;
      if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v7, v14);
        v10 = v15;
        v11 = (void **)v14[0];
        v12 = sub_1004537F8(v7);
        *(_DWORD *)buf = 136446466;
        v13 = v14;
        if (v10 < 0)
          v13 = v11;
        v20 = v13;
        v21 = 1024;
        v22 = v12;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Checking device %{public}s with last seen time %u", buf, 0x12u);
        if (v15 < 0)
          operator delete(v14[0]);
      }
      sub_1004AE330((_QWORD *)a1, v7);
LABEL_23:
      if (++v3 == v17)
      {
        v4 = 1;
        v3 = (uint64_t *)__p;
        goto LABEL_5;
      }
    }
    v6 = *(_DWORD *)(a1 + 164);
    goto LABEL_15;
  }
  v4 = 1;
LABEL_5:
  if (v3)
  {
    v17 = v3;
    operator delete(v3);
  }
  return v4;
}

void sub_1004AE18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18)
{
  if (a16 < 0)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

BOOL sub_1004AE1CC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(a1 + 168);
  v2 = *(uint64_t **)(a1 + 176);
  if (v1 != v2)
  {
    v3 = *v1;
    *(_DWORD *)(a1 + 160) = 16;
    if (qword_10097B080 != -1)
      dispatch_once(&qword_10097B080, &stru_100932268);
    sub_10048BB30(qword_10097B078, v3);
  }
  *(_DWORD *)(a1 + 160) = 128;
  return v1 != v2;
}

void sub_1004AE260(int a1)
{
  if (a1)
  {
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_ERROR))
      sub_1006F86A8();
  }
}

uint64_t sub_1004AE2A4(uint64_t a1, uint64_t a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 8);
  *(_BYTE *)(a1 + 72) = 0;
  sub_100034234((uint64_t)v5);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80), a2);
}

BOOL sub_1004AE2FC(uint64_t a1, uint64_t a2)
{
  int v3;

  v3 = sub_1004537F8(a1);
  return v3 > (int)sub_1004537F8(a2);
}

void sub_1004AE330(_QWORD *a1, uint64_t a2)
{
  char **v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v4 = (char **)(a1 + 21);
  if (!sub_10046EA5C((uint64_t)(a1 + 21), a2))
  {
    v5 = a1[23];
    v6 = (uint64_t *)a1[22];
    if ((unint64_t)v6 >= v5)
    {
      v8 = ((char *)v6 - *v4) >> 3;
      if ((unint64_t)(v8 + 1) >> 61)
        abort();
      v9 = v5 - (_QWORD)*v4;
      v10 = v9 >> 2;
      if (v9 >> 2 <= (unint64_t)(v8 + 1))
        v10 = v8 + 1;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
        v12 = (char *)sub_10007ABA0((uint64_t)(a1 + 23), v11);
      else
        v12 = 0;
      v13 = (uint64_t *)&v12[8 * v8];
      v14 = &v12[8 * v11];
      *v13 = a2;
      v7 = v13 + 1;
      v16 = (char *)a1[21];
      v15 = (char *)a1[22];
      if (v15 != v16)
      {
        do
        {
          v17 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *--v13 = v17;
        }
        while (v15 != v16);
        v15 = *v4;
      }
      a1[21] = v13;
      a1[22] = v7;
      a1[23] = v14;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *v6 = a2;
      v7 = v6 + 1;
    }
    a1[22] = v7;
  }
}

void sub_1004AE414(id a1)
{
  operator new();
}

void sub_1004AE454()
{
  operator delete();
}

void sub_1004AE478(id a1)
{
  operator new();
}

void sub_1004AE4B8()
{
  operator delete();
}

uint64_t sub_1004AE4DC(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(*(a2 - 1), *v9);
        if ((_DWORD)result)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return sub_1004AE970(v9, v9 + 1, a2 - 1, (unsigned int (**)(_QWORD))a3);
      case 4uLL:
        return sub_1004AEE24(v9, v9 + 1, v9 + 2, a2 - 1, (unsigned int (**)(_QWORD))a3);
      case 5uLL:
        return sub_1004AEED4(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, (unsigned int (**)(_QWORD))a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return sub_1004AE81C((uint64_t)v9, a2, a3);
          else
            return sub_1004AE8DC((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            sub_1004AE970(&v9[v13 >> 1], v9, a2 - 1, (unsigned int (**)(_QWORD))a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_1004AE970(v9, &v9[v13 >> 1], a2 - 1, (unsigned int (**)(_QWORD))a3);
            sub_1004AE970(v9 + 1, v15 - 1, a2 - 2, (unsigned int (**)(_QWORD))a3);
            sub_1004AE970(v9 + 2, &v9[v14 + 1], a2 - 3, (unsigned int (**)(_QWORD))a3);
            sub_1004AE970(v15 - 1, v15, &v9[v14 + 1], (unsigned int (**)(_QWORD))a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*a3)(*(v9 - 1), *v9) & 1) == 0)
          {
            result = (uint64_t)sub_1004AEA5C(v9, a2, a3);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = sub_1004AEB68(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = sub_1004AEC80(v9, v17, (unsigned int (**)(_QWORD))a3);
          v9 = v17 + 1;
          result = sub_1004AEC80(v17 + 1, a2, (unsigned int (**)(_QWORD))a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = sub_1004AE4DC(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)sub_1004AEFAC((char *)v9, (char *)a2, a2, a3);
        return result;
    }
  }
}

uint64_t sub_1004AE81C(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if ((uint64_t *)result != a2)
  {
    v4 = (_QWORD *)result;
    v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      v7 = 0;
      v8 = (uint64_t *)result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        result = (*a3)(v9, v10);
        if ((_DWORD)result)
        {
          v11 = *v8;
          v12 = v7;
          while (1)
          {
            *(_QWORD *)((char *)v4 + v12 + 8) = *(_QWORD *)((char *)v4 + v12);
            if (!v12)
              break;
            result = (*a3)(v11, *(_QWORD *)((char *)v4 + v12 - 8));
            v12 -= 8;
            if ((result & 1) == 0)
            {
              v13 = (_QWORD *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }
          v13 = v4;
LABEL_10:
          *v13 = v11;
        }
        v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_1004AE8DC(uint64_t result, _QWORD *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _QWORD *v4;
  _QWORD *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  if ((_QWORD *)result != a2)
  {
    v4 = (_QWORD *)result;
    for (i = (_QWORD *)(result + 8); v4 + 1 != a2; i = v4 + 1)
    {
      v8 = *v4;
      v7 = v4[1];
      v4 = i;
      result = (*a3)(v7, v8);
      if ((_DWORD)result)
      {
        v9 = *v4;
        v10 = v4;
        do
        {
          v11 = v10;
          v12 = *--v10;
          *v11 = v12;
          result = (*a3)(v9, *(v11 - 2));
        }
        while ((result & 1) != 0);
        *v10 = v9;
      }
    }
  }
  return result;
}

uint64_t sub_1004AE970(_QWORD *a1, _QWORD *a2, _QWORD *a3, unsigned int (**a4)(_QWORD))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a2, *a1);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a3, *a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!((unsigned int (*)(_QWORD, _QWORD))*a4)(*a2, *a1))
      return 1;
    v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  v10 = *a1;
  if (!(_DWORD)result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(*a3))
      return 1;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

uint64_t *sub_1004AEA5C(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a2;
  v6 = *a1;
  if (((*a3)(*a1, *(a2 - 1)) & 1) != 0)
  {
    v7 = a1;
    do
    {
      v8 = v7[1];
      ++v7;
    }
    while (((*a3)(v6, v8) & 1) == 0);
  }
  else
  {
    v9 = a1 + 1;
    do
    {
      v7 = v9;
      if (v9 >= v4)
        break;
      ++v9;
    }
    while (!(*a3)(v6, *v7));
  }
  if (v7 < v4)
  {
    do
      v10 = *--v4;
    while (((*a3)(v6, v10) & 1) != 0);
  }
  while (v7 < v4)
  {
    v11 = *v7;
    *v7 = *v4;
    *v4 = v11;
    do
    {
      v12 = v7[1];
      ++v7;
    }
    while (!(*a3)(v6, v12));
    do
      v13 = *--v4;
    while (((*a3)(v6, v13) & 1) != 0);
  }
  if (v7 - 1 != a1)
    *a1 = *(v7 - 1);
  *(v7 - 1) = v6;
  return v7;
}

uint64_t *sub_1004AEB68(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = 0;
  v7 = *a1;
  do
    v8 = (*a3)(a1[++v6], v7);
  while ((v8 & 1) != 0);
  v9 = &a1[v6];
  v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2)
        break;
      v12 = *--a2;
    }
    while (((*a3)(v12, v7) & 1) == 0);
  }
  else
  {
    do
      v11 = *--a2;
    while (!(*a3)(v11, v7));
  }
  if (v9 < a2)
  {
    v13 = a2;
    v14 = v9;
    do
    {
      v15 = *v14;
      *v14 = *v13;
      *v13 = v15;
      do
      {
        v16 = v14[1];
        ++v14;
      }
      while (((*a3)(v16, v7) & 1) != 0);
      do
        v17 = *--v13;
      while (!(*a3)(v17, v7));
    }
    while (v14 < v13);
    v10 = v14 - 1;
  }
  if (v10 != a1)
    *a1 = *v10;
  *v10 = v7;
  return v10;
}

BOOL sub_1004AEC80(_QWORD *a1, _QWORD *a2, unsigned int (**a3)(_QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_1004AE970(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1004AEE24(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1004AEED4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      sub_1004AE970(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(_QWORD *)((char *)a1 + v14 + 24) = *(_QWORD *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v13, *((_QWORD *)v15 + 1)) & 1) == 0)
        {
          v16 = (_QWORD *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t sub_1004AEE24(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unsigned int (**a5)(_QWORD))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1004AE970(a1, a2, a3, a5);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a4, *a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
    if ((_DWORD)result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
      if ((_DWORD)result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_1004AEED4(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, unsigned int (**a6)(_QWORD))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1004AEE24(a1, a2, a3, a4, a6);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a5, *a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a4, *a3);
    if ((_DWORD)result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a3, *a2);
      if ((_DWORD)result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a2, *a1);
        if ((_DWORD)result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1004AEFAC(char *a1, char *a2, uint64_t *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[8 * v10];
      do
      {
        sub_1004AF100((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD))a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != (char *)a3)
    {
      v14 = (uint64_t *)a2;
      do
      {
        if ((*a4)(*v14, *(_QWORD *)a1))
        {
          v15 = *v14;
          *v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          sub_1004AF100((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD))a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = (char *)a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      v17 = a2 - 8;
      do
      {
        v18 = *(_QWORD *)a1;
        v19 = (char *)sub_1004AF220(a1, (unsigned int (**)(_QWORD, _QWORD))a4, v16);
        if (v17 == v19)
        {
          *(_QWORD *)v19 = v18;
        }
        else
        {
          *(_QWORD *)v19 = *(_QWORD *)v17;
          *(_QWORD *)v17 = v18;
          sub_1004AF2CC((uint64_t)a1, (uint64_t)(v19 + 8), a4, (v19 + 8 - a1) >> 3);
        }
        v17 -= 8;
      }
      while (v16-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

uint64_t sub_1004AF100(uint64_t result, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v10 = ((uint64_t)a4 - result) >> 2;
      v11 = v10 + 1;
      v12 = (_QWORD *)(result + 8 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(*v12, v12[1]))
      {
        ++v12;
        v11 = v13;
      }
      result = ((uint64_t (*)(_QWORD, _QWORD))*a2)(*v12, *v5);
      if ((result & 1) == 0)
      {
        v14 = *v5;
        do
        {
          v15 = v12;
          *v5 = *v12;
          if (v7 < v11)
            break;
          v16 = (2 * v11) | 1;
          v12 = (_QWORD *)(v6 + 8 * v16);
          if (2 * v11 + 2 < a3)
          {
            if ((*a2)(*v12, v12[1]))
            {
              ++v12;
              v16 = 2 * v11 + 2;
            }
          }
          result = ((uint64_t (*)(_QWORD, uint64_t))*a2)(*v12, v14);
          v5 = v15;
          v11 = v16;
        }
        while (!(_DWORD)result);
        *v15 = v14;
      }
    }
  }
  return result;
}

_QWORD *sub_1004AF220(_QWORD *a1, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1[v6 + 1], a1[v6 + 2]))
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t sub_1004AF2CC(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    v9 = (uint64_t *)(a2 - 8);
    result = (*a3)(*v8, *(_QWORD *)(a2 - 8));
    if ((_DWORD)result)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (uint64_t *)(v6 + 8 * v7);
        result = (*a3)(*v8, v10);
        v9 = v11;
      }
      while ((result & 1) != 0);
      *v11 = v10;
    }
  }
  return result;
}

_QWORD *sub_1004AF368(_QWORD *a1, const std::string *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  void *__p[2];
  char v12;
  uint64_t v13;
  _BYTE buf[12];
  char v15;

  *a1 = &off_1009322B8;
  a1[1] = 30000;
  a1[2] = 0;
  v4 = (std::string *)sub_100091AE8(a1 + 3, "");
  a1[6] = a1[1];
  std::string::operator=(v4, a2);
  v13 = 0;
  v5 = sub_100027F68();
  sub_100091AE8(buf, "ManagerStateWatchdog");
  sub_100091AE8(__p, "WatchdogDuration");
  v6 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, uint64_t *))(*(_QWORD *)v5 + 144))(v5, buf, __p, &v13);
  if (v13)
    v7 = v6;
  else
    v7 = 0;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
  {
    operator delete(*(void **)buf);
    if (!v7)
      return a1;
  }
  else if (!v7)
  {
    return a1;
  }
  v8 = v13;
  a1[6] = v13;
  v9 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Overriding fWatchdogDuration %llu.", buf, 0xCu);
  }
  return a1;
}

void sub_1004AF4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void **v22;

  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 + 47) < 0)
    operator delete(*v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004AF52C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1009322B8;
  sub_1004AF56C(a1);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_1004AF56C(uint64_t a1)
{
  NSObject *v1;
  NSObject *v3;
  _QWORD *v4;
  int v5;
  _QWORD *v6;

  v1 = *(NSObject **)(a1 + 16);
  if (v1)
  {
    v3 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
    {
      v4 = (_QWORD *)(a1 + 24);
      if (*(char *)(a1 + 47) < 0)
        v4 = (_QWORD *)*v4;
      v5 = 136315138;
      v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "ManagerStateWatchdog %s destroyed!", (uint8_t *)&v5, 0xCu);
      v1 = *(NSObject **)(a1 + 16);
    }
    dispatch_source_cancel(v1);
    dispatch_release(*(dispatch_object_t *)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
  }
}

void sub_1004AF644(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  dispatch_time_t v8;
  _QWORD handler[5];
  uint8_t buf[4];
  _QWORD *v11;
  __int16 v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
    {
      v3 = (_QWORD *)(a1 + 24);
      if (*(char *)(a1 + 47) < 0)
        v3 = (_QWORD *)*v3;
      v4 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 136315394;
      v11 = v3;
      v12 = 2048;
      v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ManagerStateWatchdog %s %llu ms Armed!", buf, 0x16u);
    }
    v5 = sub_1000419F4();
    v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v5 + 8));
    *(_QWORD *)(a1 + 16) = v6;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1004AF79C;
    handler[3] = &unk_100917378;
    handler[4] = a1;
    dispatch_source_set_event_handler(v6, handler);
    v7 = *(NSObject **)(a1 + 16);
    v8 = dispatch_time(0x8000000000000000, 1000000 * *(_QWORD *)(a1 + 48));
    dispatch_source_set_timer(v7, v8, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_activate(*(dispatch_object_t *)(a1 + 16));
  }
}

void sub_1004AF79C(uint64_t a1)
{
  sub_1004AF7AC(*(_QWORD *)(a1 + 32));
}

void sub_1004AF7AC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  __int128 *p_buf;
  os_log_t v9;
  os_log_t v10;
  __int128 buf;
  uint64_t v12;

  v1 = a1;
  sub_1004AF56C(a1);
  v2 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
  {
    v3 = (_QWORD *)(v1 + 24);
    if (*(char *)(v1 + 47) < 0)
      v3 = (_QWORD *)*v3;
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "ManagerStateWatchdog %s timer expired", (uint8_t *)&buf, 0xCu);
    v2 = qword_100999810;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
  {
    LOWORD(buf) = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Bad state watchdog", (uint8_t *)&buf, 2u);
  }
  if (qword_10097AA70 != -1)
    goto LABEL_16;
  while (1)
  {
    v4 = qword_10097AA68;
    sub_100091AE8(&buf, "ManagerStateWatchdog");
    sub_10047C59C(0.0, v4, (uint64_t *)&buf, (uint64_t *)(v1 + 24));
    if (SHIBYTE(v12) < 0)
      operator delete((void *)buf);
    buf = 0uLL;
    v12 = 0;
    (**(void (***)(__int128 *__return_ptr, uint64_t))v1)(&buf, v1);
    v1 = _os_log_pack_size(12);
    v5 = (char *)&buf - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v6 = __error();
    v7 = _os_log_pack_fill(v5, v1, *v6, &_mh_execute_header, "ManagerStateWatchdog is expired. %{public}s");
    p_buf = &buf;
    if (v12 < 0)
      p_buf = (__int128 *)buf;
    *(_DWORD *)v7 = 136446210;
    *(_QWORD *)(v7 + 4) = p_buf;
    v9 = os_log_create("com.apple.bluetooth", "CBCrash");
    if (v9)
      v10 = v9;
    else
      v10 = (os_log_t)&_os_log_default;
    qword_10097BA60 = os_log_pack_send_and_compose(v5, v10, 16, 0, 0);
    abort_with_payload(18, 2, v5, v1, qword_10097BA60, 0);
    __break(1u);
LABEL_16:
    dispatch_once(&qword_10097AA70, &stru_1009322C0);
  }
}

void sub_1004AF9CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 41) < 0)
    operator delete(*(void **)(v1 - 64));
  _Unwind_Resume(exception_object);
}

void sub_1004AF9F8(id a1)
{
  operator new();
}

uint64_t sub_1004AFA38(uint64_t a1, uint64_t a2, int a3)
{
  *(_QWORD *)a1 = off_100932248;
  sub_1000160D0(a1 + 8);
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = a3;
  *(_QWORD *)a1 = off_1009322F0;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = off_100932330;
  *(_QWORD *)(a1 + 96) = 0;
  sub_1000160D0(a1 + 104);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 172) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 96) = sub_100475BE0();
  return a1;
}

void sub_1004AFAD4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v7;
  void *v8;

  v7 = (void *)v1[25];
  if (v7)
  {
    v1[26] = v7;
    operator delete(v7);
  }
  v8 = *v5;
  if (*v5)
  {
    v1[23] = v8;
    operator delete(v8);
  }
  sub_100069BDC(v3);
  *v1 = v4;
  sub_100069BDC(v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1004AFB20(uint64_t a1, uint64_t a2)
{
  void *v4;
  unsigned __int8 *result;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v12 = 0;
  v11 = 0;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100932428);
  v4 = off_1009778E0;
  v13 = 0;
  sub_10004AD30((uint64_t)&v13);
  *(_QWORD *)&v10 = (int)v13;
  *((_QWORD *)&v10 + 1) = SWORD2(v13);
  result = sub_100470694((uint64_t)v4, a2, &v10, (BOOL *)&v11 + 1, (char *)&v11);
  if (result)
  {
    v6 = (uint64_t)result;
    v7 = (*(uint64_t (**)(_QWORD, unsigned __int8 *, int *, _QWORD))(**(_QWORD **)(a1 + 80) + 48))(*(_QWORD *)(a1 + 80), result, &v12, HIBYTE(v11));
    v10 = 0uLL;
    sub_10003415C((uint64_t)&v10, a1 + 104);
    v8 = v12;
    if ((v12 & 4) != 0 && !(_BYTE)v11)
    {
      sub_1004AFC68((_QWORD *)a1, v6);
      v8 = v12;
    }
    if ((v8 & 0x10) != 0)
      sub_1004AFD4C((_QWORD *)a1, v6);
    sub_100034264((uint64_t)&v10);
    v9 = 32;
    if (v7)
      v9 = 24;
    (*(void (**)(void))(**(_QWORD **)(a1 + 80) + v9))();
    return (unsigned __int8 *)sub_100034234((uint64_t)&v10);
  }
  return result;
}

void sub_1004AFC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1004AFC68(_QWORD *a1, uint64_t a2)
{
  char **v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v4 = (char **)(a1 + 25);
  if (!sub_10046EA5C((uint64_t)(a1 + 25), a2))
  {
    v5 = a1[27];
    v6 = (uint64_t *)a1[26];
    if ((unint64_t)v6 >= v5)
    {
      v8 = ((char *)v6 - *v4) >> 3;
      if ((unint64_t)(v8 + 1) >> 61)
        abort();
      v9 = v5 - (_QWORD)*v4;
      v10 = v9 >> 2;
      if (v9 >> 2 <= (unint64_t)(v8 + 1))
        v10 = v8 + 1;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
        v12 = (char *)sub_10007ABA0((uint64_t)(a1 + 27), v11);
      else
        v12 = 0;
      v13 = (uint64_t *)&v12[8 * v8];
      v14 = &v12[8 * v11];
      *v13 = a2;
      v7 = v13 + 1;
      v16 = (char *)a1[25];
      v15 = (char *)a1[26];
      if (v15 != v16)
      {
        do
        {
          v17 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *--v13 = v17;
        }
        while (v15 != v16);
        v15 = *v4;
      }
      a1[25] = v13;
      a1[26] = v7;
      a1[27] = v14;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *v6 = a2;
      v7 = v6 + 1;
    }
    a1[26] = v7;
  }
}

void sub_1004AFD4C(_QWORD *a1, uint64_t a2)
{
  char **v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v4 = (char **)(a1 + 22);
  if (!sub_10046EA5C((uint64_t)(a1 + 22), a2))
  {
    v5 = a1[24];
    v6 = (uint64_t *)a1[23];
    if ((unint64_t)v6 >= v5)
    {
      v8 = ((char *)v6 - *v4) >> 3;
      if ((unint64_t)(v8 + 1) >> 61)
        abort();
      v9 = v5 - (_QWORD)*v4;
      v10 = v9 >> 2;
      if (v9 >> 2 <= (unint64_t)(v8 + 1))
        v10 = v8 + 1;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
        v12 = (char *)sub_10007ABA0((uint64_t)(a1 + 24), v11);
      else
        v12 = 0;
      v13 = (uint64_t *)&v12[8 * v8];
      v14 = &v12[8 * v11];
      *v13 = a2;
      v7 = v13 + 1;
      v16 = (char *)a1[22];
      v15 = (char *)a1[23];
      if (v15 != v16)
      {
        do
        {
          v17 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *--v13 = v17;
        }
        while (v15 != v16);
        v15 = *v4;
      }
      a1[22] = v13;
      a1[23] = v7;
      a1[24] = v14;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *v6 = a2;
      v7 = v6 + 1;
    }
    a1[23] = v7;
  }
}

uint64_t sub_1004AFE30(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD v8[2];
  uint8_t buf[4];
  int v10;

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 104);
  v2 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
  {
    v3 = *(_DWORD *)(a1 + 168);
    *(_DWORD *)buf = 67109120;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Stepping scan with mode %u", buf, 8u);
  }
  v4 = *(_DWORD *)(a1 + 168);
  if (v4 > 3)
  {
    if (v4 != 4)
    {
      if (v4 != 16)
      {
LABEL_12:
        if (*(_BYTE *)(a1 + 172))
        {
          *(_BYTE *)(a1 + 172) = 0;
        }
        else
        {
          sub_100034264((uint64_t)v8);
          v6 = qword_100999800;
          if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67109120;
            v10 = 250;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Sleeping %u ms before ending scan", buf, 8u);
          }
          j__usleep(0x3D090u);
          sub_1004AE2A4(a1, 0);
        }
        return sub_100034234((uint64_t)v8);
      }
LABEL_11:
      if (sub_1004B0744(a1))
        return sub_100034234((uint64_t)v8);
      goto LABEL_12;
    }
LABEL_10:
    if (sub_1004B0000(a1))
      return sub_100034234((uint64_t)v8);
    goto LABEL_11;
  }
  if (v4)
  {
    if (v4 != 1)
      goto LABEL_12;
    goto LABEL_10;
  }
  v5 = sub_1004B0628(a1);
  if ((_DWORD)v5)
  {
    sub_100034264((uint64_t)v8);
    sub_1004AE2A4(a1, v5);
  }
  return sub_100034234((uint64_t)v8);
}

void sub_1004AFFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1004B0000(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v1 = *(uint64_t **)(a1 + 200);
  v2 = *(uint64_t **)(a1 + 208);
  if (v1 != v2)
  {
    v4 = *v1;
    v7 = 0;
    sub_100043758(&v7);
    v5 = sub_100181EEC((uint64_t)sub_1004B0870, v4 + 128, 4, a1);
    sub_10004339C(&v7);
    if ((_DWORD)v5)
    {
      *(_DWORD *)(a1 + 168) = 128;
      sub_1004AE2A4(a1, v5);
    }
    else
    {
      *(_DWORD *)(a1 + 168) = 4;
    }
    sub_100043728(&v7);
  }
  return v1 != v2;
}

void sub_1004B00A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B00B4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  __int128 v10;
  int v11;
  uint64_t v12;

  v11 = 0;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100932428);
  WORD2(v10) = WORD2(a3);
  LODWORD(v10) = a3;
  v8 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v10, 1);
  if (!a2)
  {
    v12 = 0;
    sub_10004AD30((uint64_t)&v12);
    *(_QWORD *)&v10 = (int)v12;
    *((_QWORD *)&v10 + 1) = SWORD2(v12);
    sub_10044054C(v8, a4, &v10);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v8);
  }
  (*(void (**)(_QWORD, uint64_t, int *, _QWORD))(**(_QWORD **)(a1 + 80) + 48))(*(_QWORD *)(a1 + 80), v8, &v11, 0);
  v10 = 0uLL;
  sub_10003415C((uint64_t)&v10, a1 + 104);
  sub_10046EA90((char **)(a1 + 200), v8);
  if ((v11 & 0x10) != 0)
    sub_1004AFD4C((_QWORD *)a1, v8);
  sub_100034264((uint64_t)&v10);
  sub_1004AFE30(a1);
  return sub_100034234((uint64_t)&v10);
}

void sub_1004B01E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1004B01F4()
{
  operator new();
}

void sub_1004B0268()
{
  operator new();
}

uint64_t sub_1004B02DC(uint64_t a1, uint64_t a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 104);
  sub_10046EA90((char **)(a1 + 176), a2);
  sub_100034264((uint64_t)v5);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), a2);
  sub_1004AFE30(a1);
  return sub_100034234((uint64_t)v5);
}

void sub_1004B034C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1004B0360(uint64_t a1)
{
  int v2;
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 8);
  v2 = *(unsigned __int8 *)(a1 + 72);
  sub_100034234((uint64_t)v3);
  if (v2)
  {
    sub_100253460();
  }
  else
  {
    sub_1004ADDA0(a1);
    sub_1004AFE30(a1);
  }
}

uint64_t sub_1004B03BC(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint8_t buf[4];
  int v23;

  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 104);
  v2 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 168);
    *(_DWORD *)buf = 67109120;
    v23 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopping scan with mode %u", buf, 8u);
  }
  v4 = *(_DWORD *)(a1 + 168);
  if (v4 > 3)
  {
    if (v4 == 4)
    {
      v11 = *(uint64_t **)(a1 + 200);
      if (v11 != *(uint64_t **)(a1 + 208))
      {
        v12 = *v11;
        *(_QWORD *)(a1 + 208) = v11;
        *(_DWORD *)(a1 + 168) = 128;
        sub_100034264((uint64_t)v21);
        buf[0] = 0;
        sub_100043758(buf);
        sub_100181FA0(v12 + 128, v13, v14, v15, v16, v17, v18, v19);
        sub_10004339C(buf);
        goto LABEL_15;
      }
    }
    else if (v4 == 16)
    {
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a1 + 176);
      *(_DWORD *)(a1 + 168) = 128;
      sub_100034264((uint64_t)v21);
      if (qword_10097B080 != -1)
        dispatch_once(&qword_10097B080, &stru_100932448);
      sub_10048BC9C();
    }
  }
  else if (v4)
  {
    if (v4 == 1)
    {
      *(_DWORD *)(a1 + 168) = 128;
      sub_100034264((uint64_t)v21);
      buf[0] = 0;
      sub_100043758(buf);
      sub_10018701C((uint64_t (*)(_QWORD, _QWORD))sub_1004B05BC, a1, v5, v6, v7, v8, v9, v10);
      sub_10004339C(buf);
LABEL_15:
      sub_100043728(buf);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 168) = 128;
  }
  return sub_100034234((uint64_t)v21);
}

void sub_1004B0580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1004B05BC(uint64_t a1, uint64_t a2)
{
  if (a2)
    operator new();
}

uint64_t sub_1004B0628(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  int v9;

  v2 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
  {
    v7[0] = 67109376;
    v7[1] = 4;
    v8 = 1024;
    v9 = 4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Scanning for %u scan periods (%u x 1.28s)", (uint8_t *)v7, 0xEu);
  }
  LOBYTE(v7[0]) = 0;
  sub_100043758(v7);
  v5 = sub_100186F74(10390323, 4, 64, (uint64_t (*)(_QWORD, _QWORD))sub_1004B07D8, sub_1004B05BC, a1, v3, v4);
  if (!(_DWORD)v5)
    *(_DWORD *)(a1 + 168) = 1;
  sub_100043728(v7);
  return v5;
}

void sub_1004B0728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  sub_100043728(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1004B0744(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(a1 + 176);
  v2 = *(uint64_t **)(a1 + 184);
  if (v1 != v2)
  {
    v3 = *v1;
    *(_DWORD *)(a1 + 168) = 16;
    if (qword_10097B080 != -1)
      dispatch_once(&qword_10097B080, &stru_100932448);
    sub_10048BB30(qword_10097B078, v3);
  }
  *(_DWORD *)(a1 + 168) = 128;
  return v1 != v2;
}

uint64_t sub_1004B07D8(uint64_t result)
{
  if (result)
    operator new();
  return result;
}

void sub_1004B084C()
{
  operator delete();
}

void sub_1004B0870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
    operator new();
}

void sub_1004B0900()
{
  operator delete();
}

